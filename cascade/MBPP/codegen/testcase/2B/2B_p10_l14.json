[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements([1,2,3,4,5], [1,2,3,4,5]) == [[1, 2, 3], [4, 5]]\nassert     similar_elements([1,2,3,4,5], [1,3,4,5,6]) == [[1, 3], [4, 5]]\nassert     similar_elements([1,2,3,4,5], [1,2,3,5,6]) == [[1, 2, 3], [5]]\nassert     similar_elements([1,2,3,4,5], [1,2,3]) == [[1, 2, 3]]\nassert     similar_elements([1,2,3,4,5], [1,2,4,5,6]) == [[1, 2], [4, 5]]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements((0,1,2,3,4),(1,2,3)) == (1,2,3), \"Incorrect result\"\nassert     similar_elements((1,1,1,1,1),(1,1,1)) == (1,1,1), \"Incorrect result\"\nassert     similar_elements((3,2,3,2,3),(2,2,2,2,2)) == (2,2,2), \"Incorrect result\"\nprint(\"\\nCorrect!\")\n\n'''\nThe first task is to write a function `similar_elements(test_tup1, test_tup2)` that receives two tuples (a, b, c, d, e) as test arguments.\nThe function must compare two tuples, and return a tuple with only the shared elements.\nNote that a, b, c, d and e are assumed to be non-empty and unique.\n\nGiven tuples are compared using the function `<`, `>`, `<=`, `>=` and `==`.\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('\\n\\n*** Similar Elements ***')\ntest_tup1 = (1, 4, 8, 10, 12, 15)\ntest_tup2 = (1, 4, 8)\nsimilar_elements(test_tup1, test_tup2)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     similar_elements((1,2), (2,3)) == (2,), \"Error\"\nassert     similar_elements((1,2,3,4,5), (2,3,4,5,6)) == (4,5), \"Error\"\nassert     similar_elements((2,3,4), (3,4,5)) == (), \"Error\"\nassert     similar_elements((1,2,3,4,5), (2,3,4,5,6)) == (4,5), \"Error\"\nassert     similar_elements((1,2), (2,3,4,5)) == (1,2), \"Error\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements((1, 2, 3, 4), (2, 4, 5, 6)) == (2, 4)\nassert     similar_elements((1, 2, 3, 4), (1, 3, 5, 7)) == (1, 3)\nassert     similar_elements((1, 2, 3, 4), (2, 3, 5, 6)) == (2, 3, 5)\nassert     similar_elements((1, 2, 3, 4), (1, 3, 5, 6, 7)) == (1, 3, 5)\nassert     similar_elements((1, 2, 3, 4), (1, 3, 5, 6, 7, 8, 9)) == (1, 3, 5)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements((1,2,3),(1,2,4)) == ((1,2),(3,4)), \"Same elements\"\nassert     similar_elements((1,2,3),(1,2,3)) == ((1,2),(3,)), \"Same elements\"\nassert     similar_elements((1,2,3),(1,2,4,5)) == ((1,2),(3,)), \"Same elements\"\nassert     similar_elements((1,2,3,4),(1,2,4,5)) == ((1,2),(3,4)), \"Same elements\"\nassert     similar_elements((1,2,3,4),(1,2,3,4)) == ((1,2),(3,4)), \"Same elements\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements(('a', 'c'), ('b', 'd')) == ('b', 'c')\nassert     similar_elements(('1', '5'), ('2', '4')) == ('1', '2')\nassert     similar_elements(('a', 'c'), ('a', 'd')) == ('a', 'd')\nassert     similar_elements(('a', 'b'), ('a', 'c', 'd')) == ('a', 'b')\nassert     similar_elements(('a', 'b'), ('b', 'c', 'd')) == ('b', 'c')\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     similar_elements(['a','b','c'], ['b','d','e']) == ['b']\nassert     similar_elements(['a','b','c'], ['a','b','c']) == ['a','b','c']\nassert     similar_elements(['a','b','c'], ['a','b','c','d']) == ['a','b','c']\nassert     similar_elements(['a','b','c'], ['a','c','d']) == ['a','c']\nassert     similar_elements(['a','b','c'], ['a','d','e']) == []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         similar_elements([1, 2, 3, 4], [5, 6, 7, 8]) == (1, 5), \"similar_elements should return (1, 5)\"\nassert         similar_elements([1, 1, 2, 2], [1, 1, 2, 2]) == (1, 1), \"similar_elements should return (1, 1)\"\nassert         similar_elements([1, 1, 2, 2], [1, 1, 3, 4]) == (1, 1), \"similar_elements should return (1, 1)\"\nassert         similar_elements([1, 1, 2, 2], [1, 1, 2, 3]) == (1, 1), \"similar_elements should return (1, 1)\"\nassert         similar_elements([1, 2, 3, 4], [1, 2, 3, 4]) == (1, 2), \"similar_elements should return (1, 2)\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements((1,2,3,4,5,6), (2,4,6,8,10)) == True\nassert     similar_elements((1,2,3,4,5,6), (4,6,10)) == False\nassert     similar_elements((1,2,3,4,5,6), (4,6,7,8,9,10)) == False\nassert     similar_elements((1,2,3,4,5,6), (6,7,8,9,10)) == False\nassert     similar_elements((1,2,3,4,5,6), (2,4,7,8,10)) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_not_prime(17)\nassert not is_not_prime(2)\nassert not is_not_prime(4)\nassert not is_not_prime(6)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_not_prime(1) == False, \"1 is not prime\"\nassert     is_not_prime(2) == False, \"2 is not prime\"\nassert     is_not_prime(3) == False, \"3 is not prime\"\nassert     is_not_prime(5) == False, \"5 is not prime\"\nassert     is_not_prime(7) == True, \"7 is prime\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(2) == True\nassert     is_not_prime(3) == True\nassert     is_not_prime(11) == False\nassert     is_not_prime(13) == True\nassert     is_not_prime(3.5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef largest_prime_factor(n):\n    '''\n    Write a python function that find the largest prime factor of the given number.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(1) == False, 'Test 1 did not pass'\nassert     is_not_prime(2) == False, 'Test 2 did not pass'\nassert     is_not_prime(3) == True, 'Test 3 did not pass'\nassert     is_not_prime(4) == False, 'Test 4 did not pass'\nassert     is_not_prime(5) == False, 'Test 5 did not pass'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(2) == True, \"The is_not_prime should be True for 2\"\nassert     is_not_prime(1) == False, \"The is_not_prime should be False for 1\"\n\ndef get_inverse_of_number(n):\n    '''\n    Write a python function to compute the inverse of a number.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(2) == True, \"is_not_prime(2) should be True\"\nassert is_not_prime(5) == True, \"is_not_prime(5) should be True\"\nassert is_not_prime(7) == False, \"is_not_prime(7) should be False\"\nassert is_not_prime(11) == False, \"is_not_prime(11) should be False\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([1, 3, 5, 7, 9, 11], 3) == [11, 9, 7, 5, 3]\nassert     heap_queue_largest([1, 2, 3, 4], 2) == [4, 3]\nassert     heap_queue_largest([3, 5, 8, 7, 9], 3) == [9, 7, 5]\nassert     heap_queue_largest([], 5) == []\nassert     heap_queue_largest([], 1) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([1, 2, 3, 4, 5],1) == [5, 4, 3, 2, 1]\nassert     heap_queue_largest([1, 2, 3, 4, 5],2) == [5, 4, 3, 2, 1]\nassert     heap_queue_largest([1, 2, 3, 4, 5],3) == [5, 4, 3, 2, 1]\nassert     heap_queue_largest([1, 2, 3, 4, 5],4) == [5, 4, 3, 2, 1]\nassert     heap_queue_largest([1, 2, 3, 4, 5],5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_queue_largest([3,4,5,2,1,6,0,-1],2) == [6, 5, 1]\nassert     heap_queue_largest([3,4,5,2,1,6,0,-1],3) == [-1, 0, 1]\nassert     heap_queue_largest([3,4,5,2,1,6,0,-1],0) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([-5,2,1,5,6,-3],3) == [-5,6,5], \"Should return [-5, 6, 5]\"\nassert     heap_queue_largest([1,2,3,4,5],5) == [-5, -4, -3, -2, -1], \"Should return [-5, -4, -3, -2, -1]\"\nassert     heap_queue_largest([],5) == [], \"Should return []\"\nassert     heap_queue_largest([-1,0,0,0,0,0,0],6) == [-1, -1, -1, -1, -1, 0], \"Should return [-1, -1, -1, -1, 0]\"\n\ndef heap_queue_largest_2(nums,n):\n    '''\n    A Python implementation of Heap Sort \n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([1,2,3,4,5],4) == [4,5,3,2,1], \"heap_queue_largest([1,2,3,4,5],4) == [4,5,3,2,1]\"\nassert     heap_queue_largest([1,2,3,4,5],3) == [5,4,3,2,1], \"heap_queue_largest([1,2,3,4,5],3) == [5,4,3,2,1]\"\nassert     heap_queue_largest([1,2,3,4,5],2) == [5,4,3,2], \"heap_queue_largest([1,2,3,4,5],2) == [5,4,3,2]\"\nassert     heap_queue_largest([1,2,3,4,5],1) == [5], \"heap_queue_largest([1,2,3,4,5],1) == [5]\"\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # build a min heap\n    hq.heapify(nums)\n    # n = 5\n    # nums = [1,2,3,4,5]\n    print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_queue_largest([3,2,3,1,2,4,5,5,6],4)==[4,5,5,6]\nassert     heap_queue_largest([1,1,1],1)==[1]\nassert     heap_queue_largest([3,2,3,1,2,4,5,5,6],0)==[]\nassert     heap_queue_largest([],0)==[]\nassert     heap_queue_largest([1,1,1],0)==[1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([1,2,3,4,5],3) == [5,4,3], 'Wrong output'\nassert     heap_queue_largest([1,2,3,4,5],1) == [5], 'Wrong output'\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     heap_queue_largest([1,2,3,4],2) == [4,3], \"Wrong result\"\nassert     heap_queue_largest([5,1,2,3,4],1) == [5], \"Wrong result\"\nassert     heap_queue_largest([5,1,2,3,4],3) == [5,3,4], \"Wrong result\"\nassert     heap_queue_largest([5,1,2,3,4],2) == [5,4], \"Wrong result\"\nassert     heap_queue_largest([5,1,2,3,4],1) == [5], \"Wrong result\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nis_Power_Of_Two(3) == False, \"is_Power_Of_Two() failed to check that 3 is not a power of two\"\nassert \nis_Power_Of_Two(5) == False, \"is_Power_Of_Two() failed to check that 5 is not a power of two\"\nassert \nis_Power_Of_Two(16) == True, \"is_Power_Of_Two() failed to check that 16 is a power of two\"\nassert \nis_Power_Of_Two(32) == True, \"is_Power_Of_Two() failed to check that 32 is a power of two\"\nassert \nis_Power_Of_Two(64) == True, \"is_Power_Of_Two() failed to check that 64 is a power of two\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (is_Power_Of_Two(3)==False), \"is_Power_Of_Two function returns False for 3\"\nassert     (is_Power_Of_Two(4)==True), \"is_Power_Of_Two function returns True for 4\"\nassert     (is_Power_Of_Two(7)==True), \"is_Power_Of_Two function returns True for 7\"\nassert     (is_Power_Of_Two(8)==False), \"is_Power_Of_Two function returns False for 8\"\nassert     (is_Power_Of_Two(33)==False), \"is_Power_Of_Two function returns False for 33\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_Power_Of_Two2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(10) == False\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(14) == True\nassert     is_Power_Of_Two(12) == False\nassert     is_Power_Of_Two(5) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_Power_Of_Two(16) == True \nassert is_Power_Of_Two(17) == False\nassert is_Power_Of_Two(5) == False \nassert is_Power_Of_Two(1000) == True \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two (15) == False, \"15 is not a power of two\"\nassert     is_Power_Of_Two (128) == True, \"128 is a power of two\"\nassert     is_Power_Of_Two (9) == False, \"9 is not a power of two\"\nassert     is_Power_Of_Two (10) == True, \"10 is a power of two\"\nassert     is_Power_Of_Two (1) == True, \"1 is a power of two\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two(1) == False,'first test case'\nassert     is_Power_Of_Two(2) == True,'second test case'\nassert     is_Power_Of_Two(3) == False,'third test case'\nassert     is_Power_Of_Two(11) == True,'fourth test case'\nassert     is_Power_Of_Two(112) == True,'fifth test case'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntext = \"Samriddhi's interview: My name is Samriddhi. What is my name?\"\nassert \nassert \nassert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_char_long(\"Python is great\") == ['Python'], \"Should return only one word\"\nassert find_char_long(\"i am an asshole\") == ['i', 'am', 'an', 'asshole'], \"Should return only one word\"\nassert find_char_long(\"This is an example of a sentence with unwanted character\") == ['This', 'is', 'an', 'example', 'of', 'a','sentence', 'with', 'unwanted', 'character'], \"Should return only one word\"\n\n\ndef find_char_long_regex(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('Some_string') == True, 'find_char_long returns false'\nassert     find_char_long('4abcdefg5') == True, 'find_char_long returns false'\nassert     find_char_long('ab5g') == False, 'find_char_long returns false'\nassert     find_char_long('abc5g') == False, 'find_char_long returns false'\nassert     find_char_long('abc') == False, 'find_char_long returns false'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long(\"tata\") == ['tata']\nassert     find_char_long(\"cat\") == ['cat']\nassert     find_char_long(\"catcat\") == ['cat', 'cat']\nassert     find_char_long(\"catcatcat\") == ['cat', 'cat', 'cat']\nassert     find_char_long(\"catcatcatcat\") == ['cat', 'cat', 'cat', 'cat']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long('aaa-bbb_ccc') ==     ['aaa', 'bbb', 'ccc']\nassert     find_char_long('AaAa') ==     ['AaAa']\nassert     find_char_long('AaAaA') ==     ['AaAaA']\nassert     find_char_long('aAaaAaaa') ==    ['aAaaAaaa']\n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long('Check whether this is a unit test for your solution to the previous problem') == ['Check', 'this', 'is', 'a', 'unit', 'test', 'for', 'your','solution']\nassert     find_char_long('There is an extra test here that looks like a test') == ['There', 'is', 'an', 'extra', 'test', 'look', 'like', 'a', 'test']\nassert     find_char_long('I\\'ll test your code now! I believe you\\'ll test it well.') == ['I', '\\'ll', 'test', 'your', 'code', 'now!', 'I', 'believe', 'you', '\\'ll', 'test', 'it', 'well']\n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at most 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long(\"this is a test\") == [\"test\"]\nassert     find_char_long(\"hello world\") == []\nassert     find_char_long(\"a four letter word\") == [\"four letter word\"]\nassert     find_char_long(\"another four word\") == []\nassert     find_char_long(\"a short word\") == [\"short word\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_char_long_v2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #pass\n    return [word for word in text.split() if len(word)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntext1 = \"abcdefghijklmnopqrstuvwxyz\"\ntext2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ntext3 = \"0123456789\"\ntext4 = \"!@#$%^&*()\"\n\nassert find_char_long(text1) == [\"abc\", \"def\"]\nassert find_char_long(text2) == [\"ABC\"]\nassert find_char_long(text3) == [\"12\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_nums([0,1,4,9,16,25]) == [0, 1, 4, 9, 16, 25]\nassert     square_nums([-2,2,-7,7]) == [-4, 4, -9, 9]\nassert     square_nums([-1,-2,-3,-4,-5]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums(4) == 16\nassert     square_nums([1, 4, 9]) == [1, 16, 81]\nassert     square_nums([0, 4, 9]) == [0, 16, 81]\nassert     square_nums([4]) == 16\nassert     square_nums([4, 4, 4, 4]) == 64\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef make_word(word, num):\n    '''\n    Make a word with the first and last letter capitalized.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_nums([1, 4, 9, 16]) == [[1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 16]]\nassert not     square_nums([1, 4, 9, 16]) == [[1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 16]]"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnums = [1,2,3,4,5]\nsquare_nums(nums)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Test passed!')\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert not square_nums([1, 0, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_Rotations_list(l):\n    # replace with your code\n    \n    # finding the minimum number of rotations\n    # to make the input string equal to the output string\n    count = 0\n    for i in range(len(l)):\n        if l[i]!= l[-i - 1]:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations('abc') == 0, 'Wrong answer!'\nassert     find_Rotations('aac') == 1, 'Wrong answer!'\nassert     find_Rotations('abc') == 1, 'Wrong answer!'\nassert     find_Rotations('aaaa') == 5, 'Wrong answer!'\nassert     find_Rotations('abac') == 3, 'Wrong answer!'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_Rotations(\"d\") == 0, \"1st case\"\n    find_Rotations(\"a\") == 1, \"2nd case\"\n    find_Rotations(\"ba\") == 1, \"3rd case\"\n    find_Rotations(\"baaa\") == 2, \"4th case\"\n    find_Rotations(\"abcba\") == 2, \"5th case\"\n    find_Rotations(\"abcabcabc\") == 3, \"6th case\"\n    find_Rotations(\"abccba\") == 3, \"7th case\"\n    find_Rotations(\"abcabcabca\") == 4, \"8th case\"\n    find_Rotations(\"abcabcabc\") == 4, \"9th case\"\n    find_Rotations(\"abc\") == 0, \"10th case\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\")())\") == 2 \nassert     find_Rotations(\"()()()\") == 0\nassert     find_Rotations(\"(())\") == 0\n\ndef find_Rotations_Brute_Force(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"abc\") == 0, \"wrong\"\nassert     find_Rotations(\"abcd\") == 1, \"wrong\"\nassert     find_Rotations(\"abcdabc\") == 0, \"wrong\"\nassert     find_Rotations(\"abcdabcd\") == 1, \"wrong\"\nassert     find_Rotations(\"abcdabcdabc\") == 0, \"wrong\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_Rotations(str) == 3\n\ndef count_consecutive_seq(str, a, b):\n    '''\n    Write a python function to find the number of consecutive substrings that are same from the string str.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations('abc') ==     1\nassert     find_Rotations('ABC') ==     1\nassert     find_Rotations('abcdefgh') ==     4\nassert     find_Rotations('aabbccdde') ==     8\nassert     find_Rotations('aabbccdd') ==     5\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations(\"bob\") == 1, \"Should return 1 for bob\"\nassert     find_Rotations(\"google\") == 3, \"Should return 3 for google\"\nassert     find_Rotations(\"josh\") == 5, \"Should return 5 for josh\"\nassert     find_Rotations(\"python\") == 0, \"Should return 0 for python\"\nassert     find_Rotations(\"micro\") == 0, \"Should return 0 for micro\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_Rotations(\"gfg\") == 3\nfind_Rotations(\"abc\") == 0\nfind_Rotations(\"cb\") == 1\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert remove_Occ('abcd','b') == 'abcd', \"remove_Occ\"\nassert remove_Occ('abcd','z') == 'abcd', \"remove_Occ\"\nassert remove_Occ('z', 'z') == '', \"remove_Occ\"\nassert remove_Occ('abcd', 'y') == 'abcd', \"remove_Occ\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef print_output(s): \n    '''\n    Write a python function to print output as specified.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ(\"abcab\", 'a') == \"bcab\"\nassert     remove_Occ(\"abcab\", 'b') == \"acab\"\nassert     remove_Occ(\"abcab\", 'c') == \"abcab\"\nassert     remove_Occ(\"abcab\", 'd') == \"abcab\"\nassert     remove_Occ(\"abcab\", 'z') == \"abcab\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ('saksham','a')== 'ksmm'\nassert     remove_Occ('saksham','o')=='skmm'\nassert     remove_Occ('saksham','m')== 'kshm'\nassert     remove_Occ('saksham','l')=='sksh'\nassert     remove_Occ('saksham','sh')== 'ksak'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nProblem Description:\n\nWrite a python program to remove first and last occurrence of a given character from the string.\n\n** Input:\n\n'awesome programming is fun'\n'p'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_Occ('abc', 'c') == 'ab'\nassert     remove_Occ('abc', 'a') == 'b'\nassert     remove_Occ('abc', 'z') == 'abc'\nassert     remove_Occ('abcd', 'a') == 'bcd'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ(\"aba\",'a')=='b'\nassert     remove_Occ(\"aba\",'b')=='a'\nassert     remove_Occ(\"abc\",'b')=='abc'\nassert     remove_Occ(\"aabbc\",'a')=='bc'\nassert     remove_Occ(\"xyzz\",'z')=='xy'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([\n                    [6, 1, 2, 7, 0, 9],\n                    [7, 4, 8, 4, 5, 1],\n                    [3, 2, 7, 1, 8, 0],\n                    [1, 1, 5, 6, 6, 0],\n                    [1, 5, 7, 3, 5, 2],\n                    [6, 1, 7, 6, 7, 8]\n                ]) == \\\n    [[1, 1, 1, 2, 2, 2],\n     [1, 2, 3, 4, 5, 6],\n     [6, 6, 7, 8, 9, 7],\n     [7, 4, 8, 4, 5, 1],\n     [7, 5, 1, 8, 0, 3],\n     [3, 2, 7, 1, 8, 0]\n     ]\n\ndef sort_matrix_II(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([\n  [1,3,2,4,6,8],\n  [4,4,2,4,2,8],\n  [3,9,8,5,8,4],\n  [9,4,7,3,6,4],\n  [8,2,7,1,9,9],\n  [3,2,8,7,5,3],\n  [4,7,7,2,5,9]]) == [\n    [2,2,2,4,4,4,6,8],\n    [3,4,4,4,9,9,5,8],\n    [4,4,7,3,3,3,5,9],\n    [6,8,7,5,5,5,5,9],\n    [9,7,5,3,3,8,8,4],\n    [8,3,2,1,7,7,9,9],\n    [1,3,4,2,4,4,4,9]\n    ]\n\nprint(\"Test Pass!\""
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([\n            [1, 2, 3],\n            [0, 5, 7],\n            [4, 6, 8]\n        ]) ==  [\n            [0, 1, 2],\n            [4, 5, 6],\n            [4, 5, 6]\n        ]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[1,2,3], [3,2,1], [1,3,4]]) == [[1,3,1], [1,3,4], [2,2,3]]\nassert     sort_matrix([[-1,2,3], [-3,2,1], [-1,3,4]]) == [[-1,1,3], [-3,2,2], [-1,3,4]]\nassert     sort_matrix([[-1,2,3], [3,2,1], [1,3,4]]) == [[-1,1,3], [-1,3,4], [-3,2,2]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[-10,-2,4,5],[1,-3,5,9],[4,-5,7,3]]) == [[-10,-2,4,5],[1,-3,5,9],[4,-5,7,3]]\nassert     sort_matrix([[-10,0,4,5],[1,-3,5,9],[4,-5,7,3]]) == [[-10,0,4,5],[1,-3,5,9],[4,-5,7,3]]\nassert     sort_matrix([[0,0,0,0],[0,0,0,0],[0,0,0,0]]) == [[0,0,0,0],[0,0,0,0],[0,0,0,0]]\nassert     sort_matrix([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]) == [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]\nassert     sort_matrix([[0,-1,2,0,0],[0,1,0,3,0],[0,2,0,0,0],[0,0,3,0,0],[0,0,-1,0,0]]) == [[0,-1,2,0,0],[0,1,0,3,0],[0,2,0,0,0],[0,0,3,0,0],[0,0,-1,0,0]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Your code here\n\n    if len(M) < 1:\n        return M\n\n    S = M[0]\n    S.sort()\n\n    for i in range(1, len(M)):\n        m = M[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[1,5,7],\n                      [5,4,2],\n                      [9,3,0]]) == [[1,5,7],\n                    [5,4,2],\n                    [9,3,0]]\n\nassert     sort_matrix([[4,3,5,1],\n                      [3,2,6,4],\n                      [6,7,3,8]]) == [[1,4,3,5],\n                    [3,2,6,4],\n                    [6,7,3,8]]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(3, 4, 5) == 5*1/3\nassert     find_Volume(1, 4, 5) == 1*1/3\nassert     find_Volume(3, 4, 1) == 1*1/3\nassert     find_Volume(1, 4, 2) == 2*1/3\nassert     find_Volume(1, 4, 5) == 5*1/3"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume([0,0,0], [0,0,0], [0,0,1]) == 0\nassert     find_Volume([0,0,0], [-1,1,1], [1,1,1]) == 1\nassert     find_Volume([0,0,0], [1,2,1], [3,4,3]) == "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Correct')"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(0,1,3) == 6.0, 'Volume is wrong'\nassert     find_Volume(3,4,5) == 60.0, 'Volume is wrong'\nassert     find_Volume(4,5,6) == 120.0, 'Volume is wrong'\n\nprint('Test passed'"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(1,2,3) == 4\nassert     find_Volume(1,1,2) == 2.5\nassert     find_Volume(1,2,1) == 0.5\n\n\ndef find_Volume(a,b,c):\n    '''\n    Write a python function to find the volume of a cuboid.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find_Volume(5,4,3) == 10\nassert find_Volume(5,7,7) == 20\nassert find_Volume(4,2,5) == 20\nassert find_Volume(3,3,7) == 21\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume([3,1,2],[2,4,2],[5,5,5]) == 3, \\\n        \"The output for find_Volume([3,1,2],[2,4,2],[5,5,5] ) is incorrect\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(1,1,1) == 1.0\nassert     find_Volume(5,8,3) == 12.0\n\nprint('All test passed')"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"aaBc_dde\") == True\nassert     text_lowercase_underscore(\"AAbb_ccCCdddd\") == False\n\ndef text_lowercase_digits(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with a digit and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore(\"\")    == True\nassert     text_lowercase_underscore(\"This Is Just A Test\")    == True\nassert     text_lowercase_underscore(\"This is a test\")    == False\nassert     text_lowercase_underscore(\"This is A TEST\")    == False\nassert     text_lowercase_underscore(\"this is a test\")    == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore(\n\"\"\"\nthis_is_a_test\n\"\"\") == True, \"Upper case should be False\"\n\nassert     text_lowercase_underscore(\n\"\"\"\nthis_is_a_test\n\"\"\") == False, \"Lower case should be False\"\n\nassert     text_lowercase_underscore(\n\"\"\"\n123_test\n\"\"\") == False, \"Underscore should be False\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore(\"\") == True, \"Tests must pass\"\nassert     text_lowercase_underscore(\"abcdefghijklmnopqrstuvwxyz\") == True, \"Tests must pass\"\nassert     text_lowercase_underscore(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == True, \"Tests must pass\"\nassert     text_lowercase_underscore(\"a1b2c3d4e\") == False, \"Tests must pass\"\nassert     text_lowercase_underscore(\"ab_c\") == False, \"Tests must pass\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore(\"a_1b_2_3\") == True\nassert     text_lowercase_underscore(\"1_2_3\") == False\nassert     text_lowercase_underscore(\"1_a_2_3\") == False\nassert     text_lowercase_underscore(\"1_2a_3\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('ab_c') == True\nassert     text_lowercase_underscore('abc_d') == False\nassert     text_lowercase_underscore('aBc_d') == True\nassert     text_lowercase_underscore('a_b_c_d') == True\nassert     text_lowercase_underscore('A_B_C_D') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('abc_123') == True\nassert     text_lowercase_underscore('a2b_3c') == True\nassert     text_lowercase_underscore('0a3b_c') == False\nassert     text_lowercase_underscore('_abc') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_startswith_dot(text):\n    '''\n    Write a function to that returns true if the input string starts with a dot and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('Hello World!') == True, 'incorrect result'\nassert     text_lowercase_underscore('HELLO WORLD!') == False, 'incorrect result'\nassert     text_lowercase_underscore('HELLO WORLD! ') == False, 'incorrect result'\nassert     text_lowercase_underscore('hello') == False, 'incorrect result'\nassert     text_lowercase_underscore('1Hello') == False, 'incorrect result'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore(\"0abc_\") == False\nassert     text_lowercase_underscore(\"0a_b_c\") == True\nassert     text_lowercase_underscore(\"abc0\") == False\nassert     text_lowercase_underscore(\"_abc\") == False\nassert     text_lowercase_underscore(\"abc_\") == False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_perimeter(1) == 4, 'Wrong!'\nassert     square_perimeter(2) == 6, 'Wrong!'\nassert     square_perimeter(3) == 8, 'Wrong!'\nassert     square_perimeter(4) == 12, 'Wrong!'\nassert     square_perimeter(5) == 16, 'Wrong!'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_perimeter(3) == 4\nassert square_perimeter(4) == 8\nassert square_perimeter(9) == 18"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(3) == 4\nassert     square_perimeter(5) == 14\nassert     square_perimeter(6) == 18\nassert     square_perimeter(9) == 36\nassert     square_perimeter(10) == 46\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_perimeter(1) == 2, 'wrong output'\nassert     square_perimeter(2) == 4, 'wrong output'\nassert     square_perimeter(3) == 6, 'wrong output'\nassert     square_perimeter(4) == 8, 'wrong output'\nassert     square_perimeter(5) == 10, 'wrong output'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_perimeter(4) == 8, \"square_perimeter is not correct\"\nassert square_perimeter(0) == 0, \"square_perimeter is not correct\"\nassert square_perimeter(1) == 4, \"square_perimeter is not correct\"\nassert square_perimeter(2) == 4, \"square_perimeter is not correct\"\nassert square_perimeter(3) == 6, \"square_perimeter is not correct\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert square_perimeter(2) == 4\nassert square_perimeter(3) == 6\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(1) == 1, 'Failed 1'\nassert     square_perimeter(2) == 4, 'Failed 2'\nassert     square_perimeter(3) == 9, 'Failed 3'\nassert     square_perimeter(4) == 16, 'Failed 4'\nassert     square_perimeter(5) == 25, 'Failed 5'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_perimeter(1) == 1, \n    \"error in square_perimeter\"\nassert     square_perimeter(2) == 4, \n    \"error in square_perimeter\"\nassert     square_perimeter(3) == 9, \n    \"error in square_perimeter\"\nassert     square_perimeter(4) == 16, \n    \"error in square_perimeter\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list(\"aba\") == \"a\", \"Test 1 fails\"\nassert     str_to_list(\"aab\") == \"a\", \"Test 2 fails\"\nassert     str_to_list(\"\") == \"\", \"Test 3 fails\"\nassert     str_to_list(\"ab\") == \"\", \"Test 4 fails\"\n\ndef char_to_binary(char):\n    '''\n    Write a function to convert a character into its binary equivalent.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    str_to_list(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert str_to_list('123') == ['1', '2', '3']\n    assert str_to_list('abc') == ['a', 'b', 'c']\n    assert str_to_list('aabb') == ['a', 'a', 'b', 'b']\n    "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef list_to_str(list): \n    '''\n    Write a function to convert the list of integers to the string and return it.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not str_to_list('abcd')\nassert not str_to_list('fgh')\nassert str_to_list('asdf') == 'dsf'\nassert str_to_list('wef') == 'wf'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_if_same(l1, l2):\n    '''\n    Write a function to check if two lists are exactly same or not.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     str_to_list(\"abcdefghi\") == \"cdehfi\"\nassert     str_to_list(\"abcdefghi\") == \"cdehfi\"\nassert not str_to_list(\"abcd\") == \"cdehfi\"\nassert     str_to_list(\"abcdefghi\") == \"cdehfi\"\nassert     str_to_list(\"\") == \"\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef str_to_list_short(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([1,2,3,4]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_duplicate([1,2,3,4,5,6,7,8,9]) == True, \"The array contains duplicate element\"\nassert     test_duplicate([3,4,3,4,5,6,7,8,9]) == False, \"The array does not contain duplicate element\"\nassert     test_duplicate([1,1,1,2,3,4,5,6,7,8,9]) == True, \"The array contains duplicate element\"\n\ndef array_find_the_second_min(arraynums):\n    '''\n    Write a function to find the second minimum value in an unsorted integer array.\n    The array may contain multiple duplicate values, and the order of the minimum values in the array is not important.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([1,2,3,4,5,6]) == False\nassert     test_duplicate([1,1,3,4,5,6]) == True\nassert     test_duplicate([0,0,0,0]) == Fals"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,5,6,7,7]\n    print(f'nums: {nums}')\n    print(f'Result: {test_duplicate(nums)}'"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_duplicate([2,3,1,0,2,5,3])==True\nassert test_duplicate([2,3,1,0,2,5,3])==False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([1, 2, 3, 1]) == True, 'Pass'\nassert     test_duplicate([1, 2, 3, 4]) == False, 'Pass'\nassert     test_duplicate([1, 1, 3, 4]) == True, 'Pass'\nassert     test_duplicate([1, 2, 3, 4]) == True, 'Pass'\nassert     test_duplicate([1, 2, 3, 4, 5, 2]) == True, 'Pass'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_duplicate([2,4,2,1,5,4,6]) == True\nassert     test_duplicate([2,4,2,1,2,1,5,6]) == False\nassert     test_duplicate([2,4,2,1,5,4,6,2]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate([1,3,4,2,3]) == True\nassert     test_duplicate([1,4,5,2,3]) == False"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(1) == False, \"Error found in woodall function\"\nassert     is_woodall(-1) == False, \"Error found in woodall function\"\nassert     is_woodall(0) == False, \"Error found in woodall function\"\nassert     is_woodall(7) == False, \"Error found in woodall function\"\nassert     is_woodall(8) == False, \"Error found in woodall function\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(3) == False\nassert     is_woodall(4) == True\nassert     is_woodall(5) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(12) == False\nassert     is_woodall(14) == False\nassert     is_woodall(16) == True\nassert     is_woodall(25) == True\nassert     is_woodall(26) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(11) \nassert     is_woodall(12) \nassert     is_woodall(13) \nassert     is_woodall(14) \nassert     is_woodall(15) \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(1) == True, \"is_woodall should return True for the number 1.\"\nassert     is_woodall(12) == False, \"is_woodall should return False for the number 12.\"\nassert     is_woodall(15) == False, \"is_woodall should return False for the number 15.\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_woodall(4) == False, \\\n    \"is_woodall failed with 4\"\nassert     is_woodall(5) == True, \\\n    \"is_woodall failed with 5\"\nassert     is_woodall(6) == True, \\\n    \"is_woodall failed with 6\"\nassert     is_woodall(7) == False, \\\n    \"is_woodall failed with 7\"\nassert     is_woodall(8) == False, \\\n    \"is_woodall failed with 8\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(1) == True\nassert     is_woodall(2) == False\nassert     is_woodall(3) == True\nassert     is_woodall(11) == True\nassert     is_woodall(27) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(2) == True\nassert     is_woodall(3) == False\nassert     is_woodall(10) == True\nassert     is_woodall(101) == False\nassert     is_woodall(0) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_woodall(100) == False\nis_woodall(101) == True\nis_woodall(200) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rev(2) == 3\nassert     rev(5) == 4\nassert     rev(8) == 1\nassert     rev(15) == 8\nassert     rev(33) == 4\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(3) == 2\nassert rev(4) == 2\nassert rev(5) == 3\nassert rev(6) == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(91) == True, \"Test Case Fail\"\nassert rev(93) == False, \"Test Case Fail\"\nassert rev(100) == False, \"Test Case Fail\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(7) == True\nassert     rev(7) == False\nassert     rev(9) == True\nassert     rev(9) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(1) == 1\nassert     rev(2) == 1\nassert     rev(3) == 2\nassert     rev(8) == 1\nassert     rev(9) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rev(7) == 5\nassert     rev(8) == 2\nassert     rev(9) == 6\nassert     rev(0) == 0\nassert     rev(1) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert rev(121) == 212\nassert rev(110) == 21\nassert rev(12) == 21\nassert rev(-121) == -212\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_Max_Num([1,2,3,4,5,6]) == 6\nassert find_Max_Num([1,2,3,4,5,5]) == 5\n\nprint(\"The output of the function is : \")\nprint(find_Max_Num([1,2,3,4,5,6]))\nprint(find_Max_Num([1,2,3,4,5,5]))"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_Max_Num([2,2,3,1]) == 3\n\nassert find_Max_Num([3,2,1]) == 3"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Max_Num([2, 3, 4, 6, 8, 9, 2, 3, 4, 5]) == 18\nassert     find_Max_Num([7, 5, 8, 1, 7, 1, 8, 1, 9, 3]) == 16\nassert     find_Max_Num([2, 9, 9, 9, 9, 9]) == 9\nassert     find_Max_Num([2, 3, 9, 9, 9, 9]) == 16\nassert     find_Max_Num([7, 8, 9, 9, 9, 9]) == 16\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Max_Num([\"2\", \"3\", \"1\", \"2\"]) == \"2\"\nassert     find_Max_Num([\"4\", \"5\", \"3\", \"1\"]) == \"5\"\nassert     find_Max_Num([\"1\", \"5\", \"8\", \"8\", \"8\"]) == \"8\"\nassert     find_Max_Num([\"2\", \"3\", \"1\", \"9\"]) == \"9\"\nassert     find_Max_Num([\"9\", \"8\", \"7\", \"6\", \"5\", \"4\"]) == \"9\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Max_Num([1,2,3,4,5]) ==     5\nassert     find_Max_Num([1,2,3,4,5,6]) ==     6\nassert     find_Max_Num([1,2,3,4,5,6,7]) ==     7\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) ==     7\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) ==     7\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_Max_Num_Helper(arr, k) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # if len(arr) == k : return str(int(''.join(map(str, arr))))\n    if len(arr) > k : return None\n    if len(arr) == k :\n        return str(int(''.join(map(str, arr))))\n    if len(arr) > k : return None\n    return max([find_Max_Num_Helper(arr + [i], k) for i in range(1, 10)])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Max_Num([]) == False\nassert     find_Max_Num([0]) == False\nassert     find_Max_Num([1,2,3]) == True\nassert     find_Max_Num([1,2,3,4]) == True\nassert     find_Max_Num([1,2,3,4,5]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(1, -1) == True\nassert     opposite_Signs(1, 1) == True\nassert     opposite_Signs(-1, 1) == False\nassert     opposite_Signs(-1, -1) == False\nassert     opposite_Signs(0, 0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(2,3) == False\nassert     opposite_Signs(-2,-3) == False\nassert opposite_Signs(2,-3) == True\nassert opposite_Signs(-2,3) == True\nprint('All test cases have passed!')"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(2,1) == True, \"Wrong Answer\"\nassert opposite_Signs(-2,1) == False, \"Wrong Answer\"\nassert opposite_Signs(-5,-2) == True, \"Wrong Answer\"\nassert opposite_Signs(1,2) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs( -7, -8 ) == True\nassert    opposite_Signs( -7, -7 ) == False\nassert     opposite_Signs(-7, -8 ) == True\nassert     opposite_Signs( -7, -7 ) == True\nassert     opposite_Signs( 7, -8 ) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert opposite_Signs(2,-4) == True\nassert opposite_Signs(-2,4) == True\nassert opposite_Signs(-1,-1) == True\nassert opposite_Signs(-4,-2) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(-1,-1)     == False, \"negative numbers\"\nassert     opposite_Signs(2,-3)     == False, \"positive and negative numbers\"\nassert     opposite_Signs(-1,1)     == True, \"negative and positive numbers\"\nassert     opposite_Signs(-1,-2)     == True, \"positive and negative numbers\"\nassert     opposite_Signs(-2,-1)     == False, \"negative and positive numbers\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     opposite_Signs(-1,-1) == False\nassert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(0,-1) == True\nassert     opposite_Signs(-1,0) == True\nassert     opposite_Signs(-1,-1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_Number(x):\n    '''\n    Write a python function to print the integer reverse of given number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_octagonal(1) == 0\nassert     is_octagonal(2) == 1\nassert     is_octagonal(3) == 1\nassert     is_octagonal(4) == 2\nassert     is_octagonal(5) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef digits(n):\n    '''\n    Write a function to count the number of digits in an integer.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_octagonal(1) == 0\nassert is_octagonal(2) == 1\nassert is_octagonal(3) == 1\nassert is_octagonal(4) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_octagonal(0) == 1\nassert is_octagonal(1) == 2\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 4\nassert is_octagonal(4) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nis_octagonal(0) == 1\nis_octagonal(1) == 1\nis_octagonal(2) == 3\nis_octagonal(3) == 5\nis_octagonal(4) == 7\nis_octagonal(5) == 13\nis_octagonal(6) == 21\nis_octagonal(7) == 34\nis_octagonal(8) == 55\nis_octagonal(9) == 89\nis_octagonal(10) == 144\nis_octagonal(11) == 233\nis_octagonal(12) == 377\nis_octagonal(13) == 610\nis_octagonal(14) == 987\nis_octagonal(15) == 1597\nis_octagonal(16) == 2584\nis_octagonal(17) == 4181\nis_octagonal(18) == 6765\nis_octagonal(19) == 10946\nis_octagonal(20) == 17711\nis_octagonal(21) == 28657\nis_octagonal(22) == 46368\nis_octagonal(23) == 75025\nis_octagonal(24) == 121393\nis_octagonal(25) == 196418\nis_octagonal(26) == 317811\nis_octagonal(27) == 514229\nis_octagonal(28) == 832040\nis_octagonal(29) == 1346269\nis_octagonal(30) == 2164689\nis_octagonal(31) == 3524578\nis_octagonal(32) == 5702887\nis_octagonal(33) == 9227465\nis_octagonal(34) == 14930352\nis_octagonal(35) == 28123209\nis_octagonal(36) == 46072588\nis_octagonal(37) == 71277650\nis_octagonal(38) == 125862690\nis_octagonal(39) == 19641805\nis_octagonal(40) == 31781119\nis_octagonal(41) == 51422981\nis_octagonal(42) == 83204066\nis_octagonal(43) == 134626920\nis_octagonal(44) == 216468989\nis_octagonal(45) == 352457880\nis_octagonal(46) == 570288749\nis_octagonal(47) == 922746565\nis_octagonal(48) == 149303521\nis_octagonal(49) == 2812320943\nis_octagonal(50) == 460725883\nis_octagonal(51) == 712776527\nis_octagonal(52) == 125862695\nis_octagonal(53) == 196418083\nis_octagonal(54) == 3178111941\nis_octagonal(55) == 5142298163\nis_octagonal(56) == 8320406653\nis_octagonal(57) == 13462692987\nis_octagonal(58) == 21646898973\nis_octagonal(59) == 3524578991\nis_octagonal(60) == 5702887441\nis_octagonal(61) == 922746549\nis_octagonal(62) == 14930352365\nis_octagonal(63) == 28123209943\nis_octagonal(64) == 460725885\nis_octagonal(65) == 71277656543\nis_octagonal(66) == 12586269913\nis_octagonal(67) == 19641811447\nis_octagonal(68) == 3178111947\nis_octagonal(69) == 5142298191\nis_octagonal(70) == 8320409907\nis_octagonal(71) == 13462693901\nis_octagonal(72) == 21646898361\nis_octagonal(73) == 35245789983\nis_octagonal(74) == 57028874783\nis_octagonal(75) == 92274656743\nis_octagonal(76) == 14930352521\nis_octagonal(77) == 28123209991\nis_octagonal(78) == 46072588763\nis_octagonal(79) == 71277656769\nis_octagonal(80) == 12586269941\nis_octagonal(81) == 19641811451\nis_octagonal(82) == 317811194789\nis_octagonal(83) == 51422981921\nis_octagonal(84) == 83204099353\nis_octagonal(85) == 13462693907\nis_octagonal(86) == 216468986321\nis_octagonal(87) == 352457899159\nis_octagonal(88) == 57028874761\nis_octagonal(89) == 92274656789\nis_octagonal(90) == 14930352527\nis_octagonal(91) == 28123209991\nis_octagonal(92) == 46072588763\nis_octagonal(93) == 71277656797\nis_octagonal(94) == 12586269943\nis_octagonal(95) == 196418114597\nis_octagonal(96) == 317811194783\nis_octagonal(97) == 51422981931\nis_octagonal(98) == 83204099171\nis_octagonal(99) == 134626939107\nis_octagonal(100) == 216468986321\nis_octagonal(101) == 352457899171\nis_octagonal(102) == 57028874769\nis_octagonal(103) == 92274656793\nis_octagonal(104) == 14930352533\nis_octagonal(105) == 28123209991\nis_octagonal(106) == 46072588763\nis_octagonal(107) == 71277656789\nis_octagonal(108) == 12586269943\nis_octagonal(109) == 196418114597\nis_octagonal(110) == 317811194789\nis_octagonal(111) == 51422981931\nis_octagonal(112) == 83204099171\nis_octagonal(113) == 134626939107\nis_octagonal(114) == 216468986321\nis_octagonal(115) == 352457899171\nis_octagonal(116) == 57028874769\nis_octagonal(117) == 92274656793\nis_octagonal(118) == 14930352533\nis_octagonal(119) == 28123209991\nis_octagonal(120) == 46072588763\nis_octagonal(121) == 71277656793\nis_octagonal(122) == 12586269943\nis_octagonal(123) == 196418114597\nis_octagonal(124) == 317811194789\nis_octagonal(125) == 51422981931\nis_octagonal(126) == 83204099171\nis_octagonal(127) == 134626939107\nis_octagonal(128) == 216468986321\nis_octagonal(129) == 352457899171\nis_octagonal(130) == 57028874769\nis_octagonal(131) == 92274656793\nis_octagonal(132) == 14930352533\nis_octagonal(133) == 28123209991\nis_octagonal(134) == 46072588763\nis_octagonal(135) == 71277656793\nis_octagonal(136) == 12586269943\nis_octagonal(137) == 196418114597\nis_octagonal(138) == 317811194789\nis_octagonal(139) == 51422981931\nis_octagonal(140) == 83204099171\nis_octagonal(141) == 134626939107\nis_octagonal(142) == 216468986321\nis_octagonal(143) == 352457899171\nis_octagonal(144) == 57028874769\nis_octagonal(145) == 92274656793\nis_octagonal(146) == 14930352533\nis_octagonal(147) == 28123209991\nis_octagonal(148) == 46072588763\nis_octagonal(149) == 71277656793\ni"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_octagonal(1) == 1 \nassert is_octagonal(2) == 3 \nassert is_octagonal(3) == 6\nassert is_octagonal(10) == 55\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings(\"123456789\") == 9\nassert     count_Substrings(\"1233456789\") == 8\nassert     count_Substrings(\"1234135789\") == 10\nassert     count_Substrings(\"123456789101112\") == 11\nassert     count_Substrings(\"12345678910111211\") == 10\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings(\"12345\") == 1, \"incorrect\"\nassert     count_Substrings(\"1234\") == 2, \"incorrect\"\nassert     count_Substrings(\"1234567\") == 6, \"incorrect\"\nassert     count_Substrings(\"1234567890\") == 23, \"incorrect\"\nassert     count_Substrings(\"1234567890a\") == 10, \"incorrect\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings('abcabc') == 3\nassert     count_Substrings('abc') == 0\nassert     count_Substrings('abcabcde') == 6\nassert     count_Substrings('abcabcabc') == 3\nassert     count_Substrings('abcabcabcabc') == 9\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings(\"0\")==0\nassert     count_Substrings(\"0\")==0\nassert     count_Substrings(\"3\")==1\nassert     count_Substrings(\"3\")==1\nassert     count_Substrings(\"123\")==1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"abc\") == 3, \"Should have returned 3\"\nassert     count_Substrings(\"ab\") == 2, \"Should have returned 2\"\nassert     count_Substrings(\"abc\") == 3, \"Should have returned 3\"\nassert     count_Substrings(\"abcabc\") == 6, \"Should have returned 6\"\nassert     count_Substrings(\"abcabcabc\") == 9, \"Should have returned 9\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings('abc') == 4\nassert     count_Substrings('abc2') == 3\nassert     count_Substrings('2abc') == 2\nassert     count_Substrings('2acb') == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings('krushkala') == 1\nassert     count_Substrings('krushkalakak') == 2\nassert     count_Substrings('krushkala') == 1\nassert     count_Substrings('krushkakala') == 2\nassert     count_Substrings('krushkala') == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    smallest_num([1,4,5]) == 1\n\nassert \n    smallest_num([2,4,5]) == 4\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef smallest_num2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # given a list of number in Python\n    # return the smallest number in the list.\n    # if a single number is present in the list, return that number.\n    # if no numbers are present, return None.\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([5,4,3,2,1]) == 1\nassert     smallest_num([5,4,3,2,-1]) == -1\nassert     smallest_num([]) == None"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_num([1,2,3,4,5])    ==    1\nassert     smallest_num([10,2,3,4,5])    ==    2\nassert     smallest_num([100,2,3,4,5])    ==    2\nassert     smallest_num([10,100,2,3,4,5])    ==    2\nassert     smallest_num([3,4,5,6,7,8])    ==    3\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nWrite a python function to find largest number in a list.\n'''\ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert smallest_num([1,3,2]) == 1\nassert smallest_num([1,2,3,4]) == 1\nassert smallest_num([1,2,3]) == 1\nassert smallest_num([1,1,1]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([-3, -1, 4, 10, 15]) == 4\nassert     smallest_num([-3, -1, 4, 10, -15]) == -1\nassert     smallest_num([-3, -1, -4, 10, -15]) == -4\nassert     smallest_num([-3, -1, -4, 10, 15]) == -4\nassert     smallest_num([-3, -1, -4, 10, -15]) == -3\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (3, 5), (4, 5)]) == 2\nassert     max_difference([(1, 2), (1, 4), (1, 3), (2, 3), (2, 4), (3, 4)]) == 0\nassert     max_difference([(1, 2), (1, 4), (2, 3), (2, 4), (3, 4), (3, 5), (4, 5)]) == 2\n\nprint(\"max_difference(tuple) - all passed\")\n\n\ndef find_max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmax_difference([(1, 2), (2, 3), (1, 4), (2, 5), (5, 6)]) == 1\nmax_difference([(1, 2), (2, 3), (3, 4), (2, 5), (5, 6)]) == 1\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 2\nmax_difference([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 2\nmax_difference([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 2\nmax_difference([(1, 2), (2, 3), (3, 4), (4, 5), (6, 7), (5, 6)]) == 3\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), (2, 3), (4, 5), (5, 6)]) == 0\nmax_difference([(1, 2), (3, 4), "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference([(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)]) == 2\nassert     max_difference([(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)]) == 3\nassert     max_difference([(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)]) == 2\nassert     max_difference([(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)]) == 4\nassert     max_difference([(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)]) == 4\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([(1,2),(4,5)]) == 0, \"Wrong answer!\"\nassert     max_difference([(1,2),(5,5)]) == 3, \"Wrong answer!\"\nassert     max_difference([(1,2),(1,3)]) == 4, \"Wrong answer!\"\nassert     max_difference([(2,1),(5,5)]) == 6, \"Wrong answer!\"\nassert     max_difference([(2,1),(2,3)]) == 4, \"Wrong answer!\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference([(1,3),(2,4),(5,6)]) == 3, \"Wrong answer. First incorrect answer\"\nassert     max_difference([(1,3),(2,4),(5,6),(1,7),(3,5)]) == 3, \"Wrong answer. Second incorrect answer\"\nassert     max_difference([(1,3),(2,4),(5,6),(4,5),(1,7),(3,5)]) == 6, \"Wrong answer. Third incorrect answer\"\nassert     max_difference([(1,3),(2,4),(5,6),(4,5),(1,7),(3,5)]) == 6, \"Wrong answer. Fourth incorrect answer\"\nprint(\"All the tests passed\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(2, 2), (1, 1), (4, 4), (2, 1), (2, 2)]) == \\\n        [(2, 2), (2, 1), (1, 1), (4, 4), (2, 2)]\nprint(\"Correct!\")\n\n\ndef common_words(a, b):\n    '''\n    Write a function to find the common words between two strings.\n    '''\n    # Your Code Here\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef extract_numbers(numbers_string):\n    '''\n    Write a function to extract numbers from a string. \n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     subject_marks([(100,2),(100,1),(90,1),(80,0)]) == [(100,2),(80,0),(90,1),(100,1)]\nassert     subject_marks([(100,1),(100,2),(90,1),(80,0)]) == [(80,0),(100,1),(100,2),(90,1)]\nassert     subject_marks([(90,1),(80,0),(100,1),(100,2)]) == [(80,0),(100,1),(90,1),(100,2)]\nassert     subject_marks([(100,2),(100,1),(90,1),(80,0)]) == [(100,2),(80,0),(100,1),(90,1)]\nassert     subject_marks([(100,2),(100,1),(90,1),(80,0)]) == [(100,2),(80,0),(100,1),(90,1)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([('abc', 10), ('xyz', 2), ('abc', 5)]) == [('abc', 5), ('xyz', 2), ('abc', 10)]\nassert    subject_marks([('abc', 10), ('xyz', 20), ('abc', 5)]) ==    [('abc', 10), ('xyz', 20), ('abc', 5)]\nassert    subject_marks([('xyz', 20), ('abc', 10), ('abc', 5)]) ==    [('abc', 10), ('xyz', 20), ('abc', 5)]\nassert    subject_marks([('abc', 10), ('abc', 5), ('xyz', 20)]) ==    [('abc', 5), ('xyz', 20), ('abc', 10)]\nassert    subject_marks([('abc', 5), ('abc', 10), ('xyz', 20)]) ==    [('abc', 5), ('abc', 10), ('xyz', 20)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([\n        (10, 'a'),\n        (15, 'b'),\n        (20, 'c'),\n        (25, 'd'),\n        (30, 'e'),\n        (40, 'f'),\n        (45, 'g'),\n        (50, 'h'),\n        (55, 'i'),\n        (60, 'j'),\n        (65, 'k'),\n        (70, 'l'),\n        (75,'m'),\n        (80, 'n'),\n        (85, 'o'),\n        (90, 'p'),\n        (100, 'q'),\n        (95, 'r'),\n        (90,'s'),\n        (85, 't'),\n        (80, 'u'),\n        (75, 'v'),\n        (70, 'w'),\n        (65, 'x'),\n        (60, 'y'),\n        (55, 'z')\n    ]) == \\\n    [\n        (40, 'p'),\n        (95, 'q'),\n        (70, 'v'),\n        (85, 'w'),\n        (60, 'y'),\n        (65, 'x'),\n        (60, 'z'),\n        (55, 'y'),\n        (65, 'x'),\n        (75, 'w'),\n        (80, 'v'),\n        (80, 't'),\n        (75, 'u'),\n        (75, 'v'),\n        (65, 'x'),\n        (70, 'w'),\n        (75, 'u'),\n        (85, 'w'),\n        (95, 'q'),\n        (85, 't'),\n        (90, 'u'),\n        (95, 'q'),\n        (90,'s'),\n        (85, 't'),\n        (80, 'v'),\n        (70, 'w'),\n        (65, 'x'),\n        (60, 'z'),\n        (55, 'y'),\n        (60, 'z'),\n        (50,'s'),\n        (45, 't'),\n        (40, 'a'),\n        (35, 'b'),\n        (30, 'c'),\n        (25, 'd'),\n        (20, 'e'),\n        (15, 'f'),\n        (10, 'g'),\n        (5, 'h'),\n        (0, 'i')\n    "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda tup: tup[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([('Biology', 88), ('Geography', 92), ('Math', 95), ('Computer Science', 96)]) == \\\n    [('Computer Science', 96), ('Geography', 92), ('Math', 95), ('Biology', 88)]\n\nprint('''\n*************************************************************************\n*                                                                       *\n*      / ____| |_ __   __ _  _ ___                                    *\n*     | (___ | '_ \\ / _` | | / __|                                     *\n*      \\___ \\| | | | (_| | | \\__ \\                                    *\n*       |____/|_| |_|\\__,_|_|_|___/                                    *\n*                                                                      *\n*************************************************************************\n''')\n\nimport math\n\ndef find_sqr_root(number):\n    '''\n    Return the square root of the input number.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks([(1, 5), (2, 1), (3, 4), (4, 8), (5, 7)]) == [(1, 5), (2, 1), (3, 4), (4, 8), (5, 7)], 'Wrong result'\nassert     subject_marks([(3, 8), (4, 8), (5, 7)]) == [(3, 8), (4, 8), (5, 7)], 'Wrong result'\nassert     subject_marks([(4, 6), (5, 4), (5, 7), (4, 8), (4, 9), (5, 10), (5, 11)]) == [(4, 6), (4, 9), (4, 10), (4, 11), (5, 4), (5, 5), (5, 7)], 'Wrong result'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([(1,'c'), (5, 'a'), (4, 'e'), (3, 'b')]) ==     [(3, 'b'), (4, 'e'), (5, 'a'), (1, 'c')]\nassert     subject_marks([(1,'c'), (1, 'b'), (4, 'e'), (5, 'a')]) ==     [(1, 'b'), (1, 'c'), (4, 'e'), (5, 'a')]\nassert     subject_marks([(1,'c'), (2, 'b'), (3, 'a'), (4, 'd')]) ==     [(2, 'b'), (3, 'a'), (4, 'd'), (1, 'c')]\nassert     subject_marks([(1,'c'), (2, 'a'), (3, 'b'), (4, 'd')]) ==     [(1, 'c'), (2, 'a'), (3, 'b'), (4, 'd')]\nassert     subject_marks([(1,'c'), (2, 'a'), (3, 'b'), (4, 'd')]) ==     [(1, 'c'), (2, 'a'), (3, 'b'), (4, 'd')]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert recursive_list_sum([1,2,3,4]) == 10\nassert recursive_list_sum([[1], [2], [3], [4]]) == 10\nassert recursive_list_sum([[1,2], [3,4]]) == 5\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert recursive_list_sum([1, 2, 3]) == 6\nassert recursive_list_sum([]) == 0\nassert recursive_list_sum([1, 2, 3, 4]) == 10\nassert recursive_list_sum([]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([1,2]) == 3\nassert     recursive_list_sum([1,2,3]) == 6\nassert     recursive_list_sum([1,2,3,4]) == 10\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([[1], 2, 3, [4, 5], 6]) == 21, \"Should return the sum of the elements in the list\"\nassert     recursive_list_sum([1]) == 1, \"Should return 1 if the list contains only one element\"\nassert     recursive_list_sum([[1, 2]]) == 3, \"Should return 3 if the list contains only one element\""
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([1,2,3])         == 6, \"didn't work\"\nassert     recursive_list_sum([1,2,[3,4,5],6])     == 21, \"didn't work\"\n\ndef recursive_add(data_list):\n    '''\n    Write a function to sum all the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef recursive_list_sum2(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum2(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     recursive_list_sum([]) == 0, 'Should return 0'\nassert     recursive_list_sum([1]) == 1, 'Should return 1'\nassert     recursive_list_sum([1,2]) == 3, 'Should return 3'\nassert     recursive_list_sum([1,2,3,4,5]) == 15, 'Should return 15'\nassert     recursive_list_sum([1,2,3,4,5,6,7]) == 33, 'Should return 33'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4, 5]) == 21\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([\"a\", \"b\", \"c\"]) == \"abc"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([[1], 2, 3, [[4], 5, 6]]) == 21, \\\n    'wrong output'\n\ndef recursive_list_sum2(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45, \"Wrong output\"\nassert     recursive_list_sum([1, 2, 3]) == 6, \"Wrong output\"\nassert     recursive_list_sum([1]) == 1, \"Wrong output\"\nassert     recursive_list_sum([]) == 0, \"Wrong output\""
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([3,0,5,2,4,6]) == 5\nassert     pos_count([3,-2,4,5,-1]) == 3\nassert     pos_count([3,-2,4,5,-1,0,6]) == 4\nassert     pos_count([]) == 0\n\n'''\n13. Write a python function that returns a list of all words in a string that do not appear in a dictionary file.\n'''\ndef word_in_dict(list):\n    '''\n    Write a python function to return a list of all words in a string that do not appear in a dictionary file.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([-5,-3,0,1,2,3,4,5,1,1,0,2]) == 5\nassert     pos_count([-5,-3,0,1,2,3,4,5,1,1,0,2,0,2]) == 5\nassert     pos_count([]) == 0\nassert     pos_count([-1,1,-2,3,4,5,-1]) == 5\nassert     pos_count([-1,1,-2,3,4,5,-1,-2]) == 4\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([-10, 5, -1, -8]) == 2\nassert pos_count([1, 3, -8, 8, 4]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pos_count([1,2,3,4,-1,-2,-3]) == 0, \"Your code is wrong\"\nassert     pos_count([1,2,3,4,0,2,3]) == 4, \"Your code is wrong\"\nassert     pos_count([1,2,3,4,0,-2,3]) == 5, \"Your code is wrong\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([1, 1, 0, -2, -3]) == 2, \"Wrong answer for list: %s\" % ([1, 1, 0, -2, -3])\nassert     pos_count([0, 1, 2, 0]) == 2, \"Wrong answer for list: %s\" % ([0, 1, 2, 0])\nassert     pos_count([0, -1, -1, 0, 0]) == 4, \"Wrong answer for list: %s\" % ([0, -1, -1, 0, 0])\nprint(\"\\nPOSITIVE COUNT TEST PASSED\")"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([1,1,-1,2]) == 2, 'Should return 2'\nassert pos_count([1,0,-1,2]) == 1, 'Should return 1'\nassert pos_count([1,1,1,2]) == 4, 'Should return 4'\nassert pos_count([-1,1,2]) == 3, 'Should return 3'\nassert pos_count([-1,1,2,-1]) == 3, 'Should return 3'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([2, 3, -1, -2, 4, 4]) == 6\nassert     pos_count([-4, -3, 0, 1, 2, 3]) == 5\nassert     pos_count([]) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nbell_number(1) == 1\nbell_number(2) == 2\nbell_number(3) == 4\nbell_number(4) == 8\nbell_number(5) == 13\nbell_number(6) == 24\nbell_number(7) == 34\nbell_number(8) == 49\nbell_number(9) == 60\nbell_number(10) == 68\nbell_number(11) == 81\nbell_number(12) == 100\nbell_number(13) == 112\nbell_number(14) == 124\nbell_number(15) == 136\nbell_number(16) == 148\nbell_number(17) == 150\nbell_number(18) == 152\nbell_number(19) == 154\nbell_number(20) == 156\nbell_number(21) == 158\nbell_number(22) == 160\nbell_number(23) == 162\nbell_number(24) == 164\nbell_number(25) == 166\nbell_number(26) == 168\nbell_number(27) == 170\nbell_number(28) == 172\nbell_number(29) == 174\nbell_number(30) == 176\nbell_number(31) == 178\nbell_number(32) == 180\nbell_number(33) == 182\nbell_number(34) == 184\nbell_number(35) == 186\nbell_number(36) == 188\nbell_number(37) == 190\nbell_number(38) == 192\nbell_number(39) == 194\nbell_number(40) == 196\nbell_number(41) == 198\nbell_number(42) == 200\nbell_number(43) == 202\nbell_number(44) == 204\nbell_number(45) == 206\nbell_number(46) == 208\nbell_number(47) == 210\nbell_number(48) == 212\nbell_number(49) == 214\nbell_number(50) == 216\nbell_number(51) == 218\nbell_number(52) == 220\nbell_number(53) == 222\nbell_number(54) == 224\nbell_number(55) == 226\nbell_number(56) == 228\nbell_number(57) == 230\nbell_number(58) == 232\nbell_number(59) == 234\nbell_number(60) == 236\nbell_number(61) == 238\nbell_number(62) == 240\nbell_number(63) == 242\nbell_number(64) == 244\nbell_number(65) == 246\nbell_number(66) == 248\nbell_number(67) == 250\nbell_number(68) == 252\nbell_number(69) == 254\nbell_number(70) == 256\nbell_number(71) == 258\nbell_number(72) == 260\nbell_number(73) == 262\nbell_number(74) == 264\nbell_number(75) == 266\nbell_number(76) == 268\nbell_number(77) == 270\nbell_number(78) == 272\nbell_number(79) == 274\nbell_number(80) == 276\nbell_number(81) == 278\nbell_number(82) == 280\nbell_number(83) == 282\nbell_number(84) == 284\nbell_number(85) == 286\nbell_number(86) == 288\nbell_number(87) == 290\nbell_number(88) == 292\nbell_number(89) == 294\nbell_number(90) == 296\nbell_number(91) == 298\nbell_number(92) == 300\nbell_number(93) == 302\nbell_number(94) == 304\nbell_number(95) == 306\nbell_number(96) == 308\nbell_number(97) == 310\nbell_number(98) == 312\nbell_number(99) == 314\nbell_number(100) == 316\nbell_number(101) == 318\nbell_number(102) == 320\nbell_number(103) == 322\nbell_number(104) == 324\nbell_number(105) == 326\nbell_number(106) == 328\nbell_number(107) == 330\nbell_number(108) == 332\nbell_number(109) == 334\nbell_number(110) == 336\nbell_number(111) == 338\nbell_number(112) == 340\nbell_number(113) == 342\nbell_number(114) == 344\nbell_number(115) == 346\nbell_number(116) == 348\nbell_number(117) == 350\nbell_number(118) == 352\nbell_number(119) == 354\nbell_number(120) == 356\nbell_number(121) == 358\nbell_number(122) == 360\nbell_number(123) == 362\nbell_number(124) == 364\nbell_number(125) == 366\nbell_number(126) == 368\nbell_number(127) == 370\nbell_number(128) == 372\nbell_number(129) == 374\nbell_number(130) == 376\nbell_number(131) == 378\nbell_number(132) == 380\nbell_number(133) == 382\nbell_number(134) == 384\nbell_number(135) == 386\nbell_number(136) == 388\nbell_number(137) == 390\nbell_number(138) == 392\nbell_number(139) == 394\nbell_number(140) == 396\nbell_number(141) == 398\nbell_number(142) == 400\nbell_number(143) == 402\nbell_number(144) == 404\nbell_number(145) == 406\nbell_number(146) == 408\nbell_number(147) == 410\nbell_number(148) == 412\nbell_number(149) == 414\nbell_number(150) == 416\nbell_number(151) == 418\nbell_number(152) == 420\nbell_number(153) == 422\nbell_number(154) == 424\nbell_number(155) == 426\nbell_number(156) == 428\nbell_number(157) == 430\nbell_number(158) == 432\nbell_number(159) == 434\nbell_number(160) == 436\nbell_number(161) == 438\nbell_number(162) == 440\nbell_number(163) == 442\nbell_number(164) == 444\nbell_number(165) == 446\nbell_number(166) == 448\nbell_number(167) == 450\nbell_number(168) == 452\nbell_number(169) == 454\nbell_number(170) == 456\nbell_number(171) == 458\nbell_number(172) == 460\nbell_number(173) == 462\nbell_number(174) == 464\nbell_number(175) == 466\nbell_number(176) == 468\nbell_number(177) == 470\nbell_number(178) == 472\nbell_number(179) == 474\nbell_number(180) == 476\nbell_number(181) == 478\nbell_number(182) == 480\nbell_number(183) == 482\nbell_number(184) == 484\nbell_number(185) == 486\nbell_number(186) == 488\nbell_number(187) == 490\nbell_number(188) == 492\nbell_number(189) == 494\nbell_number(190) == 496\nbell_number(191) == 498\nbell_number(192) == 500\nbell_number(193) == 502\nbell_number(194) == 504\nbell_number(195) == 506\nbell_number(196) == 508\nbell_number(197) == 510\nbell_number(198) == 512\nbell_number(199) == 514\nbell_number(200) == 516\nbell_number(201) == 518\nbell_number(202) == 520\nbell_number(203) == 522\nbell_number(204) == 524\nbell_number(205) == 526\nbell_number(206) == 528\nbell_number(207) == 530\nbell_number(208) == 532\nbell_number(209) == 534\nbell_number(210) == 536\nbell_number(211) == 538\nbell_number(212) == 540\nbell_number(213) == 542\nbell_number(214) == 544\nbell_number(215) == 546\nbell_number(216) == 548\nbell_number(217) == 550"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(4) == 2\nassert     bell_number(5) == 3\nassert     bell_number(6) == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef fib_n(n):\n    '''\n    Write a function to compute the nth Fibonacci number\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert bell_number(1) == 1, 'The number of ways to partition a set of Bell numbers is wrong.'\nassert bell_number(2) == 4, 'The number of ways to partition a set of Bell numbers is wrong.'\nassert bell_number(3) == 8, 'The number of ways to partition a set of Bell numbers is wrong.'\nassert bell_number(4) == 6, 'The number of ways to partition a set of Bell numbers is wrong.'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(2) == 3\nassert     bell_number(3) == 7\nassert     bell_number(5) == 14\nassert     bell_number(9) == 63\n\nimport unittest\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef bell_number_iterative_dp(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers using iterative dp.\n    '''\n    pass"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 7\nassert     bell_number(5) == 11\nassert     bell_number(6) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([]) == False\nassert is_Monotonic([1,1,1,1,1]) == True\nassert is_Monotonic([1,1,2,1,1]) == False\nassert is_Monotonic([1,1,1,2,1]) == False\nassert is_Monotonic([1,1,2,2,1]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Monotonic([]) == True\nassert     is_Monotonic([2,4,3,2,1]) == True\nassert     is_Monotonic([2,4,3,1]) == False\nassert     is_Monotonic([1,3,2,4]) == False\nassert     is_Monotonic([1,1,2,1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1,1,1,1]) == True, \"Should be True\"\nassert is_Monotonic([1,2,2,1]) == False, \"Should be False\"\nassert is_Monotonic([1,2,3,4]) == False, \"Should be False\"\nassert is_Monotonic([1,1,1,1,2,2]) == True, \"Should be True\"\nassert is_Monotonic([1,1,1,1,1]) == True, \"Should be True\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Monotonic([1, 2, 3]) == True, \"Wrong result\"\nassert     is_Monotonic([1, 1, 1]) == True, \"Wrong result\"\nassert     is_Monotonic([1, 1, 2]) == False, \"Wrong result\"\nassert     is_Monotonic([3, 2, 1]) == True, \"Wrong result\"\nassert     is_Monotonic([3, 3, 3]) == True, \"Wrong result\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef MonotonicArray(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_Monotonic([3, 1, 2]) == True\n    is_Monotonic([3, 1, 5]) == False\n    is_Monotonic([3, 3, 5]) == True\n    is_Monotonic([3, 3, 2]) == True\n    is_Monotonic([3, 5, 2]) == False\n    is_Monotonic([5, 3, 2]) == True\n    is_Monotonic([1, 1, 1]) == True\n    is_Monotonic([1, 1, 2]) == False\n    is_Monotonic([1, 2, 1]) == True\n    is_Monotonic([1, 2, 2]) == True\n    is_Monotonic([2, 1, 1]) == True\n    is_Monotonic([2, 1, 2]) == True\n    is_Monotonic([2, 2, 1]) == True\n    is_Monotonic([2, 2, 2]) == True\n    is_Monotonic([3, 4, 1]) == False\n    is_Monotonic([3, 4, 2]) == False\n    is_Monotonic([3, 3, 4]) == True\n    is_Monotonic([3, 4, 3]) == False\n    is_Monotonic([3, 4, 5]) == False\n    is_Monotonic([3, 4, 6]) == False\n    is_Monotonic([3, 5, 4]) == False\n    is_Monotonic([3, 5, 5]) == True\n    is_Monotonic([3, 5, 6]) == False\n    is_Monotonic([3, 5, 7]) == False\n    is_Monotonic([3, 5, 8]) == False\n    is_Monotonic([3, 5, 9]) == False\n    is_Monotonic([4, 1, 3]) == False\n    is_Monotonic([4, 1, 2]) == False\n    is_Monotonic([4, 1, 4]) == True\n    is_Monotonic([4, 2, 1]) == False\n    is_Monotonic([4, 2, 2]) == True\n    is_Monotonic([4, 2, 3]) == False\n    is_Monotonic([4, 2, 5]) == False\n    is_Monotonic([4, 2, 6]) == False\n    is_Monotonic([4, 3, 1]) == False\n    is_Monotonic([4, 3, 2]) == False\n    is_Monotonic([4, 3, 3]) == True\n    is_Monotonic([4, 3, 4]) == True\n    is_Monotonic([4, 3, 5]) == True\n    is_Monotonic([4, 3, 6]) == True\n    is_Monotonic([4, 4, 1]) == True\n    is_Monotonic([4, 4, 2]) == True\n    is_Monotonic([4, 4, 3]) == True\n    is_Monotonic([4, 4, 4]) == True\n    is_Monotonic([4, 4, 5]) == True\n    is_Monotonic([4, 4, 6]) == True\n    is_Monotonic([4, 5, 1]) == True\n    is_Monotonic([4, 5, 2]) == True\n    is_Monotonic([4, 5, 3]) == True\n    is_Monotonic([4, 5, 4]) == True\n    is_Monotonic([4, 5, 5]) == True\n    is_Monotonic([4, 5, 6]) == True\n    is_Monotonic([4, 5, 7]) == False\n    is_Monotonic([4, 5, 8]) == False\n    is_Monotonic([4, 5, 9]) == False\n    is_Monotonic([4, 6, 1]) == False\n    is_Monotonic([4, 6, 2]) == False\n    is_Monotonic([4, 6, 3]) == False\n    is_Monotonic([4, 6, 4]) == True\n    is_Monotonic([4, 6, 5]) == True\n    is_Monotonic([4, 6, 6]) == True\n    is_Monotonic([4, 6, 7]) == False\n    is_Monotonic([4, 6, 8]) == False\n    is_Monotonic([4, 6, 9]) == False\n    is_Monotonic([4, 7, 1]) == False\n    is_Monotonic([4, 7, 2]) == False\n    is_Monotonic([4, 7, 3]) == False\n    is_Monotonic([4, 7, 4]) == False\n    is_Monotonic([4, 7, 5]) == False\n    is_Monotonic([4, 7, 6]) == False\n    is_Monotonic([4, 7, 7]) == True\n    is_Monotonic([4, 7, 8]) == True\n    is_Monotonic([4, 7, 9]) == True\n    is_Monotonic([4, 8, 1]) == False\n    is_Monotonic([4, 8, 2]) == False\n    is_Monotonic([4, 8, 3]) == False\n    is_Monotonic([4, 8, 4]) == False\n    is_Monotonic([4, 8, 5]) == False\n    is_Monotonic([4, 8, 6]) == False\n    is_Monotonic([4, 8, 7]) == True\n    is_Monotonic([4, 8, 8]) == True\n    is_Monotonic([4, 8, 9]) == True\n    is_Monotonic([4, 9, 1]) == False\n    is_Monotonic([4, 9, 2]) == False\n    is_Monotonic([4, 9, 3]) == False\n    is_Monotonic([4, 9, 4]) == False\n    is_Monotonic([4, 9, 5]) == False\n    is_Monotonic([4, 9, 6]) == False\n    is_Monotonic([4, 9, 7]) == True\n    is_Monotonic([4, 9, 8]) == True\n    is_Monotonic([4, 9, 9]) == True\n    is_Monotonic([5, 1, 1]) == True\n    is_Monotonic([5, 1, 2]) == False\n    is_Monotonic([5, 1, 3]) == True\n    is_Monotonic([5, 1, 4]) == True\n    is_Monotonic([5, 1, 5]) == True\n    is_Monotonic([5, 1, 6]) == True\n    is_Monotonic([5, 1, 7]) == False\n    is_Monotonic([5, 1, 8]) == False\n    is_Monotonic([5, 1, 9]) == False\n    is_Monotonic([5, 2, 1]) == False\n    is_Monotonic([5, 2, 2]) == True\n    is_Monotonic([5, 2, 3]) == True\n    is_Monotonic([5, 2, 4]) == True\n    is_Monotonic([5, 2, 5]) == True\n    is_Monotonic([5, 2, 6]) == True\n    is_Monotonic([5, 2, 7]) == False\n    is_Monotonic([5, 2, 8]) == False\n    is_Monotonic([5, 2, 9]) == False\n    is_Monotonic([5, 3, 1]) == False\n    is_Monotonic([5, 3, 2]) == False\n    is_Monotonic([5, 3, 3]) == True\n    is_Monotonic([5, 3, 4]) == True\n    is_Monotonic([5, 3, 5]) == True\n    is_Monotonic([5, 3, 6]) == True\n    is_Monotonic([5, 3, 7]) == False\n    is_Monotonic([5, 3, 8]) == False\n    is_Monotonic([5, 3, 9]) == False\n    is_Monotonic([5, 4, 1]) == False\n    is_Monotonic([5, 4, 2]) == False\n    is_Monotonic([5, 4, 3]) == True\n    is_Monotonic([5, 4, 4]) == True\n    is_Monotonic([5, 4, 5]) == True\n    is_Monotonic([5, 4, 6]) == True\n    is_Monotonic(["
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Monotonic([1,3,1,4,6,7]) == False, \"Wrong output\"\nassert     is_Monotonic([1,1,1,1,1]) == True, \"Wrong output\"\nassert     is_Monotonic([1,2,1,3,4,5]) == True, \"Wrong output\"\nassert     is_Monotonic([1,2,1,1,1]) == True, \"Wrong output\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert is_sublist( [1,2,3], [3]) == True\nassert is_sublist( [1,2,3], [1,2]) == True\nassert is_sublist( [1,2,3], [1,2,3]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sublist([1,2,3],    [2]) == True, \"Failed.\"\nassert     is_sublist([1,2,3],    [1]) == True, \"Failed.\"\nassert     is_sublist([1,2,3],    [1,2]) == True, \"Failed.\"\nassert     is_sublist([1,2,3],    []) == False, \"Failed.\"\nassert     is_sublist([],        []) == False, \"Failed.\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef common_sublists(l1, l2):\n    '''\n    Write a function to find common sublists between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sublist([1,2,3,4], [[1,2,3]]) == True\nassert     is_sublist([1,2,3,4], [[1,2], [1,3], [1,4]]) == False\nassert     is_sublist([1,2,3,4], [[1,2], [1,3], [1,4], [1,5]]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([1,2,3,4],  [1,2,3,4]) == True, \\\n                \"is_sublist([1,2,3,4],  [1,2,3,4]) should be True.\"\nassert     is_sublist([1,2,3,4],  [1,2]) == False, \\\n                \"is_sublist([1,2,3,4],  [1,2]) should be False.\"\nassert     is_sublist([1,2,3],  [1,2,3]) == False, \\\n                \"is_sublist([1,2,3],  [1,2,3]) should be False.\"\nassert     is_sublist([],  []) == True, \\\n                \"is_sublist([],  []) should be True.\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [1,2,4]) == False\nassert     is_sublist([1,2,3], [1,2,3,4]) == False\nassert     is_sublist([1,2,3], [1,2,3,4,5]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([0,1,2,3], [0,1]) == True\nassert     is_sublist([0,1,2,3], [0,1,2]) == False\nassert     is_sublist([0,1,2,3], [0,1,2,3]) == True\nassert     is_sublist([0,1,2,3], [0,1,2]) == False\n\n'''\nTwo lists are called non-overlapping if the last element of each list is not the start of the other list.\n'''\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([[1,2],[3,4],[5,6],[7,8]], [[3,4,5],[7,8]])\nassert     is_sublist([[1,2],[3,4],[5,6],[7,8]], [[5,6],[3,4,5]])\nassert     is_sublist([[1,2],[3,4],[5,6],[7,8]], [[1,2],[3,4,5],[7,8]])\nassert     is_sublist([[1,2],[3,4],[5,6],[7,8]], [[1,2],[7,8]])\nassert     is_sublist([[1,2],[3,4],[5,6],[7,8]], [[7,8],[1,2]])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple((1,2,3)) == False, \"wrong\"\nassert     find_equal_tuple((1,2,3),(2,3,4)) == True, \"wrong\"\nassert     find_equal_tuple((1,2),(2,3,4)) == False, \"wrong\"\nassert     find_equal_tuple((1,2,3),(2,3,4),(2,2,4)) == False, \"wrong\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([\"aa\", \"bb\", \"cc\", \"dd\"]) == False\nassert     find_equal_tuple([\"aa\", \"bb\", \"cc\"]) == True\nassert     find_equal_tuple([\"aa\"]) == True\n\ndef find_equal_tuple_v2(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple(((1,2),(1,2),(1,2),(1,2),(1,2),(1,2)))\nassert     find_equal_tuple(((1,2),(1,2),(1,2),(1,2),(1,2),(1,2))) == False\nassert     find_equal_tuple(((1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3))) == False\n\ndef find_odd_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have odd length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_equal_tuple_v2(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(1,), (2,), (3,)])     == False\nassert     find_equal_tuple([(1, 2), (2, 3), (3, 4)])     == True\nassert     find_equal_tuple([(1, 2, 3), (2, 3, 4), (3, 4, 5)])     == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    find_equal_tuple([(1, 2), (3,), (4,), (5,), (6,), (7,), (8,)]), True\n    find_equal_tuple([(1, 2), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)]), False\n    find_equal_tuple([(1, 2), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,), (21,), (22,), (23,), (24,), (25,), (26,), (27,), (28,), (29,), (30,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,), (39,), (40,), (41,), (42,), (43,), (44,), (45,), (46,), (47,), (48,), (49,), (50,), (51,), (52,), (53,), (54,), (55,), (56,), (57,), (58,), (59,), (60,), (61,), (62,), (63,), (64,), (65,), (66,), (67,), (68,), (69,), (70,), (71,), (72,), (73,), (74,), (75,), (76,), (77,), (78,), (79,), (80,), (81,), (82,), (83,), (84,), (85,), (86,), (87,), (88,), (89,), (90,), (91,), (92,), (93,), (94,), (95,), (96,), (97,), (98,), (99,), (100,), (101,), (102,), (103,), (104,), (105,), (106,), (107,), (108,), (109,), (110,), (111,), (112,), (113,), (114,), (115,), (116,), (117,), (118,), (119,), (120,), (121,), (122,), (123,), (124,), (125,), (126,), (127,), (128,), (129,), (130,), (131,), (132,), (133,), (134,), (135,), (136,), (137,), (138,), (139,), (140,), (141,), (142,), (143,), (144,), (145,), (146,), (147,), (148,), (149,), (150,), (151,), (152,), (153,), (154,), (155,), (156,), (157,), (158,), (159,), (160,), (161,), (162,), (163,), (164,), (165,), (166,), (167,), (168,), (169,), (170,), (171,), (172,), (173,), (174,), (175,), (176,), (177,), (178,), (179,), (180,), (181,), (182,), (183,), (184,), (185,), (186,), (187,), (188,), (189,), (190,), (191,), (192,), (193,), (194,), (195,), (196,), (197,), (198,), (199,), (200,), (201,), (202,), (203,), (204,), (205,), (206,), (207,), (208,), (209,), (210,), (211,), (212,), (213,), (214,), (215,), (216,), (217,), (218,), (219,), (220,), (221,), (222,), (223,), (224,), (225,), (226,), (227,), (228,), (229,), (230,), (231,), (232,), (233,), (234,), (235,), (236,), (237,), (238,), (239,), (240,), (241,), (242,), (243,), (244,), (245,), (246,), (247,), (248,), (249,), (250,), (251,), (252,), (253,), (254,), (255,), (256,), (257,), (258,), (259,), (260,), (261,), (262,), (263,), (264,), (265,), (266,), (267,), (268,), (269,), (270,), (271,), (272,), (273,), (274,), (275,), (276,), (277,), (278,), (279,), (280,), (281,), (282,), (283,), (284,), (285,), (286,), (287,), (288,), (289,), (290,), (291,), (292,), (293,), (294,), (295,), (296,), (297,), (298,), (299,), (300,), (301,), (302,), (303,), (304,), (305,), (306,), (307,), (308,), (309,), (310,), (311,), (312,), (313,), (314,), (315,), (316,), (317,), (318,), (319,), (320,), (321,), (322,), (323,), (324,), (325,), (326,), (327,), (328,), (329,), (330,), (331,), (332,), (333,), (334,), (335,), (336,), (337,), (338,), (339,), (340,), (341,), (342,), (343,), (344,), (345,), (346,), (347,), (348,), (349,), (350,), (351,), (352,), (353,), (354,), (355,), (356,), (357,), (358,), (359,), (360,), (361,), (362,), (363,), (364,), (365,), (366,), (367,), (368,), (369,), (370,), (371,), (372,), (373,), (374,), (375,), (376,), (377,), (378,), (379,), (380,), (381,), (382,), (383,), (384,), (385,), (386,), (387,), (388,), (389,), (390,), (391,), (392,), (393,), (394,), (395,), (396,), (397,), (398,), (399,), (400,), (401,), (402,), (403,), (404,), (405,), (406,), (407,), (408,), (409,), (410,), (411,), (412,), (413,), (414,), (415,), (416,), (417,), (418,), (419,), (420,), (421,), (422,), (423,), (424,), (425,), (426,), (427,), (428,), (429,), (430,), (431,), (432,), (433,), (434,), (435,), (436,), (437,), (438,), (439,), (440,), (441,), (442,), (443,), (444,), (445,), (446,), (447,), (448,), (449,), (450,), (451,), (452,), (453,), (454,), (455,), (456,), (457,), (458,), (459,), (460,), (461,), (462,), (463,), (464,), (465,), (466,), (467,), (468,), (469,), (470,), (471,), (472,), (473,), (474,), (47"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple(Input = [(1,2,3),(4,5,6),(7,8,9)])\nassert not find_equal_tuple(Input = [(1,2),(4,5),(7,8,9)])\nassert find_equal_tuple(Input = [(1,2,3),(4,5,6),(7,8,9,10)])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(0,0),(1,0),(1,1),(1,2)]) == True, 'Wrong result!'\nassert     find_equal_tuple([(0,0,1),(1,0,1),(1,1,1),(1,2,1)]) == False, 'Wrong result!'\nassert     find_equal_tuple([(0,0),(1,0),(1,1),(1,2)]) == False, 'Wrong result!'\nassert     find_equal_tuple([(0,0,1),(1,0,1),(1,1,1),(1,2,2)]) == False, 'Wrong result!'\nassert     find_equal_tuple([(0,0),(1,0),(1,1),(1,2)]) == True, 'Wrong result!'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     comb_sort([0,4,5,2,3,8,1,4]) == [0,1,2,3,4,4,5,8]\nassert     comb_sort([5,4,3,2,1]) == [1,2,3,4,5]\nassert     comb_sort([1,2,3,4,5]) == [1,2,3,4,5]\nassert     comb_sort([2,4,1,3]) == [1,2,3,4]\nassert     comb_sort([3,1,2,4]) == [1,2,3,4]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     comb_sort([0, 1, 2, 3, 4, 5]) == 0\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0\nassert     comb_sort([0, -1, -2, -3, -4, -5]) == 0\nassert     comb_sort([-1]) == 0\nassert     comb_sort([-100, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == 0\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    min_val = nums[0]\n    max_val = nums[0]\n    for i in range(1, len(nums)):\n        min_val = min(min_val, nums[i])\n        max_val = max(max_val, nums[i])\n    for i in range(len(nums)):\n        if nums[i]!= min_val:\n            tmp = nums[i]\n            nums[i] = min_val\n            min_val = tmp\n    for i in range(len(nums)):\n        if nums[i]!= max_val:\n            tmp = nums[i]\n            nums[i] = max_val\n            max_val = tmp\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     comb_sort([5,4,2,3,1]) == [1,2,3,4,5], \"Wrong result\"\nassert     comb_sort([3,5,7,9,2,4,6,8]) == [2,3,4,5,6,7,8,9], \"Wrong result\"\nassert     comb_sort([5,4,2,3,1]) == [1,2,3,4,5], \"Wrong result\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     comb_sort([]    ) ==     []\nassert     comb_sort([1,2,3]) ==     [1,2,3]\nassert     comb_sort([-2,0,5,5,4,6,-1,0]) ==     [-2,-1,0,0,4,5,5,6]\nassert     comb_sort([0.5,0.2,0.7,0.1,0.3,0.2]) ==     [0.1,0.2,0.2,0.3,0.3,0.2,0.7,0.5]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncomb_sort([5, 2, 1, 3, 6, 8, 2]) == [2, 1, 2, 3, 5, 6, 8]\nassert \ncomb_sort([5, 2, 1, 3, 6, 8, 2, 7]) == [2, 1, 2, 3, 5, 6, 8, 7]\nassert \ncomb_sort([5, 2, 1, 3, 6, 8, 2, 7, 4, 5]) == [2, 1, 2, 3, 5, 6, 8, 7, 4, 5]"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     comb_sort([-5, 7, 1, 8, -6, 7, -8, -5, -7]) == [-5, 1, -7, -8, 7, 7, 6, 8, -5]\nprint('Passed.')\n\n\n\ndef comb_sort_optimized(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndif_Square(3)\ndif_Square(11)\ndif_Square(34)\ndif_Square(55)\ndif_Square(50)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(1) == True, \"your function is not right\"\nassert     dif_Square(2) == True, \"your function is not right\"\nassert     dif_Square(3) == False, \"your function is not right\"\nassert     dif_Square(4) == False, \"your function is not right\"\nassert     dif_Square(5) == True, \"your function is not right\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nn = 7\nprint(dif_Square(n))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dif_Square(3) == True\nassert     dif_Square(12) == True\nassert     dif_Square(32) == False\nassert     dif_Square(40) == False\nassert     dif_Square(50) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dif_Square(9)==True, \"Function should be returning True for 9\"\nassert     dif_Square(10)==True, \"Function should be returning True for 10\"\nassert     dif_Square(11)==True, \"Function should be returning True for 11\"\nassert     dif_Square(20)==True, \"Function should be returning True for 20\"\nassert     dif_Square(24)==False, \"Function should be returning False for 24\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndif_Square(1) == False\ndif_Square(2) == True\ndif_Square(9) == True\ndif_Square(22) == False\ndif_Square(32) == True\ndif_Square(50) == False\ndif_Square(71) == True\ndif_Square(72) == False\ndif_Square(77) == True\ndif_Square(999) == False\ndif_Square(100) == True\ndif_Square(99) == True\ndif_Square(100) == False\ndif_Square(101) == True\ndif_Square(102) == False\ndif_Square(103) == True\ndif_Square(104) == False\ndif_Square(105) == True\ndif_Square(106) == True\ndif_Square(107) == True\ndif_Square(108) == True\ndif_Square(109) == True\ndif_Square(110) == True\ndif_Square(111) == True\ndif_Square(112) == True\ndif_Square(113) == True\ndif_Square(114) == True\ndif_Square(115) == True\ndif_Square(116) == True\ndif_Square(117) == True\ndif_Square(118) == True\ndif_Square(119) == True\ndif_Square(120) == True\ndif_Square(121) == True\ndif_Square(122) == True\ndif_Square(123) == True\ndif_Square(124) == True\ndif_Square(125) == True\ndif_Square(126) == True\ndif_Square(127) == True\ndif_Square(128) == True\ndif_Square(129) == True\ndif_Square(130) == True\ndif_Square(131) == True\ndif_Square(132) == True\ndif_Square(133) == True\ndif_Square(134) == True\ndif_Square(135) == True\ndif_Square(136) == True\ndif_Square(137) == True\ndif_Square(138) == True\ndif_Square(139) == True\ndif_Square(140) == True\ndif_Square(141) == True\ndif_Square(142) == True\ndif_Square(143) == True\ndif_Square(144) == True\ndif_Square(145) == True\ndif_Square(146) == True\ndif_Square(147) == True\ndif_Square(148) == True\ndif_Square(149) == True\ndif_Square(150) == True\ndif_Square(151) == True\ndif_Square(152) == True\ndif_Square(153) == True\ndif_Square(154) == True\ndif_Square(155) == True\ndif_Square(156) == True\ndif_Square(157) == True\ndif_Square(158) == True\ndif_Square(159) == True\ndif_Square(160) == True\ndif_Square(161) == True\ndif_Square(162) == True\ndif_Square(163) == True\ndif_Square(164) == True\ndif_Square(165) == True\ndif_Square(166) == True\ndif_Square(167) == True\ndif_Square(168) == True\ndif_Square(169) == True\ndif_Square(170) == True\ndif_Square(171) == True\ndif_Square(172) == True\ndif_Square(173) == True\ndif_Square(174) == True\ndif_Square(175) == True\ndif_Square(176) == True\ndif_Square(177) == True\ndif_Square(178) == True\ndif_Square(179) == True\ndif_Square(180) == True\ndif_Square(181) == True\ndif_Square(182) == True\ndif_Square(183) == True\ndif_Square(184) == True\ndif_Square(185) == True\ndif_Square(186) == True\ndif_Square(187) == True\ndif_Square(188) == True\ndif_Square(189) == True\ndif_Square(190) == True\ndif_Square(191) == True\ndif_Square(192) == True\ndif_Square(193) == True\ndif_Square(194) == True\ndif_Square(195) == True\ndif_Square(196) == True\ndif_Square(197) == True\ndif_Square(198) == True\ndif_Square(199) == True\ndif_Square(200) == True\ndif_Square(201) == True\ndif_Square(202) == True\ndif_Square(203) == True\ndif_Square(204) == True\ndif_Square(205) == True\ndif_Square(206) == True\ndif_Square(207) == True\ndif_Square(208) == True\ndif_Square(209) == True\ndif_Square(210) == True\ndif_Square(211) == True\ndif_Square(212) == True\ndif_Square(213) == True\ndif_Square(214) == True\ndif_Square(215) == True\ndif_Square(216) == True\ndif_Square(217) == True\ndif_Square(218) == True\ndif_Square(219) == True\ndif_Square(220) == True\ndif_Square(221) == True\ndif_Square(222) == True\ndif_Square(223) == True\ndif_Square(224) == True\ndif_Square(225) == True\ndif_Square(226) == True\ndif_Square(227) == True\ndif_Square(228) == True\ndif_Square(229) == True\ndif_Square(230) == True\ndif_Square(231) == True\ndif_Square(232) == True\ndif_Square(233) == True\ndif_Square(234) == True\ndif_Square(235) == True\ndif_Square(236) == True\ndif_Square(237) == True\ndif_Square(238) == True\ndif_Square(239) == True\ndif_Square(240) == True\ndif_Square(241) == True\ndif_Square(242) == True\ndif_Square(243) == True\ndif_Square(244) == True\ndif_Square(245) == True\ndif_Square(246) == True\ndif_Square(247) == True\ndif_Square(248) == True\ndif_Square(249) == True\ndif_Square(250) == True\ndif_Square(251) == True\ndif_Square(252) == True\ndif_Square(253) == True\ndif_Square(254) == True\ndif_Square(255) == True\ndif_Square(256) == True\ndif_Square(257) == True\ndif_Square(258) == True\ndif_Square(259) == True\ndif_Square(260) == True\ndif_Square(261) == True\ndif_Square(262) == True\ndif_Square(263) == True\ndif_Square(264) == True\ndif_Square(265) == True\ndif_Square(266) == True\ndif_Square(267) == True\ndif_Square(268) == True\ndif_Square(269) == True\ndif_Square(270) == True\ndif_Square(271) == True\ndif_Square(272) == True\ndif_Square(273) == True\ndif_Square(274) == True\ndif_Square(275) == True\ndif_Square(276) == True\ndif_Square(277) == True\ndif_Square(278) == True\ndif_Square(279) == True\ndif_Square(280) == True\ndif_Square(281) == True\ndif_Square(282) == True\ndif_Square(283) == True\ndif_Square(284) == True\ndif_Square(285) == True\ndif_Square(286) == Tru"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dif_Square(1) == False\nassert     dif_Square(4) == True\nassert     dif_Square(25) == False\nassert     dif_Square(0) == False\nassert     dif_Square(1000000) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not dif_Square(4)\nassert not dif_Square(6)\nassert not dif_Square(1)\nassert not dif_Square(22)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(7) == True, \"Passed, as expected, for %s\"%(7)\nassert     dif_Square(8) == False, \"Not Passed, as expected, for %s\"%(8)\nassert     dif_Square(7) == True, \"Passed, as expected, for %s\"%(7)\nassert     dif_Square(8) == False, \"Not Passed, as expected, for %s\"%(8)\nassert     dif_Square(9) == False, \"Not Passed, as expected, for %s\"%(9)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns(colors, patterns) == True\nassert     is_samepatterns(colors, patterns2) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns(['blue', 'yellow', 'purple'], ['yellow', 'blue','red']) == True\nassert     is_samepatterns(['blue', 'yellow', 'purple'], ['purple', 'yellow', 'blue']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns(\n    [[2, 1, 3], [2, 1, 3]], [[2, 1, 3], [2, 1, 3]]) == True, 'is_samepatterns error!'\nassert     is_samepatterns(\n    [[2, 1, 3], [2, 1, 3]], [[2, 1, 3], [2, 1, 2]]) == False, 'is_samepatterns error!'\nassert     is_samepatterns(\n    [[2, 1, 2], [2, 1, 2]], [[2, 1, 2], [2, 1, 2]]) == False, 'is_samepatterns error!'\nassert     is_samepatterns(\n    [[2, 1, 2], [2, 1, 2]], [[2, 1, 2], [2, 2, 2]]) == True, 'is_samepatterns error!'\nassert     is_samepatterns(\n    [[2, 1, 2], [2, 1, 2]], [[2, 1, 3], [2, 1, 3]]) == True, 'is_samepatterns error!'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_samepatterns([],    [])    ==    False\nassert     is_samepatterns([],    [1])    ==    False\nassert     is_samepatterns([1],    [])    ==    False\nassert     is_samepatterns([],    [1, 2])    ==    False\nassert     is_samepatterns([1],    [1, 2])    ==    False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns([1, 2, 3], [3, 1, 2]) == True\nassert     is_samepatterns([1, 2, 3], [3, 1, 2, 3]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns([1, 2, 3], [1, 3]) == False\nassert     is_samepatterns([1, 1, 3], [1, 3]) == True\nassert     is_samepatterns([1, 1, 1], [1, 1]) == True\nassert     is_samepatterns([1, 2, 3], [2, 1, 3]) == False\nassert     is_samepatterns([1, 3, 2], [1, 2, 3]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([\"red\", \"orange\", \"white\", \"black\"], \n    [\"red\", \"orange\", \"white\", \"black\"]) == True\nassert     is_samepatterns([\"blue\", \"white\", \"black\", \"red\"], \n    [\"blue\", \"white\", \"black\", \"red\"]) == False\nassert     is_samepatterns([\"red\", \"orange\", \"white\", \"black\"], \n    [\"red\", \"orange\", \"black\"]) == False\n\nprint (\"is_samepatterns test cases passed\")"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns([\"c\",\"c\",\"c\",\"c\"],[\"c\"]) == True, \"Expected True\"\nassert     is_samepatterns([\"c\",\"c\",\"c\",\"c\"],[\"c\",\"c\",\"c\"]) == False, \"Expected False\"\nassert     is_samepatterns([\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"],[\"c\",\"c\",\"c\",\"c\"]) == True, \"Expected True\"\nassert     is_samepatterns([\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]) == False, \"Expected False\"\nassert     is_samepatterns([\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]) == False, \"Expected False\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    find_tuples([(1, 2), (4, 5), (6, 8), (10, 12)], 2) == [(1, 4), (4, 8), (10, 12)]\n    find_tuples([(5, 6), (9, 10), (10, 12)], 3) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(1,2),(3,4),(5,6)], 2) == [(1, 2), (3, 4)]\nassert     find_tuples([(1,2),(3,4),(5,6)], 5) == []\nassert     find_tuples([(1,2,3,4),(5,6,7,8)], 1) == [(1, 2, 3, 4), (5, 6, 7, 8)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (5, 6)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 5) == [(1, 2), (5, 6)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 0) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 1) == [(3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (5, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)], 3) == [(3, 4), (7, 8), (11, 12)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)], 4) == []\n\n'''\nReturn the tuples from the given list of tuples which have all elements divisible by k from the given list of tuples.\n\nExample:\n    Given list of tuples: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]\n    and K = 3:\n    return [(3, 4), (7, 8), (11, 12)]\n\nNow, when we find (3, 4) and (7, 8), we need to find (11, 12) and so on until we find (13, 14).\n'''\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(5, 3), (9, 2), (1, 1), (4, 4)], 3) == [(5, 3), (1, 1), (4, 4)]\nassert     find_tuples([(1, 2), (4, 3), (9, 4)], 3) == []\nassert     find_tuples([(1, 2), (4, 3), (9, 4), (5, 6), (9, 4)], 4) == [(4, 3), (9, 4)]\nassert     find_tuples([(1, 2), (4, 3), (9, 4), (5, 6), (9, 4), (6, 7), (8, 7)], 4) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1, 2, 4), (3, 6, 5), (8, 3, 5), (1, 2, 4)], 3) == [(3, 6, 5), (8, 3, 5)]\nassert     find_tuples([(1, 2, 4), (3, 6, 5), (8, 3, 5), (1, 2, 4)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(0,1), (2,3), (4,5)], 2) == [(0,2), (2,4)]\nassert     find_tuples([(1,2), (4,5)], 1) == [(1,1), (4,4)]\nassert     find_tuples([], 1) == []\nassert     find_tuples([(2,4), (4,5)], 1) == [(2,4), (4,5)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 1) == [(1,2,3),(4,5,6)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 2) == [(1,4,7),(2,5,8),(3,6,9)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 3) == [(1,4,7),(2,5,8),(3,6,9)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 4) == [(1,4,7),(2,5,8),(3,6,9)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 5) == [(1,4,7),(2,5,8),(3,6,9)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(1, 2), (4, 5), (2, 3), (5, 6)], 3) ==     [(4, 5), (2, 3)]\nassert     find_tuples([(1, 2), (4, 5), (2, 3), (5, 6)], 2) ==     [(2, 3)]\nassert     find_tuples([(1, 2), (4, 5), (2, 3), (5, 6)], 5) ==     []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"\\n***************************************\\n\")\nprint(\"Test case 1: 11 is divisible by 11\")\nprint(\"\\n***************************************\\n\")\n\nassert is_Diff(11) == True, \"Test case 1: 11 is divisible by 11 failed\"\n\nprint(\"Test case 1: 11 is divisible by 11 passed\\n\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_diff_Prime(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Diff(5) == False\nassert     is_Diff(12) == True\nassert     is_Diff(11) == True\nassert     is_Diff(0) == False\nassert     is_Diff(11) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(is_Diff(0)) # True\nprint(is_Diff(1)) # False\nprint(is_Diff(2)) # True\nprint(is_Diff(3)) # False\nprint(is_Diff(10)) # True\nprint(is_Diff(100)) # False\nprint(is_Diff(101)) # False\n\n'''\nUsing 'is' keyword,\nit returns either False or True depending on whether the numbers are equal or not.\n'''\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(10) == False\nassert     is_Diff(1) == False\nassert     is_Diff(3) == False\nassert     is_Diff(4) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nif __name__ == \"__main__\":\n    print(is_Diff(12)) # should print False\n    print(is_Diff(13)) # should print True\n    print(is_Diff(5)) # should print False\n    print(is_Diff(15)) # should print False\n    print(is_Diff(1)) # should print True\n    print(is_Diff(9)) # should print False\n    print(is_Diff(10)) # should print False\n    print(is_Diff(11)) # should print True\n    print(is_Diff(10)) # should print False\n    print(is_Diff(0)) # should print False\n    print(is_Diff(4)) # should print Tru"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(is_Diff(7)) # False\nprint(is_Diff(12)) # True\nprint(is_Diff(33)) # True\nprint(is_Diff(1234)) # False\n\ndef is_number(n): \n    '''\n    Write a python function to check whether a number is divisible by 3, 5 or 7.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef divide_by(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n\n\nassert \n\ndef is_Div(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert word_len(\"hello\") == False\nassert word_len(\"py\") == False\nassert word_len(\"I am python\") == True\nassert word_len(\" \") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert word_len('crazy') == True\nassert word_len('happy') == False\nassert word_len('python') == True\n\nprint('Checking the length of the word: PASSED')\nprint()\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len(\"hello\") == True\nassert     word_len(\"a\") == False\nassert     word_len(123) == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     word_len('student')    == True,    'Wrong Answer'\nassert     word_len('chair')    == False,    'Wrong Answer'\nassert     word_len('silent')    == False,    'Wrong Answer'\nassert     word_len('sister')    == False,    'Wrong Answer'\nassert     word_len('student')    == True,    'Wrong Answer'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     word_len(\"hello\") == True, \"First statement is incorrect\"\nassert     word_len(\"world\") == False, \"Second statement is incorrect\"\nassert     word_len(\"quiz\") == True, \"Third statement is incorrect\"\nassert     word_len(\"program\") == False, \"Fourth statement is incorrect\"\nassert     word_len(\"a\") == False, \"Fifth statement is incorrect\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     word_len('hi')==True\nassert word_len('hello')==False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_of_digits(n):\n    '''\n    Write a function to find the sum of digits of an integer.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntetrahedral_number(3) == 5\nassert tetrahedral_number(5) == 28\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 12\nassert     tetrahedral_number(3) == 20\nassert     tetrahedral_number(4) == 24\nassert     tetrahedral_number(5) == 28\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tetrahedral_number(0) == 1, \\\n        'Incorrect answer: tetrahedral_number(0)'\nassert     tetrahedral_number(1) == 4, \\\n        'Incorrect answer: tetrahedral_number(1)'\nassert     tetrahedral_number(2) == 10, \\\n        'Incorrect answer: tetrahedral_number(2)'\nassert     tetrahedral_number(3) == 20, \\\n        'Incorrect answer: tetrahedral_number(3)'\nassert     tetrahedral_number(4) == 36, \\\n        'Incorrect answer: tetrahedral_number(4)'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(0) == 0, \\\n    'The first tetrahedral number is 0'\nassert     tetrahedral_number(1) == 1, \\\n    'The second tetrahedral number is 1'\nassert     tetrahedral_number(2) == 3, \\\n    'The third tetrahedral number is 3'\nassert     tetrahedral_number(3) == 6, \\\n    'The fourth tetrahedral number is 6'\nassert     tetrahedral_number(4) == 12, \\\n    'The fifth tetrahedral number is 12'\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(1) == math.pi*math.pow(r,2)\nassert    volume_sphere(2) == math.pi*math.pow(r,2) - math.pow(r,2)*math.log(r,2)\nassert    volume_sphere(5) == math.pi*math.pow(r,3) - math.pow(r,3)*math.log(r,3)\nassert    volume_sphere(10) == math.pi*math.pow(r,4) - math.pow(r,4)*math.log(r,4)\nassert    volume_sphere(20) == math.pi*math.pow(r,5) - math.pow(r,5)*math.log(r,5)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(1) == 4.188987351772, \"Expected {}, got {}\".format(4.188987351772, volume_sphere(1))\nassert     volume_sphere(2) == 55.83014358887, \"Expected {}, got {}\".format(55.83014358887, volume_sphere(2))\nassert     volume_sphere(3) == 134.8153479462, \"Expected {}, got {}\".format(134.8153479462, volume_sphere(3))\nassert     volume_sphere(4) == 413.90390461601, \"Expected {}, got {}\".format(413.90390461601, volume_sphere(4))\nassert     volume_sphere(5) == 614.27502929587, \"Expected {}, got {}\".format(614.27502929587, volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_sphere(1) == 32.59, \\\n        \"Wrong result (got: {}) for: volume_sphere(1)\".format(volume_sphere(1))\nassert     volume_sphere(0) == 0, \\\n        \"Wrong result (got: {}) for: volume_sphere(0)\".format(volume_sphere(0))\nassert     volume_sphere(2.5) == 5040.79, \\\n        \"Wrong result (got: {}) for: volume_sphere(2.5)\".format(volume_sphere(2.5))\nassert     volume_sphere(10) == 49800.0, \\\n        \"Wrong result (got: {}) for: volume_sphere(10)\".format(volume_sphere(10))\nassert     volume_sphere(20) == 524288.0, \\\n        \"Wrong result (got: {}) for: volume_sphere(20)\".format(volume_sphere(20))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(3.0) == 104.56\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_sphere(1) == math.pi, \"Sphere volume calculation is wrong\"\nassert     volume_sphere(0) == 0, \"Sphere volume calculation is wrong\"\nassert     volume_sphere(1.2) == 0.64, \"Sphere volume calculation is wrong\"\nassert     volume_sphere(1.5) == 0.524, \"Sphere volume calculation is wrong\"\nassert     volume_sphere(1.7) == 0.5872, \"Sphere volume calculation is wrong\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"correct\")\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_sphere(1) ==    3.1415926535897932384626433832795\nassert     volume_sphere(0) ==    0.0\nassert     volume_sphere(-1) ==    0.0\nassert     volume_sphere(1.23) ==    1.938766042993887534208492\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char(\"hello\") == 26\nassert     get_Char(\"bad\") == 104\nassert     get_Char(\"1234\") == 104\nassert     get_Char(\"\") == 0\nassert get_Char(\"xyz\") == 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"welcome\") == 29\nassert     get_Char(\"radars\") == 55\nassert     get_Char(\"gibberish\") == 107\nassert     get_Char(\"the\") == 45\nassert     get_Char(\"word\") == 119\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char('a') == 1\nassert     get_Char('aa') == 10\nassert     get_Char('aab') == 24\nassert     get_Char('aabb') == 16\nassert     get_Char('aabbb') == 18\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char(\"abc\") == (13 % 26)\nassert     get_Char(\"abcd\") == (25 % 26)\nassert     get_Char(\"abcd\") == (31 % 26)\nassert     get_Char(\"abcd\") == (4 % 26)\nassert     get_Char(\"abcd\") == (25 % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char(\"one\") == 'a'\nassert     get_Char(\"two\") == 'b'\nassert     get_Char(\"three\") == 'c'\nassert     get_Char(\"four\") == 'd'\nassert     get_Char(\"five\") == 'e'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char('CA') == 'A', 'Wrong output'\nassert     get_Char('BA') == 'C', 'Wrong output'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char('abcd') == 9, \"Fail\"\nassert     get_Char('abc') == 0, \"Fail\"\nassert     get_Char('abcx') == 5, \"Fail\"\nassert     get_Char('abcdefghijklmnopqrstuvwxyz') == 26, \"Fail\"\nassert     get_Char('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26, \"Fail\"\nprint(\"All the tests passed!\")\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert get_Char('') == 0\nassert get_Char('a') == 65\nassert get_Char('z') == 122\nassert get_Char('ab') == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequence(2) == 2\nassert     sequence(9) == 2\nassert     sequence(15) == 3\nassert     sequence(11) == 3\nassert     sequence(16) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsequence(1) == 1\nassert \nsequence(5) == 6\nassert \nsequence(30) == 3433\nassert \nsequence(6) == 7\nassert \nsequence(20) == 11\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsequence(1) == 1\nsequence(2) == 3\nsequence(3) == 4\nsequence(4) == 7\nsequence(5) == 11\nsequence(6) == 18\nsequence(7) == 37\nsequence(8) == 64\nsequence(9) == 109\nsequence(10) == 230\nsequence(11) == 2887\nsequence(12) == 1459\nsequence(13) == 6523\nsequence(14) == 126441\nsequence(15) == 33835"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(sequence(5)) \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef nth_digit_of_pi(n):\n    '''\n    Write a function to compute the nth digit of pi.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(sequence(1))\n    print(sequence(2))\n    print(sequence(3))\n    print(sequence(4))\n    print(sequence(5))\n    print(sequence(6))\n    print(sequence(7))\n    print(sequence(8))\n    print(sequence(9))\n    print(sequence(10))"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(4) == 20\nassert     surfacearea_sphere(1) == 4\nassert     surfacearea_sphere(0.5) == 12\nassert     surfacearea_sphere(100) == 2000\nassert     surfacearea_sphere(-2) == 0\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_sphere(1) == 28\nassert     surfacearea_sphere(2) == 56\nassert     surfacearea_sphere(3) == 134\nassert     surfacearea_sphere(4) == 328\nassert     surfacearea_sphere(5) == 624\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(1) == 28, \"surfacearea_sphere not working\"\nassert surfacearea_sphere(2) == 56, \"surfacearea_sphere not working\"\nassert surfacearea_sphere(3) == 72, \"surfacearea_sphere not working\"\nassert surfacearea_sphere(4) == 100, \"surfacearea_sphere not working\"\nassert surfacearea_sphere(5) == 124, \"surfacearea_sphere not working\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(3.0) == 4200.0, \"returns incorrect value\"\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1)==28.66, \\\n'[FAILURE] surfacearea_sphere(1)'\nassert     surfacearea_sphere(2)==56.25, \\\n'[FAILURE] surfacearea_sphere(2)'\nassert     surfacearea_sphere(3)==65.54, \\\n'[FAILURE] surfacearea_sphere(3)'\nassert     surfacearea_sphere(4)==102.75, \\\n'[FAILURE] surfacearea_sphere(4)'\nassert     surfacearea_sphere(5)==127.4, \\\n'[FAILURE] surfacearea_sphere(5)'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(0) == 0\nassert     surfacearea_sphere(2) == 12 * math.pi\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(4) == 56, 'incorrect calculation'\nprint('test pass')\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(1) == 4\nassert     surfacearea_sphere(2) == 20\nassert     surfacearea_sphere(5) == 330\nassert     surfacearea_sphere(8) == 648\nassert     surfacearea_sphere(13) == 714\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(1) == 4*math.pi\nassert surfacearea_sphere(2) == 4*math.pi\nassert surfacearea_sphere(0) == 4*math.pi\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(2) == 28.274333867253867\nassert surfacearea_sphere(5) == 78.51278076171875\n\ndef surfacearea_cylinder(h,r):\n    '''\n    Write a function to find the surface area of a cylindrical tube.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('Passed all tests!'"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncentered_hexagonal_number(1) == 6\ncentered_hexagonal_number(2) == 28\ncentered_hexagonal_number(3) == 58\ncentered_hexagonal_number(4) == 90\ncentered_hexagonal_number(5) == 122\ncentered_hexagonal_number(6) == 154\ncentered_hexagonal_number(7) == 176\ncentered_hexagonal_number(8) == 197\ncentered_hexagonal_number(9) == 226\ncentered_hexagonal_number(10) == 257\ncentered_hexagonal_number(11) == 285\ncentered_hexagonal_number(12) == 308\ncentered_hexagonal_number(13) == 331\ncentered_hexagonal_number(14) == 363\ncentered_hexagonal_number(15) == 396\ncentered_hexagonal_number(16) == 427\ncentered_hexagonal_number(17) == 459\ncentered_hexagonal_number(18) == 497\ncentered_hexagonal_number(19) == 535\ncentered_hexagonal_number(20) == 563\ncentered_hexagonal_number(21) == 602\ncentered_hexagonal_number(22) == 651\ncentered_hexagonal_number(23) == 700\ncentered_hexagonal_number(24) == 740\ncentered_hexagonal_number(25) == 788\ncentered_hexagonal_number(26) == 837\ncentered_hexagonal_number(27) == 885\ncentered_hexagonal_number(28) == 936\ncentered_hexagonal_number(29) == 984\ncentered_hexagonal_number(30) == 1041\ncentered_hexagonal_number(31) == 1093\ncentered_hexagonal_number(32) == 1141\ncentered_hexagonal_number(33) == 1193\ncentered_hexagonal_number(34) == 1242\ncentered_hexagonal_number(35) == 1294\ncentered_hexagonal_number(36) == 1351\ncentered_hexagonal_number(37) == 1394\ncentered_hexagonal_number(38) == 1445\ncentered_hexagonal_number(39) == 1488\ncentered_hexagonal_number(40) == 1537\ncentered_hexagonal_number(41) == 1589\ncentered_hexagonal_number(42) == 1638\ncentered_hexagonal_number(43) == 1690\ncentered_hexagonal_number(44) == 1745\ncentered_hexagonal_number(45) == 1791\ncentered_hexagonal_number(46) == 1842\ncentered_hexagonal_number(47) == 1893\ncentered_hexagonal_number(48) == 1924\ncentered_hexagonal_number(49) == 1985\ncentered_hexagonal_number(50) == 2023\ncentered_hexagonal_number(51) == 2087\ncentered_hexagonal_number(52) == 2139\ncentered_hexagonal_number(53) == 2185\ncentered_hexagonal_number(54) == 2232\ncentered_hexagonal_number(55) == 2272\ncentered_hexagonal_number(56) == 2331\ncentered_hexagonal_number(57) == 2301\ncentered_hexagonal_number(58) == 2361\ncentered_hexagonal_number(59) == 2395\ncentered_hexagonal_number(60) == 2455\ncentered_hexagonal_number(61) == 2498\ncentered_hexagonal_number(62) == 2552\ncentered_hexagonal_number(63) == 2596\ncentered_hexagonal_number(64) == 2650\ncentered_hexagonal_number(65) == 2693\ncentered_hexagonal_number(66) == 2747\ncentered_hexagonal_number(67) == 2795\ncentered_hexagonal_number(68) == 2854\ncentered_hexagonal_number(69) == 2896\ncentered_hexagonal_number(70) == 2953\ncentered_hexagonal_number(71) == 2993\ncentered_hexagonal_number(72) == 3045\ncentered_hexagonal_number(73) == 3095\ncentered_hexagonal_number(74) == 3154\ncentered_hexagonal_number(75) == 3194\ncentered_hexagonal_number(76) == 3244\ncentered_hexagonal_number(77) == 3294\ncentered_hexagonal_number(78) == 3353\ncentered_hexagonal_number(79) == 3393\ncentered_hexagonal_number(80) == 3444\ncentered_hexagonal_number(81) == 3493\ncentered_hexagonal_number(82) == 3542\ncentered_hexagonal_number(83) == 3593\ncentered_hexagonal_number(84) == 3631\ncentered_hexagonal_number(85) == 3691\ncentered_hexagonal_number(86) == 3739\ncentered_hexagonal_number(87) == 3788\ncentered_hexagonal_number(88) == 3837\ncentered_hexagonal_number(89) == 3886\ncentered_hexagonal_number(90) == 3945\ncentered_hexagonal_number(91) == 3988\ncentered_hexagonal_number(92) == 4040\ncentered_hexagonal_number(93) == 4095\ncentered_hexagonal_number(94) == 4137\ncentered_hexagonal_number(95) == 4186\ncentered_hexagonal_number(96) == 4237\ncentered_hexagonal_number(97) == 4286\ncentered_hexagonal_number(98) == 4335\ncentered_hexagonal_number(99) == 4386\ncentered_hexagonal_number(100) == 4436\ncentered_hexagonal_number(101) == 4485\ncentered_hexagonal_number(102) == 4553\ncentered_hexagonal_number(103) == 4593\ncentered_hexagonal_number(104) == 4642\ncentered_hexagonal_number(105) == 4692\ncentered_hexagonal_number(106) == 4740\ncentered_hexagonal_number(107) == 4797\ncentered_hexagonal_number(108) == 4857\ncentered_hexagonal_number(109) == 4894\ncentered_hexagonal_number(110) == 4941\ncentered_hexagonal_number(111) == 4991\ncentered_hexagonal_number(112) == 5037\ncentered_hexagonal_number(113) == 5095\ncentered_hexagonal_number(114) == 5141\ncentered_hexagonal_number(115) == 5195\ncentered_hexagonal_number(116) == 5253\ncentered_hexagonal_number(117) == 5291\ncentered_hexagonal_number(118) == 5355\ncentered_hexagonal_number(119) == 5383\ncentered_hexagonal_number(120) == 5452\ncentered_hexagonal_number(121) == 5493\ncentered_hexagonal_number(122) == 5545\ncentered_hexagonal_number(123) == 5599\ncentered_hexagonal_number(124) == 5655\ncentered_hexagonal_number(125) == 5602\ncentered_hexagonal_number(126) == 5657\ncentered_hexagonal_number(127) == 5704\ncentered_hexagonal_number(128) == 5758\ncentered_hexagonal_number(129) == 5806\ncentered_hexagonal_number(130) == 5854\ncentered_hexagonal_number(131) == 5898\ncentered_hexagonal_number(132) == 5952\ncentered_hexagonal_number(133) == 5988\ncentered_hexagonal_number(134) == 6039\ncentered_hexagonal_number(135) == 6092\ncentered_hexagonal_number(136) == 6142\ncentered_hexagonal_number(137) == 6195\ncentered_hexagonal_number(138) == 6258\ncentered_hexagonal_number(139) == 6294\ncentered_hexagonal_number(140) == 6346\ncentered_hexagonal_number(141) == 6399\ncentered_hexagonal_number(142) == 6441\ncentered_hexagonal_number(143) == 6489\ncentered_hexagonal_number(144) == 6551\ncentered_hexagonal_number(145) == 6593\ncentered_hexagonal_number(146) == 6641\ncentered_hexagonal_number(147) == 6695\ncentered_hexagonal_number(148) == 6754\ncentered_hexagonal_number(149) == 6794\ncentered_hexagonal_number(150) == 6753\ncentered_hexagonal_number(151) == 6795\ncentered_hexagonal_number(152) == 6756\ncentered_hexagonal_number(153) == 6799\ncentered_hexagonal_number(154) == 6843\ncentered_hexagonal_number(155) == 689"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1)    ==    1\nassert     centered_hexagonal_number(2)    ==    3\nassert     centered_hexagonal_number(3)    ==    5\nassert     centered_hexagonal_number(4)    ==    8\nassert     centered_hexagonal_number(5)    ==    13\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 5\ncentered_hexagonal_number(3) == 13\ncentered_hexagonal_number(4) == 29\ncentered_hexagonal_number(5) == 47\ncentered_hexagonal_number(6) == 55\ncentered_hexagonal_number(7) == 73\ncentered_hexagonal_number(8) == 81\ncentered_hexagonal_number(9) == 89\ncentered_hexagonal_number(10) == 97\ncentered_hexagonal_number(11) == 115\ncentered_hexagonal_number(12) == 123\ncentered_hexagonal_number(13) == 131\ncentered_hexagonal_number(14) == 137\ncentered_hexagonal_number(15) == 145\ncentered_hexagonal_number(16) == 153\ncentered_hexagonal_number(17) == 161\ncentered_hexagonal_number(18) == 169\ncentered_hexagonal_number(19) == 177\ncentered_hexagonal_number(20) == 185\ncentered_hexagonal_number(21) == 191\ncentered_hexagonal_number(22) == 193\ncentered_hexagonal_number(23) == 201\ncentered_hexagonal_number(24) == 205\ncentered_hexagonal_number(25) == 209\ncentered_hexagonal_number(26) == 211\ncentered_hexagonal_number(27) == 219\ncentered_hexagonal_number(28) == 221\ncentered_hexagonal_number(29) == 227\ncentered_hexagonal_number(30) == 229\ncentered_hexagonal_number(31) == 233\ncentered_hexagonal_number(32) == 239\ncentered_hexagonal_number(33) == 241\ncentered_hexagonal_number(34) == 251\ncentered_hexagonal_number(35) == 257\ncentered_hexagonal_number(36) == 263\ncentered_hexagonal_number(37) == 271\ncentered_hexagonal_number(38) == 277\ncentered_hexagonal_number(39) == 281\ncentered_hexagonal_number(40) == 289\ncentered_hexagonal_number(41) == 293\ncentered_hexagonal_number(42) == 301\ncentered_hexagonal_number(43) == 307\ncentered_hexagonal_number(44) == 313\ncentered_hexagonal_number(45) == 319\ncentered_hexagonal_number(46) == 321\ncentered_hexagonal_number(47) == 329\ncentered_hexagonal_number(48) == 331\ncentered_hexagonal_number(49) == 333\ncentered_hexagonal_number(50) == 341\ncentered_hexagonal_number(51) == 347\ncentered_hexagonal_number(52) == 349\ncentered_hexagonal_number(53) == 357\ncentered_hexagonal_number(54) == 361\ncentered_hexagonal_number(55) == 363\ncentered_hexagonal_number(56) == 371\ncentered_hexagonal_number(57) == 373\ncentered_hexagonal_number(58) == 377\ncentered_hexagonal_number(59) == 379\ncentered_hexagonal_number(60) == 383\ncentered_hexagonal_number(61) == 389\ncentered_hexagonal_number(62) == 391\ncentered_hexagonal_number(63) == 401\ncentered_hexagonal_number(64) == 409\ncentered_hexagonal_number(65) == 417\ncentered_hexagonal_number(66) == 419\ncentered_hexagonal_number(67) == 421\ncentered_hexagonal_number(68) == 433\ncentered_hexagonal_number(69) == 439\ncentered_hexagonal_number(70) == 443\ncentered_hexagonal_number(71) == 449\ncentered_hexagonal_number(72) == 461\ncentered_hexagonal_number(73) == 463\ncentered_hexagonal_number(74) == 479\ncentered_hexagonal_number(75) == 483\ncentered_hexagonal_number(76) == 489\ncentered_hexagonal_number(77) == 497\ncentered_hexagonal_number(78) == 503\ncentered_hexagonal_number(79) == 513\ncentered_hexagonal_number(80) == 519\ncentered_hexagonal_number(81) == 527\ncentered_hexagonal_number(82) == 539\ncentered_hexagonal_number(83) == 551\ncentered_hexagonal_number(84) == 553\ncentered_hexagonal_number(85) == 559\ncentered_hexagonal_number(86) == 563\ncentered_hexagonal_number(87) == 581\ncentered_hexagonal_number(88) == 583\ncentered_hexagonal_number(89) == 591\ncentered_hexagonal_number(90) == 593\ncentered_hexagonal_number(91) == 601\ncentered_hexagonal_number(92) == 607\ncentered_hexagonal_number(93) == 611\ncentered_hexagonal_number(94) == 617\ncentered_hexagonal_number(95) == 623\ncentered_hexagonal_number(96) == 629\ncentered_hexagonal_number(97) == 641\ncentered_hexagonal_number(98) == 643\ncentered_hexagonal_number(99) == 653\ncentered_hexagonal_number(100) == 661\ncentered_hexagonal_number(101) == 673\ncentered_hexagonal_number(102) == 677\ncentered_hexagonal_number(103) == 683\ncentered_hexagonal_number(104) == 691\ncentered_hexagonal_number(105) == 697\ncentered_hexagonal_number(106) == 701\ncentered_hexagonal_number(107) == 703\ncentered_hexagonal_number(108) == 707\ncentered_hexagonal_number(109) == 719\ncentered_hexagonal_number(110) == 721\ncentered_hexagonal_number(111) == 727\ncentered_hexagonal_number(112) == 731\ncentered_hexagonal_number(113) == 737\ncentered_hexagonal_number(114) == 741\ncentered_hexagonal_number(115) == 743\ncentered_hexagonal_number(116) == 749\ncentered_hexagonal_number(117) == 753\ncentered_hexagonal_number(118) == 757\ncentered_hexagonal_number(119) == 761\ncentered_hexagonal_number(120) == 763\ncentered_hexagonal_number(121) == 769\ncentered_hexagonal_number(122) == 773\ncentered_hexagonal_number(123) == 787\ncentered_hexagonal_number(124) == 793\ncentered_hexagonal_number(125) == 797\ncentered_hexagonal_number(126) == 803\ncentered_hexagonal_number(127) == 809\ncentered_hexagonal_number(128) == 811\ncentered_hexagonal_number(129) == 819\ncentered_hexagonal_number(130) == 823\ncentered_hexagonal_number(131) == 837\ncentered_hexagonal_number(132) == 841\ncentered_hexagonal_number(133) == 843\ncentered_hexagonal_number(134) == 849\ncentered_hexagonal_number(135) == 853\ncentered_hexagonal_number(136) == 857\ncentered_hexagonal_number(137) == 863\ncentered_hexagonal_number(138) == 869\ncentered_hexagonal_number(139) == 871\ncentered_hexagonal_number(140) == 877\ncentered_hexagonal_number(141) == 881\ncentered_hexagonal_number(142) == 883\ncentered_hexagonal_number(143) == 891\ncentered_hexagonal_number(144) == 897\ncentered_hexagonal_number(145) == 903\ncentered_hexagonal_number(146) == 907\ncentered_hexagonal_number(147) == 919\ncentered_hexagonal_number(148) == 921\ncentered_hexagonal_number(149) == 927\ncentered_hexagonal_number(150) == 941\ncentered_hexagonal_number(151) == 943\ncentered_hexagonal_number(152) == 949\ncentered_hexagonal_number(153) == 953\ncentered_hexagonal_number(154) == 967\ncentered_hexagonal_number(155) == 971\ncentered_hexagonal_number(156) == 973\ncentered_hexagonal_number(157) == 979\ncentered_hexagonal_number(158) == 983\ncentered_hexagonal_number(159) == 991"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\nassert centered_hexagonal_number(4) == 6\nassert centered_hexagonal_number(5) == 8\nassert centered_hexagonal_number(6) == 10\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2},{'b': 2, 'c': 3},{'a':1,'c': 4, 'd': 5, 'e': 6}) == \\\n        {'a': 1, 'b': 2, 'c': 3, 'd': 5, 'e': 6}, \\\n        'The returned dictionary is not as expected'\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({\"cat\":1, \"dog\":2}, {\"cat\":2, \"cow\":3}, {\"dog\":4, \"horse\":5}) == {\"cat\":1, \"cow\":3, \"dog\":4, \"horse\":5}\nassert     merge_dictionaries_three({\"car\":1, \"plane\":2}, {\"airplane\":3, \"car\":4}, {\"plane\":5, \"cat\":6}) == {\"car\":1, \"airplane\":3, \"car\":4, \"plane\":5, \"cat\":6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({\"a\": 1, \"b\": 2},\n                                   {\"b\": 2, \"c\": 3},\n                                   {\"d\": 4, \"e\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n\nassert merge_dictionaries_three({\"a\": 1, \"b\": 2},\n                                {\"b\": 2, \"c\": 3},\n                                {\"a\": 1, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\n\nassert merge_dictionaries_three({\"a\": 1, \"b\": 2},\n                                {\"b\": 2, \"c\": 3},\n                                {\"a\": 1}) == {\"a\": 1, \"b\": 2, \"c\": 3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({\"A\":\"1\",\"B\":\"2\"}, {\"C\":\"3\",\"D\":\"4\"}, {\"E\":\"5\",\"F\":\"6\"}) == {\"A\":\"1\",\"B\":\"2\",\"C\":\"3\",\"D\":\"4\",\"E\":\"5\",\"F\":\"6\"}\nassert     merge_dictionaries_three({\"A\":\"1\",\"B\":\"2\"}, {\"C\":\"3\",\"D\":\"4\"}, {\"E\":\"5\",\"F\":\"6\"}) == {\"A\":\"1\",\"B\":\"2\",\"C\":\"3\",\"D\":\"4\",\"E\":\"5\",\"F\":\"6\"}\nassert     merge_dictionaries_three({\"A\":\"1\"}, {\"B\":\"2\"}, {\"C\":\"3\",\"D\":\"4\",\"E\":\"5\",\"F\":\"6\"}) == {\"A\":\"1\",\"B\":\"2\",\"C\":\"3\",\"D\":\"4\",\"E\":\"5\",\"F\":\"6\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({\"a\":1,\"b\":2},{\"a\":3},{\"a\":4}) == {\"a\":4, \"b\":2,\"a\":3}\nassert merge_dictionaries_three({\"a\":1,\"b\":2},{\"a\":3},{\"a\":4}) == {\"a\":4, \"b\":2,\"a\":3}\nassert merge_dictionaries_three({\"a\":1},{\"a\":3},{\"a\":4}) == {\"a\":4,\"a\":3}\n\ndef merge_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    pass\n\ndef merge_dictionaries(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\ndict3 = {'a': 5, 'd': 6}\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)\nassert merged_dict == {'a': 5, 'b': 3, 'c': 4, 'd': 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({1: 'a', 2: 'b'}, {2: 'c'}, {1: 'd'}) == {1: 'd', 2: 'c'}\nassert     merge_dictionaries_three({1: 'a', 2: 'b'}, {1: 'c'}, {2: 'd'}) == {1: 'c', 2: 'd'}\nassert     merge_dictionaries_three({1: 'a', 2: 'b'}, {1: 'c'}, {1: 'd'}) == {1: 'c', 2: 'd'}\n\nprint(\"Pass\" if  (merge_dictionaries_three({'a': 100, 'b': 200, 'c': 300}, {'b': 100}, {'d': 200})) == {'a': 100, 'b': 100, 'c': 300, 'd': 200} else \"Fail\")\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({\"A\": 10, \"B\": 20}, {\"A\": 30, \"C\": 40}, {\"A\": 50, \"D\": 60}) == {\"A\": 70, \"B\": 20, \"C\": 40, \"D\": 60}\nassert    merge_dictionaries_three({\"A\": 10, \"B\": 20}, {\"A\": 30, \"C\": 40}, {\"D\": 60}) == {\"A\": 70, \"B\": 20, \"C\": 40, \"D\": 60}\nassert    merge_dictionaries_three({\"A\": 10, \"B\": 20}, {\"A\": 30, \"C\": 40, \"D\": 60}, {\"A\": 50, \"E\": 60}) == {\"A\": 70, \"B\": 20, \"C\": 40, \"D\": 60, \"E\": 60}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2},\n                        {'c': 3, 'd': 4},\n                        {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1]) == {1: 1}\nassert     freq_count([1, 2, 3, 4, 5, 6]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\nassert     freq_count([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9]) == {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 1, 8: 1, 9: 1}\n\ndef dict_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,2,3,4,5]) == {1:3, 2:2, 3:1, 4:1, 5:1}\n\nassert freq_count([1,1,1,1,1]) == {1:5}\nassert freq_count([1,1,2,2,3]) == {1:3, 2:2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([1,1,1,1,2,2,2,2,3]) == {1: 3, 2: 2, 3: 1}\nassert     freq_count([]) == {}\nassert     freq_count([\"a\"]) == {'a': 1}\n\ndef pair_sum(list1, target):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([1,2,3,4,5,1,2,3,4]) == {1:4, 2:3, 3:3, 4:2}\nassert     freq_count([1,2,3,4,1,2,3,4]) == {1:4, 2:3, 3:3, 4:2}\nassert     freq_count([1,2,3,1,2,3,4,1,2,3]) == {1:4, 2:3, 3:2}\nassert     freq_count([]) == {}\nassert     freq_count([1,1,1]) == {1:3}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count([1,2,3,4,5,6,7,8,8,8,8,8]) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert     freq_count([]) == {}\nassert     freq_count([1,1,1,1,1]) == {1: 5}\nassert     freq_count([1,2,3,4,5]) == {1: 3, 2: 1, 3: 1, 4: 1, 5: 1}\nassert     freq_count([1,2,3,4,5,1]) == {1: 4, 2: 1, 3: 1, 4: 1, 5: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count(['a','b','a','b','a']) == {'a': 3, 'b': 2}\nassert     freq_count(['a','b','a','b','a','b','a','b','a']) == {'a': 4, 'b': 3}\nassert     freq_count(['a','b','a','b','a','b','a','b','a','b','a','b','a']) == {'a': 4, 'b': 3}\nassert     freq_count(['a','b','a','b','a','b','a','b','a','b','a','b','a','b']) == {'a': 5, 'b': 4}\n\ndef freq_count_with_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #...\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count([1,2,3,1]) == {1:1, 2:1, 3:1, 1:1}\nassert     freq_count([1,2,1,3,1,3,2,1]) == {1:4, 2:3, 3:3, 1:3, 3:2, 2:2}\nassert     freq_count(['cat', 'cat', 'cat', 'dog', 'cat', 'dog']) == {'cat':2, 'dog':3, 'cat':2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlist1 = ['a', 'a', 'b', 'a', 'b', 'b']\nexpected1 = {'a': 3, 'b': 3}\nresult1 = freq_count(list1)\nassert result1 == expected1\n\nassert \nlist1 = ['a', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']\nexpected1 = {'a': 4, 'b': 3}\nresult1 = freq_count(list1)\nassert result1 == expected1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4]) == {1:5,2:4,3:3,4:1,5:1,6:1}\n\ndef ams_freq(list2):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # run the test function\n    N = 12345\n    assert closest_num(N) == 1234"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(closest_num(9))  # correct answer: 1\nprint(closest_num(18))  # correct answer: 2\nprint(closest_num(20))  # correct answer: 3\nprint(closest_num(22))  # correct answer: 4\nprint(closest_num(90))  # correct answer: 9"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_num(3) == 1\nassert     closest_num(4) == 2\nassert     closest_num(5) == 2\nassert     closest_num(8) == 3\nassert     closest_num(9) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_n_natural_numbers(N):\n    '''\n    Write a function to compute the sum of N natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    N = 0\n    print(closest_num(N))"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_num(1) == 1\nassert     closest_num(2) == 1\nassert     closest_num(10) == 2\nassert     closest_num(15) == 2\nassert     closest_num(20) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_num(9) == 8\nassert closest_num(10) == 9\nassert closest_num(11) == 10\nassert closest_num(1) == 0\nassert closest_num(8.1) == 8\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log(['python', 'is', 'great', 'than','machines']) == 6\nassert     len_log(['python', 'is', 'great', 'than','machines','is', 'great']) == 5\nassert     len_log(['python', 'is', 'great', 'than','machines', 'is', 'great', 'is', 'great']) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('Pass' if len_log([]) == 0 else 'Fail')\nprint('Pass' if len_log([1,2,3,4,5,6]) == 6 else 'Fail')\nprint('Pass' if len_log([1,2,3,4,5,6,7,8,9,10]) == 10 else 'Fail')\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log(['abcd','abcde','abcd','ab','abc','ab']) == 7,\\\n        \"Fail in len_log\"\n\ndef len_log(s):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([]) == 0\nassert len_log(['a', 'b']) == 1\nassert len_log(['abc', 'def']) == 3\nassert len_log(['abcdef', 'abcd']) == 4\nassert len_log(['abcd', 'abcde']) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log([]) == 0, \"No words\"\nassert     len_log([\"a\", \"b\"]) == 2, \"Two words\"\nassert     len_log([\"c\", \"d\", \"e\", \"f\"]) == 4, \"Four words\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     len_log(['a','b','c','d']) == 4\nassert     len_log(['d','b','c','a']) == 4\nassert     len_log(['a','a','a']) == 3\nassert     len_log([]) == 0\n\ndef fact(n):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring('', ['', 'a']) == True\nassert    find_substring('', ['ab', 'a']) == False\nassert    find_substring('ab', ['ab', 'a']) == True\nassert    find_substring('ab', ['a', 'ab']) == True\nassert    find_substring('ab', ['ab', 'ba']) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring('abababab', 'ab') == True\nassert     find_substring('abababab', 'ab') == False\nassert     find_substring('abcdef', 'def') == False"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring('sub_str', ['sub_str','another_sub_str']) == True, \\\n    \"find_substring failed\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_substring('', ['a', 'b', 'c', 'd', 'e']) == False\nassert find_substring('a', ['a', 'b', 'c', 'd', 'e']) == True\nassert find_substring('b', ['a', 'b', 'c', 'd', 'e']) == False\nassert find_substring('e', ['a', 'b', 'c', 'd', 'e']) == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring(['sunday','thursday','friday'], 'thursday') == True\nassert     find_substring(['sunday','thursday','friday'],'sunday') == True\nassert     find_substring(['sunday','thursday','friday'],'sunday') == False\nassert     find_substring(['sunday','thursday','friday'], 'friday') == True\nassert     find_substring(['sunday','thursday','friday'], 'thursday') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring(\"pwwkew\", \"wke\") == True\nassert     find_substring(\"pwwkew\", \"pwwkew\") == True\nassert     find_substring(\"aaaa\", \"aaaa\") == True\nassert     find_substring(\"\", \"aaaa\") == False\nassert     find_substring(\"\", \"\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring('baseball', 'baseball') == True, f\"{find_substring('baseball', 'baseball')} should be True\"\nassert     find_substring('123', '123') == True, f\"{find_substring('123', '123')} should be True\"\nassert     find_substring('baseball', 'base') == False, f\"{find_substring('baseball', 'base')} should be False\"\nassert     find_substring('baseball', 'ab') == False, f\"{find_substring('baseball', 'ab')} should be False\"\nassert     find_substring('baseball', 'abcd') == False, f\"{find_substring('baseball', 'abcd')} should be False\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring(\"an\", [\"a\", \"b\", \"c\", \"d\"]) == True, \"Should be True\"\nassert     find_substring(\"ad\", [\"a\", \"b\", \"c\", \"d\"]) == False, \"Should be False\"\nassert     find_substring(\"a\", [\"a\", \"b\", \"c\", \"d\"]) == True, \"Should be True\"\nassert     find_substring(\"\", [\"a\", \"b\", \"c\", \"d\"]) == True, \"Should be True\"\nassert     find_substring(\"ab\", [\"a\", \"b\", \"c\", \"d\"]) == False, \"Should be False\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nis_undulating(6) == True\nis_undulating(100) == True\nis_undulating(100.0) == True\nis_undulating(300) == False\nis_undulating(0) == False\nis_undulating(0.0) == False\nis_undulating(-1) == False\nis_undulating(-100) == False\nis_undulating(-100.0) == False\nis_undulating(-100.1) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nis_undulating(3) == False, \"The is_undulating function should return False if the input is 3\"\nis_undulating(4) == True, \"The is_undulating function should return True if the input is 4\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_undulating(7) == True\nassert     is_undulating(8) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(5) == True, \"Is not undulating\"\nassert     is_undulating(5100) == True, \"Is not undulating\"\nassert     is_undulating(52000) == True, \"Is not undulating\"\nassert     is_undulating(52000) == False, \"Is undulating\"\nassert     is_undulating(0) == False, \"Is undulating\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    is_undulating(1) == True\n    is_undulating(2) == True\n    is_undulating(3) == True\n    is_undulating(4) == False\n    is_undulating(5) == False\n    is_undulating(6) == False\n    is_undulating(7) == False\n    is_undulating(8) == False\n    is_undulating(9) == False\n    is_undulating(10) == False\n    is_undulating(11) == True\n    is_undulating(12) == True\n    is_undulating(13) == True\n    is_undulating(14) == True\n    is_undulating(15) == False\n    is_undulating(16) == False\n    is_undulating(17) == False\n    is_undulating(18) == False\n    is_undulating(19) == False\n    is_undulating(20) == False\n    is_undulating(21) == True\n    is_undulating(22) == True\n    is_undulating(23) == True\n    is_undulating(24) == True\n    is_undulating(25) == True\n    is_undulating(26) == False\n    is_undulating(27) == False\n    is_undulating(28) == False\n    is_undulating(29) == False\n    is_undulating(30) == True\n    is_undulating(31) == True\n    is_undulating(32) == True\n    is_undulating(33) == True\n    is_undulating(34) == True\n    is_undulating(35) == True\n    is_undulating(36) == True\n    is_undulating(37) == True\n    is_undulating(38) == True\n    is_undulating(39) == True\n    is_undulating(40) == False\n    is_undulating(41) == False\n    is_undulating(42) == False\n    is_undulating(43) == False\n    is_undulating(44) == False\n    is_undulating(45) == False\n    is_undulating(46) == False\n    is_undulating(47) == False\n    is_undulating(48) == False\n    is_undulating(49) == False\n    is_undulating(50) == False\n    is_undulating(51) == False\n    is_undulating(52) == True\n    is_undulating(53) == True\n    is_undulating(54) == True\n    is_undulating(55) == True\n    is_undulating(56) == True\n    is_undulating(57) == True\n    is_undulating(58) == True\n    is_undulating(59) == True\n    is_undulating(60) == True\n    is_undulating(61) == True\n    is_undulating(62) == True\n    is_undulating(63) == True\n    is_undulating(64) == True\n    is_undulating(65) == True\n    is_undulating(66) == True\n    is_undulating(67) == True\n    is_undulating(68) == True\n    is_undulating(69) == True\n    is_undulating(70) == True\n    is_undulating(71) == True\n    is_undulating(72) == True\n    is_undulating(73) == True\n    is_undulating(74) == True\n    is_undulating(75) == True\n    is_undulating(76) == True\n    is_undulating(77) == True\n    is_undulating(78) == True\n    is_undulating(79) == True\n    is_undulating(80) == True\n    is_undulating(81) == True\n    is_undulating(82) == True\n    is_undulating(83) == True\n    is_undulating(84) == True\n    is_undulating(85) == True\n    is_undulating(86) == True\n    is_undulating(87) == True\n    is_undulating(88) == True\n    is_undulating(89) == True\n    is_undulating(90) == True\n    is_undulating(91) == True\n    is_undulating(92) == True\n    is_undulating(93) == True\n    is_undulating(94) == True\n    is_undulating(95) == True\n    is_undulating(96) == True\n    is_undulating(97) == True\n    is_undulating(98) == True\n    is_undulating(99) == True\n    is_undulating(100) == True\n    is_undulating(101) == True\n    is_undulating(102) == True\n    is_undulating(103) == True\n    is_undulating(104) == True\n    is_undulating(105) == True\n    is_undulating(106) == True\n    is_undulating(107) == True\n    is_undulating(108) == True\n    is_undulating(109) == True\n    is_undulating(110) == True\n    is_undulating(111) == True\n    is_undulating(112) == True\n    is_undulating(113) == True\n    is_undulating(114) == True\n    is_undulating(115) == True\n    is_undulating(116) == True\n    is_undulating(117) == True\n    is_undulating(118) == True\n    is_undulating(119) == True\n    is_undulating(120) == True\n    is_undulating(121) == True\n    is_undulating(122) == True\n    is_undulating(123) == True\n    is_undulating(124) == True\n    is_undulating(125) == True\n    is_undulating(126) == True\n    is_undulating(127) == True\n    is_undulating(128) == True\n    is_undulating(129) == True\n    is_undulating(130) == True\n    is_undulating(131) == True\n    is_undulating(132) == True\n    is_undulating(133) == True\n    is_undulating(134) == True\n    is_undulating(135) == True\n    is_undulating(136) == True\n    is_undulating(137) == True\n    is_undulating(138) == True\n    is_undulating(139) == True\n    is_undulating(140) == True\n    is_undulating(141) == True\n    is_undulating(142) == True\n    is_undulating(143) == True\n    is_undulating(144) == True\n    is_undulating(145) == True\n    is_undulating(146) == True\n    is_undulating(147) == True\n    is_undulating(148) == True\n    is_undulating(149) == True\n    is_undulating(150) == True\n    is_undulating(151) == True\n    is_undulating(152) == True\n    is_undulating(153) == True\n    is_undulating(154) == True\n    is_undulating(155) == True\n    is_undulating(156) == True\n    is_undulating(157) == True\n    is_undulating(158) == True\n    is_undulating(159) == True\n    is_undulating(160) == True\n    is_undulating(161) == True\n    is_undulating(162) == True\n    is_undulating(163) == True\n    is_undulating(164) == True\n    is_undulating(165) == True\n    is_undulating(166) == True\n    is_undulating(167) == True\n    is_undulating(168) == True\n    is_undulating(169) == True\n    is_undulating(170) == True\n    is_undulating(171) == True\n    is_undulating(172) == True\n    is_undulating(173) == True\n    is_undulating(174) == True\n    is_undulating(175) == True\n    is_undulating(176) == True\n    is_undulating(177) == True\n    is_undulating(178) == True\n    is_undulating(179) == True\n    is_undulating(180) == True\n    is_undulating(181) == True\n    is_undulatin"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_undulating(0) == False\nassert     is_undulating(1) == False\nassert     is_undulating(-1) == True\nassert     is_undulating(1.1) == False\nassert     is_undulating(-1.1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_undulating(1) == False, \"1 is undulating\"\nassert     is_undulating(7) == True, \"7 is undulating\"\nassert     is_undulating(50) == True, \"50 is undulating\"\nassert     is_undulating(100) == True, \"100 is undulating\"\nassert     is_undulating(101) == False, \"101 is undulating\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(3,5) == 27, \"error\"\nassert    power(3,3) == 9, \"error\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(2,2) == 4, 'failed'\nassert     power(2,3) == 8, 'failed'\nassert     power(3,2) == 9, 'failed'\nassert     power(3,3) == 27, 'failed'\nassert     power(2,10) == 1024, 'failed'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(2,3) == 8\nassert     power(2,0) == 1\nassert     power(0,3) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (power(3,2) == 9), \"Error: expected %s, got %s\"%(9,power(3,2))\nassert (power(4,1) == 4), \"Error: expected %s, got %s\"%(4,power(4,1))\nassert (power(7,0) == 1), \"Error: expected %s, got %s\"%(1,power(7,0))\nassert (power(0,1) == 0), \"Error: expected %s, got %s\"%(0,power(0,1))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(2,3) == 8, \"Error\"\nassert     power(3,2) == 9, \"Error\"\nassert     power(3,-1) == 0.333, \"Error\"\nassert     power(4,2) == 16, \"Error\"\nassert     power(2.5,1.5) == 8.25, \"Error\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n'''\na = 5\nb = 2\nprint(power(a,b))\n'''\n'''\nassert power(a,b) == a**b\n'''\n\n'''\ndef power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(2,4) == 8\nassert     power(2,-4) == 1/2**4\nassert     power(2,0) == 1\nassert     power(2,4) == 2**4\nassert     power(0,4) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(3,2) == 9, \"3^2 = 9\"\nassert     power(2,3) == 8, \"2^3 = 8\"\nassert     power(2,4) == 16, \"2^4 = 16\"\nassert     power(2,0) == 1, \"2^0 = 1\"\nassert     power(0,3) == 0, \"0^3 = 0\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(2,1) == 2\nassert     power(2,2) == 4\nassert     power(3,2) == 9\nassert     power(2,-1) == 1\nassert     power(2,-2) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power(2, 2) == 4\nassert    power(2, -2) == 1\nassert    power(5, 2) == 25\nassert    power(3, -2) == 0.33333\nassert    power(100, 0) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    index_minimum([(0, -1), (2, -3), (-1, -1), (1, 0), (2, 1)]) == (0, -1)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, 1)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (1, 2)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (1, 4)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (-1, 3)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (1, -1)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -1)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (1, 2)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (1, -2)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -2)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (1, -3)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (1, -4)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -4)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -5)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -6)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -7)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -8)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -9)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -10)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -11)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -12)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -13)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -14)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -15)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -16)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -17)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -18)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -19)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -20)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -21)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -22)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -23)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -24)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -25)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -26)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -27)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -28)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -29)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -30)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -31)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -32)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -33)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -34)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -35)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -36)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -37)]) == (2, -3)\n    index_minimum([(2, -3), (-1, -1), (1, 0), (0, 2), (2, -38)]) == (2, -3)\n    index_minimum([(2, -3)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_minimum([(1, 2), (2, 4), (3, 3), (3, 1), (4, 4)]) == (1, 1)\nassert     index_minimum([(1, 2), (2, 2), (3, 1), (3, 1), (4, 4)]) == (1, 1)\nassert     index_minimum([(1, 2), (2, 2), (3, 1), (3, 1), (4, 4)]) == (2, 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_minimum([(1,2), (4,3), (5,1)]) == (5,1)\nassert index_minimum([(4,2), (5,1), (1,3)]) == (1,3)\nassert index_minimum([(5,1), (1,2), (4,3)]) == (1,2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum(test_list) == ('the','smallest')\n\n'''\nWrite a function that takes a list and a string and returns a dictionary with the word from the string as key and the frequency of occurrence as value.\n'''\n\ndef word_frequency(input_list, input_string):\n    '''\n    Given a list of strings and a string, returns a dictionary with the word from the string as key and the frequency of occurrence as value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([('kra','kam')]) == ('kra','kam')\nassert index_minimum([('kra','kam'),('kra','kam')]) == ('kra','kam')\nassert index_minimum([('kra','kam'),('kra','kam')]) == ('kra','kam')\nassert index_minimum([('kra','kam'),('kra','kam'),('kra','kam')]) == ('kra','kam')\nassert index_minimum([('kra','kam'),('kra','kam'),('kra','kam')]) == ('kra','kam')\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntest_list = [(1, 5), (5, 7), (7, 3), (9, 11)]\nassert index_minimum(test_list) == (1, 5)\nassert index_minimum([(1, 5), (5, 7), (7, 3), (9, 11)]) == (1, 5)\n\ntest_list = [(1, 10), (10, 5), (5, 8), (8, 3), (10, 11)]\nassert index_minimum(test_list) == (10, 11)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nindex_minimum([(1, 3), (5, 5)]) == (1, 3)\nassert \nindex_minimum([(1, 5), (5, 5)]) == (1, 5)\nassert \nindex_minimum([(0, 2), (5, 5), (1, 3)]) == (0, 2)\nassert \nindex_minimum([(0, 2), (3, 5), (1, 3), (5, 5), (3, 5)]) == (0, 2)\nassert \nindex_minimum([(0, 2), (3, 5), (1, 3), (5, 5), (3, 5), (0, 2)]) == (0, 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[1,3,5],[6,7,9],[2,4]]) == 3, \"Wrong\"\nassert Find_Min_Length([[1,3,5],[6,7,9],[2,4,1]]) == 4, \"Wrong\"\nassert Find_Min_Length([[1,3,5],[6,7,9],[2,4,1],[2]]) == 2, \"Wrong\"\nassert Find_Min_Length([[1,3,5],[6,7,9],[2,4,1],[2,3]]) == 2, \"Wrong\"\nassert Find_Min_Length([[1,3,5],[6,7,9],[2,4,1],[2,3,4]]) == 2, \"Wrong\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[1,2,3], [4,5,6], [7,8,9]]) == 2\nassert     Find_Min_Length([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == 4\nassert Find_Min_Length([[1,2,3], [4,5,6]]) == 2\nassert Find_Min_Length([[1,2,3], [4,5], [6,7,8]]) == 1\nassert Find_Min_Length([[1], [2], [3]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[1,2,3,4],[1,2,3,4,5,6,7]]) == 5\nassert     Find_Min_Length([[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]]) == 3\nassert     Find_Min_Length([[1,2,3,4],[5,6,7],[8,9,10]]) == 3\nassert     Find_Min_Length([[1],[2],[3],[4],[5],[6],[7]]) == 4\nassert     Find_Min_Length([[1,2,3,4,5,6,7,8,9]]) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[4,2,3],[4,3,2],[4,3,1]]) == 2\nassert     Find_Min_Length([[2],[2],[2]]) == 0\nassert     Find_Min_Length([[4],[2],[3],[2],[1],[2]]) == 2"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[1, 2, 3], [2, 2], [3, 4]]) == 2\nassert Find_Min_Length([[1], [2], [3]]) == 1\nassert Find_Min_Length([[1], [2], [3], [4]]) == 1\nassert Find_Min_Length([[1, 2, 3], [2, 2, 4], [2, 2, 4]]) == 2\nassert Find_Min_Length([[1, 2, 3], [1, 2, 4], [2, 2, 4]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    Find_Min_Length([[1, 3, 5, 7], [2, 4, 6, 8], [1, 5, 7, 9], [2, 4, 6, 8, 10]]) == 2\n    Find_Min_Length([[1], [2], [3]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5]]) == 1\n    Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1\n    Find_Min_Length([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6, 7, 8, 9, 10]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6], [7]]) == 1\n    Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]]) == 1\n    Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]]) == 1\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52], [53, 54], [55, 56], [57, 58]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52], [53, 54], [55, 56], [57, 58], [59, 60]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52], [53, 54], [55, 56], [57, 58], [59, 60], [61, 62], [63, 64], [65, 66], [67, 68]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 42], [43, 44], [45, 46], [47, 48], [49, 50], [51, 52], [53, 54], [55, 56], [57, 58], [59, 60], [61, 62], [63, 64], [65, 66], [67, 68], [69, 70], [71, 72]]) == 4\n    Find_Min_Length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20], [21, 22], [23, 24], [25, 26], [27, 28], [29, 30], [31, 32], [33, 34], [35, 36], [37, 38], [39, 40], [41, 4"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 3, 4], [5, 6, 7, 8]]) == 2, \"Wrong answer\"\nassert     Find_Min_Length([[5, 6, 7, 8], [1, 2, 3, 4], [1, 2, 3, 4], [5, 6, 7, 8]]) == 1, \"Wrong answer\"\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == 3, \"Wrong answer\"\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == 5, \"Wrong answer\"\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == 6, \"Wrong answer\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef ackermann(m, n):\n    '''\n    Write a python function to calculate the Ackermann function.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor of two integers.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_divisors(n):\n    '''\n    Write a python function to count the number of divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all the divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndivisor(2)\ndivisor(100)\ndivisor(5)\ndivisor(10)\ndivisor(1)\ndivisor(12)\ndivisor(25)\n\n\n'''\nWrite a python function to find the number of divisors of a given integer.\n    \n    Hint:\n    Divisor of a number is the product of all integers except the number itself. \n    Example:\n    5 has 5 divisors: 1, 5, 1 and 5.\n    \n'''\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef is_prime(n):\n    '''\n    Write a python function to check if a given number is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisor(1) == 2\nassert     divisor(2) == 3\nassert     divisor(3) == 2\nassert     divisor(4) == 2\nassert     divisor(10) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert divisor(1) == 1\nassert divisor(2) == 2\nassert divisor(3) == 2\nassert divisor(4) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisor(2) == 2\nassert     divisor(4) == 2\nassert     divisor(10) == 4\nassert     divisor(50) == 7\nassert     divisor(12) == 4\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists([[1,2,2,3,4],\n                           [2,4,4,2,1],\n                           [3,2,3,1,2],\n                           [1,4,1,1,1],\n                           [1,3,1,1,1],\n                           [1,2,2,3,4]]) == {1: 2, 2: 3, 3: 2, 4: 1, 1: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency_lists([[2, 2], [3, 3], [5, 5]]) == {2: 2, 3: 2, 5: 2}\nassert     frequency_lists([[1, 1], [1, 1]]) == {1: 2}\nassert     frequency_lists([[1, 1, 1], [2, 2, 2]]) == {1: 3, 2: 2}\nassert     frequency_lists([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]) == {1: 4, 2: 3, 3: 3}\nassert     frequency_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {1: 2, 2: 1, 3: 2, 4: 1, 5: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert frequency_lists([[1,2,2,2,2,2,2,2,2,2],\n                        [1,2,2,2,2,2,2,2,2,2],\n                        [1,2,2,2,2,2,2,2,2,2]]) == {1: 2, 2: 6, 3: 1, 4: 2, 5: 1}\nassert frequency_lists([[1,2,3,4,5,6,7,8,9,0],\n                        [1,2,3,4,5,6,7,8,9,0],\n                        [1,2,3,4,5,6,7,8,9,0]]) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 0: 1}\nassert frequency_lists([[1,1,2,2],\n                        [1,2,2,2],\n                        [1,1,2,2]]) == {1: 3, 2: 2, 3: 1}\nassert frequency_lists([[1],\n                        [1],\n                        [1]]) == {1: 3}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[[1], [2], [3]], [[2], ]]) == {1:1, 2:2, 3:1}\nassert     frequency_lists([[[1, 1], [2], [3]], [[2], ]]) == {1:2, 2:1, 3:1}\nassert     frequency_lists([[[1, 1, 1], [2], [3]], [[2], ]]) == {1:3, 2:1, 3:1}\nassert     frequency_lists([[[1, 1, 1, 1], [2], [3]], [[2], ]]) == {1:4, 2:1, 3:1}\nassert     frequency_lists([[[1, 1, 1, 1, 1], [2], [3]], [[2], ]]) == {1:5, 2:1, 3:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([['a','b'],['c','d']]) == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert     frequency_lists([['a','a','a'],['a','b'],['b','b']]) == {'a': 3, 'b': 2, 'a': 2}\nassert     frequency_lists([['a','b','c'],['a','a','a'],['a','b','c']]) == {'a': 4, 'b': 2, 'c': 2}\nassert     frequency_lists([['a'],['b'],['a'],['b']]) == {'a': 2, 'b': 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1, 1, 2], [2, 2, 1]]) == {1: 2, 2: 2}\nassert frequency_lists([[1, 1, 2], [2, 2, 1], [1, 1, 2]]) == {1: 3, 2: 2}"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1],[[2],[3,4],5]]) == {1: 1, 2: 1, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1,2,3],[[4],5]]) == {1: 1, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1,2,3],[[4],5],[[5,6],7]]) == {1: 1, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1}\nassert     frequency_lists([[1,2,3,4,5,6,7,8,9,10],[[11],12,13],[[14],15],16]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_num([5, 2, 4, 6]) == 30, 'Invalid result'\nassert     multiply_num([10, 2, 6]) == 60, 'Invalid result'\nassert     multiply_num([1, 5]) == 5, 'Invalid result'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    multiply_num([2, 2, 2]) == 8\n    assert multiply_num([1, 2, 3, 4, 5]) == 120\n    assert multiply_num([2, 2, 2]) == 8\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([]) == 1\nassert     multiply_num([1]) == 1\nassert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([1, 2, 3, 4, 5, 6, 7]) == 60\nassert     multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 600\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([3, 4, 5]) == 24\nassert     multiply_num([3, 4, 5, 0]) == 0\nassert     multiply_num([3, -4, 5]) == -12\nassert     multiply_num([0, 0, -4]) == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_num([2, 3, 4, 5, 6, 7]) == 21\nassert     multiply_num([2, 3, 4]) == 24\nassert     multiply_num([2, 2, 2]) == 4\n\ndef even_odd_list(numbers):\n    '''\n    Write a function to sort the list of numbers in ascending order and return the final list.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_num([2, 4, 8]) == 24\nassert     multiply_num([2, 4, 8, 10]) == 120\nassert     multiply_num([-2, -4, -8]) == 24\nassert     multiply_num([]) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5050, \"Multiplication does not work\"\nassert     multiply_num([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5, \"Multiplication does not work\"\nassert     multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1000, \"Multiplication does not work\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(5) == \"101\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(4) == '1100'\nassert     decimal_to_binary(15) == '1111'\nassert     decimal_to_binary(16) == '1101'\nassert     decimal_to_binary(35) == '111011010'\nassert     decimal_to_binary(2**128) == '111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert decimal_to_binary(1) == \"1\"\nassert decimal_to_binary(10) == \"1010\"\nassert decimal_to_binary(15) == \"1111\"\nassert decimal_to_binary(32) == \"1000\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(11) == '1011'\nassert decimal_to_binary(7) == '111'\nassert decimal_to_binary(3) == '011'\nassert decimal_to_binary(1) == '1'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef str_to_num(s):\n    '''\n    Write a function to convert a string to its corresponding integer, if the given string contains any number at all.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef binary_to_decimal(s):\n    '''\n    Write a function to convert the given binary string representation of an integer to the decimal equivalent.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    str_num = str(n)\n    str_num = list(str_num)\n    num = 1\n    for i in range(len(str_num)-1, -1, -1):\n        if str_num[i] == '1':\n            num = num + 2**(-i-1)\n    return str(num)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert decimal_to_binary(0) == \"0\"\nassert decimal_to_binary(1) == \"1\"\nassert decimal_to_binary(2) == \"10\"\nassert decimal_to_binary(3) == \"11\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(1221) == 1222\nassert     next_smallest_palindrome(2232) == 2223\nassert     next_smallest_palindrome(3333) == 3333\nassert     next_smallest_palindrome(1111) == 1111\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert next_smallest_palindrome(6) == 9\nassert next_smallest_palindrome(11) == 19\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(2147483647) == 2147483647\nassert     next_smallest_palindrome(12) == 9\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(1232) ==    133321\nassert next_smallest_palindrome(123321) == 133321\nassert next_smallest_palindrome(10) == 11\nassert next_smallest_palindrome(11) == 1\nassert next_smallest_palindrome(1) == 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(121) == 725\nassert     next_smallest_palindrome(100) == 101\nassert     next_smallest_palindrome(50) == 53\nassert     next_smallest_palindrome(7) == 71\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    num = 4\n    result = next_smallest_palindrome(num)\n    print(\"next_smallest_palindrome({}) => {}\".format(num, result))\n    num = 123\n    result = next_smallest_palindrome(num)\n    print(\"next_smallest_palindrome({}) => {}\".format(num, result))\n    num = 1000\n    result = next_smallest_palindrome(num)\n    print(\"next_smallest_palindrome({}) => {}\".format(num, result))\n    num = 10000\n    result = next_smallest_palindrome(num)\n    print(\"next_smallest_palindrome({}) => {}\".format(num, result)"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(12) == 21, \"Wrong answer\"\nassert     next_smallest_palindrome(1) == 2, \"Wrong answer\"\nassert     next_smallest_palindrome(2) == 3, \"Wrong answer\"\nassert     next_smallest_palindrome(4) == 5, \"Wrong answer\"\nassert     next_smallest_palindrome(5) == 6, \"Wrong answer\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(10) == 1\nassert     next_smallest_palindrome(1111) == 1\nassert     next_smallest_palindrome(2147483647) == 1\nassert     next_smallest_palindrome(2147483648) == 1\nassert     next_smallest_palindrome(2147483649) == 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_next_smallest_palindrome():\n    print(\"Testing next_smallest_palindrome()...\")\n    # Test 1:\n    assert next_smallest_palindrome(1222341231) == 1231221\n    assert next_smallest_palindrome(122234123) == 1231221\n    assert next_smallest_palindrome(122234) == 12321\n    "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef subarray_sum(arr, n, k):\n    '''\n    Write a function to find the subarray (containing at least one number) which has the sum of elements equal to given number k.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef longest_consecutive(arr):\n    '''\n    Write a function that takes an integer array and returns the length of the longest consecutive sequence in the array.\n    Note that the start and end index of the consecutive sequence does not need to be in the array.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert kth_element([1, 3, 5, 7, 9, 11], 4) == 5\nassert kth_element([], 3) == -1\n\ndef find_peak_element(arr):\n    '''\n    Write a function to find a peak element in a 2D matrix.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     kth_element([1, 5, 6, 8], 4) == 8, \"Wrong output\"\nassert     kth_element([1, 5, 6, 8], 0) == 1, \"Wrong output\"\nassert     kth_element([1, 5, 6, 8], 9) == 6, \"Wrong output\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     kth_element([1,2,3,4,5,6,7], 1) == 1\nassert     kth_element([1,2,3,4,5,6,7], 5) == 6\nassert     kth_element([1,2,3,4,5,6,7], 9) == -1\nassert     kth_element([1,2,3,4,5,6,7], 0) == -1\nassert     kth_element([1,2,3,4,5,6,7], -1) == -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef kth_element(arr, k):\n    '''\n    Given an array of distinct integers and a number k, find the kth integer in the array.\n    Note that the array is guaranteed to have at least k unique elements.\n    '''\n    # base case\n    if len(arr) == 0 or k == 0:\n        return -1\n\n    # recursive case\n    return kth_element(arr[1:], k) + 1 if arr[0] == k else kth_element(arr[1:], k - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     kth_element([1,2,3,4], 1) == 1\nassert     kth_element([1,2,3,4], 4) == 3\nassert     kth_element([1,2,3,4], 0) == 1\nassert     kth_element([1,2,3,4], 5) == 4\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert kth_element([1, 2, 3, 4, 5, 6, 7], 3) == 4\nassert kth_element([1, 2, 3, 4, 5, 6, 7], 8) == -1\nassert kth_element([1, 2, 3, 4, 5, 6, 7], 2) == 5\nassert kth_element([1, 2, 3, 4, 5, 6, 7], 0) == 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    snake_to_camel('snake_case') =='snakeCase'\n    snake_to_camel('snake_case') =='snakeCase'\n    snake_to_camel('snake_case_with_underscore') =='snakeCaseWithUnderscore'\n    snake_to_camel('snake_case_with_double_underscore') =='snakeCaseWithDoubleUnderscore'\n    snake_to_camel('snake_case_with_multiple_underscore') =='snakeCaseWithMultipleUnderscore'\n    snake_to_camel('snake_case_with_capital_upper_case') =='snakeCaseWithCapitalUpperCase'\n    snake_to_camel('snake_case_with_capital_lower_case') =='snakeCaseWithCapitalLowerCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"x_y_z\") == \"xYZ\", \"Camel case\"\nassert     snake_to_camel(\"x_y_z\") == \"xYZ\", \"Should be Camel Case\"\nassert     snake_to_camel(\"xy_z\") == \"xyZ\", \"Should be Camel Case\"\nassert     snake_to_camel(\"xy_z\") == \"xyZ\", \"Should be Camel Case\"\nassert     snake_to_camel(\"xyz\") == \"xyz\", \"Should be Camel Case\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snakecase') =='snakecase', \\\n        'snake case to camel case should return snakecase'\n\nassert     snake_to_camel('snakecase') =='snakeCase', \\\n        'snake case to camel case should return snakecase'\n\nassert     snake_to_camel('snakeCase') =='snakeCase', \\\n        'snake case to camel case should return snakecase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('hi_snake') == 'hiSnake'\nassert     snake_to_camel('Hi_snake') == 'HiSnake'\nassert     snake_to_camel('hi_snake_') == 'hiSnake'\nassert     snake_to_camel('hi_snake_') == 'hiSnake'\nassert     snake_to_camel('snake_') == 'Snake'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case_string') =='snakeCaseString', 'Should be snake_case_string'\nassert     snake_to_camel('snake_case_string_') =='snakeCaseString', 'Should be snake_case_string'\nassert     snake_to_camel('snake_case_string_snake_case') =='snakeCaseStringSnakeCase', 'Should be snake_case_string_snake_case'\nassert     snake_to_camel('snake_case_string_snake_case_') =='snakeCaseStringSnakeCase', 'Should be snake_case_string_snake_case'\nassert     snake_to_camel('snake_case_string_snake_case_snake_case') =='snakeCaseStringSnakeCaseSnakeCase', 'Should be snake_case_string_snake_case_snake_case'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") == \"snake_to_camel\"\nassert     snake_to_camel(\"snake\") == \"snake\"\nassert     snake_to_camel(\"snake_case\") == \"snake_case\"\nassert     snake_to_camel(\"snake_case_with_spaces\") == \"snake_case_with_spaces\"\nassert     snake_to_camel(\"snake_case_with_underscores\") == \"snake_case_with_underscores\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_12') =='snakeCase12'\nassert     snake_to_camel('snake_case_123') =='snakeCase123'\nassert     snake_to_camel('snake_case_1234') =='snakeCase1234'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(4, 1) == 8, 'wrong!'\nassert     eulerian_num(4, 2) == 24, 'wrong!'\nassert     eulerian_num(4, 3) == 40, 'wrong!'\nassert     eulerian_num(3, 2) == 6, 'wrong!'\nassert     eulerian_num(2, 1) == 2, 'wrong!'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neulerian_num(1, 2) == 1\neulerian_num(3, 2) == -1\neulerian_num(1, 3) == 1\neulerian_num(2, 2) == 1\neulerian_num(3, 3) == 1\neulerian_num(4, 3) == 1\neulerian_num(5, 3) == 1\neulerian_num(6, 3) == 1\neulerian_num(7, 3) == 1\neulerian_num(8, 3) == 1\neulerian_num(9, 3) == 1\neulerian_num(10, 3) == 1\neulerian_num(11, 3) == 1\neulerian_num(12, 3) == 1\neulerian_num(13, 3) == 1\neulerian_num(14, 3) == 1\neulerian_num(15, 3) == 1\neulerian_num(16, 3) == 1\neulerian_num(17, 3) == 1\neulerian_num(18, 3) == 1\neulerian_num(19, 3) == 1\neulerian_num(20, 3) == 1\neulerian_num(21, 3) == 1\neulerian_num(22, 3) == 1\neulerian_num(23, 3) == 1\neulerian_num(24, 3) == 1\neulerian_num(25, 3) == 1\neulerian_num(26, 3) == 1\neulerian_num(27, 3) == 1\neulerian_num(28, 3) == 1\neulerian_num(29, 3) == 1\neulerian_num(30, 3) == 1\neulerian_num(31, 3) == 1\neulerian_num(32, 3) == 1\neulerian_num(33, 3) == 1\neulerian_num(34, 3) == 1\neulerian_num(35, 3) == 1\neulerian_num(36, 3) == 1\neulerian_num(37, 3) == 1\neulerian_num(38, 3) == 1\neulerian_num(39, 3) == 1\neulerian_num(40, 3) == 1\neulerian_num(41, 3) == 1\neulerian_num(42, 3) == 1\neulerian_num(43, 3) == 1\neulerian_num(44, 3) == 1\neulerian_num(45, 3) == 1\neulerian_num(46, 3) == 1\neulerian_num(47, 3) == 1\neulerian_num(48, 3) == 1\neulerian_num(49, 3) == 1\neulerian_num(50, 3) == 1\neulerian_num(51, 3) == 1\neulerian_num(52, 3) == 1\neulerian_num(53, 3) == 1\neulerian_num(54, 3) == 1\neulerian_num(55, 3) == 1\neulerian_num(56, 3) == 1\neulerian_num(57, 3) == 1\neulerian_num(58, 3) == 1\neulerian_num(59, 3) == 1\neulerian_num(60, 3) == 1\neulerian_num(61, 3) == 1\neulerian_num(62, 3) == 1\neulerian_num(63, 3) == 1\neulerian_num(64, 3) == 1\neulerian_num(65, 3) == 1\neulerian_num(66, 3) == 1\neulerian_num(67, 3) == 1\neulerian_num(68, 3) == 1\neulerian_num(69, 3) == 1\neulerian_num(70, 3) == 1\neulerian_num(71, 3) == 1\neulerian_num(72, 3) == 1\neulerian_num(73, 3) == 1\neulerian_num(74, 3) == 1\neulerian_num(75, 3) == 1\neulerian_num(76, 3) == 1\neulerian_num(77, 3) == 1\neulerian_num(78, 3) == 1\neulerian_num(79, 3) == 1\neulerian_num(80, 3) == 1\neulerian_num(81, 3) == 1\neulerian_num(82, 3) == 1\neulerian_num(83, 3) == 1\neulerian_num(84, 3) == 1\neulerian_num(85, 3) == 1\neulerian_num(86, 3) == 1\neulerian_num(87, 3) == 1\neulerian_num(88, 3) == 1\neulerian_num(89, 3) == 1\neulerian_num(90, 3) == 1\neulerian_num(91, 3) == 1\neulerian_num(92, 3) == 1\neulerian_num(93, 3) == 1\neulerian_num(94, 3) == 1\neulerian_num(95, 3) == 1\neulerian_num(96, 3) == 1\neulerian_num(97, 3) == 1\neulerian_num(98, 3) == 1\neulerian_num(99, 3) == 1\neulerian_num(100, 3) == 1\neulerian_num(101, 3) == 1\neulerian_num(102, 3) == 1\neulerian_num(103, 3) == 1\neulerian_num(104, 3) == 1\neulerian_num(105, 3) == 1\neulerian_num(106, 3) == 1\neulerian_num(107, 3) == 1\neulerian_num(108, 3) == 1\neulerian_num(109, 3) == 1\neulerian_num(110, 3) == 1\neulerian_num(111, 3) == 1\neulerian_num(112, 3) == 1\neulerian_num(113, 3) == 1\neulerian_num(114, 3) == 1\neulerian_num(115, 3) == 1\neulerian_num(116, 3) == 1\neulerian_num(117, 3) == 1\neulerian_num(118, 3) == 1\neulerian_num(119, 3) == 1\neulerian_num(120, 3) == 1\neulerian_num(121, 3) == 1\neulerian_num(122, 3) == 1\neulerian_num(123, 3) == 1\neulerian_num(124, 3) == 1\neulerian_num(125, 3) == 1\neulerian_num(126, 3) == 1\neulerian_num(127, 3) == 1\neulerian_num(128, 3) == 1\neulerian_num(129, 3) == 1\neulerian_num(130, 3) == 1\neulerian_num(131, 3) == 1\neulerian_num(132, 3) == 1\neulerian_num(133, 3) == 1\neulerian_num(134, 3) == 1\neulerian_num(135, 3) == 1\neulerian_num(136, 3) == 1\neulerian_num(137, 3) == 1\neulerian_num(138, 3) == 1\neulerian_num(139, 3) == 1\neulerian_num(140, 3) == 1\neulerian_num(141, 3) == 1\neulerian_num(142, 3) == 1\neulerian_num(143, 3) == 1\neulerian_num(144, 3) == 1\neulerian_num(145, 3) == 1\neulerian_num(146, 3) == 1\neulerian_num(147, 3) == 1\neulerian_num(148, 3) == 1\neulerian_num(149, 3) == 1\neulerian_num(150, 3) == 1\neulerian_num(151, 3) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef eulerian_num_optimised(n, m): \n    '''\n    Your function should return the Eulerian number a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neulerian_num(7, 5) == 1\neulerian_num(7, 6) == 2\neulerian_num(3, 6) == 2\neulerian_num(4, 5) == 1\neulerian_num(6, 5) == 1"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eulerian_num(4, 4) == 1, '4, 4'\nassert     eulerian_num(3, 4) == 2, '3, 4'\nassert     eulerian_num(5, 7) == 3, '5, 7'\nassert     eulerian_num(1, 1) == 1, '1, 1'\nassert     eulerian_num(2, 1) == 1, '2, 1'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(2, 1) == 3, \"Error 1\"\nassert     eulerian_num(3, 2) == 4, \"Error 2\"\nassert     eulerian_num(4, 2) == 5, \"Error 3\"\nassert     eulerian_num(5, 2) == 6, \"Error 4\"\nassert     eulerian_num(5, 1) == 1, \"Error 5\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert eulerian_num(2, 2) == 1\nassert eulerian_num(4, 1) == 3\nassert eulerian_num(2, 3) == 1\nassert eulerian_num(5, 2) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eulerian_num(6, 4) == 5\nassert     eulerian_num(8, 3) == 9\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists(['abcd', 'abcb', 'xyz', '123']) == ['123', 'abcd', 'xyz', 'abcb']\nassert sort_sublists(['th', 'ti', 'xt', 'to', 'ej','sm', 'en', 'kj', 'hf', 'gj', 'aj', 'jh']) == ['aj', 'gj', 'hf', 'kj', 'jh','sm', 'en', 'ti', 'to', 'th', 'xt', 'ej']\n\n\n\ndef shift_list(input_list):\n    '''\n    Write a function to shift the elements in the input list to the end of the list.\n    '''\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([['blue','red'], ['black', 'white']]) == [['black', 'white'], ['blue','red']]\nassert     sort_sublists([['red', 'white'], ['black', 'blue']]) == [['black', 'blue'], ['red', 'white']]\nassert     sort_sublists([['red', 'white','red'], ['black', 'blue', 'white']]) == [['black', 'blue', 'white'], ['red', 'white','red']]\nassert     sort_sublists([['red', 'white', 'green'], ['blue', 'black', 'white']]) == [['blue', 'black', 'white'], ['red', 'white', 'green']]\nassert     sort_sublists([['blue', 'white','red'], ['red', 'green', 'white']]) == [['red', 'green', 'white'], ['blue', 'white','red']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists(['asdf', '1', 'acf', '0', '0', 'fgh', 'd', 'f', '0']) == \nassert     sort_sublists(['asdf', '1', 'acf', '0', '0', 'fgh', 'd', 'f', '0']) == \nassert     sort_sublists([]) == []\nassert     sort_sublists(['asdf', '1', 'acf', '0', '0', 'fgh', 'd', 'f', '0']) == \nassert     sort_sublists(['asdf', '1', 'acf', '0', '0', 'fgh', 'd', 'f', '0']) == \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([['cat', 'bat', 'rat'], ['cat', 'apple', 'bat'], ['bat', 'rat', 'cat'], ['cat', 'rat', 'bat']]) == [['bat', 'rat', 'cat'], ['bat', 'cat', 'rat'], ['cat', 'cat', 'bat'], ['cat', 'apple', 'bat']]\nassert sort_sublists([['cat', 'bat', 'rat'], ['cat', 'apple', 'bat'], ['bat', 'rat', 'cat'], ['cat', 'rat', 'bat']]) == [['bat', 'rat', 'cat'], ['bat', 'cat', 'rat'], ['cat', 'cat', 'bat'], ['cat', 'apple', 'bat']]\n\ndef test_sort_sublists():\n    assert sort_sublists([['cat', 'bat', 'rat'], ['cat', 'apple', 'bat'], ['bat', 'rat', 'cat'], ['cat', 'rat', 'bat']]) == [['bat', 'rat', 'cat'], ['bat', 'cat', 'rat'], ['cat', 'cat', 'bat'], ['cat', 'apple', 'bat']]\n    print(\"you have passed the test!\")\n\n\nif __name__ == \"__main__\":\n    test_sort_sublists("
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([[1,2,3],['a','b','c'],[2,3,4],['d','e','f']]) == [[1,2,3],['d','e','f'],[2,3,4],['a','b','c']]\nassert     sort_sublists([[1,2,3,4,5],['a','b','c','d'],['e','f','g'],['h','i','j']]) == [[1,2,3,4,5],['a','b','c','d'],['e','f','g'],['h','i','j']]\nassert     sort_sublists([['a','b','c'],['b','a'],['c','d']]) == [['a','b','c'],['c','d'],['b','a']]\nassert     sort_sublists([['a','b'],['a','b'],['a','b']]) == [['a','b'],['a','b'],['a','b']]\nassert     sort_sublists([[]]) == [[]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([\"good\", \"good\", \"bad\", \"bad\", \"bad\", \"bad\"]) == [\"bad\", \"bad\", \"good\", \"good\", \"bad\", \"bad\"], \"Wrong\"\nassert     sort_sublists([\"bad\", \"bad\", \"bad\", \"bad\", \"bad\", \"good\"]) == [\"bad\", \"bad\", \"bad\", \"bad\", \"good\", \"bad\"], \"Wrong\"\nassert     sort_sublists([]) == [], \"Wrong\"\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([\"abc\",\"bca\",\"cab\"]) == [['cab','cab','bca'],['abc','abc','bca'],['abc','bca','cab']]\nassert     sort_sublists([\"a\",\"a\",\"a\"]) == [['a','a','a'],['a','a','a'],['a','a','a']]\n\n'''\n    1. Write a function that returns the number of sets in a list of sets.\n    2. Write a function that sorts the list of sets by ascending order.\n'''\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    print(sort_sublists([[\"apple\", \"ball\", \"cat\"], [\"cat\", \"cat\", \"dog\"], [\"dog\", \"banana\", \"cat\"]])) == \n    # [['apple', 'ball', 'cat'], ['cat', 'cat', 'dog'], ['dog', 'banana', 'cat']]\n    print(sort_sublists([[\"cat\", \"bat\", \"cat\"], [\"cat\", \"mat\", \"cat\"], [\"bat\", \"cat\", \"cat\"]])) ==\n    # [['cat', 'bat', 'cat'], ['cat','mat', 'cat'], ['bat', 'cat', 'cat']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([[\"Banana\",\"Apple\"],[\"Orange\"],[\"Pineapple\",\"Strawberry\"]]) == \\\n[[\n    \"Banana\",\n    \"Apple\"\n    ],\n    [\n        \"Orange\"\n        ],\n    [\n        \"Pineapple\",\n        \"Strawberry\"\n        ]]\nassert sort_sublists([[2,1,4],[\"banana\",\"apple\",\"orange\"],[\"pineapple\",\"strawberry\"]]) == \\\n[[\n    [2, 1, 4],\n    \"banana\",\n    \"apple\",\n    \"orange\"\n    ],\n    [\n        \"pineapple\",\n        \"strawberry\"\n        ]]\n\ndef is_prime(n):\n    '''\n    Write a function that checks whether an integer is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sort_sublists(\n    [[2, 5, 7], [3, 1, 9], [6, 0, 4]]\n    ) == \n    [[2, 5, 7], [6, 0, 4], [3, 1, 9]]\nassert sort_sublists(\n    [[2, 5, 7], [6, 0, 4], [3, 1, 9]]\n    ) == \n    [[2, 5, 7], [3, 1, 9], [6, 0, 4]]\nassert sort_sublists(\n    [[6, 2, 4, 0], [5, 8, 1, 7], [3, 9, 2, 3]]\n    ) == \n    [[6, 2, 4, 0], [5, 8, 1, 7], [3, 9, 2, 3]]\nassert sort_sublists(\n    [[6, 2, 4, 0], [5, 8, 1, 7], [3, 9, 2, 3]]\n    ) == \n    [[6, 2, 4, 0], [3, 9, 2, 3], [5, 8, 1, 7]]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count([True, False, True, True, False, False]) == 2\nassert     count([]) == 0\nassert     count([True, True, True, True, True, True, True]) == 7\nassert     count([True, False, True, True, False, True, True]) == 3\nassert     count([False, False, False, False, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True, True, False, True]) == 2\nassert count([False, True, True, True]) == 1\nassert count([False, False, True, True]) == 2\nassert count([]) == 0\nassert count([True, True]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([True, True, False, False, False, True, True, False, False]) == 3\nassert     count([]) == 0\nassert     count([True, True, True, True, True, True, True]) == 5"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([False, True, False, True, False]) == 2, 'Expected 2'\nassert     count([False, False, False, False, True]) == 5, 'Expected 5'\nassert     count([False, False, False, False, False, False, False, True]) == 7, 'Expected 7'\nassert     count([]) == 0, 'Expected 0'\nassert     count([True]) == 1, 'Expected 1'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    count([1,2,3,4,5,6]) == 2\n    count([0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 5\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True, False, True, True, False, True]) == 3\nassert     count([True, False, False, True, True]) == 5\nassert     count([True, True, False, True, False]) == 5\n\n\ndef run_tests():\n    '''\n    Execute all test cases.\n    '''\n    assert     count([True, False, True, True, False, True]) == 3\n    "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([False,True,False])==2, \"Error found in count\"\nassert     count([False,True,True,False,False])==3, \"Error found in count\"\nassert     count([False,False,False,False,False])==0, \"Error found in count\"\nassert     count([True,False,True,False,False])==4, \"Error found in count\"\nassert     count([])==0, \"Error found in count\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([False, True, True, False]) == 1\nassert     count([True, False, False, True]) == 2\nassert     count([True, False, False, False, True]) == 0\nassert     count([False, False, True, False]) == 0\nassert     count([True, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count([True, False, True, False, True, False, True, False, True]) == 3, \"Test case failed\"\nassert     count([False, False, False, False, False, False, False, False, False]) == 2, \"Test case failed\"\nassert     count([True, True, True, False, False, True, True, True, False]) == 7, \"Test case failed\"\nassert     count([False, False, False, True, True, False, False, True, True]) == 5, \"Test case failed\"\nassert     count([]) == 0, \"Test case failed\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count([True, True, False]) == 2\nassert     count([True, False, True, False]) == 1\nassert     count([False, True, False]) == 1\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_lists([1,2,3],[('a','b','c')]) == [(1,'a',2),(2,'b',3),(3,'c',None)]\nprint('OK')"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1,2,3], (10,20,30)) == ([1,2,3], (10,20,30))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_lists([1, 2, 3], [(4, 5), (6, 7, 8, 9), (10, 11, 12)]) == [[1, 2, 3], (4, 5), (6, 7, 8, 9), (10, 11, 12)]\nprint('Test passed')\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([], (1,2,3)) == (1,2,3)\nassert     add_lists([(1,2),(3,4),(5,6),(7,8)], (2,3,4,5)) == (2,3,4,5,(1,2),(3,4),(5,6),(7,8))\nassert     add_lists([(1,2),(3,4),(5,6),(7,8)], (1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7,8,(1,2),(3,4),(5,6),(7,8))"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1,3], ([2,4],[5,6],[7,8])) == ([1,3],[2,4],[5,6],[7,8])\nassert     add_lists([2,4],[1,3]) == ([2,4],[1,3])\nassert     add_lists([2,4],[1,3]) == ([2,4],[1,3])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([1,2,3],[(1,2), (3,4)]) == [(1,2), (3,4), (1,2), (3,4)]\nassert     add_lists([1,2,3,4],[(1,2), (3,4)]) == [(1,2), (3,4), (1,2), (3,4), (1,2), (3,4)]\nassert     add_lists([1,2,3,4],[(1,2), (3,4)]) == [(1,2), (3,4), (1,2), (3,4), (1,2), (3,4)]\nassert     add_lists([1,2,3,4],[(1,2), (3,4), (1,2)]) == [(1,2), (3,4), (1,2), (3,4), (1,2), (3,4)]\nassert     add_lists([1,2,3,4],[(1,2), (3,4)]) == [(1,2), (3,4), (1,2), (3,4), (1,2), (3,4)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_lists([1, 2, 3], (4, 5, 6)) == ((1, 2, 3), (4, 5, 6))\nassert add_lists([1, 2, 3], (4, 5, 6)) == ((1, 2, 3), (4, 5, 6))\nassert     add_lists([1, 2], (4, 5, 6)) == ((1, 2), (4, 5, 6))\nassert add_lists([1, 2], (4, 5)) == ((1, 2), (4, 5))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists([], (1, 2)) == ((1, 2),)\nassert     add_lists([1, 2, 3], (1, 2, 3)) == ((1, 2, 3),)\nassert     add_lists([], ()) == ()\nassert     add_lists([], (1, 2, 3)) == ((1, 2, 3),)\nassert     add_lists([1, 2, 3], ()) == ((1, 2, 3),)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef remove_list(test_list, test_tup):\n    '''\n    Write a function to remove the given list from the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert merge_sorted_list([1,3,5,7], [2,4,6], [10,12]) == [1,2,3,4,5,6,7,10,12]\nassert merge_sorted_list([3,6], [1,2], [8]) == [1,2,3,6,8]\nprint('\"{}\" == \"{}\"'.format(merge_sorted_list([1,3,5,7], [2,4,6], [10,12]),[1,2,3,4,5,6,7,10,12]))\nprint('\"{}\" == \"{}\"'.format(merge_sorted_list([3,6], [1,2], [8]),[1,2,3,6,8]))\n\ndef merge_sorted_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    pass"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,2,3,4],[3,4,5,6],\n    [7,8,9,10]) == [1,2,3,4,3,4,5,6,7,8,9,10]\nassert     merge_sorted_list([2,1,4,3],[3,5,6],\n    [1,7,8,9]) == [1,2,3,4,3,5,6,7,8,9]\nassert     merge_sorted_list([5,1,2,3],[4,5,6],\n    [7,8,9]) == [1,2,3,4,5,5,6,7,8,9]\nassert     merge_sorted_list([4,1,2,3],[2,5,6],\n    [7,8,9,10]) == [1,2,3,4,2,5,6,7,8,9,10]"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_sorted_list([1,2,3],[4,5,6],[10,9]) == [1,2,3,4,5,6,10,9], \\\n        'The given list is not sorted. Please check'\nassert     merge_sorted_list([],[],[]) == [], \\\n        'The given list is empty. Please check'\nassert     merge_sorted_list([1,2,3],[4,5,6],[10]) == [1,2,3,4,5,6,10], \\\n        'The given list is not sorted. Please check'\nassert     merge_sorted_list([1,2,3],[4,5,6],[10,9]) == [1,2,3,4,5,6,10,9], \\\n        'The given list is not sorted. Please check'\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,3,5,8,10,14,19,21],\n                        [0,2,4,6,7,9,13,16,18,20],\n                        [8,12,13,15,19,22,24,25,26,27]) == [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1,3,5], [2,4,6], [2,4,7]) ==  [1,2,2,3,4,4,5,6,7]\nassert     merge_sorted_list([1,3,5], [2,4,6], []) ==  [1,2,3,4,5,6]\nassert     merge_sorted_list([1,3,5], [], [2,4,7]) ==  [1,2,3,4,5,7]\n\nclass PriorityQueue:\n    '''\n    Implementation of a Priority Queue.\n    '''\n    def __init__(self):\n        '''\n        Initialize the queue.\n        '''\n        # map is a dictionary with the keys being priorities\n        # and values being the corresponding item\n        self.map = {}\n\n    def __str__(self):\n        '''\n        Return a string representation of the priority queue.\n        '''\n        return str(self.map)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([0,3,4,11,14], [1,6,7,10,13], [2,5,8,12,15]) == sorted([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\ndef merge_sorted_array(a1,a2,a3):\n    '''\n    Write a function to merge three arrays into a single sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef merge_sorted_list_with_heaps(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_Equivalent
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent('101',2) == 1\nodd_Equivalent('11',1) == 3\nodd_Equivalent('0',2) == 0\nodd_Equivalent('000',5) == 7\nodd_Equivalent('000',0) == 8\nodd_Equivalent('000',-1) == 9\nodd_Equivalent('0011',3) == 1\nodd_Equivalent('011',2) == 2\nodd_Equivalent('1',1) == 3\nodd_Equivalent('',0) == 0\nodd_Equivalent('1111',6) == 1\nodd_Equivalent('0110',5) == 1\nodd_Equivalent('1010',6) == 1\nodd_Equivalent('1101',3) == 1\nodd_Equivalent('1100',2) == 1\nodd_Equivalent('1101',0) == 2\nodd_Equivalent('0101',3) == 2\nodd_Equivalent('1000',6) == 2\nodd_Equivalent('1000',0) == 3\nodd_Equivalent('1111',5) == 0\nodd_Equivalent('1101',4) == 1\nodd_Equivalent('1111',0) == 1\nodd_Equivalent('0110',4) == 1\nodd_Equivalent('1010',6) == 1\nodd_Equivalent('1100',6) == 1\nodd_Equivalent('100',0) == 1\nodd_Equivalent('101',1) == 1\nodd_Equivalent('0011',1) == 1\nodd_Equivalent('1111',0) == 0\nodd_Equivalent('1010',3) == 1\nodd_Equivalent('0110',5) == 2\nodd_Equivalent('0110',0) == 3\nodd_Equivalent('1101',3) == 1\nodd_Equivalent('1101',4) == 0\nodd_Equivalent('1111',4) == 0\nodd_Equivalent('1101',5) == 1\nodd_Equivalent('0110',1) == 1\nodd_Equivalent('0000',1) == 0\nodd_Equivalent('0000',2) == 1\nodd_Equivalent('0000',5) == 2\nodd_Equivalent('0000',10) == 2\nodd_Equivalent('0000',0) == 3\nodd_Equivalent('0000',-1) == 0\nodd_Equivalent('0000',9) == 2\nodd_Equivalent('0000',1000000) == 0\nodd_Equivalent('0000',1000000000) == 0\nodd_Equivalent('0101',1) == 0\nodd_Equivalent('0101',2) == 1\nodd_Equivalent('0101',3) == 0\nodd_Equivalent('0101',4) == 1\nodd_Equivalent('0101',5) == 2\nodd_Equivalent('0101',6) == 1\nodd_Equivalent('0101',7) == 1\nodd_Equivalent('0101',8) == 1\nodd_Equivalent('0101',9) == 2\nodd_Equivalent('0101',10) == 1\nodd_Equivalent('0101',11) == 2\nodd_Equivalent('0101',12) == 1\nodd_Equivalent('0101',13) == 2\nodd_Equivalent('0101',14) == 1\nodd_Equivalent('0101',15) == 2\nodd_Equivalent('0101',16) == 1\nodd_Equivalent('0101',17) == 2\nodd_Equivalent('0101',18) == 1\nodd_Equivalent('0101',19) == 2\nodd_Equivalent('0101',20) == 2\nodd_Equivalent('0101',21) == 2\nodd_Equivalent('0101',22) == 2\nodd_Equivalent('0101',23) == 2\nodd_Equivalent('0101',24) == 2\nodd_Equivalent('0101',25) == 2\nodd_Equivalent('0101',26) == 2\nodd_Equivalent('0101',27) == 2\nodd_Equivalent('0101',28) == 2\nodd_Equivalent('0101',29) == 2\nodd_Equivalent('0101',30) == 2\nodd_Equivalent('0101',31) == 2\nodd_Equivalent('0101',32) == 2\nodd_Equivalent('0101',33) == 2\nodd_Equivalent('0101',34) == 2\nodd_Equivalent('0101',35) == 2\nodd_Equivalent('0101',36) == 2\nodd_Equivalent('0101',37) == 2\nodd_Equivalent('0101',38) == 2\nodd_Equivalent('0101',39) == 2\nodd_Equivalent('0101',40) == 2\nodd_Equivalent('0101',41) == 2\nodd_Equivalent('0101',42) == 2\nodd_Equivalent('0101',43) == 2\nodd_Equivalent('0101',44) == 2\nodd_Equivalent('0101',45) == 2\nodd_Equivalent('0101',46) == 2\nodd_Equivalent('0101',47) == 2\nodd_Equivalent('0101',48) == 2\nodd_Equivalent('0101',49) == 2\nodd_Equivalent('0101',50) == 2\nodd_Equivalent('0101',51) == 2\nodd_Equivalent('0101',52) == 2\nodd_Equivalent('0101',53) == 2\nodd_Equivalent('0101',54) == 2\nodd_Equivalent('0101',55) == 2\nodd_Equivalent('0101',56) == 2\nodd_Equivalent('0101',57) == 2\nodd_Equivalent('0101',58) == 2\nodd_Equivalent('0101',59) == 2\nodd_Equivalent('0101',60) == 2\nodd_Equivalent('0101',61) == 2\nodd_Equivalent('0101',62) == 2\nodd_Equivalent('0101',63) == 2\nodd_Equivalent('0101',64) == 2\nodd_Equivalent('0101',65) == 2\nodd_Equivalent('0101',66) == 2\nodd_Equivalent('0101',67) == 2\nodd_Equivalent('0101',68) == 2\nodd_Equivalent('0101',69) == 2\nodd_Equivalent('0101',70) == 2\nodd_Equivalent('0101',71) == 2\nodd_Equivalent('0101',72) == 2\nodd_Equivalent('0101',73) == 2\nodd_Equivalent('0101',74) == 2\nodd_Equivalent('0101',75) == 2\nodd_Equivalent('0101',76) == 2\nodd_Equivalent('0101',77) == 2\nodd_Equivalent('0101',78) == 2\nodd_Equivalent('0101',79) == 2\nodd_Equivalent('0101',80) == 2\nodd_Equivalent('0101',81) == 2\nodd_Equivalent('0101',82) == 2\nodd_Equivalent('0101',83) == 2\nodd_Equivalent('0101',84) == 2\nodd_Equivalent('0101',85) == 2\nodd_Equivalent('0101',86) == 2\nodd_Equivalent('0101',87) == 2\nodd_Equivalent('0101',88) == 2\nodd_Equivalent('0101',89) == 2\nodd_Equivalent('0101',90) == 2\nodd_Equivalent('0101',91) == 2\nodd_Equivalent('0101',92) == 2\nodd_Equivalent('0101',93) == 2\nodd_Equivalent('0101',94) == 2\nodd_Equivalent('0101',95) == 2\nodd_Equivalent('0101',96) == 2\nodd_Equivalent('0101',97) == 2\nodd_Equivalent('0101',98) == 2\nodd_Equivalent('0101',99) == 2\nodd_Equivalent('0101',100) == 2\nodd_Equivalent('0101',101) == 2\nodd_Equivalent('0101',102) == 2\nodd_Equivalent('0101',103) == 2\nodd_Equivalent('0101',104) == 2\nodd_Equivalent('0101',105) == 2\nodd_Equivalent('0101',106) == 2\nodd_Equivalent('0101',107) == 2\nodd_Equivalent('0101',108) == 2\nodd_Equivalent('010"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef odd_Equivalent_2(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_Equivalent(\"1011\",\"0\") == 2\nassert     odd_Equivalent(\"1011\",\"1\") == 4\nassert     odd_Equivalent(\"1000111\",\"0\") == 1\nassert     odd_Equivalent(\"1000111\",\"1\") == 3\nassert     odd_Equivalent(\"10110111\",\"1\") == 5\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_Equivalent(s=\"010101\",n=5) == 3 \nassert odd_Equivalent(s=\"011011\",n=2) == 1\nassert odd_Equivalent(s=\"010110\",n=2) == 2\nassert odd_Equivalent(s=\"010100\",n=2) == 2\nassert odd_Equivalent(s=\"110110\",n=2) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(odd_Equivalent('101010', 2))\nprint(odd_Equivalent('101010', 3))\nprint(odd_Equivalent('101010', 5))\nprint(odd_Equivalent('101010', 7))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_Equivalent(\"101\",1) == 1\nassert \nodd_Equivalent(\"101\",2) == 2\nassert \nodd_Equivalent(\"101\",3) == 3\nassert \nodd_Equivalent(\"101\",4) == 4\nassert \nodd_Equivalent(\"101\",5) == 4\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists(nested_lists) ==    common_in_nested_lists([1,2,3,4,5,6,7]) ==     [1,2,3,4,5,6,7]\nassert     common_in_nested_lists(nested_lists) ==    common_in_nested_lists([[1,2,3,4],[5,6,7,8]]) ==     [[1,2,3,4]]\nassert     common_in_nested_lists(nested_lists) ==    common_in_nested_lists([[1,2,3,4],[5,6,7,8]]) ==     [[1,2,3,4]]\n\nprint(\"YOUR CODE IS CORRECT!\")"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1, 2, 2], [2, 4, 4], [1,3,3]]) == \n    [[1, 2, 2], [2, 4, 4]]\nassert     common_in_nested_lists([[1, 2, 2, 2], [2, 4, 4, 4], [1,3,3,3]]) == \n    [[1, 2, 2], [2, 4, 4]]\nassert     common_in_nested_lists([[1, 2, 2, 2], [2, 4, 4, 4], \n    [1,3,3,3,3]]) == [[1, 2, 2], [2, 4, 4], [1,3,3]]\nassert     common_in_nested_lists([[1, 2, 2], [2, 4, 4, 4], \n    [1,3,3,3,3,3]]) == [[1, 2, 2], [2, 4, 4], [1,3,3]]\nassert     common_in_nested_lists([[1, 2, 2], [2, 4, 4], \n    [1,3,3,3,3,3,3]]) == [[1, 2, 2], [2, 4, 4]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[1, 2], [3], [], [5, 6], [7]]) == [[1, 2], 5, 6]\nassert common_in_nested_lists([[1], [2, 3], [4, 5], [], [6]]) == [[1], 4, 5]\nassert common_in_nested_lists([[1], [2], [3], [4], []]) == []\nassert common_in_nested_lists([[1, 2], [1, 2, 3]]) == [[1, 2]]\nassert common_in_nested_lists([[1, 2, 3], [1, 2]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists(\n    [[1,2,4,5],[1,2,3,4],[1,2]]) ==     (1,2)\nassert common_in_nested_lists(\n    [[1,2,3],[1,2,3,4],[1,2,3]]) ==     (1,2,3,4)\nassert common_in_nested_lists(\n    [[1,2],[1,2,3,4],[1,2]]) ==     (1,2)\nassert common_in_nested_lists(\n    [[[1,2],1,2],[1,2,3,4],[1,2]]) ==     (1,2)\nassert common_in_nested_lists(\n    [[1,2,3,4],[1,2,3,4]]) ==     (1,2,3,4)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[1, 2], [3, 4], [5, 6]]) == 1\nassert     common_in_nested_lists([[1, 2], [1, 2, 3, 4, 5], [6, 7, 8]]) == 6\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [], [6, 7, 8]]) == 5\nassert     common_in_nested_lists([[], [], []]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[10, 20], [1, 2, 3]]) == []\nassert     common_in_nested_lists([[1, 2, 3], [10, 20]]) == [1, 2, 3]\nassert     common_in_nested_lists([[5, 10, 20], [2, 10, 20]]) == [10, 20]\nassert     common_in_nested_lists([[1, 1, 2, 3], [1, 1, 2, 3]]) == []\nassert     common_in_nested_lists([[1, 1], [1, 1, 2, 3, 5], [1, 1, 2, 3, 5]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([[\"h\", 1], [\"w\", 1], [\"y\", 1], [\"t\", 1]]) == \n        {\"h\": 1, \"w\": 1, \"y\": 1, \"t\": 1}\nassert     common_in_nested_lists([[\"h\", 1], [\"w\", 1], [\"y\", 1], [\"t\", 1],\n    [\"h\", 1], [\"w\", 1], [\"y\", 1], [\"t\", 1]]) == \n        {\"h\": 1, \"w\": 1, \"y\": 1, \"t\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer(\"50\") == False, \"test for integers\"\nassert     check_integer(\"hello\") == False, \"test for numbers\"\nassert     check_integer(\"-5\") == True, \"test for negatives\"\nassert     check_integer(\"0\") == True, \"test for zeros\"\nassert     check_integer(\"3.14\") == True, \"test for floats\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.1') == False\nassert     check_integer('-3') == False\nassert     check_integer('3.0') == True\nassert     check_integer('0') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer(\"1\") == True\nassert     check_integer(\"2\") == True\nassert     check_integer(\"-2\") == True\nassert     check_integer(\"0\") == True\nassert     check_integer(\"_\") == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer('1')\nassert not     check_integer('1.2')\nassert     check_integer('1,000')\nassert     not     check_integer('1,000.2')\nassert     not     check_integer('abc')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer('10') == True\nassert     check_integer('0') == True\nassert     check_integer('-1') == True\nassert     check_integer('10.1') == True\nassert     check_integer('0.1') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer(\"12\")\nassert     check_integer(\"-1\")\nassert     check_integer(\"-0\")\nassert     check_integer(\"1\")\nassert     check_integer(\"-1.2\")\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('12.2') == True\nassert     check_integer('abc123') == False\nassert     check_integer('a1.2') == False\nassert     check_integer('0') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer(\"1\") == True\nassert     check_integer(\"1.1\") == False\nassert     check_integer(\"abc\") == False\nassert     check_integer(\"1.12.3\") == False\nassert     check_integer(\"1,123\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer('10')     == True, \"test 1 success\"\nassert     check_integer('10.1')    == True, \"test 2 success\"\nassert     check_integer('1e10')    == True, \"test 3 success\"\nassert     check_integer('-1')        == False, \"test 4 success\"\nassert     check_integer('abc')        == False, \"test 5 success\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    check_integer('123')==True\n    check_integer('-123')==True\n    check_integer('123.456')==False\n    check_integer('abc')==False\n    check_integer('123.abc')==False\n    check_integer('abc.123')==False\n    check_integer('abc.123.abc')==False\n    check_integer('abc.123abc')==False\n    check_integer('abc123')==False\n    check_integer('123abc')==False\n    check_integer('123.abc')==False\n    check_integer('123.123')==False\n    check_integer('ab.12')==False\n    check_integer('12.ab')==False\n    check_integer('a.b')==False\n    check_integer('a.b.c')==False\n    check_integer('123.abc.abc')==False\n    check_integer('123.abc.abc.123')==False\n    check_integer('123.abc.abc.1234')==False\n    check_integer('abc.123.abc')==False\n    check_integer('abc.123.abc.12')==False\n    check_integer('abc.12.abc.abc')==False\n    check_integer('abc.123.abc.12')==False\n    check_integer('abc.123.abc.123')==False\n    check_integer('abc.123')==False\n    check_integer('abc')==False\n    check_integer('123.abc')==False\n    check_integer('12.abc')==False\n    check_integer('a.b.c')==False\n    check_integer('abc.abc')==False\n    check_integer('123.123')==False\n    check_integer('123.')==False\n    check_integer('123.ab')==False\n    check_integer('1abc')==False\n    check_integer('1')==False\n    check_integer('1.1')==False\n    check_integer('-12')==False\n    check_integer('-1')==False\n    check_integer('0')==False\n    check_integer('-0')==False\n    check_integer('-123')==False\n    check_integer('-1.1')==False\n    check_integer('-1.01')==False\n    check_integer('-1.01.')==False\n    check_integer('-1.01.1')==False\n    check_integer('abc.abc')==False\n    check_integer('1abc')==False\n    check_integer('1abc.')==False\n    check_integer('1abc.1')==False\n    check_integer('abc.abc.1')==False\n    check_integer('abc.abc.1.a')==False\n    check_integer('abc.abc.1.a.')==False\n    check_integer('abc.abc.1.a.b')==False\n    check_integer('abc.abc.1.a.b.')==False\n    check_integer('abc.abc.1.a.b.c')==False\n    check_integer('abc.abc.1.a.b.c.')==False\n    check_integer('abc.abc.1.a.b.c.d')==False\n    check_integer('abc.abc.1.a.b.c.d.')==False\n    check_integer('abc.abc.1.a.b.c.d.e')==False\n    check_integer('abc.abc.1.a.b.c.d.e.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.')==False\n    check_integer('abc.abc.1.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t')==False\n    check_integer('abc.abc"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([]) == False, \"Empty list is empty\"\nassert     empty_dit([{}]) == False, \"Empty dictionary is empty\"\nassert     empty_dit([{1:1},{},{}]) == False, \"Empty set is empty\"\nassert     empty_dit([{1:1}]) == True, \"Empty dictionary is not empty\"\nassert     empty_dit([{1:1,2:2}]) == False, \"Set of two keys is not empty\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([{},{},{},{}])\nassert     empty_dit([{'name':'tom','age':18},{},{},{}])\nassert     empty_dit([{'name':'tom','age':18},{'name':'tom','age':18},{},{},{}])\nassert     empty_dit([{'name':'tom','age':18},{'name':'tom','age':18},{'name':'tom','age':18},{},{},{}])\nassert     empty_dit([{'name':'tom','age':18},{'name':'tom','age':18},{'name':'tom','age':18},{'name':'tom','age':18},{},{},{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([]) == True\nassert     empty_dit([{},{},{}]) == False\nassert     empty_dit([{'a':1},{'a':2},{'a':3}]) == True\nassert empty_dit([{'a':1},{'a':2},{'a':3},{'a':4}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    empty_dit([]) == True, 'Your code is broken, please fix it'\n    empty_dit([{}]) == False, 'Your code is broken, please fix it'\n    empty_dit([{1:2}, {2:3}]) == False, 'Your code is broken, please fix it'\n    empty_dit([{1:2}, {2:3}, {}]) == True, 'Your code is broken, please fix it'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert empty_dit([{},{},{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert empty_dit([]) == True\nassert empty_dit([{}, {}]) == False\nassert empty_dit([{1: 1}, {2: 2}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_dit([\"\",{},{},{}]) == True\nassert     empty_dit([\"\",{1:2},{1:2},{}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_dit([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]) == False, 'Empty dictionary is expected to be False.'\nassert     empty_dit([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]) == True, 'Empty dictionary is expected to be True.'\nassert     empty_dit([]) == True, 'Empty list is expected to be True.'\nassert     empty_dit([[]]) == True, 'Empty list is expected to be True.'\nassert     empty_dit([{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]) == True, 'Empty dictionary is expected to be True.'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit([]) == True, 'Empty list should be True'\nassert     empty_dit([{}]) == True, 'Empty dict should be True'\nassert     empty_dit([{'a':1},{}]) == True, 'Empty dict should be True'\nassert     empty_dit([{},{'a':1}]) == False, 'Empty dict should be False'\nassert     empty_dit([{},{'a':1},{}]) == False, 'Empty dict should be False'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (True, 5) == tuple_to_int((1, 2, 3, 4, 5))\nassert     (False, 0) == tuple_to_int((1, 2, 3, 4, 0))\nassert     (True, -1) == tuple_to_int((-1, 2, 3, 4, -1))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 123, \"Wrong output\"\nassert     tuple_to_int((1, 2, 3)) == 123, \"Wrong output\"\nassert     tuple_to_int((1, 2, 3, 4)) == 124, \"Wrong output\"\n\n'''\nWrite a function to check whether a given integer is positive or negative.\n'''\n\ndef check_pos_neg(number):\n    '''\n    Given an integer, check if it is positive or negative.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((0,1,2,3)) == 9\nassert     tuple_to_int((9,9,9)) == 54\nassert     tuple_to_int((1,3,5,7)) == 22\nassert     tuple_to_int((2,3,4,5,6,7,8)) == 322\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         tuple_to_int(()) == 0, \"Expected empty tuple to be converted to zero.\"\nassert         tuple_to_int((1,)) == 1, \"Expected tuple of a single element to be converted to one.\"\nassert         tuple_to_int((2,2)) == 4, \"Expected tuple of two elements to be converted to two.\"\nassert         tuple_to_int((1,1,2)) == 4, \"Expected tuple of three elements to be converted to three.\"\nassert         tuple_to_int((2,2,2,2,2,2,2,2,2)) == 6, \"Expected tuple of eight elements to be converted to eight.\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((-1,1,2)) == 2\nassert     tuple_to_int((-1,-2,-3)) == -10\nassert     tuple_to_int((1,1,1)) == 3\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (tuple_to_int((1, 2, 3)) == 6), 'failed'\nassert     (tuple_to_int((1, 2, 0, 5)) == 10), 'failed'\nassert     (tuple_to_int((1, 2, 0, 9, 1)) == 10), 'failed'\nassert     (tuple_to_int((2, 9, 1, 1)) == 17), 'failed'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef num_to_tuple(num):\n    '''\n    Write a function to convert a given positive integer into a tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,2)) == 2\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int(()) == 0\n\ndef find_max_value_in_each_column_in_a_2d_matrix(matrix):\n    '''\n    Write a function to find the maximum value in each column of a given 2D matrix.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int((1,2,3)) == 123, \"Should be 123\"\nassert     tuple_to_int((1,2,3,4,5)) == 124, \"Should be 124\"\nassert     tuple_to_int((1,2,3,4,5,6)) == 125, \"Should be 125\"\nassert     tuple_to_int((1,2,3,4,5,6,7,8)) == 126, \"Should be 126\"\nassert     tuple_to_int((1,2,3,4,5,6,7,8,9)) == 127, \"Should be 127\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlist_to_float([[1, 'a', 1.0], ['b', 1.0, 1], ['c', 1.0, 'a']]) == [[1, 'a', 1.0], ['b', 1.0, 1], ['c', 1.0, 'a']]\nassert list_to_float([[1, 'a', 1.0], ['b', 1.0, 1]]) == [[1, 'a', 1.0], ['b', 1.0, 1]]\nassert list_to_float([[1, 'a', 1.0], ['b', 1.0, 1], ['c', 1.0, 'a']]) == [[1, 'a', 1.0], ['b', 1.0, 1], ['c', 1.0, 'a']]\nassert list_to_float([[1, 'a', 1.0], ['b', 1.0, 1], ['c', 'b', 1.0], ['d', 1.0, 'b']]) == [[1, 'a', 1.0], ['b', 1.0, 1], ['c', 'b', 1.0], ['d', 1.0, 'b']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float([['a', 'b', 'c'], ['1', '2', '3']]) == [[1.0, 2.0, 3.0], ['a', 'b', 'c']]\nassert list_to_float([['a', 1], ['b', 2], ['c', 3]]) == [[1.0, 2.0, 3.0], ['a', 'b', 'c']]\nassert list_to_float([['a', 'b', 1], ['c', 2, 'd']]) == [[1.0, 2.0, 3.0], ['a', 'b', 'c']]\nassert list_to_float([['a', 'b', 'c', 1], ['d', 2, 'e', 'f']]) == [[1.0, 2.0, 3.0, 4.0], ['a', 'b', 'c', 'd']]\nassert list_to_float([['a', 'b', 'c', 1], ['d', 'e', 'f', 'g']]) == [[1.0, 2.0, 3.0, 4.0], ['a', 'b', 'c', 'd']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_to_float([1,2.5,3]) == [1.0, 2.5, 3.0]\nassert     list_to_float([1,2.5,3]) == [1.0, 2.5, 3.0]\nassert     list_to_float([]) == []\n\nprint('TEST: list_to_float')\nprint('RESULT:', list_to_float([1,2.5,3]))\nprint('RESULT:', list_to_float([1,2.5,3]))\nprint('RESULT:', list_to_float([1,2.5,3]))\nprint('RESULT:', list_to_float([]))"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    list_to_float([[1], [2]]) == [[1], [2]]\n    list_to_float([[1, 2], [3, 4], [5]]) == [[1.0, 2.0], [3.0, 4.0], [5.0]]\n    list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]\n    list_to_float([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0]]\n    list_to_float([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0], [13.0, 14.0, 15.0, 16.0]]\n    list_to_float([[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0], [13.0, 14.0, 15.0, 16.0]]) == [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0], [13.0, 14.0, 15.0, 16.0]]\n    list_to_float([[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0], [13.0, 14.0, 15.0, 16.0], [17.0, 18.0, 19.0, 20.0]]) == [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0], [13.0, 14.0, 15.0, 16.0], [17.0, 18.0, 19.0, 20.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_to_float([]) == [], 'Passed on an empty list.'\nassert     list_to_float([[]]) == [], 'Passed on a list of only a single element.'\nassert     list_to_float([[2]]) == [2.0], 'Passed on a single element of type list.'\nassert     list_to_float([[2, 3, 4]]) == [2.0, 3.0, 4.0], 'Passed on a list of 3 elements.'\nassert     list_to_float([[2.0, 3.0, 4.0]]) == [2.0, 3.0, 4.0], 'Passed on a list of 3 elements.'\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float(['1', '2', '3', '4', '5']) == [1., 2., 3., 4., 5.], \"Wrong output.\"\nassert     list_to_float(['1.2', '3.4', '5.6', '7.8', '9.0']) == [1.2, 3.4, 5.6, 7.8, 9.0], \"Wrong output.\"\nassert     list_to_float(['1.2345', '5.67890', '3.99951', '-0.0']) == [1.2345, 5.67890, 3.99951, -0.0], \"Wrong output.\"\nassert     list_to_float(['1', '5.67890', '3.99951', '-0.0']) == [1., 5.67890, 3.99951, -0.0], \"Wrong output.\"\nassert     list_to_float(['1', '-1', '1.2345', '0.5', '1.7890']) == [1., -1, 1.2345, 0.5, 1.7890], \"Wrong output.\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([['a',1],['2',2],['3.0',3.0],['3.5',3.5],['a'],'hello','world','w3resource']) == [[1,1.0],[2,2.0],[3.0,3.0],[3.5,3.5],[None,None],[None,None]]\nassert     list_to_float([['a',1],['2',2],['3.0',3.0],['3.5',3.5],['a','a']]) == [[1,1.0],[2,2.0],[3.0,3.0],[3.5,3.5],[None,None]]\nassert     list_to_float([['a',1],['2',2],['3.0',3.0],['3.5',3.5],['a']]) == [[1,1.0],[2,2.0],[3.0,3.0],[3.5,3.5],[None]]\nassert     list_to_float([['a',1],['2',2],['3.0',3.0],['3.5',3.5],['a'],None]) == [[1,1.0],[2,2.0],[3.0,3.0],[3.5,3.5],[None,None]]\nassert     list_to_float([['a',1],['2',2],['3.0',3.0],['3.5',3.5],['a','a','a']]) == [[1,1.0],[2,2.0],[3.0,3.0],[3.5,3.5],[None,None]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(list_to_float(test_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_to_float([[1, 2], [3, 4]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([[1, 2.0], [3, 4.0]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([[1, 2], [3, 4.0]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([[1, '2.0'], [3, 4.0]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([[1, 2.0], [3, 4.0], ['a', 'b']]) == [[1, 2.0], [3, 4.0], ['a', 'b']]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    string_to_list(\"the quick brown fox jumps over the lazy dog\") == [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n    string_to_list(\"lazy fox\") == [\"lazy\", \"fox\"]\n    string_to_list(\"lazy fox \") == [\"lazy\", \"fox\"]\n    string_to_list(\"\") == []\n\ndef string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_list(\"Python\") == [\"Python\"]\nassert     string_to_list(\"Python Python\") == [\"Python\", \"Python\"]\nassert     string_to_list(\"PythonPython\") == [\"Python\", \"Python\"]\nassert     string_to_list(\"Python Python Python\") == [\"Python\", \"Python\", \"Python\"]\nassert     string_to_list(\"\") == []\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef list_to_string(my_list): \n    '''\n    Write a function to convert a list of strings to a single string with the space as the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list('hello') == ['h', 'e', 'l', 'l', 'o'] \nassert     string_to_list('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'r', 'l', 'd'] \nassert     string_to_list('hello\\n') == ['h', 'e', 'l', 'l', 'o', '\\n'] \nassert     string_to_list('hello\\r') == ['h', 'e', 'l', 'l', 'o', '\\r'] \nassert     string_to_list('hello\\t') == ['h', 'e', 'l', 'l', 'o', '\\t'] \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_list('abc') == ['abc']\nassert     string_to_list('  abc') == ['abc']\nassert     string_to_list('a b c') == ['a', 'b', 'c']\nassert     string_to_list('a b c   ') == ['a', 'b', 'c']\nassert     string_to_list('a b   c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_list('the the the') == ['the', 'the', 'the'] \nassert     string_to_list('a b c') == ['a', 'b', 'c']\nassert     string_to_list('a b c d e') == ['a', 'b', 'c', 'd', 'e']\nassert     string_to_list('g f h e i') == ['g', 'f', 'h', 'e', 'i']\nassert     string_to_list('w e r t y h') == ['w', 'e', 'r', 't', 'y', 'h']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_list(\"I'm a boy\") == ['I','m','a','boy'], \"Test Failed\"\nassert     string_to_list(\"I'm a boy I like dogs\") == ['I','m','a','boy','I','like','dogs'], \"Test Failed\"\nassert     string_to_list(\"I'm a boy I like dogs and cats\") == ['I','m','a','boy','I','like','dogs','and','cats'], \"Test Failed\"\nassert     string_to_list(\"I'm a boy and I like cats and dogs\") == ['I','m','a','boy','and','I','like','cats','and','dogs'], \"Test Failed\"\nassert     string_to_list(\"I'm a boy and I like cats and dogs and trees\") == ['I','m','a','boy','and','I','like','cats','and','dogs','and','trees'], \"Test Failed\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nTest case:\n\nstring_to_list('test') == ['test']\nstring_to_list('hello world') == ['hello', 'world']\nstring_to_list('hello world') == ['hello', 'world']\nstring_to_list('hello world') == ['hello', 'world']\n'''\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1,2,3,2,1,1]) == 1, \"Fail\"\nassert     search([1,2,3,2,4,5,5,6,7,8,9]) == 9, \"Fail\"\nassert     search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7]) == 7, \"Fail\"\n\nprint(\"Pass\") if search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7]) == 7 else print(\"Fail\")\nprint(\"Pass\") if search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7]) == 7 else print(\"Fail\")\nprint(\"Pass\") if search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7]) == 7 else print(\"Fail\")\n\nprint(\"Pass\") if search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7]) == 7 else print(\"Fail\")\nprint(\"Pass\") if search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7]) == 7 else print(\"Fail\")\nprint(\"Pass\") if search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,7,7,7,7]) == 7 else print(\"Fail\")\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([3,2,3]) == 2\nassert     search([2,2,3]) == 2\nassert     search([1,1,1,1,2,2,2,2,3,3,3,3,3]) == 1\nassert     search([]) == None\nassert     search([\"Hello\",\"world\",\"hello\"]) == \"hello\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([1, 2, 3, 4, 5]) == 1, \"Wrong\"\nassert     search([1, 2, 3, 4, 5, 3]) == 3, \"Wrong\"\nassert     search([1, 1, 2, 3, 5]) == 1, \"Wrong\"\nassert     search([1, 1, 2, 3, 5, 5]) == 5, \"Wrong\"\nassert     search([1, 2, 3, 4, 5, 3, 5, 5]) == 3, \"Wrong\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([1,1,1,2,2,3,3,3,4,4,5]) == 1, 'Test 1'\nassert     search([1,2,3,4,5]) == 4, 'Test 2'\nassert     search([1,2,3,4,5]) == 5, 'Test 3'\nassert     search([1,2,3,4,5,1]) == 1, 'Test 4'\nassert     search([]) == None, 'Test 5'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([0,1,1,2,3,3,4,4,4,4]) == 4, \"Search is not working\"\nassert     search([0,0,1,1,2,3,3,4,4,4,4]) == 4, \"Search is not working\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([1,2,3,4,5]) == 3\nassert     search([1,2,3,4,5,2,1]) == 2\nassert     search([1,2,3,4,2,1]) == 3\nassert     search([1,2,3,4,2,1,5]) == 2\nassert     search([]) == None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([1, 1, 1, 1, 1]) == 1, \"input=[1, 1, 1, 1, 1], answer = 1\"\nassert     search([1, 2, 1, 1, 1]) == 1, \"input=[1, 2, 1, 1, 1], answer = 1\"\nassert     search([1, 1, 2, 1, 1]) == 1, \"input=[1, 1, 2, 1, 1], answer = 1\"\nassert     search([1, 2, 2, 1, 1]) == 2, \"input=[1, 2, 2, 1, 1], answer = 2\"\nassert     search([1, 1, 2, 2, 1]) == 2, \"input=[1, 1, 2, 2, 1], answer = 2\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\narr = [1,2,1,3,2,2]\nprint(search(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef search_multipe(arr):\n    '''\n    Write a python function to find the element that appears more than once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([2,4,5,6,3,3,2,6,6,2,6]) == 2, \"Searching should return the element that appears only once\"\nassert     search([2,4,5,6,3,3,2,6,6,2,6]) == 2, \"Searching should return the element that appears only once\"\nassert     search([]) == None, \"Searching should return None if the array is empty\"\nassert     search([1,2,3,4,5,6,7]) == 7, \"Searching should return the element that appears only once\"\nassert     search([2,2,3,3,4,4,4,4,5,5,6,6,6,7,7]) == 4, \"Searching should return the element that appears only once\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) ==     (15, 24)\nassert     max_product_tuple([(0, 0), (1, 1), (2, 4), (3, 3), (4, 2), (5, 5)]) ==     (30, 30)\nassert     max_product_tuple([(-1, 0), (1, 2), (2, -4), (4, -3), (5, 6)]) ==     (60, -60)\nassert     max_product_tuple([(-1, 0), (1, -2), (2, -4), (4, 6), (5, -6)]) ==     (60, -120)\n\ndef max_product_tuples(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # build the result from left to right.\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(1,2), (-3,4), (-1,2), (6,4), (-5,5), (2,4), (7,5)]) == (18, 12)\n\nassert     max_product_tuple([(1,2), (0,1), (-1,2), (6,4), (-5,5), (2,4), (7,5)]) == (6, -1)\n\nassert     max_product_tuple([(1,2), (0,1), (-1,2), (6,4), (-5,5), (2,4), (7,5)]) == (6, -1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0, len(list1)):\n        if list1[i][1] > max_product:\n            max_product = list1[i][1]\n    for j in range(0, len(list1)):\n        if list1[j][1] < 0 and max_product == 0:\n            return 0\n        if list1[j][1] < 0 and max_product!= 0:\n            return 0\n        if list1[j][1] > 0 and max_product == 0:\n            return 0\n        if list1[j][1] > 0 and max_product!= 0:\n            if list1[j][1] * list1[j][0] > max_product * list1[j][0]:\n                max_product = list1[j][1] * list1[j][0]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(10) == 30\nassert     amicable_numbers_sum(100) == 233168\nassert     amicable_numbers_sum(1000) == 1445800\nassert     amicable_numbers_sum(10000) == 2865716\nassert     amicable_numbers_sum(100000) == 1466269\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(100) == 748\nassert     amicable_numbers_sum(1000) == 1445\nassert     amicable_numbers_sum(10000) == 1270\nassert     amicable_numbers_sum(100000) == 1443\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \namicable_numbers_sum(10) == sum([2, 4, 3, 5, 7, 9, 10, 11, 13, 14])\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nCheck the correctness of an implementation of the function:\n\n>>> import random\n>>> random.seed(0)\n>>> amicable_numbers_sum(10)\n55\n>>> random.seed(0)\n>>> amicable_numbers_sum(100)\n168\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000)\n1218\n>>> random.seed(0)\n>>> amicable_numbers_sum(10000)\n1042\n>>> random.seed(0)\n>>> amicable_numbers_sum(100000)\n483\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000)\n5246\n>>> random.seed(0)\n>>> amicable_numbers_sum(10000000)\n10379\n>>> random.seed(0)\n>>> amicable_numbers_sum(100000000)\n11460\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000)\n1212\n>>> random.seed(0)\n>>> amicable_numbers_sum(10000000000)\n13106\n>>> random.seed(0)\n>>> amicable_numbers_sum(100000000000)\n624\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000)\n1265\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000)\n2516\n>>> random.seed(0)\n>>> amicable_numbers_sum(10000000000000)\n8276\n>>> random.seed(0)\n>>> amicable_numbers_sum(10000000000000)\n2828\n>>> random.seed(0)\n>>> amicable_numbers_sum(100000000000000)\n1132\n>>> random.seed(0)\n>>> amicable_numbers_sum(100000000000000)\n1092\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1082\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1062\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1042\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> amicable_numbers_sum(1000000000000000)\n1037\n>>> random.seed(0)\n>>> a"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(6) == 5\nassert     amicable_numbers_sum(10) == 9\nassert     amicable_numbers_sum(15) == 10\nassert     amicable_numbers_sum(100) == 45\nassert     amicable_numbers_sum(200) == 60\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(1000) == 233168\nassert     amicable_numbers_sum(50000) == 299872\nassert     amicable_numbers_sum(150000) == 628180\nassert     amicable_numbers_sum(100000) == 132591\nassert     amicable_numbers_sum(5000000) == 33746410\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(1) == 0, \"Wrong Answer\"\nassert     amicable_numbers_sum(2) == 1, \"Wrong Answer\"\nassert     amicable_numbers_sum(3) == 2, \"Wrong Answer\"\nassert     amicable_numbers_sum(4) == 3, \"Wrong Answer\"\nassert     amicable_numbers_sum(10) == 7, \"Wrong Answer\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(2) == 1\nassert     amicable_numbers_sum(3) == 2\nassert     amicable_numbers_sum(4) == 3\nassert     amicable_numbers_sum(5) == 5\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(100) == 8317\nassert     amicable_numbers_sum(1000) == 1433\nassert     amicable_numbers_sum(5000) == 5537\nassert     amicable_numbers_sum(10000) == 233168\nassert     amicable_numbers_sum(50000) == 1048573\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\namicable_numbers_sum(10000) == 2822\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(1+2j,1+2j) == cmath.phase(1+2j)\nassert angle_complex(2+4j,5+6j) == cmath.phase(2+4j)\nassert angle_complex(5-4j,2+6j) == cmath.phase(5-4j)\nassert angle_complex(-1-2j,-5-6j) == cmath.phase(-1-2j)\nassert angle_complex(1+0j,2-2j) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(complex(1,2), complex(1,2)) == complex(-1,-2)\nassert     angle_complex(complex(0,2), complex(0,2)) == complex(-1,-2)\nassert     angle_complex(complex(0,0), complex(0,0)) == complex(-1,-1)\nassert     angle_complex(complex(-1,2), complex(-1,2)) == complex(0,2)\nassert     angle_complex(complex(-1,0), complex(-1,0)) == complex(0,0)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(1+2j,2+2j) == 1.25+3.5j\nassert     angle_complex(1+0j,2+0j) == 1.0\nassert     angle_complex(1+0j,1+0j) == 1.0\nassert     angle_complex(1+0j,1+0j) == 1.0\nassert     angle_complex(1+0j,2+0j) == 1.0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(1,3) ==    0,    \"1\"\nassert     angle_complex(4,0) ==    0,    \"2\"\nassert     angle_complex(3,5) ==    45,    \"3\"\nassert     angle_complex(-1,3) ==    180,    \"4\"\nassert     angle_complex(-4,0) ==    180,    \"5\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('TEST CASE 1: ',angle_complex(cmath.pi,1))\nassert \nprint('TEST CASE 2: ',angle_complex(cmath.pi,0))\nassert \nprint('TEST CASE 3: ',angle_complex(0.0,1))\nassert \nprint('TEST CASE 4: ',angle_complex(1,0))\nassert \nprint('TEST CASE 5: ',angle_complex(0,0))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nclass complex(object):\n    def __init__(self,real,imag):\n        self.real=real\n        self.imag=imag\n    def __str__(self):\n        if self.real==0:\n            if self.imag==0:\n                return \"0\"\n            else:\n                return \"0.0\"\n        return str(self.real)+\"+\"+str(self.imag)+\"i\"\n    def __add__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real+other.real,self.imag+other.imag)\n    def __sub__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real-other.real,self.imag-other.imag)\n    def __mul__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real*other.real-self.imag*other.imag,self.imag*other.real+self.real*other.imag)\n    def __truediv__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real/other.real,self.imag/other.imag)\n    def __abs__(self):\n        return abs(self.real)+abs(self.imag)\n    def __neg__(self):\n        return complex(-self.real,-self.imag)\n    def __eq__(self,other):\n        if isinstance(other,complex):\n            return self.real==other.real and self.imag==other.imag\n'''\n\n'''\nclass complex(object):\n    def __init__(self,real,imag):\n        self.real=real\n        self.imag=imag\n    def __str__(self):\n        if self.real==0:\n            if self.imag==0:\n                return \"0\"\n            else:\n                return \"0.0\"\n        return str(self.real)+\"+\"+str(self.imag)+\"i\"\n    def __add__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real+other.real,self.imag+other.imag)\n    def __sub__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real-other.real,self.imag-other.imag)\n    def __mul__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real*other.real-self.imag*other.imag,self.imag*other.real+self.real*other.imag)\n    def __truediv__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real/other.real,self.imag/other.imag)\n    def __abs__(self):\n        return abs(self.real)+abs(self.imag)\n    def __neg__(self):\n        return complex(-self.real,-self.imag)\n    def __eq__(self,other):\n        if isinstance(other,complex):\n            return self.real==other.real and self.imag==other.imag\n'''\n\nclass complex(object):\n    def __init__(self,real,imag):\n        self.real=real\n        self.imag=imag\n    def __str__(self):\n        if self.real==0:\n            if self.imag==0:\n                return \"0\"\n            else:\n                return \"0.0\"\n        return str(self.real)+\"+\"+str(self.imag)+\"i\"\n    def __add__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real+other.real,self.imag+other.imag)\n    def __sub__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real-other.real,self.imag-other.imag)\n    def __mul__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real*other.real-self.imag*other.imag,self.imag*other.real+self.real*other.imag)\n    def __truediv__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real/other.real,self.imag/other.imag)\n    def __abs__(self):\n        return abs(self.real)+abs(self.imag)\n    def __neg__(self):\n        return complex(-self.real,-self.imag)\n    def __eq__(self,other):\n        if isinstance(other,complex):\n            return self.real==other.real and self.imag==other.imag\n'''\nclass complex(object):\n    def __init__(self,real,imag):\n        self.real=real\n        self.imag=imag\n    def __str__(self):\n        if self.real==0:\n            if self.imag==0:\n                return \"0\"\n            else:\n                return \"0.0\"\n        return str(self.real)+\"+\"+str(self.imag)+\"i\"\n    def __add__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real+other.real,self.imag+other.imag)\n    def __sub__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real-other.real,self.imag-other.imag)\n    def __mul__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real*other.real-self.imag*other.imag,self.imag*other.real+self.real*other.imag)\n    def __truediv__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real/other.real,self.imag/other.imag)\n    def __abs__(self):\n        return abs(self.real)+abs(self.imag)\n    def __neg__(self):\n        return complex(-self.real,-self.imag)\n    def __eq__(self,other):\n        if isinstance(other,complex):\n            return self.real==other.real and self.imag==other.imag\n'''\n\nclass complex(object):\n    def __init__(self,real,imag):\n        self.real=real\n        self.imag=imag\n    def __str__(self):\n        if self.real==0:\n            if self.imag==0:\n                return \"0\"\n            else:\n                return \"0.0\"\n        return str(self.real)+\"+\"+str(self.imag)+\"i\"\n    def __add__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real+other.real,self.imag+other.imag)\n    def __sub__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real-other.real,self.imag-other.imag)\n    def __mul__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real*other.real-self.imag*other.imag,self.imag*other.real+self.real*other.imag)\n    def __truediv__(self,other):\n        if isinstance(other,complex):\n            return complex(self.real/other.real,self.imag/other.imag)\n    def __abs__(self):\n        return abs(self.real)+abs(self.imag)\n    def __neg__(self):\n        return complex(-self.real,-self.imag)\n    def __eq__(self,other):\n        if isinstance(other,complex):\n            return self.real==other.real and self.imag==other.imag\n'''\nclass complex(object):\n    def __init__(self,real,imag):\n        self.real=real\n        self.imag=imag\n    def __str__(self):\n        if self.real==0:\n            if self.imag==0:\n                return \"0\"\n            else:\n                return \"0.0\"\n        return str(self.real)+\"+\"+str(self.imag)+\"i\"\n    def __add__(self,other):"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     angle_complex(complex(-2,3),complex(5,-6)) == cmath.phase(complex(-2,3))\nassert     angle_complex(complex(0,2),complex(-1,1)) == cmath.phase(complex(0,2))\nassert     angle_complex(complex(-1,1),complex(0,2)) == cmath.phase(complex(-1,1))\nassert     angle_complex(complex(1,2),complex(0,0)) == 0\nassert     angle_complex(complex(0,0),complex(0,0)) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     angle_complex(1.5+2.8j, 1.5+2.8j) == cmath.phase(1.5+2.8j) == -0.96\nassert     angle_complex(1.5+2.8j, -1.5+2.8j) == cmath.phase(1.5+2.8j) == -0.96\nassert     angle_complex(1.5+2.8j, 1.5-2.8j) == cmath.phase(1.5+2.8j) == 0.96\nassert     angle_complex(1.5+2.8j, -1.5-2.8j) == cmath.phase(1.5+2.8j) == 0.96\nassert     angle_complex(1.5-2.8j, 1.5+2.8j) == cmath.phase(1.5+2.8j) == 0.96\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     angle_complex((0.5,0.5), (1,2)) == cmath.pi/2\nassert     angle_complex((1,1), (1,2)) == cmath.pi/2\nassert     angle_complex((1,0), (1,2)) == cmath.pi\nassert     angle_complex((1,0), (1,2)) == cmath.pi\nassert     angle_complex((1,0), (1,1)) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"The angle of cmath.pi = \", angle_complex(cmath.pi, 1))\nprint(\"The angle of cmath.pi + 2 = \", angle_complex(cmath.pi + 2, 1))\nprint(\"The angle of -1 + 2j = \", angle_complex(-1 + 2j, 1))\n\nprint(\"The angle of 1 + 1j = \", angle_complex(1 + 1j, 1))\nprint(\"The angle of 0 + 0j = \", angle_complex(0 + 0j, 1))\n\nprint(\"The angle of -3 + 2j = \", angle_complex(-3 + 2j, 1))\nprint(\"The angle of -3 - 2j = \", angle_complex(-3 - 2j, 1))\n\nprint(\"The angle of 0 + 0j = \", angle_complex(0 + 0j, 1))\nprint(\"The angle of 1 + 0j = \", angle_complex(1 + 0j, 1))\nprint(\"The angle of 0 + 1j = \", angle_complex(0 + 1j, 1))\nprint(\"The angle of 1 + 1j = \", angle_complex(1 + 1j, 1))\n\nprint(\"The angle of 0 + 0j = \", angle_complex(0 + 0j, 1))\nprint(\"The angle of 0 + 1j = \", angle_complex(0 + 1j, 1))\nprint(\"The angle of 1 + 0j = \", angle_complex(1 + 0j, 1))\nprint(\"The angle of 1 + 1j = \", angle_complex(1 + 1j, 1))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_length(\"101010101010\") == 10\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_substring(string):\n    '''\n    Write a function to find all the sub-strings of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_length('1010') == 1\nassert     find_length('101101') == 3\nassert     find_length('1111') == 1\nassert     find_length('11100000') == 2\nassert     find_length('0') == 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_length('101') == 1\nassert     find_length('1011') == 1\nassert     find_length('101010') == 1\nassert     find_length('0111001') == 5\nassert     find_length('1010011001') == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # how to write the function?\n    # your code here\n    pass\n    # find the length of the string and store it in a variable\n    # set the length of the string to be len(string)\n    # initialize the maximum difference as 0\n    # loop through the string from index 0 to index length-1\n        # loop through the substring from index i to index length-i\n            # if the string[i] is 0, increment the difference by 1\n            # if the string[i] is 1, decrement the difference by 1\n    # return the maximum difference"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_length2(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ( sum(3,4) == 2 )\nassert     ( sum(18,2) == 4 )\nassert     ( sum(100,2) == 102 )\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum(4,6) == 0\nassert     sum(0,5) == 10\nassert     sum(9,6) == 0\nassert     sum(2,3) == 6\n\n'''\nWrite a Python function that takes a list and returns a list with unique elements of the first occurence of each element in the list.\n'''\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum(1,1) == 1\nassert     sum(6,1) == 6\nassert     sum(12,4) == 4\nassert     sum(12,12) == 12\nassert     sum(9,3) == 9\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum(1,2) == 1, \"Wrong Answer\"\nsum(2,2) == 1, \"Wrong Answer\"\nsum(3,3) == 1, \"Wrong Answer\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum(28, 45) == 15, \"It should be 15.\"\nassert sum(28, 46) == 13, \"It should be 13.\"\nassert sum(28, 24) == 11, \"It should be 11.\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum(2,5) == 7, \"2 + 5 = 7 is wrong\"\nassert     sum(5,5) == 10, \"5 + 5 = 10 is wrong\"\nassert     sum(2,5) == 7, \"2 + 5 = 7 is wrong\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (sum(1,2) == 2) \nassert     (sum(4,6) == 4) \nassert     (sum(12,45) == 63) \nassert     (sum(18,45) == 62) \nassert     (sum(18,45) == 62) \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nWrite a python function to find the maximum of two numbers.\n'''\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nsum(3,4) == 2 # 2\nsum(9,9) == 18 # 18\nsum(1,2) == 1 # 1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_int(3, 4) == 12, \"Test 1 failed!\"\nassert     multiply_int(-3, 4) == -12, \"Test 2 failed!\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef substract_int(x, y):\n    '''\n    Write a function to subtract two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(1, 1) == 1\nassert     multiply_int(1, 5) == 5\nassert     multiply_int(5, 5) == 25\n\ndef divide_int(x, y):\n    '''\n    Write a function to divide two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(12, 10) == 120\nassert     multiply_int(3, 3) == 27\nassert     multiply_int(8, 9) == 72\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(0, 0) == 0\nassert     multiply_int(1, 1) == 1\nassert     multiply_int(1, 2) == 2\nassert     multiply_int(3, 3) == 3\nassert     multiply_int(7, 1) == 7\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(12, 1) == 12\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(-1, 2) == -2\nassert     multiply_int(1, -2) == -1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    multiply_int(2,3) == 6\n    multiply_int(7,11) == 63\n    multiply_int(11,13) == 121\n    multiply_int(9,15) == 405\n    multiply_int(10,10) == 100\n    multiply_int(12,0) == 0\n    multiply_int(10,10) == 100\n    multiply_int(-1,-2) == -2\n    multiply_int(-1,-3) == -3\n    multiply_int(0,0) == 0\n    multiply_int(-4,-4) == 0\n    multiply_int(0,0) == 0\n    multiply_int(-3,2) == -6\n    multiply_int(-3,-2) == -6\n    multiply_int(2,-3) == -6\n    multiply_int(2,2) == 8\n    multiply_int(3,2) == 6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_int(1,1) == 1,'should multiply two integers'\nassert     multiply_int(1,0) == 0,'should multiply two integers'\nassert     multiply_int(0,1) == 0,'should multiply two integers'\nassert     multiply_int(-1,0) == 0,'should multiply two integers'\nassert     multiply_int(0,0) == 0,'should multiply two integers'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_int(5, 3) == 15\nassert     multiply_int(10, 10) == 100\nassert     multiply_int(10, -10) == -100\nassert     multiply_int(10, 3) == 30\nassert     multiply_int(-10, -10) == -100\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert long_words(10, ['python', 'go', 'hello']) == ['go', 'hello']\nassert long_words(10, ['hello', 'world']) == []\nassert long_words(5, ['how', 'are', 'you', 'python', 'hello', 'world']) == ['python', 'hello']\nassert long_words(3, ['a', 'the', 'that', 'this']) == ['the', 'this']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(3, ['a', 'ab', 'abc']) == ['abc']\nassert     long_words(2, ['a', 'ab', 'abc', 'abcd']) == ['ab', 'abc']\nassert     long_words(1, ['a', 'ab', 'abc', 'abcd']) == ['ab', 'abc']\nassert     long_words(0, ['a', 'ab', 'abc', 'abcd']) == ['abc', 'abcd']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    \ndef max_word_in_string(str):\n    '''\n    Given a string, return the maximum word.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     long_words(3, ['aba', 'xyz', 'aa', 'x', 'bbb', 'c', 'zzz']) == ['aba', 'xxz']\nassert     long_words(2, ['abc', 'xyz']) == []\nassert     long_words(1, ['a']) == ['a']\nassert     long_words(5, ['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']) == ['aaa']\nassert     long_words(3, ['t','d','o']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(long_words(4, ['foo', 'bar', 'fooobar', 'foobar' ]))"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     long_words(3, ['hello', 'hi', 'hello', 'hi', 'world', 'hello', 'hi', 'hello', 'world']) == ['hello', 'hi', 'hello', 'world']\nassert     long_words(3, ['hello', 'hi', 'hello', 'hi', 'world', 'hello', 'hi', 'hello', 'world']) == ['hello', 'hi', 'hello', 'world']\nassert     long_words(3, ['hello', 'hi', 'hello', 'hi', 'world', 'hello', 'hi', 'hello', 'world']) == ['hello', 'hi', 'hello', 'world']\nassert     long_words(3, ['hello', 'hi', 'hello', 'hi', 'world', 'hello', 'hi', 'hello', 'world']) == ['hello', 'hi', 'hello', 'world']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert long_words(5, [\"hello\", \"world\", \"computer\", \"android\"]) == [\"world\", \"computer\"]\nassert long_words(3, [\"hello\", \"world\", \"computer\", \"goodbye\"]) == [\"computer\"]\nassert long_words(4, [\"hello\", \"world\", \"computer\", \"hello\"]) == [\"hello\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     long_words(4, ['python', 'is', 'awesome']) == ['python']\nassert     long_words(4, ['java', 'is', 'awesome']) == ['java']\nassert     long_words(4, ['python', 'is', 'awesome', 'and', 'is', 'also', 'awesome']) == ['python']\nassert     long_words(4, ['Python', 'is', 'awesome', 'and', 'is', 'also', 'awesome']) == ['Python']\nassert     long_words(4, ['Python', 'is', 'awesome', 'and', 'is', 'also', 'awesome', 'and']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert long_words(3, ['a','dog','likes','cats']) == ['dog','likes']\nassert long_words(2, ['a','dog','likes','cats']) == ['a','dog','likes']\nassert long_words(1, ['a','dog','likes','cats']) == ['a','likes','cats']\nassert long_words(0, ['a','dog','likes','cats']) == []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\n\n\n\n\nprint(\"\\n\\n\\n*******************************************************************************\")\nprint(\"\\n\\n\\n\\n*******************************************************************************\")\nprint(\"\\n\\n\\n\\n*******************************************************************************\")\nprint(\"\\n\\n\\n\\n*******************************************************************************\")\nprint(\"\\n\\n\\n\\n*******************************************************************************\")\nprint(\"\\n\\n\\n\\n*******************************************************************************\")\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     magic_square_test(magic_square) == True, 'Your magic_square_test function did not return correctly'\nassert     magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == False, 'Your magic_square_test function did not return correctly'\nassert     magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False, 'Your magic_square_test function did not return correctly'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                [3, 5, 7],\n                [8, 1, 6]]) == True, 'This is a magic square'\nassert     magic_square_test([[4, 9, 2],\n                [3, 5, 7],\n                [8, 1, 0]]) == False, 'This is not a magic square'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    [0, 4, 8, 1, 5, 9, 2, 6, 7] == magic_square_test([[0, 4, 8, 1, 5, 9, 2, 6, 7]])\n    [0, 4, 8, 1, 5, 9, 2, 6, 7] == magic_square_test([[0, 1, 5, 9], [0, 8, 4, 2], [9, 1, 3, 5]])\n    [0, 1, 5, 9, 8, 4, 2, 6, 7] == magic_square_test([[1, 5, 9], [0, 8, 4], [2, 6, 7]])\n    [0, 1, 5, 9, 2, 4, 6, 7, 3] == magic_square_test([[1, 5, 9, 2], [0, 8, 4, 6], [3, 7, 5, 1]])\n    [0, 1, 5, 9, 2, 4, 6, 7, 3] == magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9] == magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9] == magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8] == magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    [0, 1, 2, 3"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef minimum_difference(sequence):\n    '''\n    Write a function to find the minimum difference between the largest and smallest elements of a sequence.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == True, \"This is an example\"\nassert     magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == False, \"This is an incorrect example\""
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef max_occurrences_brute_force(nums):\n    '''\n    Brute Force\n    Time: O(n)\n    Space: O(1)\n    '''\n    if len(nums) == 0:\n        return -1\n    counts = defaultdict(int)\n    max_count = -1\n    max_value = -1\n    for num in nums:\n        counts[num] += 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_value = num\n    return max_value\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_occurrences([1,1,1,1,1,2]) == 2\nassert     max_occurrences([1,1,2,2,2]) == 2\nassert     max_occurrences([1,2,2,3,3,3,3,3]) == 3\nassert     max_occurrences([1,2,2,3,3,4,4]) == 3\nassert     max_occurrences([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_occurrences([1, 1, 3, 3, 3, 4]) == 3\nassert     max_occurrences([1, 2, 3, 4, 5, 6, 7]) == 3\nassert     max_occurrences([5, 5, 7, 7, 7, 7, 7]) == 7\nassert     max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     max_occurrences([1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1]) == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_occurrences([1,2,4,5,6,7,8,1]) == 1\nassert     max_occurrences([1,2,4,5,6,7,8,1,3,4]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_occurrences([1, 2, 3, 4, 1, 1, 2, 2, 2, 2]) == 4\nassert     max_occurrences([1, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2\nassert     max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n\ndef unique_numbers(nums):\n    '''\n    Write a function to find the set of numbers in a given list that do not occur\n    multiple times.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_occurrences([2, 3, 3, 3, 3, 4, 4, 4, 4]) == 4\nassert     max_occurrences([2, 2, 2, 2, 3, 4, 4, 4, 4]) == 2\nassert     max_occurrences([2, 2, 2, 2, 3, 4, 4, 4, 4, 3, 3, 3]) == 3\nassert     max_occurrences([]) == None\nassert     max_occurrences([1, 1, 1, 1]) == 1\nprint('max_occurrences is okay!')\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"Should be 'holle'\"\nassert     reverse_vowels(\"hello world\") == \"dlrow olleh\", \"Should be 'dlrow olleh'\"\nassert     reverse_vowels(\"I love Python\") == \"I nvoput Python slove\", \"Should be 'I nvoput Python slove'\"\nassert     reverse_vowels(\"I am a boy\") == \"I am a nam aboy\", \"Should be 'I am a nam aboy'\"\nassert     reverse_vowels(\"am I a boy?\") == \"n am I a bo?\", \"Should be 'n am I a bo?\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_vowels('') == ''\nassert     reverse_vowels('tacocat') == 'ncatot'\nassert     reverse_vowels('rat') == 'tar'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels('') == ''\nassert     reverse_vowels('a') == 'a'\nassert     reverse_vowels('hello') == 'olleh'\nassert     reverse_vowels('hello world') == 'dlrow olleh'\nassert     reverse_vowels('hello world!' ) == 'dlrow olleh!'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('hollo') == 'oellh'\nassert     reverse_vowels('hollopy') == 'ypolh'\nassert     reverse_vowels('hollopyo') == 'popyo'\nassert     reverse_vowels('Hollopyo') == 'ypoH'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert reverse_vowels('hellothere') == 'theoreht'\nassert reverse_vowels('Ahem my cat') == 'tam yma Cae'\nassert reverse_vowels('Reverse this string') == 'gnirts rosre'\nassert reverse_vowels('We are ready') == 'ydayw aecrty'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"Should return 'holle' for 'hello'\"\nassert     reverse_vowels(\"hepi\") == \"ihep\", \"Should return 'ihep' for 'hepi'\"\nassert     reverse_vowels(\"one\") == \"no\", \"Should return 'no' for 'one'\"\nassert     reverse_vowels(\"werewolf\") == \"eeewaw\", \"Should return 'eeewaw' for 'werewolf'\"\nassert     reverse_vowels(\"x-x-x-x-x-x-x-x-x\") == \"xx-x-x-x-x-x-x-x-x\", \"Should return 'xx-x-x-x-x-x-x-x-x' for 'x-x-x-x-x-x-x-x-x'\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('raeesp') =='spraees'\nassert     reverse_vowels('rrae!') == 'r!ere!'\nassert     reverse_vowels('hello world!') == 'dlrow olleh'\nassert     reverse_vowels('*') == '*'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert reverse_vowels(\"Aa\") == \"aA\", \"Should return Aa\"\nassert reverse_vowels(\"hello\") == \"olleh\", \"Should return olleh\"\nassert reverse_vowels(\"world\") == \"dlrow\", \"Should return dlrow\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string((1, 2, 3)) == '1, 2, 3', 'tup_string() is wrong'\nprint('Test passed')\n\ndef any_order(tup1, tup2):\n    '''\n    Write a function to determine if the order of tup1 and tup2 are any-order.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef add_tuple(tup1, tup2):\n    '''\n    Write a function to add two tuples element by element.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)'\nassert     tup_string(('a', 'b', 'c')) == 'abc'\nassert     tup_string((-1, 0, 1)) == '-1 0 1'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string(('rahul','kumar','babu')) == \"rahul kumar babu\"\nassert     tup_string((11,8,12)) == \"11 8 12\"\nassert     tup_string((7,5,1)) == \"7 5 1\"\nassert     tup_string((6,3,9)) == \"6 3 9\"\nassert     tup_string((10,2,9)) == \"10 2 9\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((1,2,3,4,5,6,7,8,9,10)) == '1,2,3,4,5,6,7,8,9,10'\nassert tup_string(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')) == '1,2,3,4,5,6,7,8,9,10'\nassert tup_string(('#', '$', '%', '^', '&', '*', '+', '-', '/', '?')) == '#,$,%,^,&,*,+,-/?,?'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string((1,2,3,4)) == \"1,2,3,4\" \nassert     tup_string((1,2,3,4)) == \"1,2,3,4\"\nassert     tup_string((\"1\",'2',3,'4')) == \"1,2,3,4\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string((\"pietro\", 2, True)) == 'pietro: 2; True'\nassert     tup_string((\"pietro\", \"2\", True)) == 'pietro: 2; True'\nassert     tup_string((\"pietro\", 2, False)) == 'pietro: 2; False'\nassert     tup_string((\"pietro\", \"2\", False)) == 'pietro: 2; False'\nassert     tup_string((\"pietro\", 2.0, True)) == 'pietro: 2.0; True'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string((1,2,3,4,5)) == \"1,2,3,4,5\", \"Wrong output\"\nassert     tup_string((10,20,30,40)) == \"10,20,30,40\", \"Wrong output\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_element_index(tup1, elem):\n    '''\n    Write a function to get the index of a given element from a given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tup_string((1,2,3)) == str((1,2,3)), \\\n    '''\n    Your function tup_string should return a string in the following format:\n    (1,2,3) -> '(1,2,3)'\n    '''\n\nassert     tup_string((1,2,3)) == str((1,2,3)), \\\n    '''\n    Your function tup_string should return a string in the following format:\n    (1,2,3) -> '(1,2,3)'\n    '''\n\nprint('Your function is working correctly!')\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_list_order(list1):\n    '''\n    Write a function that checks whether the list1 is sorted.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_negativenum([1, 2, 3, -4, 5]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -6\nassert     sum_negativenum([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_negativenum([-1, 2, -3, 4]) == -1, 'Not as expected'\nassert sum_negativenum([-1, -2, -3, -4]) == -6, 'Not as expected'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4, -5]) == 6\nassert     sum_negativenum([1, 2, 3, 4, 5]) == 0\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6]) == -15\nassert     sum_negativenum([]) == 0"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([1,2,3,-1,2,3]) == 0, 'your code returned wrong sum'\nassert     sum_negativenum([-1,-1,-1,-1]) == -2, 'your code returned wrong sum'\nassert     sum_negativenum([-1,-2,-3]) == -3, 'your code returned wrong sum'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nsum_negativenum([-1, -1, -1]) == -2"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4, -5]) == -6\nassert     sum_negativenum([-1, 1, -2, 1, -3, 2]) == 0\nassert     sum_negativenum([1, 1, -2, -3, 1, -4, 4, 1, 1]) == -3\nassert     sum_negativenum([1, 1, -2, -3, 4]) == -5\nassert     sum_negativenum([1, 1, -2, -3, 4, -5, 5]) == -7\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhexagonal_num(1) == 1\nassert hexagonal_num(2) == 3\nassert hexagonal_num(3) == 5\nassert hexagonal_num(4) == 7\nassert hexagonal_num(5) == 9\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     hexagonal_num(1) == 3, 'incorrect'\nassert hexagonal_num(3) == 6, 'incorrect'\nassert hexagonal_num(4) == 10, 'incorrect'\nassert hexagonal_num(5) == 15, 'incorrect'\nassert hexagonal_num(6) == 21, 'incorrect'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nhexagonal_num(3) == \n    1\nassert \nhexagonal_num(9) == \n    44\nassert \nhexagonal_num(4) == \n    21\nassert \nhexagonal_num(7) == \n    160\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nhexagonal_num(1) == 2\nassert hexagonal_num(4) == 6\nassert hexagonal_num(5) == 10\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hexagonal_num(0) == 1\nassert     hexagonal_num(1) == 3\nassert     hexagonal_num(2) == 7\nassert     hexagonal_num(3) == 15\nassert     hexagonal_num(4) == 29\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    hexagonal_num(1) == 3\n    hexagonal_num(2) == 5\n    hexagonal_num(3) == 7\n    hexagonal_num(4) == 11\n    hexagonal_num(5) == 13\n    hexagonal_num(6) == 15\n    hexagonal_num(7) == 17\n    hexagonal_num(8) == 19\n    hexagonal_num(9) == 23\n    hexagonal_num(10) == 29\n    hexagonal_num(11) == 31\n    hexagonal_num(12) == 33\n    hexagonal_num(13) == 35\n    hexagonal_num(14) == 37\n    hexagonal_num(15) == 39\n    hexagonal_num(16) == 41\n    hexagonal_num(17) == 43\n    hexagonal_num(18) == 45\n    hexagonal_num(19) == 47\n    hexagonal_num(20) == 49\n    hexagonal_num(21) == 51\n    hexagonal_num(22) == 53\n    hexagonal_num(23) == 55\n    hexagonal_num(24) == 57\n    hexagonal_num(25) == 59\n    hexagonal_num(26) == 61\n    hexagonal_num(27) == 63\n    hexagonal_num(28) == 65\n    hexagonal_num(29) == 67\n    hexagonal_num(30) == 69\n    hexagonal_num(31) == 71\n    hexagonal_num(32) == 73\n    hexagonal_num(33) == 75\n    hexagonal_num(34) == 77\n    hexagonal_num(35) == 79\n    hexagonal_num(36) == 81\n    hexagonal_num(37) == 83\n    hexagonal_num(38) == 85\n    hexagonal_num(39) == 87\n    hexagonal_num(40) == 89\n    hexagonal_num(41) == 91\n    hexagonal_num(42) == 93\n    hexagonal_num(43) == 95\n    hexagonal_num(44) == 97\n    hexagonal_num(45) == 99\n    hexagonal_num(46) == 101\n    hexagonal_num(47) == 103\n    hexagonal_num(48) == 105\n    hexagonal_num(49) == 107\n    hexagonal_num(50) == 109\n    hexagonal_num(51) == 111\n    hexagonal_num(52) == 113\n    hexagonal_num(53) == 115\n    hexagonal_num(54) == 117\n    hexagonal_num(55) == 119\n    hexagonal_num(56) == 121\n    hexagonal_num(57) == 123\n    hexagonal_num(58) == 125\n    hexagonal_num(59) == 127\n    hexagonal_num(60) == 129\n    hexagonal_num(61) == 131\n    hexagonal_num(62) == 133\n    hexagonal_num(63) == 135\n    hexagonal_num(64) == 137\n    hexagonal_num(65) == 139\n    hexagonal_num(66) == 141\n    hexagonal_num(67) == 143\n    hexagonal_num(68) == 145\n    hexagonal_num(69) == 147\n    hexagonal_num(70) == 149\n    hexagonal_num(71) == 151\n    hexagonal_num(72) == 153\n    hexagonal_num(73) == 155\n    hexagonal_num(74) == 157\n    hexagonal_num(75) == 159\n    hexagonal_num(76) == 161\n    hexagonal_num(77) == 163\n    hexagonal_num(78) == 165\n    hexagonal_num(79) == 167\n    hexagonal_num(80) == 169\n    hexagonal_num(81) == 171\n    hexagonal_num(82) == 173\n    hexagonal_num(83) == 175\n    hexagonal_num(84) == 177\n    hexagonal_num(85) == 179\n    hexagonal_num(86) == 181\n    hexagonal_num(87) == 183\n    hexagonal_num(88) == 185\n    hexagonal_num(89) == 187\n    hexagonal_num(90) == 189\n    hexagonal_num(91) == 191\n    hexagonal_num(92) == 193\n    hexagonal_num(93) == 195\n    hexagonal_num(94) == 197\n    hexagonal_num(95) == 199\n    hexagonal_num(96) == 201\n    hexagonal_num(97) == 203\n    hexagonal_num(98) == 205\n    hexagonal_num(99) == 207\n    hexagonal_num(100) == 209\n    hexagonal_num(101) == 211\n    hexagonal_num(102) == 213\n    hexagonal_num(103) == 215\n    hexagonal_num(104) == 217\n    hexagonal_num(105) == 219\n    hexagonal_num(106) == 221\n    hexagonal_num(107) == 223\n    hexagonal_num(108) == 225\n    hexagonal_num(109) == 227\n    hexagonal_num(110) == 229\n    hexagonal_num(111) == 231\n    hexagonal_num(112) == 233\n    hexagonal_num(113) == 235\n    hexagonal_num(114) == 237\n    hexagonal_num(115) == 239\n    hexagonal_num(116) == 241\n    hexagonal_num(117) == 243\n    hexagonal_num(118) == 245\n    hexagonal_num(119) == 247\n    hexagonal_num(120) == 249\n    hexagonal_num(121) == 251\n    hexagonal_num(122) == 253\n    hexagonal_num(123) == 255\n    hexagonal_num(124) == 257\n    hexagonal_num(125) == 259\n    hexagonal_num(126) == 261\n    hexagonal_num(127) == 263\n    hexagonal_num(128) == 265\n    hexagonal_num(129) == 267\n    hexagonal_num(130) == 269\n    hexagonal_num(131) == 271\n    hexagonal_num(132) == 273\n    hexagonal_num(133) == 275\n    hexagonal_num(134) == 277\n    hexagonal_num(135) == 279\n    hexagonal_num(136) == 281\n    hexagonal_num(137) == 283\n    hexagonal_num(138) == 285\n    hexagonal_num(139) == 287\n    hexagonal_num(140) == 289\n    hexagonal_num(141) == 291\n    hexagonal_num(142) == 293\n    hexagonal_num(143) == 295\n    hexagonal_num(144) == 297\n    hexagonal_num(145) == 299\n    hexagonal_num(146) == 301\n    hexagonal_num(147) == 303\n    hexagonal_num(148) == 305\n    hexagonal_num(149) == 307\n    hexagonal_num(150) == 309\n    hexagonal_num(151) == 311\n    hexagonal_num(152) == 313\n    hexagonal_num(153) == 315\n    hexagonal_num(154) == 317\n    hexagonal_num(155) == 319\n    hexagonal_num(156) == 321\n    hexagonal_num(157) == 323\n    hexagonal_num(158) == 325\n    hexagonal_num(159) == 327\n    hexagonal_num(160) == 329\n    hexagonal_num(161) == 331\n    hexagonal_num(162) == 333\n    hexagonal_num(163) == 335\n    hexagonal_num(164) == 337\n    hexagonal_num(165) == 339\n    hexagonal_num(166) == 341\n    hexagonal_num(167) == 343\n    hexagonal_num(168) == 345\n    hexagonal_num(169) == 347\n    hexagonal_num(170) == 349\n    hexagonal_num(171) == 351\n    hexagonal_num(172) == 353\n    hexagonal_num(173) == 355\n    hexagonal_num(174) == 357\n    hexagonal_num(175) == 359\n    hexagonal_num(176) == 361\n    hexagonal_num(177) == 363\n    hexagonal_num(178) == 365\n    hexagonal_num(179) == 367\n    hexagonal_num(180) == 369\n    hexagonal_num(181) == 371\n    hexagonal_num(182"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([0,0,1,1,0,0,0,0]) == 0.75\nassert     zero_count([1,1,1,1]) == 0.75\nassert     zero_count([0,0]) == 1.0\nassert     zero_count([]) == 1.0\n\n\ndef char_in_name(s, char):\n    '''\n    Write a function that will return whether a character is in a string.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     zero_count([1, 0, 0, 1, 0, 0]) == 0.5\nassert     zero_count([1, 0, 1, 0, 1, 0]) == 0.666666666667\nassert     zero_count([1, 0, 1, 0, 1, 1]) == 1.0\nassert     zero_count([1, 1, 0, 1, 1, 0]) == 1.0\nassert     zero_count([1, 1, 0, 1, 1, 1]) == 1.3333333333333335\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef binary_search_recursion(arr, l, h, item):\n    '''\n    Write a function to find the index of an item in sorted array\n    '''\n    if h < l:\n        return -1\n    mid = (h + l) // 2\n    if arr[mid] == item:\n        return mid\n    elif arr[mid] > item:\n        return binary_search_recursion(arr, l, mid - 1, item)\n    else:\n        return binary_search_recursion(arr, mid + 1, h, item)\n\n\ndef binary_search_recursion_bis(arr, l, h, item):\n    '''\n    Write a function to find the index of an item in sorted array\n    '''\n    if h < l:\n        return -1\n    if arr[mid] == item:\n        return mid\n    elif arr[mid] > item:\n        return binary_search_recursion_bis(arr, l, mid - 1, item)\n    else:\n        return binary_search_recursion_bis(arr, mid + 1, h, item)\n\n\ndef binary_search_recursion_max(arr, l, h, item):\n    '''\n    Write a function to find the index of an item in sorted array\n    '''\n    if h < l:\n        return -1\n    mid = (h + l) // 2\n    if arr[mid] == item:\n        return mid\n    elif arr[mid] > item:\n        return binary_search_recursion_max(arr, l, mid - 1, item)\n    else:\n        return binary_search_recursion_max(arr, mid + 1, h, item)\n\n\ndef binary_search_recursion_min(arr, l, h, item):\n    '''\n    Write a function to find the index of an item in sorted array\n    '''\n    if h < l:\n        return -1\n    mid = (h + l) // 2\n    if arr[mid] == item:\n        return mid\n    elif arr[mid] > item:\n        return binary_search_recursion_min(arr, l, mid - 1, item)\n    else:\n        return binary_search_recursion_min(arr, mid + 1, h, item)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     zero_count([0]) == 0.0\nassert     zero_count([0,1,0,1,0]) == 0.5\nassert     zero_count([0,0,0,0,0]) == 1.0\nassert     zero_count([1,1,1,1,0,0,0]) == 1.0\nassert     zero_count([1,1,1,1,1,1,1,1,1]) == 0.0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     zero_count([0, 1, 0]) == 0.5\nassert     zero_count([0, 1, 0, 0, 1]) == 0.5\nassert     zero_count([0, 1, 0, 1, 1]) == 0.0\nassert     zero_count([1, 1, 1, 1, 1]) == 1.0\nassert     zero_count([0, 0, 0, 0, 0, 0]) == 0.0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([0,1,0,1,0,1,0,1,0,1]) == 0.6, \"Your answer is wrong!\"\nassert     zero_count([1,0,0,1,1,0,0,0,0,0]) == 0.6, \"Your answer is wrong!\"\nassert     zero_count([0,0,1,0,1,0,0,0,0,0]) == 0.6, \"Your answer is wrong!\"\nassert     zero_count([1,0,1,0,1,0,0,0,0,0]) == 1, \"Your answer is wrong!\"\nassert     zero_count([1,1,1,0,1,0,0,0,0,0]) == 0.5, \"Your answer is wrong!\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nnums = array('i',[0,1,0,2,2,0,1,3,4])\nprint(f\"Zero Count: {zero_count(nums)}\")"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     zero_count([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 1.0\nassert zero_count([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 0.5\nassert zero_count([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0]) == 1.0\nassert zero_count([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]) == 1.0\nassert zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0.0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(9) == True\nassert is_Sum_Of_Powers_Of_Two(1) == True\nassert is_Sum_Of_Powers_Of_Two(12) == True\nassert is_Sum_Of_Powers_Of_Two(1000000000000) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) \nassert     is_Sum_Of_Powers_Of_Two(2) \nassert     is_Sum_Of_Powers_Of_Two(3) \nassert     is_Sum_Of_Powers_Of_Two(4) \nassert     is_Sum_Of_Powers_Of_Two(5) \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_Sum_Of_Powers_Of_Two(4) == False\n    is_Sum_Of_Powers_Of_Two(50) == False\n    is_Sum_Of_Powers_Of_Two(0) == True"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(16) == True, 'Should be True'\nassert     is_Sum_Of_Powers_Of_Two(3) == False, 'Should be False'\nassert     is_Sum_Of_Powers_Of_Two(21) == False, 'Should be False'\n\n\ndef is_Sum_Of_Powers_Of_Two_v2(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == False, \"wrong output\"\nassert is_Sum_Of_Powers_Of_Two(2) == True, \"wrong output\"\nassert is_Sum_Of_Powers_Of_Two(18) == True, \"wrong output\"\nassert is_Sum_Of_Powers_Of_Two(9) == False, \"wrong output\"\nassert is_Sum_Of_Powers_Of_Two(6) == False, \"wrong output\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == False, \"case 1\"\nassert     is_Sum_Of_Powers_Of_Two(10) == True, \"case 2\"\nassert     is_Sum_Of_Powers_Of_Two(27) == True, \"case 3\"\nassert     is_Sum_Of_Powers_Of_Two(13) == False, \"case 4\"\nassert     is_Sum_Of_Powers_Of_Two(0) == False, \"case 5\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(3) == True, \"3 should be Sum Of Powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(10) == False, \"10 should not be Sum Of Powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(4) == False, \"4 should not be Sum Of Powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(7) == True, \"7 should be Sum Of Powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(9) == True, \"9 should be Sum Of Powers of 2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_list(list_of_numbers): \n    '''\n    Write a python function to reverse the given list of numbers.\n    '''\n    pass"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == False, \"is_Sum_Of_Powers_Of_Two(1) should be False\"\nassert     is_Sum_Of_Powers_Of_Two(12) == True, \"is_Sum_Of_Powers_Of_Two(12) should be True\"\nassert     is_Sum_Of_Powers_Of_Two(32) == False, \"is_Sum_Of_Powers_Of_Two(32) should be False\"\nassert     is_Sum_Of_Powers_Of_Two(128) == False, \"is_Sum_Of_Powers_Of_Two(128) should be False\"\nassert     is_Sum_Of_Powers_Of_Two(12) == False, \"is_Sum_Of_Powers_Of_Two(12) should be False\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(1) == 2*math.pi\nassert circle_circumference(3) == 2*math.pi*3\nassert circle_circumference(0.5) == 2*math.pi*2*0.5\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circle_circumference(0) == 0, \"0 should give 0\"\nassert     circle_circumference(1) == pi, \"pi should give 1\"\nassert     circle_circumference(2) == pi * 2, \"2 should give 6.28\"\nassert     circle_circumference(3) == pi * 2 * 3, \"3 should give 7.14\"\nassert     circle_circumference(4) == pi * 2 * 3 * 4, \"4 should give 10.56\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circle_circumference(1) == 3.141592653589793\nassert     circle_circumference(2) == 6.283185307179586\nassert     circle_circumference(3) == 12.566370614359172\nassert     circle_circumference(4) == 17.85286438356454\nassert     circle_circumference(5) == 20.641509433962264\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(1) == 2*pi*r\nassert     circle_circumference(0.1) == 2*pi*r\nassert     circle_circumference(2) == 2*pi*r\nassert     circle_circumference(10) == 2*pi*r\nassert     circle_circumference(25) == 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # Code here "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     circle_circumference(1) == math.pi * 2\nassert     circle_circumference(3) == 2 * math.pi * 3\nassert     circle_circumference(3.3) == 2 * math.pi * 3.3\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[1,2],3,4,5]) == 5, extract_singly([[1,2],3,4,5])\nassert     extract_singly([[1,2,3],[4,5],6,7,8]) == 7, extract_singly([[1,2,3],[4,5],6,7,8])\nassert     extract_singly([[1,2],3,[4,5,6]]) == 6, extract_singly([[1,2],3,[4,5,6]])\n\ndef flatten(nested_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1,2],[3,4]]) == set([1,2,3,4])\nassert     extract_singly([[1],[2],[3],[4]]) == set([1,2,3,4])\nassert     extract_singly([[1,2,3],[4]]) == set([1,2,3,4])\nassert     extract_singly([[1],[2,3,4],[5]]) == set([1,2,3,4,5])\nassert     extract_singly([[1,2,3,4],[5,6],[7]]) == set([1,2,3,4,5,6,7])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([]) == [] \nassert     extract_singly([[]]) == [] \nassert     extract_singly([[1, 2]]) == [1, 2]\nassert     extract_singly([[1, 2, 3]]) == [1, 2, 3]\nassert     extract_singly([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntest_list = [[1], [2], [[3], 4], [[[5]]]]\nassert (extract_singly(test_list) == {1, 2, 3, 4, 5})\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly([[2,2,1],[2,2,2]]) == [2,2,2,1,2,2]\nassert     extract_singly([[2,2,1],[2,2,2],[3,3,3,3,3]]) == [2,2,1,2,2,3,3,3,3]\nassert     extract_singly([[2,2,1]]) == [2,2,1]\nassert     extract_singly([[2]]) == [2]\nassert     extract_singly([]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1,2,3,4],[5,6,7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert     extract_singly([[1,2,3,4],[5],[6]]) == [1,2,3,4,5,6]\nassert     extract_singly([[1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nassert     extract_singly([[1,2,3,4],[5,6,7,8,9,10]]) == [1,2,3,4,5,6,7,8,9,10]\nassert     extract_singly([[1,2,3,4],[5,6,7,8,9,10],[11,12,13,14,15]]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_singly([[1, 2], [3, 4], [5], [6]]) == [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 1, 2, 3, 4, 5]\nassert     extract_singly([[1, 2], [1, 2, 3, 4, 5, 6]]) == [1, 2, 1, 2, 3, 4, 5, 6]\n\nprint(\"Passed all test cases\""
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[[1,2]], [[3,4]]]) == {1,2,3,4}\nassert     extract_singly([[[1,2], [3,4]], [[5,6]]]) == {1,2,3,4,5,6}\nassert     extract_singly([[[1,2]]]) == {1,2}\nassert     extract_singly([[[1,2], [3,4], [5,6]]]) == {1,2,3,4,5,6}\nassert     extract_singly([]) == set()\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pancake_sort([3,2,1]) == [1,2,3]\nassert     pancake_sort([2,1,3]) == [1,3,2]\nassert     pancake_sort([1,2,3]) == [3,2,1]\nassert     pancake_sort([3,2,1]) == [1,2,3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nStep 1. Reverse the order of the elements in the list\n\nStep 2. Concatenate the list. Now the list is sorted.\n\nStep 3. Remove the last element from the list\n\nStep 4. Reverse the order of the elements in the list\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pancake_sort([4,3,2,1]) ==    [4,2,3,1]\nassert     pancake_sort([4,3,2,1]) ==    [1,2,3,4]\nassert     pancake_sort([3,2,1]) ==    [1,2,3]\nassert     pancake_sort([1,2,3,4]) ==    [1,2,3,4]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    [5,2,4,1,3] == pancake_sort([1,2,3,4,5])\n    [5,2,3,4,1] == pancake_sort([1,2,3,4,5])\n    [5,2,4,1,3] == pancake_sort([5,2,4,1,3])\n    [5,2,4,1,3] == pancake_sort([1,2,3,4,5])\n    [5,2,4,1,3] == pancake_sort([2,4,1,3,5])\n    [1,2,3,4,5] == pancake_sort([1,2,3,4,5])\n    [1,2,3,4,5] == pancake_sort([2,4,1,3,5])\n    [1,2,3,4,5] == pancake_sort([5,2,4,1,3])\n    [1,2,3,4,5] == pancake_sort([5,2,4,1,3])\n    [1,2,3,4,5] == pancake_sort([5,2,3,4,1])\n    [1,2,3,4,5] == pancake_sort([5,2,3,4,1])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,5,2])\n    [1,2,3,4,5] == pancake_sort([3,4,1,5,2])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,5,2])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])\n    [1,2,3,4,5] == pancake_sort([3,4,1,2,5])"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert pancake_sort([4, 5, 1, 2, 3]) == [1, 2, 3, 4, 5]\nassert pancake_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert pancake_sort([4, 3, 2, 1]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pancake_sort([2, 6, 5, 4, 3, 1]) == [1, 3, 2, 5, 4, 6]\nassert     pancake_sort([2, 6, 4, 5, 3, 1]) == [1, 3, 2, 5, 4, 6]\nassert     pancake_sort([2, 1]) == [1, 2]\nassert     pancake_sort([1]) == [1]\nassert     pancake_sort([]) == []\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([1,2,3,1,2,3],[1,2,3,1,2,3],[1,2,3,1,2,3]) == 1\nassert     count_samepair([1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]) == 1\nassert     count_samepair([1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]) == 0\nassert count_samepair([1,1,1,1,1,1],[1,1,1,1,1,1],[1,2,2,2,2,2]) == 2\nassert count_samepair([1,1,1,1,1,1],[1,1,1,1,1,1],[2,2,2,2,2,2]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_samepair([1,2,3],[4,5,6],[7,8,9]) == 3\ncount_samepair([1,2,3],[4,5,6],[7,8,9,10]) == 4\ncount_samepair([1,2,3],[4,5,6],[7,8,9,10,11]) == 3\ncount_samepair([1,2,3],[4,5,6],[7,8,9,10,11,12]) == 5"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 0, 'Passed'\nassert     count_samepair([1,2,3,4], [1,2,3], [1,2,3]) == 1, 'Passed'\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3]) == 1, 'Passed'\nassert     count_samepair([1,2,3], [1,2,3,4], [1,2,3,4]) == 1, 'Passed'\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3]) == 2, 'Passed'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert count_samepair([[1,2,3],[2,1,3],[3,2,1]], [[2,3,4],[3,2,4],[1,3,4],[2,4,1]], \n[[1,1,2],[2,2,2],[3,3,3]]) == 4\n\nassert count_samepair([[1,2,3],[2,1,3],[3,2,1]], [[2,3,4],[3,2,4],[1,3,4],[2,4,1]], \n[[1,1,2],[2,2,2],[3,3,3]]) == 4\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([3,3,3],[4,4,4],[5,5,5]) == 1\nassert     count_samepair([3,3,3],[4,4,4],[5,5,5],list1 = [2,2,2]) == 2\nassert     count_samepair([3,3,3],[4,4,4],[5,5,5],list1 = [4,4,4],list2 = [5,5,5]) == 1\nassert     count_samepair([3,3,3],[4,4,4],[5,5,5],list1 = [4,4,4],list2 = [5,5,5],list3 = [1,1,1]) == 0\n\n\ndef count_samevalue(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncount_samepair([1,1,1],[2,2,2],[3,3,3])==1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Pass\" if count_samepair(['a', 'a', 'b', 'b'],['a', 'b', 'a', 'b'],['a', 'b', 'a', 'c']) == 1 else \"Fail\")\nassert \nprint(\"Pass\" if count_samepair([1,2,1,3], [1,2,1,2], [1,2,1,3]) == 3 else \"Fail\")\n\ndef count_same_word(list1,list2,list3):\n    '''\n    Write a function to count number of words in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([2,2,2,2,2,2],\n                        [2,2,2,2,2,2],\n                        [2,2,2,2,2,2]) == 2, 'incorrect'\nassert     count_samepair([2,2,2,2,2,2],\n                        [2,2,2,2,2,2],\n                        [2,2,2,2,2,2]) == 2, 'incorrect'\nassert     count_samepair([2,2,2,2,2,2],\n                        [2,2,2,2,2,2],\n                        [2,2,2,2,2,2]) == 0, 'incorrect'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists((('a','b','c','d'),('a','e'))) == 2\nassert    find_lists((('a','b','c','d'),('a','e'))) == 1\nassert    find_lists((('a','b','c','d'),)) == 0\nassert    find_lists(()) == 0\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(('',[],{},2,2,2,'',[],[],[],[],2)) == 3, '2'\nassert     find_lists(('',[],{},2,2,2,'',[],[],[],[],2,2,2,'',[],[],[],[],2)) == 3, '3'\nassert     find_lists(('',[],{},2,2,2,'',[],[],[],[],2,2,2,'',[],[],[],[],2,'',[],2)) == 4, '4'\nassert     find_lists(('',[],{},2,2,2,'',[],[],[],[],2,2,2,'',[],[],[],[],2,2,2,'',[],2)) == 4, '4'\nassert     find_lists(('',[],{},2,2,2,'',[],[],[],[],2,2,2,'',[],[],[],[],2,2,2,'',[],2,2)) == 4, '4'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists(([1,2,3],['a','b','c'])) == 1, \"1st case failed\"\nassert     find_lists(([1,2,3],1,2,3)) == 3, \"2nd case failed\"\nassert     find_lists(([1],1,2,3)) == 2, \"3rd case failed\"\nassert     find_lists(([1,2],1,2,3)) == 4, \"4th case failed\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists(((1,2,3),(4,5),(6,7,8,9),(10,11)))==1, \\\n    'Wrong output for find_lists(((1,2,3),(4,5),(6,7,8,9),(10,11))): Expected 1, got %s' %(find_lists(((1,2,3),(4,5),(6,7,8,9),(10,11))))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == 2, \"not correct\"\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == 3, \"not correct\"\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 4, \"not correct\"\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == 4, \"not correct\"\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')) == 5, \"not correct\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists(([1,2,3],))     == 2, 'Wrong output'\nassert     find_lists(([1,2],))     == 1, 'Wrong output'\nassert     find_lists(([],))     == 1, 'Wrong output'\nassert     find_lists(())     == 1, 'Wrong output'\nassert     find_lists(([],)) == 0, 'Wrong output'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists((\"foo\", \"bar\", \"baz\", \"foo\", \"bar\", \"baz\")) == 3\nassert     find_lists((\"foo\", \"bar\", \"baz\")) == 1\nassert     find_lists((\"foo\", \"bar\")) == 0\nassert     find_lists((\"foo\")) == 1\nassert     find_lists((\"foo\",)) == 0\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_lists([1,2,3,4])"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_lists((1, 2, 3, 4)) == 1\nassert find_lists((1, 2, 3, 4, 5)) == 2\nassert find_lists((1, 2, 3, 4, 5, 6)) == 3\n\ndef check_matrix(Input): \n    '''\n    Write a function to check if a given matrix is a rotation of a given matrix.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists((()) == 0) == True, \"test case 1\"\nassert     find_lists(((1, 2),)) == 1, \"test case 2\"\nassert     find_lists(((1, 2), (3, 4), (5, 6))) == 3, \"test case 3\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"The maximum absolute difference between any two elements in a given array is \",\n    max_Abs_Diff([3, 6, 1, 8, -5]))\nprint(\"The maximum absolute difference between any two elements in a given array is \",\n    max_Abs_Diff([3, 6, -1, 8, 5]))\nprint(\"The maximum absolute difference between any two elements in a given array is \",\n    max_Abs_Diff([3, 6, 1, -8, 5]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([-1, -2, -3, -4, -5]) == 0, 'Wrong'\nassert     max_Abs_Diff([1,2,3,4,5]) == 5, 'Wrong'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Abs_Diff([-1, -2, 1, 2, -2]) == 2, \"Wrong Answer!\"\nassert     max_Abs_Diff([1, 2, 2, 1, 1]) == 4, \"Wrong Answer!\"\nassert     max_Abs_Diff([-1, 0, 1, -1, 2, 3, 5]) == 6, \"Wrong Answer!\"\nassert     max_Abs_Diff([]) == 0, \"Wrong Answer!\"\n\n'''\nTest your code by un-commenting the lines below:\n'''"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([1,3,5,7,9]) == 4\nassert     max_Abs_Diff([-1,-3,5,-7,9]) == 6\nassert     max_Abs_Diff([-9,-4,3,5,7]) == 9\nassert     max_Abs_Diff([-2,4,3,5,7]) == 3\nassert     max_Abs_Diff([4,3,5,7,2]) == 4\nprint('Test passed.')\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Abs_Diff([-5, -2, 3, 0]) == 3\nassert     max_Abs_Diff([-5, -2, 1, -3]) == 5\nassert     max_Abs_Diff([1, 2, 3, 4, 5, 6]) == 5\nassert     max_Abs_Diff([1, 0, -2, -3]) == 3\nassert     max_Abs_Diff([]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(f\"The maximum absolute difference between any two elements in the array {arr} is {max_Abs_Diff(arr)}\""
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(3, 3, 1) == None\nassert     find_solution(3, 3, 0) == (0, 0)\nassert     find_solution(3, 3, 3) == (1, 1)\nassert     find_solution(3, 2, 0) == None\nassert     find_solution(1, 1, 0) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_solution(1,1,5) == (0, 1)\nfind_solution(2,3,10) == (0, 2)\nfind_solution(1,1,1) == (0, 1)\nfind_solution(2,1,8) == (1, 1)\nfind_solution(0,1,1) == (0, 1)\nfind_solution(1,2,1) == (0, 1)\nfind_solution(2,3,0) == None\nfind_solution(1,1,2) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_solution(1, 3, 1) == (0, 0)\nassert     find_solution(1, 1, 2) == (1, 1)\nassert     find_solution(4, 7, 0) == (0, 0)\nassert     find_solution(0, 2, 3) == (1, 1)\nassert     find_solution(1, 2, 3) == (1, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_solution(1, 2, 1) == (1, 2)\nassert     find_solution(1, 2, 2) == (1, 2)\nassert     find_solution(1, 2, 3) == None\nassert     find_solution(1, 2, 4) == None\nassert     find_solution(1, 2, 5) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_solution(3,4,10) == (5,3)\nassert     find_solution(3,5,16) == None\nassert     find_solution(0,0,5) == (0,0)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_solution(2, 5, 7) == (1, 2)\nassert     find_solution(5, 2, 11) == (4, 5)\nassert     find_solution(5, 5, 12) == (4, 4)\nassert     find_solution(5, 5, 14) == (5, 5)\nassert     find_solution(5, 5, 15) is None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution(2,4,10) == None\nassert     find_solution(4,2,10) == None\nassert     find_solution(3,5,20) == None\nassert     find_solution(6,8,35) == None\nassert     find_solution(8,6,35) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nimport math\ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = (n + b) / a\n    y = (n - b) / a\n    print(x, y)\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_solution(0, 1, 0) == None, find_solution(0, 1, 0)\nfind_solution(2, 3, 4) == (1, 3)\nfind_solution(0, 1, 2) == (1, 1)\nfind_solution(0, 1, 1) == (0, 1)\nfind_solution(1, 1, 2) == (1, 1)\nfind_solution(0, 1, 5) == (1, 5)\nfind_solution(0, 0, 1) == (0, 0)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1,2,3], [4,5,6,7]) == None, \"It should return None\"\nassert     remove_elements([1,2,3], [2,3]) == None, \"It should return None\"\nassert     remove_elements([2,3,4], [2,3]) == None, \"It should return None\"\nassert     remove_elements([2,3,4], [4]) == None, \"It should return None\"\nassert     remove_elements([2,3,4], [5,6,7]) == None, \"It should return None\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_elements([1, 2, 3, 4], [1, 2, 3]) ==     [], 'test 1 passed'\nassert     remove_elements([1, 2, 3, 4], [2, 3]) ==     [1, 4], 'test 2 passed'\nassert     remove_elements([1, 2, 3, 4], [3, 3]) ==     [1, 2, 4], 'test 3 passed'\nassert     remove_elements([1, 2, 3, 4, 1], [1]) ==     [2, 3, 4], 'test 4 passed'\nassert     remove_elements([1, 2, 3, 4, 1], [2]) ==     [1, 3, 4], 'test 5 passed'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([10, 20, 30, 40, 50], [10, 20, 30, 40]) == 0\nassert     remove_elements([10, 20, 30, 40, 50], [10, 20, 10, 40, 50]) == 1\nassert     remove_elements([10, 20, 30, 40, 50], [10, 20, 10, 40]) == 2\nassert     remove_elements([10, 20, 30, 40, 50], [10, 20, 30, 40]) == 3\nassert     remove_elements([10, 20, 30, 40, 50], [50, 10, 20, 30, 40]) == 4\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_elements([1, 2, 3], [3, 4]) ==     [1]\nassert     remove_elements([1, 2, 3], []) ==     [1, 2, 3]\nassert     remove_elements([], [1, 2, 3]) ==     []\nassert     remove_elements([2, 3, 4, 5], [1, 2, 3, 4]) ==     [5]\nassert     remove_elements([1, 2, 3, 4, 5], [5, 6, 7, 8]) ==     [1, 2, 3, 4]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,3,4], [1,2,3]) ==     [],\nassert     remove_elements([1,2,3,4], [2,3,4]) ==     [1,4],\nassert     remove_elements([1,2,3,4], [1,3,4]) ==     [],\nassert     remove_elements([1,2,3,4], []) ==     [],\n\n\ndef remove_elements_using_list(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,2,3], [1,2,3]) == None\nassert     remove_elements([1,2,3,1,2,3], [1,2,3]) ==     [2,3]\nassert     remove_elements([], [1,2,3]) == None\nassert     remove_elements([1,2,3], []) == None\nassert     remove_elements([1,2,3], None) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([1,2,3,4,5], [1,3,5]) == [2,4]\nassert     remove_elements([], [1,2,3,4]) == []\nassert     remove_elements([], []) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_elements([1,2,3,4,5], [4,5,6]) == [], 'First list is empty'\nassert     remove_elements([1,2,3,4,5], [4,5,6,7,8,9]) == [], 'Second list is empty'\nassert     remove_elements([1,2,3,4,5], [3,4,5,6,7]) == [1,2,5,7], 'First list has element of second list'\nassert     remove_elements([1,2,3,4,5], [4,5,6,7]) == [], 'Second list has element of first list'\nassert     remove_elements([1,2,3,4,5], [4]) == [1,2,3,4,5], 'First list has elements of second list'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([1,2,3,4,5,6], [1,2,3,6]) == []\nassert     remove_elements([1,2,3,4,5,6], [5]) == [1,2,3,4,5]\nassert     remove_elements([1,2,3,4,5,6], [6]) == [1,2,3,4,5]\nassert     remove_elements([1,2,3,4,5,6], [3,4,5]) == []\nassert     remove_elements([1,2,3,4,5,6], [1,4,6]) == [2,3,5]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_series(1) == 0\nassert     sum_series(4) == 4\nassert     sum_series(15) == 45\nassert     sum_series(20) == 94\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_series(5) == 10\nassert     sum_series(20) == 133\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (sum_series(4) == (4 + (4-2) + (4-4)))\nassert     (sum_series(1) == (1 + (1-2) + (1-4)))\nassert     (sum_series(0) == (0))\nassert     (sum_series(-4) == (-4))\nassert     (sum_series(-1) == (-1))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_series2(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # assert\n    pass"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum_series(7) == 36\nsum_series(5) == 32\nsum_series(2) == 2\nsum_series(0) == 0\nsum_series(8) == 36\nsum_series(3) == 6\nsum_series(10) == 44\nsum_series(20) == 82\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_polygon(3, 3) == 1/4*pi\nassert     area_polygon(5, 8) == 1/12*pi\nassert     area_polygon(4, 4) == pi/8\nassert     area_polygon(2, 5) == 0\n\nprint(\"Pass\" if (1==1) else \"Fail\")\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(3, 4) == 5.5\nassert     round(area_polygon(7.1, 7.1), 1) == 28.3\nassert     round(area_polygon(5.1, 10.5), 1) == 16.4\nassert     round(area_polygon(6.5, 13.5), 1) == 35.0\nassert     round(area_polygon(7, 20), 1) == 19.0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(area_polygon(5, 3))  # => 1.25\nprint(area_polygon(10, 20)) # => 20.0"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(2, 3) == 5*pi/4\nassert     area_polygon(2, 4) == 5*pi/3\nassert     area_polygon(5, 5) == 5*pi\n\ndef area_hexagon(s):\n    '''\n    Write a function to calculate the area of a regular hexagon given the length of its side.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef calculate_perimeter(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef length_of_side_of_polygon(s, l, a):\n    '''\n    Write a function to calculate the length of the sides of a regular polygon.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_power(n):\n    '''\n    Write a function that takes a positive integer and returns whether or not it's a perfect number. \n    Remember, a perfect number is one that is equal to the sum of all of its positive divisors. \n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndiv_sum(4) == True\ndiv_sum(6) == False\ndiv_sum(10) == True\ndiv_sum(100) == False\ndiv_sum(60) == False\ndiv_sum(100) == False\ndiv_sum(120) == True\ndiv_sum(1) == False\ndiv_sum(120) == False\ndiv_sum(10) == True\ndiv_sum(20) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert div_sum(4) == False\nassert div_sum(6) == False\nassert div_sum(8) == True\nassert div_sum(9) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(div_sum(3))\nprint(div_sum(4))\nprint(div_sum(13))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert div_sum(0) == False\nassert div_sum(1) == False\nassert div_sum(12) == False\nassert div_sum(23) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \ndef prime_number(n):\n    '''\n    Write a function to determine whether a given number is prime.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_char_position(\"AaBbCcDdEeFfGg\") == 9\nassert     count_char_position(\"aAbBcCdDeEfFgGhHiIi\") == 12\nassert     count_char_position(\"aAaAaAaAa\") == 3\nassert     count_char_position(\"\") == 0\nassert     count_char_position(\"  \") == 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_char_position('indians') == 7, 'incorrect'\nassert     count_char_position('Indians') == 7, 'incorrect'\nassert     count_char_position('INDIANS') == 7, 'incorrect'\nassert     count_char_position('I  d   indians') == 9, 'incorrect'\nassert     count_char_position('I   d   indians') == 9, 'incorrect'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_char_position('abc') == 3\nassert count_char_position('abcA') == 3\nassert count_char_position('abd') == 0\nassert count_char_position('abd') == 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_char_position(\"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\") == 27\nassert     count_char_position(\"abbba\") == 1\nassert     count_char_position(\"zzz\") == 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_char_position('') == 0\nassert     count_char_position('abc') == 0\nassert     count_char_position('abcABC') == 2\nassert     count_char_position('abcABCabc') == 3\nassert     count_char_position('ab') == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_char_position2(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_char_position(\"This is string example\") == \n{\"a\":1, \"n\":1, \"t\":1, \"h\":1, \"r\":1, \"s\":1, \"i\":1, \"s\":1, \"t\":1, \"e\":1, \"g\":1, \"m\":1, \"p\":1, \"l\":1, \"o\":1, \"x\":1, \"w\":1, \"f\":1, \"f\":1, \"b\":1, \"u\":1, \"d\":1, \"c\":1, \"g\":1, \"o\":1, \"w\":1, \"y\":1, \"q\":1, \"w\":1, \"x\":1, \"c\":1, \"e\":1, \"m\":1, \"r\":1, \"a\":1, \"m\":1, \"i\":1, \"f\":1, \"x\":1, \"c\":1, \"g\":1, \"e\":1, \"k\":1, \"d\":1, \"p\":1, \"l\":1, \"u\":1, \"h\":1, \"n\":1, \"o\":1, \"s\":1, \"q\":1, \"o\":1, \"n\":1, \"f\":1, \"g\":1, \"a\":1, \"r\":1, \"i\":1, \"h\":1, \"s\":1, \"u\":1, \"t\":1, \"r\":1, \"x\":1, \"g\":1, \"a\":1, \"c\":1, \"o\":1, \"l\":1, \"m\":1, \"w\":1, \"y\":1, \"f\":1, \"i\":1, \"n\":1, \"g\":1, \"k\":1, \"u\":1, \"d\":1, \"o\":1, \"m\":1, \"l\":1, \"h\":1, \"p\":1, \"k\":1, \"o\":1, \"y\":1, \"x\":1, \"c\":1, \"n\":1, \"i\":1, \"m\":1, \"w\":1, \"z\":1, \"o\":1, \"s\":1, \"t\":1, \"h\":1, \"f\":1, \"l\":1, \"t\":1, \"e\":1, \"a\":1, \"g\":1, \"o\":1, \"c\":1, \"u\":1, \"a\":1, \"f\":1, \"i\":1, \"p\":1, \"r\":1, \"c\":1, \"o\":1, \"u\":1, \"n\":1, \"e\":1, \"d\":1, \"p\":1, \"o\":1, \"u\":1, \"l\":1, \"g\":1, \"e\":1, \"w\":1, \"d\":1, \"s\":1, \"o\":1, \"k\":1, \"q\":1, \"s\":1, \"u\":1, \"f\":1, \"u\":1, \"m\":1, \"l\":1, \"e\":1, \"a\":1, \"e\":1, \"o\":1, \"a\":1, \"r\":1, \"s\":1, \"a\":1, \"p\":1, \"a\":1, \"m\":1, \"i\":1, \"s\":1, \"a\":1, \"r\":1, \"a\":1, \"i\":1, \"y\":1, \"i\":1, \"n\":1, \"e\":1, \"r\":1, \"a\":1, \"d\":1, \"e\":1, \"g\":1, \"p\":1, \"h\":1, \"i\":1, \"o\":1, \"a\":1, \"l\":1, \"c\":1, \"e\":1, \"g\":1, \"t\":1, \"e\":1, \"i\":1, \"a\":1, \"c\":1, \"t\":1, \"d\":1, \"e\":1, \"i\":1, \"u\":1, \"h\":1, \"t\":1, \"i\":1, \"n\":1, \"f\":1, \"o\":1, \"q\":1, \"h\":1, \"e\":1, \"s\":1, \"s\":1, \"a\":1, \"h\":1, \"g\":1, \"p\":1, \"i\":1, \"n\":1, \"m\":1, \"u\":1, \"s\":1, \"a\":1, \"l\":1, \"u\":1, \"o\":1, \"i\":1, \"h\":1, \"t\":1, \"d\":1, \"u\":1, \"e\":1, \"p\":1, \"e\":1, \"n\":1, \"k\":1, \"r\":1, \"u\":1, \"e\":1, \"n\":1, \"d\":1, \"i\":1, \"o\":1, \"p\":1, \"f\":1, \"a\":1, \"p\":1, \"h\":1, \"a\":1, \"k\":1, \"e\":1, \"y\":1, \"e\":1, \"d\":1, \"e\":1, \"a\":1, \"o\":1, \"m\":1, \"r\":1, \"p\":1, \"l\":1, \"m\":1, \"i\":1, \"r\":1, \"p\":1, \"t\":1, \"a\":1, \"o\":1, \"c\":1, \"r\":1, \"a\":1, \"u\":1, \"p\":1, \"l\":1, \"a\":1, \"h\":1, \"k\":1, \"u\":1, \"s\":1, \"u\":1, \"i\":1, \"l\":1, \"e\":1, \"r\":1, \"p\":1, \"r\":1, \"a\":1, \"n\":1, \"i\":1, \"m\":1, \"g\":1, \"t\":1, \"o\":1, \"l\":1, \"i\":1, \"e\":1, \"e\":1, \"l\":1, \"a\":1, \"c\":1, \"i\":1, \"e\":1, \"n\":1, \"i\":1, \"a\":1, \"a\":1, \"e\":1, \"f\":1, \"u\":1, \"o\":1, \"o\":1, \"s\":1, \"u\":1, \"c\":1, \"a\":1, \"k\":1, \"u\":1, \"o\":1, \"m\":1, \"h\":1, \"a\":1, \"g\":1, \"a\":1, \"e\":1, \"g\":1, \"u\":1, \"h\":1, \"a\":1, \"u\":1, \"i\":1, \"o\":1, \"u\":1, \"e\":1, \"r\":1, \"i\":1, \"t\":1, \"g\":1, \"p\":1, \"h\":1, \"t\":1, \"e\":1, \"i\":1, \"d\":1, \"h\":1, \"c\":1, \"a\":1, \"u\":1, \"k\":1, \"s\":1, \"a\":1, \"d\":1, \"i\":1, \"o\":1, \"a\":1, \"l\":1, \"i\":1, \"a\":1, \"k\":1, \"a\":1, \"o\":1, \"c\":1, \"u\":1, \"e\":1, \"a\":1, \"r\":1, \"p\":1, \"e\":1, \"i\":1, \"u\":1, \"a\":1, \"o\":1, \"s\":1, \"c\":1, \"e\":1, \"a\":1, \"i\":1, \"e\":1, \"e\":1, \"s\":1, \"e\":1, \"i\":1, \"c\":1, \"u\":1, \"h\":1, \"t\":1, \"a\":1, \"l\":1, \"a\":1, \"u\":1, \"h\":1, \"c\":1, \"a\":1, \"d\":1, \"u\":1, \"k\":1, \"e\":1, \"s\":1, \"e\":1, \"h\":1, \"s\":1, \"i\":1, \"a\":1, \"m\":1, \"p\":1, \"l\":1, \"t\":1, \"e\":1, \"s\":1, \"o\":1, \"a\":1, \"s\":1, \"a\":1, \"i\":"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_char_position('AB') == 1, 'The result is not correct'\nassert     count_char_position('abc') == 0, 'The result is not correct'\nassert     count_char_position('pP') == 2, 'The result is not correct'\nassert     count_char_position('pqr') == 2, 'The result is not correct'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_char_position('HelloWorld') == 6\nassert     count_char_position('Helo0World') == 5\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nstr1 = 'abcdefghijklmnopqrstuvwxyz'\nassert count_char_position(str1) == 5\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_even_pair([1,2,4,8,16]) ==         2\nassert     find_even_pair([1,2,4,8,10]) ==         1\nassert     find_even_pair([0,2,4,8,10]) ==         0\nassert     find_even_pair([]) ==                 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_even_pair([1,2,3,4,5,6,7,8,9,10,11,12]) == 7"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_even_pair([1,2,3]) == 2 \nassert     find_even_pair([1,3,2]) == 1\nassert     find_even_pair([1,2,3,4]) == 2\nassert     find_even_pair([1,1]) == 2\nassert     find_even_pair([1,1,1]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_even_pair([1, 2, 3, 4, 5]) == 1\nassert     find_even_pair([4, 5, 6]) == 0\nassert     find_even_pair([0]) == 0\n\ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_even_pair([]) == 0, \"Empty List\"\nassert     find_even_pair([3]) == 0, \"Single Number\"\nassert     find_even_pair([1,3]) == 0, \"Two Numbers\"\nassert     find_even_pair([5,3,7]) == 0, \"Two Numbers\"\nassert     find_even_pair([4,3,2,5,6]) == 2, \"Two Numbers\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(5) == 2\nassert     next_power_of_2(6) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 2\nassert     next_power_of_2(9) == 16\nassert     next_power_of_2(12) == 16\n\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(8) == 4\nassert     next_power_of_2(12) == 8\nassert     next_power_of_2(16) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"next_power_of_2 passed\")\n\ndef number_of_spaces_to_make(n):\n    '''\n    Write a python function to calculate the number of spaces in a string of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(8) == 4\nassert     next_power_of_2(10) == 4\nassert     next_power_of_2(11) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(next_power_of_2(4))\nprint(next_power_of_2(16))\nprint(next_power_of_2(1023)"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency([2,3,2,4,5,6,2,7,2,3,2,4,5,6,7,2,4,5,6,7,2,4,5,6,7], 2) == 5\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(frequency([1,2,3,4,5,2,3,5,5],5))\nassert frequency([2,3,4,5,6,7,8,9,10],10) == 4\nassert frequency([1,2,3,4,5,6,7,8,9,10],6) == 3\nassert frequency([1,2,3,4,5,6,7,8,9,10],3) == 2\nassert frequency([1,2,3,4,5,6,7,8,9,10],10) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\n    Write a Python function to check whether a given number is an ugly number.\n    Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\n\n    Example 1:\n    Input: 6\n    Output: true\n    Explanation: 6 = 2 \u00d7 3\n'''\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,2,2,3,4,1,2,2,1,4,5,4,1,4,4], 2) == 4\nassert     frequency([1,2,2,3,4,1,2,2,1,4,5,4,1,4,4], 1) == 10\nassert     frequency([1,2,2,3,4,1,2,2,1,4,5,4,1,4,4], 0) == 0\nassert     frequency([], 1) == 0\nassert     frequency([1,2,2,3,4,1,2,2,1,4,5,4,1,4,4], 100) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \na = [5,2,3,5,2,3,3,3,5,4,3,3,4,5,2,2,1,2,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,1,5,3,3,3,5,5,2,3,3,5,2,2,1,1,1,5,4,4,3,2,3,"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([2, 1, 1, 1, 2, 2, 3, 4, 5, 3, 1, 2, 2], 2) == 3\nassert     frequency([2, 1, 1, 1, 2, 2, 3, 4, 5, 3, 1, 2, 2], 2) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency([1,2,3,1],1) == 2\nassert     frequency([1,2,3,1],3) == 1\nassert     frequency([1,2,3,1],2) == 1\nassert     frequency([1,2,3,1],0) == 0\nassert     frequency([1,2,3,1],4) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency([1,4,6,3],4) == 1\nassert     frequency([1,4,6,3],3) == 2\nassert     frequency([1,4,6,3],1) == 1\nassert     frequency([],0) == 0\nassert     frequency([],3) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 2) == 7\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 5) == 12\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 3) == 4\nassert     sum_range_list([1, 2, 3, 4, 5], -1, 3) == 5\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_range_list([1, 2, 3, 4], 1, 3) == 6, 'failed'\nassert sum_range_list([1, 2, 3, 4], 1, 1) == 1, 'failed'\n\nprint('test passed'"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_range_list([1,2,3,4,5], 0, 1) == 2\nassert     sum_range_list([1,2,3,4,5], 0, 2) == 8\nassert     sum_range_list([1,2,3,4,5], 1, 3) == 5\nassert     sum_range_list([1,2,3,4,5], 2, 4) == 13\nassert     sum_range_list([1,2,3,4,5], 5, 2) == 6\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([0, 1, 2, 3, 4], 0, 2) == 9\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 2) == 9\nassert     sum_range_list([0, 1, 2, 3, 4, 5], 1, 5) == 11\nassert     sum_range_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 10) == 15\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 10) == 15\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_range_list([1, 3, 5, 7, 9], 1, 3) == 5, 'Fail'\nassert     sum_range_list([1, 3, 5, 7, 9], 2, 4) == 9, 'Fail'\nassert     sum_range_list([1, 3, 5, 7, 9], 0, 3) == 15, 'Fail'\nassert     sum_range_list([1, 3, 5, 7, 9], 2, 3) == 7, 'Fail'\nprint('\\033[92m'+\" ** Test Passed **\"+'\\033[0m')\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"The sum of the elements in a given range is \", sum_range_list([0,1,2,3,4,5],2,5))\nprint(\"The sum of the elements in a given range is \", sum_range_list([0,1,2,3,4,5],0,4))\nprint(\"The sum of the elements in a given range is \", sum_range_list([0,1,2,3,4,5],-4,-1))\nprint(\"The sum of the elements in a given range is \", sum_range_list([0,1,2,3,4,5],0,5))\nprint(\"The sum of the elements in a given range is \", sum_range_list([0,1,2,3,4,5],0,0))\nprint(\"The sum of the elements in a given range is \", sum_range_list([0,1,2,3,4,5],6,6))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(2) == 5.0, \"Should be 5.0\"\nassert     perimeter_pentagon(5) == 20.0, \"Should be 20.0\"\nassert     perimeter_pentagon(15) == 75.0, \"Should be 75.0\"\n\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(1)    == 1, 'incorrect'\nassert     perimeter_pentagon(2)    == 3, 'incorrect'\nassert     perimeter_pentagon(3)    == 5, 'incorrect'\nassert     perimeter_pentagon(4)    == 8, 'incorrect'\nassert     perimeter_pentagon(5)    == 10, 'incorrect'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(5) == 10, \"Your function perimeter_pentagon is incorrectly named.\"\nassert    perimeter_pentagon(0) == 0, \"Your function perimeter_pentagon should return 0 if the argument is 0.\"\nassert    perimeter_pentagon(1) == 5, \"Your function perimeter_pentagon should return 5 if the argument is 1.\"\nassert    perimeter_pentagon(4) == 10, \"Your function perimeter_pentagon should return 10 if the argument is 4.\"\nassert    perimeter_pentagon(9) == 20, \"Your function perimeter_pentagon should return 20 if the argument is 9.\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(5) == 10\nassert     perimeter_pentagon(6) == 15\n\ndef find_pentagonal(n):\n    '''\n    Write a function that returns the number of pentagonal numbers less than or equal to\n    the given number.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(perimeter_pentagon(5) == 10)\nprint(perimeter_pentagon(6) == 12)\nprint(perimeter_pentagon(7) == 14)\nprint(perimeter_pentagon(8) == 16)\nprint(perimeter_pentagon(9) == 18)\nprint(perimeter_pentagon(10) == 20)\nprint(perimeter_pentagon(11) == 22)\nprint(perimeter_pentagon(12) == 24)\nprint(perimeter_pentagon(13) == 26)\nprint(perimeter_pentagon(14) == 28)\nprint(perimeter_pentagon(15) == 30)\nprint(perimeter_pentagon(16) == 32)\nprint(perimeter_pentagon(17) == 34)\nprint(perimeter_pentagon(18) == 36)\nprint(perimeter_pentagon(19) == 38)\nprint(perimeter_pentagon(20) == 40)\nprint(perimeter_pentagon(21) == 42)\nprint(perimeter_pentagon(22) == 44)\nprint(perimeter_pentagon(23) == 46)\nprint(perimeter_pentagon(24) == 48)\nprint(perimeter_pentagon(25) == 50)\nprint(perimeter_pentagon(26) == 52)\nprint(perimeter_pentagon(27) == 54)\nprint(perimeter_pentagon(28) == 56)\nprint(perimeter_pentagon(29) == 58)\nprint(perimeter_pentagon(30) == 60)\nprint(perimeter_pentagon(31) == 62)\nprint(perimeter_pentagon(32) == 64)\nprint(perimeter_pentagon(33) == 66)\nprint(perimeter_pentagon(34) == 68)\nprint(perimeter_pentagon(35) == 70)\nprint(perimeter_pentagon(36) == 72)\nprint(perimeter_pentagon(37) == 74)\nprint(perimeter_pentagon(38) == 76)\nprint(perimeter_pentagon(39) == 78)\nprint(perimeter_pentagon(40) == 80)\nprint(perimeter_pentagon(41) == 82)\nprint(perimeter_pentagon(42) == 84)\nprint(perimeter_pentagon(43) == 86)\nprint(perimeter_pentagon(44) == 88)\nprint(perimeter_pentagon(45) == 90)\nprint(perimeter_pentagon(46) == 92)\nprint(perimeter_pentagon(47) == 94)\nprint(perimeter_pentagon(48) == 96)\nprint(perimeter_pentagon(49) == 98)\nprint(perimeter_pentagon(50) == 100)\nprint(perimeter_pentagon(51) == 102)\nprint(perimeter_pentagon(52) == 104)\nprint(perimeter_pentagon(53) == 106)\nprint(perimeter_pentagon(54) == 108)\nprint(perimeter_pentagon(55) == 110)\nprint(perimeter_pentagon(56) == 112)\nprint(perimeter_pentagon(57) == 114)\nprint(perimeter_pentagon(58) == 116)\nprint(perimeter_pentagon(59) == 118)\nprint(perimeter_pentagon(60) == 120)\nprint(perimeter_pentagon(61) == 122)\nprint(perimeter_pentagon(62) == 124)\nprint(perimeter_pentagon(63) == 126)\nprint(perimeter_pentagon(64) == 128)\nprint(perimeter_pentagon(65) == 130)\nprint(perimeter_pentagon(66) == 132)\nprint(perimeter_pentagon(67) == 134)\nprint(perimeter_pentagon(68) == 136)\nprint(perimeter_pentagon(69) == 138)\nprint(perimeter_pentagon(70) == 140)\nprint(perimeter_pentagon(71) == 142)\nprint(perimeter_pentagon(72) == 144)\nprint(perimeter_pentagon(73) == 146)\nprint(perimeter_pentagon(74) == 148)\nprint(perimeter_pentagon(75) == 150)\nprint(perimeter_pentagon(76) == 152)\nprint(perimeter_pentagon(77) == 154)\nprint(perimeter_pentagon(78) == 156)\nprint(perimeter_pentagon(79) == 158)\nprint(perimeter_pentagon(80) == 160)\nprint(perimeter_pentagon(81) == 162)\nprint(perimeter_pentagon(82) == 164)\nprint(perimeter_pentagon(83) == 166)\nprint(perimeter_pentagon(84) == 168)\nprint(perimeter_pentagon(85) == 170)\nprint(perimeter_pentagon(86) == 172)\nprint(perimeter_pentagon(87) == 174)\nprint(perimeter_pentagon(88) == 176)\nprint(perimeter_pentagon(89) == 178)\nprint(perimeter_pentagon(90) == 180)\nprint(perimeter_pentagon(91) == 182)\nprint(perimeter_pentagon(92) == 184)\nprint(perimeter_pentagon(93) == 186)\nprint(perimeter_pentagon(94) == 188)\nprint(perimeter_pentagon(95) == 190)\nprint(perimeter_pentagon(96) == 192)\nprint(perimeter_pentagon(97) == 194)\nprint(perimeter_pentagon(98) == 196)\nprint(perimeter_pentagon(99) == 198)\nprint(perimeter_pentagon(100) == 200)\nprint(perimeter_pentagon(101) == 202)\nprint(perimeter_pentagon(102) == 204)\nprint(perimeter_pentagon(103) == 206)\nprint(perimeter_pentagon(104) == 208)\nprint(perimeter_pentagon(105) == 210)\nprint(perimeter_pentagon(106) == 212)\nprint(perimeter_pentagon(107) == 214)\nprint(perimeter_pentagon(108) == 216)\nprint(perimeter_pentagon(109) == 218)\nprint(perimeter_pentagon(110) == 220)\nprint(perimeter_pentagon(111) == 222)\nprint(perimeter_pentagon(112) == 224)\nprint(perimeter_pentagon(113) == 226)\nprint(perimeter_pentagon(114) == 228)\nprint(perimeter_pentagon(115) == 230)\nprint(perimeter_pentagon(116) == 232)\nprint(perimeter_pentagon(117) == 234)\nprint(perimeter_pentagon(118) == 236)\nprint(perimeter_pentagon(119) == 238)\nprint(perimeter_pentagon(120) == 240)\nprint(perimeter_pentagon(121) == 242)\nprint(perimeter_pentagon(122) == 244)\nprint(perimeter_pentagon(123) == 246)\nprint(perimeter_pentagon(124) == 248)\nprint(perimeter_pentagon(125) == 250)\nprint(perimeter_pentagon(126) == 252)\nprint(perimeter_pentagon(127) == 254)\nprint(perimeter_pentagon(128) == 256)\nprint(perimeter_pentagon(129) == 258)\nprint(perimeter_pentagon(130) == 260)\nprint(perimeter_pentagon(131) == 262)\nprint(perimeter_pentagon(132) == 264)\nprint(perimeter_pentagon(133) == 266)\nprint(perimeter_pentagon(134) == 268)\nprint(perimeter_pentagon(135) == 270)\nprint(perimeter_pentagon(136) == 272)\nprint(perimeter_pentagon(137) == 274)\nprint(perimeter_pentagon(138) == 276)\nprint(perimeter_pentagon(139) == 278)\nprint(perimeter_pentagon(140) == 280)\nprint(perimeter_pentagon(141) == 282)\nprint(perimeter_pentagon(142) == 284)\nprint(perimeter_pentagon(143) == 286)\nprint(perimeter_pentagon(144) == 288)\nprint(perimeter_pentagon(145) == 290)\nprint(perimeter_pentagon(146) == 292)\nprin"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(5) == 22.5, 'The result is incorrect'\nassert     perimeter_pentagon(4) == 12.5, 'The result is incorrect'\nassert     perimeter_pentagon(6) == 25.0, 'The result is incorrect'\nassert     perimeter_pentagon(2) == 5.0, 'The result is incorrect'\n\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perimeter_pentagon(5) == 20.0\n\nassert     perimeter_pentagon(10) == 50.0\n\nassert     perimeter_pentagon(12) == 72.0\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(1) == 5, 'Wrong answer in pentagon'\nassert     perimeter_pentagon(2) == 10, 'Wrong answer in pentagon'\nassert     perimeter_pentagon(3) == 15, 'Wrong answer in pentagon'\nassert     perimeter_pentagon(4) == 20, 'Wrong answer in pentagon'\nassert     perimeter_pentagon(5) == 25, 'Wrong answer in pentagon'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(5) == 20\nassert     perimeter_pentagon(8) == 40\nassert     perimeter_pentagon(12) == 60\nassert     perimeter_pentagon(17) == 82\nassert     perimeter_pentagon(21) == 114\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance(\"abcdefgh\") == 6\nassert     count_occurance(\"e\") == 1\nassert     count_occurance(\"abcdefghi\") == 10\nassert     count_occurance(\"\") == 0\nassert     count_occurance(\"abcdefghijklmnopqrstuvwxyz\") == 26\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_occurance('aabccccdddeee') == 3, count_occurance('aabccccdddeee')\nassert     count_occurance('abcddddeee') == 1, count_occurance('abcddddeee')\nassert     count_occurance('b') == 0, count_occurance('b')\nassert count_occurance('A') == 0, count_occurance('A')\nassert count_occurance(' ') == 0, count_occurance(' ')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance('stdstdstdstdstd')==2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance('hello world') == 2\nassert     count_occurance('hello world!') == 1\nassert     count_occurance('hello world.') == 0\nassert     count_occurance('hello stdddddd') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance('I went to school.') == 2, \"Your function has a wrong output!\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_occurance('We are learning python') == 3\nassert count_occurance('We are learning python') == 2\nassert count_occurance('We are learning python') == 2\nassert count_occurance('We are learning python and we are learning python') == 2\nassert count_occurance('We are learning python and we are learning python and we are learning python') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance(\"stdstd\") == 2\nassert     count_occurance(\"std\") == 1\nassert     count_occurance(\"\") == 0\nassert     count_occurance(\"The\") == 0\nassert     count_occurance(\"xxxy\") == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_occurance('how is std') == 4\nassert count_occurance('help std') == 0\nassert count_occurance('help') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance('the quick brown fox jumps over the lazy dog') == 2\nassert     count_occurance('the slow yellow fox jumps over the fast brown dog') == 1\nassert     count_occurance('the fox jumps over the dog') == 1\nassert     count_occurance('the dog') == 1\nassert     count_occurance('the fox jumps') == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \"Output should be True\"\nassert     check_type([1, 2, 3, \"string\", 5, 6, 7, 8, 9]) == False, \"Output should be False\"\nassert     check_type([1, 2.0, 3, 4, 5, 6.0, 7, 8, 9]) == False, \"Output should be False\"\nassert     check_type([True, False, True, True, True, False, True, False, True]) == False, \"Output should be False\"\nassert     check_type([1, 2, \"string\", \"string\", 5, \"string\", 7, True]) == False, \"Output should be False\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type((\"Python\", \"Java\", \"C++\", \"C#\", \"C\")) == True, \"Wrong Answer\"\nassert     check_type((1, 2.5, True, \"string\", None)) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type([1,2,3,4,5]) == True, \"input is of wrong data type\"\nassert     check_type([1,2,\"\",4,\"\",5]) == False, \"input with empty strings\"\nassert     check_type([1,2,3,4,5,\"\"]) == False, \"input with empty strings\"\nassert     check_type([1,\"hello\",3,4,5]) == False, \"input with non-strings\"\nassert     check_type([True,2,3,4,5]) == False, \"input with bool value\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type([1,2,'3']) == 'all_data_same_type', 'First element should be of same data type'\nassert     check_type([1.1,2,'3']) == 'all_data_same_type', 'Second element should be of same data type'\nassert     check_type([1,2,'3',True,4.5]) == 'all_data_same_type', 'Third element should be of same data type'\nassert     check_type([1,2,'3',False,4.5]) == 'all_data_same_type', 'Fourth element should be of same data type'\nassert     check_type([1,2,'3',True,4.5,'a']) == 'all_data_same_type', 'Fifth element should be of same data type'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((1, 2, 3)) == True, \"Wrong data type\"\nassert     check_type((1.0, 2.0, 3.0)) == True, \"Wrong data type\"\nassert     check_type((1.0, 2.0, \"string\")) == False, \"Wrong data type\"\nassert     check_type((1, \"string\", 2)) == False, \"Wrong data type\"\nassert     check_type((\"string\", 1, 2)) == False, \"Wrong data type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type((1,2,3,\"a\",\"b\",5,\"c\",4)) == False, \"first tuple element is not same type.\"\nassert     check_type((1,\"b\",5,\"c\",4)) == True, \"second tuple element is not same type.\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type(('Python', 'Java')) == True, \"Return False if any of the element in test_tuple are non-string\"\nassert check_type(('Hello', 1)) == True, \"Return False if any of the element in test_tuple are non-string\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type((1,2,3,'a','b')) == True\nassert     check_type((1,2,3,'a','b','c')) == True\nassert     check_type((1.2,2.3,'a','b','c')) == False\nassert     check_type((True,False,'a','b','c')) == False\nassert     check_type((1,2,'a','b','c')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type((1, 2.5, \"Hi\", \"Hi\", True)) == True, \"Should return True\"\nassert     check_type((1, 2, 3, 4.5, False, \"Hello\", False)) == False, \"Should return False\"\nassert     check_type((1, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5, \"Hi\", \"Hi\", True, 2.5"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3))) == True), \n    \"Test 1 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 'a'))))\n    \"Test 2 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 'a'))))\n    \"Test 3 Failed\"\n    \n    (check_type((1, 'a', 'a', True, {}, (1, 2, 3, 4))))\n    \"Test 4 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4.0))))\n    \"Test 5 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5}))))\n    \"Test 6 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6}))))\n    \"Test 7 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7}))))\n    \"Test 8 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8}))))\n    \"Test 9 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9}))))\n    \"Test 10 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10}))))\n    \"Test 11 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11}))))\n    \"Test 12 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12}))))\n    \"Test 13 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13}))))\n    \"Test 14 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14}))))\n    \"Test 15 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15}))))\n    \"Test 16 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16}))))\n    \"Test 17 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16, 'a':17}))))\n    \"Test 18 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16, 'a':17, 'a':18}))))\n    \"Test 19 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16, 'a':17, 'a':18, 'a':19}))))\n    \"Test 20 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16, 'a':17, 'a':18, 'a':19, 'a':20}))))\n    \"Test 21 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16, 'a':17, 'a':18, 'a':19, 'a':20, 'a':21}))))\n    \"Test 22 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16, 'a':17, 'a':18, 'a':19, 'a':20, 'a':21, 'a':22}))))\n    \"Test 23 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':16, 'a':17, 'a':18, 'a':19, 'a':20, 'a':21, 'a':22, 'a':23}))))\n    \"Test 24 Failed\"\n    \n    (check_type((1, 1.0, 'a', True, {}, (1, 2, 3, 4, {'a':5, 'a':6, 'a':7, 'a':8, 'a':9, 'a':10, 'a':11, 'a':12, 'a':13, 'a':14, 'a':15, 'a':1"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_majority([1,2,3,4,5,4,3,2,1], 7, 3) == True\nassert is_majority([1,2,3,4,5,4,3,2,1], 6, 3) == False\nassert is_majority([1,2,3,4,5,4,3,2,1], 6, 4) == True\nassert is_majority([1,2,3,4,5,4,3,2,1], 6, 5) == False\nassert is_majority([1,2,3,4,5,4,3,2,1], 6, 6) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nis_majority([0, 1, 2, 2, 2], 5, 2) == True\nis_majority([0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4], 7, 3) == True\nis_majority([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10, 1) == True\nis_majority([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1, 1) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_majority([1, 1, 1, 2, 2, 3], 6, 2) == True\nassert     is_majority([1, 1, 1, 1, 2, 3], 6, 2) == False\n\ndef max_score(arr):\n    '''\n    Write a function that takes in an array and returns the maximum score.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_majority([1, 2, 3, 3, 3, 4, 5, 6], 7, 3) == True\nassert     is_majority([1, 2, 3, 3, 3, 4, 5, 6], 7, 3) == False\nassert     is_majority([1, 2, 3, 3, 3, 4, 5, 6], 4, 3) == False\nassert     is_majority([1, 2, 3, 3, 3, 4, 5, 6], 8, 3) == True\nassert     is_majority([1, 2, 3, 3, 3, 4, 5, 6], 7, 2) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_majority([], 5, 5) == False\nassert     is_majority([1], 1, 1) == True\nassert     is_majority([1, 2], 1, 2) == False\nassert     is_majority([1, 2, 3], 1, 2) == True\nassert     is_majority([1, 2, 2], 1, 2) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_majority([1, 2, 3, 1, 1, 3, 4, 5, 6], 7, 3) == True\nassert is_majority([1, 2, 3, 1, 1, 3, 4, 5, 6], 7, 1) == False\nassert is_majority([1, 2, 3, 1, 1, 3, 4, 5, 6], 7, 4) == True\nassert is_majority([1, 2, 3, 1, 1, 3, 4, 5, 6], 7, 5) == False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(1) == 1 \nassert count_Set_Bits(5) == 0\nassert count_Set_Bits(7) == 2\n\ndef is_prime(n): \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(2) == 0\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(17) == 4\nassert     count_Set_Bits(34) == 7\nassert     count_Set_Bits(145) == 10\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(9) == 1\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(11) == 1\nassert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_Set_Bits(0) == 0, \"Test case 1: expected 0\"\nassert count_Set_Bits(1) == 1, \"Test case 2: expected 1\"\nassert count_Set_Bits(2) == 2, \"Test case 3: expected 2\"\nassert count_Set_Bits(3) == 2, \"Test case 4: expected 2\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_Set_Bits(0) == 0\ncount_Set_Bits(1) == 1\ncount_Set_Bits(2) == 2\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncount_Set_Bits(10110001010101) == 5\ncount_Set_Bits(1101) == 2\ncount_Set_Bits(0) == 0\ncount_Set_Bits(5) == 4\ncount_Set_Bits(10) == 3\ncount_Set_Bits(11) == 2\ncount_Set_Bits(12) == 1\ncount_Set_Bits(1000000) == 50\ncount_Set_Bits(110101) == 3\ncoun"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(count_Set_Bits(0))\n    print(count_Set_Bits(2))\n    print(count_Set_Bits(8))\n    print(count_Set_Bits(10))\n    print(count_Set_Bits(11))\n    print(count_Set_Bits(32))\n    print(count_Set_Bits(33))\n    print(count_Set_Bits(34)"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(23) == 2, \"Should be 2\"\nassert     count_Set_Bits(0) == 0, \"Should be 0\"\n\n'''\nTask: Create a function called count_1s that takes a positive integer n as input. \nThe function should return the number of 1s in the binary representation of n. \nYou can assume that n will not be 0.\n'''\n\ndef count_1s(n):\n    '''\n    Write a python function to count the number of 1s (binary digits with value 1) in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(11) == 2\nassert     count_Set_Bits(100) == 1\nassert     count_Set_Bits(101) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Set_Bits(10) == 2, \"Fail\"\nassert     count_Set_Bits(11) == 3, \"Fail\"\nassert     count_Set_Bits(9) == 2, \"Fail\"\nassert     count_Set_Bits(10) == 2, \"Fail\"\nassert     count_Set_Bits(1010) == 4, \"Fail\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string(\"world\") == \"dwr\"\nassert     odd_values_string(\"hello\") == \"ll\"\nassert     odd_values_string(\"programming\") == \"rgm\"\nassert     odd_values_string(\"This is a test.\") == \"s. This is a test.\"\nassert     odd_values_string(\"\") == \"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_values_string('abcde') == 'bcde'\nassert odd_values_string('aabcc') == 'bcc'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('love') =='ve', \"Wrong Answer\"\nassert odd_values_string('a') == '', \"Wrong Answer\"\nassert odd_values_string('asdf') =='sd', \"Wrong Answer\"\n\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('abcdabcd') == 'abcabc'\nassert odd_values_string('abc') == 'abc'\nassert odd_values_string('xyz') == 'xyz'\nassert odd_values_string('') == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_values_string('eio') == 'o'\nodd_values_string('eioo') == 'o'\nodd_values_string('eiooa') == 'o'\nodd_values_string('eiooe') == 'o'\nodd_values_string('eiooea') == 'o'\n\nprint('''\n**********\nQuestion 5\n**********''')\n\ndef same_letter_in_odd_index_string(str):\n    '''\n    Write a python function to check whether the characters of a given string are the same or not.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string('12345') == '23455', 'The first function should return: 23455'\nassert odd_values_string('12345') == '123450', 'The second function should return: 123450'\nassert odd_values_string('12345') == '1235', 'The third function should return: 1235'\nassert odd_values_string('12345') == '12', 'The fourth function should return: 12'\nassert odd_values_string('12345') == '', 'The fifth function should return: \"\"'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string('Hello') == 'oH'\nassert     odd_values_string('World') == 'oW'\nassert     odd_values_string('Geeks') == 'oG'\nassert     odd_values_string('Geeks') == 'oG'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string('a') == 'a'\nassert     odd_values_string('a b') == 'a'\nassert     odd_values_string('abc') == 'abc'\nassert     odd_values_string('abc xyz') == 'abc'\nassert     odd_values_string('abc xyz a') == 'abc a'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_values_string('Python') == 'Pythn'\nodd_values_string('abcdefghijklmnopqrstuvwxyz') == 'bcdehjklmnoqrstvwxyz'\nodd_values_string('code') == 'odce'\nodd_values_string('code') == 'odce'\nodd_values_string('kitten') == 'kittn'\nodd_values_string('pippo') == 'popp'\nodd_values_string('pippo') == 'popp'\nodd_values_string('koala') == 'alak'\nodd_values_string('koala') == 'alak'\nodd_values_string('python') == 'on'\nodd_values_string('python') == 'on'\nodd_values_string('e') == 'e'\nodd_values_string('e') == 'e'\nodd_values_string('') == ''\nodd_values_string('') == ''\nodd_values_string('aaaabbbbcccc') == 'aab'\nodd_values_string('aaaabbbbcccc') == 'aab'\nodd_values_string('abcabcabc') == 'abc'\nodd_values_string('abcabcabc') == 'abc'\nodd_values_string('abcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc') == 'abc'\nodd_values_string('abcabcabcabcabcabcabc'"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(5,2,3) == 2\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,2,2) == 2\nassert     min_of_three(2,2,1) == 1\nassert     min_of_three(2,1,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,5,3) == 1\nassert     min_of_three(10,7,3) == 7\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(0,2,3) == 0\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    min_of_three(5,4,3) == 4\n    min_of_three(3,3,3) == 3\n    min_of_three(1,2,3) == 1\n    min_of_three(1,2,1) == 1\n    min_of_three(-5,-4,-3) == -5\nassert\n    min_of_three(5,4,3) == 5\n    min_of_three(3,3,3) == 3\n    min_of_three(1,2,3) == 1\n    min_of_three(1,2,1) == 1\n    min_of_three(-5,-4,-3) == -5\nassert\n    min_of_three(5,4,3) == 4\n    min_of_three(3,3,3) == 3\n    min_of_three(1,2,3) == 1\n    min_of_three(1,2,1) == 1\n    min_of_three(-5,-4,-3) == -5"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_of_three(2,4,5)    ==    2, \"Should return 2\"\nassert     min_of_three(1,2,3)    ==    1, \"Should return 1\"\nassert     min_of_three(3,4,5)    ==    4, \"Should return 4\"\n\n'''\nOther ways:\n1) Using min() function\n\n'''\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,3,3) == 3\nassert     min_of_three(2,2,1) == 1\nassert     min_of_three(1,3,2) == 1\nassert     min_of_three(3,2,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(1, 2, 3) == 1\nassert     min_of_three(1, 2, 2) == 2\nassert     min_of_three(2, 2, 2) == 2\nassert     min_of_three(1, 1, 1) == 1\nassert     min_of_three(0, 0, 0) == 0\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_of_three(3, 4, 5) == 3\nassert     min_of_three(4, 5, 3) == 3\nassert     min_of_three(3, 5, 1) == 1\nassert     min_of_three(2, 2, 2) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_of_three(1,2,3) == 1, \"error\"\nassert     min_of_three(1,1,1) == 1, \"error\"\nassert     min_of_three(-1,-1,-1) == -1, \"error\"\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert min_of_three(1,2,3) == 1\nassert min_of_three(-1,-2,-3) == -1\nassert min_of_three(4,4,4) == 4\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n = 3,l = 0,r = 2) == True\nassert     all_Bits_Set_In_The_Given_Range(n = 4,l = 0,r = 3) == True\nassert     all_Bits_Set_In_The_Given_Range(n = 8,l = 0,r = 7) == True\nassert     all_Bits_Set_In_The_Given_Range(n = 32,l = 0,r = 31) == True\nassert     all_Bits_Set_In_The_Given_Range(n = 64,l = 0,r = 63) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,10,20) == True\nassert     all_Bits_Set_In_The_Given_Range(2,10,30) == False\nassert     all_Bits_Set_In_The_Given_Range(2,10,7) == False\nassert     all_Bits_Set_In_The_Given_Range(2,10,8) == True\nassert     all_Bits_Set_In_The_Given_Range(2,10,9) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=1) == True \nassert all_Bits_Set_In_The_Given_Range(n=4,l=0,r=3) == False\nassert all_Bits_Set_In_The_Given_Range(n=4,l=0,r=5) == True\nassert all_Bits_Set_In_The_Given_Range(n=8,l=0,r=7) == True\nassert all_Bits_Set_In_The_Given_Range(n=8,l=0,r=11) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,2,2) == False\nassert     all_Bits_Set_In_The_Given_Range(3,3,3) == True\nassert     all_Bits_Set_In_The_Given_Range(1,1,2) == True\nassert     all_Bits_Set_In_The_Given_Range(2,2,3) == False\nassert     all_Bits_Set_In_The_Given_Range(7,7,7) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,0,1)     == False, \" 2 | 0 | 1 |\"\nassert     all_Bits_Set_In_The_Given_Range(3,0,1)     == True, \" 3 | 0 | 1 |\"\nassert     all_Bits_Set_In_The_Given_Range(4,0,1)     == False, \" 4 | 0 | 1 |\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(all_Bits_Set_In_The_Given_Range(3,1,3)) #True\nprint(all_Bits_Set_In_The_Given_Range(0,0,0)) #True\nprint(all_Bits_Set_In_The_Given_Range(5,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(6,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(7,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(8,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(9,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(10,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(11,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(12,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(13,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(14,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(15,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(16,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(17,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(18,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(19,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(20,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(21,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(22,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(23,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(24,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(25,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(26,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(27,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(28,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(29,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(30,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(31,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(32,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(33,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(34,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(35,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(36,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(37,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(38,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(39,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(40,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(41,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(42,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(43,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(44,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(45,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(46,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(47,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(48,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(49,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(50,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(51,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(52,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(53,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(54,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(55,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(56,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(57,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(58,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(59,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(60,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(61,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(62,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(63,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(64,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(65,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(66,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(67,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(68,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(69,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(70,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(71,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(72,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(73,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(74,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(75,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range(76,1,5)) #False\nprint(all_Bits_Set_In_The_Given_Range(77,1,5)) #True\nprint(all_Bits_Set_In_The_Given_Range"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10,0,2) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,10) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,9) == False\n\nassert     all_Bits_Set_In_The_Given_Range(9,0,9) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(4,3,6) == True\nassert     all_Bits_Set_In_The_Given_Range(2,1,3) == True\nassert     all_Bits_Set_In_The_Given_Range(9,9,9) == True\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == False\nassert     all_Bits_Set_In_The_Given_Range(0,1,0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     re_arrange_array([1, 2, -3, 4, -5], 3) == [-5, 1, 2, -3, 4]\nassert     re_arrange_array([1, -2, 3, -4, -5], 2) == [-2, -1, 1, 3, -4]\nassert     re_arrange_array([1, 2, 3, 4, 5, -6], 4) == [-6, 1, 2, 3, 4, 5]\nassert     re_arrange_array([1, 2, 3, 4, 5, -6, -7], 5) == [-7, -6, -5, -4, -3, -2, 1]\nassert     re_arrange_array([1, 2, 3, 4, 5, -6, -7, 8], 5) == [-7, -6, -5, -4, -3, -2, 1, 2]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\n    re_arrange_array([2, 3, 4, 6, 6, 5, 1], 3)\n    == [-5, 5, 1, 6, 6, 2, 3]\n)\n\nprint(\n    re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n    == [1, -3, 4, -4, 5, 6, -7, 8, -9]\n)\n\nprint(\n    re_arrange_array([10, 20, 30, 40, 50, 60, 70, 80, 90], 3)\n    == [10, -30, 20, -20, 30, -40, 50, -50, 60, -60, 70, -70, 80, -80, 90, -90]\n)\n\nprint(\n    re_arrange_array([1, -1, -2, 0, -3, -4, 5, -6], 3)\n    == [1, -1, -2, -3, -4, -5, -6, 0, 5, 4]\n)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # the following logic is not the fastest\n    # for i in range(n):\n    #     for j in range(i):\n    #         if arr[j] < 0:\n    #             arr[i], arr[j] = arr[j], arr[i]\n    #         elif arr[j] > 0:\n    #             break\n\n    # the following logic is even faster\n    n = len(arr)\n    i = 0\n    while i < n and arr[i] < 0:\n        i += 1\n    j = i\n    while j < n and arr[j] >= 0:\n        j += 1\n    arr[i], arr[j] = arr[j], arr[i]\n\n\ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # the following logic is not the fastest\n    # for i in range(n):\n    #     for j in range(i):\n    #         if arr[j] < 0:\n    #             arr[i], arr[j] = arr[j], arr[i]\n    #         elif arr[j] > 0:\n    #             break\n\n    # the following logic is even faster\n    i = 0\n    while i < n and arr[i] < 0:\n        i += 1\n    j = i\n    while j < n and arr[j] >= 0:\n        j += 1\n    arr[i], arr[j] = arr[j], arr[i]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nre_arrange_array(\n    [1,2,3,4,5], 3\n    ) == [-5, 1, 2, 3, 4]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([-1, 2, 3, 4], 2) == [-1, 2, 4, 3], \"Wrong\"\nassert     re_arrange_array([-1, 2, -3, 4], 2) == [-3, 2, 4, -1], \"Wrong\"\nassert     re_arrange_array([-5, 2, 4, 1], 2) == [-5, 2, 4, 1], \"Wrong\"\n\n\ndef permute_array(arr, size):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6], 5) == [-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     re_arrange_array([-5, 6, -1, -4, 3, 4, 5, 8, 2, -10, -3], 5) == [-5, 6, -10, -4, 3, 4, 5, 8, 2, -1, -3]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6], 5) == [-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     re_arrange_array([1, -2, -3, -4, -5, -6], 5) == [-6, -5, -4, -3, -2, -1, 1]\nassert     re_arrange_array([1, -2, -3, -4, -5, -6, 7, 8, 9], 5) == [-6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, 6, -7, -8], 7) == [-7, 1, -8, -7, 2, 3, 4, 5]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, -7, -8], 5) == [-7, -8, 1, -7, 2, 3, 4, 5]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, -7, -8], 3) == [-7, 1, -8, -7, 2, 3, 4, 5]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, -7, -8], 2) == [-7, 1, -8, -7, 2, 3, 4, 5]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, -7, -8], 1) == [-7, 1, -8, -7, 2, 3, 4, 5]\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_blank('a b c','') == 'a b c', 'Error'\nassert     replace_blank('a b c', '') == 'a b c', 'Error'\nassert     replace_blank('a b c', 'a') == 'a a b c', 'Error'"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_blank('','') == ''\nassert     replace_blank('a','') == 'a'\nassert     replace_blank('ab','') == 'ab'\nassert     replace_blank('abc','') == 'abc'\nassert     replace_blank('abc',' ') == 'a b c'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank(\"hello\",' ') == \"hello\"\nassert     replace_blank(\"      \",' ') == \"      \"\nassert     replace_blank(\"      \",' ') == \"      \"\nassert     replace_blank(\"a b\",' ') == \"a b\"\nassert     replace_blank(\"a b\",' ') == \"a b\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_blank('', 'a') == 'a'\nassert replace_blank('','') == ''\nassert replace_blank('', 'b') == 'b'\nassert replace_blank('','') == ''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_blank('',' ') == '', 'Should be empty string'\nassert     replace_blank('  ',' ') == '', 'Should be empty string'\nassert     replace_blank('gdfg',' ') == 'gdfg', 'Should be gdfg'\nassert     replace_blank('test',' ') == 'test', 'Should be test'\nassert     replace_blank(' ',' ') == '', 'Should be empty string'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert replace_blank(\"\", \"a\") == \"a\", \"First\"\nassert replace_blank(\"abc \", \"c\") == \"cabc\", \"Second\"\nassert replace_blank(\"abcd\", \"c\") == \"cabcd\", \"Third\"\nassert replace_blank(\"abcd\", \"d\") == \"abcdd\", \"Fourth\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank(\"hello world\",'a')=='hello a world'\nassert     replace_blank(\"\",'b')=='b'\nassert     replace_blank(\"\",'')==''\nassert     replace_blank(\"\",'c')=='c'"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank(' ', '*') == \"***\"\nassert     replace_blank('', '*') == \"\"\nassert     replace_blank('123', '*') == \"123\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank(\"The bird is the word\",'') == \"The bird is the word\", \"test case failed\"\nassert     replace_blank(\"abcdef\",'') == \"abcdef\", \"test case failed\"\nassert     replace_blank(\"\",'') == \"\", \"test case failed\"\n\n\n\ndef remove_spaces(str1):\n    '''\n    Write a function that takes in a string and returns a string with all spaces removed.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     larg_nnum([1,2,3,4,5],5) == [5,4,3,2,1]\nassert     larg_nnum([1,2,3,4,5],0) == []\nassert     larg_nnum([],3) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     larg_nnum(list1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],n=5) == [100, 110, 80, 90, 70]\nassert     larg_nnum(list1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],n=10) == [100, 110, 80, 90, 70]\nassert     larg_nnum(list1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],n=11) == [100, 110, 80, 90, 70, 100]\nassert     larg_nnum(list1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],n=20) == [100, 110, 80, 90, 70, 100, 100, 90, 70, 80, 110]\nassert     larg_nnum(list1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110],n=30) == [100, 110, 80, 90, 70, 100, 100, 90, 70, 80, 110]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef smallest_of_n_lists(lst1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     larg_nnum([1,2,3,4,5],3) == [3,4,5]\nassert     larg_nnum([1,2,3,4,5],1) == [1]\nassert     larg_nnum([1,2,3,4,5],5) == [1,2,3,4,5]\n\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     larg_nnum([1,2,3,5,7,7,6,6,7],3) == [7,7,7]\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse=True)[:n]"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n\nassert \n\ndef larg_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     larg_nnum([2,3,1,5,4], 1) == [5,4,3,2,1]\nassert     larg_nnum([2,3,1,5,4], 2) == [5,4,3,2,1]\nassert     larg_nnum([2,3,1,5,4], 3) == [5,4,3,2,1]\nassert     larg_nnum([2,3,1,5,4], 4) == [5,4,3,2,1]\nassert     larg_nnum([2,3,1,5,4], 5) == [5,4,3,2,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef qsort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sort_half(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a new list sorted such that the n/2th element from the end is in the \n    final list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nWrite a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n'''\n\ndef small_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert lateralsuface_cylinder(1.0,4) == 4.0\nassert lateralsuface_cylinder(1.0,10) == 10.0\nassert lateralsuface_cylinder(4,4) == 4.0\nassert lateralsuface_cylinder(2,4) == 8.0\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsuface_cylinder(2,5) == 5, 'Check your work'\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsuface_cylinder(1,1) == 2.0\nassert     lateralsuface_cylinder(2,1) == 4.0\nassert     lateralsuface_cylinder(5,1) == 8.0\nassert     lateralsuface_cylinder(10,1) == 16.0\nassert     lateralsuface_cylinder(100,1) == 80000.0\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(1) == 1, \"Should be 1\"\nassert     volume_cube(3) == 27, \"Should be 27\"\nassert     volume_cube(6) == 216, \"Should be 216\"\nassert     volume_cube(9) == 2736, \"Should be 2736\"\nprint(\"All cases passed!\")\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cube(3) == 27, 'Wrong!'\nassert     volume_cube(2) == 8, 'Wrong!'\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and its height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(3) == 27, \"incorrect\"\nassert     volume_cube(2) == 4, \"incorrect\"\nassert     volume_cube(5) == 125, \"incorrect\"\nassert     volume_cube(6) == 216, \"incorrect\"\nassert     volume_cube(8) == 64, \"incorrect\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(7) == 49\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(8) == 64\nassert     volume_cube(0) == 0\nassert     volume_cube(6.5) == 78."
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_bit_set_number(1) == 3\neven_bit_set_number(0) == 0\neven_bit_set_number(2) == 2\neven_bit_set_number(3) == 3\neven_bit_set_number(4) == 4\neven_bit_set_number(5) == 5\neven_bit_set_number(6) == 6\neven_bit_set_number(7) == 7\neven_bit_set_number(8) == 7\neven_bit_set_number(9) == 7\neven_bit_set_number(10) == 7\neven_bit_set_number(11) == 7\neven_bit_set_number(12) == 7\neven_bit_set_number(13) == 7\neven_bit_set_number(14) == 7\neven_bit_set_number(15) == 7\neven_bit_set_number(16) == 7\neven_bit_set_number(17) == 7\neven_bit_set_number(18) == 7\neven_bit_set_number(19) == 7\neven_bit_set_number(20) == 7\neven_bit_set_number(21) == 7\neven_bit_set_number(22) == 7\neven_bit_set_number(23) == 7\neven_bit_set_number(24) == 7\neven_bit_set_number(25) == 7\neven_bit_set_number(26) == 7\neven_bit_set_number(27) == 7\neven_bit_set_number(28) == 7\neven_bit_set_number(29) == 7\neven_bit_set_number(30) == 7\neven_bit_set_number(31) == 7\neven_bit_set_number(32) == 7\neven_bit_set_number(33) == 7\neven_bit_set_number(34) == 7\neven_bit_set_number(35) == 7\neven_bit_set_number(36) == 7\neven_bit_set_number(37) == 7\neven_bit_set_number(38) == 7\neven_bit_set_number(39) == 7\neven_bit_set_number(40) == 7\neven_bit_set_number(41) == 7\neven_bit_set_number(42) == 7\neven_bit_set_number(43) == 7\neven_bit_set_number(44) == 7\neven_bit_set_number(45) == 7\neven_bit_set_number(46) == 7\neven_bit_set_number(47) == 7\neven_bit_set_number(48) == 7\neven_bit_set_number(49) == 7\neven_bit_set_number(50) == 7\neven_bit_set_number(51) == 7\neven_bit_set_number(52) == 7\neven_bit_set_number(53) == 7\neven_bit_set_number(54) == 7\neven_bit_set_number(55) == 7\neven_bit_set_number(56) == 7\neven_bit_set_number(57) == 7\neven_bit_set_number(58) == 7\neven_bit_set_number(59) == 7\neven_bit_set_number(60) == 7\neven_bit_set_number(61) == 7\neven_bit_set_number(62) == 7\neven_bit_set_number(63) == 7\neven_bit_set_number(64) == 7\neven_bit_set_number(65) == 7\neven_bit_set_number(66) == 7\neven_bit_set_number(67) == 7\neven_bit_set_number(68) == 7\neven_bit_set_number(69) == 7\neven_bit_set_number(70) == 7\neven_bit_set_number(71) == 7\neven_bit_set_number(72) == 7\neven_bit_set_number(73) == 7\neven_bit_set_number(74) == 7\neven_bit_set_number(75) == 7\neven_bit_set_number(76) == 7\neven_bit_set_number(77) == 7\neven_bit_set_number(78) == 7\neven_bit_set_number(79) == 7\neven_bit_set_number(80) == 7\neven_bit_set_number(81) == 7\neven_bit_set_number(82) == 7\neven_bit_set_number(83) == 7\neven_bit_set_number(84) == 7\neven_bit_set_number(85) == 7\neven_bit_set_number(86) == 7\neven_bit_set_number(87) == 7\neven_bit_set_number(88) == 7\neven_bit_set_number(89) == 7\neven_bit_set_number(90) == 7\neven_bit_set_number(91) == 7\neven_bit_set_number(92) == 7\neven_bit_set_number(93) == 7\neven_bit_set_number(94) == 7\neven_bit_set_number(95) == 7\neven_bit_set_number(96) == 7\neven_bit_set_number(97) == 7\neven_bit_set_number(98) == 7\neven_bit_set_number(99) == 7\neven_bit_set_number(100) == 7\neven_bit_set_number(101) == 7\neven_bit_set_number(102) == 7\neven_bit_set_number(103) == 7\neven_bit_set_number(104) == 7\neven_bit_set_number(105) == 7\neven_bit_set_number(106) == 7\neven_bit_set_number(107) == 7\neven_bit_set_number(108) == 7\neven_bit_set_number(109) == 7\neven_bit_set_number(110) == 7\neven_bit_set_number(111) == 7\neven_bit_set_number(112) == 7\neven_bit_set_number(113) == 7\neven_bit_set_number(114) == 7\neven_bit_set_number(115) == 7\neven_bit_set_number(116) == 7\neven_bit_set_number(117) == 7\neven_bit_set_number(118) == 7\neven_bit_set_number(119) == 7\neven_bit_set_number(120) == 7\neven_bit_set_number(121) == 7\neven_bit_set_number(122) == 7\neven_bit_set_number(123) == 7\neven_bit_set_number(124) == 7\neven_bit_set_number(125) == 7\neven_bit_set_number(126) == 7\neven_bit_set_number(127) == 7\neven_bit_set_number(128) == 7\neven_bit_set_number(129) == 7\neven_bit_set_number(130) == 7\neven_bit_set_number(131) == 7\neven_bit_set_number(132) == 7\neven_bit_set_number(133) == 7\neven_bit_set_number(134) == 7\neven_bit_set_number(135) == 7\neven_bit_set_number(136) == 7\neven_bit_set_number(137) == 7\neven_bit_set_number(138) == 7\neven_bit_set_number(139) == 7\neven_bit_set_number(140) == 7\neven_bit_set_number(141) == 7\neven_bit_set_number(142) == 7\neven_bit_set_number(143) == 7\neven_bit_set_number(144) == 7\neven_bit_set_number(145) == 7\neven_bit_set_number(146) == 7\neven_bit_set_number(147) == 7\neven_bit_set_number(148) == 7\neven_bit_set_number(149) == 7\neven_bit_set_number(150) == 7\neven_bit_set_number(151) == 7\neven_bit_set_number(152) == 7\neven"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_bit_set_number(2) == 2\nassert \neven_bit_set_number(3) == 4\nassert \neven_bit_set_number(2147483647) == 2147483647\nassert \neven_bit_set_number(-2147483648) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_bit_set_number(0x111) == 0x11\neven_bit_set_number(0x111) == 0x11\neven_bit_set_number(0x111) == 0x11\neven_bit_set_number(0x111) == 0x11\neven_bit_set_number(0x112) == 0x12\neven_bit_set_number(0x111) == 0x11\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert even_bit_set_number(7) == 0\nassert even_bit_set_number(3) == 1\nassert even_bit_set_number(2) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"Pass\" if (0 == even_bit_set_number(0)) else \"Fail\")\nprint(\"Pass\" if (1 == even_bit_set_number(1)) else \"Fail\")\nprint(\"Pass\" if (2 == even_bit_set_number(4)) else \"Fail\")\nprint(\"Pass\" if (3 == even_bit_set_number(6)) else \"Fail\")\nprint(\"Pass\" if (7 == even_bit_set_number(8)) else \"Fail\")\nprint(\"Pass\" if (15 == even_bit_set_number(16)) else \"Fail\")\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef get_mask(number, num_bits): \n    '''\n    Write a python function to generate a mask of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_bit_set_number(1) == 0\nassert even_bit_set_number(2) == 1\nassert even_bit_set_number(3) == 1\nassert even_bit_set_number(4) == 0\nassert even_bit_set_number(8) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_bit_set_number(1) == 4\neven_bit_set_number(0) == 0\neven_bit_set_number(8) == 8\neven_bit_set_number(255) == 240\neven_bit_set_number(1024) == 512\n\n\ndef even_bit_clear_number(n): \n    '''\n    Write a python function to clear even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_bit_set_number(1) == 0\neven_bit_set_number(1000) == 0\neven_bit_set_number(1111) == 1\neven_bit_set_number(1011) == 1\neven_bit_set_number(111101) == 1\neven_bit_set_number(1110011) == 0\neven_bit_set_number(11100100) == 0\neven_bit_set_number(111001111) == 1\neven_bit_set_number(100001111) == 1\neven_bit_set_number(0) == 0\neven_bit_set_number(2) == 1\neven_bit_set_number(4) == 1\neven_bit_set_number(5) == 1\neven_bit_set_number(7) == 1\neven_bit_set_number(10) == 1\neven_bit_set_number(99) == 1\neven_bit_set_number(1000) == 1\neven_bit_set_number(1099) == 0\neven_bit_set_number(111111) == 1\neven_bit_set_number(1110011) == 1\neven_bit_set_number(11100110) == 1\neven_bit_set_number(11100111) == 0\neven_bit_set_number(11101110) == 0\neven_bit_set_number(11101111) == 1\neven_bit_set_number(11110110) == 1\neven_bit_set_number(11110111) == 1\neven_bit_set_number(111001120) == 1\neven_bit_set_number(111001121) == 1\neven_bit_set_number(111001122) == 1\neven_bit_set_number(111001123) == 1\neven_bit_set_number(111001124) == 1\neven_bit_set_number(111001125) == 0\neven_bit_set_number(111001126) == 0\neven_bit_set_number(111001127) == 1\neven_bit_set_number(111001128) == 1\neven_bit_set_number(111001129) == 0\neven_bit_set_number(111001110) == 1\neven_bit_set_number(111001111) == 1\neven_bit_set_number(111001112) == 1\neven_bit_set_number(111001113) == 1\neven_bit_set_number(111001114) == 1\neven_bit_set_number(111001115) == 1\neven_bit_set_number(111001116) == 0\neven_bit_set_number(111001117) == 1\neven_bit_set_number(111001118) == 0\neven_bit_set_number(111001119) == 0\neven_bit_set_number(111001120) == 1\neven_bit_set_number(111001121) == 1\neven_bit_set_number(111001122) == 0\neven_bit_set_number(111001123) == 1\neven_bit_set_number(111001124) == 1\neven_bit_set_number(111001125) == 1\neven_bit_set_number(111001126) == 1\neven_bit_set_number(111001127) == 0\neven_bit_set_number(111001128) == 0\neven_bit_set_number(111001129) == 1\neven_bit_set_number(111001130) == 0\neven_bit_set_number(111001131) == 1\neven_bit_set_number(111001132) == 0\neven_bit_set_number(111001133) == 1\neven_bit_set_number(111001134) == 0\neven_bit_set_number(111001135) == 1\neven_bit_set_number(111001136) == 1\neven_bit_set_number(111001137) == 1\neven_bit_set_number(111001138) == 1\neven_bit_set_number(111001139) == 1\neven_bit_set_number(111001140) == 1\neven_bit_set_number(111001141) == 0\neven_bit_set_number(111001142) == 1\neven_bit_set_number(111001143) == 0\neven_bit_set_number(111001144) == 1\neven_bit_set_number(111001145) == 1\neven_bit_set_number(111001146) == 0\neven_bit_set_number(111001147) == 0\neven_bit_set_number(111001148) == 0\neven_bit_set_number(111001149) == 1\neven_bit_set_number(111001150) == 1\neven_bit_set_number(111001151) == 0\neven_bit_set_number(111001152) == 1\neven_bit_set_number(111001153) == 1\neven_bit_set_number(111001154) == 1\neven_bit_set_number(111001155) == 1\neven_bit_set_number(111001156) == 1\neven_bit_set_number(111001157) == 1\neven_bit_set_number(111001158) == 1\neven_bit_set_number(111001159) == 0\neven_bit_set_number(111001160) == 0\neven_bit_set_number(111001161) == 1\neven_bit_set_number(111001162) == 1\neven_bit_set_number(111001163) == 1\neven_bit_set_number(111001164) == 1\neven_bit_set_number(111001165) == 1\neven_bit_set_number(111001166) == 1\neven_bit_set_number(111001167) == 1\neven_bit_set_number(111001168) == 1\neven_bit_set_number(111001169) == 1\neven_bit_set_number(111001170) == 1\neven_bit_set_number(111001171) == 1\neven_bit_set_number(111001172) == 1\neven_bit_set_number(111001173) == 1\neven_bit_set_number(111001174) == 1\neven_bit_set_number(111001175) == 0\neven_bit_set_number(111001176) == 1\neven_bit_set_number(111001177) == 1\neven_bit_set_number(111001178) == 0\neven_bit_set_number(111001179) == 1\neven_bit_set_number(111001180) == 1\neven_bit_set_number(111001181) == 1\neven_bit_set_number(111001182) == 1\neven_bit_set_number(111001183) == 1\neven_bit_set_number(111001184) == 0\neven_bit_set_number(111001185) == 0\neven_bit_set_number(111001186) == 1\neven_bit_set_number(111001187) == 1\neven_bit_set_number(111001188) == 0\neven_bit_set_number(111001189) == 1\neven_bit_set_number(111001190) == 1\neven_bit_set_number(111001191) == 1\neven_bit_set_number(111001192) == 1\neven_bit_set_number(111001193) == 1\neven_bit_set_number(111001194) == 1\neven_bit_set_number(111001195) == 0\neven_bit_set_number(111001196) == 1\neven_bit_set_number(111001197) == 1\neven_bit_set_number(111001198) == 1\neven_bit_set_number(111001199) == 0\neven_bit_set_number(111001200) == 1\neven_bit_set_number(111001201) == 1\neven_bit_set_numbe"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_bit_set_number(1) == 0\neven_bit_set_number(2) == 1\neven_bit_set_number(4) == 2\neven_bit_set_number(8) == 3\neven_bit_set_number(16) == 4\neven_bit_set_number(32) == 5\neven_bit_set_number(64) == 6\neven_bit_set_number(128) == 7\neven_bit_set_number(256) == 8\neven_bit_set_number(512) == 9\neven_bit_set_number(1024) == 10\neven_bit_set_number(2048) == 11\neven_bit_set_number(4096) == 12\neven_bit_set_number(8192) == 13\neven_bit_set_number(16384) == 14\neven_bit_set_number(32768) == 15\neven_bit_set_number(65536) == 16\neven_bit_set_number(131072) == 17\neven_bit_set_number(262144) == 18\neven_bit_set_number(524288) == 19\neven_bit_set_number(1048576) == 20\neven_bit_set_number(2097152) == 21\neven_bit_set_number(4194304) == 22\neven_bit_set_number(8388608) == 23\neven_bit_set_number(16777216) == 24\neven_bit_set_number(327680) == 25\neven_bit_set_number(67108864) == 26\neven_bit_set_number(134217728) == 27\neven_bit_set_number(268435456) == 28\neven_bit_set_number(536870912) == 29\neven_bit_set_number(1073741824) == 30\neven_bit_set_number(2147483648) == 31\neven_bit_set_number(4294967296) == 32\neven_bit_set_number(8589934592) == 33\neven_bit_set_number(17179869184) == 34\neven_bit_set_number(35184384096) == 35\neven_bit_set_number(71069188288) == 36\neven_bit_set_number(140737488352) == 37\neven_bit_set_number(281474976710656) == 38\neven_bit_set_number(562949953421312) == 39\neven_bit_set_number(1103515245481375) == 40\neven_bit_set_number(2432902008176640000) == 41\neven_bit_set_number(107374182400) == 42\neven_bit_set_number(214748364800) == 43\neven_bit_set_number(53687091200) == 44\neven_bit_set_number(13421772800) == 45\neven_bit_set_number(262144000) == 46\neven_bit_set_number(524288000) == 47\neven_bit_set_number(104857600) == 48\neven_bit_set_number(209715200) == 49\neven_bit_set_number(419430400) == 50\neven_bit_set_number(8388608000) == 51\neven_bit_set_number(1677721600) == 52\neven_bit_set_number(33554432000) == 53\neven_bit_set_number(6710886400) == 54\neven_bit_set_number(13421772800) == 55\neven_bit_set_number(268435456000) == 56\neven_bit_set_number(53687091200) == 57\neven_bit_set_number(107374182400) == 58\neven_bit_set_number(214748364800) == 59\neven_bit_set_number(4294967296000) == 60\neven_bit_set_number(8589934592000) == 61\neven_bit_set_number(17179869184000) == 62\neven_bit_set_number(35184384096000) == 63\neven_bit_set_number(71069188288000) == 64\neven_bit_set_number(140737488352000) == 65\neven_bit_set_number(28147497671074688) == 66\neven_bit_set_number(562949953421312000) == 67\neven_bit_set_number(110351524548137568) == 68\neven_bit_set_number(2432902008176640000) == 69\neven_bit_set_number(107374182400) == 70\neven_bit_set_number(214748364800) == 71\neven_bit_set_number(524288000) == 72\neven_bit_set_number(13421772800) == 73\neven_bit_set_number(262144000) == 74\neven_bit_set_number(524288000) == 75\neven_bit_set_number(104857600) == 76\neven_bit_set_number(209715200) == 77\neven_bit_set_number(419430400) == 78\neven_bit_set_number(8388608000) == 79\neven_bit_set_number(1677721600) == 80\neven_bit_set_number(33554432000) == 81\neven_bit_set_number(6710886400) == 82\neven_bit_set_number(13421772800) == 83\neven_bit_set_number(268435456000) == 84\neven_bit_set_number(53687091200) == 85\neven_bit_set_number(107374182400) == 86\neven_bit_set_number(214748364800) == 87\neven_bit_set_number(4294967296000) == 88\neven_bit_set_number(8589934592000) == 89\neven_bit_set_number(17179869184000) == 90\neven_bit_set_number(35184384096000) == 91\neven_bit_set_number(71069188288000) == 92\neven_bit_set_number(140737488352000) == 93\neven_bit_set_number(28147497671074688) == 94\neven_bit_set_number(562949953421312000) == 95\neven_bit_set_number(110351524548137568) == 96\neven_bit_set_number(2432902008176640000) == 97\neven_bit_set_number(107374182400) == 98\neven_bit_set_number(214748364800) == 99\neven_bit_set_number(524288000) == 100\neven_bit_set_number(13421772800) == 101\neven_bit_set_number(262144000) == 102\neven_bit_set_number(524288000) == 103\neven_bit_set_number(104857600) == 104\neven_bit_set_number(209715200) == 105\neven_bit_set_number(419430400) == 106\neven_bit_set_number(8388608000) == 107\neven_bit_set_number(1677721600) == 108\neven_bit_set_number(33554432000) == 109\neven_bit_set_number(6710886400) == 110\neven_bit_set_number(13421772800) == 111\neven_bit_set_number(268435456000) == 112\neven_bit_set_number(53687091200) == 113\neven_bit_set_number(107374182400) == 114\neven_bit_set_number(214748364800) == 115\neven_bit_set_number(4294967296000) == 116\neven_bit_set_number(8589934592000) == 117\neven_bit_set_number(17179869184000) == 118\neven_bit_set_number(35184384096000) == 119\neven_bit_set_number(71069188288000) == 120\neven_bit_set_number(140737488352000) == 121\neven_bit_set_numbe"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([(1,2),(2,3),(3,4),(4,5)]) == {(1,2):2,(2,3):1,(3,4):1,(4,5):1}\nassert     check_occurences([(1,2,3),(2,3,4),(3,4,5)]) == {(1,2,3):2,(2,3,4):1,(3,4,5):1}\nassert     check_occurences([(1,2),(2,),(1,3)]) == {(1,2):2,(2,):0,(1,3):1}\nassert     check_occurences([]) == {}\nassert     check_occurences([(1,2),(2,),(1,3)]) == {(1,2):2,(2,):0,(1,3):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_occurences([('a',1), ('a',1), ('b',2), ('c',3), ('d',3), ('e',1), ('f',3), ('g',4), ('h',5)]) == {('a',1): 1, ('b',2): 1, ('c',3): 1, ('d',3): 1, ('e',1): 1, ('f',3): 1, ('g',4): 1, ('h',5): 1}\nassert check_occurences([('a',1), ('a',1), ('b',2), ('c',3), ('d',3), ('e',1), ('f',3), ('g',4), ('h',5)]) == {('a',1): 2, ('b',2): 1, ('c',3): 1, ('d',3): 1, ('e',1): 2, ('f',3): 1, ('g',4): 1, ('h',5): 1}\nassert check_occurences([('a',1), ('a',1), ('b',2), ('c',3), ('d',3), ('e',1), ('f',3), ('g',4), ('h',5)]) == {('a',1): 2, ('b',2): 1, ('c',3): 1, ('d',3): 1, ('e',1): 2, ('f',3): 1, ('g',4): 1, ('h',5): 1}\nassert check_occurences([('a',1), ('a',1), ('b',2), ('c',3), ('d',3), ('e',1), ('f',3), ('g',4), ('h',5)]) == {('a',1): 3, ('b',2): 1, ('c',3): 1, ('d',3): 1, ('e',1): 3, ('f',3): 1, ('g',4): 1, ('h',5): 1}\nassert check_occurences([('a',1), ('a',1), ('b',2), ('c',3), ('d',3), ('e',1), ('f',3), ('g',4), ('h',5)]) == {('a',1): 3, ('b',2): 1, ('c',3): 1, ('d',3): 1, ('e',1): 3, ('f',3): 1, ('g',4): 1, ('h',5): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # e.g. \n    # check_occurences([(1,2),(2,3),(3,4),(4,5),(1,2),(2,3)]) == {(1,2): 2, (2,3): 2, (3,4): 1, (4,5): 1, (1,2): 1}\n    # e.g. \n    # check_occurences([('a',1),('b',2),('a',1),('a',1),('b',2),('a',1),('b',2),('b',3),('b',3)]) == {('a',1): 2, ('b',2): 3, ('a',1): 1}\n    # e.g. \n    # check_occurences([(1,2),(1,2),(1,2),(1,2),(1,2),(1,2)]) == {(1,2): 5}\n\n    # check_occurences([('a',2),('a',2),('a',2),('a',2),('b',1),('b',2),('b',1),('b',2),('b',3),('b',3)]) == {('a',2): 4, ('b',1): 3, ('b',2): 3}\n\ndef get_subsets(original_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each distinct string to the number of times it occurs in the list.\n    '''\n    pass"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_occurences([]) == {() : 1}\nassert     check_occurences([(1,2,3), (1,2,3), (1,2,3)]) == {(1,2,3): 3}\nassert     check_occurences([(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3)]) == {(1,2,3): 10}\nassert     check_occurences([(1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2)]) == {(1,2): 10}\nassert     check_occurences([(1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2), (1,2)]) == {(1,2): 20}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_occurences([(1, 2), (3, 4), (5, 6)]) == {(1, 2): 1, (3, 4): 1, (5, 6): 1}\nassert     check_occurences([(1, 2, 3), (3, 4, 5), (5, 6, 7)]) == {(1, 2, 3): 1, (3, 4, 5): 1, (5, 6, 7): 1}\nassert     check_occurences([(1, 2, 3), (1, 2, 3)]) == {(1, 2, 3): 2}\nassert     check_occurences([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == {(1, 2, 3): 1, (4, 5, 6): 1, (7, 8, 9): 1}\n\ndef check_occurences_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([('abcd', 'abcd'), ('bcd', 'abcd')]) == {'abcd': 2, 'bcd': 1}\nassert     check_occurences([('abcd', 'abcd'), ('a', 'b'), ('a', 'b'), ('b', 'a')]) == {'abcd': 2, 'a': 2, 'b': 2}\nassert     check_occurences([('abcd', 'abcd'), ('abcd', 'abcd'), ('a', 'b'), ('a', 'b'), ('b', 'a')]) == {'abcd': 2, 'a': 3, 'b': 2}\nassert     check_occurences([('abcd', 'abcd'), ('abcd', 'abcd'), ('bcd', 'abcd'), ('a', 'b'), ('a', 'b'), ('b', 'a')]) == {'abcd': 2, 'a': 3, 'b': 2}\nassert     check_occurences([('abcd', 'abcd'), ('abcd', 'abcd'), ('a', 'b'), ('a', 'b'), ('b', 'a')]) == {'abcd': 3, 'a': 2, 'b': 2}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([('red','blue'),('green','blue')]) == {('red','blue'):2, ('green','blue'):1}\nassert check_occurences([('red','blue'),('red','blue'),('green','blue')]) == {('red','blue'):3, ('green','blue'):2}\nassert check_occurences([('red','blue'),('red','blue'),('green','blue'),('red','red')]) == {('red','blue'):4, ('green','blue'):3, ('red','red'):2}\n\n\ndef check_triples(test_list):\n    '''\n    Write a function that takes in a list of strings and returns a dictionary mapping each word to a list of the words that follow the word in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([(\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\")]) == {\"(a,b)\": 3, \"(a,b)\": 2, \"(a,b)\": 1}, \"Should count each tuple once.\"\nassert     check_occurences([(1,2), (2,3), (1,2), (1,2), (2,3), (1,2), (2,3)]) == {\"(1,2)\": 2, \"(2,3)\": 2, \"(1,2)\": 1, \"(1,2)\": 1, \"(2,3)\": 1}, \"Should count each tuple twice.\"\n\ndef add_tuple_counts(list_of_tuple_lists):\n    '''\n    Write a function that takes in a list of lists of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n\nassert     add_tuple_counts([[(\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\"), (\"a\", \"b\")],\n            [(1,2), (2,3), (1,2), (1,2), (2,3), (1,2), (2,3)],\n            [(1,2), (1,2), (2,3), (1,2), (1,2), (2,3), (1,2)]]) == {\"(1,2)\": 2, \"(2,3)\": 2, \"(1,2)\": 1, \"(1,2)\": 1, \"(2,3)\": 1}, \"Should count each tuple twice.\"\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3): 3, (1,2,3): 2, (1,2,3): 1}\nassert     check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3): 3, (1,2,3): 2, (1,2,3): 1}\nassert     check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3): 3, (1,2,3): 2, (1,2,3): 1}\nassert     check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3): 3, (1,2,3): 2, (1,2,3): 1}\nassert     check_occurences([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == {(1,2,3): 3, (1,2,3): 2, (1,2,3): 1}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nnumber_of_substrings(\"Test\") == 2\nnumber_of_substrings(\"Test\") == 3\nnumber_of_substrings(\"Test\") == 3\nnumber_of_substrings(\"\") == 0\nnumber_of_substrings(\"Test\") == 0\nnumber_of_substrings(\"Hello\") == 1\nnumber_of_substrings(\"Test\") == 2\nnumber_of_substrings(\"\") == 0\n\ndef duplicate_count_check(str): \n    '''\n    Write a python function to count the number of distinct non-empty substrings in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"All tests are passed.\")\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings(\"The quick brown fox jumps over the lazy dog\") == \n        5, \"Expected 5, received \" + str(number_of_substrings(\"The quick brown fox jumps over the lazy dog\"))\nassert     number_of_substrings(\"\") == \n        0, \"Expected 0, received \" + str(number_of_substrings(\"\"))\nassert     number_of_substrings(\"\") == \n        1, \"Expected 1, received \" + str(number_of_substrings(\"\"))"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    number_of_substrings(\"\")==0, \"Empty string\"\n    number_of_substrings(\"123\")==3\n    number_of_substrings(\"123\")==3\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"------------------\")\n    print(\"Test Cases\")\n    print(\"------------------\")\n\n    print(\"Test 1\")\n    assert number_of_substrings(\"\") == 0\n    assert number_of_substrings(\"h\") == 0\n    "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    if len(str)==0:\n        return 0\n\n    count = 0\n    for i in range(1,len(str)+1):\n        if str[:i] == str[-i:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_of_substrings('ab') == 1, \"number_of_substrings('ab') should be 1\"\nassert     number_of_substrings('abab') == 3, \"number_of_substrings('abab') should be 3\"\nassert     number_of_substrings('abcdef') == 6, \"number_of_substrings('abcdef') should be 6\"\nassert     number_of_substrings('abcdefg') == 6, \"number_of_substrings('abcdefg') should be 6\"\nassert     number_of_substrings('') == 0, \"number_of_substrings('') should be 0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_of_substrings(\"\") == 0, \\\n        \"Should return 0 because there are no non-empty substrings of an empty string\"\nassert     number_of_substrings(\"a\") == 1, \\\n        \"Should return 1 because there is a non-empty substring with one letter\"\nassert     number_of_substrings(\"b\") == 1, \\\n        \"Should return 1 because there is a non-empty substring with one letter\"\nassert     number_of_substrings(\"a b\") == 2, \\\n        \"Should return 2 because there are two non-empty substrings with 2 letters\"\nassert     number_of_substrings(\"aa\") == 2, \\\n        \"Should return 2 because there are two non-empty substrings with 2 letters\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings(\"\") == 0, \"Empty string\"\nassert     number_of_substrings(\"a\") == 1, \"One character\"\nassert     number_of_substrings(\"hello\") == 2, \"Two characters\"\nassert     number_of_substrings(\"There are 3 substrings in this string.\") == 5, \"Three substrings\"\nassert     number_of_substrings(\"This is a test.\") == 8, \"Eight substrings\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(2,2) == 1\nassert     get_total_number_of_sequences(5,3) == 2\nassert     get_total_number_of_sequences(5,4) == 2\nassert     get_total_number_of_sequences(10,4) == 3\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(5,0) == 0, \"Error!\"\nassert     get_total_number_of_sequences(5,1) == 1, \"Error!\"\nassert     get_total_number_of_sequences(5,2) == 2, \"Error!\"\nassert     get_total_number_of_sequences(5,3) == 8, \"Error!\"\nassert     get_total_number_of_sequences(5,4) == 16, \"Error!\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(10,4) == 18, \"total number of sequences: expected: 18, actual: {get_total_number_of_sequences(10,4)}\"\nassert     get_total_number_of_sequences(10,2) == 19, \"total number of sequences: expected: 19, actual: {get_total_number_of_sequences(10,2)}\"\nassert     get_total_number_of_sequences(0,1) == 0, \"total number of sequences: expected: 0, actual: {get_total_number_of_sequences(0,1)}\"\n\ndef get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #TODO: calculate and return the result\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(1,1) == 0, \"Wrong answer\"\nassert     get_total_number_of_sequences(1,2) == 1, \"Wrong answer\"\nassert     get_total_number_of_sequences(1,3) == 2, \"Wrong answer\"\nassert     get_total_number_of_sequences(1,4) == 5, \"Wrong answer\"\nassert     get_total_number_of_sequences(1,5) == 8, \"Wrong answer\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(2, 2) == 2\nassert     get_total_number_of_sequences(2, 3) == 1\nassert     get_total_number_of_sequences(5, 3) == 6\nassert     get_total_number_of_sequences(8, 3) == 18\nassert     get_total_number_of_sequences(10, 4) == 28\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(10,9) == 27\nassert     get_total_number_of_sequences(50,20) == 39440\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(3,3) == 5\nassert     get_total_number_of_sequences(2,1) == 3\nassert     get_total_number_of_sequences(3,2) == 5\nassert     get_total_number_of_sequences(3,3) == 8\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(3,2) == 2\nassert     get_total_number_of_sequences(3,3) == 0\nassert     get_total_number_of_sequences(3,4) == 0\nassert     get_total_number_of_sequences(3,5) == 1\nassert     get_total_number_of_sequences(3,6) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(3,2) == 3\nassert     get_total_number_of_sequences(4,2) == 8\nassert     get_total_number_of_sequences(5,3) == 14\n\ndef get_total_number_of_sequences_2(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(100,3) == 2624\nassert     get_total_number_of_sequences(200,4) == 62268\nassert     get_total_number_of_sequences(300,5) == 303488\nassert     get_total_number_of_sequences(400,6) == 271224\n\ndef get_total_number_of_sequences_with_given_multiplier(m,n): \n    '''\n    Write a function that takes in two positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. The sequence may contain any positive integer, but the elements are not to be repeated. \n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list([1,2,3,4],['a','b','c','d']) == [1,2,3,'d'] \nassert     replace_list([1,2,3],['a','b','c']) == [1,2,3,'c'] \nassert     replace_list([1,2],['a','b','c']) == [1,2,'c'] \nassert     replace_list([1,2,3,4],['a','b','c','d']) == [1,2,3,4] \nassert     replace_list([1,2,3],['a','b','c']) == [1,2,3] \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_list([1,2,3], [4,5,6]) == [1,2,3,4,5,6], \"Test 1 Failed\"\nassert     replace_list([2,2,2], [4,5,6]) == [2,2,2,4,5,6], \"Test 2 Failed\"\nassert     replace_list([3,3,3,3], [4,5,6]) == [3,3,3,3,4,5,6], \"Test 3 Failed\"\nprint(\"Tests Passed.\")\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nreplace_list([1, 2, 3], [5, 6]) == [1, 2, 6]\nreplace_list([1, 2, 3], [5, 6, 7]) == [1, 2, 7]\nreplace_list([5, 6, 7], [1, 2, 3]) == [5, 6, 7]\nreplace_list([1, 2, 3], []) == [1, 2, 3]\nreplace_list([1, 2], [3, 4, 5]) == [1, 2, 3, 4, 5]\nreplace_list([], [1, 2]) == [1, 2]\nreplace_list([], []) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([1,2,3,4,5],[3,4,5,6]) ==     [1,2,3,6,5]\nassert     replace_list([1,2,3,4,5],[3,4,5,6,1]) ==     [1,2,3,4,5,6]\nassert     replace_list([1,2,3,4,5],[1,2,3,4,5]) ==     [1,2,3,4,5]\nassert     replace_list([1,2,3,4,5],[]) ==     [1,2,3,4,5]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nreplace_list([1,2,3],\n[4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3],\n                    [4,5,6]) == None\nassert     replace_list([1,2,3],\n                    [4,5,5]) == None\nassert     replace_list([1,2,3],\n                    [4,5,4]) == None\nassert     replace_list([1,2,3,4],\n                    [4,5,6]) == None\nassert     replace_list([1,2,3,4],\n                    [4,5,5]) == None\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [1,2,3]\nassert     replace_list([1,2,3,4,5],[4,5,6,7]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4,5,6],[4,5,6,7]) == [1,2,3,4,5,6]\nassert     replace_list([1,2,3,4,5,6,7],[4,5,6,7]) == [1,2,3,4,5,6,7]\n\ndef rev_list(list1):\n    '''\n    Write a function that reverses a list of integers and returns the result.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (replace_list([1,2,3,4,5], [6,7,8]) == [1,2,3,8,5]), \"Test Case 1 Failed\"\nassert     (replace_list([1,2,3,4,5], [6,7,8,9,10]) == [1,2,3,9,5]), \"Test Case 1 Failed\"\nassert     (replace_list([1,2,3,4,5], [6,7,8,9,10,11]) == [1,2,3,9,10,11]), \"Test Case 1 Failed\"\n\ndef maximum_lst(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the largest value in the list.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1,2,3],[4,5]) == [[1,2],[4,5]]\nassert     replace_list([1,2,3,4],[5,6]) == [[1,2,3],[5,6]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3,4,5], [1,2,3,4,6]) == [1,2,3,4,6]\nassert     replace_list([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4,5], [1,2,3,4]) == [1,2,3,4]\nassert     replace_list([1,2,3,4,5], []) == []\nassert     replace_list([], []) == []\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac('bha') == 1, 'bha'\nassert     count_charac('hi') == 2, 'hi'\nassert     count_charac('h') == 2, 'h'\nassert     count_charac('a') == 1, 'a'\nassert     count_charac('') == 0, ''\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_charac('a') == 1\nassert     count_charac('ab') == 2\nassert     count_charac('abc') == 3\nassert     count_charac('abcde') == 6\nassert     count_charac('abcdefghijk') == 15\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_charac(\"\")    == 0\nassert    count_charac(\" \")    == 0\nassert    count_charac(\"a\")    == 1\nassert    count_charac(\"hello world\")    == 18\nassert    count_charac(\"!@#$%^&*()_+<>?:,;'[]|\\{}\")    == 23\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_charac(\"the quick brown fox jumps over the lazy dog\") == 26\nassert     count_charac(\"a\") == 1\nassert     count_charac(\"\") == 0\nassert     count_charac(\"a a a a a\") == 5\n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac('PYTHON') == 4\nassert     count_charac('Abc') == 3\nassert     count_charac('Python') == 6\nassert     count_charac('Python'*10) == 100\nassert     count_charac('abca') == 6\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_Perfect_Square(4) == 4, \"Wrong next_Perfect_Square\"\nassert     next_Perfect_Square(16) == 32, \"Wrong next_Perfect_Square\"\nassert     next_Perfect_Square(9) == 32, \"Wrong next_Perfect_Square\"\nassert     next_Perfect_Square(10) == 33, \"Wrong next_Perfect_Square\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_Perfect_Square(4)==5\nassert     next_Perfect_Square(5)==10\nassert     next_Perfect_Square(25)==16\nassert     next_Perfect_Square(100)==101\nassert     next_Perfect_Square(1)==1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    N = int(input())\n    ans = next_Perfect_Square(N)\n    print(ans)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(9) == 10\nassert     next_Perfect_Square(10) == 11\nassert     next_Perfect_Square(100) == 101\nassert     next_Perfect_Square(500) == 511\nassert     next_Perfect_Square(2000) == 2001\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 1, \"Input 1 should be 1\"\nassert next_Perfect_Square(4) == 5, \"Input 4 should be 5\"\nassert next_Perfect_Square(9) == 10, \"Input 9 should be 10\"\nassert next_Perfect_Square(16) == 19, \"Input 16 should be 19\"\nassert next_Perfect_Square(25) == 32, \"Input 25 should be 32\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(19) == 19, \"Error\"\nassert     next_Perfect_Square(21) == 27, \"Error\"\nassert     next_Perfect_Square(11) == 11, \"Error\"\nassert     next_Perfect_Square(0) == 0, \"Error\"\nassert     next_Perfect_Square(24) == 25, \"Error\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_Perfect_Square(100) == 16 \nassert next_Perfect_Square(1) == 1\nassert next_Perfect_Square(1) == 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef next_Perfect_Square_2(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nnext_Perfect_Square(4) == 1\nnext_Perfect_Square(5) == 2\nnext_Perfect_Square(6) == 3\nnext_Perfect_Square(7) == 4\nnext_Perfect_Square(8) == 5\nnext_Perfect_Square(9) == 6\nnext_Perfect_Square(10) == 7\nnext_Perfect_Square(11) == 8\nnext_Perfect_Square(12) == 9\nnext_Perfect_Square(13) == 10\nnext_Perfect_Square(14) == 11\nnext_Perfect_Square(15) == 12\nnext_Perfect_Square(16) == 13\nnext_Perfect_Square(17) == 14\nnext_Perfect_Square(18) == 15\nnext_Perfect_Square(19) == 16\nnext_Perfect_Square(20) == 17\nnext_Perfect_Square(21) == 18\nnext_Perfect_Square(22) == 19\nnext_Perfect_Square(23) == 20\nnext_Perfect_Square(24) == 21\nnext_Perfect_Square(25) == 22\nnext_Perfect_Square(26) == 23\nnext_Perfect_Square(27) == 24\nnext_Perfect_Square(28) == 25\nnext_Perfect_Square(29) == 26\nnext_Perfect_Square(30) == 27\nnext_Perfect_Square(31) == 28\nnext_Perfect_Square(32) == 29\nnext_Perfect_Square(33) == 30\nnext_Perfect_Square(34) == 31\nnext_Perfect_Square(35) == 32\nnext_Perfect_Square(36) == 33\nnext_Perfect_Square(37) == 34\nnext_Perfect_Square(38) == 35\nnext_Perfect_Square(39) == 36\nnext_Perfect_Square(40) == 37\nnext_Perfect_Square(41) == 38\nnext_Perfect_Square(42) == 39\nnext_Perfect_Square(43) == 40\nnext_Perfect_Square(44) == 41\nnext_Perfect_Square(45) == 42\nnext_Perfect_Square(46) == 43\nnext_Perfect_Square(47) == 44\nnext_Perfect_Square(48) == 45\nnext_Perfect_Square(49) == 46\nnext_Perfect_Square(50) == 47\nnext_Perfect_Square(51) == 48\nnext_Perfect_Square(52) == 49\nnext_Perfect_Square(53) == 50\nnext_Perfect_Square(54) == 51\nnext_Perfect_Square(55) == 52\nnext_Perfect_Square(56) == 53\nnext_Perfect_Square(57) == 54\nnext_Perfect_Square(58) == 55\nnext_Perfect_Square(59) == 56\nnext_Perfect_Square(60) == 57\nnext_Perfect_Square(61) == 58\nnext_Perfect_Square(62) == 59\nnext_Perfect_Square(63) == 60\nnext_Perfect_Square(64) == 61\nnext_Perfect_Square(65) == 62\nnext_Perfect_Square(66) == 63\nnext_Perfect_Square(67) == 64\nnext_Perfect_Square(68) == 65\nnext_Perfect_Square(69) == 66\nnext_Perfect_Square(70) == 67\nnext_Perfect_Square(71) == 68\nnext_Perfect_Square(72) == 69\nnext_Perfect_Square(73) == 70\nnext_Perfect_Square(74) == 71\nnext_Perfect_Square(75) == 72\nnext_Perfect_Square(76) == 73\nnext_Perfect_Square(77) == 74\nnext_Perfect_Square(78) == 75\nnext_Perfect_Square(79) == 76\nnext_Perfect_Square(80) == 77\nnext_Perfect_Square(81) == 78\nnext_Perfect_Square(82) == 79\nnext_Perfect_Square(83) == 80\nnext_Perfect_Square(84) == 81\nnext_Perfect_Square(85) == 82\nnext_Perfect_Square(86) == 83\nnext_Perfect_Square(87) == 84\nnext_Perfect_Square(88) == 85\nnext_Perfect_Square(89) == 86\nnext_Perfect_Square(90) == 87\nnext_Perfect_Square(91) == 88\nnext_Perfect_Square(92) == 89\nnext_Perfect_Square(93) == 90\nnext_Perfect_Square(94) == 91\nnext_Perfect_Square(95) == 92\nnext_Perfect_Square(96) == 93\nnext_Perfect_Square(97) == 94\nnext_Perfect_Square(98) == 95\nnext_Perfect_Square(99) == 96\nnext_Perfect_Square(100) == 97\nnext_Perfect_Square(101) == 98\nnext_Perfect_Square(102) == 99\nnext_Perfect_Square(103) == 100\nnext_Perfect_Square(104) == 101\nnext_Perfect_Square(105) == 102\nnext_Perfect_Square(106) == 103\nnext_Perfect_Square(107) == 104\nnext_Perfect_Square(108) == 105\nnext_Perfect_Square(109) == 106\nnext_Perfect_Square(110) == 107\nnext_Perfect_Square(111) == 108\nnext_Perfect_Square(112) == 109\nnext_Perfect_Square(113) == 110\nnext_Perfect_Square(114) == 111\nnext_Perfect_Square(115) == 112\nnext_Perfect_Square(116) == 113\nnext_Perfect_Square(117) == 114\nnext_Perfect_Square(118) == 115\nnext_Perfect_Square(119) == 116\nnext_Perfect_Square(120) == 117\nnext_Perfect_Square(121) == 118\nnext_Perfect_Square(122) == 119\nnext_Perfect_Square(123) == 120\nnext_Perfect_Square(124) == 121\nnext_Perfect_Square(125) == 122\nnext_Perfect_Square(126) == 123\nnext_Perfect_Square(127) == 124\nnext_Perfect_Square(128) == 125\nnext_Perfect_Square(129) == 126\nnext_Perfect_Square(130) == 127\nnext_Perfect_Square(131) == 128\nnext_Perfect_Square(132) == 129\nnext_Perfect_Square(133) == 130\nnext_Perfect_Square(134) == 131\nnext_Perfect_Square(135) == 132\nnext_Perfect_Square(136) == 133\nnext_Perfect_Square(137) == 134\nnext_Perfect_Square(138) == 135\nnext_Perfect_Square(139) == 136\nnext_Perfect_Square(140) == 137\nnext_Perfect_Square(141) == 138\nnext_Perfect_Square(142) == 139\nnext_Perfect_Square(143) == 140\nnext_Perfect_Square(144) == 141\nnext_Perfect_Square(145) == 142\nnext_Perfect_Square(146) == 143\nnext_Perfect_Square(147) == 144\nnext_Perfect_Square(148) == 145\nnext_Perfect_Square(149) == 146\nnext_Perfect_Square(150) == 147\nnext_Perfect_Square(151) == 148\nnext_Perfect_Square(152) == 149\nnext_Perfect_Square(153) == 150\nnext_Perfect_Square(154) == 151\nnext_Perfect_Square(155) == 152\nnext_Perfect_Square(156) == 153\nnext_Perfect_Square(157) == 154\nnext_Perfect_Square(158) == 155\nnext_Perfect_Square(159) == 156\nnext_Perfect_Square(160) == 157\nnext_Perfect_Square(161) == 158\nnext_Perfect_Square(162) == 159\nnext_Perfect_Square(163) == 160\nnext_Perfect_Square(164) == 161\nnext_Perfect_Square(165) == 162\nnext_Perfect_Square(166) == 163\nnext_Perfect_Square(167) == 164\nnext_Perfect_Square(168) == 165\nnext_Perfect_Square(169) == 166\nnext_Perfect_Square(170) == 167\nnext_Perfect_Square(171) == 168\nnext_Perfect_Square(172) == 169\nnext_Perfect_Square(173) == 170\nnext_Perfect_Square(174) == 171\nnext_Perfect_Square(175) == 172\nnext_Perfect_Square(176) == 173\nnext_Perfect_Square(177) == 174\nnext_Perfect_Square(178) == 175\nnext_Perfect_Square(179) == 176\nnext_Perfect_Square(180) == 177\nnext_Perfect_Square(181) == 178\nnext_Perfect_Square(182) == 179\nnext_Perfect_Square(183) == 180\nnext_Perfect_Square(184) ="
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert max_sum([5, 3, 8, 6, 7, 9, 4, 1]) == 29, 'Wrong!'\nassert max_sum([1, 9, 4, 8, 5, 7, 10, 3, 6]) == 29, 'Wrong!'\nassert max_sum([4, 1, 9, 9, 5, 1]) == 12, 'Wrong!'"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == \"__main__\":\n    # test max_sum\n    arr = [1, 10, 3, 4, 7, 2]\n    assert max_sum(arr) == 23\n    arr = [3, 4, 1, 5, 4, 7, 2, 10]\n    assert max_sum(arr) == 23\n    arr = [3, 4, 1, 5, 4, 7, 2, 2]\n    assert max_sum(arr) == 11\n    arr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert max_sum(arr) == 22\n    arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum([3, 8, -10, 5, 2, 9, -5, 4]) == 20, \"incorrect\"\nassert max_sum([3, 8, -10, 5, 2, 9, -5, 4]) == 34, \"incorrect\"\nassert max_sum([1, 3, 7, 9, 4, 8, 10, 13, 6, 7]) == 24, \"incorrect\"\nassert max_sum([1, 3, 7, 9, 4, 8, 10, 13, 6, 7]) == 24, \"incorrect\"\nassert max_sum([5, 4, 3, 2, 1]) == 5, \"incorrect\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum([1, 3, 2, 4, 6]) == 9, 'wrong'\nassert     max_sum([7, 3, 2, 4, 6]) == 9, 'wrong'\nassert     max_sum([2, 4, 6, 8, 10, 1]) == 17, 'wrong'\nassert     max_sum([1, 3, 2, 4, 6, 10]) == 13, 'wrong'\nassert     max_sum([100, 10, 1]) == 101, 'wrong'\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_sum([5, 3, 2, 1, -1, -2]) == 5, \"Test 1 failed\"\nassert max_sum([-12, -10, -5, -3, -1]) == -1, \"Test 2 failed\"\nassert max_sum([0, 5, 3, 2, 1, -1, -2]) == 10, \"Test 3 failed\"\nassert max_sum([5, 3, 2, 1, 0, -1, -2]) == 10, \"Test 4 failed\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('check the correctness of max_sum...')\nprint(max_sum([1, 3, 2, 5, 4, 7]))\n\nassert max_sum([1, 3, 2, 5, 4, 7]) == 9\n\nprint('PASSED!')\nprint('--------------------------------------------')\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(7) == 2.0\nassert     babylonian_squareroot(8) == 3.0\nassert     babylonian_squareroot(9) == 3.0\nassert     babylonian_squareroot(10) == 3.0\nassert     babylonian_squareroot(11) == 4.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(1)    ==     1\nassert     babylonian_squareroot(3)    ==     2\nassert     babylonian_squareroot(4)    ==     2\nassert     babylonian_squareroot(12)    ==     3\nassert     babylonian_squareroot(25)    ==     5\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (babylonian_squareroot(0) == 0), \\\n        f\"The output of babylonian_squareroot is incorrect. Expected 0, got {babylonian_squareroot(0)}\"\nassert     (babylonian_squareroot(1) == 1), \\\n        f\"The output of babylonian_squareroot is incorrect. Expected 1, got {babylonian_squareroot(1)}\"\nassert     (babylonian_squareroot(4) == 2), \\\n        f\"The output of babylonian_squareroot is incorrect. Expected 2, got {babylonian_squareroot(4)}\"\nassert     (babylonian_squareroot(9) == 3), \\\n        f\"The output of babylonian_squareroot is incorrect. Expected 3, got {babylonian_squareroot(9)}\"\nassert     (babylonian_squareroot(25) == 5), \\\n        f\"The output of babylonian_squareroot is incorrect. Expected 5, got {babylonian_squareroot(25)}\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert square_root(1) == 1.0\nassert square_root(2) == 1.41421\nassert square_root(10) == 1.414213\nassert square_root(100) == 1.414141\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(2) == 1.4142135623730951\nassert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(10) == 2.23606797749979\nassert     babylonian_squareroot(15) == 2.8284271247461903\nassert     babylonian_squareroot(4) == 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (babylonian_squareroot(9) == 3.0), \\\n    \"There is a mistake in the definition of babylonian_squareroot\"\nassert     (babylonian_squareroot(4) == 2.0), \\\n    \"There is a mistake in the definition of babylonian_squareroot\"\nassert     (babylonian_squareroot(6) == 3.0), \\\n    \"There is a mistake in the definition of babylonian_squareroot\"\nassert     (babylonian_squareroot(10) == 3.0), \\\n    \"There is a mistake in the definition of babylonian_squareroot\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nbabylonian_squareroot(9)\n\nbabylonian_squareroot(1)\n\nbabylonian_squareroot(8)\n\nbabylonian_squareroot(2)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lps(\"tactcoa\") == 3, \"Should be 3\"\nassert     lps(\"cacabcbc\") == 3, \"Should be 3\"\nassert     lps(\"cacaabcd\") == 4, \"Should be 4\"\nassert     lps(\"abcabcbc\") == 3, \"Should be 3\"\nassert     lps(\"\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nSOLUTION:\n\n1. Build a trie\n\n2. Sort the string\n\n3. Apply LPS\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lps(\"asdasddd\") == 3\nassert     lps(\"asdasdasddddasdasdddddddasdddddasdasdddasddddddasdddddasdddddddddddasddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(lps('noon')) # 5\nprint(lps('a')) # 1\nprint(lps('abc')) # 3\nprint(lps('abcd')) # 5\nprint(lps('abcdeb')) # 6\n\ndef lps1(str): \n    # build the table\n    n = len(str)\n    t = [[0 for x in range(n)] for y in range(n)]\n    i = 1\n    while i <= n: \n        j = 0\n        while j < i: \n            if str[j] == str[i-1]: \n                t[i][j] = t[i-1][j-1] + 2\n            else: \n                t[i][j] = max(t[i][j-1], t[i-1][j])\n            j += 1\n        i += 1\n    return t[n-1][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lps('aba') == 6\nassert lps('aaaa') == 5\nassert lps('abcd') == 6\nassert lps('sunday') == 7\nassert lps('tour') == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lps(\"\") == 0 \nassert     lps(\"a\") == 1 \nassert     lps(\"ab\") == 2 \nassert     lps(\"abac\") == 3 \nassert     lps(\"aabaa\") == 4 \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lps(\"banana\") == 5\nassert     lps(\"abb\") == 4\nassert     lps(\"abbba\") == 6\nassert     lps(\"abc\") == 3\nassert     lps(\"\") == 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef lps1(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert lps(\"abcda\") == 6, \"Wrong\"\nassert lps(\"babad\") == 6, \"Wrong\"\nassert lps(\"babad\") == 6, \"Wrong\"\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Harmonic_sum test passed')"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         harmonic_sum(5) == 5, 'incorrect'\nassert         harmonic_sum(10) == 55, 'incorrect'\nassert         harmonic_sum(17) == 137, 'incorrect'\nassert         harmonic_sum(24) == 244, 'incorrect'\nassert         harmonic_sum(100) == 1025, 'incorrect'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     harmonic_sum(5) == 3, \\\n    'harmonic_sum(5) == 3, but should be 3'\n\nassert     harmonic_sum(8) == 17, \\\n    'harmonic_sum(8) == 17, but should be 17'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef vowel_count(s):\n    '''\n    Write a function that takes in a string s and returns the number of vowels in that string.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nharmonic_sum(2) == 1\nharmonic_sum(3) == 2\nharmonic_sum(4) == 2\nharmonic_sum(5) == 3\nharmonic_sum(6) == 3\nharmonic_sum(7) == 4\nharmonic_sum(8) == 5\nharmonic_sum(9) == 8\nharmonic_sum(10) == 0\n\nprint('\\n')\n\ndef sum_squares(n):\n    '''\n    Write a function that takes in an integer n and calculates the sum of the squares of each integer from 1 to n.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     harmonic_sum(6) == 0, \"6-1 = 5.0\"\nassert     harmonic_sum(5) == 2.0, \"5-1 = 4.0\"\nassert     harmonic_sum(4) == 1.0, \"4-1 = 3.0\"\nassert     harmonic_sum(3) == 1.0, \"3-1 = 2.0\"\nassert     harmonic_sum(2) == 1.0, \"2-1 = 1.0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert harmonic_sum(1) == 1\nassert harmonic_sum(2) == 1\nassert harmonic_sum(5) == 5\nassert harmonic_sum(10) == 55\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(4) == 2\nassert     harmonic_sum(5) == 3\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     harmonic_sum(1) == 1.0\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 1.75\nassert     harmonic_sum(5) == 2.625\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     harmonic_sum(4) == 4\nassert     harmonic_sum(6) == 8\nassert     harmonic_sum(30) == 1260\nassert     harmonic_sum(0) == 0\nassert     harmonic_sum(1) == 1\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    intersection_array([1,2,2,1,3],[2,2,1,2,1,2]) == \n    [1,2]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef insertion_sort(nums):\n    '''\n    Write an insertion sort function.\n    '''\n    for i in range(1,len(nums)):\n        tmp = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > tmp:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = tmp\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef merge_array(array_nums1,array_nums2):\n    '''\n    Write a function to merge two arrays into one array.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([1,2,3,4,5,6,7,8,9],[9,5,2,8,1,9,6,7,4]) == [9,5,2,8,1]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[9,8,7,1,6,2,9,4,5]) == [1,6,2,8,4,9]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[1,8,6,2,4,3,5,9,7]) == [1,8,6,2,4,3]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[9,8,7,9,6,2,4,3,5]) == []\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[9,8,7,9,6,2,4,3,5,8]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,3,4,5,6,7],[1,3,7,9]) == True, \"First example\"\nassert     intersection_array([1,2,3,4,5,6,7],[2,3,4,5,6,7]) == True, \"Second example\"\nassert     intersection_array([1,2,3,4,5,6,7],[1,2,3,4,5,6,7]) == True, \"Third example\"\nassert     intersection_array([1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8]) == False, \"Fourth example\"\nassert     intersection_array([1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8,9]) == False, \"Fifth example\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection_array([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3, 4], \"Wrong result\"\n\nprint(\"You passed all test cases!\")\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert intersection_array([1,2,3,4],[4,5,6]) == [4, 5, 6], '''\nChecking the correctness of your implementation.\n'''\n\nassert intersection_array([1,2,3,4],[6,5,7,8]) == [], '''\nChecking the correctness of your implementation.\n'''\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_X((2, 3, 3, 4, 3, 5), 3) == 2\n    count_X((2, 3, 3, 4, 3, 5), 4) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_X([1,2,3],1) == 3\nassert count_X([1,1,1,1,1,1],1) == 5\nassert count_X([1,2,3],2) == 0\nassert count_X([1,2,3],5) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef factorial(n):\n    '''\n    Write a python function that takes in a number and returns the factorial of that number.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_X([1,2,3], 3) == 2\nassert     count_X([1,2,2,4], 2) == 3\nassert     count_X([3,2,1], 1) == 2\nprint('Congratulations, your function is correct')\nprint('Correctness of your code:', True)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_X((1,2,3), 2) == 1, 'Wrong'\nassert     count_X((1,2,3,3,3), 3) == 3, 'Wrong'\nassert     count_X((1,2,3), 3) == 0, 'Wrong'\n\ndef count_X_better(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_X((1, 2, 3, 4, 5), 3) == 2\nassert count_X((1, 2, 3, 4, 5), 4) == 1\nassert count_X((1, 2, 3, 4, 5), 10) == 0\nassert count_X((1, 2, 3, 4, 5), -1) == 4\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_X((1,2,3,4,5,6,7,8), 5) == 2\ncount_X((1,2,3,4,5,6,7,8), 8) == 1\ncount_X((1,2,3,4,5,6,7,8), 1) == 1\ncount_X((1,2,3,4,5,6,7,8), 9) == 0\ncount_X((1,2,3,4,5,6,7,8), 10) == 0\ncount_X((1,2,3,4,5,6,7,8), 11) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_X(('a', 'b', 'a', 'a'), 'a') == 2, \"Test Failed\"\nassert     count_X(('a', 'b', 'a', 'a'), 'b') == 1, \"Test Failed\"\nassert     count_X(('a', 'b', 'a', 'a'), 'c') == 0, \"Test Failed\"\n\nprint(\"Test passed\")\n\ndef count_X_2(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_X([1, 2, 1, 1, 1], 1) == 4\ncount_X([1, 2, 1, 1, 1], 3) == 1\ncount_X([1, 2, 1, 1, 1], 5) == 0\ncount_X([1, 2, 1, 1, 1], 1.5) == 1\ncount_X([1, 2, 1, 1, 1], '1') == 2\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([1,2,3],4) == [4,1,2,3]\nassert     insert_element([1,2,3],0) == [0,1,2,3]\nassert     insert_element([1,2,3],7) == [1,2,3,7]\nassert     insert_element([1,2,3],5) == [1,2,3,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([1,2,3,4,5,6,7],8) == [1,2,8,3,4,5,6,7]\nassert     insert_element([1,2,3,4,5,6,7],0) == [0,1,2,3,4,5,6,7]\nassert     insert_element([1,2,3,4,5,6,7],7) == [1,2,3,4,5,7,6,7]\nassert     insert_element([1,2,3,4,5,6,7],3) == [1,2,3,3,4,5,6,7]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     insert_element([1, 2, 3, 4, 5], 3) == [1, 3, 3, 4, 5], \"Wrong\"\nassert insert_element([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5, 6], \"Wrong\"\nassert insert_element([1, 2, 3, 4, 5], 0) == [0, 1, 2, 3, 4, 5], \"Wrong\"\nassert insert_element([1, 2, 3, 4, 5], -6) == [1, 2, 3, 4, 5, -6], \"Wrong\"\nassert insert_element([1, 2, 3], 4) == [4, 1, 2, 3], \"Wrong\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ninsert_element([1,2,3,4], 4) == [1,4,2,3,4]\nassert \ninsert_element([1,2,3,4], 0) == [0,1,2,3,4]\nassert \ninsert_element([1,2,3,4], 5) == [1,2,3,4,5]\nassert \ninsert_element([1,2,3,4], 5) == [1,2,3,4,5]\nassert \ninsert_element([1,2,3,4], 6) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([5,1,2,3,4],1) == [1,5,1,2,3,4]\nassert     insert_element([3,1,2,4],5) == [3,1,5,1,2,4]\nassert     insert_element([4,1,3],5) == [4,1,5,1,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     insert_element([],1) == [1]\nassert     insert_element([1,2,3],3) == [1,3,2,3]\nassert     insert_element([1,2,3,4,5,6,7,8,9],9) == [1,2,3,4,5,6,7,8,9,9]\nassert     insert_element([1,2,3,4,5,6,7,8,9],0) == [0,1,2,3,4,5,6,7,8,9,0]\nassert     insert_element([1,2,3,4,5,6,7,8,9],10) == [0,1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list_copy = list.copy()\n    list_copy.insert(0,element)\n    return list_copy\n\nassert"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([],1) == []\nassert     insert_element([1,2,3],1) == [1,1,2,3]\nassert     insert_element([1,2,3],3) == [1,2,3,3]\nassert     insert_element([1,2,3],4) == [4,1,2,3]\nassert     insert_element([1,2,3],0) == [0,1,2,3]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert([1 + 2j, 3 + 4j, 5 + 6j]) == (1.0 + 2.0j, 3.0 + 4.0j, 5.0 + 6.0j), \"Expected different output\"\nassert convert([1 + 1j, 3 + 3j, 5 + 5j]) == (1.0 + 1.0j, 3.0 + 3.0j, 5.0 + 5.0j), \"Expected different output\"\nassert convert([2j, 3j, 4j]) == (2.0j, 3.0j, 4.0j), \"Expected different output\"\n\ndef convert2(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n\n\n\n\ndef sqrroot(numbers):    \n    '''\n    Write a python function to calculate the square root of a complex number.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert(complex(-2.0, 3.0)) == '2+3i'\nassert     convert(complex(3.0, -2.0)) == '3+2i'\nassert     convert(complex(2.0, 2.0)) == '2+2i'\nassert     convert(complex(5.0, -2.0)) == '5+2i'\n\ndef eulercalc(u1, u2, v1, v2, d):\n    '''\n    Write a python function to calculate the angle between two vectors using euler's formula.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert convert([1+1j]) == ([0, 2j], \n                          [1+1j, 1-1j])\nassert convert([1-1j, 1-1j]) == ([-2j, 0], \n                                  [0, 2j])\nassert convert([1+1j, 1+1j]) == ([0, 2j], \n                                  [1+1j, 1-1j])\nassert convert([1-1j, 1-1j]) == ([-2j, 0], \n                                  [0, 2j])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef power(a,b):\n    '''\n    Write a python function to calculate the power of a and b.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_convert():\n    '''\n    Write a testcase to test the function convert.\n    '''\n    # None\n    assert convert() is None\n    # None\n    assert convert(None) is None\n    # [1]\n    assert convert([1]) == (1, 0)\n    # {1, 2}\n    "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert(cmath.rect(0.5, 1.5)) == cmath.rect(1.25, 1.25)\nassert     convert(cmath.rect(1.5, 0.5)) == cmath.rect(1.25, -0.25)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert((1.5 + 1.5j)) == (1.5, 1.5), 'Not correct'\nassert     convert((1.5, 2.5)) == (1.5, 2.5), 'Not correct'\nassert     convert((1.5, 2.5)) == (1.5, 2.5), 'Not correct'\nassert     convert((-1.5, 2.5)) == (-1.5, 2.5), 'Not correct'\nassert     convert((-1.5, -2.5)) == (-1.5, -2.5), 'Not correct'\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert([1, 2, 3]) == (1, 2, 1), \"Wrong output for convert([1, 2, 3])\"\nassert convert([1+3j, 2-5j, -1-0j]) == (1, -2, 0), \"Wrong output for convert([1+3j, 2-5j, -1-0j])\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,10]) == 10, \\\n    'Failed, count_integer should return 10'\nassert count_integer([1,2,3,4,5,6,7,8,9,10,'a',1.2,1.1]) == 10, \\\n    'Failed, count_integer should return 10'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_integer([1, 1, 2, 3, 3, 4]) == 4\nassert count_integer([4, 3, 3, 2, 4, 4]) == 5\nassert count_integer([4, 3, 3, 2, 4, 4, 1]) == 6\nassert count_integer([]) == 0\nassert count_integer([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_integer([1,2,3,4]) == 3\nassert count_integer([1,2,3,4,5]) == 4\nassert count_integer([1,2,3,4,5,6]) == 5\nassert count_integer([1,2,3,4,5,6,7]) == 6\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5\nassert     count_integer([1.1,2.2,3.3,4.4,5.5]) == 5\nassert     count_integer([0,False,'a','b',None]) == 4\nassert     count_integer([0,False,0,0,0,0,0,0,0,0]) == 5\n\nprint(\"TEST CASE COMPLETED\")\nprint()\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 20\nassert count_integer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 21\nassert count_integer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 21\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([]) == 0, 'Empty list should return 0'\nassert     count_integer([1,2,3,4,5,6,7,8,9]) == 9, 'List should have 9 elements'\nassert     count_integer([2,4,6,8,0]) == 5, 'List should have 5 elements'\n\nprint('All the tests are passed')\n\n\nprint('#' * 75)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([-10, -3, 2, 3, -10, -5, 10, -3, 7, 1]) == 4, \"Fail\"\nassert     count_integer([]) == 0, \"Fail\"\nassert     count_integer([1, 1, 1, 1]) == 4, \"Fail\"\nassert     count_integer(['a', 'b', 'c', 'd']) == 4, \"Fail\"\nassert     count_integer([-2, -1, 0, 1, 2, -10, -5, 10, -3, 7, 1]) == 6, \"Fail\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 4\nassert     count_integer([1.2, 3.4, 4.5, 4.4]) == 2\nassert     count_integer(['a', 1, 2, 3, 3.4, 4.5, 4.4]) == 3\n\n\n\n\ndef count_even(list1):\n    '''\n    Write a python function that returns the number of even elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_integer([]) == 0, \"Empty list\"\nassert     count_integer([0]) == 0, \"Single integer\"\nassert     count_integer([0, 1]) == 1, \"Single integer\"\nassert     count_integer([0, 1, 2]) == 2, \"Two integers\"\nassert     count_integer([0, -2, -1, -1]) == 4, \"Negative integers\"\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1,2,3], 0) == []\nassert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]\nassert     combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 3)]\nassert     combinations_colors([1,2,3], 3) == [(1, 2, 3)]\nassert     combinations_colors([1,2,3,4], 0) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors(['a', 'b', 'c'], 2) == [('a', 'b'), ('a', 'c'), ('b', 'c')], \"Wrong output\"\nassert     combinations_colors(['a', 'b', 'c'], 3) == [('a', 'b', 'c')], \"Wrong output\"\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [[(1, 1), (1, 2), (1, 3)], [(2, 1), (2, 2), (2, 3)], [(3, 1), (3, 2), (3, 3)]]\nassert     combinations_colors([1, 2, 3], 3) == [[(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)]]\nassert     combinations_colors([1, 2, 3], 5) == [[(1, 1, 1, 1, 1), (1, 1, 1, 1, 2), (1, 1, 1, 1, 3), (1, 1, 1, 2, 1), (1, 1, 1, 2, 2), (1, 1, 1, 2, 3), (1, 1, 1, 3, 1), (1, 1, 1, 3, 2), (1, 1, 1, 3, 3), (1, 1, 2, 1, 1), (1, 1, 2, 1, 2), (1, 1, 2, 1, 3), (1, 1, 2, 2, 1), (1, 1, 2, 2, 2), (1, 1, 2, 2, 3), (1, 1, 2, 3, 1), (1, 1, 2, 3, 2), (1, 1, 2, 3, 3), (1, 1, 3, 1, 1), (1, 1, 3, 1, 2), (1, 1, 3, 1, 3), (1, 1, 3, 2, 1), (1, 1, 3, 2, 2), (1, 1, 3, 2, 3), (1, 2, 1, 1, 1), (1, 2, 1, 1, 2), (1, 2, 1, 1, 3), (1, 2, 1, 2, 1), (1, 2, 1, 2, 2), (1, 2, 1, 2, 3), (1, 2, 1, 3, 1), (1, 2, 1, 3, 2), (1, 2, 1, 3, 3), (1, 2, 2, 1, 1), (1, 2, 2, 1, 2), (1, 2, 2, 1, 3), (1, 2, 2, 2, 1), (1, 2, 2, 2, 2), (1, 2, 2, 2, 3), (1, 2, 2, 3, 1), (1, 2, 2, 3, 2), (1, 2, 2, 3, 3), (1, 2, 3, 1, 1), (1, 2, 3, 1, 2), (1, 2, 3, 1, 3), (1, 2, 3, 2, 1), (1, 2, 3, 2, 2), (1, 2, 3, 2, 3), (1, 3, 1, 1, 1), (1, 3, 1, 1, 2), (1, 3, 1, 1, 3), (1, 3, 1, 2, 1), (1, 3, 1, 2, 2), (1, 3, 1, 2, 3), (1, 3, 1, 3, 1), (1, 3, 1, 3, 2), (1, 3, 1, 3, 3), (1, 3, 2, 1, 1), (1, 3, 2, 1, 2), (1, 3, 2, 1, 3), (1, 3, 2, 2, 1), (1, 3, 2, 2, 2), (1, 3, 2, 2, 3), (1, 3, 2, 3, 1), (1, 3, 2, 3, 2), (1, 3, 2, 3, 3), (1, 3, 3, 1, 1), (1, 3, 3, 1, 2), (1, 3, 3, 1, 3), (1, 3, 3, 2, 1), (1, 3, 3, 2, 2), (1, 3, 3, 2, 3), (2, 1, 1, 1, 1), (2, 1, 1, 1, 2), (2, 1, 1, 1, 3), (2, 1, 1, 2, 1), (2, 1, 1, 2, 2), (2, 1, 1, 2, 3), (2, 1, 1, 3, 1), (2, 1, 1, 3, 2), (2, 1, 1, 3, 3), (2, 1, 2, 1, 1), (2, 1, 2, 1, 2), (2, 1, 2, 1, 3), (2, 1, 2, 2, 1), (2, 1, 2, 2, 2), (2, 1, 2, 2, 3), (2, 1, 2, 3, 1), (2, 1, 2, 3, 2), (2, 1, 2, 3, 3), (2, 1, 3, 1, 1), (2, 1, 3, 1, 2), (2, 1, 3, 1, 3), (2, 1, 3, 2, 1), (2, 1, 3, 2, 2), (2, 1, 3, 2, 3), (2, 2, 1, 1, 1), (2, 2, 1, 1, 2), (2, 2, 1, 1, 3), (2, 2, 1, 2, 1), (2, 2, 1, 2, 2), (2, 2, 1, 2, 3), (2, 2, 1, 3, 1), (2, 2, 1, 3, 2), (2, 2, 1, 3, 3), (2, 2, 2, 1, 1), (2, 2, 2, 1, 2), (2, 2, 2, 1, 3), (2, 2, 2, 2, 1), (2, 2, 2, 2, 2), (2, 2, 2, 2, 3), (2, 2, 2, 3, 1), (2, 2, 2, 3, 2), (2, 2, 2, 3, 3), (2, 2, 3, 1, 1), (2, 2, 3, 1, 2), (2, 2, 3, 1, 3), (2, 2, 3, 2, 1), (2, 2, 3, 2, 2), (2, 2, 3, 2, 3), (2, 3, 1, 1, 1), (2, 3, 1, 1, 2), (2, 3, 1, 1, 3), (2, 3, 1, 2, 1), (2, 3, 1, 2, 2), (2, 3, 1, 2, 3), (2, 3, 1, 3, 1), (2, 3, 1, 3, 2), (2, 3, 1, 3, 3), (2, 3, 2, 1, 1), (2, 3, 2, 1, 2), (2, 3, 2, 1, 3), (2, 3, 2, 2, 1), (2, 3, 2, 2, 2), (2, 3, 2, 2, 3), (2, 3, 2, 3, 1), (2, 3, 2, 3, 2), (2, 3, 2, 3, 3), (2, 3, 3, 1, 1), (2, 3, 3, 1, 2), (2, 3, 3, 1, 3), (2, 3, 3, 2, 1), (2, 3, 3, 2, 2), (2, 3, 3, 2, 3), (3, 1, 1, 1, 1), (3, 1, 1, 1, 2), (3, 1, 1, 1, 3), (3, 1, 1, 2, 1), (3, 1, 1, 2, 2), (3, 1, 1, 2, 3), (3, 1, 1, 3, 1), (3, 1"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1, 2, 3], 3) ==     [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\nassert     combinations_colors(['a', 'b', 'c'], 2) == [['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'c']]\nassert combinations_colors([1, 2, 3], 5) ==     []\nassert combinations_colors(['a', 'b', 'c'], 3) == []\n\n\ndef all_subsets_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all the subsets (with repetition) of the list and returns a list with a tuple for each subset.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_subsets(nums, length, target):\n    '''\n    Write a function that takes in a list and length and target, and returns all subsets with sum equal to target from the original list.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors([1,2,3], 0) == []\nassert     combinations_colors([1,2,3], 1) == [[1, 2, 3]]\nassert     combinations_colors([1,2,3], 2) == [[1, 2], [1, 3], [2, 3]]\nassert     combinations_colors([1,2,3], 3) == [[1, 2, 3]]\nassert     combinations_colors([1,2,3], 4) == [[1, 2, 3, 4]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1, 2, 3, 4, 5], 2) == [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]\nassert combinations_colors([1, 2, 3], 2) == [[1, 2], [1, 3], [2, 3]]\nassert combinations_colors([1], 2) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([], 3) == []\nassert     combinations_colors([], 2) == []\nassert     combinations_colors([], 1) == []\nassert     combinations_colors([1, 2, 3], 3) == [(1, 2, 3)]\nassert     combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([1,2,3],1) == []\nassert     combinations_colors([1,2,3],2) == [[(1, 2, 3)]]\nassert     combinations_colors([1,2,3],3) == [[(1, 2, 3)], [(1, 3, 2)], [(1, 3, 3)], [(2, 1, 3)], [(2, 3, 1)], [(2, 3, 3)], [(3, 1, 2)], [(3, 2, 1)], [(3, 2, 3)], [(3, 3, 1)], [(3, 3, 2)]]\n\n\ndef get_max_number(l):\n    '''\n    Write a function that takes in a list of positive integers and returns the largest integer in that list.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_colors([1,2,3], 0) == []\nassert     combinations_colors([1,2,3], 2) == []\nassert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]\nassert     combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 3)]\nassert     combinations_colors([1,2,3], 3) == [(1, 2, 3)]\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(10) == 3\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(0) == 0, \"count_Primes_nums(0) => Expected 0, Actual %d\"%count_Primes_nums(0)\nassert count_Primes_nums(1) == 0, \"count_Primes_nums(1) => Expected 0, Actual %d\"%count_Primes_nums(1)\nassert count_Primes_nums(2) == 2, \"count_Primes_nums(2) => Expected 2, Actual %d\"%count_Primes_nums(2)\nassert count_Primes_nums(3) == 2, \"count_Primes_nums(3) => Expected 2, Actual %d\"%count_Primes_nums(3)\nassert count_Primes_nums(4) == 3, \"count_Primes_nums(4) => Expected 3, Actual %d\"%count_Primes_nums(4)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(6) == 5\nassert     count_Primes_nums(8) == 6\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_Primes_nums(0) == 0\nassert count_Primes_nums(1) == 0\nassert count_Primes_nums(2) == 0\nassert count_Primes_nums(3) == 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(5) == 2\nassert     count_Primes_nums(8) == 4\nassert     count_Primes_nums(7) == 3\nassert     count_Primes_nums(10) == 4\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef count_Primes_nums_revised(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    count_Primes_nums(1) == 0\n    count_Primes_nums(10) == 5\n    count_Primes_nums(20) == 8\n    count_Primes_nums(0) == 0\n    count_Primes_nums(-1) == 0\n    count_Primes_nums(-10) == 0\n    count_Primes_nums(-21) == 0\n    count_Primes_nums(2147483647) == 49562\n    count_Primes_nums(2147483648) == 524287\n    count_Primes_nums(2147483649) == 0\n\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_Primes_nums(100) == 25\nassert count_Primes_nums(10) == 6\nassert count_Primes_nums(1) == 0\n\nprint(\"Passed\")\nprint()\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_Primes_nums(0) == 0\ncount_Primes_nums(1) == 0\ncount_Primes_nums(2) == 0\ncount_Primes_nums(3) == 1\ncount_Primes_nums(4) == 2\ncount_Primes_nums(10) == 5\ncount_Primes_nums(20) == 5\ncount_Primes_nums(22) == 5\ncount_Primes_nums(23) == 5\ncount_Primes_nums(24) == 5\ncount_Primes_nums(25) == 5\ncount_Primes_nums(26) == 5\ncount_Primes_nums(27) == 5\ncount_Primes_nums(28) == 5\ncount_Primes_nums(29) == 5\ncount_Primes_nums(30) == 5\ncount_Primes_nums(31) == 5\ncount_Primes_nums(32) == 5\ncount_Primes_nums(33) == 5\ncount_Primes_nums(34) == 5\ncount_Primes_nums(35) == 5\ncount_Primes_nums(36) == 5\ncount_Primes_nums(37) == 5\ncount_Primes_nums(38) == 5\ncount_Primes_nums(39) == 5\ncount_Primes_nums(40) == 5\ncount_Primes_nums(41) == 5\ncount_Primes_nums(42) == 5\ncount_Primes_nums(43) == 5\ncount_Primes_nums(44) == 5\ncount_Primes_nums(45) == 5\ncount_Primes_nums(46) == 5\ncount_Primes_nums(47) == 5\ncount_Primes_nums(48) == 5\ncount_Primes_nums(49) == 5\ncount_Primes_nums(50) == 5\ncount_Primes_nums(51) == 5\ncount_Primes_nums(52) == 5\ncount_Primes_nums(53) == 5\ncount_Primes_nums(54) == 5\ncount_Primes_nums(55) == 5\ncount_Primes_nums(56) == 5\ncount_Primes_nums(57) == 5\ncount_Primes_nums(58) == 5\ncount_Primes_nums(59) == 5\ncount_Primes_nums(60) == 5\ncount_Primes_nums(61) == 5\ncount_Primes_nums(62) == 5\ncount_Primes_nums(63) == 5\ncount_Primes_nums(64) == 5\ncount_Primes_nums(65) == 5\ncount_Primes_nums(66) == 5\ncount_Primes_nums(67) == 5\ncount_Primes_nums(68) == 5\ncount_Primes_nums(69) == 5\ncount_Primes_nums(70) == 5\ncount_Primes_nums(71) == 5\ncount_Primes_nums(72) == 5\ncount_Primes_nums(73) == 5\ncount_Primes_nums(74) == 5\ncount_Primes_nums(75) == 5\ncount_Primes_nums(76) == 5\ncount_Primes_nums(77) == 5\ncount_Primes_nums(78) == 5\ncount_Primes_nums(79) == 5\ncount_Primes_nums(80) == 5\ncount_Primes_nums(81) == 5\ncount_Primes_nums(82) == 5\ncount_Primes_nums(83) == 5\ncount_Primes_nums(84) == 5\ncount_Primes_nums(85) == 5\ncount_Primes_nums(86) == 5\ncount_Primes_nums(87) == 5\ncount_Primes_nums(88) == 5\ncount_Primes_nums(89) == 5\ncount_Primes_nums(90) == 5\ncount_Primes_nums(91) == 5\ncount_Primes_nums(92) == 5\ncount_Primes_nums(93) == 5\ncount_Primes_nums(94) == 5\ncount_Primes_nums(95) == 5\ncount_Primes_nums(96) == 5\ncount_Primes_nums(97) == 5\ncount_Primes_nums(98) == 5\ncount_Primes_nums(99) == 5\ncount_Primes_nums(100) == 5\ncount_Primes_nums(101) == 5\ncount_Primes_nums(102) == 5\ncount_Primes_nums(103) == 5\ncount_Primes_nums(104) == 5\ncount_Primes_nums(105) == 5\ncount_Primes_nums(106) == 5\ncount_Primes_nums(107) == 5\ncount_Primes_nums(108) == 5\ncount_Primes_nums(109) == 5\ncount_Primes_nums(110) == 5\ncount_Primes_nums(111) == 5\ncount_Primes_nums(112) == 5\ncount_Primes_nums(113) == 5\ncount_Primes_nums(114) == 5\ncount_Primes_nums(115) == 5\ncount_Primes_nums(116) == 5\ncount_Primes_nums(117) == 5\ncount_Primes_nums(118) == 5\ncount_Primes_nums(119) == 5\ncount_Primes_nums(120) == 5\ncount_Primes_nums(121) == 5\ncount_Primes_nums(122) == 5\ncount_Primes_nums(123) == 5\ncount_Primes_nums(124) == 5\ncount_Primes_nums(125) == 5\ncount_Primes_nums(126) == 5\ncount_Primes_nums(127) == 5\ncount_Primes_nums(128) == 5\ncount_Primes_nums(129) == 5\ncount_Primes_nums(130) == 5\ncount_Primes_nums(131) == 5\ncount_Primes_nums(132) == 5\ncount_Primes_nums(133) == 5\ncount_Primes_nums(134) == 5\ncount_Primes_nums(135) == 5\ncount_Primes_nums(136) == 5\ncount_Primes_nums(137) == 5\ncount_Primes_nums(138) == 5\ncount_Primes_nums(139) == 5\ncount_Primes_nums(140) == 5\ncount_Primes_nums(141) == 5\ncount_Primes_nums(142) == 5\ncount_Primes_nums(143) == 5\ncount_Primes_nums(144) == 5\ncount_Primes_nums(145) == 5\ncount_Primes_nums(146) == 5\ncount_Primes_nums(147) == 5\ncount_Primes_nums(148) == 5\ncount_Primes_nums(149) == 5\ncount_Primes_nums(150) == 5\ncount_Primes_nums(151) == 5\ncount_Primes_nums(152) == 5\ncount_Primes_nums(153) == 5\ncount_Primes_nums(154) == 5\ncount_Primes_nums(155) == 5\ncount_Primes_nums(156) == 5\ncount_Primes_nums(157) == 5\ncount_Primes_nums(158) == 5\ncount_Primes_nums(159) == 5\ncount_Primes_nums(160) == 5\ncount_Primes_nums(161) == 5\ncount_Primes_nums(162) == 5\ncount_Primes_nums(163) == 5\ncount_Primes_nums(164) == 5\ncount_Primes_nums(165) == 5\ncount_Primes_nums(166) == 5\ncount"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(2,1) == (2,1)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(1,2) == (1,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(2,3) == (3,2)\nassert swap_numbers(5,6) == (6,5)\nassert swap_numbers(8,9) == (9,8)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(1,1) == (1, 1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(10,20) == (20,10)\nassert     swap_numbers(20,10) == (10,20)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(1,2) == (2, 1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert swap_numbers(1,1) == (1,1)\nassert swap_numbers(3,4) == (4,3)\nassert swap_numbers(1,1.5) == (1.5,1)\nassert swap_numbers(1.5,1) == (1.5,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert swap_numbers(10,20) == (20,10)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert swap_numbers(1,2) == (2, 1)\nassert swap_numbers(2,1) == (1, 2)\nassert swap_numbers(1,2) == (2, 1)\nprint('Success!')\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert swap_numbers(1, 1) == (1, 1)\nassert swap_numbers(2, 1) == (1, 2)\n\ndef word_count(sentence):\n    '''\n    Write a function that takes in a sentence and returns a dictionary that contains the number of times each word appears in the\n    sentence and the total number of words in the sentence.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((1, 2), (3, 4)) == (1, 4)\nassert     maximize_elements((1, 2, 3), (4, 5, 6)) == (1, 2)\nassert     maximize_elements((1, 2, 3, 4, 5), (6, 7, 8)) == (1, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((1, 2, 3), (2, 4, 6)) == (2, 4, 6)\nassert     maximize_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\nassert     maximize_elements((3, 4, 5), (1, 2, 6)) == (3, 4, 5)\nassert     maximize_elements((1, 2, 3), (4, 5, 7)) == (1, 2, 3)\nassert     maximize_elements((1, 2, 3, 4, 5), (3, 5, 7, 9, 10)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximize_elements((3,4,5), (4,5,6)) == (4,5,6)\nassert     maximize_elements((1,2,3), (1,2,3)) == (1,2,3)\n\nassert maximize_elements((1,2,3), (2,3,4)) == (2,3,4)\nassert maximize_elements((1,2,3), (1,2,3)) == (1,2,3)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((1,2),(2,1)) == (2,1)\nassert     maximize_elements((2,1),(1,2)) == (2,1)\nassert     maximize_elements((2,2),(2,1)) == (2,2)\nassert     maximize_elements((1,1),(3,1)) == (3,1)\nassert     maximize_elements((2,2),(1,1)) == (2,2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((2, -3), (3, 4)) == (4, -3)\nassert     maximize_elements((0, -1), (0, 1)) == (0, 0)\nassert     maximize_elements((0, -1), (1, 1)) == (1, 0)\n\ndef max_num(num1, num2, num3):\n    '''\n    Write a function to find out the maximum value from three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((2, 4), (3, 9)) == (4, 9)\nassert     maximize_elements((6, 4), (3, 9)) == (6, 4)\nassert     maximize_elements((4, 9), (3, 6)) == (9, 6)\nassert     maximize_elements((1, 1), (1, 1)) == (1, 1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6), \"wrong result\"\nassert     maximize_elements((1, 2, 3), (5, 6, 7)) == (6, 5, 3), \"wrong result\"\nassert     maximize_elements((4, 5, 6), (1, 2, 3)) == (4, 5, 6), \"wrong result\"\nassert     maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6), \"wrong result\"\nassert     maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6), \"wrong result\"\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximize_elements((-2, 2), (1, -1)) == (2, 2)\nassert     maximize_elements((1, 2), (-1, -2)) == (2, 2)\nassert     maximize_elements((-2, 2), (2, -1)) == (2, -2)\nassert     maximize_elements((-2, 2), (-2, 1)) == (-2, -2)\nassert     maximize_elements((1, 2), (1, -1)) == (1, -1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((0, 3, 5, 6, 3), (1, 2, 4, 6, 5)) == (5, 6, 5, 6, 5)\nassert     maximize_elements((0, 1, 5, 6, 3), (1, 2, 4, 6, 5)) == (5, 6, 5, 6, 5)\n\ndef get_max_three_element(lst):\n    '''\n    Write a function to get the maximum three elements in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     newman_prime(2) == 2\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\nassert     newman_prime(6) == 13\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnewman_prime(0) == 2\nassert\nnewman_prime(1) == 2\nassert\nnewman_prime(2) == 3\nassert\nnewman_prime(5) == 11\nassert\nnewman_prime(10) == 7919\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # examples\nn = 4\nassert newman_prime(n) == 11\nn = 5\nassert newman_prime(n) == 17\nn = 6\nassert newman_prime(n) == 19\nn = 7\nassert newman_prime(n) == 23\nn = 8\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     newman_prime(11) == 19, \"Wrong\"\nassert     newman_prime(14) == 23, \"Wrong\"\nassert     newman_prime(25) == 29, \"Wrong\"\n\nprint(\"PASSED\")\n\n\n'''\nExample:\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef newman_prime_long(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     division_elements((2, 4, 6, 8), (2, 4, 6, 8)) == (1, 2, 1, 1)\nassert     division_elements((10, 10, 10, 10), (1, 2, 3, 4)) == (1, 2, 1, 1)\nassert     division_elements((1, 0, 2, 0), (1, 2, 3, 4)) == (1, 2, 1, 0)\nassert     division_elements((0, 1, 0, 1), (1, 2, 3, 4)) == (0, 1, 0, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements((1,2,3,4),(1,2,3,4)) == None\nassert     division_elements((1,2,3,4),(4,3,2,1)) == None\nassert     division_elements((1,2,3,4),(4,3,2,1)) == None\nassert     division_elements((1,2,3,4),(1,2,3,4)) == None\nassert     division_elements((1,2,3,4),(2,3,4,1)) == None\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((1,2),(3,4)) == (0,0.5)\nassert     division_elements((2,4),(1,2)) == (2,0.5)\nassert     division_elements((8,4),(2,2)) == (4,2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndivision_elements((4, 6), (2, 3)) == (2.0, 3.0)\n\nassert division_elements((1, 2), (3, 4)) == (0.5, 0.5)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements((3, 4), (1, 2)) == (2, 2)\nassert     division_elements((4, 2), (1, 2)) == (4, 2)\nassert     division_elements((4, 2), (2, 2)) == (1, 1)\nassert     division_elements((1, 0), (2, 0)) == (1, 0)\nassert     division_elements((1, 0), (1, 0)) == (1, 0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     division_elements((1,2,3),(10,20,30)) == (1,2,3)\nassert     division_elements((1,2,3),(100,0,30)) == (1,2,3)\nassert     division_elements((1,2,3),(100,0,0)) == (1,0,0)\nassert     division_elements((1,2,3),(0,0,0)) == (1,0,0)\nassert     division_elements((1,2,3),(10,20,30)) == (0,0,0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements((1,2), (1,2)) == (1,1), \"You are dividing tuples incorrectly!\"\nassert     division_elements((1,2), (2,4)) == (0.5,1.0), \"You are dividing tuples incorrectly!\"\nassert     division_elements((3,4), (2,4)) == (1.5,2.0), \"You are dividing tuples incorrectly!\"\nassert     division_elements((2,4), (3,4)) == (0.0,2.0), \"You are dividing tuples incorrectly!\"\nassert     division_elements((1,2), (1,2)) == (1,1), \"You are dividing tuples incorrectly!\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1,2),(3,4)) == (0.5,0.25)\nassert     division_elements((1,2),(3,)) == (0.5,0.5)\nassert     division_elements((1,2),()) == (0.5,0.5)\nassert     division_elements((1,),(2,4)) == (0.5,0.5)\nassert     division_elements((1,),(2,)) == (0.5,0.5)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements((1,2,3),(1,2,3)) == (1.0,2.0,3.0)\nassert     division_elements((1,2,3),(1,0,3)) == (1.0,0.0,1.0)\nassert     division_elements((2,4,6),(1,2,3)) == (2.0,2.0,3.0)\nassert     division_elements((3,2,4),(1,2,3)) == (3.0,1.5,3.0)\nassert     division_elements((1,2,3),(0,2,4)) == (1.0,0.0,3.0)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsplit_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == (\n    [1, 2, 3, 4, 5, 6],\n    [7, 8, 9])\n\ndef n_sum(n, L):\n    '''\n    Write a function that takes in an integer n and a list of integers L and returns an integer that is the n-sum of the values in L.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4], 1) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 4) == ([1, 2], [3, 4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4], [5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_two_parts([0, 1, 2, 3, 4], 2) == ([0, 1, 2], [3, 4])\nassert     split_two_parts([0, 1, 2, 3, 4], 4) == ([0, 1, 2, 3], [4])\nassert     split_two_parts([0, 1, 2, 3, 4, 5, 6, 7], 2) == ([0, 1, 2, 3], [4, 5, 6, 7])\nassert     split_two_parts([0, 1, 2, 3, 4, 5, 6, 7], 3) == ([0, 1, 2], [3, 4, 5, 6, 7])\nassert     split_two_parts([0, 1, 2, 3, 4, 5, 6, 7], 0) == ([0, 1, 2, 3, 4, 5, 6, 7], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7,8,9,10], 5) == ([1,2,3,4,5],[6,7,8,9,10])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9,10], 6) == ([1,2,3,4,5],[6,7,8,9,10])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9,10], 11) == ([1,2,3,4,5,6,7,8,9,10])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9,10], 10) == ([1,2,3,4,5,6,7,8,9,10])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9,10], 1) == ([1,2,3,4,5,6,7,8,9,10], )\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \n\nassert split_two_parts([1,2,3,4], 2) == ([1,2], [3,4])\nassert split_two_parts([1,2,3,4], 3) == ([1,2,3], [4])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ((1, 2), (3, 4))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ((1, 2, 3, 4), (5, 6))\nassert     split_two_parts([1, 2, 3, 4], 3) == ((1, 2, 3), (4,))\nassert     split_two_parts([1, 2, 3], 0) == ((1, 2, 3),)\nassert     split_two_parts([1, 2, 3], -1) == ((1, 2, 3),)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dog_age(10) == 2\nassert     dog_age(60) == 8\nassert     dog_age(100) == 10\nassert     dog_age(60) == 8"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dog_age(1) == 1\nassert     dog_age(3) == 5\nassert     dog_age(1.5) == 5.5\nassert     dog_age(3.5) == 7.5\n\n\ndef do_if(statement, condition, if_statement):\n    '''\n    Write a function that takes a boolean expression and a statement that is\n    executed if the boolean expression evaluates to True.\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dog_age(2) == 3\nassert     dog_age(90) == 95\nassert     dog_age(10) == 5\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(8) == 37\nassert     dog_age(12) == 49\nassert     dog_age(36) == 37\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dog_age(0) == 0, 'dog_age(0) should be 0'\nassert     dog_age(5) == 5, 'dog_age(5) should be 5'\nassert     dog_age(10) == 10, 'dog_age(10) should be 10'\nassert     dog_age(60) == 60, 'dog_age(60) should be 60'\nassert     dog_age(93) == 93, 'dog_age(93) should be 93'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dog_age(10) == 0\nassert     dog_age(5) == 5\nassert     dog_age(7) == 7\nassert     dog_age(11) == 8\nassert     dog_age(0) == 0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dog_age(h_age=5) == 2\nassert     dog_age(h_age=10) == 7\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_split([1,2,3,4,5], 1) == [[1], [2], [3], [4], [5]]\nassert     list_split([1,2,3,4,5], 3) == [[1], [2], [3], [4], [5]]\nassert     list_split([1,2,3,4,5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1,2,3,4,5], 4) == [[1], [2], [3], [4], [5]]\nassert     list_split([1,2,3,4,5], 5) == [[1], [2], [3], [4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert list_split([1, 2, 3, 4, 5, 6], 3) == [[1], [2], [3, 4, 5], [6]]\nassert list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4, 5], [6]]\nassert list_split([1, 2, 3, 4, 5, 6], 1) == [[1], [2], [3, 4, 5], [6]]\nassert list_split([1, 2, 3, 4, 5, 6], 5) == [[1], [2], [3], [4, 5], [6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert list_split(['hi', 'bye', 'hello'], 1) == [['hi'], ['bye'], ['hello']]\nassert list_split(['hi', 'bye', 'hello'], 3) == [['hi', 'bye'], ['hello']]\nassert list_split(['hi', 'bye', 'hello'], 5) == [['hi', 'bye', 'hello']]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3], [4,5,6], [7,8,9]]\nassert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3], [4,5,6], [7,8,9]]\nassert list_split([1,2,3,4,5,6,7,8,9], 5) == [[1,2,3,4,5], [6,7,8,9]]\nassert list_split([1,2,3,4,5,6,7,8,9], 8) == [[1,2,3,4,5,6,7,8,9]]\nassert list_split([1,2,3,4,5,6,7,8,9], 0) == [[1,2,3,4,5,6,7,8,9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 2) == [['a', 'b'], ['c', 'd'], ['e', 'f'], ['g']]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 2) == [[1, 2], [3, 4], [5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\n\ndef a_and_b(list1, list2):\n    '''\n    Write a function that takes in two lists of integers, and returns a new list containing the elements that are shared between the two lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_split([1, 2, 3, 4], 1) == [[1], [2], [3], [4]]\nassert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 3) == [[1, 2, 3], [4]]\nassert     list_split([1, 2, 3, 4], 4) == [[1], [2], [3], [4]]\n\n'''\nWrite a function that takes in a list of integers and returns True if every integer in the list is positive, and False otherwise.\n'''\ndef check_positive_integers(L):\n    '''\n    Write a function that takes in a list of integers and returns True if every integer in the list is positive, and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_split([1,2,3,4], 1) == [[1],[2],[3],[4]], \"Wrong\"\nassert     list_split([1,2,3,4], 2) == [[1,2],[3,4]], \"Wrong\"\nassert     list_split([1,2,3,4], 3) == [[1,2,3],[4]], \"Wrong\"\nassert     list_split([1,2,3,4], 4) == [[1,2],[3,4]], \"Wrong\"\nassert     list_split([1,2,3,4], 5) == [[1,2],[3,4]], \"Wrong\"\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6], 1) == [[1], [2], [3], [4], [5], [6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 4) == [[1, 2, 3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 5) == [[1, 2, 3, 4, 5], [6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 4) == [[1, 2, 3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 5) == [[1, 2, 3, 4, 5], [6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 6) == [[1, 2, 3, 4, 5, 6]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsurface_cube(1) == 1, '1x1 should have 1 surface area'\nassert     lateralsurface_cube(2) == 2, '2x2 should have 2 surface areas'\nassert     lateralsurface_cube(3) == 6, '3x3 should have 6 surface areas'\nassert     lateralsurface_cube(4) == 12, '4x4 should have 12 surface areas'\nassert     lateralsurface_cube(5) == 20, '5x5 should have 20 surface areas'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(2) == 4\nassert     lateralsurface_cube(3) == 7\nassert     lateralsurface_cube(4) == 10\nassert     lateralsurface_cube(5) == 12\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\\n')\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    lateralsurface_cube(1) == 2\n    lateralsurface_cube(2) == 4\n    lateralsurface_cube(3) == 6\n    lateralsurface_cube(4) == 8\n    lateralsurface_cube(5) == 10\n    lateralsurface_cube(6) == 12\n    lateralsurface_cube(7) == 14\n    lateralsurface_cube(8) == 16\n    lateralsurface_cube(9) == 18\n    lateralsurface_cube(10) == 20\n\ndef lateralsurface_pyramid(l):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its base and height.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsurface_cube(1) == 2\nassert     lateralsurface_cube(3) == 10\nassert     lateralsurface_cube(4) == 20\nassert     lateralsurface_cube(5) == 30\nassert     lateralsurface_cube(6) == 42\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsquare_Sum(5) == 0, \"incorrect output\"\nsquare_Sum(5) == (25 * 25), \"incorrect output\""
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_Sum(2) == 9, \"Square Sum of 2 should be 9\"\nassert     square_Sum(4) == 14, \"Square Sum of 4 should be 14\"\nassert     square_Sum(10) == 385, \"Square Sum of 10 should be 385\"\n\n\ndef square_Sum_Custom(n): \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i ** 2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef my_max(a,b):\n    '''\n    Write a python function that takes in two integers and returns the maximum of the two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_Sum(2) == 1\nsquare_Sum(5) == 32\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(3) == 2,'return 2 instead of %s' %square_Sum(3)\nassert     square_Sum(5) == 36,'return 36 instead of %s' %square_Sum(5)\nassert     square_Sum(7) == 46,'return 46 instead of %s' %square_Sum(7)\nassert     square_Sum(9) == 78,'return 78 instead of %s' %square_Sum(9)\nassert     square_Sum(11) == 99,'return 99 instead of %s' %square_Sum(11)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_Sum(1) == 1, 'Should be 1'\nassert     square_Sum(5) == 28, 'Should be 28'\nassert     square_Sum(4) == 44, 'Should be 44'\nassert     square_Sum(3) == 25, 'Should be 25'\nassert     square_Sum(2) == 4, 'Should be 4'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_star_num(1) == 1 \nassert     find_star_num(2) == 2 \nassert     find_star_num(3) == 3 \nassert     find_star_num(4) == 4 \nassert     find_star_num(5) == 5 \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 5\nassert     find_star_num(4) == 7\nassert     find_star_num(5) == 11\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('[TEST] PASS :: find_star_num')\n\n'''\n*****************************************************************************************\nQ. In a given list, write a python function to find the smallest number in the list.\n'''\ndef find_min(n):\n    '''\n    Write a function to find the smallest number in the list.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_star_num(1) == 1\n    find_star_num(2) == 3\n    find_star_num(3) == 6\n    find_star_num(4) == 10\n    find_star_num(5) == 15\n    find_star_num(6) == 21\n    find_star_num(7) == 28\n    find_star_num(8) == 36\n    find_star_num(9) == 45\n    find_star_num(10) == 55\n    find_star_num(11) == 63\n    find_star_num(12) == 72\n    find_star_num(13) == 81\n    find_star_num(14) == 90\n    find_star_num(15) == 99\n    find_star_num(16) == 108\n    find_star_num(17) == 117\n    find_star_num(18) == 126\n    find_star_num(19) == 135\n    find_star_num(20) == 144\n    find_star_num(21) == 153\n    find_star_num(22) == 162\n    find_star_num(23) == 171\n    find_star_num(24) == 180\n    find_star_num(25) == 189\n    find_star_num(26) == 198\n    find_star_num(27) == 207\n    find_star_num(28) == 216\n    find_star_num(29) == 225\n    find_star_num(30) == 234\n    find_star_num(31) == 243\n    find_star_num(32) == 252\n    find_star_num(33) == 261\n    find_star_num(34) == 270\n    find_star_num(35) == 279\n    find_star_num(36) == 288\n    find_star_num(37) == 297\n    find_star_num(38) == 306\n    find_star_num(39) == 315\n    find_star_num(40) == 324\n    find_star_num(41) == 333\n    find_star_num(42) == 342\n    find_star_num(43) == 351\n    find_star_num(44) == 360\n    find_star_num(45) == 369\n    find_star_num(46) == 378\n    find_star_num(47) == 387\n    find_star_num(48) == 396\n    find_star_num(49) == 405\n    find_star_num(50) == 414\n    find_star_num(51) == 423\n    find_star_num(52) == 432\n    find_star_num(53) == 441\n    find_star_num(54) == 450\n    find_star_num(55) == 459\n    find_star_num(56) == 468\n    find_star_num(57) == 477\n    find_star_num(58) == 486\n    find_star_num(59) == 495\n    find_star_num(60) == 504\n    find_star_num(61) == 513\n    find_star_num(62) == 522\n    find_star_num(63) == 531\n    find_star_num(64) == 540\n    find_star_num(65) == 549\n    find_star_num(66) == 558\n    find_star_num(67) == 567\n    find_star_num(68) == 576\n    find_star_num(69) == 585\n    find_star_num(70) == 594\n    find_star_num(71) == 603\n    find_star_num(72) == 612\n    find_star_num(73) == 621\n    find_star_num(74) == 630\n    find_star_num(75) == 639\n    find_star_num(76) == 648\n    find_star_num(77) == 657\n    find_star_num(78) == 666\n    find_star_num(79) == 675\n    find_star_num(80) == 684\n    find_star_num(81) == 693\n    find_star_num(82) == 702\n    find_star_num(83) == 711\n    find_star_num(84) == 720\n    find_star_num(85) == 729\n    find_star_num(86) == 738\n    find_star_num(87) == 747\n    find_star_num(88) == 756\n    find_star_num(89) == 765\n    find_star_num(90) == 774\n    find_star_num(91) == 783\n    find_star_num(92) == 792\n    find_star_num(93) == 801\n    find_star_num(94) == 810\n    find_star_num(95) == 819\n    find_star_num(96) == 828\n    find_star_num(97) == 837\n    find_star_num(98) == 846\n    find_star_num(99) == 855\n    find_star_num(100) == 864\n    find_star_num(101) == 873\n    find_star_num(102) == 882\n    find_star_num(103) == 891\n    find_star_num(104) == 900\n    find_star_num(105) == 909\n    find_star_num(106) == 918\n    find_star_num(107) == 927\n    find_star_num(108) == 936\n    find_star_num(109) == 945\n    find_star_num(110) == 954\n    find_star_num(111) == 963\n    find_star_num(112) == 972\n    find_star_num(113) == 981\n    find_star_num(114) == 990\n    find_star_num(115) == 999\n    find_star_num(116) == 1008\n    find_star_num(117) == 1017\n    find_star_num(118) == 1026\n    find_star_num(119) == 1035\n    find_star_num(120) == 1044\n    find_star_num(121) == 1053\n    find_star_num(122) == 1062\n    find_star_num(123) == 1071\n    find_star_num(124) == 1080\n    find_star_num(125) == 1089\n    find_star_num(126) == 1098\n    find_star_num(127) == 1107\n    find_star_num(128) == 1116\n    find_star_num(129) == 1125\n    find_star_num(130) == 1134\n    find_star_num(131) == 1153\n    find_star_num(132) == 1162\n    find_star_num(133) == 1171\n    find_star_num(134) == 1180\n    find_star_num(135) == 1189\n    find_star_num(136) == 1198\n    find_star_num(137) == 1207\n    find_star_num(138) == 1216\n    find_star_num(139) == 1225\n    find_star_num(140) == 1234\n    find_star_num(141) == 1243\n    find_star_num(142) == 1252\n    find_star_num(143) == 1261\n    find_star_num(144) == 1270\n    find_star_num(145) == 1279\n    find_star_num(146) == 1288\n    find_star_num(147) == 1297\n    find_star_num(148) == 1306\n    find_star_num(149) == 1315\n    find_star_num(150) == 1324\n    find_star_num(151) == 1333\n    find_star_num(152) == 1342\n    find_star_num(153) == 1351\n    find_star_num(154) == 1360\n    find_star_num(155) == 1369\n    find_star_num(156) == 1378\n    find_star_num(157) == 1387\n    find_star_num(158) == 1396\n    find_star_nu"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 15\nassert     find_star_num(4) == 37\nassert     find_star_num(5) == 204\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_star_num(1) == 2\nfind_star_num(2) == 5\nfind_star_num(3) == 8\nfind_star_num(4) == 13\nfind_star_num(5) == 25\nfind_star_num(6) == 35\nfind_star_num(7) == 57\nfind_star_num(8) == 78\nfind_star_num(9) == 125\nfind_star_num(10) == 232\nfind_star_num(11) == 541\nfind_star_num(12) == 788\nfind_star_num(13) == 1325\nfind_star_num(14) == 3871\nfind_star_num(15) == 8495\nfind_star_num(16) == 15721\nfind_star_num(17) == 48645\nfind_star_num(18) == 119699\nfind_star_num(19) == 182682\nfind_star_num(20) == 374829\nfind_star_num(21) == 579690\nfind_star_num(22) == 919432\nfind_star_num(23) == 1532379\nfind_star_num(24) == 4270853\nfind_star_num(25) == 5613961\nfind_star_num(26) == 9018752\nfind_star_num(27) == 15798728\nfind_star_num(28) == 42528876\nfind_star_num(29) == 56430673\nfind_star_num(30) == 81498254\nfind_star_num(31) == 146779776\nfind_star_num(32) == 346637225\nfind_star_num(33) == 543125755\nfind_star_num(34) == 787397905\nfind_star_num(35) == 1166448767\nfind_star_num(36) == 273218165\nfind_star_num(37) == 496299225\nfind_star_num(38) == 845191753\nfind_star_num(39) == 1438481751\nfind_star_num(40) == 336624719\nfind_star_num(41) == 536771515\nfind_star_num(42) == 774388043\nfind_star_num(43) == 1088485499\nfind_star_num(44) == 2612606915\nfind_star_num(45) == 466878839\nfind_star_num(46) == 801801137\nfind_star_num(47) == 1279782725\nfind_star_num(48) == 2940247769\nfind_star_num(49) == 4911667767\nfind_star_num(50) == 813298225\nfind_star_num(51) == 146779776\nfind_star_num(52) == 336624719\nfind_star_num(53) == 536771515\nfind_star_num(54) == 774388043\nfind_star_num(55) == 1088485499\nfind_star_num(56) == 2612606915\nfind_star_num(57) == 466878839\nfind_star_num(58) == 801801137\nfind_star_num(59) == 1279782725\nfind_star_num(60) == 2940247769\nfind_star_num(61) == 4911667767\nfind_star_num(62) == 813298225\nfind_star_num(63) == 146779776\nfind_star_num(64) == 336624719\nfind_star_num(65) == 536771515\nfind_star_num(66) == 774388043\nfind_star_num(67) == 1088485499\nfind_star_num(68) == 2612606915\nfind_star_num(69) == 466878839\nfind_star_num(70) == 801801137\nfind_star_num(71) == 1279782725\nfind_star_num(72) == 2940247769\nfind_star_num(73) == 4911667767\nfind_star_num(74) == 813298225\nfind_star_num(75) == 146779776\nfind_star_num(76) == 336624719\nfind_star_num(77) == 536771515\nfind_star_num(78) == 774388043\nfind_star_num(79) == 1088485499\nfind_star_num(80) == 2612606915\nfind_star_num(81) == 466878839\nfind_star_num(82) == 801801137\nfind_star_num(83) == 1279782725\nfind_star_num(84) == 2940247769\nfind_star_num(85) == 4911667767\nfind_star_num(86) == 813298225\nfind_star_num(87) == 146779776\nfind_star_num(88) == 336624719\nfind_star_num(89) == 536771515\nfind_star_num(90) == 774388043\nfind_star_num(91) == 1088485499\nfind_star_num(92) == 2612606915\nfind_star_num(93) == 466878839\nfind_star_num(94) == 801801137\nfind_star_num(95) == 1279782725\nfind_star_num(96) == 2940247769\nfind_star_num(97) == 4911667767\nfind_star_num(98) == 813298225\nfind_star_num(99) == 146779776\nfind_star_num(100) == 336624719\nfind_star_num(101) == 536771515\nfind_star_num(102) == 774388043\nfind_star_num(103) == 1088485499\nfind_star_num(104) == 2612606915\nfind_star_num(105) == 466878839\nfind_star_num(106) == 801801137\nfind_star_num(107) == 1279782725\nfind_star_num(108) == 2940247769\nfind_star_num(109) == 4911667767\nfind_star_num(110) == 813298225\nfind_star_num(111) == 146779776\nfind_star_num(112) == 336624719\nfind_star_num(113) == 536771515\nfind_star_num(114) == 774388043\nfind_star_num(115) == 1088485499\nfind_star_num(116) == 2612606915\nfind_star_num(117) == 466878839\nfind_star_num(118) == 801801137\nfind_star_num(119) == 1279782725\nfind_star_num(120) == 2940247769\nfind_star_num(121) == 4911667767\nfind_star_num(122) == 813298225\nfind_star_num(123) == 146779776\nfind_star_num(124) == 336624719\nfind_star_num(125) == 536771515\nfind_star_num(126) == 774388043\nfind_star_num(127) == 1088485499\nfind_star_num(128) == 2612606915\nfind_star_num(129) == 466878839\nfind_star_num(130) == 801801137\nfind_star_num(131) == 1279782725\nfind_star_num(132) == 2940247769\nfind_star_num(133) == 4911667767\nfind_star_num(134) == 813298225\nfind_star_num(135) == 146779776\nfind_star_num(136) == 336624719\nfind_star_num(137) == 536771515\nfind_star_num(138) == 774388043\nfind_star_num(139) == 1088485499\nfind_star_num(140) == 2612606915\nfind_star_num(141) == "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_happy_number(n):\n    '''\n    Write a function to find then'th number which is happy number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('A') == 90\nassert     ascii_value('.') == 46\nassert     ascii_value(' ') == 32\nassert     ascii_value('s') == 115\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ascii_value('a') == 97, \"Wrong ascii value of 'a'\"\nassert     ascii_value('b') == 98, \"Wrong ascii value of 'b'\"\nassert     ascii_value('c') == 99, \"Wrong ascii value of 'c'\"\nassert     ascii_value('\\n') == 10, \"Wrong ascii value of '\\\\n'\"\n\nprint(\"\u2705 Correct\""
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 97, 'Wrong ascii value'\nassert     ascii_value('b') == 98, 'Wrong ascii value'\nassert     ascii_value('c') == 99, 'Wrong ascii value'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('A') == 65\nassert     ascii_value('A') == 65\nassert     ascii_value(' ') == 32\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     ascii_value('a') == ord('a')\nassert     ascii_value('b') == ord('b')\nassert     ascii_value('c') == ord('c')\nassert     ascii_value('d') == ord('d')\nassert     ascii_value('e') == ord('e')\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97\nassert ascii_value('b') == 98\nassert ascii_value('c') == 99\nassert ascii_value('d') == 100\nassert ascii_value('e') == 101\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 14\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 6\nassert sum_even_and_even_index([]) == 0\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 9, 'wrong output'\nassert \nsum_even_and_even_index([5, 1, 2, 3, 4]) == 0, 'wrong output'\nassert \nsum_even_and_even_index([1, 2, 3, 4, 5]) == 0, 'wrong output'\n\n\n\ndef rev_digits(num):\n    '''\n    Write a python function to reverse a digits\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (sum_even_and_even_index([1,2,3,4,5,6,7,8,9])==15), \"Should return 15\"\nassert \nassert (sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10])==0), \"Should return 0\"\nassert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_even_and_even_index([3, 4, 6, 6, 7]) == 8\nassert     sum_even_and_even_index([3, 4, 5, 6, 7]) == 9\nassert     sum_even_and_even_index([3, 4, 5, 6, 7, 8]) == 14\nassert     sum_even_and_even_index([3, 4, 5, 6, 7, 8, 9]) == 23\nassert     sum_even_and_even_index([3, 4, 5, 6, 7, 8, 9, 10]) == 32\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(1) == 2\nassert     even_Power_Sum(2) == 9\nassert     even_Power_Sum(10) == 216\nassert     even_Power_Sum(100) == 66188800\nassert     even_Power_Sum(1000) == 171468472468472469\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(even_Power_Sum(3)) # should return 9\nprint(even_Power_Sum(4)) # should return 81\n\ndef even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"\\n** even_Power_Sum **\")\nprint(\"The sum of even natural numbers is: {}\".format(even_Power_Sum(4)))\nprint(\"sum of even natural numbers from 3 to 10 is: {}\".format(even_Power_Sum(10)))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_even_numbers(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the first n even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nWrite a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n'''\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_Power_Sum(3) == 14, \"Your answer is wrong.\"\n\nprint(\"Test passed.\\n\")\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert even_Power_Sum(4) == 12\nassert even_Power_Sum(8) == 3600\nassert even_Power_Sum(10) == 6180\nassert even_Power_Sum(11) == 23270\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_Power_Sum_2(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [(5,6),(3,4),(1,2)]\nassert rear_extract([(1,2),(3,4),(5,6)]) == [(3,4),(5,6),(1,2)]\nassert rear_extract([(1,2),(3,4),(5,6)]) == [(3,4),(5,6),(1,2)]\n\n'''\nWrite a function that takes in a list of tuples and returns a list containing the first element of each tuple.\n'''\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([('a', 'b'), ('c', 'd'), ('e', 'f')]) == ['b', 'f', 'a'] \nassert     rear_extract([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')]) == ['b', 'd', 'f', 'h']\nassert     rear_extract([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j')]) == ['b', 'd', 'f', 'h', 'i']\nassert     rear_extract([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j'), ('k', 'l')]) == ['b', 'd', 'f', 'h', 'i', 'l']\nassert     rear_extract([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j'), ('k', 'l'), ('m', 'n'), ('o', 'p'), ('q', 'r')]) == ['b', 'd', 'f', 'h', 'i', 'l','m', 'n', 'o']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract([(0,1),(2,3),(4,5)]) == [(2,3),(4,5)], \"Wrong Answer\"\nassert rear_extract([(1,2),(2,3),(3,4)]) == [(3,4),(2,3)], \"Wrong Answer\"\nassert rear_extract([(0,1),(2,3),(4,)]) == [(2,3),(4,)], \"Wrong Answer\"\nassert rear_extract([(0,1),(2,3),(4,5,6)]) == [(4,5,6),(2,3)], \"Wrong Answer\"\nassert rear_extract([(1,2),(2,3),(3,4)]) == [(2,3),(3,4)], \"Wrong Answer\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rear_extract([('A','B'),('C','D'),('E','F'),('G','H')]) == ['D','F'], \"rear_extract(['A','B',('C','D'),('E','F'),('G','H')]) is wrong\"\nassert     rear_extract([('A','B','C'),('D','E','F'),('G','H','I')]) == ['D','F','I'], \"rear_extract([('A','B','C'),('D','E','F'),('G','H','I')]) is wrong\"\nassert     rear_extract([('A','B'),('C','D'),('E','F'),('G','H')]) == ['E','F'], \"rear_extract([('A','B'),('C','D'),('E','F'),('G','H')]) is wrong\"\nassert     rear_extract([('A','B','C')]) == ['B','C'], \"rear_extract([('A','B','C')]) is wrong\"\nassert     rear_extract([('A','B','C'),('D','E','F')]) == ['B','C'], \"rear_extract([('A','B','C'),('D','E','F')]) is wrong\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('\\n')\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([(3, 2), (5, 7), (3, 1)]) == [2, 7, 1], \"Should be (2, 7, 1)\"\nassert     rear_extract([(3, 2), (5, 7), (3, 1)]) == \nassert     rear_extract([(3, 2), (5, 7), (3, 1)]) == \nassert     rear_extract([(3, 2), (5, 7), (3, 1)]) == \nassert     rear_extract([(3, 2), (5, 7), (3, 1)]) == \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rear_extract([('a','b'),('c','d'),('e','f')]) == ['b','d','f']\n    rea"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     substract_elements((1,3),(2,4)) == (1,1) \nassert     substract_elements((5,2,1,8,3),(7,7)) == (4,5)\nassert     substract_elements((3,5,7),(4,8,9)) == (1,2)\n\n\n\n\ndef divide_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and divides the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((1, 2), (3, 4)) == (-2, -1)\nassert     substract_elements((1, 2, 3), (3, 4, 5)) == (-2, -1, -3)\nassert     substract_elements((1, 2, 3, 4), (3, 4, 5, 6)) == (-2, -1, -3, -4)\nassert     substract_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7)) == (-2, -1, -3, -4, -5)\nassert     substract_elements((1, 2, 3, 4, 5, 6), (3, 4, 5, 6, 7, 8)) == (-2, -1, -3, -4, -5, -6)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((\"a\",\"b\"), (\"b\",\"c\")) == (\"a\",\"c\")\nassert     substract_elements((\"a\",\"b\",\"c\"), (\"b\",\"c\",\"d\")) == (\"a\",\"b\",\"c\")\nassert     substract_elements((\"a\",\"b\",\"c\",\"d\"), (\"b\",\"c\",\"d\",\"e\")) == (\"a\",\"b\",\"c\",\"d\")\nassert     substract_elements((\"a\",\"b\",\"c\"), (\"b\",\"d\",\"c\",\"e\")) == (\"a\",\"b\",\"c\")\nassert     substract_elements((\"a\",\"b\",\"c\",\"d\"), (\"b\",\"c\",\"d\",\"e\")) == (\"a\",\"b\",\"c\",\"d\")\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements(('a', 1), ('b', 3)) ==     ('a', 2), 'Error on first tuple'\nassert     substract_elements(('a', 2), ('b', 3)) ==     ('a', 0), 'Error on first tuple'\nassert     substract_elements(('c', 3), ('b', 3)) ==     ('c', 1), 'Error on second tuple'\nassert     substract_elements(('c', 2), ('b', 3)) ==     ('c', 0), 'Error on second tuple'\nassert     substract_elements(('d', 4), ('b', 3)) ==     ('d', 2), 'Error on third tuple'\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef multiply_tuple_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     substract_elements((1,2,3), (3,4,5)) == (2,2,2)\nassert     substract_elements((2,4,6), (2,4,6)) == (0,0,0)\n\ndef is_power_of_two(test_int):\n    '''\n    Write a function that takes a positive integer as an argument and returns True if the argument is a power of 2. Otherwise return False.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n--- end of problems \n'''\n\n'''"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     substract_elements((1,2,3), (2,3,4)) == (1,0,3)\nassert substract_elements((1,2,3), (3,4,5)) == (1,0,2)\n\n\ndef oddTuples(aTup):\n    '''\n    Write a function that takes in a tuple and returns a tuple with all the odd values in the original tuple removed.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 0\nassert even_binomial_Coeff_Sum(2) == 1\nassert even_binomial_Coeff_Sum(3) == 3\nassert even_binomial_Coeff_Sum(5) == 3\nassert even_binomial_Coeff_Sum(6) == 8\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert even_binomial_Coeff_Sum(3) == 5, 'You must return the sum of the even index binomial coefficients.'\nassert even_binomial_Coeff_Sum(0) == 0, 'You must return the sum of the even index binomial coefficients.'\nassert even_binomial_Coeff_Sum(1) == 0, 'You must return the sum of the even index binomial coefficients.'\nassert even_binomial_Coeff_Sum(2) == 0, 'You must return the sum of the even index binomial coefficients.'\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert even_binomial_Coeff_Sum(10) == 60\n\n    print('All test cases passed')"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum(1)==0\nassert     even_binomial_Coeff_Sum(2)==1\nassert     even_binomial_Coeff_Sum(3)==1\nassert     even_binomial_Coeff_Sum(4)==2\nassert     even_binomial_Coeff_Sum(5)==2\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum( 2) ==     2 + 2, 'Wrong output'\nassert     even_binomial_Coeff_Sum( 4) ==     4 + 4 + 4, 'Wrong output'\nassert     even_binomial_Coeff_Sum( 5) ==     5 + 4 + 4 + 4, 'Wrong output'\nassert     even_binomial_Coeff_Sum( 6) ==     6 + 4 + 4 + 4 + 4, 'Wrong output'\nassert     even_binomial_Coeff_Sum( 7) ==     7 + 4 + 4 + 4 + 4 + 4, 'Wrong output'\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum( 1) == 0\nassert     even_binomial_Coeff_Sum( 2) == 1\nassert     even_binomial_Coeff_Sum( 3) == 4\nassert     even_binomial_Coeff_Sum( 4) == 18\nassert     even_binomial_Coeff_Sum( 5) == 50\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_binomial_Coeff_Sum( 1) == 0\nassert \neven_binomial_Coeff_Sum(2) == 1\nassert \neven_binomial_Coeff_Sum(3) == 1\nassert \neven_binomial_Coeff_Sum(4) == 1\nassert \neven_binomial_Coeff_Sum(5) == 1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 1 \nassert     even_binomial_Coeff_Sum(4) == 7\nassert     even_binomial_Coeff_Sum(11) == 5050\nassert     even_binomial_Coeff_Sum(15) == 120640\nassert     even_binomial_Coeff_Sum(20) == 33252\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1,5) == 3.14*(1**2)*5, 'incorrect'\nassert     volume_cylinder(2,1) == 2.0, 'incorrect'\nassert     volume_cylinder(4,8) == 78.5, 'incorrect'\n\nprint('\\nAll tests passed!')\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(1,1) == 3.14\nassert     volume_cylinder(1,2) == 1.61\nassert     volume_cylinder(2,2) == 6.28\nassert     volume_cylinder(3,3) == 27.87\n\nprint('The volume of the cylinder is:', volume_cylinder(2,2))\nprint('The volume of the cylinder is:', volume_cylinder(5,3))\nprint('The volume of the cylinder is:', volume_cylinder(2,4))\nprint('The volume of the cylinder is:', volume_cylinder(3,3))\nprint('The volume of the cylinder is:', volume_cylinder(4,4))\nprint('The volume of the cylinder is:', volume_cylinder(3,5))\nprint('The volume of the cylinder is:', volume_cylinder(4,5))\nprint('The volume of the cylinder is:', volume_cylinder(5,5))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(2,3) == 12.5 \nassert     volume_cylinder(1,1) == 3.14\nassert     volume_cylinder(1,2) == 3.14\nassert     volume_cylinder(5,3) == 20.08\nassert     volume_cylinder(10,5) == 120\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(1,2) == 3\nassert     volume_cylinder(2,3) == 6\nassert     volume_cylinder(3,5) == 20\nassert     volume_cylinder(3,1) == 9\nassert     volume_cylinder(4,1) == 10\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nvolume_cylinder(5,8) == 50.0\nprint('passed')\nprint('\\n')\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cylinder(2,3) == 5\nassert     volume_cylinder(2,2) == 2\nassert     volume_cylinder(3,3) == 27\nassert     volume_cylinder(4,5) == 49\nassert     volume_cylinder(3,4) == 30\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(3,4) == 12\nassert     volume_cylinder(2,3) == 12\nassert     volume_cylinder(3,2) == 12\nassert     volume_cylinder(3.1,2.2) == 8.93"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'a': 1, 'b': 2}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 1) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 4) == {'a': 1, 'b': 2, 'c': 3}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndict_filter({'a':2,'b':2,'c':4},1) == {'a':2,'b':2,'c':4}\nassert\n\ndict_filter({'a':2,'b':2,'c':4},3) == {'a':2,'b':2}\nassert\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 1) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 2) == {\"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 3) == {\"a\": 1, \"b\": 2, \"e\": 5}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 4) == {\"a\": 1, \"b\": 2, \"d\": 4, \"e\": 5}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 5) == {\"a\": 1, \"b\": 2, \"c\": 3, \"e\": 5}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 1) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 'Should return correct dictionary'\nassert dict_filter({1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 10) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 'Should return correct dictionary'\nassert dict_filter({1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 50) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 'Should return correct dictionary'\nassert dict_filter({1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 50) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 'Should return correct dictionary'\nassert dict_filter({1: 10, 2: 20, 3: 30, 4: 40, 5: 50}, 100) == {}, 'Should return empty dictionary'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({1:2,3:4,4:3,5:6,6:5,7:8,8:7},2) == {1:2,3:4,4:3,5:6,6:5,7:8}\nassert dict_filter({1:2,3:4,4:3,5:6,6:5,7:8,8:7},3) == {4:3,5:6,6:5,7:8}\nassert dict_filter({1:2,3:4,4:3,5:6,6:5,7:8,8:7},7) == {7:8}\nassert dict_filter({1:2,3:4,4:3,5:6,6:5,7:8,8:7},8) == {8:7}\nassert dict_filter({1:2,3:4,4:3,5:6,6:5,7:8,8:7},9) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 0) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({'key1': 100, 'key2': 200, 'key3': 300}, 1) == {'key1': 100, 'key3': 300}, \"should be {'key1': 100, 'key3': 300}\"\nassert     dict_filter({'key1': 100, 'key2': 200, 'key3': 300}, 100) == {'key1': 100, 'key3': 300}, \"should be {'key1': 100, 'key3': 300}\"\nassert     dict_filter({'key1': 100, 'key2': 200, 'key3': 300}, 200) == {'key2': 200}, \"should be {'key2': 200}\"\nassert     dict_filter({'key1': 100, 'key2': 200, 'key3': 300}, 0) == {}, \"should be {}\"\nassert     dict_filter({}, 3) == {}, \"should be {}\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({1: 2, 3: 4, 5: 8, 7: 1}, 3) == {3: 4, 5: 8, 7: 1}\nassert dict_filter({1: 2, 3: 4, 5: 8, 7: 1}, 5) == {5: 8, 7: 1}\nassert dict_filter({1: 2, 3: 4, 5: 8, 7: 1}, 9) == {}\nassert dict_filter({1: 2, 3: 4, 5: 8, 7: 1}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'a':5,'b':2,'c':1,'d':0},5) == {'a': 5, 'd': 0}, 'incorrect output for dict_filter'\nassert dict_filter({'a':5,'b':2,'c':1,'d':0},1) == {}, 'incorrect output for dict_filter'\nassert dict_filter({'a':5,'b':2,'c':1,'d':0},0) == {'a': 5, 'b': 2, 'c': 1, 'd': 0}, 'incorrect output for dict_filter'\nassert dict_filter({'a':5,'b':2,'c':1,'d':0},4) == {'b': 2, 'c': 1, 'd': 0}, 'incorrect output for dict_filter'\nassert dict_filter({'a':5,'b':2,'c':1,'d':0},3) == {'a': 5, 'b': 2, 'c': 1, 'd': 0}, 'incorrect output for dict_filter'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2) == {'a': 1, 'b': 2, 'd': 4, 'e': 5}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 1) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 4) == {'a': 1, 'b': 2, 'c': 3, 'e': 5}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 5) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 'incorrect'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements((6, 7, 1, 2, 3, 7, 1)) == 2\nassert     count_first_elements((1, 2, 3, 4, 5, 6)) == 5\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)) == 4"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((2,3,4,6,5,5,5,6,2)) == 1\nassert     count_first_elements((5,5,5,5,5,5,5,5,5)) == 3\nassert     count_first_elements((8,7,6,2,4,5,3,2,6,1)) == 4\nassert     count_first_elements((6,2,8,6,5,4,3,2,6,1)) == 5\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((5, 2, 2, 2, 1, 1, 2, 2, 2, 2)) == 5\nassert     count_first_elements((5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == 0\nassert     count_first_elements((5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == 5\nassert     count_first_elements((1,2,3,4,5,6,7)) == 1\nassert     count_first_elements((1,2,3,4,5,6,7,8,9,10)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements(test_tup) == 1, \"failed\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((1,2,3)) == 0, \"Input: (1,2,3)\"\nassert     count_first_elements((3,2,1)) == 1, \"Input: (3,2,1)\"\nassert     count_first_elements((1,1,1)) == 3, \"Input: (1,1,1)\"\nassert     count_first_elements((1,1,2)) == 2, \"Input: (1,1,2)\"\nassert     count_first_elements((1,2,1)) == 3, \"Input: (1,2,1)\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements((10,20,30,40,50,10,40,60,70,100)) == 4\nassert count_first_elements((10,20,30,40,50,60,70,10,40,60)) == 4\nassert count_first_elements((10,20,30,40,50,10,40,10,40,60)) == 6\nassert count_first_elements((10,20,30,40,50,10,10,10,10,10)) == 6\nassert count_first_elements((10,20,30,40,50,10,10,10,10,40,60,70,100,60)) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements(('b', 'a', 'c', 'b')) == 1, \"incorrect\"\nassert     count_first_elements(('b', 'a', 'c', 'a')) == 2, \"incorrect\"\nassert     count_first_elements(('b', 'a', 'c', 'b', 'a')) == 2, \"incorrect\"\nassert     count_first_elements(('b', 'a', 'c', 'b', 'a', 'c')) == 3, \"incorrect\"\nassert     count_first_elements(('b', 'a', 'c', 'b', 'a', 'c', 'b', 'a')) == 3, \"incorrect\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements((7, 2, 3, 4, 5, 7, 6, 2)) == 3\nassert     count_first_elements((4, 5, 6, 2, 3, 4, 7, 3, 2)) == 0\nassert     count_first_elements((4, 3, 3, 4, 5, 5, 6, 2, 3, 4, 7, 3, 2)) == 4"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements((5, 7, 7, 7, 4, 5, 6, 6, 6, 4, 2, 4, 4, 1)) == 6, 'incorrect'\nassert     count_first_elements((5, 7, 7, 7, 4, 5, 6, 6, 6, 4, 2, 4, 4, 1)) == 3, 'incorrect'\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0, 'incorrect'\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0, 'incorrect'\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)) == 4, 'incorrect'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements((4, 5, 4, 4, 5)) == 1, \"incorrect\"\nassert     count_first_elements((3, 4, 3, 4, 5)) == 2, \"incorrect\"\nassert     count_first_elements((2, 2, 2, 2, 2, 2, 2, 2, 2)) == 1, \"incorrect\"\nassert     count_first_elements((2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2)) == 2, \"incorrect\"\nassert     count_first_elements((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) == 0, \"incorrect\"\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_num_decagonal(1) == 1, 'nth decagonal number is wrong'\nassert     is_num_decagonal(2) == 5, 'nth decagonal number is wrong'\nassert     is_num_decagonal(3) == 12, 'nth decagonal number is wrong'\nassert     is_num_decagonal(4) == 22, 'nth decagonal number is wrong'\nassert     is_num_decagonal(5) == 35, 'nth decagonal number is wrong'\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_factors(n): \n    '''\n    Write a function that takes a number and returns a list of its factors.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 10\nassert     is_num_decagonal(3) == 3 * 10 + 1\nassert     is_num_decagonal(4) == 3 * 10 * 10 + 3 + 1\nassert     is_num_decagonal(5) == 3 * 10 * 10 * 10 + 3 * 10 + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_num_decagonal(1) == 1\n    is_num_decagonal(2) == 11\n    is_num_decagonal(3) == 111\n    is_num_decagonal(4) == 121\n    is_num_decagonal(5) == 1211\n    is_num_decagonal(6) == 12111\n    is_num_decagonal(7) == 12321\n    is_num_decagonal(8) == 123222\n    is_num_decagonal(9) == 123332\n    is_num_decagonal(10) == 1233333\n    is_num_decagonal(11) == 1234567\n    is_num_decagonal(12) == 12345678\n    is_num_decagonal(13) == 123654321\n    is_num_decagonal(14) == 123654322\n    is_num_decagonal(15) == 123456789\n    is_num_decagonal(16) == 1234567890\n    is_num_decagonal(17) == 12345678901\n    is_num_decagonal(18) == 123456789012\n    is_num_decagonal(19) == 1234567890123\n    is_num_decagonal(20) == 12345678901234\n    is_num_decagonal(21) == 123456789012345\n    is_num_decagonal(22) == 1234567890123456\n    is_num_decagonal(23) == 12345678901234567\n    is_num_decagonal(24) == 123456789012345678\n    is_num_decagonal(25) == 1234567890123456789\n    is_num_decagonal(26) == 12345678901234567890\n    is_num_decagonal(27) == 123456789012345678901\n    is_num_decagonal(28) == 1234567890123456789012\n    is_num_decagonal(29) == 12345678901234567890123\n    is_num_decagonal(30) == 123456789012345678901234\n    is_num_decagonal(31) == 1234567890123456789012345\n    is_num_decagonal(32) == 12345678901234567890123456\n    is_num_decagonal(33) == 123456789012345678901234567\n    is_num_decagonal(34) == 1234567890123456789012345678\n    is_num_decagonal(35) == 12345678901234567890123456789\n    is_num_decagonal(36) == 123456789012345678901234567890\n    is_num_decagonal(37) == 1234567890123456789012345678901\n    is_num_decagonal(38) == 12345678901234567890123456789012\n    is_num_decagonal(39) == 123456789012345678901234567890123\n    is_num_decagonal(40) == 1234567890123456789012345678901234\n    is_num_decagonal(41) == 12345678901234567890123456789012345\n    is_num_decagonal(42) == 123456789012345678901234567890123456\n    is_num_decagonal(43) == 1234567890123456789012345678901234567\n    is_num_decagonal(44) == 12345678901234567890123456789012345678\n    is_num_decagonal(45) == 123456789012345678901234567890123456789\n    is_num_decagonal(46) == 123456789012345678901234567890123456789\n    is_num_decagonal(47) == 12345678901234567890123456789012345678901\n    is_num_decagonal(48) == 12345678901234567890123456789012345678901234\n    is_num_decagonal(49) == 123456789012345678901234567890123456789012345\n    is_num_decagonal(50) == 1234567890123456789012345678901234567890123456\n    is_num_decagonal(51) == 12345678901234567890123456789012345678901234567\n    is_num_decagonal(52) == 123456789012345678901234567890123456789012345678\n    is_num_decagonal(53) == 1234567890123456789012345678901234567890123456789\n    is_num_decagonal(54) == 123456789012345678901234567890123456789012345678901\n    is_num_decagonal(55) == 123456789012345678901234567890123456789012345678901234\n    is_num_decagonal(56) == 12345678901234567890123456789012345678901234567890123456789\n    is_num_decagonal(57) == 1234567890123456789012345678901234567890123456789012345678901234\n    is_num_decagonal(58) == 12345678901234567890123456789012345678901234567890123456789012345678\n    is_num_decagonal(59) == 12345678901234567890123456789012345678901234567890123456789012345678901234\n    is_num_decagonal(60) == 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\n    is_num_decagonal(61) == 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n    is_num_decagonal(62) == 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234\n    is_num_decagonal(63) == 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n    is_num_decagonal(64) == 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n    is_num_decagonal(65) == 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n    is_num_decagonal(66) == 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n    is_num_decagonal(67) == 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('PASSED')\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 5\nassert     is_num_decagonal(4) == 8\nassert     is_num_decagonal(5) == 13\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert 1 == 1\nassert 2 == 5\nassert 3 == 12\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: return 1\n    if n < 0: return None\n    return (n + 1) ** 2 - (n + 2) ** 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_num_decagonal(0) == 1, \"incorrect for 0\"\nassert     is_num_decagonal(1) == 2, \"incorrect for 1\"\nassert     is_num_decagonal(2) == 3, \"incorrect for 2\"\nassert     is_num_decagonal(3) == 5, \"incorrect for 3\"\nassert     is_num_decagonal(4) == 8, \"incorrect for 4\"\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndlist = [7,8,9,10,11]\nassert sequential_search(dlist, 11) == (True, 4)\nassert sequential_search(dlist, 7) == (True, 0)\nassert sequential_search(dlist, 5) == (False, -1)\nprint('All test cases passed.')\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsequential_search([], 0) == (False, -1)\nassert \nsequential_search([], 2) == (False, -1)\nassert \nsequential_search([1, 2, 3, 4, 5], 4) == (True, 2)\nassert \nsequential_search([1, 2, 3, 4, 5], 3) == (True, 2)\nassert \nsequential_search([1, 2, 3, 4, 5], 2) == (True, 1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequential_search([], 3) == (False, -1)\nassert     sequential_search([1, 2, 3], 1) == (True, 0)\nassert     sequential_search([1, 2, 3], 10) == (False, -1)\nassert     sequential_search([-1, -2, -3, -4, -5], -1) == (True, 0)\nassert     sequential_search([], 1.5) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(sequential_search([2, 3, 5, 7, 11], 5))\nprint(sequential_search([2, 3, 5, 7, 11], 11))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sequential_search([], 8) == (False, -1)\nassert sequential_search([], 9) == (False, -1)\nassert sequential_search([], 10) == (False, -1)\nassert sequential_search([], 5) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequential_search([0, 1, 2, 3, 4, 5, 6], 2) == (True, 1), '''check the correctness of sequential_search'''\nassert     sequential_search([0, 1, 2, 3, 4, 5, 6], 7) == (False, -1), '''check the correctness of sequential_search'''\nassert     sequential_search([0, 1, 2, 3, 4, 5, 6], 0) == (False, -1), '''check the correctness of sequential_search'''\nassert     sequential_search([0, 1, 2, 3, 4, 5, 6], 5) == (True, 6), '''check the correctness of sequential_search'''\nassert     sequential_search([], 5) == (False, -1), '''check the correctness of sequential_search'''\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sequential_search([1, 2, 3], 3) == (True, 2)\nassert     sequential_search([], 7) == (False, -1)\nassert     sequential_search([], 9) == (False, -1)\nassert     sequential_search([1, 2, 3, 4], 4) == (True, 3)\nassert     sequential_search([1, 2, 3, 4], 5) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sequential_search(dlist, 1) == (True, 0), 'Check your implementation'\nassert     sequential_search(dlist, 2) == (True, 1), 'Check your implementation'\nassert     sequential_search(dlist, 100) == (False, -1), 'Check your implementation'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique([1,2,3,4,5,6]) == True, \"List contains duplicates\"\nassert     all_unique([1,2,3,4,5,6,7]) == False, \"List contains duplicates\"\nassert     all_unique([1,2,3,4,5]) == True, \"List contains duplicates\"\nassert     all_unique([]) == True, \"List contains duplicates\"\nassert     all_unique([1]) == True, \"List contains duplicates\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique(test_list) == True\nprint(\"Test case 1 Passed\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([1,2,3]) == False, \"1,2,3 is not unique\"\nassert all_unique([1,1,2]) == True, \"1,1,2 is unique\"\nassert all_unique([1,1,2,3]) == False, \"1,1,2,3 is not unique\"\nassert all_unique(['a','a','b','b']) == True, \"['a', 'a', 'b', 'b'] is unique\"\nassert all_unique(['a','a','b','b','c','c']) == False, \"['a', 'a', 'b', 'b', 'c', 'c'] is not unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([1,2,3]) == True\nassert     all_unique([1,2,2]) == False\nassert     all_unique([1,2,2,2]) == True\nassert     all_unique([1,2,2,2,2]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    all_unique([1,2,2,3]) == True, 'it should return True'\n    all_unique([1,2,3]) == False, 'it should return False'\n    all_unique([]) == True, 'it should return True'\n    all_unique(['a','b','a']) == False, 'it should return False'\n    all_unique(['a']) == True, 'it should return True'\n    all_unique([]) == True, 'it should return True'\n    all_unique([1,2,3,4,4,5]) == True, 'it should return True'\n    all_unique([1,2,3,4,5,5,6,7,8,9]) == True, 'it should return True'\n    all_unique([]) == True, 'it should return True'\n    all_unique([2,2,2]) == False, 'it should return False'\n    all_unique([]) == True, 'it should return True'\n    all_unique([1,2,3,4,5,5,6,7,8,9,9,0]) == False, 'it should return False'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([]) == True\nassert     all_unique([1]) == True\nassert     all_unique([2,1,2]) == False\nassert     all_unique([1,2,1,2,3]) == True\nassert     all_unique([1,2,3]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([1, 2, 3, 4, 5]) == True, \"Should be True\"\nassert all_unique([1, 2, 3, 4, 5, 5]) == False, \"Should be False\"\nassert all_unique([1, 2, 3, 4, 5, 6]) == True, \"Should be True\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([1,1,2,3,3,3,4]) == False, 'First all_unique test case failed'\nassert     all_unique([1,1,2,3,3,3,4,4]) == False, 'Second all_unique test case failed'\nassert     all_unique([1,1,2,3,3,4]) == True, 'Third all_unique test case failed'\nassert     all_unique([]) == False, 'Fourth all_unique test case failed'\nassert     all_unique(['a','b','c']) == False, 'Fifth all_unique test case failed'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,1,2,3,4,4]) == True, 'Test Case Failed'\nassert     all_unique([1,1,1,2,3,4]) == False, 'Test Case Failed'\nassert     all_unique([1,1,2,2,3,3]) == True, 'Test Case Failed'\nassert     all_unique([1,1,2,2,3,4]) == False, 'Test Case Failed'\nassert     all_unique([1,1,2,2,2,3]) == True, 'Test Case Failed'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique([1,2,3,3])     ==     False\nassert     all_unique([1,2,3,1])     ==     True\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sub_list([1,2,3],[1,2,3]) == []\nassert     sub_list([1,2,3],[3,2,1]) == [-2,-2,-1]\nassert     sub_list([1,2,3],[4,5,6]) == [-2,3,-4]\nassert     sub_list([1,2,3],[4,5,6], -1) == [-2,2,-3]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sub_list([1,2,3],[3,4,5]) == [-2,-3,-4]\n\nassert     sub_list([1,2,3],[4,5,6]) == [-2,-3,2]\n\nassert     sub_list([1,2],[1,2,3]) == [-3,2,1]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsub_list([1,2,3],[4,5,6])\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sub_dict(d1, d2):\n    '''\n    Write a function to subtract two dictionaries element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not sub_list([1,2,3],[1,2])\nassert sub_list([1,2,3],[1,3])\n\ndef sub_list2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sub_list([1,2,3], [4,5,6]) == -[3,2,1]\nassert sub_list([1,2,3], [4,5,6,7]) == -[3,2,1,7]\nassert sub_list([1,2,3], [4,5,6,7,8]) == -[3,2,1,7,8]\nassert sub_list([1,2,3], [4,5,6,7,8,9]) == -[3,2,1,7,8,9]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sub_list([2,3,4],[3,5,1])==[2,4,1]\nassert     sub_list([5,6,-1],[-2,4,6])==[5,5,4]\nassert     sub_list([1,2,3,4,5],[3,4,5,6,7])==[1,2,3,4,5]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sub_list([1,2,3],[2,3,4]) == [-1,-1,-1], 'Wrong'\nassert     sub_list([1,2,3],[3,2,1]) == [-1,-1,-1], 'Wrong'\nassert     sub_list([1,2],[1,2]) == [-2,2], 'Wrong'\nassert     sub_list([1,2],[3,2]) == [-2,3], 'Wrong'\nassert     sub_list([1],[1,2]) == [-1,2], 'Wrong'\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsub_list([1,2,3], [4,5,6]) == [-1,-2,-3]\nprint(\"check complete\")"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     validate(99) == True, \"The output does not satisfy the condition\"\nassert     validate(100) == False, \"The output does satisfy the condition\"\nassert     validate(121) == True, \"The output does satisfy the condition\"\nassert     validate(222) == False, \"The output does not satisfy the condition\"\nassert     validate(666) == True, \"The output does not satisfy the condition\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef validate2(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     validate(1234) == True, \"1st Case\"\nassert     validate(2343) == True, \"2nd Case\"\nassert     validate(1234) == False, \"3rd Case\"\nassert     validate(0) == False, \"4th Case\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     validate(12) == True, \"Frequency should be less than or equal to itself\"\nassert     validate(100) == False, \"Frequency should be less than or equal to itself\"\nassert     validate(1000) == False, \"Frequency should be less than or equal to itself\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef encode(str): \n    '''\n    Write a python function takes in a string and return a new string of concatenated string of even length and odd length. The function should return the new string with every character at even position with respect to the given string.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     validate(0) == False, \"Test 1 Failed: Check the logic of the function\"\nassert     validate(10) == True, \"Test 1 Passed: Check the logic of the function\"\nassert     validate(1234567890) == True, \"Test 2 Passed: Check the logic of the function\"\nassert     validate(-1234567890) == False, \"Test 2 Failed: Check the logic of the function\"\nassert     validate(12345678) == False, \"Test 3 Failed: Check the logic of the function\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    validate(12) == True\nassert \n    validate(13) == False\nassert \n    validate(1234) == True\nassert \n    validate(11) == False"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     validate(100) == False, \"frequency of 0 and 1 are less than 1\"\nassert     validate(12) == False, \"frequency of 2,1 are less than 2\"\nassert     validate(1234) == False, \"frequency of 2,3,4,3 are less than 4\"\nassert     validate(1023) == False, \"frequency of 2,3,1,0,3 are less than 5\"\nassert     validate(10123) == True, \"frequency of 2,3,1,0,3 are less than 5\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_element([1,2,3,4,5,6,7,8],6) == True, 'The item 6 is not in the list'\nassert check_element([1,2,3,4,5,6,7,8],10) == False, 'The item 10 is not in the list'\nassert check_element([1,2,3,4,5,6,7,8],8) == True, 'The item 8 is in the list'\nassert check_element([1,2,3,4,5,6,7,8],1) == False, 'The item 1 is not in the list'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_element([1,1,2,2,2],1) == True, \"Should return True\"\nassert     check_element([1,1,2,2,2],2) == False, \"Should return False\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_element([1,2,3,4,5],1)==True\nassert check_element([1,2,3,4,5],2)==False\nassert check_element([2,4,6,8,10],8)==True\nassert check_element([2,4,6,8,10],9)==False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_element([1,2,3], 3) == True, 'first'\nassert     check_element([1,2,3], 1) == False,'second'\nassert     check_element([], 0) == False, 'third'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_element([1,2,3,4],1) == True\nassert check_element([1,2,3,4],2) == True\nassert check_element([1,2,3,4],3) == True\nassert check_element([1,2,3,4],4) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_element([1,2,3], 1) == True, 'Fail: 1, 2, 3, 1'\nassert     check_element([1,2,3], 2) == False, 'Fail: 1, 2, 3, 2'\nassert     check_element([1,2,3], 3) == True, 'Fail: 1, 2, 3, 3'\nassert     check_element([1,2,3], 4) == False, 'Fail: 1, 2, 3, 4'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_element([1,2,3,4,5],1) == True\nassert     check_element([1,2,3,4,5],2) == False\nassert     check_element([1,2,3,4,5],6) == False\nassert     check_element([1,2,3,4,5],7) == False\nassert     check_element([1,2,3,4,5],5) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"check_element:\", check_element([1,2,3,4,5,6],4))\nassert check_element([1,2,3,4,5,6],7) == False\n\ndef convert_to_int(list):\n    '''\n    Write a function that converts a list of objects to a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n[1, 2, 3]\n[1, 2, 1]\n'''\n\ndef index_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the first instance of the element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_two_three('abcba') == True\nassert     text_match_two_three('abcbb') == False\nassert     text_match_two_three('abcbaa') == True\nassert     text_match_two_three('abcbbb') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # your code here\n    if re.search(\"a+b\",text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('ababbb') == True, 'incorrect test 1'\nassert     text_match_two_three('abaaaa') == False, 'incorrect test 2'\nassert     text_match_two_three('aababb') == False, 'incorrect test 3'\nassert     text_match_two_three('aabbbb') == True, 'incorrect test 4'\nassert     text_match_two_three('abbbbb') == False, 'incorrect test 5'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three('abc')     == True \nassert     text_match_two_three('abcba')     == True \nassert     text_match_two_three('abcbc')     == False \nassert     text_match_two_three('abcbcb')     == False \nassert     text_match_two_three('abcabc')     == False \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('') == False, \"Check first False\"\nassert     text_match_two_three(\"bbbbbbbbbbb\") == False, \"Check second False\"\nassert     text_match_two_three(\"a\") == False, \"Check third False\"\nassert     text_match_two_three(\"aaaaaaaaaaaaa\") == False, \"Check fourth False\"\nassert     text_match_two_three(\"bbbbbbb\") == True, \"Check fifth True\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three('cabaa') == 'cbaabaaaa'\nassert     text_match_two_three('cabbba') == 'cabababababa'\nassert     text_match_two_three('cb') == ''\nassert     text_match_two_three('bc') == ''\nassert     text_match_two_three('a') == ''\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('ababab') == True, 'Should be True'\nassert     text_match_two_three('ababaa') == False, 'Should be False'\nassert     text_match_two_three('abaaab') == False, 'Should be False'\nassert     text_match_two_three('abaaaaa') == False, 'Should be False'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('aaabaa')    ==     True\nassert     text_match_two_three('bbbbbb')    ==     True\nassert     text_match_two_three('aaaaa')    ==     False\nassert     text_match_two_three('a')    ==     False\nassert     text_match_two_three('aaabaa')    ==     False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three('abcb') == True\nassert     text_match_two_three('abcba') == False\nassert     text_match_two_three('aababc') == True\nassert     text_match_two_three('ababcba') == False\nassert     text_match_two_three('ababc') == True\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum_repeated(a= [1, 1, 3, 2, 3, 1, 2, 1], n = 7, k = 2) == 9\nassert     max_sub_array_sum_repeated(a = [2, 3, 4, 1, 5], n = 8, k = 2) == 12\nassert     max_sub_array_sum_repeated(a = [2, 3, 5, 1, 2, 3], n = 8, k = 3) == 11\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 2) == 7\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 3) == 10\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 4) == 8\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 5) == 12\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 6) == 12\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([-1, 2, -3, 4, 5], 4, 2) == -1\nassert     max_sub_array_sum_repeated([5, -2, 3, 4, 1, -5], 4, 2) == 5\nassert     max_sub_array_sum_repeated([-1, -2, -3, 4, 5], 4, 2) == -3\nassert     max_sub_array_sum_repeated([2, 3, 4, 5, 6, 7, 8, 9], 3, 2) == 9\nassert     max_sub_array_sum_repeated([5, 3, 4, 5, 6, 7, 8, 9], 3, 2) == 18\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum_repeated([1, 3, 2, 3, 5, 2, 3, 2], 2, 3) == 11, \n'Fail'\nassert     max_sub_array_sum_repeated([1, 3, 2, 3, 5, 2, 3, 2], 1, 2) == 9, \n'Fail'\nassert     max_sub_array_sum_repeated([1, 3, 2, 3, 5, 2, 3, 2], 2, 1) == 12, \n'Fail'\nassert     max_sub_array_sum_repeated([1, 3, 2, 3, 5, 2, 3, 2], 3, 3) == 19, \n'Fail'\nassert     max_sub_array_sum_repeated([1, 3, 2, 3, 5, 2, 3, 2], 3, 4) == 12, \n'Fail'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_sub_array_sum_repeated([5, 1, 3, 5], 3, 1) == 15\nassert max_sub_array_sum_repeated([2, 3, 4], 2, 1) == 9\nassert max_sub_array_sum_repeated([2, 2, 2], 2, 1) == 5\nassert max_sub_array_sum_repeated([1, 2, 3, 4], 3, 2) == 12\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum_repeated([1, 4, 6], 2, 2) == 4\nassert     max_sub_array_sum_repeated([1, 2, 3], 2, 2) == 5\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([1, -3, 2, 3], 2, 3) == 7,'solution incorrect'\nassert     max_sub_array_sum_repeated([3, -7, 5, -5], 2, 2) == 11,'solution incorrect'\n\ndef max_sub_array_sum_no_repeat(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated([1, 5, 3, 8], 2, 2) == 15\nassert     max_sub_array_sum_repeated([2, 3, 5, 7], 2, 2) == 20\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_Sum(10) == 121, 'Square_Sum function does not work as intended.'\n\ndef nCr(n, r):\n    '''\n    Write a python function takes in integers n and r and returns the value of nCr\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 4\nassert     square_Sum(4) == 10\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef square_Sum_Solution(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum = sum + i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(1) == 0\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 4\nassert     square_Sum(4) == 9\nassert     square_Sum(5) == 32\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(2) == 4\nassert square_Sum(3) == 10\nassert square_Sum(4) == 25\nassert square_Sum(5) == 30\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_of_squares(n):\n  '''\n  Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n  '''\n  pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Congratulations! All test cases passed!')"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length([[1,2,3],[2,1,2]]) == [3,2], 'Wrong max_length'\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length(['hello', 'this', 'is', 'a', 'test', 'of','max_length', 'function']) == 5\nassert     max_length(['hello', 'this', 'is', 'a', 'test', 'of','max_length', 'function']) == 5\nassert     max_length([['hello'], ['this'], ['is'], ['a'], ['test'], ['of'], ['max_length'], ['function']]) == 7\nassert     max_length([['hello'], ['this'], ['is'], ['a'], ['test'], ['of'], ['max_length'], ['function']]) == 7\nassert     max_length([[], ['hello'], ['this'], ['is'], ['a'], ['test'], ['of'], ['max_length'], ['function']]) == 6\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\nassert     max_length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\nassert     max_length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\nassert     max_length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length([[1], [2], [3]]) == 2\nassert     max_length([[1,2,3], [4], [5], [6]]) == 3\nassert     max_length([[1,2,3,4], [5,6], [7]]) == 4\nassert     max_length([[1,2,3], [4,5,6], [7,8,9]]) == 3\nassert     max_length([[1,2,3,4,5,6], [7,8,9], [10]]) == 5\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length([[1,2],[2,3],[3,4],[4,5]]) == [4]\nassert     max_length([[1,2,3],[2,3,4],[3,4,5],[4,5,6]]) == [4,5]\nassert     max_length([[1,2,3],[2,3,4,5],[3,4,5,6]]) == [3,4,5]\n\n\n'''\nQ. Write a function to flatten a list of lists\n'''\ndef flatten(list1):\n    '''\n    Write a function to flatten a list of lists\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_list(list1):\n    '''\n    Write a function to find the max number from a list of lists\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length([[1,2,3,4], [1,2,3], [4,5,6]]) == 3\nassert     max_length([[1,2,3,4,5], [1,2,3], [4,5,6]]) == 4\nassert     max_length([[1,2,3,4], [1,2,3,4], [4,5,6]]) == 4\nassert     max_length([[1,2,3,4,5], [1,2,3,4,5], [4,5,6]]) == 5\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(2, 1) == 0\nassert count_no_of_ways(2, 3) == 0\nassert count_no_of_ways(2, 2) == 0\nassert count_no_of_ways(5, 3) == 7\nassert count_no_of_ways(5, 2) == 8\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    count_no_of_ways(4, 3) == 2, \"Should be 2\"\n    count_no_of_ways(6, 4) == 2, \"Should be 2\"\n    count_no_of_ways(6, 2) == 3, \"Should be 3\"\n    count_no_of_ways(1, 3) == 1, \"Should be 1\"\n    count_no_of_ways(1, 4) == 1, \"Should be 1\"\n    count_no_of_ways(2, 3) == 1, \"Should be 1\"\n    count_no_of_ways(2, 4) == 2, \"Should be 2\"\n    count_no_of_ways(3, 3) == 1, \"Should be 1\"\n    count_no_of_ways(3, 4) == 1, \"Should be 1\"\n    count_no_of_ways(4, 3) == 2, \"Should be 2\"\n    count_no_of_ways(4, 4) == 2, \"Should be 2\"\n    count_no_of_ways(5, 3) == 3, \"Should be 3\"\n    count_no_of_ways(5, 4) == 3, \"Should be 3\"\n    count_no_of_ways(6, 3) == 1, \"Should be 1\"\n    count_no_of_ways(6, 4) == 2, \"Should be 2\"\n    count_no_of_ways(7, 3) == 3, \"Should be 3\"\n    count_no_of_ways(7, 4) == 1, \"Should be 1\"\n    count_no_of_ways(8, 3) == 4, \"Should be 4\"\n    count_no_of_ways(8, 4) == 4, \"Should be 4\"\n    count_no_of_ways(8, 5) == 5, \"Should be 5\"\n    count_no_of_ways(8, 6) == 1, \"Should be 1\"\n    count_no_of_ways(9, 3) == 6, \"Should be 6\"\n    count_no_of_ways(9, 4) == 6, \"Should be 6\"\n    count_no_of_ways(9, 5) == 6, \"Should be 6\"\n    count_no_of_ways(9, 6) == 2, \"Should be 2\"\n    count_no_of_ways(9, 7) == 3, \"Should be 3\"\n    count_no_of_ways(9, 8) == 4, \"Should be 4\"\n    count_no_of_ways(9, 9) == 1, \"Should be 1\"\n    count_no_of_ways(10, 3) == 7, \"Should be 7\"\n    count_no_of_ways(10, 4) == 5, \"Should be 5\"\n    count_no_of_ways(10, 5) == 4, \"Should be 4\"\n    count_no_of_ways(10, 6) == 3, \"Should be 3\"\n    count_no_of_ways(10, 7) == 2, \"Should be 2\"\n    count_no_of_ways(10, 8) == 4, \"Should be 4\"\n    count_no_of_ways(10, 9) == 1, \"Should be 1\"\n    count_no_of_ways(11, 3) == 8, \"Should be 8\"\n    count_no_of_ways(11, 4) == 6, \"Should be 6\"\n    count_no_of_ways(11, 5) == 5, \"Should be 5\"\n    count_no_of_ways(11, 6) == 4, \"Should be 4\"\n    count_no_of_ways(11, 7) == 3, \"Should be 3\"\n    count_no_of_ways(11, 8) == 5, \"Should be 5\"\n    count_no_of_ways(11, 9) == 1, \"Should be 1\"\n    count_no_of_ways(12, 3) == 10, \"Should be 10\"\n    count_no_of_ways(12, 4) == 8, \"Should be 8\"\n    count_no_of_ways(12, 5) == 8, \"Should be 8\"\n    count_no_of_ways(12, 6) == 6, \"Should be 6\"\n    count_no_of_ways(12, 7) == 5, \"Should be 5\"\n    count_no_of_ways(12, 8) == 8, \"Should be 8\"\n    count_no_of_ways(12, 9) == 1, \"Should be 1\"\n    count_no_of_ways(13, 3) == 10, \"Should be 10\"\n    count_no_of_ways(13, 4) == 10, \"Should be 10\"\n    count_no_of_ways(13, 5) == 10, \"Should be 10\"\n    count_no_of_ways(13, 6) == 10, \"Should be 10\"\n    count_no_of_ways(13, 7) == 9, \"Should be 9\"\n    count_no_of_ways(13, 8) == 10, \"Should be 10\"\n    count_no_of_ways(13, 9) == 1, \"Should be 1\"\n    count_no_of_ways(14, 3) == 14, \"Should be 14\"\n    count_no_of_ways(14, 4) == 14, \"Should be 14\"\n    count_no_of_ways(14, 5) == 14, \"Should be 14\"\n    count_no_of_ways(14, 6) == 14, \"Should be 14\"\n    count_no_of_ways(14, 7) == 13, \"Should be 13\"\n    count_no_of_ways(14, 8) == 14, \"Should be 14\"\n    count_no_of_ways(14, 9) == 1, \"Should be 1\"\n    count_no_of_ways(15, 3) == 14, \"Should be 14\"\n    count_no_of_ways(15, 4) == 14, \"Should be 14\"\n    count_no_of_ways(15, 5) == 14, \"Should be 14\"\n    count_no_of_ways(15, 6) == 14, \"Should be 14\"\n    count_no_of_ways(15, 7) == 13, \"Should be 13\"\n    count_no_of_ways(15, 8) == 14, \"Should be 14\"\n    count_no_of_ways(15, 9) == 1, \"Should be 1\"\n    count_no_of_ways(16, 3) == 15, \"Should be 15\"\n    count_no_of_ways(16, 4) == 15, \"Should be 15\"\n    count_no_of_ways(16, 5) == 15, \"Should be 15\"\n    count_no_of_ways(16, 6) == 14, \"Should be 14\"\n    count_no_of_ways(16, 7) == 13, \"Should be 13\"\n    count_no_of_ways(16, 8) == 15, \"Should be 15\"\n    count_no_of_ways(16, 9) == 1, \"Should be 1\"\n    count_no_of_ways(17, 3) == 16, \"Should be 16\"\n    count_no_of_ways(17, 4) == 16, \"Should be 16\"\n    count_no_of_ways(17, 5) == 16, \"Should be 16\"\n    count_no_of_ways(17, 6) == 16, \"Should be 16\"\n    count_no_of_ways(17, 7) == 15, \"Should be 15\"\n    count_no_of_ways(17, 8) == 16, \"Should be 16\"\n    count_no_of_ways(17, 9) == 1, \"Should be 1\"\n    count_no_of_ways(18, 3) == 16, \"Should be 16\"\n    count_no_of_ways(18, 4) == 16, \"Should be 16\"\n    count_no_of_ways(18, 5) == 16, \"Should be 16\"\n    count_no_of_ways(18, 6) == 16, \"Should be 16\"\n    count_no_of_ways(18, 7) == 15, \"Should be 15\"\n    count_no_of_ways"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_no_of_ways(0, 1) == 1\nassert     count_no_of_ways(2, 2) == 3\nassert     count_no_of_ways(2, 4) == 7\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_no_of_ways(5, 2) == 5\n    count_no_of_ways(3, 2) == 2\n    count_no_of_ways(2, 3) == 3\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(0, 0) == 1, \"Incorrect for n = 0\"\nassert     count_no_of_ways(1, 1) == 1, \"Incorrect for n = 1\"\nassert     count_no_of_ways(2, 1) == 1, \"Incorrect for n = 2\"\nassert     count_no_of_ways(2, 2) == 2, \"Incorrect for n = 2\"\nassert     count_no_of_ways(3, 2) == 5, \"Incorrect for n = 3\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclass Solution:\n    def count_no_of_ways(self, n, k):\n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find(10,5) == 2, \"Should be 2\"\nassert     find(2,4) == 0, \"Should be 0\"\nassert     find(10,7) == 3, \"Should be 3\"\nassert     find(5,9) == 2, \"Should be 2\"\nprint('Tests passed.')"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find(5,4) == 1, 'test 1 failed'\nassert     find(11,4) == 2, 'test 2 failed'\nassert     find(25,4) == 0, 'test 3 failed'\nassert     find(31,4) == 0, 'test 4 failed'\nassert     find(-8,4) == -2, 'test 5 failed'\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(9,3) == 3, \"Test Case 1 Failed\"\nassert     find(10,3) == 3, \"Test Case 2 Failed\"\nassert     find(11,3) == 3, \"Test Case 3 Failed\"\nassert     find(12,3) == 3, \"Test Case 4 Failed\"\nassert     find(13,3) == 3, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind(2,4) == 0\nfind(4,4) == 0\nfind(-2,4) == -2\nfind(4,-2) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find(2,3) == 1, 'find(2,3) returns 1'\nassert     find(2,4) == 1, 'find(2,4) returns 1'\nassert     find(2,5) == 2, 'find(2,5) returns 2'\nassert     find(3,3) == 1, 'find(3,3) returns 1'\nassert     find(3,4) == 1, 'find(3,4) returns 1'\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef compute(n,m):  \n    '''\n    Write a python function to compute the power of n to the power of m (exponentiation).\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(4,5) == 0, \"Find function is not working as expected\"\nassert     find(7,3) == 3, \"Find function is not working as expected\"\nassert     find(-7,3) == -4, \"Find function is not working as expected\"\nassert     find(3,5) == 1, \"Find function is not working as expected\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert (find(2,3) == 1)\nassert (find(-2,3) == -1)\nassert (find(2,-3) == -1)\nassert (find(-2,-3) == 1)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind(12,3)==2\nfind(13,3)==3\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(10,10) == 20\n\nassert otherside_rightangle(10,20) == 30\nassert otherside_rightangle(100,100) == 100"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(2,1) == 2\nassert     otherside_rightangle(1,2) == 1\nassert     otherside_rightangle(1,1) == 1\n\nprint(otherside_rightangle.__doc__)\n\n\ndef otherside_rightangle_math(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle using math.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function which takes an integer, and returns True if it is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(1,1) == 1, 'inputs are invalid'\nassert     otherside_rightangle(3,3) == 2, 'inputs are invalid'\nassert     otherside_rightangle(10,10) == 5, 'inputs are invalid'\n\n\ndef rightangle_bottom(w,h):\n    '''\n    Write a function to find the first side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert otherside_rightangle(3,4) == 5\nassert otherside_rightangle(3,3) == 3\nassert otherside_rightangle(2,2) == math.sqrt(2)\nassert otherside_rightangle(4,4) == 2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(1,1) == math.sqrt(2), \"Error in your code\"\nassert     otherside_rightangle(2,2) == 1, \"Error in your code\"\nassert     otherside_rightangle(3,3) == 2, \"Error in your code\"\nassert     otherside_rightangle(4,3) == 2, \"Error in your code\"\nassert     otherside_rightangle(5,4) == 3, \"Error in your code\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(5,6) == 5, \"Wrong! \" + str(otherside_rightangle(5,6))\nassert     otherside_rightangle(3,4) == 5, \"Wrong! \" + str(otherside_rightangle(3,4))\nassert     otherside_rightangle(7,8) == 8, \"Wrong! \" + str(otherside_rightangle(7,8))\nassert     otherside_rightangle(7,9) == 7, \"Wrong! \" + str(otherside_rightangle(7,9))\nassert     otherside_rightangle(7,10) == 7, \"Wrong! \" + str(otherside_rightangle(7,10))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(7,8) == 0.5\nassert otherside_rightangle(7,8) == 0.5\n\nprint(f\"Correct!\")\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     otherside_rightangle(4,5) == 5\nassert otherside_rightangle(1,1) == 1\nassert otherside_rightangle(2,5) == 2\nassert otherside_rightangle(3,8) == 6\nassert otherside_rightangle(1,2) == 1.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     otherside_rightangle(2,3) == 5.0, 'Wrong result'\nassert     otherside_rightangle(1,2) == 2.0, 'Wrong result'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert max_val([[1, 2, 3], [4, 5, 6, 7], [8, 9], ['a', 'b', 'c']]) == 9\nassert max_val([(1, 2), (3, 4), (5, 6), (7, 8, 9)]) == 9\nassert max_val([(1, 2, 3), (4, 5, 6, 7), (8, 9, 'a')]) == 9\nassert max_val([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h')]) == 'g'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_val([\"a\", 5, 1.2, 5, 5, 5]) == 5\nassert     max_val([5, 5, 5, 5, 5, 5]) == 5\nassert     max_val([5]) == 5\nassert     max_val([1,2,3,4,5,6]) == 6\nassert     max_val([2,5]) == 5\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_val([1, 3, 5]) == 5\nassert     max_val([[1, 2], [3, 4], [5, 6]]) == 6\nassert     max_val([]) == None\n\ndef max_count(listval):\n    '''\n    Write a function to find the maximum amount of elements of a heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_val([3,4,7]) == 7\nassert     max_val([3,4,7,0,5]) == 7\nassert     max_val([3,4,7,0,5,-6]) == 7\nassert     max_val([3,4,7,0,5,4]) == 5\nassert     max_val([-6,2,4,5,6,9]) == 6\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_list_of_elements(listval, element):\n    '''\n    Write a function to get the list of elements having a particular element.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([1, 2, 3, 4, 5, 'a']) == 5\nassert     max_val([1, -2, 3, 'a', 5]) == 5\nassert     max_val([True, False, 'a', False]) == True\nassert     max_val([]) == None\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_div(7) == 13\nassert     sum_div(17) == 5\nassert     sum_div(27) == 13\n\n\n\ndef sum_div2(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(divisor for divisor in range(1, number) if number % divisor == 0)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(6) == sum([1,2,3,6])\nassert     sum_div(10) == sum([1,2,5,10])\nassert     sum_div(30) == sum([1,3,5,7,15])\nassert     sum_div(1) == 0\nassert     sum_div(4) == 2\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_div(12) == 4\nassert     sum_div(25) == 16\nassert     sum_div(33) == 16\nassert     sum_div(1000) == 41\nassert     sum_div(0) == 0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsum_div(100) == 25\nsum_div(60) == 8\nsum_div(999) == 845\nsum_div(144) == 50\nsum_div(5) == 4\nsum_div(7) == 5\nsum_div(5) == 4\nsum_div(7) == 7\nsum_div(7) == 5\nsum_div(7) == 7\nsum_div(7) == 5\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) == 7\nsum_div(7) ="
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert (sum_div(0) == 0)\nassert (sum_div(1) == 0)\nassert (sum_div(2) == 1)\nassert (sum_div(3) == 2)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_div(0) == 0,'should return 0'\nassert     sum_div(1) == 1,'should return 1'\nassert     sum_div(2) == 2,'should return 2'\nassert     sum_div(3) == 5,'should return 5'\nassert     sum_div(4) == 4,'should return 4'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    sum_div(10) == 5 + 1\n\nprint(\"Ex.1:\", sum_div(10))\nprint(\"Ex.2:\", sum_div(100))\nprint(\"Ex.3:\", sum_div(1000))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([1, 1]) == 1\nassert     get_Inv_Count([1, 2, 1]) == 1\nassert     get_Inv_Count([1, 2, 3, 1]) == 2\nassert     get_Inv_Count([1, 2, 1, 3, 1]) == 2\nassert     get_Inv_Count([1, 1, 2, 1, 1]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr: return 0\n    return get_Inv_Count_aux(arr, 0, len(arr)-1)\n\ndef get_Inv_Count_aux(arr, low, high):\n    # base case\n    if low >= high:\n        return 0\n    mid = (low + high) // 2\n    # left half is sorted\n    count_left = get_Inv_Count_aux(arr, low, mid)\n    # right half is sorted\n    count_right = get_Inv_Count_aux(arr, mid + 1, high)\n    # merge the left and right half\n    count = count_left + count_right\n    # calculate inversions in the left and right half\n    count += merge(arr, low, mid, high)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Inv_Count([]) == 0, \"Input should be an empty list.\"\nassert     get_Inv_Count([-1]) == 1, \"Input should be an integer.\"\nassert     get_Inv_Count([1]) == 0, \"Input should be an integer.\"\nassert     get_Inv_Count([0,1,2]) == 3, \"Input should be a sorted array.\"\nassert     get_Inv_Count([2,1,0]) == 3, \"Input should be a sorted array.\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([5,4,3,2,1]) == 5,'should be 5'\nassert get_Inv_Count([3,2,1,5,4]) == 7,'should be 7'\nassert get_Inv_Count([3,3,3,3]) == 6,'should be 6'\nassert get_Inv_Count([1,2,3,4,5]) == 0,'should be 0'\n\n'''\n    Function to swap two elements in an array.\n    1) The only input array is passed, and it's size is even.\n    2) Use an extra space to swap values.\n    Example:\n        Input: arr[] = {3, 2, 1, 2, 1, 5, 4}\n        Output: arr[] = {2, 3, 1, 2, 1, 5, 4}\n'''\ndef swap_elements(arr):\n    '''\n    Write a python function to swap two elements in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Inv_Count([]) == 0, \"Empty\"\nassert     get_Inv_Count([1]) == 0, \"One\"\nassert     get_Inv_Count([3,4,1,2]) == 1, \"Two inversions\"\nassert     get_Inv_Count([3,1,4,2]) == 2, \"Two inversions\"\nassert     get_Inv_Count([2,4,1,3]) == 3, \"Three inversions\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    get_Inv_Count([2, 1, 3, 0, 1]) == 2\n    get_Inv_Count([0, 1, 2, 3, 4]) == 0\n    get_Inv_Count([5, 4, 3, 2, 1]) == 5\n    get_Inv_Count([2, 1]) == 0\n    get_Inv_Count([1, 2]) == 1\n    get_Inv_Count([1, 2, 1]) == 1\n    get_Inv_Count([1, 2, 1, 1]) == 2\n\n\n\n'''\nWrite a python function to count inversions in an array.\nThe function should return the number of inversions in the given array.\n'''\n\n\n\ndef get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([]) == 0, \"Input = {}\".format(get_Inv_Count([1, 2, 3, 4, 5]))\nassert     get_Inv_Count([1, 5, 4, 3, 2]) == 1, \"Input = {}\".format(get_Inv_Count([1, 5, 4, 3, 2]))\nassert     get_Inv_Count([1, 5, 4, 3, 2, 1]) == 3, \"Input = {}\".format(get_Inv_Count([1, 5, 4, 3, 2, 1]))\nassert     get_Inv_Count([3, 4, 5, 2, 1]) == 1, \"Input = {}\".format(get_Inv_Count([3, 4, 5, 2, 1]))\nassert     get_Inv_Count([5, 1, 2, 3, 4]) == 2, \"Input = {}\".format(get_Inv_Count([5, 1, 2, 3, 4]))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    arr = [5, 2, 4, 1]\n    assert get_Inv_Count(arr) == 3\n    arr = [1, 2, 3, 4, 5, 6]\n    assert get_Inv_Count(arr) == 3\n    arr = [5, 1, 4, 3, 2]\n    assert get_Inv_Count(arr) == 4\n    arr = [-1, -2, -3, -4]\n    "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef print_list(list1):\n    '''\n    Write a function to print a nested list.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     flatten_list([1,2,3,[4,[5,6],7]]) == [1,2,3,4,5,6,7]\nassert     flatten_list([1,[2,3],4,[5,6],7]) == [1,2,3,4,5,6,7]\nassert     flatten_list([1,[2,3],4,[5,6]]) == [1,2,3,4,5,6]\nassert     flatten_list([]) == []\nassert     flatten_list([[]]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flatten_list([[], [[]]]) == []\nassert     flatten_list([[], [[1, 2], 2, 3]]) == [[1, 2], 2, 3]\nassert     flatten_list([[], [[1, 2], 2, 3], 2, 2]) == [[1, 2], 2, 3]\n\n\n'''\nWrite a function that takes a list and returns a list with all the elements from the first list in each sublist.\n'''\ndef return_element_in_list(list1):\n    '''\n    Write a function that takes a list and returns a list with all the elements from the first list in each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    flatten_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n    flatten_list([1, 2, 3, [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\n    flatten_list([1, 2, 3, [[4, 5, 6], 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    flatten_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    flatten_list([]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     flatten_list([])     == []\nassert     flatten_list([1,2])     == [1,2]\nassert     flatten_list([1,[2,3],4]) == [1,2,3,4]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(flatten_list([[[2, 4, 6, 8, 10]]])) # == [2, 4, 6, 8, 10]\nprint(flatten_list([[1,2],[[3,4,5]],6,7])) # == [1, 2, 3, 4, 5, 6, 7]\nprint(flatten_list([[1,2,3,4,5],6,7,[8,9,10,11],12])) # == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(flatten_list([[1,2,3,4,5,6],7,8,9,10,11,12,13,14,15])) # == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(flatten_list([[[[1,2,3,4,5,6]],7,8,9,10,11,12,13,14,15]]]) # == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(flatten_list([1,2,[[3,4,5]],6,7])) # == 1,2,3,4,5,6,7\nprint(flatten_list([[1,2],1,2])) # == 1,2,1,2\nprint(flatten_list([[1,2],1])) # == 1,2,1\nprint(flatten_list([[1,2],1])) # == 1,2,1\nprint(flatten_list([[1,2],1,2,3])) # == 1,2,1,2,3\nprint(flatten_list([1,2,3,4,5])) # == 1,2,3,4,5\nprint(flatten_list([1])) # == 1\nprint(flatten_list([1])) # == 1\nprint(flatten_list([])) # == []\nprint(flatten_list(['a','b','c','d'])) # == ['a', 'b', 'c', 'd']\nprint(flatten_list([[1,2,3,4],[[5,6,7,8]],9,10,11,12])) # == 1,2,3,4,5,6,7,8,9,10,11,12\nprint(flatten_list([[1,2,3,4,5],[[6,7,8,9]],10,11,12])) # == 1,2,3,4,5,6,7,8,9,10,11,12\nprint(flatten_list([[1,2,3,4,5,6],[[7,8,9,10]],11,12,13,14])) # == 1,2,3,4,5,6,7,8,9,10,11,12,13,14\nprint(flatten_list([[1,2,3,4,5,6],[[7,8,9,10,11]],12,13,14,15])) # == 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\nprint(flatten_list([[1,2,3,4,5,6],[[7,8,9,10,11],12]],13,14,15,16)) # == 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\nprint(flatten_list([1,2,3,4,5,6])) # == 1,2,3,4,5,6\nprint(flatten_list([1,2])) # == 1,2\nprint(flatten_list([1])) # == 1\nprint(flatten_list([[1,2],1,2])) # == 1,2,1,2\nprint(flatten_list([[1,2],1])) # == 1,2,1\nprint(flatten_list([[1,2],1])) # == 1,2,1\nprint(flatten_list([[1,2,3,4],[[5,6,7,8]],9,10,11,12])) # == 1,2,3,4,5,6,7,8,9,10,11,12\nprint(flatten_list([[1,2,3,4,5],[[6,7,8,9]],10,11,12])) # == 1,2,3,4,5,6,7,8,9,10,11,12\nprint(flatten_list([[1,2,3,4,5,6],[[7,8,9,10]],11,12,13,14])) # == 1,2,3,4,5,6,7,8,9,10,11,12,13,14\nprint(flatten_list([[1,2,3,4,5,6],[[7,8,9,10,11]],12,13,14,15])) # == 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\nprint(flatten_list([[1,2,3,4,5,6],[[7,8,9,10,11],12]],13,14,15,16)) # == 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\nprint(flatten_list([1,2,3,4,5,6])) # == 1,2,3,4,5,6\nprint(flatten_list([1,2])) # == 1,2\nprint(flatten_list([1])) # == 1\nprint(flatten_list([[[1,2,3,4],5],6,7])) # == 1,2,3,4,5,6,7\nprint(flatten_list([[1,2,3,4,5],6,7])) # == 1,2,3,4,5,6,7\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,5,6,7,8\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,5,6,7,8\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,5,6,7,8\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,5,6,7,8\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,5,6,7,8\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,5,6,7,8\nprint(flatten_list([1,2,3,4,5,6,7,8,9])) # == 1,2,3,4,5,6,7,8,9\nprint(flatten_list([[1,2,3,4,5,6],7,8,9])) # == 1,2,3,4,5,6,7,8,9\nprint(flatten_list([1,2,3,4,5,6])) # == 1,2,3,4,5,6\nprint(flatten_list([[1,2,3,4,5],6,7])) # == 1,2,3,4,5,6,7\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,5,6,7,8\nprint(flatten_list([[1,2,3,4,5,6],7,8])) # == 1,2,3,4,"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([[1,2,3], 2, 4, 5, 4, 3,2]) == [1, 2, 3, 2, 4, 5, 4, 3, 2], \"Test case 1 is wrong\"\nassert     flatten_list([[1,2,3], 2, 4, 5, 4, 3,2,1,3]) == [1, 2, 3, 2, 4, 5, 4, 3, 2, 1, 3], \"Test case 2 is wrong\"\nassert     flatten_list([[1,2,3,2,4,3,5,5], 2, 4, 5, 4, 3,2]) == [1, 2, 3, 2, 4, 3, 5, 5, 2, 4, 3, 2], \"Test case 3 is wrong\"\nassert     flatten_list([1,2,3]) == [1, 2, 3], \"Test case 4 is wrong\"\nassert     flatten_list([1,2,3,4,5]) == [1, 2, 3, 4, 5], \"Test case 5 is wrong\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate([(10, 20, 30), (20, 30, 40), (40, 50, 60)]) == (40, 50, 60)\nassert max_aggregate([(10, 20, 30), (20, 30, 40), (40, 50, 60), (60, 70, 80)]) == (60, 70, 80)\nassert max_aggregate([(10, 20, 30), (20, 30, 40), (40, 50, 60), (60, 70, 80), (30, 40, 50)]) == (40, 50, 60)\nassert max_aggregate([(10, 20, 30), (20, 30, 40), (40, 50, 60), (60, 70, 80), (30, 40, 50), (30, 40, 50)]) == (30, 50, 60)\nassert max_aggregate([(10, 20, 30, 40), (20, 30, 40, 50), (30, 40, 50, 60), (40, 50, 60, 70)]) == (40, 50, 60)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([\n                                    (1, 2),\n                                    (3, 4),\n                                    (5, 6),\n                                    (7, 8),\n                                    (8, 9),\n                                    (10, 10),\n                                    (10, 12),\n                                    (12, 13),\n                                    (13, 14),\n                                    (13, 17),\n                                    (17, 18),\n                                    (18, 19),\n                                    (19, 20),\n                                    (20, 21),\n                                    (21, 22),\n                                    (22, 23),\n                                    (23, 24),\n                                    (23, 25),\n                                    (25, 26),\n                                    (26, 27),\n                                    (27, 28),\n                                    (27, 29),\n                                    (29, 30),\n                                    (30, 31),\n                                    (30, 32),\n                                    (32, 33),\n                                    (33, 34),\n                                    (34, 35),\n                                    (35, 36),\n                                    (36, 37),\n                                    (37, 38),\n                                    (37, 39),\n                                    (39, 40),\n                                    (39, 41),\n                                    (41, 42),\n                                    (41, 43),\n                                    (43, 44),\n                                    (43, 45),\n                                    (45, 46),\n                                    (45, 47),\n                                    (47, 48),\n                                    (47, 49),\n                                    (49, 50),\n                                    (49, 51),\n                                    (51, 52),\n                                    (51, 53),\n                                    (53, 54),\n                                    (53, 55),\n                                    (55, 56),\n                                    (55, 57),\n                                    (57, 58),\n                                    (57, 59),\n                                    (59, 60),\n                                    (59, 61),\n                                    (61, 62),\n                                    (61, 63),\n                                    (63, 64),\n                                    (63, 65),\n                                    (65, 66),\n                                    (65, 67),\n                                    (67, 68),\n                                    (67, 69),\n                                    (69, 70),\n                                    (69, 71),\n                                    (71, 72),\n                                    (71, 73),\n                                    (73, 74),\n                                    (73, 75),\n                                    (75, 76),\n                                    (75, 77),\n                                    (77, 78),\n                                    (77, 79),\n                                    (79, 80),\n                                    (79, 81),\n                                    (81, 82),\n                                    (81, 83),\n                                    (83, 84),\n                                    (83, 85),\n                                    (85, 86),\n                                    (85, 87),\n                                    (87, 88),\n                                    (87, 89),\n                                    (89, 90),\n                                    (89, 91),\n                                    (91, 92),\n                                    (91, 93),\n                                    (93, 94),\n                                    (93, 95),\n                                    (95, 96),\n                                    (95, 97),\n                                    (97, 98),\n                                    (97, 99),\n                                    (99, 100),\n                                    (99, 101),\n                                    (101, 102),\n                                    (101, 103),\n                                    (103, 104),\n                                    (103, 105),\n                                    (105, 106),\n                                    (105, 107),\n                                    (107, 108),\n                                    (107, 109),\n                                    (109, 110),\n                                    (109, 111),\n                                    (111, 112),\n                                    (111, 113),\n                                    (113, 114),\n                                    (113, 115),\n                                    (115, 116),\n                                    (115, 117),\n                                    (117, 118),\n                                    (117, 119),\n                                    (119, 120),\n                                    (119, 121),\n                                    (121, 122),\n                                    (121, 123),\n                                    (123, 124),\n                                    (123, 125),\n                                    (125, 126),\n                                    (125, 127),\n                                    (127, 128),\n                                    (127, 129),\n                                    (129, 130),\n                                    (129, 131),\n                                    (131, 132),\n                                    (131, 133),\n                                    (133, 134),\n                                    (133, 135),\n                                    (135, 136),\n                                    (135, 137),\n                                    (137, 138),\n                                    (137, 139),\n                                    (139, 140),\n                                    (139, 141),\n                                    (141, 142),\n                                    (141, 143),\n                                    (143, 144),\n                                    (143, 145),\n                                    (145, 146),\n                                    (145, 147),\n                                    (147, 148),\n                                    (147, 149),\n                                    (149, 150),\n                                    (149, 151),\n                                    (151, 152),\n                                    (151, 153),\n                                    (153, 154),\n                                    (153, 155),\n                                    (155, 156),\n                                    (155, 157),\n                                    (157, 158),\n                                    (157, 159),\n                                    (159, 160),\n                                    (159, 161),\n                                    (161, 162),\n                                    (161, 163),\n                                    (163, 164),\n                                    (163, 165),\n                                    (165, 166),\n                                    (165, 167),\n                                    (167, 168),\n                                    (167, 169),\n                                    (169, 170),\n                                    (169, 171),\n                                    (171, 172),\n                                    (171, 173),\n                                    (173, 174),\n                                    (173, 175),\n                                    (175, 176),\n                                    (175, 177),\n                                    (177, 178),\n                                    (177, 179),\n                                    (179, 180),\n                                    (179, 181),\n                                    (181, 182),\n                                    (181, 183),\n                                    (183, 184),\n                                    (183, 185),\n                                    (185, 186),\n                                    (185, 187),\n                                    (187, 188),\n                                    (187, 189),\n                                    (189, 190),\n                                    (189, 191),\n                                    (191, 192),\n                                    (191, 193),\n                                    (193, 194),\n                                    (193, 195),\n                                    (195, 196),\n                                    (195, 197),\n                                    (197, 198),\n                                    (197, 199),\n                                    (199, 200),\n                                    (199, 201),\n                                    (201, 202),\n                                    (201, 203),\n                                    (203, 204),\n                                    (203, 205),\n                                    (205, 206),\n                                    (205, 207),\n                                    (207, 208),\n                                    (207, 209),\n                                    (209, 210),\n                                    (209, 211),\n                                    (211, 212),\n                                    (211, 213),\n                                    (213, 214),\n                                    (213, 215),\n                                    (215, 216),\n                                    (215, 217),\n                                    (217, 218),\n                                    (217, 219),\n                                    (219, 220),\n                                    (219, 221),\n                                    (221, 222),\n                                    (221, 223),\n                                    (223, 224),\n                                    (223, 225),\n                                    (225, 226),\n                                    (225, 227),\n                                    (227, 228),\n                                    (227, 229),\n                                    (229, 230),\n                                    (229, 231),\n                                    (231, 232),\n                                    (231, 233),\n                                    (233, 234),\n                                    (233, 235),\n                                    (235, 236),\n                                    (235, 237),\n                                    (237, 238),\n                                    (237, 239),\n                                    (239, 240),\n                                    (239, 241),\n                                    (241, 242),\n                                    (241, 243),\n                                    (243, 244),\n                                    (243, 245),\n                                    (245, 246),\n                                    (245, 247),\n                                    (247, 248),\n                                    (247, 249),\n                                    (249, 250),\n                                    (249, 251),\n                                    (251, 252),\n                                    (251, 253),\n                                    (253, 254),\n                                    (253, 255),\n                                    (255, 256),\n                                    (255, 257),\n                                    (257, 258),\n                                    (257, 259),\n                                    (259, 260),\n                                    (259, 261),\n                                    (261, 262),\n                                    (261, 263),\n                                    (263, 264),\n                                    (263, 265),\n                                    (265, 266),\n                                    (265, 267),\n                                    (267, 268),\n                                    (267, 269),\n                                    (269, 270),\n                                    (269, 271),\n                                    (271, 272),\n                                    (271, 273),\n                                    (273, 274),\n                                    (273, 275),\n                                    (275, 276),\n                                    (275, 277),\n                                    (277, 278),\n                                    (277, 279),\n                                    (279, 280),\n                                    (279, 281),\n                                    (281, 282),\n                                    (281, 283),\n                                    (283, 284),\n                                    (283, 285),\n                                    (285, 286),\n                                    (285, 287),\n                                    (287, 288),\n                                    (287, 289),\n                                    (289, 290),\n                                    (28"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nstdata = [(1,2,3,4),(2,3,4),(3,4),(2,3,4)]\nassert max_aggregate(stdata) == 6\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate([[1, 2, 3], [1, 3, 4]]) == 4\nassert     max_aggregate([[1, 2, 3, 4], [2, 3, 4, 5]]) == 6\nassert     max_aggregate([[1, 2, 3, 4, 5], [1, 3, 4, 5, 6], [1, 3, 4, 5, 6]]) == 6\nassert     max_aggregate([[1, 2, 3, 4, 5], [1, 3, 4, 5, 6], [1, 3, 4, 5, 6], [1, 3, 4, 5, 6]]) == 6\nassert     max_aggregate([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == 4\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmax_aggregate([(3,4),(4,4),(5,4),(6,4)]) == 6\nassert max_aggregate([(3,4),(4,4),(5,4),(6,4),(6,4)]) == 8\nassert max_aggregate([(3,4),(4,4),(5,4),(6,4),(6,4),(6,4)]) == 8\nassert max_aggregate([(3,4),(4,4),(5,4),(6,4),(6,4),(6,4)]) == 8\nassert max_aggregate([(1,4),(4,4),(5,4),(6,4)]) == 6\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_aggregate([(1,3),(2,4),(3,6)]) == 6\nassert     max_aggregate([(1,3),(1,5),(1,2)]) == 5\nassert     max_aggregate([(3,4,5)]) == 5\nassert     max_aggregate([]) == None\nassert     max_aggregate([(1,2,3)]) == None\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([(1, 2), (2, 3), (4, 5), (1, 3)]) == (4, 5)\nassert     max_aggregate([(1, 2), (2, 3), (4, 5), (1, 3), (1, 4)]) == (1, 4)\nassert     max_aggregate([(1, 2), (2, 3), (4, 5), (1, 3), (1, 4)]) == (1, 4)\nassert     max_aggregate([(1, 2), (2, 3), (4, 5), (1, 3), (1, 4)]) == (1, 4)\nassert     max_aggregate([(1, 2), (2, 3), (4, 5), (1, 3), (1, 4)]) == (1, 4)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_aggregate([(0,5),(1,3),(3,1),(3,5),(3,3),(4,3),(5,1),(6,3)]) == (6,3)\nassert     max_aggregate([(0,5),(1,3),(3,1),(3,5),(3,3),(4,3),(5,1),(6,3)]) == (6,3)\nassert     max_aggregate([(0,5),(1,3),(3,1),(3,5),(3,3),(4,3),(5,1),(6,3)]) == (6,3)\nassert     max_aggregate([(0,5),(1,3),(3,1),(3,5),(3,3),(4,3),(5,1),(6,3)]) == (6,3)\nassert     max_aggregate([(0,5),(1,3),(3,1),(3,5),(3,3),(4,3),(5,1),(6,3)]) == (6,3)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('All tests are passed!')\n'''\nThe test cases are as follows:\n\nmax_aggregate([(0, 'First'), (1, 'Second'), (0, 'Second')])\noutput is 'First'\n\nmax_aggregate([(0, 'First'), (1, 'Second'), (1, 'Third')])\noutput is 'First'\n\nmax_aggregate([(0, 'First'), (0, 'Second'), (1, 'Third'), (1, 'Third'), (0, 'Third')])\noutput is 'First'\n\nmax_aggregate([(0, 'First'), (0, 'Second'), (1, 'Third'), (1, 'Third'), (0, 'Third')])\noutput is 'Second'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    max_aggregate([(1,2),(2,5),(3,2),(4,5)]) == (2,4,5)\n\nassert \n    max_aggregate([(1,2),(2,5),(3,4),(4,5)]) == (2,3,5)\n\nassert \n    max_aggregate([(1,2),(2,5),(3,4),(4,5)]) == (1,2,5)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nimport math\n\ndef count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_of_first_n_bits = 2**n\n    sum_of_last_n_bits = (2**(n+1) - 1)\n    return int(math.floor((sum_of_first_n_bits - sum_of_last_n_bits)/(2*(2**(n-1) - 1))))\n\nassert count_binary_seq(1) == 1\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"\\n\\t\\tProblem 8: Binary Sum\")\nprint(\"-----------------------------------\")\nprint(\"\\n\\t\\tSolution\")\nprint(\"-----------------------------------\")\nprint(count_binary_seq(4))"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_binary_seq(4) == 12\nassert     count_binary_seq(6) == 16\nassert     count_binary_seq(8) == 24\nassert     count_binary_seq(10) == 32\nassert     count_binary_seq(12) == 36\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('Success!') if count_binary_seq(1) == 0 else print('Error!')\nprint('Success!') if count_binary_seq(2) == 1 else print('Error!')\nprint('Success!') if count_binary_seq(3) == 4 else print('Error!')\n\nprint('\\n\\n')"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_binary_seq(0) == 0\nassert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 4\nassert     count_binary_seq(3) == 7\nassert     count_binary_seq(4) == 14\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(2) == 0\nassert     count_binary_seq(3) == 2\nassert     count_binary_seq(4) == 4\n\ndef count_binary_seq_with_padding(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    Padding of zeros should be added such that number of binary sequences are at least k.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_binary_seq(0) == 1\nassert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 10\nassert     count_binary_seq(4) == 19\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_depth({}) == 0, \\\n    \"dict_depth({}) == 0 is wrong\"\nassert     dict_depth({1:1}) == 1, \\\n    \"dict_depth({1:1}) == 1 is wrong\"\nassert     dict_depth({1:2,3:4}) == 2, \\\n    \"dict_depth({1:2,3:4}) == 2 is wrong\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({}) == 0, 'Error in dictionary_depth.'\nassert     dict_depth({\"foo\":1, \"bar\":{\"baz\":2}}) == 2, 'Error in dictionary_depth.'\nassert     dict_depth({'foo':1, 'bar':{'baz':2}}) == 2, 'Error in dictionary_depth.'\nassert     dict_depth({\"foo\":1, \"bar\":1}) == 2, 'Error in dictionary_depth.'\nassert     dict_depth({\"foo\":1}) == 1, 'Error in dictionary_depth.'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({\"key1\": \"a\", \"key2\": \"b\", \"key3\": \"c\"}) == 2\nassert     dict_depth({\"key1\": 1, \"key2\": 2, \"key3\": 3}) == 1\nassert     dict_depth({\"key1\": 1, \"key2\": [1, 2, 3], \"key3\": 4}) == 3\nassert     dict_depth({}) == 0\nassert     dict_depth({\"key1\": {}}) == 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_depth({}) == 0, \"Empty dictionary.\"\nassert     dict_depth({0: 'value'}) == 1, \"Single level dictionary.\"\nassert     dict_depth({0: {1: 'value'}}) == 2, \"Two level dictionary.\"\nassert     dict_depth({0: {1: {2: 'value'}}}) == 3, \"Three level dictionary.\"\nassert     dict_depth({0: {1: {2: {3: 'value'}}}}) == 4, \"Four level dictionary.\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({'a': {'b': {'c': 'd'}}} ) == 3\nassert     dict_depth({'a': 'b', 'c': {'d': 'e', 'f': {'g': 'h'}}} ) == 3\nassert     dict_depth({'a': {'b': {'c': 'd'}}}) == 3\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth({0:1,1:2,2:3}) == 1\nassert     dict_depth({0:1,1:2,2:3,3:4}) == 2\nassert     dict_depth({0:1,1:2,2:3,3:4,4:5}) == 3\nassert     dict_depth({0:1,1:2,2:3,3:4,4:5,5:6}) == 4\nassert     dict_depth({0:1,1:2,2:3,3:4,4:5,5:6,6:7}) == 5\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({\"a\":1, \"b\":2, \"c\":3}) == 1, \"dict_depth(a)\"\nassert     dict_depth({\"a\":{\"b\":2, \"c\":3}, \"d\":4, \"e\":5, \"f\":6}) == 3, \"dict_depth(b)\"\nassert     dict_depth({\"a\":{1:2}, \"b\":{2:3, 4:4}, \"c\":{5:6, 6:7}}) == 2, \"dict_depth(c)\"\nassert     dict_depth({1:2, 3:4}) == 1, \"dict_depth(1)\"\nassert     dict_depth({1:2, 3:4, 5:6, 7:8, 9:10}) == 3, \"dict_depth(5)\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({1:2}) == 0\nassert     dict_depth({1: {2: {3: 4, 'hello': 'world'}}}) == 1\nassert     dict_depth({'a': {'b': {'c': {'d': {'e': {'f': 42}}}}}}) == 5\nassert     dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': 42}}}}, 'h': 8}}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 2\nassert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 3\nassert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}) == 4\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Element([2,3,4,5,6],[0,1,2,3],1,1) == 2, \"Wrong Output\"\nassert     find_Element([2,3,4,5,6],[0,1,2,3],1,2) == 3, \"Wrong Output\"\nassert     find_Element([2,3,4,5,6],[0,1,2,3],1,3) == 4, \"Wrong Output\"\nassert     find_Element([2,3,4,5,6],[0,1,2,3],1,4) == 5, \"Wrong Output\"\nassert     find_Element([2,3,4,5,6],[0,1,2,3],1,5) == 6, \"Wrong Output\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([1,2,3,4,5,6],(2,4),(0,1),0)==3, \"Wrong\"\nassert     find_Element([1,2,3,4,5,6],(2,4),(0,1),1)==3, \"Wrong\"\nassert     find_Element([1,2,3,4,5,6],(2,4),(0,1),2)==3, \"Wrong\"\nassert     find_Element([1,2,3,4,5,6],(2,4),(0,1),3)==3, \"Wrong\"\nassert     find_Element([1,2,3,4,5,6],(2,4),(0,1),4)==3, \"Wrong\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint (\"Pass\" if (find_Element([1, 2, 3, 4, 5, 6, 7], 2, 1, 1) == 1) else \"Fail\")\nassert \nprint (\"Pass\" if (find_Element([1, 2, 3, 4, 5, 6, 7], 2, 2, 1) == 3) else \"Fail\")\nassert \nprint (\"Pass\" if (find_Element([1, 2, 3, 4, 5, 6, 7], 2, 3, 1) == 5) else \"Fail\")\nassert \nprint (\"Pass\" if (find_Element([1, 2, 3, 4, 5, 6, 7], 2, 4, 1) == 6) else \"Fail\")\nassert \nprint (\"Pass\" if (find_Element([1, 2, 3, 4, 5, 6, 7], 2, 5, 1) == 7) else \"Fail\")\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Element([1,5,2,6,3,7,4],[1,3,2,2,3,3,4],4,2) == 4 \nassert     find_Element([1,5,2,6,3,7,4],[1,3,2,2,3,3,4],4,1) == 2\nassert     find_Element([1,5,2,6,3,7,4],[1,3,2,2,3,3,4],4,3) == 3\nassert     find_Element([1,5,2,6,3,7,4],[1,3,2,2,3,3,4],4,4) == 7\nassert     find_Element([1,5,2,6,3,7,4],[1,3,2,2,3,3,4],4,5) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8],(1,3),(0,1),3) == 5\nassert     find_Element([1,2,3,4,5,6,7,8],(1,4),(0,1),2) == 4\nassert     find_Element([1,2,3,4,5,6,7,8],(2,6),(0,1),5) == 3\nassert     find_Element([1,2,3,4,5,6,7,8],(2,7),(0,1),4) == 6\nassert     find_Element([1,2,3,4,5,6,7,8],(3,8),(0,1),3) == 7\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_Element_2(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_Element([1,2,3,4,5,6],[[2,3,4],[1,3,5],[1,2,4]],[[1,1],[1,1],[1,1]],1) == 6, \"Wrong Answer\"\nassert find_Element([1,2,3,4,5,6],[[2,3,4],[1,3,5],[1,2,4]],[[1,1],[1,1],[1,1]],3) == 2, \"Wrong Answer\"\nassert find_Element([1,2,3,4,5,6],[[2,3,4],[1,3,5],[1,2,4]],[[1,1],[1,1],[1,1]],3) == 2, \"Wrong Answer\"\nassert find_Element([1,2,3,4,5,6],[[2,3,4],[1,3,5],[1,2,4]],[[1,1],[1,1],[1,1]],2) == 3, \"Wrong Answer\"\nassert find_Element([1,2,3,4,5,6],[[2,3,4],[1,3,5],[1,2,4]],[[1,1],[1,1],[1,1]],2) == 3, \"Wrong Answer\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_Element([1,2,3,4,5],3,2,2) == 1\nfind_Element([1,2,3,4,5],3,1,4) == 2\nfind_Element([1,2,3,4,5],3,1,3) == 3\nfind_Element([1,2,3,4,5],3,1,2) == 4\nfind_Element([1,2,3,4,5],3,2,1) == 5\nfind_Element([1,2,3,4,5],3,2,5) == 4\nfind_Element([1,2,3,4,5],3,3,2) == 2\nfind_Element([1,2,3,4,5],3,2,3) == 3\nfind_Element([1,2,3,4,5],3,1,1) == 1\nfind_Element([1,2,3,4,5],3,1,5) == 4\nfind_Element([1,2,3,4,5],3,2,2) == 3\nfind_Element([1,2,3,4,5],3,1,1) == 1\nfind_Element([1,2,3,4,5],3,2,2) == 3\nfind_Element([1,2,3,4,5],3,1,5) == 4\nfind_Element([1,2,3,4,5],3,2,3) == 2\nfind_Element([1,2,3,4,5],3,1,4) == 2\nfind_Element([1,2,3,4,5],3,1,1) == 1\nfind_Element([1,2,3,4,5],3,1,5) == 1\nfind_Element([1,2,3,4,5],3,1,2) == 2\nfind_Element([1,2,3,4,5],3,2,1) == 2\nfind_Element([1,2,3,4,5],3,2,2) == 3\nfind_Element([1,2,3,4,5],3,2,3) == 3\nfind_Element([1,2,3,4,5],3,2,4) == 4\nfind_Element([1,2,3,4,5],3,2,5) == 4\nfind_Element([1,2,3,4,5],3,2,1) == 4\nfind_Element([1,2,3,4,5],3,1,2) == 3\nfind_Element([1,2,3,4,5],3,1,3) == 3\nfind_Element([1,2,3,4,5],3,1,4) == 4\nfind_Element([1,2,3,4,5],3,1,5) == 4\nfind_Element([1,2,3,4,5],3,1,1) == 1\nfind_Element([1,2,3,4,5],3,2,1) == 4\nfind_Element([1,2,3,4,5],3,2,2) == 3\nfind_Element([1,2,3,4,5],3,2,3) == 3\nfind_Element([1,2,3,4,5],3,2,4) == 3\nfind_Element([1,2,3,4,5],3,2,5) == 2\nfind_Element([1,2,3,4,5],3,3,2) == 3\nfind_Element([1,2,3,4,5],3,3,1) == 2\nfind_Element([1,2,3,4,5],3,3,5) == 3\nfind_Element([1,2,3,4,5],3,3,2) == 3\nfind_Element([1,2,3,4,5],3,3,1) == 3\nfind_Element([1,2,3,4,5],3,3,4) == 2\nfind_Element([1,2,3,4,5],3,3,5) == 4\nfind_Element([1,2,3,4,5],3,3,2) == 3\nfind_Element([1,2,3,4,5],3,3,1) == 2\nfind_Element([1,2,3,4,5],3,3,4) == 3\nfind_Element([1,2,3,4,5],3,3,5) == 4\nfind_Element([1,2,3,4,5],3,4,2) == 3\nfind_Element([1,2,3,4,5],3,4,3) == 4\nfind_Element([1,2,3,4,5],3,4,4) == 2\nfind_Element([1,2,3,4,5],3,4,5) == 3\nfind_Element([1,2,3,4,5],3,4,1) == 2\nfind_Element([1,2,3,4,5],3,4,2) == 2\nfind_Element([1,2,3,4,5],3,4,3) == 3\nfind_Element([1,2,3,4,5],3,4,5) == 4\nfind_Element([1,2,3,4,5],3,4,1) == 4\nfind_Element([1,2,3,4,5],3,4,5) == 3\nfind_Element([1,2,3,4,5],3,5,2) == 2\nfind_Element([1,2,3,4,5],3,5,3) == 3\nfind_Element([1,2,3,4,5],3,5,4) == 4\nfind_Element([1,2,3,4,5],3,5,5) == 4\nfind_Element([1,2,3,4,5],3,5,1) == 3\nfind_Element([1,2,3,4,5],3,5,2) == 2\nfind_Element([1,2,3,4,5],3,5,3) == 3\nfind_Element([1,2,3,4,5],3,5,4) == 4\nfind_Element([1,2,3,4,5],3,5,5) == 3\nfind_Element([1,2,3,4,5],3,5,1) == 4\nfind_Element([1,2,3,4,5],3,5,2) == 4\nfind_Element([1,2,3,4,5],3,5,3) == 3\nfind_Element([1,2,3,4,5],3,5,4) == 3\nfind_Element([1,2,3,4,5],3,5,5) == 4\nfind_Element([1,2,3,4,5],3,5,1) == 5\nfind_Element([1,2,3,4,5],3,5,2) == 4\nfind_Element([1,2,3,4,5],3,5,3) == 4\nfind_Element([1,2,3,4,5],3,5,4) == 3\nfind_Element([1,2,3,4,5],3,5,5) == 2\nfind_Element([1,2,3,4,5],3,5,1) == 2\nfind_Element([1,2,3,4,5],3,5,2) == 3\nfind_Element([1,2,3,4,5],3,5,3) == 4\nfind_Element([1,2,3,4,5],3,5,4) == 3\nfind_Element([1,2,3,4,5],3,5,5) == 3\nfind_Element([1,2,3,4,5],3,5,1) == 4\nfind_Element([1,2,3,4,5],3,5,2) == 3\nfind_Element([1,2,3,4,5],3,5,3) == 4\nfind_Element([1,2,3,4,5],3,5,4) == 4\nfind_Element([1,2,3,4,5],3,5,5) == 4\nfind_Element([1,2,3,4,5],3,5,1) == 3\nfind_Element([1,2,"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef longest_common_prefix(words):\n    '''\n    Write a function to return the longest common prefix in a list of strings.\n    '''\n    pass\n\ndef longest_common_suffix(words):\n    '''\n    Write a function to return the longest common suffix in a list of strings.\n    '''\n    pass\n\ndef longest_common_substring(words):\n    '''\n    Write a function to return the longest common substring in a list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(start_withp([\"I love you\", \"I love you too\", \"I love the way you play\"]))\n    print(start_withp([\"I love you\", \"I love you too\", \"I love the way you play\", \"I don't love you\"]))\n    print(start_withp([\"I love you\", \"I love you too\", \"I love the way you play\", \"I don't love you\", \"I don't love you too\"]))\n    print(start_withp([\"I love you\", \"I love you too\", \"I love the way you play\", \"I don't love you\", \"I don't love you too\"])"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef my_range(start, end, step=1):\n    '''\n    Write a function that returns a list of numbers from the number range.\n    If step > 0, then the list should start from the start and go up to but not including end, and step is used to determine the increment.\n    If step < 0, then the list should start from the start and go down to but not including end, and step is used to determine the decrement.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nSample input:\n['java', 'python', 'php', 'c++', 'ruby', 'c', 'go']\n\nExpected output:\n['java', 'php']\n\n'''"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nwords = ['pra', 'pranjal', 'prap', 'prapp', 'ppal', 'ppall', 'prappp', 'prapppp']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(start_withp(['Python', 'is', 'Awesome', 'and', 'Python', 'is', 'awesome']))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef test_start_withp():\n    assert start_withp(['pythons', 'python', 'python2', 'python3']) == ['pythons', 'python']\n    assert start_withp(['pythons', 'python', 'python2', 'python3', 'hello']) == ['pythons', 'python', 'python2']\n    assert start_withp(['pythons', 'python', 'python2', 'python3', 'hello', 'python3']) == ['pythons', 'python', 'python2', 'python3']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef start_withp_2(words):\n    '''\n    Write a function to return all words in a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp([\"p\", \"pp\", \"ppp\"]) == [\"pp\", \"p\"]\nassert     start_withp([\"pp\", \"p\", \"p\"]) == [\"p\", \"p\"]\nassert     start_withp([\"p\", \"pp\", \"ppp\", \"p\"]) == [\"pp\", \"pp\"]\nassert     start_withp([\"p\"]) == []\nassert     start_withp([\"pp\", \"p\", \"p\", \"p\"]) == [\"pp\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"apple\", \"app\", \"applepie\"]) == [\"applepie\", \"app\"]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    # the current_sum is not inclusive of the index i \n    curr_sum = a[index]\n    if index == k:\n        return curr_sum\n    if index == 0:\n        max_sum = curr_sum\n    else:\n        max_sum = max(max_sum, curr_sum)\n    # the current_sum is not inclusive of the index i \n    for i in range(index, n):\n        curr_sum = max(curr_sum, curr_sum + a[i])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    # the current_sum is not inclusive of the index i \n    curr_sum = a[index]\n    if index == k:\n        return curr_sum\n    if index == 0:\n        max_sum = curr_sum\n    else:\n        max_sum = max(max_sum, curr_sum)\n    # the current_sum is not inclusive of the index i \n    for i in range(index, n):\n        curr_sum = max(curr_sum, curr_sum + a[i])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nimport sys\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    prefix = [0] * n\n    prefix[0] = a[0]\n\n    for i in range(1, n):\n        prefix[i] = prefix[i-1] + a[i]\n\n    '''\n    We will use DP to solve this problem.\n    dp[i] is the maximum sum from 0 to i (including i) \n    which is maximum sum of increasing subsequence\n    in which we include i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], prefix[i])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_increasing_subseq([4,2,-3,1],4,3,2) == -3\nassert max_sum_increasing_subseq([5,-3,6,3],5,3,2) == 2\nassert max_sum_increasing_subseq([4,2,-3,1],4,3,1) == -3\nassert max_sum_increasing_subseq([5,-3,6,3],5,3,0) == 5\nassert max_sum_increasing_subseq([1],0,0,0) == 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum_increasing_subseq([1, 3, 2, 5], 4, 0, 3) == 5\nassert max_sum_increasing_subseq([10, 5, 2, 3], 2, 1, 2) == 7\nassert max_sum_increasing_subseq([10, 5, 2, 3, 8, 5, 2, 8], 2, 3, 5) == 7\nassert max_sum_increasing_subseq([10, 5, 2, 3, 8, 5, 2, 8], 2, 3, 6) == 15\nassert max_sum_increasing_subseq([10, 5, 2, 3, 8, 5, 2, 8], 2, 3, 7) == 13\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum_increasing_subseq([1, 3, 6, 2, 5], 5, 2, 3) == 7, 'wrong answer'\n\n'''\ndef max_sum_increasing_subseq(a, n):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex((1,2,3),2,1) == ((1,),(2,))\nassert     colon_tuplex((1,2,3),2,3) == ((1,),(2,),(3,))\nassert     colon_tuplex((1,2,3),3,1) == ((1,),(2,),(3,))\nassert     colon_tuplex((1,2,3),3,2) == ((1,),(2,),(3,))\nassert     colon_tuplex((1,2,3),3,3) == ((1,),(2,),(3,))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef init_colon(n):\n    '''\n    Write a function to initialize a colon tuple with 1 in every position.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncolon_tuplex((1,2),2,4) == (1,2,(1,2),(1,2))\ncolon_tuplex((1,2),4,4) == (1,2,(1,2),(1,2))\ncolon_tuplex((1,2),1,4) == (1,2,(1,2),(1,2))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex((1,2,3),1,2) == (1,2)\nassert     colon_tuplex((1,2,3),1,3) == (1,3)\nassert     colon_tuplex((1,2,3),1,4) == (1,4)\nassert     colon_tuplex((1,2,3),2,1) == (2,1)\nassert     colon_tuplex((1,2,3),2,2) == (2,2)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     colon_tuplex(('a',),1,2) == ()\nassert     colon_tuplex((),1,2) == ()\nassert     colon_tuplex(('a',),2,2) == ('a',)\nassert     colon_tuplex(('a', 'b'),2,2) == ('a', 'b')\nassert     colon_tuplex(('a', 'b', 'c'),2,2) == ('a', 'b', 'c')\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     colon_tuplex(((1, 2, 3), (4, 5, 6), (7, 8, 9)), 2, 2) == (((1, 2), (3, 4)), ((5, 6), (7, 8)), ((9, 10), (11, 12)))\nassert    colon_tuplex(((1, 2, 3), (4, 5, 6), (7, 8, 9)), 2, 3) == (((1, 2), (3, 4)), ((5, 6), (7, 8)), ((9, 10), (11, 12)))\nassert    colon_tuplex(((1, 2, 3), (4, 5, 6), (7, 8, 9)), 1, 1) == (((1, 2), (3, 4)), ((5, 6), (7, 8)), ((9, 10), (11, 12)))\nassert    colon_tuplex(((1, 2, 3), (4, 5, 6), (7, 8, 9)), 0, 2) == (((1, 2), (3, 4)), ((5, 6), (7, 8)), ((9, 10), (11, 12)))\n\ndef write_bar(tuple_list):\n    '''\n    Write a function to get the longest bar of a list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     colon_tuplex((\"a\", \"b\"),2,4) == ((\"a\", \"b\"), (2, 3))\nassert     colon_tuplex((\"a\", \"b\", \"c\"),3,5) == ((\"a\", \"b\", \"c\"), (2, 4, 5))\nassert     colon_tuplex((\"a\", \"b\", \"c\"),2,5) == ((\"a\", \"b\", \"c\"), (1, 2, 3, 4, 5))\n\ndef flatten(lst):\n    \"\"\"\n    >>> flatten([1, 2, 3, 4, 5, 6, 7])\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> flatten([\"apple\", \"cherry\", \"banana\", \"kiwi\"])\n    ['apple', 'cherry', 'banana', 'kiwi']\n    >>> flatten([[\"apple\", \"kiwi\"], [\"banana\", \"orange\"]])\n    ['apple', 'kiwi', 'banana', 'orange']\n    \"\"\"\n    for item in lst:\n        if isinstance(item,list):\n            yield from flatten(item)\n        else:\n            yield item\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     large_product([1, 2, 3, 4], [2, 3, 4, 5], 2) == 120\nassert     large_product([1, 2, 3, 4], [2, 3, 4, 5], 1) == 120\nassert     large_product([1, 2, 3, 4], [2, 3, 4, 5], 3) == 1260\nassert     large_product([1, 2, 3, 4], [2, 3, 4, 5], 4) == 480\nassert     large_product([1, 2, 3, 4], [2, 3, 4, 5], 5) == 24240\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     large_product([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], 5) == [5, 32, 900, 6480, 7200]\nassert     large_product([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], 2) == [2, 3, 8, 27, 10]\n\ndef select_maximum_numbers(numbers, size):\n    '''\n    Write a function to find the largest number among the first N numbers.\n    The array may contain duplicate numbers.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     large_product([1, 2, 3, 4], [5, 6, 7, 8], 3) == [20, 144, 297], 'Wrong output'\nassert     large_product([1, 2, 3], [4, 5, 6], 4) == [6, 120, 360], 'Wrong output'\nassert large_product([1, 2, 3], [4, 5, 6], 5) == [120, 144, 120, 144, 120], 'Wrong output'\nassert large_product([1, 2, 3], [4, 5, 6], 6) == [120, 144, 120, 144, 120, 144], 'Wrong output'\nassert large_product([1, 2, 3], [4, 5, 6], 7) == [120, 144, 120, 144, 120, 144, 120], 'Wrong output'\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     large_product([10,3,5], [2,8,9], 3) == 80, \"wrong answer\"\nassert     large_product([1,2,3], [1,2,3], 3) == 36, \"wrong answer\"\nassert     large_product([1,2,3], [1,2,3], 4) == 243, \"wrong answer\"\nassert     large_product([1,2,3], [1,2,3], 5) == 240, \"wrong answer\"\nassert     large_product([2,3,4,5], [5,4,3,2], 2) == 60, \"wrong answer\"\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    large_product([1, 5, 2, 3], [2, 5, 3, 4], 3) == 20\n    large_product([2, 3, 4, 3, 2, 1, 4, 5], [2, 2, 4, 3, 5, 1, 3, 4], 4) == 240\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     large_product([1,2,3,4], [2,3,4,5], 2) == 24\nassert     large_product([1,2,3,4], [2,3,4,5], 3) == 60\nassert     large_product([1,2,3,4], [2,3,4,5], 4) == 240\nassert     large_product([1,2,3,4], [2,3,4,5], 5) == 720\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     large_product([2, 3, 4], [5, 6, 7], 2) == 21\nassert     large_product([-3, -4, -5], [-2, -1, 0], 2) == -4\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(1,2)==2\nassert maximum(-1,-2)==-1\nassert maximum(1.5,-2.5)==1.5\nassert maximum(1.5,1.7)==1.5\nassert maximum(-1.5,-1.7)==1.5\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum(6,7) == 7, \"Expected 7\"\nassert maximum(2,-2) == 2, \"Expected 2\"\nassert maximum(-2,2) == 2, \"Expected 2\""
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(1,2) == 2\nassert     maximum(12,5) == 12\nassert     maximum(-10,-2) == -2\nassert     maximum(-5,-10) == -5\nassert     maximum(5,2) == 5\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum(1,2) == 2\nassert maximum(2,2) == 2\nassert maximum(3,2) == 3\nassert maximum(1,3) == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(7,9) == 9\nassert maximum(5,5) == 5"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(10, 20) == 20\nassert     maximum(1, 2) == 2\nassert     maximum(-1, 0) == 0\nassert     maximum(-1, -2) == -2\nassert     maximum(0, 2) == 2\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert maximum(1, 2) == 2\nassert maximum(0, 5) == 5\nassert maximum(-10, -20) == -10\nassert maximum(-20, -10) == 20\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum(3,2) == 3, \"should return 3\"\nassert     maximum(3,3) == 3, \"should return 3\"\nassert     maximum(2,3) == 3, \"should return 3\"\nassert     maximum(2,2) == 2, \"should return 2\"\nassert     maximum(4,5) == 5, \"should return 5\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple('Hello world') == ('H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\nassert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple('goodbye') == ('g', 'o', 'd', 'o', 'b', 'e')\nassert     string_to_tuple('12345') == (\n    '1', '2', '3', '4', '5')\n\n\ndef check_tuples(t1, t2):\n    '''\n    Write a function to check if two given tuples are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple('tuple') == ('t', 'u', 'p', 'o', 'r', 't', 'u', 'p', 'o', 'r', 'a', 'i', 'n', 'g', 'e')\nassert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple('') == ()\nassert     string_to_tuple('') == ()\nassert     string_to_tuple('123') == ('1', '2', '3')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple(\"\") == \"\", \"Expected an empty string to return an empty tuple\"\nassert     string_to_tuple(\"a\") == (\"a\",), \"Expected an 'a' to return ('a',)\"\nassert     string_to_tuple(\"a,b\") == (\"a\", \"b\"), \"Expected an 'a,b' to return ('a', 'b')\"\nassert     string_to_tuple(\"a,b,c\") == (\"a\", \"b\", \"c\"), \"Expected an 'a,b,c' to return ('a', 'b', 'c')\"\nassert     string_to_tuple(\"abc\") == (\"abc\",), \"Expected 'abc' to return ('abc')\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple(\"a\") == ('a',)\nassert     string_to_tuple(\"ab\") == ('a', 'b')\nassert     string_to_tuple(\"abcd\") == ('a', 'b', 'c', 'd')\nassert     string_to_tuple(\"abcd\")!= ('a', 'b', 'c')\n\n\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_tuple('abcdefghijklmnopqrstuvwxyz') == ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') \nassert     string_to_tuple('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == ('A', 'a', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M','m', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S','s', 'T', 't', 'U', 'u', 'V', 'v', 'W', 'w', 'X', 'x', 'Y', 'y', 'Z', 'z') \n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o'), 'incorrect'\nassert     string_to_tuple('goodbye') == ('g', 'o', 'o', 'd', 'e', 'r'), 'incorrect'\nassert     string_to_tuple('g') == ('g',), 'incorrect'\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(string_to_tuple('testing'))\n\ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple of characters into a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (string_to_tuple(\"\") == ())\nassert (string_to_tuple(\"a\") == (\"a\",))\nassert (string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\"))\nassert (string_to_tuple(\"hello world!\") == (\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\", \" \"))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_left_most_unset_bit(12) == False\nassert     set_left_most_unset_bit(1) == True\nassert     set_left_most_unset_bit(0) == True\nassert     set_left_most_unset_bit(128) == True\nassert     set_left_most_unset_bit(127) == False\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_left_most_unset_bit(0)     == 0\nassert     set_left_most_unset_bit(1)     == 1\nassert     set_left_most_unset_bit(8)     == 1\nassert     set_left_most_unset_bit(9)     == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('\\n\\nOutput for set_left_most_unset_bit:')\nprint(set_left_most_unset_bit(0b1101))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(0b1111) == 0b0000\nassert     set_left_most_unset_bit(0b10001) == 0b10001\nassert     set_left_most_unset_bit(0b111101) == 0b111101\nassert     set_left_most_unset_bit(0b11110110101010) == 0b11110110101010\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(0) == 0 \nassert     set_left_most_unset_bit(4) == 2\nassert     set_left_most_unset_bit(8) == 3\nassert     set_left_most_unset_bit(14) == 5\nassert     set_left_most_unset_bit(31) == 7\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(0,0) == 0\nassert     volume_cone(1,0) == 0\nassert     volume_cone(1,1) == 1\nassert     volume_cone(2,1) == math.pi\nassert     volume_cone(3,1) == math.pi*(3/2)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cone(1,5) == math.pi * r ** 2 * h / 3, 'Volume of Cone: 1, 5'\nassert     volume_cone(2,3) == math.pi * r ** 2 * 2 * h / 3, 'Volume of Cone: 2, 3'\nassert     volume_cone(3,2) == math.pi * r ** 2 * 2 * 2 * h / 3, 'Volume of Cone: 3, 2'\nassert     volume_cone(4,6) == math.pi * r ** 2 * 2 * 3 * h / 3, 'Volume of Cone: 4, 6'\nassert     volume_cone(5,8) == math.pi * r ** 2 * 2 * 3 * 2 * h / 3, 'Volume of Cone: 5, 8'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cone(1.0,1.0) == 1.4142135623730951\nassert     volume_cone(1.0,2.0) == 2.164063758521647\nassert     volume_cone(1.0,3.0) == 3.164063758521646\nassert     volume_cone(1.0,4.0) == 3.872049188778741\nassert     volume_cone(1.0,5.0) == 4.65661287307739\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(1,5) == 5.1944444444\nassert volume_cone(0,3) == 0.0\nassert volume_cone(1,0) == 0.0\nassert volume_cone(-1,3) == 0.0\nassert volume_cone(0,0) == 0.0\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(3,4) == 78.5\nassert     volume_cone(1,2) == 1.61\nassert     volume_cone(2,4) == 6.49\nassert     volume_cone(2,3) == 3.85\nassert     volume_cone(3,1) == 3.14\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     highest_Power_of_2(3) ==     1 \nassert     highest_Power_of_2(7) ==     8 \nassert     highest_Power_of_2(9) ==     16\nassert     highest_Power_of_2(14) ==     8\nassert     highest_Power_of_2(31) ==     128\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     highest_Power_of_2(0) == 0\nassert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(2) == 1\nassert     highest_Power_of_2(3) == 2\nassert     highest_Power_of_2(4) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(0) == 1 \nassert     highest_Power_of_2(1) == 1 \nassert     highest_Power_of_2(3) == 2 \nassert     highest_Power_of_2(4) == 2 \nassert     highest_Power_of_2(10) == 4 \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     highest_Power_of_2(7) == 1\nassert     highest_Power_of_2(15) == 2\nassert     highest_Power_of_2(1024) == 3\nassert highest_Power_of_2(4096) == 3\nassert highest_Power_of_2(4097) == 3"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     highest_Power_of_2(0) == 0\nassert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(2) == 2\nassert     highest_Power_of_2(3) == 3\nassert     highest_Power_of_2(4) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    highest_Power_of_2(16) == 16,'return 16'\n    highest_Power_of_2(17) == 17,'return 17'\n    highest_Power_of_2(20) == 8,'return 8'\n    highest_Power_of_2(0) == 1,'return 1'\n    highest_Power_of_2(13) == 8,'return 8'\n    highest_Power_of_2(7) == 7,'return 7'\n    highest_Power_of_2(37) == 16,'return 16'\n    highest_Power_of_2(6) == 2,'return 2'\n    highest_Power_of_2(1) == 1,'return 1'\n\nprint('Testing for highest_Power_of_2 - is it correct...')\nprint(highest_Power_of_2(0) == 1) \nprint(highest_Power_of_2(8) == 8) \nprint(highest_Power_of_2(6) == 2) \nprint(highest_Power_of_2(10) == 10) \nprint(highest_Power_of_2(15) == 16) \nprint(highest_Power_of_2(32) == 8) \nprint(highest_Power_of_2(31) == 16) \nprint(highest_Power_of_2(37) == 16) \nprint(highest_Power_of_2(12) == 2) \nprint(highest_Power_of_2(15) == 16) \nprint(highest_Power_of_2(7) == 7) \nprint(highest_Power_of_2(16) == 8) \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_power_of_2(n): \n    '''\n    Write a python function to check if the given number is power of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     highest_Power_of_2(20) == 8, 'Highest Power of 2 should be 8.'\nassert highest_Power_of_2(15) == 3, 'Highest Power of 2 should be 3.'\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n\ndef find_lucas_memoization(n): \n    '''\n    Write a function to find then'th lucas number using memoization.\n    '''\n    if n <= 2:\n        return 2 if n == 1 else 3\n    # return memoization result for n == 2\n    return find_lucas_memoization(n-1) + find_lucas_memoization(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nfind_lucas(1) == 2\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 5\nfind_lucas(5) == 8\nfind_lucas(6) == 13\nfind_lucas(7) == 21\nfind_lucas(8) == 34\nfind_lucas(9) == 55\nfind_lucas(10) == 89\nfind_lucas(11) == 144\nfind_lucas(12) == 233\nfind_lucas(13) == 377\nfind_lucas(14) == 610\nfind_lucas(15) == 987\nfind_lucas(16) == 2434\nfind_lucas(17) == 4181\nfind_lucas(18) == 6765\nfind_lucas(19) == 10946\nfind_lucas(20) == 25343\nfind_lucas(21) == 49181\nfind_lucas(22) == 86241\nfind_lucas(23) == 144695\nfind_lucas(24) == 3776765\nfind_lucas(25) == 6528069\nfind_lucas(26) == 102869569\nfind_lucas(27) == 267772765\nfind_lucas(28) == 51422917\nfind_lucas(29) == 824691393\nfind_lucas(30) == 1554400567\nfind_lucas(31) == 3874691393\nfind_lucas(32) == 6808765273\nfind_lucas(33) == 1248118819\nfind_lucas(34) == 265854819\nfind_lucas(35) == 5188286963\nfind_lucas(36) == 8286963\nfind_lucas(37) == 154185829\nfind_lucas(38) == 3874691393\nfind_lucas(39) == 6827852639\nfind_lucas(40) == 1248118819\nfind_lucas(41) == 265854819\nfind_lucas(42) == 5188286963\nfind_lucas(43) == 8286963\nfind_lucas(44) == 154185829\nfind_lucas(45) == 3874691393\nfind_lucas(46) == 6808765273\nfind_lucas(47) == 1248118819\nfind_lucas(48) == 265854819\nfind_lucas(49) == 5188286963\nfind_lucas(50) == 8286963\nfind_lucas(51) == 154185829\nfind_lucas(52) == 3874691393\nfind_lucas(53) == 6827852639\nfind_lucas(54) == 1248118819\nfind_lucas(55) == 265854819\nfind_lucas(56) == 5188286963\nfind_lucas(57) == 8286963\nfind_lucas(58) == 154185829\nfind_lucas(59) == 3874691393\nfind_lucas(60) == 6808765273\nfind_lucas(61) == 1248118819\nfind_lucas(62) == 265854819\nfind_lucas(63) == 5188286963\nfind_lucas(64) == 8286963\nfind_lucas(65) == 154185829\nfind_lucas(66) == 3874691393\nfind_lucas(67) == 6827852639\nfind_lucas(68) == 1248118819\nfind_lucas(69) == 265854819\nfind_lucas(70) == 5188286963\nfind_lucas(71) == 8286963\nfind_lucas(72) == 154185829\nfind_lucas(73) == 3874691393\nfind_lucas(74) == 6808765273\nfind_lucas(75) == 1248118819\nfind_lucas(76) == 265854819\nfind_lucas(77) == 5188286963\nfind_lucas(78) == 8286963\nfind_lucas(79) == 154185829\nfind_lucas(80) == 3874691393\nfind_lucas(81) == 6827852639\nfind_lucas(82) == 1248118819\nfind_lucas(83) == 265854819\nfind_lucas(84) == 5188286963\nfind_lucas(85) == 8286963\nfind_lucas(86) == 154185829\nfind_lucas(87) == 3874691393\nfind_lucas(88) == 6808765273\nfind_lucas(89) == 1248118819\nfind_lucas(90) == 265854819\nfind_lucas(91) == 5188286963\nfind_lucas(92) == 8286963\nfind_lucas(93) == 154185829\nfind_lucas(94) == 3874691393\nfind_lucas(95) == 6827852639\nfind_lucas(96) == 1248118819\nfind_lucas(97) == 265854819\nfind_lucas(98) == 5188286963\nfind_lucas(99) == 8286963\nfind_lucas(100) == 154185829\nfind_lucas(101) == 3874691393\nfind_lucas(102) == 6808765273\nfind_lucas(103) == 1248118819\nfind_lucas(104) == 265854819\nfind_lucas(105) == 5188286963\nfind_lucas(106) == 8286963\nfind_lucas(107) == 154185829\nfind_lucas(108) == 3874691393\nfind_lucas(109) == 6827852639\nfind_lucas(110) == 1248118819\nfind_lucas(111) == 265854819\nfind_lucas(112) == 5188286963\nfind_lucas(113) == 8286963\nfind_lucas(114) == 154185829\nfind_lucas(115) == 3874691393\nfind_lucas(116) == 6808765273\nfind_lucas(117) == 1248118819\nfind_lucas(118) == 265854819\nfind_lucas(119) == 5188286963\nfind_lucas(120) == 8286963\nfind_lucas(121) == 154185829\nfind_lucas(122) == 3874691393\nfind_lucas(123) == 6827852639\nfind_lucas(124) == 1248118819\nfind_lucas(125) == 265854819\nfind_lucas(126) == 5188286963\nfind_lucas(127) == 8286963\nfind_lucas(128) == 154185829\nfind_lucas(129) == 3874691393\nfind_lucas(130) == 6808765273\nfind_lucas(131) == 1248118819\nfind_lucas(132) == 265854819\nfind_lucas(133) == 5188286963\nfind_lucas(134) == 8286963\nfind_lucas(135) == 154185829\nfind_lucas(136) == 3874691393\nfind_lucas(137) == 6827852639\nfind_lucas(138) == 1248118819\nfind_lucas(139) == 265854819\nfind_lucas(140) == 5188286963\nfind_lucas(141) == 8286963\nfind_lucas(142) == 154185829\nfind_lucas(143) == 387"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = 1\n    for i in range(n): \n        lucas = lucas + 2\n    return lucas \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\nassert     find_lucas(6) == 18\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lucas(2) == 3\nassert     find_lucas(8) == 21\n\ndef find_lucas_recursive(n):\n    '''\n    Write a function that finds then'th lucas number in O(log n) time.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lucas(0) == 2, 'Wrong output'\nassert     find_lucas(1) == 1, 'Wrong output'\nassert     find_lucas(2) == 3, 'Wrong output'\nassert     find_lucas(3) == 4, 'Wrong output'\nassert     find_lucas(4) == 7, 'Wrong output'\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_lucas(0) == 2\nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_string([1, 2, 3, 4, 5], 'this is %s') == ['this is 1', 'this is 2', 'this is 3', 'this is 4', 'this is 5']\nassert     add_string([1, 2, 3, 4, 5], 'this is %d') == ['this is 1', 'this is 2', 'this is 3', 'this is 4', 'this is 5']\nassert     add_string([1, 2, 3, 4, 5], 'this is %.1f') == ['this is 1.0', 'this is 2.0', 'this is 3.0', 'this is 4.0', 'this is 5.0']\nassert     add_string([1, 2, 3, 4, 5], 'this is %f') == ['this is 1.0', 'this is 2.0', 'this is 3.0', 'this is 4.0', 'this is 5.0']\nassert     add_string([1, 2, 3, 4, 5], 'this is %.2f') == ['this is 1.00', 'this is 2.00', 'this is 3.00', 'this is 4.00', 'this is 5.00']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_string(['C', 'C++', 'Java'], '{0:>15}') == ['C       C++        Java']\nassert     add_string(['C', 'C++', 'Java'], '{0:<15}') == ['C       C++        Java']\nassert     add_string(['C', 'C++', 'Java'], '{0:^15}') == ['C C++       Java']\nassert     add_string(['C', 'C++', 'Java'], '{0:=15}') == ['C C++       Java']\n\ndef add_string2(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert add_string([1,2,3,4], '{0} {1} {2} {3}') == ['1', '2', '3', '4']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_string([\"Hello\", \"World\", \"!\"], \"Hello {0}\") == \"Hello World!\"\nassert     add_string([\"Hello\", \"World\", \"!\"], \"World {0}!\") == \"World World!!\"\nassert     add_string([\"Hello\", \"World\", \"!\"], \"!\") == \"Hello World!!\"\nassert     add_string([\"Hello\", \"World\", \"!\"], \"\") == \"Hello World!!\"\nassert     add_string([\"Hello\", \"World\", \"!\"], \"\") == \"Hello World!!\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string(['a','b','c'], '{}') ==     ['a', 'b', 'c']\nassert     add_string(['a','b','c'], '{}') ==     ['a', 'b', 'c']\nassert     add_string(['a','b','c'], '{}') ==     ['a', 'b', 'c']\nassert     add_string(['a','b','c'], '{}') ==     ['a', 'b', 'c']\nassert     add_string(['a','b','c'], '{}') ==     ['a', 'b', 'c']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    add_string([\"\",\"\",\"\",\"\"], \"Hello\") == \"Hello\"\n    add_string([\"\",\"\",\"\",\"\"], \"Goodbye\") == \"Goodbye\"\n    add_string([\"\",\"\",\"\",\"\",\"\",\"\"], \"All done\") == \"All done\"\n    add_string([\"Hello\",\"Goodbye\",\"All done\"], \"World\") == \"World\"\n    add_string([\"Hi\",\"Bye\",\"Goodbye\",\"Hello\",\"All done\"], \"There\") == \"There\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_string(['a', 'b', 'c'], '{}') == ['a', 'b', 'c']\nassert     add_string(['a', 'b', 'c'], '{0}') == ['a', 'b', 'c']\nassert     add_string(['a', 'b', 'c'], '{0:>3}') == ['a', 'b', 'c']\nassert     add_string(['a', 'b', 'c'], '{1}') == ['b', 'c', 'a']\nassert     add_string(['a', 'b', 'c'], '{2:>3}') == ['b', 'c', 'a']\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary([1,2,3], ['a','b','c'], ['a','b','c']) == {1: {'a': 'a', 'b': 'b', 'c': 'c'}, 2: {'a': 'a', 'b': 'b', 'c': 'c'}, 3: {'a': 'a', 'b': 'b', 'c': 'c'}}\nassert    convert_list_dictionary([1,2,3], ['a','b','c'], ['a','b','c','d']) == {1: {'a': 'a', 'b': 'b', 'c': 'c'}, 2: {'a': 'a', 'b': 'b', 'c': 'c'}, 3: {'a': 'a', 'b': 'b', 'c': 'c'}, 4: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd'}}\nassert    convert_list_dictionary([1,2,3], ['a','b','c'], ['a','b','c','d','e']) == {1: {'a': 'a', 'b': 'b', 'c': 'c'}, 2: {'a': 'a', 'b': 'b', 'c': 'c'}, 3: {'a': 'a', 'b': 'b', 'c': 'c'}, 4: {'a': 'a', 'b': 'b', 'c': 'c'}, 5: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e'}}\nassert    convert_list_dictionary([1,2,3], ['a','b','c'], ['a','b','c','d','e','f']) == {1: {'a': 'a', 'b': 'b', 'c': 'c'}, 2: {'a': 'a', 'b': 'b', 'c': 'c'}, 3: {'a': 'a', 'b': 'b', 'c': 'c'}, 4: {'a': 'a', 'b': 'b', 'c': 'c'}, 5: {'a': 'a', 'b': 'b', 'c': 'c'}, 6: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}}\nassert    convert_list_dictionary([1,2,3], ['a','b','c'], ['a','b','c','d','e','f'], ['g','h','i','j','k']) == {1: {'a': 'a', 'b': 'b', 'c': 'c'}, 2: {'a': 'a', 'b': 'b', 'c': 'c'}, 3: {'a': 'a', 'b': 'b', 'c': 'c'}, 4: {'a': 'a', 'b': 'b', 'c': 'c'}, 5: {'a': 'a', 'b': 'b', 'c': 'c'}, 6: {'a': 'a', 'b': 'b', 'c': 'c'}, 7: {'a': 'a', 'b': 'b', 'c': 'c'}, 8: {'a': 'a', 'b': 'b', 'c': 'c'}, 9: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 10: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 11: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 12: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 13: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 14: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 15: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 16: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 17: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 18: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 19: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 20: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 21: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 22: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 23: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 24: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 25: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 26: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 27: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 28: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 29: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 30: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 31: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}, 32: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary(\n    l1 = [['John', 'Curry'], ['Peter', 'Parker']],\n    l2 = ['seoul', 'daegu', 'kyungu', 'daejeon'],\n    l3 = [['King', 'Lee'], ['Queen', 'Kim']],\n    ) == {'John': ['Curry'], 'Peter': ['Parker']}, \\\n    'Your convert_list_dictionary function is not correct.'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"\\n\\n\\ncorrectness of convert_list_dictionary\")\nconvert_list_dictionary([1,2], [3,4], [5,6])\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary([], {}, {}) == {}\nassert convert_list_dictionary([], {}, \"h\") == \"h\"\nassert convert_list_dictionary([], {}, 3) == 3\nassert convert_list_dictionary([\"a\"], {\"a\": 1}, 1) == {\"a\": 1}\nassert convert_list_dictionary([\"a\"], {\"a\": 1}, \"b\") == \"b\"\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary(['a', 'b'], ['c', 'd'], ['e']) == {'a': {'c': 'e', 'd': 'e'}, 'b': {'c': 'e', 'd': 'e'}}\nassert     convert_list_dictionary(['a', 'b'], ['c', 'd'], ['e']) == {'a': {'c': 'e', 'd': 'e'}, 'b': {'c': 'e', 'd': 'e'}}\nassert     convert_list_dictionary(['a', 'b', 'c'], ['e', 'f'], ['g', 'h']) == {'a': {'e': 'g', 'f': 'g', 'h': 'g'}, 'b': {'e': 'f', 'f': 'g', 'h': 'g'}, 'c': {'e': 'g', 'f': 'g', 'h': 'g'}}\nassert     convert_list_dictionary(['a', 'b'], ['e', 'f'], ['g', 'h']) == {'a': {'e': 'g', 'f': 'g', 'h': 'g'}, 'b': {'e': 'g', 'f': 'g', 'h': 'g'}}\nassert     convert_list_dictionary(['a', 'b'], ['e', 'f'], ['g', 'h']) == {'a': {'e': 'g', 'f': 'g', 'h': 'g'}, 'b': {'e': 'g', 'f': 'g', 'h': 'g'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary([1, 2, 3], [4, 5, 6], ['a', 'b', 'c']) == {1: {4: 'a', 5: 'b', 6: 'c'}, 2: {4: 'a', 5: 'b', 6: 'c'}, 3: {4: 'a', 5: 'b', 6: 'c'}}\nassert     convert_list_dictionary([1, 2, 3], [4, 5, 6], ['a', 'b', 'c']) == {1: {4: 'a', 5: 'b', 6: 'c'}, 2: {4: 'a', 5: 'b', 6: 'c'}, 3: {4: 'a', 5: 'b', 6: 'c'}}\nassert convert_list_dictionary([1, 2, 3], ['4', '5', '6'], ['a', 'b', 'c']) == {1: {'4': 'a', '5': 'b', '6': 'c'}, 2: {'4': 'a', '5': 'b', '6': 'c'}, 3: {'4': 'a', '5': 'b', '6': 'c'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {1: {\"a\": \"x\"}, 2: {\"b\": \"y\"}, 3: {\"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"1\": {\"a\": \"x\"}, \"2\": {\"b\": \"y\"}, \"3\": {\"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"1\": {\"a\": \"x\"}, \"2\": {\"b\": \"y\"}, \"3\": {\"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"1\": {\"a\": \"x\"}, \"2\": {\"b\": \"y\"}, \"3\": {\"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"1\": {\"a\": \"x\"}, \"2\": {\"b\": \"y\"}, \"3\": {\"c\": \"z\"}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary([[1,2,3,4],[5,6,7,8,9]],[2,3,4,5,6],[3,4,5,6,7,8,9]) == {1: {2: {3: {4: {5: {6: {7: {8: {9: None}}}}}}}}}\nassert     convert_list_dictionary([[1,2,3,4],[5,6,7,8,9]],[2,3,4,5,6],[3,4,5,6,7,8,9]) == {1: {2: {3: {4: {5: {6: {7: {8: {9: None}}}}}}}}}\nassert     convert_list_dictionary([[1,2,3,4],[5,6,7,8,9]],[2,3,4,5,6],[3,4,5,6,7,8,9]) == {1: {2: {3: {4: {5: {6: {7: {8: {9: None}}}}}}}}}\n\n\n\ndef convert_nested_list_dictionary(nested_list_1, nested_list_2, nested_list_3, nested_list_4, nested_list_5, nested_list_6):\n    '''\n    Write a function to convert more than one list of list to nested dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([1,2], [3,4], [\"a\", \"b\"]) == {\"1\": {\"3\": \"a\"}, \"2\": {\"4\": \"b\"}}\nassert     convert_list_dictionary([1,2], [3,4], [\"a\", \"b\"]) == {\"1\": {\"3\": \"a\"}, \"2\": {\"4\": \"b\"}}\nassert     convert_list_dictionary([1,2], [3,4], [\"a\", \"b\"]) == {\"1\": {\"3\": \"a\"}, \"2\": {\"4\": \"b\"}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_max_sum_iterative(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_max_sum(10) == 33\nassert     get_max_sum(5) == 55\nassert     get_max_sum(100) == 669"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_sum(5) == 16, 'Wrong Answer :('\nassert     get_max_sum(6) == 17, 'Wrong Answer :('\nassert     get_max_sum(7) == 18, 'Wrong Answer :('\nassert     get_max_sum(8) == 19, 'Wrong Answer :('\nassert     get_max_sum(10) == 21, 'Wrong Answer :('\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (2) == 2\nassert     get_max_sum (4) == 6\nassert     get_max_sum (5) == 11\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum(3) == 9, 'Test Failed'\nassert     get_max_sum(5) == 21, 'Test Failed'\nassert     get_max_sum(10) == 55, 'Test Failed'\nassert     get_max_sum(12) == 63, 'Test Failed'\nassert     get_max_sum(15) == 78, 'Test Failed'\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    get_max_sum(4) == 6\n    get_max_sum(8) == 13\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (2) == 2\nassert     get_max_sum (3) == 4\nassert     get_max_sum (4) == 7\nassert     get_max_sum (5) == 10\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5\nassert     max_length_list([1,1,2,3,3,4,5]) == 5\nassert     max_length_list([1,1,1,1,1,2,3,3,3,4,5]) == 5\n\nprint('All tests passed')"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length_list([]    ) == 0, 'None'\nassert     max_length_list([1]) == 1, 'One element'\nassert     max_length_list([1, 2, 3]) == 3, 'Three elements'\nassert     max_length_list([1, 2, 3, 4, 5, 6]) == 5, 'Six elements'\nassert     max_length_list([4, 3, 2, 1, 5]) == 5, 'Even number of elements'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ninput_list = [[], [1], [2], [3], [4], [5], [], []]\nexpected_output = 5\n\noutput = max_length_list(input_list)\nassert output == expected_output\nprint(f\"The correct output is: {output}\")\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length_list(['p', 'q', 'r']) == ['r']\nassert     max_length_list([]) == []\nassert     max_length_list(['p', 'q', 'r', 't', 'u', 'v']) == ['r', 't']\nassert     max_length_list(['p', 'q', 'r', 't', 'u', 'v', 'w', 'x']) == ['r', 't', 'u']"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length_list([1, 2, 3, 4, 5, 6]) == 6, 'wrong answer'\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7]) == 6, 'wrong answer'\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == 8, 'wrong answer'\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8, 'wrong answer'\nassert     max_length_list([]) == 0, 'wrong answer'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([]) == 0, \"Empty list\"\nassert     max_length_list([1,2,3]) == 3, \"Correct list\"\nassert     max_length_list([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 5, \"Long list\"\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 16, \"Long list\"\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length_list([1, 3, 4, 2]) == 4, \"should be 4\"\nassert     max_length_list([1, 3, 4, 2, 5, 1, 3, 4]) == 4, \"should be 4\"\nassert     max_length_list([1, 3, 4, 2, 5, 1, 3, 4, 6, 7, 8, 1]) == 8, \"should be 8\"\nassert     max_length_list([]) == 0, \"should be 0\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9, \"should be 9\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,2,3,4)) == True,'Wrong output'\nassert     check_distinct((1,1,2,3,5,5)) == True,'Wrong output'\nassert     check_distinct((1,2,3,4)) == False,'Wrong output'\nassert     check_distinct((1,1,2,3,5,5)) == False,'Wrong output'\nassert     check_distinct((1,2,3,4,5,5)) == True,'Wrong output'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncheck_distinct((0,1,1,2,3,4)) == True\n\nprint(\"You passed all test cases! Congrats\")"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_distinct((0, 1, 2, 2)) == True\nassert     check_distinct((0, 1, 2, 2, 3)) == False\n\nprint('Congratulations, you passed all tests!')"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct(('a','b','c')) == False, \\\n        \"check_distinct(('a','b','c')) should return False\"\nassert     check_distinct(('a','b','a')) == True, \\\n        \"check_distinct(('a','b','a')) should return True\"\nassert     check_distinct((1,2,3)) == True, \\\n        \"check_distinct((1,2,3)) should return True\"\nassert     check_distinct(('a','b','c','a')) == True, \\\n        \"check_distinct(('a','b','c','a')) should return True\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_distinct([1, 2, 3, 4, 5]) == False\nassert     check_distinct((1, 2, 3, 4, 5)) == False\nassert     check_distinct((1, 2, 3, 4, 5, 5)) == True\nassert     check_distinct((5, 5, 5, 5, 5, 5)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct((2, 3, 2, 1)) == True\nassert     check_distinct((5, 6, 4, 1)) == False\nassert     check_distinct((3, 3, 2, 2)) == True\n\ndef check_even(n):\n    '''\n    Write a function to check if a given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct((1, 2, 3)) == False, \"ERROR: 1, 2, 3\"\nassert     check_distinct((1, 2)) == False, \"ERROR: 1, 2\"\nassert     check_distinct((1, 2, 2, 3, 4)) == True, \"ERROR: 1, 2, 2, 3, 4\"\nprint(\"You have passed all the tests!\")"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct(('krishna', 'amar', 'krishna')) == True, \"Values not distinct\"\nassert check_distinct(('krishna', 'amar', 'krishna', 'krishna')) == False, \"Values are same\"\nassert check_distinct(('krishna', 'amar')) == True, \"Values not distinct\"\nassert check_distinct(('krishna')) == True, \"Values not distinct\"\nassert check_distinct(()) == False, \"Values not distinct\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct([1,2,3,4]) == True\nassert     check_distinct([1,2,3,2]) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct((1,2,3,1)) == True, \"First example\"\nassert     check_distinct((1,2,3,1,4,5,6)) == False, \"Second example\"\nassert     check_distinct((1,2,3,1,4,5,6,7)) == False, \"Third example\"\nassert     check_distinct((1,2,3,1,4,5,6,7,8)) == True, \"Fourth example\"\nassert     check_distinct((1,2,3,1,4,5,6,7,8,9,10)) == True, \"Fifth example\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('') == -1\nassert     first_non_repeating_character('abcde') == -1\nassert     first_non_repeating_character('abcdeff') == -1\nassert     first_non_repeating_character('aabcccccceee') == -1\nassert     first_non_repeating_character('aabb') == 0\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character(\"aab\") == \"a\"\nassert     first_non_repeating_character(\"aab\") == \"a\"\nassert     first_non_repeating_character(\"aaab\") == \"a\"\nassert     first_non_repeating_character(\"abcdabcde\") == \"e\"\nassert     first_non_repeating_character(\"\") == \" \"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert first_non_repeating_character('abaccdde') == \"e\"\nassert first_non_repeating_character('abcdeeff') == \"f\"\nassert first_non_repeating_character('abc') == \"a\"\nassert first_non_repeating_character('') == None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character('abcdabc') == 'a'\nassert     first_non_repeating_character('abcdef') == 'a'\nassert     first_non_repeating_character('a') == 'a'\nassert     first_non_repeating_character('abcdabcdef') == 'c'\nassert     first_non_repeating_character('abcdefghijklmnopqrstuvwxyz') == 'z'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character(\"abc\") == 'a'\nassert     first_non_repeating_character(\"abc\") == 'c'\nassert     first_non_repeating_character(\"aabc\") == 'a'\nassert     first_non_repeating_character(\"abcabcabcabc\") == 'a'\nassert     first_non_repeating_character(\"abcabcabcabcabc\") == 'c'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character(\"a\") == 0\nassert     first_non_repeating_character(\"abcabcabc\") == 0\nassert     first_non_repeating_character(\"tourist\") == 0\nassert     first_non_repeating_character(\"abcbcd\") == 1\nassert     first_non_repeating_character(\"a\") == 0\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character(\"\") == None\nassert     first_non_repeating_character(\"a\") == \"a\"\nassert     first_non_repeating_character(\"abcd\") == None\nassert     first_non_repeating_character(\"12ab34cd\") == \"d\"\nassert     first_non_repeating_character(\"aabbccddeeff\") == \"c\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character(\"testt\") == \"t\"\nassert     first_non_repeating_character(\"test\") == \"e\"\nassert     first_non_repeating_character(\"testtest\") == \"e\"\nassert     first_non_repeating_character(\"testtesttest\") == \"t\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef contains_only_lowercase(string):\n    '''\n    Write a function to check whether the given string contains only lowercase characters.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_char('aaaa') == False, \"This is not a correct string\"\nassert check_char('aaaaa') == True, \"This is a correct string\"\nassert check_char('aaaaaa') == False, \"This is not a correct string\"\nassert check_char('aaaaaaa') == True, \"This is a correct string\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char('abc') == True, \"Should return True\"\nassert    check_char('abc.') == False, \"Should return False\"\nassert    check_char('a.a') == True, \"Should return True\"\nassert    check_char('a.') == False, \"Should return False\"\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string contains an even number of characters or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_char(\"awesome\") == True, \"Should be True\"\nassert check_char(\"abc\") == False, \"Should be False\"\nassert check_char(\"jx\") == False, \"Should be False\"\nassert check_char(\"as\") == True, \"Should be True\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not check_char('x')\nassert not check_char('Hello')\nassert not check_char('Hello!')\nassert check_char('Hello_')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_char('abcd') == True, 'Should be True'\nassert     check_char('abcdabcd') == True, 'Should be True'\nassert     check_char('abcdabc') == False, 'Should be False'\nassert     check_char('abcabc') == True, 'Should be True'\nassert     check_char('') == False, 'Should be False'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_char(    'aaaaa') \nassert not check_char(    'aaaa')\nassert not check_char(    'aaaaa') \n\ndef check_char_1(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_char('a') == True\nassert check_char('a') == True\nassert check_char('ab') == False\nassert check_char('abba') == True\nassert check_char('bba') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not check_char('abab') \nassert check_char('aba') \nassert check_char('a') \nassert not check_char('aab') \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_numbers(1, 2, 3) == 2.5\nassert     median_numbers(2, 1, 3) == 2.5\nassert     median_numbers(3, 1, 2) == 2.5\nassert     median_numbers(1, 2, 3) == 2.5\nassert     median_numbers(3, 2, 1) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_numbers([2,5,5,8,12,12,18,33,44,89], 3, 7) == 5.75\nassert     median_numbers([3,5,5,8,12,12,18,33,44,89], 3, 7) == 5.75\nassert     median_numbers([2,5,5,8,12,12,18,33,44,89], 5, 7) == 5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nimport unittest\nfrom median_numbers import median_numbers\n\nclass TestMedian(unittest.TestCase):\n    \n    def test_0_3(self):\n        self.assertEqual(median_numbers(0,1,2), 1)\n\n    def test_1_3(self):\n        self."
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_numbers(1,2,3) == 2, 'You are missing one call'\nassert     median_numbers(0,1,2) == 1.5, 'You are missing one call'\n\ndef median(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers(1,2,3) == 2.5, 'Wrong!'\nassert     median_numbers(2,2,2) == 2, 'Wrong!'\nassert     median_numbers(1,3,2) == 2.5, 'Wrong!'\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('Median_numbers tests:')\nassert median_numbers(1, 2, 3) == 2\nassert median_numbers(1, 3, 2) == 2\nassert median_numbers(3, 1, 2) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_numbers(1,2,3) == 2.5, 'Wrong output'\nassert     median_numbers(1,2,4) == 2.5, 'Wrong output'\nassert     median_numbers(3,2,4) == 2.5, 'Wrong output'\nassert     median_numbers(1,2,4) == 2.5, 'Wrong output'\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(0,1,3) == 1.5\nassert     median_numbers(0,1,3) == 1.5\nassert     median_numbers(-1,3,5) == 3.0\nassert     median_numbers(1,2,3) == 2.5\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    # The test code\n    list_of_numbers = [123, 546, 23, 689, 345, 234, 4, 9, 8]\n    print(f'The sum of the digits of each number in the list is: {sum_of_digits(list_of_numbers)}')"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef remove_duplicates(nums):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_of_digits([2, 4, 2, 1, 8]) == 5\nassert sum_of_digits([3, 0, 1, 2, 9]) == 7\nassert sum_of_digits([2, 4, 2, 1, 8, 9]) == 10\nassert sum_of_digits([0, 5, 7, 2, 4]) == 11\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([\n    46, \n    941, \n    531, \n    856, \n    729, \n    546, \n    749, \n    769, \n    893, \n    831, \n    841, \n    769, \n    778, \n    785, \n    788, \n    845, \n    852, \n    849, \n    664, \n    485, \n    647, \n    831, \n    798, \n    843, \n    832, \n    871, \n    845, \n    841, \n    788, \n    842, \n    788, \n    824, \n    873, \n    869, \n    874, \n    823, \n    871, \n    724, \n    745, \n    531, \n    856, \n    789, \n    769, \n    749, \n    823, \n    831, \n    849, \n    769, \n    769, \n    845, \n    788, \n    831, \n    788, \n    836, \n    788, \n    824, \n    823, \n    832, \n    832, \n    831, \n    788, \n    795, \n    832, \n    832, \n    786, \n    794, \n    769, \n    778, \n    799, \n    747, \n    826, \n    832, \n    834, \n    843, \n    842, \n    769, \n    788, \n    785, \n    774, \n    793, \n    745, \n    843, \n    823, \n    831, \n    834, \n    796, \n    826, \n    842, \n    798, \n    788, \n    831, \n    797, \n    831, \n    795, \n    845, \n    787, \n    789, \n    784, \n    799, \n    832, \n    845, \n    871, \n    796, \n    851, \n    831, \n    834, \n    843, \n    795, \n    843, \n    797, \n    842, \n    786, \n    786, \n    796, \n    798, \n    832, \n    835, \n    845, \n    769, \n    788, \n    797, \n    841, \n    795, \n    824, \n    869, \n    832, \n    842, \n    834, \n    841, \n    826, \n    845, \n    847, \n    841, \n    834, \n    836, \n    847, \n    841, \n    833, \n    836, \n    844, \n    824, \n    834, \n    823, \n    823, \n    849, \n    813, \n    788, \n    841, \n    797, \n    798, \n    798, \n    798, \n    842, \n    798, \n    841, \n    835, \n    841, \n    832, \n    824, \n    824, \n    828, \n    837, \n    843, \n    845, \n    849, \n    849, \n    824, \n    835, \n    849, \n    823, \n    832, \n    841, \n    845, \n    845, \n    832, \n    841, \n    842, \n    841, \n    826, \n    831, \n    826, \n    832, \n    842, \n    836, \n    835, \n    841, \n    832, \n    832, \n    849, \n    844, \n    842, \n    848, \n    841, \n    839, \n    832, \n    842, \n    844, \n    843, \n    848, \n    844, \n    841, \n    837, \n    843, \n    836, \n    835, \n    834, \n    829, \n    824, \n    824, \n    834, \n    824, \n    824, \n    826, \n    837, \n    836, \n    834, \n    843, \n    845, \n    849, \n    841, \n    842, \n    849, \n    839, \n    848, \n    842, \n    841, \n    843, \n    848, \n    848, \n    834, \n    832, \n    843, \n    848, \n    848, \n    836, \n    841, \n    836, \n    832, \n    839, \n    841, \n    832, \n    841, \n    836, \n    837, \n    829, \n    837, \n    839, \n    828, \n    841, \n    836, \n    849, \n    842, \n    848, \n    841, \n    849, \n    842, \n    843, \n    845, \n    849, \n    841, \n    842, \n    849, \n    836, \n    829, \n    841, \n    842, \n    849, \n    843, \n    848, \n    843, \n    847, \n    837, \n    845, \n    841, \n    835, \n    837, \n    842, \n    835, \n    841, \n    841, \n    834, \n    836, \n    845, \n    844, \n    839, \n    843, \n    848, \n    843, \n    848, \n    849, \n    845, \n    845, \n    839, \n    841, \n    843, \n    836, \n    839, \n    849, \n    845, \n    838, \n    848, \n    848, \n    838, \n    842, \n    839, \n    841, \n    849, \n    842, \n    843, \n    849, \n    842, \n    845, \n    845, \n    845, \n    842, \n    848, \n    841, \n    842, \n    845, \n    849, \n    848, \n    848, \n    848, \n    847, \n    844, \n    841, \n    843, \n    837, \n    842, \n    841, \n    849, \n    841, \n    842, \n    845, \n    847, \n    841, \n    843, \n    84"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([10, 20, 30, 40]) == 55\nassert     sum_of_digits([10, 20, 30, 40, 50, 60]) == 60\nassert     sum_of_digits([1000, 2000, 3000, 4000]) == 15000\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_of_digits([]) == 0, \"Empty input list\"\nassert     sum_of_digits([1,2,3,4,5]) == 15, \"Sum of digits of a list\"\nassert     sum_of_digits([-5,-1,2,3,0]) == 4, \"Sum of digits of a list\"\nassert     sum_of_digits([]) == 0, \"Empty input list\"\nassert     sum_of_digits([1,2,3,4,5,6]) == 21, \"Sum of digits of a list\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_of_digits([0, 1, 2, 3, 4, 5]) == 15\nassert     sum_of_digits([3, 2, 1]) == 9\nassert     sum_of_digits([]) == 0\nassert     sum_of_digits([1, 1, 1, 1]) == 2\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_of_digits([1,2,3]) == 9, 'incorrect'\nassert     sum_of_digits([1,2,3,4]) == 10, 'incorrect'\nassert     sum_of_digits([1,3,5,7]) == 17, 'incorrect'\nassert     sum_of_digits([10,10,10,10,10]) == 45, 'incorrect'\nassert     sum_of_digits([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == -36, 'incorrect'\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ntest_data1 = (1, 2)\ntest_data2 = (2, 4)\ntest_data3 = (3, 6)\ntest_data4 = (5, 10)\n\nprint(f\"test_data1: {test_data1}\")\nprint(f\"test_data2: {test_data2}\")\nprint(f\"test_data3: {test_data3}\")\nprint(f\"test_data4: {test_data4}\")\n\nprint(f\"bitwise_xor(test_data1, test_data2): {bitwise_xor(test_data1, test_data2)}\")\nprint(f\"bitwise_xor(test_data1, test_data3): {bitwise_xor(test_data1, test_data3)}\")\nprint(f\"bitwise_xor(test_data2, test_data3): {bitwise_xor(test_data2, test_data3)}\")\nprint(f\"bitwise_xor(test_data3, test_data4): {bitwise_xor(test_data3, test_data4)}\")\nprint(f\"bitwise_xor(test_data4, test_data2): {bitwise_xor(test_data4, test_data2)}\""
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor((1, 2, 3), (2, 3, 4)) == (1, 2, 0)\nassert     bitwise_xor((1, 1, 1), (0, 1, 1)) == (1, 0, 1)\nassert     bitwise_xor((0, 0, 0), (1, 0, 0)) == (0, 0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    bitwise_xor((1, 2, 3), (3, 4, 5))\n    ==    (2, 1, 5)\n    bitwise_xor((1, 2, 3), (4, 5, 6))\n    ==    (5, 3, 4)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bitwise_xor((1, 2), (2, 3)) == (1, 3)\nassert     bitwise_xor((2, 3), (1, 2)) == (3, 1)\nassert     bitwise_xor((3, 4), (5, 6)) == (4, 5)\nassert     bitwise_xor((4, 5), (3, 4)) == (5, 3)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bitwise_xor((1,2,3), (4,5,6)) == (1, 4, 7)\nassert     bitwise_xor((4,5,6), (1,2,3)) == (1, 4, 7)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor((10, 4), (4, 10)) == (16, 0), \"WRONG\"\nassert     bitwise_xor((10, 4), (4, 4)) == (12, 4), \"WRONG\"\nassert     bitwise_xor((8, 10), (10, 8)) == (16, 0), \"WRONG\"\nassert     bitwise_xor((8, 10), (10, 10)) == (16, 0), \"WRONG\"\nassert     bitwise_xor((0, 0), (0, 0)) == (0, 0), \"WRONG\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert bitwise_xor((1, 2, 3), (4, 5, 6)) == (1, 3, 6), 'incorrect'\nassert bitwise_xor((2, 2, 1), (1, 3, 3)) == (1, 1, 3), 'incorrect'\nprint('check_bitwise_xor passed')\n\ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise or operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_freq([[], ['a'], ['a', 'b'], ['b'], ['a', 'b'], ['b']]) == 1\nassert     extract_freq([[], ['a'], ['a', 'b'], ['b'], ['a', 'b'], ['b'], ['a'], ['b']]) == 2\nassert     extract_freq([[], ['a'], ['a', 'b'], ['b'], ['a', 'b'], ['b'], ['a', 'b'], ['b']]) == 3\nassert     extract_freq([['a'], ['a', 'b'], ['b'], ['a', 'b'], ['b'], ['a', 'b'], ['b'], ['a']]) == 4\nassert     extract_freq([['a'], ['a', 'b'], ['b'], ['a', 'b'], ['b'], ['a', 'b'], ['b'], ['a', 'b']]) == 5\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([('a','b'),('a','c'),('b','c'),('a','b')]) == 2\nassert     extract_freq([('a','b'),('a','c'),('b','c'),('a','a'),('b','a'),('a','b')]) == 3\nassert     extract_freq([('a','b'),('a','b')]) == 2\nassert     extract_freq([('a','b'),('b','c'),('c','a'),('a','b')]) == 1\nassert     extract_freq([]) == 0\nprint('Test passed.')\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert extract_freq([1, 2, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 6, 6, 7]) == 4\nassert extract_freq([1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7]) == 3\n\n\ndef count_letters(string):\n    '''\n    Write a function to count the frequency of letters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([[1,2,3],[4,5]]) == 3\nassert     extract_freq([[1,2,3]]) == 1\nassert     extract_freq([[1,2,3],[1,2,3]]) == 2\nassert     extract_freq([[1,2,3,1,2,3],[1,2,3,1,2,3]]) == 2\nassert     extract_freq([[1,2,3],[1,2,3,1]]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq([('1', '1'), ('2', '1'), ('3', '1')]) == 2\nassert     extract_freq([('1', '2'), ('1', '3'), ('2', '4')]) == 3\nassert     extract_freq([('1', '2'), ('1', '3'), ('1', '4')]) == 1\nassert     extract_freq([('1', '2'), ('2', '3'), ('1', '4'), ('4', '5'), ('4', '6')]) == 1\nprint('You have successfully passed this question!')\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([1,2,3,4]) == 4\nassert     extract_freq([1,2,3,4,5,6]) == 5\nassert     extract_freq([]) == 0\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq(\n            [\n                (1, 1), \n                (2, 2), \n                (1, 1),\n                (2, 1), \n                (1, 1), \n                (2, 1),\n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1),\n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1)\n            ]) == 6, \"Test Failed\"\n\nassert     extract_freq(\n            [\n                (1, 1), \n                (1, 2), \n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1),\n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1),\n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1)\n            ]) == 2, \"Test Failed\"\n\nassert     extract_freq(\n            [\n                (1, 1), \n                (1, 2), \n                (1, 1), \n                (1, 1), \n                (2, 1),\n                (1, 1), \n                (2, 1),\n                (1, 1), \n                (2, 1),\n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1), \n                (1, 1), \n                (2, 1)\n            ]) == 4, \"Test Failed\"\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_freq([[1, 2, 3, 4, 5], 2]) == 3, \"Not completed\"\nassert     extract_freq([[1, 2, 3, 4, 5], 5]) == 1, \"Not completed\"\nassert     extract_freq([[1, 2, 3, 4, 5], 0]) == 0, \"Not completed\"\nassert     extract_freq([[1, 2, 3, 4, 5], -1]) == 0, \"Not completed\"\nassert     extract_freq([[1, 2, 3, 4, 5], 1.1]) == 0, \"Not completed\"\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([[1,1],[1,2],[1,3],[2,2],[3,4]]) == 3\nassert     extract_freq([[1,1],[2,2],[3,3]]) == 1\nassert     extract_freq([[1,1],[1,1],[1,1]]) == 1\nassert     extract_freq([[1,1]]) == 1\nassert     extract_freq([[1,1],[2,2],[3,3]]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([1,2,3]) == 2\nassert     extract_freq([]) == 0\nassert     extract_freq([]) == 0\nassert     extract_freq([1,2,3,2,1]) == 2\nassert     extract_freq([]) == 0\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    add_nested_tuples((1, 2, 3), (4, 5, 6)) == (1, 4, 7), \"Wrong answer\"\n\nprint(\"Test case passed!\")\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples(((1,2),(3,4),(5,6)),((1,2),(3,4),(5,6))) == ((1,2),(3,4),(5,6))\nassert     add_nested_tuples(((1,2),(3,4),(5,6)),((7,8),(9,10),(11,12))) == ((1,2),(3,4),(5,6))\nassert     add_nested_tuples(((1,2),(3,4),(5,6)),((1,2,3),(4,5,6),(7,8,9))) == ((1,2,3),(4,5,6),(7,8,9))\nprint(\"\\nCheck add_nested_tuples() function\")\nprint(\"All test cases passed\\n\")\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) ==    (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2,3),(4,5,6)) ==    (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2,3),(4,5,6)) ==    (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2,3),(4,5,6)) ==    (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2,3),(4,5,6)) ==    (1,2,3,4,5,6)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_nested_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 7)\nassert     add_nested_tuples((1, (2, 3), 4), (5, (6, 7), 8)) == ((1, 2, 3), (5, 6, 7), 9)\nassert     add_nested_tuples((((1, 2), 3), 4), ((5, 6), 7, 8)) == (((1, 2), 3), (5, 6, 7), 8)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples((1,2),(2,3)) == (3,5)\nassert     add_nested_tuples((3,4),(3,4)) == (6,8)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_nested_tuples((1,2),(3,4)) == (1,3)\nassert     add_nested_tuples((1,2),(3,4,5)) == (1,3,5)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_nested_tuples(('a','b','c'), ('a','b','c')) == ('a','b','c')\nassert add_nested_tuples(('a','b','c'), ('d','e','f')) == ('a','b','c','d','e','f')\nassert add_nested_tuples(('a','b','c'), ('d','e','f','g')) == ('a','b','c','d','e','f','g')\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minimum(5,2) == 2, \"Output is incorrect\"\nassert     minimum(2,5) == 2, \"Output is incorrect\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minimum(3,4) == 1, \"Failed!\"\nassert minimum(3,3) == 0, \"Failed!\"\nassert minimum(2,-5) == -5, \"Failed!\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minimum(5, 6) ==     5\nassert     minimum(4, 6) ==     4\nassert     minimum(6, 6) ==     6\nassert     minimum(-5, 6) ==     -5\nassert     minimum(-4, 6) ==     -4\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\na = 1\nb = 2\nmin(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minimum(1,2) == 1\nassert     minimum(-5,-10) == -10\nassert     minimum(0.5,0.2) == 0.2\nassert     minimum(0.3,0.2) == 0.2\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minimum(4,5) == 4, \"The minimum of 4 and 5 is 4\"\nassert     minimum(2,1) == 1, \"The minimum of 2 and 1 is 1\"\nassert     minimum(-1,0) == 0, \"The minimum of -1 and 0 is 0\"\nassert     minimum(-2,-1) == -2, \"The minimum of -2 and -1 is -2\"\nassert     minimum(-2,-1) == -2, \"The minimum of -2 and -1 is -2\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minimum(2,1) == 1, \"2 is minimum of 1 and 2\"\nassert     minimum(3,4) == 3, \"3 is minimum of 3 and 4\"\nassert     minimum(6,4) == 4, \"6 is minimum of 6 and 4\"\nassert     minimum(2,5) == 2, \"2 is minimum of 2 and 5\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert minimum(2,3) == 2\nassert minimum(3,2) == 2\nassert minimum(3,-3) == -3\nassert minimum(-3,3) == -3\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_tuplex((), ()) == False, \"fail\"\nassert     check_tuplex((1,2,3,4), (1,2,3,4)) == True, \"fail\"\nassert     check_tuplex((1,2,3,4), (1,2,3,5)) == False, \"fail\"\n\ndef check_tuple(tuple1,tuple2): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3))==True\nassert check_tuplex((1,2,3),(3,2,1))==True\nassert check_tuplex((1,2,3),(1,2,4))==False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex((2,5,2),(2,5)) == True\nassert     check_tuplex((2,5,2),(2,5,1)) == False\nassert     check_tuplex((2,5,2),(2,2)) == False\nassert     check_tuplex((2,5,2),(2,)) == True\nassert     check_tuplex((2,5,2),()) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_tuplex(tuplex,tuple1) == False, 'Wrong! Expected: False'\nassert     check_tuplex(tuplex,tuple2) == True, 'Wrong! Expected: True'\nassert     check_tuplex(tuplex,tuple3) == True, 'Wrong! Expected: True'\nassert     check_tuplex(tuplex,tuple4) == False, 'Wrong! Expected: False'\n\ntuplex = {tuple1, tuple2, tuple3}\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True\nassert     check_tuplex((1,2,3),(1,2,5)) == False\nassert     check_tuplex((1,2,3),(3,4,5)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_tuplex([1,2,3], (1,2,3)) == True \nassert     check_tuplex([1,2,3], (1,2)) == False\nassert     check_tuplex((1,2,3), (1,2)) == True\n\n'''\nWrite a function to split a tuple into two halves.\n'''\ndef split_tuple(tuplex):\n    '''\n    Write a function to split a tuple into two halves.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    check_tuplex((1,2,3),(1,2,3)) == True\n    check_tuplex((1,2,3),(1,2,3,4)) == False\n    check_tuplex((1,2,3),(1,2)) == False\n    check_tuplex((1,2,3,4),(1,2,3)) == False\n    check_tuplex((1,2,3,4),(1,2,3,4)) == True\n    \n    \ndef check_tuple_reversed(tuple1,tuple2): \n    '''\n    Write a function to check whether the two tuples are equal with their elements in reversed order.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncheck_tuplex((1,2,3),(2,3,4))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,3,4))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,2,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,1,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,3,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,3,2))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,1,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,1,3))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,2,3))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,1,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,2,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,2,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,2,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,2,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,1,4))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,2,4))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,3,4))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,4,4))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,4,4))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,4,4))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,1,1))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,2,1))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,3,1))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,4,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,1,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,2,1))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,3,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,4,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,1,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,2,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,3,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,4,1))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,1,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,2,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,3,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,4,1))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,1,2))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,2,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,3,2))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,4,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,1,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,2,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,3,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,4,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,1,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,2,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,3,2))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,4,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,1,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,2,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,3,2))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,4,2))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,1,3))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,2,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,3,3))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,4,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,1,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,2,3))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,3,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(2,4,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,1,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,2,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,3,3))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(3,4,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,1,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,2,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,3,3))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(4,4,3))==True, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,1,4))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,2,4))==False, \"Wrong Answer\"\ncheck_tuplex((1,2,3),(1,3,4))==False, \"Wrong Answer\"\ncheck"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Parity(1) ==    0\nassert     find_Parity(2) ==    1\nassert     find_Parity(3) ==    0\nassert     find_Parity(4) ==    1\nassert     find_Parity(5) ==    0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_Parity(0) == 0\nassert find_Parity(1) == 0\nassert find_Parity(2) == 1\nassert find_Parity(3) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(0) == True, 'Input 0 should be True'\nassert     find_Parity(1) == True, 'Input 1 should be True'\nassert     find_Parity(2) == False, 'Input 2 should be False'\nassert     find_Parity(3) == False, 'Input 3 should be False'\nassert     find_Parity(8) == False, 'Input 8 should be False'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(3) == False\nassert     find_Parity(7) == True\nassert     find_Parity(5) == True\nassert     find_Parity(10) == False\nassert     find_Parity(25) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    find_Parity(10) == 0\n    find_Parity(11) == 1\n    find_Parity(100) == 0\n    find_Parity(101) == 1\n    find_Parity(100000) == 1\n    find_Parity(1000001) == 0\n    find_Parity(0) == 0\n    find_Parity(1) == 1\n    find_Parity(10 ** 30) == 0\n    find_Parity(10 ** 30 + 1) == 1\n    find_Parity(10 ** 31) == 1\n    find_Parity(-1) == 1\n    find_Parity(-10) == 0\n    find_Parity(-10 ** 31) == 1\n    find_Parity(-10 ** 30) == 0\n    find_Parity(-10 ** 30 - 1) == 1\n    find_Parity(10 ** 31 - 1) == 1\n    find_Parity(10 ** 30 - 1) == 0\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Parity(1) == False\nassert     find_Parity(3) == True\nassert     find_Parity(100) == True\nassert     find_Parity(-10) == False\n\ndef is_Pair(x): \n    '''\n    Write a python function to find whether a given number is a pair of odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(0) == True, \"Wrong Answer\"\nassert     find_Parity(1) == True, \"Wrong Answer\"\nassert     find_Parity(2) == False, \"Wrong Answer\"\nassert     find_Parity(3) == True, \"Wrong Answer\"\nassert     find_Parity(4) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(2) == False\nassert     find_Parity(3) == True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(11) == 21\nassert     rearrange_bigger(21) == 11\nassert     rearrange_bigger(123) == 132\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert rearrange_bigger(223) == 22231\nassert rearrange_bigger(11) == 21\nassert rearrange_bigger(1234) == 4321\n\ndef rearrange_bigger2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rearrange_bigger(30) == 999\nassert     rearrange_bigger(21) == 124\nassert     rearrange_bigger(10) == 101\nassert     rearrange_bigger(111) == 1111\nassert     rearrange_bigger(123) == 1233\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(21) == 12\nassert     rearrange_bigger(2100) == 2102\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(21) == 12\nassert     rearrange_bigger(3) == 4\nassert     rearrange_bigger(111) == 101\nassert     rearrange_bigger(0) == 0\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(20) == 21\nassert     rearrange_bigger(123) == 124\nassert     rearrange_bigger(0) == 0\nassert     rearrange_bigger(5) == 6\nassert     rearrange_bigger(567) == 789\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(15) == 21\nassert     rearrange_bigger(912) == 921\nassert     rearrange_bigger(531) == 532\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(1235) == 321\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(121) == 1221\nassert     rearrange_bigger(0) == 0\nassert     rearrange_bigger(1) == 1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     k_smallest_pairs([1, 2, 3, 4, 5], \n                            [1, 6, 3, 7, 8],\n                            5) == [(1,1), (3,2), (5,4), (4,3)]\nassert     k_smallest_pairs([1, 3, 7, 9, 2], \n                            [1, 5, 3, 8, 6],\n                            5) == [(1,1), (2,3), (6,5), (5,3), (3,7)]\nassert     k_smallest_pairs([1], \n                            [2],\n                            1) == [(1,1)]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], \n                            [6, 7, 8, 9, 10],\n                            5) == [(1,1), (2,2), (3,3), (4,4), (5,5)]\nassert     k_smallest_pairs([1, 2, 3, 4], \n                            [],\n                            5) == [(1,1), (2,2), (3,3), (4,4)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1, 2, 3, 4],\n                          [10, 9, 8, 7],\n                          2) ==    [(1, 10), (2, 9)]\nassert     k_smallest_pairs([1],\n                          [10, 9, 8, 7],\n                          4) ==    [(1, 10), (2, 9), (3, 8), (4, 7)]\nassert     k_smallest_pairs([1, 2, 3, 4],\n                          [10, 9, 8, 7],\n                          2) ==    [(1, 10), (2, 9)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([1,3,4], [1,2,3], 1) == [[1,1]]\nassert     k_smallest_pairs([1,3,4], [1,2,3], 2) == [[1,1], [2,3]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nk_smallest_pairs([], [], 1) == [[]]\nassert \nk_smallest_pairs([1], [], 1) == []\nassert \nk_smallest_pairs([3,4,6,10,15,20], [1,4,5,9,10], 4) == [[1,4],[4,10],[10,15],[15,20]]\nassert \nk_smallest_pairs([2,4,6,10,15,20], [1,4,5,9,10], 4) == [[1,4],[4,10],[10,15],[15,20]]\nassert \nk_smallest_pairs([3,6,9,10], [2,4,5,8,10], 4) == [[2,4],[4,10],[10,9],[9,10]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([2,1,5,7], [2,2], 2) == [[2,2],[2,1]]\nassert k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[2,4],[4,6]]\nassert k_smallest_pairs([3,2,1], [4,7,5], 3) == [[3,2],[2,1],[1,4]]\nassert k_smallest_pairs([1,2,3], [4,5,6], 2) == [[1,2],[2,3]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,3,4,1,5], [1,1,3,1,1], 2) == [1,1]\nassert     k_smallest_pairs([1,3,4,5], [1,1,3,1], 2) == []\nassert     k_smallest_pairs([1,3,4,5], [2,2,2,2], 2) == []\n\ndef get_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or len(nums1)!= len(nums2):\n        return []\n    heap = [(nums2[0], 0)]\n    results = []\n    for num in nums1:\n        while heap and num > heap[0][0]:\n            heapq.heappop(heap)\n        while heap and heap[0][1] < k:\n            results.append((heap[0][0], num))\n            heapq.heappop(heap)\n        heapq.heappush(heap, (num, heap[0][1] + 1))\n    return results\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6],3) == [[1,2],[7,2],[11,4]]\nassert k_smallest_pairs([1,1,2],[1,4,6],2) == [[1,1],[1,4]]\nassert k_smallest_pairs([1,2,3],[1,4,6],2) == [[1,1],[2,1],[3,1]]\nassert k_smallest_pairs([1,2,3,4],[5,6,7,8],2) == [[1,2],[2,3],[3,4]]\n\ndef k_smallest_pairs_2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    The ith element of the output array should be in the same order as the input array nums1 and nums2.\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     k_smallest_pairs([1, 1, 2], [3, 4, 5], 1) == [(1, 3), (1, 4)]\nassert k_smallest_pairs([1, 1, 2, 3, 4], [1, 2, 3, 4, 5], 2) == [(1, 1), (2, 3), (3, 4)]\n\n\ndef generate_candidates(nums, left, right, curr_sum, target, n, m, res):\n    # check if the sum has been reached\n    if curr_sum == target:\n        heapq.heappush(res, (curr_sum, tuple(nums)))\n        return\n\n    # process the current subset\n    if left < n and curr_sum + nums[left] <= target:\n        generate_candidates(nums, left + 1, right, curr_sum + nums[left], target, n, m, res)\n\n    # process the remaining subsets\n    if right < m and curr_sum <= target:\n        generate_candidates(nums, left, right + 1, curr_sum, target, n, m, res)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1,2], [3,4], 1) == [[1,3]]\nassert     k_smallest_pairs([1,2], [3,4], 2) == [[1,3], [2,4]]\nassert     k_smallest_pairs([1,2], [3,4], 3) == [[1,3], [2,4]]\nassert     k_smallest_pairs([1,2], [3,4], 4) == [[1,3], [2,4]]\nassert     k_smallest_pairs([1,2], [3,4], 5) == [[1,3], [2,4]]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_product_tuple([(2,3),(4,5),(1,4)]) == (2,3)\nassert     min_product_tuple([(5,9),(3,4),(8,2)]) == (5,9)\n\ndef min_product_list(list1):\n    '''\n    Write a function to find the minimum product from the pairs of lists within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(2,3), (4,5), (6,7), (3,2)]) == (6,3)\nassert     min_product_tuple([(2,3), (4,5), (6,7), (8,2)]) == (6,3)\nassert     min_product_tuple([(2,3), (4,5), (6,7), (3,2)]) == (6,3)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef min_product_tuple_extra(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_product_tuple([(1,2), (3,4), (5,6)]) == (3,2)\nassert     min_product_tuple([(3,2), (5,6), (1,2)]) == (3,2)\nassert     min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) == (3,2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([]) == None\nassert     min_product_tuple([(4,5), (3,4), (2,4), (1,4)]) == (2,4)\nassert     min_product_tuple([(3,4), (3,4)]) == (3,4)\nassert     min_product_tuple([(3,4), (3,5), (3,6), (3,7)]) == (3,7)\nassert     min_product_tuple([(3,4), (3,4), (3,5), (3,6)]) == (3,4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_product_tuple([(1, 3), (1, 6), (7, 3)]) == (1, 3)\nassert     min_product_tuple([(3, 3), (6, 5), (6, 1)]) == (3, 3)\nassert     min_product_tuple([(3, 1), (8, 7), (2, 8)]) == (3, 1)\nassert     min_product_tuple([(1, 1), (8, 7), (2, 8)]) == (1, 1)\nassert     min_product_tuple([(1, 3), (1, 6), (7, 3)]) == (1, 6)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (min_product_tuple([(1,2),(2,3),(3,4),(4,5),(5,6)]) == (1, 2))\nassert (min_product_tuple([(1,1),(2,1),(3,1),(4,1),(5,1)]) == (1,1))\nassert (min_product_tuple([(1,2),(2,3),(3,4),(4,5),(5,6),(1,4),(2,5),(3,6)]) == (1,4))\nassert (min_product_tuple([(1,2),(2,3),(3,4),(4,5),(5,6),(1,4),(2,5),(3,6),(1,3),(2,5),(3,6)]) == (1,3))\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_val([\"Car\", \"Dog\", \"Cat\", \"Cow\"]) == \"Dog\"\nassert     min_val([\"Car\", \"Car\", \"Car\", \"Car\"]) == \"Car\"\nassert     min_val([\"Car\", \"Car\", \"Car\", \"Car\", \"Car\"]) == \"Car\"\nassert     min_val([\"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\"]) == \"Car\"\nassert     min_val([\"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\", \"Car\"]) == \"Car\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([[],2,True,10]) ==    2\nassert     min_val([[],2,True,0]) ==    0\nassert     min_val([[1,2,3,4,5,6]]) ==    1\nassert     min_val([[\"a\",1,\"1\"],[\"b\",2,\"2\"]]) ==    1\nassert     min_val([[1,2,3],[\"a\",1,\"1\"],[\"b\",2,\"2\"]]) ==    1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_val([4,5,2,3,7]) == 2, \"Should be 2\"\nassert     min_val([4,5,2,3,7,4]) == 4, \"Should be 4\"\nassert     min_val([4,5,2,3,7,4,4]) == 4, \"Should be 4\"\nassert     min_val([4,5,2,3,7,4,4,4]) == 4, \"Should be 4\"\nassert     min_val([2,3,7,4,4,4,4,4]) == 2, \"Should be 2\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_val([10, 11, 12, 13, 14]) == min([10, 11, 12, 13, 14])\nassert     min_val([10, 'test','string', ['sub1','sub2','sub3']]) == min(\n    [10, 'test','string', ['sub1','sub2','sub3']])\nassert     min_val([10, 11, 12, 13, 14, 1, 'test', True,'string', ['sub1','sub2','sub3'], 'test', True, True]) == min(\n    [10, 11, 12, 13, 14, 1, 'test', True,'string', ['sub1','sub2','sub3'], 'test', True, True])"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert min_val([10,20,30]) == 20, 'Should return 20'\nassert min_val([]) == None, 'Should return None'\nassert min_val([10, 20, 30, 40]) == 10, 'Should return 10'"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([1,2,3,4,4,4,4,4,4,4]) == 1\nassert     min_val([-1,-2,-3,-4,-4,-4,-4,-4,-4,-4]) == -4\nassert     min_val([]) == None\nassert     min_val([-1,2,3,4,-4,4,4,4,4,4]) == -4\nassert     min_val([1, 2, 4, 2, 3, 6]) == 2\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_val(['1', '2', '3']) == '1', 'failed'\nassert     min_val([1,2,3]) == 1, 'failed'\nassert     min_val(['a', 'b', 'c']) == 'a', 'failed'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('\\n***** snake_to_camel *****')"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake_case_string') == 'SnakeCaseString'\nassert     snake_to_camel('snake_case_string_') == 'SnakeCaseString'\nassert     snake_to_camel('snake_case_string_2') == 'SnakeCaseString2'\nassert     snake_to_camel('snake_case_string_3') == 'SnakeCaseString3'\nassert     snake_to_camel('snake_case_string_with_space') == 'SnakeCaseStringWithSpace'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nword ='snake_camel_case'\nassert snake_to_camel(word) =='snakeCamelCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snakecase_to_camel') =='snakecaseToCamel'\nassert     snake_to_camel('_snake_case_to_camel') == '_snake_case_to_camel'\nassert     snake_to_camel('snake_case_to_camel') =='snakeCaseToCamel'\nassert     snake_to_camel('_snake_case_to_camel') == '_snake_case_to_camel'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert snake_to_camel('snake_case') =='snakeCase', \"snake case to camel case failed\"\nassert snake_to_camel('snake-case') =='snakeCase', \"snake case to camel case failed\"\nassert snake_to_camel('snake-case') =='snakeCase', \"snake case to camel case failed\"\nassert snake_to_camel('snakecase') =='snakeCase', \"snake case to camel case failed\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('snake_camel_case') == 'SnakeCamelCase'\nassert     snake_to_camel('snake_camel_case_') == 'SnakeCamelCase'\nassert     snake_to_camel('snake_camel_case_1') == 'SnakeCamelCase1'\nassert     snake_to_camel('snake_camel_case_2') == 'SnakeCamelCase2'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case__') =='snakeCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case_1\") == \"snakeCase1\"\nassert     snake_to_camel(\"snake_case_2\") == \"snakeCase2\"\nassert     snake_to_camel(\"snake_case_3\") == \"snakeCase3\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case_1\") == \"snakeCase1\"\nassert     snake_to_camel(\"snake_case_2\") == \"snakeCase2\"\nassert     snake_to_camel(\"snake_case_3\") == \"snakeCase3\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', 'Wrong output!'\nassert     snake_to_camel('snake_case_1') =='snakeCase1', 'Wrong output!'\nassert     snake_to_camel('snake_case_2') =='snakeCase2', 'Wrong output!'\nassert     snake_to_camel('snake_case_3') =='snakeCase3', 'Wrong output!'\nassert     snake_to_camel('snake_case_4') =='snakeCase4', 'Wrong output!'\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,86"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([1,2,3,4,5]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert remove_odd([3, 5, 9, 1, 4, 6, 7, 8, 5, 1]) == [3, 1, 4, 6, 7, 8]\nassert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert remove_odd([7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [7, 9, 11, 13, 15]\nassert remove_odd([9, 8, 7, 6, 5, 4, 3, 2, 1]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([])==[]\nassert     remove_odd([1])==[1]\nassert     remove_odd([1,2])==[1]\nassert     remove_odd([1,2,3])==[1]\nassert     remove_odd([1,2,3,4])==[1,2,3]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return l\n    for i in range(len(l)-1):\n        if l[i]%2!=0:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd([2, 4, 6, 8]) == [2, 8]\nassert     remove_odd([1, 3, 5, 7]) == [1, 3, 5, 7]\nassert     remove_odd([1, 3, 5, 7, 9, 11]) == [1, 3, 5, 7, 9, 11]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,9]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,10]) == [1,3,5,7,9,10]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,11]) == [1,3,5,7,9,10,11]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlist1 = [(1, 2), (3, 4), (5, 6)]\nn = 1\nprint(extract_nth_element(list1, n))\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4)], 0) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4)], 1) == (3, 4)\nassert     extract_nth_element([(1, 2), (3, 4)], 2) == (3, 4)\nassert     extract_nth_element([(1, 2), (3, 4)], -1) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4)], -2) == (3, 4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([1,2,3,4,5], 1) == 1\nassert     extract_nth_element([1,2,3,4,5], 5) == 4\nassert     extract_nth_element([1,2,3,4,5], 3) == 3\nassert     extract_nth_element([1,2,3,4,5], 2) == 2\nassert     extract_nth_element([1,2,3,4,5], 0) == 1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f')], 0) == ('a', 'b')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f')], 1) == ('c', 'd')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f')], 2) == ('e', 'f')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f')], 3) == ('f', 'f')\nassert     extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f')], 4) == ('f', 'f')\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == 'b'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 0) == 'a'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == 'b'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], -1) == 'c'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], -2) == 'a'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_nth_element([('a',1),('b',2)], 1) == 1, \"Wrong answer\"\nassert     extract_nth_element([('a',1),('b',2)], 2) == 2, \"Wrong answer\"\nassert     extract_nth_element([('a',1),('b',2)], 0) == 1, \"Wrong answer\"\nassert     extract_nth_element([('a',1),('b',2)], -1) == 1, \"Wrong answer\"\nassert     extract_nth_element([('a',1),('b',2)], -2) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_nth_element([(1,),(3,),(4,)], 1) == 1\nassert     extract_nth_element([(1,),(3,),(4,)], 2) == 3\nassert     extract_nth_element([(1,),(3,),(4,)], 3) == 4\nassert     extract_nth_element([(1,),(3,),(4,)], 0) == None\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     overlapping([4,5,6,7,9,10], [6,7,8]) == True, \"overlapping([4,5,6,7,9,10], [6,7,8]) should return True\"\nassert    overlapping([1,5,4,7,6], [4,6,8]) == False, \"overlapping([1,5,4,7,6], [4,6,8]) should return False\"\nassert    overlapping([1,4,5,6], [3,5]) == True, \"overlapping([1,4,5,6], [3,5]) should return True\"\nassert    overlapping([], []) == False, \"overlapping([], []) should return False\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     overlapping([1,2,3,4,5,6],[1,2,3,4,5,6]) == True, \"Test 1 Failed\"\nassert     overlapping([1,2,3,4,5,6],[1,2,3,4,6]) == False, \"Test 2 Failed\"\nassert     overlapping([1,2,3,4,5,6],[6,7,8,9,10]) == False, \"Test 3 Failed\"\nassert     overlapping([1,2,3,4,5,6],[7,8,9,10]) == True, \"Test 4 Failed\"\nassert     overlapping([1,2,3,4,5,6],[7,8,9,10,11]) == True, \"Test 5 Failed\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     overlapping([10,20,30],[60,70,90]) == True\nassert     overlapping([10,20,30],[50,60,90]) == False\nassert     overlapping([10,20,30],[30,60,90]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     overlapping([1,2,3], [1,2,3,4]) == True, \"Failed!\"\nassert     overlapping([1,2,3], [1,2]) == False, \"Failed!\"\nassert     overlapping([1,2,3], [3,4]) == False, \"Failed!\"\nassert     overlapping([1,2], [1,2]) == True, \"Failed!\"\nassert     overlapping([1,2,3], [3,5]) == False, \"Failed!\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nif __name__ == '__main__':\n    \n    list1 = []\n    list2 = [10,20,30]\n    print(overlapping(list1,list2)) # False\n\n    list1 = [10,20,30]\n    list2 = [10,20,30]\n    print(overlapping(list1,list2)) # True\n\n    list1 = [10,20,30]\n    list2 = [10,20,30,40]\n    print(overlapping(list1,list2)) # False\n\n    list1 = [10,20,30]\n    list2 = [10,20,30,40,50]\n    print(overlapping(list1,list2)) # True"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    overlapping([1,2,3],[1,3,4])==True\n    overlapping([1,2,3],[4,3,4])==False\n    overlapping([], [])==False\n    overlapping([], [0])==False\n    overlapping([-1,-2,-3], [-1,-3])==True\n    overlapping([-1,-2,-3], [-1,3])==False\n    overlapping([-1,-2,-3], [-1,0])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [0,1,2,3,4,5])==False\n    overlapping([1,2,3,4,5], [1,2,4,3,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,6,5])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,4,5,3])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5,6])==False\n    overlapping([1,2,3,4,5,6], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5,6], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [1,2,4,3,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,5,4])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,7])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,5,4])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,7])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,7])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,7])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,8])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,8])==True\n    overlapping([1,2,3,4,5], [1,2,3,5,4])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,7])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,7])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,8])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,8])==True\n    overlapping([1,2,3,4,5], [1,2,3,5,4])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,7])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,7])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,8])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,8])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,7])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,7])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,8])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,8])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,5])==True\n    overlapping([1,2,3,4,5], [1,2,3,4,6])==False\n    overlapping([1,2,3,4,5], [0,1,2,3,4,6])==True\n    overlapping([1,2,3,4,5], [1,2,"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_function(test_case):\n    '''\n    The function has 2 parameters, these 2 parameters have following meaning\n    l1, l2: The parameter l1 and l2 are list (a and b respectively)\n    a1, a2: the parameter a1 and a2 are integers (b and c respectively)\n    The function returns True or False.\n    '''\n    # print(test_case[0], test_case[1], test_case[2], test_case[3])\n    \n    if overlapping(test_case[0], test_case[1]) == test_case[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     overlapping([1,3,5,6,7,8], [1,3,5]) == True, \"1,3,5,6\"\nassert     overlapping([1,3,5,6,7,8], [1,3,6]) == True, \"1,3,6\"\nassert     overlapping([1,3,5,6,7,8], [1,3,7]) == True, \"1,3,7\"\nassert     overlapping([1,3,5,6,7,8], [1,3,8]) == True, \"1,3,8\"\nassert     overlapping([1,3,5,6,7,8], [1,3,5]) == True, \"1,3,5\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     overlapping([1,3,4,7,9], [1,2,3,4,5,7,9]) == True\nassert     overlapping([1,3,4,7,9], [1,5,7,9]) == False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\narr = [2, 3, 4, 5]\nmax_Product(arr) \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([10,20,30,40,50]) == (120,40)\nassert     max_Product([10,20,30,40,50,50]) == (120,40)\nassert     max_Product([10,20,30,40,50,50,50]) == (120,40)\nassert     max_Product([10,20,30,40,50,50,50,50,50]) == (120,40)\nassert     max_Product([10,20,30,40,50,50,50,50,50,50,50]) == (120,40)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nmax_Product([1, 2, 3, 4, 5]) == (2,3)\nmax_Product([1, 2, 3, 4, 5, 1, 2, 3]) == (1, 5)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Product([-3, -8, -9, -2, -5, -4, -10]) ==     (-10, -2)\nassert     max_Product([-10, -20, -5, -4, -3, -2, -1, -1]) ==     (-10, -1)\nassert     max_Product([-1, -2, -3, -4, -5, -6, -7, -8]) ==     (-1, -8)\nassert     max_Product([-2, -3, -4, -5, -6, -7, -8, -9]) ==     (-9, -8)\nassert     max_Product([-8, -10, -5, -4, -3, -2, -1, -1]) ==     (-1, -1)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(max_Product([-2,1,2,4,5,-2,3,5,10]))\nassert \nprint(max_Product([-2,1,2,4,5,-2,3,5,10,10,10,10,10]))\nassert \nprint(max_Product([-2,1,2,4,5,-2,3,5,10,-10,10,10,10]))\nassert \nprint(max_Product([-2,1,2,4,5,10,10,10,10,10,10,10,10]))\nassert \nprint(max_Product([-2,1,2,4,5,10,10,-10,10,-10,10,-10,10]))\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([1,2,3,4,5,6]) == (6,4)\nassert     max_Product([2,3,6,6]) == (6,6)\nassert     max_Product([2,3,4,5,6]) == (6,12)\nassert     max_Product([5,4,3,2,1]) == (6,6)\nassert     max_Product([6,6,6,6]) == (6,6)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Product([3,5,6,2]) == [6,3]\nassert max_Product([1,2,3,4,5]) == [1,2]\nassert max_Product([9,2,4,5,7,1]) == [7,9]\nassert max_Product([1,2,3,4,5,2,4,5,2,4,5]) == [2,4]\nassert max_Product([-9,-2,4,5,7,-1]) == [-1,4]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Product([1,2,3,4]) == (2,3)\nassert     max_Product([4,2,6,5]) == (6,5)\nassert     max_Product([2,2,2]) == (2,2)\nassert     max_Product([10,20,30]) == (20,30)\nassert     max_Product([-10,20,30]) == (-10,30)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 1, 'First Group'\nassert     group_tuples([(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 1, 'Second Group'\nassert     group_tuples([(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 1, 'Third Group'\nassert     group_tuples([(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 1, 'Fourth Group'\nassert     group_tuples([(1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 2, 'Fifth Group'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     group_tuples([(1, 2), (1, 2), (1, 2)]) == (1, 1)\nassert group_tuples([(1, 2), (1, 2), (1, 2), (2, 1)]) == (1, 1)\nassert group_tuples([(2, 2), (2, 2), (2, 2)]) == (2, 2)\nassert group_tuples([(1, 2), (3, 2), (1, 2)]) == (1, 1)\nassert group_tuples([(1, 2), (2, 2), (1, 2)]) == (1, 1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([('A', 1), ('A', 1), ('B', 2)]) == ['A']\nassert     group_tuples([('A', 1), ('B', 2)]) == None\nassert     group_tuples([('A', 1), ('A', 1), ('B', 2), ('A', 1), ('A', 1)]) == None\nassert     group_tuples([('A', 1), ('A', 1), ('B', 2), ('A', 1), ('A', 1)]) == ['A']\nassert     group_tuples([('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1), ('A', 1)]) == ['A']"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([(\"G\", \"G\", \"G\"), (\"A\", \"A\", \"A\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"G\", \"G\", \"G\")])\nassert     group_tuples([(\"G\", \"G\", \"G\"), (\"A\", \"A\", \"A\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\")])\nassert     group_tuples([(\"G\", \"G\", \"G\"), (\"A\", \"A\", \"A\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\")])\nassert     group_tuples([(\"G\", \"G\", \"G\"), (\"A\", \"A\", \"A\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\")])\nassert     group_tuples([(\"G\", \"G\", \"G\"), (\"A\", \"A\", \"A\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"G\", \"G\", \"G\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\"), (\"B\", \"B\", \"B\")])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples([(1,2), (2,3), (1,2), (2,3), (1,2)]) == (1,2)\nassert group_tuples([(1,2), (2,3), (1,2), (2,3), (1,2)]) == (1,2)\nassert group_tuples([(1,2), (2,3), (1,2), (2,3), (1,2)]) == (1,2)\nassert group_tuples([(1,2), (2,3), (1,2), (2,3), (1,2)]) == (1,2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ngroup_tuples([(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]) == 0\nassert \ngroup_tuples([(0, 1), (2, 3), (4, 5), (6, 7), (8, 9), (4, 6, 7)]) == 4\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ngroup_tuples(Input = [(10, 2, 20, 1), (1, 2, 1, 1), (1, 2, 1, 1), (1, 2, 1, 1), (1, 1, 1, 1)]) == (1, 2, 1, 1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef group_by_score(students):\n    '''\n    Write a function to group the students based on their score.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([]) == []\nassert     group_tuples([(2,3),(1,2),(3,4),(1,3)]) == [(1,3)]\nassert     group_tuples([(2,3),(1,2),(3,4),(1,3),(2,1)]) == [(1,3),(2,1)]"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     group_tuples([(10,), (20,), (30,), (40,), (50,), (60,), (70,), (80,), (90,), (100,), (110,), (120,), (130,), (140,), (150,), (160,), (170,), (180,), (190,), (200,), (210,), (220,), (230,), (240,), (250,), (260,), (270,), (280,), (290,), (300,), (310,), (320,), (330,), (340,), (350,), (360,), (370,), (380,), (390,), (400,), (410,), (420,), (430,), (440,), (450,), (460,), (470,), (480,), (500,), (510,), (520,), (530,), (540,), (550,), (560,), (570,), (580,), (590,), (600,), (610,), (620,), (630,), (640,), (650,), (660,), (670,), (680,), (690,), (700,), (710,), (720,), (730,), (740,), (750,), (760,), (770,), (780,), (790,), (800,), (810,), (820,), (830,), (840,), (850,), (860,), (870,), (880,), (900,), (910,), (920,), (930,), (940,), (950,), (960,), (970,), (980,), (990,), (1000,), (1010,), (1020,), (1030,), (1040,), (1050,), (1060,), (1070,), (1080,), (1090,), (1100,), (1110,), (1120,), (1130,), (1140,), (1150,), (1160,), (1170,), (1180,), (1190,), (1200,), (1210,), (1220,), (1230,), (1240,), (1250,), (1260,), (1270,), (1280,), (1290,), (1300,), (1310,), (1320,), (1330,), (1340,), (1350,), (1360,), (1370,), (1380,), (1390,), (1400,), (1410,), (1420,), (1430,), (1440,), (1450,), (1460,), (1470,), (1480,), (1490,), (1500,), (1510,), (1520,), (1530,), (1540,), (1550,), (1560,), (1570,), (1580,), (1590,), (1600,), (1610,), (1620,), (1630,), (1640,), (1650,), (1660,), (1670,), (1680,), (1690,), (1700,), (1710,), (1720,), (1730,), (1740,), (1750,), (1760,), (1770,), (1780,), (1790,), (1800,), (1810,), (1820,), (1830,), (1840,), (1850,), (1860,), (1870,), (1880,), (1890,), (1900,), (1910,), (1920,), (1930,), (1940,), (1950,), (1960,), (1970,), (1980,), (1990,), (2000,), (2010,), (2020,), (2030,), (2040,), (2050,), (2060,), (2070,), (2080,), (2090,), (2100,), (2110,), (2120,), (2130,), (2140,), (2150,), (2160,), (2170,), (2180,), (2200,), (2210,), (2220,), (2230,), (2240,), (2250,), (2260,), (2270,), (2280,), (2290,), (2300,), (2310,), (2320,), (2330,), (2340,), (2350,), (2360,), (2370,), (2380,), (2390,), (2400,), (2410,), (2420,), (2430,), (2440,), (2450,), (2460,), (2470,), (2480,), (2490,), (2500,), (2510,), (2520,), (2530,), (2540,), (2550,), (2560,), (2570,), (2580,), (2590,), (2600,), (2610,), (2620,), (2630,), (2640,), (2650,), (2660,), (2670,), (2680,), (2690,), (2700,), (2710,), (2720,), (2730,), (2740,), (2750,), (2760,), (2770,), (2780,), (2790,), (2800,), (2810,), (2820,), (2830,), (2840,), (2850,), (2860,), (2870,), (2880,), (2890,), (2900,), (2910,), (2920,), (2930,), (2940,), (2950,), (2960,), (2970,), (2980,), (2990,), (3000,), (3010,), (3020,), (3030,), (3040,), (3050,), (3060,), (3070,), (3080,), (3090,), (3100,), (3110,), (3120,), (3130,), (3140,), (3150,), (3160,), (3170,), (3180,), (3190,), (3200,), (3210,), (3220,), (3230,), (3240,), (3250,), (3260,), (3270,), (3290,), (3300,), (3310,), (3320,), (3330,), (3340,), (3350,), (3360,), (3370,), (3380,), (3390,), (3400,), (3410,), (3420,), (3430,), (3440,), (3450,), (3460,), (3470,), (3480,), (3490,), (3500,), (3510,), (3520,), (3530,), (3540,), (3550,), (3560,), (3570,), (3580,), (3590,), (3600,), (3610,), (3620,), (3630,), (3640,), (3650,), (3660,), (3670,), (3680,), (3690,), (3700,), (3710,), (3720,), (3730,), (3740,), (3750,), (3760,), (3770,), (3780,), (3790,), (3800,), (3810,), (3820,), (3830,), (3840,), (3850,), (3860,), (3870,), (3880,), (3890,), (3900,), (3910,), (3920,), (3930,), (3940,), (3950,), (3960,), (3970,), (3980,), (3990,), (4000,), (4010,), (4020,), (4030,), (4040,), (4050,), (4060,), (4070,), (4080,), (4090,), (4100,), (4110,), (4120,), (4130,), (4140,), (4151,), (4160,), (4171,), (4180,), (4190,), (4200,), (4210,), (4220,), (4240,), (4251,), (4260,), (4270,)"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, Find_Max([1,2,3,4,5])\nassert     Find_Max([1,2,3,4,5,6]) == 6, Find_Max([1,2,3,4,5,6])\nassert     Find_Max([1,2,3,4,5,6,7]) == 7, Find_Max([1,2,3,4,5,6,7])\nassert     Find_Max([1,2,3,4,5,6,7,8]) == 8, Find_Max([1,2,3,4,5,6,7,8])\nassert     Find_Max([1,2,3,4,5,6,7,8,9]) == 8, Find_Max([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([1,2,3]) == 2\nassert     Find_Max([]) == None\nassert     Find_Max([1,2,3,4]) == 4"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([1,2,3]) == 3, \"Wrong Answer\"\nassert     Find_Max([1,2,3,4]) == 3, \"Wrong Answer\"\nassert     Find_Max([3,1,2]) == 3, \"Wrong Answer\"\nassert     Find_Max([]) == None, \"Wrong Answer\"\nassert     Find_Max([\"hello\"]) == None, \"Wrong Answer\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max([1, 2, 3, 4, 5]) == 5\nassert     Find_Max(['cat', 'dog', 'rabbit']) == 'rabbit'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max([]) == None, 'Empty list'\nassert     Find_Max([3]) == 3, 'List of length 1'\nassert     Find_Max([3, 5]) == 5, 'List with max length'\nassert     Find_Max([1, 2, 3, 4, 5, 6]) == 5, 'List with max length'\nassert     Find_Max([3, 4, 5, 6, 7]) == 7, 'List with max length'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max([]) == None, 'Find_Max: list is empty'\nassert     Find_Max([0,1,2]) == 2, 'Find_Max: one element list'\nassert     Find_Max([0,1,2,1,2]) == 2, 'Find_Max: two elements list'\nassert     Find_Max([0,1,2,1,2,1]) == 2, 'Find_Max: three elements list'\nassert     Find_Max([0,1,2,1,2,1,1]) == 2, 'Find_Max: four elements list'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max(['abcde', 'ABCDE', 'abcd', 'Abcde'])=='ABCDE', \\\n    \"Wrong Answer\"\nassert     Find_Max(['abcde', 'ABCDE', 'abcd', 'Abcde', 'abc', 'ABC'])=='ABC', \\\n    \"Wrong Answer\"\nassert     Find_Max(['abcde', 'ABCDE', 'abcd', 'Abcde', 'ABC'])=='ABC', \\\n    \"Wrong Answer\"\nassert     Find_Max(['abcde', 'ABCDE', 'abcd', 'Abcde'])=='abcde', \\\n    \"Wrong Answer\"\nassert     Find_Max(['abcde', 'ABCDE', 'abcd', 'Abcde', 'abc'])=='abcde', \\\n    \"Wrong Answer\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([1,3,4,5]) == 5, \"Fail\"\nassert Find_Max([]) == False, \"Fail\"\nassert Find_Max([1,2,3]) == 3, \"Fail\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nround_and_sum([1.2,2.3,3.4]) == 14\nassert round_and_sum([1.2,2.3,3.4]) == 16\nassert round_and_sum([]) == 0\nassert round_and_sum([-2.2,1.3,-1.4,0.5]) == -2\n\nround_and_sum([1.1,1.1,1.1]) == 1\nround_and_sum([1.5,1.5,1.5]) == 2\nround_and_sum([-1.1,-1.1,-1.1]) == -2\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     round_and_sum([4.2, 3.1, 9.2]) == 25\nassert     round_and_sum([3.2, -1.2, 9.2]) == 20\nassert     round_and_sum([-1.1, 0.2, 9.2]) == -10\nassert     round_and_sum([2.3, 3.1, 5.1]) == 36\nassert     round_and_sum([-1.2, -1.3, 5.2]) == -12\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nround_and_sum([1,2,3,4])\nassert\nround_and_sum([])\nassert\nround_and_sum([1,2,3,4,5])\nassert\n\ndef reverse(list1):\n    '''\n    Write a function to reverse a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 65464, 'Wrong answer'\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29]) == 648240, 'Wrong answer'\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,34,35,36,37,38,39]) == 670756, 'Wrong answer'\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,34,35,36,37,38,39,40,41]) == 688456, 'Wrong answer'\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47]) == 705804, 'Wrong answer'\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     round_and_sum([1, 2, 3]) == 60\nassert     round_and_sum([1.1, 2.2, 3.3]) == 60\nassert     round_and_sum([10, 20, 30, 40, 50, 60]) == 900\nassert     round_and_sum([10, 20, 30, 40, 50]) == 600\nassert     round_and_sum([10, 20, 30, 40]) == 600\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     round_and_sum([1.2, 3.4, 2.1]) == 15\nassert     round_and_sum([1.1, 2.2, 1.7]) == 15\nassert     round_and_sum([1.7, 3.7, 1.2]) == 15\nassert     round_and_sum([1, 2, 1.7]) == 15\nassert     round_and_sum([1.2, 1.7, 1.4]) == 13\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nround_and_sum([0,0,0]) == 0\nround_and_sum([1,1,1]) == 3\nround_and_sum([1.2,1.2,1.2]) == 3.4\nround_and_sum([1.2,1.2,1.2,1.2,1.2,1.2]) == 3.6\nround_and_sum([1.2,1.2,1.2,1.2,1.2,1.2,1.2]) == 3.6\nround_and_sum([1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2]) == 3.6\nround_and_sum([1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2]) == 3.6\nround_and_sum([1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     round_and_sum([3, 4, 5]) == 24\nassert round_and_sum([1, 2, 3]) == 12\nassert round_and_sum([1, 2, 3, 4]) == 24\nassert round_and_sum([-2, -1, -3, -5]) == -12\nassert round_and_sum([-10.5, -10.0, -11.5, -12.5]) == -300\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     round_and_sum([1,2,3,4,5]) == 15, \"Wrong Answer\"\nassert     round_and_sum([2,3]) == 5, \"Wrong Answer\"\nassert     round_and_sum([2.3,3.4]) == 10.4, \"Wrong Answer\"\nassert     round_and_sum([1.2,4.2]) == 6, \"Wrong Answer\"\nassert     round_and_sum([4.5,7,9,0.7,0.7]) == 51.4, \"Wrong Answer\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nround_and_sum([1,2,3]) == 6\nround_and_sum([1.6,5.4,10]) == 68\nround_and_sum([5,0,10,8,5,0,10,8]) == 80\nround_and_sum([0,0,0,0,0,0,0,0]) == 0\nround_and_sum([]) == 0\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncube_Sum(2) == 2*2*2\nassert cube_Sum(3) == 3*3*3\nassert cube_Sum(4) == 4*4*4\nassert cube_Sum(7) == 7*7*7\n\n'''\nQ. Write a python function to find the cube sum of first n even natural numbers.\n    If n is not a natural number, raise an exception.\n    \n'''\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_Sum(5) == 55\nassert     cube_Sum(15) == 755\nassert     cube_Sum(30) == 80660\n\n\ndef cube_Sum1(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    pass\n\n\ndef cube_Sum2(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(cube_Sum(5))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    cube_Sum(2) == 8, 'function cube_Sum(2) should return 8'\n    cube_Sum(3) == 27, 'function cube_Sum(3) should return 27'\n    cube_Sum(4) == 64, 'function cube_Sum(4) should return 64'\n    cube_Sum(5) == 125, 'function cube_Sum(5) should return 125'\n    cube_Sum(6) == 216, 'function cube_Sum(6) should return 216'\n    cube_Sum(7) == 343, 'function cube_Sum(7) should return 343'\n    cube_Sum(8) == 512, 'function cube_Sum(8) should return 512'\n    cube_Sum(9) == 769, 'function cube_Sum(9) should return 769'\n    cube_Sum(10) == 864, 'function cube_Sum(10) should return 864'\n    cube_Sum(11) == 1025, 'function cube_Sum(11) should return 1025'\n    cube_Sum(12) == 1152, 'function cube_Sum(12) should return 1152'\n    cube_Sum(13) == 1360, 'function cube_Sum(13) should return 1360'\n    cube_Sum(14) == 1479, 'function cube_Sum(14) should return 1479'\n    cube_Sum(15) == 1636, 'function cube_Sum(15) should return 1636'\n    cube_Sum(16) == 1755, 'function cube_Sum(16) should return 1755'\n    cube_Sum(17) == 1804, 'function cube_Sum(17) should return 1804'\n    cube_Sum(18) == 1853, 'function cube_Sum(18) should return 1853'\n    cube_Sum(19) == 1966, 'function cube_Sum(19) should return 1966'\n    cube_Sum(20) == 2037, 'function cube_Sum(20) should return 2037'\n    cube_Sum(21) == 2266, 'function cube_Sum(21) should return 2266'\n    cube_Sum(22) == 2345, 'function cube_Sum(22) should return 2345'\n    cube_Sum(23) == 2474, 'function cube_Sum(23) should return 2474'\n    cube_Sum(24) == 2523, 'function cube_Sum(24) should return 2523'\n    cube_Sum(25) == 2574, 'function cube_Sum(25) should return 2574'\n    cube_Sum(26) == 2639, 'function cube_Sum(26) should return 2639'\n    cube_Sum(27) == 2718, 'function cube_Sum(27) should return 2718'\n    cube_Sum(28) == 2858, 'function cube_Sum(28) should return 2858'\n    cube_Sum(29) == 2907, 'function cube_Sum(29) should return 2907'\n    cube_Sum(30) == 3036, 'function cube_Sum(30) should return 3036'\n    cube_Sum(31) == 3201, 'function cube_Sum(31) should return 3201'\n    cube_Sum(32) == 3268, 'function cube_Sum(32) should return 3268'\n    cube_Sum(33) == 3329, 'function cube_Sum(33) should return 3329'\n    cube_Sum(34) == 3376, 'function cube_Sum(34) should return 3376'\n    cube_Sum(35) == 3527, 'function cube_Sum(35) should return 3527'\n    cube_Sum(36) == 3586, 'function cube_Sum(36) should return 3586'\n    cube_Sum(37) == 3674, 'function cube_Sum(37) should return 3674'\n    cube_Sum(38) == 3849, 'function cube_Sum(38) should return 3849'\n    cube_Sum(39) == 3924, 'function cube_Sum(39) should return 3924'\n    cube_Sum(40) == 4043, 'function cube_Sum(40) should return 4043'\n    cube_Sum(41) == 4102, 'function cube_Sum(41) should return 4102'\n    cube_Sum(42) == 4181, 'function cube_Sum(42) should return 4181'\n    cube_Sum(43) == 4331, 'function cube_Sum(43) should return 4331'\n    cube_Sum(44) == 4426, 'function cube_Sum(44) should return 4426'\n    cube_Sum(45) == 4485, 'function cube_Sum(45) should return 4485'\n    cube_Sum(46) == 4634, 'function cube_Sum(46) should return 4634'\n    cube_Sum(47) == 4698, 'function cube_Sum(47) should return 4698'\n    cube_Sum(48) == 4739, 'function cube_Sum(48) should return 4739'\n    cube_Sum(49) == 4876, 'function cube_Sum(49) should return 4876'\n    cube_Sum(50) == 5055, 'function cube_Sum(50) should return 5055'\n    cube_Sum(51) == 5134, 'function cube_Sum(51) should return 5134'\n    cube_Sum(52) == 5204, 'function cube_Sum(52) should return 5204'\n    cube_Sum(53) == 5263, 'function cube_Sum(53) should return 5263'\n    cube_Sum(54) == 5402, 'function cube_Sum(54) should return 5402'\n    cube_Sum(55) == 5460, 'function cube_Sum(55) should return 5460'\n    cube_Sum(56) == 5609, 'function cube_Sum(56) should return 5609'\n    cube_Sum(57) == 5678, 'function cube_Sum(57) should return 5678'\n    cube_Sum(58) == 5842, 'function cube_Sum(58) should return 5842'\n    cube_Sum(59) == 5926, 'function cube_Sum(59) should return 5926'\n    cube_Sum(60) == 5982, 'function cube_Sum(60) should return 5982'\n    cube_Sum(61) == 6040, 'function cube_Sum(61) should return 6040'\n    cube_Sum(62) == 6096, 'function cube_Sum(62) should return 6096'\n    cube_Sum(63) == 6155, 'function cube_Sum(63) should return 6155'\n    cube_Sum(64) == 6294, 'function cube_Sum(64) should return 6294'\n    cube_Sum(65) == 6364, 'function cube_Sum(65) should return 6364'\n    cube_Sum(66) == 6403, 'function cube_Sum(66) should return 6403'\n    cube_Sum(67) == 6470, 'function cube_Sum(67) should return 6470'\n    cube_Sum(68) == 6536, 'function cube_Sum(68) should return 6536'\n    cube_Sum(69) == 6587, 'function cube_Sum(69) should return 6587'\n    cube_Sum(70) == 6642, 'function cube_Sum(70) should return 6642'\n    cube_Sum(71) == 6795, 'function cube_Sum(71) should return 6795'\n    cube_Sum(72) == 6850, 'function cube_Sum(72) should return 6850'\n    cube_Sum(73) == 6912, 'function cube_Sum(73) should return 6912'\n    cube_Sum(74) == 6982, 'function cube_Sum(74) should return 6982'\n    cube_Sum(75) == 7046, 'function cube_Sum(75) should return 7046'\n    cube_Sum(76) == 7050, 'function cube_Sum(76) should return 7050'\n    cube_Sum(77) == 7164, 'function cube_Sum(77) should return 7164'\n    cube_Sum(78) == 7194, 'function cube_Sum(78) should return 7194'\n    cube_Sum(79) == 7261, 'function cube_Sum(79) should return 7261'\n    cube_Sum(80) == 7348, 'function cube_Sum(80) should return 7348'\n    cube_Sum(81) == 7426, 'function cube_Sum(81) should return 7426'\n    cube_Sum(82) == 7"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_Sum(0) == 0\ncube_Sum(1) == 1\ncube_Sum(2) == 8\ncube_Sum(3) == 27\ncube_Sum(4) == 64\ncube_Sum(5) == 125\ncube_Sum(6) == 216\ncube_Sum(7) == 343\ncube_Sum(8) == 512\ncube_Sum(9) == 729\ncube_Sum(10) == 864\ncube_Sum(20) == 20648\ncube_Sum(21) == 94625\ncube_Sum(22) == 291932\ncube_Sum(23) == 1469457\ncube_Sum(24) == 3651360\ncube_Sum(25) == 4722245\ncube_Sum(26) == 9689284\ncube_Sum(27) == 12445251\ncube_Sum(28) == 22992211\ncube_Sum(29) == 113778761\ncube_Sum(30) == 2209063043\ncube_Sum(31) == 1244702482\ncube_Sum(32) == 1455134730\ncube_Sum(33) == 507547325\ncube_Sum(34) == 1497337918\ncube_Sum(35) == 9485165785\ncube_Sum(36) == 9839767375\ncube_Sum(37) == 1570847136\ncube_Sum(38) == 9856523170\ncube_Sum(39) == 11327295645\ncube_Sum(40) == 16806511233\ncube_Sum(41) == 67171116051\ncube_Sum(42) == 17688645165\ncube_Sum(43) == 9759247947\ncube_Sum(44) == 8206113077\ncube_Sum(45) == 8841387105\ncube_Sum(46) == 71708111359\ncube_Sum(47) == 83512094139\ncube_Sum(48) == 92899697323\ncube_Sum(49) == 73350804633\ncube_Sum(50) == 18579475266\ncube_Sum(51) == 16374884933\ncube_Sum(52) == 30650298045\ncube_Sum(53) == 9370187627\ncube_Sum(54) == 14929700867\ncube_Sum(55) == 53893186063\ncube_Sum(56) == 9999793095\ncube_Sum(57) == 68793348955\ncube_Sum(58) == 14162445071\ncube_Sum(59) == 68082996503\ncube_Sum(60) == 90077971493\ncube_Sum(61) == 14536006411\ncube_Sum(62) == 82283524836\ncube_Sum(63) == 94211325267\ncube_Sum(64) == 65847489537\ncube_Sum(65) == 97138445237\ncube_Sum(66) == 100638479765\ncube_Sum(67) == 132378282267\ncube_Sum(68) == 81570973114\ncube_Sum(69) == 56318841659\ncube_Sum(70) == 92288907533\ncube_Sum(71) == 55279995211\ncube_Sum(72) == 80745672627\ncube_Sum(73) == 70865443673\ncube_Sum(74) == 15966069861\ncube_Sum(75) == 101993987653\ncube_Sum(76) == 50336165081\ncube_Sum(77) == 86323697465\ncube_Sum(78) == 97387797323\ncube_Sum(79) == 87417148949\ncube_Sum(80) == 102364280975\ncube_Sum(81) == 62218226721\ncube_Sum(82) == 89814879159\ncube_Sum(83) == 88260120771\ncube_Sum(84) == 94733396639\ncube_Sum(85) == 86914376045\ncube_Sum(86) == 95486711153\ncube_Sum(87) == 98552429215\ncube_Sum(88) == 95623481931\ncube_Sum(89) == 93265147937\ncube_Sum(90) == 85134047777\ncube_Sum(91) == 93018165557\ncube_Sum(92) == 79388814165\ncube_Sum(93) == 88617208181\ncube_Sum(94) == 78325926089\ncube_Sum(95) == 62687680235\ncube_Sum(96) == 17000332307\ncube_Sum(97) == 58324545053\ncube_Sum(98) == 61415243947\ncube_Sum(99) == 96297244611\ncube_Sum(100) == 87876795357\ncube_Sum(101) == 77755825043\ncube_Sum(102) == 85531957667\ncube_Sum(103) == 84918749131\ncube_Sum(104) == 84962527267\ncube_Sum(105) == 72894393833\ncube_Sum(106) == 70583510241\ncube_Sum(107) == 61238193023\ncube_Sum(108) == 85534604537\ncube_Sum(109) == 80784475207\ncube_Sum(110) == 61711832153\ncube_Sum(111) == 93957539207\ncube_Sum(112) == 81650846427\ncube_Sum(113) == 94200441617\ncube_Sum(114) == 79830867061\ncube_Sum(115) == 96345258043\ncube_Sum(116) == 75564668143\ncube_Sum(117) == 70589580289\ncube_Sum(118) == 90105678577\ncube_Sum(119) == 86037602963\ncube_Sum(120) == 81596606411\ncube_Sum(121) == 61225074987\ncube_Sum(122) == 87870793851\ncube_Sum(123) == 77427467535\ncube_Sum(124) == 69701071819\ncube_Sum(125) == 71408252749\ncube_Sum(126) == 75616667359\ncube_Sum(127) == 75516939079\ncube_Sum(128) == 63565816491\ncube_Sum(129) == 54977153411\ncube_Sum(130) == 99857771199\ncube_Sum(131) == 71557238761\ncube_Sum(132) == 81707469923\ncube_Sum(133) == 95270873639\ncube_Sum(134) == 72409727177\ncube_Sum(135) == 59770871239\ncube_Sum(136) == 94657838231\ncube_Sum(137) == 73205060273\ncube_Sum(138) == 72915861243\ncube_Sum(139) == 79564848357\ncube_Sum(140) == 6221863351\ncube_Sum(141) == 88540284429\ncube_Sum(142) == 71800778933\ncube_Sum(143) == 92518696313\ncube_Sum(144) == 85580338933\ncube_Sum(145) == 95972244667\ncube_Sum(146) == 46619175391\ncube_Sum(147) == 72965110937\ncube_Sum(148) == 92538432357\ncube_Sum(149) == 84450942939\ncube_Sum(150) == 93618031587\ncube_Sum(151) == 71733449139\ncube_Sum(152) == 91629574963\ncube_Sum(153) == 99106072889\ncube_Sum(154) == 69909783361\ncube_Sum(155) == 90794708829\ncube_Sum(156) == 90971926211\ncube_Sum(157) == 82360951851\ncube_Sum(158) == 78870092321\ncube_Sum(159) == 99857140611\ncube_Sum(160) == 98324881657\ncube_Sum(161) == 99746796357\ncube_Sum(162) == 9"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncube_Sum(3) == 18\ncube_Sum(5) == 137\ncube_Sum(10) == 2657\ncube_Sum(20) == 3514018\ncube_Sum(30) == 57022868\ncube_Sum(100) == 1614080000\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 125\nassert     cube_Sum(6) == 216\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef cube_Sum_rec(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers using recursion.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 3\nassert     cube_Sum(5) == 27\nassert     cube_Sum(15) == 377\nassert     cube_Sum(20) == 610\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple(test_tup) == 'a1bc'\nassert    concatenate_tuple(test_tup1) == 'a1bc'\nassert    concatenate_tuple(test_tup2) == 'a1bc'\nassert    concatenate_tuple(test_tup3) == 'a1bc'\nassert    concatenate_tuple(test_tup4) == 'a1bc'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    concatenate_tuple(['a', 'b', 'c']) == \"a,b,c\"\n    concatenate_tuple(('a', 'b', 'c')) == \"a,b,c\"\n    concatenate_tuple([\"a\", \"b\", \"c\"]) == \"a,b,c\"\n    concatenate_tuple((1, 2, 3)) == \"1,2,3\"\n    concatenate_tuple({\"a\", \"b\", \"c\"}) == \"a,b,c\"\n    concatenate_tuple((\"a\", \"b\", \"c\")) == \"a,b,c\"\n    concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")) == \"a,b,c,d,e,f,g\"\n    concatenate_tuple((\"a\", \"b\", \"c\", \"d\", \"e\")) == \"a,b,c,d,e\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate_tuple([[1,2,3]]) == '1,2,3', \"Wrong output\"\nassert concatenate_tuple((1,2,3)) == '1,2,3', \"Wrong output"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple(('a', 'b')) == 'a|b', \"Tuple concatenation fail\"\nassert     concatenate_tuple((1, 2)) == '1|2', \"Tuple concatenation fail\"\nassert     concatenate_tuple('ab') == 'a|b', \"Tuple concatenation fail\"\nassert     concatenate_tuple(('a', 1)) == 'a|1', \"Tuple concatenation fail\"\nprint('Tuple concatenation is correct')\n\ndef merge_dicts(dict1, dict2):\n    '''\n    Write a function to merge two dictionary into one dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate_tuple((1, 2, 3)) == \"1, 2, 3\"\nassert     concatenate_tuple((1, 2, 'a')) == \"1, 2, a\"\nassert     concatenate_tuple((1, 2.5, 'a')) == \"1, 2.5, a\"\nassert     concatenate_tuple((1, 'a', 2, 3, 4, 5)) == \"1, a, 2, 3, 4, 5\"\nassert     concatenate_tuple((1, 2, 'a')) == \"1, 2, a\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c'\nassert concatenate_tuple(('a',)) == 'a'\nassert concatenate_tuple((1, 2, 3)) == '1,2,3'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate_tuple((1, 2, 3)) == '1 2 3'\nassert     concatenate_tuple((1, 2, 3, 4, 5, 6)) == '1 2 3 4 5 6'\nassert     concatenate_tuple((1, 2, 3, 4, 5, 6, 7)) == '1 2 3 4 5 6 7'\n\nprint('Test pass')\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple((1,2)) == '1 2'     == concatenate_tuple((1,2))\nassert     concatenate_tuple((1,'',3)) == '1, 3' == concatenate_tuple((1,'',3))\nassert     concatenate_tuple((1,'4',5)) == '1, 4, 5' == concatenate_tuple((1,'4',5))\nassert     concatenate_tuple((1,'4',5,'6',7)) == '1, 4, 5, 6, 7' == concatenate_tuple((1,'4',5,'6',7))\nassert     concatenate_tuple((1,2,3,4)) == '1, 2, 3, 4' == concatenate_tuple((1,2,3,4))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple((1, 2, 3)) == \"1 2 3\", \"The concatenated tuple is incorrect\"\nassert     concatenate_tuple((1, 2, 3, 4)) == \"1 2 3 4\", \"The concatenated tuple is incorrect\"\nassert     concatenate_tuple((3,4)) == \"3 4\", \"The concatenated tuple is incorrect\"\nassert     concatenate_tuple((3,4,5)) == \"3 4 5\", \"The concatenated tuple is incorrect\"\n\ndef concatenate_string(test_str):\n    '''\n    Write a function to concatenate each element of string by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple([1, 2, 3, 4]) == \"1 2 3 4\", \"incorrect\"\nassert     concatenate_tuple((1, 2, 3, 4)) == \"1 2 3 4\", \"incorrect\"\nassert     concatenate_tuple((1, 2)) == \"1 2\", \"incorrect\"\nassert     concatenate_tuple(\"abcd\") == \"abcd\", \"incorrect\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(1) == 1, \"TEST FAILED\"\nassert     find_Average_Of_Cube(2) == 1, \"TEST FAILED\"\nassert     find_Average_Of_Cube(3) == 1, \"TEST FAILED\"\nassert     find_Average_Of_Cube(4) == 1, \"TEST FAILED\"\nassert     find_Average_Of_Cube(5) == 1, \"TEST FAILED\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Average_Of_Cube(5) == 15, \"The expected output is 15.\"\nprint (\"correct\")\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Average_Of_Cube(4) == 1.25\nassert     find_Average_Of_Cube(10) == 5.625\nassert     find_Average_Of_Cube(20) == 19.5\nassert     find_Average_Of_Cube(30) == 28.0\nassert     find_Average_Of_Cube(40) == 37.5\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Average_Of_Cube(3) == 8.0, \"Error\"\nassert     find_Average_Of_Cube(5) == 7.142857142857143, \"Error\"\nassert     find_Average_Of_Cube(7) == 13.8, \"Error\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Average_Of_Cube(0) == 0\nassert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(3) == 1.5\nassert     find_Average_Of_Cube(5) == 2\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear(test_tuple) == (12, 15)\nassert     extract_rear(test_tuple) == (10, 11)\nassert     extract_rear(test_tuple) == (7, 8)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear(('abcde', 'fghij')) == ('de', 'ij')\nassert     extract_rear(('abcde', 'acd')) == ('c', 'de')\nassert     extract_rear(('abcde', 'bcd')) == ('c', 'de')\nassert     extract_rear(('abcde', 'xyz')) == ('e', 'xyz')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_rear(test_tuple):\n    '''\n    Write a function to check if the rear index element of each string in the given tuple is equal to the length of the string.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear(('one', 'two', 'three')) == (3,)\nassert     extract_rear(('one', 'two', 'three', 'four')) == (4,)\nassert     extract_rear(('one', 'two', 'three', 'four', 'five')) == (4,)\nassert     extract_rear(('one', 'two', 'three', 'four', 'five','six')) == (4,)\nassert     extract_rear(('one', 'two', 'three', 'four', 'five','six','seven')) == (5,)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear((\"car\", \"bike\", \"plane\", \"truck\", \"boat\", \"plane\")) == ('boat', 'plane', 'car', 'truck', 'boat', 'plane')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear((\"abcd\", \"a\")) == (0, 1, 2, 3, 4)\nassert     extract_rear((\"abcd\", \"abc\", \"a\")) == (1, 2, 3, 4)\nassert     extract_rear((\"abcd\", \"b\", \"c\")) == (0, 1, 2)\nassert     extract_rear((\"abcd\", \"cd\")) == (0, 1, 2)\nassert     extract_rear((\"abc\", \"d\", \"efg\")) == (0, 1, 2)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('b', 'c', 'd', 'e')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('c', 'd', 'e')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('d', 'e')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e')\nassert     extract_rear(('a', 'b', 'c', 'd')) == ('b', 'c', 'd')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear(('abc', 'xyz', 'zaba', 'abc', 'xyz')) ==     ('abc', 'xyz', 'abc', 'zaba', 'xyz')\nassert     extract_rear(('abc', 'xyz', 'zaba', 'abc', 'xyz', 'xyz')) ==     ('abc', 'xyz', 'abc', 'zaba', 'xyz')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear(('a', 'b', 'c', 'd')) == ('c', 'd')\nassert     extract_rear(('a', 'b', 'c')) == ('b', 'c')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear((\"A\", \"B\", \"C\", \"D\")) == (\"D\",)\nassert     extract_rear((\"A\", \"B\", \"C\")) == (\"C\",)\nassert     extract_rear((\"A\", \"B\")) == (\"B\",)\nassert     extract_rear((\"A\",)) == (\"A\",)\nassert     extract_rear((\"A\")) == (\"A\",)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_element_in_list([1, 2, 3], 3) == 2, \"incorrect\"\nassert \ncount_element_in_list([1, 2, 3], 5) == 0, \"incorrect\"\nassert \ncount_element_in_list([1, 2, 3], 2) == 1, \"incorrect\"\n\n'''\nCodeChef:\n\ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 2) == 3\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 0) == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 5) == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], -1) == 5\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 1.2) == 4\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'hello') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'world') == 5\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'a') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'x') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], '2') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'e') == 2\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'l') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'z') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'h') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'o') == 2\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'w') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'x') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'i') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], '1') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'c') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'u') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 't') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]],'s') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'v') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'n') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'g') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'f') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'y') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'r') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'p') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'h') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'q') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'k') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'a') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'k') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'e') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'd') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'f') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'd') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'b') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'u') == 0\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'g') == 1\ncount_element_in_list([[1,2,3],[2,3,4],[3,4,5],[2,3,4],[1,2,3]], 'o') == 1\ncount_element_in_list([["
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_element_in_list([1,2,3,4,5,6,7,8,9,10],1) == 3\nassert     count_element_in_list([1,2,3,4,5,6,7,8,9,10],6) == 1\nassert     count_element_in_list([1,2,3,4,5,6,7,8,9,10],10) == 0\nassert     count_element_in_list([1,2,3,4,5,6,7,8,9,10],0) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_element_in_list([1, 2, 3], 4) == 0\ncount_element_in_list([1, 2, 3], 5) == 2\n\ndef count_element_in_list_with_initial_count(list1, x, i=0): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_element_in_list([[1, 2, 3], [3, 4, 5], [6, 7, 8]], 1) == 1, \"incorrect count\"\nassert     count_element_in_list([[1, 2, 3], [3, 4, 5], [6, 7, 8]], 10) == 0, \"incorrect count\"\nassert     count_element_in_list([[1, 2, 3], [3, 4, 5], [6, 7, 8]], 2) == 3, \"incorrect count\"\nassert     count_element_in_list([[1, 2, 3], [3, 4, 5], [6, 7, 8]], 5) == 4, \"incorrect count\"\nassert     count_element_in_list([[1, 2, 3], [3, 4, 5], [6, 7, 8]], 6) == 2, \"incorrect count\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_element_in_list([1, 2, 3, 4], 4) == 3\nassert count_element_in_list([1, 2, 3, 4], 4) == 0\nassert count_element_in_list([1, 2, 3, 4], 5) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_element_in_list([1,1,1,2,3,3,4], 4) == 3\nassert     count_element_in_list([1,1,1,2,3,3,4], 1) == 2\nassert count_element_in_list([1,1,1,2,3,3,4], 4) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_element_in_list(['qwerty', 'qw', 'zxc', 'qw', 'qwerty', 'zxc'], 'qw') == 1, 'incorrect'\nassert     count_element_in_list(['qwerty', 'qw', 'zxc', 'qw', 'qwerty', 'zxc'], 'zxc') == 3, 'incorrect'\nassert     count_element_in_list(['qwerty', 'qw', 'zxc', 'qw', 'qwerty', 'zxc'], 'qwerty') == 2, 'incorrect'\nassert     count_element_in_list(['qwerty', 'qw', 'zxc', 'qw', 'qwerty', 'zxc'], 'w') == 2, 'incorrect'\nassert     count_element_in_list(['qwerty', 'qw', 'zxc', 'qw', 'qwerty', 'zxc'], 'xyz') == 0, 'incorrect'\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not filter_oddnumbers([]) == []\nassert filter_oddnumbers([2,5,6,1,9,3,4,6,8]) == [1,3,5,7,9]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([2,3,4,5,6,7]) == [2,4,6,7]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert filter_oddnumbers([]) == []\nassert filter_oddnumbers([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert filter_oddnumbers([]) == []\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 9], \"Should work\"\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9], \"Should work\"\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, 10], \"Should work\"\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 10, 11], \"Should work\"\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 10, 11, 12], \"Should work\"\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert (\n    filter_oddnumbers([\n        1, \n        2, \n        3, \n        4, \n        5, \n        6, \n        7, \n        8, \n        9, \n        10, \n        11, \n        12, \n        13, \n        14, \n        15, \n        16, \n        17, \n        18, \n        19, \n        20, \n        21, \n        22, \n        23, \n        24, \n        25, \n        26, \n        27, \n        28, \n        29, \n        30, \n        31, \n        32, \n        33, \n        34, \n        35, \n        36, \n        37, \n        38, \n        39, \n        40, \n        41, \n        42, \n        43, \n        44, \n        45, \n        46, \n        47, \n        48, \n        49, \n        50, \n        51, \n        52, \n        53, \n        54, \n        55, \n        56, \n        57, \n        58, \n        59, \n        60, \n        61, \n        62, \n        63, \n        64, \n        65, \n        66, \n        67, \n        68, \n        69, \n        70, \n        71, \n        72, \n        73, \n        74, \n        75, \n        76, \n        77, \n        78, \n        79, \n        80, \n        81, \n        82, \n        83, \n        84, \n        85, \n        86, \n        87, \n        88, \n        89, \n        90, \n        91, \n        92, \n        93, \n        94, \n        95, \n        96, \n        97, \n        98, \n        99, \n        100, \n        101, \n        102, \n        103, \n        104, \n        105, \n        106, \n        107, \n        108, \n        109, \n        110, \n        111, \n        112, \n        113, \n        114, \n        115, \n        116, \n        117, \n        118, \n        119, \n        120, \n        121, \n        122, \n        123, \n        124, \n        125, \n        126, \n        127, \n        128, \n        129, \n        130, \n        131, \n        132, \n        133, \n        134, \n        135, \n        136, \n        137, \n        138, \n        139, \n        140, \n        141, \n        142, \n        143, \n        144, \n        145, \n        146, \n        147, \n        148, \n        149, \n        150, \n        151, \n        152, \n        153, \n        154, \n        155, \n        156, \n        157, \n        158, \n        159, \n        160, \n        161, \n        162, \n        163, \n        164, \n        165, \n        166, \n        167, \n        168, \n        169, \n        170, \n        171, \n        172, \n        173, \n        174, \n        175, \n        176, \n        177, \n        178, \n        179, \n        180, \n        181, \n        182, \n        183, \n        184, \n        185, \n        186, \n        187, \n        188, \n        189, \n        190, \n        191, \n        192, \n        193, \n        194, \n        195, \n        196, \n        197, \n        198, \n        199, \n        200, \n        201, \n        202, \n        203, \n        204, \n        205, \n        206, \n        207, \n        208, \n        209, \n        210, \n        211, \n        212, \n        213, \n        214, \n        215, \n        216, \n        217, \n        218, \n        219, \n        220, \n        221, \n        222, \n        223, \n        224, \n        225, \n        226, \n        227, \n        228, \n        229, \n        230, \n        231, \n        232, \n        233, \n        234, \n        235, \n        236, \n        237, \n        238, \n        239, \n        240, \n        241, \n        242, \n        243, \n        244, \n        245, \n        246, \n        247, \n        248, \n        249, \n        250, \n        251, \n        252, \n        253, \n        254, \n        255, \n        256, \n        257, \n        258, \n        259, \n        260, \n        261, \n        262, \n        263, \n        264, \n        265, \n        266, \n        267, \n        268, \n        269, \n        270, \n        271, \n        272, \n        273, \n        274, \n        275, \n        276, \n        277, \n        278, \n        279, \n        280, \n        281, \n        282, \n        283, \n        284, \n        285, \n        286, \n        287, \n        288, \n        289, \n        290, \n        291, \n        292, \n        293, \n        294, \n        295, \n        296, \n        297, \n        298, \n        299, \n        300, \n        301, \n        302, \n        303, \n        304, \n        305, \n        306, \n        307, \n        308, \n        309, \n        310, \n        311, \n        312, \n        313, \n        314, \n        315, \n        316, \n        317, \n        318, \n        319, \n        320, \n        321, \n        322, \n        323, \n        324, \n        325, \n        326, \n        327, \n        328, \n        329, \n        330, \n        331, \n        332, \n        333, \n        334, \n        335, \n        336, \n        337, \n        338, \n        339, \n        340, \n        341, \n        342, \n        343, \n        344, \n        345, \n        346, \n        347, \n        348, \n        349, \n        350, \n        351, \n        352, \n        353, \n        354, \n        355, \n        356, \n        357, \n        358, \n        359, \n        360, \n        361, \n        362, \n        363, \n        364, \n        365, \n        366, \n        367, \n        368, \n        369, \n        370, \n        371, \n        372, \n        373, \n        374, \n        375, \n        376, \n        377, \n        378, \n        379, \n        380, \n        381, \n        382, \n        383, \n        384, \n        385, \n        386, \n        387, \n        388, \n        389, \n        390, \n        391, \n        392, \n        393, \n        394, \n        395, \n        396, \n        397, \n        398, "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert filter_oddnumbers([]) == []\nassert filter_oddnumbers([1]) == [1]\nassert filter_oddnumbers([2]) == [2]\nassert filter_oddnumbers([3]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8]) == [1,3,5,7,8]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == []\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert     filter_oddnumbers([2, 4, 6, 8, 10, 12, 14, 15, 16]) == []\nassert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1, 2, 3]) == [1, 3]\nassert     filter_oddnumbers([5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert filter_oddnumbers([1, 2, 3, 4]) == [1, 3]\nassert filter_oddnumbers([4, 8, 6, 1, 3]) == [4, 8, 6]\nassert filter_oddnumbers([2, 3, 4, 5, 6]) == []\nassert filter_oddnumbers([5]) == []\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format(\"20-02-19\") == \"19-02-20\"\nassert     change_date_format(\"10-02-28\") == \"28-02-10\"\nassert     change_date_format(\"31-03-18\") == \"18-03-31\"\nassert     change_date_format(\"16-02-28\") == \"28-02-16\"\nassert     change_date_format(\"15-03-15\") == \"15-03-15\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format('2020-11-23') == '23-11-2020'\nassert     change_date_format('2020-11-23') == '23-11-2020'\nassert     change_date_format('2020/11/23') == '23-11-2020'\nassert     change_date_format('2020-11/23') == '23-11-2020'\nassert     change_date_format('20/11/23') == '23-11-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format('2019-09-26') == '26-09-2019'\nassert     change_date_format('10-07-19') == '7-10-19'\nassert     change_date_format('11-11-19') == '11-11-19'\nassert     change_date_format('11-9-19') == '11-9-19'\nassert     change_date_format('10-10-19') == '10-10-19'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format(\"2019-04-10\") == \"10-04-2019\", \"Wrong output\"\nassert     change_date_format(\"29-05-2017\") == \"5-5-2017\", \"Wrong output\"\nassert     change_date_format(\"23-02-2016\") == \"2-2-2016\", \"Wrong output\"\nassert     change_date_format(\"16-04-2017\") == \"4-4-2017\", \"Wrong output\"\n\n'''\nWrite a function that takes a date in dd-mm-yyyy format and converts it to\nmm/dd/yyyy format.\n'''\ndef dd_mm_yyyy_to_mm_dd_yyyy(ddmmyy):\n    '''\n    Write a function to convert a date of dd-mm-yyyy format to mm/dd/yyyy format.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format('2020-06-12') == '12-06-2020'\nassert     change_date_format('2020-06-13') == '13-06-2020'\nassert     change_date_format('2020-06-12') == '12-06-2020'\nassert     change_date_format('2020-06-12') == '12-06-2020'\n\n'''\n10. Write a function to return True if the string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period, but is preceeded by a space.  Otherwise return False.  \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(change_date_format('12-04-2020'))\nprint(change_date_format('12-04-2020'))\nprint(change_date_format('12-04-2020'))\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_date_format('02-12-2021') == '2021-12-02', 'Should return 2021-12-02'\nassert     change_date_format('01-31-2020') == '2020-01-31', 'Should return 2020-01-31'\nassert     change_date_format('31-01-2040') == '2040-01-31', 'Should return 2040-01-31'\nassert     change_date_format('21-01-2040') == '2040-01-21', 'Should return 2040-01-21'\n\ndef date_val(date):\n    '''\n    Write a function to check if the given date is valid or not.\n    The function should return true if it is a valid date and false if it is not.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndate_to_format = '2019-12-24'"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format('2020-01-30') == '30-01-2020'\nassert change_date_format('2020-01-30') == '30-01-2020'\nassert change_date_format('2020/01/30') == '30/01/2020'\nassert change_date_format('2020-01/30') == '30-01-2020'\nassert change_date_format('2020-01-30') == '30-01-2020'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nshell_sort([1,2,4,3]) == None\nassert \nshell_sort([1,2,3,4]) == None\nassert \nshell_sort([]) == None\nassert \nshell_sort([1,5,4,3,2]) == None\nassert \nshell_sort([5,4,3,2,1]) == None\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     shell_sort([1, 2, 4, 7, 3, 5]) == [1, 2, 3, 4, 5, 7], \"Not correct\"\nassert     shell_sort([7, 4, 3, 2, 5, 1]) == [1, 2, 3, 4, 5, 7], \"Not correct\"\nassert     shell_sort([]) == [], \"Not correct\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     shell_sort([7, 5, 4, 3, 2, 1]) ==     [1, 2, 3, 4, 5, 7]\nassert     shell_sort([7, 5, 4, 3, 2, 1, 3, 4, 1, 1]) ==     [1, 1, 1, 2, 3, 3, 4, 4, 5, 7]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     shell_sort([0,2,1,3,2,4,2,4,1,5,3,2,4,2,4,5]) == True \nassert     shell_sort([0,2,1,3,2,4,2,4,1,5,3,2,4,2,4,5,4,4,5,1,2,4,4,1,2,5,4]) == True \nassert     shell_sort([0,2,1,3,2,4,2,4,1,5,3,2,4,2,4,5,4,4,5,1,2,4,4,1,2,5,4]) == True \nassert     shell_sort([1,2,3,4,5,6,7,8,9,0]) == False \nassert     shell_sort([0,1,1,2,2,3,3,4,4,4,4,5,5,5,5,6,6,7,7,7,8,8,9,9,9]) == False \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     shell_sort([1, 2, 3, 4, 5, 6, 7]) ==\n        [1, 2, 3, 4, 5, 6, 7], \"Error in shell_sort\"\nassert     shell_sort([]) ==\n        [], \"Error in shell_sort\"\nassert     shell_sort([-5, -4, -3, -2, -1]) ==\n        [-5, -4, -3, -2, -1], \"Error in shell_sort\"\nassert     shell_sort([2, 1, 2, 1, 3, 5, 6]) ==\n        [2, 1, 2, 1, 3, 5, 6], \"Error in shell_sort\"\nassert     shell_sort([1, 1, 1, 1]) ==\n        [1, 1, 1, 1], \"Error in shell_sort\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert shell_sort([4, 1, 2, 3]) == sorted([4, 1, 2, 3])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     and_tuples((1,2),(3,4)) == ((1, 2), (3, 4))\nassert     and_tuples((1,2,3),(1,2,3)) == ((1, 2, 3), (1, 2, 3))\nassert     and_tuples((1,2),(3,4,5)) == ((1, 2), (3, 4, 5))\nassert     and_tuples((),()) == ()\nassert     and_tuples((),(1,2)) == ()\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1,2,3),(4,5,6)) == (4,5,6)\nassert     and_tuples((1,2),(4,5,6)) == (1,2,4,5,6)\nassert     and_tuples((1,2,3),(4,5)) == (1,2,4,5,3)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not and_tuples((1,2,3),(1,2,3))\nassert not and_tuples((1,2,3),(2,2,3))\nassert and_tuples((1,2,3),(1,2,3))\nassert not and_tuples((1,2,3),(2,2,3))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 2)\nassert     and_tuples((1, 2), (4, 5)) == (1, 2)\nassert     and_tuples((0, 1), (1, 0)) == (0, 1)\nassert     and_tuples((0, 1), (0, 1)) == (0, 1)\nassert     and_tuples((0, 1), (1, 0)) == (0, 1)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples(('a', 'b', 'c'), ('d', 'e')) == ('a', 'd', 'e')\nassert     and_tuples(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'd', 'f')\nassert     and_tuples(('a', 'b', 'c'), ('d', 'e', 'f', 'g')) == ('a', 'd', 'f')\nassert     and_tuples(('a', 'b', 'c', 'd'), ('d', 'e', 'f', 'g')) == ('a', 'd', 'g')\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     and_tuples((1,2), (3,4)) == (1,3)\nassert     and_tuples((5,6), (7,8)) == (5,6)\nassert     and_tuples((9,10), (11,12)) == (9,10)\nassert     and_tuples((13,14), (15,16)) == (13,14)\nprint ('\\033[92m' + \"Test cases passed: \" + str(test_count) + '\\033[0m')\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nand_tuples((10, 20, 30), (40, 50, 60)) == (10, 20, 30)\nand_tuples((10, 20, 30), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30), (10, 20)) == (10, 20)\nand_tuples((10, 20), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30), (40, 50, 60)) == (10, 20, 30)\nand_tuples((10, 20, 30), (40, 50)) == (10, 20)\nand_tuples((10, 20), (10, 20, 30)) == (10, 20)\nand_tuples((10, 20), (10, 20, 30)) == (10, 20)\nand_tuples((10, 20), (40, 50, 60)) == (10, 20)\nand_tuples((10, 20, 30), (40, 50)) == (10, 20)\nand_tuples((10, 20), (10, 20, 30)) == (10, 20)\nand_tuples((10, 20), (10, 20, 30)) == (10, 20)\nand_tuples((10, 20, 30), (40, 50, 60)) == (10, 20, 30)\nand_tuples((10, 20, 30), (40, 50)) == (10, 20)\nand_tuples((10, 20, 30), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30), (10, 20, 30, 40)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (10, 20, 30, 40)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (40, 50, 60)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40), (40, 50)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (10, 20)) == (10, 20)\nand_tuples((10, 20, 30, 40), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (10, 20, 30, 40)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (40, 50)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40), (40, 50, 60)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 50)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 50)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 50)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 50)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 50)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 50)) == (10, 20, 30, 40, 50)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (10, 20, 30, 40, 50)) == (10, 20, 30, 40)\nand_tuples((10, 20, 30, 40, 50), (40, 50, 60)) == (10, 20, 30, 40, 50)\nan"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples((1,2),(3,4)) == (1,2,3,4)\nassert     and_tuples((0,1),(0,2)) == (0,0,0,2)\nassert     and_tuples((0,0),(1,1)) == (0,1,0,1)"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     and_tuples((1,2),(3,4)) == (1, 3)\nassert     and_tuples((2,3),(4,5)) == (2, 4)\nassert     and_tuples((5,6),(7,8)) == (5, 7)\nassert     and_tuples((4,5),(6,7)) == (4, 6)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     and_tuples((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 2, 3, 4)\nassert     and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 4)\nassert     and_tuples((5, 6, 7, 8), (1, 2, 3, 4)) == (5, 6, 7, 8)\nassert     and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 6, 7, 8)\nassert     and_tuples((2, 4, 6, 8), (1, 3, 5, 7)) == (2, 4, 6, 8)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\na = 4\nb = -10\nc = -6\n\nparabola_directrix(a, b, c)\n\ndef parabola_x_values(a, b, c): \n    '''\n    Write a function to find the x-values of the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(2, -10, 5) == (2.0, 1.0, 0.0)\nassert     parabola_directrix(2, -10, 10) == (2.0, 1.0, -5.0)\nassert     parabola_directrix(2, -10, 1) == (2.0, 1.0, -10)\nassert     parabola_directrix(2, 10, 5) == (2.0, -1.0, 0.0)\nassert     parabola_directrix(2, 10, 10) == (2.0, -1.0, 5.0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parabola_directrix(1, 2, 3) == (-0.8333333333333336, -0.8333333333333336)\nassert     parabola_directrix(3, 4, 5) == (0.8333333333333336, 0.8333333333333336)\nassert     parabola_directrix(0, 0, 0) == (0, 0)\nassert     parabola_directrix(0, 0, -5) == (0, 0)\nassert     parabola_directrix(-1, -2, -3) == (0, 0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parabola_directrix(1, 2, 3) == (1, 1)\nassert     parabola_directrix(0, 0, 0) == (1, 0)\nassert     parabola_directrix(1, 1, 1) == (1, -2)\nassert     parabola_directrix(2, 2, 2) == (1, 4)\nassert     parabola_directrix(0.5, 0.5, 0.5) == (0, 0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\na = 2\nb = 3\nc = 2\n\nimport math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parabola_directrix(1, 0, 1) == [1.0, 0.0, 0.0]\nassert     parabola_directrix(1, 1, 1) == [1.0, 0.0, 0.0]\nassert     parabola_directrix(0, 1, 1) == [0.0, 0.0, 0.0]\nassert     parabola_directrix(-1, 1, 1) == [-1.0, 0.0, 0.0]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    parabola_directrix(0, 0, 1)\nassert \n    parabola_directrix(0, 1, 1)\nassert \n    parabola_directrix(1, 0, 1)\nassert \n    parabola_directrix(1, 1, 1)\nassert \n    parabola_directrix(-1, 0, 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parabola_directrix(2, 1, 1) == (-1, -1, 1)\nassert     parabola_directrix(2, 1, 0) == (-1, -1, 1)\nassert     parabola_directrix(2, 1, -1) == (-1, -1, 1)\n\ndef parabola_coords(a, b, c):\n    '''\n    Write a function to find the coordinates of a point on a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parabola_directrix(1, 1, -1) == [-1, 1]\nassert     parabola_directrix(2, -1, -3) == [2, -1]\nassert     parabola_directrix(2, -1, -3) == [2, -1]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(2,3,4) == (0.5, 1.5)\nassert     parabola_directrix(1,1,1) == (0,0)\nassert     parabola_directrix(2,2,2) == (0,0)\nassert     parabola_directrix(3,2,2) == (0,0)\nassert     parabola_directrix(3,3,4) == (1.0, 3.0)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    common_element([1,2,3], [3,4,5]) == True, \"it should return true for two equal lists\"\nassert \n    common_element([1,2,3], [3,4,5,6]) == False, \"it should return false for two different lists\"\nassert \n    common_element([1], [2]) == False, \"it should return false for two lists with different lengths\"\nassert \n    common_element([], [2]) == False, \"it should return false for two empty lists\"\nassert \n    common_element([1], [1]) == True, \"it should return true for two lists with same elements\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3,4], [2,3,4]) == True\nassert     common_element([1,2,3,4], [3,4]) == False\nassert     common_element([], [1,2,3,4]) == False\nassert     common_element([1], [2,3,4]) == False\nassert     common_element([1,2,3,4], [1,2,3,4]) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element([1, 2, 3, 4], [1, 2, 3, 4, 5]) == True, \"list1: {}, list2: {}\".format([1, 2, 3, 4], [1, 2, 3, 4, 5])\nassert     common_element([1, 2, 3, 4], [5, 6, 7]) == False, \"list1: {}, list2: {}\".format([1, 2, 3, 4], [5, 6, 7])\nassert     common_element([1, 1, 1], [1, 1, 1]) == True, \"list1: {}, list2: {}\".format([1, 1, 1], [1, 1, 1])\nassert     common_element([1, 1], [1, 1, 1]) == True, \"list1: {}, list2: {}\".format([1, 1], [1, 1, 1])\nassert     common_element([1], [1, 1, 1]) == False, \"list1: {}, list2: {}\".format([1], [1, 1, 1])\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_element([1, 2, 3], [2, 3, 4]) == True\nassert     common_element([1, 2, 3], [3, 4, 5]) == False\nassert     common_element([], []) == False"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_element([1,2,3], [4,5,6]) == False, \"Wrong!\"\nassert     common_element([1,2,3], [3,5,6]) == True, \"Wrong!\"\nassert     common_element([1,2,3], [4,2,6]) == True, \"Wrong!\"\nassert     common_element([1,2,3], [4,3,6]) == True, \"Wrong!\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncommon_element([1, 2, 3, 4], [2, 3, 4, 5]) == True\ncommon_element([1, 2, 3, 4], [2, 3, 5, 6]) == False"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncommon_element([1,2,3], [4,5,6]) == False\ncommon_element([1,2], [4,5,6]) == True\ncommon_element([1,2,3,4,5,6], [7,8,9]) == False\ncommon_element([1,2,3,4,5,6], []) == False\ncommon_element([], []) == False\ncommon_element([], [2,3]) == False\ncommon_element([], [1,2]) == False\ncommon_element([1], [2,3]) == False\ncommon_element([1,2,3], [4,5]) == False\ncommon_element([1,2,3], [4,5,6]) == False\ncommon_element([1,2,3,4,5,6], [7,8,9]) == False\ncommon_element([1,2,3,4,5,6], []) == False\ncommon_element([], []) == False\ncommon_element([], [2,3]) == False\ncommon_element([], [1,2]) == False\ncommon_element([1], [2,3]) == False\ncommon_element([1,2,3], [4,5]) == False\ncommon_element([1,2,3], [4,5,6]) == False\ncommon_element([1,2,3,4,5,6], [7,8,9]) == False\ncommon_element([1,2,3,4,5,6], []) == False\ncommon_element([], []) == False\ncommon_element([2,3], [4,5,6]) == False\ncommon_element([1,2,3,4,5,6], []) == False\ncommon_element([1,2,3,4,5,6], [7,8,9]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3]) == True\ncommon_element([1,2,3,4,5,6], [1,2,3,7,8,9]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5]) == True\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,7]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6]) == True\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,7,8]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == False\ncommon_element([1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == False\ncommon_element([1,"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1,2,3,4], [2,3,4,5]) == True\nassert     common_element([1,2,3,4], [2,3,5,6]) == False\nassert     common_element([1,2,3], [2,3,4]) == False\nassert     common_element([1,2,3], [3,4,5]) == True\nassert     common_element([], [1,2,3]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1,2,3,4], [2,3,4,5]) == True, \"Should return True\"\nassert     common_element([1,2,3,4], [1,2,3,5]) == False, \"Should return False\"\nassert     common_element([1,2,3,4], []) == False, \"Should return False\"\nassert     common_element([], [1,2,3,4]) == False, \"Should return False\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1,2,3,4,5], [3,4,5,6,7]) == True\nassert     common_element([1,2,3,4,5], [1,2,3,4,6]) == False\nassert     common_element([1,2,3,4,5], [5,6,7,8,9]) == True\nassert     common_element([1,2,3,4,5], [4,5,6,7,8]) == False\nassert     common_element([1,2,3,4,5], [3,4,6,7,8]) == True\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_trapezium(10,5,12) == 7.5, \"Wrong\"\nassert median_trapezium(10,8,6) == 7.5, \"Wrong\"\nassert median_trapezium(2,5,9) == 5.5, \"Wrong\"\nassert median_trapezium(5,9,3) == 5.0, \"Wrong\"\nassert median_trapezium(5,5,3) == 5.0, \"Wrong\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_trapezium(1,2,1)==1.5\nassert median_trapezium(1,2,5)==2.0\nassert median_trapezium(1,2,5.5)==2.0\nassert median_trapezium(2,2,5)==2.0\nassert median_trapezium(1,2,0)==1.0\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_trapezium(3,4,5) == 3\nassert median_trapezium(3,4,6) == 4\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_trapezium(3,7,8) == 6.5, 'Wrong median_trapezium value.'\nassert median_trapezium(3,3,8) == 4.0, 'Wrong median_trapezium value.'\nassert median_trapezium(6,8,6) == 6.0, 'Wrong median_trapezium value.'\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_trapezium(5,5,10)== 5\nassert     median_trapezium(7,4,10) == 5.5\nassert     median_trapezium(7,4,4) == 5\nassert     median_trapezium(7,4,7) == 7\nassert     median_trapezium(3,1,4) == 3\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('')\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_trapezium(base1=10,base2=5,height=15) == 9.5, 'Wrong median length of a trapezium'\nassert median_trapezium(base1=10,base2=5,height=10) == 5, 'Wrong median length of a trapezium'\nassert median_trapezium(base1=10,base2=5,height=5) == 5, 'Wrong median length of a trapezium'\nassert median_trapezium(base1=10,base2=5,height=4) == 5, 'Wrong median length of a trapezium'\nassert median_trapezium(base1=10,base2=5,height=3) == 3.5, 'Wrong median length of a trapezium'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_greater([2,5,3,1], 3) == True\nassert     check_greater([2,5,3,1], 2) == False\nassert     check_greater([2,5,3,1], 4) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater([1,2,3,4], 2) == True, 'incorrect output'\nassert     check_greater([1,2,3,4], 1) == False, 'incorrect output'\nassert     check_greater([-1,-2,-3,-4], -2) == True, 'incorrect output'\nassert     check_greater([-1,-2,-3,-4], -1) == False, 'incorrect output'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_greater([2,4,6,8], 10) == False\nassert     check_greater([1,2,3,4], 5) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_greater([1,2,3], 4)    == False\nassert     check_greater([2,3,4], 5)    == True\nassert     check_greater([], 5)    == False\nassert     check_greater([2,3,4], 6)    == True\nassert     check_greater([1,2,3], 4)    == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_greater(array1, number) is False, 'Error in function check_greater'\nassert check_greater(array2, number) is True, 'Error in function check_greater'\nassert check_greater(array3, number) is False, 'Error in function check_greater'\nassert check_greater(array4, number) is False, 'Error in function check_greater'\nassert check_greater(array5, number) is False, 'Error in function check_greater'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_greater([5, 7, 9], 10) == False\nassert     check_greater([5, 7, 9], 8) == True\nassert     check_greater([4, 6, 8], 4) == True\nassert     check_greater([4, 6, 8], 5) == False\nassert     check_greater([3, 6, 7, 8], 5) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_greater([1,2,3,4], 3) == True\nassert     check_greater([1,2,3,4], -1) == False\nassert     check_greater([1,2,3,4], 4) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater(arr, number) == False, \"check_greater failed\"\nassert     check_greater(arr, number) == True, \"check_greater failed\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_greater_sequence(arr, number):\n    '''\n    Write a function that checks whether the number is greater than the sequence of numbers in the array.\n    '''\n    # 1. Create a stack\n    # 2. Check whether the number is greater than the top of stack\n    # 3. If yes, return True\n    # 4. Otherwise, pop off the stack until you find the number or, if there is no number in the stack, return False\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_one('ab') == False\nassert     text_match_one('abab') == True\nassert     text_match_one('ababab') == False\nassert     text_match_one('abababa') == True\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one(\"aaaabbbb\") == False, \"First\"\nassert     text_match_one(\"aaaababb\") == True, \"Second\"\nassert     text_match_one(\"aaaabbbbbb\") == False, \"Third\"\nassert     text_match_one(\"aaaabab\") == False, \"Fourth\"\nassert     text_match_one(\"aaaababababab\") == True, \"Fifth\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one('abcd') == True\nassert     text_match_one('aac') == False\nassert     text_match_one('aacabab') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one('ab') == True, 'Fail'\nassert     text_match_one('ba') == False, 'Fail'\nassert     text_match_one('a') == False, 'Fail'\nassert     text_match_one('ababab') == True, 'Fail'\nassert     text_match_one('abababab') == True, 'Fail'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one(\"aaabb\") == True\nassert     text_match_one(\"aab\") == False\nassert     text_match_one(\"a\") == False\nassert     text_match_one(\"ab\") == False\nassert     text_match_one(\"ba\") == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one('aab')    ==     True, 'aab'\nassert     text_match_one('b')    ==     False, 'b'\nassert     text_match_one('bab')    ==     False, 'bab'\nassert     text_match_one('bbaa')    ==     False, 'bbaa'\nassert     text_match_one('ababab')    ==     True, 'ababab'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one(\"\") == False, \"You should return False if the input is empty\"\nassert     text_match_one(\"ab\") == False, \"You should return False if the input has only one 'a'\"\nassert     text_match_one(\"abab\") == False, \"You should return False if the input has more than one 'a'\"\nassert     text_match_one(\"ababc\") == True, \"You should return True if the input has more than one 'a'\"\nassert     text_match_one(\"abbb\") == True, \"You should return True if the input has exactly one 'b'\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert text_match_one(\"abb\") == True\nassert text_match_one(\"abbba\") == True\nassert text_match_one(\"a\") == False\nassert text_match_one(\"ab\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_one('ab') == True\nassert     text_match_one('bb') == True\nassert     text_match_one('bc') == False\nassert     text_match_one('abc') == False\nassert     text_match_one('abab') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one(\"abb\") == False\nassert     text_match_one(\"abab\") == True\nassert     text_match_one(\"abbab\") == True\nassert     text_match_one(\"abbbb\") == True\nassert     text_match_one(\"abbbbba\") == True\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(1000) == 9\nassert     last_Digit(100) == 1\nassert     last_Digit(10) == 0\nassert     last_Digit(90) == 1\nassert     last_Digit(900) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert last_Digit(10000) == 1\nassert last_Digit(2147483647) == 6\nassert last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(2) == 2\nassert last_Digit(5) == 5\nassert last_Digit(12) == 2\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(1) == 1\nassert     last_Digit(123) == 3\nassert     last_Digit(1234) == 4\nassert     last_Digit(12345) == 5\nassert     last_Digit(1234567) == 6\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit(1716) == 7\nassert     last_Digit(2363) == 2\nassert     last_Digit(1) == 1\nassert     last_Digit(0) == 0\n\n\ndef reverse_String(string) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit(123) == 3\nassert     last_Digit(1331) == 1\nassert     last_Digit(132) == 2\nassert     last_Digit(21) == 2\nassert     last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(9128) == 2, \"Your last_Digit function returned wrong value\"\nassert last_Digit(123) == 2, \"Your last_Digit function returned wrong value\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit(1213) ==     3\nassert     last_Digit(100) ==     1\nassert     last_Digit(100100) ==     1\nassert     last_Digit(20) ==     2\nassert     last_Digit(200) ==     1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(1) == 1\nassert     last_Digit(22) == 2\nassert     last_Digit(2222) == 2\nassert     last_Digit(2) == 1\nassert     last_Digit(2) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(12) == 2\nassert     last_Digit(1) == 1\nassert     last_Digit(144) == 0\nassert     last_Digit(1000) == 1\nassert     last_Digit(1521) == 3\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([1,-2,3,-4,5]) == [-1,-2,-3,-4,-5], 'Error in checking neg_nos'\nassert     neg_nos([]) == [], 'Error in checking neg_nos'\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     neg_nos([-7, 8, 4, -9, -5, 1]) == [-7, -9, -5, 1]\nassert     neg_nos([-7, 8, 4, -9, -5, 1, 0]) == [-7, -9, -5, 1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     neg_nos([2,-1,0,-2]) == [-1,-2]\nassert neg_nos([1,2,3,4]) == [-1, -2, -3, -4]\nassert neg_nos([-1,2,-3,-4]) == [-1, -2, -3, -4]\nassert neg_nos([-1,2,-3,-4]) == [-1, -2, -3, -4]\nassert neg_nos([]) == []\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert neg_nos([1,2,3,4,5,-6,-7]) == [-7,-6,-5,-4,-3,-2,-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(neg_nos([-4, -2, -1, 0, 1, 2, 3]))"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     neg_nos([1, 2, 3, -1, -2, -3, 4, -1, -2, -3, 5]) == [-1, -2, -3, -4, -5]\n\nassert     neg_nos([1, 2, 3, -1, -2, -3, 4, -1, -2, -3, 5, -1]) == [-1, -2, -3, -4, -5]\nassert     neg_nos([1, 2, 3, -1, -2, -3, 4, -1, -2, -3, 5, -1, -2]) == [-1, -2, -3, -4, -5]"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nneg_nos([-6, 2, -5, 8, 1, -3, -6]) == [-6, -5, -3, -6]\nprint(\"Test passed\")\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nneg_nos([1, 2, 3, -4, -5]) == [-1, -2, -3, 4, 5]\nprint(\"You should be able to pass the test!\")\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     neg_nos([1,-2,3,-4,5]) == [-1,-2,-3,-4,-5],'returned wrong value'\nassert     neg_nos([1,-2,3,-4,5,5]) == [-1,-2,-3,-4,-5],'returned wrong value'\nassert     neg_nos([1,2,3,4,-5,6,7]) == [-1,-2,-3,-4,-5],'returned wrong value'\nprint('All the test cases have been passed')"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_odd(str1):\n    return ''.join(i for i in str1 if i.isalnum())\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert remove_odd('hello') == 'll'\nassert remove_odd('world') == 'wrld'\nassert remove_odd('odd') == 'dd'\nassert remove_odd('1234') == '34'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Pass\" if ('aa' == remove_odd('aa')) else \"Fail\")\nprint(\"Pass\" if ('aa' == remove_odd('abc')) else \"Fail\")\nprint(\"Pass\" if ('abc' == remove_odd('abc')) else \"Fail\")\nprint(\"Pass\" if ('abc' == remove_odd('aa')) else \"Fail\")\n\nprint()\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd(\"omfg\") == \"mjg\"\nassert     remove_odd(\"asdf\") == \"asdf\"\nassert     remove_odd(\"asdfgh\") == \"asdf\"\nassert     remove_odd(\"qwerty\") == \"asdfg\"\nassert     remove_odd(\"\") == \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd(\"helloworld\")     == \"hello\"\nassert     remove_odd(\"helloworld\")     == \"hello\"\nassert     remove_odd(\"\")                 == \"\"\nassert     remove_odd(\"Hello\")             == \"Hello\"\nassert     remove_odd(\"1234567890\")     == \"1234567890\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert remove_odd(\"abcdef\") == \"abcde\"\nassert remove_odd(\"abc\") == \"ab\"\nassert remove_odd(\"aabcc\") == \"abc\"\n\ndef reverse_substring(str1):\n    '''\n    Write a function to reverse a substring in a string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd(\" abcd \") == \"abcd\"\nassert     remove_odd(\"aabcd\") == \"abc\"\nassert     remove_odd(\"abcde\") == \"abc\"\nassert     remove_odd(\"abcde-abc\") == \"abc\"\nassert     remove_odd(\"abcde-abc-abc\") == \"abc\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd('The program will start') =='s hre th wlls'\nassert     remove_odd('This is a test') =='s a t t'\nassert     remove_odd('Hello World') == 'Hello Wll'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd(\"Hello\") == \"e\"\nassert     remove_odd(\"Hella\") == \"e\"\nassert     remove_odd(\"Hello\") == \"Hello\"\nassert     remove_odd(\"Hello World\") == \"Hello\"\nassert     remove_odd(\"Hello World\") == \"Hello\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(10, 20), (40, 50), (30, 40), (50, 60), (10, 30)]) == 3\nassert     count_bidirectional([(10, 20), (30, 40), (30, 50), (50, 60)]) == 2\nassert     count_bidirectional([(10, 20), (30, 40), (10, 30)]) == 1\nassert     count_bidirectional([(10, 20), (10, 30)]) == 2\nassert     count_bidirectional([(10, 20), (40, 50)]) == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nYou have a list of your favourite marvel characters. You need to convert it to a dictionary \nwhere the keys are the characters, and the values are the number of times each character appeared.\n'''\ndef count_characters(test_list):\n    '''\n    Write a function to convert the list to dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([[1,2,3],(2,4,5),[5,6,7],(6,7,8),[3,8,5],[5,8,7]]) == 1\nassert count_bidirectional([[1,2,3],(3,4,5),[5,6,7],(7,8,9),[3,8,5],[5,8,7]]) == 0\nassert count_bidirectional([[1,2,3],[2,4,5],[5,6,7],[7,8,9],[3,8,5],[5,8,7]]) == 3\nassert count_bidirectional([[1,2,3,4,5],(3,4,5,6,7),(5,6,7,8,9),(7,8,9,10),(4,5,6,7,8),(5,6,7,8,9)]\n                             ) == 5\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional([(1,1),(2,4),(3,3),(2,2)]) == 4\nassert     count_bidirectional([(1,1),(2,4),(3,3),(2,2)]) == 4\nassert     count_bidirectional([(1,1),(2,4),(3,3),(2,2)]) == 4\nassert     count_bidirectional([(1,1),(2,4),(3,3),(2,2)]) == 0\nassert     count_bidirectional([(1,1),(2,4),(3,3),(2,2)]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_bidirectional([ (1, 2), (1, 2) ]) == 2\nassert     count_bidirectional([ (1, 2), (1, 2), (1, 2) ]) == 3\nassert     count_bidirectional([ (1, 2), (1, 2, 3, 4) ]) == 0\nassert     count_bidirectional([ (1, 2), (1, 2), (1, 2), (1, 2), (1, 2) ]) == 6\nassert     count_bidirectional([ (1, 2), (1, 2, 3), (1, 2, 3, 4) ]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([(1,2), (2,3), (3,4), (1,4), (2,1), (3,3), (1,2)]) == 3, \"Unexpected result\"\nassert     count_bidirectional([(1,2), (2,3), (3,4), (1,4), (2,1), (3,3), (1,2)]) == 0, \"Unexpected result\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([(2, 5), (5, 2)]) == 1\nassert     count_bidirectional([(2, 5), (3, 4), (5, 2)]) == 2\nassert     count_bidirectional([(2, 5), (5, 2), (3, 4)]) == 3\nassert     count_bidirectional([(2, 5), (2, 2), (2, 3), (2, 5)]) == 1\nassert     count_bidirectional([(2, 5), (2, 2), (2, 3), (2, 5), (5, 2)]) == 2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([]) == 0, \"No pairs in list.\"\nassert     count_bidirectional([(1, 2), (2, 1)]) == 2, \"Pairs: (1, 2), (2, 1) -- 2 pairs.\"\nassert     count_bidirectional([(1, 2, 3), (4, 5, 6)]) == 2, \"Pairs: (1, 2), (4, 5, 6) -- 2 pairs.\"\nassert     count_bidirectional([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 3, \"Pairs: (1, 2), (4, 5, 6), (7, 8, 9) -- 3 pairs.\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional([(1,2),(2,3),(3,4),(4,1)]) == 3\nassert     count_bidirectional([(1,2),(2,3),(3,4),(4,1)]) == 2\nassert     count_bidirectional([(1,2),(2,3),(3,4),(4,1),(1,4),(4,1)]) == 2\nassert     count_bidirectional([(1,2),(2,3),(3,4),(4,1),(1,4),(4,1),(1,2),(2,3)]) == 4\nassert     count_bidirectional([(1,2),(2,3),(3,4),(4,1),(1,4),(4,1),(1,2),(2,3)]) == 2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([ (1,2), (1,3), (2,4), (3,4), (1,5) ]) == 3\nassert     count_bidirectional([ (1,2), (1,3), (2,4), (3,4), (1,5), (1,6) ]) == 2\nassert     count_bidirectional([ (1,2), (1,3), (2,4), (3,4), (1,5), (1,6) ]) == 2\nassert     count_bidirectional([ (1,2), (1,3), (2,4), (3,4), (1,5), (1,6), (1,7) ]) == 1\nassert     count_bidirectional([ (1,2), (1,3), (2,4), (3,4), (1,5), (1,6), (1,7), (1,8) ]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1,2,3,4,5,6,7,8]) == 21, 'Wrong answer for multiple_to_single([1,2,3,4,5,6,7,8])'\nassert     multiple_to_single([1,2,3,4]) == 12, 'Wrong answer for multiple_to_single([1,2,3,4])'\nassert     multiple_to_single([1,2,3,4,5]) == 15, 'Wrong answer for multiple_to_single([1,2,3,4,5])'\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 3232235521, 'Wrong answer for multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])'\nassert multiple_to_single([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == -1020, 'Wrong answer for multiple_to_single([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 6, \"Something wrong\"\nassert     multiple_to_single([]) == 0, \"Something wrong\"\nassert     multiple_to_single([2, 3]) == 6, \"Something wrong\"\nassert     multiple_to_single([1]) == 1, \"Something wrong\""
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert multiple_to_single([]) == 0\nassert multiple_to_single([1,2,3,4,5,6]) == 123\nassert multiple_to_single([0]) == 0\nassert multiple_to_single([0,0,0]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([10, 20, 30, 40]) == 60, '10 + 20 + 30 + 40 = 60'\nassert     multiple_to_single([-10, -20, -30, -40]) == -60, '-10 - 20 - 30 - 40 = -60'\nassert     multiple_to_single([-5, -4, -3, -2]) == -15, '-5 - 4 - 3 - 2 = -15'\n\n\ndef multiple_to_single_helper(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    The function should be recursive and work for any size of the input list.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15, 'Error: incorrect input'\nassert     multiple_to_single([1,2,3,4,5,4,3]) == 17, 'Error: incorrect input'\nassert     multiple_to_single([1,2,3,4,5,6,4,3]) == 22, 'Error: incorrect input'\nassert     multiple_to_single([1,2,3,4,5,4,5,4,3]) == 25, 'Error: incorrect input'\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 123456, 'Error: incorrect input'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert multiple_to_single([1, 2, 3, 4]) == 24\nassert multiple_to_single([]) == 0\nassert multiple_to_single(None) == 0\nassert multiple_to_single(\"\") == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([1, 3, 5]) == 15\nassert     multiple_to_single([1, 1, 1]) == 3\nassert     multiple_to_single([5, 3, 5]) == 20\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 30\nassert     multiple_to_single([0, 0, 0]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 120\nassert     multiple_to_single([1, 2, 3]) == 6\nassert     multiple_to_single([-1, -2, -3]) == -6\nassert     multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9183628800\nassert     multiple_to_single([2, 3, 4, 5, 6]) == 120\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position(\"I'm going to the bar\") == 1\nassert    find_adverb_position(\"I don't think the sky is green\") == 2\nassert    find_adverb_position(\"I've been here before, but it's getting hot here today\") == 3\nassert    find_adverb_position(\"This is a sentence with adverbs\") == 4\nassert    find_adverb_position(\"A sentence with only adverb\") == 5\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position(\"The sky is blue and clear and sky is bright and beautiful.\") == ['and', 'bright']\nassert     find_adverb_position(\"The sky is blue and clear and sky is bright and beautiful.\") == ['bright']\nassert     find_adverb_position(\"The sky is blue and clear and sky is bright and beautiful.\") == ['and', 'bright']\nassert     find_adverb_position(\"The sky is blue and clear and sky is bright and beautiful.\") == ['and', 'bright']\nassert     find_adverb_position(\"The sky is blue and clear and sky is bright and beautiful.\") == ['and', 'bright']\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('This is a sentence. To be ADVERB!') == (2, 4)\nassert     find_adverb_position('This is a sentence. To be ADVERB! This is another sentence') == (5, 8)\nassert     find_adverb_position('This is a sentence. To be ADVERB! This is another sentence. And a third sentence') == (11, 14)\nassert     find_adverb_position('This is a sentence. To be ADVERB! And a third sentence. This is another sentence') == (20, 22)\nassert     find_adverb_position('This is a sentence. To be ADVERB! And a third sentence. This is another sentence. And a fourth sentence') == (29, 31)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_adverb_position('Today is a good day.') == (0, 6)\n    find_adverb_position('Today is a bad day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position('Today is a nice day.') == (0, 6)\n    find_adverb_position("
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position('i must go to my office') == ['must','go']\nassert     find_adverb_position('i must go to my office') == ['must','go']\nassert     find_adverb_position('i must go to my office') == ['must','go']\nassert     find_adverb_position('i must go to my office') == ['must','go']\nassert     find_adverb_position('i must go to my office') == ['must','go']\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position(\"adverb is not very helpful\") ==  [(0, 4)]\nassert     find_adverb_position(\"adverb is helpful\") ==  [(4, 6)]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position('somewhere over the rainbow, sir') == True, 'Failed'\nassert     find_adverb_position('however, you should know your surroundings') == False, 'Failed'\nassert     find_adverb_position('I am not in the mood for this one') == False, 'Failed'\nassert     find_adverb_position('This sentence does not contain any adverb') == False, 'Failed'\nassert     find_adverb_position('I am in a mood to run') == True, 'Failed'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position('I have a dream, and I believe it would be a very rewarding one.') == {'and': 6, 'dream': 8}\nassert     find_adverb_position('I have a dream, and I believe it would be a very rewarding one.') == {'and': 6, 'dream': 8}\nassert     find_adverb_position('I have a dream, and I believe it would be a very rewarding one.') == {'and': 6, 'dream': 8}\n\ndef find_adverb_position_without_solving(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position('Oui, la nourriture n'a que l'on puisse crier sur le contenu.') == (2, 5)\nassert     find_adverb_position('Les ma\u00eetres, c\\'est la meilleure et la plus cher et la plus valide.') == (3, 6)\nassert     find_adverb_position('Les jardins et les ville ont \u00e9t\u00e9 tu\u00e9s.') == (None, None)\nassert     find_adverb_position('Je ne m'\u00e9tais pas compris par la fa\u00e7on de se retrouver.') == (None, None)\nassert     find_adverb_position('Je ne fais pas de nombreuses choses comme ceux de la place.') == (None, None)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position('The way of getting started is to turn up your ability to think clearly and use a few simple steps to get started') ==     [(0, 3), (6, 9), (11, 14), (16, 19)]\nassert     find_adverb_position('It works as advertised, so let\u2019s test it') ==     [(0, 4), (4, 8)]\nassert     find_adverb_position('As soon as you\u2019re ready, run the test right there') ==     [(0, 2), (5, 7), (9, 13)]\nassert     find_adverb_position('Did you see the sense? No, but you did see the source') ==     [(4, 6), (8, 13)]\nassert     find_adverb_position('It is not as easy as it sounds, so try this whole sentence') ==     [(0, 3), (6, 9), (10, 12), (13, 18), (19, 21), (22, 23), (24, 27), (28, 31)]\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(surfacearea_cube(2))\nprint(surfacearea_cube(3))\n\n'''\n4. Write a function that takes in a string of one or more words, and returns the same string, but with all five or more letter words reversed (Just like the name of this Kata). Strings passed in will consist of only letters and spaces. Spaces will be included only when more than one word is present.\n\nExamples: spinWords( \"Hey fellow warriors\" ) => returns \"Hey wollef sroirraw\" spinWords( \"This is a test\") => returns \"This is a test\" spinWords( \"This is another test\" )=> returns \"This is rehtona test\"\n\n'''"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cube(3) == 27\nassert surfacearea_cube(4) == 64\nassert surfacearea_cube(5) == 125\n\ndef cube_volume(l):\n    '''\n    Write a function to calculate volume of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cube(1) == 2\nassert     surfacearea_cube(2) == 6\nassert     surfacearea_cube(3) == 36\nassert     surfacearea_cube(4) == 64\nassert     surfacearea_cube(5) == 100\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(1) ==  2\nassert     surfacearea_cube(2) ==  10\nassert     surfacearea_cube(3) ==  30\nassert     surfacearea_cube(4) ==  100\n\n\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(2) == 48\nassert     surfacearea_cube(5) == 102\nassert     surfacearea_cube(9) == 216\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(3) == 6\n\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cube(4) == 60\n\nimport math\n\ndef volume_sphere(radius):\n    '''\n    Write a function to find the volume of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     positive_count([-1,1,-1,1,0,-1]) == 3, \"Wrong positive count!\"\nassert positive_count([1,-1,-1,0,-1]) == 4, \"Wrong positive count!\"\nassert positive_count([]) == 0, \"Wrong positive count!\"\nassert positive_count([-1,1,-1,-1,1,-1]) == 3, \"Wrong positive count!\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     positive_count([-1,2,-3,-4,5,6,7,8]) == 1/8, \"Wrong output\"\nassert     positive_count([]) == 0, \"Wrong output\"\nassert     positive_count([-10,1,-2,-3,-4,-5,-6,-7,-8,-9]) == 1/9, \"Wrong output\"\n\ndef longest_subarray_of_ones(nums):\n    '''\n    Write a function to find the length of the longest contiguous subarray of 1s in an array of 0s and 1s.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     positive_count([]) == 0, 'Return 0 for empty array'\nassert     positive_count([5,2,3,-4,1]) == 1, 'Return 1 for all positive numbers'\nassert     positive_count([1,-2,3,4]) == 0, 'Return 0 for all negative numbers'\nassert     positive_count([2,3,4,5,6]) == 2, 'Return 2 for all positive numbers'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert positive_count([2, 1, 3, 4, 5, 7, 6, 8]) == 0.5\nassert positive_count([1, 2, 3, 4, -1, -2, -3, -4, -5]) == 0\nassert positive_count([0, -1, -2, -3, -4, -5]) == 1\nassert positive_count([2, 1, 3, 0, -1, -2, -3, -4, -5]) == 0.5\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef length_count(nums):\n    '''\n    Write a function to count the length of the array.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # positive_count([1,2,3,4,5,6]) == 5\n    positive_count([1,2,3,4,-5,6]) == 4\n    positive_count([1,2,3,4,5,5,6]) == 4\n    positive_count([1,2,3,4,5,6,-6,-7,-8]) == 4\n    positive_count([-1,-2,3,4,5,-6]) == 3\n    positive_count([]) == 0\n    positive_count([1,-2,-3,4,-5,-6]) == 6\n    positive_count([1,-2,3,-4,5,-6]) == 1\n    positive_count([1,-2,-3,4,-5,6,-7,-8]) == 1\n    positive_count([-1,2,3,-4,5,6,7,-8]) == 4\n\ndef positive_count_2(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     positive_count([1,2,3,4,5]) == 1.0, \"Wrong answer\"\nassert positive_count([-3,-2,-5,-4,-1]) == 1.0, \"Wrong answer\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \npositive_count([-4, -2, -1, 0, 1, 2, 3]) == 3\nassert positive_count([-4, -2, -1, 0, 1, 2, 3, 5]) == 3\nassert positive_count([-4, -2, -1, 0, 1, 2, 3, 4]) == 2\nassert positive_count([-4, -2, -1, 0, 1, 2, 3, 4, -3]) == 2\nassert positive_count([-4, -2, -1, 0, 1, 2, 3, 4, -3, -3]) == 1\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef positive_count2(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    pass\n\nassert positive_count2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, 0, -2]) == 0.1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_neg([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10\nassert     largest_neg([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -1\nassert     largest_neg([-100, -99, -98, -97, -96, -95, -94, -93, -92, -91]) == -97\nassert     largest_neg([-1000000, -999999, -999998, -999897, -999896, -998795, -998765, -997654, -997553, -997445]) == -998765\nassert     largest_neg([-10000000, -999999999, -999999998, -999998989, -999998982, -999998887, -999997777, -999997666, -999996444, -999995833]) == -999998887\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([-2,1,2]) == 1, \"Should be 1\"\nassert     largest_neg([0,1,2]) == 0, \"Should be 0\"\nassert     largest_neg([-5,-6,-7]) == -7, \"Should be -7\"\nassert     largest_neg([0,-1,-2,-3]) == -3, \"Should be -3\"\nassert     largest_neg([-2,-3,-4,-5]) == -5, \"Should be -5\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-9, -9, -9, -9, -9]) == -9, \"Wrong output\"\nassert     largest_neg([1, 2, 3, 4, 5]) == 5, \"Wrong output\"\nassert     largest_neg([-9, -9, -9]) == -9, \"Wrong output\"\nassert     largest_neg([-9, -9, -9, -9, -9, -9]) == -9, \"Wrong output\"\nassert     largest_neg([-9, -9, -9, -9, -9, -9, -9]) == -9, \"Wrong output\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_neg([-2,-4,-2,-5,-6]) == -5\nassert    largest_neg([-2, 4, 2, -5, 6]) == -2\nassert    largest_neg([-2, -4, -2, -5, -6]) == -2\nassert    largest_neg([]) == None\nassert    largest_neg([5]) == 5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_neg([-8,-7,-6,-5,-4,-3,-2,-1,0])==-1\nassert     largest_neg([-1,0,1])==1\nassert     largest_neg([-1,2,3,-4])==3\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert largest_neg([-1,-2,-3,-4,-5,-6,5]) == 5\nassert largest_neg([0,0,0,0]) == 0\nassert largest_neg([0,0,-1]) == 0\nassert largest_neg([0,0,0,0,0]) == 0\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert largest_neg([-2, -3, -4, -5]) == -5\nassert largest_neg([-6, -3, -4, -5]) == -6\nassert largest_neg([-7, -3, -4, -5]) == -3\nassert largest_neg([-8, -3, -4, -5]) == -4\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_neg([-2,-1,4,-3])==4\nassert     largest_neg([-1,-1,4])==4\nassert     largest_neg([-1,4,-3,2,4,-5,-6])==4"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    largest_neg([-4, -8, -5]) == -5\nassert \n    largest_neg([-5, -1, -5]) == -1\nassert \n    largest_neg([-5, -4, -3, -2, -1]) == -1\nassert \n    largest_neg([-1, -2, -3, -4, -5]) == -5\nassert \n    largest_neg([-3, -2, -4, -5]) == -4\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1, 2), (1, 2, 3, 4, 5), (1, 2, 3), (1, 2, 3, 4, 5, 6)], 3) == [(1, 2), (1, 2, 3), (1, 2, 3, 4)]\nassert trim_tuple([(1, 2, 3, 4), (1, 2, 3, 4, 5), (1, 2, 3, 4), (1, 2, 3, 4, 5, 6)], 3) == [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert trim_tuple([(1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 3) == [(1, 2, 3), (1, 2, 3, 4, 5)]\nassert trim_tuple([(1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) == [(1, 2, 3), (1, 2, 3, 4, 5)]\nassert trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3), (1, 2, 3, 4, 5)], 3) == [(1, 2, 3), (1, 2, 3, 4)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([[1,2,3,4], [2,2,2], [1,2,2,3]], 0) == [[1,2,3,4], [2,2,2], [1,2,2,3]]\nassert     trim_tuple([[1,2,3,4], [2,2,2], [1,2,2,3]], 1) == [[1,2,3,4], [2,2,2], [1,2,2,3]]\nassert     trim_tuple([[1,2,3,4], [2,2,2], [1,2,2,3]], 2) == [[1,2,3,4], [2,2,2], [1,2,2,3]]\nassert     trim_tuple([[1,2,3,4], [2,2,2], [1,2,2,3]], 3) == [[1,2,3,4]]\nassert     trim_tuple([[1,2,3,4], [2,2,2], [1,2,2,3]], 4) == []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3)], 2) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3)], 1) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3)], 0) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(1, 2, 3), (4, 5, 6)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [(1, 2, 3)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([(0,1), (2,3), (4,5), (6,7)], 2) == [(0,1), (4,5), (6,7)]\nassert trim_tuple([(0,1), (2,3), (4,5), (6,7), (8,9)], 2) == [(0,1), (4,5), (6,7), (8,9)]\nassert trim_tuple([(0,1), (2,3), (4,5), (6,7), (8,9)], 0) == [(0,1), (2,3), (4,5), (6,7), (8,9)]\nassert trim_tuple([(0,1), (2,3), (4,5), (6,7), (8,9)], 1) == [(0,1), (2,3), (4,5), (6,7), (8,9)]\nassert trim_tuple([(0,1), (2,3), (4,5), (6,7), (8,9)], 2) == [(0,1), (2,3), (4,5), (6,7), (8,9)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple([(1, 2, 3, 4), (2, 2), (3, 2, 2)], 2) == [[1, 2, 3, 4], (2, 2)]\nassert trim_tuple([(1, 2, 3, 4), (2, 2), (3, 2, 2)], 1) == [(1, 2, 3, 4)]\nassert trim_tuple([(1, 2, 3, 4), (2, 2), (3, 2, 2)], 3) == []\n\n\n'''\nA movie theater charges different ticket prices depending on a person\u2019s age.\n\nIf a person is under the age of 3, the ticket is free;\nif they are between 3 and 12, the ticket is $10;\nand if they are over age 12, the ticket is $15.\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple([[1,2,3], (4,5,6), (7,8,9)], 3) ==     [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([[1,2,3], (4,5,6), (7,8,9)], 1) ==     [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([[1,2,3], (4,5,6), (7,8,9)], 4) ==     [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([[1,2,3], (4,5,6), (7,8,9)], 2) ==     [(1,2,3), (4,5,6), (7,8,9)]\nassert     trim_tuple([[1,2,3], (4,5,6), (7,8,9)], 0) ==     [(1,2,3), (4,5,6), (7,8,9)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple([('red',), ('blue',), ('green',)], 2) == \\\n        [('blue',), ('green',)]\nassert     trim_tuple([('red',), ('blue',), ('green',)], 1) == \\\n        [('red',), ('blue',), ('green',)]\nassert     trim_tuple([('red',), ('blue',), ('green',)], 0) == \\\n        [('red',), ('blue',), ('green',)]\nassert     trim_tuple([('red',), ('blue',), ('green',)], -3) == \\\n        [('red',), ('blue',), ('green',)]\nassert     trim_tuple([('red',), ('blue',), ('green',)], -2) == \\\n        [('red',), ('blue',), ('green',)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([[1, 2, 3, 4, 5], 2], 3) == [[1, 2], 3, 4, 5]\nassert     trim_tuple([[1, 2, 3, 4, 5], 2], 1) == [[1], 2, 3, 4, 5]\n\ndef remove_duplicates(list_of_numbers):\n    '''\n    Write a function to remove duplicates from a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef oddTuples(n, k):\n    '''\n    Write a function to return the list of tuples, each tuple is odd length\n    and contains only odd numbers. The first tuple should contain only k\n    ones, the next should contain k-1 ones and so on.\n    '''\n    pass"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([(0,0),(1,1),(1,2),(1,3),(2,4)], 1) == [(0,0),(1,1),(1,2),(1,3),(2,4)]\nassert     trim_tuple([(0,0),(1,1),(1,2),(1,3),(2,4)], 2) == [(0,0),(1,1),(1,2),(1,3),(2,4)]\nassert     trim_tuple([(0,0),(1,1),(1,2),(1,3),(2,4)], 3) == [(0,0),(1,1),(1,2),(1,3),(2,4)]\nassert     trim_tuple([(0,0),(1,1),(1,2),(1,3),(2,4)], 4) == [(0,0),(1,1),(1,2),(1,3),(2,4)]\nassert     trim_tuple([(0,0),(1,1),(1,2),(1,3),(2,4)], 5) == [(0,0),(1,1),(1,2),(1,3),(2,4)]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_multiplication((1,2,3,4), (5,6,7,8)) == (5, 10, 21, 32)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication((1,2,3,4),(1,2,3,4)) == (1,4,9,16)\nassert     index_multiplication((1,2,3,4,5),(1,2,3,4,5)) == (1,4,9,16,25)\nassert     index_multiplication((1,2,3,4,5,6),(1,2,3,4,5,6)) == (1,4,9,16,25,36)\nassert     index_multiplication((1,2,3,4,5,6,7),(1,2,3,4,5,6,7)) == (1,4,9,16,25,36,43)\nassert     index_multiplication((1,2,3,4,5,6,7,8),(1,2,3,4,5,6,7,8)) == (1,4,9,16,25,36,43,64)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication((1,2,3,4),(10,20,30,40)) == (10,20,30,40)\nassert     index_multiplication((1,2,3,4),(10,20,30,40)) == (10,20,30,40)\nassert     index_multiplication((1,2,3),(10,20,30,40)) == (10,20,30,40)\nassert     index_multiplication((1,2,3),(10,20,30,40)) == (10,20,30,40)\nassert     index_multiplication((1,2),(10,20,30,40)) == (10,20,30,40)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ixmul((1,2,3,4,5),(1,2,3,4,5)) == (1,2,3,4,5)\nassert ixmul((1,2,3),(1,2,3,4)) == (1,2,3,4)\nassert ixmul((1,2),(1,2,3,4,5)) == (1,2,3,4,5)\nassert ixmul((1,2,3,4,5),(1,2,3,4)) == (1,2,3,4)\nassert ixmul((1,2,3,4,5),(1,2,3,4)) == (1,2,3,4)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication((1,2),(3,4)) == (3,8), 'Mismatch'\nassert     index_multiplication((0,0),(2,2)) == (2,4), 'Mismatch'\nassert     index_multiplication((0,0),(0,0)) == (0,0), 'Mismatch'\nassert     index_multiplication((2,3),(4,5)) == (6,15), 'Mismatch'\nassert     index_multiplication((5,6),(7,8)) == (15,48), 'Mismatch'\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ntest_case_1 = (1, 2, 3, 4)\ntest_case_2 = (1, 2)\nassert index_multiplication(test_case_1, test_case_2) == (1, 2, 6, 12)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_multiplication((1,2,3), (2,3,4)) == (2,4,6)\nassert     index_multiplication((1,2,3), (2,3,4)) == (2,4,6)\nassert     index_multiplication((1,2), (2,3,4)) == (2,2,4)\nassert     index_multiplication((1,), (2,3,4)) == (2,2,4)\nassert     index_multiplication((1,2), (2,3)) == (2,2,3)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication((2,3,4,5), (2,3,4,5)) == (2,4,6,10)\nassert     index_multiplication((2,3,4), (2,3,4,5,6,7)) == (2,4,6)\nassert     index_multiplication((1,2,3), (4,5,6,7)) == (4,6,12)\nassert     index_multiplication((2,3,4), (5,6,7)) == (10,12,14)\nassert     index_multiplication((5,6), (2,3,4,5)) == (20,30)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication((0,1,2,3,4,5,6,7,8,9), (0,1,2,3,4,5,6,7,8,9)) == (0,0,0,0,0,0,0,0,0,0)\nassert index_multiplication((0,0,0,0,0,0,0,0,0,0), (0,1,2,3,4,5,6,7,8,9)) == (0,0,0,0,0,0,0,0,0,0)\nassert index_multiplication((0,0,0,0,0,0,0,0,0,0), (2,3,4,5,6,7,8,9,10,11)) == (0,0,0,0,0,0,0,0,0,0)\nassert index_multiplication((1,2,3,4,5,6,7,8,9), (1,2,3,4,5,6,7,8,9)) == (1,2,3,4,5,6,7,8,9)\nassert index_multiplication((1,1,1,1,1,1,1,1,1), (1,2,3,4,5,6,7,8,9)) == (1,2,3,4,5,6,7,8,9)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Occurrence((1,2,3,4),[1,2,2,3,4,4,4]) == 4\nassert     count_Occurrence((1,2,3,4,3),[1,2,2,3,4,4,4]) == 5\nassert     count_Occurrence((1,1,1,1),[1,1,1,1]) == 1\nassert     count_Occurrence((1,1,1,1),[1,1,1,1,1]) == 0\nassert     count_Occurrence((1,1,1,1),[]) == 0\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_Occurrence(tup, lst): \n    '''\n    Write a python function to sum the occurence of all elements of list in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_Occurrence((1, 2, 3), [1,2,3]) == (1,1,1)\nassert \ncount_Occurrence((1, 2, 3), [1,2,3,4]) == (1,2,3)\nassert \ncount_Occurrence((1, 2, 3), [1,2,3,4,2,1]) == (1,1,2)\nassert \ncount_Occurrence((1, 2, 3), []) == ()\nassert \ncount_Occurrence((1,2,3), [1,2,3,4,2,1,2]) == (1,2,2,1,1,1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Occurrence([('a', 4), ('a', 3), ('b', 2)], ['a', 'b']) == Counter({'a': 3, 'b': 2})\nassert     count_Occurrence([('a', 4), ('a', 3), ('b', 2)], ['a', 'a', 'b']) == Counter({'a': 2, 'b': 2})\nassert     count_Occurrence([('a', 4), ('a', 3), ('b', 2)], ['a', 'a', 'b', 'b']) == Counter({'a': 2, 'b': 2})\nprint(\"Coding complete\")\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Occurrence([1,2,2,3], [1,2,2,3]) == 2\nassert     count_Occurrence([1,2,3,3,2,3,4], [1,2,2,3,3,2,3,4]) == 4\nassert     count_Occurrence([1,2,2,3], [1,2,2,3]) == 3\n\n'''\nWrite a python program to count the occurence of all elements in a tuple.\n'''\ndef count_Occurrence_in_tuple(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Occurrence(tup = (1,2,3,2,1,2), lst = [1,2,3,2,1,2]) == (3,2,1,1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Occurrence(('a', 'a', 'b', 'c', 'a'), \n                            ['a', 'a', 'b', 'c', 'a']) == (3,4)\nassert     count_Occurrence(('a', 'a', 'b', 'c', 'a'), \n                            ['a', 'a', 'b', 'c', 'a', 'b']) == (3,4)\nassert     count_Occurrence(('a', 'a', 'b', 'c', 'a'), \n                            ['a', 'a', 'b', 'c', 'a', 'b', 'c']) == (3,4)\nassert count_Occurrence(('a', 'a', 'b', 'c', 'a'), ['a', 'a', 'b', 'c', 'a', 'b', 'c']) == (3,4)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Occurrence(('a', 'b', 'c', 'd'),['a','c','b','c','a','d','a','a','b','c','b','c']) == \n        Counter(['a', 'b', 'c', 'd'])\nassert count_Occurrence(('a', 'b', 'c', 'd'),['a','c','b','c','a','d','a','a','b','c','b','c']) == \n        Counter(['a', 'b', 'c', 'd'])\n\n\ndef count_Occurrence_with_inbuilt_function(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple using inbuilt function.\n    '''\n    pass\n\nassert count_Occurrence_with_inbuilt_function(('a', 'b', 'c', 'd'),['a','c','b','c','a','d','a','a','b','c','b','c']) == \n        Counter(['a', 'b', 'c', 'd'])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Occurrence((1,2,3,2,2,1),[1,2,3,4]) == Counter((1,2,3,2,2,1))\nassert     count_Occurrence((1,2,3,2,2,1),[1,1,2,2,2]) == Counter((1,2,2,2,2,1))\nassert     count_Occurrence((1,2,3,2,2,1),[1,2,1,2,2]) == Counter((1,2,2,2,2,1))\nassert     count_Occurrence((1,2,3,2,2,1),[1,2,1,2,2,1,2,1,2]) == Counter((1,2,2,2,2,1))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\n\n\ndef bzip2_compress(data):\n    '''\n    Write a function to compress given data with bzip2 algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_nums([0, 1, 2, 3, 4]) == [0, 1, 8, 27, 64]\nprint(\"correct\")\nassert     cube_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 8, 27, 64, 125]\nprint(\"correct\")\nassert     cube_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\nprint(\"correct\")\n\ndef max_in_list(l):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_nums([0, 1, 2]) == [0, 1, 8]\nassert     cube_nums([-3, -2, -1, 0, 1, 2, 3]) == [-27, -8, -4, 0, 8, 27, 64]\nassert     cube_nums([-10, -100, -101, -102]) == [-110, -1000, -1001, -1010]\nassert     cube_nums([-1, -0.5, -0.25, -0.125, -0.0625, -0.03125, -0.015625, -0.0078125, -0.00390625, -0.00078125, -0.00015625, -0.0000625, -0.0000078125, -0.000015625, -0.0000015625, -0.000003125, -0.000008125, -0.000001125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.00000078125, -0.0000007"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_nums([-2, -2, 0, 1, 5, 8, 13]) == [0, 0, 8, 64, 121, 216, 343]\nassert     cube_nums([-2, -1, 0, 1, 5, 8, 13]) == [0, 0, 8, 64, 121, 216, 343]\nassert     cube_nums([-2, 0, 1, 5, 8, 13]) == [0, 64, 121, 216, 343, 512]\nassert     cube_nums([-2, 1, 5, 8, 13]) == [0, 64, 121, 216, 343, 512]\nassert     cube_nums([-2, 5, 8, 13]) == [0, 64, 121, 216, 343]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert     cube_nums([9, 8, 7, 6, 5]) == [81, 64, 125, 216, 343]\nprint(\"Correct!\")\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cube_nums([1, 2, 3]) == [1, 8, 27], \"Wrong\"\nassert     cube_nums([1, -3, 7]) == [-1, 3, 49], \"Wrong\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncube_nums([1, 2, 3]) == [1, 8, 27]\nassert \ncube_nums([1, -1, 3]) == [-1, 1, 27]\nassert \ncube_nums([]) == []\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_nums([0, 1, 2, 3]) == [0, 1, 8, 27]\nassert     cube_nums([-2, -1, 0, 1]) == [-4, 0, 4, 16]\nassert     cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\ndef find_greater_numbers(nums):\n    '''\n    Write a function to find the index of greater element of the list. If no greater element is found return -1.\n    '''\n    pass"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert \ncube_nums([0, -1, -2, -3, -4]) == [-1, 0, -27, -64, -125]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cal_sum(0)     == 0\nassert     cal_sum(1)     == 1\nassert     cal_sum(2)     == 3\nassert     cal_sum(3)     == 6\nassert     cal_sum(4)     == 10\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cal_sum(11) == 11, 'Nested looping for 11'\nassert     cal_sum(11) == 22, 'Nested looping for 11'\nassert     cal_sum(11) == 33, 'Nested looping for 11'\nassert     cal_sum(11) == 44, 'Nested looping for 11'\nassert     cal_sum(11) == 55, 'Nested looping for 11'\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cal_sum(10) == 55\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_max(x, y, z): \n    '''\n    Write a function that finds the maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef cal_prod(n):\n    '''\n    Write a function to calculate the product of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_max(a, b): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string('Hello', 'Hello') == 'H'\nassert     extract_string('Hello', 'Hello', 1) == 'e'\nassert     extract_string('Hello', 'Hello', 2) == 'o'\nassert     extract_string('Hello', 'Hello', 3) == 'l'\nassert     extract_string('Hello', 'Hello', 4) == 'l'\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef string_replacer(str, old_str, new_str):\n    '''\n    Write a function to replace the old_str in a given string with new_str.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string([\"ABCD\", \"ABC\", \"ABCDE\", \"ABCDEFG\"], 1) == \"ABCD\"\nassert     extract_string([\"ABCD\", \"ABC\", \"ABCDE\", \"ABCDEFG\"], 4) == \"ABCDEF\"\nassert     extract_string([\"ABCD\", \"ABC\", \"ABCDE\", \"ABCDEFG\"], 5) == \"ABCDEFG\"\nassert     extract_string([\"ABCD\", \"ABC\", \"ABCDE\", \"ABCDEFG\"], 6) == \"ABCD\"\nassert     extract_string([\"ABCD\", \"ABC\", \"ABCDE\", \"ABCDEFG\"], 7) == \"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string(['h','e','l','l','o'], 2) == 'hello'\nassert     extract_string(['h','e','l','l','o'], 1) == 'hello'\nassert     extract_string(['h','e','l','l','o'], 0) == 'hello'\nassert     extract_string(['h','e','l','l','o'], -1) == 'hello'\nassert     extract_string(['h','e','l','l','o'], -2) == 'hel'\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_string([\"helloooo\", \"helloo\", \"hellooo\", \"hello\", \"hellooooo\"], 4) == [\"hellooooo\", \"helloo\", \"hellooo\", \"hello\", \"hellooooo\"], \"Should return ['hellooooo', 'helloo', 'hellooo', 'hello', 'hellooooo']\"\n\ndef extract_word(str, l):\n    '''\n    Write a function to extract words from a given string.\n    '''\n    pass\n\nassert     extract_word(\"hello world\", 2) == \"hello world\", \"Should return 'hello world'\"\n\ndef count_words(str, l):\n    '''\n    Write a function to count words in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string([\"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\"], 5) == \\\n    [\"the\", \"the\", \"the\", \"the\", \"the\"]\nassert     extract_string([\"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\"], 10) == \\\n    [\"the\", \"the\", \"the\", \"the\", \"the\", \"the\"]\nassert     extract_string([\"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\"], 20) == \\\n    [\"the\", \"the\", \"the\", \"the\", \"the\", \"the\"]\nassert     extract_string([\"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\", \"the quick brown fox jumps over the lazy dog\"], 25) == \\\n    [\"the\", \"the\", \"the\", \"the\", \"the\", \"the\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_string(['','', '','','', '', '', '', '', '', '', '', '', '', '', '', '', ''], 6) == ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']\nassert     extract_string(['','','','','','', '', '', '', '', '', '', '', '', '', '', '', '', ''], 5) == ['','','','','','']\nassert     extract_string(['','','','','','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], 3) == ['','','','','']\nassert     extract_string(['','','','','','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], 1) == ['','','','','']\nassert     extract_string(['','','','','','','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''], 0) == ['','','','','','','','','','']\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces('   ') == ''\nassert     remove_whitespaces('a b') == 'a b'\nassert     remove_whitespaces('b c') == 'b c'\n\ndef remove_duplicates(text1):\n    '''\n    Write a function to remove all duplicate characters from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\"this is a test\") == \"this is a test\"\nassert     remove_whitespaces(\"this is a test   \") == \"this is a test\"\nassert     remove_whitespaces(\"this is a test\\n\") == \"this is a test\"\nassert     remove_whitespaces(\"this is a test\\t\") == \"this is a test\"\nassert     remove_whitespaces(\"this is a test\\v\") == \"this is a test\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert remove_whitespaces(\" \") == \"\"\nassert remove_whitespaces(\" Hello, World!\") == \"Hello, World!\"\nassert remove_whitespaces(\" Hello, World!? \") == \"Hello, World!\"\nassert remove_whitespaces(\"Hello, World!? \") == \"Hello, World!?\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_whitespaces(\"  hi \") == \"hi\"\nassert     remove_whitespaces(\" hi \") == \"hi\"\nassert     remove_whitespaces(\" hi \") == \"hi\"\nassert     remove_whitespaces(\"  hi\") == \"hi\"\nassert     remove_whitespaces(\"\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_whitespaces(\"\") == \"\"\nassert remove_whitespaces(\" \") == \"\"\nassert remove_whitespaces(\"This is a test\") == \"This is a test\"\nassert remove_whitespaces(\"   \") == \"\"\nassert remove_whitespaces(\"Hello World\") == \"Hello World\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(' ')    ==     '', 'incorrect'\nassert     remove_whitespaces('   ')    ==     '', 'incorrect'\nassert     remove_whitespaces('   \\t\\n\\r\\f\\v') ==     '', 'incorrect'\nassert     remove_whitespaces(' '*4)    ==     '', 'incorrect'\nassert     remove_whitespaces(' '*5)    ==     '', 'incorrect'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces(\"       \") == \"\"\nassert     remove_whitespaces(\"a\") == \"a\"\nassert     remove_whitespaces(\"  \") == \"\"\nassert     remove_whitespaces(\"b\") == \"b\"\nassert     remove_whitespaces(\"a \") == \"a\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces(\"Washinton,Trisha\") == \"Washinton,Trisha\"\nassert     remove_whitespaces(\"Washinton,Trisha\\n\") == \"Washinton,Trisha\"\nassert     remove_whitespaces(\"Washinton,Trisha\\n\\t\\t\") == \"Washinton,Trisha\"\nassert     remove_whitespaces(\"Washinton,Trisha\\n\\t\\t\\t\") == \"Washinton,Trisha\"\nassert     remove_whitespaces(\"Washinton,Trisha\\n\\t\\t\\t\\t\\t\") == \"Washinton,Trisha\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"abcd    \") == \"abcd\"\nassert     remove_whitespaces(\"abcd \\t\") == \"abcd\"\nassert     remove_whitespaces(\"abcd \\n\") == \"abcd\"\nassert     remove_whitespaces(\"abcd \\r\") == \"abcd\"\nassert     remove_whitespaces(\"abcd \\t\\t\") == \"abcd\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1.strip()\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(1,2) == 0, \"Error: 1\"\nassert     loss_amount(1.2,2) == 0, \"Error: 1.2\"\nassert     loss_amount(2,2) == 0, \"Error: 2\"\nassert     loss_amount(2,2.1) == -0.1, \"Error: 2.1\"\nassert     loss_amount(2.5,2.1) == -0.5, \"Error: 2.5\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     loss_amount(100,100) == 0\nassert     loss_amount(50,150) == -50\nassert     loss_amount(50,0) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(3000,1) == 0\nassert     loss_amount(2000,0) == 2000\nassert     loss_amount(2000,1) == 2000\nassert     loss_amount(2000,2) == 1000\nassert     loss_amount(2000,3) == 1000\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nStore the following dictionary in a variable named dictionary:\ndictionary = {'shampoo': '20','soap': '30', 'face wash': '5'}\nWrite a function that calculates the total amount of all the items in the dictionary.\n'''\n\ndictionary = {'shampoo': '20','soap': '30', 'face wash': '5'}\n\ndef total_amount(dictionary):\n    '''\n    Write a function that calculates the total amount of all the items in the dictionary.\n    '''\n    pass"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(1000,1000) == 0\nassert     loss_amount(1000,2000) == 200\nassert     loss_amount(1000,1000) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_date_list(start_date,end_date): \n    '''\n    Write a function that gives the list of dates between the given start_date and end_date.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(4.5,4) == 0, \"1. loss_amount should return 0 for a sale of 4.5\"\nassert loss_amount(4.5,5) == 1.5, \"2. loss_amount should return 1.5 for a sale of 4.5\"\nassert loss_amount(4.5,6) == 3.0, \"3. loss_amount should return 3.0 for a sale of 4.5\"\nassert loss_amount(4.5,7) == 5.0, \"4. loss_amount should return 5.0 for a sale of 4.5\"\nassert loss_amount(4.5,8) == 6.5, \"5. loss_amount should return 6.5 for a sale of 4.5\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(100.3, 11) == -1\nassert     loss_amount(100.3, 12) == -2\nassert     loss_amount(100.3, 13) == -1\n\ndef product_price(product, price): \n    '''\n    Write a function that gives product price if the product is present else return 0.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(10000,1) == 0\nassert     loss_amount(12000,1000) == 1000\nassert     loss_amount(12000,2000) == 2000\nassert     loss_amount(12000,1020) == 1020\nassert     loss_amount(12000,1200) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(actual_cost=1000, sale_amount=1500) == 0\nassert     loss_amount(actual_cost=1000, sale_amount=1000) == 0\nassert     loss_amount(actual_cost=1000, sale_amount=800) == 100\nassert     loss_amount(actual_cost=1000, sale_amount=25) == 25\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef maxSubArray(arr):\n    '''\n    Write a python function to find the maximum subarray sum.\n    '''\n    pass"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sumofFactors(12) == 8, \"expected 8, actual %d\" % (sumofFactors(12))\nassert sumofFactors(8) == 6, \"expected 6, actual %d\" % (sumofFactors(8))\nassert sumofFactors(0) == 0, \"expected 0, actual %d\" % (sumofFactors(0))\nassert sumofFactors(15) == 10, \"expected 10, actual %d\" % (sumofFactors(15))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef numberOfDivisors(n):\n    '''\n    Write a python function to find the number of divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (sumofFactors(12) == 2)\nassert     (sumofFactors(12) == 2)\nassert     (sumofFactors(20) == 4)\nassert     (sumofFactors(15) == 1)\nassert     (sumofFactors(0) == 0)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"correct\")\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sumofFactors(4) == 2\nassert     sumofFactors(8) == 4\nassert     sumofFactors(12) == 6\nassert     sumofFactors(20) == 10\nassert     sumofFactors(4) == 2\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sumofFactors(13) == 1 + 2 + 4 + 6 + 8 + 9 + 12\nassert     sumofFactors(12) == 1 + 2 + 3 + 4 + 6 + 8 + 9 + 12\nassert     sumofFactors(1000) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100\nassert     sumofFactors(9) == 1 + 2 + 3 + 4\nassert     sumofFactors(2) == 2\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sumofFactors(12) == 0, \"sumofFactors(12): Error\"\nassert     sumofFactors(13) == 1, \"sumofFactors(13): Error\"\nassert     sumofFactors(17) == 0, \"sumofFactors(17): Error\"\nassert     sumofFactors(5) == 0, \"sumofFactors(5): Error\"\nassert     sumofFactors(16) == 1, \"sumofFactors(16): Error\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sumofFactors(0) == 0, \"sumofFactors(0) should be 0\"\nassert     sumofFactors(1) == 1, \"sumofFactors(1) should be 1\"\nassert     sumofFactors(2) == 2, \"sumofFactors(2) should be 2\"\nassert     sumofFactors(3) == 3, \"sumofFactors(3) should be 3\"\nassert     sumofFactors(4) == 4, \"sumofFactors(4) should be 4\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz('THe X is Z') == True\nassert     text_match_wordz('The X is Z') == True\nassert     text_match_wordz('Two words.') == False\nassert     text_match_wordz('X words') == False\nassert     text_match_wordz('x words') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz( \"I love zebra\" )    == \"I love zebra\"\nassert     text_match_wordz( \"I love zebra zebra\" )    == \"I love zebra zebra\"\nassert     text_match_wordz( \"I love zebra zebra zebra\" )    == \"I love zebra zebra zebra\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz('abz') == True \nassert     text_match_wordz('zzz') == True \nassert     text_match_wordz('abzx') == False \nassert     text_match_wordz('zzx') == False \nassert     text_match_wordz('zzzzzzzz') == False \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntext_match_wordz('hello')\n\nassert \ntext_match_wordz('zzz')\n\nassert \ntext_match_wordz('zzz hello')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz(\"Do not match the word with z\")\nassert     text_match_wordz(\"Look here no match, better luck next time\")\nassert     text_match_wordz(\"Do not match the word with z\") == False\nassert     text_match_wordz(\"Do not match the word with z\") == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz('abdz') == True, 'Fail: test_1.'\nassert     text_match_wordz('zdfjz') == True, 'Fail: test_2.'\nassert     text_match_wordz('abcdz') == False, 'Fail: test_3.'\nassert     text_match_wordz('abcdz1') == False, 'Fail: test_4.'\nassert     text_match_wordz('xyz') == False, 'Fail: test_5.'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz('abcdz') == True, 'passed'\nassert     text_match_wordz('abcz') == True, 'passed'\nassert     text_match_wordz('abcd') == False, 'passed'\nassert     text_match_wordz('abcdzd') == True, 'passed'\nassert     text_match_wordz('abcdz') == True, 'passed'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    \"\"\"\n    if re.search(r'[zZ]', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz(\"if you can read, you will understand\") == True, \"incorrect\"\nassert     text_match_wordz(\"Hello World\") == False, \"incorrect\"\nassert     text_match_wordz(\"I have a pen\") == True, \"incorrect\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(33) == False\nassert     check_monthnumb_number(-2) == False\n\ndef check_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(3) == True\nassert     check_monthnumb_number(7) == False\nassert     check_monthnumb_number(8) == False\nassert     check_monthnumb_number(10) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(check_monthnumb_number(1)) # True\nprint(check_monthnumb_number(12)) # False\nprint(check_monthnumb_number(2)) # False\nprint(check_monthnumb_number(12.5)) # False\nprint(check_monthnumb_number('a')) # False\n\ndef check_monthnumb_string(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(0) == False\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(32) == False\nassert     check_monthnumb_number(32.5) == False\nassert     check_monthnumb_number(33) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(12) == True, 'check_monthnumb_number is not working'\nassert     check_monthnumb_number(3) == False, 'check_monthnumb_number is not working'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(2) == True, \"Wrong output\"\nassert     check_monthnumb_number(1) == True, \"Wrong output\"\nassert     check_monthnumb_number(31) == True, \"Wrong output\"\nassert     check_monthnumb_number(29) == False, \"Wrong output\"\nassert     check_monthnumb_number(5) == False, \"Wrong output\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(3)    == True, 'Wrong Answer'\nassert    check_monthnumb_number(9)    == False, 'Wrong Answer'\nassert    check_monthnumb_number(30)    == False, 'Wrong Answer'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(3) == True, \"Wrong answer\"\nassert     check_monthnumb_number(1) == False, \"Wrong answer\"\nassert     check_monthnumb_number(8) == False, \"Wrong answer\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(31) == True, \"Error: 31 is not an month\"\nassert     check_monthnumb_number(30) == False, \"Error: 30 is an month\"\nassert     check_monthnumb_number(1) == False, \"Error: 1 is not a month\"\nassert     check_monthnumb_number(10) == True, \"Error: 10 is an month\"\nassert     check_monthnumb_number(0) == True, \"Error: 0 is an month\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         check_monthnumb_number(4) == False\nassert         check_monthnumb_number(6) == True\nassert         check_monthnumb_number(7) == False\nassert         check_monthnumb_number(7) == False\nassert         check_monthnumb_number(7) == False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    reverse_string_list(['I', 'am', 'a', 'programmer', 'today']) == ['today', 'a', 'am', 'programmer', 'I']\n    reverse_string_list(['hello','my', 'world']) == ['world','my', 'hello']\n    reverse_string_list(['hello','my', 'world', 'test']) == ['world','my', 'hello', 'test']\n    reverse_string_list([]) == []\n\ndef double_letter(letter):\n    '''\n    Write a function that takes in a single-letter string and returns a new string that has been\n    repeated twice.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_string_list(['alice', 'bob', 'claire', 'dan']) == ['dan', 'claire', 'bob', 'alice'], 'Test 1 failed'\nassert     reverse_string_list(['hello', 'abort', 'world']) == ['world', 'abort', 'hello'], 'Test 2 failed'\nassert     reverse_string_list(['alice']) == ['alice'], 'Test 3 failed'\nassert     reverse_string_list(['a']) == ['a'], 'Test 4 failed'\nassert     reverse_string_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a'], 'Test 5 failed'\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_string_list([\"Hello\", \"World\"]) == [\"World\", \"Hello\"], \"Wrong result\"\nassert     reverse_string_list([\"Hi!\", \"How are you?\"]) == [\"How are you!\", \"Hi!\"], \"Wrong result\"\nassert     reverse_string_list([\"A\", \"B\", \"C\"]) == [\"C\", \"B\", \"A\"], \"Wrong result\"\nassert     reverse_string_list([\"\"]) == [\"\"], \"Wrong result\"\nassert     reverse_string_list([]) == [], \"Wrong result\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_string_list(['h', 'e', 'l', 'l', 'o']) == ['o', 'l', 'l', 'e', 'h'], \"should be ['o', 'l', 'l', 'e', 'h']\"\nassert reverse_string_list(['h', 'e', 'l', 'l', 'o', 'l']) == ['l', 'l', 'o', 'l', 'e', 'h'], \"should be ['l', 'l', 'o', 'l', 'e', 'h']\"\nassert reverse_string_list(['h', 'e', 'l', 'l', 'o', 'l', 'o']) == ['l', 'l', 'o', 'l', 'e', 'h', 'o'], \"should be ['l', 'l', 'o', 'l', 'e', 'h', 'o']\"\nassert reverse_string_list(['h', 'e', 'l', 'l', 'o', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o']) == ['l', 'l', 'o', 'l', 'e', 'h', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o'], \"should be ['l', 'l', 'o', 'l', 'e', 'h', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o']\"\nassert reverse_string_list(['h', 'e', 'l', 'l', 'o', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o']) == ['l', 'l', 'o', 'l', 'e', 'h', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o'], \"should be ['l', 'l', 'o', 'l', 'e', 'h', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o', 'l', 'o', 'l', 'l', 'o', 'l', 'l', 'o']\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_string_list([\"Hello\", \"Goodbye\"]) == [\"Goodbye\", \"Hello\"]\nassert     reverse_string_list([\"I\", \"am\", \"fine\"]) == [\"fine\", \"am\", \"I\"]\nassert     reverse_string_list([\"I\", \"am\", \"good\"]) == [\"good\", \"I\", \"am\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef reverse_string_list2(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return \n\n\nassert \n\ndef reverse_string_list3(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list([\"test\", \"list\", \"string\"]) == [\"list\", \"string\", \"test\"]\nassert     reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"]\nassert     reverse_string_list([\"hi\", \"\", \"i\", \"you\"]) == [\"\", \"i\", \"you\", \"hi\"]\nassert     reverse_string_list([\"\"]) == []\nassert     reverse_string_list([\"\", \"a\", \"\", \"b\", \"\", \"c\", \"d\", \"\", \"e\", \"f\", \"g\", \"h\"]) == [\"h\", \"e\", \"f\", \"g\", \"d\", \"c\", \"b\", \"a\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]\nprint(\"Test Successful\")\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"], \"should be reversed\"\nassert     reverse_string_list([\"fgh\"]) == [\"ghf\"], \"should be reversed\"\n\n\ndef reverse_list_of_lists(list_of_lists):\n    '''\n    Write a function that takes a list of lists and returns the reversed list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_string_list([]) == []\nassert     reverse_string_list([1, 2]) == [2, 1]\nassert     reverse_string_list([1, 2, 3]) == [3, 2, 1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('\\n\\nTask 2:')\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([[1, 2, 3], \n                [1, 2], \n                [1, 2, 4],\n                [3, 4],\n                [1, 2, 3],\n                [1],\n                [1, 2, 3, 4],\n                [1, 2, 3],\n                [1, 2, 3, 4]]) == \n    [1, 2, 3, 4]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     Find_Min([10,20,30,40,50,60,70,80,90]) == [10,20,30,40,50,60,70,80,90]\nassert     Find_Min([10,20,30,40,50,60,70,80,90,100]) == [10,20,30,40,50,60,70,80,90,100]\nassert     Find_Min([1,2,3,4,5,6,7,8,9]) == None\nassert     Find_Min([10,20,30,40,50,60,70,80,90,100,110]) == None\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min([3,4,5,6,7,8,9])== [6,7,8], \"Wrong answer\"\nassert     Find_Min([0,1,2,3,4,5,6,7,8,9])== [0,1,2,3,4,5,6,7,8], \"Wrong answer\"\nassert     Find_Min([10,11,12,13,14,15,16,17,18,19])== [16,17,18], \"Wrong answer\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min([1,2,3])    == [1], \"Fail\"\nassert     Find_Min([1,2,3,4])    == [1,2], \"Fail\"\nassert     Find_Min([1,2,3,4,5])    == [1,2], \"Fail\"\nassert     Find_Min([1,2,3,4,5,6])    == [1,2], \"Fail\"\nassert     Find_Min([1,2,3,4,5,6,7])    == [1,2], \"Fail\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    Find_Min(['abc','abc','abc']) == ['abc']\n    Find_Min(['abc','ab','abc']) == ['abc']\n    Find_Min(['abc','abc','abcd']) == []\n\n    "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlst = [[1,2,3,4,5],[2,3,4,5],[3,4,5,6],[4,5,6],[5,6,7,8,9],[6,7,8,9],[7,8,9,10,11],[8,9,10,11],[9,10,11]]\n\nfor i in lst:\n    print Find_Min(i)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min([1, 2, 3]) == [1, 2, 3]\nassert     Find_Min([]) == []\nassert     Find_Min([1]) == []\nassert     Find_Min([1,2,3]) == [2, 3]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min([1,5,4]) == 1\nassert     Find_Min([5,4,3]) == 1\nassert     Find_Min([5,4,3,2]) == 2\nassert     Find_Min([1,5,4,3,2]) == 2\nassert     Find_Min([1,5,4,3,2,5]) == 1\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rectangle_area(1,1) == 1\nassert     rectangle_area(1,3) == 2\nassert     rectangle_area(2,4) == 2\nassert     rectangle_area(10,10) == 100\nassert     rectangle_area(10,1) == 1\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrectangle_area(2,3) == 6\nrectangle_area(2,3) == 7\nrectangle_area(2,3) == 10\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rectangle_area(4, 5) == 20\nassert     rectangle_area(10, 10) == 10"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(1,1) == 0.5\nassert     rectangle_area(2,2) == 4\nassert     rectangle_area(1,2) == 1.5\n\nprint('Passed all the tests.')\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rectangle_area(5,5) == 20\nassert     rectangle_area(10,7) == 28\nassert     rectangle_area(6,8) == 18\n\nprint('You are all set!!!')\n\ndef calculator_proceed(func):\n    '''\n    Here we write the return function.\n    '''\n    return func()\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rectangle_area(2,5) == 20\nassert rectangle_area(4,7) == 28\n\nprint('If it is correct, the output should be 20 and 28.')\nprint('If it is wrong, the output should be 0 and 0.')\n\n\nprint('\\n')"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(1,2) == 2\nassert     rectangle_area(2,1) == 2\nassert     rectangle_area(0,0) == 0\n\n\ndef triangle_area(x,y):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(2,4) == 2, \"failed\"\nassert     rectangle_area(3,5) == 5, \"failed\"\nassert     rectangle_area(1,1) == 1, \"failed\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rectangle_area(5,6) == 30\nassert     rectangle_area(3,7) == 21\nassert     rectangle_area(5,3) == 15\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rectangle_area(2,4) == 4\nassert     rectangle_area(3,3) == 9\nassert     rectangle_area(5,10) == 50\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_uppercase('A+B-C') == 'ABC'\nassert     remove_uppercase('AB+CD') == 'ABCD'\nassert     remove_uppercase('ABCD') == 'ABCD'\nassert     remove_uppercase('ABC+CD') == 'ABCD'\nassert     remove_uppercase('ABCD') == 'ABCD'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    remove_uppercase(\"LOWELL\") == \"lowell\", \"Test 1 fail\"\n    remove_uppercase(\"HELP\") == \"help\", \"Test 2 fail\"\n    remove_uppercase(\"HELLO\") == \"hello\", \"Test 3 fail\"\n\ndef is_palindrome(str1):\n    '''\n    Write a function to determine if the given string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase(\"tHeT\") == \"the\"\nassert     remove_uppercase(\"LThEr\") == \"le\"\nassert     remove_uppercase(\"ThEr\") == \"er\"\n\ndef remove_elements(str1, str2):\n    '''\n    Write a function to remove the given elements from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase(\"a\") == \"a\"\nassert     remove_uppercase(\"A\") == \"A\"\nassert     remove_uppercase(\"AB\") == \"AB\"\nassert     remove_uppercase(\"aB\") == \"ab\"\nassert     remove_uppercase(\"ABC\") == \"ab\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_uppercase(\"remove_uppercase\") == \"remove_uppercase\", \\\n        \"remove_uppercase should return the string without upper case\"\nassert     remove_uppercase(\"REMOVE_UPPERCASE\") == \"REMOVE_UPPERCASE\", \\\n        \"remove_uppercase should return the string without upper case\"\nassert     remove_uppercase(\"REMOVE_UPPERCASE\") == \"REMOVE_UPPERCASE\", \\\n        \"remove_uppercase should return the string without upper case\"\nassert     remove_uppercase(\"REMOVE_UPPERCASE\") == \"REMOVE_UPPERCASE\", \\\n        \"remove_uppercase should return the string without upper case\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_uppercase('hELLO')=='hello', 'incorrect'\nassert     remove_uppercase('HELLO')=='hello', 'incorrect'\nassert     remove_uppercase('hello world')=='hello world', 'incorrect'\n\ndef my_swap(str1):\n    '''\n    Write a function to swap lowercase substrings with uppercase substrings.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_uppercase('abc') == 'abc'\nremove_uppercase('AbC') == 'abc'\nremove_uppercase('aBc') == 'abc'\nremove_uppercase('abC') == 'abc'\nremove_uppercase('AbC') == 'abc'\nremove_uppercase('ABC') == 'abc'\nremove_uppercase('ABc') == 'abc'\nremove_uppercase('ABC') == 'abc'\nremove_uppercase('Abc') == 'abc'\nremove_uppercase('aBC') == 'abc'\nremove_uppercase('aBc') == 'abc'\nremove_uppercase('Abc') == 'abc'\nremove_uppercase('ABC') == 'abc'\n\ndef remove_punctuations(str1):\n    '''\n    Write a function that takes a string and replaces all occurrences of a set of characters with a different set of characters.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase('sOmE. STrings') =='somestrings'\nassert     remove_uppercase('some_strings') =='some strings'\nassert     remove_uppercase('this is a string') == 'this is a string'\n\ndef replace_spaces(str1):\n    '''\n    Write a function to replace all spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_uppercase('THIS IS TO BE CONSERVED.') == 'THIS IS TO BE CONSERVED.'\nassert remove_uppercase('THIS IS TO BE CONSERVED.') == 'THIS IS TO BE CONSERVED.'\n\nassert remove_uppercase('HELLO') == 'HELLO'\nassert remove_uppercase('hello') == 'hello'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_uppercase(\"HELLO\") == \"hll\"\nassert     remove_uppercase(\"hello world\") == \"hldw\"\nassert     remove_uppercase(\"HELLO\") == \"hll\"\nassert     remove_uppercase(\"HELLO\") == \"hll\"\nassert     remove_uppercase(\"HELLO\") == \"hll\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]\nassert     Extract([[1,2,3,4],[5,6,7,8]]) == [1,5]\nassert     Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]\nassert     Extract([[1,2],[3,4,5],[6,7,8],[9,0,1]]) == [1,3,6,9]\nassert     Extract([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == [1,6,11,15]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert Extract([[1,2],[\"a\",1],3]) == [1,1,3]\nassert Extract([[\"a\",\"b\"],[\"c\",\"d\"]]) == [\"a\",\"b\"]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Extract([[1,2,3],['a','b','c']]) == ['1', 'a']\nassert     Extract([[1,2,3],['a','b','c']]) == ['1', 'a']\nassert     Extract([[1,2,3,5,6],['a','b','c']]) == ['1', 'a', 'b', 'c']\nassert     Extract([[1,2,3,5,6],['a','b','c']]) == ['1', 'a', 'b', 'c']\nassert     Extract([[1,2,3,5,6,7,8,9],['a','b','c']]) == ['1', 'a', 'b', 'c']\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([[], [],[], [[]], [[]]]) == [[], [],[], [],[]]\nassert     Extract([[]]) == []\nassert     Extract([]) == []\nassert     Extract([[], [[]]]) == [[], []]\nassert     Extract([[], [], [[]]]) == [[], [], [[]]]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 4, 7, 10]\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [1, 4, 7, 10, 13]\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [1, 4, 7, 10, 13, 16]\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]) == [1, 4, 7, 10, 13, 16, 19]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    Extract([['ABC'], ['DEF'], ['GHI']]) == ['ABC', 'DEF', 'GHI']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([[1, 2, 3, 4, 5, 6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Extract([['A', 'B', 'C', 'D'], ['E', 'F'], ['G', 'H', 'I']]) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n    Extract([[0, 1], [2, 3], [4, 5]]) == [0, 1, 2, 3, 4, 5]\n    Extract([[1, 2, 3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([1,2,3,4,5,6]) == 1, \"The function should return 1\"\nassert     Extract([1,2,3,4,5,6,7]) == 7, \"The function should return 7\"\nassert     Extract([]) == None, \"The function should return None\""
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract(['[1, 2, 3, 4, 5, 6, 7, 8]', '[1, 2, 3, 4, 5, 6, 7, 8]', '[1, 2, 3, 4, 5, 6, 7, 8]', '[1, 2, 3, 4, 5, 6, 7, 8]']) == True\nassert     Extract(['[1, 2, 3, 4, 5, 6, 7, 8]', '[1, 2, 3, 4, 5, 6, 7, 8]', '[1, 2, 3, 4, 5, 6, 7, 8]', '[1, 2, 3, 4, 5, 6, 7, 8]']) == False\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (Extract([[1],2,[4,5,6]]) == 1)\nassert     (Extract([[1],2,[]]) == None)\nassert     (Extract([[1,2],3,[4,5,6],7,8]) == 1)\nprint(\"Extract passed\")\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     upper_ctr(\"UPPER\") == 5\nassert     upper_ctr(\"\") == 0\nassert     upper_ctr(\"\",) == 0\nassert     upper_ctr(\"abcd\") == 3\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nupper_ctr('') == 0, 'empty string passed in'\nupper_ctr('a') == 1, 'one upper case'\nupper_ctr('A') == 1, 'one upper case'\nupper_ctr('Aa') == 2, 'two upper case'\nupper_ctr('aA') == 2, 'two upper case'\nupper_ctr('a1') == 0,'single space'\nupper_ctr('a a') == 1,'single space'\nupper_ctr('A a') == 1,'single space'\nupper_ctr('aA a') == 2, 'two upper case'\nupper_ctr('A A') == 2, 'two upper case'\nupper_ctr('aA aA') == 3, 'three upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('aAA') == 3, 'three upper case'\nupper_ctr('AAA') == 3, 'three upper case'\nupper_ctr('AaAaA') == 4, 'four upper case'\nupper_ctr('AaA') == 2, 'two upper case'\nupper_ctr('A a A') == 3, 'three upper case'\nupper_ctr('Aa') == 1, 'one upper case'\nupper_ctr('A a') == 2, 'two upper case'\nupper_ctr('Aa A') == 3, 'three upper case'\nupper_ctr('Aa A A') == 4, 'four upper case'\nupper_ctr('AaAa') == 3, 'three upper case'\nupper_ctr('Aa A A A') == 5, 'five upper case'\nupper_ctr('Aa A A A A') == 6,'six upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('Aa') == 2, 'two upper case'\nupper_ctr('A a') == 3, 'three upper case'\nupper_ctr('aA') == 3, 'three upper case'\nupper_ctr('a1') == 0,'single space'\nupper_ctr('a a') == 2, 'two upper case'\nupper_ctr('A a') == 2, 'two upper case'\nupper_ctr('aA') == 3, 'three upper case'\nupper_ctr('A A') == 3, 'three upper case'\nupper_ctr('aA a') == 4, 'four upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('aAA') == 3, 'three upper case'\nupper_ctr('AAA') == 3, 'three upper case'\nupper_ctr('AaAaA') == 4, 'four upper case'\nupper_ctr('aA a') == 3, 'three upper case'\nupper_ctr('Aa') == 1, 'one upper case'\nupper_ctr('a a') == 2, 'two upper case'\nupper_ctr('Aa A') == 3, 'three upper case'\nupper_ctr('aA aA') == 4, 'four upper case'\nupper_ctr('Aa A A') == 5, 'four upper case'\nupper_ctr('aA aA A') == 5, 'five upper case'\nupper_ctr('Aa A A A') == 6,'six upper case'\nupper_ctr('aA aA A A') == 6,'six upper case'\nupper_ctr('aA A A A A') == 7,'seven upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('Aa') == 3, 'three upper case'\nupper_ctr('A a') == 4, 'four upper case'\nupper_ctr('aA') == 3, 'three upper case'\nupper_ctr('a1') == 0,'single space'\nupper_ctr('a a') == 2, 'two upper case'\nupper_ctr('A a') == 2, 'two upper case'\nupper_ctr('aA') == 3, 'three upper case'\nupper_ctr('A A') == 3, 'three upper case'\nupper_ctr('aA a') == 4, 'four upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('aAA') == 3, 'three upper case'\nupper_ctr('AAA') == 3, 'three upper case'\nupper_ctr('AaAaA') == 4, 'four upper case'\nupper_ctr('aA a') == 3, 'three upper case'\nupper_ctr('Aa') == 2, 'one upper case'\nupper_ctr('a a') == 4, 'four upper case'\nupper_ctr('Aa A') == 3, 'three upper case'\nupper_ctr('aA aA') == 5, 'five upper case'\nupper_ctr('Aa A A') == 5, 'five upper case'\nupper_ctr('aA aA A') == 6,'six upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('aAA') == 3, 'three upper case'\nupper_ctr('AAA') == 3, 'three upper case'\nupper_ctr('AaAaA') == 4, 'four upper case'\nupper_ctr('aA a') == 3, 'three upper case'\nupper_ctr('Aa') == 1, 'one upper case'\nupper_ctr('a a') == 2, 'two upper case'\nupper_ctr('Aa A') == 3, 'three upper case'\nupper_ctr('aA aA') == 4, 'four upper case'\nupper_ctr('Aa A A') == 5, 'five upper case'\nupper_ctr('aA aA A') == 6,'six upper case'\nupper_ctr('Aa A A A') == 7,'seven upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('aAA') == 3, 'three upper case'\nupper_ctr('AAA') == 3, 'three upper case'\nupper_ctr('AaAaA') == 4, 'four upper case'\nupper_ctr('aA a') == 3, 'three upper case'\nupper_ctr('Aa') == 1, 'one upper case'\nupper_ctr('a a') == 2, 'two upper case'\nupper_ctr('Aa A') == 3, 'three upper case'\nupper_ctr('aA aA') == 4, 'four upper case'\nupper_ctr('Aa A A') == 5, 'five upper case'\nupper_ctr('aA aA A') == 6,'six upper case'\nupper_ctr('Aa A A A') == 7,'seven upper case'\nupper_ctr('aA aA A A') == 8, 'eight upper case'\nupper_ctr('a1') == 0,'single space'\nupper_ctr('a a') == 2, 'two upper case'\nupper_ctr('A a') == 2, 'two upper case'\nupper_ctr('aA') == 3, 'three upper case'\nupper_ctr('A A') == 3, 'three upper case'\nupper_ctr('aA a') == 4, 'four upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA') == 2, 'two upper case'\nupper_ctr('aAA') == 3, 'three upper case'\nupper_ctr('AAA') == 3, 'three upper case'\nupper_ctr('AaAaA') == 4, 'four upper case'\nupper_ctr('aA a') == 3, 'three upper case'\nupper_ctr('Aa') == 1, 'one upper case'\nupper_ctr('a a') == 2, 'two upper case'\nupper_ctr('Aa A') == 3, 'three upper case'\nupper_ctr('aA aA') == 4, 'four upper case'\nupper_ctr('Aa A A') == 5, 'five upper case'\nupper_ctr('aA aA A') == 6,'six upper case'\nupper_ctr('aa') == 2, 'two upper case'\nupper_ctr('AA'"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr('') == 0, \"Wrong Answer. Expected 0 but got {}\".format(upper_ctr(''))\nassert     upper_ctr('abc') == 1, \"Wrong Answer. Expected 1 but got {}\".format(upper_ctr('abc'))\nassert     upper_ctr('ABC') == 1, \"Wrong Answer. Expected 1 but got {}\".format(upper_ctr('ABC'))\nassert     upper_ctr('Hello!') == 3, \"Wrong Answer. Expected 3 but got {}\".format(upper_ctr('Hello!'))\nassert     upper_ctr('HELLO!') == 3, \"Wrong Answer. Expected 3 but got {}\".format(upper_ctr('HELLO!'))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr('') == 0, \"Result should be 0\"\nassert     upper_ctr('A') == 1, \"Result should be 1\"\nassert     upper_ctr('abc') == 3, \"Result should be 3\"\nassert     upper_ctr('aBc') == 4, \"Result should be 4\"\nassert     upper_ctr('abcABC') == 5, \"Result should be 5\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr(\"The quick brown fox jumps over the lazy dog\") ==     {\"t\": 1, \"e\": 1, \"h\": 2, \"o\": 2, \"k\": 1, \"u\": 1, \"f\": 1, \"s\": 2, \"w\": 2, \"j\": 1, \"r\": 1, \"u\": 1, \"g\": 1, \"x\": 1, \"p\": 1, \"q\": 1, \"b\": 1, \"l\": 1, \"a\": 1} == \\\nupper_ctr(\"This is a test case\") ==     {\"t\": 1, \"h\": 1, \"i\": 1, \"s\": 1, \"t\": 1, \"e\": 1, \"s\": 1, \"a\": 1, \"n\": 1, \"t\": 1, \"e\": 1, \"l\": 1, \"e\": 1, \"a\": 1} == \\\nupper_ctr(\"I love you\") ==     {\"i\": 1, \"l\": 1, \"o\": 1, \"v\": 1, \"e\": 1, \"y\": 1, \"l\": 1, \"u\": 1, \"a\": 1, \"e\": 1, \"n\": 1, \"o\": 1, \"h\": 1, \"t\": 1} == \\\nupper_ctr(\"Mr John Smith\") ==     {\"m\": 1, \"r\": 1, \"j\": 1, \"o\": 1, \"n\": 1, \"h\": 1, \"r\": 1, \"s\": 1, \"i\": 1, \"n\": 1, \"g\": 1, \"e\": 1, \"d\": 1, \"o\": 1, \"w\": 1, \"i\": 1, \"t\": 1} == \\\nupper_ctr(\"This is a test case\") ==     {\"t\": 1, \"h\": 1, \"i\": 1, \"s\": 1, \"t\": 1, \"e\": 1, \"s\": 1, \"a\": 1, \"n\": 1, \"t\": 1, \"e\": 1, \"l\": 1, \"e\": 1, \"a\": 1} == \\\nupper_ctr(\"I love you\") ==     {\"i\": 1, \"l\": 1, \"o\": 1, \"v\": 1, \"e\": 1, \"y\": 1, \"l\": 1, \"u\": 1, \"a\": 1, \"e\": 1, \"n\": 1, \"o\": 1, \"h\": 1, \"t\": 1} == \\\nupper_ctr(\"Mr John Smith\") ==     {\"m\": 1, \"r\": 1, \"j\": 1, \"o\": 1, \"n\": 1, \"h\": 1, \"r\": 1, \"s\": 1, \"i\": 1, \"n\": 1, \"g\": 1, \"e\": 1, \"d\": 1, \"o\": 1, \"w\": 1, \"i\": 1, \"t\": 1} == \\\nupper_ctr(\"This is a test case\") ==     {\"t\": 1, \"h\": 1, \"i\": 1, \"s\": 1, \"t\": 1, \"e\": 1, \"s\": 1, \"a\": 1, \"n\": 1, \"t\": 1, \"e\": 1, \"l\": 1, \"e\": 1, \"a\": 1} == \\\nupper_ctr(\"I love you\") ==     {\"i\": 1, \"l\": 1, \"o\": 1, \"v\": 1, \"e\": 1, \"y\": 1, \"l\": 1, \"u\": 1, \"a\": 1, \"e\": 1, \"n\": 1, \"o\": 1, \"h\": 1, \"t\": 1} == \\\nupper_ctr(\"Mr John Smith\") ==     {\"m\": 1, \"r\": 1, \"j\": 1, \"o\": 1, \"n\": 1, \"h\": 1, \"r\": 1, \"s\": 1, \"i\": 1, \"n\": 1, \"g\": 1, \"e\": 1, \"d\": 1, \"o\": 1, \"w\": 1, \"i\": 1, \"t\": 1} == \\\nupper_ctr(\"This is a test case\") ==     {\"t\": 1, \"h\": 1, \"i\": 1, \"s\": 1, \"t\": 1, \"e\": 1, \"s\": 1, \"a\": 1, \"n\": 1, \"t\": 1, \"e\": 1, \"l\": 1, \"e\": 1, \"a\": 1} == \\\nupper_ctr(\"I love you\") ==     {\"i\": 1, \"l\": 1, \"o\": 1, \"v\": 1, \"e\": 1, \"y\": 1, \"l\": 1, \"u\": 1, \"a\": 1, \"e\": 1, \"n\": 1, \"o\": 1, \"h\": 1, \"t\": 1} == \\\nupper_ctr(\"Mr John Smith\") ==     {\"m\": 1, \"r\": 1, \"j\": 1, \"o\": 1, \"n\": 1, \"h\": 1, \"r\": 1, \"s\": 1, \"i\": 1, \"n\": 1, \"g\": 1, \"e\": 1, \"d\": 1, \"o\": 1, \"w\": 1, \"i\": 1, \"t\": 1} == \\\nupper_ctr(\"This is a test case\") ==     {\"t\": 1, \"h\": 1, \"i\": 1, \"s\": 1, \"t\": 1, \"e\": 1, \"s\": 1, \"a\": 1, \"n\": 1, \"t\": 1, \"e\": 1, \"l\": 1, \"e\": 1, \"a\": 1} == \\\nupper_ctr(\"I love you\") ==     {\"i\": 1, \"l\": 1, \"o\": 1, \"v\": 1, \"e\": 1, \"y\": 1, \"l\": 1, \"u\": 1, \"a\": 1, \"e\": 1, \"n\": 1, \"o\": 1, \"h\": 1, \"t\": 1} == \\\nupper_ctr(\"Mr John Smith\") ==     {\"m\": 1, \"r\": 1, \"j\": 1, \"o\": 1, \"n\": 1, \"h\": 1, \"r\": 1, \"s\": 1, \"i\": 1, \"n\": 1, \"g\": 1, \"e\": 1, \"d\": 1, \"o\": 1, \"w\": 1, \"i\": 1, \"t\": 1} == \\\nupper_ctr(\"This is a test case\") ==     {\"t\": 1, \"h\": 1, \"i\": 1, \"s\": 1, \"t\": 1, \"e\": 1, \"s\": 1, \"a\": 1, \"n\": 1, \"t\": 1, \"e\": 1, \"l\": 1, \"e\": 1, \"a\": 1} == \\\nupper_ctr(\"I love you\") ==     {\"i\": 1, \"l\": 1, \"o\": 1, \"v\": 1, \"e\": 1, \"y\": 1, \"l\": 1, \"u\": 1, \"a\": 1, \"e\": 1, \"n\": 1, \"o\": 1, \"h\": 1, \"t\": 1} == \\\nupper_ctr(\"Mr John Smith\") ==     {\"m\": 1, \"r\": 1, \"j\": 1, \"o\": 1, \"n\": 1, \"h\": 1, \"r\": 1, \"s\": 1, \"i\": 1, \"n\": 1, \"g\": 1, \"e\": 1, \"d\": 1, \"o\": 1, \"w\": 1, \"i\": 1, \"t\": 1} == \\\nupper_ctr(\"This is a test case\") ==     {\"t\": 1, \"h\": 1, \"i\": 1, \"s\": 1, \"t\": 1, \"e\": 1, \"s\": 1, \"a\": 1, \"n\": 1, \"t\": 1, \"e\": 1, \"l\": 1, \"e\": 1, \"a\": 1} == \\\nupper_ctr(\"I love you\") ==     {\"i\": 1, \"l\": 1, \"o\": 1, \"v\": 1, \"e\": 1, \"y\": 1, \"l\": 1, \"u\": 1, \"a\": 1, \"e\": 1, \"n\": 1, \"o\": 1, \"h\": 1, \"t\": 1} == \\\nupper_ctr(\"Mr John Smith\") ==     {\"m\": 1, \"r\": 1, \"j\": 1, \"o\": 1, \"n\": 1, \"h\": 1, \"r\": 1, \"s\": 1, \"i\": 1, \"n\": 1, \"g\": 1, \"e\": 1, \"d\": 1, \"o\": 1, \"w\": 1, \"i\": 1, \"t\": 1} == \\\nuppe"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     upper_ctr(\"ABCD\") == 3, \"Should return 3\"\nassert     upper_ctr(\"AaBb\") == 2, \"Should return 2\"\nassert     upper_ctr(\"cCbA\") == 1, \"Should return 1\"\nassert     upper_ctr(\"CCcDD\") == 2, \"Should return 2\"\nassert     upper_ctr(\"CddD\") == 1, \"Should return 1\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3],\n                                     [1, 3, 2],\n                                     [2, 1, 3],\n                                     [2, 3, 1],\n                                     [3, 1, 2],\n                                     [3, 2, 1]], 'Wrong result'\n\nassert     combinations_list([]) == [[]],'Wrong result'\n\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3, 4],\n                                             [1, 2, 4, 3],\n                                             [1, 3, 2, 4],\n                                             [1, 3, 4, 2],\n                                             [1, 4, 2, 3],\n                                             [1, 4, 3, 2],\n                                             [2, 1, 3, 4],\n                                             [2, 1, 4, 3],\n                                             [2, 3, 1, 4],\n                                             [2, 3, 4, 1],\n                                             [2, 4, 1, 3],\n                                             [2, 4, 3, 1],\n                                             [3, 1, 2, 4],\n                                             [3, 1, 4, 2],\n                                             [3, 2, 1, 4],\n                                             [3, 2, 4, 1],\n                                             [3, 4, 1, 2],\n                                             [3, 4, 2, 1],\n                                             [4, 1, 2, 3],\n                                             [4, 1, 3, 2],\n                                             [4, 2, 1, 3],\n                                             [4, 2, 3, 1],\n                                             [4, 3, 1, 2],\n                                             [4, 3, 2, 1]],'Wrong result'\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([1,2,3,4]) == [[1, 2, 3], [1, 2, 4], [1, 3, 4],\n                              [2, 3, 4]]\nassert     combinations_list([1,2,3,4,5]) == [[1, 2, 3, 4],\n                              [1, 2, 5], [1, 3, 4],\n                              [1, 3, 5],\n                              [1, 4, 5],\n                              [2, 3, 4],\n                              [2, 3, 5],\n                              [2, 4, 5],\n                              [3, 4, 5]]\nassert     combinations_list([1,2,3,4,5,6]) == [[1, 2, 3, 4],\n                              [1, 2, 5],\n                              [1, 3, 4],\n                              [1, 3, 5],\n                              [1, 4, 5],\n                              [2, 3, 4],\n                              [2, 3, 5],\n                              [2, 4, 5],\n                              [3, 4, 5],\n                              [4, 5]]\nassert     combinations_list([1,2,3,4]) == [[1, 2, 3, 4]]\n\ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3]]\nassert     combinations_list([1,2,3,4]) == [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4],[1,2,3,5],[1,2,4,5],[1,2,5,5],[1,3,4,5],[2,3,4,5]]\nassert     combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5,6]]\nassert     combinations_list([1,2,3,4,5,6,7]) == [[1,2,3,4,5,6],[1,2,3,4,7],[1,2,3,5,6],[1,2,3,5,7],[1,2,3,6,7],[1,2,4,5,6],[1,2,4,5,7],[1,2,4,6,7],[1,2,4,7,7],[1,2,5,6,7],[1,3,4,5,6],[1,3,4,5,7],[1,3,4,6,7],[1,3,4,7,7],[1,3,5,6,7],[1,3,5,7,7],[1,3,6,7,7],[2,3,4,5,6],[2,3,4,5,7],[2,3,4,6,7],[2,3,4,7,7],[2,3,5,6,7],[2,3,5,7,7],[2,3,6,7,7],[2,4,5,6,7],[2,4,5,7,7],[2,4,6,7,7],[2,5,6,7,7],[3,4,5,6,7],[3,4,5,7,7],[3,4,6,7,7],[3,5,6,7,7]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(combinations_list([1, 2, 3]))\n\n\ndef combinations_list_2(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_list([1,2,3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3],\n                                            [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n\ndef is_substring(s, t):\n    '''\n    Write a function that takes in two strings and returns True if t is a substring of s, otherwise return False.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([1,2,3]) == [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\nassert     combinations_list([0]) == [[], [0]]\nassert     combinations_list([1,2,3,4]) == [[], [1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_list([1,2,3,4]) == [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]] == [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], [1,4,3,2], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3], [2,4,3,1], [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1], [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2], [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]\nassert combinations_list([1,2,3,4]) == [[1,2,3,4]]\nassert combinations_list([]) == []\nassert combinations_list([1]) == [[1]]\n\ndef combinations_list_with_replacement(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [2, 3, 1], [1, 3, 2],\n                            [1, 2, 3], [2, 1, 3], [3, 2, 1],\n                            [3, 1, 2], [3, 2, 1], [3, 1, 2]]\nassert     combinations_list([1, 2, 3, 4, 5, 6]) == [[1, 2, 3, 4],\n                            [1, 2, 3, 5], [1, 2, 3, 6],\n                            [1, 2, 4, 5], [1, 2, 4, 6],\n                            [1, 2, 5, 6],\n                            [1, 3, 4, 5], [1, 3, 4, 6],\n                            [1, 3, 5, 6],\n                            [1, 4, 5, 6],\n                            [2, 3, 4, 5], [2, 3, 4, 6],\n                            [2, 3, 5, 6],\n                            [2, 4, 5, 6],\n                            [3, 4, 5, 6],\n                            [4, 5, 6]]\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[1, 2, 3, 4, 5],\n                            [1, 2, 3, 6, 7],\n                            [1, 2, 3, 7, 8],\n                            [1, 2, 3, 8, 9],\n                            [1, 2, 3, 9, 10],\n                            [1, 2, 4, 5, 6],\n                            [1, 2, 4, 6, 7],\n                            [1, 2, 4, 7, 8],\n                            [1, 2, 4, 8, 9],\n                            [1, 2, 4, 9, 10],\n                            [1, 2, 5, 6, 7],\n                            [1, 2, 5, 6, 8],\n                            [1, 2, 5, 6, 9],\n                            [1, 2, 5, 6, 10],\n                            [1, 2, 5, 7, 8],\n                            [1, 2, 5, 7, 9],\n                            [1, 2, 5, 7, 10],\n                            [1, 2, 5, 8, 9],\n                            [1, 2, 5, 8, 10],\n                            [1, 2, 6, 7, 8],\n                            [1, 2, 6, 7, 9],\n                            [1, 2, 6, 7, 10],\n                            [1, 2, 6, 8, 9],\n                            [1, 2, 6, 8, 10],\n                            [1, 2, 7, 8, 9],\n                            [1, 2, 7, 8, 10],\n                            [1, 2, 7, 9, 10],\n                            [1, 2, 8, 9, 10],\n                            [1, 3, 4, 5, 6],\n                            [1, 3, 4, 6, 7],\n                            [1, 3, 4, 7, 8],\n                            [1, 3, 4, 8, 9],\n                            [1, 3, 4, 9, 10],\n                            [1, 3, 5, 6, 7],\n                            [1, 3, 5, 6, 8],\n                            [1, 3, 5, 6, 9],\n                            [1, 3, 5, 6, 10],\n                            [1, 3, 5, 7, 8],\n                            [1, 3, 5, 7, 9],\n                            [1, 3, 5, 7, 10],\n                            [1, 3, 5, 8, 9],\n                            [1, 3, 5, 8, 10],\n                            [1, 3, 6, 7, 8],\n                            [1, 3, 6, 7, 9],\n                            [1, 3, 6, 7, 10],\n                            [1, 3, 6, 8, 9],\n                            [1, 3, 6, 8, 10],\n                            [1, 3, 7, 8, 9],\n                            [1, 3, 7, 8, 10],\n                            [1, 3, 7, 9, 10],\n                            [1, 3, 8, 9, 10],\n                            [1, 4, 5, 6, 7],\n                            [1, 4, 5, 6, 8],\n                            [1, 4, 5, 6, 9],\n                            [1, 4, 5, 6, 10],\n                            [1, 4, 5, 7, 8],\n                            [1, 4, 5, 7, 9],\n                            [1, 4, 5, 7, 10],\n                            [1, 4, 5, 8, 9],\n                            [1, 4, 5, 8, 10],\n                            [1, 4, 5, 9, 10],\n                            [1, 4, 6, 7, 8],\n                            [1, 4, 6, 7, 9],\n                            [1, 4, 6, 7, 10],\n                            [1, 4, 6, 8, 9],\n                            [1, 4, 6, 8, 10],\n                            [1, 4, 7, 8, 9],\n                            [1, 4, 7, 8, 10],\n                            [1, 4, 7, 9, 10],\n                            [1, 4, 8, 9, 10],\n                            [1, 5, 6, 7, 8],\n                            [1, 5, 6, 7, 9],\n                            [1, 5, 6, 7, 10],\n                            [1, 5, 6, 8, 9],\n                            [1, 5, 6, 8, 10],\n                            [1, 5, 7, 8, 9],\n                            [1, 5, 7, 8, 10],\n                            [1, 5, 7, 9, 10],\n                            [1, 5, 8, 9, 10],\n                            [1, 6, 7, 8, 9],\n                            [1, 6, 7, 8, 10],\n                            [1, 6, 7, 9, 10],\n                            [1, 6, 8, 9, 10],\n                            [1, 7, 8, 9, 10],\n                            [2, 3, 4, 5, 6],\n                            [2, 3, 4, 6, 7],\n                            [2, 3, 4, 7, 8],\n                            [2, 3, 4, 8, 9],\n                            [2, 3, 4, 9, 10],\n                            [2, 3, 5, 6, 7],\n                            [2, 3, 5, 6, 8],\n                            [2, 3, 5, 6, 9],\n                            [2, 3, 5, 6, 10],\n                            [2, 3, 5, 7, 8],\n                            [2, 3, 5, 7, 9],\n                            [2, 3, 5, 7, 10],\n                            [2, 3, 5, 8, 9],\n                            [2, 3, 5, 8, 10],\n                            [2, 3, 6, 7, 8],\n                            [2, 3, 6, 7, 9],\n                            [2, 3, 6, 7, 10],\n                            [2, 3, 6, 8, 9],\n                            [2, 3, 6, 8, 10],\n                            [2, 3, 7, 8, 9],\n                            [2, 3, 7, 8, 10],\n                            [2, 3, 7, 9, 10],\n                            [2, 3, 8, 9, 10],\n                            [2, 4, 5, 6, 7],\n                            [2, 4, 5, 6, 8],\n                            [2, 4, 5, 6, 9],\n                            [2, 4, 5, 6, 10],\n                            [2, 4, 5, 7, 8],\n                            [2, 4, 5, 7, 9],\n                            [2, 4, 5, 7, 10],\n                            [2, 4, 5, 8, 9],\n                            [2, 4, 5, 8, 10],\n                            [2, 4, 5, 9, 10],\n                            [2, 4, 6, 7, 8],\n                            [2, 4, 6, 7, 9],\n                            [2, 4, 6, 7, 10],\n                            [2, 4, 6, 8"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5],\n    [1, 4, 2], [1, 4, 5], [1, 5, 2], [2, 1, 3], [2, 1, 4], [2, 1, 5],\n    [2, 3, 4], [2, 3, 5], [2, 4, 1], [2, 4, 5], [2, 5, 1],\n    [3, 1, 2], [3, 1, 4], [3, 1, 5], [3, 2, 1], [3, 2, 4], [3, 2, 5],\n    [3, 4, 1], [3, 4, 2], [3, 4, 5], [3, 5, 1],\n    [4, 1, 2], [4, 1, 3], [4, 1, 4], [4, 1, 5], [4, 2, 1], [4, 2, 3],\n    [4, 2, 5], [4, 3, 1], [4, 3, 2], [4, 3, 5],\n    [5, 1, 2], [5, 1, 3], [5, 1, 4], [5, 1, 5],\n    [5, 2, 1], [5, 2, 3], [5, 2, 4],\n    [5, 3, 1], [5, 3, 2],\n    [5, 4, 1], [5, 4, 2],\n    [5, 5, 1],\n    [6, 1, 2], [6, 1, 3], [6, 1, 4],\n    [6, 2, 1], [6, 2, 3],\n    [6, 3, 1],\n    [6, 4, 1],\n    [6, 5, 1],\n    [7, 1, 2],\n    [7, 1, 3], [7, 1, 4],\n    [7, 2, 1],\n    [7, 2, 3],\n    [7, 3, 1],\n    [7, 4, 1],\n    [7, 5, 1],\n    [7, 6, 1],\n    [7, 7, 1],\n    [7, 8, 1],\n    [7, 9, 1],\n    [7, 10, 1],\n    [7, 11, 1],\n    [7, 12, 1],\n    [7, 13, 1],\n    [7, 14, 1],\n    [7, 15, 1],\n    [7, 16, 1],\n    [7, 17, 1],\n    [7, 18, 1],\n    [7, 19, 1],\n    [7, 20, 1],\n    [7, 21, 1],\n    [7, 22, 1],\n    [7, 23, 1],\n    [7, 24, 1],\n    [7, 25, 1],\n    [7, 26, 1],\n    [7, 27, 1],\n    [7, 28, 1],\n    [7, 29, 1],\n    [7, 30, 1],\n    [7, 31, 1],\n    [7, 32, 1],\n    [7, 33, 1],\n    [7, 34, 1],\n    [7, 35, 1],\n    [7, 36, 1],\n    [7, 37, 1],\n    [7, 38, 1],\n    [7, 39, 1],\n    [7, 40, 1],\n    [7, 41, 1],\n    [7, 42, 1],\n    [7, 43, 1],\n    [7, 44, 1],\n    [7, 45, 1],\n    [7, 46, 1],\n    [7, 47, 1],\n    [7, 48, 1],\n    [7, 49, 1],\n    [7, 50, 1],\n    [7, 51, 1],\n    [7, 52, 1],\n    [7, 53, 1],\n    [7, 54, 1],\n    [7, 55, 1],\n    [7, 56, 1],\n    [7, 57, 1],\n    [7, 58, 1],\n    [7, 59, 1],\n    [7, 60, 1],\n    [7, 61, 1],\n    [7, 62, 1],\n    [7, 63, 1],\n    [7, 64, 1],\n    [7, 65, 1],\n    [7, 66, 1],\n    [7, 67, 1],\n    [7, 68, 1],\n    [7, 69, 1],\n    [7, 70, 1],\n    [7, 71, 1],\n    [7, 72, 1],\n    [7, 73, 1],\n    [7, 74, 1],\n    [7, 75, 1],\n    [7, 76, 1],\n    [7, 77, 1],\n    [7, 78, 1],\n    [7, 79, 1],\n    [7, 80, 1],\n    [7, 81, 1],\n    [7, 82, 1],\n    [7, 83, 1],\n    [7, 84, 1],\n    [7, 85, 1],\n    [7, 86, 1],\n    [7, 87, 1],\n    [7, 88, 1],\n    [7, 89, 1],\n    [7, 90, 1],\n    [7, 91, 1],\n    [7, 92, 1],\n    [7, 93, 1],\n    [7, 94, 1],\n    [7, 95, 1],\n    [7, 96, 1],\n    [7, 97, 1],\n    [7, 98, 1],\n    [7, 99, 1],\n    [7, 100, 1],\n    [7, 101, 1],\n    [7, 102, 1],\n    [7, 103, 1],\n    [7, 104, 1],\n    [7, 105, 1],\n    [7, 106, 1],\n    [7, 107, 1],\n    [7, 108, 1],\n    [7, 109, 1],\n    [7, 110, 1],\n    [7, 111, 1],\n    [7, 112, 1],\n    [7, 113, 1],\n    [7, 114, 1],\n    [7, 115, 1],\n    [7, 116, 1],\n    [7, 117, 1],\n    [7, 118, 1],\n    [7, 119, 1],\n    [7, 120, 1],\n    [7, 121, 1],\n    [7, 122, 1],\n    [7, 123, 1],\n    [7, 124, 1],\n    [7, 125, 1],\n    [7, 126, 1],\n    [7, 127, 1],\n    [7, 128, 1],\n    [7, 129, 1],\n    [7, 130, 1],\n    [7, 131, 1],\n    [7, 132, 1],\n    [7, 133, 1],\n    [7, 134, 1],\n    [7, 135, 1],\n    [7, 136, 1],\n    [7, 137, 1],\n    [7, 138, 1],\n    [7, 139, 1],\n    [7, 140, 1],\n    [7, 141, 1],\n    [7, 142, 1],\n    [7, 143, 1],\n    [7, 144, 1],\n    [7, 145, 1],\n    [7, 146, 1],\n    [7, 147, 1],\n    [7, 148, 1],\n    [7, 149, 1],\n    [7, 150, 1],\n    [7, 151, 1],\n    [7, 152, 1],\n    [7, 153, 1],\n    [7, 154, 1],\n    [7, 155, 1],\n    [7, 156, 1],\n    [7, 157, 1],\n    [7, 158, 1],\n    [7, 159, 1],\n    [7, 160, 1],\n    [7, 161, 1],\n    [7, 162, 1],\n    [7, 163, 1],\n    [7, 164"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([2,-3,4]) == 6\nassert     max_subarray_product([-2,-3,-4]) == 24\nassert     max_subarray_product([-2,-3,4,5,6,7,8,9]) == 72\nassert     max_subarray_product([-2,1,-1,1]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_subarray_product([-1, 2, -1, -4, 1, 5, -3, -2, 3, 0, -5, -1]) == 5, \"Wrong Answer\"\nassert     max_subarray_product([1, 2, -1, -4, 1, 5, -3, -2, 3, 0, -5, -1]) == 0, \"Wrong Answer\"\nassert     max_subarray_product([-1, 2, -1, -4, 1, 5, -3, -2, 3, 0, -5, -1, -2]) == 0, \"Wrong Answer\"\nassert     max_subarray_product([-1, 2, -1, -4, 1, 5, -3, -2, 3, 0, -5, -1, -2, -2]) == -2, \"Wrong Answer\"\nassert     max_subarray_product([-1, 2, -1, -4, 1, 5, -3, -2, 3, 0, -5, -1, -2, -2, -3]) == -2, \"Wrong Answer\"\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6, 'Example 1'\nassert     max_subarray_product([-2,0,-1]) == 0, 'Example 2'\nassert     max_subarray_product([-3,-2,-1]) == -1, 'Example 3'\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([2,-3,-4,5]) == 120\nassert     max_subarray_product([-2,3,-4,-5]) == 0\nassert     max_subarray_product([0]) == 0\nassert     max_subarray_product([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    max_subarray_product(arr)\n\n\n'''\nO(n) time complexity and O(1) space complexity\n'''\n\ndef max_subarray_product_optimised(arr):\n    if len(arr) == 0:\n        return 0\n\n    product = arr[0]\n    max_product = product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_subarray_product([1, 2, 3]) == 6\nassert max_subarray_product([2, 3, 4]) == 24\nassert max_subarray_product([2, 3, 4, 5]) == 30\nassert max_subarray_product([1, 2, 3, 4, 5]) == 60\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8]) == -1\nassert max_subarray_product([-4, -2, -1, -4, -5, -3, -2]) == -2\nassert max_subarray_product([1, 2, -1, 3, -4, 4]) == 6\nassert max_subarray_product([-4, -1, 2, -3, 4]) == 4\nassert max_subarray_product([2, 3, -1, 4, -10, -2, 7]) == 4\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([1, 2, 3]) == 6\nassert     max_subarray_product([-4, -5, -6, -2]) == -6\nassert     max_subarray_product([-2, -1, -1, 0, 1]) == 0\nassert     max_subarray_product([1, 2, 3, 4]) == 24\nassert     max_subarray_product([-2, -1, 0, 1, -1, -3]) == 12\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({0:0, 1:1}, 0) == True, 'check_value should return True when value = 0'\nassert     check_value({0:0, 1:1}, 1) == False, 'check_value should return False when value = 1'\nassert     check_value({0:0, 1:1}, 2) == False, 'check_value should return False when value = 2'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({1:2, 2:1, 3:2}, 3) == True, \"Value of 3 should be 2\"\nassert     check_value({1:2, 2:1, 3:2}, 4) == False, \"Value of 4 should be 2\"\nassert     check_value({1:2, 2:2, 3:2}, 4) == True, \"Value of 4 should be 2\"\nassert     check_value({1:2, 2:1, 3:2}, 2) == False, \"Value of 2 should be 2\""
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({1: 1, 2: 2, 3: 3}, 4) == False, 'Should be False'\nassert     check_value({1: 1, 2: 2, 3: 3}, 3) == True, 'Should be True'\nassert     check_value({1: 1, 2: 2, 3: 3}, 5) == True, 'Should be True'"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 1}, 1) == False, \"Expected False\"\nassert     check_value({'a': 1, 'b': 2, 'c': 1}, 2) == True, \"Expected True\"\nassert     check_value({'a': 1, 'b': 2, 'c': 1}, 3) == False, \"Expected False\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({1:1, 2:2}, 2) == True, \"1!= 2\"\nassert check_value({1:1, 2:2}, 1) == False, \"1 == 2\"\nassert check_value({1:1, 2:2}, 3) == False, \"1 == 2\"\nassert check_value({1:1, 2:2}, 2.2) == False, \"1 == 2.2\"\nassert check_value({1:1, 2:2}, \"abc\") == False, \"1 == abc\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({1:3, 2:3, 4:3}, 3) == True\nassert     check_value({1:3, 2:3, 4:3}, 2) == False\nassert     check_value({1:3, 2:3, 4:3}, 1) == False\nassert     check_value({1:3, 2:3, 4:3}, 5) == False\nassert     check_value({1:3, 2:3, 4:3}, 0) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({\"a\":1,\"b\":2,\"c\":2}, \"a\") == True\nassert     check_value({\"a\":1,\"b\":2,\"c\":2}, \"b\") == False\nassert     check_value({\"a\":1,\"b\":2,\"c\":2}, \"c\") == True\n\ndef divisible_by_2(num):\n    '''\n    Write a function to determine whether a given number is divisible by 2.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26, '1': 27, '2': 28, '3': 29, '4': 30, '5': 31, '6': 32, '7': 33, '8': 34, '9': 35, '0': 36, '!': 37, '@': 38, '#': 39, '$': 40, '%': 41, '^': 42, '&': 43, '*': 44, '(': 45, ')': 46, '-': 47, '=': 48, '+': 49, '_': 50, ':': 51, ';': 52, '?': 53, '.': 54, ',': 55, '<': 56, '>': 57, '\\\\': 58, '|': 59, '}': 60, '[': 61, ']': 62, '^': 63}, {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26, '1': 27, '2': 28, '3': 29, '4': 30, '5': 31, '6': 32, '7': 33, '8': 34, '9': 35, '0': 36, '!': 37, '@': 38, '#': 39, '$': 40, '%': 41, '^': 42, '&': 43, '*': 44, '(': 45, ')': 46, '-': 47, '=': 48, '+': 49, '_': 50, ':': 51, ';': 52, '?': 53, '.': 54, ',': 55, '<': 56, '>': 57, '\\\\': 58, '|': 59, '}': 60, '[': 61, ']': 62, '^': 63})\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value(dict, {'a': 1, 'b': 1, 'c': 1}) == True, 'input is wrong'\nassert     check_value(dict, {'a': 1, 'b': 2, 'c': 3}) == False, 'input is wrong'\nassert     check_value(dict, {'a': 1, 'b': 1, 'c': 2}) == False, 'input is wrong'\nassert     check_value(dict, {'a': 1, 'b': 1, 'c': 2}) == False, 'input is wrong'\nassert     check_value(dict, {'a': 1, 'b': 1, 'c': 3}) == True, 'input is wrong'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({'1':'a', '2':'b'}) == {'1':'a', '2':'b'}\nassert     drop_empty({'1':'a', '2':'b', '3':''}) == {'1':'a', '2':'b'}\nassert     drop_empty({'1':'a', '2':'b', '3':''}) == {'1':'a', '2':'b'}\nassert     drop_empty({'1':'a', '2':'b', '3':''}) == {'1':'a', '2':'b'}\nassert     drop_empty({'1':'a', '2':'b', '3':''}) == {'1':'a', '2':'b'}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'a': 1}) == {'a': 1}\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({}) == {}, \"There is no items\"\nassert     drop_empty({1:1}) == {1:1}, \"Item1\"\nassert     drop_empty({1:1, 2:2}) == {1:1, 2:2}, \"Item1,Item2\"\nassert     drop_empty({1:1, 2:2, 3:3}) == {1:1, 2:2, 3:3}, \"Item1,Item2,Item3\""
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty(dict1) == {'name':'susan', 'number': '+91-963-3533'}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'a': 1, 'b': 2}) == {'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'b': 2, 'c': 3}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}) == {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({}) == {}, 'Empty dictionary'\nassert     drop_empty({'key':1, 'key2':2, 'key3':3}) == {'key':1, 'key2':2}, 'Empty keys'\nassert     drop_empty({'key':'value', 'key2':2}) == {'key':'value'}, 'Empty values'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1}\nassert     drop_empty({}) == {}"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\",\"key4\":\"value4\",\"key5\":\"value5\",\"key6\":\"value6\"}) == {\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\",\"key4\":\"value4\",\"key5\":\"value5\",\"key6\":\"value6\"}, \"Wrong result\"\nassert     drop_empty({\"key1\": \"value1\",\"key2\": \"value2\",\"key3\": \"value3\",\"key4\": \"value4\"}) == {\"key1\": \"value1\",\"key2\": \"value2\",\"key3\": \"value3\",\"key4\": \"value4\"}, \"Wrong result\"\nassert     drop_empty({\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}) == {\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}, \"Wrong result\"\nassert     drop_empty({\"key1\":\"value1\",\"key2\":\"value2\"}) == {\"key1\":\"value1\",\"key2\":\"value2\"}, \"Wrong result\"\nassert     drop_empty({\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\",\"key4\":\"value4\",\"key5\":\"value5\",\"key6\":\"value6\"}) == {\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\",\"key4\":\"value4\",\"key5\":\"value5\",\"key6\":\"value6\"}, \"Wrong result\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({'id': 1, 'value': 1, 'children': {\n                    'id': 2, 'value': 2, 'children': {\n                    'id': 3, 'value': 3, 'children': {}}}}, 0) == {'id': 1, 'value': 1, 'children': {'id': 2, 'value': 2, 'children': {'id': 3, 'value': 3}}}}\n\nassert     drop_empty({'id': 1, 'value': 1, 'children': {\n                    'id': 2, 'value': 2, 'children': {\n                    'id': 3, 'value': 3, 'children': {}}}}, 1) == {'id': 1, 'value': 1, 'children': {'id': 2, 'value': 2, 'children': {'id': 3, 'value': 3}}}\n\nassert     drop_empty({'id': 1, 'value': 1, 'children': {\n                    'id': 2, 'value': 2, 'children': {\n                    'id': 3, 'value': 3, 'children': {}}}}}, 2) == {'id': 1, 'value': 1, 'children': {'id': 2, 'value': 2, 'children': {'id': 3, 'value': 3}}}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product([3, 6, -2, -5]) == 18, \"wrong max_product\"\nassert max_product([1, 2, 3, 4, 5]) == 120, \"wrong max_product\"\nassert max_product([1, 2, 4, 5, 10]) == 200, \"wrong max_product\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product([1,2,3,4,5]) == 30\nassert     max_product([2,3,4,5,6]) == 60\nassert     max_product([1,2,3,4,5,6]) == 120\nassert     max_product([1,2,3,4,5,6,7,8]) == 720\nassert     max_product([1,2,3,4,5,6,7,8,9,10]) == 900\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product([0,6,5,-4,2,2]) == 24\nassert     max_product([3,5,-4,6,-1,2]) == 18\nassert     max_product([4,-1]) == 4\nassert     max_product([0,4,-1]) == 4\nassert     max_product([1,2,3,4,5]) == 30\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    max_product([3, 6, -2, -5, 7, 3]) == \n    [[3, 6, -2], [3], [-5, 7, 3], [-2], [-5, 7, 3], [-2], [-5], -2, 7, 3], \n    'Wrong answer'\n\nprint('The maximum product of a subarray is', max_product([3, 6, -2, -5, 7, 3]))"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product([1,2,3,4,5]) == 120\nassert     max_product([1,2,3]) == 6\nassert     max_product([1,2,3,4,5,6]) == 720\nassert     max_product([-10,10]) == 200\nassert     max_product([-10,-10]) == 10\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product([1,2,3,4,5]) == 30\nassert     max_product([-4,5,-6,2,8,-2]) == 120\nassert     max_product([-8,-3,-2,-5,-6]) == 24\nassert     max_product([-10,5,8,10,7,9]) == 18\nassert     max_product([1,1,1,1]) == 3\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert max_product([1, 2, 3, 4]) == 24\nassert max_product([1, 2, 3, 4, 5]) == 60\nassert max_product([4, 5, 6, 7, 8, 9]) == 84\nassert max_product([1, 2, 3, 4, 5]) == 24\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise((1,2,3)) == ((1+2),(2+3),(3+1))\nassert     add_pairwise((1,2,3,4)) == ((1+2+3),(2+3+4),(3+1+4),(4+1+2))"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"PASSED\")"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_pairwise((0, 1, 2, 3, 4, 5)) == (0, 3, 6, 10, 14, 19)\nassert     add_pairwise((1, -2, -3)) == (-1, 2, 4)\nassert     add_pairwise((1, 2, 3, 4, 5, 6, 7)) == (1, 3, 5, 7, 9, 11, 13)\nassert     add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9)) == (1, 3, 5, 7, 9, 11, 13, 15, 17)\nassert     add_pairwise((-1, 2, 3, 4, 5, 6, 7, 8, 9)) == (-1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_pairwise((2,3)) == (2,4)\nassert     add_pairwise((7,1)) == (8,2)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_pairwise((1,2,3,4,5)) == (2,3,4,5,6)\nassert     add_pairwise((4,5,6)) == (5,6,7)\nassert     add_pairwise((6,7,8,9)) == (7,8,9,10)\n\n\n\n\ndef add_pairwise_numpy(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple using numpy library.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_pairwise((2, 4, 5)) == (2, 6, 7)\nassert     add_pairwise((-1, 1, 2)) == (-2, -3, 1)\nassert     add_pairwise((-10, 20, 30)) == (10, 40, 50)\nassert     add_pairwise((-1, 2, 3)) == (-2, 2, 3)\nassert     add_pairwise((0, 2, 3)) == (0, 4, 3)"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([1,2,3,4,5], 5) == 24\nassert     find_remainder([-1,-2,-3,-4,-5], 5) == -75\nassert     find_remainder([1,0,1,0,1], 5) == 0\nassert     find_remainder([1,-2,-3,-4,-5], 5) == 0\nassert     find_remainder([0,0,0,0,0], 5) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_remainder([1,2,3], 5) == 3, \"test 1 failed\"\nassert     find_remainder([1,4,9], 5) == 0, \"test 2 failed\"\nassert     find_remainder([-1,2,-3,4], 5) == 1, \"test 3 failed\"\nassert     find_remainder([0,2,3], 5) == 0, \"test 4 failed\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder([5, 6, 7], 10) == 0\nassert     find_remainder([1, 5, 7], 10) == 15\nassert     find_remainder([1, 5, 7], -10) == 0\nassert     find_remainder([1, 5, 7], -100) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([2,5,10,20,50,100],5) == 25, \"Wrong Output for find_remainder\"\nassert     find_remainder([2,5,10,20,50,100],100) == 0, \"Wrong Output for find_remainder\"\n\ndef find_remainder_sorted(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_remainder([1,2,3,4,5],10) == 45\nassert     find_remainder([9,1,2,3,4,5],10) == 45\nassert     find_remainder([2,4,3,5,1],10) == 45\nassert     find_remainder([1,5,9,7,11,13,15,23,25,27,29,31,33,35],10) == 20\nassert     find_remainder([1,2,3,4,5,6],10) == 30"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_remainder([2, 5], 3) == (2, 0)\nassert     find_remainder([2, 3, 4], 2) == (0, 3, 0)\nassert     find_remainder([2, 3, 4], 3) == (0, 0, 4)\nassert     find_remainder([2, 3, 4], 4) == (2, 3, 0)\nassert     find_remainder([2, 3, 4], 5) == (0, 0, 0)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([1, 2, 3], 4) == -1\nassert     find_remainder([4, 2, 1], 4) == -1\nassert     find_remainder([2, 1, 5], 4) == 5\nassert     find_remainder([4, 2, 1], 5) == -1\nassert     find_remainder([2, 1, 5], 6) == -1\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_Consecutive([1, 3, 2, 4, 5, 7]) == True, \"False\"\nassert check_Consecutive([1, 3, 5, 5, 7]) == True, \"False\"\nassert check_Consecutive([1, 3, 4, 5, 7]) == False, \"False\"\nassert check_Consecutive([1, 3, 5, 5, 8]) == False, \"False\"\nassert check_Consecutive([1, 3, 4, 5, 7, 9, 10]) == False, \"False\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \"Consecutive\"\nassert     check_Consecutive([1, 2, 3, 6, 7, 8, 9, 10, 11]) == True, \"Consecutive\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 10, 11, 12, 13]) == True, \"Consecutive\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13]) == False, \"Consecutive\"\nassert     check_Consecutive([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True, \"Consecutive\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([0, 1, 2, 3]) == True, 'Expected True'\nassert     check_Consecutive([0, 1, 2, 4]) == False, 'Expected False'\nassert     check_Consecutive([2, 2, 2, 2]) == False, 'Expected False'\nassert     check_Consecutive([2, 2, 3, 4]) == True, 'Expected True'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([0,1,2,3,4,5,6,7,8]) == True, \"Should return True.\"\nassert     check_Consecutive([0,1,2,3,4,5,5,6,7]) == False, \"Should return False.\"\nassert     check_Consecutive([0,1,2,3,4,5,6,7,8,9]) == False, \"Should return False.\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([1,2,3,4]) == True, \"Wrong output\"\nassert     check_Consecutive([1,2,3,5]) == False, \"Wrong output\"\nassert     check_Consecutive([1,2,3,4,5]) == False, \"Wrong output\"\nassert     check_Consecutive([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_Consecutive([3,4,5,6,7,8,9]) == True, 'Input number is not consecutive'\nassert check_Consecutive([4,5,7,7,8,9]) == False, 'Input list contains consecutive numbers'\nassert check_Consecutive([3,3,3,3,3,3,3]) == False, 'Input list contains consecutive numbers'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]) == True, 'Wrong Answer'\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False, 'Wrong Answer'\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, 'Wrong Answer'\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False, 'Wrong Answer'\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False, 'Wrong Answer'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncheck_Consecutive([1, 2, 3, 4, 5, 6])\ncheck_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9])\ncheck_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ncheck_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\ncheck_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([(2, 3), (2, 4), (3, 3), (5, 6)], [(1, 2), (5, 6)]) == \\\n            [(2, 3), (2, 4), (3, 3), (5, 6)]\nassert     tuple_intersection([(2, 3), (2, 4), (3, 3), (5, 6)], [(1, 2), (5, 6)]) == \\\n            [(1, 2), (2, 4), (5, 6)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection((1, 2, 3), (1, 2, 3, 4, 5)) == (1, 2, 3)\nassert tuple_intersection((1, 2, 3), (1, 2, 3, 4, 5, 6)) == ()\nassert tuple_intersection((1, 2, 3, 5), (1, 2, 3, 5, 6)) == (1, 2, 3)\nassert tuple_intersection((1, 2, 3, 4, 5, 6), (1, 2, 3)) == (1, 2, 3)\nassert tuple_intersection((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([(1,2,3),(1,2,4)], [(1,2),(3,4)]) == [(1,2,3),(1,2,4)]\n\nassert     tuple_intersection([(1,2,3),(2,3,4)], [(1,2),(3,4)]) == [(1,2,3)]\n\nassert     tuple_intersection([(1,2,3),(2,3,4)], [(1,2),(1,3)]) == [(1,2,3)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection([(1, 2), (2, 3), (3, 4), (1, 3), (2, 4), (1, 2)], [(2, 3), (3, 4), (1, 3), (2, 4), (1, 2)]) == [(2, 3), (3, 4)]\nassert tuple_intersection([(1, 2), (2, 3), (3, 4), (1, 3), (2, 4), (1, 2)], [(2, 3), (1, 2), (1, 3), (2, 4), (1, 2), (3, 4)]) == []\nassert tuple_intersection([(1, 2), (2, 3), (3, 4), (1, 3), (2, 4), (1, 2)], [(2, 3), (1, 2), (1, 3), (2, 4), (1, 2), (3, 4)]) == []\nassert tuple_intersection([(1, 2), (2, 3), (3, 4), (1, 3), (2, 4), (1, 2)], [(1, 2), (2, 3), (1, 3), (2, 4), (1, 2), (3, 4)]) == [(1, 2)]\nassert tuple_intersection([(1, 2), (2, 3), (3, 4), (1, 3), (2, 4), (1, 2)], [(2, 3), (1, 2), (1, 3), (2, 4), (1, 2), (3, 4)]) == [(1, 2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection([(1,2),(3,4),(5,6)], [(1,2),(3,4),(5,6)]) == [(1,2),(3,4),(5,6)]\nassert tuple_intersection([(1,2),(3,4),(5,6)], [(5,6),(1,2),(3,4)]) == [(5,6),(1,2)]\nassert tuple_intersection([(1,2),(3,4),(5,6)], [(5,6),(1,2),(3,4),(1,2)]) == [(1,2),(1,2)]\nassert tuple_intersection([(1,2),(3,4),(5,6)], [(3,4),(1,2),(3,4)]) == [(3,4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([(1,2), (2,4), (3,6)], [(1,2), (2,3), (3,4)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (2,4), (3,6)], [(1,2), (2,3)]) == [(1,2)]\nassert tuple_intersection([(1,2), (2,4), (3,6)], [(1,2), (2,3)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (2,4), (3,6)], [(1,2), (2,3), (3,4)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (2,4), (3,6)], [(1,2), (3,4)]) == [(1,2), (3,4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(1,),(2,),(4,)], [(3,),(4,),(6,),(7,)]) == [(3,),(4,)]\nassert     tuple_intersection([(2,),(4,)], [(1,),(3,),(5,)]) == [(1,),(3,)]\nassert     tuple_intersection([(1,2,3),(2,3,4),(3,4,5)], [(1,2),(2,3),(3,4)]) == [(1,2),(2,3),(3,4)]\nassert     tuple_intersection([], [(1,2),(2,3),(3,4)]) == []\nassert     tuple_intersection([(2,),(4,)], [(3,),(4,),(6,),(7,)]) == [(3,),(4,)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    (0, 1) in tuple_intersection([(1, 3), (3, 6), (3, 8)], [(1, 3), (5, 7), (7, 9)])\nassert \n    (0, 3) in tuple_intersection([(1, 3), (3, 6), (3, 8)], [(0, 3), (5, 7), (7, 9)])\nassert \n    (0, 2) in tuple_intersection([(1, 3), (3, 6), (3, 8)], [(0, 3), (5, 7), (7, 9)])\nassert \n    (0, 1) in tuple_intersection([(1, 3), (3, 6), (3, 8)], [(0, 2), (5, 7), (7, 9)])\nassert \n    (1, 2) in tuple_intersection([(1, 3), (3, 6), (3, 8)], [(0, 2), (5, 7), (7, 9)])\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], [(1, 2), (2, 3)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], [(1, 2), (5, 6), (2, 3)]) == [(1, 2), (5, 6)]\nassert     tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], [(1, 2), (5, 6)]) == [(1, 2), (5, 6)]\nassert     tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4)]\nassert     tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], [(1, 2), (5, 6)]) == [(1, 2), (5, 6)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([(1,2),(3,4)],[(2,3),(4,5)]) == [(2,3)], \"Wrong answer\"\nassert     tuple_intersection([(1,2),(3,4)],[(4,5),(2,3)]) == [(2,3)], \"Wrong answer\"\nassert     tuple_intersection([(1,2,3),(4,5)],[(2,3),(4,5)]) == [(2,3),(4,5)], \"Wrong answer\"\nassert     tuple_intersection([(1,2,3),(4,5)],[(3,4),(2,3)]) == [], \"Wrong answer\"\nassert     tuple_intersection([(1,2),(3,4)],[(2,3),(3,4)]) == [], \"Wrong answer\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nreplace_char(\"cat\",\"a\",\"e\") == \"cat\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char(str1=\"hello\", ch='l', newch='p') == 'hippop'\nassert     replace_char(str1=\"goodbye\", ch='o', newch='g') == 'ggopgp'\nassert     replace_char(str1=\"\", ch='h', newch='p') == 'p'\nassert     replace_char(str1=\"h\", ch='o', newch='g') == 'gp'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_char(\"cat\", \"s\", \"u\") == \"cu\"\nassert     replace_char(\"dog\", \"s\", \"u\") == \"du\"\nassert     replace_char(\"hc\", \"s\", \"u\") == \"uc\"\nassert     replace_char(\"cat\", \"d\", \"u\") == \"cu\"\nassert     replace_char(\"dog\", \"d\", \"u\") == \"d\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('ABC', 'a', 'A') == 'ABC'\n    replace_char('Abc', 'b', 'B') == 'AbBc'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('Abc', 'd', 'D') == 'AbD'\n    replace_char('abc', 'a', 'Z') == 'AbZc'\n    replace_char('ABC', 'a', 'A') == 'ABzC'\n    replace_char('ABC', 'b', 'B') == 'Abc'\n    replace_char('ABC', 'c', 'C') == 'AbC'\n    replace_char('ABC', 'a', 'A') == 'AbC'\n    replace_char('ABC', 'd', 'D') == 'AbD'\n    replace_char('abc', 'a', 'Z') == 'AbZc'\n    replace_char('abc', 'a', 'A') == 'AbZc'\n    replace_char('ABC', 'a', 'A') == 'ABc'\n    replace_char('ABC', 'b', 'B') == 'Abc'\n    replace_char('ABC', 'c', 'C') == 'AbC'\n    replace_char('ABC', 'a', 'A') == 'AbC'\n    replace_char('ABC', 'b', 'B') == 'AbC'\n    replace_char('ABC', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'Z') == 'Abc'\n    replace_char('abc', 'a', 'A') == 'Abc'\n    replace_char('abc', 'b', 'B') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'Abc'\n    replace_char('abc', 'a', 'A') == 'Abc'\n    replace_char('abc', 'b', 'B') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'Abc'\n    replace_char('abc', 'a', 'Z') == 'Abc'\n    replace_char('abc', 'a', 'A') == 'Abc'\n    replace_char('ABC', 'a', 'A') == 'ABC'\n    replace_char('abc', 'b', 'B') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'Abc'\n    replace_char('abc', 'a', 'A') == 'Abc'\n    replace_char('abc', 'd', 'D') == 'AbD'\n    replace_char('abc', 'a', 'Z') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('ABC', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'd', 'D') == 'AbD'\n    replace_char('abc', 'a', 'Z') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('ABC', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'd', 'D') == 'AbD'\n    replace_char('abc', 'a', 'Z') == 'Abc'\n    replace_char('abc', 'a', 'A') == 'Abc'\n    replace_char('abc', 'b', 'B') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'd', 'D') == 'AbD'\n    replace_char('abc', 'a', 'Z') == 'Abc'\n    replace_char('abc', 'a', 'A') == 'Abc'\n    replace_char('abc', 'b', 'B') == 'Abc'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'AbC'\n    replace_char('abc', 'b', 'B') == 'AbC'\n    replace_char('abc', 'c', 'C') == 'AbC'\n    replace_char('abc', 'a', 'A') == 'Ab"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert replace_char('abc','a','A') == 'Abc'\nassert replace_char('ab','b','B') == 'Ab'\nassert replace_char('abc','cd','ABC') == 'ABC'\nassert replace_char('hello','l','L') == 'Helo'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_char('abc', 'c', 'd') == 'abd'\nassert     replace_char('cde', 'b', 'B') == 'cDE'\nassert     replace_char('ABC', 'A', 'Z') == 'ZC'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char('abcdef', 'd', 'e') == 'edef', \"replace_char(abcdef, 'd', 'e') should be edef\"\nassert     replace_char('abcdef', 'a', 'z') == 'abczz', \"replace_char(abcdef, 'a', 'z') should be abcz\"\nassert     replace_char('abcd', 'z', 'a') == 'a', \"replace_char(abcd, 'z', 'a') should be a\"\nassert     replace_char('', 'z', 'a') == '', \"replace_char('', 'z', 'a') should be ''\"\nassert     replace_char('abcd', 'z', 'a') == 'abcd', \"replace_char(abcd, 'z', 'a') should be abcd\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_char('a','b','a') == 'a'\nassert     replace_char('a','b','c') == 'c'\nassert     replace_char('a','b','b') == 'b'\nassert     replace_char('a','c','a') == 'a'\nassert     replace_char('ab','b','c') == 'c'\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({'a': 2, 'b': 1, 'c': 0, 'd': -1}) ==\\\n        {'a': 0, 'b': 1, 'c': 2, 'd': -1}\nassert     sort_counter({'x': 1, 'y': 0, 'z': -2}) ==\\\n        {'y': 0, 'x': 1, 'z': -2}\n\n\n\ndef uniques(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    assert uniques([1,2,2,3]) == [1,2,3]\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_counter({\"a\":2,\"c\":3,\"b\":4}) ==    sorted({\"a\":2,\"b\":4,\"c\":3}) \nassert     sort_counter({\"c\":3,\"b\":4,\"a\":2}) ==    sorted({\"a\":2,\"b\":4,\"c\":3}) \nassert     sort_counter({\"c\":3,\"b\":4,\"a\":2,\"e\":1,\"d\":2}) ==    sorted({\"a\":2,\"b\":4,\"d\":2,\"e\":1,\"c\":3,\"b\":4}) \nassert     sort_counter({\"a\":5,\"c\":3,\"b\":4}) ==    sorted({\"c\":3,\"b\":4,\"a\":5}) \nassert     sort_counter({\"c\":3,\"b\":4,\"a\":2,\"e\":1,\"d\":2}) ==    sorted({\"a\":2,\"b\":4,\"d\":2,\"e\":1,\"c\":3,\"b\":4}) \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4}) == \\\n        {'d': 4, 'e': 5, 'b': 2, 'c': 3, 'a': 1}\nassert     sort_counter({'a': 1, 'e': 5, 'b': 2, 'c': 3, 'd': 4}) == \\\n        {'d': 4, 'e': 5, 'b': 2, 'a': 1, 'c': 3}\n\ndef get_frequent_itemset(D, k, min_sup):\n    '''\n    Write a function to get the frequent itemsets in a transactional database.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_unique_characters(text):\n    '''\n    Write a function to return the set of unique characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({1:4,3:2,4:1,2:1}) == {2:1,4:1,1:4,3:2}\nassert     sort_counter({1:4,2:2,3:1,4:1}) == {1:4,2:2,3:1,4:1}\nassert     sort_counter({1:4,2:2,3:1,4:1,5:1}) == {1:4,2:2,3:1,4:1,5:1}\nassert     sort_counter({1:4,2:2,3:1,4:1,5:1,6:1}) == {1:4,2:2,3:1,4:1,5:1,6:1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({1:2,2:1,3:4}) == {1:2,3:4,2:1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_counter({\"a\":\"a\", \"b\":\"b\", \"c\":\"c\", \"d\":\"d\"}) == \\\n            {\"a\": [\"a\"], \"b\": [\"b\"], \"c\": [\"c\"], \"d\": [\"d\"]}\n\ndef sort_counter_1(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({}) == None, 'error 1'\nassert     sort_counter({1:2}) == None, 'error 2'\nassert     sort_counter({1:1,2:1,3:1}) == {1:1,2:1,3:1}, 'error 3'\nassert     sort_counter({'a':2, 'b':2, 'c':1, 'd':2}) == {'a':2, 'c':1, 'b':2, 'd':2}, 'error 4'\nassert     sort_counter({'a':1, 'b':1, 'c':1, 'd':1}) == {'a':1, 'b':1, 'c':1, 'd':1}, 'error 5'\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({1:7, 2:4, 3:5, 4:5, 5:3, 6:3, 7:1}) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7}\nassert     sort_counter({1:7, 2:4, 3:5, 4:5, 5:3, 6:3, 7:1}) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7}\nassert     sort_counter({1:7, 2:4, 3:5, 4:5, 5:3, 6:3, 7:1}) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7}\nassert     sort_counter({1:7, 2:4, 3:5, 4:5, 5:3, 6:3, 7:1}) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7}\nassert     sort_counter({1:7, 2:4, 3:5, 4:5, 5:3, 6:3, 7:1}) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7}\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nbig_sum([-5, 2, -4, -4, 4, 6]) == 8\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbig_sum([10, 4, 2, 231, 90, 54, 5, 12, 8, 7]) == 624\nassert big_sum([10, 4, 2, 231, 90, 54, 5, 12, 8, 7, 234]) == 300\nassert big_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 23\nassert big_sum([10, 4, 2, 231, 90, 54, 5, 12, 8, 7, 234]) == 554\nassert big_sum([]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_sum([2,3,4,10,5]) == 18\nassert     big_sum([1,2,3,4]) == 9\nassert     big_sum([-1,2,-3,4]) == 4\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([5, 20, -2, 2]) == 12\nassert     big_sum([5, 20, -2, 2]) == 15\n\n\ndef big_sum_v2(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_sum([5,10,0,-1]) == 15\nassert     big_sum([5,10,-100,3]) == 3\nassert     big_sum([5,10,3,1]) == 8\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_sum([-1, -10, 0, 3, 5, 9, 5, 5, 4, 7]) == 13, \"Should be 13\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_lower(\"Hello\") == \"hello\", \"Should return Hello\"\nassert     is_lower(\"hello\") == \"hello\", \"Should return Hello\"\nassert     is_lower(\"HELLO\") == \"hello\", \"Should return Hello\"\nassert     is_lower(\"HELLO WORLD\") == \"hello world\", \"Should return Hello World\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # test the function\n    print(\"Pass\" if is_lower(\"camelot\") == \"camelot\" else \"Fail\")\n    print(\"Pass\" if is_lower(\"Camelot\") == \"camelot\" else \"Fail\")\n    print(\"Pass\" if is_lower(\"Camelot\") == \"camelot\" else \"Fail\")\n    print(\"Pass\" if is_lower(\"Camelot\") == \"camelot\" else \"Fail\")\n    print(\"Pass\" if is_lower(\"\") == \"\" else \"Fail\")\n    print(\"Pass\" if is_lower(\"camelot\") == \"\" else \"Fail\")\n    print(\"Pass\" if is_lower(\"\") == \"\" else \"Fail\")\n    print(\"Pass\" if is_lower(\"\") == \"\" else \"Fail\")\n    "
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \n\ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef make_lower(string):\n    '''\n    Write a python function to make the string in lower case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower(\"hello\") == \"hello\", \"Should return hello\"\nassert     is_lower(\"Hello\") == \"hello\", \"Should return hello\"\nassert     is_lower(\"HELLO\") == \"hello\", \"Should return hello\"\nassert     is_lower(\"HELLO\") == \"hello\", \"Should return hello\"\n\ndef is_upper(string):\n    '''\n    Write a python function to check whether the given string is all upper case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n    Write a python function to validate that the given password is in correct\n    format.\n    Password should be at least 6 characters long and contains atleast one digit,\n    lowercase and uppercase character.\n    '''\ndef is_valid_password(password):\n    '''\n    Write a python function to validate that the given password is in correct\n    format.\n    Password should be at least 6 characters long and contains atleast one digit,\n    lowercase and uppercase character.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower(\"a\") == False\nassert is_lower(\"A\") == False\nassert is_lower(\"abc\") == True\nassert is_lower(\"ABC\") == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower('HELLO') == True,'string.lower() method returns lower case'\nassert     is_lower('HeLlO') == True,'string.lower() method returns lower case'\n\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase(\"Lets    GO\") == \"Lets GO\"\nassert     remove_lowercase(\"Lets GO\") == \"Lets GO\"\nassert     remove_lowercase(\"Lets    GO\") == \"Lets GO\"\nassert     remove_lowercase(\"Lets GO\") == \"Lets GO\"\nassert     remove_lowercase(\"Lets    GO\") == \"Lets GO\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase(\"aabbcc\") == \"abc\"\nassert     remove_lowercase(\"Aabbcc\") == \"abc\"\nassert     remove_lowercase(\"aBbCc\") == \"abc\"\nassert     remove_lowercase(\"ABC\") == \"abc\"\nassert     remove_lowercase(\"AbC\") == \"abc\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"aBcD\") == \"abc\", \"Should return ABC\"\nassert     remove_lowercase(\"AaBb\") == \"abc\", \"Should return ABC\"\nassert     remove_lowercase(\"ABcD\") == \"ABC\", \"Should return ABC\"\nassert     remove_lowercase(\"ABCD\") == \"ABC\", \"Should return ABC\"\nassert     remove_lowercase(\"abc\") == \"abc\", \"Should return ABC\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_lowercase('GeeksForGeeks') == 'Geeksforgeeks'\nassert     remove_lowercase('GeeksforGeeks') == 'Geeksforgeeks'\nassert     remove_lowercase('GeeksForGeeks') == 'Geeksforgeeks'\n\nassert     remove_lowercase('GeeksForGeeks') == 'Geeksforgeeks'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nstr1='acbdedeef'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase('hello') == 'hll'\nassert     remove_lowercase('hello world') == 'hll wrd'\nassert     remove_lowercase('HELLO WORLD') == 'HLW'\n\ndef remove_even_character(str1):\n    '''\n    Write a function to remove even character from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_lowercase(\"i love python\") == \"i love python\"\nassert     remove_lowercase(\"I love Python\") == \"I love python\"\nassert     remove_lowercase(\"i love python\") == \"i love python\"\nassert     remove_lowercase(\"i Love Python\") == \"i love python\"\n\n'''\nMethod-1:\n    - the key idea of method-1 is to find all the lowercase, then replace it with \"\" and then return the string with \"\" instead of lowercase.\n    - use regular expression to find and replace.\n'''\ndef remove_lowercase_1(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    import re\n    str1 = re.sub(r'[a-z]', \"\", str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_lowercase('') == '' \nassert     remove_lowercase('Aa') == 'a'\nassert     remove_lowercase('AaBb') == 'ab'\nassert     remove_lowercase('AaBbCc') == 'abc'\nassert     remove_lowercase('AaBbCcDd') == 'abcded'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase('test') == 'test'\nassert     remove_lowercase('Test') == 'Test'\nassert     remove_lowercase('test ') == 'test'\nassert     remove_lowercase('test  ') == 'test'\n\ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove whitespaces from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_Digit(1234) == 4\nassert first_Digit(1234) == 4\nassert first_Digit(9876) == 2\nassert first_Digit(9876) == 2"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_Digit(123) == 2, \"test 1 failed\"\nassert     first_Digit(42) == 2, \"test 2 failed\"\nassert     first_Digit(1020) == 1, \"test 3 failed\"\nassert     first_Digit(9) == 1, \"test 4 failed\"\nassert     first_Digit(12) == 1, \"test 5 failed\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(741) == 7\nassert     first_Digit(0) == 0\nassert     first_Digit(65) == 1\nassert     first_Digit(1) == 1\nassert     first_Digit(-1) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_Digit(1234567890) == 0, 'Should be zero'\nassert     first_Digit(123) == 0, 'Should be zero'\nassert     first_Digit(11111) == 1, 'Should be one'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    first_Digit(17891) == 1\n    first_Digit(89131) == 1\n    first_Digit(1234567890) == 8\n    first_Digit(23) == 2\n    first_Digit(-12) == -1\n    first_Digit(0) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_Digit(2) == 2, \"First Digit Failed\"\nassert     first_Digit(99) == 1, \"First Digit Failed\"\nassert     first_Digit(99.9) == 1, \"First Digit Failed\"\nassert     first_Digit(999) == 2, \"First Digit Failed\"\nassert     first_Digit(99999) == 1, \"First Digit Failed\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(123) == '1', 'first_Digit should return 1'\nassert     first_Digit(12345) == '1', 'first_Digit should return 1'\nassert     first_Digit(123456) == '0', 'first_Digit should return 0'\nassert     first_Digit(12345678) == '8', 'first_Digit should return 8'\nassert     first_Digit(123456789) == '9', 'first_Digit should return 9'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(first_Digit(11))\nprint(first_Digit(11.4))\nprint(first_Digit(11.05))\nprint(first_Digit(11.5))\nprint(first_Digit(0.11))\nprint(first_Digit(11.006))\n\n\n\ndef first_Digit_2(n) : \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_Digit(0) == 0, \"Wrong output\"\nassert     first_Digit(123) == 1, \"Wrong output\"\nassert     first_Digit(123456789) == 1, \"Wrong output\"\nassert     first_Digit(987654321) == 0, \"Wrong output\"\nassert     first_Digit(9876543210) == 0, \"Wrong output\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef last_Digit(n) : \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9], 'Wrong Answer'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nSplit([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9] \nassert \nSplit([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9,11]\n\nprint('All Passed')\nprint('------------------------')\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9], \"error\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9], \"error\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11], \"error\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 11, 13], \"error\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 3, 5, 7, 9, 11, 13], \"error\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\n    Return a dictionary containing the names of people and how many times each person appears in the list. \n    The dictionary should have names as keys and the counts as values.\n    If there are duplicates, assign the first appearance to each name. \n    The order of the dictionary's values must not be changed.\n    \n'''\n\ndef SortDict(list):\n    '''\n    Write a python function which takes a dictionary and returns a new dictionary with the values sorted from largest to smallest.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([3, 7, 5, 3, 9, 1, 12, 6, 3]) == [3, 9, 1, 12, 6, 3]\nassert     Split([]) == []\nassert     Split([3, 2, 5, 7, 4, 3, 9]) == [3, 9, 4, 7, 3]\nassert     Split([3, 5, 7, 4, 9, 3, 1]) == [7, 9, 4, 3, 3]"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5], \"Should return [1,3,5]\"\nassert     Split([1,2,3,4,5,6]) == [1,3,5,7,9], \"Should return [1,3,5,7,9]\"\nassert     Split([]) == [], \"Should return []\"\nassert     Split([1]) == [1], \"Should return []\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7]\nassert     Split([]) == []\nassert     Split([1, 2, 3]) == [1, 3]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5]) ==[1,3,5], \"Error\"\nassert     Split([]) ==[], \"Error\"\nassert     Split([3,4,6,7,8,9]) ==[3,6,9], \"Error\"\n\ndef Split2(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == []\n\n'''\nWrite a python function which takes a list of integers as the input and returns a list of all the multiples of 5 from that list.\nHint: Use \"for loop\" to complete the task.\n'''\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndifference(3) == 6\ndifference(0) == 0\ndifference(10) == 1000\ndifference(2) == 262\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     difference(0) == 0, \"Your function should return 0\"\nassert     difference(3) == 27, \"Your function should return 27\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     difference(5) == 25, 'Incorrect answer'\nassert     difference(4) == 20, 'Incorrect answer'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     difference(3) == 6, \"incorrect result\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_positive_numbers(n):\n    '''\n    Write a python function to count the number of positive numbers between 1 and n.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     difference(10) == 8\nassert     difference(100) == 98\nassert     difference(1000) == 1000\nassert     difference(10000) == 9999\nassert     difference(100000) == 99998"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     difference(0) == 0, \"First input should be 0\"\nassert     difference(1) == 1, \"First input should be 1\"\nassert     difference(2) == 1, \"First input should be 1\"\nassert     difference(3) == 2, \"First input should be 2\"\nassert     difference(4) == 2, \"First input should be 2\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 1\nassert     difference(3) == 0\nassert     difference(4) == 1\nassert     difference(5) == 2\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 0, \"wrong\"\nassert     find_Odd_Pair([2,4,6,8],4) == 1, \"wrong\"\nassert     find_Odd_Pair([1,4,8,10],4) == 2, \"wrong\"\nassert     find_Odd_Pair([3,5,7,9],4) == 3, \"wrong\"\nassert     find_Odd_Pair([2,3,4,6],4) == 0, \"wrong\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\" :\n    \n    # Read input\n    A = list(map(int,input().split()))\n    N = int(input())\n    \n    # function call\n    print(find_Odd_Pair(A,N))"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5], 6) == 3\nassert     find_Odd_Pair([1,2,3,4,5], 7) == 0\nassert     find_Odd_Pair([1,2,3,4,5], 8) == 4\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7], 8) == 3\nassert     find_Odd_Pair([1,2,3,4,5,6,7], 1) == 0\nassert     find_Odd_Pair([1,2,3,4,5,6,7], 8) == 2\nassert     find_Odd_Pair([], 1) == 0\nassert     find_Odd_Pair([], 8) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4)==0, \"Wrong Answer\"\n\nassert     find_Odd_Pair([1,2,3,4],5)==1, \"Wrong Answer\"\n\nassert     find_Odd_Pair([1,2,3,4],6)==2, \"Wrong Answer\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5],5) == 2\nassert     find_Odd_Pair([1,2,3,4,5],6) == 0\nassert     find_Odd_Pair([1,2,3,4,5],7) == 1\nassert     find_Odd_Pair([1,2,3,4,5],8) == 2\nassert     find_Odd_Pair([1,2,3,4,5],9) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7,8],4) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8],5) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8],6) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8],7) == 1\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8],8) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair([1,3,2],2) == 1\nassert     find_Odd_Pair([1,3,2],6) == 2\nassert     find_Odd_Pair([1,3,2],5) == 2\nassert     find_Odd_Pair([1,3,2],4) == 2\nassert     find_Odd_Pair([1,2,4,3,5,6,7,8,9,10,11,12,13,14],15) == 3\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string(\"String\") == \"sTRING\"\nassert     toggle_string(\"String\") == \"sTRING\"\nassert     toggle_string(\"hello\") == \"hELLO\"\nassert     toggle_string(\"HELLO\") == \"hELLO\"\nassert     toggle_string(\"Hi  \") == \"iH\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string('Hello world') == 'hELLO wORLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\nassert     toggle_string('HELLO WORLD!') == 'hELLO wORLD!'\nassert     toggle_string('HELLO WORLD!!') == 'hELLO wORLD!!'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string('AAA') == 'aaAA'\nassert     toggle_string('AAA') == 'AAaA'\nassert     toggle_string('AA') == 'aAA'\nassert     toggle_string('A') == 'a'\nassert     toggle_string('a') == 'A'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string(\"\") == \"\"\nassert     toggle_string(\"test\") == \"tEST\"\nassert     toggle_string(\"This is a test!\") == \"THIS iS a TEST!\"\nassert     toggle_string(\"Test\") == \"tEST\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     toggle_string(\"string\") == \"tRiGStRiNg\"\nassert     toggle_string(\"HElLO\") == \"hElLo\"\nassert     toggle_string(\"heLLO\") == \"hEllO\"\nassert     toggle_string(\"HELLO\") == \"hEllO\"\nassert     toggle_string(\"HELLO\") == \"hEllO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string('hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hello'\nassert     toggle_string('hELLO') == 'Hello'\nassert     toggle_string('hELLO') == 'HELLO'\nassert     toggle_string('hello') == 'HELLO'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('Hello World') == 'hello world'\nassert     toggle_string('HELLO WORLD') == 'hello world'\nassert     toggle_string('Hello World') == 'hEllO wOrld'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\nassert     toggle_string('Hello world') == 'hEllO wOrld'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    toggle_string('Hello, world!') == 'hELLO, wORLD!'\n    toggle_string('hello, world!') == 'hELLO, wORLD!'\n    toggle_string('HELLO, WORLD!') == 'hELLO, wORLD!'\n    toggle_string('HELLOWORLD!') == 'hELLO, wORLD!'\n\ndef toggle_string_alternate(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string('PYTHON') == 'python'\nassert     toggle_string('PYTHON?') == 'PYTHON?'\nassert     toggle_string('PyTHON') == 'Python'\nassert     toggle_string('PythON') == 'pythON'\nassert     toggle_string('pYTHON') == 'pYTHON'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(12, 34) == 21\nassert     digit_distance_nums(456, 32) == 30\nassert     digit_distance_nums(35, 35) == 0\nassert     digit_distance_nums(1234, 5678) == 4430\n\ndef distance(point_1, point_2):\n    '''\n    Write a python function to find the distance between two points\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(2,2) == 0\nassert digit_distance_nums(3,2) == 1\nassert digit_distance_nums(2,3) == 1\nassert digit_distance_nums(3,3) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(1000,100) == 25\nassert     digit_distance_nums(100,200) == 100\nassert     digit_distance_nums(1,2) == 3\nassert     digit_distance_nums(2,3) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(1,2) == 1\nassert     digit_distance_nums(5,10) == 5\nassert     digit_distance_nums(1,22) == 1\nassert     digit_distance_nums(1,1) == 0"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(9, 20) == 1\nassert     digit_distance_nums(3, 9) == 1\nassert     digit_distance_nums(1, 7) == 1\nassert     digit_distance_nums(5, 6) == 1\nassert     digit_distance_nums(10, 13) == 1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(1, 4) == 3\nassert     digit_distance_nums(9, 1) == 9\nassert     digit_distance_nums(10, 6) == 0\nassert     digit_distance_nums(999, 9) == 9\nassert     digit_distance_nums(999, 999) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(123, 567) == 13\nassert     digit_distance_nums(12345, 567) == 0\nassert     digit_distance_nums(123456789, 123456789) == 0\nassert     digit_distance_nums(123456789, 567) == 0\nassert     digit_distance_nums(1234567890, 567) == 5\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digit_distance_nums(18, 2) == 2, \"There is an error in your code!\"\nassert     digit_distance_nums(20, 19) == 0, \"There is an error in your code!\"\nassert     digit_distance_nums(2, 20) == 6, \"There is an error in your code!\"\n\n'''\n    Solution 2:\n'''\ndef digit_distance_nums_2(n1, n2):\n    pass\n\n\ndef digit_distance_nums_3(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum([1,2,-1,3,4,-2,5], 6) == 14, \"Wrong result\"\nassert     max_sub_array_sum([2,-1,2,2,-1,-4,2,-5,2], 7) == 9, \"Wrong result\"\nassert     max_sub_array_sum([0,2,-1,2,0,-4,2,-5,2], 7) == 8, \"Wrong result\"\nassert     max_sub_array_sum([0,2,-1,2,0,-4,2,-5,2], 8) == 2, \"Wrong result\"\nassert     max_sub_array_sum([0,2,-1,2,0,-4,2,-5,2], 9) == 3, \"Wrong result\"\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([1, 2, 3, 4, 5], 4) == 5\nassert     max_sub_array_sum([1], 2) == 1\nassert     max_sub_array_sum([-1], 1) == -1\nassert     max_sub_array_sum([-1], 0) == -1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum([1, 2, 3, 4, -1, -2, -3, -4, -5, -6], 6) == 12\nassert     max_sub_array_sum([-2, -1, -3, -4, -5, -6], 6) == -1\nassert     max_sub_array_sum([1, 2, 3, 4, -1, -2, -3, -4, -5, -6], 7) == 13\nassert     max_sub_array_sum([1, 2, 3, 4, -1, -2, -3, -4, -5, -6], 0) == 0\nassert     max_sub_array_sum([-2, -1, -3, -4, -5, -6], 0) == -6\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nmax_sub_array_sum([3, 2, -6, 4, 7, -4, 10, -1, -2, 1, -3, 2], 7) == 2\nassert \nmax_sub_array_sum([0], 1) == 0\nassert \nmax_sub_array_sum([3, 2, -6, 4, 7, -4, 10, -1, -2, 1, -3, 2], -3) == -1\nassert \nmax_sub_array_sum([0], 1) == 0\nassert \nmax_sub_array_sum([3, 2, -6, 4, 7, -4, 10, -1, -2, 1, -3, 2], -4) == 4\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Max sub array will be sum of the array starting from index 0 to size - 1\n    max_sum = 0\n\n    for i in range(size):\n        temp_sum = 0\n        for j in range(i, size):\n            temp_sum += a[j]\n            max_sum = max(temp_sum, max_sum)\n\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements((1,2,3,4), (2,3,4)) == (1,2,3,4)\nassert     union_elements((1,2,3), (1,2,4)) == (1,2,3,4)\nassert     union_elements((2,3,4,5), (5,6)) == (2,3,4,5,6)\nassert     union_elements((1,2,3), (1,2,4)) == (1,2,3,4)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nSort the elements in ascending order in a list\n\nDefinition of the function\ndef sort_elements(elements):\n    '''\n    Write a function to sort the elements of a list in ascending order.\n\nInput Format\nThe only argument given is a list of integers.\nOutput Format\nReturn the sorted list in ascending order.\nFor example if the elements of the list are [10, 20, 30, 40, 50, 100] then the output should be sorted list should be [10, 20, 30, 40, 50, 100].\n\nSample Input\nlist = [10, 20, 30, 40, 50, 100]\nSample Output\nsorted(list) = [10, 20, 30, 40, 50, 100]\n'''\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1,3,4,5),(2,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3),(3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     union_elements(('A', 'B', 'C'), ('D', 'E', 'F')) == ('A', 'B', 'C', 'D', 'E', 'F')\nassert union_elements(('C', 'D', 'E'), ('A', 'B', 'C')) == ('A', 'B', 'C', 'D', 'E')\nassert union_elements(('A', 'B', 'C'), ('A', 'B', 'C')) == ('A', 'B', 'C')\nassert union_elements((), ()) == ()\nassert union_elements((), ('A', 'B', 'C')) == ('A', 'B', 'C')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     union_elements((1,2), (2,3)) == (1,2,3), \"Union elements 1-2-3\"\nassert     union_elements((1,2), (2,3)) == (1,2,3), \"Union elements 1-2-3\"\nassert     union_elements((3,2), (4,1)) == (1,2,3,4), \"Union elements 1-2-3-4\"\nassert     union_elements((3,2), (4,1)) == (1,2,3,4), \"Union elements 1-2-3-4\"\n\nprint('union_elements is working correctly!')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3), (4,)) == (1,2,3,4)\nassert     union_elements((1,2,3), (1,)) == (1,2,3,1)\nassert     union_elements((1,2), (3,4,5,6,7)) == (1,2,3,4,5,6,7)\nassert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3),(4,5,6,7)) == (1,2,3,4,5,6,7)\nassert     union_elements((1,2,3),(4,5,6,7,8)) == (1,2,3,4,5,6,7,8)\nassert     union_elements((1,2,3),(4,5,6,7,8,9)) == (1,2,3,4,5,6,7,8,9)\nassert     union_elements((1,2,3),(4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((1,2),(3,4,5)) == (1,2,3,4,5)\nassert     union_elements((2,3,4),(5,1,7)) == (1,2,3,4,5,7)\nassert     union_elements((5,6,7),(4,3,2)) == (2,3,4,5,6,7)\nassert     union_elements((1,2,3),(1,2)) == (1,2,3)\nassert     union_elements((),(1,2,3)) == (1,2,3)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max_Length([2,3,4,1,3,5,6,1]) == 7\nassert     Find_Max_Length([2,3,4,1,2,5,6,1]) == 5\nassert     Find_Max_Length([2,3,4,1,2,5,6,1,2]) == 8\nassert     Find_Max_Length([2,3,4,1,2,5,6,1,2,3]) == 8\nassert     Find_Max_Length([2,3,4,1,2,5,6,1,2,3,4]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([1, 2, 3, 4, 5]) == 5, Find_Max_Length([1, 2, 3, 4, 5])\nassert     Find_Max_Length([]) == 0, Find_Max_Length([])\nassert     Find_Max_Length([1, 2]) == 2, Find_Max_Length([1, 2])\nassert     Find_Max_Length([1, 2, 3]) == 3, Find_Max_Length([1, 2, 3])\nassert     Find_Max_Length([1, 2, 3, 4]) == 4, Find_Max_Length([1, 2, 3, 4])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9, \"Error. Your solution did not work\"\nassert Find_Max_Length([1,2,3,4]) == 4, \"Error. Your solution did not work\"\nassert Find_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 10, \"Error. Your solution did not work\"\nassert Find_Max_Length([1]) == 1, \"Error. Your solution did not work\"\nassert Find_Max_Length([]) == 0, \"Error. Your solution did not work\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([]) == 0\nassert Find_Max_Length([1,2,3,4]) == 4\nassert Find_Max_Length([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([[]]) == 0\nassert     Find_Max_Length([[1]]) == 1\nassert     Find_Max_Length([[1, 2]]) == 2\nassert     Find_Max_Length([[1, 2], [2]]) == 2\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([\"a\",\"b\",\"c\",\"d\"]) == 3\nassert     Find_Max_Length([\"a\",\"e\",\"f\",\"g\",\"h\"]) == 6\nassert     Find_Max_Length([\"z\"]) == 1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([]) == 0, 'Empty list'\nassert     Find_Max_Length([1]) == 1, 'One element'\nassert     Find_Max_Length([1,2]) == 2, 'Two elements'\nassert     Find_Max_Length([1,2,3]) == 3, 'Three elements'\nassert     Find_Max_Length([1,2,3,4]) == 4, 'Four elements'\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([]) == 0, \"Empty list\"\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9, \"Correct Answer\"\n\n\n\ndef Find_Min_Length(lst):\n  '''\n  Write a python function to find the length of the longest sublists.\n  '''\n  pass\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values(\"'hello' world\") == [\"hello\", \"world\"]\nassert     extract_values(\"'hello' world\") == [\"hello\", \"world\"]\nassert     extract_values(\"'hello' world\") == [\"hello\", \"world\"]\nassert     extract_values(\"'hello' 'world'\") == [\"hello\", \"world\"]\nassert     extract_values(\"'hello' 'world'\") == [\"hello\", \"world\"]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values(\"Hello World!\") == \"Hello World!\"\nassert     extract_values(\"Hi, Hi!\") == \"Hi\"\n\ndef extract_values_2(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values('\"I have a dog\"') == \"I have a dog\"\nassert     extract_values('\"I have a cat\"') == \"I have a cat\"\nassert     extract_values('\"I have a rat\"') == \"I have a rat\"\nassert     extract_values('\"I have a bird\"') == \"I have a bird\"\nassert     extract_values('\"I have a dog and a cat\"') == \"I have a dog and a cat\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values(\"The rain in Spain falls mainly in the plain.\")     == \"The rain in Spain falls mainly in the plain\"\nassert     extract_values(\"Hello! How are you? Eh, ok. The question is: What is your name?\")     == \"How are you?\"\nassert     extract_values(\"Your name is like your product name. Thanks.\")     == \"\"\nassert     extract_values(\"Your name is like your product name.\")     == \"Your name is like your product name.\"\nassert     extract_values(\"Your name is like your product name.\")     == \"Your name is like your product name.\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values(\"He said, \\\"hello\\\"\") == \"hello\", \"Should return 'hello'\"\nassert     extract_values(\"He said, \\\"hello\\\"\") == \"hello\", \"Should return 'hello'\"\nassert     extract_values(\"He said, \\\"hello\\\".\") == \"hello\", \"Should return 'hello'\"\nassert     extract_values(\"He said, \\\"hello\\\".\") == \"hello\", \"Should return 'hello'\"\nassert     extract_values(\"He said, \\\"hello\\\"! \") == \"hello\", \"Should return 'hello'\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    extract_values(\"hello 'hello'\") == 'hello'\n    extract_values(\"hello 'hello\") == 'hello'\n    extract_values(\"hello 'hello''\") == 'hello'\n    extract_values(\"hello 'hello' world\") == 'hello'\n    extract_values(\"hello 'hello' world\") == 'hello'\n    extract_values(\"hello\") == ''\n    extract_values(\"hello \\n world\") == ''\n    extract_values(\"hello 'hello''\") == 'hello'\n\ndef is_ip(address):\n    '''\n    Write a function to check whether the passed address string is a valid IP address or not.\n    IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal values, each ranging from 0 to 255, separated by dots (\".\"), e.g.,172.16.254.1;\n    Besides, leading zeros are allowed, so 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is also a valid IPv4 address.\n    However, the fourth value (the third in such IPv4 address) should be unquoted. For example, \"172.16.254.01\" and \"172.16.254.0\" are valid IPv4 addresses, but \"172.16.254.01\" and \"172.16.254.0\" are invalid IPv4 addresses.\n    In addition, leading zeros in the IPv6 address are also allowed, so 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is also a valid IPv6 address.\n    However, an IPv6 address can only be represented as 8 groups of four hexadecimal digits (each group representing 16 bits), \n    so 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is invalid.\n    '''\n    pass\n    "
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values('I like \"Python\".') == 'Python'\nassert     extract_values('I am a programmer.') == 'Python'\nassert     extract_values('I like \"Python\" and \"Kotlin\"') == 'Python'\nassert     extract_values('I am a programmer. I am a programmer.') == 'Python'\nassert     extract_values('I like \"Python\", \"Kotlin\" and \"Swift\".') == 'Python, Kotlin'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values('\"Redhat\" is a web company') == 'Redhat', \"Wrong output\"\nassert     extract_values('\"Redhat\" is a web company') == 'Redhat', \"Wrong output\"\nassert     extract_values('Redhat\" is a web company') == 'Redhat', \"Wrong output\"\n\nassert     extract_values('\"Redhat\" is a web company') == 'Redhat', \"Wrong output\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values('\"This is the first quote\"') == 'This is the first quote'\nassert     extract_values('\"This is the first quote\"') == 'This is the first quote'\nassert     extract_values('\"This is the first quote\"') == 'This is the first quote'\nassert     extract_values('\"This is the first quote\"') == 'This is the first quote'\nassert     extract_values('\"This is the first quote\"') == 'This is the first quote'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values(\"Hi John, how are you?\") == ['John', 'how', 'are', 'you']\nassert     extract_values(\"Hi John, what's your name?\") == ['John', 'what','s', 'your', 'name']\nassert     extract_values(\"\\\"hello world\\\"\") == [\"hello\", \"world\"]\nassert     extract_values(\"\\\"hello world\\\"\") == [\"hello\", \"world\"]\nassert     extract_values(\"\\\"hello world\\\"\") == [\"hello\", \"world\"]\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_Pairs([1, 2, 3],3) == 2\nassert count_Pairs([1, 2, 2, 3],3) == 1\nassert count_Pairs([1, 1, 1, 2],3) == 0\nassert count_Pairs([1, 1, 2, 2],3) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Pairs([0, 1, 2, 4, 5, 6, 7, 8, 9], 8) == 3\nassert     count_Pairs([0, 1, 2, 4, 5, 6, 7, 8, 9], 9) == 6\nassert     count_Pairs([0, 1, 2, 4, 5, 6, 7, 8, 9], 0) == 0\nassert     count_Pairs([0, 1, 2, 4, 5, 6, 7, 8, 9], 10) == 0"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Your Code Here\n\n    total_unOrdered_pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                total_unOrdered_pairs += 1\n\n    return total_unOrdered_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Pairs([1,2,3,4], 4) == 2 \nassert     count_Pairs([1,2,3,4], 5) == 3 \nassert     count_Pairs([1,2,3,4], 0) == 0\nassert     count_Pairs([2,2,2,2], 1) == 1 \nassert     count_Pairs([2,2,2,2], 2) == 2 \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Pairs([1,2,3],3) == 0, \"Invalid test case 1\"\nassert     count_Pairs([1,1,3],3) == 2, \"Invalid test case 2\"\nassert     count_Pairs([1,1,2,3],4) == 0, \"Invalid test case 3\"\nassert     count_Pairs([1,1,2,2],4) == 2, \"Invalid test case 4\"\nassert     count_Pairs([1,2,3,4],4) == 0, \"Invalid test case 5\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_Pairs_with_Sum(arr, n, sum): \n    '''\n    Given an array A[] and a number N. Find the number of pairs in the array which sum upto a given number. \n    '''\n    # code here\n    \n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split('abcd') == ['a','b','c','d'], \n        \"Fail on split('abcd')\"\nassert     split('abcd') == ['a','b','c','d'], \n        \"Fail on split('abcd')\"\nassert     split('abcd') == ['a','b','c','d'], \n        \"Fail on split('abcd')\"\nassert     split('abcd') == ['a','b','c','d'], \n        \"Fail on split('abcd')\"\nassert     split('abcd') == ['a','b','c','d'], \n        \"Fail on split('abcd')\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split('this is a test') == ['t', 'h', 'i','s', 'a','', 't', 'e','s','', 'i','s', 'a','', 't', 'h', 'i']\nassert     split('he is a test') == ['h', 'e','', 'i','','s', 'a','', 't', 'e','s','', 'i','s', 'a']\nassert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert     split('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert    split('0123456789') == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\nassert    split('0123456789ABCDEF') == ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\nassert    split('0X') == ['0', 'X']\nassert    split('-') == ['-']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert     split('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     ( split('abc') == ['a', 'b', 'c'] ) \nassert     ( split('ab') == ['a', 'b'] )\nassert     ( split('ab') == ['a', 'b'] )\nassert     ( split('ab') == ['a', 'b'] )\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_solution(expected, output):\n    \n    if expected == output:\n        print(\"Test case passed\")\n    else:\n        print(\"Test case failed\")\n        print(\"\\tExpected: \" + str(expected))\n        print(\"\\tOutput: \" + str(output))\n        \nif __name__ == '__main__':\n    \n    # Test 1\n    expected = ['a', 'b', 'c', 'd']\n    output = split('abcdef')\n    check_solution(expected, output)\n    \n    # Test 2\n    expected = ['a', 'b', '', 'c', 'd']\n    output = split('abc')\n    check_solution(expected, output)\n    \n    # Test 3\n    expected = ['a', 'b', '', '', '', 'c', 'd']\n    output = split('abcd')\n    check_solution(expected, output)\n    \n    # Test 4\n    expected = ['', 'a', '', '', '', 'b', '', '', '', 'c', '', '', '', 'd']\n    output = split('abcde')\n    check_solution(expected, output)\n    \n    # Test 5\n    expected = ['', 'a
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \" \".split(\" \") == [\"\",\"\",\"\",\"\",\"\",\"\"]\nassert \" \".join([\"\",\"\",\"\",\"\"]) == \" \"\nassert \"\".split() == []\nassert \" \".join([\"\",\"\",\"\",\"\"]) == \" \"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split(\"a\") == ['a']\nassert     split(\"ab\") == ['a', 'b']\nassert     split(\"abcd\") == ['a', 'b', 'c', 'd']\nassert     split(\"ab\") == ['a', 'b']\nassert     split(\"aa\") == ['a', 'a']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert     split(\"hi.hello.world\") == ['h', 'i', '.', 'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split('one') == ['o', 'n']\nassert     split('one.two') == ['o', 'n', '.', 't']\nassert     split('one.two.three') == ['o', 'n', '.', 't', '.', '3']\nassert     split('one.two.three.') == ['o', 'n', '.', 't', '.', '3', '.']\nassert     split('') == []\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a Python program to get the sum of the digits in a specified string of numbers.\n'''\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_digits(0) == 0, \nassert     sum_digits(100) == 0, \nassert     sum_digits(12) == 3, \nassert     sum_digits(1234) == 4, \nassert     sum_digits(1234.0) == 4, \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_digits(12345) == 15, \"incorrect sum_digits\"\nassert     sum_digits(1234) == 1, \"incorrect sum_digits\"\nassert     sum_digits(123) == 6, \"incorrect sum_digits\"\nassert     sum_digits(123456789) == 18, \"incorrect sum_digits\"\nassert     sum_digits(0) == 0, \"incorrect sum_digits\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(101) == 2, '101'\nassert     sum_digits(10) == 2, '10'\nassert     sum_digits(100) == 0, '100'\nassert     sum_digits(321) == 6, '321'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_digits(123) == 6\nsum_digits(456) == 10\nsum_digits(0) == 0\nsum_digits(-123) == 2\nsum_digits(-456) == -10\nsum_digits(-0) == 0\nsum_digits(1000000000000000000) == 0\nsum_digits(-1000000000000000000) == 0\nsum_digits(100000000000000000000) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_digits(0) == 0, \"This should return 0\"\nassert     sum_digits(1) == 1, \"This should return 1\"\nassert     sum_digits(15) == 9, \"This should return 9\"\nassert     sum_digits(300) == 15, \"This should return 15\"\n\nprint(\"You've completed the task! :-)\""
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(99) == 9 + 9\nassert     sum_digits(10) == 10\nassert     sum_digits(100) == 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1\nassert     sum_digits(0) == 0\nassert     sum_digits(-10) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(999) == 9\nassert     sum_digits(1230) == 15\nassert     sum_digits(0) == 0\nassert     sum_digits(1) == 1\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\n**Problem 6**\n\nWrite a function to determine whether a specified list is a rotated sorted list.\n'''\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function that checks whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     issort_list([1, 2, 3, 4]) == True\nassert     issort_list([4, 3, 2, 1]) == False\nassert     issort_list([1, 2, 1, 2]) == False\nassert     issort_list([4, 2, 1]) == True\nassert     issort_list([4, 2, 1, 3]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     issort_list([1,2,3])\nassert     issort_list([3,2,1])\nassert     issort_list([3,1,2]) == False\nassert     issort_list([3,2,1,0])\nassert     issort_list([0,2,3,1]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     issort_list([4,5,6,2]) == True, 'Wrong Answer'\nassert     issort_list([4,4,4,2]) == False, 'Wrong Answer'\nassert     issort_list([5,2,1,4]) == True, 'Wrong Answer'\nassert     issort_list([5,6,4,1]) == True, 'Wrong Answer'\nassert     issort_list([5,6,6,4]) == False, 'Wrong Answer'\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list(['a', 'd', 'c', 'e', 'b', 'f']) == False\nassert     issort_list(['a', 'd', 'c', 'e', 'b']) == True\nassert     issort_list(['d', 'a', 'c', 'e', 'b']) == False\nassert     issort_list(['a', 'd', 'c', 'e']) == False\nassert     issort_list(['a', 'c', 'e', 'd']) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     issort_list([0,1,2,3]) == True, \"The given list is not sorted\"\nassert     issort_list([1,2,3,0]) == False, \"The given list is not sorted\"\nassert     issort_list([0,1,1,2]) == True, \"The given list is not sorted\"\nassert     issort_list([2,1,1,0]) == True, \"The given list is not sorted\"\nassert     issort_list([0,2,1,1]) == True, \"The given list is not sorted\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     issort_list([]) == False\nassert     issort_list([1,2,3,4]) == True\nassert     issort_list([1,4,3,2]) == False\nassert     issort_list([2,1,3,4]) == False\n\ndef insort_list(list1):\n    '''\n    Write a function to insert a given element into a sorted list in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_sorted(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert empty_list(5) == []"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(3) ==  [{}, {}, {}]\nassert empty_list(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_list(3) == [{},{},{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_a(s):\n    '''\n    Write a function to count the number of times \n    the letter a occurs in a string.\n    '''\n    pass\n\ndef count_a(s):\n    '''\n    Write a function to count the number of times \n    the letter a occurs in a string.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(0) == [], 'incorrect result for length = 0'\nassert     empty_list(1) == [{}], 'incorrect result for length = 1'\nassert     empty_list(2) == [{}, {}], 'incorrect result for length = 2'\nassert     empty_list(3) == [{}, {}, {}], 'incorrect result for length = 3'\nassert     empty_list(4) == [{}, {}, {}, {}], 'incorrect result for length = 4'\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['a','b','c'],['d','e','f'],['g','h','i']]) == [['a','d','g'],['b','e','h'],['c','f','i']]\nassert     sort_sublists([['a','b','c'],['d','e','f'],['g','h','i']]) == [['g','h','i'],['a','b','c'],['d','e','f']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([\"apple\",\"banana\",\"orange\"]) == [\"apple\",\"orange\",\"banana\"], \"Wrong output\"\nassert sort_sublists([[\"apple\",\"banana\",\"orange\"],[\"cherry\",\"apple\"],[\"berry\",\"cherry\"],[\"orange\",\"berry\"]]) == [['cherry', 'apple', 'berry'], ['orange', 'cherry', 'apple'], ['orange', 'berry', 'cherry']], \"Wrong output\"\nassert sort_sublists([[\"apple\",\"banana\",\"orange\"],[\"cherry\",\"apple\"],[\"berry\",\"cherry\"],[\"orange\",\"berry\"]]) == [['cherry', 'apple', 'berry'], ['orange', 'cherry', 'apple'], ['orange', 'berry', 'cherry']], \"Wrong output\"\nassert sort_sublists([[\"apple\",\"banana\",\"orange\"],[\"cherry\",\"apple\"],[\"berry\",\"cherry\"],[\"orange\",\"berry\"]]) == [['cherry', 'apple', 'berry'], ['orange', 'cherry', 'apple'], ['orange', 'berry', 'cherry']], \"Wrong output\"\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([\"one\", \"two\", \"three\"]) == [[\"three\", \"two\", \"one\"], [\"three\", \"two\", \"one\"], [\"three\", \"two\", \"one\"]]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([['red', 'green', 'blue'], ['orange', 'yellow', 'white'], ['purple', 'cyan']]) == \n    [['red', 'orange', 'purple'], ['green', 'white', 'yellow'], ['blue', 'cyan','red']]\nassert     sort_sublists([['blue', 'green','red'], ['orange', 'yellow', 'purple'], ['white', 'cyan', 'blue']]) == \n    [['green', 'blue', 'white'], ['orange', 'yellow','red'], ['cyan', 'purple', 'orange']]\nassert     sort_sublists([['red', 'green', 'blue'], ['orange', 'yellow', 'white'], ['purple', 'cyan']]) == \n    [['blue', 'cyan','red'], ['green', 'orange', 'yellow'], ['purple', 'white', 'orange']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([\"cde\",\"fgh\",\"zio\"]) == \\\n            [\"zio\",\"cde\",\"fgh\"]\nassert     sort_sublists([\"gjk\",\"bce\",\"fgh\"]) == \\\n            [\"fgh\",\"bce\",\"gjk\"]"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([['d', 'd', 'c', 'b', 'a'], ['b', 'd', 'a', 'c', 'e'], ['a', 'c', 'e', 'd', 'd']]) == [['a', 'c', 'e', 'd', 'd'], ['b', 'd', 'a', 'c', 'e'], ['d', 'd', 'c', 'b', 'a']]\nassert sort_sublists([['d', 'd', 'c', 'b', 'a'], ['b', 'd', 'a', 'c', 'e'], ['a', 'c', 'e', 'd', 'd']]) == [['a', 'c', 'e', 'd', 'd'], ['b', 'd', 'a', 'c', 'e'], ['d', 'd', 'c', 'b', 'a']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test 1\n    list1 = [['I', 'like', 'a', 'cat'], ['I', 'like', 'a', 'dog'], ['a', 'cat', 'like', 'like', 'a', 'dog']]\n    sort_sublists(list1)\n    print(list1)\n\n    # Test 2\n    list2 = [['I', 'like', 'a', 'cat'], ['I', 'like', 'a', 'dog'], ['a', 'cat', 'like', 'like', 'a', 'dog']]\n    sort_sublists(list2)\n    print(list2)\n\n    # Test 3\n    list3 = [['a', 'b', 'c', 'd'], ['e', 'f', 'g'], ['h', 'i', 'j', 'k']]\n    sort_sublists(list3)\n    print(list3)\n\n    # Test 4\n    list4 = [['c', 'b', 'a'], ['d', 'f', 'e'], ['g', 'i', 'h']]\n    sort_sublists(list4)\n    print(list4"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([[4,4,4,3,3,1],\n    [7,7,7,6,6,5],\n    [1,1,1,1,1,1,1],\n    [2,2,3,4,4,4],\n    [3,3,3,3,5,5,6]]) == False, 'Failed first case.'\nassert     two_unique_nums([[4,4,4,3,3,1],\n    [7,7,7,6,6,5],\n    [1,1,1,1,1,1,1],\n    [2,2,3,4,4,4],\n    [3,3,3,3,5,5,6]]) == False, 'Failed second case.'\nassert     two_unique_nums([[4,4,4,3,3,1],\n    [7,7,7,6,6,5],\n    [1,1,1,1,1,1,1],\n    [2,2,3,4,4,4],\n    [3,3,3,3,5,5,6]]) == False, 'Failed third case.'\nassert     two_unique_nums([[4,4,4,3,3,1],\n    [7,7,7,6,6,5],\n    [1,1,1,1,1,1,1],\n    [2,2,3,4,4,4],\n    [3,3,3,3,5,5,6]]) == True, 'Failed fourth case.'\nassert     two_unique_nums([[4,4,4,3,3,1],\n    [7,7,7,6,6,5],\n    [1,1,1,1,1,1,1],\n    [2,2,3,4,4,4],\n    [3,3,3,3,5,5,6]]) == True, 'Failed fifth case.'\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums([1,2,3,4,5]) == [[1,2,3,4,5]]\nassert     two_unique_nums([1,1,1,2,3]) == [[1,1,1,2,3]]\nassert     two_unique_nums([1,1,2,1,3]) == [[1,1,2,3]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     two_unique_nums([1,2,3,3,3,3,4,5,6,7,8,9,10]) == True, \"incorrect output\"\nassert     two_unique_nums([1,2,3,3,3,3,4,5,6,7,8,9,10]) == True, \"incorrect output\"\nassert     two_unique_nums([1,2,3,3,3,3,4,5,6,7,8,9,10]) == True, \"incorrect output\"\nassert     two_unique_nums([1,2,3,3,3,3,4,5,6,7,8,9,10,10]) == True, \"incorrect output\"\nassert     two_unique_nums([1,2,3,3,3,3,4,5,6,7,8,9,10,11]) == False, \"incorrect output\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     two_unique_nums([[2, 4, 6], [5, 9, 11], [1, 3, 4], [6, 7, 8]]) == True\nassert     two_unique_nums([[2, 4, 6], [5, 9, 11], [1, 3, 4], [2, 3, 4]]) == False\nassert     two_unique_nums([[2, 4, 6], [5, 9, 11], [1, 3, 4], [3, 4]]) == False\nassert     two_unique_nums([[2, 4, 6], [5, 9, 11], [1, 3, 4], [6, 7, 8], [1, 2, 3]]) == True\nassert     two_unique_nums([[2, 4, 6], [5, 9, 11], [1, 3, 4], [6, 7, 8], [1, 2, 3], [4, 5, 6]]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef three_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([1, 1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     two_unique_nums([2, 1, 2, 3, 4, 4, 5]) == [2, 3, 4, 5]\nassert     two_unique_nums([1, 1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     two_unique_nums([2, 1, 1, 3, 4, 4, 5]) == [2, 3, 4, 5]\nassert     two_unique_nums([1, 1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums([1,2,2,3,3,4]) == [1,2,3,4], \"First test case is wrong\"\nassert     two_unique_nums([1,2,2,3,3,4,5]) == [1,2,3,4,5], \"Second test case is wrong\"\nassert     two_unique_nums([1,2,2,3,3,4,4]) == [1,2,3,4], \"Third test case is wrong\"\nassert     two_unique_nums([1,2,2,3,3,4,5,5]) == [1,2,3,4,5], \"Fourth test case is wrong\"\nassert     two_unique_nums([1,2,2,3,3,4,4,4,4]) == [1,2,3,4], \"Fifth test case is wrong\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     two_unique_nums(\n                [[2,3,3,2,4],\n                [3,3,3,3,3],\n                [4,4,4,4,4,4]]) == [[2,3,4],\n                    [3,3,3],\n                    [4,4,4,4,4]]\n\nassert two_unique_nums(\n        [[1,1,1,1],\n        [1,2,2,2],\n        [1,1,3,3],\n        [1,1,1]]) == [[1,1,1],\n            [1,1,3],\n            [1,1]]\n\nassert two_unique_nums(\n        [[1,1,1,1,1],\n        [1,2,2,2,2],\n        [1,1,3,3,3,3],\n        [1,1,1]]) == [[1,1,1,1],\n            [1,1,3,3],\n            [1,1]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_product([1,2,4,1,2,4,4,4,4,2,4,1,2,4]) == 10\nassert unique_product([1,2,1,2,1,2,1,2,1,2]) == 8\nassert unique_product([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]) == 18\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1,1,2,2,2,3,3]) == 6\nassert     unique_product([1,2,3,1,2,3,1,2,3]) == 3\nassert     unique_product([1,2,3,4,5,5,5]) == 1\nassert     unique_product([1,1,2,2,2,3,4]) == 6\nassert     unique_product([1,1,2,2,2,3,3]) == 6\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([0, 1, 2, 2, 3, 4, 5]) == 30, \\\n            \"Expected: 30, Actual: \" + str(unique_product([0, 1, 2, 2, 3, 4, 5]))\nassert     unique_product([0, 1, 1, 1, 1, 1]) == 1, \\\n            \"Expected: 1, Actual: \" + str(unique_product([0, 1, 1, 1, 1]))\nassert     unique_product([0, 1, 1, 1, 1, 2]) == 6, \\\n            \"Expected: 6, Actual: \" + str(unique_product([0, 1, 1, 1, 1, 2]))\nassert     unique_product([]) == 1, \\\n            \"Expected: 1, Actual: \" + str(unique_product([]))\nassert     unique_product(['a', 'b', 'a', 'c', 'd', 'b', 'c']) == 8, \\\n            \"Expected: 8, Actual: \" + str(unique_product(['a', 'b', 'a', 'c', 'd', 'b', 'c']))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([1, 2, 3, 1, 4, 5]) == 120\nassert     unique_product([2, 4, 5, 6, 6, 7]) == 210\nassert     unique_product([1, 1, 2, 2]) == 2\n\nprint('All tests passed!')\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([1, 1, 2, 3, 2, 3, 4, 1, 4, 5, 4]) == 8\nassert     unique_product([1, 2, 3, 4, 4, 4, 4, 5]) == 6\nassert     unique_product([1, 2, 3, 4, 5]) == 3\nassert     unique_product([1, 1, 1, 1]) == 1\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([1,2,3,4,5,6,7,8]) == 120, \"Wrong output\"\nassert unique_product([1,2,3,4,5,6,7,8,9,10]) == 362880, \"Wrong output\"\nassert unique_product([]) == 1, \"Wrong output\"\nassert unique_product([1,2,3,4,5,6,7,8]) == 120, \"Wrong output\"\nassert unique_product([1,2,3,4,5,6,7,8,9,10]) == 362880, \"Wrong output\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_product([1,2,3,3,4,4,5,5,6,7,7,7]) == 336, 'Test 1 Failed!'\nassert     unique_product([1,2,3,4,5,6,7,7,8,9,10,11,11,11]) == 5040, 'Test 2 Failed!'\n\ndef unique_product_optimized(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    This function uses the fact that given an array, there is no duplicate values.\n    '''\n    # Initialize variable and get the length of list_data\n    product = 1\n    len_list = len(list_data)\n    # Loop through the list_data\n    for i in range(len_list):\n        # If the value does not exist in the dictionary, increment it\n        if list_data[i] not in dictionary:\n            dictionary[list_data[i]] = 1\n        else:\n            dictionary[list_data[i]] += 1\n    # Loop through the dictionary and multiply the value by the product\n    for key, value in dictionary.items():\n        product *= key ** value\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_product([1,2,3,2,3]) == 6, \"Test Case Failed\"\nassert     unique_product([1,2,3,2,4,5]) == 120, \"Test Case Failed\""
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(2,3) == 14\n\nprint(\"This test passed!\")\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(2,3) == 20.09, 'incorrect'\nassert     surfacearea_cylinder(1,2) == 8.57, 'incorrect'\nassert     surfacearea_cylinder(2,1) == 8.57, 'incorrect'\nassert     surfacearea_cylinder(0,2) == 0, 'incorrect'\nassert     surfacearea_cylinder(2,-2) == 0, 'incorrect'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(2,1) == 2, \"Surface area of cylinder is incorrect\"\nassert     surfacearea_cylinder(2,2) == 4, \"Surface area of cylinder is incorrect\"\nassert     surfacearea_cylinder(4,1) == 12, \"Surface area of cylinder is incorrect\"\nassert     surfacearea_cylinder(2.2,1.3) == None, \"Surface area of cylinder is incorrect\"\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cylinder(1,1) == 2*pi*1**2\nassert     surfacearea_cylinder(2,1) == 2*pi*2**2\nassert     surfacearea_cylinder(2,2) == 2*pi*1**2 + 2*pi*2**2\nassert     surfacearea_cylinder(3,1) == 2*pi*3**2\nassert     surfacearea_cylinder(4,1) == 2*pi*4**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(10,20) == 330\nassert     surfacearea_cylinder(2,5) == 109.9999999876543\nassert     surfacearea_cylinder(2,2) == 20\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    surfacearea_cylinder(5,4) == 32\n    surfacearea_cylinder(2,10) == 78\n    surfacearea_cylinder(3,10) == 50\n\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cylinder(1.1,4.5) == 20.68\nassert     surfacearea_cylinder(2.0,1.5) == 21.4\nassert     surfacearea_cylinder(3.0,1.5) == 37.9\nassert     surfacearea_cylinder(5.0,1.5) == 68.8\nassert     surfacearea_cylinder(7.0,1.5) == 100.5\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(1,2) == 2 * pi * 1, \"test1\"\nassert     surfacearea_cylinder(4,3) == 2 * pi * 4, \"test2\"\nassert     surfacearea_cylinder(2,2) == pi * 4, \"test3\"\n\nprint (\"TEST: Success!\")"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cylinder(1, 2) == 4.5\nassert     surfacearea_cylinder(1, 1) == 4.0\nassert     surfacearea_cylinder(0, 1) == 0.0\nassert     surfacearea_cylinder(1, 0) == 0.0\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array(A,B) == True, \"Incorrect\"\nassert     is_Sub_Array(A,C) == False, \"Incorrect\"\nassert     is_Sub_Array(A,D) == False, \"Incorrect\"\nassert     is_Sub_Array(B,A) == True, \"Incorrect\"\nassert     is_Sub_Array(B,C) == False, \"Incorrect\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([2, 3, 1, 2], [2]) == True, \"Example 1\"\nassert     is_Sub_Array([2, 3, 1, 2], [3, 1, 2]) == True, \"Example 2\"\nassert     is_Sub_Array([2, 3, 1, 2], [2, 3]) == True, \"Example 3\"\nassert     is_Sub_Array([2, 3, 1, 2], [1, 2]) == False, \"Example 4\"\nassert     is_Sub_Array([2, 3, 1, 2], [1, 2, 3]) == False, \"Example 5\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([0,1,2,3,4],    [0,1,2,3,4]) == True, 'is_Sub_Array should be True'\nassert     is_Sub_Array([0,1,2,3,4],    [0,1,2,3]) == False, 'is_Sub_Array should be False'\nassert     is_Sub_Array([0,1,2,3,4],    [0]) == False, 'is_Sub_Array should be False'\nassert     is_Sub_Array([0,1,2,3,4],    [4,1]) == False, 'is_Sub_Array should be False'\nassert     is_Sub_Array([],    [0,1,2,3,4]) == False, 'is_Sub_Array should be False'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sub_Array([],[]), \"Empty lists are sublists of each other\"\nassert     is_Sub_Array([1],[]), \"A list is sublist of an empty list\"\nassert     is_Sub_Array([],1), \"An empty list is sublist of a non empty list\"\nassert     is_Sub_Array([1],1), \"A list is sublist of a non empty list\"\nassert     is_Sub_Array([1,2,3],[1,2]), \"The first list is sublist of the second one\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3,4,5],\n                      [0,0,1,2,3]) == True, \\\n        \"WRONG\"\nassert     is_Sub_Array([1,2,3,4,5],\n                      [1,2,3,4,5]) == False, \\\n        \"WRONG\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_if_sequence_contains_sub_sequence_by_bit_mask(x,seq):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sub_Array(A = [1,2,3,4], B = [1,2,3]) == True, 'incorrect result'\nassert     is_Sub_Array(A = [1,2,3,4], B = [2,3,4]) == False, 'incorrect result'\nassert     is_Sub_Array(A = [1,2,3,4], B = []) == False, 'incorrect result'\nassert     is_Sub_Array(A = [], B = [1,2,3,4]) == False, 'incorrect result'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef longest_common_substring(str1, str2):\n    '''\n    Write a function that find the longest common substring between two string.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3,4],[1,2]) == True \nassert     is_Sub_Array([1,2,3,4],[1,2,3]) == True \nassert     is_Sub_Array([1,2,3,4],[1,2,3,4]) == True \nassert     is_Sub_Array([1,2,3,4],[1,2,3,5]) == False \nassert     is_Sub_Array([1,2,3,4],[1,2,4]) == False \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sub_Array([1,2,3,4,5], [1,2,3]) == True, \"error\"\nassert     is_Sub_Array([], [1,2,3]) == False, \"error\"\nassert     is_Sub_Array([1,2,3,4], [1,2,3]) == True, \"error\"\nassert     is_Sub_Array([1,2,3,4], []) == False, \"error\"\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3,4,5]) == True, \"error\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(10) == 0, 'Testing Wrong'\nassert     last_Digit_Factorial(0) == 1, 'Testing Wrong'\nassert     last_Digit_Factorial(1) == 1, 'Testing Wrong'\nassert     last_Digit_Factorial(100) == 9, 'Testing Wrong'\nassert     last_Digit_Factorial(12) == 1, 'Testing Wrong'\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit_Factorial(12) == 3\nassert     last_Digit_Factorial(123456789) == 8\nassert     last_Digit_Factorial(999893990979) == 9\nassert     last_Digit_Factorial(3777) == 2\nassert     last_Digit_Factorial(3778) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(16) == 1\nassert     last_Digit_Factorial(29) == 0\nassert     last_Digit_Factorial(100) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(0) == 1\nassert     last_Digit_Factorial(1) == 0\nassert     last_Digit_Factorial(2) == 1\nassert     last_Digit_Factorial(3) == 1\nassert     last_Digit_Factorial(4) == 2\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(100) == 0\nassert     last_Digit_Factorial(1234) == 2\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(7) == 7\nassert     last_Digit_Factorial(12345678) == 8\nassert     last_Digit_Factorial(876) == 7\nassert     last_Digit_Factorial(12) == 1\nassert     last_Digit_Factorial(10) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(2) == 2\nassert     last_Digit_Factorial(3) == 3\nassert     last_Digit_Factorial(4) == 4\nassert     last_Digit_Factorial(5) == 5\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlast_Digit_Factorial(10) == 9, 'last digit factorial failed'\nlast_Digit_Factorial(1) == 0, 'last digit factorial failed'\nlast_Digit_Factorial(1234) == 1, 'last digit factorial failed'\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(5) == 1\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(11) == 0\nassert     last_Digit_Factorial(999999) == 9\nassert     last_Digit_Factorial(0) == 1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert     interleave_lists([1,2],[3,4],[5,6]) == [1, 3, 5, 2, 4, 6]\nassert     interleave_lists([1,2],[3],[4]) == [1, 3, 4, 2]"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([1,2,3],[\"a\",\"b\"],[\"c\",\"d\"]) == [\"a\",\"c\",\"b\",\"d\",\"c\",\"b\",\"a\",\"d\"]\nassert     interleave_lists([1,2,3],[4,5],[\"a\",\"b\"]) == [\"a\",\"4\",\"b\",\"a\",\"4\",\"b\",\"a\",\"b\"]\nassert     interleave_lists([1,2,3,4],[5,6],[\"a\",\"b\",\"c\",\"d\"]) == [\"a\",\"5\",\"b\",\"c\",\"4\",\"b\",\"a\",\"d\",\"c\",\"b\",\"a\",\"d\",\"c\",\"b\",\"a\",\"d\"]"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9], \"Error!\"\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9],[10,11,12]) == [1,4,7,2,5,8,3,6,9,10,11,12], \"Error!\"\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7],[8,9,10]) == [1,5,2,6,7,3,8,9,10]\nassert     interleave_lists([1,2,3,4],[5,6,7],[8,9]) == [1,5,2,6,7,3,8,9,4]\nassert     interleave_lists([1],[2,3],[4,5,6]) == [1,2,3,4,5,6]\nassert     interleave_lists([1,2],[3,4],[5,6]) == [1,3,2,5,4,6]\nassert     interleave_lists([1,2,3],[4,5,6,7],[8,9,10]) == [1,4,2,5,3,6,7,8,9,10]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n\nassert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]\n\nassert     interleave_lists([1,2,3],[4,5,6,7],[8,9,10,11]) == [1,4,8,2,5,9,3,6,10,7,11]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1, 2, 3, 4], [5, 6, 7, 8], ['a', 'b', 'c', 'd']) ==     [1, 5, 2, 6, 3, 7, 4, 8, 'a', 'b', 'c', 'd']\nassert     interleave_lists([1, 2, 3, 4, 5], ['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']) ==     [1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 'f', 'g', 'h']\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     interleave_lists([1,2,3,4], [5,6,7,8], [9,10,11,12]) == \\\n    [1,5,9,2,6,10,3,7,11,4,8,12]\nassert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == \\\n    [1,4,7,2,5,8,3,6]\nassert     interleave_lists([], [], []) == []\nassert     interleave_lists([1,2,3], [4], [5,6,7]) == [1,4,5,2,6,3,7]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9],[10,11,12]) == [1,4,7,2,5,8,3,6,9,10,11,12]\nassert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]) == [1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16]\nassert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20]) == [1,5,9,13,2,6,10,14,3,7,11,15,4,8,12,16,17,18,19,20]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     interleave_lists([\"A\",\"B\",\"C\"],[\"D\",\"E\",\"F\"],[\"G\",\"H\",\"I\"]) == [\"A\",\"D\",\"B\",\"G\",\"E\",\"C\",\"F\",\"H\",\"I\"], \"Should be ['A','D','B','G','E','C','F','H','I']. Should be ['A','B','C','D','E','F','G','H','I']. Should be ['A','B','C','D','E','F','G','H','I']. \"\nassert     interleave_lists([1,2,3],[\"D\",\"E\",\"F\"],[\"G\",\"H\",\"I\"]) == [1,2,3, \"D\",\"E\",\"F\",\"G\",\"H\",\"I\"], \"Should be [1,2,3,D,E,F,G,H,I]. Should be [1,2,3,D,E,F,G,H,I]. Should be [1,2,3,D,E,F,G,H,I]. \"\nassert     interleave_lists([\"A\",\"B\",\"C\"],[\"D\",\"E\",\"F\"],[\"G\",\"H\",\"I\"]) == [\"A\",\"D\",\"B\",\"G\",\"E\",\"C\",\"F\",\"H\",\"I\"], \"Should be ['A','D','B','G','E','C','F','H','I']. Should be ['A','B','C','D','E','F','G','H','I']. Should be ['A','B','C','D','E','F','G','H','I']. \"\nassert     interleave_lists([1,2,3],[\"D\",\"E\",\"F\"],[\"G\",\"H\",\"I\"]) == [1,2,3, \"D\",\"E\",\"F\",\"G\",\"H\",\"I\"], \"Should be [1,2,3,D,E,F,G,H,I]. Should be [1,2,3,D,E,F,G,H,I]. Should be [1,2,3,D,E,F,G,H,I]. \"\nassert     interleave_lists([\"A\",\"B\",\"C\"],[1,2,3],[\"D\",\"E\",\"F\",\"G\"]) == [\"A\",\"1\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], \"Should be ['A','1','B','C','D','E','F','G']. Should be ['A','B','C','D','E','F','G']. Should be ['A','B','C','D','E','F','G']. \"\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((1,2), (2,3)) ==     (1,3)\nassert     find_dissimilar((1,2,3,4), (2,3,4)) ==     (1,3)\nassert     find_dissimilar((1,2,3,4,5,6), (2,3,4)) ==     (1,3)\nassert     find_dissimilar((1,2,3), (4,5,6)) ==     (1,3)\nassert     find_dissimilar((1,2,3), (2,3,4,5,6)) ==     (1,3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar((1,2,3),(2,3,4)) == 1\nassert     find_dissimilar((3,2,4),(1,2,3)) == 3\nassert     find_dissimilar((1,3,2),(2,3,4)) == 0\nassert     find_dissimilar((1,1,1),(2,2,2)) == -1\n\ntest_cases = [(1,2,3),(1,3,2),(3,1,2),(1,3,4),(3,1,4)]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar( (2, 3, 4, 4), (1, 3, 4, 6))     == (2, 3, 4)\nassert     find_dissimilar( (1, 2, 3, 4, 5, 6), (1, 2, 4, 5))    == (1, 2, 4, 5)\nassert     find_dissimilar( (2, 2, 3, 4, 5, 6), (1, 2, 4, 5))    == (2, 3, 4, 5)\n\nif __name__ == '__main__':\n    print('Testing the function \"find_dissimilar\"')\n    test_tup1 = (2, 3, 4, 4)\n    test_tup2 = (1, 3, 4, 6)\n    find_dissimilar(test_tup1, test_tup2)\n    print('Testing the function \"find_dissimilar\" passed.'"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar( (1, 2, 3, 4), (5, 6, 7, 8) ) == (4, 6, 2)\nassert     find_dissimilar( (5, 6, 7, 8), (1, 2, 3, 4) ) == (4, 2, 8)\nassert     find_dissimilar( (5, 6, 7, 8), (5, 7, 8, 1) ) == (6, 2)\nassert     find_dissimilar( (1, 1, 1, 1), (1, 1, 1, 1) ) == (1, 1)\nassert     find_dissimilar( (1, 1, 1, 1), (2, 2, 2, 2) ) == (1, 1)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar((1, 2, 3), (2, 4, 5)) == (1, 3)\nassert     find_dissimilar((5, 4, 3), (2, 4, 5)) == (1, 3)\nassert     find_dissimilar((3, 2, 1), (5, 4, 3)) == (1, 3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar((1, 2), (1, 2)) == (0, 0)\nassert     find_dissimilar((1, 2), (3, 4)) == (0, 1)\nassert     find_dissimilar((1, 2), (1, 3)) == (0, 0)\nassert     find_dissimilar((1, 2, 3), (1, 2, 4)) == (2, 1)\nassert     find_dissimilar((1, 2, 3), (1, 2, 3)) == (0, 0)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1,2),(1,1)) == (1,2)\nassert     find_dissimilar((2,1),(1,1)) == (2,1)\nassert     find_dissimilar((1,1),(1,2)) == (1,1)\nassert     find_dissimilar((0,1),(0,2)) == (0,1)\nassert     find_dissimilar((-1,1),(0,2)) == (-1,1)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_dissimilar((1, 1, 1), (1, 2, 3)) == (1, 2)\nassert     find_dissimilar((2, 1, 3), (1, 2, 3)) == (2, 1)\nassert     find_dissimilar((1, 2, 3), (1, 2, 3)) == (1, 2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((1,2,3,4),(4,3,2,1)) == (1,3)\nassert     find_dissimilar((1,2,3,4,5),(4,3,2,1)) == (1,5)\nassert     find_dissimilar((1,2,3,4,5),(1,2,3)) == (4,5)\nassert     find_dissimilar((1,2,3,4,5),(1,2,4)) == (4,5)\nassert     find_dissimilar((1,2,3,4,5),(1,4,2)) == (4,5)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_ele((1, 3, 4, 5, 2, 4), even) == (1, 3, 4, 2, 4)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_ele([(1,2),(3,4),(5,6),(7,8)], even_fnc) == (2,4,6,8)\nassert     even_ele([(1,2,3),(4,5,6),(7,8,9)], even_fnc) == (2,4,6,8)\nassert     even_ele([(1,2,3,4),(5,6,7,8),(9,10,11,12)], even_fnc) == (2,4,6,8)\nassert     even_ele([(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15)], even_fnc) == (2,4,6,8)\nassert     even_ele([(1,2,3,4,5,6),(7,8,9,10,11,12),(13,14,15,16,17,18)], even_fnc) == (2,4,6,8)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_ele(test_tuple, even_fnc) == tuple(filter(even_fnc, test_tuple))\nprint('correct')\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\neven_ele(\n        (\n            (1, 2, 3, 'a'),\n            (2, 3, 4, 'b'),\n            (3, 4, 5, 'c'),\n            (4, 5, 6, 'd'),\n            (5, 6, 7, 'e')\n        ), \n        lambda x: x[0] if type(x) == tuple else x) == \\\n        (\n            (1, 2, 3, 'a'),\n            (2, 3, 4, 'b'),\n            (3, 4, 5, 'c'),\n            (4, 5, 6, 'd')\n        )\n\neven_ele(\n        (\n            (1, 2, 3, 'a'),\n            (2, 3, 4, 'b'),\n            (3, 4, 5, 'c'),\n            (4, 5, 6, 'd'),\n            (5, 6, 7, 'e')\n        ), \n        lambda x: x[0] if type(x) == tuple else x) == \\\n        (\n            (1, 2, 3, 'a'),\n            (2, 3, 4, 'b'),\n            (3, 4, 5, 'c'),\n            (4, 5, 6, 'd')\n        )\n\n\n\neven_ele(\n        (\n            (1, 2, 3, 'a'),\n            (2, 3, 4, 'b'),\n            (3, 4, 5, 'c'),\n            (4, 5, 6, 'd'),\n            (5, 6, 7, 'e')\n        ), \n        lambda x: x[0] if type(x) == tuple else x) == \\\n        (\n            (1, 2, 3, 'a'),\n            (2, 3, 4, 'b'),\n            (3, 4, 5, 'c'),\n            (4, 5, 6, 'd')\n        )\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_ele([('a', 2), ('b', 3), ('c', 4), ('d', 5), ('e', 6), ('f', 7)], lambda x: x % 2 == 0) == ('a', 'b', 'c', 'd', 'e')\nassert even_ele([('a', 2), ('b', 3), ('c', 4), ('d', 5), ('e', 6), ('f', 7)], lambda x: x % 2!= 0) == ('a', 2, 'c', 4, 'f')\nassert even_ele([('a', 2), ('b', 3), ('c', 4), ('d', 5), ('e', 6), ('f', 7)], lambda x: x % 2 == 0) == ('a', 2, 'c', 4, 'f')\nassert even_ele([('a', 2), ('b', 3), ('c', 4), ('d', 5), ('e', 6), ('f', 7)], lambda x: x % 2!= 0) == ('a', 2, 3, 4, 5, 6)\nassert even_ele([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)], lambda x: x[0] % 2!= 0) == (2,4,6,8)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_ele((1,2,3,4,5), lambda x: x%2 == 0) == (1,2,3,4,5)\nassert     even_ele((1,2,3,4,5,6,7,8,9), lambda x: x%2 == 0) == (1,2,3,4,5,6,7,8,9)\nassert     even_ele((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (1,2,3,4,5,6,7,8,9,10)\nassert     even_ele((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 'df'), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 1), lambda x: x[2])\neven_ele(((1, 2, 3), ('a', 'b', 'c', 'd', (1, 2)), 5), lambda x: x[2]"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_ele((3,2,4,5,6,1,0),even_check)==True, \"Test Case 1 Failed\"\nassert     even_ele((1,2,3),even_check)==False, \"Test Case 2 Failed\"\nassert     even_ele((1,2,3,1,2,3),even_check)==False, \"Test Case 3 Failed\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surface_Area(1,1)==2, \"the surface area is 2\"\nassert     surface_Area(2,1)==4, \"the surface area is 4\"\nassert     surface_Area(5,5)==30, \"the surface area is 30\"\nassert     surface_Area(5,0)==0, \"the surface area is 0\"\nassert     surface_Area(1.5,1.5)==7.5, \"the surface area is 7.5\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surface_Area(2,10) == 50\nassert    surface_Area(0.5,0.5) == 25\nassert    surface_Area(2,10) == 50\nassert    surface_Area(10,100) == 500"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(5,7) == ((5+7)*2)\nassert     surface_Area(6,5) == ((6*5)*2)\nassert     surface_Area(12,6) == ((12*6)*2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surface_Area(0,10) == 0, \"surface_Area(0,10) should be 0\"\nassert     surface_Area(1,10) == 50, \"surface_Area(1,10) should be 50\"\nassert     surface_Area(2,10) == 250, \"surface_Area(2,10) should be 250\"\nassert     surface_Area(3,10) == 450, \"surface_Area(3,10) should be 450\"\nassert     surface_Area(4,10) == 1100, \"surface_Area(4,10) should be 1100\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('check pass')\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surface_Area(1,5) == 10, 'Wrong Output!'\nassert     surface_Area(2,5) == 14, 'Wrong Output!'\nassert     surface_Area(3,5) == 28, 'Wrong Output!'\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert surface_Area(3,4) == 14, \"surface_Area should have given 14\"\nassert surface_Area(4,2) == 16, \"surface_Area should have given 16\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surface_Area(1,2) == 4 \nassert     surface_Area(2,1) == 8 \nassert     surface_Area(3,4) == 20 \nassert     surface_Area(4,5) == 30 \nassert     surface_Area(5,6) == 35 \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(1,1) == 4\nassert     surface_Area(1,0) == 0\nassert     surface_Area(0,0) == 0\nassert     surface_Area(3,4) == 24\n\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({\"a\": 1, \"b\": 2}) == False, \"dictionary is empty!\"\nassert my_dict({\"a\": 1, \"b\": 2, \"c\": 3}) == True, \"dictionary is not empty!\"\n\n'''\nWrite a function that returns the nth Fibonacci number\n'''\n\ndef fib(n):\n    '''\n    Write a function that returns the nth Fibonacci number\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     my_dict({}) is False, \"Wrong Answer (1)\"\nassert     my_dict({\"a\": 1}) is False, \"Wrong Answer (2)\"\nassert     my_dict({\"a\": 1, \"b\": 2}) is True, \"Wrong Answer (3)\"\nassert     my_dict({\"a\": 1, \"b\": 2, \"c\": 3}) is True, \"Wrong Answer (4)\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not my_dict({})\nassert not my_dict({\"a\":1,\"b\":2})\nassert my_dict({\"a\":1,\"b\":2,\"c\":3})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     my_dict(dict()) == False\nassert     my_dict({\"test\": 1}) == True\nassert     my_dict({\"test\": \"string\"}) == True\n\n'''\nWrite a function to check if a dictionary is an empty dictionary\n'''\n\ndef my_function(dict1):\n    '''\n    Write a function to check if a dictionary is an empty dictionary\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     my_dict({}) is True, \"Empty dictionary\"\nassert     my_dict({\"a\":\"b\"}) is True, \"Empty dictionary\"\nassert     my_dict({\"a\":{}}) is False, \"Non empty dictionary\"\nassert     my_dict({\"a\":{\"b\":2}}) is False, \"Non empty dictionary\"\nassert     my_dict({\"a\":{\"b\":2},\"c\":1}) is True, \"Non empty dictionary\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict(dict()) == False\nassert     my_dict(dict1={\"apple\":\"apple\"}) == False\nassert     my_dict(dict1={\"apple\":\"apple\",\"banana\":\"banana\",\"orange\":\"orange\"}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert my_dict({}) == True\nassert not my_dict({1: 1}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict(dict1) == False, \"TEST FAILURE: my_dict\"\nassert     my_dict(dict2) == True, \"TEST FAILURE: my_dict\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     my_dict({}) == True, 'Dictionary is empty'\nassert     my_dict({1: 2}) == True, 'Dictionary contains key 1'\nassert     my_dict({1: 2, 3: 4, 5: 6}) == True, 'Dictionary contains key 2'\nassert     my_dict({1: 2, 3: 4, 5: 6, 7: 8}) == False, 'Dictionary contains key 3'\nassert     my_dict({'1': 2}) == False, 'Dictionary contains value 1'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(\"Reached end of doctests!\")"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 3\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\nassert     catalan_number(20) == 945\nassert     catalan_number(50) == 2175650\nassert     catalan_number(80) == 36005\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     catalan_number(1) == 2, 'Example 1'\nassert     catalan_number(2) == 2, 'Example 2'\nassert     catalan_number(4) == 5, 'Example 3'\nassert     catalan_number(5) == 14, 'Example 4'\n\ndef catalan_number_memo(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    assert catalan_number(1) == 1\n    assert catalan_number(2) == 1\n    assert catalan_number(3) == 2\n    assert catalan_number(5) == 7\n    "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert catalan_number(2) == 1\nassert catalan_number(3) == 2\nassert catalan_number(4) == 5\nassert catalan_number(5) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncatalan_number(0) == 1\ncatalan_number(1) == 1\ncatalan_number(2) == 2\ncatalan_number(3) == 4\ncatalan_number(4) == 8\ncatalan_number(5) == 12\ncatalan_number(6) == 24\ncatalan_number(7) == 44\ncatalan_number(8) == 128\ncatalan_number(9) == 926\ncatalan_number(10) == 1040\ncatalan_number(11) == 12592\ncatalan_number(12) == 25648\ncatalan_number(13) == 7840\ncatalan_number(14) == 93536\ncatalan_number(15) == 180640\ncatalan_number(16) == 362880\ncatalan_number(17) == 720\ncatalan_number(18) == 40320\ncatalan_number(19) == 141040\ncatalan_number(20) == 268880\ncatalan_number(21) == 626560\ncatalan_number(22) == 439360\ncatalan_number(23) == 362880\ncatalan_number(24) == 40320\ncatalan_number(25) == 720\ncatalan_number(26) == 362880\ncatalan_number(27) == 128960\ncatalan_number(28) == 129320\ncatalan_number(29) == 24880\ncatalan_number(30) == -7648\ncatalan_number(31) == -33480\ncatalan_number(32) == -13520\ncatalan_number(33) == -630\ncatalan_number(34) == -37640\ncatalan_number(35) == -20720\ncatalan_number(36) == -10240\ncatalan_number(37) == -52560\ncatalan_number(38) == -87180\ncatalan_number(39) == -51360\ncatalan_number(40) == -2160\ncatalan_number(41) == -117120\ncatalan_number(42) == -62400\ncatalan_number(43) == -33300\ncatalan_number(44) == -1180\ncatalan_number(45) == -660\ncatalan_number(46) == -37040\ncatalan_number(47) == -16000\ncatalan_number(48) == -8120\ncatalan_number(49) == -48000\ncatalan_number(50) == -27160\ncatalan_number(51) == -18480\ncatalan_number(52) == -9120\ncatalan_number(53) == -54600\ncatalan_number(54) == -29760\ncatalan_number(55) == -13840\ncatalan_number(56) == -63120\ncatalan_number(57) == -39600\ncatalan_number(58) == -21920\ncatalan_number(59) == -96160\ncatalan_number(60) == -63120\ncatalan_number(61) == -50400\ncatalan_number(62) == -37800\ncatalan_number(63) == -25400\ncatalan_number(64) == -20800\ncatalan_number(65) == -14400\ncatalan_number(66) == -7680\ncatalan_number(67) == -4720\ncatalan_number(68) == -2880\ncatalan_number(69) == -1320\ncatalan_number(70) == -7600\ncatalan_number(71) == -4960\ncatalan_number(72) == -3320\ncatalan_number(73) == -16800\ncatalan_number(74) == -9120\ncatalan_number(75) == -5760\ncatalan_number(76) == -3240\ncatalan_number(77) == -18240\ncatalan_number(78) == -9120\ncatalan_number(79) == -6120\ncatalan_number(80) == -39360\ncatalan_number(81) == -21680\ncatalan_number(82) == -9600\ncatalan_number(83) == -6920\ncatalan_number(84) == -4480\ncatalan_number(85) == -27600\ncatalan_number(86) == -14400\ncatalan_number(87) == -8040\ncatalan_number(88) == -5760\ncatalan_number(89) == -39360\ncatalan_number(90) == -21680\ncatalan_number(91) == -9120\ncatalan_number(92) == -6120\ncatalan_number(93) == -4320\ncatalan_number(94) == -28800\ncatalan_number(95) == -14400\ncatalan_number(96) == -7680\ncatalan_number(97) == -4960\ncatalan_number(98) == -3320\ncatalan_number(99) == -16800\ncatalan_number(100) == -9120\ncatalan_number(101) == -5760\ncatalan_number(102) == -3240\ncatalan_number(103) == -18240\ncatalan_number(104) == -9120\ncatalan_number(105) == -6120\ncatalan_number(106) == -39360\ncatalan_number(107) == -21680\ncatalan_number(108) == -9600\ncatalan_number(109) == -6920\ncatalan_number(110) == -4480\ncatalan_number(111) == -27600\ncatalan_number(112) == -14400\ncatalan_number(113) == -8040\ncatalan_number(114) == -5760\ncatalan_number(115) == -39360\ncatalan_number(116) == -21680\ncatalan_number(117) == -9120\ncatalan_number(118) == -6120\ncatalan_number(119) == -4320\ncatalan_number(120) == -28800\ncatalan_number(121) == -14400\ncatalan_number(122) == -7680\ncatalan_number(123) == -4960\ncatalan_number(124) == -3320\ncatalan_number(125) == -16800\ncatalan_number(126) == -9120\ncatalan_number(127) == -5760\ncatalan_number(128) == -3240\ncatalan_number(129) == -18240\ncatalan_number(130) == -9120\ncatalan_number(131) == -6120\ncatalan_number(132) == -39360\ncatalan_number(133) == -21680\ncatalan_number(134) == -9600\ncatalan_number(135) == -6920\ncatalan_number(136) == -4480\ncatalan_number(137) == -27600\ncatalan_number(138) == -14400\ncatalan_number(139) == -8040\ncatalan_number(140) == -5760\ncatalan_number(141) == -39360\ncatalan_number(142) == -21680\ncatalan_number(143) == -9120\ncatalan_number(144) == -6120\ncatalan_number(145) == -4320\ncatalan_number(146) == -28800\ncatalan_number(147) == -14400\ncatalan_number(148) == -7680\ncatalan_number(149) == -4960\ncatalan_number(150) == -3320\ncatalan_number(151) == -16800\ncatalan_number(152) == -9120\ncatalan_number(153) == -5760\ncatalan_number(154) == -3240\ncatalan_number(155) == -18240\ncatalan_number(156) == -9120\ncatalan_number(157) == -6120\ncatalan_number(158) == -39360\ncatalan_number(159) == -21680\ncatalan_number(160) == -9600\ncatalan_number(161) == -6920\ncatalan_number(162) == -4480\ncatalan_number(163) == -27600\ncatalan_number(164) == -14400\ncatalan_number(165) == -8040\ncatalan_number(166) == -5760\ncatalan_number(167) == -39360\ncatalan_number(168) == -21680\ncatalan_numbe"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert find_adverbs(\"I want to go to the gym. I can't believe that I'm going there. The gym is great and very enjoyable. I love the gym. I want to go back to it. It is great.\") == {\n    \"ly\": [9, 16, 19],\n    \"w\": [26, 28]\n}\n\nassert find_adverbs(\"She is very beautiful, she is so beautiful\") == {\n    \"ly\": [5, 8],\n    \"w\": [9, 12]\n}\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs(\"Tell me when you're ready to go\") ==     ['ly','me']\nassert     find_adverbs(\"I am ready to go\") ==     ['ly']\nassert     find_adverbs(\"Let's run!\") ==     []\nassert     find_adverbs(\"My friends go to the zoo.\") ==     ['ly','me', 'you', 'you','me', 'you','me', 'you','me', 'you']\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs(text = 'This is a test sentence.') == ['ly']\nassert     find_adverbs(text = 'This is a test sentence.') == ['ly']\nassert     find_adverbs(text = 'This is a test sentence. This is another sentence.') == []\nassert     find_adverbs(text = 'This is a test sentence. This is another sentence. And another one.') == ['ly']\nassert     find_adverbs(text = 'This is a test sentence. This is another sentence. And another one. And yet another.') == ['ly']\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs('the lyrics are so funny') == \"19\"\nassert     find_adverbs('the lyrics are funny') == \"\"\nassert     find_adverbs('the lyrics are funny') == \"\"\nassert     find_adverbs('the lyrics are so funny') == \"\"\nassert     find_adverbs('the lyrics are so funny') == \"\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverbs('They saw him with a big smile and I knew he was a burglar.') == { 'after': 'they saw him', 'ly': 'ly', 'pos': '22' }, 'incorrectly returns a dictionary'\nassert     find_adverbs('I just saw him with a big smile and I knew he was a burglar.') == { 'after': 'I just saw him', 'ly': 'ly', 'pos': '24' }, 'incorrectly returns a dictionary'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs(\"What a pretty funny movie! I hated it, it was so awful.\") == \"I hated it, it was so awful.\" \nassert find_adverbs(\"It's a pretty funny movie! I hated it, it was so awful.\") == None\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverbs('''Greetings! I have a slightly elaborated therapist. I was the \n                    previous therapist to a chronic disease. I am not pleased with\n                    this. I am a very depressed person. I love kids and family. I \n                    am also very concerned about my mental health. I am not happy \n                    with my family. I am very happy with my friends. I am a very\n                    happy person.''') == ['ly', 15, 24]\nassert     find_adverbs('''Greetings! I have a slightly elaborated therapist. I was the \n                    previous therapist to a chronic disease. I am not pleased with\n                    this. I am a very depressed person. I love kids and family. I \n                    am also very concerned about my mental health. I am not happy\n                    with my family. I am very happy with my friends. I am a very\n                    happy person.''') == ['ly', 10, 25]\nassert     find_adverbs('''Greetings! I have a slightly elaborated therapist. I was the \n                    previous therapist to a chronic disease. I am not pleased with\n                    this. I am a very depressed person. I love kids and family. I \n                    am also very concerned about my mental health. I am not happy\n                    with my family. I am very happy with my friends. I am a very\n                    happy person.''') == ['ly', 12, 23]\nassert     find_adverbs('''Greetings! I have a slightly elaborated therapist. I was the \n                    previous therapist to a chronic disease. I am not pleased with\n                    this. I am a very depressed person. I love kids and family. I \n                    am also very concerned about my mental health. I am not happy\n                    with my family. I am very happy with my friends. I am a very\n                    happy person.''') == ['ly', 9, 22]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverbs(\"All of us were extremely happy\") == \"happy\"\nassert     find_adverbs(\"There are a lot of happy people\") == \"\"\nassert     find_adverbs(\"The best case scenario\") == \"scenario\"\nassert     find_adverbs(\"This is a very bad case scenario\") == \"\"\nassert     find_adverbs(\"We will try to send the best case scenario\") == \"scenario\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_adverbs('My sister returned') == True\nassert find_adverbs('I am a student.') == False\nassert find_adverbs('Everything is fair in the dark, but today is not the day we began our mission.') == False\nassert find_adverbs('So, are you sure? The sky is blue and the sky is not blue.') == True\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs('The weather today is nice and it is nice') == (('temperature','weather'),0)\nassert     find_adverbs('The weather today is nice and it is nice') == (('temperature','weather'),0)\nassert     find_adverbs('The weather today is nice and it is nice') == (('temperature','weather'),0)\nassert     find_adverbs('The weather today is nice and it is nice') == (('temperature','weather'),0)\nassert     find_adverbs('The weather today is nice and it is nice') == (('temperature','weather'),0)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([(1,'apple',1),(2,'mango',2)],1)==[(2,'mango',2)]\nassert     expensive_items([(1,'apple',1),(2,'mango',2)],0)==[]\nassert     expensive_items([(1,'apple',1),(2,'mango',2)],3)==[(1,'apple',1)]\nassert     expensive_items([(1,'apple',1),(2,'mango',2)],2)==[(1,'apple',1)]\nassert     expensive_items([(1,'apple',1),(2,'mango',2)],5)==[]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([(1,3), (2,2), (3,1)], 2) == [(3,1), (2,2)]\nassert     expensive_items([(1,3), (2,2), (3,1)], 4) == [(3,1), (2,2), (1,3)]\nassert     expensive_items([(1,3), (2,2), (3,1)], 1) == [(3,1)]\nassert     expensive_items([(1,3), (2,2), (3,1)], 0) == []\nassert     expensive_items([(1,3), (2,2), (3,1)], 5) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items([\n  {\"name\": \"apple\", \"cost\": 1.2}, \n  {\"name\": \"orange\", \"cost\": 0.9}, \n  {\"name\": \"pear\", \"cost\": 1.5}, \n  {\"name\": \"grape\", \"cost\": 1.5}, \n  {\"name\": \"banana\", \"cost\": 0.3}, \n  {\"name\": \"dates\", \"cost\": 1.2}\n], 3) == ['grape', 'orange', 'dates']\n\ndef expensive_items_no_sort(items,n):\n  '''\n  Write a function to find the n most expensive items in a given dataset.\n  '''\n  # max heap implementation\n  max_heap = []\n\n  for item in items:\n    # max heap is a min heap\n    # negate the cost\n    heapq.heappush(max_heap, (-item['cost'], item['name']))\n    \n  return [name for _, name in heapq.nlargest(n, max_heap)]\n\n  # alternative\n  # for item in items:\n  #   heapq.heappush(max_heap, (item['cost'], item['name']))\n  # return heapq.nlargest(n, max_heap)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items([('chocolate', 1, 2), ('mango', 3, 4), ('strawberry', 5, 6)], 1) == ['mango','strawberry']\nassert     expensive_items([('chocolate', 1, 2), ('mango', 3, 4), ('strawberry', 5, 6)], 2) == ['strawberry','mango']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     expensive_items([{'item':1,'price':1},{'item':2,'price':4},{'item':3,'price':8}],1) == \\\n    [{'item':2,'price':4}]\nassert expensive_items([{'item':1,'price':1},{'item':2,'price':4},{'item':3,'price':8}],2) == \\\n    [{'item':1,'price':1},{'item':3,'price':8}]\nassert expensive_items([{'item':1,'price':1},{'item':2,'price':4},{'item':3,'price':8}],3) == \\\n    [{'item':1,'price':1},{'item':3,'price':8}]\nassert expensive_items([{'item':1,'price':1},{'item':2,'price':4},{'item':3,'price':8}],4) == \\\n    [{'item':2,'price':4}]\nassert expensive_items([{'item':1,'price':1},{'item':2,'price':4},{'item':3,'price':8}],5) == \\\n    []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     expensive_items([5,3,8,4,7],1) ==    [5], \"wrong\"\nassert expensive_items([5,3,8,4,7],2) ==    [5, 8], \"wrong\"\nassert expensive_items([5,3,8,4,7],3) ==    [5, 8, 7], \"wrong\"\nassert expensive_items([5,3,8,4,7],4) ==    [5, 8, 7, 4], \"wrong\"\nassert expensive_items([5,3,8,4,7],5) ==    [5, 8, 7, 4, 3], \"wrong\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     expensive_items([('A', 1000), ('B', 990), ('C', 800), ('D', 700)], 4) == ['C', 'B', 'D', 'A']\nassert     expensive_items([('A', 1000), ('B', 990), ('C', 800), ('D', 700)], 5) == ['D', 'C', 'A', 'B', 'B']\nassert     expensive_items([('A', 1000), ('B', 990), ('C', 800), ('D', 700)], 6) == ['D', 'C', 'A', 'B', 'B', 'A']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nexpensive_items([3,1,1,3],2) == [(3, 3), (1, 1)]\nassert \nexpensive_items([1,1,3,1],3) == [(1, 1), (1, 1), (3, 1)]\nassert \nexpensive_items([3,1,1,3],1) == [(3, 3)]\nassert \nexpensive_items([1,1,3,1],1) == [(1, 1)]\nassert \nexpensive_items([3,1,1,3],0) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nexpensive_items([0,2,1,3,4,5], 3) == [4,5,0]\nexpensive_items([0,2,1,3,4,5], 2) == [3,4]\nexpensive_items([0,2,1,3,4,5], 1) == [5]\n\ndef expensive_items_v2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import heapq\n    h = []\n    for item,price in items:\n        heapq.heappush(h, (-price, -item))\n        if len(h) > n:\n            heapq.heappop(h)\n    return [item for price,item in h]\n\nexpensive_items_v2([(0,2),(1,3),(4,4),(2,1),(5,5)], 4) == [4,5,1,0]\nexpensive_items_v2([(0,2),(1,3),(4,4),(2,1),(5,5)], 3) == [4,5,1]\nexpensive_items_v2([(0,2),(1,3),(4,4),(2,1),(5,5)], 1) == [5]\n\ndef slowest_trees(s, k):\n    '''\n    Write a function to find the k slowest trees in a forest.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sort_Arr(l):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_Arr([1,2,3,4], 2) == [[1,2], 3, 4]\nassert     split_Arr([1,2,3,4], 1) == [[1], 2, 3, 4]\nassert     split_Arr([1,2,3,4], 0) == [[1,2,3,4]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n\n\n\ndef kth_to_last_element_recursion(l, k):\n    '''\n    Write a recursive function to find kth to last element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_list(l):\n    '''\n    Write a python function to check if a list is empty, a list with 1 element and a list with 0 elements.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert split_Arr([1, 2, 3, 4, 5], 2) == [[1, 2], 3, 4, 5]\nassert split_Arr([1, 2, 3, 4, 5], 1) == [[1], [2, 3, 4, 5]]\nassert split_Arr([1, 2, 3, 4, 5], 4) == [[1], 2, 3, 4]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_Arr([1, 2, 3], 1) == [[1], [2], [3]]\nassert     split_Arr([1, 2, 3], 2) == [[1, 2], [3]]\nassert     split_Arr([1, 2, 3], 3) == [[1, 2, 3]]\nassert     split_Arr([1, 2, 3], 4) == [[1], [2], [3]]\nassert     split_Arr([1, 2, 3], 5) == [[1, 2], [3]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sort_Array(l, n):\n    '''\n    Write a python function to sort the elements at the nth position to the last position in the list.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([[]]) == ()\nassert     list_tuple([[]]) == ()\nassert     list_tuple([]) == ()\nassert     list_tuple([[]]) == ()\nassert     list_tuple([[1], [2], [3]]) == (1, 2, 3)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([1,'a','b']) == (1,'a','b')\nassert     list_tuple(['a','b','c']) == ('a','b','c')\nassert     list_tuple([True,False]) == (True,False)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([1,2,3,4,5]) == tuple([1,2,3,4,5])\nassert     list_tuple([1,1,1,1,1,1,1,1,1]) == tuple([1,1,1,1,1,1,1,1,1])\nassert     list_tuple(['a','b','c','d']) == tuple(['a','b','c','d'])\nassert     list_tuple((1,2,3,4,5)) == tuple((1,2,3,4,5))\nassert     list_tuple({1,2,3,4,5}) == tuple({1,2,3,4,5})\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), 'WRONG!'\nassert     list_tuple([1, '2', 3]) == (1, '2', 3), 'WRONG!'\nassert     list_tuple([1, 2, 3, 4]) == (1, 2, 3, 4), 'WRONG!'\nassert     list_tuple([]) == (), 'WRONG!'\nassert     list_tuple((1, 2, 3)) == (1, 2, 3), 'WRONG!'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), 'incorrect'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([1,2,3,4]) == (1, 2, 3, 4), \"Incorrect result\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), 'test 1 fail'\nassert list_tuple([]) == (), 'test 2 fail'\nassert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), 'test 3 fail'\nassert list_tuple([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2, 3, 4, 5, 6, 7, 8), 'test 4 fail'\nassert list_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'test 5 fail'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5)\nassert list_tuple(['a','b','c','d']) == ('a','b','c','d')\nassert list_tuple([1,1,2,1,2]) == (1,2,1,2,1)\n\n\ndef find_letter_count(word):\n    '''\n    Write a function to count the number of times each letter appears in a word.\n    '''\n    pass"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert list_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (1, 2, 3, 4, 5, 6, 7, 8, 9), 'Error in function list_tuple.'\nassert list_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9), 'Error in function list_tuple.'\nassert list_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 2, 3, 4, 5, 6, 7, 8, 9), 'Error in function list_tuple.'\nassert list_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 'Error in function list_tuple.'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nbig_diff([4,2,5,7,8,6,8,9,10]) == 8\nassert \nbig_diff([4,2,5,7,8,6,8,9,10,1]) == 0\nassert \nbig_diff([-2,1,3,5,2,8,7,5,6,1]) == 10\nassert \nbig_diff([5,2,3,4,6,7,9,0,1,2,4]) == 9\n\nprint(\"Your code is correct!\""
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_big_diff():\n    assert big_diff([10,3,5,6]) == 3\n    assert big_diff([7,2,10,9]) == 8\n    assert big_diff([2,5,6,8]) == 3\n    "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([1, 5, 10, 200, -20]) == 110, 'not correct'\nassert     big_diff([1, 5, -10, 200, -20]) == 110, 'not correct'\nassert     big_diff([10, 5, 200, -20, -20]) == 10, 'not correct'\nassert     big_diff([10, 20, 100, 120]) == 130, 'not correct'\nassert     big_diff([]) == 0, 'not correct'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_diff([0,1,2,3,4,5,6,7,8,9]) == 1\nassert big_diff([-5,-3,0,1,2,5,10]) == 10\nassert big_diff([-5,-3,0,-1,1,10]) == 8\nassert big_diff([10,-3,0,1,2,5,10]) == 8\n\n\n'''\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([2, 3, 5, 10]) == 7, 'your function does not work as expected.'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_diff([1, 2, 4, 5, 7]) == 3\nassert big_diff([-2, 3, -6, 7, 10, 14]) == 14\nassert big_diff([4, -4, 4, -5, 5, 3]) == 8\nprint(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([1,2,4,4,5,5,5,6,5,4,2]) == 3, 'Wrong answer'\nassert big_diff([1,2,4,5,5,5,5,6,7,7,7,7,7,7]) == 6, 'Wrong answer'\nassert big_diff([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([5, -10, 20, 55, 30, 50, 60]) == 100, \"Wrong answer\"\nassert big_diff([5, -10, 20, -55, 30, 50, 60]) == 80, \"Wrong answer\"\nassert big_diff([5, -10, 20, -55, 30, -50, 60]) == 110, \"Wrong answer\"\nassert big_diff([-5, -10, -20, -55, -30, -50, -60]) == -95, \"Wrong answer\"\n\ndef big_diff2(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(1, 2) == [1, 4]\nassert     perfect_squares(3, 4) == [9, 16]\nassert     perfect_squares(4, 5) == [16, 25]\nassert     perfect_squares(100, 300) == [100, 200]\nassert     perfect_squares(1, 100) == []\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if(i**2 == a):\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(1, 1) == [1, 1], \"input: 1, 1\"\nassert     perfect_squares(3, 4) == [9, 16], \"input: 3, 4\"\nassert     perfect_squares(4, 5) == [16, 25], \"input: 4, 5\"\nassert     perfect_squares(8, 9) == [81, 256], \"input: 8, 9\"\nassert     perfect_squares(10, 11) == [121, 343], \"input: 10, 11\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    perfect_squares(1, 10) == [1, 4, 9, 16, 25]\nassert \n    perfect_squares(100, 999) == [100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 496, 529, 576, 625, 676, 729, 784, 841, 900, 946, 1000]\nassert \n    perfect_squares(1, 100) == [1]\nassert \n    perfect_squares(1, 5) == [1]\nassert \n    perfect_squares(3, 5) == [1, 3]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    perfect_squares(3, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(0, 0) == True, 'base case: input numbers are equal'\n    perfect_squares(4, 5) == True, 'base case: input numbers are equal'\n    perfect_squares(0, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(7, 8) == False, 'base case: input numbers are equal'\n    perfect_squares(3, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(7, 7) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 1) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(12, 14) == False, 'base case: input numbers are equal'\n    perfect_squares(2, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(5, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(20, 22) == False, 'base case: input numbers are equal'\n    perfect_squares(8, 8) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(5, 2) == False, 'base case: input numbers are equal'\n    perfect_squares(0, 2) == False, 'base case: input numbers are equal'\n    perfect_squares(5, 2) == False, 'base case: input numbers are equal'\n    perfect_squares(5, 0) == False, 'base case: input numbers are equal'\n    perfect_squares(0, 0) == False, 'base case: input numbers are equal'\n    perfect_squares(10, 10) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 5) == False, 'base case: input numbers are equal'\n    perfect_squares(7, 8) == False, 'base case: input numbers are equal'\n    perfect_squares(11, 5) == True, 'base case: input numbers are equal'\n    perfect_squares(0, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(6, 7) == False, 'base case: input numbers are equal'\n    perfect_squares(7, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(1, 4) == False, 'base case: input numbers are equal'\n    perfect_squares(6, 1) == True, 'base case: input numbers are equal'\n    perfect_squares(2, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 1) == True, 'base case: input numbers are equal'\n    perfect_squares(4, 1) == True, 'base case: input numbers are equal'\n    perfect_squares(7, 6) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 8) == False, 'base case: input numbers are equal'\n    perfect_squares(2, 6) == True, 'base case: input numbers are equal'\n    perfect_squares(9, 11) == False, 'base case: input numbers are equal'\n    perfect_squares(9, 10) == True, 'base case: input numbers are equal'\n    perfect_squares(7, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(11, 3) == False, 'base case: input numbers are equal'\n    perfect_squares(4, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(2, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(5, 5) == True, 'base case: input numbers are equal'\n    perfect_squares(8, 7) == False, 'base case: input numbers are equal'\n    perfect_squares(8, 8) == True, 'base case: input numbers are equal'\n    perfect_squares(2, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 1) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(4, 1) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 4) == False, 'base case: input numbers are equal'\n    perfect_squares(1, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 0) == False, 'base case: input numbers are equal'\n    perfect_squares(0, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(0, 2) == False, 'base case: input numbers are equal'\n    perfect_squares(5, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(0, 4) == False, 'base case: input numbers are equal'\n    perfect_squares(2, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(2, 4) == False, 'base case: input numbers are equal'\n    perfect_squares(6, 5) == False, 'base case: input numbers are equal'\n    perfect_squares(7, 5) == False, 'base case: input numbers are equal'\n    perfect_squares(7, 6) == False, 'base case: input numbers are equal'\n    perfect_squares(1, 7) == False, 'base case: input numbers are equal'\n    perfect_squares(2, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(4, 5) == False, 'base case: input numbers are equal'\n    perfect_squares(5, 4) == False, 'base case: input numbers are equal'\n    perfect_squares(8, 8) == False, 'base case: input numbers are equal'\n    perfect_squares(1, 0) == False, 'base case: input numbers are equal'\n    perfect_squares(0, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(7, 0) == False, 'base case: input numbers are equal'\n    perfect_squares(7, 1) == False, 'base case: input numbers are equal'\n    perfect_squares(0, 2) == False, 'base case: input numbers are equal'\n    perfect_squares(4, 2) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(2, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(3, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(4, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(4, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(1, 5) == True, 'base case: input numbers are equal'\n    perfect_squares(2, 5) == True, 'base case: input numbers are equal'\n    perfect_squares(5, 3) == True, 'base case: input numbers are equal'\n    perfect_squares(5, 4) == True, 'base case: input numbers are equal'\n    perfect_squares(6, 5) == False, 'base case: input numbers are equal'\n    perfect_squares(5, 5) == True, 'base case: input numbers are equal'\n    perfect_squares(2, 6) == True, 'base case: input numbers ar"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    perfect_squares(1, 1) == 1\n    perfect_squares(4, 5) == 9\n    perfect_squares(1, 2) == 1\n    perfect_squares(16, 33) == 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perfect_squares(0, 1) == []\nassert     perfect_squares(1, 1) == [1]\nassert     perfect_squares(4, -4) == []\nassert     perfect_squares(0, 4) == []\nassert     perfect_squares(-1, 1) == []\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert perfect_squares(1, 10) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100], \\\n    \"Wrong result\"\nassert perfect_squares(4, 10) == [4, 9, 16, 25, 36, 49, 64, 81, 100], \\\n    \"Wrong result\"\nassert perfect_squares(0, 5) == [0, 1, 4, 9, 16], \"Wrong result\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perfect_squares(3, 5) == [4, 6, 9]\nassert     perfect_squares(1, 2) == [1, 4]\nassert     perfect_squares(2, 3) == [9, 10]\n\ndef get_average_score_grade(scores):\n    '''\n    Write a function to get the average score (grade) of a student.\n    '''\n    # average grade\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\npolar_rect(1,2) == (1.414, 2.857)\npolar_rect(5,6) == (5.403, 8.292)\npolar_rect(1,1) == (1.414, 1.414)\npolar_rect(0,0) == (0, 0)\npolar_rect(3,4) == (3.142, 5.828)\npolar_rect(0.5,0) == (0.5, 0)\npolar_rect(-1,1) == (-1.414, 1.414)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     polar_rect(1, 0) == (1, 0)\nassert     polar_rect(1, 0.1) == (1, 0.1)\nassert     polar_rect(0, 1) == (-0.1, 1)\nassert     polar_rect(-1, -0.5) == (-1, -0.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \npolar_rect(0,0) == (0,0), \"Input: 0, 0 -> Output: 0,0 is wrong.\"\npolar_rect(2.3,2.3) == (3.0,3.0), \"Input: 2.3, 2.3 -> Output: 3.0, 3.0 is wrong.\"\npolar_rect(2.3,-3.2) == (-3.0, -5.0), \"Input: 2.3, -3.2 -> Output: -3.0, -5.0 is wrong.\"\npolar_rect(0,-3.2) == (-3.0, -5.0), \"Input: 0, -3.2 -> Output: -3.0, -5.0 is wrong.\"\npolar_rect(3.4,2.8) == (3.9,2.3), \"Input: 3.4, 2.8 -> Output: 3.9, 2.3 is wrong.\"\npolar_rect(0.5,0.5) == (0.0,0.0), \"Input: 0.5, 0.5 -> Output: 0.0, 0.0 is wrong.\"\npolar_rect(1.1,2.3) == (2.0,3.0), \"Input: 1.1, 2.3 -> Output: 2.0, 3.0 is wrong.\"\npolar_rect(2.3,-2.3) == (-2.0,-3.0), \"Input: 2.3, -2.3 -> Output: -2.0,-3.0 is wrong.\"\npolar_rect(1.2,0.5) == (1.0,0.5), \"Input: 1.2, 0.5 -> Output: 1.0, 0.5 is wrong.\"\npolar_rect(3.0,0.2) == (3.0,0.2), \"Input: 3.0, 0.2 -> Output: 3.0, 0.2 is wrong.\"\npolar_rect(0.5,1.2) == (0.5,1.2), \"Input: 0.5, 1.2 -> Output: 0.5, 1.2 is wrong.\"\npolar_rect(1.1,0.9) == (1.0,0.9), \"Input: 1.1, 0.9 -> Output: 1.0, 0.9 is wrong.\"\npolar_rect(0.5,1.1) == (0.5,1.1), \"Input: 0.5, 1.1 -> Output: 0.5, 1.1 is wrong.\"\npolar_rect(0.5,1.2) == (0.5,1.2), \"Input: 0.5, 1.2 -> Output: 0.5, 1.2 is wrong.\"\npolar_rect(1.1,2.5) == (1.0,2.5), \"Input: 1.1, 2.5 -> Output: 1.0, 2.5 is wrong.\"\npolar_rect(2.3,1.4) == (2.3,1.4), \"Input: 2.3, 1.4 -> Output: 2.3, 1.4 is wrong.\"\npolar_rect(2.5,3.4) == (2.5,3.4), \"Input: 2.5, 3.4 -> Output: 2.5, 3.4 is wrong.\"\npolar_rect(1.2,3.8) == (1.0,3.8), \"Input: 1.2, 3.8 -> Output: 1.0, 3.8 is wrong.\"\npolar_rect(0.5,0.5) == (0.0,0.0), \"Input: 0.5, 0.5 -> Output: 0.0, 0.0 is wrong.\"\npolar_rect(1.2,1.2) == (1.0,1.2), \"Input: 1.2, 1.2 -> Output: 1.0, 1.2 is wrong.\"\npolar_rect(1.0,0.5) == (1.0,0.5), \"Input: 1.0, 0.5 -> Output: 1.0, 0.5 is wrong.\"\npolar_rect(1.0,1.0) == (1.0,1.0), \"Input: 1.0, 1.0 -> Output: 1.0, 1.0 is wrong.\"\npolar_rect(1.0,-1.0) == (1.0,-1.0), \"Input: 1.0, -1.0 -> Output: 1.0,-1.0 is wrong.\"\npolar_rect(0.5,-1.2) == (0.5,-1.2), \"Input: 0.5, -1.2 -> Output: 0.5,-1.2 is wrong.\"\npolar_rect(-1.1,0.3) == (-1.1,0.3), \"Input: -1.1, 0.3 -> Output: -1.1, 0.3 is wrong.\"\npolar_rect(-0.5,1.0) == (-0.5,1.0), \"Input: -0.5, 1.0 -> Output: -0.5, 1.0 is wrong.\"\npolar_rect(-0.5,1.1) == (-0.5,1.1), \"Input: -0.5, 1.1 -> Output: -0.5, 1.1 is wrong.\"\npolar_rect(-0.5,1.2) == (-0.5,1.2), \"Input: -0.5, 1.2 -> Output: -0.5, 1.2 is wrong.\"\npolar_rect(-1.0,2.3) == (-1.0,2.3), \"Input: -1.0, 2.3 -> Output: -1.0, 2.3 is wrong.\"\npolar_rect(-1.1,2.3) == (-1.1,2.3), \"Input: -1.1, 2.3 -> Output: -1.1, 2.3 is wrong.\"\npolar_rect(-2.3,1.4) == (-2.3,1.4), \"Input: -2.3, 1.4 -> Output: -2.3, 1.4 is wrong.\"\npolar_rect(-2.3,1.8) == (-2.3,1.8), \"Input: -2.3, 1.8 -> Output: -2.3, 1.8 is wrong.\"\npolar_rect(-2.3,3.4) == (-2.3,3.4), \"Input: -2.3, 3.4 -> Output: -2.3, 3.4 is wrong.\"\npolar_rect(-1.5,0.9) == (-1.5,0.9), \"Input: -1.5, 0.9 -> Output: -1.5, 0.9 is wrong.\"\npolar_rect(-1.5,1.5) == (-1.5,1.5), \"Input: -1.5, 1.5 -> Output: -1.5, 1.5 is wrong.\"\npolar_rect(-1.5,2.3) == (-1.5,2.3), \"Input: -1.5, 2.3 -> Output: -1.5, 2.3 is wrong.\"\npolar_rect(-1.5,-0.5) == (-1.5,-0.5), \"Input: -1.5, -0.5 -> Output: -1.5,-0.5 is wrong.\"\npolar_rect(-1.5,-1.2) == (-1.5,-1.2), \"Input: -1.5, -1.2 -> Output: -1.5,-1.2 is wrong.\"\npolar_rect(-1.5,-2.3) == (-1.5,-2.3), \"Input: -1.5, -2.3 -> Output: -1.5,-2.3 is wrong.\"\npolar_rect(-2.5,0.2) == (-2.5,0.2), \"Input: -2.5, 0.2 -> Output: -2.5, 0.2 is wrong.\"\npolar_rect(-2.5,-1.2) == (-2.5,-1.2), \"Input: -2.5, -1.2 -> Output: -2.5,-1.2 is wrong.\"\npolar_rect(-2.5,-3.4) == (-2.5,-3.4), \"Input: -2.5, -3.4 -> Output: -"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     polar_rect(0, 0) == (0, 0)\nassert     polar_rect(1, 0) == (1, 0)\nassert     polar_rect(1, 1) == (0, 1)\nassert     polar_rect(1, -1) == (0, -1)\nassert     polar_rect(-1, -1) == (-1, -1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a function to compute the area of a triangle given its three side lengths.\n'''\ndef area_triangle(a,b,c):\n    '''\n    Write a function to compute the area of a triangle given its three side lengths.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     polar_rect(0,0) == (0,0), 'polar_rect should return (0,0)'\nassert     polar_rect(0,1) == (1,0), 'polar_rect should return (1,0)'\nassert     polar_rect(1,0) == (1/2,0), 'polar_rect should return (1/2,0)'\nassert     polar_rect(1,1) == (0,1), 'polar_rect should return (0,1)'\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(3,4) == (0,2)\nassert     polar_rect(3,2) == (2,1)\nassert     polar_rect(5,4) == (1,1)\nassert     polar_rect(1,4) == (2,0)\nassert     polar_rect(0,4) == (1,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3,4,5,6,7,8]) == [7,1,8,2,3,4,5,6], 'incorrect'\nassert swap_List([1,2,3,4,5,6,7]) == [7,1,2,3,4,5,6], 'incorrect'\nassert swap_List([1,2,3,4,5]) == [5,1,2,3,4], 'incorrect'\nassert swap_List([1,2,3,4]) == [4,1,2,3], 'incorrect'\nassert swap_List([1,2,3]) == [3,1,2], 'incorrect'\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nswap_List([1, 2, 3, 4]) == [2, 3, 4, 1]\nassert swap_List([2, 3, 4, 1]) == [2, 3, 4, 1]\nassert swap_List([2, 3, 4, 1, 5]) == [2, 3, 4, 1, 5]\nassert swap_List([]) == []\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    swap_List([]) == []\nassert swap_List([1]) == [1]\nassert swap_List([1,2,3]) == [3,1,2]\nassert swap_List([1,2,3,4,5]) == [5,4,3,1,2]\nassert swap_List([1,2,3,4,5,6,7,8,9]) == [9,7,6,5,4,3,2,1,8]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Error - Not Correct\"\nassert swap_List([1,2,3,4,5,6]) == [5,1,2,3,4,6], \"Error - Not Correct\"\nassert swap_List([1,2,3,4,5,6,7]) == [5,1,2,3,4,6,7], \"Error - Not Correct\"\nassert swap_List([1,2,3,4,5,6,7,8]) == [5,1,2,3,4,6,7,8], \"Error - Not Correct\"\nassert swap_List([1,2,3,4,5,6,7,8,9]) == [5,1,2,3,4,6,7,8,9], \"Error - Not Correct\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [1,5,3,6,4,2], \"First\"\nassert     swap_List([1,2,3,4,5]) == [1,5,4,3,2], \"Second\"\nassert     swap_List([1,2,3]) == [1,3,2], \"Third\"\n\n'''\nWrite a python function to delete a key from a list.\n'''\ndef delete_List(newList, key):\n    '''\n    Write a python function to delete a key from a list.\n    '''\n    pass"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1,2,3,4]) == None\nassert     swap_List([1,2,3,4,5]) == None\nassert     swap_List([1,2,3,4,5,6,7]) == None\nassert swap_List([1,2,3]) == None\nassert swap_List([1,2,3,4]) == None\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([1,2,3,4]) == [3,2,4,1] \nassert     swap_List([1,2,3]) == [3,2,1]\nassert     swap_List([1]) == [1]\nassert     swap_List([]) == []\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nimport unittest\nclass TestBinomialCoeff(unittest.TestCase): \n    def test_01(self):\n        self.assertEqual(binomial_Coeff(10,5), 225)\n\n    def test_02(self):\n        self.assertEqual(binomial_Coeff(5,5), 120)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     binomial_Coeff(5,3) == 120\nassert binomial_Coeff(10,3) == 2468\nassert binomial_Coeff(3,2) == 3\nassert binomial_Coeff(1,2) == 1\nassert binomial_Coeff(2,3) == 6\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     binomial_Coeff(6,2)==0\nassert     binomial_Coeff(6,3)==0\nassert     binomial_Coeff(1,5)==0\nassert     binomial_Coeff(2,3)==1\nassert     binomial_Coeff(3,5)==1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(2,2) == 1.5\nassert     binomial_Coeff(0,0) == 1.5\nassert     binomial_Coeff(4,4) == 10\nassert     binomial_Coeff(0,4) == 1\nassert     binomial_Coeff(4,0) == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     binomial_Coeff(2,2) == 2+2 # Binomial Co-efficient of 2 and 2 are 2\nassert     binomial_Coeff(3,3) == 3*2*1+2*1*2+1*1*2+2+1+1+2 # Binomial Co-efficient of 3 and 3 are 2\nassert     binomial_Coeff(5,2) == 2*3*1*1*1+3*1*2*1+1*1*2+1+1+1\nassert     binomial_Coeff(4,5) == 5*4*3*2*1+4*1*5*2+1*2*5+1+1+1+1+2 # Binomial Co-efficient of 4 and 5 are 5\nassert     binomial_Coeff(10,3) == 3*2*1*1*2+3*1*2*1+1*1*2+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef fibonacci(n):\n    '''\n    Write a python function to compute the fibonacci sequence up to the given input number.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(1,1)    ==    1\nassert     binomial_Coeff(1,2)    ==    1\nassert     binomial_Coeff(2,3)    ==    2\nassert     binomial_Coeff(4,2)    ==    10\nassert     binomial_Coeff(6,4)    ==    37\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(5,3) == 7\nassert     binomial_Coeff(4,5) == 14\nassert     binomial_Coeff(7,2) == 21\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('1.2.3.4') == '1.2.3.4', 'incorrect'\nassert     removezero_ip('00.0.0.0') == '00.0.0.0', 'incorrect'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', 'incorrect'\nassert     removezero_ip('0.0.0.1') == '0.0.0.1', 'incorrect'\nassert     removezero_ip('1.1.2.3') == '1.1.2.3', 'incorrect'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3'\nassert     removezero_ip('123.123.123.123') == '123.123.123.123'\nassert     removezero_ip('0.123.123.123') == '0.123.123.123'\nassert     removezero_ip('0.123.123.123.123') == '0.123.123.123.123'\nassert     removezero_ip('0.0.0.0.0.0.0.0.0') == '0.0.0.0.0.0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip('') == ''\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0.0.0.0.0') == '0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip('0.0.0.0')    == '0.0.0.0',    \"Wrong Answer\"\nassert     removezero_ip('0.0.0.1')    == '0.0.0.1',    \"Wrong Answer\"\nassert     removezero_ip('0.0.1.0')    == '0.0.1.0',    \"Wrong Answer\"\nassert     removezero_ip('0.0.1.1')    == '0.0.1.1',    \"Wrong Answer\"\nassert     removezero_ip('1.0.0.0')    == '1.0.0.0',    \"Wrong Answer\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert removezero_ip('0.1.2.3') == '1.2.3'\nassert removezero_ip('0.000.1.2') == '1.2'\nassert removezero_ip('1.2.3') == '1.2.3'\nassert removezero_ip('1.2.3.4') == '1.2.3.4'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     removezero_ip('10.1.1.1') == '10.1.1.1'\nassert     removezero_ip('10.1.1.100') == '10.1.1.100'\nassert     removezero_ip('100.1.1.1') == '100.1.1.1'\nassert     removezero_ip('0.1.1.1') == '0.1.1.1'\nassert     removezero_ip('0.1.1.1') == '0.1.1.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert removezero_ip('192.168.0.1') == '192.168.0.1'\nassert removezero_ip('192.168.0.0') == '192.168.0.0'\nassert removezero_ip('192.168.0.00') == '192.168.0.0'\nassert removezero_ip('192.168.0000.000') == '192.168.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip('0.1.2.3') == '1.2.3', \"test case 1: failed\"\nassert     removezero_ip('1.2.3') == '1.2.3', \"test case 2: failed\"\nassert     removezero_ip('000.000.000.000') == '000.000.000.000', \"test case 3: failed\"\nassert     removezero_ip('0.000.000.000') == '0.000.000.000', \"test case 4: failed\"\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', \"test case 5: failed\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     diff_even_odd([2,3,4,5]) == 1\nassert     diff_even_odd([2,3,4,6,7]) == 2\nassert     diff_even_odd([2,3,4,5,6,7]) == 2\n\ndef diff_even_odd_2(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6,7]) == 2, '1, 3 should be 2'\nassert     diff_even_odd([0,1,2,3,4,5,6,7,8,9]) == 5, '0, 1, 2, 5, 6 should be 5'\nassert     diff_even_odd([0]) == 0, 'list should be empty'\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 2, '1, 3 should be 2'"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5, 6]) == 1\nassert     diff_even_odd([1, 2, 3, 4, 5, 7]) == 0\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7]) == 1\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == -1\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6]) == 1\nassert     diff_even_odd([1,2,3,4,7,6]) == 2\nassert     diff_even_odd([1,2,3,4,5,6]) == 0\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9]) == -1\n\nprint('Check your answer')"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    diff_even_odd([1, 2, 3, 4]) == 2\n    diff_even_odd([7, 5, 4, 4, 6]) == 5\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 1\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 6"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndiff_even_odd([1, 2, 3, 4, 5]) == -1\nassert \ndiff_even_odd([1, 2, 4, 6, 7]) == 4\nassert \ndiff_even_odd([1, 2, 4, 6, 5]) == -2\nassert \ndiff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert \ndiff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert diff_even_odd([1, 2, 3, 4, 5]) == 2\nassert diff_even_odd([5, 6, 7, 8, 9, 10]) == -2\nassert diff_even_odd([]) == None\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)==0:\n        return \n    if len(list1)==1:\n        if list1[0]%2==0:\n            return list1[0]\n        else:\n            return 0\n    if len(list1)==2:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        else:\n            return 0\n    if len(list1)==3:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        else:\n            return 0\n    if len(list1)==4:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        else:\n            return 0\n    if len(list1)==5:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        else:\n            return 0\n    if len(list1)==6:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        elif list1[5]%2==0:\n            return list1[5]\n        else:\n            return 0\n    if len(list1)==7:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        elif list1[5]%2==0:\n            return list1[5]\n        elif list1[6]%2==0:\n            return list1[6]\n        else:\n            return 0\n    if len(list1)==8:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        elif list1[5]%2==0:\n            return list1[5]\n        elif list1[6]%2==0:\n            return list1[6]\n        elif list1[7]%2==0:\n            return list1[7]\n        else:\n            return 0\n    if len(list1)==9:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        elif list1[5]%2==0:\n            return list1[5]\n        elif list1[6]%2==0:\n            return list1[6]\n        elif list1[7]%2==0:\n            return list1[7]\n        elif list1[8]%2==0:\n            return list1[8]\n        else:\n            return 0\n    if len(list1)==10:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        elif list1[5]%2==0:\n            return list1[5]\n        elif list1[6]%2==0:\n            return list1[6]\n        elif list1[7]%2==0:\n            return list1[7]\n        elif list1[8]%2==0:\n            return list1[8]\n        elif list1[9]%2==0:\n            return list1[9]\n        else:\n            return 0\n    if len(list1)==11:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        elif list1[5]%2==0:\n            return list1[5]\n        elif list1[6]%2==0:\n            return list1[6]\n        elif list1[7]%2==0:\n            return list1[7]\n        elif list1[8]%2==0:\n            return list1[8]\n        elif list1[9]%2==0:\n            return list1[9]\n        elif list1[10]%2==0:\n            return list1[10]\n        else:\n            return 0\n    if len(list1)==12:\n        if list1[0]%2==0:\n            return list1[0]\n        elif list1[1]%2==0:\n            return list1[1]\n        elif list1[2]%2==0:\n            return list1[2]\n        elif list1[3]%2==0:\n            return list1[3]\n        elif list1[4]%2==0:\n            return list1[4]\n        elif list1[5]%2==0:\n            return list1[5]\n        elif list1[6]%2==0:\n            return list1[6]\n        elif list1[7]%2==0:\n            return list1[7]\n        elif list1[8]%2==0:\n            return list1[8]\n        elif list1[9]%2==0:\n            return list1[9]\n        elif list1[10]%2==0:\n            return list1[10]\n        elif list1[11]%2==0:\n            return list1[11]\n        else:\n            return 0"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Swaps(\"00101\",\"11101\") == 1\nassert     min_Swaps(\"01101\",\"11101\") == 1\nassert     min_Swaps(\"0101\",\"11101\") == 2\nassert     min_Swaps(\"111\",\"00101\") == 1\nassert     min_Swaps(\"11\",\"00101\") == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Swaps('01101','10101') == 0\nassert     min_Swaps('001112','111200') == 2\nassert     min_Swaps('01101','1010') == 1\nassert     min_Swaps('10101','0111') == 2\nassert     min_Swaps('0011','01001') == 2\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Swaps(\"01\",\"10\") == 2\nassert     min_Swaps(\"01\",\"11\") == 2\nassert     min_Swaps(\"010\",\"110\") == 2\nassert     min_Swaps(\"01\",\"00\") == 3\nassert     min_Swaps(\"0\",\"0\") == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Swaps(\"01001\",\"10001\") == 0, \"Wrong output\"\nassert     min_Swaps(\"0111\",\"01010\") == 1, \"Wrong output\"\nassert     min_Swaps(\"0111\",\"10001\") == 1, \"Wrong output\"\nassert     min_Swaps(\"10111\",\"10000\") == 1, \"Wrong output\"\nassert     min_Swaps(\"01001\",\"00000\") == 1, \"Wrong output\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Swaps('101010','101010') == 0, \"Fail\"\nassert     min_Swaps('11111','101010') == 3, \"Fail\"\nassert     min_Swaps('101010','11111') == 3, \"Fail\"\nassert     min_Swaps('101010','111111') == 3, \"Fail\"\nassert     min_Swaps('010101','110101') == 2, \"Fail\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Swaps('01010111','10101111') == 3\nassert     min_Swaps('01010111','10101111') == 0\nassert     min_Swaps('0011','010111') == 3\nassert     min_Swaps('0011','010111') == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps('11101110','110110010') == 0\nassert     min_Swaps('10101010110001','010101101010') == 5\nassert     min_Swaps('10011001','001001100') == 5\n\ndef min_Swaps_2(str1,str2):\n    n = len(str1)\n    count = 0\n    i = 0\n    while i < n:\n        if str1[i]!= str2[i]:\n            count += 1\n            k = i\n            j = k + 1\n            while j < n:\n                if str1[j] == str2[k]:\n                    i = j\n                    break\n                j += 1\n        i += 1\n\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Swaps(\"101010101101\", \"010101010101\") == 2, \"Should swap the 1s at indices 0 and 5 in first string to get second string\"\nassert     min_Swaps(\"101010101101\", \"110101010101\") == 4, \"Should swap the 1s at indices 0 and 4 in first string to get second string\"\nassert     min_Swaps(\"101010101101\", \"101010101101\") == 0, \"Should return 0 if both strings are same\"\nassert     min_Swaps(\"101010101101\", \"110011010101\") == 6, \"Should swap the 1s at indices 0 and 6 in first string to get second string\"\nassert     min_Swaps(\"101010101101\", \"111101010101\") == 8, \"Should swap the 1s at indices 0 and 8 in first string to get second string\"\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_size([(1,2),(3,4)]) == 8\nassert     tuple_size((1,2,3,4)) == 8\nassert     tuple_size(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')) == 64\n\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (tuple_size([(1,2,3,4),(5,6,7,8),(9,10,11,12)]) == 16)\nassert     (tuple_size((1,2,3,4)) == 4)\nassert     (tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) == 64)\nassert     (tuple_size(('a','b','c','d')) == 16)\nassert     (tuple_size(('a',)) == 1)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_size(()) == 0\nassert     tuple_size((1,2,3,4)) == 4\nassert     tuple_size((1,1,2,2)) == 8\nassert     tuple_size((1,1,1,1)) == 8\nassert     tuple_size(('1',1,1,1)) == 10\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_size([]) == 0\nassert tuple_size([0]) == 1\nassert tuple_size([0,0]) == 2\nassert tuple_size([0,0,0]) == 3\nassert tuple_size([0,0,0,0]) == 4\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef tuple_element(tuple_list, index):\n    '''\n    Write a function to get the element at the given index of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size([]) == 0, \"the length of the given tuple is not 0\"\nassert     tuple_size([0, 1, 2, 3, 4]) == 9, \"the length of the given tuple is not 9\"\nassert     tuple_size([1]) == 1, \"the length of the given tuple is not 1\"\nassert     tuple_size([]) == 0, \"the length of the given tuple is not 0\"\n\ndef tuple_contains(tuple_list):\n    '''\n    Write a function to check whether a tuple is a sub-sequence of another tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_size((2, 4, 6)) == 8\nassert     tuple_size((1, 2)) == 3\n\ndef number_of_tuple_elements(tuple_list):\n    '''\n    Write a function to find the number of elements in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclass TestSuite(unittest.TestCase):\n    def test_case_01(self):\n        '''\n        For empty tuple, tuple_size(()) should return 0\n        '''\n        assert tuple_size([]) == 0\n        \n    def test_case_02(self):\n        '''\n        For tuple with only integer values, tuple_size((1,2,3)) should return 6\n        '''\n        assert tuple_size((1,2,3)) == 6\n\n    def test_case_03(self):\n        '''\n        For tuple with mixed datatypes, tuple_size((1, '2', 3)) should return 9\n        '''\n        "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_kth([0, 0], [0, 1], 0) == 0\nassert find_kth([0, 0], [0, 1], 1) == 1\nassert find_kth([0, 0], [1, 1], 1) == 1\nassert find_kth([0, 0], [0, 1], 2) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_kth([0,1,2,3,4], [4,5,6,7,8], 1) == 3\nassert     find_kth([0,1,2,3,4], [4,5,6,7,8], 2) == 4\nassert     find_kth([], [1,2,3,4], 1) == -1\nassert     find_kth([1,2,3,4], [], 1) == -1\nassert     find_kth([1,2,3,4], [], 2) == 4\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_kth([1,2,3,4,5], [3,5,7], 2) == 3, \\\n        \"Find third element from the array\"\nassert     find_kth([1,2,3,4,5], [3,5,7], 5) == 5, \\\n        \"Find fifth element from the array\"\nassert     find_kth([1,2,3,4,5], [3,5,7], -1) == None, \\\n        \"Find element that is not in the array\"\nassert     find_kth([], [], 1) == None, \\\n        \"Find element that is not in the array\"\nassert     find_kth([], [], -1) == None, \\\n        \"Find element that is not in the array\"\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_kth([1,2,3], [4,5,6], 2) == 3\nassert     find_kth([1,2,3], [4,5,6], 3) == 4\nassert     find_kth([1,2,3,4], [4,5,6,7], 4) == 4\nassert     find_kth([1,2,3,4], [4,5,6,7], 3) == 2\nassert     find_kth([1,2,3,4], [4,5,6,7], 1) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_kth([5, 7, 9, 10, 13], [1, 2, 3, 4, 8], 3) == 4, 'Wrong answer'\nassert     find_kth([2, 4, 8, 10, 11], [1, 3, 4, 5, 8], 3) == 4, 'Wrong answer'\nassert     find_kth([2, 4, 8, 10, 11], [1, 3, 4, 5, 8], 6) == -1, 'Wrong answer'\nassert     find_kth([2, 4, 8, 10, 11], [1, 3, 4, 5, 8], -1) == -1, 'Wrong answer'\nassert     find_kth([2, 4, 8, 10, 11], [1, 3, 4, 5, 8], 0) == 2, 'Wrong answer'\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_kth([1,2], [1,2], 2) == 2\nassert     find_kth([1,2,3], [1,2,3], 2) == 2\nassert     find_kth([1,3], [1,2,3], 2) == 2\nassert     find_kth([], [], 2) == 2\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_kth([1,2,3], [4,5,6], 3) == 5\nassert     find_kth([4,5,6], [1,2,3], 1) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(15) == True, 'the number 15 is not armstrong'\nassert     armstrong_number(9) == False, 'the number 9 is armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(165) == False\nassert     armstrong_number(1034) == True\nassert     armstrong_number(8369) == False\nassert     armstrong_number(10) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     armstrong_number(153)    ==     True,     'Fail, 153 is not armstrong'\nassert     armstrong_number(371)    ==     False,    'Fail, 371 is not armstrong'\nassert     armstrong_number(153)    ==     True,     'Fail, 153 is not armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(900) == True\nassert     armstrong_number(1000) == True\nassert     armstrong_number(1634) == True\nassert     armstrong_number(1334) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(2) == False\nassert     armstrong_number(30) == False\nassert     armstrong_number(39) == False\nassert     armstrong_number(153) == True\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     armstrong_number(153) == True, \"153 should be True\"\nassert     armstrong_number(371) == False, \"371 should be False\"\nassert     armstrong_number(371) == False, \"371 should be False\"\nassert     armstrong_number(386) == True, \"386 should be True\"\nassert     armstrong_number(12) == False, \"12 should be False\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_average(1) ==         (1.0, 0.0)\nassert     sum_average(4) ==         (5.0, 2.5)\nassert     sum_average(9) ==         (22.0, 11.0)\nassert     sum_average(10) ==         (30.0, 15.0)\nassert     sum_average(100) ==         (2500.0, 2500.0)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_average(2) == 2\nassert     sum_average(3) == 2.5\nassert     sum_average(12) == 27\nassert     sum_average(100) == 499.5\n\nprint('PASSED ALL TEST CASES'"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(0) == 0\nassert     sum_average(1) == 1\nassert     sum_average(2) == 1\nassert     sum_average(3) == 3\nassert     sum_average(4) == 3\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"Check your work!\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_average(1) == 0\nsum_average(2) == 1\nsum_average(3) == 1.5\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_average(2) == 1.5\nassert     sum_average(3) == 2.0\nassert     sum_average(4) == 2.5\nassert     sum_average(5) == 3.0\nassert     sum_average(6) == 3.5\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_average(3) == 6\nassert     sum_average(5) == 15\nassert     sum_average(10) == 30\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_average(3) == 5\n\ndef sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_, average = 0, 0\n\n    for i in range(n):\n        sum_ += i\n        average = sum_ / n\n\n    return sum_, average\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Even(6) == False\nassert     is_Even(10) == True\nassert     is_Even(1) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Even(3) == True, \"Error\"\nassert     is_Even(-1) == False, \"Error\"\nassert     is_Even(1) == True, \"Error\"\nassert     is_Even(0) == False, \"Error\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(2) == True,'ERROR: 2 is not even'\nassert     is_Even(3) == True,'ERROR: 3 is even'\nassert     is_Even(4) == False,'ERROR: 4 is odd'\nassert     is_Even(1) == False,'ERROR: 1 is odd'\nassert     is_Even(10) == False,'ERROR: 10 is odd'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Even(0) == False\nassert is_Even(11) == False\nassert is_Even(12) == True\nassert is_Even(13) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_Even(3) == True\nassert is_Even(4) == False\nassert is_Even(8) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(3) == False\nassert     is_Even(4) == True\nassert     is_Even(5) == True\nassert     is_Even(6) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Even(2) == True     ,\"is_Even() needs to be True for 2\"\nassert is_Even(3) == False, \"is_Even() needs to be False for 3\"\nassert is_Even(4) == True, \"is_Even() needs to be True for 4\"\n\ndef is_Even2(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0) \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nis_Even(2)\n\nis_Even(7)\n\nis_Even(-2)\n\nprint(\"is_Even is tested successfully!\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(5) == True, \"Correctness test failed\"\nassert is_Even(6) == False, \"Correctness test failed\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char('dna') == -1\nassert     first_repeated_char('abacc') == -1\nassert     first_repeated_char('abcd') == -1\nassert     first_repeated_char('bacc') == 0\nassert     first_repeated_char('abcd') == 2\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_repeated_char(\"abcdab\") == \"d\", \"Error\"\nassert     first_repeated_char(\"abcdacb\") == \"b\", \"Error\"\nassert     first_repeated_char(\"acbcc\") == \"\", \"Error\"\nassert     first_repeated_char(\"\") == \"\", \"Error\"\nassert     first_repeated_char(\"hlo\") == \"\", \"Error\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char('aaabcbc') == 'a'\nassert     first_repeated_char('abcdeeefghi') == 'b'\nassert     first_repeated_char('aaabcdef') == 'a'\nassert     first_repeated_char('aaaaaaa') == 'a'\nassert     first_repeated_char('aaab') == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_repeated_char('codewars') == 'd', \"The answer is d\"\nassert     first_repeated_char('cabbage') == 'a', \"The answer is a\"\nassert     first_repeated_char('wars') =='s', \"The answer is s\"\nassert     first_repeated_char('wars') =='s', \"The answer is s\"\n\n'''\nAnother way to solve the problem\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = ''\n    str1 = 'aa'\n    if len(str1) == 0:\n        return result\n    if len(str1) == 1:\n        return str1\n    for i in range(1, len(str1)):\n        if str1[i] == str1[i - 1]:\n            result = str1[i - 1]\n            break\n    return result\n\n\nassert first_repeated_char(\"abcdabcdab\") == 'd'\nassert first_repeated_char(\"abcdabcd\") == 'd'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert first_repeated_char('abcd') == 'b'\nassert first_repeated_char('abcdabc') == 'c'\nassert first_repeated_char('abcabcabc') == 'c'\nassert first_repeated_char('abc') == None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_repeated_char(\"hello\") == None\nassert first_repeated_char(\"ajfa\") == 'a'\nassert first_repeated_char(\"\") == None\nassert first_repeated_char(\"the\") == 'the'\nassert first_repeated_char(\"theTheThethe\") == 'the'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char('sher') == -1\nassert     first_repeated_char('abab') == -1\nassert     first_repeated_char('cccc') == -1\nassert     first_repeated_char('tat') == -1\nassert     first_repeated_char('abcc') == -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('abcde') == 'c'\nassert     first_repeated_char('bc') == 'c'\nassert     first_repeated_char('abcdef') == 'c'\nassert     first_repeated_char('abbcdef') == 'c'\nassert     first_repeated_char('aabcdef') == 'c'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('abc') == 'a'\nassert     first_repeated_char('aabb') == 'a'\nassert     first_repeated_char('aabcb') == 'a'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(get_ludic(22)) == [11, 14, 25, 31, 34, 42, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 85"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(0) == []\nassert get_ludic(1) == [1]\nassert get_ludic(2) == [1,2]\nassert get_ludic(3) == [1,3]\nassert get_ludic(4) == [1,3,4]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(2) == [2, 1]\nassert     get_ludic(3) == [3, 1, 2]\nassert     get_ludic(4) == [4, 1, 2, 3]\nassert     get_ludic(5) == [5, 1, 2, 3, 4]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(3) == [3]\nassert     get_ludic(10) == [3,7,8,11]\nassert     get_ludic(100) == [3,7,8,11,13,17,19,23,28,31,37,41,43,47,53,58,62,67,71,76,83,89,97]\nassert     get_ludic(1000000) == [3,7,8,11,13,17,19,23,28,31,37,41,43,47,53,58,62,67,71,76,83,89,97,99,101]\nassert     get_ludic(999999999) == [3,7,8,11,13,17,19,23,28,31,37,41,43,47,53,58,62,67,71,76,83,89,97,99,101,109,113,127,129,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,323,327,331,337,347,349,353,359,367,373,379,383,389,391,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_ludic(20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     get_ludic(100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\nassert get_ludic(5) == [1, 2, 3, 4, 5]\nassert get_ludic(6) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_ludic(1) == []\nassert     get_ludic(2) == [1]\nassert     get_ludic(9) == [2, 3, 4, 5, 7, 8, 11, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     get_ludic(120) == [2, 3, 4, 5, 7, 8, 11, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     get_ludic(123) == [2, 3, 4, 5, 7, 8, 11, 13, 14, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_ludic(1) == []\nassert get_ludic(2) == [1]\nassert get_ludic(3) == [1, 2]\nassert get_ludic(4) == [1, 2, 3]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert(get_ludic(0) == [])\nassert(get_ludic(1) == [1])\nassert(get_ludic(10) == [1,2,3,4,5,6,7,8,9,10])\nassert(get_ludic(100) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99])\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_ludic(20) == [2, 3, 4, 5, 7, 11, 13, 16, 19, 23, 26, 29, 32, 37, 41, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320, 323, 326, 329, 332, 335, 338, 341, 344, 347, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 398, 401, 404, 407, 410, 413, 416, 419, 422, 425, 428, 431, 434, 436, 439, 442, 445, 448, 451, 454, 457, 460, 463, 466, 469, 472, 475, 478, 481, 484, 487, 490, 493, 496, 499, 502, 506, 509, 511, 514, 517, 520, 523, 525, 528, 531, 534, 537, 540, 543, 546, 549, 552, 555, 558, 561, 564, 567, 570, 573, 576, 579, 582, 585, 588, 591, 594, 597, 600, 603, 604, 607, 610, 613, 616, 619, 622, 625, 628, 631, 634, 637, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 685, 688, 691, 694, 697, 700, 703, 706, 709, 712, 715, 718, 721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757, 760, 763, 766, 769, 772, 775, 778, 781, 784, 787, 790, 793, 796, 799, 802, 805, 808, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 841, 844, 847, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 880, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 913, 916, 919, 922, 925, 928, 931, 934, 937, 940, 943, 946, 949, 952, 955, 958, 961, 964, 967, 970, 973, 976, 979, 982, 985, 988, 991, 994, 997]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = list(s.split())\n    return''.join(reversed(l))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words(\"I am a student\") == \"student a am I\"\nassert     reverse_words(\"Ehtib Uhtib\") == \"ehtib Uhtib ehtib\"\nassert     reverse_words(\"A name is a name\") == \"naam a name\"\nassert     reverse_words(\"It is working\") == \"ihts workng It\"\nassert     reverse_words(\"A boy is a boy\") == \"boy a boi\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    new_words = words[::-1]\n    return''.join(new_words)"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_words('sdfds fgddfg fgd df df sdf')     == 'df sdf sd fgd df gdf fgdfg', 'incorrect'\nassert     reverse_words('sdf sdfs fgd dfd fgd sdf')     == 'dfs fgd dfd sdfs', 'incorrect'\nassert     reverse_words('hello world')     == 'dlro olleh', 'incorrect'\nassert     reverse_words('hello  world')     == 'dlro olleh', 'incorrect'\nassert     reverse_words('hello   world')     == 'dlro olleh', 'incorrect'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef reverse_words_rec(s, start, end):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # input: s: string, start: int, end: int\n    # output: string\n    # \n    # reverse each word in string\n    # if space\n    # reverse each word\n    \n    # base case\n    if start == end:\n        return\n    \n    # reverse substrings in string\n    s[start], s[end] = s[end], s[start]\n    reverse_words_rec(s, start+1, end-1)\n    \n    return\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_words('          hello  world  ') == 'world  hello', 'Should be world  hello'\nassert     reverse_words('hello world') == 'world  hello', 'Should be world  hello'\nassert     reverse_words('hello') == 'hello', 'Should be hello'\nassert     reverse_words('hello world') == 'world  hello', 'Should be world  hello'\nassert     reverse_words('hello world hello world') == 'hello world  world', 'Should be world  world  hello'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nreverse_words(\"  hello  \") == \"hello  \"\nassert \nreverse_words(\"hello world\") == \"world hello\"\nassert \nreverse_words(\"i like dogs\") == \"dogs like i\"\nassert \nreverse_words(\"  i like dogs  \") == \"dogs like i  \"\nassert \nreverse_words(\"1 2 3 4 5 6 7 8 9 10\") == \"10 9 8 7 6 5 4 3 2 1\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words(\"This is awesome\") == \"awesome is This\", \"Should be awesome is this\"\nassert     reverse_words(\"Hello World\") == \"World Hello\", \"Should be world Hello\"\nassert     reverse_words(\"   Hello   \") == \"Hello   \", \"Should be Hello   \"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_words(\"I am a boy\") == \"boy a am I\"\nassert     reverse_words(\"I am a boy\") == \"boy a am I\"\nassert     reverse_words(\"I am a girl\") == \"girl a am I\"\nassert     reverse_words(\"I am a girl\") == \"girl a am I\""
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert prime_num(1) == False\nassert prime_num(2) == False\nassert prime_num(3) == True\nassert prime_num(4) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == False\nassert     prime_num(4) == True\nassert     prime_num(5) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert prime_num(2) == True\nassert prime_num(3) == False\nassert prime_num(17) == True\nassert prime_num(3) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_num(7)==True\nassert     prime_num(2)==False\nassert     prime_num(12)==True\nassert     prime_num(8)==False\nassert     prime_num(15)==True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_num(4) == True, '4 is a prime number'\nassert prime_num(10) == False, '10 is not a prime number'\nassert prime_num(0) == False, '0 is not a prime number'\nassert prime_num(-1) == False, '-1 is not a prime number'\nassert prime_num(1.2) == False, '1.2 is not a prime number'\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nradian_degree(0) == radian_degree(90) == radian_degree(180) == radian_degree(270) == 0.0\nassert radian_degree(1) == 0.017453292519943295\nassert radian_degree(45) == 0.7853981633974483\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(135) == 1.7320508075688772\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_GEO_factor(latitude, longitude):\n    '''\n    Write a function to get GEO factor\n    '''\n    pass\n\ndef get_closest_point(x, y, k_list):\n    '''\n    Write a function to get the index of closest point\n    '''\n    pass\n\ndef get_distance(x1, y1, x2, y2):\n    '''\n    Write a function to get distance between 2 points\n    '''\n    pass\n\ndef get_point_index(x, y, points):\n    '''\n    Write a function to get the index of closest point\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     radian_degree(0) == 0\nassert     radian_degree(180) == 2*math.pi\nassert     radian_degree(360) == 2*math.pi\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef radian_degree_to_degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     radian_degree(120) ==     5.6180339887\nassert     radian_degree(360) ==     2.71238898038469\n\n\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(radian_degree(45))\n\nprint(math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef radian_rad(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef radian_degree2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     radian_degree(10)    ==     0.0\nassert     radian_degree(-10)    ==     math.pi\nassert     radian_degree(180)    ==     math.pi\nassert     radian_degree(360)    ==     2*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert     radian_degree(-90) == -math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(0) == 0\nassert     radian_degree(-180) == math.pi*2\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals(\"abcde\", \"de\") == (4,4,4)\nassert     find_literals(\"abcde\", \"b\") == (0,1,1)\nassert     find_literals(\"abcde\", \"abc\") == (0,0,3)\nassert     find_literals(\"abcde\", \"abcde\") == (0,8,8)\nassert     find_literals(\"abcde\", \"e\") == (2,4,4)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_literals('hello world', r'\\w+') == ('hello', 0, 6)\nassert     find_literals('hello world', r'\\w+\\s') == ('hello', 1, 4)\nassert     find_literals('hello world', r'\\w+\\s\\d+') == ('hello', 1, 4)\nassert     find_literals('hello world', r'\\w+\\s\\d+\\s') == ('hello', 1, 4)\nassert     find_literals('hello world', r'\\w+\\s\\d+\\s\\w+') == ('hello', 1, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \n\ndef find_all_matches(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return a list of all matches.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals('', 'abc') == (0, 0, 0)\nassert     find_literals('abc', 'abc') == (0, 3, 3)\nassert     find_literals('abc', 'bcd') == (1, 1, 1)\nassert     find_literals('abca', 'bc') == (1, 3, 4)\nassert     find_literals('abca', 'a') == (0, 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_literals(\"\"\"abcdefghijklmnopqrstuvwxyz\n                                            ABCDEFGHIJKLMNOPQRSTUVWXYZ\n                                            1234567890\n                                            0123456789\n                                            .^*!@#$%&+/()=?\"'[]{}:;,<>|\n                                            -\n                                            \"\"\",     r\"(\\w*)|(\\w+)|(\\d*)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)|(\\w+)"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('','some') ==     (None, -1, -1)\nassert     find_literals('', '(some)') ==     (None, -1, -1)\nassert     find_literals('','some(something)') ==     (None, -1, -1)\nassert     find_literals('some','some') ==     ('some', 0, 4)\nassert     find_literals('some','some(thing)') ==     ('some', 0, 7)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_regex_in_text(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    # return re.search(pattern, text).span()\n    #return re.match(pattern, text).span()\n    return re.search(pattern, text).start(), re.search(pattern, text).end()\n    \ndef find_regex_in_text(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.span()\n    else:\n        return -1\n\ndef find_regex_in_text(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.span()\n    else:\n        return -1\n\ndef find_regex_in_text(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.span()\n    else:\n        return -1\n\ndef find_regex_in_text(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.span()\n    else:\n        return -1\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nbell_Number(10) == 11520\nbell_Number(0) == 1\nbell_Number(20) == 3125\nbell_Number(30) == 3125000\nbell_Number(31) == 31250000\nbell_Number(32) == 31250000\n\n\ndef nth_bell(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_Number(1) == 1, 'bell_Number(1) has returned wrong value'\nassert     bell_Number(2) == 2, 'bell_Number(2) has returned wrong value'\nassert     bell_Number(4) == 5, 'bell_Number(4) has returned wrong value'\nassert     bell_Number(5) == 8, 'bell_Number(5) has returned wrong value'\nassert     bell_Number(6) == 13, 'bell_Number(6) has returned wrong value'\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_Positive_Num(n):\n    '''\n    Write a python function to find the nth positive integer.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_Number(0) == 1, f'bell_Number(0) has not been implemented correctly'\nassert     bell_Number(1) == 2, f'bell_Number(1) has not been implemented correctly'\nassert     bell_Number(2) == 1, f'bell_Number(2) has not been implemented correctly'\nassert     bell_Number(3) == 4, f'bell_Number(3) has not been implemented correctly'\nassert     bell_Number(4) == 5, f'bell_Number(4) has not been implemented correctly'\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 8\nbell_Number(5) == 14\nbell_Number(6) == 22\nbell_Number(7) == 34\nbell_Number(8) == 55\nbell_Number(9) == 89\nbell_Number(10) == 145\nbell_Number(11) == 123\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    bell_Number(1) == 1, \"bell_Number should return 1 for n = 1\"\n    bell_Number(2) == 2, \"bell_Number should return 2 for n = 2\"\n    bell_Number(3) == 3, \"bell_Number should return 3 for n = 3\"\n    bell_Number(5) == 8, \"bell_Number should return 8 for n = 5\"\n    bell_Number(10) == 55, \"bell_Number should return 55 for n = 10\"\n    bell_Number(15) == 3015, \"bell_Number should return 3015 for n = 15\"\n    bell_Number(20) == 47900, \"bell_Number should return 47900 for n = 20\"\n    bell_Number(25) == 125960, \"bell_Number should return 125960 for n = 25\"\n    bell_Number(26) == 615810, \"bell_Number should return 615810 for n = 26\"\n    bell_Number(27) == 615800, \"bell_Number should return 615800 for n = 27\"\n    bell_Number(31) == 515430, \"bell_Number should return 515430 for n = 31\"\n    bell_Number(35) == 8420870, \"bell_Number should return 8420870 for n = 35\"\n    bell_Number(40) == 102300690, \"bell_Number should return 102300690 for n = 40\"\n    bell_Number(45) == 115123900, \"bell_Number should return 115123900 for n = 45\"\n    bell_Number(50) == 177210800, \"bell_Number should return 177210800 for n = 50\"\n    bell_Number(51) == 203060800, \"bell_Number should return 203060800 for n = 51\"\n    bell_Number(52) == 20305800, \"bell_Number should return 20305800 for n = 52\"\n    bell_Number(53) == 3128, \"bell_Number should return 3128 for n = 53\"\n    bell_Number(54) == 3123, \"bell_Number should return 3123 for n = 54\"\n    bell_Number(55) == 3123, \"bell_Number should return 3123 for n = 55\"\n    bell_Number(57) == 20301, \"bell_Number should return 20301 for n = 57\"\n    bell_Number(63) == 99990, \"bell_Number should return 99990 for n = 63\"\n    bell_Number(69) == 98980, \"bell_Number should return 98980 for n = 69\"\n    bell_Number(71) == 98810, \"bell_Number should return 98810 for n = 71\"\n    bell_Number(72) == 98710, \"bell_Number should return 98710 for n = 72\"\n    bell_Number(76) == 98620, \"bell_Number should return 98620 for n = 76\"\n    bell_Number(79) == 98560, \"bell_Number should return 98560 for n = 79\"\n    bell_Number(81) == 98480, \"bell_Number should return 98480 for n = 81\"\n    bell_Number(82) == 98400, \"bell_Number should return 98400 for n = 82\"\n    bell_Number(85) == 98320, \"bell_Number should return 98320 for n = 85\"\n    bell_Number(86) == 98280, \"bell_Number should return 98280 for n = 86\"\n    bell_Number(88) == 98110, \"bell_Number should return 98110 for n = 88\"\n    bell_Number(91) == 98100, \"bell_Number should return 98100 for n = 91\"\n    bell_Number(93) == 97970, \"bell_Number should return 97970 for n = 93\"\n    bell_Number(94) == 97740, \"bell_Number should return 97740 for n = 94\"\n    bell_Number(95) == 97630, \"bell_Number should return 97630 for n = 95\"\n    bell_Number(97) == 97520, \"bell_Number should return 97520 for n = 97\"\n    bell_Number(100) == 97410, \"bell_Number should return 97410 for n = 100\"\n    bell_Number(102) == 97240, \"bell_Number should return 97240 for n = 102\"\n    bell_Number(104) == 97120, \"bell_Number should return 97120 for n = 104\"\n    bell_Number(107) == 97080, \"bell_Number should return 97080 for n = 107\"\n    bell_Number(109) == 96960, \"bell_Number should return 96960 for n = 109\"\n    bell_Number(110) == 96850, \"bell_Number should return 96850 for n = 110\"\n    bell_Number(111) == 96740, \"bell_Number should return 96740 for n = 111\"\n    bell_Number(113) == 96620, \"bell_Number should return 96620 for n = 113\"\n    bell_Number(116) == 96510, \"bell_Number should return 96510 for n = 116\"\n    bell_Number(119) == 96390, \"bell_Number should return 96390 for n = 119\"\n    bell_Number(121) == 96380, \"bell_Number should return 96380 for n = 121\"\n    bell_Number(123) == 96260, \"bell_Number should return 96260 for n = 123\"\n    bell_Number(126) == 96160, \"bell_Number should return 96160 for n = 126\"\n    bell_Number(127) == 96110, \"bell_Number should return 96110 for n = 127\"\n    bell_Number(128) == 96000, \"bell_Number should return 96000 for n = 128\"\n    bell_Number(129) == 95880, \"bell_Number should return 95880 for n = 129\"\n    bell_Number(130) == 95770, \"bell_Number should return 95770 for n = 130\"\n    bell_Number(131) == 95660, \"bell_Number should return 95660 for n = 131\"\n    bell_Number(133) == 95540, \"bell_Number should return 95540 for n = 133\"\n    bell_Number(135) == 95420, \"bell_Number should return 95420 for n = 135\"\n    bell_Number(136) == 95300, \"bell_Number should return 95300 for n = 136\"\n    bell_Number(138) == 95280, \"bell_Number should return 95280 for n = 138\"\n    bell_Number(140) == 95170, \"bell_Number should return 95170 for n = 140\"\n    bell_Number(142) == 95040, \"bell_Number should return 95040 for n = 142\"\n    bell_Number(143) == 94930, \"bell_Number should return 94930 for n = 143\"\n    bell_Number(146) == 94810, \"bell_Number should return 94810 for n = 146\"\n    bell_Number(148) == 94700, \"bell_Number should return 94700 for n = 148\"\n    bell_Number(150) == 94680, \"bell_Number should return 94680 for n = 150\"\n    bell_Number(151) == 94570, \"bell_Number should return 94570 for n = 151\"\n    bell_Number(153) == 94450, \"bell_Number should return 94450 for n = 153\"\n    bell_Number(154) == 94330, \"bell_Number should return 94330 for n = 154\"\n    bell_Number(157) == 94220, \"bell_Number should return 94220 for n = 157\"\n    bell_Number(158) == 94110, \"bell_Number should return 94110 for n = 158\"\n    bell_Number(160) == 93980, \"bell_Number should return 93980 for n = 160\"\n    bell_Number(162) == 93760, \"bell_Number should return 93760 for n = 162\"\n    bell_Number(163) == 93650, \"bell_Number should return 93650 for n = 163\"\n    bell_Number(165) == 93540, \"bell_Number should return 93540 for n = 165\"\n    bell_Number(167) == 93420, \"bell_Number should return 93420 for n = 167\"\n    bell_Number(169) == 93290, \"bell_Numbe"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 3\nassert     bell_Number(4) == 4\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_Number(1) == 1\nassert     bell_Number(2) == 1\nassert     bell_Number(3) == 2\nassert     bell_Number(4) == 2\nassert     bell_Number(5) == 3\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert bell_Number(0) == 1\nassert bell_Number(1) == 1\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 3\nassert     bell_Number(4) == 5\nassert     bell_Number(5) == 8\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([1, 2, 3], 1) == [1, 3], \"1st case\"\nassert     remove_kth_element([1, 2, 3], 0) == [1, 3], \"2nd case\"\nassert     remove_kth_element([1, 2, 3], 3) == [1, 2], \"3rd case\"\nassert     remove_kth_element([1, 2, 3], 5) == [1, 2, 3], \"4th case\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1,2,3,4], 0) == []\nassert     remove_kth_element([1,2,3,4], 1) == []\nassert     remove_kth_element([1,2,3,4], 2) == [3,4]\nassert     remove_kth_element([1,2,3,4], 3) == [1,2,4]\nassert     remove_kth_element([1,2,3,4], 4) == [1,2,3]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7,8], 4) == [1,2,3,5,6,7,8], 'Wrong output'\nassert     remove_kth_element([1,2,3,4,5,6,7,8], 9) == [1,2,3,5,6,7,8], 'Wrong output'\nassert     remove_kth_element([1,2,3,4,5,6,7,8], 0) == [1,2,3,4,5,6,7,8], 'Wrong output'\nassert     remove_kth_element([1,2,3,4,5,6,7,8], -1) == [1,2,3,4,5,6,7,8], 'Wrong output'\nassert     remove_kth_element([1,2,3,4,5,6,7,8], -2) == [1,2,3,4,5,6,7], 'Wrong output'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7,8],5) == [1,2,3,4,6,7,8], \"Wrong answer\"\n\ndef remove_element_using_bit_operations(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # bitwise operation - &(set1 & set2)\n    # bitwise operation - |(set1 | set2)\n    # bitwise operation - ^(set1 ^ set2)\n    # bitwise operation - ~(set1)\n    # bitwise operation - <<(set1 << 2)\n    # bitwise operation - >>(set1 >> 2)\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1,2,3,4], 3) ==     [1,2,4], '1'\nassert     remove_kth_element([1,2,3,4], -4) ==     [1,2,3], '2'\nassert     remove_kth_element([1,2,3,4], 5) ==     [1,2,4], '3'\nassert     remove_kth_element([1,2,3,4], 6) ==     [1,2,3], '4'\nassert     remove_kth_element([1,2,3,4], 4) ==     [1,2,3], '5'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([\"apple\", \"banana\", \"cherry\"], 1) == [\"apple\", \"banana\"]\nassert     remove_kth_element([\"apple\", \"banana\", \"cherry\"], 2) == [\"apple\", \"cherry\"]\nassert     remove_kth_element([\"apple\", \"banana\", \"cherry\"], 3) == [\"cherry\"]\nassert     remove_kth_element([\"apple\", \"banana\", \"cherry\"], 4) == []\nassert     remove_kth_element([], 3) == []\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 3) == [1,2,4,5,6], \"Fail\"\nassert     remove_kth_element([10,20,30,40,50], 1) == [10,20,30,40], \"Fail\"\nassert     remove_kth_element([1,2,3,4,5,6], 1) == [], \"Fail\"\n\ndef is_possible(li, num):\n    '''\n    Write a python function which checks if it is possible to give a certain sum to a list.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([2, 3, 4, 5, 6], 2) == [2, 3, 5, 6], 'Wrong Answer'\nassert     remove_kth_element([2, 3, 4, 5, 6], 3) == [2, 4, 5, 6], 'Wrong Answer'\nassert     remove_kth_element([2, 3, 4, 5, 6], 4) == [2, 3, 6], 'Wrong Answer'\nassert     remove_kth_element([2, 3, 4, 5, 6], 0) == [2, 3, 4, 5], 'Wrong Answer'\nassert     remove_kth_element([2, 3, 4, 5, 6], 6) == [2, 3, 4, 5], 'Wrong Answer'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 1, \"Wrong answer\"\nassert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 4, \"Wrong answer\"\nassert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_of_nth([[1, 5, 4],\n              [6, 7, 2],\n              [3, 5, 5]], 1) == 6\nassert max_of_nth([[1, 5, 4],\n              [6, 7, 2],\n              [3, 5, 5]], 3) == 5\nassert max_of_nth([[1, 5, 4],\n              [6, 7, 2],\n              [3, 5, 5]], 5) == 7\nassert max_of_nth([[1, 5, 4],\n              [6, 7, 2],\n              [3, 5, 5]], 7) == 7\nassert max_of_nth([[1, 5, 4],\n              [6, 7, 2],\n              [3, 5, 5]], 2) == 5\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_matrix = [[1,2,3,4,5],\n                    [6,7,8,9,10],\n                    [11,12,13,14,15],\n                    [16,17,18,19,20]]\n    print(max_of_nth(test_matrix, 2))\n    # 9\n    print(max_of_nth([[1,2,3,4,5],\n                    [6,7,8,9,10],\n                    [11,12,13,14,15],\n                    [16,17,18,19,20]], 5))\n    # 15\n    print(max_of_nth([[1,2,3,4,5],\n                    [6,7,8,9,10],\n                    [11,12,13,14,15],\n                    [16,17,18,19,20]], 4)"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_of_nth([[1,2,3],\n                     [4,5,6],\n                     [7,8,9]], 0) == 9, 'Error, incorrect max_of_nth'\nassert     max_of_nth([[1,2,3],\n                     [4,5,6],\n                     [7,8,9]], 2) == 7, 'Error, incorrect max_of_nth'\nassert     max_of_nth([[1,2,3],\n                     [4,5,6],\n                     [7,8,9]], 1) == 9, 'Error, incorrect max_of_nth'\nassert     max_of_nth([[1,2,3],\n                     [4,5,6],\n                     [7,8,9]], 4) == 6, 'Error, incorrect max_of_nth'\nassert     max_of_nth([[1,2,3],\n                     [4,5,6],\n                     [7,8,9]], 5) == 9, 'Error, incorrect max_of_nth'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9],\n                        [10,11,12]], 1) == 11, \"1st testcase\"\nassert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9],\n                        [10,11,12]], 2) == 12, \"2nd testcase\"\nassert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9],\n                        [10,11,12]], 3) == 10, \"3rd testcase\"\nassert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9],\n                        [10,11,12]], 4) == 12, \"4th testcase\"\nassert     max_of_nth([[1,2,3],\n                        [4,5,6],\n                        [7,8,9],\n                        [10,11,12]], 5) == 12, \"5th testcase\"\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_of_nth([[5,7,3],\n                    [4,7,8],\n                    [6,3,4]], 1) == 11\nassert     max_of_nth([[5,7,3],\n                    [4,7,8],\n                    [6,3,4]], 2) == 8\nassert     max_of_nth([[5,7,3],\n                    [4,7,8],\n                    [6,3,4]], 3) == 5\nassert     max_of_nth([[5,7,3],\n                    [4,7,8],\n                    [6,3,4]], 4) == 7\nassert     max_of_nth([[5,7,3],\n                    [4,7,8],\n                    [6,3,4]], 5) == 7\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_of_nth([[1,2],\n        [3,4],\n        [5,6]], 0) == 6\nassert max_of_nth([[1,2],\n        [3,4],\n        [5,6]], 2) == 4\nassert max_of_nth([[1,2],\n        [3,4],\n        [5,6]], 3) == 6\nassert max_of_nth([[1,2],\n        [3,4],\n        [5,6]], 4) == 6\nassert max_of_nth([[1,2],\n        [3,4],\n        [5,6]], 5) == 6\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]], \"Should merge [[1, 2], [3, 4]] into [[1, 2], [3, 4]]\"\nassert merge([[1], [2]]) == [[1], [2]], \"Should merge [[1], [2]] into [[1], [2]]\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge([[1,2], [3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert     merge([[1,2,3,4,5],[5,6,7,8,9]]) == [[1,2],[3,4],[5,6,7,8,9]]\nassert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     merge([[1,2]]) == [[1,2]]\nassert     merge([[1],[2]]) == [[1],[2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge([[1,2],[3,4],[5,6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1,2],[3,4]]) == [[1, 2], [3, 4]]\nassert     merge([[1],[2]]) == [[1], [2]]\nassert     merge([[],[]]) == [[], []]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nmerge([[1, 3],\n    [4, 5],\n    [5, 8],\n    [1, 2]]) == [[1, 1],\n    [2, 2],\n    [3, 3],\n    [4, 4],\n    [5, 5],\n    [5, 8]]\n\nassert \nmerge([[1, 3],\n    [4, 5],\n    [5, 8]]) == [[1, 1],\n    [2, 2],\n    [3, 3],\n    [4, 4],\n    [5, 5],\n    [5, 8]]\n\nassert \nmerge([[1, 3, 8],\n    [4, 5],\n    [5, 8]]) == [[1, 1, 8],\n    [2, 2],\n    [3, 3],\n    [4, 4],\n    [5, 5],\n    [5, 8]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1,3],[2,4]], \"Error in Merge\"\nassert     merge([[1,2],[3,4],[5,6]]) == [[1,3],[2,4],[5,6]], \"Error in Merge\"\nassert     merge([[1,2,3],[4,5,6]]) == [[1,4],[2,5],[3,6]], \"Error in Merge\"\nassert     merge([[1,2,3,4],[5,6,7,8]]) == [[1,5],[2,6],[3,7],[4,8]], \"Error in Merge\"\nassert     merge([[1,2,3,4],[5,6,7,8],[9,10]]) == [[1,5],[2,6],[3,7],[4,8],[9,10]], \"Error in Merge\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"\\nTesting merge:\")\nprint(merge([[1, 2], [3, 4], [4, 5]]))"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]\nassert     merge([[1, 2], [1, 2]]) == [[1, 1], [2, 2]]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cummulative_sum([1,2,3]) == [1,3,6], \"Should be 6\"\nassert     cummulative_sum([1,2,3,4,5,6,7]) == [1,3,6,10,15,21,28], \"Should be 28\"\nassert     cummulative_sum([1,2,3,4,5]) == [1,3,6], \"Should be 6\"\nassert     cummulative_sum([1,2]) == [1,2], \"Should be 2\"\nassert     cummulative_sum([1]) == [1], \"Should be 1\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum(test_list) == (1, 3, 6, 10)\nassert     cummulative_sum(test_list_2) == (1, 2, 3, 4)\n\ndef cummulative_sum_2(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cummulative_sum([3,4,5,6]) == 21, \"Should be 21\"\nassert     cummulative_sum([]) == 0, \"Should be 0\"\nassert     cummulative_sum(()) == 0, \"Should be 0\"\nassert     cummulative_sum(('3','4','5')) == 43, \"Should be 43\"\nassert     cummulative_sum([3]) == 3, \"Should be 3\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cummulative_sum([1, 2, 3]) == [1, 3, 6] \nassert     cummulative_sum([]) == [] \nassert     cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15] \nassert     cummulative_sum((1, 2, 3, 4, 5, 6)) == [1, 3, 6, 10, 15, 21]\nassert     cummulative_sum((0.4, -0.1, -0.2)) == [-0.4, -0.4, -0.3, -0.2, -0.1]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cummulative_sum([10,20,30,40]) == 100\nassert     cummulative_sum([50,40,30,20,10]) == 150\n\n'''\nExercise 1.2\n'''\n\ndef has_duplicates(test_list):\n    '''\n    Write a function that checks whether the given list contains any duplicate items.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cummulative_sum((1, 2, 3)) == (1, 3, 6)\nassert     cummulative_sum((1, 0, 0, 0, -1)) == (1, 0, -1, 0, 0)\nassert     cummulative_sum((1, -2, -3)) == (1, -2, -2)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     [1,2,3] == cummulative_sum((1,2,3))\nassert    [6,7] == cummulative_sum((2,3,4,5,6))"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cummulative_sum([1,2,3,4]) == [1, 3, 6, 10], \"Wrong answer\"\nassert     cummulative_sum([1,2,3,4,5]) == [1, 3, 6, 10, 15], \"Wrong answer\"\nassert     cummulative_sum([1,2,3,4,5,6]) == [1, 3, 6, 10, 15, 21], \"Wrong answer\"\nassert     cummulative_sum([1,2,3,4,5,6,7]) == [1, 3, 6, 10, 15, 21, 28], \"Wrong answer\"\nassert     cummulative_sum([1,2,3,4,5,6,7,8]) == [1, 3, 6, 10, 15, 21, 28, 35], \"Wrong answer\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cummulative_sum([1, 2, 3, 4]) == [1, 3, 6, 10], \"This is not correct\"\nassert     cummulative_sum([3, 3, 3, 3, 3]) == [3, 6, 12, 21, 33], \"This is not correct\"\nassert     cummulative_sum([5, 6, 7]) == [5, 11], \"This is not correct\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cummulative_sum([0,1,2,3,4,5,6,7,8,9]) == (0,1,3,6,10,15,21,28,45,55)\nassert     cummulative_sum([0,1,2]) == (0,1,3)\nassert     cummulative_sum([]) == ()\nassert     cummulative_sum((0,1,2)) == ()\nassert     cummulative_sum((0,)) == ()\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     average_tuple([\n(1, 1, 1),\n(2, 2, 2),\n(3, 3, 3)\n]) == (1, 1, 1), \"incorrect output\"\nassert     average_tuple([\n(1, 1, 1),\n(2, 2, 2),\n(3, 3, 3)\n]) == (2, 2, 2), \"incorrect output\"\nassert     average_tuple([\n(1, 1, 1),\n(1, 1, 1),\n(1, 1, 1)\n]) == (1, 1, 1), \"incorrect output\"\nassert     average_tuple([\n(1, 1, 1),\n(1, 1, 1)\n]) == (1, 1, 1), \"incorrect output\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     average_tuple( ( (1, 2), (3, 4) ) ) == (2, 3)\nassert     average_tuple( ( (1, 2), (3, 4), (5, 6) ) ) == (2, 3, 4)\nassert     average_tuple( ( (1, 2), (3, 4) ) ) == (2.0, 3.0)\nassert     average_tuple( ( (1, 2), ) ) == (1.0, 2.0)\nassert     average_tuple( ( ) ) == ()\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     average_tuple([(1, 2, 3), (4, 5, 6)]) == [(1 + 2 + 3) / 3, (4 + 5 + 6) / 3]\n\nassert     average_tuple([(1, 1, 1), (2, 2, 2)]) == [(1 + 1 + 1) / 3, (2 + 2 + 2) / 3]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple([(1,2), (2,3), (3,4)]) == [2.2, 3.3, 4.4], \\\n    'Expected average_tuple(((1,2), (2,3), (3,4))) to return 2.2, 3.3, 4.4, but got {0}'.format(average_tuple(((1,2), (2,3), (3,4))))\nassert     average_tuple([(1,), (2,), (3,)]) == [1.0, 2.0, 3.0], \\\n    'Expected average_tuple(((1,), (2,), (3,))) to return 1.0, 2.0, 3.0, but got {0}'.format(average_tuple(((1,), (2,), (3,))))\nassert     average_tuple([(1,)]) == [1.0], \\\n    'Expected average_tuple(((1,),)) to return 1.0, but got {0}'.format(average_tuple(((1,),)))\nassert     average_tuple([(1,2), (2,3)]) == [2.0, 3.0], \\\n    'Expected average_tuple(((1,2), (2,3))) to return 2.0, 3.0, but got {0}'.format(average_tuple(((1,2), (2,3))))\nassert     average_tuple([(1,2,3), (4,5,6)]) == [2.5, 5.5], \\\n    'Expected average_tuple(((1,2,3), (4,5,6))) to return 2.5, 5.5, but got {0}'.format(average_tuple(((1,2,3), (4,5,6))))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3.0, 5.5, 7.0]\n\ndef average_list(nums):\n    '''\n    Write a function which takes a list of numbers and returns the average value.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple([(1, 2), (3, 4)]) == [2.0, 3.0], \"test 1 failed\"\nassert     average_tuple([(1, 2, 3), (2, 3, 4)]) == [2.5, 3.5, 4.0], \"test 2 failed\"\nassert     average_tuple([(1, 2, 3, 4), (2, 3, 4)]) == [2.5, 3.5, 4.0], \"test 3 failed\"\nassert     average_tuple([(1, 2, 3), (2, 3)]) == [2.0, 3.0], \"test 4 failed\"\nassert     average_tuple([(1, 2, 3, 4), (2, 3)]) == [2.0, 3.0], \"test 5 failed\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple(((1, 2, 3), (4, 5, 6))) == ([1.0, 2.0, 3.0], [4.0, 5.0, 6.0])\nassert     average_tuple(((1, 2, 3), (2, 4, 5))) == ([1.0, 2.0, 3.0], [2.0, 4.0, 5.0])\nassert     average_tuple(((1, 2, 3), (3, 4, 5))) == ([1.0, 2.0, 3.0], [3.0, 4.0, 5.0])\nassert     average_tuple(((1, 2, 3), (2, 4, 5), (1, 4, 5))) == ([1.0, 2.0, 3.0], [2.0, 4.0, 5.0])\nassert     average_tuple(((1, 2, 3), (2, 4, 5), (3, 4, 5))) == ([1.0, 2.0, 3.0], [2.0, 4.0, 5.0])\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [(1,2,3), (4,5,6), (7,8,9)]\n    assert average_tuple(((1,2), (3,4,5), (6,7))) == [(1,2), (3,4,5), (6,7)]\n    assert average_tuple(((1,2,3), (4,5,6), (7,8,9), (10,11,12))) == [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]\n\n'''\nWrite a function which takes a list of lists of numbers (l) and returns a list with the numbers (l) \nin increasing order.\n'''\ndef l_sorted(l):\n    '''\n    Write a function which takes a list of lists of numbers (l) and returns a list with the numbers (l) \n    in increasing order.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_modulo((1,2), (3,4)) == (0,0)\nassert     tuple_modulo((1,1), (1,0)) == (0,1)\nassert     tuple_modulo((1,0), (1,0)) == (1,0)\nassert     tuple_modulo((0,0), (0,0)) == (0,0)\nassert     tuple_modulo((0,0), (1,0)) == (0,0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((0,0,0),(3,3,3))    == (0,0,0), \\\n        \"Failed tuple_modulo. Your function did not return the expected tuple.\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((3, 4), (3, 4)) == (0, 0)\nassert tuple_modulo((3, 4), (4, 4)) == (1, 0)\nassert tuple_modulo((3, 4), (5, 4)) == (2, 0)\nassert tuple_modulo((3, 4), (3, 5)) == (2, 1)\nassert tuple_modulo((3, 4), (5, 5)) == (1, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((1,2), (1,2)) == (0,0)\nassert     tuple_modulo((2,4), (2,4)) == (0,0)\nassert     tuple_modulo((1,2), (2,2)) == (1,0)\nassert     tuple_modulo((10,20), (10,20)) == (0,0)\nassert     tuple_modulo((2,10), (2,10)) == (0,0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo((1,2,3),(3,2,1)) == (1,2,1), \"modulo = (1,2,1)\"\nassert tuple_modulo((1,2,3),(4,5,6)) == (1,2,3), \"modulo = (1,2,3)\"\nassert tuple_modulo((3,2,1),(1,2,3)) == (1,2,0), \"modulo = (1,2,0)\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (1, 2, 3) % (1, 2, 3) == (0, 0, 0)\nassert     (2, 4, 6) % (1, 2, 3) == (1, 2, 1)\nassert     (5, 6, 7) % (1, 2, 3) == (2, 2, 1)\nassert     (7, 8, 9) % (1, 2, 3) == (3, 1, 2)\nassert     (1, 2, 3) % (4, 5, 6) == (1, 0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo((0,), (0,)) == (0,)\nassert     tuple_modulo((0,), (1,)) == (0,)\nassert     tuple_modulo((2,), (2,)) == (0,)\nassert     tuple_modulo((1,), (1,)) == (0,)\nassert     tuple_modulo((1,), (2,)) == (1,)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo((1, 2), (10, 20)) == (0, 0)\nassert     tuple_modulo((1, 2), (2, 4)) == (0, 2)\nassert     tuple_modulo((1, 2), (3, 6)) == (1, 2)\nassert     tuple_modulo((1, 2), (3, 7)) == (1, 3)\nassert     tuple_modulo((1, 2, 3), (4, 6, 8)) == (0, 2, 4)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_palindrome(word):\n    '''\n    Write a function which returns True if the word is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo((1,2), (2,2)) == (0,0)\nassert     tuple_modulo((1,2), (3,4)) == (1,0)\nassert     tuple_modulo((1,2), (0,0)) == (0,0)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Jumps([2,1,1,1], 1) == 3\nassert     min_Jumps([2,1,1,1], 2) == 4\nassert     min_Jumps([2,1,1,1], 3) == 5\nassert     min_Jumps([2,1,1,1], 4) == 5\nassert     min_Jumps([2,1,1,1], 5) == 5\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nProblem 3: Jump Game II\n\nGiven a positive integer, n, and two integers, a and b, determine whether it's possible to reach a larger value, x,\nwhere x is the sum of the digits of n.\n\nInput Format\nThe first line contains an integer, n, denoting the integer value.\nThe second line contains two space-separated integers, a and b, denoting the starting and ending value.\n\nConstraints\n0 < n < 109\n0 < a,b < 10\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Jumps(steps = 4, d = 3) == 2\nassert     min_Jumps(steps = 10, d = 1) == 1\nassert     min_Jumps(steps = 11, d = 1) == 2\nassert     min_Jumps(steps = 5, d = 1) == 0\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(steps = 2, d = 1) == 2, \\\n        \"Wrong answer. Expected: {2}, got: {}\".format(2, min_Jumps(steps = 2, d = 1))\nassert     min_Jumps(steps = 2, d = 2) == 1, \\\n        \"Wrong answer. Expected: {1}, got: {}\".format(1, min_Jumps(steps = 2, d = 2))\nassert     min_Jumps(steps = 3, d = 1) == 2, \\\n        \"Wrong answer. Expected: {2}, got: {}\".format(2, min_Jumps(steps = 3, d = 1))\nassert     min_Jumps(steps = 3, d = 2) == 1, \\\n        \"Wrong answer. Expected: {1}, got: {}\".format(1, min_Jumps(steps = 3, d = 2))\nassert     min_Jumps(steps = 4, d = 1) == 2, \\\n        \"Wrong answer. Expected: {2}, got: {}\".format(2, min_Jumps(steps = 4, d = 1))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    min_Jumps(4, 2) == 4\n    min_Jumps(4, 1) == 2\n    min_Jumps(1, 1) == 0"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert min_Jumps(7, 4) == 5\nassert min_Jumps(7, 3) == 4\nassert min_Jumps(7, 2) == 3\nassert min_Jumps(7, 1) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps(steps = 3, d = 3) == 3\nassert min_Jumps(steps = 1, d = 3) == 0\nassert min_Jumps(steps = 2, d = 3) == 2\nassert min_Jumps(steps = 2, d = 4) == 1\nassert min_Jumps(steps = 2, d = 1) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\n4. Write a function that takes in a list of integers and returns the index of the item that is repeated the most.\n'''\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    div_list([0,1,2,3,4,5], [2,4,6,8,10]) == [[0, 1], [2, 3], [4, 5]]\n    div_list([0,1,2,3,4], [2,4,6,8,10]) == [[0, 1, 2], [3, 4, 5]]\n    div_list([1,2,3], []) == [[1], [2], [3]]\n    div_list([], [2,4,6,8,10]) == [[]]\n    div_list([1], [2,4,6,8,10]) == [[1], [2, 4], [6, 8], [10]]"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     div_list([1,2,3,4],    [10,20,30,40]) == [[0.25,0.5,0.75,1.0],\n                                            [1.5,2.5,3.5,4.5]]\nassert     div_list([3,4,5,6,7],    [1,2,3,4,5,6,7,8]) == [[3,4,5,6,7],\n                                            [2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0]]\nassert     div_list([1,2,3],     [10,20,30,40]) == [[1.0,2.0,3.0,1.0],\n                                            [0.25,0.5,0.75,0.5],\n                                            [1.0,2.0,3.0,1.0],\n                                            [0.25,0.5,0.75,0.5]]\nassert     div_list([1,2,3],     [3,4,5,6]) == [[1.0,2.0,3.0,1.0],\n                                            [1.0,2.0,3.0,1.0],\n                                            [0.25,0.5,0.75,0.5],\n                                            [1.0,2.0,3.0,1.0]]\nassert     div_list([],     [10,20,30,40]) == []\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndiv_list([1,2,3,4], [2,1,4,8]) == [[1,2,3,4], [0.5,1,4,8]]\nassert \ndiv_list([1,2,3,4], [2,1,4,8,10]) == [[1,2,3,4], [0.5,1,2,4.0]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_list([1,2,3,4],[2,4,8,16]) == [1,2,3,4]\nassert     div_list([1,2,3,4],[5,8,9,12]) == [1,2,3,0]\nassert     div_list([1,2,3,4],[1,2,3,4]) == [1,1,1,1]\nassert     div_list([1,2,3,4],[5,8,9,12]) == [1,2,3,0]\nassert     div_list([1,2,3,4],[1,2,3,4]) == [1,1,1,1]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef avg_list(nums1,nums2):\n    '''\n    Write a function to calculate the average of two lists.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    l1 = [1,2,3,4]\n    l2 = [10,20,30,40]\n    div_list(l1,l2)\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndiv_list([1,2,3,4], [2,4])\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert\nassert move_num(\"010\") == \"1\"\nassert move_num(\"1\") == \"0\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num('') == ''\nassert     move_num('1') == '1'\nassert     move_num('12') == '12'\nassert     move_num('123') == '123'\nassert     move_num('12345') == '4512'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num('anumbersdf') == 'ndfgeu'\nassert     move_num('amove mto the end') == 'ofte mthe end'\nassert     move_num('move the end') == 'end'\nassert     move_num('mive') == 'ive'\nassert     move_num('move ') == 'o move'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num('a1b2c3d4') == 'dbcfa1c2', 'incorrect'\nassert     move_num('a1b2c3d4a') == 'dcfb1a2c3', 'incorrect'\nassert     move_num('abc123def') == 'fed123abc', 'incorrect'\nassert     move_num('abcabcabc') == 'fedcabcabc', 'incorrect'\nassert     move_num('abca') == 'fedcabca', 'incorrect'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_num(\"\") == \"\"\nassert    move_num(\"1\") == \"1\"\nassert    move_num(\"2-3-4\") == \"4-3-2\"\nassert    move_num(\"12345-6-7-8-9\") == \"9-8-7-6-5\"\n\ndef move_num_to_end(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # a method to move all the numbers to the end of the given string\n    s = []\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            while i < len(test_str):\n                if not test_str[i].isdigit():\n                    s.append(test_str[i])\n                    i += 1\n                    break\n        i += 1\n    s.reverse()\n    return \"\".join(s)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num(\"1a2b3c4d\") == \"132442d41\"\nassert     move_num(\"12345abcd\") == \"9abcd1234\"\nassert     move_num(\"\") == \"\"\n\ndef increment(test_str):\n    '''\n    Write a function to increment the given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num(\"12ab34cd\") == \"dcbabcd\"\nassert     move_num(\"432d8862\") == \"2cd4483\"\nassert     move_num(\"a3b4c5a\") == \"f4c5b4a\"\nassert     move_num(\"1a2\") == \"2a1\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num(\"a0b1c2d3e4f5g6h7i8j9k\") == \"jihgfebkcuw\"\nassert     move_num(\"\") == \"\"\nassert     move_num(\"testing\") == \"esabtng\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num(\"the sky is blue\") == \"blue is sky the\"\nassert     move_num(\"  hello world  \") == \"world hello\"\nassert     move_num(\"a good   example\") == \"example a\"\nassert     move_num(\"  zxcvbnm  \") == \"  m zxcvbn\"\nassert     move_num(\"aeiou\") == \"ouaei\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num(\"hoge\") == \"fgeo\"\nassert     move_num(\"h\") == \"eh\"\nassert     move_num(\"hgefge\") == \"hgefge\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([1,2,3,4,5]) == 3\nassert     largest_subset([1,2,3,4,5,7,8]) == 4\nassert     largest_subset([2,4,6,8,10]) == 3\nassert     largest_subset([2,4,6,8,10,14]) == 5\nassert     largest_subset([1,2,3,4,5,7]) == 5\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_subset([1,2,3]) == 1\nassert     largest_subset([1,2,3,4]) == 1\nassert     largest_subset([1,2,3,4,5]) == 1\nassert     largest_subset([1,2,3,4,5,6]) == 2\nassert     largest_subset([1,2,3,4,5,6,7]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_subset([1,2,4,8,16,32]) == 16\nassert     largest_subset([1,2,4,8]) == 8\nassert     largest_subset([1,2,4,8,16,32,64,128,256,512]) == 16\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([1, 2, 3, 4, 5, 6]) == 3\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 6\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8]) == 6\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_subset([1,2,4,8,16,32,64,128,256,512]) == 16, \"Function does not work\"\nassert     largest_subset([1,2,4,8,16,32,64,128]) == 16, \"Function does not work\"\nassert     largest_subset([1,2,4,8,16,32,64,128]) == 16, \"Function does not work\"\nassert     largest_subset([1,2,4,8,16,32,64,128]) == 16, \"Function does not work\"\nassert     largest_subset([1,2,4,8,16,32,64,128]) == 16, \"Function does not work\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_subset([1,2,4,8]) == 2\nassert     largest_subset([1,2,4,8,16,32]) == 4\nassert     largest_subset([1,2,4,8,16,32,64]) == 4\nassert     largest_subset([1,2,4,8,16,32,64,128]) == 5\nassert     largest_subset([1,2,4,8,16,32,64,128,256]) == 6\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_subset([1, 2, 3, 4]) == 3\nassert     largest_subset([1, 2, 3, 5, 6, 7]) == 3\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_subset([1,2,3,4]) == 3\nassert     largest_subset([1,2,3,4,5]) == 4\nassert     largest_subset([1,2,3,4,5,6]) == 4\nassert     largest_subset([1,2,3,4,5,6,7]) == 4\nassert     largest_subset([1,2,3,4,5,6,7,8]) == 4\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [6, 7, 8, 9, 10]\n    print(get_median(arr1, arr2, 5))\n    print(get_median(arr1, arr2, 10))"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\narr1 = [1, 3, 5, 7]\narr2 = [2, 4, 6, 8]\nn = 5\nprint(get_median(arr1, arr2, n))\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_median([1,2,3,4,5,6], [3,4,5,6,7,8], 5) == 4\nassert get_median([1,2,3,4,5,6,7,8], [3,4,5,6,7,8], 10) == 3\nassert get_median([1,2,3,4,5,6], [3,4,5,6,7,8], 8) == 4\nassert get_median([1,2,3,4,5,6], [3,4,5,6,7,8], 6) == 4\nassert get_median([1,2,3,4,5,6], [3,4,5,6,7,8], 1) == 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_median([1, 2, 3], [3, 2, 1], 3) == 2\nassert     get_median([1, 2, 3, 4], [3, 2, 1], 4) == 2.5\nassert     get_median([1, 2, 3, 4], [3, 2, 1], 2) == 3\nassert     get_median([1, 2, 3, 4], [3, 2, 1], 1) == 2\nassert     get_median([1, 2, 3, 4], [3, 2, 1], 0) == 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_median([1,2,3,4],[3,4,5,6],4) == 3.5\n\nclass MedianFinder:\n    '''\n    Write a class to find the median of a list of numbers.\n    '''\n    def __init__(self):\n        '''\n        initialize your data structure here.\n        '''\n        # hash map with a key for the unique array index and value for the array index\n        self.data = {}\n\n    def addNum(self, num):\n        '''\n        Add a num to the table.\n        '''\n        # if the key doesn't exist, create it, otherwise add to the array\n        if num in self.data:\n            self.data[num].append(len(self.data))\n        else:\n            self.data[num] = [len(self.data)]\n\n    def findMedian(self):\n        '''\n        Find the median of all the elements of the array.\n        '''\n        # if the table is empty, then there's no median, so return -1\n        if len(self.data) == 0:\n            return -1\n        # sort the keys so we can get the median\n        keys = sorted(self.data.keys())\n        # if the number of keys is odd, then the median is the middle element\n        if len(self.data) % 2 == 1:\n            return keys[len(keys) // 2]\n        else:\n            # else the median is the average of the middle and the end element\n            return (keys[len(keys) // 2] + keys[(len(keys) // 2) - 1]) / 2\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     nth_nums([1, 2, 3, 4], 1) == [1, 4, 9, 16]\nassert     nth_nums([1, 2, 3, 4], 3) == [1, 8, 27, 64]\nassert     nth_nums([1, 2, 3, 4], 5) == []\n\n\ndef nth_power(nums,n):\n    '''\n    Write a function that computes the n-th power of a number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_in_list(nums):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\n[2,3,5,8]\n4\n[2,3,5,8]\n100\n[2,3,5,8]\n300\n'''\n\ndef fib(n):\n    '''\n    Write a function that takes in a number n and returns the nth Fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     nth_nums([1,2,3,4,5], 3) == [1,2,9,16,25]\nassert     nth_nums([1,2,3,4,5], 5) == [1,4,25,64,125]\nassert     nth_nums([1,2,3,4,5], 5) == [1,4,25,64,125]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     nth_nums(n=1, nums=[1,2,3,4]) == [1,2,9,16]\nassert     nth_nums(n=2, nums=[1,2,3,4]) == [1,4,9,16]\nassert     nth_nums(n=3, nums=[1,2,3,4]) == [1,8,27,64]\nassert     nth_nums(n=4, nums=[1,2,3,4]) == [1,16,81,256]\nassert     nth_nums(n=5, nums=[1,2,3,4]) == [1,64,256,1024]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     nth_nums([],1) == [], 'Fail the correctness of the function nth_nums([]).'\nassert     nth_nums([1],1) == [1], 'Fail the correctness of the function nth_nums([1],1).'\nassert     nth_nums([1,2],2) == [1,2], 'Fail the correctness of the function nth_nums([1,2],2).'\nassert     nth_nums([1,2,3],3) == [1,2,9], 'Fail the correctness of the function nth_nums([1,2,3],3).'\nassert     nth_nums([1,2,3,4],4) == [1,2,9,16], 'Fail the correctness of the function nth_nums([1,2,3,4],4).'\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    nth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16]\n    nth_nums([1, 2, 3, 4], 1) == [1, 2, 3, 4]\n    nth_nums([1, 2, 3, 4], 0) == []\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_upper('') == True\nassert     is_upper('a') == False\nassert     is_upper('A') == True\nassert     is_upper('A') == True\nassert     is_upper('1') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_upper('mikal')\nassert is_upper('Mikal')\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper('hello') == False\nassert     is_upper('HELLO') == True\nassert     is_upper('HELLO WORLD') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_all_upper(string):\n    '''\n    Write a python function to check if all the characters in a string are upper case.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper(\"upper\") == True\nassert     is_upper(\"lower\") == False\nassert     is_upper(\"Mixed\") == False\nassert     is_upper(\"UPPER\") == True\nassert     is_upper(\"UPPER@#$\") == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_upper(\"hello world\") == True, \"The string should be uppercase\"\nassert     is_upper(\"HELLO WORLD\") == False, \"The string should be uppercase\"\nassert     is_upper(\"HELO WORLD\") == True, \"The string should be uppercase\"\nassert     is_upper(\"helloWorld\") == True, \"The string should be uppercase\"\nassert     is_upper(\"HELLO WORLD\") == False, \"The string should be uppercase\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper('A') == True, 'A, should be True'\nassert is_upper('a') == False, 'a, should be False'\nassert is_upper('!') == False, '!, should be False'\nassert is_upper('%') == False, '%, should be False'\nassert is_upper('.') == False, '.', should be False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('hi') == False, 'wrong!'\nassert     is_upper('H') == True, 'wrong!'\nassert     is_upper('H') == True, 'wrong!'\nassert     is_upper('A') == False, 'wrong!'\nassert     is_upper('Hi') == True, 'wrong!'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_upper('camelCase') == True\nis_upper('Camel case') == False\nis_upper('camelCasecamelCase') == True\nis_upper('Camel Case Camel Case') == True\nis_upper('Camel Case_Case') == False\nis_upper('CamelCase_Camel Case') == False\nis_upper('Camel Case_') == False\nis_upper('Camel Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel CasecamelCase') == False\nis_upper('camel') == False\nis_upper('_camel_') == False\nis_upper('Camel_Case') == False\nis_upper('Camel Case') == False\nis_upper('Camel Case _') == False\nis_upper('Camel Case_') == False\nis_upper('Camel_Case_') == False\nis_upper('Camel Case') == False\nis_upper('CamelCase') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case_') == False\nis_upper('Camel_Case_   ') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_upper('Camel_Case') == False\nis_uppe"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper('hi') == False\nassert     is_upper('Hi') == True\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nswap_List([1,2,3,4]) == None\nswap_List([4,3,2,1]) == None\nswap_List([1,2,3,4,5]) == None\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1, 2, 3, 4]) == [2, 1, 4, 3], \"Test Failed\"\nassert     swap_List([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3], \"Test Failed\"\nassert swap_List([1, 2, 3, 4, 5]) == [5, 1, 2, 4, 3], \"Test Failed\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,4,2,3], \"The output is not as expected.\"\nassert     swap_List([1,2,3,4]) == [3,4,1,2], \"The output is not as expected.\"\nassert     swap_List([1]) == [1], \"The output is not as expected.\"\nassert     swap_List([]) == [], \"The output is not as expected.\"\nassert swap_List([1,2,3,4,5])!= swap_List([5,1,4,2,3]), \"The output is not as expected.\""
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List(newList) == ['t', 'e','s','','', 'y', 'p', 'o', 'u', 'n', 'k','','', 'h', 'a', 'n', 'l','s', 'e','s', 't', 'e'], \"Incorrect output\"\n\ndef check_List(newList):\n    '''\n    Write a python function to check if the list is sorted.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1, 2, 3]) == [2, 3, 1], \"Fail\"\nassert swap_List([1, 2]) == [2, 1], \"Fail\"\nassert swap_List([1]) == [1], \"Fail\"\nassert swap_List([]) == [], \"Fail\"\n\ndef insert_at_pos(newList, pos): \n    '''\n    Write a python function to insert an element in a given position in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1,2,3,4,5]) ==[2,3,4,5,1]\nassert swap_List([5,6,7,8,9]) ==[9,8,7,6,5]\nassert swap_List([1,2,3,4]) ==[4,3,2,1]\nassert swap_List([1]) ==[1]\n\n\ndef binary_search_array(arr, x):\n    '''\n    Write a python function to check whether an element is present in a given sorted array or not.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nswap_List([1,2,3]) ==[3,2,1]\n\nprint('\\nTEST 13: \\n')\n\ndef swap_List2(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return (newList[-1], newList[1:-1], newList[0])\n\nassert swap_List2([1,2,3]) == (3,2,1)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triangle_area(1) == 1.5\nassert     triangle_area(2) == 3\nassert     triangle_area(3) == 3.74166667\nassert     triangle_area(4) == 5.1\nassert     triangle_area(5) == 5.27777778\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1) == 1, \"Wrong output\"\nassert     triangle_area(3) == 3, \"Wrong output\"\nassert     triangle_area(5) == 4, \"Wrong output\"\nassert     triangle_area(10) == 9, \"Wrong output\"\nassert     triangle_area(11) == 9, \"Wrong output\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(1.0) == 1.5\nassert     triangle_area(1.5) == 1.5\nassert     triangle_area(0.5) == 0.5\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(1) == 1.5\nassert     triangle_area(2) == 1.5\nassert     triangle_area(3) == 2\nassert     triangle_area(4) == 3\nassert     triangle_area(5) == 2.5\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    triangle_area(0.5) == 0.5\n    triangle_area(1.0) == 1.0\n    triangle_area(1.5) == 1.0\n    triangle_area(3.0) == 1.5\n    triangle_area(4.0) == 1.25\n    triangle_area(5.0) == 1.375\n    triangle_area(6.0) == 1.5\n    triangle_area(7.0) == 1.5\n    triangle_area(8.0) == 1.5\n    triangle_area(9.0) == 1.5\n    triangle_area(10.0) == 1.5\n    triangle_area(11.0) == 1.5\n    triangle_area(12.0) == 1.5\n    triangle_area(13.0) == 1.5\n    triangle_area(14.0) == 1.5\n    triangle_area(15.0) == 1.5\n    triangle_area(16.0) == 1.5\n    triangle_area(17.0) == 1.5\n    triangle_area(18.0) == 1.5\n    triangle_area(19.0) == 1.5\n    triangle_area(20.0) == 1.5\n    triangle_area(21.0) == 1.5\n    triangle_area(22.0) == 1.5\n    triangle_area(23.0) == 1.5\n    triangle_area(24.0) == 1.5\n    triangle_area(25.0) == 1.5\n    triangle_area(26.0) == 1.5\n    triangle_area(27.0) == 1.5\n    triangle_area(28.0) == 1.5\n    triangle_area(29.0) == 1.5\n    triangle_area(30.0) == 1.5\n    triangle_area(31.0) == 1.5\n    triangle_area(32.0) == 1.5\n    triangle_area(33.0) == 1.5\n    triangle_area(34.0) == 1.5\n    triangle_area(35.0) == 1.5\n    triangle_area(36.0) == 1.5\n    triangle_area(37.0) == 1.5\n    triangle_area(38.0) == 1.5\n    triangle_area(39.0) == 1.5\n    triangle_area(40.0) == 1.5\n    triangle_area(41.0) == 1.5\n    triangle_area(42.0) == 1.5\n    triangle_area(43.0) == 1.5\n    triangle_area(44.0) == 1.5\n    triangle_area(45.0) == 1.5\n    triangle_area(46.0) == 1.5\n    triangle_area(47.0) == 1.5\n    triangle_area(48.0) == 1.5\n    triangle_area(49.0) == 1.5\n    triangle_area(50.0) == 1.5\n    triangle_area(51.0) == 1.5\n    triangle_area(52.0) == 1.5\n    triangle_area(53.0) == 1.5\n    triangle_area(54.0) == 1.5\n    triangle_area(55.0) == 1.5\n    triangle_area(56.0) == 1.5\n    triangle_area(57.0) == 1.5\n    triangle_area(58.0) == 1.5\n    triangle_area(59.0) == 1.5\n    triangle_area(60.0) == 1.5\n    triangle_area(61.0) == 1.5\n    triangle_area(62.0) == 1.5\n    triangle_area(63.0) == 1.5\n    triangle_area(64.0) == 1.5\n    triangle_area(65.0) == 1.5\n    triangle_area(66.0) == 1.5\n    triangle_area(67.0) == 1.5\n    triangle_area(68.0) == 1.5\n    triangle_area(69.0) == 1.5\n    triangle_area(70.0) == 1.5\n    triangle_area(71.0) == 1.5\n    triangle_area(72.0) == 1.5\n    triangle_area(73.0) == 1.5\n    triangle_area(74.0) == 1.5\n    triangle_area(75.0) == 1.5\n    triangle_area(76.0) == 1.5\n    triangle_area(77.0) == 1.5\n    triangle_area(78.0) == 1.5\n    triangle_area(79.0) == 1.5\n    triangle_area(80.0) == 1.5\n    triangle_area(81.0) == 1.5\n    triangle_area(82.0) == 1.5\n    triangle_area(83.0) == 1.5\n    triangle_area(84.0) == 1.5\n    triangle_area(85.0) == 1.5\n    triangle_area(86.0) == 1.5\n    triangle_area(87.0) == 1.5\n    triangle_area(88.0) == 1.5\n    triangle_area(89.0) == 1.5\n    triangle_area(90.0) == 1.5\n    triangle_area(91.0) == 1.5\n    triangle_area(92.0) == 1.5\n    triangle_area(93.0) == 1.5\n    triangle_area(94.0) == 1.5\n    triangle_area(95.0) == 1.5\n    triangle_area(96.0) == 1.5\n    triangle_area(97.0) == 1.5\n    triangle_area(98.0) == 1.5\n    triangle_area(99.0) == 1.5\n    triangle_area(100.0) == 1.5\n    triangle_area(101.0) == 1.5\n    triangle_area(102.0) == 1.5\n    triangle_area(103.0) == 1.5\n    triangle_area(104.0) == 1.5\n    triangle_area(105.0) == 1.5\n    triangle_area(106.0) == 1.5\n    triangle_area(107.0) == 1.5\n    triangle_area(108.0) == 1.5\n    triangle_area(109.0) == 1.5\n    triangle_area(110.0) == 1.5\n    triangle_area(111.0) == 1.5\n    triangle_area(112.0) == 1.5\n    triangle_area(113.0) == 1.5\n    triangle_area(114.0) == 1.5\n    triangle_area(115.0) == 1.5\n    triangle_area(116.0) == 1.5\n    triangle_area(117.0) == 1.5\n    triangle_area(118.0) == 1.5\n    triangle_area(119.0) == 1.5\n    triangle_area(120.0) == 1.5\n    triangle_area(121.0) == 1.5\n    triangle_area(122.0) == 1.5\n    triangle_area(123.0) == 1.5\n    triangle_area(124.0) == 1.5\n    triangle_area(125.0) == 1.5\n    triangle_area(126.0) == 1.5\n    triangle_area(127.0) == 1.5\n    triangle_area(128.0) == 1.5\n    triangle_area(129.0) == 1.5\n    triangle_area(130.0) == 1.5\n    triangle_area(131.0) == 1.5\n    triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(4) == 2.5\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ( triangle_area(1) ) == 1.5\nassert     ( triangle_area(2) ) == 3\nassert     ( triangle_area(4) ) == 4"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_First_Missing([1, 2, 3, 5]) == 4, \"Expected 4 but got %d\" % find_First_Missing([1, 2, 3, 5])\nassert     find_First_Missing([2, 3, 4, 6]) == 5, \"Expected 5 but got %d\" % find_First_Missing([2, 3, 4, 6])\nassert     find_First_Missing([5, 4, 3, 2, 6]) == 1, \"Expected 1 but got %d\" % find_First_Missing([5, 4, 3, 2, 6])\nassert     find_First_Missing([6, 5, 4, 3, 2, 1]) == 1, \"Expected 1 but got %d\" % find_First_Missing([6, 5, 4, 3, 2, 1])\nassert     find_First_Missing([1, 3, 5, 2, 4]) == 2, \"Expected 2 but got %d\" % find_First_Missing([1, 3, 5, 2, 4])\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_First_Missing([1, 2, 3, 4, 5]) == 1\nassert     find_First_Missing([1, 2, 3, 4, 5],start=1) == 6\nassert     find_First_Missing([1, 2, 3, 4, 5, 6]) == 2\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7]) == 3\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([1,2,3,4,5]) == 1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 5\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 7\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 11\n\n\n'''\nThe prime factors of 13195 are 5, 7, 13 and 29.\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_First_Missing([1,5,6,2,7,3]) == 2\nassert     find_First_Missing([1,5,6,2,7,3,4]) == 3\nassert     find_First_Missing([1,5,6,2,7,3,4,7]) == 6\nassert     find_First_Missing([1,5,6,2,7,3,4,7,8]) == 9\nassert     find_First_Missing([1,5,6,2,7,3,4,7,8,9]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_First_Missing([1,2,3,5,6])    == 3, \"FAIL\"\nassert     find_First_Missing([1,2,3,5,7])    == 1, \"FAIL\"\nassert     find_First_Missing([0,1,2,3,4,5])    == 6, \"FAIL\"\nassert     find_First_Missing([1,2,3,4,5])    == 1, \"FAIL\"\nassert     find_First_Missing([1,2,3])    == 2, \"FAIL\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_First_Missing(array,start=0,end=None):\n    if end == None:\n        end = len(array)-1\n    if array[start]!= None and array[start] >=0:\n        start = array[start]\n    if array[end]!= None and array[end] >=0:\n        end = array[end]\n    \n    if start!= array[start] and start!= None and start < len(array) and end!= None and end < len(array):\n        while start <= end:\n            mid = (start+end)//2\n            if mid == array[mid]:\n                return mid\n            elif mid > array[mid]:\n                start = mid + 1\n            else:\n                end = mid -1\n        return start + 1\n    else:\n        return start\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([1,3,5]) == 2\nassert     find_First_Missing([1,3,5,7]) == 4\nassert     find_First_Missing([1,3,5,7,9]) == 2"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([0, 1, 2, 3, 5, 6, 7]) == 4\nassert     find_First_Missing([0, 1, 2, 3, 4, 6, 7, 9]) == 5\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7]) == 0\nassert     find_First_Missing([1, 2, 3, 4, 6, 7, 9]) == 8\n\nprint(\"\\n... find_First_Missing\")\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([1,2,3,5,6]) == 4, \"The test case failed\"\nassert     find_First_Missing([1,3,2]) == 4, \"The test case failed\"\nassert     find_First_Missing([1,3,4]) == 2, \"The test case failed\"\nassert     find_First_Missing([3,1,2]) == 4, \"The test case failed\"\nassert     find_First_Missing([3,2,1]) == 4, \"The test case failed\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([5,3,4,7,6]) == 1, \"check 1\"\nassert     find_First_Missing([7,5,3,4,1]) == 4, \"check 2\"\nassert     find_First_Missing([1,2,0]) == 3, \"check 3\"\n\ndef find_first_diff(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Ms Jane Doe    \") == \"Ms%20Jane%20Doe\"\nassert     replace_spaces(\"Mr. John Smith\") == \"Mr%20%20John%20Smith\"\nassert     replace_spaces(\"Ms. Jane Doe\") == \"Ms%20%20Jane%20Doe\"\nassert     replace_spaces(\"\") == \"%20\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"a b\") == \"a%20b\", \"Function doesn't work as expected.\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces(\"i m fine\") == \"i%20m%20fine\", \"Not correct\"\nassert     replace_spaces(\"\") == \"\", \"Not correct\"\n\nprint(\"You are all set! Check your result on Test.py\")"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces(\"\")    == \"\"\nassert     replace_spaces(\" \")    == \"%20\"\nassert     replace_spaces(\"Hello World\")    == \"Hello%20World\"\nassert     replace_spaces(\"1234\")    == \"1234\"\nassert     replace_spaces(\"1234 \")    == \"1234%20\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(None) == None\nassert    replace_spaces('') == ''\nassert    replace_spaces(' ') == '%20'\nassert    replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert    replace_spaces('Mr% John Smith') == 'Mr%20%20John%20Smith'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('Hey there %20how are you?') == 'Hey there %20how are you?'\nassert     replace_spaces('Hello world! %20how are you?') == 'Hello world! %20how are you?'\nassert     replace_spaces('Hello %20world! %20how are you?') == 'Hello %20world! %20how are you?'\nassert     replace_spaces('Hello %20world! %20how are you?') == 'Hello %20world! %20how are you?'\nassert     replace_spaces('Hello %20world! %20how are you?') == 'Hello %20world! %20how are you?'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef add_string_with_substring(string, substring):\n    '''\n    Write a function that returns the given string with the substring inserted at a random index in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces('') == ''\nassert replace_spaces(' ') == '%20'\nassert replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert replace_spaces('Mr John Smith  ') == 'Mr%20John%20Smith'\nassert replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == 2, \"Should be 2\"\nassert     Split([1,2,3,4,5]) == 0, \"Should be 0\"\n\ndef GCD(n,m):\n    '''\n    Write a python function to find GCD between two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([]) == []\nassert     Split([1, 2, 3, 4]) == [2, 4]\nassert     Split([-1, -2, -3, -4]) == [-2, -4]\nassert     Split([1, 2, 3, 4, 5]) == [2, 4]\nassert     Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    Split([1, 2, 3, 4, 5]) == []\n    Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 8]\n    Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\nassert not \n    Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 8]\n    Split([1, 2, 3, 4, 5, 6, 7, 8]) == []\nassert not \n    Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8]\n    Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [2, 4, 6, 8, 10]\nassert not \n    Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == []\nassert not \n    Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == []\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6], 'Not even numbers'\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8], 'Not even numbers'\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8, 9], 'Not even numbers'\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 9, 10], 'Not even numbers'\nassert     Split([]) == [], 'Empty list'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1,2,3,4,5]) == [[2,4],[5]]\nassert     Split([1,2,3,4,5,6,7,8]) == [[2,4,6],[8]]\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [[2,4,6,8],[9,10]]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12]) == [[2,4,6,8,10],[11,12]]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([2,3,4,5,6,7,8,9]) == [2,6,8,10]\nassert     Split([2,3,4,5,6,7,8,9,10,11,12,13]) == [2,6,8,10,12]\nassert     Split([2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [2,6,8,10,12,14]\nassert     Split([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [2,6,8,10,12,14,16]\nassert     Split([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == [2,6,8,10,12,14,16,18]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     adjac((0,1)) == [(0,2), (1,2)]\nassert     adjac((0,1),[]) == [(0,2), (1,2)]\n\ndef disj(x, y = None, y1 = None, y2 = None): \n    '''\n    Write a function to extract the coordinate tuple (x,y) such that x is disjoint from y1 and y2\n    and x,y is disjoint from the rest of the points.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     adjac((0,0)) == [(-1,0), (0,1), (1,0), (0,-1)]\nassert     adjac((1,1)) == [(0,2), (1,2), (2,1), (2,-1), (1,0), (-1,0), (-2,0), (-2,-1), (-1,-1)]\nassert     adjac((2,2), [(1,2)]) == [(1,2)]\nassert     adjac((2,2), [(1,2), (0,2)]) == [(1,2), (0,2)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    assert (adjac((0, 1), sub) == [])\n    assert (adjac((0, 1), [[0, 1]]) == [[0, 1]])\n    assert (adjac((0, 0), [[0, 1], [0, 2]]) == [[0, 1], [0, 2]])\n    assert (adjac((2, 2), [[0, 1], [0, 2]]) == [[0, 1]])\n    "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     adjac((0,0)) == [(0,1),(1,0)]\nassert     adjac((0,0)) == [(1,0)]\nassert     adjac((0,0)) == []\nassert     adjac((0,0), [1,2]) == [(1,0),(2,1),(2,2)]\nassert     adjac((2,0)) == []\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     adjac((1, 2)) == [(0,1), (0,-1), (1,0), (-1,0), (1,2), (-1,2), (2,1), (2,-1)], \"Wrong Answer\"\nassert     adjac((0,0)) == [(1,1), (1,-1), (-1,1), (-1,-1)], \"Wrong Answer\"\nassert     adjac((4,4)) == [(3,3), (3,-3), (-3,3), (-3,-3)], \"Wrong Answer\"\n\ndef cell_in_region(region, cell):\n    '''\n    Write a function to return whether a given cell is in a region or not.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     adjac((1,2)) == [(0,2), (1,1), (2,0)]\nassert     adjac((2,1)) == [(1,0)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     adjac( (0, 0) ) == [[0, 1], [0, -1], [-1, 0], [1, 0]]\nassert     adjac( (0, 0) ) == [[0, 1], [0, -1], [-1, 0], [1, 0]]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     adjac((0,0)) == [(0,1), (1,0)]\nassert     adjac((0,1)) == [(0,1), (1,0), (0,2)]\nassert     adjac((0,2)) == [(0,2), (1,1)]\n\ndef contains(ele, sub = []):\n    '''\n    Write a function to check if the given set contains the given coordinate.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"a b\") == \"a_b\", \"incorrect test case\"\nassert     replace_spaces(\"a b c\") == \"a_b_c\", \"incorrect test case\"\nassert     replace_spaces(\"\") == \"\", \"incorrect test case\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"one two three\") == \"one_two_three\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\"blah blah blah\") == \"blah_blah_blah\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \ndef replace_spaces2(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    This function should work for both whitespaces and hyphens.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces(\"  hello  world  \") == \"hello_world\", \"Fail\"\nassert     replace_spaces(\"  hello  world  \") == \"hello_world\", \"Fail\"\nassert     replace_spaces(\"  hello  world\") == \"hello_world\", \"Fail\"\nassert     replace_spaces(\"  hello  world  \") == \"hello_world\", \"Fail\"\n\ndef count_spaces(text):\n    '''\n    Write a function to count the number of spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces('')     == '', 'Correct'\nassert     replace_spaces('a b')     == 'a_b', 'Correct'\nassert     replace_spaces('a_b')     == 'a_b', 'Correct'\nassert     replace_spaces('a b c')    == 'a__b', 'Correct'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    text = \"I am testing this string without spaces...\"\n    expected = \"I_am_testing_this_string_without_spaces...\"\n    actual = replace_spaces(text)\n    assert actual == expected\n\ndef reverse_spaces(text):\n    '''\n    Write a function to reverse the spaces of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"Hello World!\") == \"hello_world_!\"\nassert replace_spaces(\"\") == \"\"\nassert replace_spaces(\" \") == \"_\"\nassert replace_spaces(\"Hello World!\") == \"hello_world_!\"\nassert replace_spaces(\" \") == \"_\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"This is a string\") == \"this_is_a_string\", \"Wrong\"\nassert replace_spaces(\"We are the world\") == \"w_e_r_the_w_o_l_d\", \"Wrong\"\nassert replace_spaces(\"I love to love and watch\") == \"i_l_o_v_e_t_a_l_w_a_l_d\", \"Wrong\"\nassert replace_spaces(\"We are the champions\") == \"w_e_r_ch_ah_m_s_t_c_ah_l_d\", \"Wrong\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces(\"   The     whitespaces\") == \"The_whitespaces\"\nassert     replace_spaces(\"  The spaces\") == \"The_spaces\"\nassert     replace_spaces(\"I live in a land full of beautiful things.\") == \"I_live_in_a_land_full_of_beautiful_things\"\nassert     replace_spaces(\"Whitespaces are nigh-thinnest in this text\") == \"Whitespaces_are_nigh-thinnest_in_this_text\"\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    replace_spaces('Hi there this is a test') == 'Hi_there_this_is_a_test'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_is_a_test.'\n    replace_spaces('Hi there this is a test.') == 'Hi_there_this_i"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmove_zero([0, 0, 0, 1, 2, 3, 0, 0, 4]) == [1, 2, 3, 0, 0, 4, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([0,1,2,0,3,0,0,0,4]) == [1,2,3,4,0,0,0,0,0]\nassert     move_zero([0,1,0,2,3,0,4,0,0]) == [1,0,2,3,4,0,0,0,0]\nassert     move_zero([0,0,1,0,2,0,3,0,4]) == [1,0,0,2,3,4,0,0,0]\nassert     move_zero([0,0,1,2,0,3,4]) == [1,2,3,4,0,0,0]\nassert     move_zero([]) == []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_zero([1,2,3,0,4,0]) == [1,2,3,4,0,0]\nassert     move_zero([9,0,0,9]) == [9,0,9]\nassert     move_zero([0,0,1,2]) == [1,2,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([2,1,0,2,3,0,0,0,0,0,0]) == [2,1,2,3,0,0,0,0,0,0,0], \"Wrong answer\"\nassert     move_zero([0,0,0,0,0]) == [0,0,0,0,0], \"Wrong answer\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_zero([1,4,1,4,2,1,4,1,0,1]) == [1,4,1,4,2,1,4,1,0,1]\nassert     move_zero([1,2,3,4,0,0,0,0,0,0]) == [1,2,3,4,0,0,0,0,0,0]\nassert     move_zero([0,1,2,3,4,0,0,0,0,0]) == [0,1,2,3,4,0,0,0,0,0]\nassert     move_zero([0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_zero([0,1,0,3,12,0,1]) == [1,1,3,12,0,0,0]\nassert     move_zero([0,0,1,2]) == [1,2,0,0]\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \npair_xor_Sum([1,2,3],3) == 6\nassert pair_xor_Sum([1,2,3],2) == 5\nassert pair_xor_Sum([1,2,3],0) == 0\nassert pair_xor_Sum([],0) == 0\nassert pair_xor_Sum([],1) == 0\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    [1,2,3,4,5] == pair_xor_Sum(arr,5)\n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_xor_Sum([1, 2, 3, 4, 5], 6) == (2*3 + 3*4 + 3*5 + 4*6) \nassert pair_xor_Sum([1, 2, 3, 4, 5, 6], 10) == (2*3 + 3*4 + 3*5 + 4*6 + 5*6)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_xor_Sum([4,2,3,5,6],6)==13\nassert pair_xor_Sum([1,1,1,2],2)==3\nassert pair_xor_Sum([1,2],2)==3\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_xor_Sum([1,2,3],2) == 2\nassert pair_xor_Sum([1,2,3],3) == 7\nassert pair_xor_Sum([1,2,3],4) == 3\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8],8) == 36, \"Wrong Output\"\nassert     pair_xor_Sum([1,2,3,4,5,6,7,8],7) == 35, \"Wrong Output\"\nassert     pair_xor_Sum([1,2,3,4,5,6,7,8],6) == 34, \"Wrong Output\"\nassert pair_xor_Sum([1,2,3,4,5,6,7,8],5) == 33, \"Wrong Output\"\nassert pair_xor_Sum([1,2,3,4,5,6,7,8],4) == 32, \"Wrong Output\"\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    try:\n        if type(iterable)!= type(list()):\n            raise TypeError('Input must be a list!')\n        else:\n            for i in iterable:\n                if type(i)!= type(int()) and type(i)!= type(float()):\n                    raise TypeError('Input must only contain integers or floats!')\n            heapify(iterable)\n            return iterable\n    except TypeError:\n        raise TypeError('Input must only contain integers or floats!')\n\ndef heapify(arr):\n    '''\n    To build the heap\n    '''\n    pass\n\ndef heapify(arr):\n    '''\n    To build the heap\n    '''\n    pass\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    try:\n        if type(iterable)!= type(list()):\n            raise TypeError('Input must be a list!')\n        else:\n            for i in iterable:\n                if type(i)!= type(int()) and type(i)!= type(float()):\n                    raise TypeError('Input must only contain integers or floats!')\n            build_heap(iterable)\n            return iterable\n    except TypeError:\n        raise TypeError('Input must only contain integers or floats!')\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_sort([2,4,6,1,2,4,6]) ==[1,2,2,4,4,6,6], \"should be [1,2,2,4,4,6,6]\"\nassert     heap_sort([]) ==[], \"should be []\"\nassert     heap_sort([1,2,3,4]) ==[1,2,3,4], \"should be [1,2,3,4]\"\nassert     heap_sort([5,4,3,2,1]) ==[1,2,3,4,5], \"should be [1,2,3,4,5]\"\nassert     heap_sort([5,4,3,2,1,8,5,10,8,2,3,4,5,6,7,8]) ==[1,2,3,4,5,5,5,6,7,8,8,10,8,2,3,4], \"should be [1,2,3,4,5,5,5,6,7,8,8,10,8,2,3,4]\"\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef heap_sort_recursive(l):\n    def _siftup(l, size, ind):\n        root = ind\n        while True:\n            child = 2 * root + 1\n            if child < size and l[child] > l[root]:\n                root = child\n            else:\n                break\n\n        if child >= size:\n            return l\n        else:\n            l[root], l[child] = l[child], l[root]\n            return _siftup(l, size, root)\n\n    def _siftdown(l, size, root):\n        last = root\n        while True:\n            child = last * 2 + 1\n            if child < size and l[child] > l[last]:\n                last = child\n            else:\n                break\n\n        if last == root:\n            return l\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_sort([1,2,3]) == [1,2,3]\nassert     heap_sort([3,2,1]) == [1,2,3]\nassert     heap_sort([]) == []\nassert     heap_sort([1]) == [1]\nassert     heap_sort([2]) == [2]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nheap_sort([3,6,8,2,5,4,8,2,8,9]) == [2,2,2,3,4,5,6,8,8,8,9]\nheap_sort([]) == []\n\ndef heap_sort_optimal(iterable):\n    '''\n    A common sorting algorithm\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     heap_sort([]) == []\nassert     heap_sort([1]) == [1]\nassert     heap_sort([4,3,2,1]) == [1,2,3,4]\nassert     heap_sort([8,3,1,4,2,0,-1,9]) == [-1,0,1,2,3,4,4,8,9]\nassert     heap_sort([4,8,3,1,0,-1,9,-2,2,7,-3]) == [-3,0,1,1,2,2,3,4,4,8,9,9]\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     noprofit_noloss(100,0)    == False\nassert     noprofit_noloss(50,50)    == False\nassert     noprofit_noloss(100,50)    == True\nassert     noprofit_noloss(0,100)    == True\nassert     noprofit_noloss(50,0)    == True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     noprofit_noloss(5000,4000) == True, 'noprofit_noloss has wrong return type'\nassert     noprofit_noloss(10000,6000) == False, 'noprofit_noloss has wrong return type'\nassert     noprofit_noloss(30000,40000) == False, 'noprofit_noloss has wrong return type'\nassert     noprofit_noloss(30000,4000) == True, 'noprofit_noloss has wrong return type'"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     noprofit_noloss(actual_cost,0) == True, 'Test case 1 Failed'\nassert     noprofit_noloss(actual_cost,1) == False, 'Test case 1 Failed'\nassert     noprofit_noloss(actual_cost,2) == False, 'Test case 1 Failed'\nassert     noprofit_noloss(actual_cost,3) == False, 'Test case 1 Failed'\nassert     noprofit_noloss(actual_cost,4) == False, 'Test case 1 Failed'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(100,100) == True, \"Should be True\"\nassert     noprofit_noloss(100,90) == False, \"Should be False\"\nassert     noprofit_noloss(110,100) == False, \"Should be False\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     noprofit_noloss(1000,500)    == True, 'noprofit_noloss should return True if actual_cost and sale_amount is a positive integer'\nassert     noprofit_noloss(1000,-500)    == False, 'noprofit_noloss should return False if actual_cost and sale_amount is a negative integer'\nassert     noprofit_noloss(-1000,500)    == False, 'noprofit_noloss should return False if actual_cost and sale_amount is a negative integer'\nassert     noprofit_noloss(1000,500.5)    == False, 'noprofit_noloss should return False if actual_cost and sale_amount is a float'\nassert     noprofit_noloss(-1000.5,500)    == False, 'noprofit_noloss should return False if actual_cost and sale_amount is a float'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(100,40)\nassert     noprofit_noloss(100,50)\nassert     noprofit_noloss(100,60)\nassert     noprofit_noloss(100,110)\nassert     noprofit_noloss(120,150)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(100,35) == False\nassert     noprofit_noloss(95,50) == True\nassert     noprofit_noloss(95,45) == False\nassert     noprofit_noloss(85,35) == False\nassert     noprofit_noloss(85,45) == True"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnoprofit_noloss(actual_cost,sale_amount) == True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(actual_cost=100,sale_amount=150) == True, 'expected False'\nassert     noprofit_noloss(actual_cost=150,sale_amount=100) == True, 'expected True'\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(3, 40) == -40.0\nassert wind_chill(2, 45) == -34.6\nassert wind_chill(1, 45) == -36.5\nassert wind_chill(3, 5) == 11.1\nassert wind_chill(2, 5) == 12.5\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert wind_chill(5, 0) == 20\nassert wind_chill(10,10) == 8\nassert wind_chill(10,25) == 7.5\nassert wind_chill(10,28) == 9\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nwind_chill(1, 0) == 1\nwind_chill(0, 10) == -16\nwind_chill(1, -10) == -14\nwind_chill(0, 0) == 0\nwind_chill(3, 0) == -1\nwind_chill(10, 0) == -7\nwind_chill(0, 1) == -0.8\nwind_chill(0, 50) == -3.3\nwind_chill(3, 50) == -3.8\nwind_chill(10, 50) == -4.6\nwind_chill(3, -50) == -4.9\nwind_chill(0, -50) == -6.1\nwind_chill(10, -50) == -6.8\nwind_chill(0, -10) == -6.9\nwind_chill(3, -10) == -7.1\nwind_chill(10, -10) == -7.7\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(10, 10) == 14\nassert     wind_chill(10, 10.1) == 14.1\nassert     wind_chill(10, 10.2) == 14.2\nassert     wind_chill(10, 10.5) == 14.5\nassert     wind_chill(10, 10.7) == 14.7\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     wind_chill(3, 30) == 20.0\nassert     wind_chill(5.2, 30) == 27.0\nassert     wind_chill(8.3, 10) == 18.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef windchill(temperature, wind_speed, gust):\n    '''\n    Calculate the wind chill index using formula defined in the handout.\n    '''\n    pass\n\n\ndef vector_norm(vector):\n    '''\n    Return the norm of a vector.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(10, 30) == 3.5\nassert     wind_chill(45, 0) == 10.0\nassert wind_chill(50, 5) == -2.5\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(150,20) == 29.74\nassert     wind_chill(140,20) == 27.48\nassert     wind_chill(120,20) == 24.58\nassert     wind_chill(100,20) == 21.05\nassert     wind_chill(80,20) == 19.04\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam([]) == 0, \"No sample names\"\nassert     sample_nam([]) == 0, \"No sample names\"\nassert     sample_nam([]) == 0, \"No sample names\"\nassert     sample_nam([\"\"]) == 0, \"No sample names\"\nassert     sample_nam([\"A\"]) == 0, \"No sample names\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam([\"John\", \"Graham\", \"Sarah\", \"John\"]) == 5, \"Expected 5, got %s\" % sample_nam([\"John\", \"Graham\", \"Sarah\", \"John\"])\nassert     sample_nam([\"John\", \"Graham\", \"Sarah\", \"john\"]) == 4, \"Expected 4, got %s\" % sample_nam([\"John\", \"Graham\", \"Sarah\", \"john\"])\nassert     sample_nam([\"John\", \"Graham\", \"Sarah\"]) == 3, \"Expected 3, got %s\" % sample_nam([\"John\", \"Graham\", \"Sarah\"])\nassert     sample_nam([\"John\", \"Sarah\", \"John\", \"Graham\"]) == 2, \"Expected 2, got %s\" % sample_nam([\"John\", \"Sarah\", \"John\", \"Graham\"])\nassert     sample_nam([\"John\", \"Sarah\", \"John\"]) == 1, \"Expected 1, got %s\" % sample_nam([\"John\", \"Sarah\", \"John\"])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam(['abcd', 'abc', 'abcde']) == 4\nassert     sample_nam(['aaa', 'a']) == 2\nassert     sample_nam(['s','ss', 'e']) == 1\nassert     sample_nam(['a', 'b', 'c', 'd', 'e']) == 5\nassert     sample_nam(['aa']) == 1\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sample_nam(['adam', 'LISA', 'barT']) == 6\nassert sample_nam(['Adam', 'LISA', 'barT']) == 3\nassert sample_nam(['adam', 'Lisa', 'bart']) == 4\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam([]) == 0, \n        sample_nam([])\nassert     sample_nam([]) == 0, \n        sample_nam(['sam'])\nassert     sample_nam([]) == 0, \n        sample_nam(['Sam'])\nassert     sample_nam([]) == 0, \n        sample_nam(['Sam', 'Sam'])\nassert     sample_nam(['Sam','sam']) == 3, \n        sample_nam(['Sam','sam'])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsample_nam([\"aakash\", \"aakash\", \"akash\"]) == 4\nassert \nsample_nam([\"aakash\", \"akash\", \"akash\"]) == 4\nassert \nsample_nam([\"aakash\", \"aakash\", \"akash\"]) == 4\nassert \nsample_nam([\"aakash\", \"akash\", \"akash\"]) == 4\nassert \nsample_nam([\"akash\", \"akash\", \"akash\"]) == 3\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sample_nam(['Aaakhi','Kiran','Kiran','Kiran']) == 7, 'Error sample_nam'\nassert sample_nam(['aakhi','Kiran','Kiran','Kiran']) == 4, 'Error sample_nam'\nassert sample_nam(['aakhi','Kiran','Kiran','Kiran', 'Kiran']) == 5, 'Error sample_nam'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam(['vicky', 'rachel', 'guido','sam', 'ryan']) == 4\nassert     sample_nam(['vicky', 'james','sam', 'ryan', 'josh']) == 5\nassert     sample_nam(['vicky', 'rachel', 'gutsy', 'ryan']) == 3\nassert     sample_nam(['vicky', 'rachel', 'ryan']) == 2\nassert     sample_nam(['sam', 'ryan']) == 1\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sample_nam([]) == 0\nassert sample_nam(['']) == 0\nassert sample_nam(['a']) == 1\nassert sample_nam(['a', 'b']) == 2\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis('(2+2*2)'    )    == '22'\nassert    remove_parenthesis('(6-4)*((2+2)*2)'    )    == '216'\n\ndef remove_parenthesis_itr(s):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parens = 0\n    end = -1\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            parens += 1\n            if parens == 1:\n                end = i\n        elif s[i] == \")\":\n            parens -= 1\n        if parens == 0:\n            return s[:end] + s[end+1:]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis(\"[(foo)]\") == 'foo'\nassert     remove_parenthesis(\"()foo\") == 'foo'\nassert     remove_parenthesis(\"foo(())\") == 'foo'\nassert     remove_parenthesis(\"foo(bar(()))\") == 'foobar'\nassert     remove_parenthesis(\"foo(bar[()])\") == 'fooobar'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis(\"(((((()))))))\") == \"\", \"Error: Wrong answer!\"\nassert     remove_parenthesis(\"(((((())))))\") == \"\", \"Error: Wrong answer!\"\nassert     remove_parenthesis(\"(((((((()))))))\") == \"\", \"Error: Wrong answer!\"\nassert     remove_parenthesis(\"((((((()))))))\") == \"\", \"Error: Wrong answer!\"\nassert     remove_parenthesis(\"((((((()))))))\") == \"\", \"Error: Wrong answer!\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis('(())') == '()'\nassert     remove_parenthesis('()(())') == '()()'\nassert     remove_parenthesis('()())(()') == '()()()'\nassert     remove_parenthesis(')())(())') == '()()()'\nassert     remove_parenthesis('(())(())') == '()()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis('this (is) a (string)' ) == 'this is a string'\nassert     remove_parenthesis('this (is) a (string)') == 'this is a string'\nassert     remove_parenthesis('this (is) a string') == 'this is a string'\nassert     remove_parenthesis('this is a (string)') == 'this is a string'\nassert     remove_parenthesis('this is a string') == 'this is a string'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert remove_parenthesis(\"( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ];;;;;;\n1:;;;;!f3?C@FQ0(S{t=8#kK5YqYp$mE&#=&LhYi-{6D(+l_WHW1@-T=e(A#nXbwA!=n^Yb2cKWGfvI*`3<9Zi@!7*$pF{eNY;)_w?Oi6aTv#>g)o#zC7=t^Sj?*3sRUw4c!U+qMlhYdl*4#+b@ZzPxqmhB7^SLy2#qe6QM2iA6`)uDqr}#rV(|#Ef#BpY}+Zs!1<6H0x-L7{g7fSOk9"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis('(((()))') == '()', '1st Case'\nassert     remove_parenthesis('((()))') == '()', '2nd Case'\nassert     remove_parenthesis('(((()))') == '()', '3rd Case'\nassert     remove_parenthesis('(((())))') == '()', '4th Case'\nassert     remove_parenthesis('(((()))(()))') == '()()', '5th Case'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis('12345') == '12345'\nassert     remove_parenthesis('(1+2)') == '1 2'\nassert     remove_parenthesis('(1+2)-(1-2)') == '1 -2'\nassert     remove_parenthesis('1+(2-3)') == '12 -3'\nassert     remove_parenthesis('(2-3)+4') == '2 3 4'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_parenthesis('(Hello)(World)') == 'HelloWorld'\nassert    remove_parenthesis('(Hi)(Hello)(World)') == 'HiHelloWorld'\nassert    remove_parenthesis('(Hi)(Hello)(World)') == 'HiHelloWorld'\nassert    remove_parenthesis('Hi)(Hello)(World)') == 'HiHelloWorld'\nassert    remove_parenthesis('(Hi)(Hello)(World)') == 'HiHelloWorld'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_nonagonal(0) == 1\nassert is_nonagonal(1) == 2\nassert is_nonagonal(2) == 3\nassert is_nonagonal(3) == 6\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_nonagonal(1)) "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_nonagonal(1)\nassert is_nonagonal(2)\nassert is_nonagonal(3)\nassert is_nonagonal(4)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_triangular_number(n):\n    '''\n    Write a function to find the nth triangular number.\n    '''\n    pass\n\nassert find_triangular_number(1) == 0\nassert find_triangular_number(2) == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_nonagonal(0) == 1\nassert is_nonagonal(1) == 2\nassert is_nonagonal(2) == 3\nassert is_nonagonal(3) == 4\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(4) == 5\nassert     is_nonagonal(7) == 11\nassert     is_nonagonal(9) == 18\nassert     is_nonagonal(10) == 19\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 11\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_diagonal(n):\n    '''\n    Write a function to find the nth diagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle(\"\") == True\nassert     text_match_wordz_middle(\"z\") == True\nassert     text_match_wordz_middle(\"z\") == True\nassert     text_match_wordz_middle(\"a\") == False\nassert     text_match_wordz_middle(\"aa\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle('hzzz') == True\nassert     text_match_wordz_middle('aaa') == False\nassert     text_match_wordz_middle('zzz') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test.'))\nprint(text_match_wordz_middle('This is a test."
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('z') == True \nassert     text_match_wordz_middle('zz') == True \nassert     text_match_wordz_middle('zzz') == True \nassert     text_match_wordz_middle('zzzzzzz') == True \nassert     text_match_wordz_middle('zzzzzzzz') == False \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle('abzde') == True\nassert     text_match_wordz_middle('zabcd') == True\nassert     text_match_wordz_middle('abzabc') == False\nassert     text_match_wordz_middle('abc') == False\nassert     text_match_wordz_middle('abzc') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle(\"alzazzzazzzz\") == True, \"incorrect\"\nassert     text_match_wordz_middle(\"aazzzzzzzz\") == True, \"incorrect\"\nassert     text_match_wordz_middle(\"asdzcz\") == True, \"incorrect\"\nassert     text_match_wordz_middle(\"zzzzzzzzzz\") == False, \"incorrect\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef text_match_wordz_middle(text):\n    text = text.lower()\n    search = re.search(r'\\bz[ ]*', text)\n    if search:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle('')==True\nassert     text_match_wordz_middle('tokyo')==True\nassert     text_match_wordz_middle('tokyo')==True\nassert     text_match_wordz_middle('tokyo')==True\nassert     text_match_wordz_middle('tokyo')==True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle(\"Hello, my name is Fred.\") == True\nassert     text_match_wordz_middle(\"    This is an example   of text.\") == True\nassert     text_match_wordz_middle(\"\") == False\nassert     text_match_wordz_middle(\"Hello, my name is Fred, and I am a boy.\") == True\nassert     text_match_wordz_middle(\"This is an example\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz') == True, \\\n            'Your function did not return the correct result.'\n\nassert     text_match_wordz_middle('z') == False, \\\n            'Your function did not return the correct result.'\n\nassert     text_match_wordz_middle('zz') == True, \\\n            'Your function did not return the correct result.'\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [4, 5, 3, 2, 1], \"Wrong output\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_Array_Upto_K([1,2,3], 2) == [3,2,1], 'Reverse list of'+ str(len(input)) +'elements'+ str(input)\nassert     reverse_Array_Upto_K([1,2,3], 5) == [3,2,1], 'Reverse list of'+ str(len(input)) +'elements'+ str(input)\nassert     reverse_Array_Upto_K([1,2,3,4], 5) == [4,3,2,1], 'Reverse list of'+ str(len(input)) +'elements'+ str(input)\nassert     reverse_Array_Upto_K([1,2,3], 2) == [3,2,1], 'Reverse list of'+ str(len(input)) +'elements'+ str(input)\nassert     reverse_Array_Upto_K([1,2,3,4], 5) == [4,3,2,1], 'Reverse list of'+ str(len(input)) +'elements'+ str(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_Array_Upto_K([1,2,3,4,5], 2) == [4,5,3,2,1]\nassert \nreverse_Array_Upto_K([1,2,3,4,5], 3) == [3,4,5,1,2]\nassert \nreverse_Array_Upto_K([1,2,3,4,5], 4) == [5,4,3,2,1]\nassert \nreverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert \nreverse_Array_Upto_K([1,2,3,4,5], 6) == [2,3,4,5,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6],5) == [5,6,3,4,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6],0) == []\nassert     reverse_Array_Upto_K([1,2,3,4,5,6],5) == [6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6],6) == [6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6],6) == [6,5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 6) ==[8, 7, 6, 5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 0) ==[1, 2, 3, 4, 5, 6, 7, 8]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 9) ==[7, 6, 5, 4, 3, 2, 1, 8, 9]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 8) ==[8, 7, 6, 5, 4, 3, 2, 1]\n\n\n'''\nSolution\nThe problem can be solved in 2 ways. The first approach is to modify the array in-place.\nThe second approach is to create a new array and then reverse it.\n'''\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_Array_Upto_K_Function(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4], 3) == [4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4], 0) == [1,2,3,4]\nassert     reverse_Array_Upto_K([1,2,3,4], 5) == [4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 3) == [4,5,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_Array_Upto_K(['a', 'b', 'c'], 0) == ['c', 'b', 'a']\nassert     reverse_Array_Upto_K(['a', 'b', 'c', 'd', 'e'], 4) == ['e', 'd', 'c', 'b', 'a']\nassert     reverse_Array_Upto_K(['a', 'b', 'c'], 5) == ['c', 'b', 'a']\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_Array_Upto_K(input_array =[1,2,3,4,5,6,7], k = 7) == [7,6,5,4,3,2,1], \"Wrong\"\nassert     reverse_Array_Upto_K(input_array =[1,2,3,4,5,6,7], k = 8) == [7,6,5,4,3,2,1], \"Wrong\"\nassert     reverse_Array_Upto_K(input_array =[1,2,3,4,5,6,7], k = 1) == [1,2,3,4,5,6,7], \"Wrong\"\nassert     reverse_Array_Upto_K(input_array =[1,2,3,4,5,6,7], k = 0) == [], \"Wrong\"\nassert     reverse_Array_Upto_K(input_array =[1,2,3,4,5,6,7], k = 100) == [], \"Wrong\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (test_tup[0], {'a': 0, 'b': 1, 'c': 2}), \"The output should be a tuple of (0, {'a': 0, 'b': 1, 'c': 2})\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple((), {}) == (), \\\n    'The tuple should be empty after adding the dictionary to it.'\nassert     add_dict_to_tuple((1,2,3,4), {}) == (1,2,3,4), \\\n    'The tuple should be in the same order after adding the dictionary to it.'\nassert     add_dict_to_tuple((), {'a':10}) == ('a',10), \\\n    'The dictionary should be empty after adding it to the tuple.'\nassert     add_dict_to_tuple((1,2,3,4), {'a':10}) == (1,2,3,4,'a',10), \\\n    'The tuple should be in the same order after adding the dictionary to it.'\nassert     add_dict_to_tuple((), {'a':10, 'b':20}) == ('a',10, 'b',20), \\\n    'The dictionary should be empty after adding it to the tuple.'\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple((1,2,3,4),{'one':1,'two':2,'three':3,'four':4}) == (1,2,3,4)\nassert     add_dict_to_tuple((1,2,3),{'four':4,'five':5,'six':6}) == (1,2,3,4,5,6)\nassert     add_dict_to_tuple((1,2,3,4),{'one':1,'two':2,'three':3,'four':4}) == (1,2,3,4)\nassert     add_dict_to_tuple((1,2,3,4),{'five':5,'six':6,'seven':7,'eight':8}) == (1,2,3,4,5,6,7,8)\nassert     add_dict_to_tuple((1,2,3,4),{'four':4,'five':5,'six':6,'seven':7}) == (1,2,3,4,5,6,7)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert add_dict_to_tuple( ('a', 'b', 'c', 'd', 'e'), {'a': 'A', 'b': 'B'}) == ('a', 'b', 'c', 'd', 'e', {'a': 'A', 'b': 'B'})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple((1,2,3),{1:2,2:3}) == (1,2,3,1,2,3)\nassert add_dict_to_tuple((1,2,3),{1:2}) == (1,2,3,1,2)\nassert add_dict_to_tuple((1,2,3),{1:2}) == (1,2,3,1,2)\nassert add_dict_to_tuple((1,2,3),{4:5,6:7}) == (1,2,3,4,5,6,7)\nassert add_dict_to_tuple((1,2,3),{4:5}) == (1,2,3,4,5)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple(test_tup,test_dict) == (0,1,2,3,4,5,6)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple([1,2,3], {'a': 1, 'b': 2, 'c':3}) == (1,2,3)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple((), {}) == ()\nassert     add_dict_to_tuple((1,2,3), {}) == (1,2,3)\nassert     add_dict_to_tuple((1,2,3), {\"a\":\"b\",\"c\":\"d\"}) == (1,2,3,{\"a\":\"b\",\"c\":\"d\"})\nassert     add_dict_to_tuple((1,2,3,4), {\"a\":\"b\",\"c\":\"d\"}) == (1,2,3,4,{\"a\":\"b\",\"c\":\"d\"})\nassert     add_dict_to_tuple((1,2,3,4), {\"a\":\"b\",\"c\":\"d\"}, {\"e\":\"f\",\"g\":\"h\"}) == (1,2,3,4,{\"a\":\"b\",\"c\":\"d\"}, {\"e\":\"f\",\"g\":\"h\"})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_dict_to_tuple((), {}) == (tuple(), {})\nassert     add_dict_to_tuple((), {\"a\":1}) == (tuple(), {\"a\":1})\nassert     add_dict_to_tuple(({\"a\":1, \"b\":2},), {}) == ((\"a\", 1), (\"b\", 2))\nassert     add_dict_to_tuple(({\"a\":1, \"b\":2},), {\"a\":2}) == ((\"a\", 2), (\"b\", 2))\nassert     add_dict_to_tuple(({\"a\":1, \"b\":2},), {\"b\":1}) == ((\"a\", 1), (\"b\", 1))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple((1,2,3), {'a':1, 'b':2}) == (1,2,3,{'a':1, 'b':2})\nassert     add_dict_to_tuple((1,2,3), {'a':3, 'b':4}) == (1,2,3,{'a':3, 'b':4})\nassert     add_dict_to_tuple((1,2,3), {'a':3, 'c':4}) == (1,2,3,{'a':3, 'c':4})\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maxAverageOfPath([[1, 1, 1, 1],\n                            [1, 1, 1, 1],\n                            [1, 1, 1, 1],\n                            [1, 1, 1, 1]], \n                            2) == 2\nassert     maxAverageOfPath([[2, 2, 2, 2],\n                            [2, 2, 2, 2],\n                            [2, 2, 2, 2],\n                            [2, 2, 2, 2]], \n                            1) == 1\n\ndef maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maxAverageOfPath([[5,8,3],[4,2,1],[6,7,9]]) == 8\nassert     maxAverageOfPath([[1,2,1,1,1,1,1,1,1,1]]) == 8\nassert     maxAverageOfPath([[1,2,1,1,1],[1,1,1,1,1],[1,2,1,1,1],[1,2,1,1,1],[1,2,1,1,1],[1,2,1,1,1],[1,1,1,1,1],[1,2,1,1,1],[1,2,1,1,1],[1,1,1,1,1],[1,2,1,1,1]]) == 10.5"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maxAverageOfPath([\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [2, 2, 3, 3],\n    [1, 1, 2, 1]\n    ]) == 2.5, 'Wrong result for the following input: {}'.format([\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [2, 2, 3, 3],\n    [1, 1, 2, 1]\n    ])\nassert maxAverageOfPath([\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [2, 2, 3, 3],\n    [1, 1, 2, 1]\n    ]) == 2, 'Wrong result for the following input: {}'.format([\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [2, 2, 3, 3],\n    [1, 1, 2, 1]\n    ])\nassert maxAverageOfPath([\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [2, 2, 3, 3],\n    [1, 1, 2, 1]\n    ]) == 2.5, 'Wrong result for the following input: {}'.format([\n    [1, 1, 1, 1],\n    [1, 2, 2, 2],\n    [2, 2, 3, 3],\n    [1, 1, 2, 1]\n    ])\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert maxAverageOfPath([\n    [1, 2, 1],\n    [1, 2, 1],\n    [1, 2, 1]\n    ]) == 2\nassert maxAverageOfPath([\n    [1, 1, 1],\n    [1, 1, 1],\n    [1, 1, 1]\n    ]) == 1\nassert maxAverageOfPath([\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1]\n    ]) == 1\nassert maxAverageOfPath([\n    [1, 2, 1, 1],\n    [1, 2, 1, 1],\n    [1, 2, 1, 1],\n    [1, 2, 1, 1]\n    ]) == 2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maxAverageOfPath([[5, 1, 1], \n                           [4, 4, 5], \n                           [1, 2, 2]]) == 1.0\nassert maxAverageOfPath([[5, 1, 1], \n                        [4, 4, 5], \n                        [1, 2, 2], \n                        [1, 2, 2]]) == 1.0\nassert maxAverageOfPath([[5, 1, 1, 2], \n                        [4, 4, 5, 2], \n                        [1, 2, 2, 1], \n                        [1, 2, 2, 1]]) == 1.75\nassert maxAverageOfPath([[5, 1, 1, 2, 5], \n                        [4, 4, 5, 2, 5], \n                        [1, 2, 2, 1, 1], \n                        [1, 2, 2, 1, 1]]) == 1.8\nassert maxAverageOfPath([[5, 1, 1, 2, 5], \n                        [4, 4, 5, 2, 5], \n                        [1, 2, 2, 1, 1], \n                        [1, 2, 2, 1, 1], \n                        [1, 2, 2, 1, 1]]) == 2.0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath(cost = [[1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1],\n                                  [1,1,1,1,1,1,1,1,1,1,1,1]]) == 7.0\nassert maxAverageOfPath(cost = [[1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1]]) == 14.0\nassert maxAverageOfPath(cost = [[1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1]]) == 17.0\nassert maxAverageOfPath(cost = [[1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1]]) == 15.0\nassert maxAverageOfPath(cost = [[1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,1,1],\n                                [1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maxAverageOfPath([[7,8,1,9],\n                            [5,3,2,10],\n                            [6,4,1,3],\n                            [7,8,2,4]]) == 8.0\nassert     maxAverageOfPath([[1,2,1],\n                            [1,1,1],\n                            [1,1,1]]) == 1.0\nassert     maxAverageOfPath([[7,8,1,9],\n                            [5,3,2,10],\n                            [6,4,1,3],\n                            [4,7,2,4]]) == 10.0\nassert     maxAverageOfPath([[2,1],\n                            [2,1],\n                            [2,1]]) == 2.0\nassert     maxAverageOfPath([[0,0],\n                            [0,0],\n                            [0,0]]) == 0.0\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_data({'A': (1.8, 90), 'B': (1.6, 80), 'C': (1.6, 90)}, 1.8, 90) == {'A', 'C'}, 'incorrect filter_data'\nassert     filter_data({'A': (1.8, 90), 'B': (1.6, 80), 'C': (1.6, 90)}, 1.6, 70) == {'B'}, 'incorrect filter_data'\nassert     filter_data({'A': (1.8, 90), 'B': (1.6, 80), 'C': (1.6, 90)}, 1.6, 90) == {'A', 'B'}, 'incorrect filter_data'\nassert     filter_data({'A': (1.8, 90), 'B': (1.6, 80), 'C': (1.6, 90)}, 1.8, 70) == {'A', 'C'}, 'incorrect filter_data'\nassert     filter_data({'A': (1.8, 90), 'B': (1.6, 80), 'C': (1.6, 90)}, 1.6, 80) == {'B'}, 'incorrect filter_data'\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfilter_data({'Erika': (1.8, 70), 'Dorotkina': (1.71, 80), 'Dima': (1.65, 70), 'Chenil': (1.45, 60), 'Dasha': (1.55, 70)}, 1.6, 70) == {'Dasha': (1.55, 70)}\nassert filter_data({'Erika': (1.8, 70), 'Dorotkina': (1.71, 80), 'Dima': (1.65, 70), 'Chenil': (1.45, 60), 'Dasha': (1.55, 70)}, 1.6, 60) == {'Dasha': (1.55, 70)}\nassert filter_data({'Erika': (1.8, 70), 'Dorotkina': (1.71, 80), 'Dima': (1.65, 70), 'Chenil': (1.45, 60), 'Dasha': (1.55, 70)}, 1.5, 70) == {'Erika': (1.8, 70), 'Dasha': (1.55, 70)}\nassert filter_data({'Erika': (1.8, 70), 'Dorotkina': (1.71, 80), 'Dima': (1.65, 70), 'Chenil': (1.45, 60), 'Dasha': (1.55, 70)}, 1.3, 60) == {'Dasha': (1.55, 70)}\nassert filter_data({'Erika': (1.8, 70), 'Dorotkina': (1.71, 80), 'Dima': (1.65, 70), 'Chenil': (1.45, 60), 'Dasha': (1.55, 70)}, 1.2, 60) == {'Dasha': (1.55, 70)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_data({'Harry': (1.78, 80), 'Ron': (1.72, 90), 'Hermione': (1.73, 100)}, 1.65, 1.85) == {'Harry': (1.72, 90), 'Hermione': (1.73, 100)}\nassert filter_data({'Harry': (1.78, 80), 'Ron': (1.72, 90), 'Hermione': (1.73, 100)}, 1.65, 1.85) == {'Harry': (1.78, 80), 'Ron': (1.72, 90)}\nassert filter_data({'Harry': (1.78, 80), 'Ron': (1.72, 90), 'Hermione': (1.73, 100)}, 1.65, 1.85) == {'Harry': (1.78, 80), 'Ron': (1.72, 90)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    print('**** Start of filter_data() ****')\n    h = filter_data(students,100,100)\n    print(h)\n    print('**** End of filter_data() ****')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndata = {\n    'Tom' : (1.68, 45),\n    'Jerry' : (1.71, 36),\n    'Kevin' : (1.74, 32),\n    'Ron' : (1.66, 24),\n    'George' : (1.67, 21),\n}\nfilter_data(data,2,2)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_data({\"Arshal\": (65, 100), \"sanskar\": (78, 87), \"Kane\": (80, 85)}, 80, 80) == {\n        \"Kane\": (80, 85),\n    }, \"Tests failed\"\n\nprint(\"Test 3 passed\")\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data({'CS': (1.8, 76.2), 'ST': (1.78, 94.1)}, 1.6, 84) == {'CS': (1.8, 76.2), 'ST': (1.78, 94.1)}, \\\n    \"The returned dictionary is incorrect. Did you use the correct function to filter the dictionary?\"\nassert filter_data({'CS': (1.8, 76.2), 'ST': (1.78, 94.1)}, 1.6, 84) == {'CS': (1.8, 76.2), 'ST': (1.78, 94.1)}, \\\n    \"The returned dictionary is incorrect. Did you use the correct function to filter the dictionary?\"\nassert filter_data({'CS': (1.8, 76.2), 'ST': (1.78, 94.1)}, 1.6, 84) == {'CS': (1.8, 76.2), 'ST': (1.78, 94.1)}, \\\n    \"The returned dictionary is incorrect. Did you use the correct function to filter the dictionary?\"\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data(students,1.1,2)=={'Oscar':(1.8,90),'Mike':(1.9,70),'Harshad':(1.7,80),'Pavan':(1.8,60),'Akshay':(1.6,90),'Raju':(1.8,80)}\nassert     filter_data(students,1.5,90)=={'Oscar':(1.8,90),'Mike':(1.9,70),'Harshad':(1.7,80),'Pavan':(1.8,60),'Akshay':(1.6,90),'Raju':(1.8,80)}\nassert     filter_data(students,1.1,2.1)=={'Oscar':(1.8,90),'Mike':(1.9,70),'Harshad':(1.7,80),'Pavan':(1.8,60),'Akshay':(1.6,90),'Raju':(1.8,80)}\nassert     filter_data(students,1,2)=={'Oscar':(1.8,90),'Mike':(1.9,70),'Harshad':(1.7,80),'Pavan':(1.8,60),'Akshay':(1.6,90),'Raju':(1.8,80)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_data(students,h,w) ==     {'Harry':(170.0,55),\n                                             'Robert':(191.0,85),\n                                             'Ricky':(172.0,85),\n                                             'Yogendra':(178.0,91),\n                                             'Laxman':(166.0,80)}\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_same_pair([1,2,3,4], [1,2,3,4]) == 4\nassert     count_same_pair([1,2,3,4], [1,1,1,1]) == 4\nassert count_same_pair([1,2,3,4], [1,1,4,4]) == 3\n\ndef count_same_pair_new(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    count_same_pair([1,2,3,4], [1,2,3,4]) == 2\n\nassert \n    count_same_pair([1,2,3], [1,2,3]) == 0\n\nassert \n    count_same_pair([1,2,3], [1,2,3,4]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_same_pair([1,2,3], [1,2,3]) == 3\nassert count_same_pair([1,2,3], [1,2,3]) == 0\nassert count_same_pair([1,2,3], [2,2,2]) == 1\nassert count_same_pair([1,2,3], [2,2,4]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_same_pair([1,2,3],    [1,2,3]) == 0\nassert     count_same_pair([1,2,3],    [1,2,2]) == 1\nassert     count_same_pair([1,2,2],    [1,2,2]) == 2\nassert     count_same_pair([1,2,2],    [1,1,2]) == 2\nassert     count_same_pair([1,2,2],    [2,2,2]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_same_pair([1, 1, 1, 1], [1, 1, 1, 1]) == 2\nassert count_same_pair([1, 2, 1, 1], [2, 1, 2, 1]) == 4\nassert count_same_pair([1, 1, 1, 2], [2, 1, 1, 2]) == 3\nassert count_same_pair([1, 2, 1, 2, 2], [2, 2, 1, 1, 2]) == 3\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_same_pair_test(count_same_pair):\n    assert count_same_pair([1,1,2,3,3,3,3,4,5,5,5,5,5,5,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_same_pair([1, 1, 2], [1, 2, 3]) == 2\nassert     count_same_pair([1, 2, 3], [1, 1, 2]) == 3\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    from collections import Counter\n    # Your code here\n    #print(Counter(nums1))\n    #print(Counter(nums2))\n    return (Counter(nums1) == Counter(nums2))\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_same_pair([], []) == 0\nassert count_same_pair([1], [1]) == 1\nassert count_same_pair([1, 2, 3], [1, 2, 3]) == 3\nassert count_same_pair([1, 2, 3, 4], [1, 2, 3, 4]) == 4\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power_base_sum(3, 2) == 9\nassert     power_base_sum(7, 3) == 49\nassert     power_base_sum(18, 0) == 1\nassert     power_base_sum(18, 1) == 18\nassert     power_base_sum(18, 2) == 36\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power_base_sum(5, 3) == 45, 'WRONG! result should be 45'\nassert     power_base_sum(8, 2) == 64, 'WRONG! result should be 64'\n\n'''\nGiven an array of integers, return the sum of its elements.\n\nFor example:\n    Given: [1, 2, 3]\n    returns: 6\n'''\ndef array_sum(array):\n    '''\n    Write a function that takes an array of integers and returns the sum of all the integers in the array.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power_base_sum(7, 3) == 31\nassert     power_base_sum(7, 5) == 95\nassert     power_base_sum(7, 6) == 230\nassert     power_base_sum(1, 0) == 1\nassert     power_base_sum(0, 0) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power_base_sum(2, 0) == 0\nassert     power_base_sum(2, 2) == 0\nassert     power_base_sum(3, 2) == 0\nassert     power_base_sum(5, 3) == 0\nassert     power_base_sum(7, 5) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(2, 10) == 12\nassert     power_base_sum(2, 2) == 2\nassert     power_base_sum(4, 3) == 22\nassert     power_base_sum(4, 3) == 22\nassert     power_base_sum(4, 0) == 4\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    power_base_sum(3, 2) == 9\n    power_base_sum(3, 3) == 27\n    power_base_sum(3, 4) == 33\n    power_base_sum(9, 2) == 27\n    power_base_sum(9, 3) == 243\n    power_base_sum(9, 4) == 81\n    power_base_sum(99, 3) == 999\n    power_base_sum(1231, 3) == 999\n    power_base_sum(1231, 4) == 1331\n    power_base_sum(1, 6) == 0\n    power_base_sum(0, 6) == 0\n    power_base_sum(1231, 5) == 1331\n    power_base_sum(1231, 6) == 1231\n    power_base_sum(1231, 7) == 1231\n    power_base_sum(1231, 8) == 1231\n    power_base_sum(1231, 9) == 1231\n    power_base_sum(1231, 10) == 1231\n    power_base_sum(1231, 11) == 1231\n    power_base_sum(1231, 12) == 1231\n    power_base_sum(1231, 13) == 1231\n    power_base_sum(1231, 14) == 1231\n    power_base_sum(1231, 15) == 1231\n    power_base_sum(1231, 16) == 1231\n    power_base_sum(1231, 17) == 1231\n    power_base_sum(1231, 18) == 1231\n    power_base_sum(1231, 19) == 1231\n    power_base_sum(1231, 20) == 1231\n    power_base_sum(1231, 21) == 1231\n    power_base_sum(1231, 22) == 1231\n    power_base_sum(1231, 23) == 1231\n    power_base_sum(1231, 24) == 1231\n    power_base_sum(1231, 25) == 1231\n    power_base_sum(1231, 26) == 1231\n    power_base_sum(1231, 27) == 1231\n    power_base_sum(1231, 28) == 1231\n    power_base_sum(1231, 29) == 1231\n    power_base_sum(1231, 30) == 1231\n    power_base_sum(1231, 31) == 1231\n    power_base_sum(1231, 32) == 1231\n    power_base_sum(1231, 33) == 1231\n    power_base_sum(1231, 34) == 1231\n    power_base_sum(1231, 35) == 1231\n    power_base_sum(1231, 36) == 1231\n    power_base_sum(1231, 37) == 1231\n    power_base_sum(1231, 38) == 1231\n    power_base_sum(1231, 39) == 1231\n    power_base_sum(1231, 40) == 1231\n    power_base_sum(1231, 41) == 1231\n    power_base_sum(1231, 42) == 1231\n    power_base_sum(1231, 43) == 1231\n    power_base_sum(1231, 44) == 1231\n    power_base_sum(1231, 45) == 1231\n    power_base_sum(1231, 46) == 1231\n    power_base_sum(1231, 47) == 1231\n    power_base_sum(1231, 48) == 1231\n    power_base_sum(1231, 49) == 1231\n    power_base_sum(1231, 50) == 1231\n    power_base_sum(1231, 51) == 1231\n    power_base_sum(1231, 52) == 1231\n    power_base_sum(1231, 53) == 1231\n    power_base_sum(1231, 54) == 1231\n    power_base_sum(1231, 55) == 1231\n    power_base_sum(1231, 56) == 1231\n    power_base_sum(1231, 57) == 1231\n    power_base_sum(1231, 58) == 1231\n    power_base_sum(1231, 59) == 1231\n    power_base_sum(1231, 60) == 1231\n    power_base_sum(1231, 61) == 1231\n    power_base_sum(1231, 62) == 1231\n    power_base_sum(1231, 63) == 1231\n    power_base_sum(1231, 64) == 1231\n    power_base_sum(1231, 65) == 1231\n    power_base_sum(1231, 66) == 1231\n    power_base_sum(1231, 67) == 1231\n    power_base_sum(1231, 68) == 1231\n    power_base_sum(1231, 69) == 1231\n    power_base_sum(1231, 70) == 1231\n    power_base_sum(1231, 71) == 1231\n    power_base_sum(1231, 72) == 1231\n    power_base_sum(1231, 73) == 1231\n    power_base_sum(1231, 74) == 1231\n    power_base_sum(1231, 75) == 1231\n    power_base_sum(1231, 76) == 1231\n    power_base_sum(1231, 77) == 1231\n    power_base_sum(1231, 78) == 1231\n    power_base_sum(1231, 79) == 1231\n    power_base_sum(1231, 80) == 1231\n    power_base_sum(1231, 81) == 1231\n    power_base_sum(1231, 82) == 1231\n    power_base_sum(1231, 83) == 1231\n    power_base_sum(1231, 84) == 1231\n    power_base_sum(1231, 85) == 1231\n    power_base_sum(1231, 86) == 1231\n    power_base_sum(1231, 87) == 1231\n    power_base_sum(1231, 88) == 1231\n    power_base_sum(1231, 89) == 1231\n    power_base_sum(1231, 90) == 1231\n    power_base_sum(1231, 91) == 1231\n    power_base_sum(1231, 92) == 1231\n    power_base_sum(1231, 93) == 1231\n    power_base_sum(1231, 94) == 1231\n    power_base_sum(1231, 95) == 1231\n    power_base_sum(1231, 96) == 1231\n    power_base_sum(1231, 97) == 1231\n    power_base_sum(1231, 98) == 1231\n    power_base_sum(1231, 99) == 1231\n    power_base_sum(1231, 100) == 1231\n    power_base_sum(1231, 101) == 1231\n    power_base_sum(1231, 102) == 1231\n    power_base_sum(1231, 103) == 1231\n    power_base_sum(1231, 104) == 1231\n    power_base_sum(1231, 105) == 1231\n    power_base_sum(1231, 106) == 1231\n    power_base_sum(1231, 107) == 1231\n    power_base_sum(1231, 108) == 1231\n    power_base_sum(1231, 109) == 1231\n    power_base_sum(1231, 110) == 1231\n    power_base_sum(1231, 111) == 1231\n    power_base_sum(1231, 112) == 1231\n    power_base_sum(1231, 113) == 1231\n    power_base_sum(1231, 114) == 1231\n    power_base_sum(1231, 115) == 1231\n    power_base_sum(1231, 116) == 1231\n    power_base_sum(1231, 117) == 1231\n    power_base_sum(1231, 118) == 1231\n    powe"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power_base_sum(10, 0) == 0, 'error case: base=10, power=0'\nassert     power_base_sum(10, 1) == 0, 'error case: base=10, power=1'\nassert     power_base_sum(10, 2) == 0, 'error case: base=10, power=2'\nassert     power_base_sum(10, 3) == 0, 'error case: base=10, power=3'\nassert     power_base_sum(10, 4) == 0, 'error case: base=10, power=4'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert power_base_sum(7, 3) == 0\nassert power_base_sum(7, 4) == 49\nassert power_base_sum(9, 5) == 65\nassert power_base_sum(8, 0) == 8\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power_base_sum(8, 2) == 24\nassert     power_base_sum(8, 3) == 45\nassert     power_base_sum(8, 4) == 64\nassert     power_base_sum(8, 5) == 121\nassert     power_base_sum(8, 6) == 144\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation(\"my name is Bill and my name is Bill. I am learning Python\") == \"Bill\"\nassert     extract_quotation(\"My name is Bill and my name is Bill and I am learning Python\") == \"Bill\"\nassert     extract_quotation(\"My name is Bill, and my name is Bill, I am learning Python\") == \"Bill\"\nassert     extract_quotation(\"My name is Bill, and my name is Bill, I am learning Python\") == \"Bill\"\nassert     extract_quotation(\"My name is Bill and my name is Bill, I am learning Python\") == \"Bill\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation(\"Let's take LeetCode contest\") == \"Lectot\", 'test failed'\nassert     extract_quotation(\"'BAD MAN'\") == 'BAD MAN', 'test failed'\nassert     extract_quotation(\"'BAD MAN' BAD MAN\") == 'BAD MAN', 'test failed'\nassert     extract_quotation(\"I am an NLPer,\\nI am from India.\") == 'I am an NLPer,\\nI am from India.', 'test failed'\nassert     extract_quotation(\"I am from India.\") == 'I am from India.', 'test failed'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation('''We are very pleased to have you join our customer service!''') =='very pleased to have you join our customer service!'\nassert     extract_quotation('''We can help you to find an early return service in 6 months. \nThe amount of the service will be refunded to you within 24 hours.''') == 'can help you to find an early return service in 6 months.'\nassert     extract_quotation('''As our customers are not very satisfied, we have redesigned our product. \nOur new products are better than the old ones, so we are happy to sell you.''') == 'As our customers are not very satisfied, we have redesigned our product. Our new products are better than the old ones, so we are happy to sell you.'\nassert     extract_quotation('''Great! We are excited to have you as our first customer! \nIt is the best service you will get, we have provided you with a discount of 30% off from your total bill.''') == 'great! We are excited to have you as our first customer! It is the best service you will get, we have provided you with a discount of 30% off from your total bill.'\nassert     extract_quotation('''We are very pleased to have you join our customer service! \nThe amount of the service will be refunded to you within 24 hours.''') == 'we are very pleased to have you join our customer service!'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nextract_quotation(\"\"\"Apple Inc. is the new technology \n                        to accelerate adoption of smartphones \n                        and tablets\"\"\") == \n        [\"Apple Inc.\"]\n\nassert \nextract_quotation(\"\"\"Apple Inc. is the new technology \n                        to accelerate adoption of smartphones \n                        and tablets\"\"\") == \n        [\"Apple Inc.\", \"to accelerate\"]\n\nassert \nextract_quotation(\"\"\"Apple Inc. is the new technology \n                        to accelerate adoption of smartphones \n                        and tablets\"\"\") == \n        [\"Apple Inc.\", \"to accelerate\"]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation(\"'Hello world!''\") == \"\"\nassert extract_quotation(\"'Hello world!'\") == \"Hello world!\"\nassert extract_quotation(\"'Hello world!' \") == \"Hello world!\"\nassert extract_quotation(\"'Hello world! '\") == \"Hello world!\"\nassert extract_quotation(\"'Hello world! 'Hello\") == \"Hello world!\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nextract_quotation(\"This is a string.\") == \"This is a string.\"\nassert extract_quotation(\"This is a string.\") == \"This is a string.\"\nassert extract_quotation(\"Hi.\") == \"Hi.\"\nassert extract_quotation(\"Hi. Hi.\") == \"Hi. Hi.\"\nassert extract_quotation(\"Hi. Hi. Hi\") == \"Hi. Hi. Hi\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation('\"This is a sample text.\"') == 'This is a sample text.'\nassert     extract_quotation(\"This is a sample text.\") == 'This is a sample text.'\nassert     extract_quotation(\"\"\"This is a sample text.\"\"\") == 'This is a sample text.'\nassert     extract_quotation(\"\"\"This is a sample text.\"\"\") == 'This is a sample text.'\nassert     extract_quotation(\"\"\"This is a sample text.\"\"\",1) == 'This is a sample text.'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_quotation('') == ''\nassert     extract_quotation('hi \"here\"') == 'here'\nassert     extract_quotation('hi \"here\" and hi') == 'and hi'\nassert     extract_quotation('hi \"here\" and \"hi\") == 'and hi'\nassert     extract_quotation('hi \"here\" and hi') == 'and hi'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_quotation('John said, \"you are right\"') == ['john', 'you', 'are', 'right'], \"Test Fail\"\nassert     extract_quotation('\"you are right\" John said') == ['you', 'are', 'right', 'John','said'], \"Test Fail\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation(\"This is a sample quotation\") == \"sample\"\nassert     extract_quotation(\"Hi, I'm here\") == \"here\"\nassert     extract_quotation(\"What's your name? \") == \"name\"\nassert     extract_quotation(\"What's your name? \") == \"name\"\nassert     extract_quotation(\"What's your name? \") == \"name\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((2,4,3)) == (2,4,9)\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,10)\nassert     multiply_elements((9,8,7)) == (9,8,27)\n\n'''\nWrite a function named is_palindrome that takes as input a string s and returns True if s is a palindrome and False otherwise.\nA palindrome is a string that reads the same forwards and backwards.\n'''\ndef is_palindrome(s):\n    '''\n    Write a function that takes as input a string s and returns True if s is a palindrome and False otherwise.\n    A palindrome is a string that reads the same forwards and backwards.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((5, 4, 7)) == (5, 20, 35)\nassert     multiply_elements((1,2,3)) == (1, 2, 3)\nassert     multiply_elements((2,4,6)) == (4, 16, 24)\n\n\ndef last_index_even(test_list):\n    '''\n    Write a function that takes as input a list of integers and returns the index of the last element that is even, otherwise returns -1.\n    '''\n    pass"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((2,4,6)) == (8,12,18)\nassert     multiply_elements((8,2,9)) == (48,8,27)\nassert     multiply_elements((3,2,4)) == (6,4,8)\nassert     multiply_elements((5,2,4,7)) == (70,10,18,42)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3)) == (2,4,6), '1st example'\nassert     multiply_elements((-2,1,-3,4)) == (-8,-6,4,8), '2nd example'\nassert     multiply_elements((-4,8,-1,-9,3)) == (-32,16,-8,-36,9,12), '3rd example'\nassert     multiply_elements((-6,12,-6,4,2)) == (-36,0,-48,0,4,6), '4th example'\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((1, 2, 3)) == (1, 2, 3)\nassert     multiply_elements((1, 2, 3)) == (2, 4, 6)\nassert     multiply_elements((1, 2, 3, 4)) == (1, 4, 9, 16)\nassert     multiply_elements((1, 2, 3, 4, 5, 6)) == (1, 2, 6, 24, 120, 720)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == (1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 3628800, 3628800, 3628800)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((1, 2, 3)) == (1, 2, 3)\nassert     multiply_elements((1, 2, 3, 4)) == (1, 4, 6, 4)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 0)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    multiply_elements((1,2,3,4)) == (1,2,3,4)\n    assert multiply_elements((1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7,8)\n    assert multiply_elements((5,6,7,8,9,10,11,12)) == (5,6,7,8,9,10,11,12)\n    assert multiply_elements((5,6,7,8,9,10,11,12,13)) == (5,6,7,8,9,10,11,12,13)\n    assert multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1, 2, 3, 4), 'fail 1'\nassert     multiply_elements((1,2,3,4,5)) == (1, 2, 3, 4, 5), 'fail 2'\nassert     multiply_elements((1,2,3,4,5,6)) == (1, 2, 3, 4, 5, 6), 'fail 3'\nassert     multiply_elements((1,2,3,4,5,6,7)) == (1, 2, 3, 4, 5, 6, 7), 'fail 4'\n\nprint('check passed')\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)\nassert     multiply_elements((1,0,2,0,4)) == (1,0,2,0,4)\nassert     multiply_elements((0,0,0,0,0)) == (0,0,0,0,0)\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4), \"incorrect answer\"\nassert     multiply_elements((3,4,5,6)) == (3,4,5,6), \"incorrect answer\"\nassert     multiply_elements((5,6,7,8)) == (5,6,7,8), \"incorrect answer\"\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5), \"incorrect answer\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_list2(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert sum_list([1,2,3,4,5],[6,7,8,9,10]) == [1+6, 2+7, 3+8, 4+9, 5+10]\n\nassert sum_list([1,2,3],[4,5,6]) == [1+4, 2+5, 3+6]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_list([1,2,3,4], [4,3,2,1]) == [5,6,7,8]\nassert sum_list([1,2,3,4,5,6], [4,3,2,1,0,0]) == [5,6,7,8,9,0]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3], [-1,2,3]) == [0,2,5]\nassert     sum_list([1,2,3], [4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3], []) == [1,2,3]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) ==     [5,7,9], 'Wrong'\nassert     sum_list([1,2,3],[1,2,3]) ==     [2,4,6], 'Wrong'\nassert     sum_list([1,2,3],[2,3,4]) ==     [3,5,7], 'Wrong'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\nassert     sum_list([1, 2, 3], [4, 5, 6, 7]) == [5, 7, 9, 10]\nassert     sum_list([1], [2]) == [3]\nassert     sum_list([1, 2, 3], [4]) == [5, 7, 10]\nassert     sum_list([1, 2], [3, 4, 5]) == [4, 6]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_list([1,2,3],[4,5,6]) == [5,7,9], \"Test 1 failed\"\nassert sum_list([4,2,1],[1,1,1]) == [5,3,4], \"Test 2 failed\"\nassert sum_list([2,2,2],[2,2,2]) == [4,4,4], \"Test 3 failed\"\nassert sum_list([1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,11,13,15,17,19], \"Test 4 failed\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_list([1,2,3,4,5], [6,7,8,9,10]) == [1+6,2+7,3+8,4+9,5+10], \"Wrong output\"\nassert     sum_list([1,2,3,4,5,5], [6,7,8,9,10,10]) == [1+6,2+7,3+8,4+9,5+10,5+10], \"Wrong output\"\nprint(\"sum_list: test passed\")\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_list([1,2,3,4],[1,2,3,4]) == [2,4,6,8]\nassert     sum_list([2,4,6,8],[1,2,3,4]) == [3,6,9,12]\nassert     sum_list([1,2,3,4],[1,2,3,4]) == [2,4,6,8]\nassert     sum_list([4,5,6,7],[1,2,3,4]) == [5,7,9,11]\nassert     sum_list([9,8,7,6],[1,2,3,4]) == [10,10,10,10]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9], \"Wrong result\"\nprint(\"Test case passed!\")\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef even_dist_to_first_duplicate(nums):\n    '''\n    Write a function to find out the position of the first duplicate number in a given array.\n    Assume that no two numbers have the same position.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 2, 3]) == True\nassert     consecutive_duplicates([1, 2, 3]) == False\nassert     consecutive_duplicates([]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([1,2,3,2,4]) == False\nassert     consecutive_duplicates([1,2,3,4]) == True\nassert     consecutive_duplicates([1,2,3,4,5]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1, 1, 2, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([1, 2, 3, 4, 4]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([1, 2, 3, 4, 1]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([1, 2, 3, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1]) == []\nassert     consecutive_duplicates([1,2,3]) == [1,2,3]\nassert     consecutive_duplicates([1,2,3,4]) == [1,2,3,4]\nassert     consecutive_duplicates([1,1,2,2,3,3,4,4]) == [1,2,3,4]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 3, 4, 4, 4]) == False, 'List with duplicate'\nassert consecutive_duplicates([1, 1, 2, 3, 4, 4, 5, 5, 5, 5, 6]) == False, 'List with duplicate'\nassert consecutive_duplicates([1, 1, 2, 3, 4, 5]) == True, 'List with no duplicate'\nassert consecutive_duplicates([1, 1, 2, 3, 4, 5, 6, 7, 7]) == True, 'List with no duplicate'\nassert consecutive_duplicates([1, 1, 2, 3, 4, 5, 5]) == True, 'List with no duplicate'\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nconsecutive_duplicates([1, 2, 3, 4, 5]) == False\nconsecutive_duplicates([5, 5, 5, 5, 5, 5, 5, 5, 5]) == False\nconsecutive_duplicates([3, 4, 5, 5, 5, 5, 5, 5, 5, 5]) == False\nconsecutive_duplicates([1, 2, 3, 4, 5]) == False\nconsecutive_duplicates([1]) == False\nconsecutive_duplicates([1, 2, 2, 2, 2, 2, 2, 2, 2]) == False\nconsecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299])\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([1,1,2,2]) == [1,2], 'Wrong.'\nassert     consecutive_duplicates([1,1,2,2,3,3]) == [1,2,3], 'Wrong.'\nassert     consecutive_duplicates([1,1,2,3,4,5,6,6]) == [1,2,3,4,5,6], 'Wrong.'\nassert     consecutive_duplicates([1,1,2,3,4,5,6,6]) == [1,2,3,4,5,6], 'Wrong.'"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([]) == []\nassert consecutive_duplicates([1]) == [1]\nassert consecutive_duplicates([1,2]) == [1,2]\nassert consecutive_duplicates([1,2,3]) == [1,2,3]\nassert consecutive_duplicates([1,1,2]) == [1,2]\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert lateralsurface_cone(r = 5, h = 2) == 40.0\nassert lateralsurface_cone(r = 20, h = 10) == 610.0\nassert lateralsurface_cone(r = 30, h = 15) == 810.0\nassert lateralsurface_cone(r = 40, h = 20) == 1630.0\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cone(1,1) == 2\nassert     lateralsurface_cone(1,2) == 3\nassert     lateralsurface_cone(3,3) == 10\nassert     lateralsurface_cone(5,3) == 15\nassert     lateralsurface_cone(3,7) == 34\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cone(2,3) == 26.82842712475\nassert     lateralsurface_cone(2,5) == 574.2454179788\nassert     lateralsurface_cone(4,5) == 1134.094391137\nassert     lateralsurface_cone(4,4) == 112\nassert     lateralsurface_cone(5,4) == 1036.044707898\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cone(2, 3) == 5\nassert     lateralsurface_cone(0.5, 0.5) == 0.5\nassert     lateralsurface_cone(0.5, 0.1) == 0.5\n\n'''\nCheck your understanding of recursion.\nWhat do you think of a recursive function's call stack?\n'''\n\ndef check_stack(f):\n    '''\n    Write a function to test whether the recursive call stack is appropriate.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cone(5,5) == math.pi/4 * (r**2)\nassert     lateralsurface_cone(4,5) == math.pi * (r**2)\nassert     lateralsurface_cone(2,3) == math.pi * (r**2)\n\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cone(5,3) == 22.6\nassert lateralsurface_cone(3,2) == 16.99\nassert lateralsurface_cone(5,5) == 26.18\nassert lateralsurface_cone(5,0) == 0\nassert lateralsurface_cone(1,1) == math.pi*1**2\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar('a:b:c') == 'a:b:c'\nassert     replace_specialchar('abc:d:e:f') == 'abc:d:e:f'\nassert     replace_specialchar('abc:d') == 'abc:d'\nassert     replace_specialchar('abc.d') == 'abc.d'\nassert     replace_specialchar('a:bc.d') == 'a:bc.d'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar(\"my name is blah, my name is  blah\") == \"my name is: blah, my name is: blah\"\nassert     replace_specialchar(\"what are you like? i'd like to be a programer\") == \"what are you like? i'd like to be a programer\"\nassert     replace_specialchar(\"my name is bob and i like turtles\") == \"my name is bob and i like turtles\"\nassert     replace_specialchar(\"my name is bob and i like turtles and they like fish\") == \"my name is bob and i like turtles and they like fish\"\nassert     replace_specialchar(\"I ate a bowl of cereal out of my hat, and it tasted like mint jelly\") == \"I ate a bowl of cereal out of my hat, and it tasted like mint jelly\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar(\"My name is Sam, and I live in France\") == \"My name is Sam, and I live in France:\"\nassert     replace_specialchar(\"This text has commas, spaces, and dots.\") == \"This text has commas, spaces, and dots.\"\nassert     replace_specialchar(\"This text has dots, commas, and spaces.\") == \"This text has dots, commas, and spaces.\"\nassert     replace_specialchar(\"This text has dots, spaces, and commas.\") == \"This text has dots, spaces, and commas.\"\nassert     replace_specialchar(\"This text has spaces, commas, and dots.\") == \"This text has spaces, commas, and dots.\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef replace_uppercase_char(text):\n    '''\n    Write a function to replace all the uppercase letters with '_'\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar('a.b') == 'a:b'\nassert     replace_specialchar('a,b') == 'a:b'\nassert     replace_specialchar('a.b:') == 'a:b:'\nassert     replace_specialchar('a,b:') == 'a:b:'\nassert     replace_specialchar('.ab') == 'a:b'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    replace_specialchar('word!') == 'word:'\nassert \n    replace_specialchar('word,comma,dot') == 'word:comma:dot'\nassert \n    replace_specialchar('word.dot') == 'word.dot'\nassert \n    replace_specialchar('word!\\n') == 'word:'\nassert \n    replace_specialchar('word,comma,dot\\n') == 'word:comma:dot\\n'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_specialchar(\"we are just a test\") == \"we:are:just:a:test\"\nassert     replace_specialchar(\"we,are,we,are,test\") == \"we:are:we:are:test\"\nassert     replace_specialchar(\"we,are,we,are,test\") == \"we:are:we:are:test\"\nassert     replace_specialchar(\"we,we,we,are,test\") == \"we:we:we:are:test\"\nassert     replace_specialchar(\"we,are, we,are,test\") == \"we:are:we:are:test\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_int(value):\n    '''\n    Write a function to check if a string contains only integers.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_specialchar('this is a test') ==     'this is a test'\nassert     replace_specialchar('this, is, a, test') ==     'this is a test'\nassert     replace_specialchar('this. is a test') ==     'this is a test'\nassert     replace_specialchar('this, is, a, test') ==     'this is a test'\nassert     replace_specialchar('this. is a, test') ==     'this is a test'\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_first_occurrence([1, 3, 5, 6, 6], 6) == 3\nassert     find_first_occurrence([1, 3, 5, 6, 6], 2) == -1\nassert     find_first_occurrence([1, 3, 5, 6, 6], 1) == 0\nassert     find_first_occurrence([], 1) == -1\nassert     find_first_occurrence([], 0) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_first_occurrence([1,2,4,5,6,7,8,9], 3) == 4\n    find_first_occurrence([1,2,4,5,6,7,8,9], 8) == 8\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_first_occurrence([1,2,3,3,4,4,4], 4) == 5\nassert     find_first_occurrence([1,2,3,3,4,4,4], 3) == 2\nassert     find_first_occurrence([1,2,3,3,4,4,4], 6) == -1\nassert     find_first_occurrence([1,2,3,3,4,4,4], 1) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nA = [3,4,4,5,5,5,6,7,7,7]"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_first_occurrence([1,2,3,3,4,5], 3) == 2\nassert     find_first_occurrence([1,2,3,3,4,5], 0) == -1\nassert     find_first_occurrence([1,2,3,3,4,5], 7) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_first_occurrence([1, 2, 3], 2) == 1\nassert     find_first_occurrence([1, 2, 3], 1) == 0\nassert     find_first_occurrence([1, 2, 3], 3) == 2\nassert     find_first_occurrence([1, 2, 3], 0) == 0\nassert     find_first_occurrence([1, 2, 3], 4) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_first_occurrence([1, 2, 3, 4, 5], 2) ==     3, 'Fail'\nassert     find_first_occurrence([1, 2, 3, 4, 5], 1) ==     0, 'Fail'\nassert     find_first_occurrence([1, 2, 3, 4, 5], 5) ==     4, 'Fail'\nassert     find_first_occurrence([1, 2, 3, 4, 5], 6) ==     -1, 'Fail'\nassert     find_first_occurrence([1, 2, 3, 4, 5], 0) ==     -1, 'Fail'\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_first_occurrence([1,1,1,2,3,4,5,6,7,6,7,8,9], 1) == 4\nassert     find_first_occurrence([1,1,1,2,3,4,5,6,7,6,7,8,9], 2) == 9\nassert     find_first_occurrence([1,1,1,2,3,4,5,6,7,6,7,8,9], 3) == 6\nassert     find_first_occurrence([1,1,1,2,3,4,5,6,7,6,7,8,9], 4) == 7\nassert     find_first_occurrence([1,1,1,2,3,4,5,6,7,6,7,8,9], 8) == 9\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nGiven a 2D matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n\nInput:\n\n[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n(1, 1, 3, 3)\n(2, 2, 4, 4)\nOutput: 25\n\nInput:\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test data\n    arr = [1, 2, -1, -2, 3]\n\n    print('sum_Of_Subarray_Prod: ', sum_Of_Subarray_Prod(arr))"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3]) == 1 * 1 * 2\nassert sum_Of_Subarray_Prod([1,2,3,4,5]) == 1 * 2 * 3 * 4 * 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 1 * 1 * 2 * 3\nassert sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 1 * 1 * 2 * 3 * 4 * 5\nassert sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10]) == 1 * 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 24\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 30\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 60\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) == 210\n\ndef sum_Of_Subarray_Prod_2(arr):\n    '''\n    We can use a bit manipulation to solve this problem. We can simply multiply the elements of arr and then multiply the products of these elements in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_Of_Subarray_Prod([])==0, \"Sum_of_Prod_of_sublist_should_be_0\"\nassert     sum_Of_Subarray_Prod([1])==1, \"Sum_of_Prod_of_sublist_should_be_1\"\nassert     sum_Of_Subarray_Prod([1,2,3])==6, \"Sum_of_Prod_of_sublist_should_be_6\"\nassert     sum_Of_Subarray_Prod([1,2,3,4])==24, \"Sum_of_Prod_of_sublist_should_be_24\"\nassert     sum_Of_Subarray_Prod([1,2,3,4,5])==120, \"Sum_of_Prod_of_sublist_should_be_120\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 24\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 120\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10]) == 360\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 1260\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 172800\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 4, 'check'\nassert     sum_Of_Subarray_Prod([1,2,3]) == 6, 'check'\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 14, 'check'\nassert     sum_Of_Subarray_Prod([3,1,2,4,5]) == 15, 'check'\nassert     sum_Of_Subarray_Prod([3,2,4,5]) == 18, 'check'\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nYou are given a space separated list of numbers. \nIf all the numbers are positive, then you need to check \nwhether they are divisible by 5 or not. \n\nInput Format:\nA single line of input containing space separated numbers.\n\nConstraints:\n0 < N < 10^4\n\nOutput Format:\nPrint \"true\" or \"false\" accordingly\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum_Of_Subarray_Prod([1,2,3,4]) == 16\nassert \nsum_Of_Subarray_Prod([1,3,4,5]) == 55\nassert \nsum_Of_Subarray_Prod([1,5,4,2]) == 24\nassert \nsum_Of_Subarray_Prod([1,2,3,4]) == 16\nassert \nsum_Of_Subarray_Prod([1,2,3,4]) == 16\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_middle_bits(0b1010101) == 0b1000101\nassert     set_middle_bits(0b1010110) == 0b1000111\nassert     set_middle_bits(0b1010111) == 0b1000010\nassert     set_middle_bits(0b11110000) == 0b1000011\nassert     set_middle_bits(0b11000000) == 0b1000010\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_middle_bits(11) == 13\nassert     set_middle_bits(9) == 21\nassert     set_middle_bits(14) == 11\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_middle_bits(1) == 2\nassert     set_middle_bits(0) == 1\nassert     set_middle_bits(11) == 10\nassert     set_middle_bits(9) == 10\nassert     set_middle_bits(10) == 10\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_middle_bits(1) == 0b1010\nassert     set_middle_bits(8) == 0b1001\nassert     set_middle_bits(17) == 0b1011\nassert     set_middle_bits(255) == 0b111"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(11) ==     0b1010\nassert     set_middle_bits(0b10111111) == 0b11001100\nassert     set_middle_bits(0b11001100) == 0b11001100\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_middle_bits(12345) == 0\nassert     set_middle_bits(98877) == 1\nassert     set_middle_bits(1352) == 0\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(1) == 1, \"set_middle_bits: Wrong output\"\nassert     set_middle_bits(4) == 8, \"set_middle_bits: Wrong output\"\nassert     set_middle_bits(5) == 15, \"set_middle_bits: Wrong output\"\n\ndef set_middle_bits_another(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_middle_bits(0b1100) == 0b1100\nassert     set_middle_bits(0b1101) == 0b1100\nassert     set_middle_bits(0b1110) == 0b1100\nassert     set_middle_bits(0b1111) == 0b1100\nassert     set_middle_bits(0b0000) == 0b0000\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     left_insertion([1,2,3,4,5], 5) == 2\nassert     left_insertion([1,2,3,4,5], 6) == 3\nassert     left_insertion([1,2,3,4,5], 0) == 0\nassert     left_insertion([1,2,3,4,5], 1) == 1\nassert     left_insertion([1,2,3,4,5], 2) == 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_insertion([1,3,4,8,9,15], 5) == 3\nassert     left_insertion([1,3,4,8,9,15], 6) == 4\nassert     left_insertion([1,3,4,8,9,15], 11) == 5\nassert     left_insertion([1,3,4,8,9,15], 16) == 6\nassert     left_insertion([1,3,4,8,9,15], 18) == 7\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\na = sorted([\"f\", \"e\", \"d\", \"c\", \"b\", \"a\"])\nassert left_insertion(a, \"a\") == 0\nassert left_insertion(a, \"c\") == 3\nassert left_insertion(a, \"d\") == 3\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_insertion([1,3,4], 3) == 1\nassert     left_insertion([], 3) == -1\nassert     left_insertion([1,2,3,4], 3) == 2\nassert left_insertion([1,2,3,4], 4) == 4\nassert left_insertion([1,2,3,4], 5) == 5\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef bisect_left(a, x):\n    '''\n    Write a function to check if an element is in a sorted array using the bisect module.\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     left_insertion([1, 3, 5, 6], 3) == 2\nassert     left_insertion([1, 3, 5, 6], 2) == 1\nassert     left_insertion([1, 3, 5, 6], 0) == 0\nassert     left_insertion([1, 3, 5, 6], 7) == 4\nassert     left_insertion([1, 3, 5, 6], -1) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     left_insertion([1,2,3,4,5], 5) == 3\nassert     left_insertion([1,2,3,4,5], 5) == 3\nassert     left_insertion([1,2,3,4,5], 1) == 0\nassert     left_insertion([1,2,3,4,5], 0) == 0\nassert     left_insertion([1,2,3,4,5], 3) == 2\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_str('apple') == True\nassert     check_str('samsung') == True\nassert     check_str('hello') == False\nassert     check_str('hej') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    check_str('Welcome') == True\n    check_str('hey') == False\n    check_str('abcd') == False\n    check_str('abcde') == True\n\n\ndef check_str_2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) and string[0] in 'aeiou':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nstring = 'aCiD'\ncheck_str(string)\nprint(check_str(string)"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_str('apple') == True, 'passed apple'\nassert     check_str('av') == True, 'passed av'\nassert     check_str('apple$') == False, 'failed apple'\nassert     check_str('apple!') == False, 'failed apple'\nassert     check_str('I$') == False, 'failed I'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_str(\"\") == False\nassert check_str(\"AAaa\") == False\nassert check_str(\"Aa\") == True\nassert check_str(\"A\") == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_str_solution(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'aeiou'\n    if re.match('^[aeiouAEIOU][a-zA-Z0-9_]*', string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_str('mOaD') == False \nassert     check_str('MoD') == True \nassert     check_str('Moved') == True \nassert     check_str('moved') == True \nassert     check_str('Moved') == False \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncheck_str('aeioua') == True, 'Sample Test 1'\ncheck_str('aeiouaeiou') == False, 'Sample Test 2'\ncheck_str('aeiou1') == False, 'Sample Test 3'\ncheck_str('aeiou1') == False, 'Sample Test 4'\ncheck_str('aeioua') == False, 'Sample Test 5'\ncheck_str('aeiouae') == False, 'Sample Test 6'\ncheck_str('aeiou1') == False, 'Sample Test 7'\ncheck_str('aeioua') == False, 'Sample Test 8'\ncheck_str('aeiouae') == False, 'Sample Test 9'\ncheck_str('1aeiou1') == False, 'Sample Test 10'\ncheck_str('1aeiou') == False, 'Sample Test 11'\ncheck_str('aaaeiou') == False, 'Sample Test 12'\ncheck_str('aaeiouae') == False, 'Sample Test 13'\ncheck_str('aeioua') == True, 'Sample Test 14'\ncheck_str('aeiouaeiou') == True, 'Sample Test 15'\ncheck_str('aeiou') == False, 'Sample Test 16'\ncheck_str('aei') == False, 'Sample Test 17'\ncheck_str('aaaeiou') == False, 'Sample Test 18'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 19'\ncheck_str('aeiou') == False, 'Sample Test 20'\ncheck_str('aei') == False, 'Sample Test 21'\ncheck_str('aaaeiou') == False, 'Sample Test 22'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 23'\ncheck_str('aei') == False, 'Sample Test 24'\ncheck_str('aei') == False, 'Sample Test 25'\ncheck_str('aaaeiou') == False, 'Sample Test 26'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 27'\ncheck_str('aeiou') == False, 'Sample Test 28'\ncheck_str('aeiou') == False, 'Sample Test 29'\ncheck_str('aaaeiou') == False, 'Sample Test 30'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 31'\ncheck_str('aeiou') == False, 'Sample Test 32'\ncheck_str('aeiou') == False, 'Sample Test 33'\ncheck_str('aaaeiou') == False, 'Sample Test 34'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 35'\ncheck_str('aeiou') == False, 'Sample Test 36'\ncheck_str('aeiou') == False, 'Sample Test 37'\ncheck_str('aaaeiou') == False, 'Sample Test 38'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 39'\ncheck_str('aeiou') == False, 'Sample Test 40'\ncheck_str('aeiou') == False, 'Sample Test 41'\ncheck_str('aaaeiou') == False, 'Sample Test 42'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 43'\ncheck_str('aeiou') == False, 'Sample Test 44'\ncheck_str('aeiou') == False, 'Sample Test 45'\ncheck_str('aaaeiou') == False, 'Sample Test 46'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 47'\ncheck_str('aeiou') == False, 'Sample Test 48'\ncheck_str('aeiou') == False, 'Sample Test 49'\ncheck_str('aaaeiou') == False, 'Sample Test 50'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 51'\ncheck_str('aeiou') == False, 'Sample Test 52'\ncheck_str('aeiou') == False, 'Sample Test 53'\ncheck_str('aaaeiou') == False, 'Sample Test 54'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 55'\ncheck_str('aeiou') == False, 'Sample Test 56'\ncheck_str('aeiou') == False, 'Sample Test 57'\ncheck_str('aaaeiou') == False, 'Sample Test 58'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 59'\ncheck_str('aeiou') == False, 'Sample Test 60'\ncheck_str('aeiou') == False, 'Sample Test 61'\ncheck_str('aaaeiou') == False, 'Sample Test 62'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 63'\ncheck_str('aeiou') == False, 'Sample Test 64'\ncheck_str('aeiou') == False, 'Sample Test 65'\ncheck_str('aaaeiou') == False, 'Sample Test 66'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 67'\ncheck_str('aeiou') == False, 'Sample Test 68'\ncheck_str('aeiou') == False, 'Sample Test 69'\ncheck_str('aaaeiou') == False, 'Sample Test 70'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 71'\ncheck_str('aeiou') == False, 'Sample Test 72'\ncheck_str('aeiou') == False, 'Sample Test 73'\ncheck_str('aaaeiou') == False, 'Sample Test 74'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 75'\ncheck_str('aeiou') == False, 'Sample Test 76'\ncheck_str('aeiou') == False, 'Sample Test 77'\ncheck_str('aaaeiou') == False, 'Sample Test 78'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 79'\ncheck_str('aeiou') == False, 'Sample Test 80'\ncheck_str('aeiou') == False, 'Sample Test 81'\ncheck_str('aaaeiou') == False, 'Sample Test 82'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 83'\ncheck_str('aeiou') == False, 'Sample Test 84'\ncheck_str('aeiou') == False, 'Sample Test 85'\ncheck_str('aaaeiou') == False, 'Sample Test 86'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 87'\ncheck_str('aeiou') == False, 'Sample Test 88'\ncheck_str('aeiou') == False, 'Sample Test 89'\ncheck_str('aaaeiou') == False, 'Sample Test 90'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 91'\ncheck_str('aeiou') == False, 'Sample Test 92'\ncheck_str('aeiou') == False, 'Sample Test 93'\ncheck_str('aaaeiou') == False, 'Sample Test 94'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 95'\ncheck_str('aeiou') == False, 'Sample Test 96'\ncheck_str('aeiou') == False, 'Sample Test 97'\ncheck_str('aaaeiou') == False, 'Sample Test 98'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 99'\ncheck_str('aeiou') == False, 'Sample Test 100'\ncheck_str('aeiou') == False, 'Sample Test 101'\ncheck_str('aaaeiou') == False, 'Sample Test 102'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 103'\ncheck_str('aeiou') == False, 'Sample Test 104'\ncheck_str('aeiou') == False, 'Sample Test 105'\ncheck_str('aaaeiou') == False, 'Sample Test 106'\ncheck_str('aaeiouaeiou') == False, 'Sample Test 107'\ncheck_str('aeiou') == False, "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(2) == 5\nassert     geometric_sum(3) == 8\nassert     geometric_sum(4) == 14\nassert     geometric_sum(5) == 31\nassert     geometric_sum(6) == 63\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     geometric_sum(5) == (1 + 2 + 3 + 4 + 5) ** 0.5\nassert geometric_sum(10) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\nassert geometric_sum(12) == (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) ** 0.5\nassert geometric_sum(14) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert geometric_sum(5) == 4, \"Wrong result!\"\nprint(\"Correct result! \\n\")\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     geometric_sum(1) == 1.0\nassert     geometric_sum(2) == 2.0\nassert     geometric_sum(3) == 3.0\nassert     geometric_sum(5) == 5.0\nassert     geometric_sum(10) == 55.0\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     geometric_sum(1) == 0\nassert geometric_sum(2) == 1\nassert geometric_sum(3) == 2\nassert geometric_sum(4) == 3\nassert geometric_sum(5) == 5\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_Index(3) == 0\nassert find_Index(4) == 1\nassert find_Index(5) == 2\nassert find_Index(6) == 3\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Index(1) == 0 \nassert     find_Index(2) == 1 \nassert     find_Index(3) == 2 \nassert     find_Index(4) == 3 \nassert     find_Index(5) == 4 \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Index(10) == 9\nassert     find_Index(3) == 2\nassert     find_Index(12) == 10\nassert     find_Index(1) == 0\nassert     find_Index(4) == 3\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Index(2) == 0, 'First test case'\nassert    find_Index(3) == 1, 'Second test case'\nassert    find_Index(4) == 2, 'Third test case'\nassert    find_Index(5) == 3, 'Fourth test case'\nassert    find_Index(6) == 4, 'Fifth test case'\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Index(3) == 1, \"Should be 1\"\nassert     find_Index(4) == 1, \"Should be 1\"\nassert     find_Index(10) == 2, \"Should be 2\"\n\ndef swap_the_characters_of_list(list):\n    '''\n    Write a python function to swap the characters of a given list. \n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Index(2) == 1, 'test #1 is failed'\nassert     find_Index(3) == 2, 'test #2 is failed'\nassert     find_Index(4) == 3, 'test #3 is failed'\nassert     find_Index(5) == 4, 'test #4 is failed'\nassert     find_Index(6) == 5, 'test #5 is failed'\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Index(4) == 0, \"Failed\"\nassert     find_Index(5) == 1, \"Failed\"\nassert     find_Index(6) == 2, \"Failed\"\nassert     find_Index(7) == 3, \"Failed\"\nassert     find_Index(8) == 4, \"Failed\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Index(2) == 0\nassert     find_Index(3) == 1\nassert     find_Index(4) == 2\nassert     find_Index(5) == 3\nassert     find_Index(6) == 4\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         tuple_to_dict(('p','q','r','s')    ) ==    {'p':'q','q':'r','r':'s'}\nassert         tuple_to_dict(('p','q','r','s','t','u')) ==    {'p':'q','q':'r','r':'s','s':'t','t':'u'}\nassert         tuple_to_dict(('p','q','r','s','t','u','v')) ==    {'p':'q','q':'r','r':'s','s':'t','t':'u','u':'v'}\n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple of adjacent elements. https://www.geeksforgeeks.org/python-convert-dict-to-tuple-of-adjacent-elements/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5}\nassert     tuple_to_dict((2,3,4,5,6)) == {2:3,3:4,4:5,5:6}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (tuple_to_dict((0,1,2)) == {'0': 0, '1': 1, '2': 2}), \"Wrong output\"\nassert     (tuple_to_dict((3,4,5,6)) == {'3': 3, '4': 4, '5': 5, '6': 6}), \"Wrong output\"\nassert     (tuple_to_dict((7,8,9,10,11,12)) == {'7': 7, '8': 8, '9': 9, '10': 10, '11': 11, '12': 12}), \"Wrong output\"\nassert     (tuple_to_dict((13,14,15,16)) == {'13': 13, '14': 14, '15': 15, '16': 16}), \"Wrong output\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_dict(test_tup) == {'red': 3, 'blue': 2, 'green': 1}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict((1, 2, 3)) == {1: 2, 2: 3, 3: 1}\nassert     tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4, 4: 1}\nassert     tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 1}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6, 7)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 1}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 1}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_dict((1,2)) == {1:2, 2:1}\nassert     tuple_to_dict((2,3)) == {2:3, 3:2}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_dict([(1,2),(3,4),(5,6),(7,8)]) == {1:2, 3:4, 5:6, 7:8}\nassert     tuple_to_dict([(1,2),(3,4),(5,6),(7,8),(9,10)]) == {1:2, 3:4, 5:6, 7:8, 9:10}\nassert     tuple_to_dict((1,2,3,4,5)) == {1:2, 2:3, 3:4, 4:5}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}\nprint('Success: Your function converts the given tuple to a dictionary.')\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict((1,2)) == {1: 2, 2:1}\nassert     tuple_to_dict((2,3)) == {2: 3, 3:2}\nassert     tuple_to_dict((3,2)) == {3: 2, 2:3}\nassert     tuple_to_dict((3,3)) == {3: 3, 3:3}\nassert     tuple_to_dict((2,2)) == {2: 2, 2:2}\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same(\"abcabc\") == False\nassert     all_Characters_Same(\"abc\") == True\nassert     all_Characters_Same(\"a\") == True\nassert     all_Characters_Same(\"abc\") == False\nassert     all_Characters_Same(\"abcabc\") == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same(\"abc\") == True, \"abcd\"\nassert     all_Characters_Same(\"abc\") == False, \"abc\"\nassert     all_Characters_Same(\"\") == True, \"\"\nassert     all_Characters_Same(\"\") == True, \"\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('abcd') == True\nassert     all_Characters_Same('abcdef') == False\nassert     all_Characters_Same('abcdefghi') == True\nassert     all_Characters_Same('aabc') == False\nassert     all_Characters_Same('abc') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('a') == False\nassert     all_Characters_Same('a') == False\nassert     all_Characters_Same('abcd') == True\nassert     all_Characters_Same('abbab') == True\nassert     all_Characters_Same('abab') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Characters_Same(\"abcd\") == True, \"Should be True\"\nassert     all_Characters_Same(\"pqr\") == True, \"Should be True\"\nassert     all_Characters_Same(\"Abcd\") == False, \"Should be False\"\nassert     all_Characters_Same(\"pqrqr\") == False, \"Should be False\"\nassert     all_Characters_Same(\"\") == True, \"Should be True\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Characters_Same(s=[\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]) == True\nassert     all_Characters_Same(s=[\"a\",\"a\",\"b\",\"a\",\"a\"]) == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef all_Characters_Same_solution(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s)) and all(c == s[0] for c in s)"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same('hello') == True\nassert     all_Characters_Same('hell') == False\nassert     all_Characters_Same('Hello') == False\nassert     all_Characters_Same('') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same(\"abc\") == False, \"1st test\"\nassert     all_Characters_Same(\"abc\") == True, \"2nd test\"\nassert     all_Characters_Same(\"a\") == False, \"3rd test\"\nassert     all_Characters_Same(\"\") == False, \"4th test\"\nassert     all_Characters_Same(\"abcabc\") == False, \"5th test\"\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_tetrahedron([1, 2, 3, 4]) == 4\nassert area_tetrahedron([2, 2, 2, 2]) == 8\nassert area_tetrahedron([3, 3, 3, 3]) == 12\nassert area_tetrahedron([3, 3, 3, 3]) == 12\nassert area_tetrahedron([4, 4, 4, 4]) == 16\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_tetrahedron(3) == 6.0\nassert     area_tetrahedron(3.5) == 6.0\nassert     area_tetrahedron(4) == 8.0\n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(area_tetrahedron(1))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_tetrahedron(1) == 1.0\nassert     area_tetrahedron(4) == 4.0\nassert     area_tetrahedron(5) == 5.0\nassert     area_tetrahedron(9) == 9.0\nassert     area_tetrahedron(10) == 10.0\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \narea_tetrahedron(3) == 1.7320508075688772\n\n\ndef area_triangle(base, height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], -4) == [1, 2, 3, 4, 5]\nassert     rotate_right([1, 2, 3, 4], 2) == [3, 4, 1, 2]\nassert     rotate_right([1, 2, 3, 4, 5], -2) == [5, 1, 2, 3, 4]\nassert     rotate_right([1], 0) == [1]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5, 6, 7], 1) == [7, 1, 2, 3, 4, 5, 6]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7], 5) == [7, 1, 2, 3, 4, 5]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7], 4) == [7, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7], 3) == [7, 1, 2, 3]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7], 2) == [7, 1, 2]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rotate_right([1,2,3,4,5], 3) == [3,4,5,1,2]\nassert rotate_right([1,2,3,4,5], -3) == [5,1,2,3,4]\nassert rotate_right([1,2,3,4,5], 1) == [2,3,4,5,1]\n\n'''\nWrite a program that takes in the array of numbers (or array of integers) nums, \nand returns the sum of all the elements in the array nums.\nhttps://www.geeksforgeeks.org/sum-of-all-numbers-in-an-array/\n'''\ndef sum_all_elements(nums):\n    '''\n    Write a program that takes in the array of numbers (or array of integers) nums, \n    and returns the sum of all the elements in the array nums.\n    '''\n    pass"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\nassert     rotate_right([1, 2, 3, 4, 5], -1) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert     rotate_right([1, 2, 3, 4, 5], -2) == [4, 5, 1, 2, 3]\nassert     rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef rotate_list(list, m):\n    '''\n    Given an array of size n, rotate the array to the right by k places, where k is non-negative.\n    Input: l = [1, 2, 3], m = 2\n    Output: [3, 1, 2]\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5, 6, 7, 8], 4) == [4, 5, 6, 7, 8, 1, 2, 3]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7, 8], 7) == [8, 1, 2, 3, 4, 5, 6, 7]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7, 8], 1) == [2, 3, 4, 5, 6, 7, 8, 1]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7, 8], 3) == [8, 1, 2, 3, 4, 5, 6, 7]\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7, 8], 0) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [[3, 4, 5, 1, 2]]\nassert rotate_right([1, 2, 3, 4, 5], 2) == [[4, 5, 1, 2, 3]]\nassert rotate_right([1, 2, 3, 4, 5], 4) == [[5, 1, 2, 3, 4]]\nassert rotate_right([1, 2, 3, 4, 5], 5) == [[2, 3, 4, 5, 1]]\nassert rotate_right([1, 2, 3, 4, 5], 6) == [[3, 4, 5, 1, 2]]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rotate_right([1,2,3,4], 2) == [3,4,1,2]\nassert     rotate_right([1,2,3,4,5,6,7,8], 3) == [5,6,7,1,2,3,4,8]\nassert     rotate_right([1,2,3,4,5,6,7,8], 0) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rotate_right([1,2,3], 1) == [2,3,1]\nassert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert     rotate_right([1,2,3,4,5,6], 3) == [4,5,6,1,2,3]\nassert     rotate_right([1,2,3,4,5,6,7], 4) == [5,6,7,1,2,3,4]\nassert     rotate_right([1,2,3,4,5,6,7,8], 5) == [6,7,8,1,2,3,4,5]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((1,2,None,3)) == True\nassert     check_none((1,2,3,None)) == True\nassert     check_none((1,2,None,None)) == False\nassert     check_none((1,2,None,3,None)) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_none((1, None, \"1\")) == True, \"The tuple should have 1 and None\"\nassert     check_none((1, None, \"2\")) == False, \"The tuple should not have 2 and None\"\nassert     check_none((None, None, None)) == False, \"The tuple should not have None and None\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none((1, 2, None, 3))    ==     False, \"Wrong!\"\nassert     check_none((1, 2, None))    ==     True, \"Wrong!\"\nassert     check_none((1, None, 3))    ==     False, \"Wrong!\"\nassert     check_none((None,))    ==     True, \"Wrong!\"\nassert     check_none((None, None))    ==     True, \"Wrong!\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none(test_tup) == False, 'Wrong Output'\nassert     check_none(()) == True, 'Wrong Output'\nassert     check_none((1,2,3)) == False, 'Wrong Output'\nassert     check_none((1,2,3,None)) == True, 'Wrong Output'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none((1,2)) == False\nassert     check_none((1,2,None,4)) == True\nassert     check_none((None,None,None,None,2,3)) == True\nassert     check_none((1,2,3,4)) == True\nassert     check_none(('a','b','c','d')) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_all(test_tup):\n    '''\n    Write a function to check if the given tuple contains only \n    values or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none([1,2,3,4,5]) == True, \"List should have no none value\"\nassert     check_none((1,2,3,4,5)) == True, \"Tuple should have no none value\"\nassert     check_none({1:1, 2:2, 3:3}) == False, \"Dict should not have any none value\"\nassert     check_none({1:1, 2:2, 3:3, 4:4, 5:5}) == False, \"Dict should not have any none value\"\nassert     check_none(\"helloworld\") == False, \"String should not have any none value\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none((\"Rahul\", \"Raj\", \"Gupta\", None))     == True\nassert     check_none((\"Rahul\", \"Raj\", \"Gupta\", \"Raghava\"))     == False\nassert     check_none((\"Rahul\", \"Raj\", None, \"Raghava\"))     == False\nassert     check_none((\"Rahul\", None, \"Raj\", \"Raghava\"))     == False\nassert     check_none(None)     == True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"Pass\" if not (divisible_by_digits(0, 0) == []) else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(0, 9) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(0, 5) == [] else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(9, 9) == [] else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(10, 10) == [10] else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(100, 100) == [100] else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(9, 9) == [9] else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(9, 4) == [9] else \"Fail\")\nprint(\"Pass\" if \ndivisible_by_digits(0, 8) == [0, 1, 2, 3, 4, 5, 6, 7, 8] else \"Fail\")\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndivisible_by_digits(startnum=1, endnum=10000) == [i for i in range(1,10001) if not sum(int(c) for c in str(i)) % i]\nprint(\"check the correctness of divisible_by_digits\")\n\ndef add_spaces(str_):\n    return str_.replace(\" \", \" \")\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndivisible_by_digits(0, 101) == []\nassert divisible_by_digits(0, 1) == []\nassert divisible_by_digits(1, 0) == []\nassert divisible_by_digits(1, 101) == [1]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(1, 9) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     divisible_by_digits(12, 31) == ['12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\nassert     divisible_by_digits(5, 7) == ['5', '6', '7']\nassert     divisible_by_digits(1, 10) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     divisible_by_digits(12, 34) == ['12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34']\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndivisible_by_digits(123456789, 123456789) == True, 'The expected result is True. The actual result is False.'\nassert \ndivisible_by_digits(1234, 123456789) == True, 'The expected result is True. The actual result is False.'\nassert \ndivisible_by_digits(0, 123456789) == True, 'The expected result is True. The actual result is False.'\nassert \ndivisible_by_digits(1234567890, 123456789) == False, 'The expected result is False. The actual result is True.'\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(100, 600) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '510', '511', '512', '513', '514', '515', '516', '517', '518', '519', '520', '521', '522', '523', '524', '525', '526', '527', '528', '529', '530', '531', '532', '533', '534', '535', '536', '537', '538', '539', '540', '541', '542', '543', '544', '545', '546', '547', '548', '549', '550', '551', '552', '553', '554', '555', '556', '557', '558', '559', '560', '561', '562', '563', '564', '565', '566', '567', '568', '569', '570', '571', '572', '573', '574', '575', '576', '577', '578', '579', '580', '581', '582', '583', '584', '585', '586', '587', '588', '589', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '600', '601', '602', '603', '604', '605', '606', '607', '608', '609', '610', '611', '612', '613', '614', '615', '616', '617', '618', '619', '620', '621', '622', '623', '624', '625', '626', '627', '628', '629', '630', '631', '632', '633', '634', '635', '636', "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(10, 20, True) == True\nassert     divisible_by_digits(10, 20, False) == False\nassert     divisible_by_digits(11, 21, True) == False\nassert     divisible_by_digits(11, 21, False) == False\nassert     divisible_by_digits(17, 20, True) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisible_by_digits(10,30) == [10,20,30], \"Fail\"\nassert     divisible_by_digits(5,10) == [5,10], \"Fail\"\nassert     divisible_by_digits(5,100) == [5,10,20,30,40,50,60,70,80,90], \"Fail\"\nassert     divisible_by_digits(1,10) == [1], \"Fail\""
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisible_by_digits(1, 10) == True\nassert     divisible_by_digits(1, 11) == False\nassert     divisible_by_digits(1, 12) == False\nassert     divisible_by_digits(1, 13) == False\nassert     divisible_by_digits(1, 14) == False\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(0.1,90) == (0.1*math.pi)\nassert sector_area(0.1,360) == None\nassert sector_area(0.1,-90) == None\nassert sector_area(0.1,-360) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint sector_area(10,360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sector_area(10,30) == 9.0\nassert     sector_area(10,360) == None\nassert     sector_area(10,360.1) == None\nassert     sector_area(10,0) == None\nassert     sector_area(0,0) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sector_area(3,0) == 3\nassert sector_area(3,math.pi/2) == 3\nassert sector_area(3,1) == 3\nassert sector_area(3,math.pi) == 6\nassert sector_area(3,math.pi*3/4) == 6\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sector_area(1, 0) == None\nassert     sector_area(1, 1) == 0\nassert     sector_area(2, math.pi/3) == math.pi*1/3\nassert     sector_area(2, 1) == math.pi\nassert     sector_area(3, math.pi/3) == math.pi/2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sector_area(3,90) == 3 * math.pi * 3/2, \"incorrect sector area\"\nassert sector_area(2,90) == None, \"incorrect sector area\"\nassert sector_area(5,180) == None, \"incorrect sector area\"\n\ndef circumcircle_area(a,b,c):\n    '''\n    Write a function to find area of a circumcircle. The function takes the three vertices of a triangle as inputs. Function should return None if the input vertices are not in a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sector_area(1,0) == None\nassert sector_area(1,5) == 1.5*math.pi\nassert sector_area(1,360) == None\nassert sector_area(2,20) == 1.5*math.pi\nassert sector_area(3,360) == 2*math.pi\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_sector_area():\n    assert sector_area(10,0) == None, \"There is nothing to see here, go away!\"\n    assert sector_area(10,30) == 8.54, \"area = 8.54\"\n    assert sector_area(10,60) == 10.11, \"area = 10.11\"\n    "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lcs_of_four(X, Y, Z, w): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"CDGHJA\") == \"AEDFHR\"\nassert     lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"CDEFGA\") == \"\"\nassert     lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"CDEFGH\") == \"AEDFHR\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ABCDEFGHI\") == \"ABCDEFGHI\", \"This is wrong\"\nassert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AEDFHR\") == \"AEDFHR\", \"This is wrong\"\nassert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AEDFHR\") == \"AEDFHR\", \"This is wrong\"\nassert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ABCDEFGHI\") == \"ABCDEFGHI\", \"This is wrong\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('passed lcs_of_three test')"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lcs_of_three(\"ABCDGH\", \"ACEFGHI\", \"KDGHIJ\") == 2\nassert     lcs_of_three(\"ABCDGH\", \"ABCDEFG\", \"ACEFHIJ\") == 4\nassert     lcs_of_three(\"ABCDGH\", \"ABCDEFG\", \"ABCDEFGH\") == 3\nassert     lcs_of_three(\"ABCDGH\", \"ABCDEFG\", \"ABCDGH\") == 4\n\n'''\nhttps://www.geeksforgeeks.org/longest-common-subsequence-dp-29/\nhttps://www.youtube.com/watch?v=17-8Qpob7V4\nhttps://www.youtube.com/watch?v=0jg1XgxCvYg\n'''\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lcs_of_three('ABCDGH', 'AEDFHR', 'XYZ') == 'EDFHR'\nassert     lcs_of_three('ABCDGH', 'AEDFHR', 'ABCD') == 'ABCD'\nassert     lcs_of_three('ABCDGH', 'AEDFHR', 'ABCG') == 'ABCG'\nassert     lcs_of_three('ABCDGH', 'AEDFHR', 'ABCDGH') == 'ABCDGH'\nassert     lcs_of_three('ABCDGH', 'ABCDGH', 'ABCD') == 'ABCD'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lcs_of_three('abc','def','abc') == 'c'\nassert     lcs_of_three('abc','def','abcdef') == 'c'\nassert     lcs_of_three('ab','a','ab') == 'a'\nassert     lcs_of_three('ab','a','abef') == 'a'\nassert     lcs_of_three('ab','a','abefgh') == 'a'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lcs_of_three(\"ABCDGH\", \"ACEFGHA\", \"ABCDEFGHI\") == \"ACFG\"\nassert     lcs_of_three(\"ABCDGH\", \"ABCDGEE\", \"ABCDEFGHI\") == \"\"\nassert     lcs_of_three(\"ABCDGH\", \"ABCDGH\", \"ABCDGH\") == \"ABCDGH\"\nassert     lcs_of_three(\"ABCDGH\", \"ABCDGH\", \"ABCDGH\") == \"ABCDGH\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    lcs_of_three('abc','def','abcdef') == 3\n    lcs_of_three('abc','def','abdef') == 2\n    lcs_of_three('abc','def','abcdefa') == 2\n    lcs_of_three('abc','def','a') == 1\n    lcs_of_three('abc','a','abc') == 1\n    lcs_of_three('abc','a','def') == 0\n    lcs_of_three('abc','def','abc') == 3\n    lcs_of_three('abc','def','a') == 1\n    lcs_of_three('abc','a','abc') == 2\n    lcs_of_three('abc','a','def') == 1\n    lcs_of_three('abc','def','a') == 1\n    lcs_of_three('abc','def','abc') == 3\n    lcs_of_three('abc','abc','abc') == 3\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','def','abc') == 1\n    lcs_of_three('abc','def','def') == 2\n    lcs_of_three('abc','def','abc') == 2\n    lcs_of_three('abc','def','def') == 1\n    lcs_of_three('abc','def','def') == 1\n    lcs_of_three('abc','abc','abc') == 3\n    lcs_of_three('abc','abc','def') == 2\n    lcs_of_three('abc','def','abc') == 2\n    lcs_of_three('abc','def','def') == 2\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n    lcs_of_three('abc','abc','def') == 1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert capital_words_spaces(\"How are you?\") == \"How are you ?\"\nassert capital_words_spaces(\"why do you do this\") == \"why do you do this ?\"\nassert capital_words_spaces(\"Happy Birthday!\") == \"Happy Birthday !\"\nassert capital_words_spaces(\"What a wonderful life!\") == \"What a wonderful life !\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncapital_words_spaces('A brief summary of the summary') == 'A brief summary of the summary  '\nassert \ncapital_words_spaces('A brief summary of the summary') == 'A brief summary of the summary  '\nassert \ncapital_words_spaces('A brief summary of the summary  of a brief summary') == 'A brief summary of the summary  of a brief summary  of a brief summary'\nassert \ncapital_words_spaces('A brief summary  of the summary  of a brief summary') == 'A brief summary  of the summary  of a brief summary  of a brief summary'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     capital_words_spaces('I love Python') == 'I love Python'\nassert     capital_words_spaces('I love Python    ') == 'I love Python'\nassert     capital_words_spaces('I love Python ') == 'I love Python'\nassert     capital_words_spaces('I love Python and PHP') == 'I love PHP and Python'\nassert     capital_words_spaces('I love PHP and Python') == 'I love PHP and Python'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     capital_words_spaces('PYTHON') == 'PYTHON'\nassert     capital_words_spaces('pyThOn') == 'pyThOn'\nassert     capital_words_spaces('Python') == 'Python'\nassert     capital_words_spaces('PyTHON') == 'PyTHON'\nassert     capital_words_spaces('PythOn') == 'PythOn'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces('i love Python') == 'I love Python'\nassert     capital_words_spaces('Python is very easy') == 'Python is very easy'\nassert     capital_words_spaces('I love python') == 'I love Python'\nprint('Capital words spaces: All tests passed!')\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     capital_words_spaces('This Is First')    == \"This Is First\"\nassert     capital_words_spaces('This Is First')    == \"This Is First\"\nassert     capital_words_spaces('This Is First   ')    == \"This Is First   \"\nassert     capital_words_spaces('This Is First   ')    == \"This Is First   \"\nassert     capital_words_spaces('This Is First\\n')    == \"This Is First\\n\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     capital_words_spaces('Some words') == 'Some words'\nassert capital_words_spaces('some words') == 'Some words'\nassert capital_words_spaces('some words ') == 'Some words '\nassert capital_words_spaces('some words') == 'Some words'\nassert capital_words_spaces('some words    ') == 'Some words'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     capital_words_spaces('The capital letters are here') == 'The  capital letters are here', 'First test failed'\nassert     capital_words_spaces('This is a word with no spaces') == 'This is a word with no spaces', 'Second test failed'\nassert     capital_words_spaces('    this is a word with no spaces') == 'This is a word with no spaces', 'Third test failed'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     capital_words_spaces('How can we help you?') == 'How can we help you?', 'Should capitalize words starting with capital letters'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nstr1=\"I have a dream\"\n\nassert capital_words_spaces(str1) == \"I H A V E D\"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numeric_strings([\"2\",\"3\",\"5\",\"1\"]) ==     [\"1\",\"1\",\"3\",\"2\"]\nassert     sort_numeric_strings([\"3\",\"5\",\"1\"]) ==     [\"1\",\"1\",\"3\",\"5\"]\nassert     sort_numeric_strings([\"3\",\"5\",\"1\",\"2\"]) ==     [\"1\",\"1\",\"2\",\"3\",\"5\"]\n\ndef sort_alpha_strings(lst):\n    '''\n    Write a function to sort a given list of strings in alphabetic order. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings(['3', '32', '4', '123', '64', '1']) == ['1', '123', '4', '64', '32', '3']\nassert     sort_numeric_strings(['23', '12', '4', '1', '123', '4', '64', '32', '3']) == ['1', '23', '4', '12', '4', '3', '64', '32', '123']\n\ndef sort_words(words_str):\n    '''\n    Write a function to sort a given list of words alphabetically. https://www.geeksforgeeks.org/python-sort-words-alphabetically-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numeric_strings([\"15\", \"2\", \"3\", \"5\"]) == sorted([\"15\", \"2\", \"3\", \"5\"])\nassert     sort_numeric_strings([\"15\", \"5\", \"2\", \"3\"]) == sorted([\"15\", \"5\", \"2\", \"3\"])\nassert     sort_numeric_strings([\"2\", \"2\", \"3\", \"5\"]) == sorted([\"2\", \"2\", \"3\", \"5\"])\nassert     sort_numeric_strings([\"2\", \"2\", \"2\", \"2\"]) == sorted([\"2\", \"2\", \"2\", \"2\"])\nassert     sort_numeric_strings([\"2\", \"3\", \"2\", \"2\"]) == sorted([\"2\", \"3\", \"2\", \"2\"])\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numeric_strings(['2', '10', '3']) == ['3', '2', '10'], 'Wrong answer'\n\ndef sort_numeric_strings2(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. The numbers can be of any length. You just need to sort them numerically. No need to worry about case.\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numeric_strings(['1','2','3','4']) == ['1','2','3','4'], \"returns incorrect data\"\n\nassert     sort_numeric_strings(['1','2','3','4','5']) == ['1','2','3','4','5'], \"returns incorrect data\"\n\nassert     sort_numeric_strings(['1','1','1','1','1']) == ['1','1','1','1','1'], \"returns incorrect data\"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numeric_strings(['2', '3', '4', '2']) == ['2', '2', '3', '4']\nassert     sort_numeric_strings(['0', '7', '1', '8', '3', '5']) == ['0', '1', '3', '5', '7', '8']\nassert sort_numeric_strings(['0', '3', '0', '6']) == ['0', '0', '3', '6']\nassert sort_numeric_strings(['0', '1', '2', '4']) == ['0', '1', '2', '4']\nassert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sort_numeric_strings2(nums_str):\n    '''\n    Write a Python program to sort a given string alphabetically.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ntest_list = [1,2,3]\ntest_tup = (4,5,6)\nadd_tuple(test_list, test_tup)\nassert (test_list == [1,2,3,4,5,6])\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nadd_tuple([1, 2, 3], (10, 20, 30)) == [1, 2, 3, 10, 20, 30]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_tuple([1,2,3,4], (1,2,3,4)) == None, \"Tuple and List is not equal. Failing\"\nassert     add_tuple([1,2,3,4], (1,2)) == None, \"Two tuples are of same length. Failing\"\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    '''\n    Run the test case.\n    '''\n    l = [1, 2, 3]\n    assert(add_tuple(l, (2, 3, 4))) == (1, 2, 3, 4)\n    print(\"Correct\")"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nadd_tuple([], ()) == ()\nadd_tuple([3], (1, 2, 3)) == (3, 1, 2, 3)\nadd_tuple([3], (1, 2, 3, 4)) == (3, 1, 2, 3, 4)"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    add_tuple([1, 2, 3], (2, 4, 5)) == [1, 2, 3, 2, 4, 5]\n    add_tuple([1, 2, 3], (2, 4, 6)) == [1, 2, 3, 2, 4, 6]\n    add_tuple([], (2, 4, 5)) == []\n    add_tuple([1, 2, 3], ()) == []\n    add_tuple([1, 2, 3], ((2, 4, 5), (6, 8, 9))) == [(2, 4, 5), (6, 8, 9)]\n    add_tuple([(2, 4, 5), (6, 8, 9)], (2, 4, 5)) == [2, 4, 5, 2, 4, 5]\n    add_tuple([(2, 4, 5), (6, 8, 9)], (2, 4, 6)) == [2, 4, 5, 2, 4, 6]\n    add_tuple([], (2, 4, 6)) == []\n    add_tuple([1, 2, 3], (2, 4, 6)) == [1, 2, 3, 2, 4, 6]\n    add_tuple([1, 2, 3], ((2, 4, 6), (6, 8, 9))) == [(2, 4, 6), (6, 8, 9)]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_tuple([1, 2], (3, 4)) == [1, 2, 3, 4],'should be [1, 2, 3, 4]'\nassert     add_tuple([], (3, 4)) == [3, 4],'should be [3, 4]'\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_min_heap_helper([1, 2, 3], 0) == True\nassert     check_min_heap_helper([1, 2, 3], 1) == False\nassert     check_min_heap_helper([1, 2, 3], 2) == True\nassert     check_min_heap_helper([1, 2, 3], 3) == False\nassert     check_min_heap_helper([], 0) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_min_heap_helper([5, 4, 3, 2, 1], True)\nassert     check_min_heap_helper([5, 4, 3, 2, 1], False)\nassert     check_min_heap_helper([1, 2, 3, 4, 5], True)\nassert     check_min_heap_helper([1, 2, 3, 4, 5], False)\nassert     check_min_heap_helper([1, 2, 3, 4, 5], True)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_min_heap_helper([], 0) == True\nassert     check_min_heap_helper([0], 0) == True\nassert     check_min_heap_helper([1], 0) == True\nassert     check_min_heap_helper([2, 1], 0) == True\nassert     check_min_heap_helper([3, 2, 1], 0) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_min_heap_helper([3, 4, 1, 2, 5], 0) == True, \"Should return True\"\nassert     check_min_heap_helper([4, 5, 1, 2, 3], 0) == True, \"Should return True\"\nassert     check_min_heap_helper([1, 2, 3, 4, 5], 0) == True, \"Should return True\"\nassert     check_min_heap_helper([4, 2, 1, 3, 5], 0) == False, \"Should return False\"\nassert     check_min_heap_helper([1, 2, 3, 4, 5], 0) == False, \"Should return False\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_min_heap_helper([1, 5, 8, 0, 13], True) == True, \"Should be True\"\nassert     check_min_heap_helper([1, 5, 8, 0, 13], False) == False, \"Should be False\"\nassert     check_min_heap_helper([1, 5, 5, 13, 13], True) == False, \"Should be False\"\nassert     check_min_heap_helper([], True) == False, \"Should be False\"\nassert     check_min_heap_helper([], False) == True, \"Should be True\""
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    jacobsthal_num(0) == 0\n    jacobsthal_num(1) == 1\n    jacobsthal_num(2) == 1\n    jacobsthal_num(3) == 3\n    jacobsthal_num(4) == 5\n    jacobsthal_num(5) == 11\n    jacobsthal_num(6) == 21\n    jacobsthal_num(7) == 43\n    jacobsthal_num(8) == 85\n    jacobsthal_num(9) == 171\n    jacobsthal_num(10) == 341\n    jacobsthal_num(11) == 683\n    jacobsthal_num(12) == 1365\n    jacobsthal_num(13) == 2731\n    jacobsthal_num(14) == 6751\n    jacobsthal_num(15) == 3275\n    jacobsthal_num(16) == 7083\n    jacobsthal_num(17) == 71865\n    jacobsthal_num(18) == 72925\n    jacobsthal_num(19) == 73943\n    jacobsthal_num(20) == 74637\n    jacobsthal_num(21) == 75129\n    jacobsthal_num(22) == 75537\n    jacobsthal_num(23) == 75941\n    jacobsthal_num(24) == 76753\n    jacobsthal_num(25) == 76963\n    jacobsthal_num(26) == 77015\n    jacobsthal_num(27) == 77281\n    jacobsthal_num(28) == 77445\n    jacobsthal_num(29) == 77762\n    jacobsthal_num(30) == 77969\n    jacobsthal_num(31) == 78144\n    jacobsthal_num(32) == 78331\n    jacobsthal_num(33) == 78655\n    jacobsthal_num(34) == 79090\n    jacobsthal_num(35) == 79305\n    jacobsthal_num(36) == 79607\n    jacobsthal_num(37) == 80010\n    jacobsthal_num(38) == 80120\n    jacobsthal_num(39) == 80339\n    jacobsthal_num(40) == 80560\n    jacobsthal_num(41) == 80994\n    jacobsthal_num(42) == 81093\n    jacobsthal_num(43) == 81285\n    jacobsthal_num(44) == 81487\n    jacobsthal_num(45) == 81779\n    jacobsthal_num(46) == 81893\n    jacobsthal_num(47) == 82030\n    jacobsthal_num(48) == 82223\n    jacobsthal_num(49) == 82250\n    jacobsthal_num(50) == 82374\n    jacobsthal_num(51) == 82425\n    jacobsthal_num(52) == 82548\n    jacobsthal_num(53) == 82695\n    jacobsthal_num(54) == 82912\n    jacobsthal_num(55) == 82941\n    jacobsthal_num(56) == 83081\n    jacobsthal_num(57) == 83238\n    jacobsthal_num(58) == 83414\n    jacobsthal_num(59) == 83483\n    jacobsthal_num(60) == 83586\n    jacobsthal_num(61) == 83681\n    jacobsthal_num(62) == 83821\n    jacobsthal_num(63) == 83962\n    jacobsthal_num(64) == 84119\n    jacobsthal_num(65) == 84240\n    jacobsthal_num(66) == 84273\n    jacobsthal_num(67) == 84283\n    jacobsthal_num(68) == 84304\n    jacobsthal_num(69) == 84315\n    jacobsthal_num(70) == 84432\n    jacobsthal_num(71) == 84541\n    jacobsthal_num(72) == 84730\n    jacobsthal_num(73) == 84948\n    jacobsthal_num(74) == 85136\n    jacobsthal_num(75) == 85346\n    jacobsthal_num(76) == 85511\n    jacobsthal_num(77) == 85680\n    jacobsthal_num(78) == 85797\n    jacobsthal_num(79) == 85836\n    jacobsthal_num(80) == 85974\n    jacobsthal_num(81) == 86151\n    jacobsthal_num(82) == 86278\n    jacobsthal_num(83) == 86418\n    jacobsthal_num(84) == 86492\n    jacobsthal_num(85) == 86599\n    jacobsthal_num(86) == 86850\n    jacobsthal_num(87) == 86950\n    jacobsthal_num(88) == 87145\n    jacobsthal_num(89) == 87331\n    jacobsthal_num(90) == 87658\n    jacobsthal_num(91) == 87742\n    jacobsthal_num(92) == 87875\n    jacobsthal_num(93) == 87923\n    jacobsthal_num(94) == 88041\n    jacobsthal_num(95) == 88177\n    jacobsthal_num(96) == 88348\n    jacobsthal_num(97) == 88589\n    jacobsthal_num(98) == 88881\n    jacobsthal_num(99) == 89017\n    jacobsthal_num(100) == 89296\n    jacobsthal_num(101) == 89571\n    jacobsthal_num(102) == 90733\n    jacobsthal_num(103) == 90804\n    jacobsthal_num(104) == 91115\n    jacobsthal_num(105) == 91327\n    jacobsthal_num(106) == 91544\n    jacobsthal_num(107) == 91705\n    jacobsthal_num(108) == 91854\n    jacobsthal_num(109) == 91938\n    jacobsthal_num(110) == 92026\n    jacobsthal_num(111) == 92273\n    jacobsthal_num(112) == 92432\n    jacobsthal_num(113) == 92611\n    jacobsthal_num(114) == 92900\n    jacobsthal_num(115) == 93108\n    jacobsthal_num(116) == 93337\n    jacobsthal_num(117) == 93565\n    jacobsthal_num(118) == 93739\n    jacobsthal_num(119) == 93909\n    jacobsthal_num(120) == 94152\n    jacobsthal_num(121) == 94342\n    jacobsthal_num(122) == 94387\n    jacobsthal_num(123) == 94464\n    jacobsthal_num(124) == 94529\n    jacobsthal_num(125) == 94788\n    jacobsthal_num(126) == 95063\n    jacobsthal_num(127) == 95250\n    jacobsthal_num(128) == 95355\n    jacobsthal_num(129) == 95507\n    jacobsthal_num(130) == 95653\n    jacobsthal_num(131) == 95721\n    jacobsthal_num(132) == 95895\n    jaco"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(10) == 11\nassert jacobsthal_num(11) == 21\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert jacobsthal_num(0) == 1\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(3) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef jacobsthal_num2(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # step 1\n    s1 = (1 + (1+3) * 2) / 7\n    s2 = (1 + (1+3) * 2) / 7\n    s3 = (1 + (1+5) * 2) / 7\n    s4 = (1 + (1+5) * 2) / 7\n    s5 = (1 + (1+3) * 2) / 7\n    s6 = (1 + (1+3) * 2) / 7\n    s7 = (1 + (1+5) * 2) / 7\n    s8 = (1 + (1+5) * 2) / 7\n    s9 = (1 + (1+3) * 2) / 7\n    s10 = (1 + (1+3) * 2) / 7\n    s11 = (1 + (1+5) * 2) / 7\n    s12 = (1 + (1+5) * 2) / 7\n    s13 = (1 + (1+3) * 2) / 7\n    s14 = (1 + (1+3) * 2) / 7\n    s15 = (1 + (1+5) * 2) / 7\n    s16 = (1 + (1+5) * 2) / 7\n    s17 = (1 + (1+3) * 2) / 7\n    s18 = (1 + (1+3) * 2) / 7\n    s19 = (1 + (1+5) * 2) / 7\n    s20 = (1 + (1+5) * 2) / 7\n    s21 = (1 + (1+3) * 2) / 7\n    s22 = (1 + (1+3) * 2) / 7\n    s23 = (1 + (1+5) * 2) / 7\n    s24 = (1 + (1+5) * 2) / 7\n    s25 = (1 + (1+3) * 2) / 7\n    s26 = (1 + (1+3) * 2) / 7\n    s27 = (1 + (1+5) * 2) / 7\n    s28 = (1 + (1+5) * 2) / 7\n    s29 = (1 + (1+3) * 2) / 7\n    s30 = (1 + (1+3) * 2) / 7\n    s31 = (1 + (1+5) * 2) / 7\n    s32 = (1 + (1+5) * 2) / 7\n    s33 = (1 + (1+3) * 2) / 7\n    s34 = (1 + (1+3) * 2) / 7\n    s35 = (1 + (1+5) * 2) / 7\n    s36 = (1 + (1+5) * 2) / 7\n    s37 = (1 + (1+3) * 2) / 7\n    s38 = (1 + (1+3) * 2) / 7\n    s39 = (1 + (1+5) * 2) / 7\n    s40 = (1 + (1+5) * 2) / 7\n    s41 = (1 + (1+3) * 2) / 7\n    s42 = (1 + (1+3) * 2) / 7\n    s43 = (1 + (1+5) * 2) / 7\n    s44 = (1 + (1+5) * 2) / 7\n    s45 = (1 + (1+3) * 2) / 7\n    s46 = (1 + (1+3) * 2) / 7\n    s47 = (1 + (1+5) * 2) / 7\n    s48 = (1 + (1+5) * 2) / 7\n    s49 = (1 + (1+3) * 2) / 7\n    s50 = (1 + (1+3) * 2) / 7\n    s51 = (1 + (1+5) * 2) / 7\n    s52 = (1 + (1+5) * 2) / 7\n    s53 = (1 + (1+3) * 2) / 7\n    s54 = (1 + (1+3) * 2) / 7\n    s55 = (1 + (1+5) * 2) / 7\n    s56 = (1 + (1+5) * 2) / 7\n    s57 = (1 + (1+3) * 2) / 7\n    s58 = (1 + (1+3) * 2) / 7\n    s59 = (1 + (1+5) * 2) / 7\n    s60 = (1 + (1+5) * 2) / 7\n    s61 = (1 + (1+3) * 2) / 7\n    s62 = (1 + (1+3) * 2) / 7\n    s63 = (1 + (1+5) * 2) / 7\n    s64 = (1 + (1+5) * 2) / 7\n    s65 = (1 + (1+3) * 2) / 7\n    s66 = (1 + (1+3) * 2) / 7\n    s67 = (1 + (1+5) * 2) / 7\n    s68 = (1 + (1+5) * 2) / 7\n    s69 = (1 + (1+3) * 2) / 7\n    s70 = (1 + (1+3) * 2) / 7\n    s71 = (1 + (1+5) * 2) / 7\n    s72 = (1 + (1+5) * 2) / 7\n    s73 = (1 + (1+3) * 2) / 7\n    s74 = (1 + (1+3) * 2) / 7\n    s75 = (1 + (1+5) * 2) / 7\n    s76 = (1 + (1+5) * 2) / 7\n    s77 = (1 + (1+3) * 2) / 7\n    s78 = (1 + (1+3) * 2) / 7\n    s79 = (1 + (1+5) * 2) / 7\n    s80 = (1 + (1+5) * 2) / 7\n    s81 = (1 + (1+3) * 2) / 7\n    s82 = (1 + (1+3) * 2) / 7\n    s83 = (1 + (1+5) * 2) / 7\n    s84 = (1 + (1+5) * 2) / 7\n    s85 = (1 + (1+3) * 2) / 7\n    s86 = (1 + (1+3) * 2) / 7\n    s87 = (1 + (1+5) * 2) / 7\n    s88 = (1 + (1+5) * 2) / 7\n    s89 = (1 + (1+3) * 2) / 7\n    s90 = (1 + (1+3) * 2) / 7\n    s91 = (1 + (1+5) * 2) / 7\n    s92 = (1 + (1+5) * 2) / 7\n    s93 = (1 + (1+3) * 2) / 7\n    s94 = (1 + (1+3) * 2) / 7\n    s95 = (1 + (1+5) * 2) / 7\n    s96 = (1 + (1+5) * 2) / 7\n    s97 = (1 + (1+3) * 2) / 7\n    s98 = (1 + (1+3) * 2) / 7\n    s99 = (1 + (1+5) * 2) / 7\n    s100 = (1 + (1+5) * 2) / 7\n    s101 = (1 + (1+3) * 2) / 7\n    s10"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(3) == 1\nassert jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(3) == 2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    jacobsthal_num(0) == 0\n    jacobsthal_num(1) == 1\n    jacobsthal_num(2) == 1\n    jacobsthal_num(3) == 2\n    jacobsthal_num(4) == 5\n    jacobsthal_num(5) == 11\n    jacobsthal_num(6) == 21\n    jacobsthal_num(7) == 43\n    jacobsthal_num(8) == 85\n    jacobsthal_num(9) == 171\n    jacobsthal_num(10) == 341\n    jacobsthal_num(11) == 683\n    jacobsthal_num(12) == 1365\n    jacobsthal_num(13) == 2731\n    jacobsthal_num(14) == 6863526\n    jacobsthal_num(15) == 153098951\n    jacobsthal_num(16) == 239871107\n    jacobsthal_num(17) == 359949715\n    jacobsthal_num(18) == 486366197\n    jacobsthal_num(19) == 693404239\n    jacobsthal_num(20) == 1340202871\n    jacobsthal_num(21) == 3021285147\n    jacobsthal_num(22) == 720575940\n    jacobsthal_num(23) == 156115259\n    jacobsthal_num(24) == 281474976710656\n    jacobsthal_num(25) == 617108943\n    jacobsthal_num(26) == 121645100408832\n    jacobsthal_num(27) == 335894334711368\n    jacobsthal_num(28) == 1366670019665328\n    jacobsthal_num(29) == 341880709767296\n    jacobsthal_num(30) == 5314290598971344\n    jacobsthal_num(31) == 1820254552163088\n    jacobsthal_num(32) == 54112998964307632\n    jacobsthal_num(33) == 58993208998046947\n    jacobsthal_num(34) == 52429763970998752\n    jacobsthal_num(35) == 65648420482817081\n    jacobsthal_num(36) == 14289844091962405\n    jacobsthal_num(37) == 71316544940771508\n    jacobsthal_num(38) == 35448638133340272\n    jacobsthal_num(39) == 79729570892029952\n    jacobsthal_num(40) == 122491387332344288\n    jacobsthal_num(41) == 316688992816593904\n    jacobsthal_num(42) == 539394577603671856\n    jacobsthal_num(43) == 641901077439795808\n    jacobsthal_num(44) == 136859026123951136\n    jacobsthal_num(45) == 539691785207640640\n    jacobsthal_num(46) == 903351052659495040\n    jacobsthal_num(47) == 1496343640815889824\n    jacobsthal_num(48) == 545966445652077376\n    jacobsthal_num(49) == 588872561656713296\n    jacobsthal_num(50) == 1167083518596317696\n    jacobsthal_num(51) == 505933398780358944\n    jacobsthal_num(52) == 972627185336053760\n    jacobsthal_num(53) == 128846001395602080\n    jacobsthal_num(54) == 855859945780144352\n    jacobsthal_num(55) == 231810785730643752\n    jacobsthal_num(56) == 350175352228089520\n    jacobsthal_num(57) == 944148569167502688\n    jacobsthal_num(58) == 267622040572012880\n    jacobsthal_num(59) == 302218750700365552\n    jacobsthal_num(60) == 1107662310208195560\n    jacobsthal_num(61) == 775573495496844712\n    jacobsthal_num(62) == 261171017961193072\n    jacobsthal_num(63) == 97610711277193072\n    jacobsthal_num(64) == 385596998958678944\n    jacobsthal_num(65) == 896130874117681152\n    jacobsthal_num(66) == 348810882848880848\n    jacobsthal_num(67) == 140418846570777248\n    jacobsthal_num(68) == 603018334831468992\n    jacobsthal_num(69) == 692144748036092896\n    jacobsthal_num(70) == 535743445483105952\n    jacobsthal_num(71) == 321757279819587360\n    jacobsthal_num(72) == 916814246213877520\n    jacobsthal_num(73) == 338247923647689152\n    jacobsthal_num(74) == 643450011014725904\n    jacobsthal_num(75) == 602345100955787552\n    jacobsthal_num(76) == 254026451915152384\n    jacobsthal_num(77) == 174613523641700352\n    jacobsthal_num(78) == 499936934300521480\n    jacobsthal_num(79) == 783267110640196784\n    jacobsthal_num(80) == 278834172302947104\n    jacobsthal_num(81) == 749998470864245952\n    jacobsthal_num(82) == 907739357532900672\n    jacobsthal_num(83) == 815498463150773664\n    jacobsthal_num(84) == 1456275536348157328\n    jacobsthal_num(85) == 1316178215177957920\n    jacobsthal_num(86) == 1609165570240593248\n    jacobsthal_num(87) == 754039461011389648\n    jacobsthal_num(88) == 912542913015794448\n    jacobsthal_num(89) == 1323669510685947456\n    jacobsthal_num(90) == 589104655995734432\n    jacobsthal_num(91) == 1838923968400594776\n    jacobsthal_num(92) == 566161437971515504\n    jacobsthal_num(93) == 607630535359376592\n    jacobsthal_num(94) == 807624691807624704\n    jacobsthal_num(95) == 577606086288314352\n    jacobsthal_num(96) == 283602839644291616\n    jacobsthal_num(97) == 883748564372295088\n    jacobsthal_num(98) == 677478810304729392\n    jacobsthal_num(99) == 7270801283500334480\n    jacobsthal_num(100) == 2228110278471827840\n    jacobsthal_num(101) ="
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \njacobsthal_num(0) == 0\njacobsthal_num(1) == 1\njacobsthal_num(2) == 1\njacobsthal_num(3) == 4\njacobsthal_num(4) == 7\njacobsthal_num(5) == 11\njacobsthal_num(6) == 21\njacobsthal_num(7) == 43\njacobsthal_num(8) == 85\njacobsthal_num(9) == 171\njacobsthal_num(10) == 341\njacobsthal_num(11) == 683\njacobsthal_num(12) == 1365\njacobsthal_num(13) == 2731\njacobsthal_num(14) ==...\n\ndef jacobsthal_frac(n):\n    '''\n    Write a function to find the nth jacobsthal number as a rational. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef jacobsthal_num2(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_k([(2, 3, 4), (1, 4, 3), (2, 4, 1), (2, 2, 2), (2, 1, 4)], K = 3) == (2, 1, 4)\nassert     min_k([(2, 3, 4), (1, 4, 3), (2, 4, 1), (2, 2, 2), (2, 1, 4)], K = 5) == (2, 1, 4)\nassert     min_k([(2, 3, 4), (1, 4, 3), (2, 4, 1), (2, 2, 2), (2, 1, 4)], K = 1) == (2, 2, 2)\nassert     min_k([(2, 3, 4), (1, 4, 3), (2, 4, 1), (2, 2, 2), (2, 1, 4)], K = 2) == (2, 2, 2)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_k([(2, 3), (1, 3), (3, 3)], 3) == (1, 3)\nassert     min_k([(2, 3), (1, 3), (3, 3)], 2) == (2, 3)\nassert     min_k([(2, 3), (1, 3), (3, 3)], 1) == (1, 3)\nassert     min_k([(2, 3), (1, 3), (3, 3)], 0) == (2, 3)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_k([(3, 8, 1), (10, 9, 10), (10, 10, 9), (10, 1, 5)], 2) == [(10, 1, 5)]\nassert     min_k([(1, 2, 3), (10, 9, 10), (10, 10, 9), (10, 1, 5)], 2) == [(10, 1, 5)]\nassert     min_k([(3, 8, 1), (10, 9, 10), (10, 10, 9), (10, 1, 5)], 3) == [(10, 1, 5)]\nassert     min_k([(3, 8, 1), (10, 9, 10), (10, 10, 9), (10, 1, 5)], 4) == []\nassert     min_k([(1, 2, 3), (10, 9, 10), (10, 10, 9), (10, 1, 5)], 0) == []\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_k([(1, 2), (3, 4), (5, 6)], 1) == (1, 2)\nassert     min_k([(1, 2), (3, 4), (5, 6)], 2) == (1, 2)\nassert     min_k([(1, 2), (3, 4), (5, 6)], 3) == (3, 4)\nassert     min_k([(1, 2), (3, 4), (5, 6)], 4) == (5, 6)\nassert     min_k([(1, 2), (3, 4), (5, 6)], 5) == (5, 6)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_k(['a','b','c','d','e'], 2) == ['a','b']\nassert     min_k(['a','b','c','d','e'], 1) == ['a','b','c','d','e']\nassert     min_k(['a','b','c','d','e'], 3) == ['b','c','d']\nassert     min_k(['a','b','c','d','e'], 0) == []\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k([(1, 3, 5, 7, 9), (2, 4, 6, 8), (1, 3, 5, 7), (2, 4, 6), (2, 4, 6)], 3) == (1, 3, 5, 7, 9), \"min_k test 1 failed\"\nassert     min_k([(1, 3, 5, 7, 9), (2, 4, 6, 8), (1, 3, 5, 7), (2, 4, 6), (2, 4, 6)], 5) == (1, 3, 5, 7, 9), \"min_k test 2 failed\"\nassert     min_k([(1, 3, 5, 7, 9), (2, 4, 6, 8), (1, 3, 5, 7), (2, 4, 6), (2, 4, 6)], 0) == (1, 3, 5, 7, 9), \"min_k test 3 failed\"\nassert     min_k([(1, 3, 5, 7, 9), (2, 4, 6, 8), (1, 3, 5, 7), (2, 4, 6), (2, 4, 6)], 4) == (1, 3, 5, 7), \"min_k test 4 failed\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_k([(1,2,3),(2,3,4),(1,2,3),(2,3,4),(1,2,3)], 2) == ((1,2,3), (2,3,4))\nassert     min_k([(1,2,3),(2,3,4),(1,2,3),(2,3,4),(1,2,3)], 1) == ((1,2,3), (2,3,4))\nassert     min_k([(1,2,3),(2,3,4),(1,2,3),(2,3,4),(1,2,3)], 0) == ((1,2,3),(2,3,4),(1,2,3))\nassert     min_k([(1,2,3),(2,3,4),(1,2,3),(2,3,4),(1,2,3)], 5) == ((1,2,3),(2,3,4),(1,2,3),(2,3,4),(1,2,3))\nassert     min_k([(1,2,3),(2,3,4),(1,2,3),(2,3,4),(1,2,3)], 6) == ((1,2,3),(2,3,4),(1,2,3),(2,3,4),(1,2,3))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_k([(2,3),(1,2),(0,1),(1,2),(0,2),(1,3)], 2) == [(0,2),(0,1),(1,2),(1,3)]\nassert     min_k([(2,3),(1,2),(0,1),(1,2),(0,2),(1,3)], 1) == [(0,2),(0,1)]\nassert     min_k([(2,3),(1,2),(0,1),(1,2),(0,2),(1,3)], 3) == []\nassert     min_k([(2,3),(1,2),(0,1),(1,2),(0,2),(1,3)], 4) == []\nassert     min_k([(2,3),(1,2),(0,1),(1,2),(0,2),(1,3)], 5) == [(0,2)]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_k(test_list, K):\n    '''\n    Write a function to find maximum k records from tuple list. https://www.geeksforgeeks.org/python-find-maximum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         extract_index_list([10, 20, 30, 40], [20, 30, 40], [10, 20, 30, 40]) == [10, 20], 'Fail'\nassert         extract_index_list([10, 20, 30], [20, 30, 40], [10, 20, 30, 40]) == [10, 20], 'Fail'\nassert         extract_index_list([10, 20], [20, 30, 40], [10, 20, 30, 40]) == [10, 20], 'Fail'\nassert         extract_index_list([10, 20, 30, 40], [20, 30, 40], [10, 20, 30, 40]) == [], 'Fail'\nassert         extract_index_list([10, 20, 30, 40], [20, 30, 40], [10, 20, 30, 40, 10]) == [10], 'Fail'\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_index_list(    [1, 3, 5, 8, 3],    [3, 4, 5, 8, 10],     [7, 9, 11, 7]) == [3, 3]\nassert     extract_index_list(    [1, 3, 5, 8, 9],    [3, 4, 5, 8, 10],     [7, 9, 11, 7]) == []\nassert     extract_index_list(    [1, 3, 5, 8, 9],    [1, 2, 3, 5, 6],     [7, 8, 9]) == [2, 3]\nassert     extract_index_list(    [],     [1, 2, 3, 4],     [5, 6]) == []\nassert     extract_index_list([1, 2, 3],     [],     [4, 5]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([1,2,3,4], ['a','b','c'], ['d','e','f']) == [[1,2,3,4],[0,1,2,3]]\nassert     extract_index_list([1,2,3,4], ['a','b','c'], ['c','d','e','f']) == [[1,2,3,4],[0,1,2,3]]\nassert     extract_index_list([1,2,3,4], ['a','b','c'], ['c','d','e','f']) == [[1,2,3,4]]\nassert     extract_index_list([1,2,3,4], ['a','b','c'], ['d','e','f']) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert (extract_index_list([1,2,3], [1,3,4], [2,3,4]) == [1,2]), \"Wrong Answer\"\nassert (extract_index_list([], [], []) == []), \"Wrong Answer\"\nassert (extract_index_list([1,1,1], [1,1,1], [1,1,1]) == []), \"Wrong Answer\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_index_list([1,2,3], ['a', 'b', 'c'], ['d', 'e', 'f']) == ['a','d'], \"Wrong\"\nassert     extract_index_list([1,2,3], ['a', 'b', 'c'], ['d', 'e', 'f']) == ['d'], \"Wrong\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4, 5]) == [[2, 3, 4], [3, 4, 5]]\nassert         extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4, 5]) == [[2, 3, 4], [3, 4, 5]]\nassert         extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4]) == [[2, 3, 4]]\nassert         extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4, 5]) == [[2, 3, 4, 5]]\nassert         extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 4, 5, 6]) == [[2, 3, 4], [3, 4, 5]]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_index_list([1, 2, 3], [2, 3, 4], [4, 3, 2]) == [1, 2, 4], 'incorrect'\nassert     extract_index_list([1, 2, 3], [2, 3, 4], [1, 3, 2]) == [1, 2], 'incorrect'\nassert     extract_index_list([1, 2, 3], [2, 3, 4], [1, 3, 2, 5]) == [1, 2, 3], 'incorrect'\nassert     extract_index_list([1, 2], [2, 3, 4], [1, 3, 2]) == [], 'incorrect'\n\nprint('Checking your code (another way)')\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef extract_index_list_test(capfd):\n    '''\n    Test case 1:\n    Input:\n    l1 = [\"Apple\", \"Mango\", \"Banana\"]\n    l2 = [\"Banana\", \"Orange\"]\n    l3 = [\"Kiwi\", \"Orange\"]\n    Output:\n    [\"Banana\"]\n    '''\n    out =  extract_index_list(l1, l2, l3)\n    out = out.split()\n    print(out)\n    assert out == [\"Banana\"]\n\ndef extract_index_list_test2(capfd):\n    '''\n    Test case 2:\n    Input:\n    l1 = [\"Apple\", \"Mango\", \"Banana\"]\n    l2 = [\"Apple\", \"Mango\"]\n    l3 = [\"Banana\", \"Orange\"]\n    Output:\n    [\"Apple\", \"Mango\", \"Banana\"]\n    '''\n    out =  extract_index_list(l1, l2, l3)\n    out = out.split()\n    print(out)\n    assert out == [\"Apple\", \"Mango\", \"Banana\"]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     second_smallest([3,1,2]) == 1\nassert     second_smallest([1,3,2]) == 2\nassert     second_smallest([1,1,2]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     second_smallest([1, 1, 1]) == 1, 'one is second smallest'\nassert     second_smallest([0, 1, 2, 1]) == 1, 'one is second smallest'\nassert     second_smallest([1, 2, 1]) == 2, 'two are second smallest'\nassert     second_smallest([1, 2, 1, 2, 1]) == 1, 'three are second smallest'\nassert     second_smallest([1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1]) == 1, 'all the numbers are equal'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([1, 2, 4, 4]) == 4\nassert     second_smallest([1, 2, 4, 4, 3]) == 4\nassert     second_smallest([1, 2, 4, 4, 3, 100]) == 4\nassert     second_smallest([1, 2, 4, 4, 3, 3]) == 3\nassert     second_smallest([1, 2, 4, 4, 3, 3, 100]) == 3\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([2,2,2,2,2]) == 2\nassert     second_smallest([3,3,3,2,2]) == 3\nassert     second_smallest([3,2,3,2,2]) == 3\n\ndef second_smallest_elem(numbers):\n    '''\n    Write a function to find the second smallest element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([5,2,4]) == 2, 'test 1: [5, 2, 4]'\nassert second_smallest([7,2,4]) == 4, 'test 2: [7, 2, 4]'\nassert second_smallest([4,6,7]) == 6, 'test 3: [4, 6, 7]'\nassert second_smallest([2,2,2]) == 2, 'test 4: [2, 2, 2]'\nassert second_smallest([]) == None, 'test 5: []'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     second_smallest([3,1,7,2]) == 1\nassert     second_smallest([3,1,7,2,1]) == 1\nassert     second_smallest([3,1,7,2,1,2]) == 1\nassert     second_smallest([3,1,7,2,1,2,7]) == 1\nassert     second_smallest([3,1,7,2,1,2,7,2,1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     second_smallest([3, 2, 1]) == 1\nassert     second_smallest([3, 2, 1, 2]) == 2\nassert     second_smallest([3, 2, 1, 2, 4]) == 2\nassert     second_smallest([1, 2, 4, 3, 2]) == 4\nassert     second_smallest([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     second_smallest([1, 1, 2, 2, 3, 3]) == 2\nassert     second_smallest([0, 1, 2, 1, 2, 3, 3, 4]) == 1\nassert     second_smallest([0, 1, 2, 3, 4, 5, 6]) == 1\nassert     second_smallest([1]) == 1\nassert     second_smallest([]) == None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one(\"aab\") == False, \"Should be False\"\nassert     text_match_zero_one(\"ab\") == True, \"Should be True\"\nassert     text_match_zero_one(\"aaaaaab\") == True, \"Should be True\"\nassert     text_match_zero_one(\"abaaaaabb\") == True, \"Should be True\"\nassert     text_match_zero_one(\"bab\") == False, \"Should be False\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('ab') == True, 'False positive'\nassert     text_match_zero_one('ab') == False, 'False negative'\nassert     text_match_zero_one('ababab') == True, 'False negative'\nassert     text_match_zero_one('abcab') == False, 'False negative'\nassert     text_match_zero_one('abca') == False, 'False negative'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one(\"a\") == False \nassert     text_match_zero_one(\"ab\") == False \nassert     text_match_zero_one(\"ba\") == False \nassert     text_match_zero_one(\"abc\") == False \nassert     text_match_zero_one(\"bba\") == False \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('a') == True, 'a does not match a correctly'\nassert     text_match_zero_one('ab') == True, 'ab does not match a correctly'\nassert     text_match_zero_one('aab') == False, 'aab does match a correctly'\nassert     text_match_zero_one('bb') == True, 'bb does match a correctly'\n\nprint('Congratulations, the tests are PASSED!')\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one('') == True, \"a string without 'a's\"\nassert     text_match_zero_one('aba') == True, \"a string with 'a' followed by one 'b'\"\nassert     text_match_zero_one('abaaaaabaaaaaa') == True, \"a string with 'a' followed by one or more 'b'\"\nassert     text_match_zero_one('abaaaabaaaaab') == False, \"a string with 'a' followed by more than one 'b'\"\nassert     text_match_zero_one('aaaaaaaaaaaaaab') == False, \"a string with more than one 'a'\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one('ab') == False \nassert     text_match_zero_one('b') == True\nassert     text_match_zero_one('ba') == True\nassert     text_match_zero_one('abab') == True\n\ndef text_match_zero_one_using_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('a') == True, \"wrong answer\"\nassert     text_match_zero_one('ab') == True, \"wrong answer\"\nassert     text_match_zero_one('a') == False, \"wrong answer\"\nassert     text_match_zero_one('abc') == False, \"wrong answer\"\nassert     text_match_zero_one('abcd') == True, \"wrong answer\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_zero_one('aabbbbc') == 'False'\nassert     text_match_zero_one('abab') == 'True'\nassert     text_match_zero_one('abc') == 'True'\nassert     text_match_zero_one('abbbc') == 'True'\nassert     text_match_zero_one('aabbb') == 'False'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one('ab') == 'True' \nassert     text_match_zero_one('bb') == 'True' \nassert     text_match_zero_one('b') == 'False' \nassert     text_match_zero_one('aa') == 'False' \nassert     text_match_zero_one('acb') == 'True' \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one(\"abcba\")    ==    True\nassert     text_match_zero_one(\"ab\")    ==    False\nassert     text_match_zero_one(\"\")    ==    True\nassert     text_match_zero_one(\"abcdabcd\")    ==    True\nassert     text_match_zero_one(\"abcdabcdab\")    ==    False\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_reverse_pairs(['hgfh', 'gf', 'f', 'fghg', 'fgh', 'g', 'fhgf', 'hgf', 'fghf', 'fgh', 'f', 'gfhf', 'fghf', 'gfh', 'hgf', 'fhg', 'fghg', 'hg', 'hfgf']) == 7\nassert     count_reverse_pairs(['gf', 'f', 'g', 'hgf', 'hgf', 'gf', 'f', 'fhgf', 'fgh', 'fhgf', 'hgf', 'gfh', 'hgf', 'hgf', 'hgf', 'fhgf', 'hgf', 'gfhg', 'fhg', 'hgf', 'hgf', 'hgf', 'gfhg', 'gfh', 'hgf']) == 10\nassert     count_reverse_pairs(['hgf', 'gf', 'f', 'fghg', 'fgh', 'g', 'fhgf', 'hgf', 'fghf', 'fgh', 'f', 'gfhf', 'fghf', 'gfh', 'hgf', 'fhg', 'fghg', 'hg', 'hfgf']) == 8\nassert     count_reverse_pairs(['hgf', 'gf', 'f', 'fghg', 'fgh', 'g', 'fhgf', 'hgf', 'fghf', 'fgh', 'f', 'gfhf', 'fghf', 'gfh', 'hgf', 'fhg', 'fghg', 'hg', 'hfgf']) == 6\nassert     count_reverse_pairs(['hgf', 'gf', 'f', 'fghg', 'fgh', 'g', 'fhgf', 'hgf', 'fghf', 'fgh', 'f', 'gfhf', 'fghf', 'gfh', 'hgf', 'fhg', 'fghg', 'hg', 'hfgf']) == 9\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_reverse_pairs(['abc', 'xyz', 'aba', '1221']) == 3\nassert     count_reverse_pairs(['1', '2', '3', '4', '5', '6']) == 6\nassert     count_reverse_pairs(['7', '8', '9', '10']) == 0\nassert     count_reverse_pairs(['hi', 'hello', 'hel', 'elolol']) == 5\nassert     count_reverse_pairs([]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_reverse_pairs([\"abcd\", \"cdab\", \"cbad\", \"cbadf\", \"bfac\"]) == 4\nassert count_reverse_pairs([\"xyz\", \"zxy\", \"zyx\"]) == 1\nassert count_reverse_pairs([]) == 0\nassert count_reverse_pairs([\"abcd\", \"cdab\", \"cbad\", \"cbadf\", \"bfac\"]) == 4\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntest_list = ['gfg', 'gg', 'ggg', 'gggg', 'gggggg', 'ggggggggg']\nassert count_reverse_pairs(test_list) == 5\n\ntest_list = ['gg', 'ggg', 'gggg', 'gggggg', 'ggggggggg']\nassert count_reverse_pairs(test_list) == 5\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs([\"bob\", \"car\"]) == 1\nassert     count_reverse_pairs([\"bob\", \"car\", \"alice\"]) == 2\nassert     count_reverse_pairs([\"abcd\", \"dcba\"]) == 2\nassert     count_reverse_pairs([\"abcd\"]) == 0\nassert     count_reverse_pairs([]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_reverse_pairs([\"1221\"]) == 1\nassert     count_reverse_pairs([\"2112\",\"1221\"]) == 1\nassert     count_reverse_pairs([\"2112\",\"1221\",\"1221\",\"2112\"]) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_reverse_pairs([ 'a', 'a', 'c', 'c', 'a', 'b', 'd']) == 2\ncount_reverse_pairs([ 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'c']) == 6\ncount_reverse_pairs([ 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'c', 'd', 'a']) == 7\ncount_reverse_pairs([ 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'c', 'd', 'a', 'c', 'b']) == 3\ncount_reverse_pairs([ 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'c', 'd', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b']) == 12\ncount_reverse_pairs([ 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'c', 'd', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'b']) == 3\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef unique_sublists2(list1):\n    '''\n    Write a function to check whether the sublists of a list are unique.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([1, 2, 3]) == {(1,): 1, (2,): 1, (3,): 1}\nassert     unique_sublists([2, 2, 3, 2]) == {(2,): 2, (3,): 1}\nassert     unique_sublists([1, 1, 1, 1, 1]) == {(1, 1): 5}\nassert     unique_sublists([1, 1, 1, 1, 2]) == {(1, 1): 5, (1, 2): 1}\nassert     unique_sublists([1, 1, 2, 2, 1, 2]) == {(1, 1): 5, (1, 2): 3, (2, 1): 2, (2, 2): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([]) == {(): 0}\nassert     unique_sublists([1, 1, 1, 1, 1]) == {(): 1, (1,): 1, (1, 1): 1, (1, 1, 1): 1, (1, 1, 1, 1): 1}\nassert     unique_sublists([1, 1, 2, 3]) == {(): 1, (1,): 1, (2,): 1, (3,): 1}\nassert     unique_sublists([]) == {(): 0}\nassert     unique_sublists([1, 1, 1, 1, 2, 2, 2, 2]) == {(): 6, (1,): 5, (2,): 4, (3,): 3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([1,2,3,4,1]) == {\n                (1,2,3,4):2,\n                (1,):1\n            }\nassert     unique_sublists([1,2,1,3]) == {\n                (1,2):1,\n                (1,3):1,\n                (1,):1\n            }\nassert     unique_sublists([1,2]) == {\n                (1,2):1\n            }\n\ndef unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # zip(*a) will unpack all the tuples in list1 in to a list\n    # print(list(zip(*list1)))\n    # print(type(list(zip(*list1))))\n    # print(list(zip(*list1)))\n    return {tuple(i):1 for i in list(zip(*list1))}\n    # return {i:list(i) for i in list(zip(*list1))}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([3,2,2,3,4,3,3,3]) == {(3,1), (4,1), (3,2), (2,3), (3,3)}\nassert     unique_sublists([4,2,3,3,4,3,4,3,4,4,4,3,4,2]) == {(4,1), (2,3), (3,4), (4,2), (4,3)}\nassert     unique_sublists([3,3,4,2,3,3,4,2,3,4]) == {(3,1), (4,2), (3,3)}\nassert     unique_sublists([3,3,4,4,2,2,3,3,4,3]) == {(3,1), (4,2), (4,3), (2,2)}\nassert     unique_sublists([1,2,3,4]) == {(1,1), (2,1), (3,1), (4,1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([1,1,1,1,1,2,2,2,2,2]) == \n    {1:3,2:2}\nassert     unique_sublists([1,2,2,3,3,3,3]) == \n    {1:1,2:2,3:3}\nassert     unique_sublists([1,2,2,3,3,3,3,4,4,4,4]) == \n    {1:3,2:2,3:3,4:4}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_decimal(\"0.1\") == True\nassert     is_decimal(\"0.11\") == True\nassert     is_decimal(\"0.12\") == False\nassert     is_decimal(\"0.12\") == False\nassert     is_decimal(\"0.12a\") == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_decimal('5') == False\nassert     is_decimal('5.') == True\nassert     is_decimal('5.0') == True\nassert     is_decimal('5.5') == True\nassert     is_decimal('5.50000') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_decimal('0.1') == True\nassert     is_decimal('0.11') == True\nassert     is_decimal('0.01') == False\nassert     is_decimal('0') == False\nassert     is_decimal('0.01') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('is_decimal: passed')\n\ndef is_number(num):\n    '''\n    Write a function to check whether a given string is a number.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_decimal('5')\nassert not     is_decimal('5.1')\nassert not     is_decimal('0')\nassert not     is_decimal('5.0')\nassert not     is_decimal('5.01')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_decimal('0.1') == True, 'The input should be a decimal number with a precision of 2.'\nassert     is_decimal('0.1') == True, 'The input should be a decimal number with a precision of 2.'\nassert     is_decimal('1.0') == True, 'The input should be a decimal number with a precision of 2.'\nassert     is_decimal('1.0') == True, 'The input should be a decimal number with a precision of 2.'\nassert     is_decimal('10.0') == False, 'The input should be a decimal number with a precision of 2.'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_decimal('hello')\nassert is_decimal('1.1')\nassert is_decimal('1.11')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    is_decimal('0.123')\n    # => True\nassert is_decimal('0.1234')\n    # => False\nassert is_decimal('0.1235')\n    # => False\nassert is_decimal('0.1236')\n    # => False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_decimal('123') == True, 'wrong result'\nassert     is_decimal('1.23') == True, 'wrong result'\nassert     is_decimal('1.2') == True, 'wrong result'\nassert     is_decimal('1.2.3') == True, 'wrong result'\nassert     is_decimal('1.2.3.4') == True, 'wrong result'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_Element([0,0,1,1,1,1,2,2,3,3,3])\nassert     unique_Element([0,0,1,1,1,2,2,3,3]) == False\nassert     unique_Element([0,0,1,1,1,2,2,3,3,3,3,3,4,4]) == True\n\ndef count_Substring(string, sub_string):\n    '''\n    Write a python function to count the number of times a substring occurs in a string.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nunique_Element([2,3,1,1,3,1,2,3,1]) == False\nassert \nunique_Element([1,2,3]) == True"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([1, 1, 2, 3, 3, 4, 4, 4, 5, 6, 7]) == True, \"1,1,2,3,3,4,4,4,5,6,7\"\nassert     unique_Element([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 7]) == False, \"1,1,2,2,3,3,4,4,4,5,6,7\"\nassert     unique_Element([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 7, 7, 7, 8, 8]) == False, \"1,1,2,2,3,3,4,4,4,5,6,7,7,7,8,8\"\nassert     unique_Element([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 7, 7, 7, 8, 8, 9, 9]) == True, \"1,1,2,2,3,3,4,4,4,5,6,7,7,7,8,8,9,9\"\nassert     unique_Element([]) == False, \"Empty List\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert unique_Element([1,2,3]) == False\nassert unique_Element([1,2,3,4]) == True\nassert unique_Element([1,2,1,3]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([0, 1, 2, 1, 1, 1, 1, 1]) == True\nassert     unique_Element([0, 1, 1, 2, 2, 2, 3, 3, 4]) == False\nassert     unique_Element([0, 1, 2, 2, 1, 1]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nunique_Element([1,1,1,2,3]) == True\n\nunique_Element([1,1,1,2,3,4]) == False\n\nunique_Element([1,2,3,4,5]) == False\n\nunique_Element([1]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    unique_Element([1,2,3,4,1]) == True, \n    \"error case\"\nassert \n    unique_Element([1,2,3,4,5]) == False, \n    \"error case\"\nassert \n    unique_Element([1,2,2,3,4]) == True, \n    \"error case\"\n\n\n\ndef unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(30) == True, \"30 is not a month number\"\nassert     check_monthnumber_number(31) == False, \"31 is a month number\"\nassert     check_monthnumber_number(4) == True, \"4 is a month number\"\nassert     check_monthnumber_number(5) == False, \"5 is not a month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(1) == True, 'check_monthnumber_number is not correct'\nassert     check_monthnumber_number(2) == True, 'check_monthnumber_number is not correct'\nassert     check_monthnumber_number(3) == False, 'check_monthnumber_number is not correct'\nassert     check_monthnumber_number(4) == False, 'check_monthnumber_number is not correct'\nassert     check_monthnumber_number(5) == False, 'check_monthnumber_number is not correct'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(3) == False\nassert     check_monthnumber_number(4) == True\n\n'''\n3. Write a function to calculate the number of days between two dates.\n'''\n\ndef days_between(year1, month1, day1, year2, month2, day2):\n    '''\n    Write a function that takes three date arguments (year, month, day) as inputs and calculates the number of days between these\n    two dates.\n    '''\n    pass\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(7) == False\nassert     check_monthnumber_number(10) == True\nassert     check_monthnumber_number(1) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(1)==False, 'Should be False'\nassert     check_monthnumber_number(12)==False, 'Should be False'\nassert     check_monthnumber_number(0)==True, 'Should be True'\nassert     check_monthnumber_number(2)==True, 'Should be True'\nassert     check_monthnumber_number(31)==False, 'Should be False'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(5) == True, '---> Wrong Answer'\nassert     check_monthnumber_number(10) == True, '---> Wrong Answer'\nassert     check_monthnumber_number(11) == False, '---> Wrong Answer'\nassert     check_monthnumber_number(14) == True, '---> Wrong Answer'\nassert     check_monthnumber_number(21) == False, '---> Wrong Answer'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(3) == False\nassert     check_monthnumber_number(4) == True\nassert     check_monthnumber_number(12) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(1) == False\nassert check_monthnumber_number(2) == True\nassert check_monthnumber_number(3) == True\nassert check_monthnumber_number(4) == False\nassert check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(1)    == False\nassert     check_monthnumber_number(2)    == True\nassert     check_monthnumber_number(3)    == True\nassert     check_monthnumber_number(4)    == False\nassert     check_monthnumber_number(5)    == False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_min_diff([5, 1, 3, 1, 2],1) == 1\nassert     find_min_diff([1, 2, 3, 4, 10],1) == 3\nassert     find_min_diff([1, 2, 3, 4],1) == 4\nassert     find_min_diff([1, 2, 3],1) == 0\nassert     find_min_diff([1, 2, 3,4],5) == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_min_diff([7,9,8],1) == 4\nassert find_min_diff([7,9,8],2) == 1\nassert find_min_diff([7,9,8],3) == 4\nassert find_min_diff([7,9,8],4) == 2\nassert find_min_diff([7,9,8],5) == 2\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert find_min_diff([1,2,3,4],4) == 1\nassert find_min_diff([1,2,3,4],-1) == -1\nassert find_min_diff([-1,2,3,4],1) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr = [1,3,5,8,10] \nn = len(arr) \nprint(\"Minimum difference is \", find_min_diff(arr,n)) \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([2,3,4,5],1) == 3\nassert     find_min_diff([1,2,3,4],2) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_min_diff(arr,n):\n    min_diff = 10**9\n    first_index = 0\n    second_index = 0\n    while first_index < n-1:\n        if arr[first_index] > arr[first_index+1]:\n            first_index += 1\n        else:\n            break\n    while second_index < n-1:\n        if arr[second_index] < arr[second_index+1]:\n            second_index += 1\n        else:\n            break\n    if first_index > second_index:\n        return min_diff\n    else:\n        if arr[first_index] - arr[second_index] < min_diff:\n            min_diff = arr[first_index] - arr[second_index]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sort_array(arr,n): \n    '''\n    Write a python function to sort an array in ascending order using the insertion sort algorithm. https://www.geeksforgeeks.org/insertion-sort/\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_min_diff([1, 4, 2, 5, 7], 2) == 0\nassert     find_min_diff([1, 4, 2, 5, 7], 3) == -1\nassert     find_min_diff([-8, -3, -5, -3, -5, -3, -3, -4, -1, -3], -3) == 2\nassert     find_min_diff([1, 4, 2, 5, 7], 5) == -1\nassert     find_min_diff([1, 2, 3, 4, 5], 5) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr(\"\") == 0, \"pass\"\nassert     number_ctr(\"9\") == 1, \"fail\"\nassert     number_ctr(\"917\") == 1, \"fail\"\nassert     number_ctr(\"917.9\") == 1, \"fail\"\nassert     number_ctr(\"917.9.9\") == 2, \"fail\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_ctr('1234') == 4, 'check_error_msg'\nassert     number_ctr('12') == 2, 'check_error_msg'\nassert     number_ctr('123') == 3, 'check_error_msg'\nassert     number_ctr('1') == 1, 'check_error_msg'\nassert     number_ctr(' ') == 0, 'check_error_msg'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr('12345') == 5, \"Number_ctr should return 5\"\nassert     number_ctr('999') == 5, \"Number_ctr should return 5\"\nassert     number_ctr('123456789') == 9, \"Number_ctr should return 9\"\nassert     number_ctr('1') == 1, \"Number_ctr should return 1\"\nassert     number_ctr('0') == 1, \"Number_ctr should return 1\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_ctr(\"12\") == 2, \"expected 2, got %s\" % number_ctr(\"12\")\nassert     number_ctr(\"123456789\") == 9, \"expected 9, got %s\" % number_ctr(\"123456789\")\nassert     number_ctr(\"123456789\") == 9, \"expected 9, got %s\" % number_ctr(\"123456789\")\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr(\"111011001111111\") == 6\nassert     number_ctr(\"1\") == 1\nassert     number_ctr(\"\") == 0\nassert     number_ctr(\"a\") == 0\nassert     number_ctr(\"1234\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_ctr(\"the quick brown fox jumps over the lazy dog\") == 6, \"incorrect\"\nassert     number_ctr(\"abc123abc\") == 4, \"incorrect\"\nassert     number_ctr(\"a\") == 1, \"incorrect\"\nassert     number_ctr(\"\") == 0, \"incorrect\"\nassert     number_ctr(\"12345\") == 1, \"incorrect\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr(\"abcabc\") == 1, 'Expected 1, but got %d' % number_ctr(\"abcabc\")\nassert     number_ctr(\"a1b2c3d4e5\") == 5, 'Expected 5, but got %d' % number_ctr(\"a1b2c3d4e5\")\nassert     number_ctr(\"1\") == 1, 'Expected 1, but got %d' % number_ctr(\"1\")\nassert     number_ctr(\"\") == 0, 'Expected 0, but got %d' % number_ctr(\"\")\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr(\"a\") == 1\nassert     number_ctr(\"1\") == 1\nassert     number_ctr(\"a1\") == 1\nassert     number_ctr(\"1234\") == 4\nassert     number_ctr(\"a34\") == 1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr(\"9.8\") == 1\nassert     number_ctr(\"19\") == 1\nassert     number_ctr(\"1234\") == 4\nassert     number_ctr(\"-19\") == 1\nassert     number_ctr(\"\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr(\"13\") == 1\nassert     number_ctr(\"12\") == 1\nassert     number_ctr(\"1234\") == 1\nassert     number_ctr(\"1234.4567\") == 2\nassert     number_ctr(\"1234.5678\") == 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_polite(1) == True\nassert     is_polite(2) == False\nassert     is_polite(10) == True\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_polite2(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_polite(2) == 1, 'not polite'\nassert     is_polite(3) == 2, 'not polite'\nassert     is_polite(5) == 3, 'not polite'\nassert     is_polite(10) == 4, 'not polite'\nassert     is_polite(20) == 5, 'not polite'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_polite(2) == 2, 'Error in is_polite: is_polite(2)'\nassert     is_polite(3) == 3, 'Error in is_polite: is_polite(3)'\nassert     is_polite(4) == 4, 'Error in is_polite: is_polite(4)'\nassert     is_polite(5) == 5, 'Error in is_polite: is_polite(5)'\nassert     is_polite(6) == 6, 'Error in is_polite: is_polite(6)'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_polite(1) == 0\nis_polite(2) == 1\nis_polite(4) == 2\nis_polite(10) == 5\nis_polite(20) == 6\nis_polite(25) == 7\nis_polite(30) == 8\nis_polite(40) == 9\nis_polite(50) == 10\nis_polite(60) == 11\nis_polite(70) == 12\nis_polite(80) == 13\nis_polite(90) == 14\nis_polite(100) == 15\nis_polite(110) == 16\nis_polite(120) == 17\nis_polite(150) == 18\nis_polite(200) == 19\nis_polite(250) == 20\nis_polite(300) == 21\nis_polite(350) == 22\nis_polite(400) == 23\nis_polite(500) == 24\nis_polite(600) == 25\nis_polite(700) == 26\nis_polite(800) == 27\nis_polite(900) == 28\nis_polite(1000) == 29\nis_polite(2000) == 30\nis_polite(5000) == 31\nis_polite(10000) == 32\nis_polite(15000) == 33\nis_polite(20000) == 34\nis_polite(25000) == 35\nis_polite(30000) == 36\nis_polite(35000) == 37\nis_polite(40000) == 38\nis_polite(45000) == 39\nis_polite(50000) == 40\nis_polite(55000) == 41\nis_polite(60000) == 42\nis_polite(65000) == 43\nis_polite(70000) == 44\nis_polite(75000) == 45\nis_polite(80000) == 46\nis_polite(85000) == 47\nis_polite(90000) == 48\nis_polite(95000) == 49\nis_polite(10000) == 50\nis_polite(1000000) == 51\nis_polite(10000000) == 52\nis_polite(100000000) == 53\nis_polite(1000000000) == 54\nis_polite(10000000000) == 55\nis_polite(100000000000) == 56\nis_polite(1000000000000) == 57\nis_polite(10000000000000) == 58\nis_polite(100000000000000) == 59\nis_polite(1000000000000000) == 60\nis_polite(100000000000000000) == 61\nis_polite(100000000000000000000) == 62\nis_polite(1000000000000000000000) == 63\nis_polite(10000000000000000000000) == 64\nis_polite(100000000000000000000000) == 65\nis_polite(10000000000000000000000000) == 66\nis_polite(1000000000000000000000000) == 67\nis_polite(10000000000000000000000000) == 68\nis_polite(100000000000000000000000000) == 69\nis_polite(10000000000000000000000000) == 70\nis_polite(1000000000000000000000000000) == 71\nis_polite(10000000000000000000000000000) == 72\nis_polite(100000000000000000000000000000) == 73\nis_polite(1000000000000000000000000000000) == 74\nis_polite(10000000000000000000000000000000) == 75\nis_polite(1000000000000000000000000000000000) == 76\nis_polite(1000000000000000000000000000000000) == 77\nis_polite(1000000000000000000000000000000000) == 78\nis_polite(1000000000000000000000000000000000) == 79\nis_polite(1000000000000000000000000000000000) == 80\nis_polite(1000000000000000000000000000000000) == 81\nis_polite(1000000000000000000000000000000000) == 82\nis_polite(1000000000000000000000000000000000) == 83\nis_polite(1000000000000000000000000000000000) == 84\nis_polite(1000000000000000000000000000000000) == 85\nis_polite(1000000000000000000000000000000000) == 86\nis_polite(1000000000000000000000000000000000) == 87\nis_polite(1000000000000000000000000000000000) == 88\nis_polite(1000000000000000000000000000000000) == 89\nis_polite(1000000000000000000000000000000000) == 90\nis_polite(1000000000000000000000000000000000) == 91\nis_polite(1000000000000000000000000000000000) == 92\nis_polite(1000000000000000000000000000000000) == 93\nis_polite(1000000000000000000000000000000000) == 94\nis_polite(1000000000000000000000000000000000) == 95\nis_polite(1000000000000000000000000000000000) == 96\nis_polite(1000000000000000000000000000000000) == 97\nis_polite(1000000000000000000000000000000000) == 98\nis_polite(1000000000000000000000000000000000) == 99\nis_polite(1000000000000000000000000000000000) == 100\nis_polite(1000000000000000000000000000000000) == 101\nis_polite(1000000000000000000000000000000000) == 102\nis_polite(1000000000000000000000000000000000) == 103\nis_polite(1000000000000000000000000000000000) == 104\nis_polite(1000000000000000000000000000000000) == 105\nis_polite(1000000000000000000000000000000000) == 106\nis_polite(1000000000000000000000000000000000) == 107\nis_polite(1000000000000000000000000000000000) == 108\nis_polite(1000000000000000000000000000000000) == 109\nis_polite(1000000000000000000000000000000000) == 110\nis_polite(1000000000000000000000000000000000) == 111\nis_polite(1000000000000000000000000000000000) == 112\nis_polite(1000000000000000000000000000000000) == 113\nis_polite(1000000000000000000000000000000000) == 114\nis_polite(1000000000000000000000000000000000) == 115\nis_polite(1000000000000000000000000000000000) == 116\nis_polite(1000000000000000000000000000000000) == 117\nis_polite(1000000000000000000000000000000000) == 118\nis_polite(1000000000000000000000000000000000) == 119\nis_polite(1000000000000000000000000000000000) == 120\nis_polite(1000000000000000000000000000000000) == 121\nis_polite(1000000000000000000000000000000000) == 122\nis_polite(1000000000000000000000000000000000) == 123\nis_polite(1000000000000000000000000000000000) == 124\nis_polite(1000000000000000000000000000000000) == 125\nis_polite(1000000000000000000000000000000000) == 126\nis_polite(1000000000000000000000000000000000) == 127\nis_polite(1000000000000000000000000000000000) == 128\nis_polite(1000000000000000000000000000000000) == 129\nis_polite(1000000000000000000000000000000000) == 130\nis_polite(1000000000000000000000000000000000) == 131\nis_polite(1000000000000000000000000000000000) == 132\nis_polite(1000000000000000000000000000000000) == 133\nis_polite(1000000000000000000000000000000000) == 134\nis_polite(1000000000000000000000000000000000) == 135\nis_polite(1000000000000000000000000000000000) == 136\nis_polite(1000000000000000000000000000000000) == 137\nis_polite(1000000000000000000000000000000000) == 138\nis_polite(1000000000000000000000000000000000) == 139\nis_polite(1000000000000000000000000000000000) == 140\nis_polite(1000000000000000000000000000000000) == 141\nis_polite(1000000000000000000000000000000000) == 142\nis_polite(1000000000000000000000000000000000) == 143\nis_polite(1000000000000000000000000000000000) == 144\nis_polite(1000000000000000000000000000000000) == 145\nis_polite(1000000000000000000000000000000000) == 146\nis_polite(1000000000000000000000000000000000) == 147\nis_polite(1000000000000000000000000000000000) == 148\nis_polite(1000000000000000000000000000000000) == 149\nis_polite(1000000000000000000000000000000000) == 150\nis_polite(1000000000000000000000000000000000) == 151\nis_polite(1000000000000000000000000000000000) ="
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert is_polite(1) == 1\nassert is_polite(2) == 3\nassert is_polite(3) == 6\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef prime_factors(n):\n    '''\n    Write a function to find all the prime factors of a number. geeksforgeeks.org/nth-prime-number/\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_polite(0) == 0, 'wrong output'\nassert \nis_polite(1) == 1, 'wrong output'\nassert \nis_polite(2) == 3, 'wrong output'\nassert \nis_polite(3) == 7, 'wrong output'\nassert \nis_polite(4) == 11, 'wrong output'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('is_polite(1)',is_polite(1))\nprint('is_polite(3)',is_polite(3))\nprint('is_polite(12)',is_polite(12))\n\ndef sum_of_divisors(n):\n    '''\n    Write a function to find sum of divisors of n.\n    \n    Note: The sum of divisors of n is equal to\n        1 + 2 + 3 + 4 + n / 2 + n / 3 + n / 4 + \u2026 + n / n.\n    \n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_polite(1) == 1\nassert is_polite(2) == 2\nassert is_polite(3) == 3\nassert is_polite(4) == 4\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_wise([]) == [], \"Empty list\"\nassert pair_wise([1, 2, 3]) == [(1, 2), (2, 3)], \"Wrong first element\"\nassert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)], \"Wrong last element\"\nassert pair_wise([3, 3]) == [(3, 3)], \"Wrong middle\"\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef pair_wise_multidim(l2):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_wise([1, 2, 3]) == [[1, 2], [2, 3]]\nassert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1, 2, 3, 4, 5, 6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\nassert pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_wise([1,2,3]) == [(1, 2), (2, 3), (3, 1)]\nassert     pair_wise([1,4,5,7]) == [(1, 4), (4, 5), (5, 7)]\nassert     pair_wise([]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1,2], [2,3], [3,4], [4,5]]\n\nassert pair_wise([0, 1, 2, 3, 4, 5]) == [[0,1], [1,2], [2,3], [3,4], [4,5]]\nassert pair_wise([0, 1, 2]) == [[0,1], [1,2]]\nassert pair_wise([0, 1]) == [[0,1]]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_pairs_count([1, 3, 4, 5, 8], 6) == 1\nassert get_pairs_count([1, 3, 4, 5, 8], 1) == 5\nassert get_pairs_count([1, 3, 4, 5, 8], 2) == 0"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\n  Write a python function to find the number of pairs whose sum is equal to a particular number. The function gets as input a list of numbers and the sum,\n'''\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert get_pairs_count([1, 2, 3, 4], 2) == 2\nassert get_pairs_count([1, 2, 3, 4], 5) == 0\nassert get_pairs_count([1, 1, 3, 4], 2) == 2\nassert get_pairs_count([1, 1, 3, 4], 5) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert get_pairs_count([1,2,3,4,5], 6) == 2, \"1, 2\"\nassert get_pairs_count([1,2,3,4,5], 6) == 2, \"1, 3\"\nassert get_pairs_count([2,4,6,8,10], 10) == 2, \"2, 4\"\nassert get_pairs_count([1,2,3,4,5,6,7,8], 7) == 1, \"1, 7\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_pairs_count([0, 1, 2, 3, 4], 5) == 1\nassert     get_pairs_count([1, 1, 2, 3, 5], 5) == 3\nassert     get_pairs_count([1, 1, 2, 4, 5], 5) == 2\nassert     get_pairs_count([1, 2, 3, 4, 5], 5) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(get_pairs_count([-1, 1, 2, 3, 4, 5], -1)) # should return 5\nprint(get_pairs_count([-2, -1, 1, 2, 3, 4, 5], -3)) # should return 2\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_pairs_count([10,11,12,13], 14) == 0, 'Wrong'\nassert     get_pairs_count([10,11,12,13], 5) == 2, 'Wrong'\nassert     get_pairs_count([10,11,12,13], 0) == 4, 'Wrong'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(Diff(['a','b','c','d','e'],['a','b','c','f','e']))\n\nprint(Diff([1,2,3,4,5],[1,2,3,4,6]))\n\n\n'''\nTwo words are anagrams if you can rearrange the letters from any of the two words to form a new word. An example is:\n\n\"ifailuhk\" and \"julihkif\" are anagrams.\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Diff([], []) == ([], []), \"Diff should return a 2-element list containing all items that are in li1 but not in li2.\"\nassert     Diff([], [1]) == ([], [1]), \"Diff should return a 2-element list containing all items that are in li1 but not in li2.\"\nassert     Diff([1, 2, 3], [1]) == ([2, 3], []), \"Diff should return a 2-element list containing all items that are in li1 but not in li2.\"\nassert     Diff([1, 2, 3, 4], [1]) == ([2, 3, 4], []), \"Diff should return a 2-element list containing all items that are in li1 but not in li2.\"\nassert     Diff([1, 2, 3, 4, 5], [1]) == ([2, 3, 4, 5], []), \"Diff should return a 2-element list containing all items that are in li1 but not in li2.\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Diff([1, 2, 3, 4], [1, 2, 5, 6]) == [4, 5]\nassert     Diff([1, 2, 3, 4], [1, 2, 5, 6, 7]) == [4, 5]\n\n'''\nFunction to merge two sorted lists.\n'''\ndef Merge(l1, l2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Diff([1,2,3],[1,2,4]) == (set([3]),set([1,2,4]))\nassert     Diff([1,2,3],[1,2]) == (set([3]),set([1,2]))\nassert     Diff([1,2,3],[1,2,3]) == (set(),set([1,2,3]))\nassert     Diff([1,2,3],[2,3]) == (set([1,2]),set([3]))\nassert     Diff([1,2,3,4,5,6],[\"a\",\"b\",\"c\",\"d\",\"e\"]) == (set([1,2,3,4,5,6]),set([\"a\",\"b\",\"c\",\"d\",\"e\"]))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nDiff([1,2,3],[1,2]) == [3]\nDiff([1,2,3],[1]) == [2,3]\nDiff([1],[1,2]) == []\nDiff([1],[1,2,3]) == []\nDiff([1,2,3],[2,3]) == []\nDiff([1,2,3],[1,2,3]) == []"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Diff([1,2,3,4],[4,5,6,7]) == [1,2]\nassert     Diff([1,2,3,4],[]) == []\nassert     Diff([1,2,3],[1,2,3]) == []\nassert     Diff([1,2,3],[1,2,3,4]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_num_sum(0) == 0\nodd_num_sum(1) == 1\nodd_num_sum(2) == 6\nodd_num_sum(3) == 24\nodd_num_sum(4) == 56\nodd_num_sum(5) == 104\nodd_num_sum(6) == 164\nodd_num_sum(7) == 224\nodd_num_sum(8) == 296\nodd_num_sum(9) == 380\nodd_num_sum(10) == 440\nodd_num_sum(11) == 524\nodd_num_sum(12) == 608\nodd_num_sum(13) == 704\nodd_num_sum(14) == 776\nodd_num_sum(15) == 864\nodd_num_sum(16) == 892\nodd_num_sum(17) == 1060\nodd_num_sum(18) == 1136\nodd_num_sum(19) == 1212\nodd_num_sum(20) == 1296\nodd_num_sum(21) == 1384\nodd_num_sum(22) == 1468\nodd_num_sum(23) == 1544\nodd_num_sum(24) == 1620\nodd_num_sum(25) == 1696\nodd_num_sum(26) == 1872\nodd_num_sum(27) == 1947\nodd_num_sum(28) == 2020\nodd_num_sum(29) == 2096\nodd_num_sum(30) == 2192\nodd_num_sum(31) == 2184\nodd_num_sum(32) == 2168\nodd_num_sum(33) == 2144\nodd_num_sum(34) == 2112\nodd_num_sum(35) == 2176\nodd_num_sum(36) == 2160\nodd_num_sum(37) == 2128\nodd_num_sum(38) == 2104\nodd_num_sum(39) == 2192\nodd_num_sum(40) == 2208\nodd_num_sum(41) == 2192\nodd_num_sum(42) == 2184\nodd_num_sum(43) == 2176\nodd_num_sum(44) == 2160\nodd_num_sum(45) == 2128\nodd_num_sum(46) == 2112\nodd_num_sum(47) == 2176\nodd_num_sum(48) == 2144\nodd_num_sum(49) == 2120\nodd_num_sum(50) == 2104\nodd_num_sum(51) == 2192\nodd_num_sum(52) == 2208\nodd_num_sum(53) == 2184\nodd_num_sum(54) == 2176\nodd_num_sum(55) == 2160\nodd_num_sum(56) == 2128\nodd_num_sum(57) == 2104\nodd_num_sum(58) == 2192\nodd_num_sum(59) == 2208\nodd_num_sum(60) == 2184\nodd_num_sum(61) == 2176\nodd_num_sum(62) == 2160\nodd_num_sum(63) == 2128\nodd_num_sum(64) == 2104\nodd_num_sum(65) == 2192\nodd_num_sum(66) == 2208\nodd_num_sum(67) == 2184\nodd_num_sum(68) == 2176\nodd_num_sum(69) == 2160\nodd_num_sum(70) == 2128\nodd_num_sum(71) == 2112\nodd_num_sum(72) == 2176\nodd_num_sum(73) == 2144\nodd_num_sum(74) == 2120\nodd_num_sum(75) == 2104\nodd_num_sum(76) == 2192\nodd_num_sum(77) == 2208\nodd_num_sum(78) == 2184\nodd_num_sum(79) == 2176\nodd_num_sum(80) == 2160\nodd_num_sum(81) == 2128\nodd_num_sum(82) == 2104\nodd_num_sum(83) == 2192\nodd_num_sum(84) == 2208\nodd_num_sum(85) == 2184\nodd_num_sum(86) == 2176\nodd_num_sum(87) == 2160\nodd_num_sum(88) == 2128\nodd_num_sum(89) == 2104\nodd_num_sum(90) == 2192\nodd_num_sum(91) == 2208\nodd_num_sum(92) == 2184\nodd_num_sum(93) == 2176\nodd_num_sum(94) == 2160\nodd_num_sum(95) == 2128\nodd_num_sum(96) == 2104\nodd_num_sum(97) == 2192\nodd_num_sum(98) == 2208\nodd_num_sum(99) == 2184\nodd_num_sum(100) == 2176\nodd_num_sum(101) == 2160\nodd_num_sum(102) == 2128\nodd_num_sum(103) == 2104\nodd_num_sum(104) == 2192\nodd_num_sum(105) == 2208\nodd_num_sum(106) == 2184\nodd_num_sum(107) == 2176\nodd_num_sum(108) == 2160\nodd_num_sum(109) == 2128\nodd_num_sum(110) == 2104\nodd_num_sum(111) == 2192\nodd_num_sum(112) == 2208\nodd_num_sum(113) == 2184\nodd_num_sum(114) == 2176\nodd_num_sum(115) == 2160\nodd_num_sum(116) == 2128\nodd_num_sum(117) == 2104\nodd_num_sum(118) == 2192\nodd_num_sum(119) == 2208\nodd_num_sum(120) == 2184\nodd_num_sum(121) == 2176\nodd_num_sum(122) == 2160\nodd_num_sum(123) == 2128\nodd_num_sum(124) == 2104\nodd_num_sum(125) == 2192\nodd_num_sum(126) == 2208\nodd_num_sum(127) == 2184\nodd_num_sum(128) == 2176\nodd_num_sum(129) == 2160\nodd_num_sum(130) == 2128\nodd_num_sum(131) == 2104\nodd_num_sum(132) == 2192\nodd_num_sum(133) == 2208\nodd_num_sum(134) == 2184\nodd_num_sum(135) == 2176\nodd_num_sum(136) == 2160\nodd_num_sum(137) == 2128\nodd_num_sum(138) == 2104\nodd_num_sum(139) == 2192\nodd_num_sum(140) == 2208\nodd_num_sum(141) == 2184\nodd_num_sum(142) == 2176\nodd_num_sum(143) == 2160\nodd_num_sum(144) == 2128\nodd_num_sum(145) == 2104\nodd_num_sum(146) == 2192\nodd_num_sum(147) == 2208\nodd_num_sum(148) == 2184\nodd_num_sum(149) == 2176\nodd_num_sum(150) == 2160\nodd_num_sum(151) == 2128\nodd_num_sum(152) == 2104\nodd_num_sum(153) == 2192\nodd_num_sum(154) == 2208\nodd_num_sum(155) == 2184\nodd_num_sum(156) == 2176\nodd_num_sum(157) == 2160\nodd_num_sum(158) == 2128\nodd_num_sum(159) == 2104\nodd_num_sum(160) == 2192\nodd_num_sum(161) == 2208\nodd_num_sum(162) == 2184\nodd_num_sum(163) == 2176\nodd_num_sum(164) == 2160\nodd_num_sum(165) == 2128\nodd_num_sum(166) == 2104"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_num_sum(6) == 2\nassert     odd_num_sum(3) == 6\nassert     odd_num_sum(100) == 300\nassert     odd_num_sum(200) == 1200\nassert     odd_num_sum(2) == 4\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(1) == 2\nassert     odd_num_sum(2) == 10\nassert     odd_num_sum(3) == 18\n\nprint('Correct'"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_num_sum(3) == 18, 'odd_num_sum(3) is incorrect'\nodd_num_sum(5) == 441, 'odd_num_sum(5) is incorrect'\nodd_num_sum(20) == 14243, 'odd_num_sum(20) is incorrect'\nodd_num_sum(50) == 2249429, 'odd_num_sum(50) is incorrect'\nodd_num_sum(200) == 92525401, 'odd_num_sum(200) is incorrect'\nodd_num_sum(500) == 404048000, 'odd_num_sum(500) is incorrect'\nodd_num_sum(1000) == 100000000, 'odd_num_sum(1000) is incorrect'\nodd_num_sum(10000) == 5000000000000000000, 'odd_num_sum(10000) is incorrect'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    odd_num_sum(2) == 9\n    odd_num_sum(4) == 27\n    odd_num_sum(6) == 144\n    odd_num_sum(8) == 327"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__': \n    # the following input is used for testing. \n    # please use the following input for the actual testing\n    #num = int(input())\n    num = 10\n    odd_num_sum(num)\n    print(odd_num_sum(num))\n    \n    "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_num_sum(0) == 0, \"case 1\"\nassert     odd_num_sum(1) == 1, \"case 2\"\nassert     odd_num_sum(2) == 9, \"case 3\"\nassert     odd_num_sum(10) == 225, \"case 4\"\nassert     odd_num_sum(16) == 1836, \"case 5\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression(\"((a*b)+(c*d))\") \nassert     not check_expression(\"((a*b)+(c*d))(a+b)\")\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_expression(\")(((a))\") == \"Balanced\"\nassert     check_expression(\"((()))\") == \"Balanced\"\nassert     check_expression(\"((())\") == \"Unbalanced\"\nassert     check_expression(\"((()\")) == \"Unbalanced\"\nassert     check_expression(\"((()))\") == \"Unbalanced\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_expression(\"(((((((1+2)*3)/4))+5)-(6*7))/(8+9))\")     == True\nassert     check_expression(\"(((3+2)*(5-4))/2)\")     == False\nassert     check_expression(\"((3+2)*(5-4))\")     == False\nassert     check_expression(\"((3+2)*(5-4)-6)\")     == False\nassert     check_expression(\"(((3+2)*(5-4)-6)+7)\")     == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_expression(\"((())())(())(())\") == False, \"test 1\"\nassert check_expression(\"((()())())()\") == True, \"test 2\"\nassert check_expression(\"(((())))\") == True, \"test 3\"\nassert check_expression(\"(((())(())))((()))\") == True, \"test 4\"\nassert check_expression(\"(((())(())((())))())\") == True, \"test 5\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_expression('(a+b)') == False, \"For the given expression, 'a + b' is an invalid expression\"\nassert check_expression('((a+b))') == False, \"For the given expression, '((a+b))' is an invalid expression\"\nassert check_expression('(((a+b))))') == False, \"For the given expression, '(((a+b))))' is an invalid expression\"\nassert check_expression('(((a+b))))') == False, \"For the given expression, '(((a+b))))' is an invalid expression\"\nassert check_expression('(((a+b))))') == False, \"For the given expression, '(((a+b))))' is an invalid expression\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nQuestion 3\nhttps://www.hackerrank.com/challenges/ctci-comparator-sorting/problem\nSort a stack of elements using the comparison operator.\n'''\ndef sort_stack(stack):\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression(\"(((((((())()))))))\") == True\nassert     check_expression(\"(((((((())))())))))\") == False\nassert     check_expression(\"((((((())))())))\") == True\nassert     check_expression(\"(()(((((())))))\") == False\nassert     check_expression(\"(((()))(()))\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_expression(\"(a+b)*(c-d)/(e*f)\")     == True \nassert check_expression(\"(((a+(b*c)d)-e)f)g\") == True\nassert check_expression(\"(a+b)+((c*d)-e)\") == False\nassert check_expression(\"(((((a+b)+c)*d)-e)*(f+g))\") == False\nassert check_expression(\"(((a+b)*c)-(d+e))\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    check_expression('((( ( ) ) ) ) )') == True\n    check_expression('((( ) ) ) )') == False\n    check_expression('( ) ) )') == False\n    check_expression('())') == False\n    check_expression('((()))') == True\n    check_expression('(()()())()') == True\n    check_expression('((()())') == False\n    check_expression('((()()()' == False\n    check_expression('((())') == False\n    check_expression('))') == False\n    check_expression('((()))') == False\n    check_expression('((((()))))') == True\n    check_expression('()()') == True\n    check_expression('()()()()()())()()())())()') == True\n    check_expression('(()())(())') == False\n    check_expression('())((()))') == False\n    check_expression('()(((())))') == False\n    check_expression('()((((()))))') == True\n    check_expression(')(') == False\n    check_expression('(()()())(())') == False\n    check_expression('((()()))') == False\n    check_expression('((()))()') == False\n    check_expression('(()(())') == False\n    check_expression('()(()())') == False\n    check_expression('((()(()))') == False\n    check_expression('((()()())(()))') == False\n    check_expression('(((((())))') == True\n    check_expression('((((((()))))))') == True\n    check_expression('(((((((((()))))))))') == True\n    check_expression('((((((((((()))))))))))') == True\n    check_expression('(((((((((((())))))))))') == True\n    check_expression('(()((((((((((((())))))))))))))') == True\n    check_expression('(((()()()()())()))') == False\n    check_expression('(((((((((((()))))))))))()())') == False\n    check_expression('((((((((((((((((((()))))))))))))))())))()())())())())()') == True\n    check_expression
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_expression(\"(1+2)*3/(4-5)\", False) == True \nassert     check_expression(\"(1+2)*3/(4-5))\", False) == False\nassert     check_expression(\"(1+2)*3/(4-5*(6-7))\", False) == True\nassert     check_expression(\"(((1+2)+3)*4)/(5-6)\", False) == True\nassert     check_expression(\"(((1+2)+3)*4)/(5-6)\", True) == True\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_length('i love to code', 1) == 'to code'\nassert     remove_length('i love to code', 2) == 'to'\nassert     remove_length('i love to code', 3) == 'to'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_length(\"kitten\", 1) == \"ktten\", \"Expected: kitten, Actual: %s\" % remove_length(\"kitten\", 1)\nassert     remove_length(\"kitten\", 2) == \"kittn\", \"Expected: kittn, Actual: %s\" % remove_length(\"kitten\", 2)\nassert     remove_length(\"kitten\", 3) == \"kitt\", \"Expected: kitt, Actual: %s\" % remove_length(\"kitten\", 3)\nassert     remove_length(\"kitten\", 4) == \"kitt\", \"Expected: kitt, Actual: %s\" % remove_length(\"kitten\", 4)\nassert     remove_length(\"kitten\", 5) == \"kitte\", \"Expected: kitte, Actual: %s\" % remove_length(\"kitten\", 5)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length(\"\", 1) == \"\"\nassert     remove_length(\"\", 2) == \"\"\nassert     remove_length(\"hello\", 0) == \"\"\nassert     remove_length(\"hello\", 1) == \"\"\nassert     remove_length(\"hello\", 2) == \"hel\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nThe answer of your question should be an array of words, not a string.\n'''\n\ndef delete_end_of_line(test_str):\n    '''\n    Given a string, delete the end of line char(s) and return the new string\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_length('abrakadabra',2) == 'abra'\nassert     remove_length('abrakadabra',3) == 'abra'\nassert     remove_length('abrakadabra',4) == 'abra'\nassert     remove_length('abrakadabra',5) == 'abra'\nassert     remove_length('abrakadabra',6) == 'abra'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length('this is a test', 2) == 'ht is a test'\nassert     remove_length('this is a test', 1) == 'ti s a test'\nassert     remove_length('this is a test', 3) == 'is a tes'\nassert     remove_length('', 1) == ''\nassert     remove_length('this is a test', 0) == 'this is a test'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length('leetcode', 2) == 'lt'\nassert     remove_length('leetcodedoc', 3) == 'cc'\nassert     remove_length('aaaaa', 4) == ''\nassert     remove_length('aaaabbbbdddeeecccddddddeee', 2) == 'dddddddd'\nassert     remove_length('aabbc', 2) == 'aabb'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_length('one two three four', 1) == 'one two three four'\nassert     remove_length('one two three four', 2) == 'one three four'\nassert     remove_length('one two three four', 3) == 'one two four'\nassert     remove_length('one two three four', 4) == 'one two three'\nassert     remove_length('one two three four', 5) == 'one two three four'\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring('abcde', 'abcde') == (1,1)\nassert     occurance_substring('abcde', 'abc') == (1,1)\nassert     occurance_substring('abcde', 'abcd') == (1,2)\nassert     occurance_substring('abcde', 'abcde') == (0,4)\nassert     occurance_substring('abcde', 'abcd') == (0,2)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    occurance_substring('abc', 'abc') == (0, 3)\n    occurance_substring('abc', 'ab') == None\n    occurance_substring('abracadabra', 'ab') == (1, 3)\n    occurance_substring('abracadabra', 'abc') == (0, 3)\n    occurance_substring('abracadabra', 'ad') == (0, 2)\n    occurance_substring('abracadabra', 'abcde') == (0, 3)\n    occurance_substring('abracadabra', 'abcdef') == (0, 5)\n    occurance_substring('abracadabra', 'abcde') == None\n    occurance_substring('abracadabra', 'abcdeabc') == (0, 6)\n    occurance_substring('abracadabra', 'abcdeabcdef') == (0, 6)\n    occurance_substring('abracadabra', 'abcdeabcdefgh') == (0, 6)\n    occurance_substring('abracadabra', 'abcdeabcdefghi') == (0, 6)\n    occurance_substring('abracadabra', 'abcdefghij') == (0, 6)\n    occurance_substring('abracadabra', 'abcdefghijkl') == None\n    occurance_substring('abracadabra', 'abcdefghijklm') == None\n    occurance_substring('abracadabra', 'abcdefghijklmn') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnop') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopq') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqr') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrs') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrst') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstu') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuv') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvw') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwx') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxy') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyz') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyza') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabc') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcde') == (0, 3)\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdef') == (0, 6)\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefgh') == (0, 7)\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghi') == (0, 7)\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghj') == (0, 7)\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghjk') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijk') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkp') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqr') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrs') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsu') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsux') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxy') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyz') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyza') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaa') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaab') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabk') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkp') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpq') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqr') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrs') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrsu') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrsux') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrsuxy') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrsuxyza') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrsuxyzaab') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrsuxyzaabk') == None\n    occurance_substring('abracadabra', 'abcdefghijklmnopqrstuvwxyzabcdefghijkqrsuxyzaabkpqrsuxyz"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring(\"ababacdab\", \"ab\") == (0, 3)\nassert     occurance_substring(\"ababacdab\", \"abab\") == (0, 0)\nassert     occurance_substring(\"ababacdab\", \"ac\") == (1, 2)\nassert     occurance_substring(\"ababacdab\", \"bc\") == (2, 3)\nassert     occurance_substring(\"ababacdab\", \"bd\") == (3, 4)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     occurance_substring(\"abababab\",\"ab\") == (1, 0, 2)\nassert     occurance_substring(\"abababab\",\"ba\") == (None, None, None)\nassert     occurance_substring(\"abababab\",\"ba\",2) == (None, None, None)\n\ndef find_all_occurances(text,pattern):\n    '''\n    Write a function to find all occurrences of the substring in the text and return it in a list.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     occurance_substring(\"bacdadabacdabcd\",\"bacdadabacd\") == None     # no match\nassert occurance_substring(\"bacdadabacdabcd\",\"acdabcdabcd\") == (2,7)     # match\nassert occurance_substring(\"bacdadabacdabcd\",\"d\") == (0,5)     # match\nassert occurance_substring(\"bacdadabacdabcd\",\"acdbcd\") == (3,7)     # match\nassert occurance_substring(\"bacdadabacdabcd\",\"dabcd\") == (1,5)     # match\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     occurance_substring('restart','restart') == (0, 0)\nassert occurance_substring('restart','st') == (1, 1)\nassert occurance_substring('restart', 'trst') == (2, 3)\nassert occurance_substring('restart', 'y') == (0, 1)\nassert occurance_substring('restart', 'xy') == (0, 2)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('aaaaa', 'aa') == None\nassert     occurance_substring('b', 'a') == None\nassert     occurance_substring('aaaaa', 'aaaa') == None\nassert     occurance_substring('aaaaa', 'aaaaa') == 'aaaaa'\nassert     occurance_substring('aaaaa', 'a') == 'a'\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert occurance_substring(\"It's a bird,it's a plane,it's a cat,it's a dog\",'cat') == (1,5)\nassert occurance_substring(\"It's a bird,it's a plane,it's a cat,it's a dog\",'dog') == (5,8)\nassert occurance_substring(\"I love apple but apple is better than banana\",'apple') == (0,4)\nassert occurance_substring(\"I love apple but apple is better than banana\",'banana') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     occurance_substring(\"this is a sample string\", \"a\") == (0, 0)\nassert     occurance_substring(\"this is a sample string\", \"is\") == (0, 2)\nassert     occurance_substring(\"this is a sample string\", \"am\") == (0, 1)\nassert     occurance_substring(\"this is a sample string\", \"sample\") == (0, 4)\nassert     occurance_substring(\"this is a sample string\", \"s\") == (0, 1)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_position([3,4,1,2]) == True, 'Wrong output for odd_position([3,4,1,2])'\nassert odd_position([1,2,3]) == False, 'Wrong output for odd_position([1,2,3])'\nassert odd_position([1,2,3,4]) == False, 'Wrong output for odd_position([1,2,3,4])'\nassert odd_position([1,2,3,4,5]) == False, 'Wrong output for odd_position([1,2,3,4,5])'\nassert odd_position([1,2,3,4,5,6]) == False, 'Wrong output for odd_position([1,2,3,4,5,6])'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_position([1,2,3,4,5]) == True\nassert odd_position([2,3,4,5,1]) == True\nassert odd_position([3,5,1]) == True\nassert odd_position([1,2,3,4,5,6,7]) == True\nassert odd_position([3,4,5,6]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9,10]) == True, \"Not expected output\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == True, \"Not expected output\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9]) == True, \\\n'Wrong Answer. Correct Answer is True.'\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == False, \\\n'Wrong Answer. Correct Answer is False.'\n\n\n\ndef prime_factors(n):\n    '''\n    Write a python program to count the number of prime factors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_position([1, 3, 5, 7, 9, 11]) == True\nassert     odd_position([1, 3, 5, 7, 9, 10]) == False\nassert     odd_position([1, 3, 5, 7, 9, 11]) == False\nassert odd_position([]) == False\nassert odd_position([1, 4, 5]) == False\nprint(\"Your code is CORRECT!\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(odd_position([1,2,3,4,5]))\nassert odd_position([1,3,5,7,9]) == False\nassert odd_position([1,2,3,4,5,6,7,8]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_position([3,1,5,4,8,1,2,1]) == True\nassert \nodd_position([2,5,8,6,3]) == False\nassert \nodd_position([8,2,4,1,6,8]) == True\nassert \nodd_position([5,5,5,5,5,5]) == False\n\nprint('You have passed all the tests! Congrats!'"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_position([1, 4, 6, 10, 15, 16, 18, 22]) == True, \"false\"\nassert     odd_position([1, 4, 6, 10, 15, 16, 18, 23]) == False, \"false\"\nassert     odd_position([1, 4, 6, 10, 15, 16, 18, 22, 23]) == True, \"false\"\nassert     odd_position([1, 4, 6, 10, 15, 16, 18, 22, 30]) == False, \"false\"\nassert     odd_position([1, 4, 6, 10, 15, 16, 18, 22, 30, 33]) == False, \"false\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_position([1,3,4,2]) == True\nassert     odd_position([1,2,3,4,5]) == False\nassert     odd_position([1,2,3,4,5,6,7,8]) == True\nassert     odd_position([1,2,3,4,5,6,7,8,9]) == False\nassert     odd_position([]) == True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels('akakakakaka') == 7\nassert     count_vowels('akakakakakak') == 10\nassert     count_vowels('akakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakaka"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_vowels('Codewars') == 1\nassert     count_vowels('Coding') == 2\nassert     count_vowels('Python') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_vowels(str) == 5\n\ndef count_vowels(s):\n    return sum(1 for x in s if x in 'aeiou')\n\nassert count_vowels('hello') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels('PatafePatafePatafe') == 3\nassert     count_vowels('PatafePatafe') == 0\nassert     count_vowels('Patafe') == 2\nassert     count_vowels('Patafe') == 0\nassert     count_vowels('Patafe') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_vowels('hello') == 5\nassert     count_vowels('harry') == 7\nassert     count_vowels('abd') == 2\nassert     count_vowels('abccc') == 4\nassert     count_vowels('abcca') == 4\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels(\"mango\") == 2\nassert count_vowels(\"abracadabra\") == 5\nassert count_vowels(\"abc\") == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels('hello') == 0\nassert     count_vowels('leetcode') == 1\nassert     count_vowels('there') == 1\nassert     count_vowels('testing') == 3\nassert     count_vowels('hieeelalaooo') == 5\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_vowels('abracadabra') == 5\nassert     count_vowels('dart') == 0\nassert     count_vowels('hannah') == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_vowels('abracadabra') == 5\nassert     count_vowels('Hello World') == 5\nassert     count_vowels('hELLO wORLD') == 5\nassert     count_vowels('I love Python') == 3\nassert     count_vowels('I love Python and C') == 2\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_sum([3, 5, 6, 7, 8, 9, 1, 2, 3]) == 26, \"Should be 26\"\nassert     find_sum([1, 2, 3, 4, 5]) == 6, \"Should be 6\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_sum([]) == 0, \"empty list\"\nassert     find_sum([1,1,2]) == 3, \"single numbers\"\nassert     find_sum([1,1,1]) == 2, \"single number twice\"\nassert     find_sum([1,2,3,3,2]) == 7, \"multiple numbers\"\nassert     find_sum([1,2,3,4,3,2]) == 9, \"multiple numbers twice\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_sum([1, 2, 3, 4, 5, 6, 5]) ==     11\nassert     find_sum([1, 1, 1]) ==     3\nassert     find_sum([]) ==     0\n\n'''\nWrite a python function to check whether a given list is a mountain or not.\n'''\n\ndef is_mountain(arr): \n    '''\n    A mountain is a series of consecutive numbers increasing at a constant rate, i.e., the numbers increase by an increasing value every time.\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_sum([1,3,5,2,3,4,5]) == 5, 'Testcase 1'\nassert find_sum([1,3,5,7,2,3,4,5]) == 11, 'Testcase 2'\nassert find_sum([1,1,1,1,1,1]) == 1, 'Testcase 3'\nassert find_sum([1,2,3,4,5,6]) == 15, 'Testcase 4'\nassert find_sum([1,2,3,4,5,6,1]) == 8, 'Testcase 5'\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_sum([1, 1, 3, 5, 7, 8, 1, 4, 3]) == 0\nassert     find_sum([1, 1, 3, 5, 7, 8, 1, 4, 3, 3, 4]) == 0\nassert     find_sum([1, 1, 3, 5, 7, 8, 1, 4, 3, 3, 4, 2, 2, 4]) == 0\nassert     find_sum([1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5]) == 5\nassert     find_sum([1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5, 5]) == 10\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_sum([1,2,3,4,5]) == 15, \"Output should be 15\"\nassert     find_sum([5,2,3,4,5]) == 10, \"Output should be 10\"\nassert     find_sum([2,3,3,2,2,5]) == 10, \"Output should be 10\"\nassert     find_sum([5,5,5,5,5]) == 5, \"Output should be 5\"\nassert     find_sum([]) == 0, \"Output should be 0\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(find_sum([1,1,2,3,3,4]))\nprint(find_sum([1,1,1,1,1]))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_sum([1,2,3,4,5,5]) == 8\nfind_sum([10,1,2,3,4,5]) == 33\nfind_sum([1,2,3,4,5,5,4,3,2,1,5]) == 55\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_sum([1,3,5,6,7]) == 13, \"Should be 13\"\nassert     find_sum([1,2,3,3,3,4]) == 6, \"Should be 6\"\nassert     find_sum([1,1,2,2,3,4]) == 5, \"Should be 5\"\nassert     find_sum([1,1,2,2,3,4,2,3,3,4]) == 10, \"Should be 10\"\nassert     find_sum([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4]) == [[1,2],[3,4]]\nassert     pack_consecutive_duplicates([1,2,3,2]) == [[1,2],[2],[3]]\nassert     pack_consecutive_duplicates([1,2,3,4,3,4,3,4]) == [[1,2,3,4],[3,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,3,4,2,4]) == [[1,2,3,4],[2,4],[3]]\nassert     pack_consecutive_duplicates([1,1,2,3,4,4,3,4]) == [[1,1],[2],[3,4,4],[3]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1]) == [[1, 2, 3, 4, 5, 6], \n                            [7, 8, 8, 7, 6], \n                            [5, 4, 3, 2, 1]]\nassert pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]) == [[1, 1, 2, 2],\n                            [3, 3, 4, 4],\n                            [5, 5, 6, 6],\n                            [7, 7, 8, 8],\n                            [9, 9]]\nassert pack_consecutive_duplicates([]) == []\nassert pack_consecutive_duplicates(None) == None\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1,2,3]) == [[1], [2], [3]]\nassert     pack_consecutive_duplicates([0,0,0,0]) == [[0, 0], [0, 0], [0, 0], [0, 0]]\nassert     pack_consecutive_duplicates([0,1,0,0,0,2,0,0]) == [[0, 0, 0], [1], [0, 0], [0, 0], [0, 2], [0, 0], [0, 0]]\nassert     pack_consecutive_duplicates([0,1,2,0,0,0]) == [[0, 0, 0], [1], [2], [0, 0], [0, 0], [0, 0]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([2,4,4,5,2,1]) == [[2, 4], [4, 5], [2, 1]]\nassert     pack_consecutive_duplicates([2,4,4,5,2,1,1,1,2]) == [[2, 4], [4, 5], [2, 1, 2, 1, 1], [2, 1]]\n\ndef group_by_ascii_sum(s):\n    '''\n    Write a function to group the elements of a list of strings into lists of strings where the ascii sum of the elements of the sublist is a palindrome.\n    '''\n    pass\n\ndef group_by_ascii_sum_rec(lst, group_lst):\n    '''\n    Write a function that takes in a list of strings and groups them into sublists based on the ascii sum of the strings.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'd', 'e', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'j', 'k', 'k', 'k']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'k', 'k']\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8]) == [[0,1,2,3,4], [5,6,7,8]]\nassert     pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9,0]) == [[0,1,2,3,4], [5,6,7,8,9]]\nassert     pack_consecutive_duplicates([]) == []\n\ndef mergesort_recursive(list1):\n    '''\n    Write a function that mergesort a given list element in-place using recursion.\n    '''\n    pass\n\ndef mergesort_iterative(list1):\n    '''\n    Write a function that mergesort a given list element in-place using iterative.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 18, 19]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 18, 19]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([]) == []\n\nimport itertools\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates(['cat','dog','cat','mouse']) == [['cat','dog'],['cat','mouse']]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1,2,3,3,4]) == [[1,2],[3,4]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates([4,2,2,1,1]) == [[4,2],[2,1,1]]\nassert     pack_consecutive_duplicates([4,2,2,1,2,1]) == [[4,2],[2,1,1],[2,1],[1]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1,2,3]) == [[1],[2],[3]]\nassert     pack_consecutive_duplicates([4,2,1,1,1]) == [[4,2],[2,1,1,1]]\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([1,1,1]) == {(1,):3}, \"First\"\nassert     unique_sublists([1,1,1,1]) == {(1,):4}, \"Second\"\nassert     unique_sublists([1,1,1,1,1]) == {(1,):5}, \"Third\"\nassert     unique_sublists([1,1,1,1,1,1]) == {(1,):6}, \"Fourth\""
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([[1,2,2,2,2,2,3,1,1,2],[[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]],[[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]]) == {([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],): 5, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 4, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 5, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 3, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 2, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 2, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 2, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 1, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 1, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 0, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 0, ([1, 1, 1, 1, 1, 1, 1, 1, 1],): 0}\n\ndef same_values(array1, array2):\n    '''\n    Write a function that returns True if both the arrays have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[1]]) == {(1,): 1}\nassert     unique_sublists([1,2,3,4,5,6,7]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1, (5,): 1, (6,): 1, (7,): 1}\nassert     unique_sublists([1,2,3,4,5,6,7,8]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1, (5,): 1, (6,): 1, (7,): 1, (8,): 1}\nassert     unique_sublists([1,2,3,4,5,6,7,8,9]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1, (5,): 1, (6,): 1, (7,): 1, (8,): 1, (9,): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n'''\nThis function tests the solution against a few test cases.\n'''\n\nassert unique_sublists([]) == {}\n\nassert unique_sublists([1,2]) == {(1,): 1, (2,): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([]) == {() : 0}\nassert     unique_sublists([1, 1, 2, 3, 3, 3, 4]) == {(1,), (2,), (3,), (4,)}\nassert     unique_sublists([1, 1, 2, 3, 3, 4]) == {(1,), (2,), (3,)}\nassert     unique_sublists([1, 1, 2, 2, 3]) == {(1,), (2,), (3, 2)}\nassert     unique_sublists([1, 1, 2, 2, 2]) == {(1,), (2,), (2, 2)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([2,1,4,3,3,2,1,3,1,2,1]) == {(1, 3): 3, (4, 2): 1, (2, 1): 4, (1, 2): 3}\nassert     unique_sublists([1,1,1]) == {(1, 1): 3}\nassert     unique_sublists([1,1,1,1]) == {(1, 1): 4}\nassert     unique_sublists([2,2,1,1]) == {(2, 1): 3}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef unique_sublists(l):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n\n\n'''\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[], 'a', 'a', 'a']) == {([], 3), ('a', 2), ('a', 1), ('a', 1)}\nassert     unique_sublists([[], 'a', 'a', 'a', 'a']) == {([], 3), ('a', 2), ('a', 1), ('a', 1), ('a', 1)}\nassert     unique_sublists([[], 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == {([], 3), ('a', 2), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1)}\nassert     unique_sublists([[], 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == {([], 3), ('a', 2), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a'"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([\"a\", \"b\", \"c\", \"a\"]) == {('a',): 1, ('b',): 1, ('c',): 1}\nassert     unique_sublists([\"a\", \"b\", \"c\"]) == {('a',): 1, ('b',): 1, ('c',): 0}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1]) == {}\nassert     unique_sublists([1, 1]) == {(1,): 2}\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations([(1, 3), (2, 2), (3, 1), (4, 1)]) == [\n        (1, 3),\n        (2, 2),\n        (3, 1),\n        (4, 1)\n    ], 'Your find_combinations() has returned incorrect result!'\nprint('find_combinations() test: PASSED')\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_combinations([[0, 2], [1, 2], [2, 2]]) == [[0, 2], [1, 2], (2, 2)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([[3, 4, 5], [-2, 0], [3, -1]]) == {(0, 3, -2), (3, 4, -1)}\nassert     find_combinations([[3, 4, 5], [-2, 0]]) == {(0, 3, -2)}\n\ndef find_combinations_2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_combinations([(1,2),(2,3)])==[(1,2,3)]\nassert     find_combinations([(1,2,3),(2,3,4)])==[(1,2,3,4)]\nassert     find_combinations([(1,2,3),(2,3,4),(1,4,5)])==[(1,2,3,4,5)]\nassert     find_combinations([(1,2,3,4),(2,3,4,5),(1,2,3,5)])==[(1,2,3,4,5)]\nassert     find_combinations([(1,2,3,4,5),(2,3,4,5,6),(1,2,3,4,6)])==[(1,2,3,4,5,6)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(find_combinations([(1,2),(3,4)]) == \n    [\n        (1,3),\n        (1,4),\n        (2,3),\n        (2,4),\n        (3,4)\n    ]\n    )\n\nassert\n\nprint(find_combinations([(1,2),(3,4),(5,6)]) == \n    [\n        (1,2,3),\n        (1,2,4),\n        (1,2,5),\n        (1,2,6),\n        (1,3,4),\n        (1,3,5),\n        (1,3,6),\n        (1,4,5),\n        (1,4,6),\n        (2,3,4),\n        (2,3,5),\n        (2,3,6),\n        (2,4,5),\n        (2,4,6),\n        (3,4,5),\n        (3,4,6)\n    ]\n    )\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([(1, 3), (2, 5), (3, 6)]) == [(1, 2, 3), (1, 3, 5), (1, 6), (2, 3, 5), (2, 5, 6), (3, 5, 6)]\nassert     find_combinations([(1, 3), (2, 5), (3, 6)]) == [(1, 2, 3), (1, 3, 5), (1, 6), (2, 3, 5), (2, 5, 6), (3, 5, 6)]\nassert     find_combinations([(1, 3), (2, 5), (3, 6)]) == [(1, 2, 3), (1, 3, 5), (1, 6), (2, 3, 5), (2, 5, 6), (3, 5, 6)]\nassert     find_combinations([(1, 3), (2, 5), (3, 6)]) == [(1, 2, 3), (1, 3, 5), (1, 6), (2, 3, 5), (2, 5, 6), (3, 5, 6)]\n\ndef all_combinations(test_list):\n    '''\n    Write a function to generate all combinations of lists in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_combinations([(5,4),(3,2),(5,5)]) == [(5,4),(3,2),(5,5)]\nassert     find_combinations([(3,1),(1,2)]) == [(3,1),(1,2)]\nassert     find_combinations([(4,1),(1,1)]) == []\nassert     find_combinations([]) == []\nassert     find_combinations([]) == []\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(5,8)}\nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(2,1),(5,8)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),(5,1),(1,1),(1,1),(1,1)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),(5,1),(1,1),(1,1),(1,1)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(2,1),(5,8)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(2,1),(5,8)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),(5,1),(1,1),(1,1),(1,1)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),(5,1),(1,1),(1,1),(1,1)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(2,1),(5,8)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(2,1),(5,8)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),(5,1),(1,1),(1,1),(1,1)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),(5,1),(1,1),(1,1),(1,1)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(1,1),(1,1),(1,1),(1,1),(1,1)]) == \n{(1,1),(1,1),(1,1),(1,1),(1,1)}\nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(2,1),(5,8)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(2,3),(3,5),(2,1),(5,8)]) == \n{(2,3),(3,5),(2,1),(5,8)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(1,2),(2,4),(3,1),(4,2)]) == \n{(1,2),(2,4),(3,1),(4,2)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),(5,1),(1,1),(1,1),(1,1)}\nfind_combinations([(3,2),(5,1),(1,1),(1,1),(1,1)]) == \n{(3,2),("
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2, 3, 4), (1, 2, 5, 6), (1, 3, 5, 6), (1, 4, 5, 6), (2, 3, 4, 5), (2, 4, 5, 6), (3, 4, 5, 6), (4, 5, 6), (5, 6)]\nassert    find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [(1, 2, 3, 4, 5, 6), (1, 2, 3, 6, 7, 9), (1, 2, 3, 6, 7, 10), (1, 2, 4, 5, 6, 9), (1, 2, 4, 5, 6, 10), (1, 2, 4, 6, 7, 9), (1, 2, 4, 6, 7, 10), (1, 3, 4, 5, 6, 9), (1, 3, 4, 5, 6, 10), (1, 3, 4, 6, 7, 9), (1, 3, 4, 6, 7, 10), (1, 4, 5, 6, 9), (1, 4, 5, 6, 10), (1, 4, 6, 7, 9), (1, 4, 6, 7, 10), (2, 3, 4, 5, 6, 9), (2, 3, 4, 5, 6, 10), (2, 3, 4, 6, 7, 9), (2, 3, 4, 6, 7, 10), (2, 4, 5, 6, 9), (2, 4, 5, 6, 10), (2, 4, 6, 7, 9), (2, 4, 6, 7, 10), (3, 4, 5, 6, 9), (3, 4, 5, 6, 10), (3, 4, 6, 7, 9), (3, 4, 6, 7, 10), (4, 5, 6, 9), (4, 5, 6, 10), (4, 5, 6, 9), (4, 6, 7, 9), (4, 6, 7, 10), (5, 6, 9), (5, 6, 10)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations([(3,), (5,)]) == [(3,), (5,)]\nassert     find_combinations([(1, 2), (2,), (3, 4, 5), (4,), (5,)]) == [(1, 2), (2,), (3, 4, 5), (4,), (5,)]\nassert     find_combinations([(5, 4, 3, 2, 1), (2, 4, 3, 2), (1, 3, 4, 5), (2, 3, 4, 5), (1, 2, 3, 4, 5)]) == [(5, 4, 3, 2, 1), (2, 4, 3, 2), (1, 3, 4, 5), (2, 3, 4, 5), (1, 2, 3, 4, 5)]\nassert     find_combinations([(5, 4, 3, 2, 1), (2, 4, 3, 2), (1, 3, 4, 5), (2, 3, 4, 5), (1, 2, 3, 4, 5)]) == [(5, 4, 3, 2, 1), (2, 4, 3, 2), (1, 3, 4, 5), (2, 3, 4, 5), (1, 2, 3, 4, 5)]\n\nif __name__ == '__main__':\n    # test your function\n    #     write your own input set\n    #     check whether the output is correct\n    #     write a test function that takes in a single tuple\n    #     check whether the output is correct\n    test_list = [(0, 3), (0, 4, 5), (0, 1, 4), (1, 3), (0, 1, 2, 3)]\n    print('Test: {}'.format(test_list))\n    "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_divisors(5) == 1, 'Check the correctness of count_divisors'\nassert     count_divisors(4) == 2, 'Check the correctness of count_divisors'\nassert     count_divisors(1) == 1, 'Check the correctness of count_divisors'\nassert     count_divisors(2) == 1, 'Check the correctness of count_divisors'\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_divisors(2) == 1\nassert count_divisors(3) == 1\nassert count_divisors(4) == 1\nassert count_divisors(6) == 2\nassert count_divisors(7) == 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    count_divisors(4) == 4\n    count_divisors(10) == 10\n    count_divisors(15) == 10\n    count_divisors(6) == 4\n\n\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef summation_digits(n):\n    '''\n    Write a python function to check whether the summation of the digits in a number is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_divisors_brute(n) : \n    '''\n    Write a python function to count the number of divisors of n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_divisors(3) == 6\nassert     count_divisors(15) == 15\nassert count_divisors(12) == 3\nassert count_divisors(18) == 3\nassert count_divisors(25) == 5\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_divisors(4) == 5\nassert     count_divisors(6) == 8\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_divisors(3) == 1\ncount_divisors(7) == 2\ncount_divisors(11) == 3\n\ndef find_prime_factors(n):\n    '''\n    Write a python function to find all prime factors of a given number n.\n    https://www.geeksforgeeks.org/python-program-for-factors-of-a-given-number/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_length_sum([1, 2, 3, 4]) == 10\nassert     odd_length_sum([1, 2, 3, 4, 5]) == 4 + 8 + 12 + 16\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 4 + 8 + 12 + 16 + 20\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4 + 8 + 12 + 16 + 20 + 24\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4 + 8 + 12 + 16 + 20 + 24 + 28\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_of_odd_length_subarrays(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 20\nassert odd_length_sum([1, 2, 3, 5, 6, 5]) == 12\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 12\nassert odd_length_sum([1, 2, 3, 5, 6, 5, 2, 2]) == 6"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 15\nassert     odd_length_sum([1, 2, 3, 5, 6]) == 18\nassert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 21\nassert     odd_length_sum([2, 3, 4, 5, 6]) == 15\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 16\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 21\nassert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 10\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 71\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 141\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_length_sum([1, 4, 1, 2, 0, 1, 0, 1]) == 7\nassert odd_length_sum([1, 2, 3, 4, 5, 6]) == 13\nassert odd_length_sum([1, 1, 1, 1]) == 6\nassert odd_length_sum([1, 3, 4, 5, 2]) == 13\nassert odd_length_sum([1, 3, 4, 5, 2, 1]) == 8\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_length_sum(arr = [1,2,3,4]) == 5\nodd_length_sum(arr = [1,2,3]) == 3\nodd_length_sum(arr = [1,2]) == 1\nodd_length_sum(arr = [1]) == 1\nodd_length_sum(arr = []) == 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rgb_to_hsv(100,100,100) == (0,0,0)\nassert     rgb_to_hsv(255,255,255) == (360,0,0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rgb_to_hsv(1, 2, 3) == (60.0 / 360.0, 1.0, 1.0)\nassert     rgb_to_hsv(1, 2, 1) == (60.0 / 360.0, 1.0, 1.0)\nassert     rgb_to_hsv(1, 2, 0) == (60.0 / 360.0, 1.0, 0.0)\nassert     rgb_to_hsv(1, 1, 1) == (60.0 / 360.0, 0.0, 1.0)\nassert     rgb_to_hsv(1, 0, 1) == (60.0 / 360.0, 0.0, 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rgb_to_hsv(1, 2, 3) == (0.8, 0.7, 1.0)\nassert     rgb_to_hsv(0, 2, 1) == (0.0, 0.7, 1.0)\nassert     rgb_to_hsv(0, 2, 0) == (0.0, 0.0, 1.0)\nassert     rgb_to_hsv(1, 2, 0) == (0.8, 0.7, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \n\n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rgb_to_hsv(255, 0, 0) == (1.0, 0.0, 0.0)\nassert rgb_to_hsv(0, 255, 0) == (0.0, 1.0, 0.0)\nassert rgb_to_hsv(0, 0, 255) == (0.0, 0.0, 1.0)\nassert rgb_to_hsv(100, 200, 100) == (0.25, 0.75, 0.25)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Successfully passed the rgb_to_hsv tests!\""
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rgb_to_hsv(1, 2, 3) == (60.0, 1.0, 1.0)\nassert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(255, 255, 255) == (180.0, 1.0, 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([2,3,4,5]) == (24,0)\nassert     mul_even_odd([4,5,6,7]) == (120,0)\nassert     mul_even_odd([1,3,5,7]) == (6,0)\nassert     mul_even_odd([2,4,6,8]) == (48,0)\nassert     mul_even_odd([2,4,6,8,10]) == (240,0)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == [10,15,20,25,30], \"Test case failed\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mul_even_odd([2,5,3,8,1,9,4,10]) == 120\nassert     mul_even_odd([-1,-2,3,4,5]) == -60\nassert mul_even_odd([-1,-2,3,-4,-5]) == -60\n\n\ndef is_palindrome(word):\n    '''\n    Write a function that checks whether a word is a palindrome or not. A palindrome is a word that can be spelled the same forwards and backwards.\n    '''\n    #return word == word[::-1]\n    return word == word[::-1]"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mul_even_odd([2, 3, 4, 5]) == 30, \\\n    \"mul_even_odd([2, 3, 4, 5]) == 30 is wrong\"\nassert     mul_even_odd([6, 7, 8, 9, 10]) == 210, \\\n    \"mul_even_odd([6, 7, 8, 9, 10]) == 210 is wrong\"\nassert     mul_even_odd([1, 1, 1]) == 1, \\\n    \"mul_even_odd([1, 1, 1]) == 1 is wrong\"\nassert     mul_even_odd([-1, -2, -3]) == -30, \\\n    \"mul_even_odd([-1, -2, -3]) == -30 is wrong\"\n\n\ndef mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n    # even list\n    even = []\n    # odd list\n    odd = []\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(odd)\n    print(even)\n    sum = 1\n    for i in even:\n        sum = sum*i\n    print(\"even\", sum)\n    sum = 1\n    for i in odd:\n        sum = sum*i\n    print(\"odd\", sum)\n    return sum\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmul_even_odd([5, 6, 7, 8, 9, 10, 11, 12]) == 4\n\nmul_even_odd([1, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 6, 'Pass'\nassert     mul_even_odd([1,2,3,4,6,7]) == 42, 'Pass'\nassert     mul_even_odd([1,2,3,4,6]) == 6, 'Pass'\nassert     mul_even_odd([1,2,3,4]) == 6, 'Pass'\nassert     mul_even_odd([1,2,3]) == 6, 'Pass'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mul_even_odd([2,3,4,5,6,7,8,9,10]) == 48\nassert     mul_even_odd([1,2,3,4,5]) == 6\nassert     mul_even_odd([2,3,4,5,6,7,8]) == 24\nassert     mul_even_odd([]) == Non"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5]) == None, \"Should return None\"\nassert     mul_even_odd([1, 2, 3, 4]) == None, \"Should return None\"\nassert     mul_even_odd([1, 2, 3, 4, 5, 6]) == None, \"Should return None\"\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7]) == None, \"Should return None\"\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == None, \"Should return None\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5]) == [120, 60]\nassert     mul_even_odd([1, 2, 3, 4, 5, 6]) == [120, 60, 40, 30]\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7]) == [120, 60, 40, 30, 20]\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [120, 60, 40, 30, 20, 10]\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [120, 60, 40, 30, 20, 10, 0]\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int(('a','b','c','d','e','f')) == ((1,2,3,4,5,6),)\nassert     tuple_str_int(('a','b','c','d','e','f','g','h')) == ((1,2,3,4,5,6), (7,8,9,10,11,12))\nassert     tuple_str_int(('a','b','c','d','e','f','g','h','i')) == ((1,2,3,4,5,6), (7,8,9,10,11,12))\nassert     tuple_str_int(('a','b','c','d','e','f','g','h','i','j')) == ((1,2,3,4,5,6), (7,8,9,10,11,12))\nassert     tuple_str_int(('a','b','c','d','e','f','g','h','i','j','k')) == ((1,2,3,4,5,6), (7,8,9,10,11,12))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int((\"(1,2)\", \"(3,4)\", \"(5,6)\") ) == (1, 2, 3, 4, 5, 6)\nassert tuple_str_int((\"1,2\", \"3,4\", \"5,6\") ) == (1, 2, 3, 4, 5, 6)\nassert tuple_str_int((\"1,2\", \"3,4\", \"5,6,7\") ) == (1, 2, 3, 4, 5, 6)\nassert tuple_str_int((\"(1,2)\", \"(3,4)\", \"(5,6)\") ) == (1, 2, 3, 4, 5, 6)\nassert tuple_str_int((\"1,2,3,4,5,6\") ) == (1, 2, 3, 4, 5, 6)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int('(2,2)') == (2, 2), \"Wrong\"\nassert     tuple_str_int('(1.2,2)') == (1.2, 2), \"Wrong\"\nassert     tuple_str_int('(\"s1\",\"s2\")') == (\"s1\", \"s2\"), \"Wrong\"\nassert     tuple_str_int('(\"a\",\"b\")') == (\"a\", \"b\"), \"Wrong\"\nassert     tuple_str_int('(\"a\",\"b\")') == (\"a\", \"b\"), \"Wrong\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntest_str = (\"(3,4,5,6)\", \"(3,4,5)\", \"(3,4)\", \"(3,)\", \"())\")\nfor test_str in test_str:\n    print(tuple_str_int(test_str))"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         tuple_str_int('(1,2,3)') == (1,2,3)\nassert         tuple_str_int('(1,2)') == (1,2)\nassert         tuple_str_int('(1,2,3)') == (1,2,3)\nassert         tuple_str_int('(1,2,3,5,6)') == (1,2,3,5,6)\nassert         tuple_str_int('(1,2,3,4)') == (1,2,3,4)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int('1,2,3') == (1, 2, 3), \"Wrong Tuple\"\nassert     tuple_str_int('2') == (2,), \"Wrong Tuple\"\nassert     tuple_str_int('2,3') == (2, 3), \"Wrong Tuple\"\nassert     tuple_str_int('2,3,') == (2, 3,), \"Wrong Tuple\"\nassert     tuple_str_int('2,3,4') == (2, 3, 4), \"Wrong Tuple\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, )') == (1,)\nassert     tuple_str_int('(, )') == (,)\nassert     tuple_str_int('(  )') == ()\nassert     tuple_str_int('()') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int('(1, 2)') == (1, 2), 'incorrect tuple_str_int'\nassert     tuple_str_int('(1, )') == (1,), 'incorrect tuple_str_int'\nassert     tuple_str_int('((1, 2), )') == ((1, 2),), 'incorrect tuple_str_int'\nassert     tuple_str_int('((1, 2), )') == ((1, 2),), 'incorrect tuple_str_int'\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert right_insertion([1, 2, 3, 4], 0) == 0, 'Not in order!'\nassert right_insertion([1, 2, 3, 4], 4) == 3, 'Not in order!'\nassert right_insertion([1, 2, 3, 4], 2) == 2, 'Not in order!'\nassert right_insertion([1, 2, 3, 4], 5) == 4, 'Not in order!'\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     right_insertion([2,3,5,7,8,11], 5) == 3\nassert     right_insertion([2,3,5,7,8,11], 2) == 0\nassert     right_insertion([2,3,5,7,8,11], 0) == 5\nassert     right_insertion([2,3,5,7,8,11], 7) == 4\nassert     right_insertion([2,3,5,7,8,11], 8) == 5\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \na = [0,1,2,3,4]\nassert right_insertion(a, 5) == 4\nassert right_insertion(a, 0) == 0\nassert right_insertion(a, -1) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     right_insertion(list(range(1,10)), 4) == 4\nassert     right_insertion(list(range(1,10)), 8) == 6\nassert     right_insertion(list(range(1,10)), 9) == 7\nassert     right_insertion(list(range(1,10)), 1) == 1\nassert     right_insertion(list(range(1,10)), 0) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Example 1:\n    arr = [1, 3, 5, 6]\n    x = 5\n    print(right_insertion(arr, x)) # Output: 2\n\n    # Example 2:\n    arr = [1, 3, 5, 6]\n    x = 2\n    print(right_insertion(arr, x)) # Output: 1\n\n    # Example 3:\n    arr = [1, 3, 5, 6]\n    x = 7\n    print(right_insertion(arr, x)) # Output: 4\n\n    # Example 4:\n    arr = [1, 3, 5, 6]\n    x = 0\n    print(right_insertion(arr, x)) # Output: 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(right_insertion([1,2,3,4,5],2))\nprint(right_insertion([1,2,3,4,5],10))\nprint(right_insertion([1,2,3,4,5],6))\nprint(right_insertion([1,2,3,4,5],9))\nprint(right_insertion([1,2,3,4,5],4))\nprint(right_insertion([1,2,3,4,5],5))\nprint(right_insertion([1,2,3,4,5],0))\nprint(right_insertion([1,2,3,4,5],1))\nprint(right_insertion([1,2,3,4,5],100))\n\n\ndef insert_sort(a):\n    '''\n    Write a function to sort a list using Insertion sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     right_insertion([1,2,3], 3) == 2\nassert     right_insertion([1,2,3], 3) == 2\nassert     right_insertion([1,2,3], 1) == 0\nassert     right_insertion([1,2,3], 1) == 0\nassert     right_insertion([1,2,3], 4) == 3\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    right_insertion([1,2,3,4,5], 4) == 3\n    right_insertion([1,2,3,4,5], 0) == 0\n    right_insertion([1,2,3,4,5], 5) == 4\n    right_insertion([1,2,3,4,5], 6) == 5\n    right_insertion([1,2,3,4,5], 7) == 6\n    right_insertion([1,2,3,4,5], 0) == 0\n    right_insertion([1,2,3,4,5], -1) == 0\n    right_insertion([1,2,3,4,5], 5) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_left_bound(a, x):\n    '''\n    Write a function to find left bound (lowest value) of a given value x in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_insertion([], 7) == 1\nassert     right_insertion([1, 2, 3, 4], 7) == 4\nassert     right_insertion([1, 2, 3, 4], 5) == 3\nassert     right_insertion([1, 2, 3, 4], 6) == 4\nassert     right_insertion([1, 2, 3, 4], 0) == 0\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three(text_match_three) == 'bbbbb'\nassert text_match_three(text_match_three) == 'bbbbb'\nassert text_match_three(text_match_three) == 'bbbbb'\nassert text_match_three(text_match_three) == 'bbbbb'\nassert text_match_three(text_match_three) == 'bbbbb'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    text_match_three('abbbbb') == True\n    text_match_three('abccccb') == False\n    text_match_three('abcccbb') == True\n    text_match_three('abcbbb') == False\n    text_match_three('abbbbba') == False\n\n\ndef is_sorted_three(text):\n    '''\n    Write a function that checks if a string is a permutation of a sorted string that has an a followed by three 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three('ababab') == True, 'incorrect'\nassert text_match_three('aababab') == True, 'incorrect'\nassert text_match_three('aabababab') == True, 'incorrect'\nassert text_match_three('ab') == False, 'incorrect'\nassert text_match_three('abab') == True, 'incorrect'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_three('ababab') == True\nassert     text_match_three('aabab') == False\nassert     text_match_three('ab') == False\nassert     text_match_three('abab') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three(\"ababab\") == True, \"Wrong output.\"\nassert     text_match_three(\"abcab\") == False, \"Wrong output.\"\nassert     text_match_three(\"abababa\") == True, \"Wrong output.\"\nassert     text_match_three(\"abababaa\") == False, \"Wrong output.\"\nassert     text_match_three(\"abababaab\") == True, \"Wrong output.\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three('abcabc') == True,'should match a followed by 3 b'\nassert text_match_three('abcbb') == False,'should not match a followed by 3 b'\nassert text_match_three('aab') == False,'should not match a followed by 3 b'\n\ntext_match_three_pattern = re.compile(r'abcabc$')\nassert text_match_three_pattern.search('abcabc') == None,'should not match a followed by 3 b'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three('ababababab') == True, 'First Test case'\nassert     text_match_three('abababab') == False, 'Second Test case'\nassert     text_match_three('ababab') == False, 'Third Test case'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert text_match_three(\"aaaab\") == \"AAAaBBBB\"\nassert text_match_three(\"aaaaab\") == \"AAAAaBBBB\"\nassert text_match_three(\"aaaaaa\") == \"AAAAaBBBB\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three(\"Abcb\") == True\nassert     text_match_three(\"abcb\") == False\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     new_tuple(['Orange', 'Apple', 'Apricot', 'Banana', 'Cherry'], 'Purple') == ('Purple', 'Apple', 'Apricot', 'Banana', 'Cherry'), 'This should be (\"Purple\", \"Apple\", \"Apricot\", \"Banana\", \"Cherry\")'\nassert new_tuple(['Orange', 'Apple', 'Apricot', 'Banana', 'Cherry'], 'Purple') == ('Purple', 'Apple', 'Apricot', 'Banana', 'Cherry'), 'This should be (\"Purple\", \"Apple\", \"Apricot\", \"Banana\", \"Cherry\")'\nassert new_tuple([], 'Purple') == ('Purple',), 'This should be (\"Purple\",)'\nassert new_tuple(['Orange', 'Apple', 'Apricot', 'Banana', 'Cherry'], 'Purple') == ('Purple', 'Apple', 'Apricot', 'Banana', 'Cherry'), 'This should be (\"Purple\", \"Apple\", \"Apricot\", \"Banana\", \"Cherry\")'\nassert new_tuple(['Orange', 'Apple', 'Apricot', 'Banana', 'Cherry'], 'Purple') == ('Purple', 'Apple', 'Apricot', 'Banana', 'Cherry'), 'This should be (\"Purple\", \"Apple\", \"Apricot\", \"Banana\", \"Cherry\")'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple([1,2,3,4], 'abcd') == (1,2,3,4), \"Wrong output\"\nassert     new_tuple([1,2,3,4], 'abcd') == (1,2,3,4), \"Wrong output\"\nassert     new_tuple([1,2,3,4], 'abcd') == (1,2,3,4), \"Wrong output\"\nassert     new_tuple([1,2,3,4], 'abcd') == (1,2,3,4), \"Wrong output\"\nassert     new_tuple([1,2,3,4], 'abcd') == (1,2,3,4), \"Wrong output\"\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     new_tuple([\"a\", \"b\"], \"abc\") == (\"a\", \"b\", \"abc\")\nassert     new_tuple([\"a\", \"b\"], \"abcd\") == (\"a\", \"b\", \"abcd\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple(('a', 'b', 'c', 'd'), 'abc') == ('a', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), 'abc') == ('a', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), 'abc') == ('a', 'b', 'c', 'd')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     new_tuple(['a', 'b'], 'ab') == ('a', 'b')\nassert     new_tuple([1, 2], '10') == (10, 2)\nassert     new_tuple(['a', 'b', 'c', 'd'], 'ab') == ('a', 'b')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abc') == ('a', 'b', 'c', 'd')\n\nprint('PASSED ALL TEST CASES!'"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # Your Code\nassert \n    # Your Code\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     new_tuple(['red', 'blue', 'yellow'], 'cat') == ('red', 'blue', 'yellow', 'cat')\nassert     new_tuple(('blue', 'yellow','red'), 'cat') == ('blue', 'yellow','red', 'cat')\nassert     new_tuple(('blue', 'yellow','red'), 'dog') == ('blue', 'yellow','red', 'dog')\nassert     new_tuple(('blue', 'yellow','red'), 'cow') == ('blue', 'yellow','red', 'cow')\nassert     new_tuple(('blue', 'yellow','red'), 'cow') == ('blue', 'yellow','red', 'cow')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef new_list(test_list, test_str):\n    '''\n    Write a function to create a new list from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'a b c') == ('a', 'b', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'a, b, c') == ('a', 'b', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'a, b, c') == ('a', 'b', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'a, b, c') == ('a', 'b', 'c')\nassert     new_tuple(['a', 'b', 'c'], 'a, b, c') == ('a', 'b', 'c')\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_position([1,2,3,4,5]) == True, 'Should be True'\nassert     even_position([1,2,3,4,6]) == False, 'Should be False'\nassert     even_position([1,2,3,4,6,7]) == True, 'Should be True'\nassert     even_position([1,2,3,4,5,6]) == True, 'Should be True'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_position([0,1,2,3,4,5,6,7,8,9]) == True\nassert     even_position([0,1,2,3,4,5,6,7,8,9,10]) == True\nassert     even_position([0,1,2,3,4,5,6,7,8,9,11]) == False\nassert     even_position([0,1,2,3,4,5,6,7,8,9,10,11]) == False\nassert     even_position([0,1,2,3,4,5,6,7,8,9,10,11,12]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == True, 'List with even indices should contain even numbers'\nassert     even_position([1, 2, 3, 4, 6]) == False, 'List with even indices should not contain even numbers'\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, 'List with odd indices should contain even numbers'\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, 'List with odd indices should not contain even numbers'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for idx, num in enumerate(nums):\n        if idx % 2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            return False\n        elif i == 0:\n            continue\n        elif nums[i] % 2 == 0:\n            return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_position([2,4,6,8,10,12,14,16,18,20]) == True, \\\n    \"even_position([2,4,6,8,10,12,14,16,18,20]): False\"\n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = True\n    for i in range(0, len(nums)):\n        if i % 2!= 0:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == True, \"Wrong answer\"\nassert     even_position([1, 2, 3, 6, 5]) == False, \"Wrong answer\"\nassert     even_position([1, 2, 3, 6, 7]) == True, \"Wrong answer\"\nassert     even_position([1, 2, 3, 4, 5]) == True, \"Wrong answer\"\nassert     even_position([]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_position([1,2,3,4,5]) == True\nassert     even_position([1,2,3,4,6]) == False\nassert     even_position([1,3,5]) == False\nassert     even_position([1,2,3,4,6,7]) == True\nassert     even_position([1,2,3,4,6,7,8]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_position([10,20,30,40,50]) == True, \"it is true\"\nassert \neven_position([10,20,30,40,50,60,70]) == False, \"it is not true\"\nassert \neven_position([10,20,30,40,50,60,70,80,90]) == True, \"it is true\"\nassert \neven_position([10,20,30,40,50,60,70,80,90,100]) == True, \"it is true\"\nassert \neven_position([10,20,30,40,50,60,70,80,90,100,110]) == True, \"it is true\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nremove_nested((1,2,3,3,4)) == (1,2,4)\nremove_nested((4,4,4)) == (4,)\nremove_nested((1,2,3,3,4,5,6)) == (1,2,3,6)\nremove_nested((4,4,4,5,6)) == (4,5,6)\nremove_nested((1,2,3)) == (1,2,3)\nremove_nested((1,2,3,4,5,6,7)) == (1,2,3,6)\nremove_nested((4,4,4,5,6,7)) == (4,5,6,7)\nremove_nested((1,2,3,4)) == (1,2,3)\nremove_nested((1,2,3,4,5,6,7)) == (1,2,3,6)\nremove_nested((4,4,4,5,6,7)) == (4,5,6,7)\nremove_nested((1,2,3,4,5,6,7,8)) == (1,2,3,5,6,7)\nremove_nested((4,4,4,5,6,7,8)) == (4,5,6,7,8)\nremove_nested((1,2,3,4,5,6,7,8,9)) == (1,2,3,5,6,7,8)\n\nremove_nested((4,4,4,5,6,7,8,9)) == (4,5,6,7,8,9)\nremove_nested((4,4,4,5,6,7,8,9,10)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33)) == (4,5,6,7,8,9,10)\nremove_nested((4,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34)) == (4,5,6,7,8,9,10)"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested([(1,2),(3,4),(5,6)]) == ((1,2),(3,4),(5,6))\nassert     remove_nested((1,2)) == (1,2)\nassert     remove_nested((1,2,3)) == (1,2,3)\nassert     remove_nested((1,2,3,(4,5,6),7)) == (1,2,3,(4,5,6))\nassert     remove_nested(((1,2),(3,4),(5,6))) == ((1,2),(3,4),(5,6))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested((1,2,3,1,2,3)) == ((1,2,3),)\nassert     remove_nested((1,2,3,1,2,3,1,2,3)) == ((1,2,3),)\nassert     remove_nested((1,2,3,1,2,3,1,2,3,1,2,3)) == ((1,2,3),)\nassert     remove_nested((1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)) == ((1,2,3),)\nassert     remove_nested((1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)) == ((1,2,3),)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((1, 2, (3, 4, (5, 6)))) == ((1, 2), (3, 4, (5, 6)))\nassert     remove_nested((1, 2, (3, 4, (5, 6)))) == ((1, 2), (3, 4), (5, 6))\n\nassert     remove_nested((1, 2, (3, 4, (5, 6)))) == ((1, 2), (3, 4), (5, 6))\nassert     remove_nested((1, 2, (3, 4, (5, 6)))) == ((1, 2), (3, 4), (5, 6))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested([(1, 2), (3, 4), (5, 6)]) == ((1, 2), (3, 4), (5, 6))\nassert     remove_nested((1, 2, 3, 4, 5, 6)) == ((1, 2), (3, 4), (5, 6))\nassert     remove_nested(()) == ()\nassert     remove_nested((0, 1, 2)) == (0, 1, 2)\nassert     remove_nested((0, (1, 2))) == (0, (1, 2))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested(()) == ()\nassert     remove_nested((1,)) == (1,)\nassert     remove_nested((1, 2,)) == (1, 2)\nassert     remove_nested((1, 2, 3,)) == (1, 2, 3)\nassert     remove_nested((1, 2, 3, 4,)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested((1, (2, 3), 4)) == (1, (2, 3))\nassert     remove_nested((1, 2, (3, 4), (5, 6), 7)) == (1, 2, (3, 4), (5, 6))\nassert     remove_nested((1, (2,), (3,), (4,))) == (1, (2,), (3,))\nassert     remove_nested((1, 2, 3, (4, 5), 6)) == (1, 2, 3, (4, 5))\nassert     remove_nested((1, (2,), (3,), (4,))) == (1, (2,), (3,))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((1,2,3)) == (1,2,3), \"remove_nested should return (1,2,3) \"\nassert     remove_nested((3,2,1)) == (3,2,1), \"remove_nested should return (3,2,1) \"\nassert     remove_nested((1,2,3,4)) == (1,2,3), \"remove_nested should return (1,2,3) \"\nassert     remove_nested((4,4,4)) == (), \"remove_nested should return (), \"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_list([1,2,3]) == 0, \"count_list(1,2,3) must return 0\"\nassert count_list([[1,2,3],[4,5,6]]) == 2, \"count_list([[1,2,3],[4,5,6]]) must return 2\"\nassert count_list([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]]) == 2, \"count_list([[[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]]]) must return 2\"\nassert count_list([[1],[2],[3]]) == 3, \"count_list([[1],[2],[3]]) must return 3\"\nassert count_list([[1,2],[3,4]]) == 2, \"count_list([[1,2],[3,4]]) must return 2\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([]) == 0, \"List should be empty.\"\nassert     count_list([[1,2,3], [4,5,6], [7,8,9]]) == 3, \"Should be 3.\"\nassert     count_list([]) == 0, \"Should be 0.\"\nassert     count_list([[1,2,3], [4,5,6]]) == 2, \"Should be 2.\"\nassert     count_list([[1,2,3], [4,5,6], [7,8,9]]) == 3, \"Should be 3.\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_list([[],[]]) == 0, \"Fail\"\nassert count_list([[],[1,2,3]]) == 2, \"Fail\"\nassert count_list([[1,2,3],[\"a\",0]]) == 1, \"Fail\"\nassert count_list([[1,2,3,4],[\"a\",0]]) == 2, \"Fail\"\nassert count_list([[1,2,3],[\"a\",0,]]) == 3, \"Fail\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_list([[1,2,3],[4,5,6],[7,8,9]]) == 1\nassert     count_list([[1,2,3],[4,5,6],[7,8,9]]) == 3\nassert     count_list([[1,2,3],[4,5,6],[7,8,9],[1,2,3]]) == 2\nassert     count_list([[1,2,3],[4,5,6],[7,8,9]]) == 1\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_list([[1,2,3],[\"a\", \"b\", \"c\"],[1,2,3]]) == 4, \"Correct answer : 3\"\nassert     count_list([[1,2,3],[\"a\", \"b\", \"c\"],[1,2,3],[[1,2,3],[\"a\", \"b\", \"c\"]]]) == 6, \"Correct answer : 4\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_list([1, 2, 3, 1, 1]) == 3\nassert     count_list([1, 2, 3, 1, 2]) == 2\nassert     count_list([1, 1, 3, 4, 5]) == 5\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([]) == 0\nassert     count_list([1]) == 0\nassert     count_list([[1, 2], [3], [4]]) == 2\nassert     count_list([[1, 2], 3, 4]) == 2\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_list([])     == 0, \"list of size 0\"\nassert     count_list([1])     == 0, \"list of size 1\"\nassert     count_list([[1,2,3],[], [1,2,3]]) == 3, \"list of size 3\"\nassert     count_list([[1,2,3],[], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 6, \"list of size 6\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_list([[1,2,3],[2,3,4]]) == 1, \"FAILURE: count_list\"\nassert     count_list([[1,2,3],[2,3,4],[\"hi\"]]) == 3, \"FAILURE: count_list\"\nassert     count_list([[1,2,3],[2,3,4],[\"hi\"]]) == 4, \"FAILURE: count_list\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last([1, 2, 3, 4, 5], 3) == 2\nassert     last([1, 2, 3, 4, 5], 1) == 0\nassert     last([1, 2, 3, 4, 5], 10) == -1\nassert     last([1, 2, 3, 4, 5], -2) == -1\nassert     last([1, 2, 3, 4, 5], -5) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([1,3,4,6,7,10],6) == 4\nassert last([1,3,4,6,7,10],10) == 7\nassert last([1,3,4,6,7,10],1) == 1\nassert last([1,3,4,6,7,10],3) == 3\n\ndef main():\n    x = int(input(\"Enter number of elements: \"))\n    arr = []\n    for i in range(0,x):\n        arr.append(input(\"Enter element: \"))\n    n = int(input(\"Enter search element: \"))\n    # using binary search\n    first = 0\n    last = len(arr)-1\n    found = False\n    while first<=last and not found:\n        mid = (first+last)//2\n        if arr[mid] == n:\n            found = True\n        else:\n            if arr[mid] < n:\n                first = mid+1\n            else:\n                last = mid-1\n    print(f\"Index of the search element is: {mid}\")\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef last1(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([],1) == None, \"Input = []\\nExpected = None\\nActual = {}\".format(last([],1))\nassert     last([1],1) == 0, \"Input = [1]\\nExpected = 0\\nActual = {}\".format(last([1],1))\nassert     last([1,2],1) == 1, \"Input = [1,2]\\nExpected = 1\\nActual = {}\".format(last([1,2],1))\nassert     last([1,2,3,4],1) == 4, \"Input = [1,2,3,4]\\nExpected = 4\\nActual = {}\".format(last([1,2,3,4],1))\nassert     last([1,2,3,4,5],2) == 3, \"Input = [1,2,3,4,5]\\nExpected = 3\\nActual = {}\".format(last([1,2,3,4,5],2))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9,10],5)==9\nassert     last([1,2,3,4,5,6,7,8,9,10],5)==9\nassert     last([1,2,3,4,5,6,7,8,9,10],6)==9\nassert     last([1,2,3,4,5,6,7,8,9,10],11)==10\nassert     last([1,2,3,4,5,6,7,8,9,10],10)==10\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last([],10) == -1\nassert last([1],1) == 0\nassert last([1,2,3],3) == 2\nassert last([1,2,3,4],3) == 4\nassert last([1,2,3,4,5],3) == 5\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (last([1,2,3],1) == 2)\nassert (last([1,2,3],3) == 3)\nassert (last([1,2,3],0) == 0)\nassert (last([1,2,3],2) == 2)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb(\"a\") == False\nassert     text_starta_endb(\"abb\") == True\nassert     text_starta_endb(\"abbb\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ntext_starta_endb(\"the a first b\") == \"the a first b\"\n\ntext_starta_endb(\"a a first b\") == \"a a first b\"\n\ntext_starta_endb(\"a second b\") == \"a second b\"\n\ntext_starta_endb(\"first\") == \"first\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('aaabb') == False \nassert     text_starta_endb('aab') == True \nassert     text_starta_endb('bbb') == False \nassert     text_starta_endb('aa') == False \nassert     text_starta_endb('aaaabb') == True \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb(\"atgcta\") == 'atgcta'\nassert text_starta_endb(\"atgctab\") == 'atgctab'\nassert     text_starta_endb(\"atgctabk\") == 'atgctabk'\nassert     text_starta_endb(\"atgcta\") == 'atgcta'\nassert     text_starta_endb(\"atgctab\") == 'atgctab'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('aaaaa') == 'aaaaa'\nassert     text_starta_endb('aaba') == 'aaba'\nassert     text_starta_endb('aaa') == 'aaa'\nassert     text_starta_endb('bbaa') == 'bbaa'\nassert     text_starta_endb('abb') == 'abb'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb('abc') == True\nassert     text_starta_endb('abcba') == False\nassert     text_starta_endb('cbba') == True\nassert     text_starta_endb('abcbaa') == True\nassert     text_starta_endb('abcbaabc') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb(\"abcba\") == True\nassert     text_starta_endb(\"abcbaa\") == True\nassert     text_starta_endb(\"abcbaaaa\") == True\nassert     text_starta_endb(\"abcbaaab\") == False\nassert     text_starta_endb(\"abcbaaaba\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb('abcb') == False\nassert     text_starta_endb('abbb') == True\nassert     text_starta_endb('aabcbc') == True\nassert     text_starta_endb('abcdabcd') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb('abcabc') == True\nassert     text_starta_endb('abcabc') == True\nassert     text_starta_endb('abcabcabc') == True\nassert     text_starta_endb('abcabcabcabc') == False\nassert     text_starta_endb('abcabcabcabcabc') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb('aab') == 'aa b'\nassert     text_starta_endb('aabc') == 'aa c'\nassert     text_starta_endb('ab') == 'a b'\nassert     text_starta_endb('aacb') == 'a c'\nassert     text_starta_endb('abcd') == 'a b'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({'a':1,'b':2}) == 3\nassert     return_sum({'a':1,'b':2,'c':3}) == 4\nassert     return_sum({}) == 0\nassert     return_sum(None) == 0\nassert     return_sum(True) == 0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    return_sum({1:1,2:2,3:3,4:4,5:5}) == 15\n    return_sum({1:1,2:2,3:3,4:4,5:5}) == 15\n    return_sum({}) == 0"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({\"A\": 1, \"B\": 2}) == 3, \"return_sum({\\'A\\': 1, \\'B\\': 2}) is wrong\"\nassert     return_sum({\"A\": 1, \"B\": 2, \"C\": 3}) == 6, \"return_sum({\\'A\\': 1, \\'B\\': 2, \\'C\\': 3}) is wrong\"\nassert     return_sum({\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4}) == 7, \"return_sum({\\'A\\': 1, \\'B\\': 2, \\'C\\': 3, \\'D\\': 4}) is wrong\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({1: 2, 2: 4}) == 6, 'incorrect result'\nassert     return_sum({1: 2, 2: 4, 3: 5}) == 9, 'incorrect result'\nprint('You are all set!')"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     return_sum({}) == 0, \"Empty dictionary\"\nassert     return_sum({'a': 1, 'b': 2, 'c':3}) == 6, \"sum of list\"\nassert     return_sum({'a': 1, 'b': 2, 'c':3, 'd': 4}) == 7, \"sum of list with duplicate keys\"\nassert     return_sum({'a': 1, 'b': 2, 'c':3, 'd': 4, 'e': 5, 'f':6, 'g':7, 'h':8, 'i':9}) == 13, \"sum of dictionary\"\nassert     return_sum({'a': 1, 'b': 2, 'c':3, 'd': 4, 'e': 5, 'f':6, 'g':7, 'h':8, 'i':9, 'j':10, 'k':11, 'l':12}) == 18, \"sum of dictionary with duplicate keys\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_tuple(tuple_1):\n    '''\n    Write function to find the sum of all items in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert return_sum({1:5, 2:5, 3:5}) == 15\nprint('Passed')\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 3, 'incorrect return value'\nassert     return_sum({}) == 0, 'empty dictionary'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({1: 2}) == 3, \"incorrect\"\nassert     return_sum({2: 2}) == 5, \"incorrect\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(0, 0) == 0, '0'\nassert     sum_odd(0, 1) == 0, '1'\nassert     sum_odd(0, 2) == 0, '2'\nassert     sum_odd(0, 3) == 0, '3'\nassert     sum_odd(0, 4) == 0, '4'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_odd(4) == 9\nassert     sum_odd(2) == 7\nassert     sum_odd(1) == 4\nprint(\"sum_odd: pass\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_odd(5,10) == 12\nassert sum_odd(1,7) == 13\nassert sum_odd(10,8) == 13\nassert sum_odd(5,5) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_odd(100) == 45\nassert     sum_odd(100) == 55\nassert     sum_odd(100) == 65\nassert     sum_odd(101) == None\nassert     sum_odd(0) == None\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_odd(4,5) == 10\nassert sum_odd(20,0) == 0\n\n\ndef sum_odd(start, end):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_odd(1) == 1\nassert     sum_odd(2) == 3\nassert     sum_odd(3) == 5\nassert     sum_odd(4) == 7\nassert     sum_odd(5) == 11\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_odd(1) == 0\nsum_odd(2) == 1\nsum_odd(3) == 3\nsum_odd(4) == 5\nsum_odd(5) == 5\nsum_odd(6) == 7\nsum_odd(7) == 9\nsum_odd(8) == 11\nsum_odd(9) == 13\nsum_odd(10) == 15\nsum_odd(11) == 17\nsum_odd(12) == 19\nsum_odd(13) == 21\nsum_odd(14) == 23\nsum_odd(15) == 25\nsum_odd(16) == 27\nsum_odd(17) == 29\nsum_odd(18) == 31\nsum_odd(19) == 33\nsum_odd(20) == 35\nsum_odd(21) == 37\nsum_odd(22) == 39\nsum_odd(23) == 41\nsum_odd(24) == 43\nsum_odd(25) == 45\nsum_odd(26) == 47\nsum_odd(27) == 49\nsum_odd(28) == 51\nsum_odd(29) == 53\nsum_odd(30) == 55\nsum_odd(31) == 57\nsum_odd(32) == 59\nsum_odd(33) == 61\nsum_odd(34) == 63\nsum_odd(35) == 65\nsum_odd(36) == 67\nsum_odd(37) == 69\nsum_odd(38) == 71\nsum_odd(39) == 73\nsum_odd(40) == 75\nsum_odd(41) == 77\nsum_odd(42) == 79\nsum_odd(43) == 81\nsum_odd(44) == 83\nsum_odd(45) == 85\nsum_odd(46) == 87\nsum_odd(47) == 89\nsum_odd(48) == 91\nsum_odd(49) == 93\nsum_odd(50) == 95\nsum_odd(51) == 97\nsum_odd(52) == 99\nsum_odd(53) == 101\nsum_odd(54) == 103\nsum_odd(55) == 105\nsum_odd(56) == 107\nsum_odd(57) == 109\nsum_odd(58) == 111\nsum_odd(59) == 113\nsum_odd(60) == 115\nsum_odd(61) == 117\nsum_odd(62) == 119\nsum_odd(63) == 121\nsum_odd(64) == 123\nsum_odd(65) == 125\nsum_odd(66) == 127\nsum_odd(67) == 129\nsum_odd(68) == 131\nsum_odd(69) == 133\nsum_odd(70) == 135\nsum_odd(71) == 137\nsum_odd(72) == 139\nsum_odd(73) == 141\nsum_odd(74) == 143\nsum_odd(75) == 145\nsum_odd(76) == 147\nsum_odd(77) == 149\nsum_odd(78) == 151\nsum_odd(79) == 153\nsum_odd(80) == 155\nsum_odd(81) == 157\nsum_odd(82) == 159\nsum_odd(83) == 161\nsum_odd(84) == 163\nsum_odd(85) == 165\nsum_odd(86) == 167\nsum_odd(87) == 169\nsum_odd(88) == 171\nsum_odd(89) == 173\nsum_odd(90) == 175\nsum_odd(91) == 177\nsum_odd(92) == 179\nsum_odd(93) == 181\nsum_odd(94) == 183\nsum_odd(95) == 185\nsum_odd(96) == 187\nsum_odd(97) == 189\nsum_odd(98) == 191\nsum_odd(99) == 193\nsum_odd(100) == 195\nsum_odd(101) == 197\nsum_odd(102) == 199\nsum_odd(103) == 201\nsum_odd(104) == 203\nsum_odd(105) == 205\nsum_odd(106) == 207\nsum_odd(107) == 209\nsum_odd(108) == 211\nsum_odd(109) == 213\nsum_odd(110) == 215\nsum_odd(111) == 217\nsum_odd(112) == 219\nsum_odd(113) == 221\nsum_odd(114) == 223\nsum_odd(115) == 225\nsum_odd(116) == 227\nsum_odd(117) == 229\nsum_odd(118) == 231\nsum_odd(119) == 233\nsum_odd(120) == 235\nsum_odd(121) == 237\nsum_odd(122) == 239\nsum_odd(123) == 241\nsum_odd(124) == 243\nsum_odd(125) == 245\nsum_odd(126) == 247\nsum_odd(127) == 249\nsum_odd(128) == 251\nsum_odd(129) == 253\nsum_odd(130) == 255\nsum_odd(131) == 257\nsum_odd(132) == 259\nsum_odd(133) == 261\nsum_odd(134) == 263\nsum_odd(135) == 265\nsum_odd(136) == 267\nsum_odd(137) == 269\nsum_odd(138) == 271\nsum_odd(139) == 273\nsum_odd(140) == 275\nsum_odd(141) == 277\nsum_odd(142) == 279\nsum_odd(143) == 281\nsum_odd(144) == 283\nsum_odd(145) == 285\nsum_odd(146) == 287\nsum_odd(147) == 289\nsum_odd(148) == 291\nsum_odd(149) == 293\nsum_odd(150) == 295\nsum_odd(151) == 297\nsum_odd(152) == 299\nsum_odd(153) == 301\nsum_odd(154) == 303\nsum_odd(155) == 305\nsum_odd(156) == 307\nsum_odd(157) == 309\nsum_odd(158) == 311\nsum_odd(159) == 313\nsum_odd(160) == 315\nsum_odd(161) == 317\nsum_odd(162) == 319\nsum_odd(163) == 321\nsum_odd(164) == 323\nsum_odd(165) == 325\nsum_odd(166) == 327\nsum_odd(167) == 329\nsum_odd(168) == 331\nsum_odd(169) == 333\nsum_odd(170) == 335\nsum_odd(171) == 337\nsum_odd(172) == 339\nsum_odd(173) == 341\nsum_odd(174) == 343\nsum_odd(175) == 345\nsum_odd(176) == 347\nsum_odd(177) == 349\nsum_odd(178) == 351\nsum_odd(179) == 353\nsum_odd(180) == 355\nsum_odd(181) == 357\nsum_odd(182) == 359\nsum_odd(183) == 361\nsum_odd(184) == 363\nsum_odd(185) == 365\nsum_odd(186) == 367\nsum_odd(187) == 369\nsum_odd(188) == 371\nsum_odd(189) == 373\nsum_odd(190) == 375\nsum_odd(191) == 377\nsum_odd(192) == 379\nsum_odd(193) == 381\nsum_odd(194) == 383\nsum_odd(195) == 385\nsum_odd(196) == 387\nsum_odd(197) == 389\nsum_odd(198) == 391\nsum_odd(199) == 393\nsum_odd(200) == 395\nsum_odd(201) == 397\nsum_odd(202) == 399\nsum_odd(203) == 401\nsum_odd(204) == 403\nsum_odd(205) == 405\nsum_odd(206) == 407\nsum_odd(207) == 409\nsum_odd(208) == 411\nsum_odd(209) == 413\nsum_odd(210) == 415\nsum_odd(211) == 417\nsum_odd(212) == 419\nsum_odd(213) == 421\nsum_odd(214) == 423\nsum_odd(215) == 425\nsum_odd(216) == 427\nsum_odd(217) == 429\nsum_odd(218) == 431\nsum_odd(219) == 433\nsum_odd(220) == 435\nsum_odd(221) == "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_odd(5) == 0\nassert     sum_odd(5) == 0\nassert     sum_odd(8) == 6\nassert     sum_odd(10) == 8\nassert     sum_odd(13) == 11\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_odd(0) == 0\nassert     sum_odd(2) == 2\nassert     sum_odd(1) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([1,2,3,4]) == 10\nassert     _sum([1,1,1,1]) == 3\nassert     _sum([1,1,1,1,1]) == 3\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     _sum([]) == 0\nassert _sum([1]) == 1\nassert _sum([1,2]) == 3\nassert _sum([1,2,3]) == 6\nassert _sum([1,2,3,4]) == 10\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     _sum([]) == 0, \"Wrong return value!\"\nassert     _sum([1,2,3]) == 6, \"Wrong return value!\"\nassert     _sum([1,2,3,4]) == 10, \"Wrong return value!\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert _sum([1,2,3,4]) == 10\nassert _sum([1,2,3,5]) == 13\nassert _sum([1,2,3,4,5]) == 18\nassert _sum([-1,-2,-3,-4,-5]) == -21\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     _sum([5, 4, 3]) == 8, \"_sum should return 8\"\nassert _sum([]) == 0, \"_sum should return 0\"\nassert _sum([1, 1, 1]) == 3, \"_sum should return 3\"\nassert _sum([4, -4, 2, -2, 4]) == 4, \"_sum should return 4\"\nassert _sum([-1, -2, -3, -4]) == -1, \"_sum should return -1\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     _sum([1, 2, 3]) == 6\nassert     _sum([1, 2, -3]) == 0\nassert     _sum([0, 0, 0]) == 0\nassert     _sum([1, 0, -1]) == 1\nassert     _sum([-1, 0, 1]) == 1\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     _sum([1, 2, 3, 4, 5]) == 15, \\\n    \"Expected: 15, Actual: %d\" % _sum([1, 2, 3, 4, 5])\nassert     _sum([]) == 0, \\\n    \"Expected: 0, Actual: %d\" % _sum([])\nassert     _sum([1, 2, 3, 4, 5, 6]) == 30, \\\n    \"Expected: 30, Actual: %d\" % _sum([1, 2, 3, 4, 5, 6])\nassert     _sum([1, 2, 3, 4, 5, 6, 7]) == 33, \\\n    \"Expected: 33, Actual: %d\" % _sum([1, 2, 3, 4, 5, 6, 7])\nassert     _sum([1, 2, 3, 4, 5, 6, 7, 8]) == 40, \\\n    \"Expected: 40, Actual: %d\" % _sum([1, 2, 3, 4, 5, 6, 7, 8])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         _sum([1, 2, 3]) == 6, \"Value Error\"\nassert         _sum([-1, -2, -3]) == -6, \"Value Error\"\nassert         _sum([0, 0, 0]) == 0, \"Value Error\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     _sum([1,2,3]) == 6, \"fail the test\"\nassert     _sum([4,5,6]) == 15, \"fail the test\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_rotate(3,2) == 7\nassert left_rotate(6,3) == 3\nassert left_rotate(15,4) == 9\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_rotate(1, 2) == 8\nassert left_rotate(2, 2) == 4\nassert left_rotate(3, 2) == 10\nassert left_rotate(4, 2) == 6\nassert left_rotate(5, 2) == 14\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_rotate(1,0) == 1\nassert     left_rotate(1,1) == 0\nassert     left_rotate(1,2) == 0\nassert     left_rotate(0,3) == 0\nassert     left_rotate(1,3) == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Test case 1:', left_rotate(21, 7))\n\nprint('Test case 2:', left_rotate(7, 2))\n\nprint('Test case 3:', left_rotate(100000, 2))\n\nprint('Test case 4:', left_rotate(8, 5))\n\nprint('Test case 5:', left_rotate(10000100, 8))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nleft_rotate(15,2) == 0b00000011, \"Wrong\"\nleft_rotate(16,4) == 0b00000101, \"Wrong\"\nassert left_rotate(16,1) == 0b00000101, \"Wrong\"\nassert left_rotate(16,0) == 0b00000101, \"Wrong\"\nassert left_rotate(16,7) == 0b00000101, \"Wrong\"\nassert left_rotate(16,8) == 0b00000101, \"Wrong\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_all_spaces(    'a b  c d  ') == 'a b c d'\nassert     remove_all_spaces(    ' a b   c d ') == 'a b c d'\nassert     remove_all_spaces(    ' a b   c d ') == 'a b c d'\nassert     remove_all_spaces(    '') == ''\nassert     remove_all_spaces(    'a') == 'a'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_all_spaces(\"\\n \\t    \\n  \\t  \") == \"\", \"test_1\"\nassert     remove_all_spaces(\"hello \\n world \\t\") == \"hello world\", \"test_2\"\nassert     remove_all_spaces(\"a \\n  \\r \\n  \\t \") == \"a\", \"test_3\"\nassert     remove_all_spaces(\"\\n\\n\\n\\n\\n\\n\") == \"\", \"test_4\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces('')     == ''\nassert     remove_all_spaces('   ')     == ''\nassert     remove_all_spaces('\\n')     == ''\nassert     remove_all_spaces('\\n\\n')     == ''\nassert     remove_all_spaces('a')     == 'a'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert remove_all_spaces('a     b c') == 'ab c', \"Wrong! Expected abc.\"\nassert remove_all_spaces('a\\nb\\tc') == 'ab c', \"Wrong! Expected abc.\"\nassert remove_all_spaces('a\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\n') == 'ab', \"Wrong! Expected ab.\"\nassert remove_all_spaces('a') == 'a', \"Wrong! Expected a.\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_all_spaces('    ') == ''\nremove_all_spaces(' ') == ''\nremove_all_spaces('') == ''\nremove_all_spaces('   ') == ''\nremove_all_spaces(''+'  ') =='  '\n\nprint('Remove all spaces PASSED')\n\ndef remove_all_newline(text):\n    '''\n    Write a function to remove all new lines from a string.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert remove_all_spaces(\"\") == \"\"\nassert remove_all_spaces(\"     \") == \"\"\nassert remove_all_spaces(\" \") == \"\"\nassert remove_all_spaces(\"\\n\") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces(\" \") == \"\", \"Your remove_all_spaces() function is broken\"\nassert remove_all_spaces(\"   \") == \"\", \"Your remove_all_spaces() function is broken\"\nassert remove_all_spaces(\"12\") == \"12\", \"Your remove_all_spaces() function is broken\"\nassert remove_all_spaces(\"12 \") == \"12\", \"Your remove_all_spaces() function is broken\"\nassert remove_all_spaces(\"    \") == \"\", \"Your remove_all_spaces() function is broken\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces(\" \") == \"\", \"Should return an empty string\"\nassert remove_all_spaces(\"\") == \"\", \"Should return an empty string\"\nassert remove_all_spaces(\"hello world\") == \"hello world\", \"Should return a string\"\nassert remove_all_spaces(\"hello world, it is a nice day, you are so clever\") == \"hello world, it is a nice day, you are so clever\", \"Should return a string\"\n\ndef remove_all_spaces_solution(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_all_spaces('This is a sentence with some words') == 'This is a sentence with some words'\nremove_all_spaces(' hello  ') == 'hello'\nremove_all_spaces(' hello   ') == 'hello'\nremove_all_spaces(' hello') == 'hello'\nremove_all_spaces('') == ''\nremove_all_spaces('   ') =='  '\nremove_all_spaces('\\t') == '\\t'\nremove_all_spaces('\\n') == '\\n'\nremove_all_spaces('\\u3000') == '\\u3000'\nremove_all_spaces('\\u202f') == '\\u202f'\nremove_all_spaces('\\u2060') == '\\u2060'\nremove_all_spaces('\\u00a0') == '\\u00a0'\nremove_all_spaces('\\u2122') == '\\u2122'\nremove_all_spaces('\\u201c') == '\\u201c'\nremove_all_spaces('\\u201d') == '\\u201d'\nremove_all_spaces('\\u2022') == '\\u2022'\nremove_all_spaces('\\u2013') == '\\u2013'\nremove_all_spaces('\\u2014') == '\\u2014'\nremove_all_spaces('\\u2018') == '\\u2018'\nremove_all_spaces('\\u2019') == '\\u2019'\nremove_all_spaces('\\u201b') == '\\u201b'\nremove_all_spaces('\\u201a') == '\\u201a'\nremove_all_spaces('\\u3014') == '\\u3014'\nremove_all_spaces('\\u3015') == '\\u3015'\nremove_all_spaces('\\u3013') == '\\u3013'\nremove_all_spaces('\\u3011') == '\\u3011'\nremove_all_spaces('\\u300a') == '\\u300a'\nremove_all_spaces('\\u300b') == '\\u300b'\nremove_all_spaces('\\u3008') == '\\u3008'\nremove_all_spaces('\\u3009') == '\\u3009'\nremove_all_spaces('\\u3005') == '\\u3005'\nremove_all_spaces('\\u3002') == '\\u3002'\nremove_all_spaces('\\uFF01') == '\\uFF01'\nremove_all_spaces('\\uFF02') == '\\uFF02'\nremove_all_spaces('\\uFF03') == '\\uFF03'\nremove_all_spaces('\\uFF04') == '\\uFF04'\nremove_all_spaces('\\uFF05') == '\\uFF05'\nremove_all_spaces('\\uFF06') == '\\uFF06'\nremove_all_spaces('\\uFF07') == '\\uFF07'\nremove_all_spaces('\\uFF08') == '\\uFF08'\nremove_all_spaces('\\uFF09') == '\\uFF09'\nremove_all_spaces('\\uFF0A') == '\\uFF0A'\nremove_all_spaces('\\uFF0B') == '\\uFF0B'\nremove_all_spaces('\\uFF0C') == '\\uFF0C'\nremove_all_spaces('\\uFF0D') == '\\uFF0D'\nremove_all_spaces('\\uFF0E') == '\\uFF0E'\nremove_all_spaces('\\uFF0F') == '\\uFF0F'\nremove_all_spaces('\\uFF10') == '\\uFF10'\nremove_all_spaces('\\uFF11') == '\\uFF11'\nremove_all_spaces('\\uFF12') == '\\uFF12'\nremove_all_spaces('\\uFF13') == '\\uFF13'\nremove_all_spaces('\\uFF14') == '\\uFF14'\nremove_all_spaces('\\uFF15') == '\\uFF15'\nremove_all_spaces('\\uFF16') == '\\uFF16'\nremove_all_spaces('\\uFF17') == '\\uFF17'\nremove_all_spaces('\\uFF18') == '\\uFF18'\nremove_all_spaces('\\uFF19') == '\\uFF19'\nremove_all_spaces('\\uFF1A') == '\\uFF1A'\nremove_all_spaces('\\uFF1B') == '\\uFF1B'\nremove_all_spaces('\\uFF1C') == '\\uFF1C'\nremove_all_spaces('\\uFF1D') == '\\uFF1D'\nremove_all_spaces('\\uFF1E') == '\\uFF1E'\nremove_all_spaces('\\uFF1F') == '\\uFF1F'\nremove_all_spaces('\\uFF20') == '\\uFF20'\nremove_all_spaces('\\uFF21') == '\\uFF21'\nremove_all_spaces('\\uFF22') == '\\uFF22'\nremove_all_spaces('\\uFF23') == '\\uFF23'\nremove_all_spaces('\\uFF24') == '\\uFF24'\nremove_all_spaces('\\uFF25') == '\\uFF25'\nremove_all_spaces('\\uFF26') == '\\uFF26'\nremove_all_spaces('\\uFF27') == '\\uFF27'\nremove_all_spaces('\\uFF28') == '\\uFF28'\nremove_all_spaces('\\uFF29') == '\\uFF29'\nremove_all_spaces('\\uFF2A') == '\\uFF2A'\nremove_all_spaces('\\uFF2B') == '\\uFF2B'\nremove_all_spaces('\\uFF2C') == '\\uFF2C'\nremove_all_spaces('\\uFF2D') == '\\uFF2D'\nremove_all_spaces('\\uFF2E') == '\\uFF2E'\nremove_all_spaces('\\uFF2F') == '\\uFF2F'\nremove_all_spaces('\\uFF30') == '\\uFF30'\nremove_all_spaces('\\uFF31') == '\\uFF31'\nremove_all_spaces('\\uFF32') == '\\uFF32'\nremove_all_spaces('\\uFF33') == '\\uFF33'\nremove_all_spaces('\\uFF34') == '\\uFF34'\nremove_all_spaces('\\uFF35') == '\\uFF35'\nremove_all_spaces('\\uFF36') == '\\uFF36'\nremove_all_spaces('\\uFF37') == '\\uFF37'\nremove_all_spaces('\\uFF38') == '\\uFF38'\nremove_all_spaces('\\uFF39') == '\\uFF39'\nremove_all_spaces('\\uFF3A') == '\\uFF3A'\nremove_all_spaces('\\uFF3B') == '\\uFF3B'\nremove_all_spaces('\\uFF3C') == '\\uFF3C'\nremove_all_spaces('\\uFF3D') == '\\uFF3D'\nremove_all_spaces('\\uFF3E') == '\\uFF3E'\nremove_all_spaces('\\uFF3F') == '\\uFF3F'\nremove_all_spaces('\\uFF40') == '\\uFF40'\nremove_all_spaces('\\uFF41') == '\\uFF41'\nremove_all_spaces('\\uFF42') == '\\uFF42'\nremove_all_spaces('\\uFF43') == '\\uFF43'\nremove_all_s"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     three_equal(1,1,2) == 0\nassert     three_equal(3,2,3) == 1\nassert     three_equal(3,3,3) == 3"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_three_equal(3,4,3) == 1, 'incorrect'\nassert     test_three_equal(2,2,2) == 3, 'incorrect'\nassert     test_three_equal(1,1,1) == 3, 'incorrect'\nassert     test_three_equal(1,2,2) == 2, 'incorrect'\nassert     test_three_equal(2,2,1) == 1, 'incorrect'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_three_equal(1,1,1) == 3, \"Testcase 1 Failed\"\nassert     test_three_equal(0,0,0) == 3, \"Testcase 2 Failed\"\nassert     test_three_equal(-1,-1,-1) == 3, \"Testcase 3 Failed\"\nassert     test_three_equal(-1,2,-1) == 0, \"Testcase 4 Failed\"\nassert     test_three_equal(-1,1,2) == 2, \"Testcase 5 Failed\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_three_equal(1,1,1) == 1,'result is not correct'\nassert     test_three_equal(3,3,3) == 1,'result is not correct'\nassert     test_three_equal(3,4,3) == 0,'result is not correct'\nassert     test_three_equal(3,4,5) == 0,'result is not correct'\nassert     test_three_equal(2,3,4) == 0,'result is not correct'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint()\nprint('-' * 30)\nprint()\n\nprint('Please enter the three numbers.')\nprint()\n\nx = int(input())\ny = int(input())\nz = int(input())\n\nprint()\nprint('Test case 1:')\nprint()\nprint('Input: {}, {}, {}'.format(x,y,z))\nprint('Output: {}'.format(test_three_equal(x,y,z)))\nprint()\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_three_equal(1,2,3) == 1\nassert     test_three_equal(1,2,1) == 2\nassert     test_three_equal(1,2,2) == 0"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_three_equal(5,5,5) == 3, 'Should be 3'\nassert     test_three_equal(4,4,4) == 0, 'Should be 0'\nassert     test_three_equal(5,5,5) == 0, 'Should be 0'\n\nprint('Check Test Passed'"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_three_equal(3,3,3) == 3\nassert     test_three_equal(9,9,9) == 0\nassert     test_three_equal(1,2,3) == 2"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_rotation([]) == 0, \"array length = 0\"\nassert     count_rotation([1,2,3]) == 0, \"array length = 1\"\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10]) == 2, \"array length = 5\"\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 4, \"array length = 10\"\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]) == 9, \"array length = 100\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_rotation([1, 2, 3, 4]) == 1\nassert count_rotation([4, 3, 2, 1]) == 2\nassert count_rotation([1, 2, 3, 4]) == 1\nassert count_rotation([1, 2, 3, 4]) == 1\nassert count_rotation([1, 2, 3, 4]) == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_rotation([]) == 0\nassert count_rotation([1]) == 0\nassert count_rotation([1,2]) == 1\nassert count_rotation([1,2,3]) == 2\nassert count_rotation([1,2,3,4,5,6,7,8,9]) == "
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_rotation([1,2,3,4]) == 0\nassert     count_rotation([4,3,2,1]) == 4\nassert     count_rotation([1,1,1]) == 4\nassert     count_rotation([5,3,1]) == 4\nassert     count_rotation([1,2,3,4]) == 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_rotation([]) == 0\nassert count_rotation([5]) == 0\nassert count_rotation([1, 2, 3, 4, 5]) == 0\nassert count_rotation([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_rotation([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 1\nassert count_rotation([0, 1, 2, 3, 4, 5, 6, 7, 8, 8]) == 1\nassert count_rotation([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_rotation([-1, -1, 1, 2, 3, 4, 5, 6, 7, 8]) == 9, \"Wrong\"\nassert     count_rotation([-1, -1, 1, 2, 3, 4, 5, 6, 7]) == 5, \"Wrong\"\nassert     count_rotation([-1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8]) == 1, \"Wrong\"\nassert     count_rotation([-1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1, \"Wrong\"\nassert     count_rotation([-1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1, \"Wrong\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_rotation([]) == 0\nassert count_rotation([1]) == 0\nassert count_rotation([2,1]) == 1\nassert count_rotation([1,2]) == 2\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    count_rotation([]) == 0, \"case 1\"\n    count_rotation([1]) == 0, \"case 2\"\n    count_rotation([1,2]) == 1, \"case 3\"\n    count_rotation([1,2,3,4,5]) == 1, \"case 4\"\n    count_rotation([1,2,3,4,5,6,7,8,9]) == 4, \"case 5\"\n    count_rotation([1,2,3,4,5,6,7,8,9,1]) == 4, \"case 6\"\n    count_rotation([1,2,3,4,5,6,7,8,9,1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nis_perfect_square(1)"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_positive_int():\n    '''\n    Write a function to get a positive integer from user.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(is_perfect_square(10))\nprint(is_perfect_square(3))\n\n\ndef is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n**0.5 == int(n**0.5)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_perfect_square(9)\nassert not     is_perfect_square(18)\n\n\n'''\n5.2.5.3 : The is_palindrome function\nWrite a program that takes a string and checks if it is a palindrome. A palindrome is a word or phrase that is the same forwards and backwards.\n'''\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_perfect_square(0) == False, \"is_perfect_square should return False for 0.\"\nassert is_perfect_square(3) == True, \"is_perfect_square should return True for 3.\"\nassert is_perfect_square(9) == False, \"is_perfect_square should return False for 9.\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a program to check whether a given number is a prime number or not.\n    '''\n    pass\n\ndef is_prime(n):\n    '''\n    Write a program to check whether a given number is a prime number or not.\n    '''\n    pass\n\ndef is_prime(n):\n    '''\n    Write a program to check whether a given number is a prime number or not.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_perfect_square(1) == False\nassert     is_perfect_square(16) == False\nassert     is_perfect_square(18) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_product_even([1,2,3,4]) == False\nassert is_product_even([1,2,3]) == False\nassert is_product_even([1,2,3,4,5]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_product_even([4,2,3]) == False\nassert     is_product_even([1,2,3,4]) == True\nassert     is_product_even([4,2,3,4]) == False\n\n\n\ndef is_even_no_of_evens(arr):\n    '''\n    Write a function that returns True if a given array contains an even number of even numbers \n    and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_product_even([1,2,3,4,5]) == False, 'ERROR: is_product_even does not return correctly'\nassert     is_product_even([1,2,3,4]) == True, 'ERROR: is_product_even does not return correctly'\nassert     is_product_even([1,2,3,4,5]) == True, 'ERROR: is_product_even does not return correctly'\n\nprint(\"\\nAll test cases passed!\\n\")\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_product_even([2,4,5]) == True, 'Invalid'\nassert     is_product_even([3,5,9]) == False, 'Invalid'\nassert     is_product_even([3,6,9]) == True, 'Invalid'\n\n\ndef is_product_odd(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_product_even([3,2,6,5,4]) == False, 'This function should return False'\nassert     is_product_even([3,2,2,3,4]) == True, 'This function should return True'\nassert     is_product_even([1,2,3,4]) == False, 'This function should return False'\n\nprint('Test case passed')\nprint('----------------')"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_product_even(test_array) == True\nassert     is_product_even(test_array1) == False\nassert     is_product_even(test_array2) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(is_product_even([1,2,3]))  # True\n\nprint(is_product_even([1,2,3,4]))  # False\n\nprint(is_product_even([1,2,3,4,5]))  # False\n\nprint(is_product_even([1,2,3,4,5,6,7,8,9,10]))  # False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_product_even([1,2,3,4]) == False, \"Check if the product of numbers in a list is even.\"\nassert     is_product_even([2,2,3,4]) == True, \"Check if the product of numbers in a list is even.\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_product_even([2, 3, 4, 5]) == False\nassert     is_product_even([2, 2, 2, 2]) == False\nassert     is_product_even([1, 2, 4, 5]) == True\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([[1,2,3],[2,5,6],[3,4,7]]) == [[2,5,6],[3,4,7]]\nassert     max_sum_list([[1,3,4],[4,4,4],[3,2,4]]) == [[4,4,4],[3,2,4]]\nassert     max_sum_list([[1,2,3],[3,2,1]]) == [[3,2,1]]\nassert     max_sum_list([[1,2,3],[3,2,1]]) == [[3,2,1]]\nassert     max_sum_list([[1,2,3,4],[3,2,1,4],[3,2,1,4]]) == [[3,2,1,4],[3,2,1,4]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_list([[-3,2,5,-7],[1,2,3,4]]    == [[-3,2,5,-7],[1,2,3,4]])\nassert     max_sum_list([[1,2,3,4],[-5,-2,-7,-5]]    == [[-5,-2,-7,-5]])\nassert     max_sum_list([[1,2,3,4,5],[-2,3,-4,-5,1]]    == [[-2,3,-4,-5,1]])\nassert     max_sum_list([[-1,1,4,5],[-2,-4,-3,-5,1]]    == [[-2,-4,-3,-5,1]])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_list([[[1,2], 3], [[5,6], 4], [[2,3], 5], [[2,2], 5], [[2,2], 3]]) == [[5, 6], 2, 3, 2, 2]\nassert max_sum_list([[[1,2], 3], [[5,6], 4], [[2,3], 5], [[2,2], 5], [[2,2], 3]]) == [[5, 6], 2, 3, 2, 2]\nassert max_sum_list([[[1,2], 3], [[5,6], 4], [[2,3], 5], [[2,2], 5], [[2,2], 3], [[2,2], 3]]) == [[5, 6], 2, 3, 2, 2]\nassert max_sum_list([[[1,2], 3], [[5,6], 4], [[2,3], 5], [[2,2], 5], [[2,2], 3], [[2,2], 3], [[2,2], 3], [[2,2], 3]]) == [[5, 6], 2, 3, 2, 2]\nassert max_sum_list([[[1,2], 3], [[5,6], 4], [[2,3], 5], [[2,2], 5], [[2,2], 3], [[2,2], 3], [[2,2], 3], [[2,2], 3]]) == [[5, 6], 2, 3, 2, 2]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_list([[1,2,3],\n    [4,5,6],\n    [7,8,9]]) == [[7,8,9]]\nassert max_sum_list([[3,4,1,2],\n    [1,5,8,3],\n    [1,8,9,7]]) == [[1,8,9,7]]\nassert max_sum_list([[5,4,8],\n    [3,8,3]]) == [[5,8,3]]\nassert max_sum_list([[1,2],\n    [3,4],\n    [5,6]]) == [[5,6]]\nassert max_sum_list([[1,2,3],\n    [4,5,6],\n    [7,8,9],\n    [1,2,3,4,5,6,7,8,9]]) == [[1,2,3]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_list([[2,3,4,5],\n                        [5,6,7,8],\n                        [7,6,5,4],\n                        [4,5,4,3]]) == [7,6,5,4]\n\ndef min_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the lowest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_the_largest_sum(input):\n    '''\n    Write a function that returns the index of the largest sum of integers in the list that is provided as input.\n    '''\n    pass\n\ndef test_find_the_largest_sum():\n    assert \n\ndef num_letter_in_string(input):\n    '''\n    Write a function that returns the number of letters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n'''\n>>> max_sum_list([[5, 1, -2, -3], [-1, -2, -3, -4]])\n[5]\n'''\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum_list([[1,2,3],[-1,4,5]]) == [[4,5,5], [1,2,3]]\nassert     max_sum_list([[1,2],[3,4]]) == [[3,4], [1,2]]\nassert     max_sum_list([[1,2,3,4],[5,6,7,8]]) == [[8,8], [1,2,3,4]]\nassert     max_sum_list([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == [[12,12], [1,2,3,4], [9,10,11,12]]\nassert     max_sum_list([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == [[12,12], [1,2,3,4], [9,10,11,12], [13,14,15,16]]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase('abcdefghijklmnopqrstuvwxyz') == 7\nassert     max_run_uppercase('AABCCCCDDEEFFF') == 6\n\n'''\nFind the nth longest word in the given list. \n'''\ndef get_nth_word(words, n):\n    '''\n    Write a function to get the nth longest word in the list.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase('aa') == 2, '1st case'\nassert     max_run_uppercase('Aa') == 2, '2nd case'\nassert     max_run_uppercase('Z') == 1, '3rd case'\nassert     max_run_uppercase('z') == 1, '4th case'\nassert     max_run_uppercase('AAA') == 3, '5th case'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase('UppL') == 2, 'incorrect output'\nassert     max_run_uppercase('UppP') == 1, 'incorrect output'\nassert     max_run_uppercase('UpUpp') == 2, 'incorrect output'\nassert     max_run_uppercase('UP') == 1, 'incorrect output'\nassert     max_run_uppercase('UP') == 1, 'incorrect output'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_run_uppercase(\"GEEKSFORGEEKS\") == 4\nassert max_run_uppercase(\"GEEKS\") == 1\nassert max_run_uppercase(\"GEEKS_FOR_GEEKS\") == 3\nassert max_run_uppercase(\"HELLO WORLD\") == 5\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase(\"AaAAA\") == \"AAA\", \"incorrect\"\nassert     max_run_uppercase(\"za\") == \"za\", \"incorrect\"\nassert     max_run_uppercase(\"zaA\") == \"zaA\", \"incorrect\"\nassert     max_run_uppercase(\"ZAaAAA\") == \"AAA\", \"incorrect\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"This is the result of max_run_uppercase function\")\nprint(max_run_uppercase(\"AaAAA\"))\nprint(max_run_uppercase(\"AaAAA\"))\nprint(max_run_uppercase(\"AaAAA\"))\nprint(max_run_uppercase(\"AaAAA\"))\n\ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase(\"AABCDEEFF\") == 3\nassert     max_run_uppercase(\"A\") == 1\nassert     max_run_uppercase(\"\") == 0\nassert     max_run_uppercase(\"AABCAAB\") == 3\nassert     max_run_uppercase(\"ABCDEF\") == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_run_uppercase('AB') == 2\nassert     max_run_uppercase('aaabb') == 2\nassert     max_run_uppercase('AB') == 2\nassert     max_run_uppercase('AABB') == 3\nassert     max_run_uppercase('AAAA') == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_str = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(\"max_run_uppercase(test_str) =\", max_run_uppercase(test_str))\n    assert max_run_uppercase(test_str) == 9\n    print('\\nPassed!')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_odd([1, 2, 3, 4, 5]) == 1, \"Should return 1\"\nassert first_odd([1, 2, 3, 4, 5, 6]) == 5, \"Should return 5\"\nassert first_odd([1, 2, 3, 4, 5, 6, 7]) == 7, \"Should return 7\"\nassert first_odd([2, 4, 6, 8, 10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10]) == 10, \"Should return 10\"\nassert first_odd([10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10]) == 2, \"Should return 2\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_odd([3,2,1,5,4]) == 1\nassert     first_odd([3,2,1,5,4,6]) == 5\nassert     first_odd([1,1,1,1]) == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_odd([]) == None, \"empty list\"\nassert     first_odd([1,2,3,4]) == None, \"even numbers\"\nassert     first_odd([1,3,5]) == None, \"odd numbers\"\nassert     first_odd([1,2,4,5]) == 4, \"odd numbers\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_odd([1,3,5,7]) == 7, \"Mistake\"\nassert     first_odd([1,3,5,7,9]) == 7, \"Mistake\"\nassert     first_odd([1,3,5,7,9,11,13]) == 11, \"Mistake\"\nassert     first_odd([1,3,5,7,9,11,13,15]) == 11, \"Mistake\"\nassert     first_odd([1,3,5,7,9,11,13,15,17]) == 17, \"Mistake\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_odd([]) == -1\nassert     first_odd([-1, -3, -4, -2, -6]) == -3\nassert     first_odd([-1, -3, -4, -2, -6, 5]) == -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1, \"Should return 1\"\nassert     first_odd([-10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == -1, \"Should return -1\"\nassert     first_odd([0]) == 0, \"Should return 0\"\nassert     first_odd([1, 2, 3]) == 1, \"Should return 1\"\nassert     first_odd([]) == 0, \"Should return 0\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nfirst_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 5\nfirst_odd([1, 3, 5, 7]) == 7\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_odd([2,4,6,7,8,9]) == 7\nassert     first_odd([4,6,8,10,11,15]) == 11\nassert     first_odd([4,6,7]) == 7\nassert     first_odd([]) == None\n\ndef is_palindrome(s):\n    '''\n    Write a python function that takes a string and returns True if it is a palindrome.\n    Palindrome means that string should be same as string in reverse order.\n    '''\n    # check if empty string\n    if len(s) == 0:\n        return True\n    # check if string is 1 character\n    if len(s) == 1:\n        return True\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_K((1,2,3,4,5), 3) == True\nassert     check_K((1,2,3,4,5), 4) == True\nassert     check_K((1,2,3,4,5), 5) == True\nassert     check_K((1,2,3,4,5), 1) == True\nassert     check_K((1,2,3,4,5), 6) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K(((1,2,3),(1,2,3),(1,2,3),(1,2,3)), 3) == True, 'incorrect'\nassert     check_K(((1,2,3),(1,2,3),(1,2,3),(1,2,3)), 1) == True, 'incorrect'\nassert     check_K(((1,2,3),(1,2,3),(1,2,3),(1,2,3)), 2) == False, 'incorrect'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_K((1,2), 1) == True, \"check_K() doesn't check for (1,2) : False\"\nassert     check_K((1,2), 2) == False, \"check_K() doesn't check for (1,2) : True\"\nassert     check_K((1,1), 1) == True, \"check_K() doesn't check for (1,1) : False\"\nassert     check_K((1,1), 2) == False, \"check_K() doesn't check for (1,1) : True\"\nassert     check_K((1,2), 2) == True, \"check_K() doesn't check for (1,2) : False\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_K(((1, 2), (1, 2)), 2) == True\nassert check_K(((1, 2), (1, 2)), 1) == False\nassert check_K(((2, 2), (1, 2)), 2) == False\nassert check_K(((2, 2), (1, 2)), 1) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_K((0,1), 0) == True, 'First tup'\nassert     check_K((0,1,1), 1) == True, 'Both tups'\nassert     check_K((1,1,1), 1) == False, 'Third tup'\nassert     check_K((1,1,0), 1) == False, 'Third tup'\nassert     check_K((0,1,2), 1) == False, 'Third tup'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K((1,2,3), 2) == True, \"Test Case 1 Failed!\"\nassert     check_K((2,1,3), 2) == True, \"Test Case 2 Failed!\"\nassert     check_K((3,2,1), 2) == True, \"Test Case 3 Failed!\"\nassert     check_K((3,3,2), 2) == False, \"Test Case 4 Failed!\"\nassert     check_K((3,3,3), 2) == True, \"Test Case 5 Failed!\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_K((1,2,3), K = 1) == True, \"Not correct\"\nassert     check_K((1,2,3,1), K = 2) == False, \"Not correct\"\nassert     check_K((1,2,3,1,1), K = 2) == True, \"Not correct\"\nassert     check_K((1,2,3,1,1,1), K = 2) == False, \"Not correct\"\n\nprint('Check_K passed')\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_K(tuple([1, 2, 3, 4, 5, 6]), 4) == True, \"Should be True\"\nassert     check_K(tuple([1, 2, 3, 4, 5, 6]), 3) == False, \"Should be False\"\nassert     check_K(tuple([1, 2, 3, 4, 5, 6]), 0) == False, \"Should be False\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller(\n                (1,2,3,4),\n                (1,2,3)\n            ) == True, 'check_smaller should return True if the 2nd tuple has elements smaller than the corresponding elements in the 1st tuple.'\nassert     check_smaller(\n                (1,2,3),\n                (1,2,3,4)\n            ) == False, 'check_smaller should return False if the 2nd tuple has elements larger than the corresponding elements in the 1st tuple.'\nassert     check_smaller(\n                (1,2,3,4),\n                (1,2,3)\n            ) == False, 'check_smaller should return False if the 2nd tuple has elements smaller than the corresponding elements in the 1st tuple.'\n\ndef check_diff(test_tup1, test_tup2):\n    '''\n    Write a function to check if the 2nd tuple has elements smaller than the corresponding elements in the 1st tuple.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((1, 2), (1, 2, 2)) == (1, 2, 2)\nassert     check_smaller((2, 2), (1, 2, 2)) == (2, 2, 2)\nassert     check_smaller((3, 4), (1, 2, 2)) == (3, 4, 2)\nassert     check_smaller((1, 4), (1, 2, 2)) == (1, 4, 2)\nassert     check_smaller((2, 4), (1, 2, 2)) == (2, 4, 2)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_smaller((1,2,3,4), (3,4,5,6)) == False\nassert     check_smaller((3,4,5,6), (1,2,3,4)) == True\nassert     check_smaller((3,4,5,6), (3,4,5,7)) == True\nprint('Success: check_smaller')\n\ndef check_even_odd(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef print_all_smaller(n, a1, a2):\n    '''\n    Write a function to print the result of all smaller elements.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_smaller((5,2),(2,5)) == True\nassert     check_smaller((5,2),(2,2)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((1,2,3), (2,3,4)) == False, 'The first tuple is smaller than the second tuple'\nassert     check_smaller((2,3,4), (1,2,3)) == True, 'The first tuple is larger than the second tuple'\nprint('Test passed!')\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1, 5), (3, 4, 6)) == True\nassert     check_smaller((1, 5), (3, 3, 6)) == False\nassert     check_smaller((1, 1), (2, 2)) == True\nassert     check_smaller((1, 1), (2, 2, 3)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller( (3, 4), (1, 2) ) == True\nassert     check_smaller( (4, 3), (1, 2) ) == False\nassert     check_smaller( (1, 4), (1, 2) ) == True\nassert     check_smaller( (4, 1), (1, 2) ) == False\nassert     check_smaller( (1, 1), (1, 2) ) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((2, 3), (5, 8)) == True, \"This should be True\"\nassert     check_smaller((2, 3), (3, 8)) == False, \"This should be False\"\nassert     check_smaller((2, 3, 4), (3, 8, 4)) == False, \"This should be False\"\n"
    }
]