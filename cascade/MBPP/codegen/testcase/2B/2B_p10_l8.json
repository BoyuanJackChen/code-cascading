[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements((1,2,3), (2,3,4)) ==     (2,3)\nassert     similar_elements((5,5,7), (5,5,7)) ==     (5,7)\nassert     similar_elements((7,7,7), (7,7,7)) ==     (7,7)\nassert     similar_elements((5,5,7), (7,7,7)) ==     ()\nassert     similar_elements((1,2,3), (2,3,4)) ==     (2,3)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements((1,2,3),(2,3,4)) == (2,3), 'Incorrect'\nassert     similar_elements((1,2,3),(3,4,5)) == (3,4), 'Incorrect'\nassert     similar_elements((1,2),(2,3,4,5)) == (2,3), 'Incorrect'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsimilar_elements((1,2,3,4,5,6), (4,5,6,7,8,9)) == [5,6]\nprint(\"Your function is correct\")\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     similar_elements((1,3,5), (5,3,1)) == (1,3)\nassert     similar_elements((1,3,5), (4,2,5)) == (4,2)\nassert     similar_elements((1,2,4), (4,3,2)) == (1,2)\nassert     similar_elements((1,2,4,5,8), (3,4,5,6,7)) == (1,2,4)\nassert     similar_elements((1,2,4,5,8), (1,2,5,6,7)) == (1,2,4)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert (similar_elements((1,2,3,4), (3,4,5,6)) == (3,4)), \\\n   'similar_elements should return the elements that are in both lists'\nassert (similar_elements((1,2,3,4), (3,4,5,6,7)) == ()), \\\n   'similar_elements should return empty list if there is no shared element'\nassert (similar_elements((1,2,3), (3,4,5,6)) == ()), \\\n   'similar_elements should return empty list if both the lists have no elements in common'\nassert (similar_elements((), (2,3,4,5)) == ()), \\\n   'similar_elements should return empty list if one of the lists is empty'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements([1,2,3], [1,2,3])     ==    [1,2] \nassert     similar_elements([1,2,3], [2,3,4])     ==    [2] \nassert     similar_elements([1,2,3,4], [1,2,3])     ==    [] \nassert     similar_elements([1,2,3,4], [1,3])     ==    [1,3] \nassert     similar_elements([1,2,3], [1,3,4])     ==    [1,3] \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     similar_elements((1,2,3),(4,5,6)) == (1,4)\nassert similar_elements((1,1,1),(1,2,3)) == (1,)\nassert similar_elements((1,2,3),(2,3,4,5)) == (2,3)\nassert similar_elements((1,2,3),(1,4,3,5,6)) == (1,4)\nassert similar_elements((1,2,3),(1,4,2,6,5)) == (1,4)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_not_prime(0) == True, \"returns True if input is 0\"\nassert is_not_prime(2) == False, \"returns False if input is 2\"\nassert is_not_prime(3) == False, \"returns False if input is 3\"\nassert is_not_prime(5) == False, \"returns False if input is 5\"\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_not_prime(2) == True\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == False\nassert     is_not_prime(6) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(5) == True, \"Should return True for non-prime\"\nassert     is_not_prime(6) == False, \"Should return False for prime\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_not_prime(2) == True, 'Should return True'\nassert     is_not_prime(3) == False, 'Should return False'\nassert     is_not_prime(4) == True, 'Should return True'\nassert     is_not_prime(5) == False, 'Should return False'\nassert     is_not_prime(6) == False, 'Should return False'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(1) == False, 'Invalid'\nassert     is_not_prime(2) == True, 'Invalid'\nassert     is_not_prime(3) == False, 'Invalid'\nassert     is_not_prime(4) == True, 'Invalid'\nassert     is_not_prime(5) == False, 'Invalid'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(1) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(3) == True\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_not_prime(1) == False\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == True\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([-2,1,3,7,-10,-4,-3,4,5,-9,4,0,-2,3,6,-3],2) == [-10,-9,7,6,4,3,4,4,3,2,-2,1,0,3,3,2]\nassert     heap_queue_largest([-2,1,3,7,-10,-4,-3,4,5,-9,4,0,-2,3,6,-3],4) == [-10,-9,7,6,4,3,4,4,3,2,-2,1,0,3,3,2]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef heap_queue_largest_correction(nums,n):\n    '''\n    The correctness of the function heap_queue_largest_correction \n    is that it should return the n largest integers from the given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([1,2,3,5,7,12], 3) ==  [5,7,12]\nassert     heap_queue_largest([1,2,3,5,7,12], 4) ==  [5,7,12,3]\nassert     heap_queue_largest([1,2,3,5,7,12], 5) ==  [5,7,12,3,1]\nassert     heap_queue_largest([1,2,3,5,7,12], 6) ==  [5,7,12,3,1,2]\n\ndef heap_queue_largest_k(nums,k):\n    '''\n    Write a function to find the k largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([5,2,7,8,3,3,9,8,8,5,7],4) == [-5,-3,-8,8,9]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     heap_queue_largest([1,2,3],2) == [3,2], \"not correct\"\nassert     heap_queue_largest([1,2,3],0) == [], \"not correct\"\nassert     heap_queue_largest([1,2,3],3) == [3,2,1], \"not correct\"\nassert     heap_queue_largest([1,2,3,4],3) == [4,3,2,1], \"not correct\"\nassert     heap_queue_largest([1,2,3,4],4) == [4,3,2,1], \"not correct\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (is_Power_Of_Two(2) == False) \nassert     (is_Power_Of_Two(4) == True) \nassert     (is_Power_Of_Two(15) == False) \nassert     (is_Power_Of_Two(9) == True) \nassert     (is_Power_Of_Two(0) == False) \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(5) == True, \"5 is not a Power of 2\"\nassert     is_Power_Of_Two(10) == False, \"10 is a Power of 2\"\nassert     is_Power_Of_Two(13) == False, \"13 is a Power of 2\"\nassert     is_Power_Of_Two(15) == True, \"15 is a Power of 2\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (is_Power_Of_Two(4) == True), \"is_Power_Of_Two function is not correctly written.\"\nassert     (is_Power_Of_Two(16) == True), \"is_Power_Of_Two function is not correctly written.\"\nassert     (is_Power_Of_Two(24) == True), \"is_Power_Of_Two function is not correctly written.\"\nassert     (is_Power_Of_Two(48) == False), \"is_Power_Of_Two function is not correctly written.\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(16), 'is_Power_Of_Two(16) is wrong'\nassert     is_Power_Of_Two(17), 'is_Power_Of_Two(17) is wrong'\nassert     is_Power_Of_Two(3), 'is_Power_Of_Two(3) is wrong'\nassert     is_Power_Of_Two(1), 'is_Power_Of_Two(1) is wrong'\nassert     is_Power_Of_Two(2), 'is_Power_Of_Two(2) is wrong'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two(1) == False\nassert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(3) == True\nassert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(7) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Pass\" if  (is_Power_Of_Two(2) and is_Power_Of_Two(8) ) else \"Fail\")\nprint(\"Pass\" if not (is_Power_Of_Two(3) and is_Power_Of_Two(9) ) else \"Fail\")\nprint(\"Pass\" if  (is_Power_Of_Two(16) ) else \"Fail\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_Power_Of_Two(3) == True\nis_Power_Of_Two(12) == True\nis_Power_Of_Two(23) == False\nis_Power_Of_Two(100) == True\nis_Power_Of_Two(999) == True\nis_Power_Of_Two(4) == False\nis_Power_Of_Two(0) == False\nis_Power_Of_Two(8) == True\nis_Power_Of_Two(1) == False\nis_Power_Of_Two(0) == False\nis_Power_Of_Two(5) == False\nis_Power_Of_Two(11) == True\n\nprint(\"The output of the above function is correct or not\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (is_Power_Of_Two (1) == False), \"1 is not a Power of 2\"\nassert     (is_Power_Of_Two (2) == True), \"2 is a Power of 2\"\nassert     (is_Power_Of_Two (16) == False), \"16 is not a Power of 2\"\nassert     (is_Power_Of_Two (17) == False), \"17 is not a Power of 2\"\nassert     (is_Power_Of_Two (4) == True), \"4 is a Power of 2\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(6) == False, 'Wrong Answer'\nassert     is_Power_Of_Two(2) == True, 'Wrong Answer'\nassert     is_Power_Of_Two(16) == True, 'Wrong Answer'\nassert     is_Power_Of_Two(256) == False, 'Wrong Answer'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two(4) == True\nassert     is_Power_Of_Two(10) == False\nassert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(10) == True\n\ndef is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long(\"HELLO WORLD\") ==    ['HELLO', 'WORLD']\nassert find_char_long(\"HELLO WORLD\") ==    ['HELLO', 'WORLD']\nassert find_char_long(\"HELLO WORLD\") ==    ['HELLO', 'WORLD']\nassert find_char_long(\"HELLO WORLD\") ==    ['HELLO', 'WORLD']\nassert find_char_long(\"HELLO WORLD\") ==    ['HELLO', 'WORLD']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long(\"she sells sea shells by the sea shore\") == [\"she\", \"sells\", \"shore\"]\nassert     find_char_long(\"hello world\") == []\nassert     find_char_long(\"tea is good\") == [\"tea\"]\nassert     find_char_long(\"she sells sea shells by the sea shore and by the road\") == [\"she\", \"sells\", \"shore\", \"and\", \"road\"]\n\n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at most 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long(\"the quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'dog']\n\ndef find_char_long2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in range(len(text)):\n        if len(text[i:]) > 3:\n            result.append(text[i:])\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long(\"There's a cat\" \n     \" and a big fluffy dog\" \n     \" and a big cat\") == ['cat', 'dog', 'big']\n\nassert     find_char_long(\"There's a big cat and a big dog\") == ['big', 'dog']\n\nassert     find_char_long(\"\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long(\"Hi my name is Alex, how are you?\") == True\nassert     find_char_long(\"Test so far\") == True\nassert     find_char_long(\"This should not return a match\") == False\nassert     find_char_long(\"\") == False\nassert     find_char_long(\"   a    b    c    \") == False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long('apple') == True\nassert    find_char_long('banana') == True\nassert    find_char_long('orange') == True\nassert    find_char_long('pineapple') == False\nassert    find_char_long('chocolate') == True\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_longest_words(text):\n    '''\n    Write a function that takes a string and returns a sorted list of words in the string which are at least 4 characters long. \n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_char_long_no_regex(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('thequickbrownfoxjumpsoverthelazydog') == ['quick', 'brown', 'fox', 'jump', 'over', 'the', 'lazydog']\nassert     find_char_long('thequickbrownfoxjumpsoverthelazydogxx') == ['quick', 'brown', 'fox', 'jump', 'over', 'the', 'lazydogxx']\nassert     find_char_long('thequickbrownfoxjumpsoverthelazydog') == ['quick', 'brown', 'fox', 'jump', 'over', 'the']\nassert     find_char_long('leetcode') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_char_long(\"python is awesome\") == \"awesome\"\nassert find_char_long(\"python is, awesome\") == \"awesome\"\nassert find_char_long(\"ooxx\") == \"ooxx\"\nassert find_char_long(\"ooxx-\") == \"ooxx\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsquare_nums([1, 3, 9, 27]) == [1, 9, 81, 243], \"should be 81\"\nassert \nsquare_nums([4, 5, 6]) == [16, 25, 36], \"should be 16,25,36\"\nassert \nsquare_nums([4, 5, 7]) == [25, 49, 81], \"should be 25,49,81\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsquare_nums([1,2,3,4,5,6]) == [1,4,9,16,25,36]"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_nums([1, 2, 3, 4, 5]) ==     [1, 4, 9, 16, 25]\nassert square_nums([1, 2, 3, 4, 5]) ==     [1, 4, 9, 16, 25]\nassert square_nums([4, 6, 8, 10, 12]) ==     [16, 64, 256, 1024, 4096]\nassert square_nums([]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_nums([0, 1, 2, 3]) == [0, 1, 4, 9]\nassert square_nums([]) == []\nassert square_nums([1, 2]) == [1, 4]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_nums([1, 3, 4]) == [1, 9, 16], \n'Expected: [1, 9, 16], got: {}'.format([1, 3, 4])\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 4, 9, 16, 25]\nassert     square_nums([]) == []\nassert     square_nums([1, 2, 3]) == [1, 4, 9]\nassert     square_nums([-1, -2, -3]) == [-1, -4, -9]\nassert     square_nums([100, 100, 100, 100, 100, 100]) == \n        [100, 100, 100, 100, 100, 100]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations('aba') == 3\nassert     find_Rotations('abc') == 0\nassert     find_Rotations('abc') == 0\nassert     find_Rotations('aba') == 1\nassert     find_Rotations('aabc') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # your code goes here\n    \n    # [a, b, c, d, e, f]\n    # [e, a, d, b, f, c]\n    # [f, e, d, c, b, a]\n    # [a, f, e, d, b, c]\n    # [f, a, e, d, b, c]\n    # print([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"])\n    # print([\"e\",\"a\",\"d\",\"b\",\"f\",\"c\"])\n    # print([\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"])\n    # print([\"a\",\"f\",\"e\",\"d\",\"b\",\"c\"])\n    # print([\"f\",\"a\",\"e\",\"d\",\"b\",\"c\"])\n    \n    '''\n    Example:\n    Input: str = \"abc\"\n    Output: 1\n    \n    Input: str = \"xbc\"\n    Output: 2\n    \n    Input: str = \"ghi\"\n    Output: 3\n    \n    Input: str = \"lmn\"\n    Output: 4\n    \n    Input: str = \"nta\"\n    Output: 5\n    \n    Input: str = \"aab\"\n    Output: 4\n    \n    Input: str = \"abcd\"\n    Output: 4\n    \n    Input: str = \"xyz\"\n    Output: 6\n    \n    Input: str = \"uio\"\n    Output: 6\n    '''\n    \n    str = \"nta\"\n    \n    if len(str) < 2:\n        return 0\n    \n    # Generate all permutations of the given string.\n    permutations = []\n    \n    def permute(arr, result, result_index):\n        if result_index == len(str):\n            permutations.append(result)\n            return\n        \n        for i in range(len(arr)):\n            # Append the element at the given index in the current permutation.\n            result_char = result[result_index]\n            result_index += 1\n            new_result = result[:result_index] + arr[i] + result[result_index:]\n            \n            # Recurse for the remaining permutations.\n            permute(arr[:i] + arr[i + 1:], new_result, result_index)\n            \n    permute(list(str), str, 0)\n    \n    # Now we have all the permutations. Compare them with each other.\n    ans = 0\n    for i in range(len(permutations)):\n        for j in range(i + 1, len(permutations)):\n            \n            # Check if the two strings are equal or not.\n            if permutations[i] == permutations[j]:\n                continue\n            \n            # Find out the size of the permutations.\n            size = 0\n            for k in range(len(permutations[i])):\n                if permutations[i][k]!= permutations[j][k]:\n                    break\n                size += 1\n            \n            # If the size is not same then they are not equal and\n            # thus we need to increase the answer.\n            if size!= len(permutations[i]):\n                ans += 1\n    \n    # Return the answer.\n    return ans"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\"gallahad\")==5\nassert     find_Rotations(\"leetcode\")==6\nassert     find_Rotations(\"a\")==0\nassert     find_Rotations(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations('') == 0, find_Rotations('')\nassert     find_Rotations('a') == 0, find_Rotations('a')\nassert     find_Rotations('ab') == 1, find_Rotations('ab')\nassert     find_Rotations('abc') == 2, find_Rotations('abc')\nassert     find_Rotations('abcd') == 3, find_Rotations('abcd')\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Rotations('abcd') == 0, 'incorrect'\nassert     find_Rotations('abcd') == 1, 'incorrect'\nassert     find_Rotations('abcd') == 2, 'incorrect'\nassert     find_Rotations('abcd') == 3, 'incorrect'\nassert     find_Rotations('abcd') == 4, 'incorrect'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations('Geeksforgeeks') == 3\nassert     find_Rotations('GeeksQuiz') == 1\nassert     find_Rotations('GeeksQuizGeeks') == 2\nassert     find_Rotations('GeeksQuizGeeksGeeks') == 0\n\n'''\nA special number is a number whose square root is an integer. \nThe sum of these special numbers is a special number. \nA special number is defined by its square root.\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_Occ(\"aabcccc\", 'c') == 'abcccc'\nassert     remove_Occ(\"aabcccc\", 'a') == 'abccccc'\nassert     remove_Occ(\"aabcccc\", 'c') == 'abccccc'\nassert     remove_Occ(\"aabcccc\", 'd') == 'aabccccc'\nassert     remove_Occ(\"aabcccc\", 'c') == 'aabccccc'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef remove_Occ_2(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_Occ(\u201chello\u201d,\u201do\u201d) == \u201cll\u201d\nassert     remove_Occ(\u201chello\u201d,\u201de\u201d) == \u201cll\u201d\nassert     remove_Occ(\u201chello\u201d,\u201dh\u201d) == \u201cll\u201d\nassert     remove_Occ(\u201chello\u201d,\u201dl\u201d) == \u201cll\u201d\nassert     remove_Occ(\u201chello\u201d,\u201dl\u201d) == \u201cllo\u201d\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_Occ(\"hello\", \"a\") == \"hello\"\nassert     remove_Occ(\"hello world\", \"d\") == \"hello w\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_Occ('gaflgwf', 'g') == 'fgwf'\nassert     remove_Occ('vatgwfr', 'v') == 'atgwfr'\nassert     remove_Occ('vatgtgfr', 'g') == 'atgfr'\nassert     remove_Occ('vatgtgwfr', 't') == 'atwfr'\nassert     remove_Occ('vatgtgwfr', 'x') == 'atgwfr'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ('ababcabcabc', 'a') == 'abcabc'\nassert     remove_Occ('ababcabcabc', 'c') == 'abcabc'\nassert     remove_Occ('ababcabcabc', 'b') == 'abcabc'\nassert     remove_Occ('ababcabcabc', 'd') == 'ababc'\nassert     remove_Occ('ababcabcabc', 'c') == 'ababc'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([\n                    [1,4,7],\n                    [4,3,2],\n                    [9,6,1]]) == \\\n        [\n            [1,4,7],\n            [4,3,2],\n            [9,6,1]\n        ]\n\nassert     sort_matrix([\n                    [1,4,7],\n                    [4,3,2],\n                    [9,6,1]]) == \\\n        [\n            [1,4,7],\n            [9,6,1],\n            [4,3,2]\n        ]\n\nassert     sort_matrix([\n                    [1,4,7],\n                    [4,3,2],\n                    [9,6,1]]) == \\\n        [\n            [1,4,7],\n            [4,3,2],\n            [9,6,1]\n        ]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[1, 4, 3],\n                       [2, 5, 6],\n                       [7, 8, 9]]) == [[1, 2, 3],\n                                       [4, 5, 6],\n                                       [7, 8, 9]]\nassert     sort_matrix([[1, 4, 3],\n                       [2, 5, 6],\n                       [7, 8, 9],\n                       [10, 11, 12]]) == [[1, 2, 3],\n                                           [10, 11, 12],\n                                           [4, 5, 6],\n                                           [7, 8, 9]]\nassert     sort_matrix([[1, 4, 3],\n                       [2, 5, 6],\n                       [7, 8, 9],\n                       [10, 11, 12],\n                       [13, 14, 15]]) == [[1, 2, 3],\n                                           [10, 11, 12],\n                                           [4, 5, 6],\n                                           [7, 8, 9],\n                                           [13, 14, 15]]\nassert     sort_matrix([[1, 2, 3, 4],\n                       [3, 1, 2, 2],\n                       [3, 1, 2, 2]]) == [[1, 2, 3, 4],\n                                           [1, 3, 2, 2],\n                                           [3, 1, 2, 2]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[3,2,1],[4,5,6]]) == [[1,2,3],[4,5,6]]\nassert     sort_matrix([[1,2,3,4],[5,6,7,8]]) == [[1,2,3,4],[5,6,7,8]]\nassert     sort_matrix([[4,2,6,8,1],[3,5,7,9,2]]) == [[1,2,3,4,5],[6,7,8,9,8]]\n\ndef sort_matrix_c(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[1, 1, 3], [2, 2, 4], [3, 3, 5]]) == [[1, 1, 3], [2, 2, 4], [3, 3, 5]]\nassert     sort_matrix([[1, 1, 3], [2, 2, 4], [1, 2, 5]]) == [[1, 1, 3], [2, 2, 4], [1, 2, 5]]\nassert     sort_matrix([[1, 1, 3], [2, 2, 4], [3, 3, 5]]) == [[1, 1, 3], [2, 2, 4], [3, 3, 5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[2, 4],\n                        [6, 8]]) == [[2, 4],\n                              [6, 8]]\n\nassert     sort_matrix([[1, 3],\n                        [2, 4]]) == [[1, 3],\n                              [2, 4]]\n\nassert     sort_matrix([[1, 4],\n                        [2, 6]]) == [[1, 4],\n                              [2, 6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_matrix([[1, 2, 3], \n                        [4, 5, 6], \n                        [9, 10, 11]]) == [[1, 2, 3], \n                                        [9, 10, 11], \n                                        [4, 5, 6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([[5,7,3],\n                  [4,8,1],\n                  [9,2,6]]) == [[1,2,3],\n                    [4,5,6],\n                    [7,8,9]]\nassert     sort_matrix([[4,1,2],\n                  [1,4,5],\n                  [2,5,8]]) == [[1,2,5],\n                    [2,4,5],\n                    [4,1,8]]\nassert     sort_matrix([[1,2,5],\n                  [3,4,1],\n                  [4,5,2]]) == [[1,2,5],\n                    [3,4,1],\n                    [4,5,2]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(1,2,3) == 6, \"Wrong Output\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(2,4,6) == 12 \nassert     find_Volume(6,4,2) == 24 \nassert     find_Volume(4,2,6) == 12 \nassert     find_Volume(2,2,4) == 8 \nassert     find_Volume(2,2,2) == 4 \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume(5,4,6) == 4\nassert     find_Volume(6,3,8) == 9\nassert     find_Volume(7,5,1) == 0"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume(1,2,3) == 6\nassert     find_Volume(2,4,3) == 12\nassert     find_Volume(2,4,2) == 20\nassert     find_Volume(4,2,1) == 20\nassert     find_Volume(1,1,2) == 4\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume([10,10,10],[10,10,10],[10,10,10]) == 50\nassert     find_Volume([5,5,5],[5,5,5],[5,5,5]) == 25\nassert     find_Volume([10,10,10],[5,5,5],[5,5,5]) == 50\nassert     find_Volume([10,10,10],[10,10,10],[20,20,20]) == 0\nassert     find_Volume([0,0,0],[10,10,10],[20,20,20]) == 0\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(1,1,1) == 1\nassert     find_Volume(1,1,3) == 3\nassert     find_Volume(1,1,6) == 8\nassert     find_Volume(1,4,6) == 22\nassert     find_Volume(2,4,6) == 20\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume(2,5,3) == 2.5\nassert     find_Volume(1,5,3) == 3.5\nassert     find_Volume(1,1,4) == 5.0\nassert     find_Volume(2,2,3) == 5.0\nassert     find_Volume(1,2,3) == 4.0\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume(3,4,5) == 6, \"correctness of find_Volume function\"\nprint(\"correctness of find_Volume function\")"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume([2,3,4],[5,6,7],[8,9,10]) == 10, 'Should be 10'\nassert     find_Volume([10,20,30],[40,50,60],[100,200,300]) == 280, 'Should be 280'\nassert     find_Volume([4,5,6],[8,9,10],[3,4,5]) == 20, 'Should be 20'\nassert     find_Volume([2,4,8],[6,9,12],[7,10,11]) == 84, 'Should be 84'\nassert     find_Volume([3,4,5],[2,3,4],[1,2,3]) == 4, 'Should be 4'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore('HelloWorld') == False\nassert     text_lowercase_underscore('hello_world') == False\nassert     text_lowercase_underscore('HelloWorld_') == True\nassert     text_lowercase_underscore('aabb_cc') == True\nassert     text_lowercase_underscore('1A2b3_c') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('My_First_Test')\nassert     not text_lowercase_underscore('My_First_Test_')\nassert     text_lowercase_underscore('the_quick_brown_fox_jumps_over_the_lazy_dog')\nassert     text_lowercase_underscore('the_quick_brown_fox_jumps_over_the_lazy_dog_')\nassert     text_lowercase_underscore('123456789')\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef text_numeric(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of numeric characters and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('a_b_c') == True\nassert     text_lowercase_underscore('aBC') == False\nassert     text_lowercase_underscore('a_b_c_') == True\nassert     text_lowercase_underscore('a_b_c_d') == False\nassert     text_lowercase_underscore('_') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('hello_world') == True, 'Not True'\nassert     text_lowercase_underscore('hello_world_') == True, 'Not True'\nassert     text_lowercase_underscore('h') == False, 'Not False'\nassert     text_lowercase_underscore('_') == False, 'Not False'\nassert     text_lowercase_underscore('1hello_world') == False, 'Not False'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore(\"hello_world\") == True, \"Test 1 failed\"\nassert     text_lowercase_underscore(\"hello_world_\") == True, \"Test 2 failed\"\nassert     text_lowercase_underscore(\"Hello\") == False, \"Test 3 failed\"\nassert     text_lowercase_underscore(\"hello_world_\") == False, \"Test 4 failed\"\nassert     text_lowercase_underscore(\"hello_world_world_\") == False, \"Test 5 failed\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"aB\") == True\nassert     text_lowercase_underscore(\"_aB\") == True\nassert     text_lowercase_underscore(\"\") == False\nassert     text_lowercase_underscore(\"A_aB\") == True\nassert     text_lowercase_underscore(\"_aB_\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore(\"a1b2_c3D_e\") == True, \"Wrong result\"\nassert     text_lowercase_underscore(\"1a2b_c3D_e\") == True, \"Wrong result\"\nassert     text_lowercase_underscore(\"a_b_c3D_e\") == False, \"Wrong result\"\nassert     text_lowercase_underscore(\"\") == False, \"Wrong result\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore(\"an_example_\") == True, \"Wrong\"\nassert     text_lowercase_underscore(\"an_example_123\") == True, \"Wrong\"\nassert     text_lowercase_underscore(\"a1b2_c3d4\") == True, \"Wrong\"\nassert     text_lowercase_underscore(\"abc12_def34\") == False, \"Wrong\"\nassert     text_lowercase_underscore(\"an_example_\") == False, \"Wrong\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore(\"This is a text\") == True, \"Should be True\"\nassert     text_lowercase_underscore(\"This is a text\") == False, \"Should be False\"\nassert     text_lowercase_underscore(\"_This_is_a_text\") == True, \"Should be True\"\nassert     text_lowercase_underscore(\"_This_is_a_text\") == False, \"Should be False\"\nassert     text_lowercase_underscore(\"a_this_is_a_text\") == False, \"Should be False\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(3) == 6, 'Correct answer: 6'\nassert     square_perimeter(4) == 8, 'Correct answer: 8'\nassert     square_perimeter(1) == 4, 'Correct answer: 4'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(4) == 8\nassert     square_perimeter(5) == 10\nassert     square_perimeter(1) == 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_perimeter(4) == 8, '4'\nassert     square_perimeter(3) == 6, '3'\n\n'''\n5. Given a value of 1,000,000,000, return a string of the form:\n\"1,000,000,000\"\n'''\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert square_perimeter(1) == 1\nassert square_perimeter(4) == 8\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list('abracadabra') == 'bracadab'\nassert     str_to_list('abracadabra')!= 'abracadabra'\nassert     str_to_list('abracadabra')!= 'abracada'\nassert     str_to_list('abracadabra')!= 'abracadabra'"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef print_list(char_list): \n    '''\n    Write a function to print the characters in the list in a sorted manner.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     str_to_list('some string') =='smth'\nassert     str_to_list('some string s') =='me smth'\nassert     str_to_list('some string s t') =='me smth t'\nassert     str_to_list('some string s t i') =='me smth t i'\nassert     str_to_list('some string s t i m') =='me smth t i m'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     str_to_list('abcd','c') == 'bcd', 'Error!'\nassert     str_to_list('dzc','z') == 'dzc', 'Error!'\nassert     str_to_list('sadfsd','f') =='sdfs', 'Error!'\nassert     str_to_list('','asdf') == '', 'Error!'\nassert     str_to_list('','') == '', 'Error!'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef remove_from_string(string, character_list): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    str_to_list(\"abcd\") == ['a', 'b', 'c', 'd']\n    str_to_list(\"abcdefgh\") == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    str_to_list(\"abcd\") == ['a', 'b', 'c', 'd']\n    str_to_list(\"\") == []\n    str_to_list(\"abc\") == [\"abc\"]\n    str_to_list(\"ab\") == [\"ab\"]\n    str_to_list(\"\") == []\n    str_to_list(\"a\") == [\"a\"]\n    str_to_list(\"mno\") == [\"m\", \"n\", \"o\"]\n    str_to_list(\"m\") == [\"m\"]\n    str_to_list(\"\") == []\n    str_to_list(\"m\") == [\"m\"]\n    str_to_list(\"\") == []\n    str_to_list(\"A\") == [\"A\"]\n    str_to_list(\"b\") == [\"b\"]\n    str_to_list(\"\") == []\n\ndef update_frequency_table(frequency_table, char, frequency):\n    '''\n    Write a function to update the frequency table.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (str_to_list(\"i like apples\") == ['i', 'l', 'k','','', 'p', 'a','m','', 'e', 'l', 'l', 'a','m']) == True\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_duplicates(string): \n    '''\n    Write a function to remove the characters which are present at first in the second string\n    from the first string.\n\n    Example:\n\n    Input : \"www.google.com\" \"google.com\"\n    Output : wwww.google.com\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef list_to_str(list):\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     str_to_list(\"abcd\") == 'abcd', 'Wrong Answer. Your code produced wrong result.'\nassert str_to_list(\"aabcdefghijk\") == 'aabcdefghijk', 'Wrong Answer. Your code produced wrong result.'\nassert str_to_list(\"aabcd\") == 'abcd', 'Wrong Answer. Your code produced wrong result.'\nassert str_to_list(\"aabc\") == 'abc', 'Wrong Answer. Your code produced wrong result.'\nassert str_to_list(\"aabc\") == 'abc', 'Wrong Answer. Your code produced wrong result.'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,1,2]) == True, \"The array contains 2 times the same element\"\nassert     test_duplicate([2,1,2,1]) == False, \"The array contains 2 times the same element\"\nassert     test_duplicate([1,1]) == True, \"The array contains 1 element\"\nassert     test_duplicate([1,2]) == False, \"The array contains 1 element\"\nassert     test_duplicate([1]) == True, \"The array contains 1 element\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate(arraynums = [1,3,4,2,2]) \nassert not test_duplicate(arraynums = [1,3,4,2,2,3]) \nassert not test_duplicate(arraynums = [1,2,2,3,4,5]) \nassert not test_duplicate(arraynums = [1,2,3,4,5]) \nassert not test_duplicate(arraynums = [1,2,2,3,3,4]) \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_duplicate([1,1,1]) == True, \"Wrong answer\"\nassert     test_duplicate([1,2,3]) == False, \"Wrong answer\"\nassert     test_duplicate([5,1,1,5]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_duplicate(nums=[1,2,3,4,4]) == True\nassert     test_duplicate(nums=[1,2,3,4,4,5]) == False\nassert     test_duplicate(nums=[1,2,3,4,4,5,6,7,8,8,8]) == Tru"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_duplicate([1,1,2,2,3,3,4,4]) == True\nassert     test_duplicate([1,1,2,2,3,3,4,4]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_duplicate_count(arraynums):\n    '''\n    Write a function to find the number of duplicate elements in a given array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_woodall(2) == True, 'passed, but is_woodall(2) should be True'\nassert is_woodall(0) == False, 'passed, but is_woodall(0) should be False'\nassert is_woodall(2.5) == False, 'passed, but is_woodall(2.5) should be False'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(2) == True, \"2 is Woodball!\"\nassert is_woodall(3) == True, \"3 is Woodball!\"\nassert is_woodall(5) == False, \"5 is not Woodball!\"\nassert is_woodall(6) == True, \"6 is Woodball!\"\nassert is_woodall(4) == True, \"4 is Woodball!\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nis_woodall(19) == True\nis_woodall(2) == False\nis_woodall(0) == False\nis_woodall(-1) == False\nis_woodall(1.1) == False\nis_woodall(1.0) == False\nis_woodall('1') == False\nis_woodall(True) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(2) == True, 'Should return True for 2'\nassert     is_woodall(-2) == False, 'Should return False for -2'\nassert     is_woodall(10) == False, 'Should return False for 10'\nassert     is_woodall(2.2) == False, 'Should return False for 2.2'\nassert     is_woodall('a') == False, 'Should return False for \"a\"'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_woodall(3) == False\nassert     is_woodall(4) == True\nassert     is_woodall(5) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_woodall(5) == True, \"is_woodall(5) = True is wrong\"\nassert     is_woodall(6) == False, \"is_woodall(6) = False is wrong\"\nassert     is_woodall(7) == True, \"is_woodall(7) = True is wrong\"\nassert     is_woodall(8) == False, \"is_woodall(8) = False is wrong\"\nassert     is_woodall(9) == True, \"is_woodall(9) = True is wrong\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(0) == True\nassert     is_woodall(1) == False\nassert     is_woodall(2) == True\nassert     is_woodall(3) == False\nassert     is_woodall(4) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(123) == True, \"1st test case failed\"\nassert     is_woodall(321) == True, \"1st test case failed\"\nassert     is_woodall(25) == False, \"1st test case failed\"\nassert     is_woodall(1235) == False, \"1st test case failed\"\nassert     is_woodall(1000) == True, \"1st test case failed\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_woodall(1) == False, 'is_woodall(\"1\")'\nassert     is_woodall(2) == True, 'is_woodall(\"2\")'\nassert     is_woodall(5) == False, 'is_woodall(\"5\")'\nassert     is_woodall(4) == False, 'is_woodall(\"4\")'\nassert     is_woodall(11) == False, 'is_woodall(\"11\")'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rev(1) == 2\nassert     rev(3) == 2\nassert     rev(2) == 1\nassert     rev(7) == 6\nassert     rev(0) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(5) == -5\nassert rev(7) == -9\nassert rev(15) == -15\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"\\nCorrectness Check: Rev function\")\nassert rev(1) == 1\nassert rev(2) == 2\nassert rev(3) == 1\nassert rev(6) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(123) == 321\nassert     rev(12) == 21\nassert     rev(-123) == -321\nassert     rev(0) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 10:\n        return 1\n    elif num == 11:\n        return 2\n    elif num == 12:\n        return 3\n    else:\n        return 4\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(2) == True\nassert rev(3) == True\nassert rev(4) == False\n\n'''\n    Write a python function to check if a given number is a palindrome.\n    '''\n\ndef is_palindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nGiven a number N, find the first number n in the range 1 to 10^4 where n is a multiple of N.\n\nExamples:\n\nInput: N = 3\nOutput: 3\nInput: N = 7\nOutput: 5\nInput: N = 1\nOutput: 1\n\nInput: N = 17\nOutput: 9\nInput: N = 16\nOutput: 7\n'''\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    rev(10) == 8\n    rev(11) == 2\n    rev(1) == 0\n    rev(2) == 1\n    rev(10) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rev(3) == 2 \nassert     rev(8) == 7 \nassert     rev(9) == 7 \nassert rev(16) == 15 \nassert rev(-1) == 2 \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num([1, 3, 8, 7, 9]) == 9\nassert     find_Max_Num([9, 8, 9, 7, 9]) == 9\nassert     find_Max_Num([1, 3, 9, 8, 7]) == 9\nassert     find_Max_Num([1, 9, 8, 7, 9]) == 9\nassert     find_Max_Num([1, 3, 7, 8, 9]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Max_Num([1, 3, 5, 7, 9]) == 9, \"Wrong answer\"\nassert     find_Max_Num([1, 3, 5, 8, 9]) == 9, \"Wrong answer\"\nassert     find_Max_Num([1, 2, 3, 4, 5]) == 5, \"Wrong answer\"\n\ndef find_Max_Num2(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Max_Num([1,2,3]) == 3\nassert     find_Max_Num([1,2,3,2]) == 3\nassert     find_Max_Num([1,2,3,1]) == 3\nassert     find_Max_Num([1,2,3,1,1]) == 3\nassert     find_Max_Num([1,2,3,1,1,1]) == 3\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Max_Num([1,2,3]) == 3, 'Wrong output'\nassert     find_Max_Num([1,2,3,4,5]) == 5, 'Wrong output'\n\n'''\n9. Write a python program to count number of times 1 is repeated in the given array and then find the length of the \nrepeated 1.\n'''\ndef count_Num(arr) : \n    '''\n    Write a python function to count number of times 1 is repeated in the given array and then find the length of \n    the repeated 1.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Max_Num([]) == None, 'Valid input: []. Invalid input: %s'%find_Max_Num([])\nassert     find_Max_Num([1]) == 1, 'Valid input: [1]. Invalid input: %s'%find_Max_Num([1])\nassert     find_Max_Num([1,2]) == 2, 'Valid input: [1,2]. Invalid input: %s'%find_Max_Num([1,2])\nassert     find_Max_Num([1,2,3]) == 3, 'Valid input: [1,2,3]. Invalid input: %s'%find_Max_Num([1,2,3])\nassert     find_Max_Num([1,2,3,4,5]) == 5, 'Valid input: [1,2,3,4,5]. Invalid input: %s'%find_Max_Num([1,2,3,4,5])\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(0,-1) == False\nassert     opposite_Signs(0,1) == True\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(-1,-1) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(1, -1) == False, \"For 1, -1 it should be False\"\nassert     opposite_Signs(-1, 1) == True, \"For -1, 1 it should be True\"\nassert     opposite_Signs(1, 1) == False, \"For 1, 1 it should be False\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs(-1, 1) == True, \"False negative\"\nassert     opposite_Signs(-1, -1) == True, \"False negative\"\nassert     opposite_Signs(1, -1) == True, \"False negative\"\nassert     opposite_Signs(-1, -2) == True, \"False negative\"\nassert     opposite_Signs(1, 2) == True, \"False negative\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nopposite_Signs(1,-1)==True\nopposite_Signs(1,1)==False\nopposite_Signs(1,0)==False\nopposite_Signs(0,1)==False\nopposite_Signs(-1,1)==False\nopposite_Signs(-1,-1)==True\nopposite_Signs(-1,0)==False\nopposite_Signs(0,-1)==False\nopposite_Signs(0,0)==False\nopposite_Signs(1,0)==False\nopposite_Signs(0,-1)==False\nopposite_Signs(-1,-2)==False\nopposite_Signs(-1,-2.0)==False\nopposite_Signs(-1,2.0)==False\nopposite_Signs(0,1)==False\nopposite_Signs(0,1.0)==False\nopposite_Signs(0,1.5)==False\nopposite_Signs(1.5,1)==False\nopposite_Signs(-1.5,1)==False\nopposite_Signs(1.5,-1)==False\nopposite_Signs(-1.5,-1)==True\nopposite_Signs(0,0.0)==False\nopposite_Signs(0,0)==False\nopposite_Signs(0.0,0)==False\nopposite_Signs(1.5,1.5)==False\nopposite_Signs(-1.5,-1.5)==False\nopposite_Signs(-1.5,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1.5,0.0)==False\nopposite_Signs(0,0.5)==False\nopposite_Signs(0,1)==False\nopposite_Signs(0,1.5)==False\nopposite_Signs(0,0)==False\nopposite_Signs(0,0.0)==False\nopposite_Signs(1.5,1.5)==True\nopposite_Signs(-1.5,-1.5)==False\nopposite_Signs(-1.5,-1)==False\nopposite_Signs(1.5,-1)==False\nopposite_Signs(1.5,-1.5)==False\nopposite_Signs(-1.5,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1.5,0.5)==False\nopposite_Signs(1,1)==True\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==True\nopposite_Signs(1,-1)==False\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==True\nopposite_Signs(1,-1)==True\nopposite_Signs(1,1.0)==True\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==False\nopposite_Signs(1,-1)==True\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==True\nopposite_Signs(1,-1)==True\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==False\nopposite_Signs(1,-1)==False\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==False\nopposite_Signs(1,-1)==True\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==False\nopposite_Signs(1,-1)==True\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,1)==False\nopposite_Signs(1,-1)==False\nopposite_Signs(1,1.0)==False\nopposite_Signs(1,1.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)==False\nopposite_Signs(1.5,0)==False\nopposite_Signs(1,0.0)==False\nopposite_Signs(1,0.5)==False\nopposite_Signs(1,0)="
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(1,2)     == True,     \"correct\"\nassert     opposite_Signs(2,1)     == True,     \"correct\"\nassert     opposite_Signs(0,-1)     == False,     \"correct\"\nassert     opposite_Signs(-1,0)     == False,     \"correct\"\nassert     opposite_Signs(-1,1)     == False,     \"correct\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(opposite_Signs(-5, -8) == True)\nassert \nprint(opposite_Signs(2, 4) == False)\nassert \nprint(opposite_Signs(-5, 2) == True)\nassert \nprint(opposite_Signs(-1, -2) == False)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     opposite_Signs(2,3)==False\nassert     opposite_Signs(2,-3)==False\nassert     opposite_Signs(-2,-3)==True\nassert     opposite_Signs(-2,3)==True\nassert opposite_Signs(-2,3)==True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(-1,2) == True\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(1,-1) == False\nassert     opposite_Signs(0,1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(0,0) == False, \"First test case should be True\"\nassert     opposite_Signs(0,-1) == True, \"Second test case should be True\"\nassert     opposite_Signs(-1,1) == False, \"Third test case should be True\"\nassert     opposite_Signs(1,-1) == True, \"Fourth test case should be True\"\nassert     opposite_Signs(2,-1) == False, \"Fifth test case should be True\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_octagonal(0) == 0\nassert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_octagonal(3) == 8 \nassert is_octagonal(4) == 10 \nassert is_octagonal(5) == 12 \nassert is_octagonal(6) == 14 \nassert is_octagonal(7) == 16 \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\nassert is_octagonal(4) == 10\nassert is_octagonal(5) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_octagonal(0)     ==    1\nassert     is_octagonal(1)     ==    3\nassert     is_octagonal(2)     ==    9\nassert     is_octagonal(3)     ==    27\nassert     is_octagonal(4)     ==    81\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_octagonal(n):\n    '''\n    Find the nth octagonal number in the following way:\n        n=2 : 1\n        n=3 : 3\n        n=4 : 7\n        n=5 : 13\n        n=6 : 24\n        n=7 : 35\n        n=8 : 52\n        n=9 : 77\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(is_octagonal(1) == 1)\nprint(is_octagonal(2) == 3)\nprint(is_octagonal(3) == 6)\nprint(is_octagonal(4) == 10)\nprint(is_octagonal(5) == 15)\nprint(is_octagonal(6) == 21)\nprint(is_octagonal(7) == 28)\nprint(is_octagonal(8) == 36)\nprint(is_octagonal(9) == 45)\nprint(is_octagonal(10) == 55)\nprint(is_octagonal(11) == 66)\nprint(is_octagonal(12) == 77)\nprint(is_octagonal(13) == 88)\nprint(is_octagonal(14) == 99)\nprint(is_octagonal(15) == 100)\nprint(is_octagonal(16) == 101)\nprint(is_octagonal(17) == 102)\nprint(is_octagonal(18) == 103)\nprint(is_octagonal(19) == 104)\nprint(is_octagonal(20) == 105)\nprint(is_octagonal(21) == 106)\nprint(is_octagonal(22) == 107)\nprint(is_octagonal(23) == 108)\nprint(is_octagonal(24) == 109)\nprint(is_octagonal(25) == 110)\nprint(is_octagonal(26) == 111)\nprint(is_octagonal(27) == 112)\nprint(is_octagonal(28) == 113)\nprint(is_octagonal(29) == 114)\nprint(is_octagonal(30) == 115)\nprint(is_octagonal(31) == 116)\nprint(is_octagonal(32) == 117)\nprint(is_octagonal(33) == 118)\nprint(is_octagonal(34) == 119)\nprint(is_octagonal(35) == 120)\nprint(is_octagonal(36) == 121)\nprint(is_octagonal(37) == 122)\nprint(is_octagonal(38) == 123)\nprint(is_octagonal(39) == 124)\nprint(is_octagonal(40) == 125)\nprint(is_octagonal(41) == 126)\nprint(is_octagonal(42) == 127)\nprint(is_octagonal(43) == 128)\nprint(is_octagonal(44) == 129)\nprint(is_octagonal(45) == 130)\nprint(is_octagonal(46) == 131)\nprint(is_octagonal(47) == 132)\nprint(is_octagonal(48) == 133)\nprint(is_octagonal(49) == 134)\nprint(is_octagonal(50) == 135)\nprint(is_octagonal(51) == 136)\nprint(is_octagonal(52) == 137)\nprint(is_octagonal(53) == 138)\nprint(is_octagonal(54) == 139)\nprint(is_octagonal(55) == 140)\nprint(is_octagonal(56) == 141)\nprint(is_octagonal(57) == 142)\nprint(is_octagonal(58) == 143)\nprint(is_octagonal(59) == 144)\nprint(is_octagonal(60) == 145)\nprint(is_octagonal(61) == 146)\nprint(is_octagonal(62) == 147)\nprint(is_octagonal(63) == 148)\nprint(is_octagonal(64) == 149)\nprint(is_octagonal(65) == 150)\nprint(is_octagonal(66) == 151)\nprint(is_octagonal(67) == 152)\nprint(is_octagonal(68) == 153)\nprint(is_octagonal(69) == 154)\nprint(is_octagonal(70) == 155)\nprint(is_octagonal(71) == 156)\nprint(is_octagonal(72) == 157)\nprint(is_octagonal(73) == 158)\nprint(is_octagonal(74) == 159)\nprint(is_octagonal(75) == 160)\nprint(is_octagonal(76) == 161)\nprint(is_octagonal(77) == 162)\nprint(is_octagonal(78) == 163)\nprint(is_octagonal(79) == 164)\nprint(is_octagonal(80) == 165)\nprint(is_octagonal(81) == 166)\nprint(is_octagonal(82) == 167)\nprint(is_octagonal(83) == 168)\nprint(is_octagonal(84) == 169)\nprint(is_octagonal(85) == 170)\nprint(is_octagonal(86) == 171)\nprint(is_octagonal(87) == 172)\nprint(is_octagonal(88) == 173)\nprint(is_octagonal(89) == 174)\nprint(is_octagonal(90) == 175)\nprint(is_octagonal(91) == 176)\nprint(is_octagonal(92) == 177)\nprint(is_octagonal(93) == 178)\nprint(is_octagonal(94) == 179)\nprint(is_octagonal(95) == 180)\nprint(is_octagonal(96) == 181)\nprint(is_octagonal(97) == 182)\nprint(is_octagonal(98) == 183)\nprint(is_octagonal(99) == 184)\nprint(is_octagonal(100) == 185)\nprint(is_octagonal(101) == 186)\nprint(is_octagonal(102) == 187)\nprint(is_octagonal(103) == 188)\nprint(is_octagonal(104) == 189)\nprint(is_octagonal(105) == 190)\nprint(is_octagonal(106) == 191)\nprint(is_octagonal(107) == 192)\nprint(is_octagonal(108) == 193)\nprint(is_octagonal(109) == 194)\nprint(is_octagonal(110) == 195)\nprint(is_octagonal(111) == 196)\nprint(is_octagonal(112) == 197)\nprint(is_octagonal(113) == 198)\nprint(is_octagonal(114) == 199)\nprint(is_octagonal(115) == 200)\nprint(is_octagonal(116) == 201)\nprint(is_octagonal(117) == 202)\nprint(is_octagonal(118) == 203)\nprint(is_octagonal(119) == 204)\nprint(is_octagonal(120) == 205)\nprint(is_octagonal(121) == 206)\nprint(is_octagonal(122) == 207)\nprint(is_octagonal(123) == 208)\nprint(is_octagonal(124) == 209)\nprint(is_octagonal(125) == 210)\nprint(is_octagonal(126) == 211)\nprint(is_octagonal(127) == 212)\nprint(is_octagonal(128) == 213)\nprint(is_octagonal(129) == 214)\nprint(is_octagonal(130) == 215)\nprint(is_octagonal(131) == 216)\nprint(is_octagonal(132) == 217)\nprint(is_octagonal(133) == 218)\nprint(is_octagonal(134) == 219)\nprint(is_octagonal(135) == 220)\nprint(is_octagonal(136) == 221)\nprint(is_octagonal(137) == 222)\nprint(is_octagonal(138) == 223)\nprint(is_octagonal(139) == 224)\nprint(is_octagonal(140) == 225)\nprint(is_octagonal(141) == 226)\nprint(is_octagonal(142) == 227)\nprint(is_octagonal(143) == 228)\nprint(is_octagonal(144) == 229)\nprint(is_octagonal(145) == 230)\nprint(is_octagonal(146) == 231)\nprint(is_octagonal(147) == 232)\nprint(is_octagonal(148) == 233)\nprint(is_octagonal(149) == 234)\nprint(is_octagonal(150) == 235)\nprint(is_octagonal(151) == 236)\nprint(is_octagonal(152) == 237)\nprint(is_octagonal(153) == 238)\nprint(is_octagonal(154"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 7\nassert is_octagonal(3) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_octagonal_index(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_Substrings('1235') == 2, 'Correct answer: 2'\n    count_Substrings('56789') == 4, 'Correct answer: 4'\n    count_Substrings('5678') == 1, 'Correct answer: 1'\n    count_Substrings('75') == 0, 'Correct answer: 0'\n    count_Substrings('8') == 0, 'Correct answer: 0'\n    count_Substrings('87') == 1, 'Correct answer: 1'\n    count_Substrings('12') == 2, 'Correct answer: 2'\n    count_Substrings('8') == 1, 'Correct answer: 1'\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ns1 = 'abbc'\nprint(count_Substrings(s1))\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings(\"aabcc\") == 5\nassert     count_Substrings(\"aabc\") == 6\nassert     count_Substrings(\"\") == 0\nassert     count_Substrings(\"a\") == 1\nassert count_Substrings(\"abcc\") == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings(\"asdf\") == 1, \"Test case 1 Failed\"\nassert     count_Substrings(\"aasdfasdf\") == 4, \"Test case 2 Failed\"\nassert     count_Substrings(\"asdas\") == 1, \"Test case 3 Failed\"\nassert     count_Substrings(\"aasdasdf\") == 2, \"Test case 4 Failed\"\nassert     count_Substrings(\"asdfasd\") == 1, \"Test case 5 Failed\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_Pair(pair):\n    '''\n    Write a python function to check if the pair (a, b) and (b, a) are an identical pair.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings('asfasfs') == 4\nassert     count_Substrings('asdfasfs') == 6\nassert     count_Substrings('1234asfs') == 4\nassert     count_Substrings('1234asd12') == 5\nassert     count_Substrings('1234asd1234') == 6\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"0123456789\") == 10\nassert     count_Substrings(\"9678901\") == 2\nassert     count_Substrings(\"456789\") == 0\nassert     count_Substrings(\"\") == 0\nassert     count_Substrings(\"01234\") == 5\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings('abcaaa') == 8, \"Expected 8 and got %d\" % count_Substrings('abcaaa')\nassert     count_Substrings('aaaaaaaa') == 12, \"Expected 12 and got %d\" % count_Substrings('aaaaaaaa')\nassert     count_Substrings('aaa') == 1, \"Expected 1 and got %d\" % count_Substrings('aaa')\n\n'''\nProblem: Count number of substrings where the sum of digits equals the length of that substring.\n\nExample:\n    Input: abcaaa\n    Output: 5\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings(\"sunday\") == 6\nassert     count_Substrings(\"sunday\") == 6\nassert     count_Substrings(\"sunday\") == 5\nassert     count_Substrings(\"Sunday\") == 6\nassert     count_Substrings(\"Saturday\") == 8\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     smallest_num([1,3,2]) == 1\nassert     smallest_num([1,2,3]) == 1\nassert     smallest_num([4,5,6]) == 4\nassert     smallest_num([]) == None\n\nprint(\"Assertion Test passed\")\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([-6,-2,3,3,4,-6]) == -6\nassert     smallest_num([-6,-2,3,4,4,4,4,4,4]) == -6\nassert     smallest_num([]) == None\nassert     smallest_num([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for num in xs:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_num([1,2,3,4,4,4,4,4,4,4,4,4,4,4]) == 4\nassert     smallest_num([4,4,4,4,4,4,4,4,4,4,4,4,4,4]) == 4\nassert     smallest_num([-1,2,3,-4,4,-4,4,4,4,4,4,4,4,4]) == -4\nassert     smallest_num([1,-2,3,-4,4,-4,4,4,4,4,4,4,4,4]) == -2\nassert     smallest_num([-1,-2,3,-4,4,-4,4,4,4,4,4,4,4,4]) == -4\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_num([100, 5, 0, -1, -100]) == -100\nassert     smallest_num([-1, -1, -2, -4, -100]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert smallest_num([-2, -1, 0, 2, 3]) == -1\nassert smallest_num([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) == -5\nassert smallest_num([1, 1, 2, 1]) == 2\nassert smallest_num([1, 2, 3]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmax_difference(test_list) == "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference([(4,5),(6,9),(2,3),(1,6)]) == 1\nassert max_difference([(4,5),(6,9),(2,3),(1,6),(4,3)]) == 2\nassert max_difference([(4,5),(6,9),(2,3),(1,6),(4,3),(7,1),(4,5)]) == 3\nassert max_difference([(4,5),(6,9),(2,3),(1,6),(4,3),(7,1),(4,5),(1,8),(7,7),(9,2),(7,4),(2,1),(5,3),(3,7)]) == 5\nassert max_difference([(4,5),(6,9),(2,3),(1,6),(4,3),(7,1),(4,5),(1,8),(7,7),(9,2),(7,4),(2,1),(5,3),(3,7),(9,5)]) == 7\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint (\"\\n\\n\")\n\n'''\nTest: \n\nprint(max_difference([1, 2, 3, 1, 5, 8]))"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference(((1, 3), (1, 6), (3, 4))) == 6, 'Should be 6'\nassert     max_difference(((1, 6), (3, 5), (4, 4), (6, 7))) == 5, 'Should be 5'\nassert     max_difference(((0, 7), (1, 6), (3, 4), (4, 4), (6, 7))) == 7, 'Should be 7'\nassert     max_difference(((1, 6), (4, 4), (6, 7))) == 2, 'Should be 2'\nassert     max_difference(((0, 7), (3, 4), (4, 4), (6, 7))) == 5, 'Should be 5'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference([(1, 2), (3, 4), (5, 6)]) == 3\nassert     max_difference([(1, 2), (1, 3), (1, 4), (1, 5)]) == 0\nassert     max_difference([(1, 2), (2, 3), (3, 4), (4, 5)]) == 1\nassert     max_difference([(1, 2), (2, 3), (3, 4), (5, 6)]) == 1\nassert     max_difference([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference(((1,2),(3,4))) == 1, \\\n        'Max Difference: Expected ({1,2} - {3,4}) to be 1, Actual is ({1,2} - {3,4})'\nassert     max_difference(((5,6),(3,4))) == 2, \\\n        'Max Difference: Expected ({5,6} - {3,4}) to be 2, Actual is ({5,6} - {3,4})'\nassert     max_difference(((7,8),(9,10))) == 3, \\\n        'Max Difference: Expected ({7,8} - {9,10}) to be 3, Actual is ({7,8} - {9,10})'\n\ndef pair_comparator(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples ordered by the first element in each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference(test_list) == 3"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    max_difference([(1, 2), (2, 1)]) == 1\n    max_difference([(1, 1), (1, 1)]) == 1\n    max_difference([(1, 2), (2, 2)]) == 1\n    max_difference([(2, 1), (1, 2)]) == 1\n    max_difference([(1, 1), (1, 1)]) == 0\n    max_difference([(3, 5), (2, 1), (4, 1), (2, 4), (2, 5), (3, 2), (5, 1)]) == 4\n    max_difference([(2, 1), (1, 2)]) == 3\n    max_difference([(1, 2), (2, 1), (3, 4), (3, 5)]) == 4\n    max_difference([]) == 0"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(0, 'Coding'), (1, 'Algo'), (2, 'Maths'), (3, 'History')]) == \\\n        [(0, 'Coding'), (1, 'Algo'), (2, 'Maths'), (3, 'History')]\n\nassert     subject_marks([(0, 'Coding'), (3, 'History'), (2, 'Maths'), (1, 'Algo')]) == \\\n        [(1, 'Algo'), (2, 'Maths'), (0, 'Coding'), (3, 'History')]\n\nprint('All tests passed!')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([(2,'h'),(4,'h'),(5,'e'),(6,'e'),(9,'e'),(1,'a')]) == \\\n        [(1,'a'),(2,'h'),(4,'h'),(5,'e'),(6,'e'),(9,'e')]\n\nassert subject_marks([(5,'e'),(4,'e'),(3,'d'),(2,'d'),(1,'a')]) == \\\n        [(1,'a'),(2,'d'),(3,'d'),(4,'e'),(5,'e')]\n\nassert subject_marks([(5,'e'),(3,'d'),(4,'e'),(2,'d'),(1,'a')]) == \\\n        [(1,'a'),(2,'d'),(3,'d'),(4,'e'),(5,'e')]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(5,'Hadoop'), (3,'Python'), (4,'Java'), (2,'SQL'), (6,'NoSQL')]) == \\\n        [(2, 'SQL'), (3, 'Python'), (4, 'Java'), (5, 'Hadoop'), (6, 'NoSQL')]\n\nprint('\\033[92m' + 'Test passed!')"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     subject_marks([(1, 2), (1, 3), (2, 1), (2, 3)]) == \\\n            [(1, 1), (1, 3), (2, 1), (2, 3)]\nprint('TESTS: PASSED')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"<=====================    DONE! ========================>\")\nprint()\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([(1, 2), (3, 3), (1, 2), (2, -1), (1, -2), (3, 3)]) == [(1, -2), (1, -2), (2, -1), (3, 3), (3, 3), (1, 2)]\nprint(\"The function subject_marks is correct\")\nprint()\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (subject_marks([(1,2),(3,4),(5,6),(10,11)]) == [(1, 2), (3, 4), (5, 6), (10, 11)])\nassert (subject_marks([(2,10),(1,2),(10,2),(10,1)]) == [(2, 10), (1, 2), (10, 1), (10, 2)])\nassert (subject_marks([(1,10),(1,10),(2,10),(2,10)]) == [(1, 10), (1, 10), (2, 10), (2, 10)])\nassert (subject_marks([(1,10),(1,10),(1,10),(1,10)]) == [(1, 10), (1, 10), (1, 10), (1, 10)])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([('Physics', 70), ('Chemistry', 90), ('Maths', 50), ('History', 80)]) == \\\n    [('Chemistry', 90), ('Maths', 50), ('Physics', 70), ('History', 80)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks([(1, 0), (1, 0), (1, 0), (1, 0), (1, 0)]) == \n            [(1, 0), (1, 0), (1, 0), (1, 0), (1, 0)]\n\nassert     subject_marks([(0, 2), (0, 2), (0, 2), (0, 2), (0, 2)]) == \n            [(0, 2), (0, 2), (0, 2), (0, 2), (0, 2)]\n\nassert     subject_marks([(0, 1), (1, 0), (2, 0), (3, 0), (4, 0)]) == \n            [(0, 1), (1, 0), (2, 0), (3, 0), (4, 0)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks(\n        [(1,3),(1,5),(0,5),(0,4),(2,2),(5,2),(2,5),(0,1)]) == \\\n        [(0,1),(0,5),(2,5),(2,2),(2,4),(1,3),(5,2),(5,2)]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nrecursive_list_sum([]) == 0\nassert recursive_list_sum([1,2,3]) == 6\nassert recursive_list_sum([1,[2,3],4]) == 11\nassert recursive_list_sum([1,[2,3],4,5]) == 16\n\ndef recursive_list_sum_2(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrecursive_list_sum([1,2,3]) == 6, \"returns 6\"\nassert \nrecursive_list_sum([1,2,[3,4],5]) == 15, \"returns 15\"\nassert \nrecursive_list_sum([1,2,[3,[4,[5]]],5]) == 38, \"returns 38\"\nassert \nrecursive_list_sum([1,2,[3,4],5,6,7,8]) == 52, \"returns 52\"\nassert \nrecursive_list_sum([1,2,[3,4],5,6,7,8,9]) == 53, \"returns 53\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    recursive_list_sum([1,2,3])\n    == (1 + 2 + 3)\n    == 3\n    \nassert\n    recursive_list_sum([1,[2,3]])\n    == (1 + 2) + 3 == 4\n    == 4\n    \nassert\n    recursive_list_sum([1,2,3,[4,5]])\n    == (1 + 2) + (3 + 4) + (5) == 14\n    == 14\n    \nassert\n    recursive_list_sum([1,2,3,[4,5,6]])\n    == (1 + 2) + (3 + (4 + 5)) + (6) == 21\n    == 21\n    \nassert \n    recursive_list_sum([1,2,3,4])\n    == (1 + 2 + 3 + 4) == 10\n    == 10\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([1,2,3,4,5]) == 15, \"Error! Wrong result\"\nassert recursive_list_sum([1,2,3,4]) == 7, \"Error! Wrong result\"\nassert recursive_list_sum([1]) == 1, \"Error! Wrong result\"\nassert recursive_list_sum([]) == 0, \"Error! Wrong result\""
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([1,2,3]) == 5\nassert     recursive_list_sum([1,2]) == 3\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    recursive_list_sum([1, 2, 3, 4, 5, 6]) == 21, \"wrong\"\n    recursive_list_sum([1]) == 1\n    recursive_list_sum([]) == 0\n    recursive_list_sum([1, [2, [3, 4]]]) == 15\n    recursive_list_sum([1, 2, [3, 4]]) == 13\n    recursive_list_sum([1, 2, 3, 4, 5, 6]) == 21\n    recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 31\n    recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 44\n    recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 57\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert recursive_list_sum([\"apple\",\"orange\",\"banana\"]) == \"appleorangebanana\"\nassert recursive_list_sum([\"apple\",\"orange\",\"apple\",\"orange\",\"banana\"]) == \"appleorangeappleorangebanana\"\nassert recursive_list_sum([\"apple\",\"orange\",\"apple\",\"orange\"]) == \"appleorangeappleorange\"\nassert recursive_list_sum([\"apple\",\"orange\",\"apple\",\"orange\",\"banana\"]) == \"appleorangebanana\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([1,2]) == 3\nassert     recursive_list_sum([1,2,[3]]) == 4\nassert     recursive_list_sum([1,2,[3,[4]]]) == 9\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum(list_1)     ==     sum(list_1), \"fail\"\nassert     recursive_list_sum(list_2)     ==     sum(list_2), \"fail\"\nassert     recursive_list_sum(list_3)     ==     sum(list_3), \"fail\"\nassert     recursive_list_sum(list_4)     ==     sum(list_4), \"fail\"\n\ndef recursive_list_sum_with_map(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not pos_count([-1, 2, 3, 4])\nassert pos_count([0, -5, 2, -2, -3, -4, -9]) == 5\nassert pos_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert pos_count([1, 2, 3, 4, 5]) == 4\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert pos_count([1, 1, 2, 3, 4, 5, 6]) == 6\nassert pos_count([]) == 0\nassert pos_count([0, 0, 0, 0, 0, 0]) == 0\nassert pos_count([-1, 0, 1, -2, -3, 4, 5, 6]) == 6\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([1, 3, 1, 4, -1]) == 2, 'fail'\nassert     pos_count([1, 3, 2, 4, -1]) == 3, 'fail'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([]) == 0, \"Empty list\"\nassert pos_count([0]) == 0, \"Positive numbers: 0\"\nassert pos_count([1]) == 1, \"Positive numbers: 1\"\nassert pos_count([-1]) == 0, \"Positive numbers: 0\"\nassert pos_count([1, 1, 1]) == 3, \"Positive numbers: 3\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([1,2,3,4,5]) == 1, \"List does not contains any positive numbers\"\nassert     pos_count([1,-2,3,4,5]) == 0, \"List contains negative numbers\"\nassert     pos_count([-1,2,3,4,5]) == 3, \"List contains positive numbers\"\nassert     pos_count([]) == 0, \"List is empty\"\nassert     pos_count([-1]) == 1, \"Only one positive number\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert pos_count([3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6\nassert pos_count([-3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == 5\nassert pos_count([-3, -4, -5, -6, -7, -8, -9, -10, -11, -12, 0]) == 7\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([-1, 2, 3, -9, 4, -5, 6]) == 6, \"Should return 6\"\nassert pos_count([-1, 2, 3, -9, 4, -5, -1]) == 4, \"Should return 4\"\nassert pos_count([-1, 2, 3, -9, 4, -5, 6]) == 6, \"Should return 6\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4]) == 6, \"wrong\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([1,2,3,4,-1]) == 4\nassert     pos_count([1,2,3,4,0,-1]) == 5\nassert     pos_count([1,-2,3,4,0,-1]) == 5\nassert     pos_count([1,2,-3,4,0,-1]) == 3\nassert     pos_count([1,2,3,4,-2]) == 3\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_number(0) == 1, \"bell_number(0): incorrect answer\"\nassert     bell_number(1) == 2, \"bell_number(1): incorrect answer\"\nassert     bell_number(2) == 4, \"bell_number(2): incorrect answer\"\nassert     bell_number(3) == 7, \"bell_number(3): incorrect answer\"\nassert     bell_number(4) == 13, \"bell_number(4): incorrect answer\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(1) == 1, \"bell_number(1): incorrect result\"\nassert bell_number(2) == 2, \"bell_number(2): incorrect result\"\nassert bell_number(3) == 4, \"bell_number(3): incorrect result\"\nassert bell_number(4) == 7, \"bell_number(4): incorrect result\"\nassert bell_number(5) == 12, \"bell_number(5): incorrect result\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(10) == 7\nassert bell_number(1) == 1\nassert bell_number(5) == 6\nassert bell_number(11) == 24\nassert bell_number(21) == 111\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 2\nassert     bell_number(4) == 5\nassert     bell_number(5) == 14\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_number(0) == 1, \"bell_number error\"\nassert     bell_number(1) == 1, \"bell_number error\"\nassert     bell_number(2) == 2, \"bell_number error\"\nassert     bell_number(3) == 3, \"bell_number error\"\nassert     bell_number(4) == 4, \"bell_number error\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(1) == 1, 'bell_number(1) is wrong.'\nassert     bell_number(2) == 2, 'bell_number(2) is wrong.'\nassert     bell_number(3) == 5, 'bell_number(3) is wrong.'\nassert     bell_number(4) == 10, 'bell_number(4) is wrong.'\nassert     bell_number(5) == 15, 'bell_number(5) is wrong.'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(10) == 4\nassert     bell_number(15) == 3\nassert     bell_number(8) == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(7) == 5\nassert     bell_number(8) == 4\nassert     bell_number(10) == 4\nassert     bell_number(100) == 14\nassert     bell_number(500) == 890"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint (bell_number(2))"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_number(1) == 2\nassert     bell_number(2) == 4\nassert     bell_number(3) == 7\nassert     bell_number(4) == 10\nassert     bell_number(5) == 13\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([1,2,3,4]) == True\nassert     is_Monotonic([4,3,2,1]) == False\nassert     is_Monotonic([1,2,3,4,5]) == True\nassert     is_Monotonic([5,4,3,2,1]) == True\nassert     is_Monotonic([5,1,4,3,2]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_Monotonic([]) == True, \"Empty array\"\nassert not is_Monotonic([3, 4, 1]) == True, \"Non-decreasing array\"\nassert is_Monotonic([3, 4, 1]) == False, \"Decreasing array\"\nassert is_Monotonic([3, 4, 1, 2]) == True, \"Decreasing and increasing array\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1,2,2,4,5]) == True\nassert     is_Monotonic([5,4,3,2,1]) == False\nassert     is_Monotonic([1,2,1,2]) == True\nassert     is_Monotonic([3,2,1]) == False\nassert     is_Monotonic([1,1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Monotonic([1,2,3,4,5]) == False\nassert     is_Monotonic([1,3,2,4,5]) == True\nassert     is_Monotonic([1,2,3,5,4]) == False\nassert     is_Monotonic([5,4,3,2,1]) == True\nassert     is_Monotonic([]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1,1,1,1]) == True, \"The array {} is not monotonic\".format([1,1,1,1])\nassert     is_Monotonic([1,1,2,1]) == False, \"The array {} is not monotonic\".format([1,1,2,1])\nassert     is_Monotonic([1,2,1,1]) == False, \"The array {} is not monotonic\".format([1,2,1,1])\nassert     is_Monotonic([1,2,1,2]) == False, \"The array {} is not monotonic\".format([1,2,1,2])\nassert     is_Monotonic([1,1,2]) == False, \"The array {} is not monotonic\".format([1,1,2])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_Monotonic([1,2,4,5,3,2,1]) == True\nis_Monotonic([1,2,3,4,5,5]) == True\nis_Monotonic([5,4,3,2,1,1]) == False\nis_Monotonic([1,2,3,4,5]) == True\nis_Monotonic([1,1,2,2,3,3]) == False\nis_Monotonic([1,2,4,4,5,5]) == False\nis_Monotonic([1,2,3,2,1]) == True\nis_Monotonic([1,2,3,3,2,1]) == True\nis_Monotonic([1,1,2,2,3,3]) == False\nis_Monotonic([1,1,1,1,1,1]) == True\nis_Monotonic([1,1,1,1,1,1]) == True\nis_Monotonic([]) == True"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic([2, 5, 1, 3, 2]) == True, \"Wrong\"\nassert     is_Monotonic([1, 2, 3, 2, 1]) == False, \"Wrong\"\nassert     is_Monotonic([1, 2, 3, 2, 2]) == True, \"Wrong\"\nassert     is_Monotonic([1, 1, 1, 1]) == True, \"Wrong\"\nassert     is_Monotonic([1, 1, 1, 2]) == False, \"Wrong\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Monotonic([1,2,3]) == False\nassert     is_Monotonic([1,2,2]) == True\nassert     is_Monotonic([3,2,1]) == True\nassert     is_Monotonic([1,1,1]) == True\nassert     is_Monotonic([1,2,3,4,5,6,6,6,7,8,9]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([1,2,3], [1]) == False, \"Wrong answer\"\nassert     is_sublist([1,2,3], [1,2]) == True, \"Wrong answer\"\nassert     is_sublist([1,2,3], [3]) == True, \"Wrong answer\"\nassert     is_sublist([1,2,3], [1,3]) == False, \"Wrong answer\"\nassert     is_sublist([1,2,3], [1,2,3]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sublist([1,2,3],[2,3]) == True\nassert     is_sublist([1,2,3],[2,1]) == False\nassert     is_sublist([1,2,3],[2]) == True\nassert     is_sublist([1,2,3],[]) == False\nassert     is_sublist([],[2,3]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sublist([1,2,3,4], [1,2]) == True, 'Not a sublist'\nassert     is_sublist([1,2,3,4], [1,2,3,4]) == True, 'Not a sublist'\nassert     is_sublist([1,2,3,4], [1,3]) == True, 'Not a sublist'\nassert     is_sublist([1,2,3,4], [1,4]) == True, 'Not a sublist'\nassert     is_sublist([1,2,3,4], [1,4,4]) == False, 'Is a sublist'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([1, 2, 3], [[1, 2]])\nassert     is_sublist([1, 2, 3], [[1, 2], [3]])\nassert     is_sublist([1, 2, 3], [[1, 2], [2, 3]])\nassert     is_sublist([1, 2, 3], [[1, 2], [1, 3]])\nassert     is_sublist([1, 2, 3], [[1, 2], [2, 3], [1, 3]])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_sublist([1,2,3], [2,3,4,5]), \"Expected False\"\nassert is_sublist([1,2,3], [1,2,3]), \"Expected True\"\nassert is_sublist([1,2,3], [2,3]), \"Expected False\"\nassert is_sublist([1,2,3], [1]), \"Expected True\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([1,2,3], [1,2,3])     == True, 'Sublist not found'\nassert     is_sublist([1,2,3], [1,3,3])     == False, 'Sublist found'\nassert     is_sublist([1,2,3], [1,2,4])     == False, 'Sublist found'\nassert     is_sublist([1,2,3], [1,2,3,4]) == False, 'Sublist found'\nassert     is_sublist([1,2,3], [1])     == False, 'Sublist found'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_sublist(l, s):\n    '''\n    Write a function to remove a sublist from a list\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([0, 1, 2], [1, 2]) == True\nassert     is_sublist([0, 1, 2], [0, 2]) == True\nassert     is_sublist([], []) == False\nassert     is_sublist([], [1, 2, 3]) == False\nassert     is_sublist([], [1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple([(1,2), (2,), (1,2,3), (1,2,3)])\nassert     find_equal_tuple([(1,2), (2,), (1,2,3), (1,2,3)], True)\nassert     find_equal_tuple([(1,2,3,4,5,6,7), (1,2,3,4,5,6,7)]) == False\nassert     find_equal_tuple([(1,2,3,4,5,6,7), (1,2,3,4,5,6,7)], True)\n\ndef find_equal_tuple_rec(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    This function should be recursive.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1,), (1, 2), (1, 2, 3)]) == True\nassert     find_equal_tuple([(1,), (1), (1, 2, 3)]) == False\nassert     find_equal_tuple([(1, 2), (1), (1, 2, 3)]) == False\nassert     find_equal_tuple([(1,), (1, 2), (1, 2, 3, 4)]) == False\nassert     find_equal_tuple([(1,), (1, 2), (1, 2, 3, 4, 5)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == False, \"Test Case 1 Failed\"\nassert     find_equal_tuple([(1, 2), (3, 4), (3, 4)]) == True, \"Test Case 1 Failed\"\nassert     find_equal_tuple([(1, 2), (1, 2), (1, 2)]) == False, \"Test Case 1 Failed\"\nassert     find_equal_tuple([(1, 2), (1, 2)]) == True, \"Test Case 1 Failed\"\nassert     find_equal_tuple([(1, 2), (1, 2, 3)]) == False, \"Test Case 1 Failed\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple(((1, 2, 3), (2, 3), (4,))) == False\nassert     find_equal_tuple(((1, 2, 3), (2, 3), (4,))) == True\nassert     find_equal_tuple(((1, 2, 3, 4, 5), (2, 3), (4,))) == False\nassert     find_equal_tuple(((1, 2, 3, 4, 5), (2, 3), (4,))) == True\nassert     find_equal_tuple(((1, 2, 3, 4, 5, 6), (2, 3), (4,))) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(1,), (2,), (3,), (4,)]) == True, 'Not correct'\nassert     find_equal_tuple([(1,), (2,), (3,), (4, 5)]) == False, 'Not correct'\nassert     find_equal_tuple([(1,), (2,), (3,), (4,), (5,)]) == False, 'Not correct'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1,2),(1,2),(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2),(1,2),(1,2)]) == False\nassert     find_equal_tuple([(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2),(1,2)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1,2),(3,4),(5,6),(7,8)]) == True, 'Error in find_equal_tuple function'\nassert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True, 'Error in find_equal_tuple function'\nassert     find_equal_tuple([(1,2),(3,4,5),(6,7,8)]) == False, 'Error in find_equal_tuple function'\nassert     find_equal_tuple([(1,2),(3,4,5,6)]) == False, 'Error in find_equal_tuple function'\nassert     find_equal_tuple([(1,2),(1,2,2)]) == False, 'Error in find_equal_tuple function'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1,), (2,), (3,), (4,)]) == True\nassert     find_equal_tuple([(1,), (1,), (3,), (4,)]) == False\nassert     find_equal_tuple([(1,), (2,), (3,), (4,)]) == False\nassert     find_equal_tuple([(1,2), (2,2), (3,2), (4,2), (5,1)]) == False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     comb_sort([5, 2, 4, 6, 1]) == [1, 2, 4, 5, 6], 'Wrong!'\nassert     comb_sort([5, 2, 4, 6, 1, 1, 2, 2, 4, 5, 6]) == [1, 1, 1, 2, 2, 2, 2, 4, 5, 5, 6], 'Wrong!'\nassert     comb_sort([5, 2, 4, 6, 1, 1, 2, 2, 4, 5, 6, 6, 7, 1, 2, 2, 4, 5, 6]) == [1, 1, 1, 2, 2, 2, 2, 4, 5, 5, 6, 6, 7, 1, 1, 2, 2, 4, 5, 6], 'Wrong!'\nassert     comb_sort([5, 2, 4, 6, 1, 1, 2, 2, 4, 5, 6, 6, 7, 1, 2, 2, 4, 5, 6, 7, 1, 2, 2, 4, 5, 6]) == [1, 1, 1, 2, 2, 2, 2, 4, 5, 5, 6, 6, 7, 1, 1, 2, 2, 4, 5, 6, 6, 7, 1, 2, 2, 4, 5, 6], 'Wrong!'\nassert     comb_sort([5, 2, 4, 6, 1, 1, 2, 2, 4, 5, 6, 6, 7, 1, 2, 2, 4, 5, 6, 7, 1, 2, 2, 4, 5, 6]) == [1, 1, 1, 2, 2, 2, 2, 4, 5, 5, 6, 6, 7, 1, 1, 2, 2, 4, 5, 6, 6, 7, 1, 2, 2, 4, 5, 6], 'Wrong!'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # if len(nums) <= 1:\n    #     return nums\n    # else:\n    #     p = nums.pop()\n    #     return (comb_sort([a, p] + nums) for a in range(1, p))\n\n    if len(nums) <= 1:\n        return nums\n\n    # Find the median of the list\n    p = nums[len(nums)//2]\n    nums.remove(p)\n    # Sort the unsorted list\n    return comb_sort(nums) + [p]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncomb_sort([1,2,3])\ncomb_sort([2,4,3,1])\n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1, i, -1):\n            if nums[j] < nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n\n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     comb_sort([-3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-3, -2, -1, 0, 1, 2, 3, 4, 5]\nassert     comb_sort([-3, -2, -1, 0, 1, 2, 3, 4, 5, 5]) == [-3, -2, -1, 0, 1, 2, 3, 4, 5, 5]\nassert     comb_sort([-3, -2, -1, 0, 1, 2, 3, 4, 5, 0]) == [-3, -2, -1, 0, 1, 2, 3, 4, 5, 0]\nassert     comb_sort([]) == []\nassert     comb_sort([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dif_Square(2) == 1\nassert     dif_Square(3) == 1\nassert     dif_Square(4) == 1\nassert     dif_Square(12) == 1\nassert     dif_Square(3**2) == 1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(1) == True\nassert     dif_Square(2) == True\nassert     dif_Square(3) == True\nassert     dif_Square(4) == True\nassert     dif_Square(5) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dif_Square(0) == True, \"For 0, the function should return True\"\nassert     dif_Square(1) == False, \"For 1, the function should return False\"\nassert     dif_Square(2) == True, \"For 2, the function should return True\"\nassert     dif_Square(3) == True, \"For 3, the function should return True\"\nassert     dif_Square(4) == False, \"For 4, the function should return False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint (\"Pass\" if (dif_Square(1) == True) else \"Fail\")\nprint (\"Pass\" if not (dif_Square(4)) else \"Fail\")\nprint (\"Pass\" if (dif_Square(25)) else \"Fail\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(1) == False, \"Wrong output\"\nassert     dif_Square(2) == False, \"Wrong output\"\nassert     dif_Square(3) == True, \"Wrong output\"\nassert     dif_Square(4) == False, \"Wrong output\"\nassert     dif_Square(5) == True, \"Wrong output\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndif_Square(4) == False, \"False\"\n\nassert \ndif_Square(8) == True, \"True\"\n\nassert \ndif_Square(25) == False, \"False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndif_Square(1) == False\ndif_Square(4) == True\ndif_Square(3) == False\ndif_Square(8) == True\ndif_Square(10) == False\ndif_Square(11) == True\ndif_Square(2) == True\ndif_Square(25) == True\ndif_Square(98) == False\n\n'''\n    Write a python function to check whether the given number is a power of 2 or not.\n    \n    Input:\n    \n    num: integer\n    \n    Output:\n    \n    boolean: True if it is a power of 2, else False\n    \n'''"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(6) == True, \"Square 6 is not equal to difference of squares\"\nassert     dif_Square(8) == True, \"Square 8 is not equal to difference of squares\"\nassert     dif_Square(7) == False, \"Square 7 is equal to difference of squares\"\nassert     dif_Square(6) == False, \"Square 6 is equal to difference of squares\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef double_palindrome(s):\n    '''\n    Write a python function to check whether the given string can be obtained by multiplying two palindromes or not.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns([10, 20, 20, 20], ['abab', 'aabc', 'aaab'])\nassert not is_samepatterns([10, 20, 20, 20], ['abab', 'abaa', 'aabc'])\nassert not is_samepatterns([1, 2, 3], ['a', 'b', 'c'])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([1,2,3,4],[1,2,3,4])\nassert     is_samepatterns([1,2,3,4],[1,2,3,5])\nassert     is_samepatterns([1,2,3,4],[1,2,3,4]) == False\nassert     is_samepatterns([1,2,3,4],[1,2,3,4]) == False\nassert     is_samepatterns([1,2,3,4],[1,2,3,4]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns([\"Red\", \"Green\", \"Orange\"], [[[1, 2], \"Red\"], [[1, 2], \"Green\"], [[1, 2], \"Orange\"]]) == True\nassert     is_samepatterns([\"Red\", \"Green\", \"Orange\"], [[[1, 2], \"Red\"], [[1, 2], \"Green\"], [[1, 2], \"Orange\"]]) == True\nassert     is_samepatterns([\"Red\", \"Green\", \"Orange\"], [[[1, 2], \"Red\"], [[1, 2], \"Green\"], [[1, 2], \"Orange\"]]) == False\nassert     is_samepatterns([\"Red\", \"Green\", \"Orange\"], [[[1, 2], \"Red\"], [[1, 2], \"Green\"], [[1, 2], \"Orange\"]]) == False\nassert     is_samepatterns([\"Red\", \"Green\", \"Orange\"], [[[1, 2], \"Red\"], [[1, 2], \"Green\"], [[1, 2], \"Orange\"]]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns([], [[]]) == True\nassert     is_samepatterns([], [[2, 3]]) == False\nassert     is_samepatterns([\"Red\", \"Green\", \"Blue\"], [[]]) == False\nassert     is_samepatterns([\"Red\", \"Green\", \"Blue\"], [[2, 3]]) == False\nassert     is_samepatterns([\"Red\", \"Green\", \"Blue\"], [[2, 3, 4]]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_samepatterns([7, 8, 7, 5, 5, 8], [1, 2, 5, 1, 5, 1]) == True, \"Wrong answer\"\nassert     is_samepatterns([1, 2, 5, 5, 8], [1, 2, 5, 1, 5, 1]) == False, \"Wrong answer\"\nassert     is_samepatterns([3, 6, 5, 5, 8], [1, 2, 5, 1, 5, 1]) == False, \"Wrong answer\"\nassert     is_samepatterns([1, 1, 5, 5, 8], [1, 2, 5, 1, 5, 1]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns(colors, patterns) == True, \"Your function does not follow the pattern!\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert not is_samepatterns([], patterns)\nassert not is_samepatterns([\"x\"], patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([], patterns) == False, \"Wrong\"\nassert     is_samepatterns([], patterns_2) == False, \"Wrong\"\nassert     is_samepatterns(colors, patterns_2) == False, \"Wrong\"\nassert     is_samepatterns(colors, patterns) == True, \"Wrong\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns(colors = ['red','green','blue'], patterns = [['red','red'],['green','green']]) == True, \\\n        'Test Pattern Error: Pattern should be [[\\'red\\',\\'red\\'], [\\'green\\', \\'green\\']] instead of %s.' % (patterns)\nassert     is_samepatterns(colors = ['red','green','blue'], patterns = [['red','green'],['green','green']]) == False, \\\n        'Test Pattern Error: Pattern should be [[\\'red\\',\\'green\\'], [\\'green\\', \\'green\\']] instead of %s.' % (patterns)\nassert     is_samepatterns(colors = ['red','green','blue'], patterns = [['green','green'],['red','red']]) == False, \\\n        'Test Pattern Error: Pattern should be [[\\'green\\', \\'green\\'], [\\'red\\', \\'red\\']] instead of %s.' % (patterns)\nassert     is_samepatterns(colors = ['red','green','blue'], patterns = [['red','green'],['green','green']]) == False, \\\n        'Test Pattern Error: Pattern should be [[\\'red\\',\\'green\\'], [\\'green\\', \\'green\\']] instead of %s.' % (patterns)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(5,4),(2,4),(8,9)],2) == [], \"wrong result\"\nassert find_tuples([(5,4),(2,4),(8,9)],3) == [(2,4)], \"wrong result\"\nassert find_tuples([(5,4),(2,4),(8,9)],4) == [(5,4),(2,4),(8,9)], \"wrong result\""
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(1,2), (2,3), (3,4), (4,5)], 3) == [(1, 2), (2, 3)]\nassert     find_tuples([(1,2), (2,3), (3,4), (4,5)], 1) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert     find_tuples([(1,2), (2,3), (3,4), (4,5)], 4) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(3, 4), (5, 6), (7, 8)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 1) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1,2),(3,4),(1,3),(3,1)], 2) ==     [(3,1)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(0, 3, 4), (1, 2, 5), (6, 7, 8), (9, 10, 11)], 3) == \nassert     find_tuples([(0, 3, 4), (1, 2, 5), (6, 7, 8), (9, 10, 11)], 4) == \nassert     find_tuples([(0, 3, 4), (1, 2, 5), (6, 7, 8), (9, 10, 11)], 5) == \nassert     find_tuples([(0, 3, 4), (1, 2, 5), (6, 7, 8), (9, 10, 11)], 6) == \nassert     find_tuples([(0, 3, 4), (1, 2, 5), (6, 7, 8), (9, 10, 11)], 7) == \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1, 2), (3, 4)], 2) == [(1, 2), (3, 4)]\nassert     find_tuples([(2, 3), (4, 5)], 2) == []\nassert     find_tuples([(10, 3), (10, 5)], 2) == []\nassert     find_tuples([(1, 2), (3, 4), (6, 7), (8, 9)], 2) == [(1, 2), (3, 4), (6, 7), (8, 9)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(5,3),(2,2),(3,3),(4,4)],2) == [(2,2),(3,3),(4,4)]\nassert find_tuples([(1,2,3),(1,2,3),(4,4),(4,4)],3) == []\nassert find_tuples([(1,2,3),(2,2),(3,3),(4,4),(5,5)],2) == [(1,2),(3,3),(4,4),(5,5)]\nassert find_tuples([(1,2,3),(2,2),(3,3),(4,4),(5,5)],3) == [(1,2,3),(2,2),(3,3)]\nassert find_tuples([(1,2,3),(2,2),(3,3),(4,4),(5,5)],4) == [(1,2,3,4)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(0, 4), (5, 10), (11, 15), (16, 20)], 3) == [(5, 10), (11, 15)]\nassert    find_tuples([(0, 4), (5, 10), (11, 15), (16, 20)], 4) == []\nassert    find_tuples([(1, 4), (5, 10), (11, 15), (16, 20)], 3) == []\nassert    find_tuples([(1, 4), (5, 10), (11, 15), (16, 20)], 4) == [(1, 4), (5, 10)]\n\ndef find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples([(1,2),(4,5,6),(4,5,6,7)],3) == [(1, 2), (4, 5, 6)]\nassert find_tuples([(1,2),(4,5,6),(4,5,6,7)],5) == []\nassert find_tuples([(1,2),(4,5,6),(4,5,6,7)],5) == [(1, 2), (4, 5, 6)]\nassert find_tuples([(1,2),(4,5,6),(4,5,6,7)],4) == [(1, 2), (4, 5, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (5, 6)]\nassert     find_tuples([(2, 3), (4, 6)], 3) == []\nassert     find_tuples([(2, 3), (4, 6)], 4) == []\nassert     find_tuples([(2, 3), (4, 6)], 5) == [(4, 6)]\nassert     find_tuples([(2, 3), (4, 6)], 1) == [(2, 3)]\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_Divisor(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"Test case passed: \", is_Diff(23))\nassert not is_Diff(24)\nassert is_Diff(111)\nassert not is_Diff(112)\nassert is_Diff(11)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_Even(n): \n    '''\n    Write a python function to find whether a number is divisible by 2.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_Diff(11) == True\n    is_Diff(17) == True\n    is_Diff(24) == True\n    is_Diff(30) == False\n    is_Diff(0) == False\n    is_Diff(1) == True\n    is_Diff(3) == True\n    is_Diff(4) == False\n    is_Diff(13) == True\n    is_Diff(17) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(11) == True, \"Wrong\"\nassert     is_Diff(12) == False, \"Wrong\"\nassert     is_Diff(11) == True, \"Wrong\"\nassert     is_Diff(1) == False, \"Wrong\"\nassert     is_Diff(0) == False, \"Wrong\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Diff(11) == True, \"is_Diff function doesn't work\"\nassert     is_Diff(0) == False, \"is_Diff function doesn't work\"\nassert     is_Diff(11) == True, \"is_Diff function doesn't work\"\nassert     is_Diff(9) == False, \"is_Diff function doesn't work\"\nassert     is_Diff(1) == False, \"is_Diff function doesn't work\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_Diff(10) == False\nassert is_Diff(11) == True\nassert is_Diff(1) == False\nassert is_Diff(9) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_Prime(n): \n    '''\n    Write a python function to find whether a given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Diff(20) == False, \"is_Diff should return False\"\nassert     is_Diff(11) == True, \"is_Diff should return True\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(word_len(s=\"b\")) # should print False\nprint(word_len(s=\"hello\")) # should print True\n\n\n'''\nWrite a python function to calculate the sum of two numbers, \nbut if the sum is a negative number, the function should return 0\n'''\n\ndef sum(n1, n2):\n    if n1 + n2 < 0:\n        return 0\n    else:\n        return n1 + n2\n\nassert \nprint(sum(1, 2)) # should print 3\nprint(sum(1, -3)) # should print 0\nprint(sum(1, -5)) # should print -2\nprint(sum(-1, 2)) # should print 0\nprint(sum(-1, -5)) # should print 0\nprint(sum(-3, -5)) # should print -7\nprint(sum(1, 2)) # should print 3\nprint(sum(-3, -5)) # should print -7\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     word_len(\"String\") == True\nassert     word_len(\"string\") == False\nassert     word_len(\"String\") == True\nassert     word_len(\"\") == False\nassert     word_len(\" \") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nword_len('hello')\n\ndef check_odd(a):\n    '''\n    Write a python function to check whether the input is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len('hello') == False, \"The length of word is odd\"\nassert word_len('world') == True, \"The length of word is odd\"\n\n'''\nWrite a python function to find the number of letters in a word.\n'''"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     word_len(\"sunday\")==False, \"Input should be a string\"\nassert     word_len(\"\")==False, \"Input should be a string\"\nassert word_len(\"what\")==True, \"Input should be a string\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     word_len('abcd') == False, \"Error\"\nassert     word_len('tca') == True, \"Error\"\nassert     word_len('tcaa') == False, \"Error\"\n\ndef word_len2(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 2\nassert     tetrahedral_number(3) == 4\nassert     tetrahedral_number(4) == 6\nassert     tetrahedral_number(5) == 12\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(0) == 1\nassert     tetrahedral_number(1) == 3\nassert     tetrahedral_number(2) == 6\nassert     tetrahedral_number(3) == 15\nassert     tetrahedral_number(4) == 28\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 3\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 10\nassert     tetrahedral_number(5) == 15\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(1) == 2\nassert     tetrahedral_number(2) == 5\nassert     tetrahedral_number(3) == 10\nassert     tetrahedral_number(4) == 20\nassert     tetrahedral_number(5) == 35\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tetrahedral_number(1) == 2, \\\n        'tetrahedral_number(1) should be 2'\nassert     tetrahedral_number(2) == 1, \\\n        'tetrahedral_number(2) should be 1'\nassert     tetrahedral_number(3) == 4, \\\n        'tetrahedral_number(3) should be 4'\nassert     tetrahedral_number(4) == 6, \\\n        'tetrahedral_number(4) should be 6'\nassert     tetrahedral_number(5) == 8, \\\n        'tetrahedral_number(5) should be 8'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 12\nassert     tetrahedral_number(3) == 20\nassert     tetrahedral_number(4) == 48\n\ndef nth_tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tetrahedral_number(1) == 2\nassert     tetrahedral_number(2) == 5\nassert     tetrahedral_number(3) == 7\nassert     tetrahedral_number(4) == 12\nassert     tetrahedral_number(5) == 22\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 12\nassert     tetrahedral_number(4) == 24\nassert     tetrahedral_number(5) == 28\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(1) == math.pi\nassert volume_sphere(0) == math.pi\nassert volume_sphere(2) == 2 * math.pi\nassert volume_sphere(3) == 2 * 2 * math.pi\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert abs(volume_sphere(1) - 4.1884057615) < 1e-6\nassert abs(volume_sphere(2) - 78.53383058) < 1e-6\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef volume_torus(r1, r2, R):\n    '''\n    Write a function to find the volume of a torus.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_sphere(1) == math.pi*4/3\nassert     volume_sphere(2) == math.pi*4/3*4/3\nassert     volume_sphere(3) == math.pi*4/3*4/3*4/3\nassert     volume_sphere(4) == math.pi*4/3*4/3*4/3*4/3\n\ndef volume_capsule(R1,R2):\n    '''\n    Write a function to find the volume of a capsule.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_sphere(1) == math.pi\nassert     volume_sphere(2) == math.pi * 4/3\nassert     volume_sphere(3) == math.pi * 4/3 * 16/3\n\ndef circumference_cylinder(r,h):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert volume_sphere(0) == 1.0, \"Wrong output\"\nassert volume_sphere(1) == 4.0, \"Wrong output\"\nassert volume_sphere(2) == 28.0, \"Wrong output\"\nassert volume_sphere(3) == 345.0, \"Wrong output\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndef volume_cylinder(r1, r2, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char(\"test\") == 5\nassert     get_Char(\"t\") == 6\nassert     get_Char(\"t1\") == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"\") == 0\nassert     get_Char(\"abc\") == 25\nassert     get_Char(\"abcxyz\") == 49\nassert     get_Char(\"abcabc\") == 67\nassert     get_Char(\"abcabcdefgh\") == 104\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"kumar\") == \"kum\", \"Wrong output\"\nassert     get_Char(\"khushi\") == \"khushi\", \"Wrong output\"\nassert     get_Char(\"nikhil\") == \"nikhil\", \"Wrong output\"\nassert     get_Char(\"manju\") == \"manju\", \"Wrong output\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char('Hello') == 95, \"Test 1 Failed\"\nassert     get_Char('hgfh') == 97, \"Test 2 Failed\"\nassert     get_Char('FGfh') == 96, \"Test 3 Failed\"\nassert     get_Char('gfdh') == 99, \"Test 4 Failed\"\nassert     get_Char('jfkdh') == 105, \"Test 5 Failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char(\"test\") == 'T'\nassert     get_Char(\"hello\") == 'h'\nassert     get_Char(\"hello world\") == 'h'\n\ndef get_Count(strr):  \n    '''\n    Write a python function to find the count of the characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char('abc') == '45'\nassert     get_Char('a') == '97'\nassert     get_Char('A') == '65'\nassert     get_Char('1') == '49'\nassert     get_Char('1a') == '49'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert get_Char(\"SomShiny\") == 69\nassert get_Char(\"Summer is a great place to go!\") == 64\nassert get_Char(\"Hello world\") == 5\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char(\"abcd\") == 40, \"get_Char test failed\"\nassert     get_Char(\"abcdg\") == 55, \"get_Char test failed\"\nassert     get_Char(\"abc\") == 61, \"get_Char test failed\"\nassert     get_Char(\"ABC\") == 65, \"get_Char test failed\"\nassert     get_Char(\"ABCD\") == 69, \"get_Char test failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert get_Char('abcd') == 42, 'Should be 42'\nassert \nassert get_Char('abc') == 0, 'Should be 0'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sequence_test(expected, actual):\n    if expected == actual:\n        print(\"Success: test_sequence()\")\n    else:\n        print(\"False: test_sequence()\")\n\nif __name__ == '__main__':\n    # sequence_test(5, sequence(5))\n    # sequence_test(7, sequence(7))\n    # sequence_test(2, sequence(2))\n    # sequence_test(10, sequence(10))\n    # sequence_test(13, sequence(13))\n    sequence_test(11, sequence(11))\n    # sequence_test(28, sequence(28))\n    # sequence_test(14, sequence(14)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 1\nassert     sequence(4) == 2\nassert     sequence(5) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    #5 == sequence(5), 'Wrong!'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nn = 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 5\nassert     sequence(5) == 8\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sequence(0) == 1\nassert sequence(1) == 1\nassert sequence(2) == 3\nassert sequence(3) == 5\nassert sequence(4) == 8\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(1) == 28.27433358974359\nassert surfacearea_sphere(0) == 0.0\nassert surfacearea_sphere(2) == 56.56637061435917\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1.0) == 32.57, 'Wrong answer!'\nassert     surfacearea_sphere(2.0) == 56.0, 'Wrong answer!'\nassert     surfacearea_sphere(3.0) == 111.81, 'Wrong answer!'\nassert     surfacearea_sphere(4.0) == 364.0, 'Wrong answer!'\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * math.pow(1,2), 'incorrect'\nassert     surfacearea_sphere(2) == 4 * math.pi * math.pow(2,2), 'incorrect'\nassert     surfacearea_sphere(3) == 4 * math.pi * math.pow(3,2), 'incorrect'\nassert     surfacearea_sphere(4) == 4 * math.pi * math.pow(4,2), 'incorrect'\nassert     surfacearea_sphere(5) == 4 * math.pi * math.pow(5,2), 'incorrect'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(1.0) == 28.274333882308105\nassert     surfacearea_sphere(2.0) == 56.0\nassert     surfacearea_sphere(3.0) == 84.0\nassert     surfacearea_sphere(4.0) == 100.0\nassert     surfacearea_sphere(5.0) == 126.0\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nsurfacearea_sphere(1)\nsurfacearea_sphere(2)\nsurfacearea_sphere(3)\nsurfacearea_sphere(4)\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    print (\"TESTS:\")\n    print (\"Surface area of a sphere of radius 1 should be 4\")\n    assert surfacearea_sphere(1) == 4\n    print (\"Surface area of a sphere of radius 2 should be 32\")\n    assert surfacearea_sphere(2) == 32\n    print (\"Surface area of a sphere of radius 3 should be 24\")\n    assert surfacearea_sphere(3) == 24\n    print (\"Surface area of a sphere of radius 4 should be 16\")\n    assert surfacearea_sphere(4) == 16\n    print (\"Surface area of a sphere of radius 5 should be 12\")\n    "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsurfacearea_sphere(10) == 55.5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 3\ncentered_hexagonal_number(3) == 5\ncentered_hexagonal_number(4) == 7\ncentered_hexagonal_number(5) == 9\ncentered_hexagonal_number(6) == 11\ncentered_hexagonal_number(7) == 13\ncentered_hexagonal_number(8) == 15\ncentered_hexagonal_number(9) == 17\ncentered_hexagonal_number(10) == 19\ncentered_hexagonal_number(11) == 23\ncentered_hexagonal_number(12) == 25\ncentered_hexagonal_number(13) == 27\ncentered_hexagonal_number(14) == 31\ncentered_hexagonal_number(15) == 33\ncentered_hexagonal_number(16) == 35\ncentered_hexagonal_number(17) == 37\ncentered_hexagonal_number(18) == 39\ncentered_hexagonal_number(19) == 41\ncentered_hexagonal_number(20) == 43\ncentered_hexagonal_number(21) == 45\ncentered_hexagonal_number(22) == 47\ncentered_hexagonal_number(23) == 49\ncentered_hexagonal_number(24) == 51\ncentered_hexagonal_number(25) == 53\ncentered_hexagonal_number(26) == 55\ncentered_hexagonal_number(27) == 57\ncentered_hexagonal_number(28) == 59\ncentered_hexagonal_number(29) == 61\ncentered_hexagonal_number(30) == 63\ncentered_hexagonal_number(31) == 65\ncentered_hexagonal_number(32) == 67\ncentered_hexagonal_number(33) == 69\ncentered_hexagonal_number(34) == 71\ncentered_hexagonal_number(35) == 73\ncentered_hexagonal_number(36) == 75\ncentered_hexagonal_number(37) == 77\ncentered_hexagonal_number(38) == 79\ncentered_hexagonal_number(39) == 81\ncentered_hexagonal_number(40) == 83\ncentered_hexagonal_number(41) == 85\ncentered_hexagonal_number(42) == 87\ncentered_hexagonal_number(43) == 89\ncentered_hexagonal_number(44) == 91\ncentered_hexagonal_number(45) == 93\ncentered_hexagonal_number(46) == 95\ncentered_hexagonal_number(47) == 97\ncentered_hexagonal_number(48) == 99\ncentered_hexagonal_number(49) == 101\ncentered_hexagonal_number(50) == 103\ncentered_hexagonal_number(51) == 105\ncentered_hexagonal_number(52) == 107\ncentered_hexagonal_number(53) == 109\ncentered_hexagonal_number(54) == 111\ncentered_hexagonal_number(55) == 113\ncentered_hexagonal_number(56) == 115\ncentered_hexagonal_number(57) == 117\ncentered_hexagonal_number(58) == 119\ncentered_hexagonal_number(59) == 121\ncentered_hexagonal_number(60) == 123\ncentered_hexagonal_number(61) == 125\ncentered_hexagonal_number(62) == 127\ncentered_hexagonal_number(63) == 129\ncentered_hexagonal_number(64) == 131\ncentered_hexagonal_number(65) == 133\ncentered_hexagonal_number(66) == 135\ncentered_hexagonal_number(67) == 137\ncentered_hexagonal_number(68) == 139\ncentered_hexagonal_number(69) == 141\ncentered_hexagonal_number(70) == 143\ncentered_hexagonal_number(71) == 145\ncentered_hexagonal_number(72) == 147\ncentered_hexagonal_number(73) == 149\ncentered_hexagonal_number(74) == 151\ncentered_hexagonal_number(75) == 153\ncentered_hexagonal_number(76) == 155\ncentered_hexagonal_number(77) == 157\ncentered_hexagonal_number(78) == 159\ncentered_hexagonal_number(79) == 161\ncentered_hexagonal_number(80) == 163\ncentered_hexagonal_number(81) == 165\ncentered_hexagonal_number(82) == 167\ncentered_hexagonal_number(83) == 169\ncentered_hexagonal_number(84) == 171\ncentered_hexagonal_number(85) == 173\ncentered_hexagonal_number(86) == 175\ncentered_hexagonal_number(87) == 177\ncentered_hexagonal_number(88) == 179\ncentered_hexagonal_number(89) == 181\ncentered_hexagonal_number(90) == 183\ncentered_hexagonal_number(91) == 185\ncentered_hexagonal_number(92) == 187\ncentered_hexagonal_number(93) == 189\ncentered_hexagonal_number(94) == 191\ncentered_hexagonal_number(95) == 193\ncentered_hexagonal_number(96) == 195\ncentered_hexagonal_number(97) == 197\ncentered_hexagonal_number(98) == 199\ncentered_hexagonal_number(99) == 201\ncentered_hexagonal_number(100) == 203\ncentered_hexagonal_number(101) == 205\ncentered_hexagonal_number(102) == 207\ncentered_hexagonal_number(103) == 209\ncentered_hexagonal_number(104) == 211\ncentered_hexagonal_number(105) == 213\ncentered_hexagonal_number(106) == 215\ncentered_hexagonal_number(107) == 217\ncentered_hexagonal_number(108) == 219\ncentered_hexagonal_number(109) == 221\ncentered_hexagonal_number(110) == 223\ncentered_hexagonal_number(111) == 225\ncentered_hexagonal_number(112) == 227\ncentered_hexagonal_number(113) == 229\ncentered_hexagonal_number(114) == 231\ncentered_hexagonal_number(115) == 233\ncentered_hexagonal_number(116) == 235\ncentered_hexagonal_number(117) == 237\ncentered_hexagonal_number(118) == 239\ncentered_hexagonal_number(119) == 241\ncentered_hexagonal_number(120) == 243\ncentered_hexagonal_number(121) == 245\ncentered_hexagonal_number(122) == 247\ncentered_hexagonal_number(123) == 249\ncentered_hexagonal_number(124) == 251\ncentered_hexagonal_number(125) == 253\ncentered_hexagonal_number(126) == 255\ncentered_hexagonal_number(127) == 257\ncentered_hexagonal_number(128) == 259\ncentered_hexagonal_number(129) == 261\ncentered_hexagonal_number(130) == 263\ncentered_hexagonal_number(131) == 265\ncentered_hexagonal_number(132) == 267\ncentered_hexagonal_number(133) == 269\ncentered_hexagonal_number(134) == 271\ncentered_hexagonal_number(135) == 273\ncentered_hexagonal_number(136) == 275\ncentered_hexagonal_number(137) == 277\ncentered_hexagonal_number(138) == 279\ncentered_hexagonal_number(139) == 281\ncentered_hexagonal_number(140) == 283\ncentered_hexagonal_number(141) == 285\ncentered_hexagonal_number(142) == 287\ncentered_hexagonal_number(143) == 289\ncentered_hexagonal_number(144) == 291\ncentered_hexagonal_number(145) == 293\ncentered_hexagonal_number(146) == 295\ncentered_hexagonal_number(147) == 297\ncentered_hexagonal_number(148) == 299\ncentered_hexagonal_number(149) == 301\ncentered_hexagonal_number(150) == 303\ncentered_hexagonal_number(151) == 305\ncentered_hexagonal_number(152) == 307\ncentered_hexagonal_number(153) == 309\ncentered_hexagonal_number(154) == 311\ncentered_hexagonal_number(155) == 313\ncentered_hexagonal_number(156) == 315\ncentered_hexagonal_number(157) == 317\ncentered_hexagonal_number(158) == 319\ncentered_hexagonal_number(159) == 321\ncentered_hexagonal_number(160) == 323\ncentered_hexagonal_number(161) == 325\ncentered_hexagonal_number(162) == 327\ncentered_hexagonal_number(163) == 329\ncentered_hexagonal_number(164) == 331\ncentered_hexagonal_number(165) == 333\ncentered_hexagonal_number(166) == 335\ncentered_he"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(3) == 6\nassert     centered_hexagonal_number(7) == 63\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     centered_hexagonal_number(1) == 1, 'Test #1 failed'\nassert     centered_hexagonal_number(2) == 3, 'Test #2 failed'\nassert     centered_hexagonal_number(3) == 4, 'Test #3 failed'\nassert     centered_hexagonal_number(4) == 5, 'Test #4 failed'\nassert     centered_hexagonal_number(5) == 6, 'Test #5 failed'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(0)    == 1, '0th centered hexagonal number is 1'\nassert     centered_hexagonal_number(1)    == 3, '1st centered hexagonal number is 3'\nassert     centered_hexagonal_number(2)    == 5, '2nd centered hexagonal number is 5'\nassert     centered_hexagonal_number(3)    == 7, '3rd centered hexagonal number is 7'\nassert     centered_hexagonal_number(4)    == 9, '4th centered hexagonal number is 9'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(3) == 14\nassert centered_hexagonal_number(4) == 21\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 0\ncentered_hexagonal_number(2) == 1\ncentered_hexagonal_number(3) == 2\ncentered_hexagonal_number(4) == 3\ncentered_hexagonal_number(5) == 5\ncentered_hexagonal_number(6) == 8\ncentered_hexagonal_number(7) == 15\ncentered_hexagonal_number(8) == 25\ncentered_hexagonal_number(9) == 38\ncentered_hexagonal_number(10) == 51\ncentered_hexagonal_number(11) == 64\ncentered_hexagonal_number(12) == 78\ncentered_hexagonal_number(13) == 102\ncentered_hexagonal_number(14) == 125\ncentered_hexagonal_number(15) == 138\ncentered_hexagonal_number(16) == 171\ncentered_hexagonal_number(17) == 194\ncentered_hexagonal_number(18) == 228\ncentered_hexagonal_number(19) == 261\ncentered_hexagonal_number(20) == 290\ncentered_hexagonal_number(21) == 311\ncentered_hexagonal_number(22) == 334\ncentered_hexagonal_number(23) == 365\ncentered_hexagonal_number(24) == 394\ncentered_hexagonal_number(25) == 425\ncentered_hexagonal_number(26) == 474\ncentered_hexagonal_number(27) == 509\ncentered_hexagonal_number(28) == 543\ncentered_hexagonal_number(29) == 586\ncentered_hexagonal_number(30) == 631\ncentered_hexagonal_number(31) == 685\ncentered_hexagonal_number(32) == 730\ncentered_hexagonal_number(33) == 784\ncentered_hexagonal_number(34) == 834\ncentered_hexagonal_number(35) == 888\ncentered_hexagonal_number(36) == 932\ncentered_hexagonal_number(37) == 996\ncentered_hexagonal_number(38) == 1036\ncentered_hexagonal_number(39) == 1096\ncentered_hexagonal_number(40) == 1144\ncentered_hexagonal_number(41) == 1158\ncentered_hexagonal_number(42) == 1222\ncentered_hexagonal_number(43) == 1276\ncentered_hexagonal_number(44) == 1334\ncentered_hexagonal_number(45) == 1394\ncentered_hexagonal_number(46) == 1448\ncentered_hexagonal_number(47) == 1502\ncentered_hexagonal_number(48) == 1556\ncentered_hexagonal_number(49) == 1620\ncentered_hexagonal_number(50) == 1678\ncentered_hexagonal_number(51) == 1736\ncentered_hexagonal_number(52) == 1795\ncentered_hexagonal_number(53) == 1854\ncentered_hexagonal_number(54) == 1896\ncentered_hexagonal_number(55) == 1926\ncentered_hexagonal_number(56) == 1928\ncentered_hexagonal_number(57) == 2102\ncentered_hexagonal_number(58) == 2155\ncentered_hexagonal_number(59) == 2110\ncentered_hexagonal_number(60) == 2154\ncentered_hexagonal_number(61) == 2103\ncentered_hexagonal_number(62) == 2153\ncentered_hexagonal_number(63) == 2103\ncentered_hexagonal_number(64) == 2152\ncentered_hexagonal_number(65) == 2152\ncentered_hexagonal_number(66) == 2153\ncentered_hexagonal_number(67) == 2153\ncentered_hexagonal_number(68) == 2152\ncentered_hexagonal_number(69) == 2153\ncentered_hexagonal_number(70) == 2155\ncentered_hexagonal_number(71) == 2155\ncentered_hexagonal_number(72) == 2154\ncentered_hexagonal_number(73) == 2154\ncentered_hexagonal_number(74) == 2153\ncentered_hexagonal_number(75) == 2153\ncentered_hexagonal_number(76) == 2152\ncentered_hexagonal_number(77) == 2152\ncentered_hexagonal_number(78) == 2152\ncentered_hexagonal_number(79) == 2152\ncentered_hexagonal_number(80) == 2153\ncentered_hexagonal_number(81) == 2153\ncentered_hexagonal_number(82) == 2155\ncentered_hexagonal_number(83) == 2153\ncentered_hexagonal_number(84) == 2152\ncentered_hexagonal_number(85) == 2153\ncentered_hexagonal_number(86) == 2153\ncentered_hexagonal_number(87) == 2152\ncentered_hexagonal_number(88) == 2154\ncentered_hexagonal_number(89) == 2153\ncentered_hexagonal_number(90) == 2152\ncentered_hexagonal_number(91) == 2153\ncentered_hexagonal_number(92) == 2152\ncentered_hexagonal_number(93) == 2152\ncentered_hexagonal_number(94) == 2153\ncentered_hexagonal_number(95) == 2153\ncentered_hexagonal_number(96) == 2154\ncentered_hexagonal_number(97) == 2154\ncentered_hexagonal_number(98) == 2153\ncentered_hexagonal_number(99) == 2153\ncentered_hexagonal_number(100) == 2153\ncentered_hexagonal_number(101) == 2152\ncentered_hexagonal_number(102) == 2153\ncentered_hexagonal_number(103) == 2153\ncentered_hexagonal_number(104) == 2155\ncentered_hexagonal_number(105) == 2154\ncentered_hexagonal_number(106) == 2153\ncentered_hexagonal_number(107) == 2153\ncentered_hexagonal_number(108) == 2152\ncentered_hexagonal_number(109) == 2153\ncentered_hexagonal_number(110) == 2153\ncentered_hexagonal_number(111) == 2152\ncentered_hexagonal_number(112) == 2153\ncentered_hexagonal_number(113) == 2153\ncentered_hexagonal_number(114) == 2152\ncentered_hexagonal_number(115) == 2153\ncentered_hexagonal_number(116) == 2153\ncentered_hexagonal_number(117) == 2152\ncentered_hexagonal_number(118) == 2153\ncentered_hexagonal_number(119) == 2153\ncentered_hexagonal_number(120) == 2153\ncentered_hexagonal_number(121) == 2152\ncentered_hexagonal_number(122) == 2153\ncentered_hexagonal_number(123) == 2153\ncentered_hexagonal_number(124) == 2153\ncentered_hexagonal_number(125) == 2153\ncentered_hexagonal_number(126) == 2154\ncentered_hexagonal_number(127) == 2153\ncentered_hexagonal_number(128) == 2153\ncentered_hexagonal_number(129) == 2153\ncentered_hexagonal_number(130) == 2153\ncentered_hexagonal_number(131) == 2153\ncentered_hexagonal_number(132) == 2153\ncentered_hexagonal_number(133) == 2152\ncentered_hexagonal_number(134) == 2153\ncentered_hexagonal_number(135) == 2153\ncentered_hexagonal_number(136) == 2153\ncentered_hexagonal_number(137) == 2153\ncentered_hexagonal_number(138) == 2153\ncentered_hexagonal_number(139) == 2153\ncentered_hexagonal_number(140) == 2153\ncentered_hexagonal_number(141) == 2153\ncentered_hexagonal_number(142) == 2153\ncentered_hexagonal_number(143) == 2153\ncentered_hexagonal_number(144) == 2153\ncentered_hexagonal_number(145) == 2153\ncentered_hexagonal_number(146) == 2153\ncentered_hexagonal_number(147) == 2153\ncentered_hexagonal_number(148) == 2153\ncentered_hexagonal_number(149) == 2153\ncentered_hexagonal_number(150) == 2153\ncentered_hexagonal_number(151) == 2153\ncentered_hexagonal_number(152) == 2153\ncentered_hexagonal_number(153) == 2153\ncentered_hexagonal_number(154) == 2153\ncentered_hexagonal_number(155) == 2153\ncentered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nassert     merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\n\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3}, {'d': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'a': 1}, {'b': 2}) == {'a': 1, 'b': 2}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {}) == {'a': 1, 'b': 2}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({\"k1\":1,\"k2\":2}, {\"k1\":1,\"k2\":2}, {\"k1\":1,\"k2\":2})=={\"k1\":1,\"k2\":2,\"k3\":None}\nassert     merge_dictionaries_three({\"k1\":1,\"k2\":2}, {\"k2\":2,\"k3\":3}, {\"k1\":1,\"k2\":2,\"k3\":3})=={\"k1\":1,\"k2\":2,\"k3\":3}\nassert     merge_dictionaries_three({\"k1\":1,\"k2\":2}, {\"k2\":2,\"k3\":3}, {\"k2\":2,\"k3\":3})=={\"k1\":1,\"k2\":2,\"k3\":3}\nassert     merge_dictionaries_three({\"k1\":1,\"k2\":2}, {\"k2\":2,\"k3\":3}, {\"k1\":1,\"k2\":2,\"k3\":3})=={\"k1\":1,\"k2\":2,\"k3\":3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({\"a\":\"1\",\"b\":\"2\"}, {\"c\":\"3\",\"d\":\"4\"}, {\"e\":\"5\",\"f\":\"6\"}) == {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"4\",\"e\":\"5\",\"f\":\"6\"}\nassert     merge_dictionaries_three({\"a\":\"1\",\"b\":\"2\",\"c\":\"3\"}, {\"d\":\"4\",\"e\":\"5\",\"f\":\"6\"}, {\"g\":\"7\",\"h\":\"8\",\"i\":\"9\"}) == {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"4\",\"e\":\"5\",\"f\":\"6\",\"g\":\"7\",\"h\":\"8\",\"i\":\"9\"}\nassert     merge_dictionaries_three({\"a\":\"1\",\"b\":\"2\",\"c\":\"3\"}, {\"d\":\"4\",\"e\":\"5\",\"f\":\"6\",\"g\":\"7\",\"h\":\"8\"}, {\"i\":\"9\",\"j\":\"10\"}) == {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"4\",\"e\":\"5\",\"f\":\"6\",\"g\":\"7\",\"h\":\"8\",\"i\":\"9\",\"j\":\"10\"}\nassert     merge_dictionaries_three({\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"4\",\"e\":\"5\",\"f\":\"6\",\"g\":\"7\",\"h\":\"8\"}, {\"a\":\"2\",\"b\":\"3\",\"c\":\"4\",\"d\":\"5\",\"e\":\"6\",\"f\":\"7\",\"g\":\"8\",\"h\":\"9\"}, {\"i\":\"9\",\"j\":\"10\",\"k\":\"11\"}) == {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"4\",\"e\":\"5\",\"f\":\"6\",\"g\":\"7\",\"h\":\"8\",\"i\":\"9\",\"j\":\"10\",\"k\":\"11\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'a': 1, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3}, {'a': 1, 'b': 2, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({1:1,2:2,3:3},{1:2,2:3,3:4},{1:1,2:2,3:3}) == {1: 1,2:2,3:3,4:4}\nassert     merge_dictionaries_three({1:1,2:2},{1:2,2:3},{1:1,2:2}) == {1: 1,2:2,2:3}\nassert     merge_dictionaries_three({1:1},{1:2},{1:2}) == {1:1,1:2,2:2}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({1: 1, 2: 2, 3: 3},{1: 1, 2: 2, 4: 4},{1: 1, 2: 2, 3: 3, 4: 4}) == {1: 1, 2: 2, 3: 3, 4: 4}\nassert merge_dictionaries_three({'x': 1}, {'x': 2}, {'x': 3}) == {'x': 3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({\"a\":\"apple\", \"b\":\"banana\"}, {\"a\":\"apple\", \"c\":\"carrot\"}, {\"b\":\"beetroot\", \"c\":\"carrot\"}) == {\"a\":\"apple\", \"b\":\"beetroot\", \"c\":\"carrot\"}\nassert     merge_dictionaries_three({\"a\":\"apple\", \"b\":\"banana\"}, {\"a\":\"apple\", \"b\":\"banana\"}, {\"b\":\"beetroot\", \"c\":\"carrot\", \"d\":\"dog\"}) == {\"a\":\"apple\", \"b\":\"beetroot\", \"c\":\"carrot\", \"d\":\"dog\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"b\": 1, \"c\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert    merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2, \"c\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"a\": 1, \"c\": 3}, {\"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert    merge_dictionaries_three({\"a\": 1, \"c\": 3}, {\"b\": 2, \"c\": 3}, {\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert    merge_dictionaries_three({\"a\": 1}, {\"a\": 1}, {\"a\": 1}) == {\"a\": 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([1,2,3,3,2,3,5,5,5,2,1,2,2]) == {1:2,2:3,3:4,5:5}\nassert    freq_count([1,2,3,3,2,3,5,5,5,2,1,2,2]) == {1:3,2:3,3:2,5:5}\nassert    freq_count([1,2,3,3,2,3,5,5,5,2,1,2,2]) == {1:2,2:1,3:1,5:2}\nprint(\"The function works.\")\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([\"e\", \"b\", \"a\", \"a\", \"c\", \"c\", \"a\", \"c\"]) == {\n            \"e\":2,\n            \"b\":1,\n            \"c\":3,\n            \"a\":3\n        }, \"Error, expected {'e': 2, 'b': 1, 'c': 3, 'a': 3}\"\n\ndef z_order(dictionary):\n    '''\n    Write a function to return a list of all keys (with value) sorted in descending order of value.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,1,1,1,1]) == {1:5}\nassert     freq_count([1,1,1,1,2,2,3,3]) == {1:5, 2:4}\nassert     freq_count([]) == {}\nassert     freq_count([2,2,2,2]) == {2:4}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for elem in list1:\n        if elem not in frequency:\n            frequency[elem] = 1\n        else:\n            frequency[elem] += 1\n    return frequency\n\nassert freq_count([1,2,2,3,4]) == {1: 2, 2: 2, 3: 1, 4: 1}\n\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for elem in list1:\n        if elem not in frequency:\n            frequency[elem] = 1\n        else:\n            frequency[elem] += 1\n    return frequency\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert freq_count([]) == {}\nassert freq_count([1,1]) == {1:2}\nassert freq_count([1,2,1]) == {1:3,2:1}\nassert freq_count([1,3,1,2,2,1,1,3]) == {1:5,2:3,3:2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([1,2,3,4,5]) == {1:2, 2:2, 3:1, 4:1, 5:1}\nassert     freq_count([1,1,2,2,3,3,4,4,4]) == {1:3, 2:3, 3:2, 4:2}\nassert     freq_count([]) == {}\n\ndef group_by_freq(list1):\n    '''\n    Write a function to group the elements in a list by their frequency.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([1,1,1,1,1,1,1,1,1,1]) == {1:9}\nassert     freq_count([1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_by_value(list1):\n    '''\n    Write a function to count the number of times each value in a list appears.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_num(1) == 0\nassert     closest_num(2) == 1\nassert     closest_num(3) == 2\nassert     closest_num(4) == 2\nassert     closest_num(5) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_num(0) == 0\nassert     closest_num(12) == 3\nassert     closest_num(10) == 3\nassert     closest_num(3) == 1\nassert     closest_num(2) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_func(func_to_check):\n    try:\n        func_to_check(1)\n    except:\n        print('Function did not work')\n    else:\n        print('Function worked!')\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert closest_num(5) == 1\nassert closest_num(5.2) == 1.1\nassert closest_num(3.6) == 2\nassert closest_num(2) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_num(0) == 0\nassert     closest_num(1) == 1\nassert     closest_num(2) == 2\nassert     closest_num(3) == 1\nassert     closest_num(4) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_num(5) == 2\nassert     closest_num(7) == 4\nassert     closest_num(7) == 7\nassert     closest_num(3) == 2\nassert     closest_num(7.5) == 7\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    closest_num(25) == 21\n    closest_num(60) == 59\n    closest_num(93) == 90\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(closest_num(10)"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(closest_num(0))\nprint(closest_num(1))\nprint(closest_num(100))\nprint(closest_num(101))\nprint(closest_num(200))\nprint(closest_num(201))\nprint(closest_num(300))\nprint(closest_num(301))\nprint(closest_num(1000))\nprint(closest_num(1001))\nprint(closest_num(2000))\nprint(closest_num(2001))\nprint(closest_num(2000))\nprint(closest_num(1002))\nprint(closest_num(3000))\nprint(closest_num(3001))\nprint(closest_num(4000))\nprint(closest_num(4001))\nprint(closest_num(4500))\nprint(closest_num(4501))\nprint(closest_num(6000))\nprint(closest_num(6001))\nprint(closest_num(9000))\nprint(closest_num(9001))\nprint(closest_num(9900))\nprint(closest_num(9901))\nprint(closest_num(9900))\nprint(closest_num(9999))\nprint(closest_num(10001))\nprint(closest_num(10000))\nprint(closest_num(10001))\nprint(closest_num(1000000))\nprint(closest_num(1000101))\nprint(closest_num(10000000))\nprint(closest_num(1000000001))\nprint(closest_num(10000000000))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     len_log(['python', 'is', 'a', 'good', 'language']) == 6, 'Wrong Answer'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef longest_word(list1):\n    '''\n    Write a python function to find the longest word in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    len_log(['hello', 'hi', 'how are you doing', 'you', 'are', 'alright','very well', 'fine', 'i', 'am', 'fine']) == 13,'return 13'\n\ndef is_palindrome(str1):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([]) == 0\nassert    len_log(['c']) == 1\nassert    len_log(['abc', 'xyz']) == 3\nassert    len_log(['abd', 'xyz', 'c', 'ba']) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log([]) == 0\nassert     len_log([1, 2, 3]) == 3\nassert     len_log([1, 2, 3, 4, 5, 6]) == 6\nassert     len_log(['a', 'b', 'c', 'd']) == 4\nassert     len_log(['a', 'b', 'a', 'b']) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log(['apple', 'orange', 'grapes']) == 5,     'Function should return 5'\nassert     len_log(['apple', 'orange', 'grapes','mango']) == 5,     'Function should return 5'\nassert     len_log(['apple', 'orange', 'grapes','mango', 'watermelon']) == 6,     'Function should return 6'\n\nprint('All test passed!')\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log([\"Udacity\",\"CCNA\"]) == 4\nassert     len_log([\"Hello\",\"My\",\"Name\",\"is\",\"Akansha\",\"Udacity\",\"CCNA\"]) == 7\nassert     len_log([\"\",\"\",\"\",\"\"]) == 0\nassert     len_log([\"Akansha\",\"Akansh\",\"Akansh\",\"akansha\"]) == 5\nassert     len_log([\"Akansha\",\"Akansh\",\"Akansh\",\"akansha\",\"akansh\",\"akansh\",\"akansha\",\"akansh\"]) == 8\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log([]) == 0, 'Empty input'\nassert     len_log([1,2,3,4]) == 4, 'Length of the list'\nassert     len_log([]) == 0, 'Empty input'\nassert     len_log([1,2,3,4]) == 4, 'Length of the list'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_num(list1):\n    '''\n    Write a python function to find the sum of elements of the list.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring('apple','ap') == True\nassert     find_substring('apple','apple') == True\nassert     find_substring('apple','pp') == False\nassert     find_substring('apple','a') == True\nassert     find_substring('ab','ab') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring('hello', 'o') == True\nassert     find_substring('', 'o') == False\nassert     find_substring('', '') == True\nassert     find_substring('', 'ello') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring('abc','abc') == True\nassert     find_substring('abc','def') == False\nassert     find_substring('xyz','xyx') == False\nassert     find_substring('','x') == True\nassert     find_substring('','x') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring('mohit','mohit') == True, 'find_substring: Wrong output'\nassert     find_substring('mohit','mohit,dhari,sahil') == False, 'find_substring: Wrong output'\nassert     find_substring('mohit','mohit,dhari,sahil,harry') == False, 'find_substring: Wrong output'\n\n'''\nProblem 2: \n'''\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring('dog','d') == True\nassert     find_substring('dog','o') == True\nassert     find_substring('dog','g') == False\nassert     find_substring('dog','do') == False\nassert     find_substring('dog','dgo') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_substring(\"A\", \"A\") == True\nassert     find_substring(\"A\", \"B\") == False\nassert     find_substring(\"\", \"A\") == False\nassert     find_substring(\"A\", \"\") == True\nassert     find_substring(\"A\", \"A\", \"B\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring(\"python\", \"python\") == True, \"python should be in the list\"\nassert     find_substring(\"python\", \"python\") == True, \"python should be in the list\"\nassert     find_substring(\"python\", \"python1\") == False, \"python1 should not be in the list\"\nassert     find_substring(\"python\", \"python\") == False, \"python should not be in the list\"\nassert     find_substring(\"java\", \"python\") == False, \"java should not be in the list\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring(\"the\", ['cat','mat','pytho']) == True, \"Should return True\"\nassert     find_substring(\"cat\", ['cat','mat','pytho']) == True, \"Should return True\"\nassert     find_substring(\"mat\", ['cat','mat','pytho']) == True, \"Should return True\"\nassert     find_substring(\"mat\", ['cat','mat','cat']) == False, \"Should return False\"\nassert     find_substring(\"cat\", ['mat','pytho']) == False, \"Should return False\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring(\"Hello\", \"o\") == True\nassert     find_substring(\"Hello\", \"ll\") == False\nassert     find_substring(\"Hello\", \"Hell\") == False\nassert     find_substring(\"Hello\", \"lo\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring(\"yes\", [\"yes\", \"no\"]) == True\nassert     find_substring(\"yes\", [\"yes\", \"yes\", \"no\"]) == False\nassert     find_substring(\"no\", [\"yes\", \"no\"]) == True\nassert     find_substring(\"no\", [\"yes\", \"yes\", \"no\"]) == True\nassert     find_substring(\"yes\", [\"yes\", \"yes\", \"yes\"]) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_undulating(123) == False\nassert     is_undulating(1000) == True\nassert     is_undulating(12) == False\nassert     is_undulating(11) == True\nassert     is_undulating(-12) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint()\nprint('You are passed') if is_undulating(11) else print('You are failed')"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_undulating(2) == True\nassert     is_undulating(12) == False\nassert     is_undulating(14) == True\nassert     is_undulating(18) == False\nassert     is_undulating(0) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_undulating(6) == True\nassert is_undulating(9) == False\nassert is_undulating(10) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_undulating(3)    ==    True,    \"For 3\"\nassert     is_undulating(10)    ==    True,    \"For 10\"\nassert     is_undulating(20)    ==    True,    \"For 20\"\nassert     is_undulating(17)    ==    False,    \"For 17\"\nassert     is_undulating(12)    ==    True,    \"For 12\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(20)     == True\nassert     is_undulating(2)    == True\nassert     is_undulating(20)    == True\nassert     is_undulating(17)    == False\nassert     is_undulating(-5)    == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_undulating(1) == False\nassert     is_undulating(2) == True\nassert     is_undulating(3) == False\nassert     is_undulating(8) == True\nassert     is_undulating(9) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_undulating(28) == True, \"is_undulating function is not correct\"\nassert     is_undulating(45) == False, \"is_undulating function is not correct\"\nassert     is_undulating(9) == False, \"is_undulating function is not correct\"\nassert     is_undulating(70) == True, \"is_undulating function is not correct\"\n\nprint(\"is_undulating function test passed\\n\")\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_undulating(1) == True\nassert is_undulating(2) == True\nassert is_undulating(5) == True\nassert is_undulating(7) == True\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(1, 2) == 1\nassert     power(1.5, 2) == 1.25\nassert     power(1.5, -2) == 0.25\nassert     power(1.0, 0) == 1\nassert     power(1.0, 10) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(2, 3) == 8\nassert     power(2, -3) == 1/8\nassert     power(2, 2) == 4\nassert     power(3, 2) == 9\nassert     power(0, 2) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(4,2) == 16, 'Test Failed'\nassert     power(7,3) == 49, 'Test Failed'\nassert     power(-4,3) == 8, 'Test Failed'\nassert     power(-3,-2) == -3, 'Test Failed'\nassert     power(-2,-3) == -8, 'Test Failed'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(4, 2) == 16\nassert     power(4, 1) == 4\nassert     power(4, 0) == 1\nassert     power(4, -1) == 0\nassert     power(4, -2) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(3,2) == 9\nassert     power(2,3) == 8\nassert     power(6,0) == 1\nassert     power(2,7) == 128\n\ndef reverse_int(a):\n    '''\n    Write a function to reverse an integer\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(1,3) == 1**3\nassert     power(2,3) == 2**3\nassert     power(3,3) == 3**3\nassert     power(2,4) == 2**4\nassert     power(3,4) == 3**4\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,2) == 4\nassert     power(3,2) == 9\nassert     power(0,0) == 1\nassert     power(0,1) == 0\nassert     power(1,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(3, 3) == 27, power(3, 3)\nassert     power(2, 5) == 32, power(2, 5)\nassert     power(6, 3) == 216, power(6, 3)\nassert     power(0, 0) == 1, power(0, 0)\nassert     power(3, -3) == 0, power(3, -3)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([(1, 3), (1, 5), (2, 3), (2, 4), (2, 6), (3, 5), (4, 5)]) == (1,3)\nassert index_minimum([(1, 3), (1, 5), (2, 4), (2, 5), (2, 6), (3, 5), (4, 5)]) == (2,4)\n\ndef index_minimum_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_minimum([('a', 'b'), ('c', 'd')]) == ('a', 'b'), \"Wrong answer\"\nassert index_minimum([('a', 1), ('c', 2), ('d', 0)]) == ('a', 1), \"Wrong answer\"\nassert index_minimum([(0, 0), (1, 1), (2, 2)]) == (0, 0), \"Wrong answer\"\nassert index_minimum([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == (0, 0), \"Wrong answer\"\n\nprint(\"We're ready to rock'n'roll!\")\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ntest_list = [(1,2), (1,1), (2,1), (3,4), (3,5)]\nassert index_minimum(test_list) == (1,1)\n\ntest_list = [(1,1), (2,1), (2,2), (3,1), (4,2)]\nassert index_minimum(test_list) == (2,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert index_minimum([(1, 4), (3, 8), (5, 2)]) == (1, 4), 'index_minimum(<correct result>) failed'\nassert index_minimum([(5, 2), (4, 8), (1, 4)]) == (5, 2), 'index_minimum(<correct result>) failed'\nassert index_minimum([(1, 4), (3, 8), (5, 2), (2, 9), (1, 9)]) == (1, 4), 'index_minimum(<correct result>) failed'\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert index_minimum([('cat', 10), ('dog', 5), ('mouse', 6), ('cow', 4)]) == ('cat', 10), 'Fail'\nassert index_minimum([('cat', 10), ('dog', 5), ('mouse', 6), ('cow', 4)]) == ('cow', 4), 'Fail'"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert index_minimum([(1,2),(2,2),(3,1),(4,1),(5,4)]) == (1,2)\nassert index_minimum([(1,2),(3,1),(5,4),(2,2),(4,1)]) == (2,2)\nassert index_minimum([(1,2),(2,3),(3,1),(4,1),(5,4)]) == (2,3)\nassert index_minimum([(1,2),(2,3),(3,1),(4,1),(5,4)]) == (2,3)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ntest_list =[('abc', 1), ('c', 2), ('a', 1), ('b', 2)]\nassert index_minimum(test_list) == ('a', 1)\nassert index_minimum([('a', 1), ('c', 2), ('b', 2), ('a', 1), ('c', 2)]) == ('a', 1)\nassert index_minimum([('a', 1), ('c', 2), ('b', 2), ('a', 1), ('c', 2)]) == ('c', 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)]) == (1, 1), index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)])\nassert index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)]) == (0, 2), index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)])\nassert index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)]) == (0, 2), index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)])\nassert index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)]) == (0, 2), index_minimum([(0, 2), (4, 4), (6, 7), (1, 1), (3, 6)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert index_minimum([(1, 2), (2, 0), (3, 1), (4, 2)]) == (1, 0)\nassert index_minimum([(1, 2), (2, 2), (3, 1), (4, 2)]) == (2, 2)\nassert index_minimum([(1, 2), (2, 3), (3, 1), (4, 2)]) == (3, 1)\nassert index_minimum([(1, 2), (2, 0), (3, 1), (4, 2)]) == (2, 0)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([1,2,3,4,5]) == 1\nassert     Find_Min_Length([1,2,3,4,5]) == 1\nassert     Find_Min_Length([[1,2,3,4,5],[5,6,7,8,9]]) == 1\nassert     Find_Min_Length([[1,2,3,4,5],[5,6,7,8,9],[10,11,12,13,14]]) == 1\nassert     Find_Min_Length([]) == 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[[]]]) == 0\nassert Find_Min_Length([[1,2,3,4],[5,6,7,8],[]]) == 0\nassert Find_Min_Length([[1,2,3,4],[5,6,7,8],[1,2,3,4]]) == 2\nassert Find_Min_Length([[],[1,2,3,4],[],[],[5,6,7,8],[],[]]) == 1"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([]) == 0,    \"Find_Min_Length fails on empty list\"\nassert     Find_Min_Length([[], []]) == 2, \"Find_Min_Length fails on 2 empty lists\"\nassert     Find_Min_Length([[], [1], [2], [3]]) == 2, \"Find_Min_Length fails on 3 lists\"\nassert     Find_Min_Length([[1, 2, 3], [1, 2], [1, 2, 3], [1, 2]]) == 4, \"Find_Min_Length fails on 4 lists\"\nassert     Find_Min_Length([[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3]]) == 4, \"Find_Min_Length fails on 4 lists\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[1,2],3,4,5,6,7]) == 3\nassert     Find_Min_Length([[1,2],3,4,5,6]) == 4\nassert     Find_Min_Length([[1,2],3,4,5,6,7,8,9,10]) == 4\nassert     Find_Min_Length([[1],2,3,4,5,6]) == 1\nassert     Find_Min_Length([[],3,4,5,6,7]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nFind_Min_Length([[1,2,3], [4,5,6]]) == 3\nFind_Min_Length([[1,2,3], [4,5,6,7]]) == 4\nFind_Min_Length([[1,2], [3,4,5]]) == 2\nFind_Min_Length([[1,2], [3,4,5,6]]) == 1\nFind_Min_Length([[1,2,3,4]]) == 4\nFind_Min_Length([[]]) == 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[1,2,3],[4,5],[6,7],[8,9,10]]) == 3\nassert Find_Min_Length([[1,2,3],[4,5,6],[7,8]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == 4\nassert     Find_Min_Length([[1,2,3,4],[4,5,6,7,8,9],[9,10,11,12]]) == 5\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12],[4,5,6,7,8,9]]) == 5\nassert     Find_Min_Length([[1,2,3,4,5,6],[7,8,9,10],[11,12,13]]) == 3\nassert     Find_Min_Length([[1,2,3,4,5,6,7],[7,8,9,10],[11,12,13,14]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nFind_Min_Length([[5, 8], [1, 2], [5, 7, 9]]) == 1\nassert \nFind_Min_Length([[1, 2, 3], [4, 5, 6]]) == 1\nassert \nFind_Min_Length([[1, 3, 6], [4, 2, 7]]) == "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nFind_Min_Length([[2,3,4,4],\n                [3,4,4,4],\n                [4,4,4,4],\n                [5,5,5,5,5,5]]) == 2, 'fail'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(2) == 3, \"divisor(2) is wrong\"\nassert     divisor(7) == 5, \"divisor(7) is wrong\"\nassert     divisor(8) == 4, \"divisor(8) is wrong\"\nassert     divisor(5) == 5, \"divisor(5) is wrong\"\nassert     divisor(6) == 5, \"divisor(6) is wrong\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert divisor(0) == 0, \"Zero has 0 divisors\"\nassert divisor(1) == 1, \"One has 1 divisor\"\nassert divisor(2) == 1, \"Two has 1 divisor\"\nassert divisor(3) == 2, \"Three has 2 divisors\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(2) == 4, \"The number of divisors of 2 should be 4\"\nassert     divisor(10) == 13, \"The number of divisors of 10 should be 13\"\nassert     divisor(0) == 1, \"The number of divisors of 0 should be 1\"\nassert     divisor(5) == 6, \"The number of divisors of 5 should be 6\"\nassert     divisor(8) == 10, \"The number of divisors of 8 should be 10\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert divisor(4) == 2\nassert divisor(1) == 1\nassert divisor(10) == 2\nassert divisor(4) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert divisor(6) == 1\nassert divisor(12) == 3\nassert divisor(20) == 4\nassert divisor(54) == 7\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(divisor(6)) # 2\nprint(divisor(4)) # 1\nprint(divisor(12)) # 2\nprint(divisor(8)) # 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisor(0) == 1\nassert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 2\nassert     divisor(5) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists([[1,2,3],[3,4,5],[5]]) == {1: 2, 2: 1, 3: 3, 4: 1, 5: 1}\nassert     frequency_lists([[1,2,3,4],[3,4,5],[5]]) == {1: 3, 2: 2, 3: 3, 4: 1, 5: 1}\nassert     frequency_lists([[1,2],[3,4,5],[5]]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency_lists([]) == {}\nassert     frequency_lists([[1]]) == {1: 1}\nassert     frequency_lists([[1], [2]]) == {1: 1, 2: 1}\nassert     frequency_lists([[1], [2], [3]]) == {1: 1, 2: 2, 3: 1}\nassert     frequency_lists([[1], [2], [2], [3]]) == {1: 1, 2: 3, 3: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1,1,1],[1,1,1],[1,1,1]]) == {1:3, 1:3, 1:3}\nassert     frequency_lists([[1,1,1],[1,2,1],[1,3,1],[1,3,1],[1,3,1]]) == {1:4, 1:2, 1:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef flatten(list1):\n    '''\n    Write a function to flatten a list of lists into a single list.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {\n    1: 3,\n    2: 2,\n    3: 1,\n    4: 1,\n    5: 1,\n    6: 1,\n    7: 1,\n    8: 1,\n    9: 1\n}\nassert     frequency_lists([[1], [1, 2], [1, 1, 1]]) == {\n    1: 3\n}\nassert     frequency_lists([[1], [2], [3], [4], [5], [6], [7]]) == {\n    1: 2,\n    2: 1,\n    3: 1,\n    4: 1,\n    5: 1,\n    6: 1,\n    7: 1\n}\nassert     frequency_lists([[1, 2, 3], [3, 2, 1], [1, 2, 2], [3, 1, 3]]) == {\n    1: 4,\n    2: 3,\n    3: 3,\n    4: 2\n}\nassert     frequency_lists([[1], [2], [3], [4], [5], [6], [7], [8]]) == {\n    1: 4,\n    2: 1,\n    3: 1,\n    4: 1,\n    5: 1,\n    6: 1,\n    7: 1,\n    8: 1\n}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(frequency_lists(['m','m', 'o', 'o', 'o', 'o', 'a', 'o','m'])) == {'m': 3, 'o': 3, 'a': 1}\nprint(frequency_lists(['m', 'o','m', 'o', 'o', 'a', 'a','m'])) == {'m': 3, 'o': 2, 'a': 2}\nprint(frequency_lists([''])) == {}\nprint(frequency_lists([[]])) == {}\nprint(frequency_lists(['a'])) == {}\nprint(frequency_lists([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[3,6,6,2,2,2],\n                        [4,6,6,2,2,2]]) == {3:2,6:3,2:2}\n\nassert     frequency_lists([[1,2],\n                        [2,3],\n                        [2,3]]) == {1:1,2:2,3:2}\n\nassert     frequency_lists([[3,6,6,2,2,2],\n                        [4,6,6,2,2,2]]) == {3:2,6:3,2:2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1,1,2,2],[1,1,2,2],[1,2,2,3]]) == {1:3, 2:2, 3:2}\nassert     frequency_lists([[1],[1],[2],[3],[4]]) == {1:4, 2:1, 3:1}\nassert     frequency_lists([[]]) == {}"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n    You can represent an array as a list of integers or as a list of lists of integers.\n    (arr = [[1, 2, 3, 4],\n            [5, 6, 7, 8]])\n    But there is no order in an array.\n    You can access elements of an array by its index.\n    However, you must take care of the index overflow.\n    \n    def frequency_lists(list1):\n    \n    The input contains a list of integers.\n    The function returns a dictionary that contains the frequency of each element in the input list.\n'''"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([2,2,2]) == 8, \"should be 8\"\nassert     multiply_num([2,3,4,6]) == 48, \"should be 48\"\nassert     multiply_num([]) == 1, \"should be 1\"\nassert     multiply_num([3,3,3]) == 9, \"should be 9\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([1, 2]) == 2\nassert     multiply_num([]) == 1\nassert     multiply_num([1,2,3,4]) == 24\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24\nassert multiply_num([0, 0, 0, 0]) == 0\nassert multiply_num([1, 2, 3, 4, 5, 6]) == 120\nassert multiply_num([1, 2, 3, 4, 5]) == 120\nassert multiply_num([1, 2, 3, 4, 5, 6, 7]) == 240\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    multiply_num([10, 20, 30]) == 1000\n    multiply_num([100, 1000, 2]) == 10000\n    multiply_num([1]) == 1\n    multiply_num([10, 20]) == 200\n    multiply_num([]) == 1\n    multiply_num([3]) == 3\n    multiply_num([2, 3, 4]) == 24\n    multiply_num([1, 3, 2]) == 12\n    multiply_num([0, 0, 0]) == 1\n    multiply_num([-1, -1, -1]) == -3\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert multiply_num([3, 4, 5]) == [8, 12, 20]\nassert multiply_num([1, 2, 3]) == 1\nassert multiply_num([4, 5, 6]) == 24\nassert multiply_num([]) == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_num([]) == 1\nassert     multiply_num([1,2]) == 2\nassert     multiply_num([1,2,3]) == 6\nassert     multiply_num([-1,-2,-3]) == -6"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert decimal_to_binary(45) == '101010'\nassert decimal_to_binary(13) == '110101'\nassert decimal_to_binary(0) == '0'\nassert decimal_to_binary(-45) == '101010'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(4) == '0100'\nassert     decimal_to_binary(5) == '1010'\nassert     decimal_to_binary(6) == '1110'\nassert     decimal_to_binary(7) == '1111'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(15) == '1001', \"1st\"\nassert     decimal_to_binary(33) == '11011', \"2nd\"\nassert     decimal_to_binary(1) == '1', \"3rd\"\nassert     decimal_to_binary
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Decimal to binary conversion: \", decimal_to_binary(17)) # returns 1011\nprint(\"Decimal to binary conversion: \", decimal_to_binary(0)) # returns 0\nprint(\"Decimal to binary conversion: \", decimal_to_binary(8)) # returns 1000\nprint(\"Decimal to binary conversion: \", decimal_to_binary(-2)) # returns 1100\nprint(\"Decimal to binary conversion: \", decimal_to_binary(1.2)) # returns 111010110\nprint(\"Decimal to binary conversion: \", decimal_to_binary(0.1)) # returns 100000101\nprint(\"Decimal to binary conversion: \", decimal_to_binary(-0.1)) # returns 100000101\n\n\n\ndef convert_to_binary(num): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef decimal_to_octal(n): \n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(5) == \"0101\"\nassert     decimal_to_binary(16) == \"1101\"\nassert     decimal_to_binary(15) == \"101\"\nassert     decimal_to_binary(4) == \"0100\"\nassert     decimal_to_binary(0) == \"0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(6) == '110'\nassert     decimal_to_binary(9) == '1111'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(15) == '10011'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(5) == 4\nassert     next_smallest_palindrome(7) == 6\nassert     next_smallest_palindrome(11) == 10\nassert     next_smallest_palindrome(12) == 10\nassert     next_smallest_palindrome(23) == 22\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(12) == \"13\"\nassert next_smallest_palindrome(16) == \"17\"\nassert next_smallest_palindrome(25) == \"26\"\nassert next_smallest_palindrome(36) == \"37\"\n\ndef next_smallest_palindrome_solution(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Solution 1: with a for loop\n    # iterate from the right to the left\n    # for each number, if it is odd, add 1, else subtract 1\n    # add each number to the palindrome\n    # check if the palindrome is a palindrome\n    # if so, return it\n    # else, loop back to the beginning of the palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(123) == 321\nassert     next_smallest_palindrome(1233) == 233\nassert     next_smallest_palindrome(99999) == 99999\nassert     next_smallest_palindrome(0) == 0\nassert     next_smallest_palindrome(23) == 12\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(11) == 21\nassert     next_smallest_palindrome(16) == 19\nassert     next_smallest_palindrome(21) == 31\nassert     next_smallest_palindrome(22) == 23\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(9) == 19\nassert     next_smallest_palindrome(7) == 21\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(123321) == 213212\nassert     next_smallest_palindrome(101) == 100\nassert     next_smallest_palindrome(1230) == 122\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     kth_element([1,2,3,4,5], 5) == 5\nassert     kth_element([1,2,3,4,5], 6) == 5\nassert     kth_element([1,2,3,4,5], 7) == 5\nassert     kth_element([1,2,3,4,5], 0) == 1\nassert     kth_element([1,2,3,4,5], 1) == 2\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef kth_element_binary_search(arr, k):\n    '''\n    Write a function to find the kth element in the given array using binary search.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     kth_element([1, 3, 5, 7, 9, 11, 13, 15, 17], 10) == 15\nassert     kth_element([1, 3, 5, 7, 9, 11, 13, 15, 17], 17) == 17\nassert     kth_element([1, 3, 5, 7, 9, 11, 13, 15, 17], 6) == 3\nassert     kth_element([1, 3, 5, 7, 9, 11, 13, 15, 17], 1) == 1\nassert     kth_element([1, 3, 5, 7, 9, 11, 13, 15, 17], 3) == 3\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    [1,2,3,4,5,6,7,8,9,10], 2\n    [1,2,3,4,5,6,7,8,9,10], 5\n\n\n'''\nGiven an array arr[] and a number K where K is smaller than size of array. \nFind the K\u2019th smallest element in the given array. It is given that all array elements are distinct.\n\nInput:\nThe first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. First line of each test case contains an integer N denoting the size of the array. Second line of each test case contains N space separated integers denoting the elements of the array.\n\nOutput:\nPrint the K\u2019th smallest element in a single line.\n\nConstraints:\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 105\n1 \u2264 arr[i] \u2264 105\nExample:\nInput:\n2\n5\n1 2 3 4 5\n4\n2 3 1 5\nOutput:\n4\n2\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     kth_element([1, 2, 3, 4], 1) == 3, 'Wrong answer :('\nassert kth_element([1, 2, 3, 4], 4) == 4, 'Wrong answer :('\nassert kth_element([1, 2, 3, 4], 5) == -1, 'Wrong answer :('\nassert kth_element([1, 2, 3, 4, 5], 10) == -1, 'Wrong answer :('\nassert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 1, 'Wrong answer :('\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     kth_element([], 1) == None\nassert kth_element([1,2,3,4,5,6,7], 1) == 1\nassert kth_element([1,2,3,4,5,6,7], 4) == 6\nassert kth_element([1,2,3,4,5,6,7], 7) == 7\nassert kth_element([1,2,3,4,5,6,7], 8) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test 1\n    arr = [1, 5, 6, 3, 7, 8, 9]\n    assert kth_element(arr, 1) == 1\n    assert kth_element(arr, 4) == 8\n    assert kth_element(arr, 5) == 6\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('snake_case_') == 'SnakeCase'\nassert     snake_to_camel('snake_case__') == 'SnakeCase'\nassert     snake_to_camel('_snake_case') == 'SnakeCase'\nassert     snake_to_camel('snake_case_') == 'SnakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\", f\"Snake case to camel case function is wrong. Given {'snake_case'} should be {'snakeCase'}\"\n\nassert     snake_to_camel(\"snake_case_\") == \"snakeCase\", f\"Snake case to camel case function is wrong. Given {'snake_case_'} should be {'snakeCase'}\"\n\nassert     snake_to_camel(\"snake_case__\") == \"snakeCase\", f\"Snake case to camel case function is wrong. Given {'snake_case__'} should be {'snakeCase'}\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_camel') =='snakeCamel', \"Should be snake_camel\"\nassert snake_to_camel('snakeCamel') =='snakeCamel', \"Should be snake_camel\"\nassert snake_to_camel('snake_camel_') =='snakeCamel', \"Should be snake_camel\"\nassert snake_to_camel('snakeCamel_') =='snakeCamel', \"Should be snake_camel\"\nassert snake_to_camel('snake_camel__') =='snakeCamel', \"Should be snake_camel\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('i_am_a_snake') == 'iAmASnake', 'Error!'\nassert     snake_to_camel('i_am_a_snake') == 'iAmASnake', 'Error!'\nassert     snake_to_camel('i_am_a_snake') == 'iAmASnake', 'Error!'\nassert     snake_to_camel('i_am_a_snake') == 'IAmASnake', 'Error!'\nassert     snake_to_camel('IAMAMASNAKE') == 'IamAMASnake', 'Error!'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', 'Fail'\nassert     snake_to_camel('snake_case') == 'SnakeCase', 'Fail'\nassert     snake_to_camel('snake-case') == 'SnakeCase', 'Fail'\nassert     snake_to_camel('snake_Case') == 'SnakeCase', 'Fail'\nassert     snake_to_camel('snakecase') == 'SnakeCase', 'Fail'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_camel_case') =='snakeCamelCase'\nassert     snake_to_camel('snake_CamelCase') =='snakeCamelCase'\nassert     snake_to_camel('SNAKE_CAMEL_CASE') =='snaKeCamelCase'\nassert     snake_to_camel('snakeCamelCase') =='snakeCamelCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case', 'Expected: snake_case, Actual: {}'.format(snake_to_camel('snake_case'))\nassert snake_to_camel('snake_camel') =='snake_camel', 'Expected: snake_camel, Actual: {}'.format(snake_to_camel('snake_camel'))\nassert snake_to_camel('snake_constant') =='snake_constant', 'Expected: snake_constant, Actual: {}'.format(snake_to_camel('snake_constant'))\nassert snake_to_camel('snake_constant_second') =='snake_constant_second', 'Expected: snake_constant_second, Actual: {}'.format(snake_to_camel('snake_constant_second'))\n\nprint('Done')"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef snake_to_camel_alternative(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = ''\n    for i in range(len(word)):\n        if i > 0 and word[i].isupper():\n            s += word[i].lower()\n        else:\n            s += word[i]\n    return s\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('i_am_a_snake') == 'iAmASnake'\nassert     snake_to_camel('to_be_or_not_to_be') == 'toBeOrNotToBe'\nassert     snake_to_camel('CamelCase') == 'camelCase'\nassert     snake_to_camel('3CamelCase') == '3CamelCase'\nassert     snake_to_camel('Camel_Case') == 'camelCase'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(3, 2) == 2\nassert     eulerian_num(3, 3) == 0\nassert     eulerian_num(5, 7) == 0\nassert     eulerian_num(0, 0) == 0\nassert     eulerian_num(0, 1) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eulerian_num(2, 1) == 2 \nassert     eulerian_num(5, 1) == 5 \nassert     eulerian_num(7, 1) == 10 \nassert     eulerian_num(4, 1) == 3 \nassert     eulerian_num(1, 1) == 1 \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neulerian_num(3,3) == 3, \"There should be no Eulerian number of 3 for 3 connected components.\"\n\nassert\neulerian_num(4,4) == 4, \"There should be no Eulerian number of 4 for 4 connected components.\"\n\nassert\neulerian_num(5,5) == 5, \"There should be no Eulerian number of 5 for 5 connected components.\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eulerian_num(1, 1) == 0\nassert     eulerian_num(1, 2) == 0\nassert     eulerian_num(2, 1) == 0\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(3, 1) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(10, 5) == 8\nassert eulerian_num(10, 10) == 13\nassert eulerian_num(10, 5) == eulerian_num(10, 10)\nassert eulerian_num(10, 5) == eulerian_num(10, 10) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian_num(10, 5) == eulerian"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(3, 2) == 4\nassert     eulerian_num(2, 4) == 1\nassert     eulerian_num(2, 3) == 3\nassert     eulerian_num(4, 5) == 3\nassert     eulerian_num(5, 6) == 5\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(2, 5) == 3\nassert     eulerian_num(5, 2) == 6\nassert     eulerian_num(3, 5) == 2\n\ndef eulerian_path(n, m): \n    '''\n    Write a function to find the Eulerian path a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef eulerian_num2(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nInput\nn = 5\nm = 2\nOutput\n6\n'''\ndef min_path(n, m):\n    '''\n    Write a function to find the minimum path from \n    starting point to ending point with only the minimum number of steps\n    that you can take.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sort_sublists([\"spam\", \"eggs\", \"tomato\"]) == [\"eggs\", \"spam\", \"tomato\"]\nassert sort_sublists([\"spam\", \"egg\", \"tomato\"]) == [\"egg\", \"spam\", \"tomato\"]\nassert sort_sublists([\"spam\"]) == [\"spam\"]\nassert sort_sublists([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'c']]) == [['a', 'a', 'a'], ['b', 'b', 'b'], ['c', 'c', 'c']]\nassert     sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5], [6, 6, 6], [7, 7, 7], [8, 8, 8], [9, 9, 9]]\nassert     sort_sublists([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8], [9, 9, 9, 9]]\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'c']]) == [['a', 'a', 'a'], ['b', 'b', 'b'], ['c', 'c', 'c']]\nassert     sort_sublists([[], ['a']]) == [[], ['a']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']\nassert     sort_sublists(['1', '2', '2', '3', '4', '4', '5']) == ['1', '2', '2', '3', '4', '4', '5']\nassert     sort_sublists(['1', '2', '2', '3', '4', '4', '5', '6', '7']) == ['1', '2', '2', '3', '4', '4', '5', '6', '7']\nassert     sort_sublists(['1', '2', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']) == ['1', '2', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']\nassert     sort_sublists(['1', '2', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']) == ['1', '2', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_palindrome(input_string):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d'], ['e']]) == \n                [['a', 'b', 'c'], ['d'], ['e']]\nassert     sort_sublists([[1, 2, 3], 'b', 'a', 'd']) == \n                [1, 2, 3, 'a', 'b', 'd']\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists(['cat', 'dog', 'apple', 'car', 'laptop','monkey']) ==     ['car', 'cat', 'apple', 'dog', 'laptop','monkey']\nassert sort_sublists(['cat', 'dog', 'apple', 'car', 'laptop','monkey']) ==     ['cat', 'dog', 'apple', 'car', 'laptop','monkey']\nassert sort_sublists(['cat', 'dog', 'apple', 'car', 'laptop','monkey']) ==     ['cat', 'dog', 'apple', 'car', 'laptop','monkey']\nassert sort_sublists(['cat', 'dog', 'apple', 'car', 'laptop','monkey']) ==     ['cat', 'dog', 'apple', 'car', 'laptop','monkey']\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([['a', 'b'], ['c', 'd'], ['e', 'f']]) ==     [['e', 'f'], ['a', 'b'], ['c', 'd']]\nassert     sort_sublists([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h']]) ==     [['e', 'f'], ['a', 'b'], ['c', 'd'], ['g', 'h']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([[\"abc\",\"def\",\"ghi\"]]) == [['abc', 'def', 'ghi'], ['abc', 'ghi', 'def'], ['def', 'abc', 'ghi'], ['def', 'ghi', 'abc'], ['ghi', 'abc', 'def'], ['ghi', 'def', 'abc']]\nassert     sort_sublists([[\"zero\", \"one\", \"two\"], [\"three\", \"four\", \"five\"]]) == [['zero', 'one', 'two'], ['zero', 'two', 'one'], ['one', 'zero', 'two'], ['one', 'two', 'zero'], ['two', 'zero', 'one'], ['two', 'one', 'zero']]\nassert     sort_sublists([[\"zero\", \"one\", \"two\"], [\"three\", \"four\", \"five\"]]) == [['zero', 'one', 'two'], ['three', 'four', 'five'], ['zero', 'two', 'one'], ['zero', 'two', 'one'], ['one', 'zero', 'two'], ['one', 'two', 'zero']]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([False, False, True]) == 1, \"Should be 1\"\nassert     count([False, False, True, True]) == 2, \"Should be 2\"\nassert     count([False, False, False, False, False, True, False]) == 5, \"Should be 5\"\nassert     count([True, False, False, False, False, True, False]) == 3, \"Should be 3\"\nassert     count([True, True, True, False, False, False, False]) == 2, \"Should be 2\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([True, True, False, False, True]) == 3\nassert     count([True, False, True]) == 2"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([]) == 0, \"Empty List\"\nassert     count([True]) == 1, \"1 Item\"\nassert     count([True, False, False, False, True, False, True, False, True, False]) == 5, \"5 True Items\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([True, True, False, True, True]) == 4, \"Check your work\"\nassert     count([True, True, False, True, True, True]) == 5, \"Check your work\"\nassert     count([True, True, False, False, False, False]) == 3, \"Check your work\"\nassert     count([True, True, False, False, False, False, True]) == 4, \"Check your work\"\nassert     count([True, False, False, False, False, False, False]) == 4, \"Check your work\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount([True, False, True, True, False]) == 4\nassert count([True, False, True, True, False]) == 5\nassert count([True, True, False, False, False, False, False]) == 7\nassert count([True, False, True, False, False, False, False]) == 5\nassert count([True, False, True, True, False, False]) == 4\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlst = [0,1,True,False]\nassert count(lst) == 4\nassert count([0,1,True,False]) == 4\nassert count([0,1,True,False,1,1,True,True,False,False,True]) == 9\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([True,True,False,True,False]) == 3, \"Error-1\"\nassert     count([True,False,True,True,False]) == 5, \"Error-2\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count([True,True,True,False,False,False]) == 4\nassert     count([True,False,False,False]) == 3\nassert     count([True,False,True,False]) == 2\nassert     count([False,False,False,False]) == 0\nassert     count([True,True,True,True,False,True,False,False]) == 8\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count([True, False, False, True, False]) == 3, 'Wrong output'\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_lists([1,2,3], [(4,5),(6,7),(8,)]) == [(1,2,3), (4,5), (6,7), (8,)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1,2,3], (4,5,6)) == ([1,2,3,4,5,6],)\nassert     add_lists([1,2,3], [(4,5,6),(7,8,9)]) == ([1,2,3,4,5,6],\n                        [7,8,9])\nassert     add_lists([1,2], [(3,4,5),(6,7,8)]) == ([1,2,3,4,5,6],\n                        [6,7,8])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1,2], (3,4)) == ([1,2], (3,4))\nassert     add_lists([], (1,2)) == ([], (1,2))\nassert     add_lists([1,2,3,4], ()) == ([1,2,3,4], ())\n\n'''\nGiven an integer number n, return an array that contains n + 1 integers such that each integer in the array \nis equal to the sum of the integers before it.\n'''\ndef sum_nums(n):\n    '''\n    Write a function that returns a n + 1 integers such that each integer in the array is equal to the sum of the \n    integers before it.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([1,2,3], (1,2,3)) == [(1,2,3),(1,2,3),(1,2,3)]\nassert     add_lists([2,4,6], (1,2,3)) == [(1,2,3),(2,4,6),(2,4,6)]\nassert     add_lists([1,2], (1,2,3)) == [(1,2,3),(1,2,3)]\nassert     add_lists([1,2], (3,4,5)) == [(1,2,3),(3,4,5)]\nprint('Congratulations!'"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([1,2,3,4], [(1,2), (3,4)]) == None\nassert add_lists([1,2,3,4], [(1,2,3,4)]) == None\nassert add_lists([1,2,3,4], [(1,2,3), (4)]) == None\nassert add_lists([1,2,3,4], [(1,2,3), (4,5)]) == [(1,2,3), (4,5)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_lists([1, 2], (4, 5, 6)) == (1, 2, 4, 5, 6)\nassert     add_lists([1], (4, 5, 6)) == (1, 4, 5, 6)\nassert     add_lists([], (4, 5, 6)) == (4, 5, 6)\n\nprint('You have successfully passed this assignment!'"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert merge_sorted_list([1,3,6],\n                        [2,4,7],\n                        [0,1,3,6,7,9,10,12,14]) == [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    # base cases\n    if num1 == None and num2 == None and num3 == None:\n        return []\n    if num1 == None and num2!= None and num3 == None:\n        return num2\n    if num1!= None and num2 == None and num3!= None:\n        return num1\n    if num1!= None and num2!= None and num3 == None:\n        return num1 + num2\n    \n    # init pointers\n    list1,list2,list3 = num1,num2,num3\n\n    # merge three sorted lists\n    merged_list = []\n    while len(list1)!= 0 and len(list2)!= 0 and len(list3)!= 0:\n        # compare\n        if list1[0] <= list2[0] and list1[0] <= list3[0]:\n            merged_list.append(list1[0])\n            list1.pop(0)\n        elif list2[0] <= list1[0] and list2[0] <= list3[0]:\n            merged_list.append(list2[0])\n            list2.pop(0)\n        else:\n            merged_list.append(list3[0])\n            list3.pop(0)\n            \n    # add remaining list\n    merged_list += list1 + list2 + list3\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nnum1=[1,2,3,4,5,6]\nnum2=[3,4,5,6,7,8]\nnum3=[7,8,9,10,11,12]\nmerge_sorted_list(num1,num2,num3)\n\nnum1=[1,2,3,4,5,6]\nnum2=[3,4,5,6,7,8]\nnum3=[7,8,9,10,11,12]\nmerge_sorted_list(num1,num2,num3)\n\nnum1=[1,2,3,4,5,6]\nnum2=[3,4,5,6,7,8]\nnum3=[7,8,9,10,11,12]\nmerge_sorted_list(num1,num2,num3)\n\nnum1=[1,2,3,4,5,6]\nnum2=[3,4,5,6,7,8]\nnum3=[7,8,9,10,11,12]\nmerge_sorted_list(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef merge_sort(arr):\n    '''\n    Write a function to merge a list into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,3,6,8], \n                            [5,7,9,10], \n                            [2,4,6,8,10,12,14,16]) == [1,2,3,4,5,6,7,8,8,9,10,11,12,13,14,16]\nassert     merge_sorted_list([1,2,3], \n                            [], \n                            []) == [1,2,3]\nassert     merge_sorted_list([], \n                            [], \n                            []) == []\nassert     merge_sorted_list([1,2,3], \n                            [4,5,6], \n                            [7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2,3,4], \n                            [5,6,7,8], \n                            [9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_merge_sorted_list():\n    assert merge_sorted_list([1,2,3,4],[5,6,7,8],[4,5,6,7]) == [1,2,3,4,5,6,7,8]\n\ndef merge_sorted_list_top_down(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    Use the top-down approach.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_sorted_list([1,2],\n                            [2,3],\n                            [2,5]) == [1,2,2,2,3,5]\nassert     merge_sorted_list([],\n                            [2],\n                            [2,3]) == [2,2,3]\nassert     merge_sorted_list([],\n                            [],\n                            [2,3]) == [2,3]\nassert     merge_sorted_list([1],\n                            [],\n                            [2,3]) == [1,2,3]\nassert     merge_sorted_list([1,2],\n                            [2],\n                            []) == [1,2]\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(odd_Equivalent(b\"10110\",4)==12)\nprint(odd_Equivalent(b\"10110\",5)==26)\nprint(odd_Equivalent(b\"10110\",6)==34)\nprint(odd_Equivalent(b\"10110\",7)==35)\nprint(odd_Equivalent(b\"10110\",8)==40)\nprint(odd_Equivalent(b\"10110\",9)==46)\nprint(odd_Equivalent(b\"10110\",10)==51)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_Equivalent(\"1010101101\",1) == 1\nassert odd_Equivalent(\"1010101101\",2) == 2\nassert odd_Equivalent(\"1010101101\",3) == 4\nassert odd_Equivalent(\"1010101101\",4) == 6\nassert odd_Equivalent(\"1010101101\",5) == 8\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent('0010100101011',3) == 5\nassert odd_Equivalent('0010100101011',3) == 7\nassert odd_Equivalent('0010100101011',4) == 9\nassert odd_Equivalent('0010100101011',5) == 12\n\ndef even_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_Equivalent(\"00\", 1) == \"01\", \"Wrong answer: odd_Equivalent(\"00\", 1) == \\\"01\\\"\"\nassert odd_Equivalent(\"00\", 2) == \"10\", \"Wrong answer: odd_Equivalent(\"00\", 2) == \\\"10\\\"\"\nassert odd_Equivalent(\"00\", 3) == \"11\", \"Wrong answer: odd_Equivalent(\"00\", 3) == \\\"11\\\"\"\nassert odd_Equivalent(\"00\", 4) == \"11\", \"Wrong answer: odd_Equivalent(\"00\", 4) == \\\"11\\\"\"\nassert odd_Equivalent(\"01\", 1) == \"00\", \"Wrong answer: odd_Equivalent(\"01\", 1) == \\\"00\\\"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent('11001',2) == 9\nassert odd_Equivalent('10110',1) == 10\nassert odd_Equivalent('10011',1) == 9\nassert odd_Equivalent('111010',1) == 9\nassert odd_Equivalent('111011',1) == 8\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    odd_Equivalent(\"110101\",1) == 1\n    odd_Equivalent(\"110111\",1) == 1\n    odd_Equivalent(\"110110\",1) == 2\n    odd_Equivalent(\"110111\",1) == 2\n    odd_Equivalent(\"110111\",2) == 3\n    odd_Equivalent(\"110111\",3) == 3\n    odd_Equivalent(\"110111\",4) == 4\n    odd_Equivalent(\"110111\",5) == 5\n    odd_Equivalent(\"110111\",6) == 5\n    odd_Equivalent(\"110111\",7) == 5\n    odd_Equivalent(\"110111\",8) == 5\n    odd_Equivalent(\"110111\",9) == 5\n    odd_Equivalent(\"110111\",10) == 5\n    odd_Equivalent(\"110111\",11) == 5\n    odd_Equivalent(\"110111\",12) == 5\n    odd_Equivalent(\"110111\",13) == 5\n    odd_Equivalent(\"110111\",14) == 5\n    odd_Equivalent(\"110111\",15) == 5\n    odd_Equivalent(\"110111\",16) == 5\n    odd_Equivalent(\"110111\",17) == 5\n    odd_Equivalent(\"110111\",18) == 5\n    odd_Equivalent(\"110111\",19) == 5\n    odd_Equivalent(\"110111\",20) == 5\n    odd_Equivalent(\"110111\",21) == 5\n    odd_Equivalent(\"110111\",22) == 5\n    odd_Equivalent(\"110111\",23) == 5\n    odd_Equivalent(\"110111\",24) == 5\n    odd_Equivalent(\"110111\",25) == 5\n    odd_Equivalent(\"110111\",26) == 5\n    odd_Equivalent(\"110111\",27) == 5\n    odd_Equivalent(\"110111\",28) == 5\n    odd_Equivalent(\"110111\",29) == 5\n    odd_Equivalent(\"110111\",30) == 5\n    odd_Equivalent(\"110111\",31) == 5\n    odd_Equivalent(\"110111\",32) == 5\n    odd_Equivalent(\"110111\",33) == 5\n    odd_Equivalent(\"110111\",34) == 5\n    odd_Equivalent(\"110111\",35) == 5\n    odd_Equivalent(\"110111\",36) == 5\n    odd_Equivalent(\"110111\",37) == 5\n    odd_Equivalent(\"110111\",38) == 5\n    odd_Equivalent(\"110111\",39) == 5\n    odd_Equivalent(\"110111\",40) == 5\n    odd_Equivalent(\"110111\",41) == 5\n    odd_Equivalent(\"110111\",42) == 5\n    odd_Equivalent(\"110111\",43) == 5\n    odd_Equivalent(\"110111\",44) == 5\n    odd_Equivalent(\"110111\",45) == 5\n    odd_Equivalent(\"110111\",46) == 5\n    odd_Equivalent(\"110111\",47) == 5\n    odd_Equivalent(\"110111\",48) == 5\n    odd_Equivalent(\"110111\",49) == 5\n    odd_Equivalent(\"110111\",50) == 5\n    odd_Equivalent(\"110111\",51) == 5\n    odd_Equivalent(\"110111\",52) == 5\n    odd_Equivalent(\"110111\",53) == 5\n    odd_Equivalent(\"110111\",54) == 5\n    odd_Equivalent(\"110111\",55) == 5\n    odd_Equivalent(\"110111\",56) == 5\n    odd_Equivalent(\"110111\",57) == 5\n    odd_Equivalent(\"110111\",58) == 5\n    odd_Equivalent(\"110111\",59) == 5\n    odd_Equivalent(\"110111\",60) == 5\n    odd_Equivalent(\"110111\",61) == 5\n    odd_Equivalent(\"110111\",62) == 5\n    odd_Equivalent(\"110111\",63) == 5\n    odd_Equivalent(\"110111\",64) == 5\n    odd_Equivalent(\"110111\",65) == 5\n    odd_Equivalent(\"110111\",66) == 5\n    odd_Equivalent(\"110111\",67) == 5\n    odd_Equivalent(\"110111\",68) == 5\n    odd_Equivalent(\"110111\",69) == 5\n    odd_Equivalent(\"110111\",70) == 5\n    odd_Equivalent(\"110111\",71) == 5\n    odd_Equivalent(\"110111\",72) == 5\n    odd_Equivalent(\"110111\",73) == 5\n    odd_Equivalent(\"110111\",74) == 5\n    odd_Equivalent(\"110111\",75) == 5\n    odd_Equivalent(\"110111\",76) == 5\n    odd_Equivalent(\"110111\",77) == 5\n    odd_Equivalent(\"110111\",78) == 5\n    odd_Equivalent(\"110111\",79) == 5\n    odd_Equivalent(\"110111\",80) == 5\n    odd_Equivalent(\"110111\",81) == 5\n    odd_Equivalent(\"110111\",82) == 5\n    odd_Equivalent(\"110111\",83) == 5\n    odd_Equivalent(\"110111\",84) == 5\n    odd_Equivalent(\"110111\",85) == 5\n    odd_Equivalent(\"110111\",86) == 5\n    odd_Equivalent(\"110111\",87) == 5\n    odd_Equivalent(\"110111\",88) == 5\n    odd_Equivalent(\"110111\",89) == 5\n    odd_Equivalent(\"110111\",90) == 5\n    odd_Equivalent(\"110111\",91) == 5\n    odd_Equivalent(\"110111\",92) == 5\n    odd_Equivalent(\"110111\",93) == 5\n    odd_Equivalent(\"110111\",94) == 5\n    odd_Equivalent(\"110111\",95) == 5\n    odd_Equivalent(\"110111\",96) == 5\n    odd_Equivalent(\"110111\",97) == 5\n    odd_Equivalent(\"110111\",98) == 5\n    odd_Equivalent(\"110111\",99) == 5\n    odd_Equivalent(\"110111\",100) == 5\n    odd_Equivalent(\"110111\",101) == 5\n    odd_Equivalent(\"110111\",102) == 5\n    odd_Equivalent(\"110111\",103) == 5\n    odd_Equivalent(\"110111\",104) == 5\n    odd_Equivalent(\"110111\",105) == 5\n    odd_Equivalent(\"110111\",106) == 5\n    odd_Equivalent(\"110111\",107) == 5\n    odd_Equivalent(\"110111\",108) == 5\n    odd_Equivalent(\"110111\",109) == 5\n    odd_Equivalent(\"110111\",110) == 5\n    odd_Equivalent(\"110111\",111) == 5\n    odd_Equivalent(\"110111\",112) == 5\n    odd_Equivalent(\"110111\",113) == 5\n    odd_Equivalent(\"110111\",114) == 5\n    odd_Equivalent(\"110111\",115) == 5\n    odd_Equivalent(\"110111\",116) == 5\n    odd_Equivalent(\"110111\",117) == 5\n    odd_Equivalent(\"110111\",118) == 5\n    odd_Equivalent(\"110111\",119) == 5\n    odd_Equivalent(\"110111\",120) == 5\n    odd_Equivalent(\"110111\",121) == 5\n    odd_Equivalent(\"110111\",122) == 5\n    odd_Equivalent(\"110111\",123) == 5\n    odd_Equivalent(\"110111\",124) == 5\n    odd_Equivalent(\"110111\",125) == 5\n    odd_Equivalent(\"110111\",126) == 5\n    odd_Equivalent(\"110111\",127) == 5\n    odd_Equivalent(\"110111\",128) == 5\n    odd_Equivalent(\"110111\",129) == 5\n    odd_Eq"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_Equivalent
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    odd_Equivalent('11010011',2)==1\n    odd_Equivalent('11010011',3)==4\n    odd_Equivalent('11010011',4)==5\n    odd_Equivalent('11010011',5)==5\n    odd_Equivalent('11010011',6)==3\n    odd_Equivalent('11010011',7)==0\n    odd_Equivalent('11010011',8)==2\n    odd_Equivalent('11010011',9)==1\n    odd_Equivalent('11010011',10)==2\n    odd_Equivalent('11010011',11)==3\n    odd_Equivalent('11010011',12)==4\n    odd_Equivalent('11010011',13)==0\n    odd_Equivalent('11010011',14)==4\n    odd_Equivalent('11010011',15)==1\n    odd_Equivalent('11010011',16)==5\n    odd_Equivalent('11010011',17)==2\n    odd_Equivalent('11010011',18)==3\n    odd_Equivalent('11010011',19)==4\n    odd_Equivalent('11010011',20)==5\n    odd_Equivalent('11010011',21)==3\n    odd_Equivalent('11010011',22)==2\n    odd_Equivalent('11010011',23)==1\n    odd_Equivalent('11010011',24)==0\n    odd_Equivalent('11010011',25)==4\n    odd_Equivalent('11010011',26)==2\n    odd_Equivalent('11010011',27)==3\n    odd_Equivalent('11010011',28)==0\n    odd_Equivalent('11010011',29)==1\n    odd_Equivalent('11010011',30)==2\n    odd_Equivalent('11010011',31)==3\n    odd_Equivalent('11010011',32)==4\n    odd_Equivalent('11010011',33)==5\n    odd_Equivalent('11010011',34)==0\n    odd_Equivalent('11010011',35)==1\n    odd_Equivalent('11010011',36)==2\n    odd_Equivalent('11010011',37)==3\n    odd_Equivalent('11010011',38)==4\n    odd_Equivalent('11010011',39)==5\n    odd_Equivalent('11010011',40)==3\n    odd_Equivalent('11010011',41)==2\n    odd_Equivalent('11010011',42)==1\n    odd_Equivalent('11010011',43)==0\n    odd_Equivalent('11010011',44)==4\n    odd_Equivalent('11010011',45)==2\n    odd_Equivalent('11010011',46)==3\n    odd_Equivalent('11010011',47)==4\n    odd_Equivalent('11010011',48)==5\n    odd_Equivalent('11010011',49)==3\n    odd_Equivalent('11010011',50)==2\n    odd_Equivalent('11010011',51)==1\n    odd_Equivalent('11010011',52)==0\n    odd_Equivalent('11010011',53)==4\n    odd_Equivalent('11010011',54)==2\n    odd_Equivalent('11010011',55)==3\n    odd_Equivalent('11010011',56)==4\n    odd_Equivalent('11010011',57)==5\n    odd_Equivalent('11010011',58)==3\n    odd_Equivalent('11010011',59)==2\n    odd_Equivalent('11010011',60)==1\n    odd_Equivalent('11010011',61)==0\n    odd_Equivalent('11010011',62)==4\n    odd_Equivalent('11010011',63)==2\n    odd_Equivalent('11010011',64)==3\n    odd_Equivalent('11010011',65)==4\n    odd_Equivalent('11010011',66)==5\n    odd_Equivalent('11010011',67)==3\n    odd_Equivalent('11010011',68)==2\n    odd_Equivalent('11010011',69)==1\n    odd_Equivalent('11010011',70)==0\n    odd_Equivalent('11010011',71)==4\n    odd_Equivalent('11010011',72)==2\n    odd_Equivalent('11010011',73)==3\n    odd_Equivalent('11010011',74)==4\n    odd_Equivalent('11010011',75)==5\n    odd_Equivalent('11010011',76)==3\n    odd_Equivalent('11010011',77)==2\n    odd_Equivalent('11010011',78)==1\n    odd_Equivalent('11010011',79)==0\n    odd_Equivalent('11010011',80)==4\n    odd_Equivalent('11010011',81)==2\n    odd_Equivalent('11010011',82)==3\n    odd_Equivalent('11010011',83)==4\n    odd_Equivalent('11010011',84)==5\n    odd_Equivalent('11010011',85)==3\n    odd_Equivalent('11010011',86)==2\n    odd_Equivalent('11010011',87)==1\n    odd_Equivalent('11010011',88)==0\n    odd_Equivalent('11010011',89)==4\n    odd_Equivalent('11010011',90)==2\n    odd_Equivalent('11010011',91)==3\n    odd_Equivalent('11010011',92)==4\n    odd_Equivalent('11010011',93)==5\n    odd_Equivalent('11010011',94)==3\n    odd_Equivalent('11010011',95)==2\n    odd_Equivalent('11010011',96)==1\n    odd_Equivalent('11010011',97)==0\n    odd_Equivalent('11010011',98)==4\n    odd_Equivalent('11010011',99)==2\n    odd_Equivalent('11010011',100)==3\n    odd_Equivalent('11010011',101)==4\n    odd_Equivalent('11010011',102)==5\n    odd_Equivalent('11010011',103)==3\n    odd_Equivalent('11010011',104)==2\n    odd_Equivalent('11010011',105)==1\n    odd_Equivalent('11010011',106)==0\n    odd_Equivalent('11010011',107)==4\n    odd_Equivalent('11010011',108)==2\n    odd_Equivalent('11010011',109)==3\n    odd_Equivalent('11010011',110)==4\n    odd_Equivalent('11010011',111)==5\n    odd_Equivalent('11010011',112)==3\n    odd_Equivalent('11010011',113)==2\n    odd_Equivalent('11010011',114)==1\n    odd_Equivalent('11010011',115)==0\n    odd_Equivalent('11010011',116)==4\n    odd_Equivalent('11010011',117)==2\n    odd_Equivalent('11010011',118)==3\n    odd_Equivalent('11010011',119)==4\n    odd_Equivalent('11010011',120)==5\n    odd_Equivalent('11010011',121)==3\n    odd_Equivalent('11010011',122)==2\n    odd_Equivalent('11010011',123)==1\n    odd_Equivalent('11010011',124)==0\n    odd_Equivalent('11010011',125)==4\n    odd_Equivalent('11010011',126)==2\n    odd_Equivalent('11010011',127)==3\n    odd_Equivalent('11010011',128)==4\n    odd_Equivalent('11010011',129)==5\n    odd_Equivalent('11010011',130)==3\n    odd_Equivalent('11010011',131)==2\n    odd_Equivalent('11010011',132)==1\n    odd_Equivalent('11010011',133)==0\n    odd_Eq"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    }
]