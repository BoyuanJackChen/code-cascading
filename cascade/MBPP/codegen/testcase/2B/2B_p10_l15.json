[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert similar_elements(([1, 2, 3], [4, 5, 6]), ([1, 2, 3], [6, 7, 8]))\nassert not similar_elements(([1, 2, 3], [4, 5, 6]), ([2, 3, 4], [4, 5, 6]))\nassert similar_elements(([1, 2, 3], [4, 5, 6]), ([1, 2, 3], [7, 8, 9]))\nassert not similar_elements(([1, 2, 3], [4, 5, 6]), ([2, 3, 4], [4, 6, 7]))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements([1, 1], [1, 2])    ==    False, \"List1\"\nassert     similar_elements([2, 1], [1, 2])    ==    True, \"List2\"\nassert     similar_elements([1, 2], [1, 2])    ==    True, \"List3\"\nassert     similar_elements([2, 2], [1, 2])    ==    False, \"List4\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert similar_elements([1,2,3,4], [1,2,3,5]) == [1,2,3]\nassert similar_elements([1,2,3,4,5], [1,2,3,5]) == []\nassert similar_elements([1,2,3,4,5], [1,3,5]) == [1,2,3]\nassert similar_elements([1,2,3,4,5], [1,2,5]) == [1,2,3]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert similar_elements([1,2,3], [3,2,1]) == 1\nassert similar_elements([1,2,3], [2,2,2]) == 2\nassert similar_elements([1,2,3,4], [3,2,1]) == 1\nassert similar_elements([1,2,3,4], [2,2,2]) == 3\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements(('apple', 'pear'), ('orange', 'pineapple')) == True\nassert     similar_elements(('apple', 'pear'), ('pineapple', 'orange')) == False\nassert     similar_elements(('apple', 'pear', 'banana', 'cherry'), ('orange', 'pineapple', 'apple', 'cherry')) == False\nassert     similar_elements(('apple', 'pear', 'banana', 'cherry'), ('orange', 'pineapple', 'cherry', 'pear')) == True\nassert     similar_elements(('apple', 'pear', 'banana', 'cherry'), ('orange', 'pineapple', 'cherry', 'pear', 'banana')) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         similar_elements(('a', 'b'), ('a', 'c')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'd')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'e')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'f')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'g')) == 'a'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements((1, 2, 3), (1, 2, 3)) == (1, 2)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4, 5, 6)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4, 5, 6, 7)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (similar_elements((1, 2, 3), (2, 3, 4)) == (2, 3)), \"Should be (2, 3)\"\nassert     (similar_elements((1, 2, 3), (4, 4, 4)) == ()), \"Should be empty\"\nassert     (similar_elements((1, 2, 3), (5, 5, 5)) == (5, )), \"Should be (5, )\"\nassert     (similar_elements((1, 2, 3), (1, 1, 1)) == (1, 1)), \"Should be (1, 1)\"\nassert     (similar_elements((1, 2, 3), (1, 1, 2)) == (1, 1, 2)), \"Should be (1, 1, 2)\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements([\"a\",\"b\",\"c\"], [\"b\",\"c\",\"d\"]) == [\"b\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"b\",\"c\",\"a\"]) == [\"a\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"b\",\"c\",\"a\",\"d\"]) == [\"b\",\"c\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"a\",\"b\",\"c\",\"d\"]) == [\"a\",\"b\",\"c\"]\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_not_prime(7) == True\nassert     is_not_prime(6) == False\nassert     is_not_prime(13) == True\nassert     is_not_prime(14) == False\nassert     is_not_prime(10) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_not_prime(2) == True\nassert is_not_prime(3) == False\nassert is_not_prime(4) == False\nassert is_not_prime(5) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef all_are_primes(a,b,c):\n    '''\n    Write a python function to check if three numbers a,b,c are all prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(5) == False\nassert     is_not_prime(6) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(1) == True\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == True\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_not_prime(2) == True\nis_not_prime(1) == False\nis_not_prime(4) == True\nis_not_prime(6) == True\nis_not_prime(11) == True\nis_not_prime(15) == True\nis_not_prime(20) == False\nis_not_prime(1) == False\nis_not_prime(8) == True\nis_not_prime(10) == False\nis_not_prime(23) == False\nis_not_prime(24) == True\nis_not_prime(25) == False\nis_not_prime(26) == True\nis_not_prime(27) == True\nis_not_prime(28) == False\nis_not_prime(29) == False\nis_not_prime(30) == False\nis_not_prime(31) == False\nis_not_prime(32) == False\nis_not_prime(33) == False\nis_not_prime(34) == True\nis_not_prime(35) == True\nis_not_prime(36) == False\nis_not_prime(37) == False\nis_not_prime(38) == True\nis_not_prime(39) == True\nis_not_prime(40) == True\nis_not_prime(41) == True\nis_not_prime(42) == True\nis_not_prime(43) == False\nis_not_prime(44) == False\nis_not_prime(45) == False\nis_not_prime(46) == True\nis_not_prime(47) == False\nis_not_prime(48) == True\nis_not_prime(49) == True\nis_not_prime(50) == True\nis_not_prime(51) == True\nis_not_prime(52) == True\nis_not_prime(53) == True\nis_not_prime(54) == False\nis_not_prime(55) == False\nis_not_prime(56) == False\nis_not_prime(57) == False\nis_not_prime(58) == True\nis_not_prime(59) == True\nis_not_prime(60) == False\nis_not_prime(61) == True\nis_not_prime(62) == True\nis_not_prime(63) == True\nis_not_prime(64) == False\nis_not_prime(65) == True\nis_not_prime(66) == False\nis_not_prime(67) == False\nis_not_prime(68) == True\nis_not_prime(69) == True\nis_not_prime(70) == True\nis_not_prime(71) == True\nis_not_prime(72) == True\nis_not_prime(73) == True\nis_not_prime(74) == True\nis_not_prime(75) == True\nis_not_prime(76) == False\nis_not_prime(77) == True\nis_not_prime(78) == False\nis_not_prime(79) == False\nis_not_prime(80) == True\nis_not_prime(81) == True\nis_not_prime(82) == False\nis_not_prime(83) == True\nis_not_prime(84) == True\nis_not_prime(85) == True\nis_not_prime(86) == False\nis_not_prime(87) == True\nis_not_prime(88) == False\nis_not_prime(89) == False\nis_not_prime(90) == False\nis_not_prime(91) == False\nis_not_prime(92) == True\nis_not_prime(93) == True\nis_not_prime(94) == False\nis_not_prime(95) == False\nis_not_prime(96) == True\nis_not_prime(97) == True\nis_not_prime(98) == False\nis_not_prime(99) == True\nis_not_prime(100) == True\nis_not_prime(101) == True\nis_not_prime(102) == False\nis_not_prime(103) == False\nis_not_prime(104) == True\nis_not_prime(105) == True\nis_not_prime(106) == False\nis_not_prime(107) == False\nis_not_prime(108) == True\nis_not_prime(109) == True\nis_not_prime(110) == True\nis_not_prime(111) == True\nis_not_prime(112) == True\nis_not_prime(113) == False\nis_not_prime(114) == False\nis_not_prime(115) == False\nis_not_prime(116) == True\nis_not_prime(117) == True\nis_not_prime(118) == True\nis_not_prime(119) == True\nis_not_prime(120) == True\nis_not_prime(121) == True\nis_not_prime(122) == False\nis_not_prime(123) == False\nis_not_prime(124) == False\nis_not_prime(125) == True\nis_not_prime(126) == True\nis_not_prime(127) == True\nis_not_prime(128) == False\nis_not_prime(129) == False\nis_not_prime(130) == False\nis_not_prime(131) == True\nis_not_prime(132) == True\nis_not_prime(133) == False\nis_not_prime(134) == True\nis_not_prime(135) == True\nis_not_prime(136) == True\nis_not_prime(137) == False\nis_not_prime(138) == False\nis_not_prime(139) == True\nis_not_prime(140) == False\nis_not_prime(141) == True\nis_not_prime(142) == True\nis_not_prime(143) == True\nis_not_prime(144) == True\nis_not_prime(145) == True\nis_not_prime(146) == True\nis_not_prime(147) == True\nis_not_prime(148) == True\nis_not_prime(149) == True\nis_not_prime(150) == True\nis_not_prime(151) == True\nis_not_prime(152) == True\nis_not_prime(153) == True\nis_not_prime(154) == True\nis_not_prime(155) == False\nis_not_prime(156) == False\nis_not_prime(157) == False\nis_not_prime(158) == True\nis_not_prime(159) == True\nis_not_prime(160) == False\nis_not_prime(161) == False\nis_not_prime(162) == True\nis_not_prime(163) == False\nis_not_prime(164) == True\nis_not_prime(165) == True\nis_not_prime(166) == True\nis_not_prime(167) == True\nis_not_prime(168) == True\nis_not_prime(169) == True\nis_not_prime(170) == True\nis_not_prime(171) == True\nis_not_prime(172) == True\nis_not_prime(173) == True\nis_not_prime(174) == True\nis_not_prime(175) == True\nis_not_prime(176) == False\nis_not_prime(177) == True\nis_not_prime(178) == True\nis_not_prime(179) == True\nis_not_prime(180) == True\nis_not_prime(181) == False\nis_not_prime(182) == False\nis_not_prime(183) == True\nis_not_prime(184) == False\nis_not_prime(185) == False\nis_not_prime(186) == True\nis_not_prime(187) == True\nis_not_prime(188) == True\nis_not_prime(189) == True\nis_not_prime(190) == True\nis_not_prime(191) == False\nis_not_prime(192) == False\nis_not_prime(193) == False\nis_not_prim"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 3) == [-6, 5, 4, 3, 3, 3, 4, 5]\nassert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 3) == [-6, 5, 4, 3, 3, 3, 4, 5]\nassert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 1) == [-6]\nassert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 5) == [-6, -2, -1, 1, 2, 3]\nassert     heap_queue_largest([-1, 3, 10, 20, 1, 1, 1, 1, 1], 2) == [-1, -1, 1, 1, 3, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([4,5,2,3],1) == [5,4,3,2]\nassert     heap_queue_largest([4,5,2,3],2) == [5,4,3]\nassert     heap_queue_largest([4,5,2,3],3) == [5,4,3]\nassert     heap_queue_largest([4,5,2,3],4) == [5,4,3]\nassert     heap_queue_largest([4,5,2,3],5) == [5,4,3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_queue_largest([],3) == []\nassert     heap_queue_largest([1, 2, 3, 4, 5], 1) == [5]\nassert     heap_queue_largest([-1, 3, 4, 3, 3, -1, -2], 3) == [-2, -1, 3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([7,3,5,2,6,8,11],4) ==    [11, 8, 6, 5]\nassert     heap_queue_largest([-5,5,-3,-2,0,4,8],2) ==    [0,4,8]\nassert     heap_queue_largest([6,5,4,3,2,1],2) ==    [6,5]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9,10],1) ==    [10]\n\ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([-5,2,4,3,0,5],2) == [4,-5,5,3,2,0]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],7) == [9,8,7,6,5,4,3,2,1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert heap_queue_largest([1,2,3,4,5],3)==[5,4,3]\nassert heap_queue_largest([1,2,3,4,5],2)==[5,4]\nassert heap_queue_largest([1,2,3,4,5],1)==[4]\nassert heap_queue_largest([1,2,3,4,5],0)==[1,2,3,4,5]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert [7,9,2,3,1,4] == heap_queue_largest([],1)\nassert [] == heap_queue_largest([],2)\nassert [] == heap_queue_largest([],4)\nassert [] == heap_queue_largest([1],1)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([1, 2, 3], 3) == [3, 2, 1]\nassert     heap_queue_largest([4, 2, 3, 1], 4) == [4, 3, 2, 1]\nassert     heap_queue_largest([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert     heap_queue_largest([], 3) == []\nassert     heap_queue_largest([1, 1, 1], 2) == [1, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef heap_queue_largest_optimized(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Hint: heapq.nlargest(k, iterable)\n    '''\n    return hq.nlargest(n, nums)"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(4) == False, 'First'\nassert     is_Power_Of_Two(8) == True, 'Second'\nassert     is_Power_Of_Two(32) == True, 'Third'\nassert     is_Power_Of_Two(40) == False, 'Fourth'\nassert     is_Power_Of_Two(31) == False, 'Fifth'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(0) == False, \"The expected value should be False\"\nassert is_Power_Of_Two(1) == False, \"The expected value should be False\"\nassert is_Power_Of_Two(5) == True, \"The expected value should be True\"\nassert is_Power_Of_Two(5) == False, \"The expected value should be False\"\nassert is_Power_Of_Two(10) == True, \"The expected value should be True\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two(1) == False, \"First Test Case is Wrong\"\nassert     is_Power_Of_Two(2) == True, \"Second Test Case is Wrong\"\nassert     is_Power_Of_Two(16) == True, \"Third Test Case is Wrong\"\nassert     is_Power_Of_Two(32) == False, \"Fourth Test Case is Wrong\"\nassert     is_Power_Of_Two(2**9) == True, \"Fifth Test Case is Wrong\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(2) == False, \"2 is not a Power of 2\"\nassert     is_Power_Of_Two(8) == True, \"8 is a Power of 2\"\nassert     is_Power_Of_Two(10) == False, \"10 is not a Power of 2\"\nassert     is_Power_Of_Two(256) == True, \"256 is a Power of 2\"\n\nprint(is_Power_Of_Two.__doc__"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"Pass\" if (is_Power_Of_Two(256)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(128)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(0)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(32)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(64)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(128)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(256)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(512)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1024)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3072)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4096)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8192)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16384)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(32768)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(65536)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(131072)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(262144)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(524288)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1048576)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2097152)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4194304)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8388608)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16777216)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(33554432)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(67108864)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(134217728)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(268435456)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(536870912)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1073741824)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2147483648)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4294967296)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8589934592)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(17179869184)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(35184372088)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(703687441776)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1454839051520)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3355443325328)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(65536)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(0)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-16)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-2048)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(8) == True, 'Your function is not correct.\\nInput: 8\\nOutput: True'\nassert     is_Power_Of_Two(8) == False, 'Your function is not correct.\\nInput: 8\\nOutput: False'\nassert     is_Power_Of_Two(2) == True, 'Your function is not correct.\\nInput: 2\\nOutput: True'\nassert     is_Power_Of_Two(2) == False, 'Your function is not correct.\\nInput: 2\\nOutput: False'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long('Hi there!') == ['Hi']\nassert     find_char_long('Hi there! Hi there!') == ['Hi']\nassert     find_char_long('Hi there! Hi there! Hi there! Hi there!') == ['Hi']\nassert     find_char_long('I have a cat! I have a cat! I have a cat! I have a cat! I have a cat!') == ['I', 'have']\nassert     find_char_long('I have a cat! I have a cat! I have a cat! I have a cat! I have a cat! I have a cat! I have a cat! I have a cat!') == ['I', 'have']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('heLlo') == True, \"Should return True\"\nassert     find_char_long('HeLLo') == False, \"Should return False\"\nassert     find_char_long('hello') == True, \"Should return True\"\nassert     find_char_long('one') == False, \"Should return False\"\nassert     find_char_long('') == False, \"Should return False\"\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('hello') == '', 'The first one is correct!'\nassert     find_char_long('hellom') == '', 'The second one is correct!'\nassert     find_char_long('hell') == '', 'The third one is correct!'\nassert     find_char_long('hello') == 'hello', 'The fourth one is correct!'\nassert     find_char_long('hello!') == 'hello!', 'The fifth one is correct!'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long('the quick brown fox jumps') == ['brown', 'fox', 'jumps'], find_char_long('the quick brown fox jumps')\nassert     find_char_long('a fox jumped over a lazy dog') == ['fox', 'dog'], find_char_long('a fox jumped over a lazy dog')\nassert     find_char_long('goofy came to earth from the moon') == ['moon'], find_char_long('goofy came to earth from the moon')\nassert     find_char_long('the quick brown fox jumps') == ['fox'], find_char_long('the quick brown fox jumps')\nassert     find_char_long('I\\'m a boy') == ['boy'], find_char_long('I\\'m a boy')\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\n\nprint(find_char_long(text))\nassert find_char_long(text) == ['Python', 'is', 'an', 'interpreted', 'high-level', 'general-purpose', 'programming', 'language', '.']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('hello') == ['hello']\nassert     find_char_long('the cat is on the mat') == ['cat', 'the']\nassert     find_char_long('dogs are the best') == ['dogs', 'are', 'the']\nassert     find_char_long('are you big?') == ['are', 'you', 'big?']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntext = \"I could travel anywhere, but I am tired.\"\nassert find_char_long(text) == [\"I\", \"am\", \"tired\"]"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long(\"This is an example of a test case\") == ['an', 'test', 'case']\nassert     find_char_long(\"This is an example of a test case\") == []\nassert     find_char_long(\"This is an example of a test case\") ==     ['case']\n\ndef find_word(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntext = \"this is a test text.\"\nprint(find_char_long(text))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([1,2,3,4]) == [1,4,9,16], \\\n        \"Wrong result for square_nums([1,2,3,4]): {}\".format(square_nums([1,2,3,4]))\nassert     square_nums([0,3,4]) == [0,9,16], \\\n        \"Wrong result for square_nums([0,3,4]): {}\".format(square_nums([0,3,4]))"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1, 2, 3]) == [1, 4, 9]\nassert square_nums([1, 2, 3]) == [1, 4, 9]\nassert square_nums([-1, -2, -3]) == [-1, -4, -9]\nassert square_nums([]) == []\nassert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([1, 4, 9]) == [1, 4, 81]\nassert     square_nums([-4, -9, -16, -25]) == [-4, -9, -256, -625]\nassert     square_nums([-1, -4, -9, -16, -25]) == [-1, -4, -9, -256, -625]\n\n\ndef sum_squares(nums):\n    '''\n    Write a function to find the sum of the squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_nums([1,2,3,4,5]) == [1,4,9,16,25]\nassert square_nums([2,4,6,8,10]) == [4,16,36,64,100]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a function to find the multiplication of individual elements in a list.\n'''\ndef multiply(nums):\n    '''\n    Write a function to find the multiplication of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_nums([4,9,16]) == [16, 81, 256], 'failed'\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef square_nums_more(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_nums([2, 3, 5, 7, 11]) == [4, 9, 49, 121, 289], \"Square\"\nassert square_nums([]) == [], \"Empty list\"\nassert square_nums([0]) == [0], \"Zero\"\nassert square_nums([1, 2]) == [1, 4], \"Two\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([1,2,3]) == [1,4,9]\nassert square_nums([]) == []\nassert square_nums([1]) == [1]"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations('cw') == 1, 'Should return 1'\nassert     find_Rotations('fdddddfdddddddf') == 5, 'Should return 5'\nassert     find_Rotations('abcd') == 0, 'Should return 0'\nassert     find_Rotations('ghghgh') == 1, 'Should return 1'\nassert     find_Rotations('yby') == 1, 'Should return 1'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations(\"baa\") == 1\nassert     find_Rotations(\"baab\") == 2\nassert     find_Rotations(\"baabb\") == 3\nassert     find_Rotations(\"baaaba\") == 4\nassert     find_Rotations(\"baaabbb\") == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\"abc\") == 2\nassert     find_Rotations(\"abc\") == 1\nassert     find_Rotations(\"abc\") == 0\nassert     find_Rotations(\"a\") == 0\nassert     find_Rotations(\"ab\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"MKYI\") == 1\nassert     find_Rotations(\"MKYI\") == 2\nassert     find_Rotations(\"MKYI\") == 3\nassert     find_Rotations(\"MKYI\") == 4\nassert     find_Rotations(\"MKYI\") == 5\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"abcd\") == 0, \"Incorrect output\"\nassert     find_Rotations(\"abcdabcd\") == 1, \"Incorrect output\"\nassert     find_Rotations(\"aba\") == 2, \"Incorrect output\"\nassert     find_Rotations(\"\") == 0, \"Incorrect output\"\nassert     find_Rotations(\"dvdf\") == 0, \"Incorrect output\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations('abc') == 2\nassert     find_Rotations('acb') == 3\nassert     find_Rotations('aabc') == 5\nassert     find_Rotations('abcabc') == 3\n\ndef find_Rotations2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ(\"apples\", \"a\") == \"apples\"\nassert     remove_Occ(\"apples\", \"p\") == \"apples\"\nassert     remove_Occ(\"apples\", \"s\") == \"apples\"\nassert     remove_Occ(\"apples\", \"a\") == \"apples\"\nassert     remove_Occ(\"apples\", \"e\") == \"apples\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ(\"mango\",\"m\") == \"gango\"\nassert     remove_Occ(\"mango\",\"n\") == \"mango\"\nassert     remove_Occ(\"mango\",\"c\") == \"mango\"\nassert     remove_Occ(\"mango\",\"g\") == \"mango\"\nassert     remove_Occ(\"mango\",\"a\") == \"mango\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ('demo', 'x') == 'dme'\nassert     remove_Occ('demo', 'd') =='me'\nassert     remove_Occ('demo','m') == 'd'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_Occ('areweare', 'e') == 'arewe'\nassert\nremove_Occ('areweare', 'are') == 'arewe'\nassert \nremove_Occ('areweare', 'are') =='reweare'\nassert \nremove_Occ('areweare', 'were') == 'areweare'\nassert \nremove_Occ('areweare', 'we') == 'areweare'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_Occ('Cwxyz', 'w') == 'Czxz'\nremove_Occ('wqwrwwqwrww', 'q') == 'wrwwwwqwrww'\nremove_Occ('aabccc', 'b') == 'aabccc'\n\ndef Occ_2(s):\n    '''\n    Write a python function to count the number of characters (including whitespaces) in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ('abcd', 'b') == 'abcd', 'Should return the string without b and the last element'\nassert     remove_Occ('abcd', 'a') == 'abcd', 'Should return the string without a and the first element'\nassert     remove_Occ('abcd', 'z') == 'abcd', 'Should return the string without z and the first and last elements'\n\n\n\ndef merge_sort(arr, l, r):\n    '''\n    Write a python function to sort an array by merge sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sort_matrix_using_divide_conquer(M):\n    if len(M) == 0:\n        return M\n    else:\n        mid = len(M) // 2\n        return sorted(sorted(M[:mid], key=lambda x: x[0]), key=lambda x: x[1], reverse=True) + sort_matrix_using_divide_conquer(M[mid:])\n\ndef is_valid_matrix(m):\n    if len(m) == 0:\n        return False\n    else:\n        for row in m:\n            if len(row)!= len(m[0]):\n                return False\n            else:\n                if min(row) < 0:\n                    return False\n        return True\n\ndef square_matrix_sum(m):\n    if is_valid_matrix(m):\n        return sum(row[0] for row in m)\n    else:\n        return 0\n\ndef square_matrix_max_sum(m):\n    if is_valid_matrix(m):\n        return max(sum(row) for row in m)\n    else:\n        return 0\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([\n            [1, 5, 8],\n            [10, 13, 21],\n            [12, 17, 20],\n        ]) == [[1, 5, 8], [10, 13, 21], [12, 17, 20]]\nassert     sort_matrix([\n            [1, 3, 5, 7, 9],\n            [2, 4, 6, 8, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25],\n        ]) == [[1, 2, 3, 4, 5], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [1, 3, 5, 7, 9]]\n\ndef merge_sort(A, p, r):\n    '''\n    Write a function to sort the array A in ascending order using merge sort.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]])\nprint(sort_matrix([[1,4,2],[3,5,7],[2,2,1]]) == [[1,2,2],[2,2,1],[3,5,7]])\nprint(sort_matrix([[1,1,1],[1,1,1],[1,1,1]]) == [[1,1,1],[1,1,1],[1,1,1]])\nprint(sort_matrix([[1,1,1],[2,2,2],[3,3,3]]) == [[1,1,1],[2,2,2],[3,3,3]])\n\nprint('\\n')\n\n\ndef sort_matrix_2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([[1,2,3],\n                        [4,5,6],\n                        [7,8,9]]) == [[1,2,3],\n                                    [7,4,5],\n                                    [6,8,9]]\nassert     sort_matrix([[1,2,3],\n                        [4,5,6],\n                        [4,5,6]]) == [[1,2,3],\n                                    [4,4,5],\n                                    [6,6,6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[1, 2, 3, 4, 5],\n                        [7, 8, 9, 10, 11],\n                        [13, 14, 15, 16, 17],\n                        [19, 20, 21, 22, 23]]) == [[1, 2, 3, 4, 5],\n                                                [13, 14, 15, 16, 17],\n                                                [7, 8, 9, 10, 11],\n                                                [19, 20, 21, 22, 23]]\n\nassert     sort_matrix([[1, 2, 3],\n                        [7, 8, 9],\n                        [13, 14, 15]]) == [[1, 2, 3],\n                                        [13, 14, 15],\n                                        [7, 8, 9]]\n\nassert     sort_matrix([[1, 2, 3, 4],\n                        [5, 6, 7, 8],\n                        [9, 10, 11, 12],\n                        [13, 14, 15, 16]]) == [[1, 2, 3, 4],\n                                            [5, 6, 7, 8],\n                                            [9, 10, 11, 12],\n                                            [13, 14, 15, 16]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nM = [[1, 3, -1, 4], \n    [2, 4, 1, 5], \n    [-1, 2, 2, 1]]\nprint(sort_matrix(M))\n\n\n'''\nThe official solution:\n\nfrom functools import reduce\ndef sort_matrix(A):\n    return sorted(A, key=lambda r: sum(r))\n''"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([\n        [1, 3, 5],\n        [4, 5, 6],\n        [8, 9, 11],\n    ]) == [[1, 3, 5], [4, 5, 6], [8, 9, 11]]\nassert     sort_matrix([\n        [1, 4, 2],\n        [3, 5, 6],\n        [7, 8, 9],\n    ]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     sort_matrix([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     sort_matrix([\n        [1, 4],\n        [2, 5],\n        [3, 6],\n    ]) == [[1, 2, 3], [4, 5, 6]]\nassert     sort_matrix([\n        [1, 4, 2],\n        [3, 5, 6],\n        [7, 8, 9],\n    ]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[3,4,1,2],[1,6,2,2],[5,7,2,4],[3,5,4,7]]) == [[3,4,1,2],[1,6,2,2],[5,7,2,4],[3,5,4,7]]\nassert     sort_matrix([[2,7,8,3],[3,5,1,7],[1,4,6,8]]) == [[1,4,6,8],[2,7,3,5],[3,5,7,8]]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(2,3,4) == 20\nassert     find_Volume(10,7,3) == 105\nassert     find_Volume(4,2,5) == 10"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume(1.0, 1.0, 1.0) == 1.0, \"The output is incorrect\"\nassert     find_Volume(3.0, 2.0, 3.0) == 12.0, \"The output is incorrect\"\nassert     find_Volume(2.0, 4.0, 3.0) == 22.0, \"The output is incorrect\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume(5,10,15) == 120\nassert    find_Volume(8,20,15) == 80\nassert    find_Volume(5,10,20) == 200\nassert    find_Volume(9,20,20) == 400\nassert    find_Volume(5,10,10) == 50\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(3,4,5) == 35 \nassert     find_Volume(0,4,5) == 0 \nassert     find_Volume(1,2,3) == 6 \nassert     find_Volume(1,1,1) == 1 \nassert     find_Volume(5,5,5) == 50 \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(1,2,3) == 6\nassert    find_Volume(5,10,12) == 25\nassert    find_Volume(8,3,6) == 20\nassert    find_Volume(5,2,6) == 25\nassert    find_Volume(6,3,5) == 20\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(6,8,10) == 90, 'volume = 90'\nassert     find_Volume(10,12,8) == 120, 'volume = 120'\nassert     find_Volume(2,2,5) == 10, 'volume = 10'\nassert     find_Volume(8,6,12) == 80, 'volume = 80'\nassert     find_Volume(3,4,9) == 27, 'volume = 27'\nprint('All test cases passed'"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nl = 1.0\nb = 3.0\nh = 2.0\n\nvol = find_Volume(l, b, h)\nassert vol == 4.0\n\n\nl = 1.5\nb = 2.5\nh = 4.0\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume([2.0,3.0,4.0],[2.0,3.0,4.0])==9.0, \"incorrect\"\nassert     find_Volume([1.0,2.0,3.0],[1.0,2.0,3.0])==6.0, \"incorrect\"\nassert     find_Volume([2.0,3.0,4.0],[2.0,3.0,4.0])==9.0, \"incorrect\"\nassert     find_Volume([2.0,3.0,4.0],[3.0,4.0,5.0])==16.0, \"incorrect\"\nassert     find_Volume([2.0,3.0,4.0],[3.0,4.0,5.0])==16.0, \"incorrect\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(4,4,8) == 48\nassert     find_Volume(4,7,9) == 84\nassert     find_Volume(2,4,6) == 12\nassert     find_Volume(4,8,7) == 70\nassert     find_Volume(5,6,9) == 27\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore('a_b_c_d') == True\nassert     text_lowercase_underscore('A1B2C3D4') == False\nassert     text_lowercase_underscore('1_1_1_1') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('hello_my_friend') == True, 'The input should be true'\nassert     text_lowercase_underscore('one_more_time_and_again') == True, 'The input should be true'\nassert     text_lowercase_underscore('hello_world') == False, 'The input should be false'\nassert     text_lowercase_underscore('hello') == False, 'The input should be false'\nassert     text_lowercase_underscore('one_more_time') == False, 'The input should be false'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('hello') == True, \\\n        \"incorrect result for text_lowercase_underscore('hello')\"\n\nassert     text_lowercase_underscore('hello_world') == False, \\\n        \"incorrect result for text_lowercase_underscore('hello_world')\"\n\nassert     text_lowercase_underscore('hello_World') == False, \\\n        \"incorrect result for text_lowercase_underscore('hello_World')\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('This is a test.') == False\nassert     text_lowercase_underscore('This Is A Test') == True\nassert     text_lowercase_underscore('this_is_a_test') == False\nassert     text_lowercase_underscore('This_is_a_test') == True\nassert     text_lowercase_underscore('This_is_a_Test') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('a lowercase') == True\nassert     text_lowercase_underscore('x lowercase') == False\nassert     text_lowercase_underscore('A lowercase') == True\nassert     text_lowercase_underscore('Uppercase') == False\nassert     text_lowercase_underscore('An Uppercase') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('a1b2_c3')     == True\nassert     text_lowercase_underscore('a1b2_C3')     == False\nassert     text_lowercase_underscore('_1b2_C3')     == False\nassert     text_lowercase_underscore('_1_b2_C3')     == False\nassert     text_lowercase_underscore('_1_b2_C_3')     == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"--abc_123\") == True\nassert     text_lowercase_underscore(\"_abc_123\") == True\nassert     text_lowercase_underscore(\"--a_c_d_e\") == True\nassert     text_lowercase_underscore(\"a_bc_def\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore(\"if_fun_xyz\") == True\nassert text_lowercase_underscore(\"if_fun_xyz\") == False\nassert     text_lowercase_underscore(\"if_fun_xyz\") == False\nassert text_lowercase_underscore(\"if_fun_xyz\") == False\nassert     text_lowercase_underscore(\"if_fun_xyz\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore(\"apple_and_banana\") == True, 'apple_and_banana should be true'\nassert     text_lowercase_underscore(\"Apenka-a-fez\") == False, 'Apenka-a-fez should be false'\nassert     text_lowercase_underscore(\"appleAndBanana\") == False, 'appleAndBanana should be false'\nassert     text_lowercase_underscore(\"apple_Apenka_a_fez\") == True, 'apple_Apenka_a_fez should be true'\nassert     text_lowercase_underscore(\"appleAnd\") == True, 'appleAnd should be true'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore(\"Example_With_underscores\") == True\nassert     text_lowercase_underscore(\"Example_With_Hyphens\") == True\nassert     text_lowercase_underscore(\"Example_With_Underscores\") == False\nassert     text_lowercase_underscore(\"Example_With_Underscores_\") == True\nassert     text_lowercase_underscore(\"Example_With_Underscores_and\") == True\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert square_perimeter(1) == 4\nassert square_perimeter(2) == 6\nassert square_perimeter(3) == 8\n\ndef calc_square_area(a):\n    '''\n    Write a function that calculates the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(1) == 1\nassert square_perimeter(2) == 4\nassert square_perimeter(10) == 28\nassert square_perimeter(100) == 3200\nassert square_perimeter(1000) == 320000\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_area(a):\n    '''\n    Write a function that takes a float value (a) as input and returns the area of the square.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_perimeter(1) == 4\nassert square_perimeter(2) == 8\nassert square_perimeter(3) == 18\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert square_perimeter(2) == 4\nassert square_perimeter(3) == 6\nassert square_perimeter(4) == 8\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\n\n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list(\"geeksforgeeks\",\"fgeeks\") == \"kfgeks\"\nassert    str_to_list(\"geeksforgeeks\",\"kgeeks\") == \"geeksforgeeks\"\nassert    str_to_list(\"geeksforgeeks\",\"geeks\") == \"gks\"\nassert    str_to_list(\"geeksforgeeks\",\"gek\") == \"gek\"\nassert    str_to_list(\"geeksforgeeks\",\"gef\") == \"gk\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert str_to_list('pynative', 'ive') == 'native', \"Failed\"\nassert str_to_list('w3resource', 'wef') == 'w3resouce', \"Failed\"\nassert str_to_list('I love Python', 'Python') == 'I l', \"Failed\"\nassert str_to_list('pynative', 'Python') == '', \"Failed\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef all_unique_characters(string):\n    '''\n    Write a function to check whether the characters of a string are all unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    string_1 = \"aaca\"\n    string_2 = \"aaca\"\n    string_3 = \"a\"\n    string_4 = \"b\"\n    print(f\"str_to_list(string_1) = {str_to_list(string_1)}\")\n    print(f\"str_to_list(string_2) = {str_to_list(string_2)}\")\n    print(f\"str_to_list(string_3) = {str_to_list(string_3)}\")\n    print(f\"str_to_list(string_4) = {str_to_list(string_4)}\")\n\n    print(f\"str_to_list(string_1) == str_to_list(string_1) = {str_to_list(string_1) == str_to_list(string_1)}\")\n    print(f\"str_to_list(string_2) == str_to_list(string_2) = {str_to_list(string_2) == str_to_list(string_2)}\")\n    print(f\"str_to_list(string_3) == str_to_list(string_3) = {str_to_list(string_3) == str_to_list(string_3)}\")\n    print(f\"str_to_list(string_4) == str_to_list(string_4) = {str_to_list(string_4) == str_to_list(string_4)}\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert str_to_list('xyz') == ['z', 'y', 'x']\nassert str_to_list('xy') == ['x', 'y']\nassert str_to_list('yz') == ['y', 'z']\nassert str_to_list('x') == ['x']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nstring = \"String to remove characters from\"\nlist = str_to_list(string)\nassert list == ['s', 't', 'r', 'i', 'n', 'g', 'o','', 'r', 'a', 'n', 'g', 't', 'i', 'n', 'g']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef common_characters(string_1,string_2):\n    '''\n    Write a function to get the characters in common between the strings.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     str_to_list(\"abcdabcde\") == [\"abcd\", \"abcde\"], \"Should return ['abcd', 'abcde']\"\nassert     str_to_list(\"kitten\") == [\"kit\", \"it\"], \"Should return ['kit', 'it']\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,3]) == True, 'Should return True'\nassert     test_duplicate([1,2,3,4]) == False, 'Should return False'\nassert     test_duplicate([1,1,3,3,3]) == True, 'Should return True'\nassert     test_duplicate([1,1,3,3,5]) == False, 'Should return False'\nassert     test_duplicate([1,2,3,4,5]) == True, 'Should return True'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_duplicate([1,2,3]) == True\nassert     test_duplicate([1,2,3,1]) == False\nassert     test_duplicate([1,2,3,4]) == True\nassert     test_duplicate([1,2,3,4,1]) == True\nassert     test_duplicate([1,2,3,4,1,2]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_duplicate([1,2,3,4,5,6]) == True, \"Checking for duplicate element\"\nassert     test_duplicate([2,2,3,4,5,6]) == False, \"Checking for duplicate element\"\nassert     test_duplicate([1,2,3,4,5,5]) == True, \"Checking for duplicate element\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('You should be able to run this test and pass all the tests.'"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_duplicate([1,1,2]) == True, \"1\"\nassert     test_duplicate([1,2,3]) == False, \"2\"\nassert     test_duplicate([1,1]) == True, \"3\"\nassert     test_duplicate([1,2,2,3]) == False, \"3\"\nassert     test_duplicate([1,2,3,3]) == True, \"4\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate([2,3,1,0,2,5,3]) == True, \\\n    \"This test function does not exist. Please refer to the provided code.\"\nassert     test_duplicate([2,3,1,0,2,5,3,5]) == False, \\\n    \"This test function does not exist. Please refer to the provided code.\""
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(56) == False, \"56 is not Woodall\"\nassert     is_woodall(1) == False, \"1 is not Woodall\"\nassert     is_woodall(1.2) == False, \"1.2 is not Woodall\"\nassert     is_woodall(True) == False, \"True is not Woodall\"\nassert     is_woodall(\"\") == False, \"\" is not Woodall\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_woodall(1)\nassert not is_woodall(2)\nassert not is_woodall(0)\nassert not is_woodall(0.001)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Pass\" if is_woodall(26) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(27) == True else \"Fail\")\nprint(\"Pass\" if is_woodall(18) == True else \"Fail\")\nprint(\"Pass\" if is_woodall(22) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(35) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(61) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(3) == False else \"Fail\")\n\n'''\nPrint the following output for each of the following input values to the function is_woodall().\n\nPass if the function returns False.\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n'''\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(1) == True, \"Should return True\"\nassert     is_woodall(5) == False, \"Should return False\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(False) == False, \\\n        \"is_woodall should return False for False\"\nassert     is_woodall(True) == True, \\\n        \"is_woodall should return True for True\"\nassert     is_woodall(None) == False, \\\n        \"is_woodall should return False for None\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('The output is correct')\nprint(is_woodall(5))\nprint(is_woodall(4))\n\n\n\ndef is_oak(x): \n    '''\n    Write a function to check if the given number is oak or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(1) == False, '1st number is not a woodball'\nassert     is_woodall(-1) == False, '-1st number is not a woodball'\nassert     is_woodall(3) == False, '3rd number is not a woodball'\nassert     is_woodall(0) == True, '0th number is a woodball'\nassert     is_woodall(1000000) == False, '1st 1000000th number is a woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \n\ndef is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2 or x == 3 or x == 5 or x == 6 or x == 8 or x == 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_woodall(5) == False, \"is_woodall should return False for numbers which are not even!\"\nassert     is_woodall(1) == False, \"is_woodall should return False for numbers which are even!\"\nassert     is_woodall(7) == True, \"is_woodall should return True for numbers which are even!\"\nassert     is_woodall(3) == False, \"is_woodall should return False for numbers which are odd!\"\nassert     is_woodall(13) == True, \"is_woodall should return True for numbers which are odd!\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if int(num[::-1]) == int(num)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(1) == 1, \"Mistake\"\nassert     rev(3) == 2, \"Mistake\"\nassert     rev(5) == 4, \"Mistake\"\nassert     rev(100) == 98, \"Mistake\"\nassert     rev(101) == 99, \"Mistake\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('\\n\\n')\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(1) == True\nassert rev(2) == False\nassert rev(1) == True\nassert rev(2) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(4) == 3\nassert     rev(5) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(7) == rev(9) == True \nassert rev(10) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(4) == True\nassert    rev(-2) == True\nassert    rev(7) == False\nassert    rev(-7) == False\n\ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    return (num * 2) >= abs(num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(7) == 8, '\\nTestcase failed: rev(7) should be 8 but is:'+ str(rev(7))\nassert     rev(9) == 6, '\\nTestcase failed: rev(9) should be 6 but is:'+ str(rev(9))\nassert     rev(11) == 10, '\\nTestcase failed: rev(11) should be 10 but is:'+ str(rev(11))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rev(123) == 321, \"Simple\"\n    assert rev(1234) == 4321, \"More\"\n    assert rev(12345) == 45321, \"Negative\"\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(2) == 1\nassert     rev(3) == 1\nassert     rev(5) == 2\nassert     rev(10) == 2\nassert     rev(17) == 2\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num([1,2,3,4,5]) == 5\nassert     find_Max_Num([1,2,3,4,4]) == 4\nassert     find_Max_Num([1,2,3,4,5,5]) == 5\nassert     find_Max_Num([1,2,3,4,4,4]) == 4\nassert     find_Max_Num([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Max_Num([2, 3, 1]) == 3\nassert     find_Max_Num([4, 5, 7]) == 7\nassert     find_Max_Num([8, 9, 2, 6]) == 9\nassert     find_Max_Num([2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([9, 8, 7, 6, 5, 4, 3, 2]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_Max_Num([]) == None \nfind_Max_Num([1]) == 1 \nfind_Max_Num([1,2,3,4,5,6,7,8,9]) == 9"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_Max_Num(arr):\n    # Your code here\n    arr.sort(reverse = True)\n    return int(''.join(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5]) == 5, \"Wrong Output\"\nassert     find_Max_Num([4, 5, 6, 7]) == 7, \"Wrong Output\"\nassert     find_Max_Num([1, 2, 3]) == 3, \"Wrong Output\"\nassert     find_Max_Num([4, 5]) == 5, \"Wrong Output\"\nassert     find_Max_Num([1]) == 1, \"Wrong Output\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Max_Num([2, 1, 3, 5, 6]) == 9, \"Test case 1 Failed\"\nassert     find_Max_Num([1, 2, 4, 6, 9]) == 9, \"Test case 2 Failed\"\nassert     find_Max_Num([9, 8, 9, 9, 9, 9]) == 81, \"Test case 3 Failed\"\nassert     find_Max_Num([1, 1, 1, 1, 1]) == 9, \"Test case 4 Failed\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(10,-10) == True\nassert     opposite_Signs(10,-10) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nopposite_Signs(1,1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,1) == False\n\ndef n_Choose_k(n,k): \n    '''\n    Write a python function to calculate the value of the expression n choose k.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nopposite_Signs(-2,2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(0,0) == True\nopposite_Signs(1,1) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,1) == True\nopposite_Signs(0,0) == True\nopposite_Signs(1,1) == False\nopposite_Signs(2,2) == True\nopposite_Signs(1,0) == False\nopposite_Signs(1,2) == True\nopposite_Signs(2,1) == False\nopposite_Signs(1,1) == True\nopposite_Signs(1,1) == True\nopposite_Signs(0,-1) == True\nopposite_Signs(0,-1) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(-2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(1,0) == False\nassert     opposite_Signs(-1,0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nopposite_Signs(1, 2)\nopposite_Signs(3, -1)\nopposite_Signs(-1, -2)\nopposite_Signs(2, -3)\nopposite_Signs(-1, 2)\nopposite_Signs(-2, -3)\nopposite_Signs(0, 2)\nopposite_Signs(-2, 0)\nopposite_Signs(0, -2)\nopposite_Signs(1, 1)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) ="
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nopposite_Signs(x = -1, y = -2) == True\nassert \nopposite_Signs(x = 1, y = 2) == False\nassert \nopposite_Signs(x = 0, y = 0) == False\nprint('Check Passed')\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(0,-2) == True, \"Wrong answer\"\nassert opposite_Signs(0,2) == True, \"Wrong answer\"\nassert opposite_Signs(2,0) == False, \"Wrong answer\"\nassert opposite_Signs(1,2) == False, \"Wrong answer\"\nassert opposite_Signs(-1,1) == True, \"Wrong answer\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 7\nassert     is_octagonal(3) == 21\nassert     is_octagonal(4) == 7\nassert     is_octagonal(5) == 26\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(is_octagonal(1))\nprint(is_octagonal(2))\nprint(is_octagonal(3))\nprint(is_octagonal(4))\nprint(is_octagonal(5))\nprint(is_octagonal(6))\nprint(is_octagonal(7))\nprint(is_octagonal(8))\nprint(is_octagonal(9))\nprint(is_octagonal(10))\nprint(is_octagonal(11))\nprint(is_octagonal(12))\nprint(is_octagonal(13))\nprint(is_octagonal(14))\nprint(is_octagonal(15))\nprint(is_octagonal(16))\nprint(is_octagonal(17))\nprint(is_octagonal(18))\nprint(is_octagonal(19))\nprint(is_octagonal(20))\nprint(is_octagonal(21))\nprint(is_octagonal(22))\nprint(is_octagonal(23))\nprint(is_octagonal(24))\nprint(is_octagonal(25))\nprint(is_octagonal(26))\nprint(is_octagonal(27))\nprint(is_octagonal(28))\nprint(is_octagonal(29))\nprint(is_octagonal(30))\nprint(is_octagonal(31))\nprint(is_octagonal(32))\nprint(is_octagonal(33))\nprint(is_octagonal(34))\nprint(is_octagonal(35))\nprint(is_octagonal(36))\nprint(is_octagonal(37))\nprint(is_octagonal(38))\nprint(is_octagonal(39))\nprint(is_octagonal(40))\nprint(is_octagonal(41))\nprint(is_octagonal(42))\nprint(is_octagonal(43))\nprint(is_octagonal(44))\nprint(is_octagonal(45))\nprint(is_octagonal(46))\nprint(is_octagonal(47))\nprint(is_octagonal(48))\nprint(is_octagonal(49))\nprint(is_octagonal(50))\nprint(is_octagonal(51))\nprint(is_octagonal(52))\nprint(is_octagonal(53))\nprint(is_octagonal(54))\nprint(is_octagonal(55))\nprint(is_octagonal(56))\nprint(is_octagonal(57))\nprint(is_octagonal(58))\nprint(is_octagonal(59))\nprint(is_octagonal(60))\nprint(is_octagonal(61))\nprint(is_octagonal(62))\nprint(is_octagonal(63))\nprint(is_octagonal(64))\nprint(is_octagonal(65))\nprint(is_octagonal(66))\nprint(is_octagonal(67))\nprint(is_octagonal(68))\nprint(is_octagonal(69))\nprint(is_octagonal(70))\nprint(is_octagonal(71))\nprint(is_octagonal(72))\nprint(is_octagonal(73))\nprint(is_octagonal(74))\nprint(is_octagonal(75))\nprint(is_octagonal(76))\nprint(is_octagonal(77))\nprint(is_octagonal(78))\nprint(is_octagonal(79))\nprint(is_octagonal(80))\nprint(is_octagonal(81))\nprint(is_octagonal(82))\nprint(is_octagonal(83))\nprint(is_octagonal(84))\nprint(is_octagonal(85))\nprint(is_octagonal(86))\nprint(is_octagonal(87))\nprint(is_octagonal(88))\nprint(is_octagonal(89))\nprint(is_octagonal(90))\nprint(is_octagonal(91))\nprint(is_octagonal(92))\nprint(is_octagonal(93))\nprint(is_octagonal(94))\nprint(is_octagonal(95))\nprint(is_octagonal(96))\nprint(is_octagonal(97))\nprint(is_octagonal(98))\nprint(is_octagonal(99))\nprint(is_octagonal(100))\nprint(is_octagonal(101))\nprint(is_octagonal(102))\nprint(is_octagonal(103))\nprint(is_octagonal(104))\nprint(is_octagonal(105))\nprint(is_octagonal(106))\nprint(is_octagonal(107))\nprint(is_octagonal(108))\nprint(is_octagonal(109))\nprint(is_octagonal(110))\nprint(is_octagonal(111))\nprint(is_octagonal(112))\nprint(is_octagonal(113))\nprint(is_octagonal(114))\nprint(is_octagonal(115))\nprint(is_octagonal(116))\nprint(is_octagonal(117))\nprint(is_octagonal(118))\nprint(is_octagonal(119))\nprint(is_octagonal(120))\nprint(is_octagonal(121))\nprint(is_octagonal(122))\nprint(is_octagonal(123))\nprint(is_octagonal(124))\nprint(is_octagonal(125))\nprint(is_octagonal(126))\nprint(is_octagonal(127))\nprint(is_octagonal(128))\nprint(is_octagonal(129))\nprint(is_octagonal(130))\nprint(is_octagonal(131))\nprint(is_octagonal(132))\nprint(is_octagonal(133))\nprint(is_octagonal(134))\nprint(is_octagonal(135))\nprint(is_octagonal(136))\nprint(is_octagonal(137))\nprint(is_octagonal(138))\nprint(is_octagonal(139))\nprint(is_octagonal(140))\nprint(is_octagonal(141))\nprint(is_octagonal(142))\nprint(is_octagonal(143))\nprint(is_octagonal(144))\nprint(is_octagonal(145))\nprint(is_octagonal(146))\nprint(is_octagonal(147))\nprint(is_octagonal(148))\nprint(is_octagonal(149))\nprint(is_octagonal(150))\nprint(is_octagonal(151))\nprint(is_octagonal(152))\nprint(is_octagonal(153))\nprint(is_octagonal(154))\nprint(is_octagonal(155))\nprint(is_octagonal(156))\nprint(is_octagonal(157))\nprint(is_octagonal(158))\nprint(is_octagonal(159))\nprint(is_octagonal(160))\nprint(is_octagonal(161))\nprint(is_octagonal(162))\nprint(is_octagonal(163))\nprint(is_octagonal(164))\nprint(is_octagonal(165))\nprint(is_octagonal(166))\nprint(is_octagonal(167))\nprint(is_octagonal(168))\nprint(is_octagonal(169))\nprint(is_octagonal(170))\nprint(is_octagonal(171))\nprint(is_octagonal(172))\nprint(is_octagonal(173))\nprint(is_octagonal(174))\nprint(is_octagonal(175))\nprint(is_octagonal(176))\nprint(is_octagonal(177))\nprint(is_octagonal(178))\nprint(is_octagonal(179))\nprint(is_octagonal(180))\nprint(is_octagonal(181))\nprint(is_octagonal(182))\nprint(is_octagonal(183))\nprint(is_octagonal(184))\nprint(is_octagonal(185))\nprint(is_octagonal(186))\nprint(is_octagonal(187))\nprint(is_octagonal(188))\nprint(is_octagonal(189))\nprint(is_octagonal(190))\nprint(is_octagonal(191))\nprint(is_octagonal(192))\nprint(is_octagonal(193))\nprint(is_octagonal(194))\nprint(is_octagonal(195))\nprint(is_octagonal(196))\nprint(is_octagonal(197))\nprint(is_octagonal(198))\nprint(is_octagonal(199))\nprint(is_octagonal(20"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\nassert is_octagonal(4) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 10\nassert     is_octagonal(3) == 18\nassert     is_octagonal(4) == 26\nassert     is_octagonal(5) == 41\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_octagonal_list(n):\n    '''\n    Write a function to get the first n octagonal numbers.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    octagonal(10) == 401\n    octagonal(100) == 2358\n    octagonal(10) == 1655\n    octagonal(10000) == 354225\n    octagonal(1000) == 235837\n    octagonal(101) == 165523\n    octagonal(1000) == 35422517\n    octagonal(100) == 23583717\n    octagonal(100) == 23583717\n    octagonal(10) == 16552317\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings(\"234\") == 3\nassert     count_Substrings(\"1234\") == 4\nassert     count_Substrings(\"2345678\") == 15\nassert     count_Substrings(\"A\") == 1\nassert     count_Substrings(\"B\") == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"abcabc\") == 3\nassert     count_Substrings(\"abcabcab\") == 2\nassert     count_Substrings(\"bababa\") == 7\nassert     count_Substrings(\"bababac\") == 5\nassert     count_Substrings(\"bababacab\") == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings('a') == 1\nassert     count_Substrings('ab') == 2\nassert     count_Substrings('aa') == 3\nassert     count_Substrings('aba') == 4\nassert     count_Substrings('ac') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings('1234567') == 4\nassert count_Substrings('12345678') == 4\nassert count_Substrings('123456789') == 6\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings('12') == 1\nassert     count_Substrings('1212') == 4\nassert     count_Substrings('121212') == 6\nassert     count_Substrings('1231212') == 3\nassert     count_Substrings('123121212') == 5\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings('abc') == 3\nassert     count_Substrings('adc') == 0\nassert     count_Substrings('abcabc') == 4\nassert     count_Substrings('abcabcabc') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"abcdefghijklmnopqrstuvwxyz\") == 20\nassert     count_Substrings(\"abcdefghijklmnopqrstuvwxyz123\") == 24\nassert     count_Substrings(\"hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings('002345') == 2\nassert     count_Substrings('030723') == 1\nassert     count_Substrings('2345654321') == 1\nassert     count_Substrings('234567890') == 10\nassert     count_Substrings('099000') == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_Substrings(\"abcdef\") == 5\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings(\"12345\") == 1\nassert count_Substrings(\"123456789\") == 3\nassert count_Substrings(\"12346789\") == 1\nassert count_Substrings(\"123456789a\") == 0\nassert count_Substrings(\"12346789a\") == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([1, 2, 3, 4]) == 1, 'your first function does not work'\nassert     smallest_num([3, 1, 5, 4]) == 1, 'your first function does not work'\nassert     smallest_num([1, 2, 5, 4]) == 1, 'your first function does not work'\nassert     smallest_num([2, 1, 5, 4]) == 1, 'your first function does not work'\n\n'''\n            For second task, you need to write a python function to find the sum of the numbers in a list.\n            Input: list of numbers\n            Output: sum of the numbers\n            Input: [-1, -2, -3, -4, -5]\n            Output: -1+-2+-3+-4+-5 = -15\n'''\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsmallest_num([1,2,5,6,7,8,9,10,11,12,13,14,15,16,18,19]) == 1\nassert \nsmallest_num([0,2,3,5,7,8,9]) == 0\nassert \nsmallest_num([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5, 6, 7, 8]) == 1\nassert     smallest_num([1, 1, 1, 1, 1, 1, 1]) == 1\n\ndef smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_num([5, 7, 4, 12, 3, 10, 11, 2, 13]) == 3\nassert    smallest_num([2, 3, 2, 4, 5, 6, 1, 2]) == 1\nassert    smallest_num([1, 1, 1, 1, 1, 1, 1]) == 1\nassert    smallest_num([10, 11, 12, 13, 14, 15, 16, 17, 18]) == 17\nassert    smallest_num([2, 9, 9, 3, 9, 9, 9, 9, 9]) == 3\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    smallest_num([1, 2, 3, 4, 5]) == 1\n    smallest_num([2, 3, 4, 5]) == 2\n    smallest_num([7, 8, 9, 10, 11]) == 7\n    smallest_num([1]) == 1\n    smallest_num([-1, -2, -3, -4]) == -4\n    smallest_num([-5, -2, -3, -4, -1]) == -1\n    smallest_num([]) == None\n\nprint(\"Smallest number test passed!\")\n\n\ndef largest_num(xs):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([2, 3, 4, 1]) == 1, \"Wrong output\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_num([1, 2, 3, 4]) == 1, '1'\nassert     smallest_num([1, 3, 5, 7]) == 1, '1'\nassert     smallest_num([1, 2, 3, 5]) == 1, '1'\nassert     smallest_num([4, 3, 2, 1]) == 1, '1'\nassert     smallest_num([1, 3, 4, 5]) == 1, '1'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 1\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 5\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 1\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 4\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 1\n    "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([1,4,2,5,7]) == 1, 'wrong'\nassert     smallest_num([3,1,2,4,5,7]) == 1, 'wrong'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert smallest_num([1,2,3,4,5,6]) == 5\nassert smallest_num([10,20,30,40,50,60]) == 50\nassert smallest_num([20,30,40,50,60,70]) == 60\nassert smallest_num([30,40,50,60,70,80]) == 70\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_difference([]) == 0\nassert max_difference([1,2,3]) == 1\nassert max_difference([5,6,1,3,2,4]) == 4"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference(tuple((0, 5, 15, -20))) == 15\nassert     max_difference(tuple((-5, -15, 20, 0))) == 15\nassert     max_difference(tuple((15, -5, -10, 20))) == 15\nassert     max_difference(tuple((-5, 20, 15, -10))) == 15\nassert     max_difference(tuple((20, -5, 15, -10))) == 15\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference([(1,1),(2,2),(3,5),(4,4)]) == 1, 'Test case 1 failed'\nassert max_difference([(0,0),(1,1),(2,2),(3,5),(4,4)]) == 3, 'Test case 2 failed'\nassert max_difference([(0,0),(0,0),(0,0),(0,0),(0,0)]) == 0, 'Test case 3 failed'\nassert max_difference([(0,0),(0,0),(0,0),(0,0),(0,0)]) == 0, 'Test case 4 failed'\nassert max_difference([]) == None, 'Test case 5 failed'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference([(1,4),(3,2),(5,6)]) == -1, \"Wrong\"\nassert     max_difference([(3,3),(2,2),(5,5)]) == 1, \"Wrong\"\nassert     max_difference([(1,2),(2,3),(3,4)]) == 2, \"Wrong\"\n\ndef max_difference2(test_list):\n    '''\n    Find the maximum difference between two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference(test_list) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\\nThe expected return value is 2. The returned value is {0}'.format(max_difference((2, 4, 6, 8, 1, 3, 5, -1, 7, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19))) )\nprint('The expected return value is 3. The returned value is {0}'.format(max_difference((-2, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39, -41, -43, -45, -47, -49, -51, -53, -55, -57, -59, -61, -63, -65, -67, -69, -71, -73, -75, -77, -79, -81, -83, -85, -87, -89, -91, -93, -95, -97, -99, -101, -103, -105, -107, -109, -111, -113, -115, -117, -119, -121, -123, -125, -127, -129, -131, -133, -135, -137, -139, -141, -143, -145, -147, -149, -151, -153, -155, -157, -159, -161, -163, -165, -167, -169, -171, -173, -175, -177, -179, -181, -183, -185, -187, -189, -191, -193, -195, -197, -199, -201, -203, -205, -207, -209, -211, -213, -215, -217, -219, -221, -223, -225, -227, -229, -231, -233, -235, -237, -239, -241, -243, -245, -247, -249, -251, -253, -255, -257, -259, -261, -263, -265, -267, -269, -271, -273, -275, -277, -279, -281, -283, -285, -287, -289, -291, -293, -295, -297, -299, -301, -303, -305, -307, -309, -311, -313, -315, -317, -319, -321, -323, -325, -327, -329, -331, -333, -335, -337, -339, -341, -343, -345, -347, -349, -351, -353, -355, -357, -359, -361, -363, -365, -367, -369, -371, -373, -375, -377, -379, -381, -383, -385, -387, -389, -391, -393, -395, -397, -399, -401, -403, -405, -407, -409, -411, -413, -415, -417, -419, -421, -423, -425, -427, -429, -431, -433, -435, -437, -439, -441, -443, -445, -447, -449, -451, -453, -455, -457, -459, -461, -463, -465, -467, -469, -471, -473, -475, -477, -479, -481, -483, -485, -487, -489, -491, -493, -495, -497, -499, -501, -503, -505, -507, -509, -511, -513, -515, -517, -519, -521, -523, -525, -527, -529, -531, -533, -535, -537, -539, -541, -543, -545, -547, -549, -551, -553, -555, -557, -559, -561, -563, -565, -567, -569, -571, -573, -575, -577, -579, -581, -583, -585, -587, -589, -591, -593, -595, -597, -599, -601, -603, -605, -607, -609, -611, -613, -615, -617, -619, -621, -623, -625, -627, -629, -631, -633, -635, -637, -639, -641, -643, -645, -647, -649, -651, -653, -655, -657, -659, -661, -663, -665, -667, -669, -671, -673, -675, -677, -679, -681, -683, -685, -687, -689, -691, -693, -695, -697, -699, -701, -703, -705, -707, -709, -711, -713, -715, -717, -719, -721, -723, -725, -727, -729, -731, -733, -735, -737, -739, -741, -743, -745, -747, -749, -751, -753, -755, -757, -759, -761, -763, -765, -767, -769, -771, -773, -775, -777, -779, -781, -783, -785, -787, -789, -791, -793, -795, -797, -799, -801, -803, -805, -807, -809, -811, -813, -815, -817, -819, -821, -823, -825, -827, -829, -831, -833, -835, -837, -839, -841, -843, -845, -847, -849, -851, -853, -855, -857, -859, -861, -863, -865, -867, -869, -871, -873, -874, -875, -877, -879, -881, -883, -885, -887, -889, -891, -893, -895, -897, -899, -901, -903, -905, -907, -909, -911, -913, -915, -917, -919, -921, -923, -925, -927, -929, -931, -933, -935, -937, -939, -941, -943, -945, -947, -949, -951, -953, -955, -957, -959, -961, -963, -965, -967, -969, -971, -973, -975, -977, -979, -981, -983, -985, -987, -988, -993, -995, -997, -999, -1001, -1003, -1005, -1007, -1009, -1011, -1013, -1015, -1017, -1019, -1021, -1023, -1025, -1027, -1029, -1031, -1033, -1035, -1037, -1039, -1041, -1043, -1045, -1047, -1049, -1051, -1053, -1055, -1057, -1059, -1061, -1063, -1065, -1067, -1069, -1071, -1073, -1075, -1077, -1079, -1081, -1083, -1085, -1087, -1089, -1091, -1093, -1095, -1097, -1099, -1103, -1105, -1107, -1109, -1113, -1115, -1117, -1119, -1121, -1123, -1125, -1127, -1129, -1131, -1133, -1135, -1137, -1139, -1141, -1143, -1145, -1147, -1149, -1151, -1153, "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference([(1,2), (2,3), (3,4), (5,6), (6,7)]) == 2\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7)]) == 2\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7), (7,8)]) == 3\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7), (7,8)]) == 3\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7), (7,8)]) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([[1, 2, 3], [1, 3, 5], [2, 3, 1]]) == 2, \"error 1\"\nassert     max_difference([[3, 7], [1, 3], [2, 6]]) == 3, \"error 2\"\nassert     max_difference([[1, 3, 5], [3, 1, 1], [1, 6, 7]]) == 8, \"error 3\"\n\nprint(\"You've got it right!\""
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([-12, -11, -13, -5, -6, -7, -1, -2, -3]) == 5, 'Wrong max_difference'\nassert     max_difference([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0, 'Wrong max_difference'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference([(1, 2), (2, 3), (4, 5)]) == 2\nassert     max_difference([(1, 4), (2, 5), (4, 7)]) == 2\nassert     max_difference([(1, 5), (2, 4), (4, 3)]) == 2\nassert     max_difference([(1, 2), (2, 3), (3, 4)]) == 0\nassert     max_difference([(1, 2), (2, 3), (4, 5)]) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(8, 6), (4, 5), (2, 1), (10, 0)]) == \\\n        [(2, 1), (4, 5), (8, 6), (10, 0)]\n\nassert     subject_marks([(8, 5), (4, 3), (2, 1), (10, 0)]) == \\\n        [(4, 3), (2, 1), (8, 5), (10, 0)]\n\nassert     subject_marks([(8, 4), (4, 3), (2, 1), (10, 0)]) == \\\n        [(4, 3), (2, 1), (8, 4), (10, 0)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([(1,2),(2,4),(3,3),(4,4)]) == [(1,2),(2,4),(3,3),(4,4)]\nassert     subject_marks([(4,4),(3,3),(2,2),(1,1)]) == [(1,1),(2,2),(3,3),(4,4)]\nassert     subject_marks([(2,4),(1,2),(3,3),(4,4),(3,1),(2,2)]) == [(1,2),(2,4),(3,1),(2,2),(3,3),(4,4)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(1,2), (2,1), (1,3)]) == [(1,2), (2,1), (1,3)]\nassert     subject_marks([(1,3), (3,1), (1,2), (2,3)]) == [(1,3), (1,2), (3,1), (2,3)]\nassert     subject_marks([(2,3), (1,2), (1,3), (2,1)]) == [(2,3), (1,2), (1,3), (2,1)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    subject_marks([(1,30),(3,20),(5,70)]) == [(1, 30), (3, 20), (5, 70)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10)]) == [(1, 30), (3, 20), (5, 70), (2, 10)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (4, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,3"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # data\n    subjectmarks = [\n        (10, 60),\n        (99, 95),\n        (30, 90),\n        (59, 70),\n        (100, 70),\n        (40, 60)\n    ]\n\n    # call the function\n    sorted_subjectmarks = subject_marks(subjectmarks)\n\n    # print the sorted list\n    print(sorted_subjectmarks)\n\n    pas"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([(10,40), (5,90), (4,80), (3,70), (5,50)]) == \\\n    [(3, 70), (5, 50), (4, 80), (5, 90), (10, 40)]\n\nprint('Exercise 2a - done\\n')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         subject_marks(\n            [(12, 3), (4, 2), (2, 6), (5, 5), (1, 2), (12, 10), (1, 1), (8, 4)]) == \\\n        [(1, 1), (1, 2), (2, 6), (5, 5), (4, 2), (8, 4), (12, 10), (12, 3)]\n\n\ndef sort_marks(mark_list):\n    '''\n    Write a function to sort a list of tuples using the third value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('Chemistry', 60), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)], \\\n    \"Should be [('Chemistry', 60), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('Chemistry', 70), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)], \\\n    \"Should be [('Chemistry', 70), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)], \\\n    \"Should be [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)], \\\n    \"Should be [('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)], \\\n    \"Should be [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)]\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert subject_marks([(5, 1), (3, 1), (7, 4), (2, 2), (9, 3), (8, 3)]) == [(3, 1), (7, 4), (9, 3), (2, 2), (5, 1), (8, 3)], 'List is not sorted by second value of each tuple'\n\ndef test_subject_marks():\n    assert subject_marks([(5, 1), (3, 1), (7, 4), (2, 2), (9, 3), (8, 3)]) == [(3, 1), (7, 4), (9, 3), (2, 2), (5, 1), (8, 3)], 'List is not sorted by second value of each tuple'\n    assert subject_marks([(5, 1), (3, 2), (7, 4), (2, 2), (9, 3), (8, 3)]) == [(3, 2), (7, 4), (9, 3), (2, 2), (5, 1), (8, 3)], 'List is not sorted by second value of each tuple'\n    "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef recursive_list_sum_checked(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4]) == 10, \"Should return 10\"\nassert     recursive_list_sum([1, 2, 3, 4, 5]) == 15, \"Should return 15\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6]) == 21, \"Should return 21\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7]) == 28, \"Should return 28\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45, \"Should return 45\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         recursive_list_sum([[1,2,3], 4, 5]) == (1 + 2 + 3 + 4 + 5), \"Wrong answer\"\nassert         recursive_list_sum([[1,2], 3, 5]) == (1 + 2 + 3 + 5), \"Wrong answer\"\nassert         recursive_list_sum([[1,2], 3]) == (1 + 2 + 3), \"Wrong answer\"\nassert         recursive_list_sum([[1,2], 4]) == (1 + 2 + 4), \"Wrong answer\"\nassert         recursive_list_sum([]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([1,2,3])    == 6, \"Should be 6\"\nassert     recursive_list_sum([])            == 0, \"Should be 0\"\nassert     recursive_list_sum([1,2])        == 3, \"Should be 3\"\n\ndef recursive_list_sum_iterative(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef recursive_list_sum_2(data_list):\n    if len(data_list) == 0:\n        return 0\n    return data_list[0] + recursive_list_sum_2(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     recursive_list_sum([[1,2,3], [4], [5]]) == 15\nassert     recursive_list_sum([1,2,3,4]) == 9\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[], [1], [2], [3]]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndata_list = [1,2,3,4,5,6]\nrecursive_list_sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef recursive_list_sum_fast(data_list):\n    '''\n    Write a faster function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([[1, 2, 3], [2, 5, 6], [1, 5, 9]]) == [6, 15, 24]\nassert     recursive_list_sum([[1], [2, 5, 9], [2, 5]]) == [8, 14, 24]\nassert     recursive_list_sum([[1], [2, 5], [2, 5, 9]]) == [8, 14, 24]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([0,1,2,3]) == 4\nassert     pos_count([0,1,2,3,-5,6]) == 4\nassert     pos_count([-2,1,2,3,0]) == 5\nassert     pos_count([-2,1,2,3,-5,6,-7]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\npos_count([1,2,-6,-2,-3]) == 0\npos_count([-2,-4,0,6,-2,-4,-2]) == 4\npos_count([-2,0,6,2,-4,-2]) == 2\npos_count([1,2,3,-2,0]) == 5\npos_count([1,-2,3,0,-2,3,0]) == 6\npos_count([1,0,3,0,-2,3,0]) == 6\npos_count([-1,2,0,0,0,0,0]) == 4\npos_count([1,1,1]) == 3\npos_count([-1,1,1]) == 3\npos_count([]) == 0\npos_count([-1,-1,-1,-1]) == 0\npos_count([-1,-1,-1,0]) == 0\npos_count([-1,-1,0,0]) == 1\npos_count([-1,-1,0,-1]) == 1\npos_count([-1,-1,0,1]) == 2\npos_count([-1,-1,1,-1]) == 2\npos_count([-1,-1,1,1]) == 3\npos_count([-1,-1,1,1,0]) == 3\npos_count([-1,-1,1,1,1]) == 4\npos_count([-1,-1,1,1,1,1]) == 5\npos_count([-1,-1,1,1,1,1,1]) == 6\npos_count([-1,-1,1,1,1,1,1,1]) == 7\npos_count([-1,-1,1,1,1,1,1,1,1]) == 8\npos_count([-1,-1,1,1,1,1,1,1,1,1]) == 9\npos_count([-1,-1,1,1,1,1,1,1,1,1,1]) == 10\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1]) == 11\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1]) == 12\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1]) == 13\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 14\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 15\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 16\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 17\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 18\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 19\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 20\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 21\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 22\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 23\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 24\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 25\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 26\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 27\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 28\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 29\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 30\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 31\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 32\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 33\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 34\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 35\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 36\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 37\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 38\npos_count([-1,-1,1,1,1"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([]) == 0, 'Empty list is passed'\nassert     pos_count([1, 2, 3, 4, 5]) == 5, 'Normal list is passed'\nassert     pos_count([-1, 0, 3, 5]) == 2, 'Negative numbers are passed'\nassert     pos_count([-1, 2, 3, 4, 5, -1, 2, 4, 5]) == 8, 'Multiple numbers are passed'\n\n'''\nWrite a function to get the largest number in a list.\n'''\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([-1,2,3,-2]) == 1, \"Positive count\"\nassert     pos_count([0,1,2,3]) == 3, \"Positive count\"\nassert     pos_count([0,-1,2,3]) == 2, \"Positive count\"\nassert     pos_count([-1,0,-1,-2]) == 1, \"Positive count\"\nassert     pos_count([]) == 0, \"Positive count\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([]) == 0, 'empty'\nassert     pos_count([1,2,3]) == 3,'simple'\nassert     pos_count([-4, -1, 0, 1, 2, 3]) == 6, 'with negatives'\nassert     pos_count([-4, -1, 2, 2, 3]) == 3, 'no duplicates'\n\n\ndef same_pos_neg(lst):\n    '''\n    Write a python function to find if a list has all the same positive numbers and all the same negative numbers.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([1,2,3,4,5]) == 5\nassert     pos_count([-1,-2,-3,-4,-5]) == 4\nassert     pos_count([]) == 0\nassert     pos_count([0,1,2,3,4,5]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert pos_count([1,-2,-3,0,5])==4\nassert pos_count([1,2,3,4,5])==5\nassert pos_count([1,0,5])==2\nassert pos_count([1,2,0,5])==3\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([0, -1, 0, 0, 0]) == 1, 'Failed'\nassert     pos_count([-1, 0, 0, 0, 0]) == 4, 'Failed'\nassert     pos_count([-1, 0, 0, 0, -1]) == 3, 'Failed'\nassert     pos_count([-1, 0, 0, 0, 0, 0, 0]) == 2, 'Failed'\nassert     pos_count([-1, 0, 0, 0, 0, 0, 0, -1]) == 2, 'Failed'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     pos_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 10\nassert     pos_count([0,0,0,0,0]) == 0\nassert     pos_count([0,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == -10\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nbell_number(10) == 10\nbell_number(6) == 7\nbell_number(5) == 6\n\n\ndef divisible_by_seven(n):\n    '''\n    Write a function to find if a number is divisible by 7 or not.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(2)==2, 'bell_number(2) is wrong!'\nassert     bell_number(1)==1, 'bell_number(1) is wrong!'\nassert     bell_number(0)==1, 'bell_number(0) is wrong!'\nassert     bell_number(6)==7, 'bell_number(6) is wrong!'\nassert     bell_number(15)==24, 'bell_number(15) is wrong!'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef solve(arr,n):\n    '''\n    You are given a set of numbers. Return the size of set of all possible subsets\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 14\nassert     bell_number(5) == 42\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(6) == 13\nassert bell_number(7) == 21\nassert bell_number(8) == 28\nassert bell_number(9) == 33\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(5) == 5\nassert     bell_number(10) == 20\nassert     bell_number(40) == 860\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(0) == 0\nassert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 2\nassert     bell_number(4) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 7\nassert     bell_number(5) == 11\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([-1,-1,-1,-1]) == True, \"Wrong output\"\nassert     is_Monotonic([1,2,3,4]) == False, \"Wrong output\"\nassert     is_Monotonic([1,2,3,4,5]) == False, \"Wrong output\"\nassert     is_Monotonic([1,2,3,4,5,6]) == False, \"Wrong output\"\nassert     is_Monotonic([-1,-1,1,1,2]) == True, \"Wrong output\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_Monotonic([1, 2, 1])\nassert not is_Monotonic([3, 2, 1])\nassert not is_Monotonic([1, 2, 2, 3])\nassert is_Monotonic([1, 2, 1, 3, 1, 2, 1])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Monotonic([1,2,1,3,4]) == True, \"Not a Monotonic\"\nassert     is_Monotonic([1,1,1,1]) == True, \"Is a Monotonic\"\nassert     is_Monotonic([2,2,2,2]) == True, \"Is a Monotonic\"\nassert     is_Monotonic([2,1,2]) == False, \"Not a Monotonic\"\nassert     is_Monotonic([2,2,2,2,2]) == False, \"Is a Monotonic\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1,1,2]) == False, 'The given array should be Monotonic'\nassert is_Monotonic([1,1,1]) == True, 'The given array should be Monotonic'\nassert is_Monotonic([3,1,2]) == True, 'The given array should be Monotonic'\nassert is_Monotonic([3,3,2]) == True, 'The given array should be Monotonic'\nassert is_Monotonic([3,1,3]) == False, 'The given array should be Monotonic'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1,2,3,3,2,1]) == True\nassert     is_Monotonic([1,2,2,3,3,2,1]) == False\nassert     is_Monotonic([2,2,2,3,3,2,1]) == False\nassert     is_Monotonic([1,1,1,1,1,1,1]) == True\nassert     is_Monotonic([]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_Monotonic([1,2,1]) == False\nis_Monotonic([1,2,1,3,5]) == False\nis_Monotonic([1,2,3,3]) == False\nis_Monotonic([1,2,3,4]) == False\nis_Monotonic([1,2,3,3,3]) == True\nis_Monotonic([1,1,1,1,1]) == True\nis_Monotonic([1,1,1,1,1,1]) == True\nis_Monotonic([1,1,1,1,1,2]) == False"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic( [ 1, 2, 2, 3 ] ) == True\nassert     is_Monotonic( [ 1, 2, 3 ] ) == False\nassert     is_Monotonic( [-1, -2, -2 ] ) == True\nassert     is_Monotonic( [-1, -2, 1 ] ) == False\nassert     is_Monotonic( [-1, -2, -3 ] ) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([], []) == False, \"Test Case 1: Empty list\"\nassert     is_sublist([1], []) == False, \"Test Case 2: Empty sublist\"\nassert     is_sublist([1,2], []) == False, \"Test Case 3: Empty list\"\nassert     is_sublist([1,2], [1]) == True, \"Test Case 4: Equal Sublists\"\nassert     is_sublist([1,2], [2]) == True, \"Test Case 5: Equal Sublists\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [2,3]) == True\nassert     is_sublist([1,2,3], [1,2,4]) == False\nassert     is_sublist([1,2,3], [1,2,3,4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sublist([1,2], [1,2]) == True\nassert     is_sublist([1,2], [1,2,3]) == False\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [1,2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_sublist([1,2], 1)\nassert is_sublist([1,2,3], 1)\nassert is_sublist([1,2,3,4], 1)\nassert not is_sublist([1,2,3], 1)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_sublist(l, s):\n    '''\n    Write a function to return the first occurrence of the sublist in a given list.\n    '''\n    pass\n\nassert \n\ndef get_sublist(l, s):\n    '''\n    Write a function to return the first occurrence of the sublist in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint (\"You passed the is_sublist function test!\")\n\n\ndef longest_substring_with_k_distinct(str, k):\n    '''\n    Write a function that returns the length of the longest substring with k distinct characters in str.\n    '''\n    pass\n\n\nassert longest_substring_with_k_distinct('aaabb', 2) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_sublist([1,2,3,4,5,6], [1,2,3,4]) == True\nassert is_sublist([1,2,3,4,5,6], [1,2,3,5,6]) == False\nassert is_sublist([1,2,3,4], [1,2,3,4,5,6]) == True\nassert is_sublist([1,2,3,4], [1,2,4]) == False\nassert is_sublist([1,2,3,4], [1,2,3]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_sublist([1,2,3,4,5], [1,2,3,4]) == True\nassert is_sublist([1,2,3,4,5], [1,2,3,5]) == False\nassert is_sublist([1,2,3,4], [1,2,3,4]) == True\nassert is_sublist([1,2,3,4], [1,2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([1,2,3], []) == False\nassert     is_sublist([1,2,3],  [1,2]) == True\nassert     is_sublist([1,2,3],  [1,3]) == True\nassert     is_sublist([1,2,3],  [2,3]) == True\nassert     is_sublist([1,2,3],  [2,3,4]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple(() ) == True, 'Empty tuple'\nassert     find_equal_tuple( (3, 4, 2) ) == True, 'Tuple having 3'\nassert     find_equal_tuple( (3, 4, 2, 'a', 'b') ) == False, 'Tuple having 4'\nassert     find_equal_tuple( (3, 4, 2, 'a', 'b', 'c') ) == True, 'Tuple having 5'\nassert     find_equal_tuple( (3, 4, 2, 'a', 'b', 'c', 'd', 'e') ) == False, 'Tuple having 6'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1, 2), (1,), (1, 2, 3)]) is True, \"not correct\"\nassert     find_equal_tuple([(1,), (1, 2), (1, 2, 3)]) is True, \"not correct\"\nassert     find_equal_tuple([(1, 2), (1,), (1, 2, 3)]) is False, \"not correct\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple(tuple(range(10))) == False\nassert     find_equal_tuple(tuple(range(10))) == True\nassert     find_equal_tuple(tuple(range(10))) == True\nassert     find_equal_tuple(tuple(range(10))) == True\nassert     find_equal_tuple(tuple(range(10))) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True, '\\nExpected: True\\nActual: False'\nassert     find_equal_tuple([(1, 2), (3, 4), (5, )]) == False, '\\nExpected: False\\nActual: True'\nassert     find_equal_tuple([(1, 2), (2, ), (3, )]) == True, '\\nExpected: True\\nActual: False'\nassert     find_equal_tuple([(1, ), (2, ), (3, )]) == False, '\\nExpected: False\\nActual: True'\nassert     find_equal_tuple([(1, 2, 3), (2, 3), (3, )]) == False, '\\nExpected: False\\nActual: True'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd')]) == False\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]) == True\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'a')]) == True\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'a'), ('b', 'c')]) == False\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'a'), ('b', 'b')]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == True\nassert     find_equal_tuple([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(1, 2), (1,), (1,2,3), (1,2)]) == True, 'Wrong'\nassert     find_equal_tuple([(1, 2), (1,), (1,2,3), (1,2,3)]) == False, 'Wrong'\nassert     find_equal_tuple([(1, 2, 3, 4), (1,2,3,4), (1,2,3), (1,2,3)]) == False, 'Wrong'\nassert     find_equal_tuple([(1, 2), (1,), (1,2,3), (1,2,3)]) == False, 'Wrong'\nassert     find_equal_tuple([(1, 2, 3), (1,2,3), (1,2,3), (1,2,3)]) == True, 'Wrong'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (2,), (1, 2, 3)]) == False, \"Wrong output\"\nassert     find_equal_tuple([(1, 2), (1, 2), (2,), (1, 2, 3)]) == True, \"Wrong output\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple(((1,2),(3,4,5),(6,))) ==     True\nassert     find_equal_tuple(((1,2),(3,4,5),(5,))) ==     True\nassert     find_equal_tuple(((1,2),(3,4,5),(5,3,4,1,))) ==     False\nassert     find_equal_tuple(((1,2),(3,4),(5,3,4,1,))) ==     True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple(Input = [(1,2),(2,3),(2,3),(2,3)]) == False, \"Should return False\"\nassert     find_equal_tuple(Input = [(1,2),(2,3),(2,3),(3,4)]) == False, \"Should return False\"\nassert     find_equal_tuple(Input = [(1,2),(2,3),(2,3),(3,4),(3,4),(5,6)]) == True, \"Should return True\"\n\nprint(\"\\nFind_Equal_Tuple Tests Passed\")\nprint(\"--------------------------------------\\n\")"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert(comb_sort([1,2,5,7,10,20,80,99,100])==[1,2,5,7,10,20,80,99,100])\nassert(comb_sort([100])==[100])\nassert(comb_sort([])==[])\nassert(comb_sort([3,2,3])==[3,2,3])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     comb_sort([2,4,6,8,3,1,9,7]) == [1,2,3,4,6,7,8,9], 'Comb sort is incorrect'\nassert     comb_sort([5,4,3,2,1]) == [1,2,3,4,5], 'Comb sort is incorrect'\nassert     comb_sort([7,5,9,4,6,3,2,1]) == [1,2,3,4,5,6,7,9], 'Comb sort is incorrect'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nclass Solution:\n    '''\n    Given an array A of integers and integer K, return the index of K\u2019th largest element in the array.\n    Note that it is the K\u2019th largest element in the sorted order, not the Kth distinct element.\n    '''\n    def findKthLargest(self, nums, k):\n        pass\n\n    # check the correctness of findKthLargest\n    assert \n\nif __name__ == '__main__':\n    nums = [3, 2, 1, 5, 6, 4]\n    k = 2\n    print(Solution().findKthLargest(nums, k)"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([1, 3]) == [1, 3]\nassert     comb_sort([3, 1]) == [1, 3]\nassert     comb_sort([1, 3, 5]) == [1, 3, 5]\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dif_Square(13) == True, 'False'\nassert     dif_Square(125) == True, 'False'\nassert     dif_Square(10) == False, 'True'\nassert     dif_Square(1) == False, 'True'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(3) == True\nassert     dif_Square(6) == False\nassert     dif_Square(10) == True\n\ndef dif_Square_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    The input will be a positive integer\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not dif_Square(1)\nassert dif_Square(2)\nassert dif_Square(3)\nassert dif_Square(4)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dif_Square(36) == True, \" 36 should be a perfect square\"\nassert     dif_Square(16) == False, \" 16 should not be a perfect square\"\n\ndef find_Even_Odd(num): \n    '''\n    Write a python function to find the sum of even and odd numbers from a given number.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(0) == True, \"0 is a perfect square.\" \nassert     dif_Square(3) == True, \"3 is a perfect square.\" \nassert     dif_Square(12) == False, \"12 is not a perfect square.\" \nassert     dif_Square(28) == True, \"28 is a perfect square.\" \nassert     dif_Square(29) == False, \"29 is not a perfect square.\" \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(0) == True, 'The number 0 can be represented as the difference of squares as 0'\nassert     dif_Square(1) == False, 'The number 1 can be represented as the difference of squares as 1'\nassert     dif_Square(2) == True, 'The number 2 can be represented as the difference of squares as 2'\nassert     dif_Square(3) == False, 'The number 3 can be represented as the difference of squares as 5'\nassert     dif_Square(4) == False, 'The number 4 can be represented as the difference of squares as 4'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([], [])     == True\nassert     is_samepatterns(['red','blue','green','red','blue','blue','blue','green','green'], ['red','blue','green'])     == True\nassert     is_samepatterns(['red','green','red','green','red'], ['red','green','red','green','red'])     == True\nassert     is_samepatterns(['red','red','green','blue','green','blue','red','blue','red','red','blue','red','blue'], ['red','green','red','blue','green','blue'])     == True\nassert     is_samepatterns(['red','red','green','blue','green','blue','red','blue','red','red','blue','red','blue'], ['red','green','red','blue','green','blue'])     == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == True, \"is_samepatterns should be True\"\nassert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == False, \"is_samepatterns should be False\"\nassert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == False, \"is_samepatterns should be False\"\nassert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == True, \"is_samepatterns should be True\"\n\ndef is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_samepatterns(colors, patterns) == True\n\nprint('YOUR ANSWER:', is_samepatterns(colors, patterns))\nprint('Expected: True')\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns([],    [])    == True\nassert     is_samepatterns([],    [\"aba\"])    == False\nassert     is_samepatterns([\"baa\"],    [\"aba\"])    == False\nassert     is_samepatterns([\"abab\", \"aba\"],    [\"aba\", \"baa\"])    == True\nassert     is_samepatterns([\"aba\", \"abab\"],    [\"aba\", \"baa\"])    == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([], patterns) == True, \"is_samepatterns([], patterns) == True\"\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], patterns) == True, \"is_samepatterns(['red', 'blue', 'green'], patterns) == True\"\nassert     is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"black\", \"white\"], patterns) == False, \"is_samepatterns(['red', 'blue', 'green', 'yellow', 'black', 'white'], patterns) == False\"\nassert     is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"black\", \"white\"], [\"green\", \"black\", \"red\", \"blue\", \"white\"]) == False, \"is_samepatterns(['red', 'blue', 'green', 'yellow', 'black', 'white'], ['green', 'black','red', 'blue', 'white']) == False\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 10) == [(10, 20, 30), (40, 50, 60)]\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 20) == []\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 50) == [(40, 50, 60)]\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 60) == [(40, 50, 60), (70, 80, 90)]\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 70) == [(40, 50, 60), (70, 80, 90)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nfind_tuples([(1,2),(3,4),(5,6)],3) == [(1,2)]\nfind_tuples([(1,2,3),(3,4,5)],3) == [(1,2,3)]\n\nfind_tuples([(1,2),(3,4,5)],1) == [(1,),(3,),(5,)]\nfind_tuples([(1,2,3),(3,4,5)],2) == []\nfind_tuples([(1,2,3),(3,4,5)],3) == []\nfind_tuples([(1,2,3),(3,4,5)],5) == []\n\nfind_tuples([(1,2,3,4,5)],1) == [(1,),(3,),(5,)]\nfind_tuples([(1,2,3,4,5)],2) == [(1,2),(3,4),(5,)]\nfind_tuples([(1,2,3,4,5)],3) == []\nfind_tuples([(1,2,3,4,5)],5) == []\n\nfind_tuples([(1,2,3,4,5)],4) == [(1,2,3,4),(1,2,4,5),(1,3,4,5)]\nfind_tuples([(1,2,3,4,5)],3) == []\nfind_tuples([(1,2,3,4,5)],6) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(3,2,1),(2,2,1)], 2) ==    [[3,2,1], [2,2,1]]\nassert     find_tuples([(1,2,3,4),(2,2,3,4)], 2) ==    [[1,2,3,4], [2,2,3,4]]\nassert     find_tuples([(3,2,1),(2,2,1),(2,2,2),(2,2,3)], 2) ==    [[2,2,1], [2,2,2], [2,2,3]]\nassert not     find_tuples([(3,2,1),(2,2,1)], 3) ==    [[3,2,1]]\nassert not     find_tuples([(3,2,1),(2,2,1)], 2) ==    [[3,2,1], [2,2,1]]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 2) == [(1,2,4),(3,4,5)]\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 3) == [(1,2,3),(1,3,4),(2,3,4),(2,4,5),(3,4,5),(4,5,6)]\n\n'''\nOutput:\n\n(1, 2, 4)\n(2, 4, 5)\n(3, 4, 5)\n(4, 5, 6)\n(5, 6, 2)\n(6, 2, 3)\n(5, 6, 3)\n(6, 3, 4)\n(5, 6, 4)\n(6, 4, 5)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 2) == []\nassert     find_tuples([(1, 2, 3, 4, 5, 6)], 4) == [(1, 2, 3, 4)]\nassert     find_tuples([(1, 2, 3, 4, 5, 6)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(5, 6, 4), (3, 2, 1), (4, 6, 3)], 3) == [(5, 6, 3)]\nassert find_tuples([(5, 6, 4), (3, 2, 1), (4, 6, 3)], 2) == []\nassert find_tuples([(5, 6, 4), (3, 2, 1), (4, 6, 3)], 1) == [(3, 2, 1)]"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(3,4),(6,8)], 3) == [('3', '4')]\nassert find_tuples([(3,4),(6,8),(9,10),(20,30)], 5) == \n[('6', '8'), ('9', '10'), ('20', '30')]\nassert find_tuples([(0,1),(2,3)], 1) == []\nassert find_tuples([(3,4),(6,8)], 3) == []\nassert find_tuples([(6,8)], 3) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3)], K = 4) == [(1, 1, 1), (2, 2, 2)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6)], K = 5) == [(1, 2, 3), (4, 5, 6)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], K = 2) == []\nassert     find_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3)], K = 8) == []\nassert     find_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)], K = 2) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 10) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == ["
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(1) == False\nassert     is_Diff(11) == True\nassert     is_Diff(22) == False\nassert     is_Diff(111) == True\nassert     is_Diff(1111) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Diff(21) == True, \"21 is divisible by 11\"\nassert     is_Diff(10) == False, \"10 is not divisible by 11\"\nassert     is_Diff(6) == False, \"6 is not divisible by 11\"\nassert     is_Diff(11) == True, \"11 is divisible by 11\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(15) == True, \"Value is not 15\"\nassert     is_Diff(25) == False, \"Value is not 25\"\nassert     is_Diff(20) == False, \"Value is not 20\"\nassert     is_Diff(17) == True, \"Value is not 17\"\nassert     is_Diff(19) == True, \"Value is not 19\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(22) == True, \"Error found in the return of is_Diff.\"\nassert     is_Diff(1) == False, \"Error found in the return of is_Diff.\"\nassert     is_Diff(10) == True, \"Error found in the return of is_Diff.\"\nassert     is_Diff(20) == False, \"Error found in the return of is_Diff.\"\nassert     is_Diff(40) == True, \"Error found in the return of is_Diff.\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Diff(4) == False, \"is_Diff should return False\"\nassert     is_Diff(10) == True, \"is_Diff should return True\"\nassert     is_Diff(2) == True, \"is_Diff should return True\"\nassert     is_Diff(9) == True, \"is_Diff should return True\"\nassert     is_Diff(11) == True, \"is_Diff should return True\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Divisible(num, divisor):\n    '''\n    Write a python function to check whether a number is divisible by any number between 2 and 20.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     word_len('') == False\nassert     word_len('a') == True\nassert     word_len('aaaaa') == False\nassert     word_len('a') == True\nassert     word_len('123') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len('') == False\nassert word_len('Hello') == True\nassert word_len('python') == True\nassert word_len('python') == True\nassert word_len('Python') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len('') == False\nassert     word_len('cacaca') == True\nassert     word_len('Hello') == False\nassert     word_len('llama') == True\nassert     word_len('a') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef word_odd_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    # check if the function works or not\n    assert word_len(\"short\") == True\n    assert word_len(\"abcd\") == False\n    assert word_len(\"shorts\") == False\n    "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     word_len(\"hello\") == False, \"The length of word 'hello' is odd.\"\nassert     word_len(\"world\") == True, \"The length of word 'world' is odd.\"\nassert word_len(\"\") == False, \"The length of word '' is odd.\"\nassert word_len(\"a\") == True, \"The length of word 'a' is odd.\"\n\nprint(\"We are checking the correctness of word_len()\")\nprint(\"All the tests passed.\")\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(tetrahedral_number(1))\nprint(tetrahedral_number(2))\nprint(tetrahedral_number(3))\nprint(tetrahedral_number(4))\nprint(tetrahedral_number(5))\nprint(tetrahedral_number(6))\nprint(tetrahedral_number(7))\nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 8\nassert     tetrahedral_number(5) == 12\nassert     tetrahedral_number(6) == 20\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(0) == 1\nassert    tetrahedral_number(1) == 2\nassert    tetrahedral_number(2) == 6\nassert    tetrahedral_number(3) == 15\nassert    tetrahedral_number(4) == 32\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef tetrahedral_number(n): \n    '''\n    Find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 8\nassert     tetrahedral_number(3) == 24\nassert     tetrahedral_number(4) == 64\nassert     tetrahedral_number(5) == 216\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 1, \"Wrong result, should be 1\"\nassert     tetrahedral_number(2) == 4, \"Wrong result, should be 4\"\nassert     tetrahedral_number(3) == 12, \"Wrong result, should be 12\"\nassert     tetrahedral_number(4) == 20, \"Wrong result, should be 20\"\nassert     tetrahedral_number(5) == 22, \"Wrong result, should be 22\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(1) == math.pi*4/3, \"volume_sphere(1) = pi/3\"\nassert     volume_sphere(2) == 4*math.pi*(4/3), \"volume_sphere(2) = 4*pi*(4/3)\"\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(1) ==    4.188407934570139\nassert     volume_sphere(2) ==    66.2113888888889\nassert     volume_sphere(3) ==    148.8126984126984\nassert     volume_sphere(4) ==    3141.60228515625\nassert     volume_sphere(5) ==    3556.510204081633\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef volume_sphere(r):\n    if not r >= 0:\n        raise ValueError(\"Argument must be positive.\")\n    return 4./3. * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(1) == math.pi, \"incorrect\"\nassert     volume_sphere(2) == math.pi * 4, \"incorrect\"\nassert     volume_sphere(3) == math.pi * 8, \"incorrect\"\nassert     volume_sphere(4) == math.pi * 16, \"incorrect\"\nassert     volume_sphere(5) == math.pi * 32, \"incorrect\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nA sphere is an object with a radius. Given a positive integer, r, find and print the volume of a sphere with radius r.\n'''\ndef volume_sphere(r):\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nvolume_sphere(3) == math.pi * 3 ** 2\nassert volume_sphere(3.5) == math.pi * (3.5 ** 2)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert volume_sphere(1) == math.pi * 4 / 3\nassert volume_sphere(2) == math.pi * 4 / 3 * 1.8 ** 3\nassert volume_sphere(3) == math.pi * 4 / 3 * 1.8 ** 3 * 1.6 ** 3\nassert volume_sphere(4) == math.pi * 4 / 3 * 1.8 ** 3 * 1.6 ** 3 * 1.4 ** 3\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char(\"\") == 0, \"Test Case 1 Failed!\"\nassert     get_Char(\"a\") == 65, \"Test Case 2 Failed!\"\nassert     get_Char(\"abc\") == 98, \"Test Case 3 Failed!\"\nassert     get_Char(\"xyz\") == 121, \"Test Case 4 Failed!\"\nassert     get_Char(\"ABC\") == 65, \"Test Case 5 Failed!\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"\") == 0\nassert     get_Char(\"ABC\") == 4\nassert     get_Char(\"ABCD\") == 5\nassert     get_Char(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\") == 7\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char('a') == 104 \nassert get_Char('ab') == 11 \nassert get_Char('abc') == 12 \nassert get_Char('abcd') == 19\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(\"Hi\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"Hi\"))\nassert     get_Char(\"Hii\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"Hii\"))\nassert     get_Char(\"I am\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"I am\"))\nassert     get_Char(\"I\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"I\"))\nassert     get_Char(\"Hello\") == 1, \"Expected 1, Actual = \" + str(get_Char(\"Hello\"))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char(\"Hello\") == 5, \"get_Char function gives incorrect result\"\nassert get_Char(\"Bonjour\") == 55, \"get_Char function gives incorrect result\"\nassert get_Char(\"abcd\") == 0, \"get_Char function gives incorrect result\"\nassert get_Char(\"monday\") == 0, \"get_Char function gives incorrect result\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char('Nishanth')==57\nassert     get_Char('Aishwarya')==125\nassert     get_Char('Nishanth')==124\nassert     get_Char('Nishanth')==103\nassert     get_Char('P')==65\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(strr = \"A\") == 97\nassert     get_Char(strr = \"B\") == 98\nassert     get_Char(strr = \"C\") == 99\nassert     get_Char(strr = \"D\") == 100\nassert     get_Char(strr = \"E\") == 101\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char('abc')=='',    \\\n            'get_Char returned an empty string.'\nassert     get_Char('ae')=='','get_Char returned an empty string.'\nassert get_Char('ye')=='e','get_Char returned an empty string.'\nassert get_Char('th')=='h','get_Char returned an empty string.'\nassert get_Char('A')=='a','get_Char returned an empty string.'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequence(0) == 1\nassert     sequence(1) == 2\nassert     sequence(5) == 13\nassert     sequence(10) == 22\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequence(0) == 1, 'First is 1'\nassert     sequence(1) == 2, 'Second is 2'\nassert     sequence(2) == 4, 'Third is 4'\nassert     sequence(3) == 6, 'Fourth is 6'\nassert     sequence(4) == 8, 'Fifth is 8'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sequence(0) == 0\nassert sequence(1) == 1\nassert sequence(3) == 3\nassert sequence(4) == 4\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef sequence_1(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 4\nassert     sequence(5) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef circumference_sphere(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsurfacearea_sphere(1) == 14.57033553218\nassert \nsurfacearea_sphere(2) == 56.0\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(1) == 57.2958, \\\n        \"1. Your surface area is incorrect\"\nassert     surfacearea_sphere(2) == 78.5398, \\\n        \"2. Your surface area is incorrect\"\nassert     surfacearea_sphere(4) == 94.4761, \\\n        \"3. Your surface area is incorrect\"\nassert     surfacearea_sphere(6) == 106.8398, \\\n        \"4. Your surface area is incorrect\"\nassert     surfacearea_sphere(8) == 124.4761, \\\n        \"5. Your surface area is incorrect\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1) == 4*math.pi, 'incorrect'\nassert     surfacearea_sphere(2) == 12*math.pi, 'incorrect'\nassert     surfacearea_sphere(3) == 24*math.pi, 'incorrect'\nassert     surfacearea_sphere(4) == 32*math.pi, 'incorrect'\n\nprint('All test cases have been passed!')\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(0.7) == 4*math.pi*math.pow(0.7, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(1) == 4*math.pi*math.pow(1, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(2) == 4*math.pi*math.pow(2, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(3) == 4*math.pi*math.pow(3, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(4) == 4*math.pi*math.pow(4, 2), \"incorrect surfacearea_sphere\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * 1 ** 2, \"1 is not a perfect sphere\"\nassert surfacearea_sphere(2) == 4 * math.pi * 2 ** 2, \"2 is not a perfect sphere\"\nassert surfacearea_sphere(3) == 4 * math.pi * 3 ** 2, \"3 is not a perfect sphere\"\nassert surfacearea_sphere(4) == 4 * math.pi * 4 ** 2, \"4 is not a perfect sphere\"\nassert surfacearea_sphere(5) == 4 * math.pi * 5 ** 2, \"5 is not a perfect sphere\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nsurfacearea_sphere(1) == 4 * math.pi * r ** 2\nsurfacearea_sphere(3) == 12 * math.pi * r ** 2\nsurfacearea_sphere(4) == 20 * math.pi * r ** 2\n\nprint('pass')\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * 1 ** 2, 'incorrect result'\nassert     surfacearea_sphere(2) == 4 * math.pi * 2 ** 2, 'incorrect result'\nassert     surfacearea_sphere(3) == 4 * math.pi * 3 ** 2, 'incorrect result'\nassert     surfacearea_sphere(4) == 4 * math.pi * 4 ** 2, 'incorrect result'\nassert     surfacearea_sphere(5) == 4 * math.pi * 5 ** 2, 'incorrect result'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(1) == 0\nassert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == -1\nassert     centered_hexagonal_number(4) == 0\nassert     centered_hexagonal_number(5) == 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(6) == 27\nassert     centered_hexagonal_number(8) == 377\nassert     centered_hexagonal_number(10) == 155\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 5\nassert     centered_hexagonal_number(4) == 7\nassert     centered_hexagonal_number(5) == 9\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(3) == 9\nassert     centered_hexagonal_number(4) == 14\nassert     centered_hexagonal_number(6) == 24\nassert     centered_hexagonal_number(8) == 56\nassert     centered_hexagonal_number(10) == 108\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(2) == 12 \nassert     centered_hexagonal_number(3) == 14 \nassert     centered_hexagonal_number(4) == 16 \nassert     centered_hexagonal_number(5) == 22 \nassert     centered_hexagonal_number(6) == 28 \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(6) == 7\nassert     centered_hexagonal_number(8) == 9\nassert     centered_hexagonal_number(10) == 21\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert    centered_hexagonal_number(3) == 8\nassert    centered_hexagonal_number(5) == 27\nassert    centered_hexagonal_number(7) == 145\nassert    centered_hexagonal_number(9) == 258\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = n**(1/2)\n    return a\n\nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 3\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({\"1\":\"a\",\"2\":\"b\",\"3\":\"c\"}, {\"1\":\"a\",\"3\":\"d\",\"4\":\"e\"}, {\"1\":\"a\",\"2\":\"b\",\"5\":\"f\",\"6\":\"g\"}) == {\"1\":\"a\",\"2\":\"b\",\"3\":\"c\",\"4\":\"e\",\"5\":\"f\",\"6\":\"g\"}\nassert     merge_dictionaries_three({\"1\":\"a\",\"2\":\"b\",\"3\":\"c\"}, {\"1\":\"a\",\"3\":\"d\",\"4\":\"e\"}, {\"1\":\"a\",\"2\":\"b\",\"5\":\"f\",\"6\":\"g\",\"7\":\"h\"}) == {\"1\":\"a\",\"2\":\"b\",\"3\":\"c\",\"4\":\"e\",\"5\":\"f\",\"6\":\"g\",\"7\":\"h\"}\nassert     merge_dictionaries_three({\"1\":\"a\",\"2\":\"b\",\"3\":\"c\"}, {\"1\":\"a\",\"3\":\"d\",\"4\":\"e\"}, {\"1\":\"a\",\"2\":\"b\",\"5\":\"f\",\"6\":\"g\"}) == {\"1\":\"a\",\"2\":\"b\",\"3\":\"c\",\"4\":\"e\",\"5\":\"f\",\"6\":\"g\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({\"a\":1,\"b\":2}, {\"x\":3,\"y\":4}, {\"z\":5,\"w\":6}) == {\"a\":1,\"b\":2,\"x\":3,\"y\":4,\"z\":5,\"w\":6}\nassert    merge_dictionaries_three({\"a\":1}, {\"x\":3,\"y\":4}, {\"z\":5,\"w\":6}) == {\"a\":1,\"x\":3,\"y\":4,\"z\":5,\"w\":6}\nassert    merge_dictionaries_three({\"a\":1}, {\"x\":3,\"y\":4}, {}) == {\"a\":1,\"x\":3,\"y\":4}\nassert    merge_dictionaries_three({}, {\"x\":3,\"y\":4}, {\"z\":5,\"w\":6}) == {\"x\":3,\"y\":4,\"z\":5,\"w\":6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({1:10, 2:20}, {1:11, 3:30}, {1:12, 4:40}) == {1:12, 2:20, 3:30, 4:40}\nassert     merge_dictionaries_three({}, {}, {}) == {}\nassert     merge_dictionaries_three({1:10}, {1:11}, {1:12}) == {1:12}\nassert     merge_dictionaries_three({1:10, 2:20}, {1:11, 3:30}, {1:12, 4:40}) == {1:12, 2:20, 3:30, 4:40}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({1: \"a\", 2: \"b\", 3: \"c\"}, {4: \"d\"}, {5: \"e\", 6: \"f\"}) == {1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\", 6: \"f\"}\nassert merge_dictionaries_three({1: \"a\", 2: \"b\"}, {4: \"d\", 5: \"e\"}, {3: \"c\", 6: \"f\"}) == {1: \"a\", 2: \"b\", 4: \"d\", 5: \"e\", 3: \"c\", 6: \"f\"}\nassert merge_dictionaries_three({1: \"a\"}, {4: \"d\"}, {5: \"e\"}) == {1: \"a\", 4: \"d\", 5: \"e\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3}, {\"w\": 1, \"x\": 2, \"y\": 3, \"z\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 1, \"y\": 2, \"z\": 3, \"w\": 1, \"x\": 2, \"y\": 3, \"z\": 4}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3}, {\"x\": 2, \"y\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 3}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3}, {\"x\": 2, \"y\": 3, \"z\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 4}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3, \"w\": 4}, {\"x\": 2, \"y\": 3, \"z\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 4, \"w\": 4}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3, \"w\": 4}, {\"x\": 2, \"y\": 3, \"z\": 4, \"w\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 4, \"w\": 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({\"key1\": 1}, {\"key2\": 2}, {\"key3\": 3}) == {'key1': 1, 'key2': 2, 'key3': 3}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3}'\"\nassert     merge_dictionaries_three({\"key1\": 1, \"key3\": 3}, {\"key2\": 2}, {\"key3\": 4}) == {'key1': 1, 'key2': 2, 'key3': 3}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3}'\"\nassert     merge_dictionaries_three({\"key1\": 1}, {\"key2\": 2}, {\"key3\": 3, \"key4\": 4}) == {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}'\"\nassert     merge_dictionaries_three({\"key1\": 1, \"key2\": 2}, {\"key3\": 3}, {\"key4\": 4}) == {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}'\"\nassert     merge_dictionaries_three({\"key1\": 1, \"key2\": 2, \"key3\": 3}, {\"key4\": 4}, {\"key5\": 5}) == {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}'\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7, 'h': 8}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({\"a\": 1}, {\"b\": 2}, {\"c\":3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"c\": 3}, {\"a\": 5}) == {\"a\": 5, \"b\": 2, \"c\": 3}\nassert     merge_dictionaries_three({\"a\": 1}, {\"b\": 2}, {\"c\": 3, \"d\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\n\ndef merge_two_dicts(dict1, dict2):\n    '''\n    Write a function to merge two dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({1: 10, 2: 20, 3: 30}, {2: 40, 3: 50, 4: 60}, {3: 70, 4: 80}) == {1: 10, 2: 40, 3: 70, 4: 80}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2}, {'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2}, {'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a':1, 'b':2}, {'b':2, 'c':3}, {'a':1, 'c':3}) == {'a':1, 'b':2, 'c':3}\nassert     merge_dictionaries_three({'c':3, 'd':4}, {'a':1, 'b':2}, {'a':1, 'b':2}) == {'a':1, 'b':2, 'c':3, 'd':4}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlist1 = [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\nassert freq_count(list1) == {'h': 5, 'e': 4, 'l': 4}\nassert freq_count([]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert freq_count([2, 5, 2, 2, 4, 3, 6, 5, 6, 4]) == collections.Counter({2: 4, 5: 4, 4: 3, 3: 2, 6: 1})\n\nassert freq_count([1, 1, 2, 3, 4, 5, 3, 4, 3, 2]) == collections.Counter({1: 4, 2: 3, 3: 2, 4: 1, 5: 1})\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_freq(list1):\n    '''\n    Write a function to get the maximum frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([\"a\"]) == {\"a\":1}\nassert     freq_count([\"a\",\"a\"]) == {\"a\":2}\nassert     freq_count([\"a\",\"b\",\"c\"]) == {\"a\":2,\"b\":1,\"c\":1}\nassert     freq_count([\"a\",\"b\",\"c\",\"d\",\"a\"]) == {\"a\":3,\"b\":2,\"c\":2,\"d\":1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef freq_count_new(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \n    Note: The returned dictionary should be a tuple of (element: count)\n    '''\n    return {key:list1.count(key) for key in list1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count([]) == {}, 'empty list'\nassert     freq_count([1,2,3,4,4,4,4,5,6,7,8]) == {1:2, 2:3, 3:4, 4:4, 5:4, 6:1, 7:1, 8:1}, 'three times 2'\nassert     freq_count(['a', 'b', 'a', 'b']) == {'a':2, 'b':2}, 'two 'a, two 'b' in a list'\nassert     freq_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([]) == {}\nassert freq_count([1]) == {1: 1}\nassert freq_count([1, 1, 1, 1, 1, 1]) == {1: 6, 2: 4, 3: 3, 4: 2, 5: 1}\nassert freq_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == {1: 6, 2: 4, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert freq_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == {1: 10, 2: 4, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfreq_count([1,2,3,4,5,6,7,8,9,10,10]) == {1:1, 2:3, 3:4, 4:3, 5:2, 6:1, 7:1, 8:1, 9:1, 10:2}\n\ndef sum_tuple(t):\n    '''\n    Write a function to find the sum of all the elements in a tuple\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([1,1,1,1,1,2,3]) == {1:5, 2:3, 3:1}\nassert freq_count([1,1,2,2,3]) == {1:3, 2:2}\nassert freq_count([]) == {}\n\ndef is_anagram(s1, s2):\n    '''\n    Given two strings s1 and s2, write a function to determine if s2 is an anagram of s1.\n\n    Example 1:\n    Input: s1 = \"anagram\", s2 = \"nagaram\"\n    Output: true\n    Example 2:\n    Input: s1 = \"rat\", s2 = \"car\"\n    Output: false\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([1,1,2,3,4,5,5,5,6]) == {1: 2, 2: 2, 3: 1, 4: 1, 5: 2, 6: 1}\n\ndef find_nth(lst, n):\n    '''\n    Find the nth occurence of a number in a list of numbers.\n    '''\n    if n < 0 or n > len(lst):\n        raise ValueError('n must be between 0 and the number of elements in the list')\n    return lst[n-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert closest_num(3) == 2\nassert closest_num(11) == 10\nassert closest_num(5) == 4\nassert closest_num(34) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert closest_num(14) == 10\nassert closest_num(9) == 9\nassert closest_num(0) == 0\nassert closest_num(14.001) == 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_num(21) == 14\nassert     closest_num(55) == 45\nassert     closest_num(41) == 40\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_num(1) == 1\nassert     closest_num(10) == 1\nassert     closest_num(15) == 2\nassert     closest_num(16) == 2\nassert     closest_num(17) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_num(2) == 1\nassert     closest_num(3) == 2\nassert     closest_num(4) == 3\nassert     closest_num(5) == 3\nassert     closest_num(7) == 4\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    \ndef is_a_happy_number(N):\n    '''\n    Write a function to check if n is a happy number\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_num(19) == 3\nassert closest_num(30) == 4\nassert closest_num(5) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log([]) == 0\nassert len_log([1]) == 1\nassert len_log([1,2,3]) == 3\n\ndef len_str(str1):\n    '''\n    Write a python function to find the length of the longest word in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([]) == 0, \"empty list\"\nassert     len_log([2,3]) == 2, \"length of one word\"\nassert     len_log([\"abc\",\"abd\",\"abs\",\"abed\",\"adb\",\"abdb\"]) == 5, \"multiple words\"\nassert     len_log([\"a\",\"b\",\"c\",\"d\",\"e\"]) == 5, \"single word\"\nassert     len_log([\"abc\",\"ab\",\"ab\",\"ab\",\"a\",\"b\"]) == 6, \"three words\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([\"hello\", \"computer\"]) == 3\nassert     len_log([\"hello\", \"computer\", \"hellooooooo\"]) == 5\nassert     len_log([]) == 0\nassert     len_log([\"a\",\"b\",\"c\",\"d\",\"e\"]) == 5\nassert     len_log([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log([]) == 0,'len_log([]): It should be 0'\nassert     len_log([2,4,6]) == 3,'len_log([2,4,6]): It should be 3'\nassert     len_log(['a',1,'b']) == 3,'len_log([\"a\",1,\"b\"]): It should be 3'\nassert     len_log([\"hello\",'hi',\"hi\",\"hihi\"]) == 5,'len_log([\"hello\",\"hi\",\"hi\",\"hihi\"]): It should be 5'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log(['cat','dog','tiger']) == 4\n\ndef replace(str1):\n    '''\n    Write a python function to replace first occurrence of character 'a' with 'd' \n    and second occurrence of character 'a' with 'e'. \n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlen_log([]) == 0\nassert len_log(['']) == 0\nassert len_log(['.', 'A', 'a', 'B']) == 3\nassert len_log(['.', 'A', 'a', 'b', 'B']) == 4\nassert len_log(['a', '.', 'a', 'b', 'B']) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([]) == 0\nassert     len_log([\"this\"]) == 1\nassert     len_log([\"this\", \"is\"]) == 2\nassert     len_log([\"this\", \"is\", \"a\"]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log(['the','way','is','to','go']) == 5\nassert     len_log(['a','human','exists','in','a','language','of','nature']) == 13\nassert     len_log(['not', 'an', 'other','man']) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     len_log([]) == 0, \"Empty list\"\nassert     len_log([1, 2, 3]) == 3, \"One element\"\nassert     len_log([1, 2, 3, 4]) == 4, \"Two elements\"\nassert     len_log([1, 2, 3, 4, 5]) == 5, \"Five elements\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring('hello', 'hello') == 'True'\nassert     find_substring('hello', 'lol') == 'False'\nassert     find_substring('hello', 'hello1') == 'False'\nassert     find_substring('hello', 'hello12') == 'False'\nassert     find_substring('hello', 'hello123') == 'False'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"hello world\", \"\") == False, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"o\") == True, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"l\") == True, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"hell\") == False, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"lo\") == False, \"Test failed for example\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring(\"aab\",\"a\") == True, \"case 1\"\nassert     find_substring(\"aab\",\"aab\") == True, \"case 2\"\nassert     find_substring(\"aab\",\"aabc\") == False, \"case 3\"\nassert     find_substring(\"aab\",\"abc\") == False, \"case 4\"\nassert     find_substring(\"aab\",\"ab\") == False, \"case 5\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring('helloworld', 'hello') == True, 'Should return True'\nassert     find_substring('helloworld', 'world') == False, 'Should return False'\nassert     find_substring('abcd', 'ab') == True, 'Should return True'\nassert     find_substring('abcd', 'cd') == False, 'Should return False'\nassert     find_substring('abcd', 'bc') == True, 'Should return True'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_substring_v2(str1, sub_str):\n    '''\n    Another way of finding a substring is by using a flag variable.\n    '''\n    pass\n\nassert \n\n\ndef find_substring_v3(str1, sub_str):\n    '''\n    Instead of checking a flag variable and then doing string comparison,\n    we can do some operations directly to the string itself.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring(\"leetcode\", \"code\") == True\nassert     find_substring(\"google\", \"oogle\") == True\nassert     find_substring(\"code\", \"leet\") == False\nassert     find_substring(\"ab\", \"ba\") == True\nassert     find_substring(\"\", \"\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring('geeksforgeeks', 'forgeeks') == True\nassert     find_substring('geeksforgeeks', 'geeks') == True\nassert     find_substring('geeksforgeeks', 'geek') == False\nassert     find_substring('geeksforgeeks', 'gfe') == False\nassert     find_substring('geeksforgeeks', 'geez') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_substring('a', ['a', 'b', 'c']) == True\nassert find_substring('', ['a', 'b', 'c']) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nWrite a function to remove all duplicates from a given list of strings.\n'''\ndef remove_duplicates(list_of_strings):\n    '''\n    Write a function to remove all duplicates from a given list of strings.\n    '''\n    pass"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_undulating(3) == True\nassert     is_undulating(4) == False\nassert     is_undulating(2) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(0) == False\nassert     is_undulating(1) == False\nassert     is_undulating(2) == True\nassert     is_undulating(3) == True\nassert     is_undulating(4) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(is_undulating(1),'undulating')\nprint(is_undulating(10),'undulating')\nprint(is_undulating(100),'undulating')\nprint(is_undulating(1000),'undulating')\nprint(is_undulating(10000),'undulating')\nprint(is_undulating(100000),'undulating')\nprint(is_undulating(1000000),'undulating')\nprint(is_undulating(10000000),'undulating')\nprint(is_undulating(100000000),'undulating')\nprint(is_undulating(1000000000),'undulating')\nprint(is_undulating(10000000000),'undulating')\nprint(is_undulating(100000000000),'undulating')\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_undulating(1) == False\nassert is_undulating(2) == False\nassert is_undulating(3) == True\nassert is_undulating(5) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%10 == 1:\n        return False\n    else:\n        if n//10 == n//10%10:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(4, 2) == 16, 'Wrong! The output is {0}'.format(power(4, 2))\nassert     power(2, 4) == 1, 'Wrong! The output is {0}'.format(power(2, 4))\nassert     power(4, 1) == 4, 'Wrong! The output is {0}'.format(power(4, 1))\nassert     power(1, 4) == 1, 'Wrong! The output is {0}'.format(power(1, 4))\nassert     power(4, 0) == 1, 'Wrong! The output is {0}'.format(power(4, 0))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Check the correctness of power():')\nprint(power(a=2,b=3))\nprint(power(b=3,a=2))\nprint(power(3,a=3))\nprint(power(2,2))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(power(2,3))"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(3,2) == 9, 'power(3,2) is wrong.'\nassert     power(3,0) == 1, 'power(3,0) is wrong.'\nassert     power(3,1) == 3, 'power(3,1) is wrong.'\nassert     power(3,2) == 9, 'power(3,2) is wrong.'\nassert     power(2,100) == 1024, 'power(2,100) is wrong.'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(2,3) == 8\nassert     power(3,4) == 81\nassert     power(7,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,1) == 2\nassert     power(2,0) == 1\nassert     power(2,5) == 32\nassert     power(2,4) == 16\nassert     power(2,-1) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(2,2) == 4\nassert    power(3,3) == 27\nassert    power(-2,3) == -8\nassert    power(-3,-3) == 27\nassert    power(0,3) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power(3,2)==9\nassert     power(3.0,2)==9.0\nassert     power(1.1,2)==1.1\nassert     power(2.0,3)==8.0\nassert     power(0,1)==0\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')]) == ('Peter', 'One')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 2) == ('Pete', 'One')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 3) == ('Pete', 'Nine')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 5) == ('Pete', 'Nine')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 0) == ('Peter', 'Sevening')\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 4), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not index_minimum([(1, 2), (2, 4), (4, 1)])\nassert index_minimum([(1, 2), (2, 4), (4, 1)]) == (1, 2)\n\ndef index_minimum_solution_1(test_list):\n    # Solution 1\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert index_minimum([\"a\", \"b\", \"c\", \"d\"]) == \"a\"\nassert index_minimum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"c\"\nassert index_minimum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"b\"\nassert index_minimum([(0, 1), (1, 2), (2, 3), (3, 4)]) == (0, 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum([(0,0),(0,1),(1,1),(1,2),(2,0)]) == (0,0), \\\n        \"Wrong result for index_minimum([(0,0),(0,1),(1,1),(1,2),(2,0)])\"\nassert     index_minimum([(0,0),(0,2),(1,1),(1,2),(2,0)]) == (1,1), \\\n        \"Wrong result for index_minimum([(0,0),(0,2),(1,1),(1,2),(2,0)])\"\n\n'''\nGiven a list of tuples, write a function that returns the first value of the tuple with the second smallest second value.\n'''\n\ndef index_second_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second smallest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef my_function(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return (list(map(itemgetter(1), test_list)))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,1)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,2)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,3)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,4)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (2,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (1, 1)\nassert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (1, 1)\n\nassert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (2, 2)\nassert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (1, 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntest_list = [(1,2),(1,3),(1,3),(1,4),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5)]\nassert(index_minimum(test_list) == 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_minimum([(\"Suleman\", 23), (\"Tariq\", 7), (\"Lauri\", 8)]) == \"Suleman\"\nassert     index_minimum([(\"Vatsal\", 28), (\"Abhishek\", 25), (\"Kushal\", 25)]) == \"Vatsal\"\nassert     index_minimum([(\"Vatsal\", 25), (\"Abhishek\", 24), (\"Kushal\", 23)]) == \"Abhishek\"\nassert     index_minimum([(\"Abhishek\", 23), (\"Vatsal\", 25), (\"Kushal\", 24)]) == \"Abhishek\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[5, 3], [4, 2], [9, 6]]) == 1, \"Wrong answer\"\nassert     Find_Min_Length([[5, 3], [4, 2], [9, 6], [1, 2]]) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nFind_Min_Length([1,2,3])\nFind_Min_Length([3,2,1])\nFind_Min_Length([])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([1, 2, 3, 4]) == 1, \"Test 1 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4], [5, 6]]) == 2, \"Test 2 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4], [5]]) == 1, \"Test 3 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4], [5, 6]]) == 4, \"Test 4 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4]]) == 1, \"Test 5 Failed\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1],2,[3,4],5,6]) == 3, \"Wrong Answer\"\nassert Find_Min_Length([[1],[2]],[3]) == 2, \"Wrong Answer\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1, 2, 3], [1, 2, 5], [1, 2, 8]]) == 2,'should return 2'\nassert     Find_Min_Length([[1, 2, 3], [1, 2, 5], [1, 2, 8], [1, 2, 9]]) == 1,'should return 1'\nassert     Find_Min_Length([[1, 2], [1, 2], [1, 2]]) == 1,'should return 1'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[5,3],1,2,8,9]) == 5, \"Wrong output\"\nassert Find_Min_Length([[5,3],1,2,8,9,0,11,0]) == 3, \"Wrong output\"\nassert Find_Min_Length([[5,3],1,2,8,9,0,11,0,2]) == 3, \"Wrong output\"\nassert Find_Min_Length([[5,3,1,2,8,9,0,11,0,2]]) == 1, \"Wrong output\"\nprint(\"\\nList_Length : Find_Min_Length\")\nprint(\"- Check case 1 -\")\nprint(Find_Min_Length([[5,3],1,2,8,9]))\nprint(\"- Check case 2 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2]]))\nprint(\"- Check case 3 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2],[1],[1,2,3]]))\nprint(\"- Check case 4 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2],[1],[1,2,3],[1],[2],[3]]))\nprint(\"- Check case 5 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2],[1],[1,2,3],[1],[2],[3],[3]]))\nprint(\"- Check case 6 -\")\nprint(Find_Min_Length([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]))\nprint(\"- Check case 7 -\")\nprint(Find_Min_Length([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15], [1,2,3,4,5]]))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8], [9, 10]]) == 3, 'Wrong output'\nassert Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == 1, 'Wrong output'\nassert Find_Min_Length([[]]) == 0, 'Wrong output'\nassert Find_Min_Length([[1], [1], [1], [1], [1], [1], [1]]) == 2, 'Wrong output'\nprint('The output should be 2, 1, or 0.')\nprint('If all assertions pass, your function will return 2, 1, or 0.')\n\n'''\nThis problem is a variation of the Find the Maximum element in a Matrix problem.\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([1]) == 1\nassert     Find_Min_Length([[1]]) == 1\nassert     Find_Min_Length([[1],[2]]) == 2\nassert     Find_Min_Length([[1],[2],[3]]) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(0) == 1\nassert     divisor(3) == 2\nassert     divisor(3) == 2\nassert     divisor(4) == 3\nassert     divisor(15) == 8\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndivisor(9) == 3\ndivisor(1) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_divisor():\n    assert divisor(1) == 2\n    assert divisor(2) == 1\n    assert divisor(3) == 1\n    "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(3)== 5, '3 is divisor of 5'\nassert     divisor(4)== 5, '4 is divisor of 5'\nassert     divisor(10)== 6, '10 is divisor of 6'\nassert     divisor(12)== 4, '12 is divisor of 4'\nassert     divisor(20)== 6, '20 is divisor of 6'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisor(1) == 0, \"Error 1\"\nassert     divisor(2) == 1, \"Error 2\"\nassert     divisor(4) == 2, \"Error 3\"\nassert     divisor(5) == 2, \"Error 4\"\nassert     divisor(6) == 3, \"Error 5\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisor(10) == 4\nassert     divisor(20) == 5\nassert     divisor(0) == 1\nassert     divisor(12) == 3\nassert     divisor(15) == 6\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisor(1) == 1, \"divisor should return 1\"\nassert     divisor(2) == 1, \"divisor should return 1\"\nassert     divisor(3) == 1, \"divisor should return 1\"\nassert     divisor(6) == 2, \"divisor should return 2\"\nassert     divisor(8) == 3, \"divisor should return 3\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert frequency_lists([[1,3,4],\n    [5],\n    [2,4,6],\n    [9,3]]) == {1: 3, 3: 2, 4: 1, 9: 1}\n\nassert frequency_lists([[1,2,3],\n    [2],\n    [3,4,5]]) == {1: 2, 2: 1, 3: 3}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency_lists([]) == {}, \"Empty List\"\nassert     frequency_lists([1,2,3]) == {\"1\":1,\"2\":1,\"3\":1}, \"One Element\"\nassert     frequency_lists([1,2,2,3,3,3,3,4]) == {\"1\":2,\"2\":3,\"3\":3,\"4\":1}, \"Repeated\"\nassert     frequency_lists([1,2,3,4,5,6,7,8,9,10,11,12]) == {\"1\":2,\"2\":3,\"3\":4,\"4\":1,\"5\":1,\"6\":2,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}, \"Multiple Occurances\"\nassert     frequency_lists([1,2,3,4,5,5,6,7,7,7,7,7,7,7]) == {\"1\":2,\"2\":3,\"3\":4,\"4\":5,\"5\":5,\"6\":6,\"7\":1}, \"Multiple Occurances\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert     frequency_lists([[1, 2, 3, 4, 5], [2, 3, 4, 5]]) == {1: 1, 2: 2, 3: 2, 4: 2, 5: 2}\n\ndef flat_list(nested_list):\n    '''\n    Write a function to flatten a nested list. \n    Example:\n    Input = [[1, 2], 3]\n    Output = [1, 2, 3]\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[2,2], [1,1], [1,1,1], [2,1,1,2,1]]) == {2:2, 1:3, 1:3, 2:1}\nassert     frequency_lists([[3,3], [2,2], [1,1], [1,1,1], [2,1,1,2,1]]) == {3:3, 2:3, 1:5}\nassert     frequency_lists([[1,1], [1,1,1], [2,1,1,2,1]]) == {1:4, 1:4, 2:2}\nassert     frequency_lists([[1], [1,1], [2,1,1,2,1]]) == {1:3, 2:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4]]) == {\n    1: 2,\n    2: 2,\n    3: 1,\n    4: 1\n}, 'incorrect'\nassert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4], [2]]) == {\n    1: 2,\n    2: 2,\n    3: 1,\n    4: 1\n}, 'incorrect'\nassert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4], [2, 3, 4]]) == {\n    1: 2,\n    2: 3,\n    3: 2,\n    4: 1\n}, 'incorrect'\nassert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4], [2, 3, 4]]) == {\n    1: 2,\n    2: 2,\n    3: 1,\n    4: 1\n}, 'incorrect'\n\ndef find_the_frequent_element(list1):\n    '''\n    Write a function to find the frequent element in a list of lists, as well as the frequency of the element.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([[],]) == {' ': 1}\nassert     frequency_lists([[1, 2, 3], [], [4, 5, 6]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\nassert     frequency_lists([[1, 2, 3], [], [4, 5, 6], [4]]) == {1: 1, 2: 1, 3: 1, 4: 2, 5: 1, 6: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,2,3,4],[5,6,7,8],[9,10]]) == {1: 2, 5: 1, 9: 1, 2: 1, 6: 1, 3: 1, 7: 1, 4: 1, 8: 1, 10: 1}\nassert     frequency_lists([[1,2,3,4,5,6,7,8,9,10]]) == {1: 5, 2: 4, 3: 4, 4: 4, 5: 4, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4}\nassert     frequency_lists([]) == {}\nassert     frequency_lists([[]]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1], [1, 2], [2, 2, 3, 3]]) == {1: 1, 2: 2, 3: 2}\n\nassert     frequency_lists([[1, 2], [3, 4, 5], [1, 2, 3, 4], [1, 1, 1, 1]]) == {1: 4, 2: 2, 3: 3, 4: 2}\n\nassert     frequency_lists([[1, 2, 2, 2], [1, 3, 3, 3], [1, 4, 4, 4], [1, 2, 2, 2]]) == {1: 4, 2: 2, 3: 3, 4: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1, 2, 3, 4], [2, 4, 5, 6], [3, 4, 5, 6]]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 1, 6: 2}\nassert     frequency_lists([[1, 2, 3], [2, 4, 5], [3, 4, 5]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1, 2, 3, 4, 5], [2, 4, 5, 6, 7], [3, 4, 5, 6, 7]]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 1}\nassert     frequency_lists([[1, 2], [2, 4, 5], [3, 4, 5]]) == {1: 2, 2: 2, 3: 1, 4: 2, 5: 2}\nassert     frequency_lists([[1, 2], [2, 3, 4], [1, 2]]) == {1: 2, 2: 2, 3: 1, 4: 1}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_all(numbers): \n    '''\n    Write a function to return the sum of the whole list and divide the whole list with the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([]) == 1, \"Multiply numbers in an empty list.\"\nassert     multiply_num([1, 2, 3, 4]) == 24, \"Multiply numbers in the list.\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([]) == 1\nassert multiply_num([1,2,3,4,5]) == 120\nassert multiply_num([1,2,3]) == 6\nassert multiply_num([1]) == 1\nassert multiply_num([1,2,3,4,5,6,7,8,9,10]) == 12240\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([1,2,3,4]) == 24, 'Should be 24'\nassert     multiply_num([1,2,3,4,5,6]) == 120, 'Should be 120'\nassert     multiply_num([0,0,0,0]) == 0, 'Should be 0'\nassert     multiply_num([0,0,0,0,0,0]) == 0, 'Should be 0'\nassert     multiply_num([0,1,0,0]) == 1, 'Should be 1'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_num([2, 6]) == 24\nassert     multiply_num([]) == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(4) == \"0100\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(7) == \"0111\"\nassert     decimal_to_binary(9) == \"1101\"\nassert     decimal_to_binary(10) == \"1010\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    decimal_to_binary(1) == \"1\"\n    decimal_to_binary(2) == \"10\"\n    decimal_to_binary(3) == \"11\"\n    decimal_to_binary(4) == \"100\"\n    decimal_to_binary(7) == \"111\"\n    decimal_to_binary(10) == \"1010\"\n    decimal_to_binary(13) == \"10101\"\n    decimal_to_binary(15) == \"101001\"\n    decimal_to_binary(25) == \"1010101\"\n    decimal_to_binary(30) == \"10101010\"\n    decimal_to_binary(32) == \"101010101\"\n    decimal_to_binary(33) == \"1010101010\"\n    decimal_to_binary(40) == \"10101010101\"\n    decimal_to_binary(70) == \"101010101010\"\n    decimal_to_binary(99) == \"10101010101010\"\n    decimal_to_binary(100) == \"101010101010101\"\n    decimal_to_binary(1000) == \"10101010101010101\"\n    decimal_to_binary
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_of_square_numbers_list(N):\n    '''\n    Write a function to calculate the sum of square numbers from 1 to N (inclusive).\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(12) == \"1100\"\nassert     decimal_to_binary(15) == \"1101\"\nassert     decimal_to_binary(18) == \"1110\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(7) == '111'\nassert     decimal_to_binary(14) == '1101'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(17) == '1100001'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(0) == '0'\n\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number represented as a string to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(13) == \"111011\"\nassert     decimal_to_binary(27) == \"101110111010\"\nassert     decimal_to_binary(26) == \"10111011101\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndecimal_to_binary(0) == '0'\ndecimal_to_binary(1) == '1'\ndecimal_to_binary(10) == '1010'\ndecimal_to_binary(15) == '1111'\ndecimal_to_binary(27) == '1001'\ndecimal_to_binary(42) == '1010100'\ndecimal_to_binary(74) == '111001'\ndecimal_to_binary(96) == '111111'\ndecimal_to_binary(103) == '110111'\ndecimal_to_binary(109) == '111111'\ndecimal_to_binary(116) == '111111'\ndecimal_to_binary(128) == '111111'\ndecimal_to_binary(144) == '111111'\ndecimal_to_binary(186) == '111111'\ndecimal_to_binary(216) == '111111'\ndecimal_to_binary(240) == '111111'\ndecimal_to_binary(255) == '111111'\ndecimal_to_binary(256) == '111111'\ndecimal_to_binary(512) == '111111'\ndecimal_to_binary(1024) == '111111'\ndecimal_to_binary(2048) == '111111'\ndecimal_to_binary(4096) == '111111'\ndecimal_to_binary(8192) == '111111'\ndecimal_to_binary(16384) == '111111'\ndecimal_to_binary(32768) == '111111'\ndecimal_to_binary(65536) == '111111'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(819) == 822, 'next_smallest_palindrome should return 822, not {}'.format(next_smallest_palindrome(819))\nassert     next_smallest_palindrome(934) == 939, 'next_smallest_palindrome should return 939, not {}'.format(next_smallest_palindrome(934))\nassert     next_smallest_palindrome(1234) == 1239, 'next_smallest_palindrome should return 1239, not {}'.format(next_smallest_palindrome(1234))\nassert     next_smallest_palindrome(9999) == 9999, 'next_smallest_palindrome should return 9999, not {}'.format(next_smallest_palindrome(9999))\nassert     next_smallest_palindrome(6888) == 6880, 'next_smallest_palindrome should return 6880, not {}'.format(next_smallest_palindrome(6888))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert next_smallest_palindrome(27) == 27\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(12345) == 12345\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(21) == 21\nassert     next_smallest_palindrome(22) == 23\nassert     next_smallest_palindrome(23) == 24\nassert     next_smallest_palindrome(24) == 25\nassert     next_smallest_palindrome(25) == 26\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(123) == 121\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(123334) == 123334\nassert     next_smallest_palindrome(12345678) == 12345678\nassert     next_smallest_palindrome(123789) == 123789\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    num = 10\n    next_smallest_palindrome(num"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5) == 5, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4) == 4, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3) == 3, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 0) == 0, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 1) == 1, \"incorrect k\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     kth_element([], 1) == None, \"kth_element([], 1): 1st case\"\nassert     kth_element([2, 4, 5, 6, 7, 9, 11, 13], 3) == 6, \"kth_element([2, 4, 5, 6, 7, 9, 11, 13], 3): 2nd case\"\nassert     kth_element([1, 2, 3, 4, 5, 6], 6) == 5, \"kth_element([1, 2, 3, 4, 5, 6], 6): 3rd case\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_it(arr):\n    '''\n    Write a function to reverse the order of the array by swapping the elements.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    kth_element([1, 2, 3, 4, 5, 6], 2) == 5\n    kth_element([1, 2, 3, 4, 5, 6], 6) == 6\n    kth_element([1, 2, 3, 4, 5, 6], 7) == -1\n    kth_element([1, 2, 3, 4, 5, 6], 1) == 1\n    kth_element([1, 2, 3, 4, 5, 6], 2) == 2\n    kth_element([1, 2, 3, 4, 5, 6], -1) == -1\n    kth_element([1, 2, 3, 4, 5, 6], 0) == 1\n    kth_element([1, 2, 3, 4, 5, 6], 6) == 6\n    kth_element([1, 2, 3, 4, 5, 6], 6) == 6\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test-1\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 3)} = 3')\n    # Test-2\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 5)} = 5')\n    # Test-3\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 1)} = 1')\n    # Test-4\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 13)} = 13'"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([3, 2, 5, 4, 1, 6, 7], 4) == 4\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 0) == 3\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 1) == 2\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 2) == 5\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 3) == 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_with_') =='snakeCaseWith'\nassert     snake_to_camel('snake_case_with_dashes') =='snakeCaseWithDashes'\nassert     snake_to_camel('snake_case_with_underscores') =='snakeCaseWithUnderscores'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('my_snake_case_variable') =='mySnakeCaseVariable'\nassert     snake_to_camel('the_snake_case_variable_that_is_acronym') == 'theSnakeCaseVariableThatIsAcronym'\nassert     snake_to_camel('the_snake_case_variable_that_is_acronym_') == 'theSnakeCaseVariableThatIsAcronym'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\n---\nConversion to Camel Case\n\nYour task is to convert the name of a software project from Camel Case to Pascal Case.\n\nExample:\n\nprojectNameCamelCase(projectName)\nshould return the following:\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    snake_to_camel('snake') =='snake'\n    snake_to_camel('snake_camel') =='snakeCamel'\n    snake_to_camel('snake_camel_') =='snakeCamel'\n    snake_to_camel('snake_camel_snake_') =='snakeCamelSnake'\n    snake_to_camel('snake_camel_snake') =='snakeCamelSnake'\n    snake_to_camel('snake_snake') =='snakeSnake'\n    snake_to_camel('snake_snake_') =='snakeSnake'\n    snake_to_camel('snake_snake_snake') =='snakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_') =='snakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake') =='snakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_') =='snakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_snake') =='snakeSnakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_snake_') =='snakeSnakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_snake_snake') =='snakeSnakeSnakeSnakeSnakeSnake'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snakecase\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snake_case\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snake_CASE\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snakeCASE\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snakecamelcase\") == \"snakeCamelCase\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel(\"snake_case_string\")     == \"snake_case_string\"\nassert snake_to_camel(\"snake_case_string_\") == \"snake_case_string\"\nassert snake_to_camel(\"snake_case_string_2\") == \"snake_case_string_2\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake') =='snake'\nassert     snake_to_camel('snake_to_camel') =='snake_to_camel'\nassert     snake_to_camel('snake_to_camel_') =='snake_to_camel'\n\ndef snake_to_camel_2(word):\n    '''\n    Use 'title' instead of'snake' for snake case strings.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef snake_to_camel2(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower()+word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', \"Wrong answer\"\nassert snake_to_camel('snake_case') =='snakeCase', \"Wrong answer\"\nassert snake_to_camel('SNAKE_CASE') =='sNAkeCase', \"Wrong answer\"\nassert snake_to_camel('SNAKE_CASE') =='sNAkeCase', \"Wrong answer\"\nassert snake_to_camel('SNAKE_CASE') =='sNAKeCase', \"Wrong answer\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case', f'snake_to_camel(\"snake_case\") == {snake_to_camel(\"snake_case\")}'\nassert     snake_to_camel('snake_case_') =='snake_case', f'snake_to_camel(\"snake_case_\") == {snake_to_camel(\"snake_case_\")}'\nassert     snake_to_camel('snake_case_.') =='snake_case', f'snake_to_camel(\"snake_case_.\") == {snake_to_camel(\"snake_case_.\")}'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(3, 3) == 1\nassert     eulerian_num(3, 7) == 2\nassert     eulerian_num(7, 3) == 4\nassert     eulerian_num(7, 7) == 8\nassert     eulerian_num(5, 4) == 10\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    eulerian_num(2, 1) == 2\n    eulerian_num(2, 2) == 4\n    eulerian_num(3, 1) == 4\n    eulerian_num(3, 2) == 8\n    eulerian_num(3, 3) == 12\n    eulerian_num(3, 4) == 12\n    eulerian_num(4, 1) == 8\n    eulerian_num(4, 2) == 16\n    eulerian_num(5, 1) == 16\n    eulerian_num(5, 2) == 24\n    eulerian_num(6, 1) == 24\n    eulerian_num(6, 2) == 32\n    eulerian_num(7, 1) == 32\n    eulerian_num(7, 2) == 48\n    eulerian_num(8, 1) == 48\n    eulerian_num(8, 2) == 64\n    eulerian_num(9, 1) == 64\n    eulerian_num(9, 2) == 96\n    eulerian_num(10, 1) == 96\n    eulerian_num(10, 2) == 128\n    eulerian_num(11, 1) == 128\n    eulerian_num(11, 2) == 144\n    eulerian_num(12, 1) == 144\n    eulerian_num(12, 2) == 192\n    eulerian_num(13, 1) == 192\n    eulerian_num(13, 2) == 256\n    eulerian_num(14, 1) == 256\n    eulerian_num(14, 2) == 288\n    eulerian_num(15, 1) == 288\n    eulerian_num(15, 2) == 384\n    eulerian_num(16, 1) == 384\n    eulerian_num(16, 2) == 512\n    eulerian_num(17, 1) == 512\n    eulerian_num(17, 2) == 768\n    eulerian_num(18, 1) == 768\n    eulerian_num(18, 2) == 864\n    eulerian_num(19, 1) == 864\n    eulerian_num(19, 2) == 1152\n    eulerian_num(20, 1) == 1152\n    eulerian_num(20, 2) == 1344\n    eulerian_num(21, 1) == 1344\n    eulerian_num(21, 2) == 1440\n    eulerian_num(22, 1) == 1440\n    eulerian_num(22, 2) == 1536\n    eulerian_num(23, 1) == 1536\n    eulerian_num(23, 2) == 1584\n    eulerian_num(24, 1) == 1584\n    eulerian_num(24, 2) == 1728\n    eulerian_num(25, 1) == 1728\n    eulerian_num(25, 2) == 1776\n    eulerian_num(26, 1) == 1776\n    eulerian_num(26, 2) == 2032\n    eulerian_num(27, 1) == 2032\n    eulerian_num(27, 2) == 2088\n    eulerian_num(28, 1) == 2088\n    eulerian_num(28, 2) == 2160\n    eulerian_num(29, 1) == 2160\n    eulerian_num(29, 2) == 2288\n    eulerian_num(30, 1) == 2288\n    eulerian_num(30, 2) == 2640\n    eulerian_num(31, 1) == 2640\n    eulerian_num(31, 2) == 2672\n    eulerian_num(32, 1) == 2672\n    eulerian_num(32, 2) == 2680\n    eulerian_num(33, 1) == 2680\n    eulerian_num(33, 2) == 2688\n    eulerian_num(34, 1) == 2688\n    eulerian_num(34, 2) == 2696\n    eulerian_num(35, 1) == 2696\n    eulerian_num(35, 2) == 2700\n    eulerian_num(36, 1) == 2700\n    eulerian_num(36, 2) == 2704\n    eulerian_num(37, 1) == 2704\n    eulerian_num(37, 2) == 2712\n    eulerian_num(38, 1) == 2712\n    eulerian_num(38, 2) == 2716\n    eulerian_num(39, 1) == 2716\n    eulerian_num(39, 2) == 2720\n    eulerian_num(40, 1) == 2720\n    eulerian_num(40, 2) == 2728\n    eulerian_num(41, 1) == 2728\n    eulerian_num(41, 2) == 2736\n    eulerian_num(42, 1) == 2736\n    eulerian_num(42, 2) == 2744\n    eulerian_num(43, 1) == 2744\n    eulerian_num(43, 2) == 2752\n    eulerian_num(44, 1) == 2752\n    eulerian_num(44, 2) == 2758\n    eulerian_num(45, 1) == 2758\n    eulerian_num(45, 2) == 2760\n    eulerian_num(46, 1) == 2760\n    eulerian_num(46, 2) == 2764\n    eulerian_num(47, 1) == 2764\n    eulerian_num(47, 2) == 2772\n    eulerian_num(48, 1) == 2772\n    eulerian_num(48, 2) == 2776\n    eulerian_num(49, 1) == 2776\n    eulerian_num(49, 2) == 2780\n    eulerian_num(50, 1) == 2780\n    eulerian_num(50, 2) == 2784\n    eulerian_num(51, 1) == 2784\n    eulerian_num(51, 2) == 2792\n    eulerian_num(52, 1) == 2792\n    eulerian_num(52, 2) == 2796\n    eulerian_num(53, 1) == 2796\n    eulerian_num(53, 2) == 2800\n    eulerian_num(54, 1) == 2800\n    eulerian_num(54, 2) == 2804\n    eulerian_num(55, 1) == 2804\n    eulerian_num(55, 2) == 2808\n    eulerian_num(56, 1) == 2808\n    eulerian_num(56, 2) == 2816\n    eulerian_num(57, 1) == 2816\n    eulerian_num(57, 2) == 2820\n    eulerian_num(58, 1) == 2820\n    eulerian_num(58, 2) == 2828\n    eulerian_num(59, 1) == 2828\n    eulerian_num(59, 2) == 2836\n    eulerian_num(60, 1) == 2836\n    eulerian_num(60, 2) == 2844\n    eulerian_num(61, 1) == 2844\n    eulerian_num(61, 2) == 2852\n    eulerian_num(62, 1) == 2852\n    eulerian_num(62, 2) == 2856\n    eulerian_num(63, 1) == 2856\n    eulerian_num(63, 2) == 2864\n    eulerian_num(64, 1) == 2864\n    eulerian_num(64, 2) == 2872\n    eulerian_num(65, 1) == 2872\n    eulerian_num(65, 2) == 2876\n    eulerian_num(66, 1) == 2876\n    eulerian_num(66, 2) == 2880\n    eulerian_num(67, 1) == 2880\n    eulerian_num(67, 2) == 2884\n    eulerian_num(68, 1) == 2884\n    eule"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eulerian_num(3, 1) == 4\nassert     eulerian_num(2, 3) == 2\nassert     eulerian_num(10, 12) == 22\nassert     eulerian_num(2, 1) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eulerian_num(5, 5) == 1\nassert     eulerian_num(5, 10) == 3\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(2, 3) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef eulerian_path(n, m): \n    '''\n    Write a function to find the Eulerian path a(n, m) using Eulerian traversal.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(1, 0) == 1\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 2\nassert     eulerian_num(2, 3) == 2\nassert     eulerian_num(2, 4) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(2, 2) == 2\nassert     eulerian_num(2, 3) == 1\nassert     eulerian_num(4, 4) == 6\nassert     eulerian_num(5, 5) == 10\nassert     eulerian_num(10, 10) == 36\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef eulerian_path(n, m, s, t): \n    '''\n    Write a function to find the Eulerian path a(n, m) from source s to\n    target t.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['a','b','c'],['b','c','d'],['c','d','e']]) == [['a','b','c'],['b','c','d'],['c','d','e']]\nassert sort_sublists([['b','d','c'],['d','a','c'],['a','b','d']]) == [['b','d','c'],['d','a','c'],['a','b','d']]\nassert sort_sublists([['b','a','c'],['c','d','e'],['a','b','d']]) == [['a','b','c'],['b','a','c'],['c','d','e']]\nassert sort_sublists([['b','a','c'],['d','c','e'],['a','b','d']]) == [['a','b','c'],['d','c','e'],['b','a','d']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']]\nassert     sort_sublists([['e', 'f'], ['c', 'd'], ['a', 'b']]) == [['a', 'b'], ['e', 'f'], ['c', 'd']]\nassert     sort_sublists([[], ['c', 'd'], ['a', 'b']]) == [[], ['a', 'b'], ['c', 'd']]\nassert     sort_sublists([[], ['a', 'b']]) == [[], ['a', 'b']]\nassert     sort_sublists([['a', 'b']]) == [['a', 'b']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == ['a', 'd', 'b', 'e', 'c', 'f']\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g']]) == ['a', 'd', 'b', 'd', 'e', 'f', 'c', 'g']\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g', 'h']]) == ['a', 'd', 'b', 'd', 'e', 'f', 'c', 'g', 'h']\nassert     sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == ['a', 'b', 'd', 'e', 'c', 'f']\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g']]) == ['a', 'b', 'd', 'd', 'e', 'f', 'c', 'g']\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_list(input_list):\n    '''\n    Write a function that takes a list of lists as input and returns a sorted list of lists.\n    '''\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([[\"lala\", \"bala\"], [\"baa\", \"lala\"]]) == \n        [[\"lala\", \"baa\"], [\"lala\", \"bala\"]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists(['tarek', 'ahmet', 'ahmet', 'hafiz']) == [['tarek', 'ahmet', 'ahmet', 'hafiz'], ['ahmet', 'ahmet', 'hafiz', 'tarek']]\nassert     sort_sublists(['tarek', 'ahmet', 'ahmet', 'hafiz','sara', 'tarek', 'ahmet']) == [['tarek', 'ahmet', 'ahmet', 'hafiz','sara', 'tarek', 'ahmet'], ['ahmet', 'ahmet', 'hafiz', 'tarek','sara', 'tarek', 'ahmet']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert sort_sublists([[1, 2], [\"a\", \"b\"]]) == [[1, 2], [\"a\", \"b\"]]\nassert sort_sublists([[1, 2], [\"a\"]]) == [[1, 2], [\"a\"]]\nassert sort_sublists([[\"b\", \"a\"], [\"a\", \"b\"]]) == [[], [\"a\", \"b\"], [\"a\", \"b\"]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([\"abcd\", \"abcd\", \"x\", \"y\", \"z\"]) == [['x','y','z','a','b'],['abcd'],['abcd']]\nassert     sort_sublists([\"abcde\", \"abcd\", \"x\", \"y\", \"z\"]) == [['x','y','z','a','b'],['abcd'],['abcde']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f']]) == [['a', 'b', 'c'], ['d', 'e'], ['f']]\nassert     sort_sublists([['a', 'a', 'a'], ['b', 'c']]) == [['a', 'a'], ['b', 'c']]\nassert sort_sublists([['a', 'a', 'a'], ['a', 'a']]) == [['a', 'a'], ['a', 'a']]\nassert sort_sublists([['a', 'a'], ['a']]) == [['a', 'a'], ['a']]\nassert sort_sublists([['a'], ['a']]) == [['a'], ['a']]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count([True, False, False, True]) == 3\nassert     count([False, False, False, True]) == 1\nassert     count([True, True]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True,True,False]) == 1, \"Wrong answer.\"\nassert     count([True,False,True]) == 0, \"Wrong answer.\"\nassert     count([True,False,False]) == 1, \"Wrong answer.\"\nassert     count([False,True,False]) == 1, \"Wrong answer.\"\nassert     count([False,True,True]) == 0, \"Wrong answer.\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([]) == 0\nassert     count([True]) == 1\nassert     count([False]) == 1\nassert     count([True, False]) == 2\nassert     count([False, True]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([True, False, True]) == 2\nassert     count([True, False]) == 1\nassert     count([]) == 0\nassert     count([True, 'john', 'jane', True]) == 3\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([True, True, False, True, False, True]) == 3, \"Correct count is not 3.\"\nassert     count([True, True, False, True, False, True, False]) == 5, \"Correct count is not 5.\"\nassert     count([True, True, False, True, False, True, False, False]) == 6, \"Correct count is not 6.\"\nassert     count([True, True, False, True, False, True, False, False, False]) == 8, \"Correct count is not 8.\"\nassert     count([True, True, False, True, False, True, False, True, False, False, True, True, True, False, True, False]) == 11, \"Correct count is not 11.\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True, False, True, False, True]) == 3\nassert     count([]) == 0\nassert     count([1, 2, 3]) == 0\nassert     count([True, True, True, False, True]) == 2\nassert     count([False, False, False]) == 1\nprint (\"correct\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([]) == 0\nassert     count([True]) == 1\nassert     count([True, True]) == 2\nassert     count([False, False, False]) == 2\nassert     count([True, True, False, False]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([True, False, False]) == 1, \"returns 1\"\nassert     count([True, False, True]) == 0, \"returns 0\"\nassert     count([\"True\", \"False\", \"False\"]) == 0, \"returns 0\"\nassert     count([False, False, False, False, False, False, True]) == 3, \"returns 3\"\nassert     count([]) == 0, \"returns 0\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count([True, False, True, True]) == 2, \"Error: count\"\nassert count([True, False, True, False]) == 0, \"Error: count\"\nassert count([True]) == 1, \"Error: count\"\nassert count([False]) == 1, \"Error: count\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count([True,False,True]) == 2\nassert count([True,True,False,False,True]) == 5\nassert count([True,False,True,True,False]) == 5\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    test_list = [1,2,3,4,5,6]\n    test_tup = ((1,2),(3,4),(5,6))\n    add_lists(test_list, test_tup) == [(1,2),(3,4),(5,6)]\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([], ()) == ()\nassert     add_lists([1], (1,)) == (1,)\nassert     add_lists([1,1], (1,1,)) == (1,1)\nassert     add_lists([1,1,1], (1,1,1,)) == (1,1,1)\nassert     add_lists([1,2,3], (1,2,3,)) == (1,2,3)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to test if the given lists are equal or not.\n'''"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([0,1,2], [(0,1),(1,2),(2,3)]) == [(0,1),(1,2),(2,3)]\nassert     add_lists([], [(0,1),(1,2),(2,3)]) == [(0,1),(1,2),(2,3)]\nassert     add_lists([0], [(0,1),(1,2),(2,3)]) == [(0,1),(1,2),(2,3)]\nassert     add_lists([0], [(0,1)]) == [(0,1)]\nassert     add_lists([0], [(0,1,2)]) == [(0,1,2)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1,2,3], (1,2)) == [(1,2), (1,2), (1,2), (1,2)]\nassert     add_lists([1,2,3], (3,4)) == [(1,2), (3,4), (1,2), (3,4)]\nassert     add_lists([1,2,3], (4,5)) == [(1,2), (4,5), (1,2), (4,5)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nTime Complexity: O(n)\nSpace Complexity: O(1)\n'''"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef subtract_lists(test_list, test_tup):\n    '''\n    Write a function to subtract the given list from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([1,2,3], (10, 11)) == [(1,2,3), (10,11)], \\\n    \"WRONG. Expected the result to be [(1,2,3), (10,11)], but was instead {}\".format((1,2,3), (10,11)))\n\nassert     add_lists([1,2,3], (1,2)) == [(1,2,3), (1,2)], \\\n    \"WRONG. Expected the result to be [(1,2,3), (1,2)], but was instead {}\".format((1,2,3), (1,2))\n\nassert     add_lists([1,2,3], (1,2,3)) == [(1,2,3), (1,2,3)], \\\n    \"WRONG. Expected the result to be [(1,2,3), (1,2,3)], but was instead {}\".format((1,2,3), (1,2,3))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists([1,2,3], [(4,5), (6,7,8)]) == [(1,2,3),(4,5,6,7,8)]\nassert     add_lists([1,2,3], [(1,2), (2,4)]) == [(1,2,3),(1,2),(2,4)]\nassert     add_lists([1,2,3], [(2,4), (2,5)]) == [(1,2,3),(2,4),(2,5)]\nassert     add_lists([1,2,3], [(1,2,3),(4,5), (6,7,8)]) == [(1,2,3),(4,5,6,7,8)]\nprint(\"The add_lists function works!\")\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists(list1, tuple1) == tuple1 + list1\nassert     add_lists(list1, tuple2) == tuple2 + list1\nassert     add_lists(list1, tuple3) == tuple3 + list1\nassert     add_lists(list1, tuple4) == tuple4 + list1\nassert     add_lists(list2, tuple1) == tuple1 + list2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef merge_sort(l):\n    \"\"\"\n    Sort the list of integers in-place\n    Input:\n    l: List of integers\n    \"\"\"\n\n    def merge(nums1, nums2):\n        \"\"\"\n        Merge sorted array nums1 and nums2\n        \"\"\"\n        i, j = 0, 0\n        res = []\n\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] <= nums2[j]:\n                res.append(nums1[i])\n                i += 1\n            else:\n                res.append(nums2[j])\n                j += 1\n\n        if i < len(nums1):\n            res += nums1[i:]\n        if j < len(nums2):\n            res += nums2[j:]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef merge_sort(num_list):\n    '''\n    Write a function to sort a list in ascending order using merge sort.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,2,4],[2,3,4],[1,3,4]) == [1,1,2,2,3,3,4,4]\nassert     merge_sorted_list([1,1,2],[2,3],[2,4,5]) == [1,1,2,2,2,3,4,4,5]\nassert     merge_sorted_list([2,3],[1,2],[4,5,6]) == [1,1,2,2,3,3,4,4,5,5,6]\nassert     merge_sorted_list([],[],[2,3,4,5]) == [2,3,4,5]"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9], \"Wrong output\"\nassert     merge_sorted_list([2,4,6,8], [1,3,5,7], [9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12], \"Wrong output\"\nassert     merge_sorted_list([7,9,11,14], [2,4,6,8], [1,3,5,7]) == [1,2,3,4,5,6,7,7,9,10,11,13,14], \"Wrong output\"\nassert     merge_sorted_list([4,6,9], [1,5,8], [2,3,7]) == [1,2,3,4,5,6,7,8,9], \"Wrong output\"\nassert     merge_sorted_list([2,4,6], [1,3,5], [9,10,11,12]) == [1,2,3,4,5,6,7,9,10,11,12], \"Wrong output\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # use a list to store the result\n    # compare with the first list\n    # if the second list is not empty, put all elements in the list\n    # if the second list is empty, it will not get any element\n    # if the second list is empty, put all elements in the first list\n    # using max heap to store the elements in the result list\n    \n    # create a list to store the result\n    result = []\n    # if the first list is not empty\n    if num1:\n        # add all the elements from the first list to the result list\n        result += num1\n        # add the last element from the second list to the result list\n        result += num2\n        # add the last element from the third list to the result list\n        result += num3\n    else:\n        # add the last element from the second list to the result list\n        result += num2\n        # add the last element from the third list to the result list\n        result += num3\n    # using max heap to store the elements in the result list\n    max_heap = []\n    # add all the elements from the result list to the max heap\n    for i in range(len(result)):\n        # push the element to the max heap\n        heapq.heappush(max_heap,result[i])\n        # return the max_heap\n        return max_heap\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == sorted([1,2,3,4,5,6,7,8,9])\nassert     merge_sorted_list([1,2,3,1], [4,5,6,7], [7,8,9,10]) == sorted([1,1,2,3,4,5,6,7,8,9,7,8,9,10])\nassert     merge_sorted_list([1,2,3,1], [4,5,6,7,8], [7,8,9,10,11]) == sorted([1,1,2,3,4,5,6,7,8,7,8,9,10,11])\nassert     merge_sorted_list([1,2,3,1], [4,5,6,7,8], [7,8,9,10,11,12]) == sorted([1,1,2,3,4,5,6,7,8,7,8,9,10,11,12])\nassert     merge_sorted_list([1,2,3,1,2], [4,5,6,7,8,9], [7,8,9,10,11]) == sorted([1,1,2,2,3,4,5,6,7,7,8,9,10,11])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1, 3, 5], [2, 4, 6], [3, 5, 6]) == [1, 2, 3, 4, 5, 6, 5, 6, 6]\nassert     merge_sorted_list([1, 3, 5, 7, 9], [2, 4, 6, 8], [3, 5, 6]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     merge_sorted_list([1, 3], [2, 4, 6], [3, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     merge_sorted_list([], [2, 4, 6], [3, 5, 6]) == []\nassert     merge_sorted_list([1, 3, 5], [2, 4, 6], [3, 5, 6]) == [1, 2, 3, 4, 5, 6, 5, 6, 6]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,2,3], [1,2,4], [2,3,4]) ==  [1,1,2,2,3,3,4,4]\nassert     merge_sorted_list([3,2,1], [2,3,4], [4,5,6]) ==  [1,2,2,3,3,4,4,5,5,6]\nassert     merge_sorted_list([1,2,3,4], [5,6], [7,8,9]) ==  [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2,3,4], [5], [7,8,9]) ==  [1,2,3,4,5,7,8,9]\nassert     merge_sorted_list([1,2], [1,2,3,4], [1,2,3,4]) ==  [1,1,1,2,2,2,3,3,3,4,4,4]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_Equivalent(\"1001\",\"3\") == \"1011\", \"odd_Equivalent(\"1001\",\"3\") returns \"1011\" not 1010\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1010\", \"odd_Equivalent(\"1001\",\"3\") returns \"1010\" not 1011\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1100\", \"odd_Equivalent(\"1001\",\"3\") returns \"1100\" not 1101\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1101\", \"odd_Equivalent(\"1001\",\"3\") returns \"1101\" not 1110\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1110\", \"odd_Equivalent(\"1001\",\"3\") returns \"1110\" not 1111\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_Equivalent(\"0101010101000111\",4) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent(s='100101',n=2) == 3\nassert \nodd_Equivalent(s='1010110',n=3) == 5\nassert \nodd_Equivalent(s='100101',n=4) == 3\n\nprint(\"You've successfully passed the unit test!\")\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_Equivalent(\"01010101\",3) == \"01110111\"\nassert \nodd_Equivalent(\"10101010\",2) == \"11100100\"\nassert \nodd_Equivalent(\"10101010\",6) == \"11100100\"\nassert \nodd_Equivalent(\"10101010\",7) == \"11100100\"\nassert \nodd_Equivalent(\"10101010\",8) == \"11100101\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_Equivalent('10111101', 1) == 6\nassert     odd_Equivalent('10111101', 2) == 3\nassert     odd_Equivalent('10111101', 3) == 1\nassert     odd_Equivalent('10111101', 4) == 1\nassert     odd_Equivalent('10111101', 5) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent(\"1010101011\",3) == 3\nassert \nodd_Equivalent(\"1010101011\",2) == 5\nassert \nodd_Equivalent(\"1010101011\",1) == 8\nassert \nodd_Equivalent(\"1010101011\",0) == 9\nassert \nodd_Equivalent(\"101010101\",0) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_Equivalent('011010',1)==2\nassert odd_Equivalent('011010',2)==6\nassert odd_Equivalent('011010',3)==11\nassert odd_Equivalent('011010',4)==15\nassert odd_Equivalent('011010',5)==19\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_Equivalent
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_Equivalent('1010',2) == 2\nassert     odd_Equivalent('1011',2) == 4\nassert     odd_Equivalent('101010',4) == 6\nassert     odd_Equivalent('1010101010',8) == 12\nassert     odd_Equivalent('1010101010',9) == 27\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_Equivalent('100', 1) == 2, \"error\"\nassert odd_Equivalent('01', 1) == 1, \"error\"\nassert odd_Equivalent('001', 1) == 4, \"error\"\nassert odd_Equivalent('011', 1) == 2, \"error\"\nassert odd_Equivalent('101', 2) == 5, \"error\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1,2,3], [], [1,2,3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1,2,3], [1,2], [1,2,3]]) == []\nassert     common_in_nested_lists([[1,2,3], [1,2], []]) == []\nassert     common_in_nested_lists([[], [], []]) == []\nassert     common_in_nested_lists([[1,2,3], [], [], []]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1, 2], [3], [5, 4]]) == [3, 5], \"First\"\nassert     common_in_nested_lists([[1, 2, 3], [5], [4]]) == [5, 4], \"Second\"\nassert     common_in_nested_lists([[1, 2], [3], [5, 4, 6]]) == [], \"Third\"\nassert     common_in_nested_lists([[1, 2], [3], [5], [6]]) == [], \"Fourth\"\nassert     common_in_nested_lists([[1, 2, 3, 4], [5], [6]]) == [1, 2, 3, 4], \"Fifth\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1,2],[[1,2],3]]) == {1,2}\nassert     common_in_nested_lists([[1,2],[[1,2,3],3]]) == {1,2,3}\nassert     common_in_nested_lists([[1,2,3],[[1,2,3],3]]) == {1,2,3}\nassert     common_in_nested_lists([[1,2,3],[[1,2],3]]) == {1,2,3}\nassert     common_in_nested_lists([[1,2],[[1,2,3,4],3]]) == {1,2,3,4}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[2], [], [[2]]]) == True\nassert     common_in_nested_lists([[2, 2], [], [[2]]]) == True\nassert     common_in_nested_lists([[], [2, 2], [[2]]]) == True\nassert     common_in_nested_lists([[], [], [[2]]]) == False\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1, 2], [[2], 3]]) == [[2]]\nassert     common_in_nested_lists([[2], [3], [[2], 3]]) == [[2]]\nassert     common_in_nested_lists([[1, 2], [2, 1]]) == []\nassert     common_in_nested_lists([[2], [1, 3], [[2], 3]]) == [[2]]\nassert     common_in_nested_lists([[[2], 3]]) == [[2]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[1], [2, 3], [4, 5, 6, 7]]) == [[1], [4, 5, 6, 7]]\nassert common_in_nested_lists([[1, 2], [2, 3], [4, 5, 6, 7]]) == [[1, 2], [4, 5, 6, 7]]\nassert common_in_nested_lists([[1, 2], [3, 4], [5, 6, 7, 8, 9]]) == [[1, 2], [3, 4], [5, 6, 7, 8, 9]]\nassert common_in_nested_lists([[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]) == [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]\nassert common_in_nested_lists([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[1], 2, 3]) == [1], 'Test 1 Failed'\nassert     common_in_nested_lists([[1], 2, 3]) == [1], 'Test 2 Failed'\nassert     common_in_nested_lists([[1, 2], 2, 3]) == [1, 2], 'Test 3 Failed'\nassert     common_in_nested_lists([[1, 2], 2, 3]) == [1, 2], 'Test 4 Failed'\nassert     common_in_nested_lists([[1, 2], 2, [3, 4]]) == [1, 2, 3, 4], 'Test 5 Failed'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([1, 2, 4, 5, 6, 8, 8]) == 4\nassert     common_in_nested_lists([1, 2, 4, 5, 6, 8, 8, 8]) == 8\nassert     common_in_nested_lists([1, 2, 4, 5, 6, 8]) == False\nassert     common_in_nested_lists([1, 2, 4, 5, 6]) == True\nassert     common_in_nested_lists([1]) == True\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5]]) == [[2,4],[4,5]]\nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5], [2,2,2]]) == [[2,2,2]]\nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5], [4,2,2]]) == [[4,2,2]]\nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5], [4,2,2]]) == [[4,2,2]]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer(\"-10\") == False\nassert     check_integer(\"10.0\") == True\nassert     check_integer(\"10\") == False\nassert     check_integer(\"a\") == False\nassert     check_integer(\"ab\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('5') == True\nassert     check_integer('5.5') == True\nassert     check_integer('5a') == False\nassert     check_integer('5a.') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_string(text):\n    '''\n    Write a function to check if a string contains all digits or not.\n    '''\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer(1) == True\nassert    check_integer(\"1\") == True\nassert    check_integer(\"a\") == False\nassert    check_integer(\"5.5\") == False\nassert    check_integer(\"12.5\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer('123')\nassert     check_integer('12.3')\nassert     check_integer('-123')\nassert     check_integer('-1.23')\nassert     check_integer('-1.2e3')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('abc') == False\nassert     check_integer('2') == True\nassert     check_integer('-2') == True\nassert     check_integer('-2.3') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # check if the return value is integer\n        # the function should return the expected result\nassert check_integer('1') == True\nassert check_integer('1.1') == False\nassert check_integer('-1.1') == False\nassert check_integer('a') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(num):\n    '''\n    Write a function to check if the given number is a prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('abc') == False\nassert     check_integer('1a3') == False\nassert     check_integer('1.3') == False\nassert     check_integer('-1') == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([{}, {}, {}, {}]) == False, 'Wrong Output!'\nassert     empty_dit([{}, {}, {}, {}, {}]) == True, 'Wrong Output!'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit(['', {}, set(), 'tuple']) == False, 'tuple'\nassert     empty_dit(['', {}, set(), '']) == True,'string'\nassert     empty_dit([{}, set()]) == True, 'two empty'\nassert     empty_dit([{}, {}, {}, {'str': 'tuple'}]) == True,'string and dict'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit([]) == True, \"Wrong output!\"\nassert     empty_dit([{},{},{},{}]) == True, \"Wrong output!\"\nassert     empty_dit([{},{},{},None]) == False, \"Wrong output!\"\nassert     empty_dit([{},{},{}]) == False, \"Wrong output!\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert empty_dit([]) == True\nassert empty_dit([{},{},{}]) == True\nassert empty_dit([{'a':1},{'b':2},{'c':3}]) == False\nassert empty_dit([{'a':1},{'b':2},{'c':3},{'d':4}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_dit([{},{},{},{}])\nassert     not empty_dit([{},{}])\nassert empty_dit([{},{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1},{},{2},{2,1,1},{2,3,4,5},{2,4,5},{2,5}]) == False\nassert     empty_dit([{},{1:1},{1,1,1},{1,2,2},{1,2,3},{1,2,4,5},{1,2,4,5},{1,2,5}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:2},{},{1:2}]) == False\nassert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{},{},{}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert empty_dit([{},{}]) == True\nassert empty_dit([{},{},\" \"]) == True\nassert empty_dit([{},{},\" \",\" \"]) == True\nassert empty_dit([{},{},\" \",\" \",\" \"]) == False\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3,4,5)) == 120\nassert tuple_to_int((1,2,3,4,5,6)) == 420\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((1,2,3,4,5)) == 45\nassert     tuple_to_int((0,1,2,3,4)) == 24\nassert     tuple_to_int((5,)) == 15\nassert     tuple_to_int((5,6,7,8,9)) == 45\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1,2))     ==     3\nassert     tuple_to_int((1,1,1))     ==     3\nassert     tuple_to_int((1,1,2))     ==     4\nassert     tuple_to_int((1,1,1,1,1)) ==     5\nassert     tuple_to_int((1,1,1,1,2)) ==     5\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_int([5, 2, 3]) == 13\nassert     tuple_to_int((5, 2, 3)) == 13\nassert     tuple_to_int((2, 3, 5)) == 15\nassert     tuple_to_int((2, 4, 5, 6)) == 26\nassert     tuple_to_int((2, 2, 2)) == 2\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 24, 'tuple_to_int test 1 failed'\nassert     tuple_to_int((-3, -1, -2, -5)) == -6, 'tuple_to_int test 2 failed'\nassert     tuple_to_int((-1, 0, 1, 2)) == -3, 'tuple_to_int test 3 failed'\n\nprint('all tests passed')"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((-1,-2,-3,-4)) == -24\nassert     tuple_to_int((0,0,0,0)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((0,2,4)) == 2, 'Should return 2'\nassert     tuple_to_int((-1,-2,-3)) == -1, 'Should return -1'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,3,5)) == 21\nassert     tuple_to_int((5,9,7)) == 35\nassert     tuple_to_int((9,9,9)) == 81\nassert     tuple_to_int((1,2,3,4)) == 24\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((-2,3,4,5)) == -10\nassert     tuple_to_int((1,1,1)) == 1\nassert     tuple_to_int((-1,-1,-1)) == -3\n\ndef sum_first_n_nums(n, nums):\n    '''\n    Write a function to return the sum of the first n elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         list_to_float([[1, 'hello'], '1.5', 1, False, 'False', {}, [[]]]) == [[1.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\nassert         list_to_float([]) == []\nassert         list_to_float([[1, 2, 'hello'], 1.5, 1, False, 'False', {}, [[]]]) == [[1.0, 2.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\nassert         list_to_float([[1, 2, 'hello'], 1.5, 1, False, 'False', {}, [[]]]) == [[1.0, 2.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\nassert         list_to_float([[1, 2, 'hello'], 1.5, 1, False, 'False', {}, [[]]]) == [[1.0, 2.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntest_list = [[1, 2.5], ['hello'], 'a string']\nlist_to_float(test_list)\n\ndef float_to_list(test_float):\n    '''\n    Write a function to convert a floating point number to its equivalent integer value.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_to_float([[1, 2, 3]]) == [[1.0, 2.0, 3.0]]\nassert     list_to_float([[1.0, 2.0, 3.0]]) == [[1.0, 2.0, 3.0]]\nassert     list_to_float([[1.0, 2.0, 3.0, 'foo']]) == [[1.0, 2.0, 3.0, 'foo']]\nassert     list_to_float([[1.0, 2.0, 3.0, 4.0, 5.0, 'foo']]) == [[1.0, 2.0, 3.0, 4.0, 5.0, 'foo']]\nassert     list_to_float([[1.0, 2.0, 3.0, 4.0, 5.0, 'foo', 'bar']]) == [[1.0, 2.0, 3.0, 4.0, 5.0, 'foo', 'bar']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert list_to_float([[1,2.0], [3,4.5]]) == [[1, 2.0], [3, 4.5]]\n\n\ndef clean_data(data):\n    '''\n    Write a function to clean a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([[1, 2], [3, 4.0]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([[1, 2], [3, 4.0]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([['a', 1], ['b', 2.0]]) == [['a', 1], ['b', 2.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1,2,3],[4,5,6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1.2,2,3],[4,5,6]]) == [[1.2, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1,2.0,3],[4,5,6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1,2,3.0],[4,5,6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1,2,3],[4,5,6.0]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nlist_to_float([[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]) == [[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]\nassert \nlist_to_float([[\"a\", \"b\", \"c\"], [3.5, 6.8], [\"a\", \"b\", \"c\"]]) == [[3.5, 6.8], [\"a\", \"b\", \"c\"]]\nassert \nlist_to_float([[\"a\", \"b\", \"c\"], [3.5, 6.8], [\"a\", \"b\", \"c\"], 4, 5, 6]) == [[3.5, 6.8], [\"a\", \"b\", \"c\"], 4, 5, 6]\nassert \nlist_to_float([[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]) == [[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]\nassert \nlist_to_float([[1, 2, 3], [\"a\", \"b\", \"c\"], [4.5, 6.8]]) == [[1, 2, 3], [\"a\", \"b\", \"c\"], [4.5, 6.8]]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_list('spaceless') == ['spaceless']\nassert     string_to_list('spaceless spaces') == ['spaceless','spaces']\nassert     string_to_list('spaceless spaces ') == ['spaceless','spaces', '']\nassert     string_to_list('spaceless spaces  ') == ['spaceless','spaces', '']\nassert     string_to_list('spaceless spaces  ') == ['spaceless','spaces', '']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert string_to_list('1 2 3') == ['1','2','3']\nassert string_to_list('hello world') == ['hello','world']\nassert string_to_list('a b c') == ['a','b','c']\nassert string_to_list('1 2 3 4 5') == ['1','2','3','4','5']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list(\"hello world\") == [\"hello\",\"world\"], \\\n        \"Expected ['hello', 'world'], but got: %s\" %     (string_to_list(\"hello world\"),)\nassert     string_to_list(\"hello world.hello world.hello world\") == [\"hello\",\"world.hello\",\"world.hello\",\"world\"], \\\n        \"Expected ['hello', 'world.hello', 'world.hello', 'world'], but got: %s\" %     (string_to_list(\"hello world.hello world.hello world\"),)\nassert     string_to_list(\"hello world.hello world.hello world\") == [\"hello\",\"world.hello\",\"world.hello\",\"world\"], \\\n        \"Expected ['hello', 'world.hello', 'world.hello', 'world'], but got: %s\" %     (string_to_list(\"hello world.hello world.hello world\"),)\nassert     string_to_list(\"hello world.hello\") == [\"hello\",\"world.hello\"], \\\n        \"Expected ['hello', 'world.hello'], but got: %s\" %     (string_to_list(\"hello world.hello\"),)\nassert     string_to_list(\"hello world.hello world.hello\") == [\"hello\",\"world.hello\",\"world.hello\"], \\\n        \"Expected ['hello', 'world.hello', 'world.hello'], but got: %s\" %     (string_to_list(\"hello world.hello world.hello\"),)\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_list('1 2 3 4 5 6') == ['1','2','3','4','5','6']\nassert     string_to_list('1 2 3 4 5 6 7') == ['1','2','3','4','5','6','7']\nassert     string_to_list('1 2 3 4 5 6 7 8') == ['1','2','3','4','5','6','7','8']\nassert     string_to_list('1 2 3 4 5 6 7 8 9') == ['1','2','3','4','5','6','7','8','9']\nassert     string_to_list('1 2 3 4 5 6 7 8 9 10') == ['1','2','3','4','5','6','7','8','9','10']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef list_to_string(l):\n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_list('hello') == ['h','e','l','l','o']\nassert     string_to_list('hello world') == ['h','e','l','l','o','w','o','r','l','d']\nassert     string_to_list('hello world!') == ['h','e','l','l','o','w','o','r','l','d','!']\nassert     string_to_list('hello world! I am a Robot') == ['h','e','l','l','o','w','o','r','l','d','!']\nassert     string_to_list('hello world! I am a Robot!') == ['h','e','l','l','o','w','o','r','l','d','!']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_list('hello') == ['h','e','l','l','o']\nassert     string_to_list('hello world') == ['h','e','l','l','o','', 'w', 'o', 'r', 'l', 'd']\nassert     string_to_list('hello world asdf') == ['h','e','l','l','o','', 'w', 'o', 'r', 'l', 'd', 'a','s', 'f', 'e']\nassert     string_to_list('hello world asdf   ') == ['h','e','l','l','o','', 'w', 'o', 'r', 'l', 'd', 'a','s', 'f', 'e','', 'w', 'o', 'r', 'l', 'd', 'a','s', 'f', 'e']\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([2,4,8,6,1,9,10,7,4,9]) == 4\nassert     search([2,4,4,8,6,1,9,10,7,4,9]) == 4\nassert     search([2,4,4,4,8,6,1,9,10,7,4,9]) == 0\nassert     search([2,4,4,4,8,6,1,9,10,7,4,9,9]) == 9\nassert     search([2,4,4,4,8,6,1,9,10,7,4,9,10]) == 10\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([2, 3, 1, 2, 3, 5]) == 1, \"Wrong result\"\nassert     search([5, 1, 5, 5, 4, 5, 5]) == 5, \"Wrong result\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('-------------------')\n    print('Testing search()')\n    print('-------------------')\n\n    arr = [1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 188, 188, 189, 189, 190, 190, 191, 191, 192, 192, 193, 193, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 255, 255]\n    assert search(arr) == 243\n    arr = [0]\n    assert search(arr) == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([1,2,3,5,5,6,7,8,9,9]) == 5, \"Your answer is wrong.\"\nassert     search([1,1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nCreate a python program to find the position of a given element in a sorted array.\n'''\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([1,1,3,3,7,7]) == 1, \"Not expected output\"\nassert     search([2,2,2,2,3,3]) == 2, \"Not expected output\"\nassert     search([3,3,3,3,3,3]) == 3, \"Not expected output\"\nassert     search([4,4,4,4,4,4,4,4]) == 4, \"Not expected output\"\nassert     search([1,2,3,4,5,6,7]) == None, \"Not expected output\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([5,1,2,3,4,4,4]) == 4, \"Wrong result\"\nassert     search([5,1,2,3,4,4,4,5,6,7,8,9]) == 5, \"Wrong result\"\nassert     search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,7,7,7,8,8,8,8,9,9,9,9,9]) == 7, \"Wrong result\"\nassert     search([1,2,3,4,4,4,5,6,7,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9]) == 9, \"Wrong result\"\n\ndef is_square(n):\n    '''\n    Write a python function to check if a given number is a perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(3, 4), (6, 4), (4, 4)]) == (4 * 6, 4 * 4)\nassert     max_product_tuple([(3, 4), (6, 4), (4, 3)]) == (4 * 6, 4 * 3)\nassert     max_product_tuple([(4, 2), (6, 4), (4, 3)]) == (4 * 4, 6 * 4)\nassert     max_product_tuple([(4, 2), (6, 4), (4, 4)]) == (4 * 4, 6 * 4)\nassert     max_product_tuple([(4, 2), (6, 4), (4, 5)]) == (4 * 4, 6 * 5)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(1,2), (3,4)]) == ((3,4), (1,2)) == (24, 8)\nassert max_product_tuple([(1,2), (3,4), (5,6)]) == ((3,4), (1,2), (5,6)) == (24, 8, 12)\nassert max_product_tuple([(1,2,3), (4,5,6)]) == ((4,5,6), (1,2,3)) == (24, 8, 12)\nassert max_product_tuple([(1,2,3), (4,5,6), (5,6,7)]) == ((4,5,6), (1,2,3), (5,6,7)) == (24, 8, 12, 21)\nassert max_product_tuple([(1,2,3), (4,5,6), (5,6,7), (8,9,10)]) == ((4,5,6), (1,2,3), (5,6,7), (8,9,10)) == (24, 8, 12, 21, 288)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(5, 7), (2, 3), (3, 2), (4, 1), (-1, 2)]) == (-1, 2)\nassert     max_product_tuple([(1, 10), (0, -5), (1, -3), (3, -2), (-1, 0)]) == (-1, 0)\nassert     max_product_tuple([(1, -10), (0, -5), (1, -3), (3, -2), (-1, 0)]) == (1, -10)\nassert     max_product_tuple([(5, 1), (2, -3), (3, -2), (4, 1), (-1, 2)]) == (3, 2)\nassert     max_product_tuple([(1, 10), (0, -5), (1, -3), (3, -2), (-1, 0)]) == (1, 0)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_product_tuple([(1,2),(2,3),(3,4),(4,-1)]) == (24,12), \"First tuple has a product of 24\"\nassert max_product_tuple([(1,-2),(2,3),(3,4),(4,-1)]) == (-1,24), \"Second tuple has a product of -1\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(1, 4), (2, 8), (-5, -7), (3, 8), (7, -5), (8, -6)]) == (1, 8)\nassert max_product_tuple([(1, 3), (2, 3), (-2, 1), (1, 3), (2, 3)]) == (2, 3)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(3,-2,-1),(3,-3,-1),(3,5,2),(-3,-2,1),(-3,4,-1),(1,-2,1)]) == (10, 1)\nassert     max_product_tuple([(3,4,-5),(5,-3,-2),(-7,-2,3),(-1,3,3),(1,-3,-5),(-3,-5,4),(1,4,3),(1,2,5)]) == (-4, -3)\n\ndef max_product_set(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in set of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_product_tuple([(2, 8), (3, 5), (6, 1)]) == 32\nassert max_product_tuple([(1, 2), (5, 10), (2, 4)]) == 12\nassert max_product_tuple([(2, 8), (2, 4), (7, 5), (9, 1)]) == 132\nassert max_product_tuple([(1, 9), (2, 8), (3, 5), (6, 4)]) == 96\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1, -1), (2, 3), (4, -2), (5, 1)]) == (5, 2)\nassert     max_product_tuple([(-1, 1), (2, 3), (4, -2), (5, 1)]) == (-1, 2)\nassert     max_product_tuple([(2, -1), (3, 1), (4, -2), (5, 1)]) == (5, 1)\nassert     max_product_tuple([(1, -1), (2, 1), (4, -2), (5, 1)]) == (5, 2)\nassert     max_product_tuple([(-1, 1), (2, 3), (4, -2), (5, 1)]) == (5, -2)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(1000) == 0, \"incorrect\"\nassert     amicable_numbers_sum(10000) == 539, \"incorrect\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\namicable_numbers_sum(10) == sum([2,7,11,13,17])\nassert amicable_numbers_sum(20) == sum([2,7,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\nassert amicable_numbers_sum(100) == sum([2,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,491,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997])"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(10) == 8\nassert     amicable_numbers_sum(20) == 58\nassert     amicable_numbers_sum(50) == 62\nassert     amicable_numbers_sum(100) == 110\nassert     amicable_numbers_sum(1000) == 1072\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == 7, 'incorrect!'\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(10) ==     7 + 17 = 28\nassert     amicable_numbers_sum(25) ==     22 + 33 = 55\nassert     amicable_numbers_sum(50) ==     22 + 32 + 33 + 34 = 77\nassert     amicable_numbers_sum(100) ==     22 + 33 + 34 + 34 + 37 = 129\nassert     amicable_numbers_sum(1000) ==     22 + 33 + 34 + 34 + 37 + 42 + 47 = 1415\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(500) == 837, \"Incorrect sum of amicable numbers\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(1000) ==    233168\nassert     amicable_numbers_sum(2000) ==    302234\nassert     amicable_numbers_sum(10000) ==    555555\nassert     amicable_numbers_sum(20000) ==    7777777\nassert     amicable_numbers_sum(40000) ==    363636\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(5) == 7\nassert     amicable_numbers_sum(1000) == 483\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(50) == 220\nassert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(25) == 243\nassert     amicable_numbers_sum(30) == 468\nassert     amicable_numbers_sum(50) == 767\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(    -0.0,    1.0) == 0.0\nassert angle_complex(-1.0,    1.0) == -math.pi / 2.0\nassert angle_complex(    1.0,    1.0) == math.pi / 2.0\nassert angle_complex(    2.0,    0.0) == math.pi\nassert angle_complex(    0.0,    0.0) == 0.0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(1+2j,1+3j) == math.degrees(math.atan(2.0/3))\nassert     angle_complex(0+0j,2+0j) == math.degrees(math.atan(2.0/2))\nassert     angle_complex(0+0j,2+0j) == math.degrees(math.atan(2.0/2))\nassert     angle_complex(0+0j,2+0j) == math.degrees(math.atan(2.0/2))\nassert     angle_complex(0+0j,0+0j) == math.degrees(math.atan(2.0/2))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(1+2j, 2+2j) == math.atan(2j)\nassert     angle_complex(1+2j, 1+2j) == math.atan(1j)\nassert     angle_complex(-1-2j, -2-2j) == -math.atan(2j)\nassert     angle_complex(-1-2j, -1-2j) == -math.atan(1j)\nassert     angle_complex(-3+4j, -2+2j) == -math.atan(2j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(1,1) == 0, \"Error\"\nassert     angle_complex(2,3) == 0.5, \"Error\"\nassert     angle_complex(1,2) == 0.5, \"Error\"\nassert     angle_complex(2,3) == 0.5, \"Error\"\nassert     angle_complex(1,-1) == 0.5, \"Error\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(1,3) == 0\nassert     angle_complex(-1,1) == 1\nassert     angle_complex(3,-1) == 1\nassert     angle_complex(-1,3) == 1\nassert     angle_complex(-1,0) == 2*cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex(2+3j, 3-4j) ==  cmath.pi - 3\nassert     angle_complex(3+4j, 5-6j) == -3 + 4j\nassert     angle_complex(5+6j, 3-4j) ==  cmath.pi + 3\nassert     angle_complex(5-6j, 3+4j) == -3 - 4j\nprint (\"Pass\")\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nangle_complex(1,1) == 0\nangle_complex(1, -1) == 0\nangle_complex(1, 0) == 90\nangle_complex(-1,1) == 0\nangle_complex(-1,0) == -90\nangle_complex(0,1) == 180\nangle_complex(-1,0) == -90\nangle_complex(1,1) == 0\nangle_complex(0,1) == 90\nangle_complex(1,-1) == 0\nangle_complex(-1,-1) == 0\nangle_complex(0,-1) == 180\nangle_complex(1,-1) == -90\nangle_complex(1,0) == 90\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(-1,1) == -90\nangle_complex(0,1) == 90\nangle_complex(1,1) == 0\nangle_complex(1,0) == 90\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(-1,-1) == -90\nangle_complex(0,-1) == 180\nangle_complex(-1,-1) == 0\nangle_complex(1,-1) == 90\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -90\nangle_complex(-1,1) == -90\nangle_complex(0,1) == 0\nangle_complex(1,1) == 90\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(-1,-1) == -90\nangle_complex(0,-1) == 90\nangle_complex(1,-1) == 180\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -90\nangle_complex(-1,1) == -90\nangle_complex(0,1) == 0\nangle_complex(1,1) == 90\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(1,0) == -90\nangle_complex(0,1) == 90\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef area_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex(1,1) == 0.0\nassert     angle_complex(1,0) == 90.0\nassert     angle_complex(1,10) == 90.0\nassert     angle_complex(1,100) == 90.0\nassert     angle_complex(1,1j) == 90.0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_length('110000') == 0\nassert     find_length('010110') == 3\nassert     find_length('1111') == 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_length('0101100') == 2\nassert     find_length('101') == 0\nassert     find_length('100') == 2\nassert     find_length('001') == 2\nassert     find_length('10101') == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclass Solution(object):\n    def findMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        '''\n        You are given an integer array nums. The unique element of an array is the minimum element in the array. Your goal is to find the maximum length of a subarray that contains only the same unique element.\n\n        For example, given the array nums = [1,2,3,2,1,4,7], the maximum length subarray is [3,2,1,4,7], because the minimum element in nums[3:5] is 1 and the maximum element in nums[4:7] is 4.\n\n        Return the maximum length of a subarray that contains only the same unique element.\n\n        You can assume that nums' length is at least 1 and each element is an integer between 0 and 100.\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_length('10100') == 1\nassert     find_length('100') == 0\nassert     find_length('10') == 1\nassert     find_length('00010') == 2\nassert     find_length('1110') == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_length('00') == 0, 'It should be 0'\nassert     find_length('0000') == 0, 'It should be 0'\nassert     find_length('11') == 1, 'It should be 1'\nassert     find_length('01') == 2, 'It should be 2'\nassert     find_length('1101') == 1, 'It should be 1'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length('0011010111')     == 4\nassert     find_length('010110111')     == 4\nassert     find_length('11111111')     == 0\nassert     find_length('1111111101111')     == -1\nassert     find_length('01101111011')     == -1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_length('1010101010') == 0\nassert     find_length('1010101010') == 0\nassert     find_length('010110011') == 1\nassert     find_length('010110011') == 1\nassert     find_length('011100001') == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_length('0101') == 4\nassert     find_length('0000') == 0\nassert     find_length('010101') == 0\nassert     find_length('01010101') == 6\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum(2,10) == 10\nassert     sum(2,5) == 7\nassert     sum(5,7) == 11\nassert     sum(7,8) == 17\nassert     sum(20,40) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum(5,8) == 0\nassert sum(10,10) == 0\nassert sum(22,8) == 2\nassert sum(11,13) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum(2,6) == 2 + 3 + 2, \"WRONG\"\nassert     sum(4,6) == 4, \"WRONG\"\nassert     sum(3,9) == 3, \"WRONG\"\nassert     sum(1000000,1000000) == 0, \"WRONG\"\nassert     sum(2333,1234) == 2333 + 2333, \"WRONG\"\nprint (\"correct\")\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sum(6,18) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nimport math\nimport random\n\ndef product(n, *args):\n    '''\n    Write a python function to find the product of the given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum(2,5) == 3, \"incorrect sum\"\nsum(3,3) == 6, \"incorrect sum\"\nsum(4,4) == 6, \"incorrect sum\"\nsum(0,5) == 0, \"incorrect sum\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_int(0, 0) == 0\nassert     multiply_int(0, 2) == 0\nassert     multiply_int(2, 2) == 4\nassert     multiply_int(2, 3) == 6\nassert     multiply_int(2, 4) == 8\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_int(3, 4) == 12\nassert     multiply_int(-5, 7) == -45\nassert     multiply_int(-5, -7) == -45\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(0, 7) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(1,2) == 2, \"You failed the test\"\n\ndef my_map(func, args):\n    '''\n    Write a function to apply a function to each element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(2, 2) == 4\nassert     multiply_int(3, 2) == 6\nassert     multiply_int(1, 2) == 2\nassert     multiply_int(0, 2) == 0\nassert     multiply_int(-2, 3) == -6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(2, 1) == 2\nassert     multiply_int(12, 12) == 144\nassert     multiply_int(12, -12) == -144\nassert     multiply_int(0, -12) == -12\nassert     multiply_int(-12, -12) == 144\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(0, 3) == 0\nassert     multiply_int(-1, 3) == -3\nassert     multiply_int(-2, -4) == -8\nassert     multiply_int(-1, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert multiply_int(12, 34) == 24\nassert multiply_int(23, 46) == 99\nassert multiply_int(47, 49) == 50\nassert multiply_int(100, 11) == 100\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_int(1, 1) == 1\nassert     multiply_int(5, 3) == 15\nassert     multiply_int(-1, 1) == -1\nassert     multiply_int(-1, -1) == -1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     long_words(3, [\"python\", \"matlab\", \"c++\", \"abcd\"]) == [\"python\", \"abcd\"]\nassert     long_words(4, [\"ab\", \"cd\", \"ef\", \"gh\", \"hgf\"]) == [\"ab\", \"cd\", \"ef\", \"gh\"]\nassert     long_words(3, [\"a\", \"aa\", \"aaa\", \"aaaa\"]) == [\"aaa\"]\n\ndef is_even(n):\n    '''\n    Write a function to find whether the given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlong_words(2, [\"go\", \"gone\", \"guild\"]) == {\"guild\", \"gone\"}\nassert \nlong_words(3, [\"go\", \"guild\"]) == {\"guild\"}\nassert \nlong_words(3, [\"gone\"]) == {\"gone\"}\nassert \nlong_words(2, [\"go\", \"gone\"]) == {\"gone\"}\n\n\ndef two_sum(numbers, target):\n    '''\n    Write a function that takes in a list of numbers and a target number.\n    Return the two numbers whose sum is equal to the target.\n    Each element in the returned array should appear as many times as it goes into the returned array.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(4, ['a','apple','banana','bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar']) == ['bar', 'bar']\nassert     long_words(4, ['a','apple','banana','bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'ba"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(3, [\"miguel\", \"pepe\", \"miguel\"]) == [\"miguel\",\"miguel\",\"pepe\"]\nassert     long_words(4, [\"python\", \"is\", \"a\", \"good\", \"language\"]) == [\"python\",\"a\"]\nassert     long_words(5, [\"my\", \"name\", \"is\", \"pepe\"]) == [\"my\",\"name\",\"pepe\"]\nassert     long_words(5, [\"my\", \"name\", \"is\", \"pepe\", \"is\"]) == [\"my\",\"name\",\"is\",\"pepe\",\"is\"]\nassert     long_words(6, [\"my\", \"name\", \"is\", \"pepe\", \"is\"]) == [\"my\",\"name\",\"is\",\"pepe\",\"is\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not long_words(4, [\"cat\", \"dogs\", \"cats\", \"for\"])\nassert not long_words(4, [\"cat\", \"dogs\", \"cat\", \"cat\"])\nassert long_words(4, [\"cat\", \"dogs\", \"cats\"])\nassert not long_words(4, [\"cat\", \"dogs\", \"cats\", \"cat\", \"cat\"])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(1, ['example', 'word', 'to', 'find']) == ['word']\nassert     long_words(2, ['example', 'word', 'to', 'find']) == ['word', 'to']\nassert     long_words(3, ['example', 'word', 'to', 'find']) == ['word', 'to', 'find']\n\ndef find_longest_word(words):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlong_words(10, ['go', 'home', 'to', 'park', '.', 'dont', 'go', 'back']) == {'go', 'dont'}\nassert not long_words(3, ['a', 'aaaaaa', 'to', 'is', 'possible', '.']) == {'aaaaaa'}\n\n\ndef n_largest(n, nums):\n    '''\n    Write a function that returns the n largest numbers in a list in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     long_words(5,[\"a\", \"a\", \"b\", \"bb\", \"cc\"]) == [\"bb\", \"cc\"]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     magic_square_test([\n                    [8,1,6,3,5,7,4,9,2],\n                    [6,4,9,8,7,3,5,1,2],\n                    [4,7,2,1,9,6,5,3,8],\n                    [2,5,1,7,4,3,8,9,6],\n                    [8,3,4,9,5,1,7,2,6],\n                    [4,9,2,6,8,3,5,1,7],\n                    [7,5,1,8,2,6,3,4,9],\n                    [2,6,8,5,3,7,9,1,4],\n                    [3,1,4,9,6,5,2,8,7]\n                    ]) == True, 'Function does not work'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     magic_square_test([[8, 1, 6], \n                            [3, 5, 7], \n                            [4, 9, 2]]) == True, 'First'\nassert     magic_square_test([[8, 1, 6], \n                            [3, 5, 7], \n                            [4, 6, 2]]) == False, 'Second'\nassert     magic_square_test([[8, 1, 6], \n                            [3, 5, 7], \n                            [4, 9, 0]]) == False, 'Third'\nassert     magic_square_test([[1, 2, 3, 4], \n                            [5, 6, 7, 8], \n                            [9, 10, 11, 12], \n                            [13, 14, 15, 16]]) == True, 'Fourth'\nassert     magic_square_test([[1, 2, 3, 4, 5], \n                            [5, 6, 7, 8, 9], \n                            [9, 10, 11, 12, 13], \n                            [13, 14, 15, 16, 17], \n                            [17, 18, 19, 20, 21]]) == True, 'Fifth'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     magic_square_test([[2, 7, 4], \n                        [9, 5, 3], \n                        [6, 1, 8]]) == True, \\\n    'Wrong answer: Magic_square_test should return True for the following matrix, so it\\'s a magic square:\\n{}'.format([[2, 7, 4], \n                        [9, 5, 3], \n                        [6, 1, 8]])\nassert     magic_square_test([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6]]) == False, \\\n    'Wrong answer: Magic_square_test should return False for the following matrix, so it\\'s not a magic square:\\n{}'.format([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6]])\nassert     magic_square_test([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6],\n                        [1, 2, 3]]) == False, \\\n    'Wrong answer: Magic_square_test should return False for the following matrix, so it\\'s not a magic square:\\n{}'.format([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6],\n                        [1, 2, 3]])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef magic_square_test_2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_occurrences([1,1,1,2,2,2]) == 2\nassert     max_occurrences([]) == None\nassert     max_occurrences([1,1,1]) == 1\nassert     max_occurrences([1,2,1,2,2,2]) == 2\nassert     max_occurrences([1,2,1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a hashmap to store the frequency of each element\n    # O(n)\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n        # check if there is any element that has more than one occurrences. If yes return the key\n        if freq[n] > 1:\n            return n\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef generate_binary_search_tree(preorder, inorder):\n    '''\n    Given a list of numbers in preorder and inorder traversals of a binary tree,\n    generate the binary tree in postorder.\n    \n    Here is the detailed pseudocode:\n    \n    1) Calculate the length of the inorder traversal of the tree.\n    2) Using a loop, traverse the inorder traversal, and for each item, add the \n       corresponding element from the preorder traversal to the list\n       of nodes.\n       \n       Keep track of the number of nodes in the tree.\n    3) Generate the tree by assigning the left and right subtrees to the nodes \n       and assigning the parent of each node.\n       \n       Keep track of the depth.\n    4) Return the root node of the generated tree.\n    '''\n    pass\n    "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(int)\n    max_occurrences = 0\n    for num in nums:\n        occurrences[num] += 1\n        max_occurrences = max(max_occurrences, occurrences[num])\n    \n    return max_occurrences\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_occurrences([1,2,2,3,4]) == 2\nassert     max_occurrences([1,2,2,3,1,4]) == 1\nassert     max_occurrences([1,2,2,2,2,3,4]) == 2\nassert     max_occurrences([1,2,2,2,3,2,4]) == 4\nassert     max_occurrences([1,1,1,2,2,2,3,3,4,4,4,4]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_occurrences([1,3,4,5,2,3,2,5]) == 2\nassert \nmax_occurrences([1,2,2,3,2,4,2,4]) == 1\nassert \nmax_occurrences([1,2,3,4,5,5,6,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_occurrences([1,2,2,1]) == 2\nassert     max_occurrences([1,1,1,2,2,2,3,3,2,1]) == 3\nassert     max_occurrences([1,2,3,1,1,2]) == 1\nassert     max_occurrences([1]) == 1\nassert     max_occurrences([]) == None\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(reverse_vowels('abcd'))\n    print(reverse_vowels('kyuannqfj'))\n    print(reverse_vowels('abcdfgh'))\n    print(reverse_vowels('gyuannqfj'))\n    print(reverse_vowels('abcdqfgh'))\n\n    # print(reverse_vowels('abcdqfgh')"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_vowels('hello') == 'holle','should be same'\nassert     reverse_vowels('hello world') == 'dlrow olleh','should be same'\nassert     reverse_vowels('hello world!') == 'dlrow olleh!','should be same'\nassert     reverse_vowels('hello world!') == 'dlrow olleh!','should be same'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels(\"\") == \"\"\nassert     reverse_vowels(\"h\") == \"h\"\nassert     reverse_vowels(\"aeiou\") == \"oauiea\"\nassert     reverse_vowels(\"Hello World\") == \"dlrow olleH\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels('hello') == 'olleh', 'first'\nassert     reverse_vowels('world') == 'dlrow','second'\nassert     reverse_vowels('abcdef') == 'edcba', 'third'\nassert     reverse_vowels('abcd') == 'cbad', 'fourth'\nassert     reverse_vowels('aeiou') == 'uoiea', 'fifth'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nreverse_vowels(\"Hello\") == \"holle\"\nassert \nreverse_vowels(\"Hello World\") == \"dlrow olleH\"\nassert \nreverse_vowels(\"I love Python!\") == \"Python!loveloveI\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \n\nstr1 = 'Hello'\nprint(reverse_vowels(str1))\n\n\ndef reverse_vowels2(string):\n    \"\"\"Reverse vowels in a given string\"\"\"\n    vowels = 'aeiouAEIOU'\n    string = list(string)\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] in vowels and string[j] in vowels:\n            string[i], string[j] = string[j], string[i]\n        if string[i] not in vowels:\n            i += 1\n        if string[j] not in vowels:\n            j -= 1\n    return \"\".join(string)"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('leetcode') == 'leotcede'\nassert     reverse_vowels('abcd') == 'dcba'\nassert     reverse_vowels('sjnhvs') == 'vdnhsjs'\nassert     reverse_vowels('jdgnlhj') == 'hgmljdj'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels('python') == 'ytoonhpy'\nassert     reverse_vowels('i love python') == 'y loveloh pytnon'\nassert     reverse_vowels('hax0r') == 'ar0hx0r'\nassert     reverse_vowels('o*he') == '*ooh*e'\nassert     reverse_vowels('aeiou') == 'uoiea'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"Should have been 'olleh'\"\nassert     reverse_vowels(\"testing\") == \"tring\", \"Should have been 'trnging'\"\nassert     reverse_vowels(\"Apple\") == \"pple\", \"Should have been 'ppleA'\"\nassert     reverse_vowels(\"apple\") == \"pApl\", \"Should have been 'pAplE'!\"\nassert     reverse_vowels(\"\") == \"\", \"Should have been ''\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string(('one', 'two', 'three')) == 'one,two,three', \\\n    'Wrong output'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tup_string(('a','b')) == 'ab'\nassert     tup_string(('a','b','c')) == 'abc'\nassert     tup_string(('a','b','c','d')) == 'abcde'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert tup_string(('a', 'b', 'c')) == 'abc'\nassert tup_string((1,2,3)) == '123'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string(('Sid', 'Ranjan', 'Raju')) == 'Sid, Ranjan, Raju'\nassert     tup_string(('Sid', 'Ranjan', 'Raju', 'Arya')) == 'Sid, Ranjan, Raju, Arya'\nassert     tup_string(('Sid', 'Ranjan', 'Raju', 'Arya', 'Kakun')) == 'Sid, Ranjan, Raju, Arya, Kakun'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3', 'incorrect'\nassert     tup_string((1,2,3,4)) == '1,2,3,4', 'incorrect'\nassert     tup_string((1,2,3,4,5)) == '1,2,3,4,5', 'incorrect'\nassert     tup_string((1,2,3,4,5,6)) == '1,2,3,4,5,6', 'incorrect'\n\ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to an integer.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string(('p','r','o','b','l','e')) == 'ple'\nassert     tup_string(('g', 'e', 'e', 'k','s', 'p', 'r', 'i', 'c', 't')) == 'geek'\nassert     tup_string(('a', 'b', 'c', 'd', 'e')) == 'abcde'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(tup_string((1, 2, 3))) # '1 2 3'\n\ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1)) # must write str()\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string(('a', 'b', 'c')) == 'abc'\nassert     tup_string(('g', 'h', 'i')) == 'ghhi'\nassert     tup_string(('p', 'q', 'r')) == 'pqpr'\nassert     tup_string(('o', 'n','m')) == 'onm'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((1,2,3,4,5)) == '1,2,3,4,5', 'incorrect'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tup_string((1, 2)) == '1, 2'\nassert     tup_string((2, 3)) == '2, 3'\n\n'''\nWrite a function to add two tuples element-wise.\n'''\n\ndef add_tuple(tup1, tup2):\n    '''\n    Write a function to add two tuples element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_negativenum([1,2,3,4]) == -1\nassert sum_negativenum([1,-2,-3,-4]) == -6\nassert sum_negativenum([-1,2,-3,-4]) == 4\nassert sum_negativenum([1,-2,3,-4]) == -5\nassert sum_negativenum([-1,-2,-3,-4]) == -5\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([-2, -1, -3, -4]) == -1\nassert     sum_negativenum([-2, 1, 2, 4]) == 3\nassert     sum_negativenum([1]) == 1\nassert     sum_negativenum([]) == 0"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_negativenum([-1, -2, -3]) == -1\nassert     sum_negativenum([-10, -20, -30]) == -30\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1]) == -1\nassert     sum_negativenum([-1, 2]) == -1\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_negativenum([1, 2, 3, 4, -5]) == 0, \"the expected value should be 0\"\nassert     sum_negativenum([5, -4, -3, -2, -1]) == -1, \"the expected value should be -1\"\nassert     sum_negativenum([-4, -3, -2, -1]) == -3, \"the expected value should be -3\"\nassert     sum_negativenum([-2, -3, -4, -5, 6]) == -7, \"the expected value should be -7\"\nassert     sum_negativenum([1, 2, 3, -4, -5]) == -6, \"the expected value should be -6\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -1\nassert     sum_negativenum([-5, -4, -3, -2, -1]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -5\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7]) == -1\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_negativenum([1,2,-3,4,5]) == 2\nassert     sum_negativenum([-1,-2,-3,-4,-5]) == -1\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1,1,2,3,4,5]) == -1"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -6, \"this should be -6\"\nassert     sum_negativenum([1, 2, 3, 4, 5, 6]) == -15, \"this should be -15\"\nassert     sum_negativenum([-3, -5, -9, -11, -13]) == -32, \"this should be -32\"\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == 0, \"this should be 0\"\nassert     sum_negativenum([]) == 0, \"this should be 0\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([-2,1,-3,4,-1,2,1,-5,4]) == 5\nassert     sum_negativenum([-2,1,-3,4,-1,2,1,-5]) == 0\nassert     sum_negativenum([-2,1,-3,4,-1,2,1,-5,-2,-4,1,-5,2,-4,1,2,1,-5,4]) == 0\nassert     sum_negativenum([-2,-1,-3,4,-1,2,1,-5,4]) == -7\nassert     sum_negativenum([1,-2,-3,4,-1,2,1,-5,4]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([1,2,-3,4,-5]) == 2\nassert     sum_negativenum([1,-2,3,-4,5]) == -7\nassert     sum_negativenum([-1,-2,3,-4,5]) == 0\nassert     sum_negativenum([-1,-2,-3,-4,-5]) == -10\nassert     sum_negativenum([-1,2,3,4,5]) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhexagonal_num(1) == 0\nhexagonal_num(2) == 1\nhexagonal_num(3) == 5\nhexagonal_num(4) == 15\nhexagonal_num(5) == 30\nhexagonal_num(6) == 56\nhexagonal_num(7) == 119\nhexagonal_num(8) == 220\nhexagonal_num(9) == 463\nhexagonal_num(10) == 1728\nhexagonal_num(11) == 6776\nhexagonal_num(12) == 33544\nhexagonal_num(13) == 18446744073709551616\nhexagonal_num(14) == 674204592482051302519927168\nhexagonal_num(15) == 21474836480000000000000000\n\nhexagonal_num(16) == 6915162445952958722286484154537377261664\nhexagonal_num(17) == 10989103857024349629731354148943491766784\nhexagonal_num(18) == 5048480230957489094446478556056835064608\nhexagonal_num(19) == 148974881245578533656855992352469683568\nhexagonal_num(20) == 9581617385800706931845955939866415835625\nhexagonal_num(21) == 59749174446327691183806436305094369939193\nhexagonal_num(22) == 7550169296510553847872794766871248657896\nhexagonal_num(23) == 78602423375748373760921651949238201494028\nhexagonal_num(24) == 8626554182377703099310264100135070076959\nhexagonal_num(25) == 90604477310603369741553537205564372409275\nhexagonal_num(26) == 97327397504457450778501610961426597624\nhexagonal_num(27) == 119857412041137689025808935348811184843\nhexagonal_num(28) == 1319412657878248947741151837966223974135\nhexagonal_num(29) == 154995744749589932965925689408870299945\nhexagonal_num(30) == 167179172489693129832218969169238345\nhexagonal_num(31) == 18920671579071566741579161256392781369134\nhexagonal_num(32) == 194995744749589932965925689408870299945\nhexagonal_num(33) == 19477123711935789907857864556856148944\nhexagonal_num(34) == 1962717163492065517271028229933773660\nhexagonal_num(35) == 19677123711935789907857864556856148944\nhexagonal_num(36) == 1973980340283569641490259914798939930\nhexagonal_num(37) == 1978491277272988649498129976231877525\nhexagonal_num(38) == 2019101651438759474864996399585072375\nhexagonal_num(39) == 2068503912348318519125198259930398147\nhexagonal_num(40) == 20510981749178212013826391338400419145\nhexagonal_num(41) == 205720354090199862541766559955820391844\nhexagonal_num(42) == 20618351587641669304714194939131566483\nhexagonal_num(43) == 20659437114795446436869873024060016128\nhexagonal_num(44) == 2073854342041293928806594354405777199\nhexagonal_num(45) == 2076662827115960792388011219939609986\nhexagonal_num(46) == 208489974290590603909781821575552339\nhexagonal_num(47) == 20870352562149412559637962925069375\nhexagonal_num(48) == 209142059644093466260133791830181808\nhexagonal_num(49) == 20958700295599105465012276138895845\nhexagonal_num(50) == 210106950127739004091506150835672640\nhexagonal_num(51) == 21172417506885083682246091167401766\nhexagonal_num(52) == 21278877516991623004174787252735579\nhexagonal_num(53) == 21248241125728782467680199004499096\nhexagonal_num(54) == 212794152801459014890022562030013\nhexagonal_num(55) == 2131766008860202855424592074524216\nhexagonal_num(56) == 21368869637512983209481779313209937\nhexagonal_num(57) == 2140028206955077703865284875364524\nhexagonal_num(58) == 2141766008860202855424592074524216\nhexagonal_num(59) == 2142280287439576029440014008887249\nhexagonal_num(60) == 214367968831316368816157586552365\nhexagonal_num(61) == 214417983958632743231858462108727\nhexagonal_num(62) == 2146706532386265699396055642848\nhexagonal_num(63) == 2146889725280017109099874770916\nhexagonal_num(64) == 2147900396767979490061708299327\nhexagonal_num(65) == 214896602938998513883929590921\nhexagonal_num(66) == 214887739069572894801364827250\nhexagonal_num(67) == 21497693132691729508174816\nhexagonal_num(68) == 2150028206955077703865284875364524\nhexagonal_num(69) == 215169265102513902710820465337\nhexagonal_num(70) == 2152363707465500082979595699\nhexagonal_num(71) == 215338624124555345652163306\nhexagonal_num(72) == 21547169840876448493688982297\nhexagonal_num(73) == 2155916485624421875606008200\nhexagonal_num(74) == 2156932183415421875606008200\nhexagonal_num(75) == 215771680732514993958783714\nhexagonal_num(76) == 2157988489969872734818492818\nhexagonal_num(77) == 215887093268287435931852532\nhexagonal_num(78) == 21589779344185318092746066\nhexagonal_num(79) == 2158977025911914062569863\nhexagonal_num(80) == 2158977025911914062569863\nhexagonal_num(81) == 2158977025911914062569863\nhexagonal_num(82) == 2158977025911914062569863\nhexagonal_num(83) == 2158977025911914062569863\nhexagonal_num(84) == 2158977025911914062569863\nhexagonal_num(85) == 2158977025911914062569863\nhexagonal_num(86) == 2158977025911914062569863\nhexagonal_num(87) == 2158977025911914062569863\nhexagonal_num(88) == 2158977025911914062569863\nhexagonal_num(89) == 2158977025911914062569863\nhexagonal_num(90) == 21"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhexagonal_num(5) == 1"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 27\nassert     hexagonal_num(4) == 225\nassert     hexagonal_num(5) == 286\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     hexagonal_num(1) == 3 \nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 7\nassert     hexagonal_num(4) == 11\nassert     hexagonal_num(5) == 13\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhexagonal_num(1) == 1\nassert hexagonal_num(2) == 3\nassert hexagonal_num(3) == 5\nassert hexagonal_num(4) == 7\nassert hexagonal_num(5) == 13\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef hexagonal_num_opt(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hexagonal_num(1) == 1\nassert hexagonal_num(2) == 5\nassert hexagonal_num(3) == 14\nassert hexagonal_num(4) == 24\nassert hexagonal_num(5) == 44\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    hexagonal_num(1) == 3\n    hexagonal_num(2) == 5\n    hexagonal_num(3) == 7\n    hexagonal_num(4) == 11\n    hexagonal_num(5) == 13\n    hexagonal_num(6) == 15\n    hexagonal_num(7) == 19\n    hexagonal_num(8) == 23\n    hexagonal_num(9) == 29\n    hexagonal_num(10) == 31\n    hexagonal_num(11) == 37\n    hexagonal_num(12) == 41\n    hexagonal_num(13) == 43\n    hexagonal_num(14) == 47\n    hexagonal_num(15) == 49\n    hexagonal_num(16) == 51\n    hexagonal_num(17) == 53\n    hexagonal_num(18) == 55\n    hexagonal_num(19) == 57\n    hexagonal_num(20) == 59\n    hexagonal_num(21) == 61\n    hexagonal_num(22) == 63\n    hexagonal_num(23) == 65\n    hexagonal_num(24) == 67\n    hexagonal_num(25) == 69\n    hexagonal_num(26) == 71\n    hexagonal_num(27) == 73\n    hexagonal_num(28) == 75\n    hexagonal_num(29) == 77\n    hexagonal_num(30) == 79\n    hexagonal_num(31) == 81\n    hexagonal_num(32) == 83\n    hexagonal_num(33) == 85\n    hexagonal_num(34) == 87\n    hexagonal_num(35) == 89\n    hexagonal_num(36) == 91\n    hexagonal_num(37) == 93\n    hexagonal_num(38) == 95\n    hexagonal_num(39) == 97\n    hexagonal_num(40) == 99\n    hexagonal_num(41) == 101\n    hexagonal_num(42) == 103\n    hexagonal_num(43) == 105\n    hexagonal_num(44) == 107\n    hexagonal_num(45) == 109\n    hexagonal_num(46) == 111\n    hexagonal_num(47) == 113\n    hexagonal_num(48) == 115\n    hexagonal_num(49) == 117\n    hexagonal_num(50) == 119\n    hexagonal_num(51) == 121\n    hexagonal_num(52) == 123\n    hexagonal_num(53) == 125\n    hexagonal_num(54) == 127\n    hexagonal_num(55) == 129\n    hexagonal_num(56) == 131\n    hexagonal_num(57) == 133\n    hexagonal_num(58) == 135\n    hexagonal_num(59) == 137\n    hexagonal_num(60) == 139\n    hexagonal_num(61) == 141\n    hexagonal_num(62) == 143\n    hexagonal_num(63) == 145\n    hexagonal_num(64) == 147\n    hexagonal_num(65) == 149\n    hexagonal_num(66) == 151\n    hexagonal_num(67) == 153\n    hexagonal_num(68) == 155\n    hexagonal_num(69) == 157\n    hexagonal_num(70) == 159\n    hexagonal_num(71) == 161\n    hexagonal_num(72) == 163\n    hexagonal_num(73) == 165\n    hexagonal_num(74) == 167\n    hexagonal_num(75) == 169\n    hexagonal_num(76) == 171\n    hexagonal_num(77) == 173\n    hexagonal_num(78) == 175\n    hexagonal_num(79) == 177\n    hexagonal_num(80) == 179\n    hexagonal_num(81) == 181\n    hexagonal_num(82) == 183\n    hexagonal_num(83) == 185\n    hexagonal_num(84) == 187\n    hexagonal_num(85) == 189\n    hexagonal_num(86) == 191\n    hexagonal_num(87) == 193\n    hexagonal_num(88) == 195\n    hexagonal_num(89) == 197\n    hexagonal_num(90) == 199\n    hexagonal_num(91) == 201\n    hexagonal_num(92) == 203\n    hexagonal_num(93) == 205\n    hexagonal_num(94) == 207\n    hexagonal_num(95) == 209\n    hexagonal_num(96) == 211\n    hexagonal_num(97) == 213\n    hexagonal_num(98) == 215\n    hexagonal_num(99) == 217\n    hexagonal_num(100) == 219\n    hexagonal_num(101) == 221\n    hexagonal_num(102) == 223\n    hexagonal_num(103) == 225\n    hexagonal_num(104) == 227\n    hexagonal_num(105) == 229\n    hexagonal_num(106) == 231\n    hexagonal_num(107) == 233\n    hexagonal_num(108) == 235\n    hexagonal_num(109) == 237\n    hexagonal_num(110) == 239\n    hexagonal_num(111) == 241\n    hexagonal_num(112) == 243\n    hexagonal_num(113) == 245\n    hexagonal_num(114) == 247\n    hexagonal_num(115) == 249\n    hexagonal_num(116) == 251\n    hexagonal_num(117) == 253\n    hexagonal_num(118) == 255\n    hexagonal_num(119) == 257\n    hexagonal_num(120) == 259\n    hexagonal_num(121) == 261\n    hexagonal_num(122) == 263\n    hexagonal_num(123) == 265\n    hexagonal_num(124) == 267\n    hexagonal_num(125) == 269\n    hexagonal_num(126) == 271\n    hexagonal_num(127) == 273\n    hexagonal_num(128) == 275\n    hexagonal_num(129) == 277\n    hexagonal_num(130) == 279\n    hexagonal_num(131) == 281\n    hexagonal_num(132) == 283\n    hexagonal_num(133) == 285\n    hexagonal_num(134) == 287\n    hexagonal_num(135) == 289\n    hexagonal_num(136) == 291\n    hexagonal_num(137) == 293\n    hexagonal_num(138) == 295\n    hexagonal_num(139) == 297\n    hexagonal_num(140) == 299\n    hexagonal_num(141) == 301\n    hexagonal_num(142) == 303\n    hexagonal_num(143) == 305\n    hexagonal_num(144) == 307\n    hexagonal_num(145) == 309\n    hexagonal_num(146) == 311\n    hexagonal_num(147) == 313\n    hexagonal_num(148) == 315\n    hexagonal_num(149) == 317\n    hexagonal_num(150) == 319\n    hexagonal_num(151) == 321\n    hexagonal_num(152) == 323\n    hexagonal_num(153) == 325\n    hexagonal_num(154) == 327\n    hexagonal_num(155) == 329\n    hexagonal_num(156) == 331\n    hexagonal_num(157) == 333\n    hexagonal_num(158) == 335\n    hexagonal_num(159) == 337\n    hexagonal_num(160) == 339\n    hexagonal_num(161) == 341\n    hexagonal_num(162) == 343\n    hexagonal_num(163) == 345\n    hexagonal_num(164) == 347\n    hexagonal_num(165) == 349\n    hexagonal_num(166) == 351\n    hexagonal_num(167) == 353\n    hexagonal_num(168) == 355\n    hexagonal_num(169) == 357\n    hexagonal_num(170) == 359\n    hexagonal_num(171) == 361\n    hexagonal_num(172) == 363\n    hexagonal_num(173) == 365\n    hexagonal_num(174) == 367\n    hexagonal_num(175) == 369\n    hexagonal_num(176) == 371\n    hexagonal_num(177) == 373\n    hexagonal_num(178) == 375\n    hexagonal_num(179) == 377\n    hexagonal_num(180) == 379\n    hexagonal_num(181) == 381\n    hexagonal_num(18"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef multi_zero_count(nums):\n    '''\n    Write a function to find the ratio of the number of zeroes multiplied by the number of non-zeroes in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([0,1,0,3,12]) == 0.75, \"The result is wrong.\"\nassert     zero_count([0,0,1,1,1,0,0,0]) == 1.0, \"The result is wrong.\"\nassert     zero_count([0,1,0,3,12,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1]) == 1.0, \"The result is wrong.\"\nassert     zero_count([0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1]) == 1.0, \"The result is wrong.\"\nassert     zero_count([1,1,0,1,1,0,1,1,1,1]) == 1.0, \"The result is wrong.\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nnums = array('i', [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])\nprint(f'nums: {nums}')\nprint(f'zero_count(nums): {zero_count(nums)}')\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i, j = 0, 0\n    count = 0\n    while j < len(nums):\n        if nums[j] == 0:\n            count += 1\n        i += 1\n        j += 1\n    return count / i\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     zero_count([]) == 0, \"Empty array\"\nassert     zero_count([1,0]) == 1, \"One zeros\"\nassert     zero_count([0,1]) == 1, \"One non-zero\"\nassert     zero_count([0,1,0]) == 2, \"Two zeros\"\n\ndef count_zeros(nums):\n    '''\n    Write a function to count the number of zeros in an array of integers.\n    '''\n    # convert the array to list\n    nums = list(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_max(nums):\n    '''\n    Write a function to find the maximum element in an array.\n    '''\n    max_ = float('-inf')\n    for num in nums:\n        if num > max_:\n            max_ = num\n    return max_\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([0, 0, 0, 1, 0, 1, 0, 0, 0, 0]) == 0.25, \"FAILED\"\nassert     zero_count([0, 0, 0, 1, 0, 0, 0, 0, 0, 0]) == 0.25, \"FAILED\"\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0.25, \"FAILED\"\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 1]) == 0.75, \"FAILED\"\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 1, 0]) == 0.5, \"FAILED\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([0,0,1,0,1,1]) == 0.25, \"Should be 0.25\"\nassert     zero_count([0,0,1,0,1,1,0,1,0,0,1]) == 0.5, \"Should be 0.5\"\nassert     zero_count([0,0,0,1,1,1,0,1,0,1]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     zero_count([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_Sum_Of_Powers_Of_Two(4) == True\nassert is_Sum_Of_Powers_Of_Two(12) == True\nassert is_Sum_Of_Powers_Of_Two(42) == False\nassert is_Sum_Of_Powers_Of_Two(4) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False, \"should be False\"\nassert     is_Sum_Of_Powers_Of_Two(10) == True, \"should be True\"\nassert     is_Sum_Of_Powers_Of_Two(12) == False, \"should be False\"\nassert     is_Sum_Of_Powers_Of_Two(128) == True, \"should be True\"\nassert     is_Sum_Of_Powers_Of_Two(12) == False, \"should be False\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nis_Sum_Of_Powers_Of_Two(4)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_Sum_Of_Powers_Of_Two(1) == False\n    is_Sum_Of_Powers_Of_Two(2) == True\n    is_Sum_Of_Powers_Of_Two(3) == False\n    is_Sum_Of_Powers_Of_Two(4) == True\n    is_Sum_Of_Powers_Of_Two(5) == False\n    is_Sum_Of_Powers_Of_Two(6) == True\n    is_Sum_Of_Powers_Of_Two(7) == True\n    is_Sum_Of_Powers_Of_Two(8) == False\n    is_Sum_Of_Powers_Of_Two(9) == False\n    is_Sum_Of_Powers_Of_Two(10) == False\n    is_Sum_Of_Powers_Of_Two(11) == True\n    is_Sum_Of_Powers_Of_Two(12) == True\n    is_Sum_Of_Powers_Of_Two(13) == False\n    is_Sum_Of_Powers_Of_Two(14) == False\n    is_Sum_Of_Powers_Of_Two(15) == False\n    is_Sum_Of_Powers_Of_Two(16) == True\n    is_Sum_Of_Powers_Of_Two(17) == True\n    is_Sum_Of_Powers_Of_Two(18) == False\n    is_Sum_Of_Powers_Of_Two(19) == True\n    is_Sum_Of_Powers_Of_Two(20) == False\n    is_Sum_Of_Powers_Of_Two(21) == True\n    is_Sum_Of_Powers_Of_Two(22) == False\n    is_Sum_Of_Powers_Of_Two(23) == False\n    is_Sum_Of_Powers_Of_Two(24) == False\n    is_Sum_Of_Powers_Of_Two(25) == True\n    is_Sum_Of_Powers_Of_Two(26) == False\n    is_Sum_Of_Powers_Of_Two(27) == True\n    is_Sum_Of_Powers_Of_Two(28) == True\n    is_Sum_Of_Powers_Of_Two(29) == False\n    is_Sum_Of_Powers_Of_Two(30) == True\n    is_Sum_Of_Powers_Of_Two(31) == True\n    is_Sum_Of_Powers_Of_Two(32) == True\n    is_Sum_Of_Powers_Of_Two(33) == True\n    is_Sum_Of_Powers_Of_Two(34) == True\n    is_Sum_Of_Powers_Of_Two(35) == True\n    is_Sum_Of_Powers_Of_Two(36) == True\n    is_Sum_Of_Powers_Of_Two(37) == True\n    is_Sum_Of_Powers_Of_Two(38) == True\n    is_Sum_Of_Powers_Of_Two(39) == True\n    is_Sum_Of_Powers_Of_Two(40) == False\n    is_Sum_Of_Powers_Of_Two(41) == True\n    is_Sum_Of_Powers_Of_Two(42) == True\n    is_Sum_Of_Powers_Of_Two(43) == False\n    is_Sum_Of_Powers_Of_Two(44) == False\n    is_Sum_Of_Powers_Of_Two(45) == True\n    is_Sum_Of_Powers_Of_Two(46) == False\n    is_Sum_Of_Powers_Of_Two(47) == True\n    is_Sum_Of_Powers_Of_Two(48) == False\n    is_Sum_Of_Powers_Of_Two(49) == False\n    is_Sum_Of_Powers_Of_Two(50) == False\n    is_Sum_Of_Powers_Of_Two(51) == False\n    is_Sum_Of_Powers_Of_Two(52) == True\n    is_Sum_Of_Powers_Of_Two(53) == False\n    is_Sum_Of_Powers_Of_Two(54) == False\n    is_Sum_Of_Powers_Of_Two(55) == False\n    is_Sum_Of_Powers_Of_Two(56) == False\n    is_Sum_Of_Powers_Of_Two(57) == True\n    is_Sum_Of_Powers_Of_Two(58) == False\n    is_Sum_Of_Powers_Of_Two(59) == True\n    is_Sum_Of_Powers_Of_Two(60) == False\n    is_Sum_Of_Powers_Of_Two(61) == False\n    is_Sum_Of_Powers_Of_Two(62) == False\n    is_Sum_Of_Powers_Of_Two(63) == True\n    is_Sum_Of_Powers_Of_Two(64) == False\n    is_Sum_Of_Powers_Of_Two(65) == False\n    is_Sum_Of_Powers_Of_Two(66) == True\n    is_Sum_Of_Powers_Of_Two(67) == True\n    is_Sum_Of_Powers_Of_Two(68) == True\n    is_Sum_Of_Powers_Of_Two(69) == True\n    is_Sum_Of_Powers_Of_Two(70) == True\n    is_Sum_Of_Powers_Of_Two(71) == False\n    is_Sum_Of_Powers_Of_Two(72) == True\n    is_Sum_Of_Powers_Of_Two(73) == True\n    is_Sum_Of_Powers_Of_Two(74) == True\n    is_Sum_Of_Powers_Of_Two(75) == True\n    is_Sum_Of_Powers_Of_Two(76) == False\n    is_Sum_Of_Powers_Of_Two(77) == True\n    is_Sum_Of_Powers_Of_Two(78) == True\n    is_Sum_Of_Powers_Of_Two(79) == True\n    is_Sum_Of_Powers_Of_Two(80) == True\n    is_Sum_Of_Powers_Of_Two(81) == True\n    is_Sum_Of_Powers_Of_Two(82) == True\n    is_Sum_Of_Powers_Of_Two(83) == True\n    is_Sum_Of_Powers_Of_Two(84) == True\n    is_Sum_Of_Powers_Of_Two(85) == False\n    is_Sum_Of_Powers_Of_Two(86) == True\n    is_Sum_Of_Powers_Of_Two(87) == False\n    is_Sum_Of_Powers_Of_Two(88) == False\n    is_Sum_Of_Powers_Of_Two(89) == False\n    is_Sum_Of_Powers_Of_Two(90) == False\n    is_Sum_Of_Powers_Of_Two(91) == True\n    is_Sum_Of_Powers_Of_Two(92) == True\n    is_Sum_Of_Powers_Of_Two(93) == True\n    is_Sum_Of_Powers_Of_Two(94) == True\n    is_Sum_Of_Powers_Of_Two(95) == True\n    is_Sum_Of_Powers_Of_Two(96) == True\n    is_Sum_Of_Powers_Of_Two(97) == True\n    is_Sum_Of_Powers_Of_Two(98) == True\n    is_Sum_Of_Powers_Of_Two(99) == False\n    is_Sum_Of_Powers_Of_Two(100) == False\n    is_Sum_Of_Powers_Of_Two(101) == False\n    is_Sum_Of_Powers_Of_Two(102) == False\n    is_Sum_Of_Powers_Of_Two(103) == True\n    is_Sum_Of_Powers_Of_Tw"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(1) == False\nis_Sum_Of_Powers_Of_Two(3) == True\nis_Sum_Of_Powers_Of_Two(10) == True\nis_Sum_Of_Powers_Of_Two(21) == False\nis_Sum_Of_Powers_Of_Two(15) == True\nis_Sum_Of_Powers_Of_Two(27) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(2) == True\nassert \nis_Sum_Of_Powers_Of_Two(6) == False\nassert \nis_Sum_Of_Powers_Of_Two(3) == True\nassert \nis_Sum_Of_Powers_Of_Two(7) == True\nassert \nis_Sum_Of_Powers_Of_Two(12) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(17)     == True,     '17 is Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(11)     == False, '11 is not Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(3)     == False, '3 is not Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(17)     == False, '17 is not Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(11)     == False, '11 is not Sum of power of 2'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_Sum_Of_Powers_Of_Two(-1)\nassert not is_Sum_Of_Powers_Of_Two(0)\nassert is_Sum_Of_Powers_Of_Two(1)\nassert is_Sum_Of_Powers_Of_Two(2)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4) == True, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(8) == False, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(9) == True, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(10) == False, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(11) == True, 'Wrong'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Sum_Of_Powers_Of_Two_v2(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    circle_circumference(0) == 0, \"circle_circumference(0)\"\n    circle_circumference(1) == pi, \"circle_circumference(1)\"\n    circle_circumference(2) == pi*2, \"circle_circumference(2)\"\n    circle_circumference(3) == pi*2*3, \"circle_circumference(3)\"\n    circle_circumference(4) == pi*2*3*4, \"circle_circumference(4)\"\n    circle_circumference(5) == pi*2*3*4*5, \"circle_circumference(5)\"\n    circle_circumference(6) == pi*2*3*4*5*6, \"circle_circumference(6)\"\n    circle_circumference(7) == pi*2*3*4*5*6*7, \"circle_circumference(7)\"\n    circle_circumference(8) == pi*2*3*4*5*6*7*8, \"circle_circumference(8)\"\n    circle_circumference(9) == pi*2*3*4*5*6*7*8*9, \"circle_circumference(9)\"\n    circle_circumference(10) == pi*2*3*4*5*6*7*8*9*10, \"circle_circumference(10)\"\n    circle_circumference(11) == pi*2*3*4*5*6*7*8*9*10*11, \"circle_circumference(11)\"\n    circle_circumference(12) == pi*2*3*4*5*6*7*8*9*10*11*12, \"circle_circumference(12)\"\n    circle_circumference(13) == pi*2*3*4*5*6*7*8*9*10*11*12*13, \"circle_circumference(13)\"\n    circle_circumference(14) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14, \"circle_circumference(14)\"\n    circle_circumference(15) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15, \"circle_circumference(15)\"\n    circle_circumference(16) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16, \"circle_circumference(16)\"\n    circle_circumference(17) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17, \"circle_circumference(17)\"\n    circle_circumference(18) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18, \"circle_circumference(18)\"\n    circle_circumference(19) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19, \"circle_circumference(19)\"\n    circle_circumference(20) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20, \"circle_circumference(20)\"\n    circle_circumference(21) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21, \"circle_circumference(21)\"\n    circle_circumference(22) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22, \"circle_circumference(22)\"\n    circle_circumference(23) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23, \"circle_circumference(23)\"\n    circle_circumference(24) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24, \"circle_circumference(24)\"\n    circle_circumference(25) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25, \"circle_circumference(25)\"\n    circle_circumference(26) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26, \"circle_circumference(26)\"\n    circle_circumference(27) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27, \"circle_circumference(27)\"\n    circle_circumference(28) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28, \"circle_circumference(28)\"\n    circle_circumference(29) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29, \"circle_circumference(29)\"\n    circle_circumference(30) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30, \"circle_circumference(30)\"\n    circle_circumference(31) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31, \"circle_circumference(31)\"\n    circle_circumference(32) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32, \"circle_circumference(32)\"\n    circle_circumference(33) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32*33, \"circle_circumference(33)\"\n    circle_circumference(34) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32*33*34, \"circle_circumference(34)\"\n    circle_circumference(35) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32*33*34*35, \"circle_circumference(35)\"\n    circle_circumference(36) == pi*2*3*"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert circle_circumference(4) == 12.566370614359172, 'Testing fails'"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circle_circumference(1) == 3.141592653589793\nassert circle_circumference(2) == 12.566370614359172\nassert circle_circumference(3) == 15.241379310343505\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncircle_circumference(0.5) == 5.1270951772\nassert circle_circumference(2) == 14.25\nassert circle_circumference(4) == 22.636363636\nassert circle_circumference(8) == 40.0833333333\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circle_circumference(1) == pi * 2, 'incorrect circumference'\nassert     circle_circumference(2) == pi * 4, 'incorrect circumference'\nassert     circle_circumference(0) == pi, 'incorrect circumference'\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(1) ==  3.141592653589793\nassert     circle_circumference(2) ==  9.27741935483871\n\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert circle_circumference(2) == math.pi*2\nassert circle_circumference(0) == math.pi\nassert circle_circumference(5) == 2*math.pi*5\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \nassert not circle_circumference(1)\nassert not circle_circumference(2)\nassert not circle_circumference(0)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncircle_circumference(2) == 5.61\nassert\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_singly([[1,2,3],[4,5],[6]])==[1,2,3,4,5,6], \"extract_singly failed\"\nassert     extract_singly([[1,2,3,4],[5,6]])==[1,2,3,4,5,6], \"extract_singly failed\"\nassert     extract_singly([[1,2,3,4,5],[6,7]])==[1,2,3,4,5,6,7], \"extract_singly failed\"\nassert     extract_singly([[1,2,3,4,5,6,7],[8,9,10]])==[1,2,3,4,5,6,7,8,9,10], \"extract_singly failed\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[1],2,3]) == 1\nassert     extract_singly([[1,2,3]]) == 1\nassert     extract_singly([[1,2,3],2]) == 1\nassert     extract_singly([[1,2,3],[1,2,3]]) == 1\nassert     extract_singly([[1],[2,3],[4],[5,6,7]]) == 1\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1,2],[3,4]]) == [1,2,3,4]\nassert     extract_singly([[1,2,3,4],[5,6,7,8]]) == [1,2,3,4,5,6,7,8]\nassert     extract_singly([[1,2,3],[4,5,6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2,3,4],[5,6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2,3],[4,5,6,7,8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert     extract_singly([[1, 2, 3], [4, 5, 6], []]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2, 3], [4, 5, 6]]) == {1, 2, 3, 4, 5, 6}\n\n\ndef flatten_rec(test_list):\n    '''\n    Write a recursive function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[1,2,3], [4,5,6], [7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12,13]]) == set([1,2,3,4,5,6,7,8,9,10,11,12,13])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('correct')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1,2], [3], [[4]]]) == set([1,2,3,4])\nassert     extract_singly([[1], [2], [3]]) == set([1,2,3])\nassert     extract_singly([[1,2], [3], [4]]) == set([1,2,3,4])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef flatten_list_of_lists(lst):\n    '''\n    Write a function to flatten a list of lists into a single list of numbers.\n    '''\n    pass"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[1,2,3],2,3]) == 3, \"Should be 3\"\nassert     extract_singly([[1,2,3],2]) == 3, \"Should be 3\"\nassert     extract_singly([1,2,3]) == 3, \"Should be 3\"\nassert     extract_singly([1,2]) == 2, \"Should be 2\"\nassert     extract_singly([]) == 0, \"Should be 0\""
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('  *** Pancake Sort Test ***')\nnums = [3,2,4,1]\npancake_sort(nums)\nassert nums == [1,2,3,4]\nprint('passed')\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([3]) == [3]\nassert     pancake_sort([4,1,2]) == [1,2,4]\nassert     pancake_sort([4,3,2,1]) == [1,2,3,4]\n\n\ndef pancake_sort2(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        max_element_idx = nums.index(max(nums[0:i+1]))\n        nums.insert(max_element_idx+1, nums.pop(i))\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pancake_sort([3,2,1]) == [1,2,3], \"pancake_sort\"\nassert     pancake_sort([3,2,1,4]) == [1,2,3,4], \"pancake_sort\"\nassert     pancake_sort([1,2,3]) == [1,2,3], \"pancake_sort\"\nassert     pancake_sort([1,2,3,4]) == [1,2,3,4], \"pancake_sort\"\nassert     pancake_sort([0,1,2,3,4]) == [0,1,2,3,4], \"pancake_sort\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert pancake_sort([2, 1, 4, 3]) == [4, 3, 2, 1]\nassert pancake_sort([4, 1, 3, 2]) == [2, 1, 3, 4]\nassert pancake_sort([3, 2, 1]) == [1, 2, 3]\nassert pancake_sort([1, 2, 3]) == [3, 2, 1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not \nassert pancake_sort([3, 5, 2, 1, 4]) == [1, 2, 3, 4, 5]\nassert pancake_sort([3, 5, 2, 1, 4, 7, 6]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([1]) == [1]\nassert     pancake_sort([3,2,4]) == [2,3,4]\nassert     pancake_sort([3,2,4,5,6]) == [3,6,5,4,2]\nassert     pancake_sort([1,2,3,4,5]) == [2,1,4,5,3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Test case 1:')\nlist1 = ['a','b','c','b','c','d']\nlist2 = ['a','a','b','d']\nlist3 = ['a','b','a','c','c','b','d','c']\nprint(count_samepair(list1,list2,list3))\n\nassert\nprint('Test case 2:')\nlist1 = ['a','a','b','c']\nlist2 = ['a','b','a','b','a','b','a','a','a','b','c','c','d']\nlist3 = ['a','a','b','a','c','a','b','a','b','a','b','a','c','c','d']\nprint(count_samepair(list1,list2,list3))\n\nassert\nprint('Test case 3:')\nlist1 = ['a','a','b','c','c','d']\nlist2 = ['a','b','a','b','a','b','a','a','a','b','c','c','d']\nlist3 = ['a','a','b','a','c','a','b','a','b','a','b','a','c','c','d']\nprint(count_samepair(list1,list2,list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 3\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 1\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 0\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 2\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    count_samepair([1,2,1],['a','b','a'],['b','c','b'])==2\nassert \n    count_samepair([1,2,1],['a','a','a'],['b','c','b'])==3\nassert \n    count_samepair([1,2,1],['a','b','a'],['b','a','b'])==1\nassert \n    count_samepair([1,2,1],['a','b','a'],['b','c','b'])==1\nassert \n    count_samepair([1,2,1],['a','a','a'],['b','c','b'])==1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3],[2,3,1],[2,2,1]) == 1\nassert     count_samepair([1,2,3,4,5],[2,3,4,4,5],[2,2,1,4,5]) == 3\nassert     count_samepair([1,2,3,4,5,6],[2,3,4,4,5,6],[2,2,1,4,5,6]) == 5\n\ndef count_samepair_improve(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_samepair([1,2,3,4,5],[5,4,3,2,1],[4,3,2,1,5]) == 3, 'incorrect!'\nassert     count_samepair([1,2,3,4,5],[5,4,3,2,1],[1,5,4,3,2]) == 0, 'incorrect!'\nassert     count_samepair([1,2,3,4,5],[5,4,3,2,1],[5,4,3,2,1]) == 2, 'incorrect!'"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ncount_samepair([1,2,3,4,5],[2,4,6,6,6],\n[3,6,6,6,6])==5\n\n'''\nIf same item occurs multiple times, you should not count that item multiple times.\nWrite a function to return the count of items that are identical in the same position of three given lists.\n'''"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_samepair([1,2,3], [2,1,2], [3,2,1]) == 3\nassert     count_samepair([1,2,3], [2,1,3], [3,2,1]) == 0\nassert     count_samepair([1,2,3], [2,1,2], [1,2,1]) == 1\nassert     count_samepair([1,2,3], [2,1,2], [3,2,1]) == 1\nassert     count_samepair([1,2,3], [2,1,2], [3,2,1,1]) == 2\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 0, \"Error!\"\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 4, \"Error!\"\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 0, \"Error!\""
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_lists(([1,2,3],)) == 1\nfind_lists(([],)) == 1\nfind_lists(([], [], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [], [])) == 2\nfind_lists(([], [], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 0\nassert     find_lists((1, 2)) == 1\nassert     find_lists((1, 2, 3, 4, 5)) == 1\nassert     find_lists((1, 2, 3, 4, 5, 6, 7)) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nInput = (1,2,3,4,5)\nOutput = 5\n\nassert \nInput = (1,2,3,4,5,2,5)\nOutput = 5\n\nassert \nInput = (1,2,3,4,5,6,7,8,9,10)\nOutput = 10\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists(('',1,2,'',3,'',4)) == 1\nassert     find_lists(('',1,2,3,4,'',5,6,7)) == 2\nassert     find_lists(('',1,2,3,4,5,6,7)) == 3\nassert     find_lists(('',1,2,3,4,5,6,7,8,9)) == 4\nassert     find_lists(('1','2','3','4','5','6','7','8','9')) == 0\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 3, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 1, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 2, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 0, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 2, \"Wrong result\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists(((1,), (2,), (3,), (4,), (5,))) == 2\nassert     find_lists(((1,2), (2,3), (3,4), (4,5))) == 1\nassert     find_lists(((1,2), (2,3), (3,4), (4,5,6))) == 0\nassert     find_lists(((1,2,3), (2,3,4), (3,4,5))) == 0\nassert     find_lists(((1,2,3), (2,3,4), (3,4,5,6))) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists(('a', 'b', 'c', 'a', 'c', 'c')) ==         3\nassert     find_lists(('a', 'b', 'c', 'a', 'c', 'd')) ==         0\nassert     find_lists(('a', 'b', 'c')) ==                         2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists(([1, 2], [3, 4], [5, 6], [7, 8])) \nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8])) \nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8], ['a', 'b', 'c'])) == 3\nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'])) == 4\nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'])) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists(()) == 0, \"Expected 0, but got \" + str(find_lists((), ))\nassert     find_lists((\"Hello\", \"World\")) == 0, \"Expected 0, but got \" + str(find_lists((\"Hello\", \"World\"), ))\nassert     find_lists((\"Hello\", \"World\", \"Test\")) == 0, \"Expected 0, but got \" + str(find_lists((\"Hello\", \"World\", \"Test\"), ))\nassert     find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\")) == 1, \"Expected 1, but got \" + str(find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\"), ))\nassert     find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\")) == 2, \"Expected 2, but got \" + str(find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\"), ))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n\n    arr = [-1, 2, 1, -4] \n    max_Abs_Diff(arr) \n\n    arr = [-1, -2, -3, 4, 5]\n    max_Abs_Diff(arr)\n    \n    arr = [-2, -5, -4, -1, 5, 5, 0]\n    max_Abs_Diff(arr)"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([1, -4, 5, -3]) == 5\nassert     max_Abs_Diff([1, 2, 3, 4]) == 2\nassert     max_Abs_Diff([-4, 5, -3]) == 5\nassert     max_Abs_Diff([1, 1, 1, 1, 1]) == 1\nassert     max_Abs_Diff([1, -2, -2, -2, -2]) == 3\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum absolute difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_Abs_Diff([1,2,3,4,5]) == 2, \"Should be 2\"\nassert max_Abs_Diff([1,2,3,4,-5]) == 2, \"Should be 2\"\nassert max_Abs_Diff([-2,1,2,3,-4]) == 3, \"Should be 3\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([1,2,3,4]) ==     3\nassert     max_Abs_Diff([4,3,2,1]) ==     4\nassert     max_Abs_Diff([1,-2,3,4]) ==     4\nassert     max_Abs_Diff([1,2,3,4,5,6,7]) ==     7\nassert     max_Abs_Diff([1,2,3,4,5,6,7,8]) ==     7\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([1,2,3,-4,5,4]) == 6, \"Wrong Answer\"\nassert     max_Abs_Diff([4,2,-3,-4,5,4]) == 6, \"Wrong Answer\"\nassert     max_Abs_Diff([-1,2,3,4,5,-4]) == 5, \"Wrong Answer\"\nassert     max_Abs_Diff([-2,4,2,4,5,4]) == 6, \"Wrong Answer\"\nassert     max_Abs_Diff([-1,-2,4,-4,5,-4]) == 5, \"Wrong Answer\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4]) == 5, \"Wrong\"\nassert     max_Abs_Diff([1, -2, 3, 4]) == 3, \"Wrong\"\nassert     max_Abs_Diff([-1, 2, 3, 4]) == 3, \"Wrong\"\nassert     max_Abs_Diff([1, -2, -3, -4]) == 4, \"Wrong\"\nassert     max_Abs_Diff([-1, 2, -3, -4]) == 4, \"Wrong\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_Abs_Diff([-5, -5, 0, 5, 10]) == 5\nassert \nmax_Abs_Diff([-5, -5, 0, 5, 10]) == 0\nassert \nmax_Abs_Diff([-5, -5, -5, -10]) == -5\nassert \nmax_Abs_Diff([-5, -5, 0, 5, 10]) == 15\nassert \nmax_Abs_Diff([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(1, 1, 3) == (1, 1), 'find_solution should return (1, 1) if given a = 1, b = 1 and n = 3.'\nassert     find_solution(1, 2, 6) == (3, 2), 'find_solution should return (3, 2) if given a = 1, b = 2 and n = 6.'\nassert     find_solution(3, 3, 7) == (1, 3), 'find_solution should return (1, 3) if given a = 3, b = 3 and n = 7.'\nassert     find_solution(2, 1, 3) == None, 'find_solution should return None if given a = 2, b = 1 and n = 3.'\nassert     find_solution(2, 2, 4) == None, 'find_solution should return None if given a = 2, b = 2 and n = 4.'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(2, 3, 1) == None, 'find_solution is wrong'\nassert     find_solution(3, 3, 1) == (1, 1), 'find_solution is wrong'\nassert     find_solution(2, 3, 4) == None, 'find_solution is wrong'\nassert     find_solution(3, 3, 4) == (1, 1), 'find_solution is wrong'\nassert     find_solution(2, 3, 5) == None, 'find_solution is wrong'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('check_solution passed')"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_solution(a = 4, b = 6, n = 11) == (5, 0)\nassert     find_solution(a = 5, b = 7, n = 17) == (6, 1)\nassert     find_solution(a = 7, b = 5, n = 13) == (0, 2)\nassert     find_solution(a = 3, b = 10, n = 15) == (0, 2)\nassert     find_solution(a = 6, b = 9, n = 19) == (0, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_solution(2, 3, 2) == (2, 1)\nassert     find_solution(6, 2, 7) == None\nassert     find_solution(1, 3, 6) == (1, 3)\nassert     find_solution(1, 2, 9) == (1, 2)\nassert     find_solution(2, 4, 10) == (2, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nfind_solution(2, 5, 25) == (5, -1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_solution(2, 4, 0) == None\nfind_solution(2, 4, 1) == (1, 1)\nfind_solution(2, 4, 2) == (1, 2)\nfind_solution(2, 4, 3) == (1, 3)\nfind_solution(2, 4, 4) == (2, 2)\nfind_solution(2, 4, 5) == (2, 3)\nfind_solution(2, 4, 6) == (2, 4)\nfind_solution(2, 4, 7) == (2, 5)\nfind_solution(2, 4, 8) == (2, 6)\nfind_solution(2, 4, 9) == (2, 7)\nfind_solution(2, 4, 10) == (2, 8)\nfind_solution(2, 4, 11) == (2, 9)\nfind_solution(2, 4, 12) == (2, 10)\nfind_solution(2, 4, 13) == (2, 11)\nfind_solution(2, 4, 14) == (2, 12)\nfind_solution(2, 4, 15) == (2, 13)\nfind_solution(2, 4, 16) == (2, 14)\nfind_solution(2, 4, 17) == (2, 15)\nfind_solution(2, 4, 18) == (2, 16)\nfind_solution(2, 4, 19) == (2, 17)\nfind_solution(2, 4, 20) == (2, 18)\nfind_solution(2, 4, 21) == (2, 19)\nfind_solution(2, 4, 22) == (2, 20)\nfind_solution(2, 4, 23) == (2, 21)\nfind_solution(2, 4, 24) == (2, 22)\nfind_solution(2, 4, 25) == (2, 23)\nfind_solution(2, 4, 26) == (2, 24)\nfind_solution(2, 4, 27) == (2, 25)\nfind_solution(2, 4, 28) == (2, 26)\nfind_solution(2, 4, 29) == (2, 27)\nfind_solution(2, 4, 30) == (2, 28)\nfind_solution(2, 4, 31) == (2, 29)\nfind_solution(2, 4, 32) == (2, 30)\nfind_solution(2, 4, 33) == (2, 31)\nfind_solution(2, 4, 34) == (2, 32)\nfind_solution(2, 4, 35) == (2, 33)\nfind_solution(2, 4, 36) == (2, 34)\nfind_solution(2, 4, 37) == (2, 35)\nfind_solution(2, 4, 38) == (2, 36)\nfind_solution(2, 4, 39) == (2, 37)\nfind_solution(2, 4, 40) == (2, 38)\nfind_solution(2, 4, 41) == (2, 39)\nfind_solution(2, 4, 42) == (2, 40)\nfind_solution(2, 4, 43) == (2, 41)\nfind_solution(2, 4, 44) == (2, 42)\nfind_solution(2, 4, 45) == (2, 43)\nfind_solution(2, 4, 46) == (2, 44)\nfind_solution(2, 4, 47) == (2, 45)\nfind_solution(2, 4, 48) == (2, 46)\nfind_solution(2, 4, 49) == (2, 47)\nfind_solution(2, 4, 50) == (2, 48)\nfind_solution(2, 4, 51) == (2, 49)\nfind_solution(2, 4, 52) == (2, 50)\nfind_solution(2, 4, 53) == (2, 51)\nfind_solution(2, 4, 54) == (2, 52)\nfind_solution(2, 4, 55) == (2, 53)\nfind_solution(2, 4, 56) == (2, 54)\nfind_solution(2, 4, 57) == (2, 55)\nfind_solution(2, 4, 58) == (2, 56)\nfind_solution(2, 4, 59) == (2, 57)\nfind_solution(2, 4, 60) == (2, 58)\nfind_solution(2, 4, 61) == (2, 59)\nfind_solution(2, 4, 62) == (2, 60)\nfind_solution(2, 4, 63) == (2, 61)\nfind_solution(2, 4, 64) == (2, 62)\nfind_solution(2, 4, 65) == (2, 63)\nfind_solution(2, 4, 66) == (2, 64)\nfind_solution(2, 4, 67) == (2, 65)\nfind_solution(2, 4, 68) == (2, 66)\nfind_solution(2, 4, 69) == (2, 67)\nfind_solution(2, 4, 70) == (2, 68)\nfind_solution(2, 4, 71) == (2, 69)\nfind_solution(2, 4, 72) == (2, 70)\nfind_solution(2, 4, 73) == (2, 71)\nfind_solution(2, 4, 74) == (2, 72)\nfind_solution(2, 4, 75) == (2, 73)\nfind_solution(2, 4, 76) == (2, 74)\nfind_solution(2, 4, 77) == (2, 75)\nfind_solution(2, 4, 78) == (2, 76)\nfind_solution(2, 4, 79) == (2, 77)\nfind_solution(2, 4, 80) == (2, 78)\nfind_solution(2, 4, 81) == (2, 79)\nfind_solution(2, 4, 82) == (2, 80)\nfind_solution(2, 4, 83) == (2, 81)\nfind_solution(2, 4, 84) == (2, 82)\nfind_solution(2, 4, 85) == (2, 83)\nfind_solution(2, 4, 86) == (2, 84)\nfind_solution(2, 4, 87) == (2, 85)\nfind_solution(2, 4, 88) == (2, 86)\nfind_solution(2, 4, 89) == (2, 87)\nfind_solution(2, 4, 90) == (2, 88)\nfind_solution(2, 4, 91) == (2, 89)\nfind_solution(2, 4, 92) == (2, 90)\nfind_solution(2, 4, 93) == (2, 91)\nfind_solution(2, 4, 94) == (2, 92)\nfind_solution(2, 4, 95) == (2, 93)\nfind_solution(2, 4, 96) == (2, 94)\nfind_solution(2, 4, 97) == (2, 95)\nfind_solution(2, 4, 98) == (2, 96)\nfind_solution(2, 4, 99) == (2, 97)\nfind_solution(2, 4, 100) == (2, 98)\nfind_solution(2, 4, 101) == (2, 99)\nfind_solution(2, 4, 102) == (2, 100)\nfind_solution(2, 4, 103) == (2, 101)\nfind_solution(2, 4, 104) == (2, 102)\nfind_solution(2, 4, 105) == (2, 103)\nfind_solution(2, 4, 106) == (2, 104)\nfind_solution(2, 4, 107) == (2, 105)\nfind_solution(2, 4, 108) == (2, 106)\nfind_solution(2, 4, 109) == (2, 107)\nfind_solutio"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution(2, -3, 4) == (1, 2)\nassert     find_solution(3, -5, 6) == (2, 3)\nassert     find_solution(1, -2, 5) == (1, 2)\nassert     find_solution(2, -3, 4) == (1, 2)\nassert     find_solution(1, 2, 5) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution(4,3,10) == (3,5), \"Wrong\"\nassert     find_solution(1,2,6) == (2,4), \"Wrong\"\nassert     find_solution(3,1,7) == (2,4), \"Wrong\"\nassert     find_solution(4,5,12) == (4,5), \"Wrong\"\nassert     find_solution(8,2,20) == (0,4), \"Wrong\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1, 2, 2, 3, 4], [2, 2, 3, 4]) == None\nassert     remove_elements([1, 2, 2, 3, 4], [3, 4]) == [1, 2, 4]\nassert     remove_elements([1, 2, 2, 3, 4], [2, 3, 4]) == [1, 2, 4]\nassert     remove_elements([1, 2, 2, 3, 4], [2]) == [1, 3, 4]\nassert     remove_elements([], [2, 3, 4]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], []) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_elements([1,2,3,4,5], [1,3,5]) == [2,4], \"Wrong\"\nassert     remove_elements([1,2,3,4,5], [4,5]) == [], \"Wrong\"\nassert     remove_elements([1,2,3,4,5], [4]) == [], \"Wrong\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,3,4],[1,2,3]) == []\nassert     remove_elements([1,2,3,4],[3,4]) == []\nassert     remove_elements([],[]) == []\nassert     remove_elements([1,2,3,4,5],[1,2,3]) == [5]\nassert     remove_elements([1,2,3,4,5],[2,3,4]) == [1,5]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,1,1], [1,1,1]) == [], \"Remove all elements from list2\"\nassert     remove_elements([1,2,2], [1,1,1]) == [1,2,2], \"Remove all elements from list2\"\nassert     remove_elements([1,2,3], [1,1,1]) == [1,2,3], \"Remove all elements from list2\"\nassert     remove_elements([1,2,2], [1,1,1,1]) == [], \"Remove all elements from list2\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef convert_list_to_set(l):\n    '''\n    Write a function to convert a list into a set.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_elements([1,2,3,4,5],[1,2,3]) == [5]\nassert     remove_elements([1,2,3,4,5],[2,3]) == []\nassert     remove_elements([],[]) == []\nassert     remove_elements([1,2,3,4,5],[2]) == [1,3,4,5]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"c\",\"e\",\"f\"]) == \\\n    [\"a\",\"b\",\"g\",\"h\"]\nassert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"a\",\"e\",\"h\",\"i\"]) == \\\n    [\"b\",\"c\",\"d\",\"g\",\"h\",\"i\"]\nassert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"i\",\"j\",\"k\",\"l\"]) == \\\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\nassert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[]) == \\\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\nassert \nremove_elements([],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == \\\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_series(3) == 5\nassert     sum_series(4) == 13\nassert     sum_series(5) == 42\nassert     sum_series(10) == 55\nassert     sum_series(1) == 1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_series(6) == 10\nassert sum_series(7) == 13\nassert sum_series(8) == 21\nassert sum_series(9) == 34\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    \ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Solution:\n    # sum_ = n\n    # for i in range(1, n // 2):\n    #     sum_ -= 2*i\n    # return sum_\n    # Solution:\n    # sum_ = n\n    # for i in range(1, n // 2 + 1):\n    #     sum_ += i*2\n    # return sum_\n    # Solution:\n    # sum_ = n\n    # for i in range(1, n // 2 + 1):\n    #     sum_ -= i*2\n    # return sum_\n\n    # Solution:\n    sum_ = n\n    if n == 1:\n        return 1\n    for i in range(1, n // 2 + 1):\n        sum_ -= i*2\n    return sum_\n\nassert sum_series(1) == 1\nassert sum_series(2) == 1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_series(1) == 0, sum_series(1)\nassert     sum_series(4) == 7, sum_series(4)\nassert     sum_series(5) == 15, sum_series(5)\nassert     sum_series(6) == 26, sum_series(6)\nassert     sum_series(7) == 36, sum_series(7)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 2\nassert     sum_series(3) == 3\nassert     sum_series(4) == 4\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 0\nassert     sum_series(2) == 2\nassert     sum_series(3) == 5\nassert     sum_series(4) == 13\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 2\nassert     sum_series(3) == 5\nassert     sum_series(4) == 9\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \narea_polygon(2, 5) == math.sqrt(5)*10\nassert area_polygon(3, 4) == (5*math.sqrt(3)/2)**2\n\n\n'''\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\nNote: The length of sides should be greater than or equal to 3 and the number of sides should be an even number.\n\nThe first side of the regular polygon is the vertex of the first side and the length of the other two sides should be same.\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(5, 3) == pi / 3 * 5 ** 2, \"Wrong answer.\"\nassert     area_polygon(6, 4) == pi / 4 * 6 ** 2, \"Wrong answer.\"\nassert     area_polygon(6, 5) == 2 * pi / 5 * 6 ** 2, \"Wrong answer.\"\nassert     area_polygon(4, 4) == pi / 4 * 4 ** 2, \"Wrong answer.\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_polygon(4,5) == 8\nassert     area_polygon(2,5) == 4\nassert     area_polygon(1,5) == 0\n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(4, 2) == 4 * tan(pi / 4)\nassert area_polygon(5, 3) == 5 * tan(pi / 5)\nassert area_polygon(3, 4) == 3 * tan(pi / 4)\nassert area_polygon(8, 6) == 8 * tan(pi / 6)\n\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given three vertices of the triangle.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nUse the function below to test your function. Make sure your function is deterministic.\n'''\n\ns = 6\nl = 3\nassert area_polygon(s,l) == 6\ns = 1\nl = 3\nassert area_polygon(s,l) == 3\ns = 2\nl = 3\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(div_sum(11))\nprint(div_sum(22))\nprint(div_sum(3))\nprint(div_sum(4))\nprint(div_sum(8))\nprint(div_sum(19))\nprint(div_sum(19))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndiv_sum(6) == False\ndiv_sum(5) == True\ndiv_sum(9) == True\ndiv_sum(18) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.extend([i, n//i])\n    return sum(divisors) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef div_sum_soln(a, b):\n    '''\n    The sum of two numbers\u2019s divisors should be equal to each other.\n    '''\n    return (div_sum_naive(a, b) == div_sum_naive(b, a))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_sum(10) == True, \"Wrong answer.\"\nassert     div_sum(11) == False, \"Wrong answer.\"\nassert     div_sum(100) == True, \"Wrong answer.\"\nassert     div_sum(101) == False, \"Wrong answer.\"\nassert     div_sum(999) == True, \"Wrong answer.\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef div_sum_2(n, m): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef divisible(a,b):\n    '''\n    Write a function to determine whether a number is divisible by any number up to and including its double.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     div_sum(6) == True, 'Failed: 6'\nassert     div_sum(8) == False, 'Failed: 8'\nassert     div_sum(9) == False, 'Failed: 9'\nassert     div_sum(11) == False, 'Failed: 11'\nassert     div_sum(4) == True, 'Failed: 4'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     div_sum(6) == True, 'Wrong output'\nassert div_sum(7) == False, 'Wrong output'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_char_position('') == 0, \n            \"count_char_position should return 0 for a blank string.\"\nassert     count_char_position('a') == 1, \n            \"count_char_position should return 1 for an alphabet.\"\nassert     count_char_position('A') == 1, \n            \"count_char_position should return 1 for a capital alphabet.\"\nassert     count_char_position('abc') == 3, \n            \"count_char_position should return 3 for a string containing 3 characters.\"\nassert     count_char_position('aabb') == 2, \n            \"count_char_position should return 2 for a string containing 3 characters.\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_char_position(\"aacaaab\") == 2\nassert     count_char_position(\"abccba\") == 3\nassert     count_char_position(\"aaaa\") == 4\nassert     count_char_position(\"abcde\") == 0\nassert     count_char_position(\"abcd\") == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_char_position('') == 0\nassert count_char_position('a') == 1\nassert count_char_position('aa') == 2\nassert count_char_position('aA') == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_char_position(\"Hello\") == 2\nassert count_char_position(\"abc\") == 1\nassert count_char_position(\"ABC\") == 1\nassert count_char_position(\"abcdefghij\") == 7\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_char_position(\"hbgdwnzqas\") == 4\nassert count_char_position(\"AaBb\") == 2\nassert count_char_position(\"cbacdcbe\") == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_char_position('sour') == 2\nassert count_char_position('Sour') == 2\nassert count_char_position('sour') == 0\nassert count_char_position('sour') == 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_char_position(\"\") == 0\nassert     count_char_position(\"test\") == 0\nassert     count_char_position(\"Test\") == 1\nassert     count_char_position(\"Testtest\") == 3\nassert     count_char_position(\"TESTtest\") == 4\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_char_position('abcdefg') == 6, 'Your count_char_position function is not correct!'\nassert     count_char_position('heLLo world') == 7, 'Your count_char_position function is not correct!'\nassert     count_char_position('hello world') == 4, 'Your count_char_position function is not correct!'\nassert     count_char_position('hello  world') == 8, 'Your count_char_position function is not correct!'\nassert     count_char_position('hello     world') == 8, 'Your count_char_position function is not correct!'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_char_position('abcdefghijklmnopqrstuvwxyz') == 26\nassert count_char_position('ABcdefghijklmnopqrstuvwxyz') == 26\nassert count_char_position('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert count_char_position('ABCDEFGHIJKLMNOPQRSTUVwXYZ') == 26\nassert count_char_position('a') == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(find_even_pair([1,2,3,4,5,6]))"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_even_pair([]) == 0\nassert     find_even_pair([1,2,3]) == 0\nassert     find_even_pair([1,2,3,4,5]) == 2\nassert     find_even_pair([3,4,5,6,7]) == 2\nassert     find_even_pair([1,2,3,4,5,6,7,8,9]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_even_pair(nums_example) == 1, 'Expected: 1, got: %s' %(find_even_pair(nums_example))\nassert     find_even_pair(nums_example_2) == 2, 'Expected: 2, got: %s' %(find_even_pair(nums_example_2))\nassert     find_even_pair(nums_example_3) == 2, 'Expected: 2, got: %s' %(find_even_pair(nums_example_3))\nassert     find_even_pair(nums_example_4) == 0, 'Expected: 0, got: %s' %(find_even_pair(nums_example_4))\nassert     find_even_pair(nums_example_5) == 2, 'Expected: 2, got: %s' %(find_even_pair(nums_example_5))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_even_pair([1, 3, 2]) == 1\nfind_even_pair([1, 4, 5, 6, 7, 2]) == 1\nfind_even_pair([1, 2, 2, 1, 1]) == 1\nfind_even_pair([0, 2, 5, 7, 9, 8]) == 3\nfind_even_pair([1, 4, 3, 2, 5, 6, 7, 8, 9]) == 3\nfind_even_pair([1, 4, 5, 6, 7, 8, 9]) == 0\nfind_even_pair([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n\n\ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_even_pair([4, 2, 5, 4]) == 2\nassert find_even_pair([4, 1, 5, 4]) == 0\nassert find_even_pair([2, 4, 5, 4]) == 1\nassert find_even_pair([4, 3, 5, 4]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 1,     \"Error 1\"\nassert     find_even_pair([0,1,2,4,5]) == 2,     \"Error 2\"\nassert     find_even_pair([0,1,3,4,5]) == 3,     \"Error 3\"\nassert     find_even_pair([1,2,3,5,6]) == 4,     \"Error 4\"\nassert     find_even_pair([1,3,5,7,9]) == 0,     \"Error 5\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_even_pair([1,3,2]) == 2, 'incorrect output'\nassert     find_even_pair([2,3,4]) == 2, 'incorrect output'\nassert     find_even_pair([4,2,1,3,2]) == 3, 'incorrect output'\n\ndef find_even_pair2(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_power_of_2(4) == 2\nassert next_power_of_2(8) == 2\nassert next_power_of_2(10) == 2\nassert next_power_of_2(11) == 3\nassert next_power_of_2(16) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_power_of_2(2)     == 2\nassert     next_power_of_2(1)     == 2\nassert     next_power_of_2(0)     == 1\nassert     next_power_of_2(10)     == 2\nassert     next_power_of_2(20)     == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(2) == 4\nassert     next_power_of_2(1) == 4\nassert     next_power_of_2(8) == 16\nassert     next_power_of_2(15) == 16\nassert     next_power_of_2(16) == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_power_of_2(2)    == 4\nassert next_power_of_2(10)    == 20\nassert next_power_of_2(15)    == 32\nassert next_power_of_2(8)    == 16\nassert next_power_of_2(0)    == 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(next_power_of_2(3)) # 2\nprint(next_power_of_2(2)) # 1\nprint(next_power_of_2(5)) # 2\nprint(next_power_of_2(15)) # 8\nprint(next_power_of_2(9)) # 2\nprint(next_power_of_2(30)) # 8\nprint(next_power_of_2(100)) # 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(3) == 4\nassert next_power_of_2(8) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_power_of_2(16) == 2\nassert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(9) == 2\nassert     next_power_of_2(31) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(15) == 32, \" Wrong output\"\nassert     next_power_of_2(16) == 64, \" Wrong output\"\nassert     next_power_of_2(17) == 128, \" Wrong output\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    frequency([1,3,1,1,1],1) == 4\nassert \n    frequency([1,3,1,1,1],10) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([1,1,2,3],1)==2\nassert     frequency([1,1,2,3],3)==1\nassert     frequency([1,1,2,3],4)==0\nassert     frequency([1,1,2,3],5)==0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency([1,2,1,1,1],1) == 4\nassert     frequency([1,2,1,1,1],2) == 2\nassert     frequency([1,2,1,1,1],3) == 0\nassert     frequency([1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,2,3,3], 3) == 1, 'incorrect'\nassert     frequency([1,2,3,3], 3) == 0, 'incorrect'\nassert     frequency([1,2,3,3], 1) == 1, 'incorrect'\nassert     frequency([1,2,3,3], 0) == 0, 'incorrect'\nassert     frequency([1,2,3,3], 4) == 0, 'incorrect'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([2, 2, 1, 2, 2, 2], 2) == 2\nassert     frequency([], 5) == 0\nassert     frequency([], 2) == 0\nassert     frequency([1, 2, 1], 1) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([1,2,4,1,3,2,5,6,3],1)==4\nassert     frequency([1,2,4,1,3,2,5,6,3],3)==2\nassert     frequency([1,2,4,1,3,2,5,6,3],6)==1\n\n\n\ndef combine(l1,l2): \n    '''\n    Write a function to combine a list and another list into one sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency([1,2,3],1) == 2\nassert     frequency([1,2,3],2) == 1\nassert     frequency([1,2,3],3) == 1\nassert     frequency([1,2,3],4) == 0\nassert     frequency([1,2,3],0) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef generator(a,x):\n    '''\n    Write a function to generate a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\nTesting frequency')\n\nassert (frequency([2,1,5,1,1,3,3,3,1], 3) == 4)\nassert (frequency([2,1,5,1,1,3,3,3,1], 1) == 7)\nassert (frequency([], 1) == 0)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef get_input(prompt):\n    '''\n    Reads input from stdin.\n    '''\n    return input(prompt)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_range_list([1, 2, 3, 4, 5], 1, 2) == 15\nassert sum_range_list([1, 2, 3, 4, 5], 0, 3) == 9\nassert sum_range_list([1, 2, 3, 4, 5], 4, 7) == 12\nassert sum_range_list([1, 2, 3, 4, 5], 2, 5) == 5\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_range_list([10, 20, 30, 40, 50], 2, 4) == 60\nassert     sum_range_list([10, 20, 30, 40, 50], 2, 5) == 60\nassert     sum_range_list([10, 20, 30, 40, 50], 0, 4) == 50\nassert     sum_range_list([10, 20, 30, 40, 50], 0, 5) == 30\nassert     sum_range_list([10, 20, 30, 40, 50], -2, -1) == 40\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 0, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], 1, 4) == 12\nassert     sum_range_list([1, 2, 3, 4], 1, 5) == 12\nassert     sum_range_list([1, 2, 3, 4], 0, 5) == 10\nassert     sum_range_list([1, 2, 3, 4], 0, 6) == 10\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 2, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], 1, 2) == 8\nassert     sum_range_list([1, 2, 3, 4], 0, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], -1, -4) == 5\nassert     sum_range_list([1, 2, 3, 4], 2, 5) == 12\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(sum_range_list([0, 2, 4, 6, 8, 10, 12], 1, 5))\nprint(sum_range_list([0, 2, 4, 6, 8, 10, 12], 2, 8))\nprint(sum_range_list([0, 2, 4, 6, 8, 10, 12], 1, 3))\nprint(sum_range_list([], 1, 0))\nprint(sum_range_list([], 0, 0))\nprint(sum_range_list([], 0, 1))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(2) == 5.0, 'Wrong result!'\nassert     perimeter_pentagon(3) == 7.0, 'Wrong result!'\nassert     perimeter_pentagon(4) == 10.0, 'Wrong result!'\nassert     perimeter_pentagon(5) == 15.0, 'Wrong result!'\nassert     perimeter_pentagon(6) == 21.0, 'Wrong result!'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(1) == 5, \"The correct answer is: 5\"\nassert     perimeter_pentagon(2) == 10, \"The correct answer is: 10\"\nassert     perimeter_pentagon(3) == 15, \"The correct answer is: 15\"\nassert     perimeter_pentagon(4) == 20, \"The correct answer is: 20\"\nassert     perimeter_pentagon(5) == 25, \"The correct answer is: 25\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(1) == 3\nassert     perimeter_pentagon(2) == 5\nassert     perimeter_pentagon(3) == 7\nassert     perimeter_pentagon(4) == 10\nassert     perimeter_pentagon(5) == 12\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint (\"correctness of perimeter_pentagon:\")\nprint (\"case 1:\")\nprint (perimeter_pentagon(2))\nprint (\"case 2:\")\nprint (perimeter_pentagon(3))\nprint (\"case 3:\")\nprint (perimeter_pentagon(4))\nprint (\"case 4:\")\nprint (perimeter_pentagon(5))\nprint (\"case 5:\")\nprint (perimeter_pentagon(6))\nprint (\"case 6:\")\nprint (perimeter_pentagon(7))\nprint (\"case 7:\")\nprint (perimeter_pentagon(8))\nprint (\"case 8:\")\nprint (perimeter_pentagon(9))\nprint (\"case 9:\")\nprint (perimeter_pentagon(10))\nprint (\"case 10:\")\nprint (perimeter_pentagon(11))\nprint (\"case 11:\")\nprint (perimeter_pentagon(12))\nprint (\"case 12:\")\nprint (perimeter_pentagon(13))\nprint (\"case 13:\")\nprint (perimeter_pentagon(14))\nprint (\"case 14:\")\nprint (perimeter_pentagon(15))\nprint (\"case 15:\")\nprint (perimeter_pentagon(16))\nprint (\"case 16:\")\nprint (perimeter_pentagon(17))\nprint (\"case 17:\")\nprint (perimeter_pentagon(18))\nprint (\"case 18:\")\nprint (perimeter_pentagon(19))\nprint (\"case 19:\")\nprint (perimeter_pentagon(20))\nprint (\"case 20:\")\nprint (perimeter_pentagon(21))\nprint (\"case 21:\")\nprint (perimeter_pentagon(22))\nprint (\"case 22:\")\nprint (perimeter_pentagon(23))\nprint (\"case 23:\")\nprint (perimeter_pentagon(24))\nprint (\"case 24:\")\nprint (perimeter_pentagon(25))\nprint (\"case 25:\")\nprint (perimeter_pentagon(26))\nprint (\"case 26:\")\nprint (perimeter_pentagon(27))\nprint (\"case 27:\")\nprint (perimeter_pentagon(28))\nprint (\"case 28:\")\nprint (perimeter_pentagon(29))\nprint (\"case 29:\")\nprint (perimeter_pentagon(30))\nprint (\"case 30:\")\nprint (perimeter_pentagon(31))\nprint (\"case 31:\")\nprint (perimeter_pentagon(32))\nprint (\"case 32:\")\nprint (perimeter_pentagon(33))\nprint (\"case 33:\")\nprint (perimeter_pentagon(34))\nprint (\"case 34:\")\nprint (perimeter_pentagon(35))\nprint (\"case 35:\")\nprint (perimeter_pentagon(36))\nprint (\"case 36:\")\nprint (perimeter_pentagon(37))\nprint (\"case 37:\")\nprint (perimeter_pentagon(38))\nprint (\"case 38:\")\nprint (perimeter_pentagon(39))\nprint (\"case 39:\")\nprint (perimeter_pentagon(40))\nprint (\"case 40:\")\nprint (perimeter_pentagon(41))\nprint (\"case 41:\")\nprint (perimeter_pentagon(42))\nprint (\"case 42:\")\nprint (perimeter_pentagon(43))\nprint (\"case 43:\")\nprint (perimeter_pentagon(44))\nprint (\"case 44:\")\nprint (perimeter_pentagon(45))\nprint (\"case 45:\")\nprint (perimeter_pentagon(46))\nprint (\"case 46:\")\nprint (perimeter_pentagon(47))\nprint (\"case 47:\")\nprint (perimeter_pentagon(48))\nprint (\"case 48:\")\nprint (perimeter_pentagon(49))\nprint (\"case 49:\")\nprint (perimeter_pentagon(50))\nprint (\"case 50:\")\nprint (perimeter_pentagon(51))\nprint (\"case 51:\")\nprint (perimeter_pentagon(52))\nprint (\"case 52:\")\nprint (perimeter_pentagon(53))\nprint (\"case 53:\")\nprint (perimeter_pentagon(54))\nprint (\"case 54:\")\nprint (perimeter_pentagon(55))\nprint (\"case 55:\")\nprint (perimeter_pentagon(56))\nprint (\"case 56:\")\nprint (perimeter_pentagon(57))\nprint (\"case 57:\")\nprint (perimeter_pentagon(58))\nprint (\"case 58:\")\nprint (perimeter_pentagon(59))\nprint (\"case 59:\")\nprint (perimeter_pentagon(60))\nprint (\"case 60:\")\nprint (perimeter_pentagon(61))\nprint (\"case 61:\")\nprint (perimeter_pentagon(62))\nprint (\"case 62:\")\nprint (perimeter_pentagon(63))\nprint (\"case 63:\")\nprint (perimeter_pentagon(64))\nprint (\"case 64:\")\nprint (perimeter_pentagon(65))\nprint (\"case 65:\")\nprint (perimeter_pentagon(66))\nprint (\"case 66:\")\nprint (perimeter_pentagon(67))\nprint (\"case 67:\")\nprint (perimeter_pentagon(68))\nprint (\"case 68:\")\nprint (perimeter_pentagon(69))\nprint (\"case 69:\")\nprint (perimeter_pentagon(70))\nprint (\"case 70:\")\nprint (perimeter_pentagon(71))\nprint (\"case 71:\")\nprint (perimeter_pentagon(72))\nprint (\"case 72:\")\nprint (perimeter_pentagon(73))\nprint (\"case 73:\")\nprint (perimeter_pentagon(74))\nprint (\"case 74:\")\nprint (perimeter_pentagon(75))\nprint (\"case 75:\")\nprint (perimeter_pentagon(76))\nprint (\"case 76:\")\nprint (perimeter_pentagon(77))\nprint (\"case 77:\")\nprint (perimeter_pentagon(78))\nprint (\"case 78:\")\nprint (perimeter_pentagon(79))\nprint (\"case 79:\")\nprint (perimeter_pentagon(80))\nprint (\"case 80:\")\nprint (perimeter_pentagon(81))\nprint (\"case 81:\")\nprint (perimeter_pentagon(82))\nprint (\"case 82:\")\nprint (perimeter_pentagon(83))\nprint (\"case 83:\")\nprint (perimeter_pentagon(84))\nprint (\"case 84:\")\nprint (perimeter_pentagon(85))\nprint (\"case 85:\")\nprint (perimeter_pentagon(86))\nprint (\"case 86:\")\nprint (perimeter_pentagon(87))\nprint (\"case 87:\")\nprint (perimeter_pentagon(88))\nprint (\"case 88:\")\nprint (perimeter_pentagon(89))\nprint (\"case 89:\")\nprint (perimeter_pentagon(90))\nprint (\"case 90:\")\nprint (perimeter_pentagon(91))\nprint (\"case 91:\")\nprint (perimeter_pentagon(92))\nprint (\"case 92:\")\nprint (perimeter_pentagon(93))\nprint (\"case 93:\")\nprint (perimeter_pentagon(94))\nprint (\"case 94:\")\nprint (perimeter_pentagon(95))\nprint (\"case 95:\")\nprint (perimeter_pentagon(96))\nprint (\"case 96:\")\nprint (perimeter_pentagon(97))\nprint (\"case 97:\")\nprint (perimeter_pentagon(98))\nprint (\"case 98:\")\nprint (perimeter_pentagon(99))\nprint (\"case 99:\")\nprint (perimeter_pentagon(100))\nprint (\"case 100:\")\nprint (perimeter_pentagon(101))\nprint (\"case 101:\")\nprint (perimeter_pentagon(102))\nprint (\"case 102:\")\nprint (perimeter_pentagon(103))\nprint (\"case 103:\")\nprint (perimeter_pentagon(104))\nprint (\"case 104:\")\nprint (perimeter_pentagon(105))\nprint (\"case 105:\")\nprint (perimeter_pentagon(106))\nprint (\"case 106:\")\nprint (perimeter_pentagon(107))\nprint (\"case 107:\")\nprint (perimeter_pentagon(108))\nprint (\"case 108:\")\nprint (perimeter_pentagon(109))\nprint (\"case 109:\")\nprint (perimeter_pentagon(110))\nprint (\"case 110:\")\nprint (perimeter_pentagon(11"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perimeter_pentagon(1) == 5.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(2) == 10.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(3) == 15.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(4) == 20.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(5) == 25.0, 'Pentagon is not a valid pentagon'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(5) == 20\nassert     perimeter_pentagon(6) == 24\nassert     perimeter_pentagon(7) == 28\nassert     perimeter_pentagon(10) == 50\nassert     perimeter_pentagon(11) == 52\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\"\"\n*******************************************************************************\n                    PYTHON 3 PRACTICE PROBLEM TESTING                               *\n*******************************************************************************\n\"\"\")\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(4) == 5\nassert     perimeter_pentagon(5) == 10\nassert     perimeter_pentagon(6) == 15\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_pentagon_perimeter(l1, l2, l3):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the lengths of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # test_cases\n    '''\n    >>> test_cases = []\n    >>> for i in range(3):\n    ...     test_cases.append(i)\n    >>> for i in range(5, 10):\n    ...     test_cases.append(i)\n    >>> for i in range(10, 20):\n    ...     test_cases.append(i)\n    >>> test_cases = sorted(test_cases, key = lambda i: i, reverse = True)\n    >>> test_cases\n    [10, 12, 14, 16, 18, 20]\n    >>> for i in range(10):\n    ...     print(f'{i} - {perimeter_pentagon(test_cases[i])}')\n    0 - 5.24054415982787\n    1 - 8.91480757438733\n    2 - 15.60584366467655\n    3 - 22.99271850340274\n    4 - 30.85608859022768\n    5 - 37.78845913823356\n    6 - 44.90748860011553\n    7 - 52.94899671519386\n    8 - 60.25088292709871\n    9 - 65.72644789028776\n    '''\n    # case: sides = 10\n    assert perimeter_pentagon(10) == 22.7\n    # case: sides = 12\n    assert perimeter_pentagon(12) == 33.4\n    # case: sides = 14\n    assert perimeter_pentagon(14) == 44.1\n    # case: sides = 16\n    assert perimeter_pentagon(16) == 52.8\n    # case: sides = 18\n    "
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance(\"abra cadabra\") == 4\nassert     count_occurance(\"\") == 0\nassert     count_occurance(\"std\") == 2\n\ndef count_occurance_best(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    '''\n    two ways to solve this question:\n    1) use in built function count. \n    2) use helper function.\n    '''\n    # 1)\n    # inbuilt method\n    return s.count('std')\n\n    # 2)\n    # helper method\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance('stdf') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_occurance('Hello World') == 1\nassert count_occurance('Hello World Python') == 1\nassert count_occurance('Hello Python') == 2\nassert count_occurance('I love Python') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 3, \"Not working\"\nassert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 4, \"Not working\"\nassert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 0, \"Not working\"\nassert     count_occurance(\"abcdef\") == 0, \"Not working\"\nassert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 2, \"Not working\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance('std') == 1, 'Example 1'\nassert     count_occurance('std') == 0, 'Example 2'\nassert     count_occurance('avg') == 2, 'Example 3'\nassert     count_occurance('far') == 1, 'Example 4'\nassert     count_occurance('study') == 3, 'Example 5'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance(\"hello hello world world hello\") == 2, \"Expected 2, got \" + str(count_occurance(\"hello hello world world hello\"))\nassert     count_occurance(\"hello world hello\") == 1, \"Expected 1, got \" + str(count_occurance(\"hello world hello\"))\nassert     count_occurance(\"hello\") == 0, \"Expected 0, got \" + str(count_occurance(\"hello\"))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance('abdbeefa') == 3\nassert     count_occurance('a') == 1\nassert     count_occurance('a') == 1\nassert     count_occurance('abdbeefa') == 2\nassert     count_occurance('abdbeefa') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_occurance('abc') == 0, 'Test 1 failed'\nassert     count_occurance('abcstd') == 2, 'Test 2 failed'\nassert     count_occurance('abcdefgabc') == 3, 'Test 3 failed'\nassert     count_occurance('abcdefgabcdefg') == 2, 'Test 4 failed'\nassert     count_occurance('abcdefgabcdefgabc') == 1, 'Test 5 failed'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance(\"coding\") == 3\nassert     count_occurance(\"coding st\") == 2\nassert     count_occurance(\"coding std\") == 1\nassert     count_occurance(\"std\") == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type(('Hello', 'World', 1, True)) == True\nassert     check_type((1, 2, 'Hello', 'World', True)) == False\nassert     check_type(('Hello', 'World', 'cat')) == True\nassert     check_type((1, 2, 3)) == False\nassert     check_type((1, 'Hello', 3)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type(('1', '2', '3')) == True, \"Should be true\"\nassert     check_type((1, 2, 3)) == False, \"Should be false\"\nassert     check_type((True, False, True)) == True, \"Should be true\"\nassert     check_type((None, None, None)) == False, \"Should be false\"\nassert     check_type((1, 2.0, '3')) == False, \"Should be false\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type((1,2,'a',2.7)) == True, \"Wrong Answer\"\nassert check_type((1,2,'a',2.7)) == True, \"Wrong Answer\"\nassert check_type((1,2.7,'a',2)) == True, \"Wrong Answer\"\nassert check_type((1,2,'a',2,6)) == False, \"Wrong Answer\"\nassert check_type((1,2,'a',2,6,7)) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type([1, 2, 4]) == False, \"Wrong output\"\nassert     check_type([1, 2, 4.5]) == False, \"Wrong output\"\nassert     check_type([1, 2, \"3\"]) == False, \"Wrong output\"\nassert     check_type([1.1, 2.2, 4.5]) == False, \"Wrong output\"\nassert     check_type([1, 2, 4]) == True, \"Wrong output\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((1, 2, 3, 4, 5, 6, 7, 8, 9))     ==     (True,), \"The tuples are of different data types.\"\nassert     check_type((1, 2, 3, 4, 5, 6, 7, 8, \"s\"))     ==     (True,), \"The tuples are of different data types.\"\nassert     check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\")) == (True,), \"The tuples are of different data types.\"\nassert     check_type((1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9)) == (False,), \"The tuples are of different data types.\"\nassert     check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)) == (False,), \"The tuples are of different data types.\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type((1,2,3,4)) == True, \"Check if tuple's elements are of same data type\"\nassert     check_type((\"A\",\"B\",\"C\",\"D\")) == True, \"Check if tuple's elements are of same data type\"\nassert     check_type((\"1\",\"2\",\"3\",\"4\",\"5\",\"6\")) == False, \"Check if tuple's elements are of same data type\"\nassert     check_type((\"\",\"\")) == False, \"Check if tuple's elements are of same data type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type(('a','b','c')) == True, \"tuple of string should be considered as a string\"\nassert     check_type((1,2,3)) == True, \"tuple of int should be considered as int\"\nassert     check_type((1.1,2.2,3.3)) == True, \"tuple of float should be considered as float\"\nassert     check_type(('a','b','c','a')) == False, \"tuple of string should be considered as a string\"\nassert     check_type((1,2,'a','a')) == False, \"tuple of int should be considered as int\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type([1,2,3,4,5])==True, \"List is not correct\"\nassert     check_type([1,2,3.0,4,5])==True, \"Float is not correct\"\nassert     check_type([1,2,3,\"a\",5])==True, \"String is not correct\"\nassert     check_type([True,True,True,True,True])==True, \"Boolean is not correct\"\nassert     check_type([0,\"xyz\",0])==True, \"String is not correct\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type((1,2,3)) == True, \"First Tuple\"\nassert     check_type((1.2,2.2,3.3)) == True, \"Second Tuple\"\nassert     check_type((True,False,None)) == True, \"Third Tuple\"\nassert     check_type((False,False,True)) == False, \"Fourth Tuple\"\nassert     check_type((True,True,True)) == True, \"Fifth Tuple\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type((1, \"hi\", 5.9, True, (1,2,3))) == True\nassert     check_type((1, \"hi\", \"hi\", True, (1,2,3))) == False\nassert     check_type((1, \"hi\", 5.9, True, (1,2,3))) == False\nassert     check_type((1, \"hi\", \"hi\", True, (1,2,3))) == False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_majority([1, 2, 2, 2], 3, 2) == True\nassert     is_majority([1, 2, 2, 2], 4, 2) == False\nassert     is_majority([1, 1, 2, 2], 2, 1) == True\nassert     is_majority([1, 2, 2, 2], 2, 1) == False\n\ndef majority_element_binary_search_iterative(arr, n):\n    '''\n    Write a function that takes in a sorted array and its length (n) and returns the majority element.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(is_majority([1,2,1,1,3,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_majority([1,2,3], 3, 3) == True\n    is_majority([1,2,1,2,3], 5, 2) == True\n    is_majority([1,2,1,2,3,2], 5, 2) == False\n    is_majority([1,2,1,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,3], 5, 2) == True\n    is_majority([1,2,1,2,3], 5, 2) == False\n    is_majority([1,2,1,2,3,2], 5, 2) == False\n    is_majority([1,1,2,2,3], 5, 2) == True\n    is_majority([1,2,1,2,3,2], 5, 2) == True\n    is_majority([1,2,1,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,3], 5, 2) == False\n    is_majority([1,2,1,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_majority([1,2,3,4,5], 5, 3) == True\nassert     is_majority([1,2,3,4,5], 5, 1) == False\nassert     is_majority([1,1,1,1,1], 5, 1) == True\nassert     is_majority([1,1,1,1,1,1], 5, 1) == False\nassert     is_majority([1,1,2,1,1,1], 5, 1) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(2) == 0\nassert     count_Set_Bits(4) == 1\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(100) == 1\nassert     count_Set_Bits(10000) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(10) == 5, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(12) == 4, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(15) == 3, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(11) == 2, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(11) == 2, \"Your function count_Set_Bits returned incorrect result\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_Set_Bits(4) == 3 \nassert count_Set_Bits(8) == 3 \nassert count_Set_Bits(11) == 3\nassert count_Set_Bits(100) == 8\nassert count_Set_Bits(14) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(0) == 0, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(1) == 1, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(2) == 1, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(3) == 2, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(4) == 2, 'Wrong Function Signature/Name'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(11) == 4\nassert     count_Set_Bits(11) == 2\nassert     count_Set_Bits(111) == 4\nassert     count_Set_Bits(10011) == 5\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(9) == 0\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(11) == 2\nassert     count_Set_Bits(12) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(9) == 5\nassert     count_Set_Bits(63) == 0\nassert     count_Set_Bits(0) == 1\nassert     count_Set_Bits(-10) == 3\nassert     count_Set_Bits(7) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(10) == 6\nassert count_Set_Bits(101) == 5\nassert count_Set_Bits(111) == 4\nassert count_Set_Bits(1000) == 11\nassert count_Set_Bits(100) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Set_Bits(5) == 0\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(20) == 1\nassert     count_Set_Bits(10) == 0\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_values_string(\"\") == \"\", \"Provide empty input\"\nassert     odd_values_string(\"w3resource\") == \"\", \"Provide non-empty input\"\nassert     odd_values_string(\"aeiou\") == \"aeiou\", \"Provide non-empty input\"\nassert     odd_values_string(\"aeiouiiiiii\") == \"aeiou\", \"Provide non-empty input\"\nassert odd_values_string(\"aeiouiiiiii\") == \"aeiouiiiiii\", \"Provide non-empty input\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string('this is a test') =='sti'\nassert     odd_values_string('testing') == 'tst'\nassert     odd_values_string('test?') == 'tst'\nassert     odd_values_string('') == ''\nassert odd_values_string('dgfhdfhfhdf') == 'gfhdf'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('') == '', \"First test case does not pass.\"\nassert odd_values_string('abc') == 'b', \"Second test case does not pass.\"\nassert odd_values_string('python') == 'y', \"Third test case does not pass.\"\n\ndef makestring(str1,str2):\n    '''\n    Write a python function to return a string which is the concatenation of two given strings.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"You are passed:\", odd_values_string(\"eplkvkevbymz\"))\nprint(\"You should be passed: eplkvkevbymz\")\n\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string(\"string\"),     \"function fails\" \nassert not odd_values_string(\"string123\"), \"function fails\"\nassert not odd_values_string(\"abcd1234\"), \"function fails\"\nassert odd_values_string(\"abcd\") == \"bcd\", \"function fails\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string(\"sojk\") == \"sk\"\nassert odd_values_string(\"sojkab\") == \"sjk\"\nassert odd_values_string(\"sojkac\") == \"sk\"\nassert odd_values_string(\"sojkabk\") == \"sk\"\nassert odd_values_string(\"sojkad\") == \"sojk\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string('a') == 'a'\nassert     odd_values_string('abc') == 'abc'\nassert     odd_values_string('abcxyz') == 'abcxyz'\nassert     odd_values_string('abcdef') == 'abcdef'\nassert     odd_values_string('abcdefg') == 'bcdefg'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_values_string('python') == 'thp'\nassert odd_values_string('abcd') == ''\nassert odd_values_string('g') == 'g'\nassert odd_values_string('Python') == 'Pyth'\n\ndef check_parenthesis(str1):\n    '''\n    Write a python function to check if a given string contains balanced parentheses or not.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    min_of_three(4, 2, 1) == 1\n\nassert \n    min_of_three(1, 2, 3) == 1\n\nassert \n    min_of_three(100, 1, 1) == 100\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert min_of_three(-10,-8,4) == -8\nassert min_of_three(-10,-8,9) == -10\nassert min_of_three(-10,4,9) == 4\nassert min_of_three(-10,4,-9) == -10\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(-1,2,3) == 1\nassert     min_of_three(1,-2,3) == 1\nassert     min_of_three(1,-2,-3) == -3\nassert     min_of_three(100,5,1000) == 5\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(5,3,1) == 1\nassert     min_of_three(3,1,5) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(1,2,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(5,1,3) == 1\nassert     min_of_three(3,2,3) == 2\nassert     min_of_three(10,20,30) == 10\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(2,3,1) == 1\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # correct\n    assert \n    # correct\n    assert min_of_three(1,2,3) == 1\n    assert min_of_three(3,2,1) == 1\n    assert min_of_three(1,1,1) == 1\n    # incorrect\n    "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,1,1) == True, \"expected True, actual: False\"\nassert     all_Bits_Set_In_The_Given_Range(1,2,1) == True, \"expected True, actual: False\"\nassert     all_Bits_Set_In_The_Given_Range(1,1,2) == False, \"expected False, actual: True\"\nassert     all_Bits_Set_In_The_Given_Range(10,10,10) == True, \"expected True, actual: False\"\nassert     all_Bits_Set_In_The_Given_Range(10,10,12) == False, \"expected False, actual: True\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=8,l=5,r=8)     == False, \"Test Case 1 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=8,l=5,r=7)     == True, \"Test Case 2 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=7,l=5,r=8)     == False, \"Test Case 3 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=7,l=5,r=7)     == True, \"Test Case 4 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=7,l=5,r=0)     == True, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(5,0,4) == True \nassert \nall_Bits_Set_In_The_Given_Range(2,0,1) == False"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,5) == False\nassert     all_Bits_Set_In_The_Given_Range(6,0,6) == True\nassert     all_Bits_Set_In_The_Given_Range(6,1,6) == False\nassert     all_Bits_Set_In_The_Given_Range(6,2,6) == True\nassert     all_Bits_Set_In_The_Given_Range(6,3,6) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,0,0) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,0,1) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,1,1) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,1,2) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,2,1) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0, 0, 1) == True, \"Input: 0, 0, 1\"\nassert all_Bits_Set_In_The_Given_Range(0, 0, 0) == True, \"Input: 0, 0, 0\"\nassert all_Bits_Set_In_The_Given_Range(0, 2, 3) == True, \"Input: 0, 2, 3\"\nassert all_Bits_Set_In_The_Given_Range(0, 1, 0) == True, \"Input: 0, 1, 0\"\nassert all_Bits_Set_In_The_Given_Range(0, 1, 1) == False, \"Input: 0, 1, 1\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,1,10) == True, \"Should be True\"\nassert     all_Bits_Set_In_The_Given_Range(1,1,10) == False, \"Should be False\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,1) == False, \"Should be False\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,5) == True, \"Should be True\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=1,l=0,r=2) == True, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=2) == False, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=3) == False, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=4) == True, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=5) == False, \"TEST FAILED\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(10,20,30) == True\nassert all_Bits_Set_In_The_Given_Range(50,60,70) == True\nassert all_Bits_Set_In_The_Given_Range(10,0,1) == False\nassert all_Bits_Set_In_The_Given_Range(10,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(10,2,3) == False\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert re_arrange_array([1,2,3,4,5], 3) == [-4,1,2,3,5]\nassert re_arrange_array([5,4,3,2,1], 2) == [5,4,3,2,1]\nassert re_arrange_array([1,2,3,4,5], 5) == [-4,1,2,3,5]\nassert re_arrange_array([1,2,3,4,5], 1) == [-1,1,2,3,4,5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef reverse_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and reverses the first n elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     re_arrange_array([1, -5, 6, -2, 0, 3, -9], 5) == [1, -5, 6, -9, 0, 3, -2]\nassert     re_arrange_array([1, 5, 2, 7, 8, 3, -9, 6, 0, 4, -1], 5) == [1, 5, 2, 7, 8, 3, -9, 0, 4, 6, -1]\nassert     re_arrange_array([-1, -4, -3, -2, -5, -8, -9, -7, -6, -5, 4, -3, 2, 1, -9, -7, -8, 6, 5, 4], 6) == [-1, -4, -3, -2, -5, -8, -9, -7, -6, -5, 4, -3, 2, 1, -9, -7, -8, 6, 5, 4]\nassert     re_arrange_array([-4, -3, -2, -1, 0, 1, 2, 3, 4], 5) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n\nimport bisect\ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 2) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 5) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 6) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 7) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 8) == [-6,-7,-8,-9,1,2,3,4,5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     re_arrange_array([1,2,3,-1,-2,0], 3) == [0,1,2,-1,-2,3]\nassert re_arrange_array([-1,2,3,4,-1,2], 3) == [-1,-1,2,3,2,4]\nassert re_arrange_array([3,4,5,-1,2,0], 3) == [-1,0,-1,2,3,4]\n\n\ndef get_max_subarray_sum_element(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and returns the sum of all elements in the array that is the sum of at least one subarray with length less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([1, 2, -1, 3, -2, 4, 5, -3, -4], 1) == [-1, 1, -2, -3, 4, -4, -5, 5, 3, 2]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], 2) == [-2, -1, 3, 4, -5, 5]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], 1) == [-1, -2, -3, -4, -5, 5]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], 0) == [-1, -2, -3, -4, -5, 5]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], -1) == [-2, -1, 3, 4, -5, 5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n    TEST CASE 1:\n    Input: arr = [1, 2, 3, 4, 5, 6], n = 3\n    Output: [-1, 6, 5, 4, 3, 2]\n    Explanation:\n    Since arr[0] = 1 is negative, it should go before any element with a positive number.\n    Similarly, since arr[1] = 2 is negative, it also goes before any element with a positive number.\n    And finally, since arr[5] = 6 is positive, 6 should go after any element with negative number.\n\n    TEST CASE 2:\n    Input: arr = [1, 2, 3, 4, 5], n = 4\n    Output: [-1, 2, 3, 4]\n    Explanation:\n    Since arr[0] = 1 is negative, it should go before any element with a positive number.\n    Similarly, since arr[1] = 2 is negative, it also goes before any element with a positive number.\n    And finally, since arr[4] = 5 is positive, 5 should go after any element with negative number.\n\n    TEST CASE 3:\n    Input: arr = [-2, -1, 0, 3, -4], n = 2\n    Output: [3, -2, -1, 0, -4]\n    Explanation:\n    Since arr[0] = -2 is negative, it should go before any element with a positive number.\n    Similarly, since arr[1] = -1 is negative, it also goes before any element with a positive number.\n    And finally, since arr[3] = 0 is positive, 0 should go after any element with negative number.\n\n'''"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert re_arrange_array([-1, 3, 5, -5, 3, 2, 0, -1, 3], 4) == [-1, 0, 3, 3, 5, 3, 2, 3, -5]\nassert re_arrange_array([5, 1, -10, -3, -10, -7], 3) == [5, 1, -10, -10, -7, -3]\nassert re_arrange_array([2, 0, -2, -5], 1) == [2, 0, -2, -5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re_arrange_array([-1, 2, 3, 4, 5, 6, 7, 8], 3) == [-1, 2, 3, 4, 5, 6, 7, 8], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8], 4) == [-1, -2, -3, -4, 1, 2, 3, 4], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\nassert     re_arrange_array([-10, -2, -3, -4, -5, -6, -7, -8], 2) == [-10, -2, -3, -4, -5, -6, -7, -8], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\nassert     re_arrange_array([-5, -2, -3, -4, -1, 0, 1, 2, 3, 4], 2) == [-5, -2, -3, -4, -1, -2, -3, -4, -1, 0, 1, 2, 3, 4], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_blank(\"Hi        aDxDxdAD\",'D') == 'HiADDAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'B') == 'HiADxAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'x') == 'HiADxDxAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'f') == 'HiADxDxDAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'b') == 'HiADxDxDxAD'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_blank(\"\",'a') == 'a'\nassert     replace_blank(\"a\",'a') == 'a'\nassert     replace_blank(\"a\",' ') == 'a'\nassert     replace_blank(\"a \",' ') == 'a'\nassert     replace_blank(\"a \",'a') == 'a'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank(\"My name is John\",'x') == \"My name is Johnx\"\nassert     replace_blank(\"My name is John\",' ') == \"My name is John\"\nassert     replace_blank(\"My name is John\",'') == \"My name is John\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank('abc def', 'x') == 'abc xdef'\nassert     replace_blank('abc def','') == 'abc def'\nassert     replace_blank('abc def', 'y') == 'abc ydef'\nassert     replace_blank('','') == ''\nassert     replace_blank('  ','') == ''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank('', 'a') == ''\nassert     replace_blank('a', 'a') == 'a'\nassert     replace_blank('aaaaaaaaaaa', 'a') == 'aaaaaaaaaaa'\nassert     replace_blank('a ', 'a') == 'a a'\nassert     replace_blank('a a', 'a') == 'a a'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank(\"\", \"\") == \"\", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank(\"a b c\",' ') == \"a b c\", \"replace_blank should be replaced\"\nassert     replace_blank(\"a b c\",'d') == \"a b c\", \"replace_blank should be replaced\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank('', '*') == ''\nassert     replace_blank('a*', '*') == 'a*'\nassert     replace_blank('a*', '') == 'a*'\nassert     replace_blank('   ', '*') == '*'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef list_weight(list1):\n    '''\n    Write a function that takes in a list of items and returns a list containing the weights of the items in the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef larg_nnum(list1,n):\n    return list1[:n]\n\nassert larg_nnum([0,5,8,7,6],1) ==[7]\nassert larg_nnum([0,5,8,7,6],2) ==[8,7]\nassert larg_nnum([0,5,8,7,6],3) ==[5,7,8]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reversed_array(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the items in the original list\n    reversed.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     larg_nnum([1,2,3,4],3) == [4,3,2]\nassert     larg_nnum([1,2,3,4],3) == [4,3,2]\nassert     larg_nnum([1,2,3,4],1) == [4]\nassert     larg_nnum([],1) == []\nassert     larg_nnum([1,2,3],1) == [3]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlarg_nnum([1,4,2,3,4,5,6,7,8],4) == [4,5,6,7]\nassert \nlarg_nnum([1,4,2,3,4,5,6,7,8],5) == [4,5,6,7,8]\nassert \nlarg_nnum([1,4,2,3,4,5,6,7,8],6) == [4,5,6,7,8,1]\nassert \nlarg_nnum([1,4,2,3,4,5,6,7,8],10) == [4,5,6,7,8,1,2,3,4]\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_copy = list1\n    list_copy.sort()\n    return list_copy[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     larg_nnum([2,5,3,1,7,8,6,4],2) == [8,7], \"Correct result: [8,7]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],3) == [5,7,8], \"Correct result: [5,7,8]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],4) == [5,7,8,3], \"Correct result: [5,7,8,3]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],5) == [5,7,8,3,1], \"Correct result: [5,7,8,3,1]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],6) == [5,7,8,3,1,5], \"Correct result: [5,7,8,3,1,5]\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef larg_nnum_sol2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlarg_nnum([1, 5, 2, 8, 3, 7], 3) == [8, 7, 5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 1) == [5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 4) == [8, 7, 5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 1) == [5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 2) == [8, 7], \"WRONG RESULT\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef find_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlateralsuface_cylinder(r=1,h=2) == 3\nlateralsuface_cylinder(r=2,h=3) == 7\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"testcase1: \", lateralsuface_cylinder(1,1) )\nassert lateralsuface_cylinder(2,1) == 2.56\nassert lateralsuface_cylinder(1,2) == 1.05\nprint(\"testcase2: \", lateralsuface_cylinder(2,1) )\nassert lateralsuface_cylinder(3,1) == 2.68\nassert lateralsuface_cylinder(1.2,1) == 1.4\nprint(\"testcase3: \", lateralsuface_cylinder(2,2) )\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(r=3,h=4) == 16.0\nassert     lateralsuface_cylinder(r=4,h=3) == 8.0\nassert     lateralsuface_cylinder(r=5,h=5) == 26.0\nassert     lateralsuface_cylinder(r=6,h=6) == 36.0\nprint(\"You passed all test cases!\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlateralsuface_cylinder(0.5,0.6) == 0.5*0.6\n\nlateralsuface_cylinder(0.3,0.5) == 0.5*0.6\n\nlateralsuface_cylinder(0.3,0.3) == 0.5*0.3\n\nlateralsuface_cylinder(0.4,0.5) == 0.5*0.3\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    lateralsuface_cylinder(1,1) == 1\n    lateralsuface_cylinder(0.5,1) == 0.5\n    lateralsuface_cylinder(1,0.5) == 0.5\n    lateralsuface_cylinder(0.5,0.5) == 1\n\n'''\nExpected Output:\n\nlateralsuface_cylinder(1,1) == 1\nlateralsuface_cylinder(0.5,1) == 0.5\nlateralsuface_cylinder(1,0.5) == 0.5\nlateralsuface_cylinder(0.5,0.5) == 1\n'''"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsuface_cylinder(1,1) == 6\nassert     lateralsuface_cylinder(1,3) == 6\nassert     lateralsuface_cylinder(1,5) == 12\nassert     lateralsuface_cylinder(2,5) == 8\nassert     lateralsuface_cylinder(2,4) == 8\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(r=1,h=3)==4\nassert     lateralsuface_cylinder(r=1,h=1)==0\nassert     lateralsuface_cylinder(r=1,h=2)==0\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(4) == 8\nassert     volume_cube(8) == 64\nassert     volume_cube(5) == 125\n\n'''\nTesting code\n'''"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(5) == 50\nassert volume_cube(10) == 100\nassert volume_cube(1) == 1\n\ndef volume_cube_rec(side):\n    '''\n    Write a recursive function to find the volume of a cube given its side length.\n    '''\n    pass"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"Test passed\")\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(1) == 1\nassert volume_cube(2) == 8\nassert volume_cube(3) == 27\nassert volume_cube(4) == 64\nassert volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(3) == 27, \"volume_cube error\"\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(6) == 108\nassert     volume_cube(8) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_bit_set_number(0b101) == 0b100, \"Should be 0b100\"\nassert     even_bit_set_number(0b1010) == 0b1000, \"Should be 0b1000\"\nassert     even_bit_set_number(0b10111) == 0b1001, \"Should be 0b1001\"\nassert     even_bit_set_number(0b1010101101) == 0b101010110, \"Should be 0b101010110\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(1) == 0\nassert even_bit_set_number(5) == 0\nassert even_bit_set_number(0) == 1\nassert even_bit_set_number(2) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(12) == 13\nassert     even_bit_set_number(3) == 8\nassert     even_bit_set_number(5) == 12\nassert     even_bit_set_number(4) == 6\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(12) == 16, \"Should set even bits to 16\"\nassert     even_bit_set_number(10) == 20, \"Should set even bits to 20\"\nassert     even_bit_set_number(11) == 8, \"Should set even bits to 8\"\nassert     even_bit_set_number(15) == 10, \"Should set even bits to 10\"\nassert     even_bit_set_number(0) == 0, \"Should set even bits to 0\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_bit_set_number(21) == 4\n\neven_bit_set_number(25) == 7\n\ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_bit_set_number(0) == 0\nassert even_bit_set_number(3) == 3\nassert even_bit_set_number(7) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert even_bit_set_number(1) == 0\nassert even_bit_set_number(2) == 1\nassert even_bit_set_number(3) == 1\nassert even_bit_set_number(4) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(0x3) == 0x3, \"incorrect result\"\nassert     even_bit_set_number(0x0) == 0x0, \"incorrect result\"\nassert     even_bit_set_number(0x4) == 0x0, \"incorrect result\"\nassert     even_bit_set_number(0x8) == 0x4, \"incorrect result\"\nassert     even_bit_set_number(0x3) == 0x8, \"incorrect result\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_bit_set_number(11) == 9\neven_bit_set_number(12) == 10\neven_bit_set_number(101) == 5\neven_bit_set_number(1) == 1"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_occurences([(1,3),(1,2),(2,3),(1,1),(3,1),(2,2),(2,3),(3,2)]) == Counter({(1,3): 2, (1,2): 3, (2,3): 2, (3,1): 1, (2,2): 1, (2,3): 1, (3,2): 1})\nassert check_occurences([(1,3),(1,2),(1,3),(3,1),(2,2),(2,3),(3,2)]) == Counter({(1,3): 3, (3,1): 1, (2,2): 1, (2,3): 1, (3,2): 1})\nassert check_occurences([(1,3),(1,2),(1,3),(2,3),(2,3),(3,1),(2,2),(2,3),(3,2)]) == Counter({(1,3): 5, (3,1): 2, (2,2): 2, (2,3): 2, (3,2): 2})\n\n\n'''\nPython code for checking if a given string is a permutation of a palindrome\n\nNote: This is a version of the palindrome permutation problem. \nIn palindrome permutation, an anagram of a palindrome is another palindrome. \nSo the problem is to check if the given string can be made into a palindrome by rearranging the characters of the string. \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_occurences([('a', 5), ('b', 4), ('b', 5), ('c', 4)]) == {('a', 5): 1, ('b', 4): 2, ('b', 5): 1, ('c', 4): 1}\nassert check_occurences([(1, 2), (1, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 1, (2, 4): 2, (3, 4): 1}\n\ndef count_occurences_dict(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([(\"hello\", 1), (\"hello\", 2), (\"hello\", 3), (\"hello\", 4), (\"hello\", 5)]) == {\"hello\": 5}\nassert     check_occurences([(\"hi\", 1), (\"hi\", 2), (\"hi\", 3), (\"hi\", 4), (\"hi\", 5)]) == {\"hi\": 5}\nassert     check_occurences([(\"hello\", 1), (\"hi\", 2), (\"hi\", 3), (\"hi\", 4), (\"hi\", 5)]) == {\"hello\": 1, \"hi\": 3}\nassert     check_occurences([(\"hello\", 1), (\"hello\", 2), (\"hello\", 3), (\"hello\", 4), (\"hello\", 5)]) == {\"hello\": 5}\nassert     check_occurences([(\"hello\", 1), (\"hello\", 2), (\"hello\", 3), (\"hello\", 4), (\"hello\", 5)]) == {\"hello\": 5}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([('a',1), ('b',2), ('a',1), ('a',2)]) == {('a',1): 2, ('b',2): 1} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',1), ('a',2)]) == {('a',1): 2, ('b',2): 2} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',2), ('a',1)]) == {('a',1): 3, ('b',2): 2} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',3), ('a',1)]) == {('a',1): 3, ('b',2): 2} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',3), ('a',4)]) == {('a',1): 3, ('b',2): 2} \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_occurences([(1,), (1,), (1,), (2,), (2,), (2,), (2,), (3,), (3,), (3,), (4,), (4,), (4,), (5,), (5,), (5,), (6,), (6,), (6,), (7,), (7,), (7,), (8,), (8,), (8,), (9,), (9,), (9,), (10,), (10,), (10,), (11,), (11,), (11,), (12,), (12,), (12,), (13,), (13,), (13,), (14,), (14,), (14,), (15,), (15,), (15,), (16,), (16,), (16,), (17,), (17,), (17,), (18,), (18,), (18,), (19,), (19,), (19,), (20,), (20,), (20,), (21,), (21,), (21,), (22,), (22,), (22,), (23,), (23,), (23,), (24,), (24,), (24,), (25,), (25,), (25,), (26,), (26,), (26,), (27,), (27,), (27,), (28,), (28,), (28,), (29,), (29,), (29,), (30,), (30,), (30,), (31,), (31,), (31,), (32,), (32,), (32,), (33,), (33,), (33,), (34,), (34,), (34,), (35,), (35,), (35,), (36,), (36,), (36,), (37,), (37,), (37,), (38,), (38,), (38,), (39,), (39,), (39,), (40,), (40,), (40,), (41,), (41,), (41,), (42,), (42,), (42,), (43,), (43,), (43,), (44,), (44,), (44,), (45,), (45,), (45,), (46,), (46,), (46,), (47,), (47,), (47,), (48,), (48,), (48,), (49,), (49,), (49,), (50,), (50,), (50,), (51,), (51,), (51,), (52,), (52,), (52,), (53,), (53,), (53,), (54,), (54,), (54,), (55,), (55,), (55,), (56,), (56,), (56,), (57,), (57,), (57,), (58,), (58,), (58,), (59,), (59,), (59,), (60,), (60,), (60,), (61,), (61,), (61,), (62,), (62,), (62,), (63,), (63,), (63,), (64,), (64,), (64,), (65,), (65,), (65,), (66,), (66,), (66,), (67,), (67,), (67,), (68,), (68,), (68,), (69,), (69,), (69,), (70,), (70,), (70,), (71,), (71,), (71,), (72,), (72,), (72,), (73,), (73,), (73,), (74,), (74,), (74,), (75,), (75,), (75,), (76,), (76,), (76,), (77,), (77,), (77,), (78,), (78,), (78,), (79,), (79,), (79,), (80,), (80,), (80,), (81,), (81,), (81,), (82,), (82,), (82,), (83,), (83,), (83,), (84,), (84,), (84,), (85,), (85,), (85,), (86,), (86,), (86,), (87,), (87,), (87,), (88,), (88,), (88,), (89,), (89,), (89,), (90,), (90,), (90,), (91,), (91,), (91,), (92,), (92,), (92,), (93,), (93,), (93,), (94,), (94,), (94,), (95,), (95,), (95,), (96,), (96,), (96,), (97,), (97,), (97,), (98,), (98,), (98,), (99,), (99,), (99,), (100,), (100,), (100,), (101,), (101,), (101,), (102,), (102,), (102,), (103,), (103,), (103,), (104,), (104,), (104,), (105,), (105,), (105,), (106,), (106,), (106,), (107,), (107,), (107,), (108,), (108,), (108,), (109,), (109,), (109,), (110,), (110,), (110,), (111,), (111,), (111,), (112,), (112,), (112,), (113,), (113,), (113,), (114,), (114,), (114,), (115,), (115,), (115,), (116,), (116,), (116,), (117,), (117,), (117,), (118,), (118,), (118,), (119,), (119,), (119,), (120,), (120,), (120,), (121,), (121,), (121,), (122,), (122,), (122,), (123,), (123,), (123,), (124,), (124,), (124,), (125,), (125,), (125,), (126,), (126,), (126,), (127,), (127,), (127,), (128,), (128,), (128,), (129,), (129,), (129,), (130,), (130,), (130,), (131,), (131,), (131,), (132,), (132,), (132,), (133,), (133,), (133,), (134,), (134,), (134,), (135,), (135,), (135,), (136,), (136,), (136,), (137,), (137,), (137,), (138,), (138,), (138,), (139,), (139,), (139,), (140,), (140,), (140,), (141,), (141,), (141,), (142,), (142,), (142,), (143,), (143,), (143,), (144,), (144,), (144,), (145,), (145,), (145,), (146,), (146,), (146,), (147,), (147,), (147,), (148,), (148,), (148,), (149,), (149,), (149,), (150,), (150,), (150,), (151,), (151,), (151,), (152,), (152,), (152,), (153,), (153,), (153,), (154,), (154,), (154,), (155,), (155,), (155,), (156,), (156,), (156,), (157,), (157,), (157,), (158,), (158,), (158,), (159,), (159,), (159,), (160,), (160,), (160,), (161,), (161,), (161,), (162,), (162,), (162,), (163,), (163,), (163,), (164,), "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2)]) == {('Apple', 5): 1, ('Orange', 2): 1, ('Banana', 5): 1, ('Apple', 3): 1}\nassert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2)]) == {('Apple', 5): 1, ('Orange', 2): 1, ('Banana', 5): 1, ('Apple', 3): 1}\nassert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2), ('Orange', 2)]) == {('Apple', 5): 2, ('Orange', 2): 2, ('Banana', 5): 1, ('Apple', 3): 1}\nassert \n    check_occurences([]) == {}\nassert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2)]) == {('Apple', 5): 1, ('Orange', 2): 1, ('Banana', 5): 1, ('Apple', 3): 1}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_of_substrings('asfdgadsf') == 6\nassert     number_of_substrings('fdsgafd') == 2\nassert     number_of_substrings('d') == 1\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_of_substrings('') == 0, \n    'Return 0 for an empty string.'\nassert     number_of_substrings('a') == 1, \n    'Return 1 for a string with only one sub-string.'\nassert     number_of_substrings('aab') == 2, \n    'Return 2 for a string with two sub-strings.'\nassert     number_of_substrings('abcb') == 3, \n    'Return 3 for a string with three sub-strings.'\nassert     number_of_substrings('abcbz') == 4, \n    'Return 4 for a string with four sub-strings.'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings(\"\") == 0, \"Valid\"\nassert number_of_substrings(\"A\") == 1, \"Valid\"\nassert number_of_substrings(\"ABA\") == 2, \"Valid\"\nassert number_of_substrings(\"ABAB\") == 3, \"Valid\"\nassert number_of_substrings(\"AAAAAAAAAAAA\") == 5, \"Valid\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_of_substrings('abc') == 0\nassert     number_of_substrings('abcabc') == 3\nassert     number_of_substrings('ab') == 1\nassert     number_of_substrings('abc') == 1\nassert     number_of_substrings('abca') == 4\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_rotation_point(input_string): \n    '''\n    Given a string, find the first non-repeating character in it and return its index.\n    If it doesn't exist, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a python function to find the substring which is maximum length of all substrings of a given string.\n'''\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"The number of substrings are: \", number_of_substrings(\"aabcd\"))\nprint(\"The number of substrings are: \", number_of_substrings(\"abc\"))\nprint(\"The number of substrings are: \", number_of_substrings(\"\"))\nprint(\"The number of substrings are: \", number_of_substrings(\"abcdefghijklmnopqrstuvwxyz\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_of_substrings('aaa') == 1\nassert     number_of_substrings('abcde') == 2\nassert     number_of_substrings('aaabcdef') == 3\nassert     number_of_substrings('aaabcdeaa') == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_of_substrings(\"abcd\") == 0, \"Test Failed\"\nassert     number_of_substrings(\"abcd\") == 1, \"Test Failed\"\nassert     number_of_substrings(\"aabcbcb\") == 4, \"Test Failed\"\nassert     number_of_substrings(\"abc\") == 1, \"Test Failed\"\nassert     number_of_substrings(\"\") == 0, \"Test Failed\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings('Ab') == 3\nassert     number_of_substrings('abc') == 3\nassert     number_of_substrings('abcd') == 4\nassert     number_of_substrings('aaaaaaaaaaaa') == 15\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"check: get_total_number_of_sequences()\")\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(1,0) == 0\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(2,1) == 1\nassert     get_total_number_of_sequences(2,2) == 2\nassert     get_total_number_of_sequences(3,1) == 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(10,2) == 21\nassert     get_total_number_of_sequences(10,3) == 109\nassert     get_total_number_of_sequences(10,4) == 5321\nassert     get_total_number_of_sequences(10,5) == 84720\nassert     get_total_number_of_sequences(10,6) == 1881342\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(10,5) == 40, get_total_number_of_sequences(10,5)\nassert     get_total_number_of_sequences(10,6) == 121, get_total_number_of_sequences(10,6)\nassert     get_total_number_of_sequences(10,7) == 280, get_total_number_of_sequences(10,7)\n\nprint('Test passed')"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    get_total_number_of_sequences(2,3) == 5\n    get_total_number_of_sequences(1,3) == 1\n    get_total_number_of_sequences(3,1) == 0\n    get_total_number_of_sequences(2,2) == 2"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(0, 1) == 0\nassert     get_total_number_of_sequences(0, 2) == 0\nassert     get_total_number_of_sequences(0, 3) == 0\nassert     get_total_number_of_sequences(1, 1) == 1\nassert     get_total_number_of_sequences(1, 2) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(4, 2) == 1\nassert     get_total_number_of_sequences(4, 1) == 6\nassert     get_total_number_of_sequences(1, 1) == 6\nassert     get_total_number_of_sequences(2, 1) == 6\nassert     get_total_number_of_sequences(10, 2) == 42\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(3,4) == 4\nassert get_total_number_of_sequences(10,4) == 2\nassert get_total_number_of_sequences(1000,4) == 4\nassert get_total_number_of_sequences(1000000,4) == 5\nassert get_total_number_of_sequences(100000,5) == 3\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list(['hello','hi','goodbye'],[1,2,3])==['hello','hi','2']\nassert     replace_list([[1,2,3]],[4,5,6])==[[4,5,6]]\nassert     replace_list([[1,2,3,4,5]],[6,7,8])==[1,2,3,4,5,6,7,8]\nassert     replace_list(['goodbye','hi','hello'],[1,2,3])==['goodbye','hi','2']\nassert     replace_list([[1,2,3,4,5]],[6,7,8])==[[1,2,3,4,5],[6,7,8]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert replace_list([1,2,3], [4,5,6]) == [[1,2,3],[4,5,6]]\nassert replace_list([1,2], [3,4,5]) == [[1,2],[3,4,5]]\nassert replace_list([], [1,2,3]) == [[],[1,2,3]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3], [4,5,6]) == [1,2,3,4,5,6]\nassert     replace_list([3,4], [1,2]) == [3,1,2,4]\nassert     replace_list([7], [1,2,3]) == [7,1,2,3]\nassert     replace_list([], [1,2,3]) == []\nassert     replace_list([1,2,3], []) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([4,7,3,9,8], [5,6]) == [4,7,3,9,8,5,6]\nassert     replace_list([4,7,3], [5,6,7]) == [4,7,3,5,6,7]\nassert     replace_list([], []) == []\nassert     replace_list([], []) == []\nassert     replace_list([], []) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([1, 2, 3], [4, 5, 6]) == True\nassert     replace_list([1, 2, 3], ['a', 'b', 'c']) == False\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [1,2,4], \"List 1\"\nassert replace_list([3,2,1],[4,5,6]) == [3,2,4], \"List 2\"\nassert replace_list([1,2,3],[4]) == [1,2,4], \"List 3\"\nassert replace_list([1,2,3],[]) == [1,2,3], \"Empty List\"\nassert replace_list([1],[]) == [1], \"Empty List\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3,4,5], [5,6,7,8,9]) ==     [1,2,3,4,8]\nassert     replace_list([1,2,3,4,5], [6,7,8,9,10]) ==     [1,2,3,4,9]\nassert     replace_list([1,2,3,4,5], [6,7,8,9]) ==     [1,2,3,8]\nassert     replace_list([1,2,3], [4,5,6]) ==     [1,2,4]\nassert     replace_list([1,2,3,4], [5,6,7,8,9]) ==     [1,2,3,8]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (replace_list([1,2,3], [4,5,6]) == [1,2,3,4,5,6]), \"First list is not correct.\"\nassert     (replace_list([1,2,3], [3,4,5]) == [1,2,3,4,5]), \"Second list is not correct.\"\nassert     (replace_list([], [1,2,3]) == []), \"First list is empty.\"\nassert     (replace_list([1,2,3], []) == [1,2,3]), \"Second list is empty.\"\n\ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicate elements removed.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) ==  [1,2,3]\nassert     replace_list([1,2,3],[4,5,6,7]) ==  [1,2,3,7]\nassert     replace_list([1,2,3],[4,5,6,7,8,9]) ==  [1,2,3,7,8,9]\nassert     replace_list([1,2,3],[4,5,6,7,8,9,10]) ==  [1,2,3,7,8,9,10]\n\nprint('Tests passed')\nprint('\\n')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac('hello world') == 11\nassert     count_charac('hello world') == 6\nassert     count_charac('hello') == 3\nassert     count_charac('h') == 1\nassert     count_charac('h' + 'ello') == 4\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_charac(\"this is a string\") == 14, \"Expected 14, actual %s\" % (count_charac(\"this is a string\"))\nassert     count_charac(\"\") == 0, \"Expected 0, actual %s\" % (count_charac(\"\"))\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 26, \"Expected 26, actual %s\" % (count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_charac(\"\") == 0\nassert count_charac(\"a\") == 1\nassert count_charac(\"ab\") == 2\nassert count_charac(\"abc\") == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac('abc') == 3, 'Wrong answer for \"abc\"'\nassert     count_charac('abcdefghijklmnopqrstuvwxyz') == 26, 'Wrong answer for \"abcdefghijklmnopqrstuvwxyz\"'\nassert     count_charac('abcdefghijklmnopqrstuvwxyz'*5) == 156, 'Wrong answer for \"abcdefghijklmnopqrstuvwxyz'*5'\"'\nassert     count_charac('') == 0, 'Wrong answer for \"\"'\nassert     count_charac('q') == 0, 'Wrong answer for \"q\"'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    Words in this string are separated by spaces.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_charac('abcdef') == 6, \"incorrect result\"\nassert     count_charac('abc') == 3, \"incorrect result\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_charac('abracadabra') == 11\nassert     count_charac('abracadabra') == 12\nassert     count_charac('abracadabra') == 12\nassert     count_charac('abracadabra') == 13\n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac(\"Hi\") == 5\nassert     count_charac(\"hihihihihihihihihi\") == 20\nassert     count_charac(\"\") == 0\nassert     count_charac(\"Hi\", \" \") == 0\nassert     count_charac(\"hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_Perfect_Square(9) == 10, \"TEST 1 FAILED\"\nassert     next_Perfect_Square(27) == 28, \"TEST 1 FAILED\"\nassert     next_Perfect_Square(48) == 49, \"TEST 1 FAILED\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_Perfect_Square(7) == 9\nassert     next_Perfect_Square(12) == 14\nassert     next_Perfect_Square(25) == 32\nassert     next_Perfect_Square(33) == 36\nassert     next_Perfect_Square(500) == 512\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnext_Perfect_Square(0) == 0\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(2) == 3\nnext_Perfect_Square(3) == 4\nnext_Perfect_Square(4) == 4\nnext_Perfect_Square(5) == 5\nnext_Perfect_Square(6) == 6\nnext_Perfect_Square(8) == 9\nnext_Perfect_Square(9) == 10\nnext_Perfect_Square(10) == 12\nnext_Perfect_Square(15) == 20\nnext_Perfect_Square(20) == 24\nnext_Perfect_Square(21) == 22\nnext_Perfect_Square(25) == 26\nnext_Perfect_Square(26) == 27\nnext_Perfect_Square(29) == 32\nnext_Perfect_Square(33) == 36\nnext_Perfect_Square(35) == 36\nnext_Perfect_Square(39) == 44\nnext_Perfect_Square(40) == 48\nnext_Perfect_Square(41) == 48\nnext_Perfect_Square(45) == 48\nnext_Perfect_Square(46) == 48\nnext_Perfect_Square(47) == 48\nnext_Perfect_Square(48) == 48\nnext_Perfect_Square(49) == 48\nnext_Perfect_Square(50) == 48\nnext_Perfect_Square(51) == 48\nnext_Perfect_Square(52) == 48\nnext_Perfect_Square(53) == 48\nnext_Perfect_Square(54) == 48\nnext_Perfect_Square(55) == 48\nnext_Perfect_Square(56) == 48\nnext_Perfect_Square(57) == 48\nnext_Perfect_Square(58) == 48\nnext_Perfect_Square(59) == 48\nnext_Perfect_Square(60) == 48\nnext_Perfect_Square(61) == 48\nnext_Perfect_Square(62) == 48\nnext_Perfect_Square(63) == 48\nnext_Perfect_Square(64) == 48\nnext_Perfect_Square(65) == 48\nnext_Perfect_Square(66) == 48\nnext_Perfect_Square(67) == 48\nnext_Perfect_Square(68) == 48\nnext_Perfect_Square(69) == 48\nnext_Perfect_Square(70) == 48\nnext_Perfect_Square(71) == 48\nnext_Perfect_Square(72) == 48\nnext_Perfect_Square(73) == 48\nnext_Perfect_Square(74) == 48\nnext_Perfect_Square(75) == 48\nnext_Perfect_Square(76) == 48\nnext_Perfect_Square(77) == 48\nnext_Perfect_Square(78) == 48\nnext_Perfect_Square(79) == 48\nnext_Perfect_Square(80) == 48\nnext_Perfect_Square(81) == 48\nnext_Perfect_Square(82) == 48\nnext_Perfect_Square(83) == 48\nnext_Perfect_Square(84) == 48\nnext_Perfect_Square(85) == 48\nnext_Perfect_Square(86) == 48\nnext_Perfect_Square(87) == 48\nnext_Perfect_Square(88) == 48\nnext_Perfect_Square(89) == 48\nnext_Perfect_Square(90) == 48\nnext_Perfect_Square(91) == 48\nnext_Perfect_Square(92) == 48\nnext_Perfect_Square(93) == 48\nnext_Perfect_Square(94) == 48\nnext_Perfect_Square(95) == 48\nnext_Perfect_Square(96) == 48\nnext_Perfect_Square(97) == 48\nnext_Perfect_Square(98) == 48\nnext_Perfect_Square(99) == 48\nnext_Perfect_Square(100) == 48\nnext_Perfect_Square(101) == 48\nnext_Perfect_Square(102) == 48\nnext_Perfect_Square(103) == 48\nnext_Perfect_Square(104) == 48\nnext_Perfect_Square(105) == 48\nnext_Perfect_Square(106) == 48\nnext_Perfect_Square(107) == 48\nnext_Perfect_Square(108) == 48\nnext_Perfect_Square(109) == 48\nnext_Perfect_Square(110) == 48\nnext_Perfect_Square(111) == 48\nnext_Perfect_Square(112) == 48\nnext_Perfect_Square(113) == 48\nnext_Perfect_Square(114) == 48\nnext_Perfect_Square(115) == 48\nnext_Perfect_Square(116) == 48\nnext_Perfect_Square(117) == 48\nnext_Perfect_Square(118) == 48\nnext_Perfect_Square(119) == 48\nnext_Perfect_Square(120) == 48\nnext_Perfect_Square(121) == 48\nnext_Perfect_Square(122) == 48\nnext_Perfect_Square(123) == 48\nnext_Perfect_Square(124) == 48\nnext_Perfect_Square(125) == 48\nnext_Perfect_Square(126) == 48\nnext_Perfect_Square(127) == 48\nnext_Perfect_Square(128) == 48\nnext_Perfect_Square(129) == 48\nnext_Perfect_Square(130) == 48\nnext_Perfect_Square(131) == 48\nnext_Perfect_Square(132) == 48\nnext_Perfect_Square(133) == 48\nnext_Perfect_Square(134) == 48\nnext_Perfect_Square(135) == 48\nnext_Perfect_Square(136) == 48\nnext_Perfect_Square(137) == 48\nnext_Perfect_Square(138) == 48\nnext_Perfect_Square(139) == 48\nnext_Perfect_Square(140) == 48\nnext_Perfect_Square(141) == 48\nnext_Perfect_Square(142) == 48\nnext_Perfect_Square(143) == 48\nnext_Perfect_Square(144) == 48\nnext_Perfect_Square(145) == 48\nnext_Perfect_Square(146) == 48\nnext_Perfect_Square(147) == 48\nnext_Perfect_Square(148) == 48\nnext_Perfect_Square(149) == 48\nnext_Perfect_Square(150) == 48\nnext_Perfect_Square(151) == 48\nnext_Perfect_Square(152) == 48\nnext_Perfect_Square(153) == 48\nnext_Perfect_Square(154) == 48\nnext_Perfect_Square(155) == 48\nnext_Perfect_Square(156) == 48\nnext_Perfect_Square(157) == 48\nnext_Perfect_Square(158) == 48\nnext_Perfect_Square(159) == 48\nnext_Perfect_Square(160) == 48\nnext_Perfect_Square(161) == 48\nnext_Perfect_Square(162) == 48\nnext_Perfect_Square(163) == 48\nnext_Perfect_Square(164) == 48\nnext_Perfect_Square(165) == 48\nnext_Perfect_Square(166) == 48\nnext_Perfect_Square(167) == 48\nnext_Perfect_Square(168) == 48\nnext_Perfect_Square(169) == 48\nnext_Perfect_Square(170) == 48\nnext_Perfect_Square(171) == 48\nnext_Perfect_Square(172) == 48\nnext_Perfect_Square(173) == 48\nnext_Perfect_Square(174) == 48\nnext_Perfect_Square(175) == 48\nnext_Perfect_Square(176) == 48\nnext_Perfect_Square(177) == 48\nnext_Perfect_Square(178) == 48\nnext_Perfect_Square(179) == 48\nnext_Perfect_Square(180) == 48\nnext_Perfect_Square(181) == 48\nnext_Perfect_Square(182) == 48\nnext_Perfect_Square(183) == 48\nnext_Perfect_Square(184) == 48\nnext_Perfect_Square(185) == 48\nnext_Perfect_Square(186) == 48\nnext_Perfect_Square(187) == 48\nnext_Perfect_Square(188) == 48\nnext_Perfect_Square(189) == 48\nnext_Perfect_Square(190) == 48\nnext_Perfect_Square(191) == 48\nnext_Perfect_Square(192) == 48\nnext_Perfect_Square(193) == 48\nnext_Perfect_Square(194) == 48\nnext_Perfect_Square(195) == 48\nnext_Perfect_Square(196) == 48\nnext_Perfect_Square(197) == 48\nnext_Perfect_Square(198) == 48\nnext_Perfect_Square(199) == 48\nnext_Perfect_Square(200) == 48\nnext_Perfect_Square(201) == 48\nnext_Perfect_Square(202) == 48\nnext_Perfect_Square(203) == 48\nnext_Perfect_Square(204) ="
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 0 \nassert next_Perfect_Square(1) == 0\nassert next_Perfect_Square(4) == 4\nassert next_Perfect_Square(10) == 10\nassert next_Perfect_Square(7) == 8\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"Pass\" if (next_Perfect_Square(9) == 10) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(16) == 19) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(128) == 32768) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(1024) == 65536) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(1) == 1) else \"Fail\")\n\n\ndef next_Perfect_Square(N): \n    if N == 1: \n        return 1\n    else:\n        if (N % 4 == 0): \n            return int((N/2))*2\n        else: \n            if ((N%2 == 0) & (N%3!= 0)): \n                return int(((N-1)/2))*2 + 1\n            else: \n                return int(((N-1)/2))*2 + 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnext_Perfect_Square(12) == 16\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(12) == 20\nassert     next_Perfect_Square(69) == 82\nassert     next_Perfect_Square(71) == 87\nassert     next_Perfect_Square(69) == 82\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert next_Perfect_Square(1) == 1\nassert next_Perfect_Square(5) == 10\nassert next_Perfect_Square(9) == 19\nassert next_Perfect_Square(16) == 25\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmax_sum([1,3,2,6]) == 7\nmax_sum([4,1,5,7,2,0]) == 14\nmax_sum([1,2,3,4,5]) == 12\nmax_sum([0,1,3,4,7,2,5]) == 13\nmax_sum([7,0,1,3,4,5,2,10]) == 15\nmax_sum([1,2,0,4,3]) == 6\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(max_sum([5,3,1,2,4]))\nprint(max_sum([5,4,3,2,1]))\nprint(max_sum([1,2,3,4,5]))\nprint(max_sum([5,4,3,2,1,10]))\nprint(max_sum([5,4,3,2,1,10,20,1]))\nprint(max_sum([1,2,3,4,5,5,5,5]))\nprint(max_sum([5,4,3,2,1,2,3,4]))\nprint(max_sum([5,4,3,2,1,2,3,4,5,5,5,5]))\n\n\n\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_sum(arr): \n    '''\n    Given an array, we need to find the maximum sum of a subsequence of the array.\n    Example:\n        Input: arr[] = {5, -10, 3, 5, 6, 5, -2}\n        Output: 42\n        The subsequence is {5, -10, 3, 5, 6, 5, -2},\n        whose maximum sum is  42\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr = [1, 3, 2, 5, 4, 6, 1, 3] \nassert max_sum(arr) == 9 \n\n\n\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum([]) == 0\nassert     max_sum([-4, -5, -10]) == -10\nassert     max_sum([-1, 1, -2, 2, -3, 5, -4, 6]) == 11\nassert     max_sum([-1, 1, -2, 2, -3, 5, -4, 6, -4, 3]) == 13\nassert     max_sum([-2, -3, -4, -5, -6, -7, -8]) == -1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert max_sum([3, 1, 2, 5, 3, 7]) == 9, 'test 1 failed'\nassert max_sum([3, 5, 1, 3, 2, 1, 4]) == 10, 'test 2 failed'\nassert max_sum([3, 1, 2, 5, 3, 7, 1, 3, 2, 1, 4]) == 11, 'test 3 failed'\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum([-15, -12, -8, 5, -4, 3]) == 5\nassert     max_sum([-6, -3, -1, 0, 1, 2]) == 8\nassert     max_sum([2, 4, 3, 1, 5, 6, 7, -10]) == 9\nassert     max_sum([-1]) == -1\nassert     max_sum([]) == 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nSolution:\n\n1. The algorithm for babylonian squareroot is to keep adding 1. to the squareroot until it has the same squareroot as the original number. Then subtract the squareroot from the original number, to get the final squareroot.\n''"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(1) == 0\nassert     babylonian_squareroot(2) == 1\nassert     babylonian_squareroot(3) == 1.4142135623730951\nassert     babylonian_squareroot(10) == 3\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(20) == 4\nassert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(30) == 5\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(1) == 0.5, 'incorrect output'\nassert     babylonian_squareroot(2) == 1, 'incorrect output'\nassert     babylonian_squareroot(4) == 2, 'incorrect output'\nassert     babylonian_squareroot(8) == 3, 'incorrect output'\nassert     babylonian_squareroot(16) == 4, 'incorrect output'\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(2) == 1\nassert     babylonian_squareroot(3) == 1\nassert     babylonian_squareroot(4) == 1\nassert     babylonian_squareroot(5) == 1\nassert     babylonian_squareroot(6) == 1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(1) == 0.5\nassert     babylonian_squareroot(2) == 1.0\nassert     babylonian_squareroot(4) == 2.0\nassert     babylonian_squareroot(6) == 3.0\nassert     babylonian_squareroot(8) == 4.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \nclass Solution:\n    '''\n    Given a string, find the longest palindromic subsequence.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (lps(\"aaba\") == 6), \"1\"\nassert     (lps(\"ababa\") == 6), \"2\"\nassert     (lps(\"abbaba\") == 6), \"3\"\nassert     (lps(\"abababa\") == 7), \"4\"\nassert     (lps(\"a\") == 1), \"5\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lps(\"ababa\") == 4\nassert     lps(\"a\") == 1\nassert     lps(\"aa\") == 2\nassert     lps(\"aab\") == 2\nassert     lps(\"abb\") == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lps('abccba') == 7\nassert     lps('abccbb') == 5\nassert     lps('aabcba') == 6\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef lps_dp(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string using Dynamic Programming.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lps(\"acac\") == 3\nassert     lps(\"abcdcba\") == 5\nassert     lps(\"abcdcbaa\") == 6\nassert     lps(\"abcdcbaab\") == 6\nassert     lps(\"a\") == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lps('hello') == 5 \nassert     lps('h') == 2\nassert     lps('a') == 1\nassert     lps('ac') == 3\nassert     lps('abb') == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lps_recursive(str):\n    if len(str) < 2: return len(str)\n    if str[0] == str[-1]:\n        return 2 + lps_recursive(str[1:-1])\n    else:\n        return max(lps_recursive(str[1:]), lps_recursive(str[:-1]))\n\nassert lps('asdfghjkl') == 7\nassert lps_recursive('asdfghjkl') == 7\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(4) == 3\nassert     harmonic_sum(5) == 5.5\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     harmonic_sum(5) == harmonic_sum(10) == harmonic_sum(15) == 1, \"Wrong\"\nassert     harmonic_sum(2) == harmonic_sum(1) == harmonic_sum(0) == 1, \"Wrong\"\nassert     harmonic_sum(0) == harmonic_sum(1) == harmonic_sum(2) == 1, \"Wrong\"\n\n\ndef legendre_polynomial(n, m):\n    '''\n    Write a function that takes in 2 integers n and m and returns the legendre\n    polynomial at the nth order of the mth degree of the form (1-q^2/2!+...+(-1)^n q^2/2!)/(1-q^2/2!+...+(-1)^n q^2/2!)\n\n    Here, the q will be the integer {1, 2, 3,..., n}, and the p\n    will be the integer {1, 2,..., m}.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nharmonic_sum(1) == 0\nharmonic_sum(2) == 1\nharmonic_sum(3) == 1\nharmonic_sum(4) == 2\nharmonic_sum(5) == 1 + 1/2 + 1/3 + 1/4 + 1/5\nharmonic_sum(6) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6\nharmonic_sum(7) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7\nharmonic_sum(8) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8\nharmonic_sum(9) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9\nharmonic_sum(10) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10\nharmonic_sum(11) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11\nharmonic_sum(12) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12\nharmonic_sum(13) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13\nharmonic_sum(14) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14\nharmonic_sum(15) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15\nharmonic_sum(16) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16\nharmonic_sum(17) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17\nharmonic_sum(18) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18\nharmonic_sum(19) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19\nharmonic_sum(20) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20\nharmonic_sum(21) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21\nharmonic_sum(22) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22\nharmonic_sum(23) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23\nharmonic_sum(24) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24\nharmonic_sum(25) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25\nharmonic_sum(26) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26\nharmonic_sum(27) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26 + 1/27\nharmonic_sum(28) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26 + 1/27 + 1/28\nharmonic_sum(29) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26 + 1/27 + 1/28 + 1/29\nharmonic_sum(30) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/2"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(5) == 3.0\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nharmonic_sum(1) == 1\nharmonic_sum(2) == 1.5\nharmonic_sum(3) == 2\nharmonic_sum(4) == 2.5\nharmonic_sum(10) == 55.0"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     harmonic_sum(0) == 0, \"The harmonic sum of 0 should be 0\"\nassert     harmonic_sum(1) == 1, \"The harmonic sum of 1 should be 1\"\nassert     harmonic_sum(2) == 1 + 1, \"The harmonic sum of 2 should be 1 + 1\"\nassert     harmonic_sum(3) == 1 + 1 + 1, \"The harmonic sum of 3 should be 1 + 1 + 1\"\nassert     harmonic_sum(4) == 1 + 1 + 1 + 1, \"The harmonic sum of 4 should be 1 + 1 + 1 + 1\"\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 2\nassert     harmonic_sum(4) == 6\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert harmonic_sum(3) == 1.5\nassert harmonic_sum(5) == 3\nassert harmonic_sum(0) == 1.0\nassert harmonic_sum(1) == 1.0"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nintersection_array([1,2,3],[1,2,3]) == [1,2,3]\nintersection_array([1,1,2],[1,1,2]) == [1,1,2]\nintersection_array([1,1,2],[1,2,3]) == [1,2,3]\nintersection_array([1,2,3],[1,2,3]) == []\nintersection_array([1,2,3],[1,3,4]) == []\nintersection_array([1,2,3,4,5],[1,2,3,4,5]) == [1,2,3,4,5]\nintersection_array([1,2,3],[4,5,6]) == []\nintersection_array([1,2,3],[2,3,4]) == [3]\nintersection_array([1,2,3,4,5],[5,6,7,8,9]) == []\nintersection_array([1,2,3,4,5,6,7],[1,2,3,4,5,7,8]) == [1,2,3,4,5,7,8]\nintersection_array([1,2,3,4,5,6,7,8,9],[9,10,11,12,13]) == [9,10,11,12,13]\nintersection_array([1,2,3,4,5,6,7,8,9],[11,12,13,14,15]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11],[11,12,13,14,15,16,17]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12],[11,12,13,14,15,16,17,18]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13],[11,12,13,14,15,16,17,18,19]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14],[11,12,13,14,15,16,17,18,19,20]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[11,12,13,14,15,16,17,18,19,20,21]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[11,12,13,14,15,16,17,18,19,20,21,22]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,2,3],[1,2,3]) == [1,2]\nassert     intersection_array([1,2,3],[1,2,3,4]) == [1,2,3]\nassert     intersection_array([1,2,3,4],[1,2,3,4]) == [1,2,3,4]\nassert     intersection_array([1,2,3,4],[1,2]) == []\nassert     intersection_array([1,2,3,4],[1,2,4]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection_array([1,2,3,4,5,6],[2,4,6,8,10]) == 4, 'Should be 4'\nassert     intersection_array([1,2,3,4,5],[2,4,6,8,10]) == 4, 'Should be 4'\nassert     intersection_array([],[2,4,6,8,10]) == 0, 'Should be 0'\nassert     intersection_array([1,2,3],[3,4,5]) == 1, 'Should be 1'\nassert     intersection_array([1,2,3,4,5,6],[2,4,6,8,10]) == 0, 'Should be 0'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([2,3,3,5,7], [2,2,7,7]) == [2,3,7]\nassert     intersection_array([], []) == []\nassert     intersection_array([2,2,2,2,2], [2,2,2,2,2]) == [2,2]\nassert     intersection_array([1,2,3,4], [2,3,4,5]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert intersection_array([2,3,4,5],[3,4,6,7]) == [3,4]\nassert intersection_array([1,2,3,4,5],[3,4,6,7,8]) == []\n\n\n\ndef intersection(nums1, nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,2,1], [1,2,1,2]) == [1,2]\nassert     intersection_array([1,2,2,1], [1,2,2,1]) == [1,2,1]\nassert     intersection_array([1,2,2,1,2,1], [1,2,2,1,2,1]) == [1,2,1]\nassert     intersection_array([1,2,2,1,2,1], [1,2,2,1,2,1]) == [1,2,1,2]\nassert     intersection_array([1,2,2,1,2,1], [1,2,2,1,2,1,1]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    intersection_array([1,3,7,9,11,13],[1,2,7,8,9]) == True\n    intersection_array([1,3,7,9,11,13],[13,7,8,11]) == True\n    intersection_array([1,3,7,9,11,13],[1,2,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,7,1]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,2,3,7,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7,3,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,3,1,7,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,9,3,7]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,9,7]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,9,7,11]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,9,7,11,13]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7,3,9,11]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7,3,9,11,13]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,7,9,11,13,13]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,7,9,11,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13]) == True\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13]) == True\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13]) == True\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert intersection_array([1, 2, 3, 4], [2, 4, 6]) == [2, 4]\nassert intersection_array([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nassert intersection_array([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 9]) == [4, 6]\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_X((1, 2, 3, 2, 3, 4, 5, 6, 2), 2) == 3, 'incorrect'\nassert     count_X((1, 2, 3, 2, 3, 4, 5, 6, 2), 5) == 1, 'incorrect'\nassert     count_X((1, 2, 3, 2, 3, 4, 5, 6, 2), 6) == 0, 'incorrect'\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncount_X(('a', 'b', 'c', 'd', 'e'), 'b') == 2\ncount_X(('a', 'b', 'c', 'd', 'e'), 'z') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_X((1,2,3),2) == 2\nassert     count_X((1,2,3),4) == 0\nassert     count_X((1,2,3),2.3) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_X([(1, 2), (2, 3), (3, 4), (2, 4)], 4) == 2\nassert count_X([(1, 2), (2, 3), (3, 4), (2, 4)], 1) == 3\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_X([(1,2,3), (3,2,3), (3,3,3), (2,2,2)], 2) == 2\nassert     count_X((1,2,3), 2) == 1\nassert     count_X((1,2,3,4), 2) == 2\nassert     count_X((1,2,3,4,5), 2) == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntup = (\"apple\", \"banana\", \"mango\", \"apple\", \"orange\", \"apple\", \"banana\", \"mango\", \"apple\")\nassert count_X(tup, \"apple\") == 4\nassert count_X(tup, \"banana\") == 3\nassert count_X(tup, \"mango\") == 2\nassert count_X(tup, \"orange\") == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_X_check(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_X([1,2,3,4,5],1) == 3, \"incorrect count_X(tup,1)\"\nassert     count_X([1,2,3,4,5],0) == 0, \"incorrect count_X(tup,0)\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([1, 2, 3], 0) ==    [0, 1, 2, 3]\nassert     insert_element([1, 2, 3], 3) ==    [1, 2, 3, 0, 1, 2, 3]\nassert     insert_element([1, 2, 3], 4) ==    [1, 2, 3, 4, 1, 2, 3]\nassert     insert_element([1, 2, 3, 4], 2) ==    [1, 2, 3, 4, 2, 1, 2, 3]\nassert     insert_element([], 0) ==    []\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3], \"test 1 Failed\"\nassert     insert_element([3,4,5],1) == [1,3,4,5], \"test 2 Failed\"\nassert     insert_element([],1) == [1], \"test 3 Failed\"\nassert     insert_element([1,2,3,4],1) == [1,1,2,3,4], \"test 4 Failed\"\nassert     insert_element([1,2,3],4) == [4,1,2,3], \"test 5 Failed\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a boolean representing whether the element exists in the list or not.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element([],1) == [1]\nassert     insert_element([1],1) == [1,1]\nassert     insert_element([1,2],1) == [1,2,1]\nassert     insert_element([1,2],3) == [3,1,2]\nassert     insert_element([1,2,3],1) == [1,1,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef insert_element2(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([1,2,3,4,5], 6) == [1,2,3,4,6,5], \"failed\"\nassert     insert_element([1,2,3], 6) == [1,2,6,3], \"failed\"\nassert     insert_element([1,2], 6) == [1,2,6], \"failed\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     insert_element([1,3,4,5,6],3) == [1,3,3,4,5,6]\nassert     insert_element([1,3,4,5,6],2) == [1,2,3,4,5,6]\nassert     insert_element([1,3,4,5,6],7) == [1,3,4,5,6,7]\nassert     insert_element([1,3,4,5,6],0) == [0,1,2,3,4,5,6]\nassert     insert_element([],0) == [0]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     insert_element([2, 4, 6, 8], 5) == [2, 4, 5, 6, 8]\nassert     insert_element([1, 2, 3, 4], 1) == [1, 2, 3, 4, 1]\nassert     insert_element([1, 2, 3, 4], 4) == [1, 2, 3, 4, 4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3], \"Wrong\"\nassert     insert_element([1,2,3,4],5) == [1,5,2,3,4], \"Wrong\"\nassert     insert_element([],1) == [1], \"Wrong\"\nassert     insert_element([1,2],3) == [1,3,2], \"Wrong\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([1,1]) == ([0.0, 1.1], 0), \"Testcase 1 Failed\"\nassert     convert([1,1]) == ([0.0, 1.1], 0), \"Testcase 2 Failed\"\nassert     convert([0,1]) == ([1.1, 0.0], 1), \"Testcase 3 Failed\"\nassert     convert([0,1]) == ([1.1, 0.0], 1), \"Testcase 4 Failed\"\nassert     convert([-1,1]) == ([1.1, 0.0], 1), \"Testcase 5 Failed\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([2.0,1.0]) == ([1.41421 +0.0j, 1.41421 +0.0j], 1.41421)\nassert convert([2.0,1.0]) == ([2.0 +0.0j, 1.0 +0.0j], 2.0)\nassert convert([1.0,1.0]) == ([1.41421 +0.0j, 1.41421 +0.0j], 1.41421)\nassert convert([1.0,1.0]) == ([1.0 +0.0j, 1.0 +0.0j], 1.0)\nassert convert([0.0,1.0]) == ([0.0 +0.0j, 1.0 +0.0j], 1.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert((1,1)) == (1.0, 1.0)\nassert     convert((1,2)) == (1.0, 1.4142135623730951)\nassert     convert((1,-1)) == (1.0, -1.0)\nassert     convert((0,0)) == (0.0, 0.0)\nassert     convert((0.5,0)) == (0.5, 0.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert([1 + 1j, 2 + 2j, 3 + 3j]) == [(1, 2), (2, 3), (3, 1)]\nassert     convert([1 + 1j, 2 + 2j, 3 + 3j, 4 + 4j]) == [(1, 2), (2, 3), (3, 1), (4, 4)]\nassert     convert([0 + 0j, -1 + -1j, -2 + 2j, -3 + 3j]) == [(0, 0), (1, -1), (-2, 2), (-3, 3)]\nassert     convert([0 + 0j, 1 + 1j, 2 + 2j, 3 + 3j]) == [(0, 0), (1, 1), (2, 2), (3, 3)]\nassert     convert([]) == []\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert([1, 0]) == ['0', '1.000000', '0.000000']\nassert     convert([0, 1]) == ['0', '0.000000', '1.000000']\nassert     convert([0, 0]) == ['0', '0.000000', '0.000000']\nassert     convert([1, 2]) == ['1', '1.000000', '1.14142']\nassert     convert([1, 1j]) == ['1', '1.000000', '1.14142']\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert(3+4j) == (3,4)\nassert     convert(-3+4j) == (3,4)\nassert     convert(3+0j) == (3,0)\nassert     convert(-3+0j) == (3,0)\nassert     convert(0+0j) == (0,0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef radixSort(arr, k):\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert(cmath.sqrt(1+2j)) == (0.5+0.5j,1)\nassert     convert(cmath.sqrt(-1+2j)) == (1+0j,1)\nassert     convert(cmath.sqrt(1-2j)) == (1-0j,1)\nassert     convert(cmath.sqrt(-1-2j)) == (-1+0j,1)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 0\nassert     count_integer([1, 2, 3, 4, 5, 6, 7]) == 5\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_integer([1, 2, 3]) == 3, '1, 2, 3 should be counted as 3'\nassert count_integer([1, 1, 1]) == 3, '1, 1, 1 should be counted as 3'\nassert count_integer([1, 1, 1, 1, 1, 1]) == 6, '1, 1, 1, 1, 1, 1 should be counted as 6'"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([1,2,3,4,5,6]) == 6,'should return 6'\nassert     count_integer([1,2,3,4,5]) == 5,'should return 5'\nassert     count_integer([]) == 0,'should return 0'\nassert     count_integer([2,3,4,5,6,7]) == 5,'should return 5'\nassert     count_integer([1,2,3,4,5,6,7]) == 6,'should return 6'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8]) == 7, \"count_integer is broken\"\nassert     count_integer([1,2,3,4,5,6,7,8,9]) == 8, \"count_integer is broken\"\nassert     count_integer([]) == 0, \"count_integer is broken\"\n\n'''\nTask 1.7\n\nThis function prints the value of the first and last element in a given list.\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([1,2,3,4]) == 4\nassert     count_integer([1,2,3,4.0]) == 4\nassert     count_integer([1,2,3,'a',0.0]) == 5\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1,2,3]) == 3\nassert     count_integer([-1,2,3]) == 3\nassert     count_integer([-1,-2,3]) == 3\nassert     count_integer([]) == 0\n\ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([2,4,6]) == 1, 'this function should return 1'\nassert     count_integer([1,2,3,4,5]) == 5, 'this function should return 5'\nassert     count_integer([-1,-2,-3,-4]) == 4, 'this function should return 4'\n\n\n\n\ndef add_all(list1):\n    '''\n    Write a python function that adds all the numbers in a given list\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 4, \"incorrect result\"\nassert count_integer([]) == 0, \"incorrect result\"\nassert count_integer([1, 2, 3, 4, 5]) == 5, \"incorrect result\"\nassert count_integer([1, 2, 3, 4, 'a']) == 4, \"incorrect result\"\nassert count_integer([1, 2, 3, 4, 'a', 'b']) == 5, \"incorrect result\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1, 2, 3], 3) == [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\nassert     combinations_colors(['a', 'b', 'c'], 2) ==     [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'a'), ('b', 'b'), ('b', 'c'), ('c', 'a'), ('c', 'b'), ('c', 'c')]\nassert     combinations_colors([1, 2], 1) == [(1, 1)]\nassert     combinations_colors([1, 2], 2) == [(1, 1), (1, 2), (2, 1), (2, 2)]\nassert     combinations_colors([1, 2], 3) == [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1,2,3,4], 1) == [[1,2,3,4]]\nassert combinations_colors([1,2,3,4], 2) == [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nassert combinations_colors([1,2,3,4], 3) == [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\nassert combinations_colors([1,2,3,4], 4) == [[1,2,3,4]]\nassert combinations_colors([1,2,3,4], 5) == [[1,2,3,4]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [[(1, 1), (2, 2), (3, 3)], [(1, 1), (3, 3), (2, 2)], [(2, 2), (1, 1), (3, 3)], [(2, 2), (3, 3), (1, 1)], [(3, 3), (1, 1), (2, 2)], [(3, 3), (2, 2), (1, 1)]]\n\n\n\n\ndef hash_index(string_object):\n    '''\n    Write a function that takes a string and returns a hashable integer representing the index of the first occurance of the character in the string.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1,2),(1,3),(2,3)]\nassert     combinations_colors(['a','b','c'], 2) ==  [('a','b'),('a','c'),('b','c')]\nassert     combinations_colors([1,2,3,4,5], 3) ==  [(1,2,3),(1,2,4),(1,2,5),(1,3,4),(1,3,5),(1,4,5),(2,3,4),(2,3,5),(2,4,5),(3,4,5)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nl = ['A', 'B', 'C']\nn = 2\nprint(combinations_colors(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [[(1, 1), (2, 2), (3, 3)], [(1, 1), (3, 3), (2, 2)], [(2, 2), (1, 1), (3, 3)], [(2, 2), (3, 3), (1, 1)], [(3, 3), (1, 1), (2, 2)], [(3, 3), (2, 2), (1, 1)]]\nassert     combinations_colors([1, 2, 3], 1) == [[(1,), (2,), (3,), (1,)], [(1,), (3,), (2,), (1,)], [(2,), (1,), (3,), (1,)], [(3,), (1,), (2,), (1,)], [(1,), (2,), (3,), (1,)], [(2,), (1,), (3,), (1,)], [(3,), (1,), (2,), (1,)]]\nassert     combinations_colors([], 1) == []\nassert     combinations_colors([1,2,3], -1) == []"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 3)]\nassert     combinations_colors(['p', 'r', 'o', 'b'], 2) == [(('p', 'r'), ('p', 'o'), ('p', 'b'), ('r', 'o'), ('r', 'b'), ('o', 'b'))]\nassert     combinations_colors(['p', 'r', 'o', 'b'], 3) == [(('p', 'r'), ('p', 'o'), ('p', 'b')), \n                                                                                      (('p', 'r'), ('p', 'o'), ('o', 'b')), \n                                                                                      (('p', 'r'), ('p', 'b'), ('o', 'b')),\n                                                                                      (('p', 'o'), ('p', 'b'), ('r', 'b')),\n                                                                                      (('p', 'o'), ('p', 'b'), ('r', 'o')),\n                                                                                      (('p', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('p', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('p', 'b'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('p', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('p', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('p', 'o'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('p', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('p', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('p', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', '"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1, 2, 3, 4], 2) == [[(1, 2), (1, 3), (1, 4)], [(2, 1), (2, 3), (2, 4)], [(3, 1), (3, 2), (3, 4)], [(4, 1), (4, 2), (4, 3)]]\nassert     combinations_colors([\"A\", \"B\", \"C\"], 2) == [[(\"A\", \"B\"), (\"A\", \"C\"), (\"B\", \"C\")], [((\"B\", \"C\"), \"A\")]]\nassert     combinations_colors([\"A\", \"B\", \"C\", \"D\"], 1) == [[(\"A\",), (\"B\",), (\"C\",), (\"D\",)]]\nassert     combinations_colors([\"A\", \"B\", \"C\", \"D\"], 4) == []\nassert     combinations_colors([], 4) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\nassert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]\n\ndef validate_puzzle(puzzle):\n    '''\n    Write a function that takes in a puzzle list and validates that the puzzle is a valid PUZZLE by ensuring that the puzzle is\n    in the correct format. The puzzle is valid if:\n    - each row has an equal number of blue tiles and red tiles\n    - each column has an equal number of blue tiles and red tiles\n    - there is a 1 to 1 mapping between blue and red tiles in each row, column and 3x3 subgrid\n    - if a puzzle has been generated already, it is valid, otherwise it must be a correct PUZZLE\n    '''\n    \n    rows = puzzle[0]\n    cols = puzzle[1]\n    subgrids = puzzle[2]\n\n    # check if puzzle has been generated already\n    if not rows == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]:\n        print(\"Error: Puzzle has been generated already\")\n        return\n\n    # check if puzzle has correct format\n    if rows!= len(set(rows)) or cols!= len(set(cols)) or subgrids!= len(set(subgrids)):\n        print(\"Error: Puzzle does not have correct format\")\n        return\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(1) == 0 \nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(5) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(5) == 4\nassert     count_Primes_nums(15) == 3\nassert     count_Primes_nums(10) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(0) == 0, 'incorrect count_Primes_nums(0)'\nassert count_Primes_nums(4) == 3, 'incorrect count_Primes_nums(4)'\nassert count_Primes_nums(8) == 4, 'incorrect count_Primes_nums(8)'\nassert count_Primes_nums(10) == 5, 'incorrect count_Primes_nums(10)'\nassert count_Primes_nums(13) == 7, 'incorrect count_Primes_nums(13)'\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(4) == 2, \"Wrong answer.\"\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        raise ValueError('Negative number not allowed')\n    count = 0\n    i = 1\n    while i <= n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return count\n\ndef is_prime(n):\n    '''\n    Write a python function that takes in a non-negative number and returns True if the number is prime and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(10) == 0\nassert     count_Primes_nums(15) == 1\nassert     count_Primes_nums(20) == 2\nassert     count_Primes_nums(24) == 3\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(4,3) == (3,4)\nassert     swap_numbers(8,5) == (5,8)\nassert     swap_numbers(9,9) == (9,9)\n\n\ndef combine_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the first number in the first tuple,\n    and then the second number in the second tuple.\n    '''\n    pass"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(1, 2) == (2,1)\nassert swap_numbers(2, 1) == (1,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nswap_numbers(1,2) == (2, 1)\nswap_numbers(1,1) == (1, 1)\nswap_numbers(5, 3) == (3, 5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(6,5) == (5,6)\nassert     swap_numbers(4,4) == (4,4)\nassert     swap_numbers(2,3) == (3,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(2, 3) == (3, 2)\nassert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(2, 1) == (1, 2)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(100, 200) == (200, 100)\nassert     swap_numbers(100, 100) == (100, 100)\nassert     swap_numbers(100, 100) == (100, 100)\nassert     swap_numbers(100, 200) == (100, 200)\nassert     swap_numbers(100, 200) == (200, 100)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_numbers(1,3) == (3,1)\nassert     swap_numbers(2,4) == (4,2)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(5,1) == (1,5)\nprint('Test passed')\n\ndef is_number(n):\n    '''\n    Write a function that takes in a string and tests if it is a number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers((1,2,3),(2,1,3)) == (2,1,3)\nassert     swap_numbers((2,3,4),(3,4,2)) == (3,4,2)\nassert     swap_numbers((2,4,6),(4,2,6)) == (4,2,6)\nassert     swap_numbers((8,6,4),(6,8,4)) == (6,8,4)\nassert swap_numbers((9,7,5),(7,9,5)) == (7,9,5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(3, 4) == (4, 3)\nassert     swap_numbers(5, 6) == (6, 5)\nassert     swap_numbers(5, 5) == (5, 5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(10,20) == (20,10)\nassert     swap_numbers(8,3) == (3,8)\nassert     swap_numbers(9,6) == (6,9)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((2,3,4,5,6,7), (4,5,6)) == (4,5,6,7,6,5)\nassert     maximize_elements((2,3,4,5,6,7), (3,2,1,5,7)) == (3,2,1,5,7,6)\nassert     maximize_elements((2,3,4,5,6,7), (3,5,2,1,6)) == (3,5,2,1,6,7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((5, 10), (20, 40)) == (10, 40)\nassert maximize_elements((5, 10), (10, 40)) == (10, 40)\nassert maximize_elements((1, 2, 3), (2, 3, 5)) == (2, 3, 5)\nassert maximize_elements((1, 2, 3), (5, 3, 2)) == (5, 3, 2)\nassert maximize_elements((10, 50, 20), (5, 20, 8)) == (10, 50, 20)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (maximize_elements((1,2), (3,4)) == (1,3)), 'Wrong result (1).'\nassert     (maximize_elements((5,10), (1,2)) == (5,10)), 'Wrong result (2).'\nassert     (maximize_elements((1,2), (3,4)) == (1,3)), 'Wrong result (3).'\nassert     (maximize_elements((5,10), (1,2)) == (5,10)), 'Wrong result (4).'\nassert     (maximize_elements((1,2), (3,4)) == (1,3)), 'Wrong result (5).'\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert maximize_elements((10, 20), (20, 30)) == (20, 30)\nassert maximize_elements((10, 20), (10, 30)) == (30, 20)\nassert maximize_elements((10, 20), (5, 30)) == (20, 30)\nassert maximize_elements((10, 20), (15, 30)) == (20, 30)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((3, 2), (1, 4)) == (3, 2)\nassert     maximize_elements((1, 1), (1, 1)) == (1, 1)\nassert     maximize_elements((1, 0), (1, 1)) == (1, 0)\nassert     maximize_elements((0, 1), (0, 1)) == (0, 1)\nassert     maximize_elements((2, 2), (2, 2)) == (2, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((1, 1), (4, 4)) == (4, 4)\nassert maximize_elements((1, 1), (10, 10)) == (10, 10)\nassert maximize_elements((1, 2), (4, 6)) == (10, 10)\nassert maximize_elements((3, 4), (1, 2)) == (10, 10)\nassert maximize_elements((0, 0), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((1, 2), (3, 4)) == (4, 3)\nassert     maximize_elements((1, 2), (2, 1)) == (2, 1)\nassert     maximize_elements((1, 2), (2, 1, 3, 4)) == (3, 4)\nassert     maximize_elements((2, 1, 3), (4, 1)) == (4, 1)\nassert     maximize_elements((3, 4), (2, 1)) == (4, 3)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((1,2), (4,5)) == (5,1)\nassert maximize_elements((10,4,5,2,1), (3,5,1,8,3)) == (10,10)\nassert maximize_elements((7,6,5,4,2,1), (3,5,1,8,3)) == (7,7)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    maximize_elements((1, 2, 3), (3, 2, 1)) == (1, 2, 3)\nassert \n    maximize_elements((1, 3, 2), (3, 2, 1)) == (1, 3, 2)\n    \nassert \n    maximize_elements((1, 3, 3, 3), (3, 2, 3, 1)) == (1, 3, 3, 3)\nassert \n    maximize_elements((1, 3, 1), (3, 2, 3, 1)) == (1, 3, 1)\n    \nassert \n    maximize_elements((1, 3, 2, 4, 2), (3, 2, 1, 5, 2)) == (1, 3, 2, 4, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((1,2,3), (5,6,7)) == (5,6,7)\nassert     maximize_elements((5,6,7), (1,2,3)) == (5,6,7)\nassert     maximize_elements((1,5,7), (2,3,6)) == (1,2,3)\nassert     maximize_elements((2,3,6), (1,5,7)) == (1,2,3)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_of_primes(n):\n    '''\n    Write a function to sum the numbers of primes in range (1, n+1) in a list.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     newman_prime(1) == 1\nassert     newman_prime(2) == 2\nassert     newman_prime(3) == 3\nassert     newman_prime(4) == 5\nassert     newman_prime(5) == 5\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     newman_prime(10) == 5, 'Wrong value.'\nassert newman_prime(100) == 29, 'Wrong value.'\nassert newman_prime(1) == 2, 'Wrong value.'\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef first_not_square(n):\n    '''\n    Write a function to find the 1st non-square prime number less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     newman_prime(10) == 3\nassert     newman_prime(25) == 11\nassert     newman_prime(75) == 127\nassert     newman_prime(100) == 211\nassert     newman_prime(1000) == 16590105\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_prime_numbers(n):\n    '''\n    Write a function to find all prime numbers below the given n using newman\u2013shanks\u2013williams algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements(('a', 'b'), ('a', 'b')) == (('a', 'b'), ('a', 'b'))\nassert     division_elements(('2', '4'), ('10', '20')) == (('0.5', '0.8333333333333334'), ('0.6666666666666665', '0.8333333333333334'))\nassert     division_elements(('1.5', '2.8'), ('3.5', '4.2')) == (('0.2', '0.5'), ('0.4666666666666666', '0.8333333333333334'))\nassert     division_elements(('2.4', '-5.4'), ('5.2', '-2.2')) == (('-0.6', '0.2'), ('0.8333333333333334', '0.4666666666666666'))\nassert     division_elements(('2.4', '-5.4'), ('5.2', '-2.2')) == (('0.6', '-0.2'), ('0.8333333333333334', '0.4666666666666666'))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements(((2, 5, -3), (3, 2, -1), (1, 1, 3)), ((7, 8, 3), (4, 7, -3), (5, 4, -1)))     ==     ((-1, 4, 2), (-1, 0, -2), (1, 0, -2))\nassert     division_elements(((3, 5, -3), (2, 6, -1), (1, 2, 1)), ((1, 2, 3), (4, 2, -1), (1, 1, 4)))     ==     ((-1, 1, 2), (-1, -1, -2), (1, 1, 1))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef multiplication_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements((1,2),(3,4)) == (1/2,3/4)\nassert     division_elements((1.0,2),(3,4)) == (1.0/2,3.0/4)\nassert     division_elements((1,2.0),(3,4)) == (1/2.0,3/4.0)\n\nassert     division_elements((1,2,3,4),(3,4,5,6)) == (1/2,2/4,3/6,4/8)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1, 2, 3), (2, 2, 2)) == (1, 1, 1)\nassert     division_elements((1, 2, 3), (2, 3, 4)) == (1.5, 2, 2.5)\nassert     division_elements((1, 2, 3), (3, 2, 2)) == (1.5, 2, 2)\nassert     division_elements((3, 2, 4), (2, 1, 2)) == (1.5, 1.5, 2.5)\nassert     division_elements((3, 2, 4), (4, 2, 2)) == (1, 2, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((1,2,3), (4,5,6)) == (0.5, 2.5, 3.0)\nassert     division_elements((1,2,3), (4,0,6)) == (0.25, 0.5, 1.0)\nassert     division_elements((1,2,3), (4,1,6)) == (0.2, 1.0, 1.5)\nassert     division_elements((1,2,3), (4,2,6)) == (0.25, 2.0, 3.0)\nassert     division_elements((1,2,3), (4,3,6)) == (0.3333333333333333, 1.0, 2.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements(((1, 2), (3, 4)), ((1, 2), (3, 4))) == ((1, 0.5), (1.5, 0.25))\nassert     division_elements(((2, 4), (1, 8)), ((3, 6), (5, 4))) == ((2, 0), (5, 0.3333333333333333))\nassert     division_elements(((2, 4), (1, 8)), ((3, 6), (5, 4))) == ((2, 0), (5, 0.3333333333333333))\nassert     division_elements(((2, 4), (1, 8)), ((3, 6), (5, 4))) == ((2, 0), (5, 0.3333333333333333))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsplit_two_parts([0, 1, 2, 3, 4], 2) == ([0, 1, 2], [3, 4])\nassert \nsplit_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\nassert \nsplit_two_parts([0, 1, 2, 3, 4, 5], 3) == ([0, 1, 2], [3, 4, 5])\n\nprint('Testing split_two_parts...')"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_two_parts([1,2,3,4,5,6], 2) == ([1,2], [3,4,5,6])\nassert     split_two_parts([1,2,3,4,5,6], 1) == ([1], [2,3,4,5,6])\nassert     split_two_parts([1,2,3,4,5,6], 8) == ([1,2,3,4,5,6], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ((1, 2, 3), (4, 5)), '2'\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ((1, 2, 3, 4),), '5'\nassert     split_two_parts([1, 2, 3, 4, 5], 1) == ((1,), (2, 3, 4, 5)), '1'\nassert     split_two_parts([1, 2, 3, 4, 5], 10) == ((1, 2, 3, 4), (5)), '10'\nassert     split_two_parts([1, 2, 3, 4, 5], 0) == ((1,), (2, 3, 4, 5)), '0'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([2,3,4,5,6], 3) == ((2,3,4), (5,6)), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 4) == ((2,3,4), (5,6)), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 1) == ((2,3,4,5), ()), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 2) == ((2,3,4,5), ()), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 6) == ((2,3,4,5), ()), \"The list is not split correctly\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 3) == (([1, 2, 3], [4, 5]), ([2, 3, 4, 5], []))\nassert split_two_parts([1, 2, 3, 4], 4) == (([1, 2, 3, 4], []), ([], [1, 2, 3, 4]))\nassert split_two_parts([1, 2, 3], 1) == (([1, 2, 3], []), ([1], []))\nassert split_two_parts([1, 2], 4) == (([1, 2], []), ([1, 2], []))\nassert split_two_parts([1, 2, 3], 4) == (([1, 2, 3], []), ([1, 2, 3], []))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef swap_cases(string):\n    '''\n    Write a function that takes in a string and returns the same string, but with the first letter of each word in the string capitalized and the rest lower-case.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ((1, 2, 3, 4), (5,))\nassert     split_two_parts([1, 2, 3, 4, 5], 1) == ((1, 2, 3, 4), (5,))\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ((1, 2, 3), (4, 5))\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ((1, 2, 3, 4), ())\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ((1, 2, 3, 4), (5,))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4], [5])\n\ndef maximum(lst):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7], 3) == ([1,2,3],[4,5,6,7])\nassert     split_two_parts([1,2,3,4,5,6,7], 4) == ([1,2,3,4], [5,6,7])\nassert     split_two_parts([1,2,3,4,5,6,7], 1) == ([1], [2,3,4,5,6,7])\nassert     split_two_parts([1,2,3,4,5,6,7], 2) == ([1,2], [3,4,5,6,7])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    split_two_parts(list1, 4) == (list1[0:4], list1[4:])\n    split_two_parts(list2, 3) == ([list1[0:3], list1[3:6], list1[6:9]], [list2[0:3], list2[3:6], list2[6:9]])\n    split_two_parts([1,2,3], 3) == ([[1, 2, 3], []], [[1, 2, 3], []])\n    split_two_parts([1,2,3], 4) == ([[1, 2], [3]], [[1, 2], [3]])\n    split_two_parts([1,2,3], 5) == ([[1, 2], [3]], [[1, 2], [3]])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dog_age(6) ==.5\nassert dog_age(12) == 2.5\nassert dog_age(17) == 3.5\nassert dog_age(40) == 5\nassert dog_age(5) == 5\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(5) == 2\nassert     dog_age(6) == 3\nassert     dog_age(10) == 4\nassert     dog_age(3) == 0\nassert     dog_age(8) == 4\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dog_age(2) == 2\nassert     dog_age(3) == 7\nassert     dog_age(10) == 22\nassert     dog_age(12) == 24\nassert     dog_age(18) == 48\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef dog_year(w_age, w_weight):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(10) == 0\nassert     dog_age(2) == 5\nassert     dog_age(60) == 7\n\nprint(\"Expected results: 0, 5, 7\")\nprint(\"Actual results:   {}, {}, {}\".format(dog_age(10), dog_age(2), dog_age(60)))\n\ndef dog_age_in_years(h_age, h_name):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_split([1, 2, 3, 4], 3) == [[1], [2], [3], [4]]\nassert     list_split([1, 2, 3, 4], 4) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 5) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 6) == [[1, 2], [3, 4], [1, 2]]\nassert     list_split([1, 2, 3, 4], 7) == [[1, 2], [3, 4], [1, 2], [3, 4]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5], 3) == [[1,2,3],[4,5]]\nassert     list_split([1,2,3,4,5], 4) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5], 5) == [[1],[2],[3],[4],[5]]\nassert     list_split([1,2,3,4,5], 6) == [[1],[2],[3],[4],[5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_split([], 1) == [[]]\nassert list_split([], 2) == [[], []]\nassert list_split([], 3) == [[], [], []]\nassert list_split([], 4) == [[], [], [], []]\nassert list_split([1, 2, 3], 1) == [[1], [2], [3]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Testing list_split...')\nassert list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\nassert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert list_split([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1,2,3,4], 1) == [[1],[2,3,4]]\nassert     list_split([1,2,3,4], 2) == [[1,2],[3,4]]\nassert     list_split([1,2,3,4], 3) == [[1,2,3],[4]]\nassert     list_split([1,2,3,4], 4) == [[1,2,3,4]]\nassert     list_split([1,2,3,4], 5) == [[1,2,3,4]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1,2,3,4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1,2,3,4], 3) == [[1, 2, 3], [4]]\nassert     list_split([1,2,3,4], 4) == [[1, 2, 3, 4]]\nassert     list_split([1,2,3,4], 5) == [[1, 2], [3, 4]]\n\ndef list_map(L, f):\n    '''\n    Write a function that applies f to every element in a list L and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef lateralsurface_cuboid(l, w, h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its length, width and height.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlateralsurface_cube(5) == 10\nlateralsurface_cube(1) == 1\nlateralsurface_cube(2) == 2\nlateralsurface_cube(3) == 6\nlateralsurface_cube(4) == 24\n\ndef lateral_sphere(l):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to find the volume of a cube given its side length.\n'''\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('Test case passed for lateralsurface_cube.')\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cube(4) == 12\nassert     lateralsurface_cube(8) == 60\nassert     lateralsurface_cube(6) == 20\nassert     lateralsurface_cube(10) == 90\nassert     lateralsurface_cube(1) == 0\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlateralsurface_cube(5) == 20\nlateralsurface_cube(7) == 56\nlateralsurface_cube(11) == 11"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(10) == 130, 'Wrong'\nassert     lateralsurface_cube(5) == 20, 'Wrong'\nassert     lateralsurface_cube(3) == 6, 'Wrong'\nassert     lateralsurface_cube(1) == 4, 'Wrong'\nassert     lateralsurface_cube(0) == 0, 'Wrong'\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_Sum(2) == 7\nassert square_Sum(1) == 1\nassert square_Sum(0) == 0\nassert square_Sum(4) == 33\nassert square_Sum(10) == 385\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nsquare_Sum(4) == 16\nsquare_Sum(7) == 26\nsquare_Sum(12) == 336"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 16\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef square_Sum_alternative(n):\n  '''\n  Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n  '''\n  result = 0\n  i = 1\n  while i <= n:\n    result += i**2\n    i += 2\n  return result\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Test for square_Sum():\")\nprint(square_Sum(3), 16)\nprint(square_Sum(5), 30)\nprint(square_Sum(10), 285)\nprint(square_Sum(15), 385)\n\n\ndef list_even_odd(lst): \n    '''\n    Write a python function that takes in a list of integers and returns a tuple of all the even numbers in the list and all the odd numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(3) == 2*n*(n+1), \"Wrong Answer\"\nassert square_Sum(4) == 0, \"Wrong Answer\"\nassert square_Sum(6) == 25, \"Wrong Answer\"\nassert square_Sum(20) == 582, \"Wrong Answer\""
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_Sum(2) == 1\nassert square_Sum(9) == 5\nassert square_Sum(10) == 29\nassert square_Sum(15) == 154\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_Sum(5) == 10\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 4\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 14\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 1\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 5\nassert     find_star_num(4) == 7\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_star_num(1) == 3, 'find_star_num([1]) is wrong!'\nassert     find_star_num(2) == 5, 'find_star_num([2]) is wrong!'\nassert     find_star_num(3) == 7, 'find_star_num([3]) is wrong!'\nassert     find_star_num(4) == 9, 'find_star_num([4]) is wrong!'\nassert     find_star_num(5) == 11, 'find_star_num([5]) is wrong!'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_star_num(1) == 1, \"Wrong value\"\nassert     find_star_num(2) == 3, \"Wrong value\"\nassert     find_star_num(3) == 4, \"Wrong value\"\nassert     find_star_num(4) == 5, \"Wrong value\"\nassert     find_star_num(5) == 6, \"Wrong value\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_sum_of_digits(n):\n    '''\n    Write a function to find the sum of digits in an integer\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 1\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 6\nassert     find_star_num(4) == 10\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_star_num(1) == (1,2,3,4,5)\nassert     find_star_num(3) == (2,3,4,5,6)\nassert     find_star_num(5) == (3,4,5,6,7)\nassert     find_star_num(10) == (4,5,6,7,8,9,10)\n\n'''\nCSCI-141: Summer 2020 - Assignment 1\nAuthor: Lai Shijie\n'''\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value(\"a\") == 97\nassert     ascii_value(\"b\") == 98\nassert     ascii_value(\"c\") == 99\nassert     ascii_value(\"d\") == 100\nassert     ascii_value(\"e\") == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nWrite a function that accepts an integer list of values and returns the sum of all the values\n'''\ndef sum_integers(values):\n    '''\n    Write a function that accepts an integer list of values and returns the sum of all the values\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('A') == 97\nassert     ascii_value('#') == 35\nassert     ascii_value('$') == 36\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport re\n\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('d') == 115\nassert     ascii_value('e') == 101\nassert     ascii_value('A') == 65\nassert     ascii_value('E') == 115\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nascii_value('a') == 97\nascii_value('b') == 98\nascii_value('c') == 99\nascii_value('d') == 100\nascii_value('e') == 101\nascii_value('f') == 102\nascii_value('g') == 103\nascii_value('h') == 104\nascii_value('i') == 105\nascii_value('j') == 106\nascii_value('k') == 107\nascii_value('l') == 108\nascii_value('m') == 109\nascii_value('n') == 110\nascii_value('o') == 111\nascii_value('p') == 112\nascii_value('q') == 113\nascii_value('r') == 114\nascii_value('s') == 115\nascii_value('t') == 116\nascii_value('u') == 117\nascii_value('v') == 118\nascii_value('w') == 119\nascii_value('x') == 120\nascii_value('y') == 121\nascii_value('z') == 122\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef ascii_value_list(string):\n    '''\n    Write a function to convert a string to a list of ascii values.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 26\nassert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 26\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 0, \"Expected 0\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 7, \"Expected 7\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 6, \"Expected 6\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 0, \"Expected 0\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 0, \"Expected 0\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 24, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 16, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 16, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 20, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 20, \"Wrong Answer\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('\\n\\tCheck the correctness of sum_even_and_even_index')\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index("
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"---\")\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([1, 3, 5, 7]) == 5, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 3, 5, 7, 8]) == 7, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 3, 5, 7, 8, 9]) == 7, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 3, 5, 7, 8, 9, 10]) == 5, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0, \"Test Case Failed\"\nprint(\"All test cases have passed\")\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"check the correctness of even_Power_Sum\")\neven_Power_Sum(0)\neven_Power_Sum(1)\neven_Power_Sum(2)\neven_Power_Sum(3)\neven_Power_Sum(4)\neven_Power_Sum(10)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert even_Power_Sum(1) == 0, \"Wrong answer for n=1\"\nassert even_Power_Sum(2) == 2, \"Wrong answer for n=2\"\nassert even_Power_Sum(3) == 3, \"Wrong answer for n=3\"\nassert even_Power_Sum(4) == 14, \"Wrong answer for n=4\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_Power_Sum(3) == 60\nassert even_Power_Sum(2) == 25\nassert even_Power_Sum(1) == 1\nassert even_Power_Sum(0) == 1\nassert even_Power_Sum(10) == 3628800\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_Power_Sum(3) == 4\neven_Power_Sum(5) == 20\neven_Power_Sum(10) == 440\neven_Power_Sum(11) == 2144\neven_Power_Sum(20) == 450\neven_Power_Sum(25) == 6185\neven_Power_Sum(100) == 64235\neven_Power_Sum(10000) == 36205875\neven_Power_Sum(150000) == 1656278739"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_Power_Sum(10) == 4\neven_Power_Sum(5) == 5\neven_Power_Sum(0) == 0\neven_Power_Sum(1) == 1\neven_Power_Sum(2) == 2\neven_Power_Sum(3) == 5\neven_Power_Sum(4) == 10\neven_Power_Sum(5) == 30\neven_Power_Sum(6) == 44\neven_Power_Sum(7) == 89\neven_Power_Sum(8) == 144\neven_Power_Sum(9) == 216\neven_Power_Sum(10) == 280\neven_Power_Sum(11) == 704\neven_Power_Sum(12) == 1524\neven_Power_Sum(13) == 3480\neven_Power_Sum(14) == 8064\neven_Power_Sum(15) == 15552\neven_Power_Sum(16) == 38464\neven_Power_Sum(17) == 1048576\neven_Power_Sum(18) == 2097152\neven_Power_Sum(19) == 4194304\neven_Power_Sum(20) == 8388608\neven_Power_Sum(21) == 16777216\neven_Power_Sum(22) == 33554432\neven_Power_Sum(23) == 67108864\neven_Power_Sum(24) == 134217728\neven_Power_Sum(25) == 268435456\neven_Power_Sum(26) == 536870912\neven_Power_Sum(27) == 1073741824\neven_Power_Sum(28) == 2147483648\neven_Power_Sum(29) == 4294967296\neven_Power_Sum(30) == 8589934592\neven_Power_Sum(31) == 17179869184\neven_Power_Sum(32) == 351843720888\neven_Power_Sum(33) == 703687441776\neven_Power_Sum(34) == 1441151880758\neven_Power_Sum(35) == 2882303761512\neven_Power_Sum(36) == 5764607523034\neven_Power_Sum(37) == 1152921504606846976\neven_Power_Sum(38) == 25165824037817\neven_Power_Sum(39) == 4398046511104\neven_Power_Sum(40) == 8053063681553\neven_Power_Sum(41) == 1677721607927\neven_Power_Sum(42) == 3355443214125\neven_Power_Sum(43) == 671088642611\neven_Power_Sum(44) == 1342177271245\neven_Power_Sum(45) == 26843545910156\neven_Power_Sum(46) == 5368709123697\neven_Power_Sum(47) == 10737418243776\neven_Power_Sum(48) == 21474836483981\neven_Power_Sum(49) == 42949672962816\neven_Power_Sum(50) == 85899345925072\neven_Power_Sum(51) == 171798691843536\neven_Power_Sum(52) == 3518437208864\neven_Power_Sum(53) == 70368744177664\neven_Power_Sum(54) == 14411518807584\neven_Power_Sum(55) == 28823037615652\neven_Power_Sum(56) == 576460752303536\neven_Power_Sum(57) == 1152921504606846976\neven_Power_Sum(58) == 251658240378170\neven_Power_Sum(59) == 439804651110432\neven_Power_Sum(60) == 805306368155344\neven_Power_Sum(61) == 16777216079270\neven_Power_Sum(62) == 335544321412544\neven_Power_Sum(63) == 6710886426112\neven_Power_Sum(64) == 134217727124560\neven_Power_Sum(65) == 2684354591015640\neven_Power_Sum(66) == 536870912369745\neven_Power_Sum(67) == 1073741824377760\neven_Power_Sum(68) == 21474836483776\neven_Power_Sum(69) == 4294967296281664\neven_Power_Sum(70) == 85899345925075\neven_Power_Sum(71) == 171798691843640\neven_Power_Sum(72) == 351843720886432\neven_Power_Sum(73) == 703687441776642\neven_Power_Sum(74) == 144115188075863\neven_Power_Sum(75) == 288230376156512\neven_Power_Sum(76) == 576460752303536\neven_Power_Sum(77) == 1152921504606846976\neven_Power_Sum(78) == 251658240378170\neven_Power_Sum(79) == 439804651110432\neven_Power_Sum(80) == 805306368155344\neven_Power_Sum(81) == 167772160792756\neven_Power_Sum(82) == 3355443214125456\neven_Power_Sum(83) == 6710886426112640\neven_Power_Sum(84) == 134217727124560\neven_Power_Sum(85) == 2684354591015636\neven_Power_Sum(86) == 536870912369744\neven_Power_Sum(87) == 1073741824377760\neven_Power_Sum(88) == 2147483648377632\neven_Power_Sum(89) == 4294967296281648\neven_Power_Sum(90) == 858993459250752\neven_Power_Sum(91) == 171798691843640\neven_Power_Sum(92) == 351843720886432\neven_Power_Sum(93) == 703687441776642\neven_Power_Sum(94) == 144115188075863\neven_Power_Sum(95) == 288230376156512\neven_Power_Sum(96) == 576460752303536\neven_Power_Sum(97) == 1152921504606846976\neven_Power_Sum(98) == 251658240378170\neven_Power_Sum(99) == 439804651110432\neven_Power_Sum(100) == 805306368155344\neven_Power_Sum(101) == 167772160792756\neven_Power_Sum(102) == 3355443214125456\neven_Power_Sum(103) == 6710886426112640\neven_Power_Sum(104) == 134217727124560\neven_Power_Sum(105) == 2684354591015636\neven_Power_Sum(106) == 536870912369744\neven_Power_Sum(107) == 1073741824377760\neven_Power_Sum(108) == 2147483648377632\neven_Power_Sum(109) == 4294967296281648\neven_Power_Sum(110) == 858993459250752\neven_Power_Sum(111) == 171798691843640\neven_Power_Sum(112) == 351843720886432\neven_Power_Sum(113) == 703687441776642\neven_Power_Sum(114) == 144115188075863\neven_Power_Sum(115) == 288230376156512\neven_Power_Sum(116) == 576460752303536\neven_Power_Sum(117) == 1152921504606846976\neven_Power_Sum(118) == 251658240378170\neven_Power_Sum(119) == 439804651110432\neven_Power_Sum(120) == 805306368155344\neven_Power_Sum(121) == 167772160792756\neven_Power_Sum(122) == 3355443214125456\neven_Power_Sum(123) == 6710886426112640\neven_Powe"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_Power_Sum(2) == 1\neven_Power_Sum(3) == 3\neven_Power_Sum(8) == 2\neven_Power_Sum(10) == 2\neven_Power_Sum(15) == 2\neven_Power_Sum(16) == 2\neven_Power_Sum(100) == 252\neven_Power_Sum(1000) ==\neven_Power_Sum(0) == "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 1\nassert     even_Power_Sum(3) == 2\nassert     even_Power_Sum(4) == 6\nassert     even_Power_Sum(5) == 24\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(5) == 12\nassert     even_Power_Sum(10) == 34\nassert     even_Power_Sum(15) == 112\n\n\ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rear_extract([(1,2), (3,4), (5,6), (7,8)]) == [2,4,6,8], 'Fail'\nassert rear_extract([(1,2), (3,4), (5,6)]) == [2,4], 'Fail'\nassert rear_extract([(1,2)]) == [2], 'Fail'\nassert rear_extract([(1,2),(3,4)]) == [2,4], 'Fail'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'White', 'St.')]) == ['Green', 'White']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([('A',1),('B',2)]) == ['B',2]\nassert     rear_extract([('A',1),('B',2),('C',3)]) == ['B',2,3]\nassert     rear_extract([('A',1),('B',2),('C',3),('D',4)]) == ['B',2,3,4]\nassert     rear_extract([('A',1),('B',2),('C',3),('D',4),('E',5)]) == ['B',2,3,4,5]\nassert     rear_extract([('A',1),('B',2),('C',3),('D',4),('E',5),('F',6)]) == ['B',2,3,4,5,6]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract(['a', 'b', ('c', 'd'), 'e']) == ['d', 'b', 'a', 'c']\nassert     rear_extract([('a', 'b'), 'c', 'd', 'e']) == ['c', 'd', 'a', 'b']\nassert     rear_extract([('a', 'b', 'c'), 'd', 'e']) == ['d', 'c', 'a', 'b']\nassert     rear_extract([('a', 'b', 'c', 'd'), 'e']) == ['e', 'b', 'a', 'c', 'd']\nassert     rear_extract([]) == []\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    #tuple1 = (1, 2, 3, 4, 5, 6)\n    #tuple2 = (10, 20, 30, 40, 50, 60)\n    #tuple3 = (100, 200, 300, 400, 500, 600)\n    #tuple4 = (1000, 2000, 3000, 4000, 5000, 6000)\n    #tuple5 = (10000, 20000, 30000, 40000, 50000, 60000)\n    #rear_extract(tuple1)\n    #assert rear_extract(tuple1) == (3, 4, 5, 6)\n    #rear_extract(tuple2)\n    #assert rear_extract(tuple2) == (30, 40, 50, 60)\n    #rear_extract(tuple3)\n    #assert rear_extract(tuple3) == (300, 400, 500, 600)\n    #rear_extract(tuple4)\n    #assert rear_extract(tuple4) == (4000, 5000, 6000)\n    #rear_extract(tuple5)\n    #"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([('a', 1), ('b', 2)]) == ['b', 2], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('a', 1)) == ['b', 2], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('b', 2)) == ['a', 1], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('c', 2)) == ['b', 2], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('a', 2)) == ['a'], 'Failed!'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rear_extract([('A', 1), ('B', 2)]) == [1,2], \"This is not a list of tuples\"\nassert rear_extract([('A', 1)]) == [1], \"This is not a list of tuples\"\nassert rear_extract([('A', 1)]) == [1], \"This is not a list of tuples\"\nassert rear_extract([(1,2,3)]) == [1], \"This is not a list of tuples\"\nassert rear_extract([(1,)]) == [1], \"This is not a list of tuples\"\n"
    }
]