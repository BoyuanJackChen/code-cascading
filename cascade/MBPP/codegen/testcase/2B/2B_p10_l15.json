[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert similar_elements(([1, 2, 3], [4, 5, 6]), ([1, 2, 3], [6, 7, 8]))\nassert not similar_elements(([1, 2, 3], [4, 5, 6]), ([2, 3, 4], [4, 5, 6]))\nassert similar_elements(([1, 2, 3], [4, 5, 6]), ([1, 2, 3], [7, 8, 9]))\nassert not similar_elements(([1, 2, 3], [4, 5, 6]), ([2, 3, 4], [4, 6, 7]))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements([1, 1], [1, 2])    ==    False, \"List1\"\nassert     similar_elements([2, 1], [1, 2])    ==    True, \"List2\"\nassert     similar_elements([1, 2], [1, 2])    ==    True, \"List3\"\nassert     similar_elements([2, 2], [1, 2])    ==    False, \"List4\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert similar_elements([1,2,3,4], [1,2,3,5]) == [1,2,3]\nassert similar_elements([1,2,3,4,5], [1,2,3,5]) == []\nassert similar_elements([1,2,3,4,5], [1,3,5]) == [1,2,3]\nassert similar_elements([1,2,3,4,5], [1,2,5]) == [1,2,3]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert similar_elements([1,2,3], [3,2,1]) == 1\nassert similar_elements([1,2,3], [2,2,2]) == 2\nassert similar_elements([1,2,3,4], [3,2,1]) == 1\nassert similar_elements([1,2,3,4], [2,2,2]) == 3\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements(('apple', 'pear'), ('orange', 'pineapple')) == True\nassert     similar_elements(('apple', 'pear'), ('pineapple', 'orange')) == False\nassert     similar_elements(('apple', 'pear', 'banana', 'cherry'), ('orange', 'pineapple', 'apple', 'cherry')) == False\nassert     similar_elements(('apple', 'pear', 'banana', 'cherry'), ('orange', 'pineapple', 'cherry', 'pear')) == True\nassert     similar_elements(('apple', 'pear', 'banana', 'cherry'), ('orange', 'pineapple', 'cherry', 'pear', 'banana')) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         similar_elements(('a', 'b'), ('a', 'c')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'd')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'e')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'f')) == 'a'\nassert         similar_elements(('a', 'b'), ('a', 'g')) == 'a'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements((1, 2, 3), (1, 2, 3)) == (1, 2)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4, 5, 6)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4, 5, 6, 7)) == (1, 2, 3)\nassert     similar_elements((1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (similar_elements((1, 2, 3), (2, 3, 4)) == (2, 3)), \"Should be (2, 3)\"\nassert     (similar_elements((1, 2, 3), (4, 4, 4)) == ()), \"Should be empty\"\nassert     (similar_elements((1, 2, 3), (5, 5, 5)) == (5, )), \"Should be (5, )\"\nassert     (similar_elements((1, 2, 3), (1, 1, 1)) == (1, 1)), \"Should be (1, 1)\"\nassert     (similar_elements((1, 2, 3), (1, 1, 2)) == (1, 1, 2)), \"Should be (1, 1, 2)\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements([\"a\",\"b\",\"c\"], [\"b\",\"c\",\"d\"]) == [\"b\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"b\",\"c\",\"a\"]) == [\"a\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"b\",\"c\",\"a\",\"d\"]) == [\"b\",\"c\"]\nassert     similar_elements([\"a\",\"b\",\"c\"], [\"a\",\"b\",\"c\",\"d\"]) == [\"a\",\"b\",\"c\"]\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_not_prime(7) == True\nassert     is_not_prime(6) == False\nassert     is_not_prime(13) == True\nassert     is_not_prime(14) == False\nassert     is_not_prime(10) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_not_prime(2) == True\nassert is_not_prime(3) == False\nassert is_not_prime(4) == False\nassert is_not_prime(5) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef all_are_primes(a,b,c):\n    '''\n    Write a python function to check if three numbers a,b,c are all prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(5) == False\nassert     is_not_prime(6) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(1) == True\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == True\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_not_prime(2) == True\nis_not_prime(1) == False\nis_not_prime(4) == True\nis_not_prime(6) == True\nis_not_prime(11) == True\nis_not_prime(15) == True\nis_not_prime(20) == False\nis_not_prime(1) == False\nis_not_prime(8) == True\nis_not_prime(10) == False\nis_not_prime(23) == False\nis_not_prime(24) == True\nis_not_prime(25) == False\nis_not_prime(26) == True\nis_not_prime(27) == True\nis_not_prime(28) == False\nis_not_prime(29) == False\nis_not_prime(30) == False\nis_not_prime(31) == False\nis_not_prime(32) == False\nis_not_prime(33) == False\nis_not_prime(34) == True\nis_not_prime(35) == True\nis_not_prime(36) == False\nis_not_prime(37) == False\nis_not_prime(38) == True\nis_not_prime(39) == True\nis_not_prime(40) == True\nis_not_prime(41) == True\nis_not_prime(42) == True\nis_not_prime(43) == False\nis_not_prime(44) == False\nis_not_prime(45) == False\nis_not_prime(46) == True\nis_not_prime(47) == False\nis_not_prime(48) == True\nis_not_prime(49) == True\nis_not_prime(50) == True\nis_not_prime(51) == True\nis_not_prime(52) == True\nis_not_prime(53) == True\nis_not_prime(54) == False\nis_not_prime(55) == False\nis_not_prime(56) == False\nis_not_prime(57) == False\nis_not_prime(58) == True\nis_not_prime(59) == True\nis_not_prime(60) == False\nis_not_prime(61) == True\nis_not_prime(62) == True\nis_not_prime(63) == True\nis_not_prime(64) == False\nis_not_prime(65) == True\nis_not_prime(66) == False\nis_not_prime(67) == False\nis_not_prime(68) == True\nis_not_prime(69) == True\nis_not_prime(70) == True\nis_not_prime(71) == True\nis_not_prime(72) == True\nis_not_prime(73) == True\nis_not_prime(74) == True\nis_not_prime(75) == True\nis_not_prime(76) == False\nis_not_prime(77) == True\nis_not_prime(78) == False\nis_not_prime(79) == False\nis_not_prime(80) == True\nis_not_prime(81) == True\nis_not_prime(82) == False\nis_not_prime(83) == True\nis_not_prime(84) == True\nis_not_prime(85) == True\nis_not_prime(86) == False\nis_not_prime(87) == True\nis_not_prime(88) == False\nis_not_prime(89) == False\nis_not_prime(90) == False\nis_not_prime(91) == False\nis_not_prime(92) == True\nis_not_prime(93) == True\nis_not_prime(94) == False\nis_not_prime(95) == False\nis_not_prime(96) == True\nis_not_prime(97) == True\nis_not_prime(98) == False\nis_not_prime(99) == True\nis_not_prime(100) == True\nis_not_prime(101) == True\nis_not_prime(102) == False\nis_not_prime(103) == False\nis_not_prime(104) == True\nis_not_prime(105) == True\nis_not_prime(106) == False\nis_not_prime(107) == False\nis_not_prime(108) == True\nis_not_prime(109) == True\nis_not_prime(110) == True\nis_not_prime(111) == True\nis_not_prime(112) == True\nis_not_prime(113) == False\nis_not_prime(114) == False\nis_not_prime(115) == False\nis_not_prime(116) == True\nis_not_prime(117) == True\nis_not_prime(118) == True\nis_not_prime(119) == True\nis_not_prime(120) == True\nis_not_prime(121) == True\nis_not_prime(122) == False\nis_not_prime(123) == False\nis_not_prime(124) == False\nis_not_prime(125) == True\nis_not_prime(126) == True\nis_not_prime(127) == True\nis_not_prime(128) == False\nis_not_prime(129) == False\nis_not_prime(130) == False\nis_not_prime(131) == True\nis_not_prime(132) == True\nis_not_prime(133) == False\nis_not_prime(134) == True\nis_not_prime(135) == True\nis_not_prime(136) == True\nis_not_prime(137) == False\nis_not_prime(138) == False\nis_not_prime(139) == True\nis_not_prime(140) == False\nis_not_prime(141) == True\nis_not_prime(142) == True\nis_not_prime(143) == True\nis_not_prime(144) == True\nis_not_prime(145) == True\nis_not_prime(146) == True\nis_not_prime(147) == True\nis_not_prime(148) == True\nis_not_prime(149) == True\nis_not_prime(150) == True\nis_not_prime(151) == True\nis_not_prime(152) == True\nis_not_prime(153) == True\nis_not_prime(154) == True\nis_not_prime(155) == False\nis_not_prime(156) == False\nis_not_prime(157) == False\nis_not_prime(158) == True\nis_not_prime(159) == True\nis_not_prime(160) == False\nis_not_prime(161) == False\nis_not_prime(162) == True\nis_not_prime(163) == False\nis_not_prime(164) == True\nis_not_prime(165) == True\nis_not_prime(166) == True\nis_not_prime(167) == True\nis_not_prime(168) == True\nis_not_prime(169) == True\nis_not_prime(170) == True\nis_not_prime(171) == True\nis_not_prime(172) == True\nis_not_prime(173) == True\nis_not_prime(174) == True\nis_not_prime(175) == True\nis_not_prime(176) == False\nis_not_prime(177) == True\nis_not_prime(178) == True\nis_not_prime(179) == True\nis_not_prime(180) == True\nis_not_prime(181) == False\nis_not_prime(182) == False\nis_not_prime(183) == True\nis_not_prime(184) == False\nis_not_prime(185) == False\nis_not_prime(186) == True\nis_not_prime(187) == True\nis_not_prime(188) == True\nis_not_prime(189) == True\nis_not_prime(190) == True\nis_not_prime(191) == False\nis_not_prime(192) == False\nis_not_prime(193) == False\nis_not_prim"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 3) == [-6, 5, 4, 3, 3, 3, 4, 5]\nassert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 3) == [-6, 5, 4, 3, 3, 3, 4, 5]\nassert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 1) == [-6]\nassert     heap_queue_largest([1, -2, 5, 4, 3, 3, 3, 4, 5, -6], 5) == [-6, -2, -1, 1, 2, 3]\nassert     heap_queue_largest([-1, 3, 10, 20, 1, 1, 1, 1, 1], 2) == [-1, -1, 1, 1, 3, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([4,5,2,3],1) == [5,4,3,2]\nassert     heap_queue_largest([4,5,2,3],2) == [5,4,3]\nassert     heap_queue_largest([4,5,2,3],3) == [5,4,3]\nassert     heap_queue_largest([4,5,2,3],4) == [5,4,3]\nassert     heap_queue_largest([4,5,2,3],5) == [5,4,3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_queue_largest([],3) == []\nassert     heap_queue_largest([1, 2, 3, 4, 5], 1) == [5]\nassert     heap_queue_largest([-1, 3, 4, 3, 3, -1, -2], 3) == [-2, -1, 3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([7,3,5,2,6,8,11],4) ==    [11, 8, 6, 5]\nassert     heap_queue_largest([-5,5,-3,-2,0,4,8],2) ==    [0,4,8]\nassert     heap_queue_largest([6,5,4,3,2,1],2) ==    [6,5]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9,10],1) ==    [10]\n\ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([-5,2,4,3,0,5],2) == [4,-5,5,3,2,0]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],7) == [9,8,7,6,5,4,3,2,1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert heap_queue_largest([1,2,3,4,5],3)==[5,4,3]\nassert heap_queue_largest([1,2,3,4,5],2)==[5,4]\nassert heap_queue_largest([1,2,3,4,5],1)==[4]\nassert heap_queue_largest([1,2,3,4,5],0)==[1,2,3,4,5]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert [7,9,2,3,1,4] == heap_queue_largest([],1)\nassert [] == heap_queue_largest([],2)\nassert [] == heap_queue_largest([],4)\nassert [] == heap_queue_largest([1],1)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([1, 2, 3], 3) == [3, 2, 1]\nassert     heap_queue_largest([4, 2, 3, 1], 4) == [4, 3, 2, 1]\nassert     heap_queue_largest([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\nassert     heap_queue_largest([], 3) == []\nassert     heap_queue_largest([1, 1, 1], 2) == [1, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef heap_queue_largest_optimized(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Hint: heapq.nlargest(k, iterable)\n    '''\n    return hq.nlargest(n, nums)"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(4) == False, 'First'\nassert     is_Power_Of_Two(8) == True, 'Second'\nassert     is_Power_Of_Two(32) == True, 'Third'\nassert     is_Power_Of_Two(40) == False, 'Fourth'\nassert     is_Power_Of_Two(31) == False, 'Fifth'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(0) == False, \"The expected value should be False\"\nassert is_Power_Of_Two(1) == False, \"The expected value should be False\"\nassert is_Power_Of_Two(5) == True, \"The expected value should be True\"\nassert is_Power_Of_Two(5) == False, \"The expected value should be False\"\nassert is_Power_Of_Two(10) == True, \"The expected value should be True\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two(1) == False, \"First Test Case is Wrong\"\nassert     is_Power_Of_Two(2) == True, \"Second Test Case is Wrong\"\nassert     is_Power_Of_Two(16) == True, \"Third Test Case is Wrong\"\nassert     is_Power_Of_Two(32) == False, \"Fourth Test Case is Wrong\"\nassert     is_Power_Of_Two(2**9) == True, \"Fifth Test Case is Wrong\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(2) == False, \"2 is not a Power of 2\"\nassert     is_Power_Of_Two(8) == True, \"8 is a Power of 2\"\nassert     is_Power_Of_Two(10) == False, \"10 is not a Power of 2\"\nassert     is_Power_Of_Two(256) == True, \"256 is a Power of 2\"\n\nprint(is_Power_Of_Two.__doc__"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"Pass\" if (is_Power_Of_Two(256)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(128)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(0)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(32)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(64)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(128)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(256)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(512)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1024)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3072)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4096)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8192)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16384)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(32768)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(65536)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(131072)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(262144)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(524288)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1048576)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2097152)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4194304)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8388608)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16777216)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(33554432)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(67108864)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(134217728)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(268435456)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(536870912)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1073741824)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2147483648)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(4294967296)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8589934592)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(17179869184)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(35184372088)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(703687441776)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1454839051520)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3355443325328)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(65536)==True) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(0)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-16)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(16)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-2048)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(2048)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(1)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(-3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(3)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power_Of_Two(8)==False) else \"Fail\")\nprint(\"Pass\" if (is_Power"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(8) == True, 'Your function is not correct.\\nInput: 8\\nOutput: True'\nassert     is_Power_Of_Two(8) == False, 'Your function is not correct.\\nInput: 8\\nOutput: False'\nassert     is_Power_Of_Two(2) == True, 'Your function is not correct.\\nInput: 2\\nOutput: True'\nassert     is_Power_Of_Two(2) == False, 'Your function is not correct.\\nInput: 2\\nOutput: False'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long('Hi there!') == ['Hi']\nassert     find_char_long('Hi there! Hi there!') == ['Hi']\nassert     find_char_long('Hi there! Hi there! Hi there! Hi there!') == ['Hi']\nassert     find_char_long('I have a cat! I have a cat! I have a cat! I have a cat! I have a cat!') == ['I', 'have']\nassert     find_char_long('I have a cat! I have a cat! I have a cat! I have a cat! I have a cat! I have a cat! I have a cat! I have a cat!') == ['I', 'have']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('heLlo') == True, \"Should return True\"\nassert     find_char_long('HeLLo') == False, \"Should return False\"\nassert     find_char_long('hello') == True, \"Should return True\"\nassert     find_char_long('one') == False, \"Should return False\"\nassert     find_char_long('') == False, \"Should return False\"\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('hello') == '', 'The first one is correct!'\nassert     find_char_long('hellom') == '', 'The second one is correct!'\nassert     find_char_long('hell') == '', 'The third one is correct!'\nassert     find_char_long('hello') == 'hello', 'The fourth one is correct!'\nassert     find_char_long('hello!') == 'hello!', 'The fifth one is correct!'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long('the quick brown fox jumps') == ['brown', 'fox', 'jumps'], find_char_long('the quick brown fox jumps')\nassert     find_char_long('a fox jumped over a lazy dog') == ['fox', 'dog'], find_char_long('a fox jumped over a lazy dog')\nassert     find_char_long('goofy came to earth from the moon') == ['moon'], find_char_long('goofy came to earth from the moon')\nassert     find_char_long('the quick brown fox jumps') == ['fox'], find_char_long('the quick brown fox jumps')\nassert     find_char_long('I\\'m a boy') == ['boy'], find_char_long('I\\'m a boy')\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\n\nprint(find_char_long(text))\nassert find_char_long(text) == ['Python', 'is', 'an', 'interpreted', 'high-level', 'general-purpose', 'programming', 'language', '.']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('hello') == ['hello']\nassert     find_char_long('the cat is on the mat') == ['cat', 'the']\nassert     find_char_long('dogs are the best') == ['dogs', 'are', 'the']\nassert     find_char_long('are you big?') == ['are', 'you', 'big?']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntext = \"I could travel anywhere, but I am tired.\"\nassert find_char_long(text) == [\"I\", \"am\", \"tired\"]"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long(\"This is an example of a test case\") == ['an', 'test', 'case']\nassert     find_char_long(\"This is an example of a test case\") == []\nassert     find_char_long(\"This is an example of a test case\") ==     ['case']\n\ndef find_word(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntext = \"this is a test text.\"\nprint(find_char_long(text))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([1,2,3,4]) == [1,4,9,16], \\\n        \"Wrong result for square_nums([1,2,3,4]): {}\".format(square_nums([1,2,3,4]))\nassert     square_nums([0,3,4]) == [0,9,16], \\\n        \"Wrong result for square_nums([0,3,4]): {}\".format(square_nums([0,3,4]))"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1, 2, 3]) == [1, 4, 9]\nassert square_nums([1, 2, 3]) == [1, 4, 9]\nassert square_nums([-1, -2, -3]) == [-1, -4, -9]\nassert square_nums([]) == []\nassert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([1, 4, 9]) == [1, 4, 81]\nassert     square_nums([-4, -9, -16, -25]) == [-4, -9, -256, -625]\nassert     square_nums([-1, -4, -9, -16, -25]) == [-1, -4, -9, -256, -625]\n\n\ndef sum_squares(nums):\n    '''\n    Write a function to find the sum of the squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_nums([1,2,3,4,5]) == [1,4,9,16,25]\nassert square_nums([2,4,6,8,10]) == [4,16,36,64,100]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a function to find the multiplication of individual elements in a list.\n'''\ndef multiply(nums):\n    '''\n    Write a function to find the multiplication of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_nums([4,9,16]) == [16, 81, 256], 'failed'\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef square_nums_more(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_nums([2, 3, 5, 7, 11]) == [4, 9, 49, 121, 289], \"Square\"\nassert square_nums([]) == [], \"Empty list\"\nassert square_nums([0]) == [0], \"Zero\"\nassert square_nums([1, 2]) == [1, 4], \"Two\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([1,2,3]) == [1,4,9]\nassert square_nums([]) == []\nassert square_nums([1]) == [1]"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations('cw') == 1, 'Should return 1'\nassert     find_Rotations('fdddddfdddddddf') == 5, 'Should return 5'\nassert     find_Rotations('abcd') == 0, 'Should return 0'\nassert     find_Rotations('ghghgh') == 1, 'Should return 1'\nassert     find_Rotations('yby') == 1, 'Should return 1'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations(\"baa\") == 1\nassert     find_Rotations(\"baab\") == 2\nassert     find_Rotations(\"baabb\") == 3\nassert     find_Rotations(\"baaaba\") == 4\nassert     find_Rotations(\"baaabbb\") == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\"abc\") == 2\nassert     find_Rotations(\"abc\") == 1\nassert     find_Rotations(\"abc\") == 0\nassert     find_Rotations(\"a\") == 0\nassert     find_Rotations(\"ab\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"MKYI\") == 1\nassert     find_Rotations(\"MKYI\") == 2\nassert     find_Rotations(\"MKYI\") == 3\nassert     find_Rotations(\"MKYI\") == 4\nassert     find_Rotations(\"MKYI\") == 5\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"abcd\") == 0, \"Incorrect output\"\nassert     find_Rotations(\"abcdabcd\") == 1, \"Incorrect output\"\nassert     find_Rotations(\"aba\") == 2, \"Incorrect output\"\nassert     find_Rotations(\"\") == 0, \"Incorrect output\"\nassert     find_Rotations(\"dvdf\") == 0, \"Incorrect output\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations('abc') == 2\nassert     find_Rotations('acb') == 3\nassert     find_Rotations('aabc') == 5\nassert     find_Rotations('abcabc') == 3\n\ndef find_Rotations2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ(\"apples\", \"a\") == \"apples\"\nassert     remove_Occ(\"apples\", \"p\") == \"apples\"\nassert     remove_Occ(\"apples\", \"s\") == \"apples\"\nassert     remove_Occ(\"apples\", \"a\") == \"apples\"\nassert     remove_Occ(\"apples\", \"e\") == \"apples\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ(\"mango\",\"m\") == \"gango\"\nassert     remove_Occ(\"mango\",\"n\") == \"mango\"\nassert     remove_Occ(\"mango\",\"c\") == \"mango\"\nassert     remove_Occ(\"mango\",\"g\") == \"mango\"\nassert     remove_Occ(\"mango\",\"a\") == \"mango\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ('demo', 'x') == 'dme'\nassert     remove_Occ('demo', 'd') =='me'\nassert     remove_Occ('demo','m') == 'd'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_Occ('areweare', 'e') == 'arewe'\nassert\nremove_Occ('areweare', 'are') == 'arewe'\nassert \nremove_Occ('areweare', 'are') =='reweare'\nassert \nremove_Occ('areweare', 'were') == 'areweare'\nassert \nremove_Occ('areweare', 'we') == 'areweare'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_Occ('Cwxyz', 'w') == 'Czxz'\nremove_Occ('wqwrwwqwrww', 'q') == 'wrwwwwqwrww'\nremove_Occ('aabccc', 'b') == 'aabccc'\n\ndef Occ_2(s):\n    '''\n    Write a python function to count the number of characters (including whitespaces) in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ('abcd', 'b') == 'abcd', 'Should return the string without b and the last element'\nassert     remove_Occ('abcd', 'a') == 'abcd', 'Should return the string without a and the first element'\nassert     remove_Occ('abcd', 'z') == 'abcd', 'Should return the string without z and the first and last elements'\n\n\n\ndef merge_sort(arr, l, r):\n    '''\n    Write a python function to sort an array by merge sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sort_matrix_using_divide_conquer(M):\n    if len(M) == 0:\n        return M\n    else:\n        mid = len(M) // 2\n        return sorted(sorted(M[:mid], key=lambda x: x[0]), key=lambda x: x[1], reverse=True) + sort_matrix_using_divide_conquer(M[mid:])\n\ndef is_valid_matrix(m):\n    if len(m) == 0:\n        return False\n    else:\n        for row in m:\n            if len(row)!= len(m[0]):\n                return False\n            else:\n                if min(row) < 0:\n                    return False\n        return True\n\ndef square_matrix_sum(m):\n    if is_valid_matrix(m):\n        return sum(row[0] for row in m)\n    else:\n        return 0\n\ndef square_matrix_max_sum(m):\n    if is_valid_matrix(m):\n        return max(sum(row) for row in m)\n    else:\n        return 0\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([\n            [1, 5, 8],\n            [10, 13, 21],\n            [12, 17, 20],\n        ]) == [[1, 5, 8], [10, 13, 21], [12, 17, 20]]\nassert     sort_matrix([\n            [1, 3, 5, 7, 9],\n            [2, 4, 6, 8, 10],\n            [11, 12, 13, 14, 15],\n            [16, 17, 18, 19, 20],\n            [21, 22, 23, 24, 25],\n        ]) == [[1, 2, 3, 4, 5], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [1, 3, 5, 7, 9]]\n\ndef merge_sort(A, p, r):\n    '''\n    Write a function to sort the array A in ascending order using merge sort.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]])\nprint(sort_matrix([[1,4,2],[3,5,7],[2,2,1]]) == [[1,2,2],[2,2,1],[3,5,7]])\nprint(sort_matrix([[1,1,1],[1,1,1],[1,1,1]]) == [[1,1,1],[1,1,1],[1,1,1]])\nprint(sort_matrix([[1,1,1],[2,2,2],[3,3,3]]) == [[1,1,1],[2,2,2],[3,3,3]])\n\nprint('\\n')\n\n\ndef sort_matrix_2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([[1,2,3],\n                        [4,5,6],\n                        [7,8,9]]) == [[1,2,3],\n                                    [7,4,5],\n                                    [6,8,9]]\nassert     sort_matrix([[1,2,3],\n                        [4,5,6],\n                        [4,5,6]]) == [[1,2,3],\n                                    [4,4,5],\n                                    [6,6,6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[1, 2, 3, 4, 5],\n                        [7, 8, 9, 10, 11],\n                        [13, 14, 15, 16, 17],\n                        [19, 20, 21, 22, 23]]) == [[1, 2, 3, 4, 5],\n                                                [13, 14, 15, 16, 17],\n                                                [7, 8, 9, 10, 11],\n                                                [19, 20, 21, 22, 23]]\n\nassert     sort_matrix([[1, 2, 3],\n                        [7, 8, 9],\n                        [13, 14, 15]]) == [[1, 2, 3],\n                                        [13, 14, 15],\n                                        [7, 8, 9]]\n\nassert     sort_matrix([[1, 2, 3, 4],\n                        [5, 6, 7, 8],\n                        [9, 10, 11, 12],\n                        [13, 14, 15, 16]]) == [[1, 2, 3, 4],\n                                            [5, 6, 7, 8],\n                                            [9, 10, 11, 12],\n                                            [13, 14, 15, 16]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nM = [[1, 3, -1, 4], \n    [2, 4, 1, 5], \n    [-1, 2, 2, 1]]\nprint(sort_matrix(M))\n\n\n'''\nThe official solution:\n\nfrom functools import reduce\ndef sort_matrix(A):\n    return sorted(A, key=lambda r: sum(r))\n''"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([\n        [1, 3, 5],\n        [4, 5, 6],\n        [8, 9, 11],\n    ]) == [[1, 3, 5], [4, 5, 6], [8, 9, 11]]\nassert     sort_matrix([\n        [1, 4, 2],\n        [3, 5, 6],\n        [7, 8, 9],\n    ]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     sort_matrix([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     sort_matrix([\n        [1, 4],\n        [2, 5],\n        [3, 6],\n    ]) == [[1, 2, 3], [4, 5, 6]]\nassert     sort_matrix([\n        [1, 4, 2],\n        [3, 5, 6],\n        [7, 8, 9],\n    ]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[3,4,1,2],[1,6,2,2],[5,7,2,4],[3,5,4,7]]) == [[3,4,1,2],[1,6,2,2],[5,7,2,4],[3,5,4,7]]\nassert     sort_matrix([[2,7,8,3],[3,5,1,7],[1,4,6,8]]) == [[1,4,6,8],[2,7,3,5],[3,5,7,8]]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(2,3,4) == 20\nassert     find_Volume(10,7,3) == 105\nassert     find_Volume(4,2,5) == 10"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume(1.0, 1.0, 1.0) == 1.0, \"The output is incorrect\"\nassert     find_Volume(3.0, 2.0, 3.0) == 12.0, \"The output is incorrect\"\nassert     find_Volume(2.0, 4.0, 3.0) == 22.0, \"The output is incorrect\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume(5,10,15) == 120\nassert    find_Volume(8,20,15) == 80\nassert    find_Volume(5,10,20) == 200\nassert    find_Volume(9,20,20) == 400\nassert    find_Volume(5,10,10) == 50\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(3,4,5) == 35 \nassert     find_Volume(0,4,5) == 0 \nassert     find_Volume(1,2,3) == 6 \nassert     find_Volume(1,1,1) == 1 \nassert     find_Volume(5,5,5) == 50 \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(1,2,3) == 6\nassert    find_Volume(5,10,12) == 25\nassert    find_Volume(8,3,6) == 20\nassert    find_Volume(5,2,6) == 25\nassert    find_Volume(6,3,5) == 20\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(6,8,10) == 90, 'volume = 90'\nassert     find_Volume(10,12,8) == 120, 'volume = 120'\nassert     find_Volume(2,2,5) == 10, 'volume = 10'\nassert     find_Volume(8,6,12) == 80, 'volume = 80'\nassert     find_Volume(3,4,9) == 27, 'volume = 27'\nprint('All test cases passed'"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nl = 1.0\nb = 3.0\nh = 2.0\n\nvol = find_Volume(l, b, h)\nassert vol == 4.0\n\n\nl = 1.5\nb = 2.5\nh = 4.0\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume([2.0,3.0,4.0],[2.0,3.0,4.0])==9.0, \"incorrect\"\nassert     find_Volume([1.0,2.0,3.0],[1.0,2.0,3.0])==6.0, \"incorrect\"\nassert     find_Volume([2.0,3.0,4.0],[2.0,3.0,4.0])==9.0, \"incorrect\"\nassert     find_Volume([2.0,3.0,4.0],[3.0,4.0,5.0])==16.0, \"incorrect\"\nassert     find_Volume([2.0,3.0,4.0],[3.0,4.0,5.0])==16.0, \"incorrect\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(4,4,8) == 48\nassert     find_Volume(4,7,9) == 84\nassert     find_Volume(2,4,6) == 12\nassert     find_Volume(4,8,7) == 70\nassert     find_Volume(5,6,9) == 27\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore('a_b_c_d') == True\nassert     text_lowercase_underscore('A1B2C3D4') == False\nassert     text_lowercase_underscore('1_1_1_1') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('hello_my_friend') == True, 'The input should be true'\nassert     text_lowercase_underscore('one_more_time_and_again') == True, 'The input should be true'\nassert     text_lowercase_underscore('hello_world') == False, 'The input should be false'\nassert     text_lowercase_underscore('hello') == False, 'The input should be false'\nassert     text_lowercase_underscore('one_more_time') == False, 'The input should be false'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('hello') == True, \\\n        \"incorrect result for text_lowercase_underscore('hello')\"\n\nassert     text_lowercase_underscore('hello_world') == False, \\\n        \"incorrect result for text_lowercase_underscore('hello_world')\"\n\nassert     text_lowercase_underscore('hello_World') == False, \\\n        \"incorrect result for text_lowercase_underscore('hello_World')\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('This is a test.') == False\nassert     text_lowercase_underscore('This Is A Test') == True\nassert     text_lowercase_underscore('this_is_a_test') == False\nassert     text_lowercase_underscore('This_is_a_test') == True\nassert     text_lowercase_underscore('This_is_a_Test') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('a lowercase') == True\nassert     text_lowercase_underscore('x lowercase') == False\nassert     text_lowercase_underscore('A lowercase') == True\nassert     text_lowercase_underscore('Uppercase') == False\nassert     text_lowercase_underscore('An Uppercase') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('a1b2_c3')     == True\nassert     text_lowercase_underscore('a1b2_C3')     == False\nassert     text_lowercase_underscore('_1b2_C3')     == False\nassert     text_lowercase_underscore('_1_b2_C3')     == False\nassert     text_lowercase_underscore('_1_b2_C_3')     == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"--abc_123\") == True\nassert     text_lowercase_underscore(\"_abc_123\") == True\nassert     text_lowercase_underscore(\"--a_c_d_e\") == True\nassert     text_lowercase_underscore(\"a_bc_def\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore(\"if_fun_xyz\") == True\nassert text_lowercase_underscore(\"if_fun_xyz\") == False\nassert     text_lowercase_underscore(\"if_fun_xyz\") == False\nassert text_lowercase_underscore(\"if_fun_xyz\") == False\nassert     text_lowercase_underscore(\"if_fun_xyz\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore(\"apple_and_banana\") == True, 'apple_and_banana should be true'\nassert     text_lowercase_underscore(\"Apenka-a-fez\") == False, 'Apenka-a-fez should be false'\nassert     text_lowercase_underscore(\"appleAndBanana\") == False, 'appleAndBanana should be false'\nassert     text_lowercase_underscore(\"apple_Apenka_a_fez\") == True, 'apple_Apenka_a_fez should be true'\nassert     text_lowercase_underscore(\"appleAnd\") == True, 'appleAnd should be true'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore(\"Example_With_underscores\") == True\nassert     text_lowercase_underscore(\"Example_With_Hyphens\") == True\nassert     text_lowercase_underscore(\"Example_With_Underscores\") == False\nassert     text_lowercase_underscore(\"Example_With_Underscores_\") == True\nassert     text_lowercase_underscore(\"Example_With_Underscores_and\") == True\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert square_perimeter(1) == 4\nassert square_perimeter(2) == 6\nassert square_perimeter(3) == 8\n\ndef calc_square_area(a):\n    '''\n    Write a function that calculates the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(1) == 1\nassert square_perimeter(2) == 4\nassert square_perimeter(10) == 28\nassert square_perimeter(100) == 3200\nassert square_perimeter(1000) == 320000\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_area(a):\n    '''\n    Write a function that takes a float value (a) as input and returns the area of the square.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_perimeter(1) == 4\nassert square_perimeter(2) == 8\nassert square_perimeter(3) == 18\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert square_perimeter(2) == 4\nassert square_perimeter(3) == 6\nassert square_perimeter(4) == 8\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\n\n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list(\"geeksforgeeks\",\"fgeeks\") == \"kfgeks\"\nassert    str_to_list(\"geeksforgeeks\",\"kgeeks\") == \"geeksforgeeks\"\nassert    str_to_list(\"geeksforgeeks\",\"geeks\") == \"gks\"\nassert    str_to_list(\"geeksforgeeks\",\"gek\") == \"gek\"\nassert    str_to_list(\"geeksforgeeks\",\"gef\") == \"gk\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert str_to_list('pynative', 'ive') == 'native', \"Failed\"\nassert str_to_list('w3resource', 'wef') == 'w3resouce', \"Failed\"\nassert str_to_list('I love Python', 'Python') == 'I l', \"Failed\"\nassert str_to_list('pynative', 'Python') == '', \"Failed\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef all_unique_characters(string):\n    '''\n    Write a function to check whether the characters of a string are all unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    string_1 = \"aaca\"\n    string_2 = \"aaca\"\n    string_3 = \"a\"\n    string_4 = \"b\"\n    print(f\"str_to_list(string_1) = {str_to_list(string_1)}\")\n    print(f\"str_to_list(string_2) = {str_to_list(string_2)}\")\n    print(f\"str_to_list(string_3) = {str_to_list(string_3)}\")\n    print(f\"str_to_list(string_4) = {str_to_list(string_4)}\")\n\n    print(f\"str_to_list(string_1) == str_to_list(string_1) = {str_to_list(string_1) == str_to_list(string_1)}\")\n    print(f\"str_to_list(string_2) == str_to_list(string_2) = {str_to_list(string_2) == str_to_list(string_2)}\")\n    print(f\"str_to_list(string_3) == str_to_list(string_3) = {str_to_list(string_3) == str_to_list(string_3)}\")\n    print(f\"str_to_list(string_4) == str_to_list(string_4) = {str_to_list(string_4) == str_to_list(string_4)}\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert str_to_list('xyz') == ['z', 'y', 'x']\nassert str_to_list('xy') == ['x', 'y']\nassert str_to_list('yz') == ['y', 'z']\nassert str_to_list('x') == ['x']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nstring = \"String to remove characters from\"\nlist = str_to_list(string)\nassert list == ['s', 't', 'r', 'i', 'n', 'g', 'o','', 'r', 'a', 'n', 'g', 't', 'i', 'n', 'g']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef common_characters(string_1,string_2):\n    '''\n    Write a function to get the characters in common between the strings.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     str_to_list(\"abcdabcde\") == [\"abcd\", \"abcde\"], \"Should return ['abcd', 'abcde']\"\nassert     str_to_list(\"kitten\") == [\"kit\", \"it\"], \"Should return ['kit', 'it']\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,3]) == True, 'Should return True'\nassert     test_duplicate([1,2,3,4]) == False, 'Should return False'\nassert     test_duplicate([1,1,3,3,3]) == True, 'Should return True'\nassert     test_duplicate([1,1,3,3,5]) == False, 'Should return False'\nassert     test_duplicate([1,2,3,4,5]) == True, 'Should return True'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_duplicate([1,2,3]) == True\nassert     test_duplicate([1,2,3,1]) == False\nassert     test_duplicate([1,2,3,4]) == True\nassert     test_duplicate([1,2,3,4,1]) == True\nassert     test_duplicate([1,2,3,4,1,2]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_duplicate([1,2,3,4,5,6]) == True, \"Checking for duplicate element\"\nassert     test_duplicate([2,2,3,4,5,6]) == False, \"Checking for duplicate element\"\nassert     test_duplicate([1,2,3,4,5,5]) == True, \"Checking for duplicate element\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('You should be able to run this test and pass all the tests.'"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_duplicate([1,1,2]) == True, \"1\"\nassert     test_duplicate([1,2,3]) == False, \"2\"\nassert     test_duplicate([1,1]) == True, \"3\"\nassert     test_duplicate([1,2,2,3]) == False, \"3\"\nassert     test_duplicate([1,2,3,3]) == True, \"4\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate([2,3,1,0,2,5,3]) == True, \\\n    \"This test function does not exist. Please refer to the provided code.\"\nassert     test_duplicate([2,3,1,0,2,5,3,5]) == False, \\\n    \"This test function does not exist. Please refer to the provided code.\""
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(56) == False, \"56 is not Woodall\"\nassert     is_woodall(1) == False, \"1 is not Woodall\"\nassert     is_woodall(1.2) == False, \"1.2 is not Woodall\"\nassert     is_woodall(True) == False, \"True is not Woodall\"\nassert     is_woodall(\"\") == False, \"\" is not Woodall\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_woodall(1)\nassert not is_woodall(2)\nassert not is_woodall(0)\nassert not is_woodall(0.001)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Pass\" if is_woodall(26) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(27) == True else \"Fail\")\nprint(\"Pass\" if is_woodall(18) == True else \"Fail\")\nprint(\"Pass\" if is_woodall(22) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(35) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(61) == False else \"Fail\")\nprint(\"Pass\" if is_woodall(3) == False else \"Fail\")\n\n'''\nPrint the following output for each of the following input values to the function is_woodall().\n\nPass if the function returns False.\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n'''\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(1) == True, \"Should return True\"\nassert     is_woodall(5) == False, \"Should return False\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(False) == False, \\\n        \"is_woodall should return False for False\"\nassert     is_woodall(True) == True, \\\n        \"is_woodall should return True for True\"\nassert     is_woodall(None) == False, \\\n        \"is_woodall should return False for None\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('The output is correct')\nprint(is_woodall(5))\nprint(is_woodall(4))\n\n\n\ndef is_oak(x): \n    '''\n    Write a function to check if the given number is oak or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(1) == False, '1st number is not a woodball'\nassert     is_woodall(-1) == False, '-1st number is not a woodball'\nassert     is_woodall(3) == False, '3rd number is not a woodball'\nassert     is_woodall(0) == True, '0th number is a woodball'\nassert     is_woodall(1000000) == False, '1st 1000000th number is a woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \n\ndef is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2 or x == 3 or x == 5 or x == 6 or x == 8 or x == 9:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_woodall(5) == False, \"is_woodall should return False for numbers which are not even!\"\nassert     is_woodall(1) == False, \"is_woodall should return False for numbers which are even!\"\nassert     is_woodall(7) == True, \"is_woodall should return True for numbers which are even!\"\nassert     is_woodall(3) == False, \"is_woodall should return False for numbers which are odd!\"\nassert     is_woodall(13) == True, \"is_woodall should return True for numbers which are odd!\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    if int(num[::-1]) == int(num)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(1) == 1, \"Mistake\"\nassert     rev(3) == 2, \"Mistake\"\nassert     rev(5) == 4, \"Mistake\"\nassert     rev(100) == 98, \"Mistake\"\nassert     rev(101) == 99, \"Mistake\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('\\n\\n')\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(1) == True\nassert rev(2) == False\nassert rev(1) == True\nassert rev(2) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(4) == 3\nassert     rev(5) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(7) == rev(9) == True \nassert rev(10) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(4) == True\nassert    rev(-2) == True\nassert    rev(7) == False\nassert    rev(-7) == False\n\ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    return (num * 2) >= abs(num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(7) == 8, '\\nTestcase failed: rev(7) should be 8 but is:'+ str(rev(7))\nassert     rev(9) == 6, '\\nTestcase failed: rev(9) should be 6 but is:'+ str(rev(9))\nassert     rev(11) == 10, '\\nTestcase failed: rev(11) should be 10 but is:'+ str(rev(11))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert rev(123) == 321, \"Simple\"\n    assert rev(1234) == 4321, \"More\"\n    assert rev(12345) == 45321, \"Negative\"\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(2) == 1\nassert     rev(3) == 1\nassert     rev(5) == 2\nassert     rev(10) == 2\nassert     rev(17) == 2\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num([1,2,3,4,5]) == 5\nassert     find_Max_Num([1,2,3,4,4]) == 4\nassert     find_Max_Num([1,2,3,4,5,5]) == 5\nassert     find_Max_Num([1,2,3,4,4,4]) == 4\nassert     find_Max_Num([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Max_Num([2, 3, 1]) == 3\nassert     find_Max_Num([4, 5, 7]) == 7\nassert     find_Max_Num([8, 9, 2, 6]) == 9\nassert     find_Max_Num([2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([9, 8, 7, 6, 5, 4, 3, 2]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_Max_Num([]) == None \nfind_Max_Num([1]) == 1 \nfind_Max_Num([1,2,3,4,5,6,7,8,9]) == 9"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_Max_Num(arr):\n    # Your code here\n    arr.sort(reverse = True)\n    return int(''.join(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5]) == 5, \"Wrong Output\"\nassert     find_Max_Num([4, 5, 6, 7]) == 7, \"Wrong Output\"\nassert     find_Max_Num([1, 2, 3]) == 3, \"Wrong Output\"\nassert     find_Max_Num([4, 5]) == 5, \"Wrong Output\"\nassert     find_Max_Num([1]) == 1, \"Wrong Output\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Max_Num([2, 1, 3, 5, 6]) == 9, \"Test case 1 Failed\"\nassert     find_Max_Num([1, 2, 4, 6, 9]) == 9, \"Test case 2 Failed\"\nassert     find_Max_Num([9, 8, 9, 9, 9, 9]) == 81, \"Test case 3 Failed\"\nassert     find_Max_Num([1, 1, 1, 1, 1]) == 9, \"Test case 4 Failed\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(10,-10) == True\nassert     opposite_Signs(10,-10) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nopposite_Signs(1,1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,1) == False\n\ndef n_Choose_k(n,k): \n    '''\n    Write a python function to calculate the value of the expression n choose k.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nopposite_Signs(-2,2) == False\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(0,0) == True\nopposite_Signs(1,1) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,1) == True\nopposite_Signs(0,0) == True\nopposite_Signs(1,1) == False\nopposite_Signs(2,2) == True\nopposite_Signs(1,0) == False\nopposite_Signs(1,2) == True\nopposite_Signs(2,1) == False\nopposite_Signs(1,1) == True\nopposite_Signs(1,1) == True\nopposite_Signs(0,-1) == True\nopposite_Signs(0,-1) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(-2,-2) == True\nopposite_Signs(2,2) == False\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(-2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(2,-2) == False\nopposite_Signs(2,-2) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,-2) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(0,-1) == False\nopposite_Signs(0,-1) == True\nopposite_Signs(1,-1) == False\nopposite_Signs(1,-1) == True\nopposite_Signs(1,-1) == True\nopposite"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(1,0) == False\nassert     opposite_Signs(-1,0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nopposite_Signs(1, 2)\nopposite_Signs(3, -1)\nopposite_Signs(-1, -2)\nopposite_Signs(2, -3)\nopposite_Signs(-1, 2)\nopposite_Signs(-2, -3)\nopposite_Signs(0, 2)\nopposite_Signs(-2, 0)\nopposite_Signs(0, -2)\nopposite_Signs(1, 1)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = 5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -4) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = -1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = -1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 1) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 1) == False, \"Should return False\"\n    opposite_Signs(x = -5, y = 4) == True, \"Should return True\"\n    opposite_Signs(x = 5, y = 4) ="
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nopposite_Signs(x = -1, y = -2) == True\nassert \nopposite_Signs(x = 1, y = 2) == False\nassert \nopposite_Signs(x = 0, y = 0) == False\nprint('Check Passed')\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(0,-2) == True, \"Wrong answer\"\nassert opposite_Signs(0,2) == True, \"Wrong answer\"\nassert opposite_Signs(2,0) == False, \"Wrong answer\"\nassert opposite_Signs(1,2) == False, \"Wrong answer\"\nassert opposite_Signs(-1,1) == True, \"Wrong answer\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 7\nassert     is_octagonal(3) == 21\nassert     is_octagonal(4) == 7\nassert     is_octagonal(5) == 26\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(is_octagonal(1))\nprint(is_octagonal(2))\nprint(is_octagonal(3))\nprint(is_octagonal(4))\nprint(is_octagonal(5))\nprint(is_octagonal(6))\nprint(is_octagonal(7))\nprint(is_octagonal(8))\nprint(is_octagonal(9))\nprint(is_octagonal(10))\nprint(is_octagonal(11))\nprint(is_octagonal(12))\nprint(is_octagonal(13))\nprint(is_octagonal(14))\nprint(is_octagonal(15))\nprint(is_octagonal(16))\nprint(is_octagonal(17))\nprint(is_octagonal(18))\nprint(is_octagonal(19))\nprint(is_octagonal(20))\nprint(is_octagonal(21))\nprint(is_octagonal(22))\nprint(is_octagonal(23))\nprint(is_octagonal(24))\nprint(is_octagonal(25))\nprint(is_octagonal(26))\nprint(is_octagonal(27))\nprint(is_octagonal(28))\nprint(is_octagonal(29))\nprint(is_octagonal(30))\nprint(is_octagonal(31))\nprint(is_octagonal(32))\nprint(is_octagonal(33))\nprint(is_octagonal(34))\nprint(is_octagonal(35))\nprint(is_octagonal(36))\nprint(is_octagonal(37))\nprint(is_octagonal(38))\nprint(is_octagonal(39))\nprint(is_octagonal(40))\nprint(is_octagonal(41))\nprint(is_octagonal(42))\nprint(is_octagonal(43))\nprint(is_octagonal(44))\nprint(is_octagonal(45))\nprint(is_octagonal(46))\nprint(is_octagonal(47))\nprint(is_octagonal(48))\nprint(is_octagonal(49))\nprint(is_octagonal(50))\nprint(is_octagonal(51))\nprint(is_octagonal(52))\nprint(is_octagonal(53))\nprint(is_octagonal(54))\nprint(is_octagonal(55))\nprint(is_octagonal(56))\nprint(is_octagonal(57))\nprint(is_octagonal(58))\nprint(is_octagonal(59))\nprint(is_octagonal(60))\nprint(is_octagonal(61))\nprint(is_octagonal(62))\nprint(is_octagonal(63))\nprint(is_octagonal(64))\nprint(is_octagonal(65))\nprint(is_octagonal(66))\nprint(is_octagonal(67))\nprint(is_octagonal(68))\nprint(is_octagonal(69))\nprint(is_octagonal(70))\nprint(is_octagonal(71))\nprint(is_octagonal(72))\nprint(is_octagonal(73))\nprint(is_octagonal(74))\nprint(is_octagonal(75))\nprint(is_octagonal(76))\nprint(is_octagonal(77))\nprint(is_octagonal(78))\nprint(is_octagonal(79))\nprint(is_octagonal(80))\nprint(is_octagonal(81))\nprint(is_octagonal(82))\nprint(is_octagonal(83))\nprint(is_octagonal(84))\nprint(is_octagonal(85))\nprint(is_octagonal(86))\nprint(is_octagonal(87))\nprint(is_octagonal(88))\nprint(is_octagonal(89))\nprint(is_octagonal(90))\nprint(is_octagonal(91))\nprint(is_octagonal(92))\nprint(is_octagonal(93))\nprint(is_octagonal(94))\nprint(is_octagonal(95))\nprint(is_octagonal(96))\nprint(is_octagonal(97))\nprint(is_octagonal(98))\nprint(is_octagonal(99))\nprint(is_octagonal(100))\nprint(is_octagonal(101))\nprint(is_octagonal(102))\nprint(is_octagonal(103))\nprint(is_octagonal(104))\nprint(is_octagonal(105))\nprint(is_octagonal(106))\nprint(is_octagonal(107))\nprint(is_octagonal(108))\nprint(is_octagonal(109))\nprint(is_octagonal(110))\nprint(is_octagonal(111))\nprint(is_octagonal(112))\nprint(is_octagonal(113))\nprint(is_octagonal(114))\nprint(is_octagonal(115))\nprint(is_octagonal(116))\nprint(is_octagonal(117))\nprint(is_octagonal(118))\nprint(is_octagonal(119))\nprint(is_octagonal(120))\nprint(is_octagonal(121))\nprint(is_octagonal(122))\nprint(is_octagonal(123))\nprint(is_octagonal(124))\nprint(is_octagonal(125))\nprint(is_octagonal(126))\nprint(is_octagonal(127))\nprint(is_octagonal(128))\nprint(is_octagonal(129))\nprint(is_octagonal(130))\nprint(is_octagonal(131))\nprint(is_octagonal(132))\nprint(is_octagonal(133))\nprint(is_octagonal(134))\nprint(is_octagonal(135))\nprint(is_octagonal(136))\nprint(is_octagonal(137))\nprint(is_octagonal(138))\nprint(is_octagonal(139))\nprint(is_octagonal(140))\nprint(is_octagonal(141))\nprint(is_octagonal(142))\nprint(is_octagonal(143))\nprint(is_octagonal(144))\nprint(is_octagonal(145))\nprint(is_octagonal(146))\nprint(is_octagonal(147))\nprint(is_octagonal(148))\nprint(is_octagonal(149))\nprint(is_octagonal(150))\nprint(is_octagonal(151))\nprint(is_octagonal(152))\nprint(is_octagonal(153))\nprint(is_octagonal(154))\nprint(is_octagonal(155))\nprint(is_octagonal(156))\nprint(is_octagonal(157))\nprint(is_octagonal(158))\nprint(is_octagonal(159))\nprint(is_octagonal(160))\nprint(is_octagonal(161))\nprint(is_octagonal(162))\nprint(is_octagonal(163))\nprint(is_octagonal(164))\nprint(is_octagonal(165))\nprint(is_octagonal(166))\nprint(is_octagonal(167))\nprint(is_octagonal(168))\nprint(is_octagonal(169))\nprint(is_octagonal(170))\nprint(is_octagonal(171))\nprint(is_octagonal(172))\nprint(is_octagonal(173))\nprint(is_octagonal(174))\nprint(is_octagonal(175))\nprint(is_octagonal(176))\nprint(is_octagonal(177))\nprint(is_octagonal(178))\nprint(is_octagonal(179))\nprint(is_octagonal(180))\nprint(is_octagonal(181))\nprint(is_octagonal(182))\nprint(is_octagonal(183))\nprint(is_octagonal(184))\nprint(is_octagonal(185))\nprint(is_octagonal(186))\nprint(is_octagonal(187))\nprint(is_octagonal(188))\nprint(is_octagonal(189))\nprint(is_octagonal(190))\nprint(is_octagonal(191))\nprint(is_octagonal(192))\nprint(is_octagonal(193))\nprint(is_octagonal(194))\nprint(is_octagonal(195))\nprint(is_octagonal(196))\nprint(is_octagonal(197))\nprint(is_octagonal(198))\nprint(is_octagonal(199))\nprint(is_octagonal(20"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\nassert is_octagonal(4) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 10\nassert     is_octagonal(3) == 18\nassert     is_octagonal(4) == 26\nassert     is_octagonal(5) == 41\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_octagonal_list(n):\n    '''\n    Write a function to get the first n octagonal numbers.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    octagonal(10) == 401\n    octagonal(100) == 2358\n    octagonal(10) == 1655\n    octagonal(10000) == 354225\n    octagonal(1000) == 235837\n    octagonal(101) == 165523\n    octagonal(1000) == 35422517\n    octagonal(100) == 23583717\n    octagonal(100) == 23583717\n    octagonal(10) == 16552317\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings(\"234\") == 3\nassert     count_Substrings(\"1234\") == 4\nassert     count_Substrings(\"2345678\") == 15\nassert     count_Substrings(\"A\") == 1\nassert     count_Substrings(\"B\") == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"abcabc\") == 3\nassert     count_Substrings(\"abcabcab\") == 2\nassert     count_Substrings(\"bababa\") == 7\nassert     count_Substrings(\"bababac\") == 5\nassert     count_Substrings(\"bababacab\") == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings('a') == 1\nassert     count_Substrings('ab') == 2\nassert     count_Substrings('aa') == 3\nassert     count_Substrings('aba') == 4\nassert     count_Substrings('ac') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings('1234567') == 4\nassert count_Substrings('12345678') == 4\nassert count_Substrings('123456789') == 6\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings('12') == 1\nassert     count_Substrings('1212') == 4\nassert     count_Substrings('121212') == 6\nassert     count_Substrings('1231212') == 3\nassert     count_Substrings('123121212') == 5\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings('abc') == 3\nassert     count_Substrings('adc') == 0\nassert     count_Substrings('abcabc') == 4\nassert     count_Substrings('abcabcabc') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"abcdefghijklmnopqrstuvwxyz\") == 20\nassert     count_Substrings(\"abcdefghijklmnopqrstuvwxyz123\") == 24\nassert     count_Substrings(\"hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings('002345') == 2\nassert     count_Substrings('030723') == 1\nassert     count_Substrings('2345654321') == 1\nassert     count_Substrings('234567890') == 10\nassert     count_Substrings('099000') == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_Substrings(\"abcdef\") == 5\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings(\"12345\") == 1\nassert count_Substrings(\"123456789\") == 3\nassert count_Substrings(\"12346789\") == 1\nassert count_Substrings(\"123456789a\") == 0\nassert count_Substrings(\"12346789a\") == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([1, 2, 3, 4]) == 1, 'your first function does not work'\nassert     smallest_num([3, 1, 5, 4]) == 1, 'your first function does not work'\nassert     smallest_num([1, 2, 5, 4]) == 1, 'your first function does not work'\nassert     smallest_num([2, 1, 5, 4]) == 1, 'your first function does not work'\n\n'''\n            For second task, you need to write a python function to find the sum of the numbers in a list.\n            Input: list of numbers\n            Output: sum of the numbers\n            Input: [-1, -2, -3, -4, -5]\n            Output: -1+-2+-3+-4+-5 = -15\n'''\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsmallest_num([1,2,5,6,7,8,9,10,11,12,13,14,15,16,18,19]) == 1\nassert \nsmallest_num([0,2,3,5,7,8,9]) == 0\nassert \nsmallest_num([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5, 6, 7, 8]) == 1\nassert     smallest_num([1, 1, 1, 1, 1, 1, 1]) == 1\n\ndef smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_num([5, 7, 4, 12, 3, 10, 11, 2, 13]) == 3\nassert    smallest_num([2, 3, 2, 4, 5, 6, 1, 2]) == 1\nassert    smallest_num([1, 1, 1, 1, 1, 1, 1]) == 1\nassert    smallest_num([10, 11, 12, 13, 14, 15, 16, 17, 18]) == 17\nassert    smallest_num([2, 9, 9, 3, 9, 9, 9, 9, 9]) == 3\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    smallest_num([1, 2, 3, 4, 5]) == 1\n    smallest_num([2, 3, 4, 5]) == 2\n    smallest_num([7, 8, 9, 10, 11]) == 7\n    smallest_num([1]) == 1\n    smallest_num([-1, -2, -3, -4]) == -4\n    smallest_num([-5, -2, -3, -4, -1]) == -1\n    smallest_num([]) == None\n\nprint(\"Smallest number test passed!\")\n\n\ndef largest_num(xs):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([2, 3, 4, 1]) == 1, \"Wrong output\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_num([1, 2, 3, 4]) == 1, '1'\nassert     smallest_num([1, 3, 5, 7]) == 1, '1'\nassert     smallest_num([1, 2, 3, 5]) == 1, '1'\nassert     smallest_num([4, 3, 2, 1]) == 1, '1'\nassert     smallest_num([1, 3, 4, 5]) == 1, '1'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 1\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 5\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 1\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 4\n    assert \n        smallest_num([4, 5, 3, 1, 2, 5, 4, 4]) == 1\n    "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([1,4,2,5,7]) == 1, 'wrong'\nassert     smallest_num([3,1,2,4,5,7]) == 1, 'wrong'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert smallest_num([1,2,3,4,5,6]) == 5\nassert smallest_num([10,20,30,40,50,60]) == 50\nassert smallest_num([20,30,40,50,60,70]) == 60\nassert smallest_num([30,40,50,60,70,80]) == 70\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_difference([]) == 0\nassert max_difference([1,2,3]) == 1\nassert max_difference([5,6,1,3,2,4]) == 4"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference(tuple((0, 5, 15, -20))) == 15\nassert     max_difference(tuple((-5, -15, 20, 0))) == 15\nassert     max_difference(tuple((15, -5, -10, 20))) == 15\nassert     max_difference(tuple((-5, 20, 15, -10))) == 15\nassert     max_difference(tuple((20, -5, 15, -10))) == 15\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference([(1,1),(2,2),(3,5),(4,4)]) == 1, 'Test case 1 failed'\nassert max_difference([(0,0),(1,1),(2,2),(3,5),(4,4)]) == 3, 'Test case 2 failed'\nassert max_difference([(0,0),(0,0),(0,0),(0,0),(0,0)]) == 0, 'Test case 3 failed'\nassert max_difference([(0,0),(0,0),(0,0),(0,0),(0,0)]) == 0, 'Test case 4 failed'\nassert max_difference([]) == None, 'Test case 5 failed'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference([(1,4),(3,2),(5,6)]) == -1, \"Wrong\"\nassert     max_difference([(3,3),(2,2),(5,5)]) == 1, \"Wrong\"\nassert     max_difference([(1,2),(2,3),(3,4)]) == 2, \"Wrong\"\n\ndef max_difference2(test_list):\n    '''\n    Find the maximum difference between two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference(test_list) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\\nThe expected return value is 2. The returned value is {0}'.format(max_difference((2, 4, 6, 8, 1, 3, 5, -1, 7, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19))) )\nprint('The expected return value is 3. The returned value is {0}'.format(max_difference((-2, -3, -5, -7, -9, -11, -13, -15, -17, -19, -21, -23, -25, -27, -29, -31, -33, -35, -37, -39, -41, -43, -45, -47, -49, -51, -53, -55, -57, -59, -61, -63, -65, -67, -69, -71, -73, -75, -77, -79, -81, -83, -85, -87, -89, -91, -93, -95, -97, -99, -101, -103, -105, -107, -109, -111, -113, -115, -117, -119, -121, -123, -125, -127, -129, -131, -133, -135, -137, -139, -141, -143, -145, -147, -149, -151, -153, -155, -157, -159, -161, -163, -165, -167, -169, -171, -173, -175, -177, -179, -181, -183, -185, -187, -189, -191, -193, -195, -197, -199, -201, -203, -205, -207, -209, -211, -213, -215, -217, -219, -221, -223, -225, -227, -229, -231, -233, -235, -237, -239, -241, -243, -245, -247, -249, -251, -253, -255, -257, -259, -261, -263, -265, -267, -269, -271, -273, -275, -277, -279, -281, -283, -285, -287, -289, -291, -293, -295, -297, -299, -301, -303, -305, -307, -309, -311, -313, -315, -317, -319, -321, -323, -325, -327, -329, -331, -333, -335, -337, -339, -341, -343, -345, -347, -349, -351, -353, -355, -357, -359, -361, -363, -365, -367, -369, -371, -373, -375, -377, -379, -381, -383, -385, -387, -389, -391, -393, -395, -397, -399, -401, -403, -405, -407, -409, -411, -413, -415, -417, -419, -421, -423, -425, -427, -429, -431, -433, -435, -437, -439, -441, -443, -445, -447, -449, -451, -453, -455, -457, -459, -461, -463, -465, -467, -469, -471, -473, -475, -477, -479, -481, -483, -485, -487, -489, -491, -493, -495, -497, -499, -501, -503, -505, -507, -509, -511, -513, -515, -517, -519, -521, -523, -525, -527, -529, -531, -533, -535, -537, -539, -541, -543, -545, -547, -549, -551, -553, -555, -557, -559, -561, -563, -565, -567, -569, -571, -573, -575, -577, -579, -581, -583, -585, -587, -589, -591, -593, -595, -597, -599, -601, -603, -605, -607, -609, -611, -613, -615, -617, -619, -621, -623, -625, -627, -629, -631, -633, -635, -637, -639, -641, -643, -645, -647, -649, -651, -653, -655, -657, -659, -661, -663, -665, -667, -669, -671, -673, -675, -677, -679, -681, -683, -685, -687, -689, -691, -693, -695, -697, -699, -701, -703, -705, -707, -709, -711, -713, -715, -717, -719, -721, -723, -725, -727, -729, -731, -733, -735, -737, -739, -741, -743, -745, -747, -749, -751, -753, -755, -757, -759, -761, -763, -765, -767, -769, -771, -773, -775, -777, -779, -781, -783, -785, -787, -789, -791, -793, -795, -797, -799, -801, -803, -805, -807, -809, -811, -813, -815, -817, -819, -821, -823, -825, -827, -829, -831, -833, -835, -837, -839, -841, -843, -845, -847, -849, -851, -853, -855, -857, -859, -861, -863, -865, -867, -869, -871, -873, -874, -875, -877, -879, -881, -883, -885, -887, -889, -891, -893, -895, -897, -899, -901, -903, -905, -907, -909, -911, -913, -915, -917, -919, -921, -923, -925, -927, -929, -931, -933, -935, -937, -939, -941, -943, -945, -947, -949, -951, -953, -955, -957, -959, -961, -963, -965, -967, -969, -971, -973, -975, -977, -979, -981, -983, -985, -987, -988, -993, -995, -997, -999, -1001, -1003, -1005, -1007, -1009, -1011, -1013, -1015, -1017, -1019, -1021, -1023, -1025, -1027, -1029, -1031, -1033, -1035, -1037, -1039, -1041, -1043, -1045, -1047, -1049, -1051, -1053, -1055, -1057, -1059, -1061, -1063, -1065, -1067, -1069, -1071, -1073, -1075, -1077, -1079, -1081, -1083, -1085, -1087, -1089, -1091, -1093, -1095, -1097, -1099, -1103, -1105, -1107, -1109, -1113, -1115, -1117, -1119, -1121, -1123, -1125, -1127, -1129, -1131, -1133, -1135, -1137, -1139, -1141, -1143, -1145, -1147, -1149, -1151, -1153, "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference([(1,2), (2,3), (3,4), (5,6), (6,7)]) == 2\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7)]) == 2\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7), (7,8)]) == 3\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7), (7,8)]) == 3\nassert     max_difference([(1,2), (2,4), (3,5), (5,6), (6,7), (7,8)]) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([[1, 2, 3], [1, 3, 5], [2, 3, 1]]) == 2, \"error 1\"\nassert     max_difference([[3, 7], [1, 3], [2, 6]]) == 3, \"error 2\"\nassert     max_difference([[1, 3, 5], [3, 1, 1], [1, 6, 7]]) == 8, \"error 3\"\n\nprint(\"You've got it right!\""
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([-12, -11, -13, -5, -6, -7, -1, -2, -3]) == 5, 'Wrong max_difference'\nassert     max_difference([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0, 'Wrong max_difference'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference([(1, 2), (2, 3), (4, 5)]) == 2\nassert     max_difference([(1, 4), (2, 5), (4, 7)]) == 2\nassert     max_difference([(1, 5), (2, 4), (4, 3)]) == 2\nassert     max_difference([(1, 2), (2, 3), (3, 4)]) == 0\nassert     max_difference([(1, 2), (2, 3), (4, 5)]) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(8, 6), (4, 5), (2, 1), (10, 0)]) == \\\n        [(2, 1), (4, 5), (8, 6), (10, 0)]\n\nassert     subject_marks([(8, 5), (4, 3), (2, 1), (10, 0)]) == \\\n        [(4, 3), (2, 1), (8, 5), (10, 0)]\n\nassert     subject_marks([(8, 4), (4, 3), (2, 1), (10, 0)]) == \\\n        [(4, 3), (2, 1), (8, 4), (10, 0)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([(1,2),(2,4),(3,3),(4,4)]) == [(1,2),(2,4),(3,3),(4,4)]\nassert     subject_marks([(4,4),(3,3),(2,2),(1,1)]) == [(1,1),(2,2),(3,3),(4,4)]\nassert     subject_marks([(2,4),(1,2),(3,3),(4,4),(3,1),(2,2)]) == [(1,2),(2,4),(3,1),(2,2),(3,3),(4,4)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(1,2), (2,1), (1,3)]) == [(1,2), (2,1), (1,3)]\nassert     subject_marks([(1,3), (3,1), (1,2), (2,3)]) == [(1,3), (1,2), (3,1), (2,3)]\nassert     subject_marks([(2,3), (1,2), (1,3), (2,1)]) == [(2,3), (1,2), (1,3), (2,1)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    subject_marks([(1,30),(3,20),(5,70)]) == [(1, 30), (3, 20), (5, 70)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10)]) == [(1, 30), (3, 20), (5, 70), (2, 10)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (4, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,30)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 30)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,30),(5,10),(4,40),(3,40),(5,50),(4,50),(5,40)]) == [(1, 30), (3, 20), (5, 70), (2, 10), (3, 5), (4, 30), (5, 20), (4, 40), (3, 30), (5, 10), (4, 40), (3, 40), (5, 50), (4, 50), (5, 40)]\n    subject_marks([(1,30),(3,20),(5,70),(2,10),(4,30),(3,5),(5,20),(4,40),(3,3"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # data\n    subjectmarks = [\n        (10, 60),\n        (99, 95),\n        (30, 90),\n        (59, 70),\n        (100, 70),\n        (40, 60)\n    ]\n\n    # call the function\n    sorted_subjectmarks = subject_marks(subjectmarks)\n\n    # print the sorted list\n    print(sorted_subjectmarks)\n\n    pas"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([(10,40), (5,90), (4,80), (3,70), (5,50)]) == \\\n    [(3, 70), (5, 50), (4, 80), (5, 90), (10, 40)]\n\nprint('Exercise 2a - done\\n')\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         subject_marks(\n            [(12, 3), (4, 2), (2, 6), (5, 5), (1, 2), (12, 10), (1, 1), (8, 4)]) == \\\n        [(1, 1), (1, 2), (2, 6), (5, 5), (4, 2), (8, 4), (12, 10), (12, 3)]\n\n\ndef sort_marks(mark_list):\n    '''\n    Write a function to sort a list of tuples using the third value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('Chemistry', 60), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)], \\\n    \"Should be [('Chemistry', 60), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('Chemistry', 70), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)], \\\n    \"Should be [('Chemistry', 70), ('Biology', 60), ('Math', 80), ('Physics', 95), ('English', 90)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)], \\\n    \"Should be [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)], \\\n    \"Should be [('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]\"\nassert subject_marks([('English', 90), ('Math', 80), ('Physics', 95), ('Chemistry', 70), ('Biology', 60)]) == \\\n    [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)], \\\n    \"Should be [('English', 90), ('Chemistry', 70), ('Physics', 95), ('Biology', 60), ('Math', 80)]\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert subject_marks([(5, 1), (3, 1), (7, 4), (2, 2), (9, 3), (8, 3)]) == [(3, 1), (7, 4), (9, 3), (2, 2), (5, 1), (8, 3)], 'List is not sorted by second value of each tuple'\n\ndef test_subject_marks():\n    assert subject_marks([(5, 1), (3, 1), (7, 4), (2, 2), (9, 3), (8, 3)]) == [(3, 1), (7, 4), (9, 3), (2, 2), (5, 1), (8, 3)], 'List is not sorted by second value of each tuple'\n    assert subject_marks([(5, 1), (3, 2), (7, 4), (2, 2), (9, 3), (8, 3)]) == [(3, 2), (7, 4), (9, 3), (2, 2), (5, 1), (8, 3)], 'List is not sorted by second value of each tuple'\n    "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef recursive_list_sum_checked(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4]) == 10, \"Should return 10\"\nassert     recursive_list_sum([1, 2, 3, 4, 5]) == 15, \"Should return 15\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6]) == 21, \"Should return 21\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7]) == 28, \"Should return 28\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45, \"Should return 45\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         recursive_list_sum([[1,2,3], 4, 5]) == (1 + 2 + 3 + 4 + 5), \"Wrong answer\"\nassert         recursive_list_sum([[1,2], 3, 5]) == (1 + 2 + 3 + 5), \"Wrong answer\"\nassert         recursive_list_sum([[1,2], 3]) == (1 + 2 + 3), \"Wrong answer\"\nassert         recursive_list_sum([[1,2], 4]) == (1 + 2 + 4), \"Wrong answer\"\nassert         recursive_list_sum([]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([1,2,3])    == 6, \"Should be 6\"\nassert     recursive_list_sum([])            == 0, \"Should be 0\"\nassert     recursive_list_sum([1,2])        == 3, \"Should be 3\"\n\ndef recursive_list_sum_iterative(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef recursive_list_sum_2(data_list):\n    if len(data_list) == 0:\n        return 0\n    return data_list[0] + recursive_list_sum_2(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     recursive_list_sum([[1,2,3], [4], [5]]) == 15\nassert     recursive_list_sum([1,2,3,4]) == 9\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[], [1], [2], [3]]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndata_list = [1,2,3,4,5,6]\nrecursive_list_sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef recursive_list_sum_fast(data_list):\n    '''\n    Write a faster function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([[1, 2, 3], [2, 5, 6], [1, 5, 9]]) == [6, 15, 24]\nassert     recursive_list_sum([[1], [2, 5, 9], [2, 5]]) == [8, 14, 24]\nassert     recursive_list_sum([[1], [2, 5], [2, 5, 9]]) == [8, 14, 24]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([0,1,2,3]) == 4\nassert     pos_count([0,1,2,3,-5,6]) == 4\nassert     pos_count([-2,1,2,3,0]) == 5\nassert     pos_count([-2,1,2,3,-5,6,-7]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\npos_count([1,2,-6,-2,-3]) == 0\npos_count([-2,-4,0,6,-2,-4,-2]) == 4\npos_count([-2,0,6,2,-4,-2]) == 2\npos_count([1,2,3,-2,0]) == 5\npos_count([1,-2,3,0,-2,3,0]) == 6\npos_count([1,0,3,0,-2,3,0]) == 6\npos_count([-1,2,0,0,0,0,0]) == 4\npos_count([1,1,1]) == 3\npos_count([-1,1,1]) == 3\npos_count([]) == 0\npos_count([-1,-1,-1,-1]) == 0\npos_count([-1,-1,-1,0]) == 0\npos_count([-1,-1,0,0]) == 1\npos_count([-1,-1,0,-1]) == 1\npos_count([-1,-1,0,1]) == 2\npos_count([-1,-1,1,-1]) == 2\npos_count([-1,-1,1,1]) == 3\npos_count([-1,-1,1,1,0]) == 3\npos_count([-1,-1,1,1,1]) == 4\npos_count([-1,-1,1,1,1,1]) == 5\npos_count([-1,-1,1,1,1,1,1]) == 6\npos_count([-1,-1,1,1,1,1,1,1]) == 7\npos_count([-1,-1,1,1,1,1,1,1,1]) == 8\npos_count([-1,-1,1,1,1,1,1,1,1,1]) == 9\npos_count([-1,-1,1,1,1,1,1,1,1,1,1]) == 10\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1]) == 11\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1]) == 12\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1]) == 13\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 14\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 15\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 16\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 17\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 18\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 19\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 20\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 21\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 22\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 23\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 24\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 25\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 26\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 27\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 28\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 29\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 30\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 31\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 32\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 33\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 34\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 35\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 36\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 37\npos_count([-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 38\npos_count([-1,-1,1,1,1"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([]) == 0, 'Empty list is passed'\nassert     pos_count([1, 2, 3, 4, 5]) == 5, 'Normal list is passed'\nassert     pos_count([-1, 0, 3, 5]) == 2, 'Negative numbers are passed'\nassert     pos_count([-1, 2, 3, 4, 5, -1, 2, 4, 5]) == 8, 'Multiple numbers are passed'\n\n'''\nWrite a function to get the largest number in a list.\n'''\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([-1,2,3,-2]) == 1, \"Positive count\"\nassert     pos_count([0,1,2,3]) == 3, \"Positive count\"\nassert     pos_count([0,-1,2,3]) == 2, \"Positive count\"\nassert     pos_count([-1,0,-1,-2]) == 1, \"Positive count\"\nassert     pos_count([]) == 0, \"Positive count\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([]) == 0, 'empty'\nassert     pos_count([1,2,3]) == 3,'simple'\nassert     pos_count([-4, -1, 0, 1, 2, 3]) == 6, 'with negatives'\nassert     pos_count([-4, -1, 2, 2, 3]) == 3, 'no duplicates'\n\n\ndef same_pos_neg(lst):\n    '''\n    Write a python function to find if a list has all the same positive numbers and all the same negative numbers.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([1,2,3,4,5]) == 5\nassert     pos_count([-1,-2,-3,-4,-5]) == 4\nassert     pos_count([]) == 0\nassert     pos_count([0,1,2,3,4,5]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert pos_count([1,-2,-3,0,5])==4\nassert pos_count([1,2,3,4,5])==5\nassert pos_count([1,0,5])==2\nassert pos_count([1,2,0,5])==3\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([0, -1, 0, 0, 0]) == 1, 'Failed'\nassert     pos_count([-1, 0, 0, 0, 0]) == 4, 'Failed'\nassert     pos_count([-1, 0, 0, 0, -1]) == 3, 'Failed'\nassert     pos_count([-1, 0, 0, 0, 0, 0, 0]) == 2, 'Failed'\nassert     pos_count([-1, 0, 0, 0, 0, 0, 0, -1]) == 2, 'Failed'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     pos_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 10\nassert     pos_count([0,0,0,0,0]) == 0\nassert     pos_count([0,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == -10\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nbell_number(10) == 10\nbell_number(6) == 7\nbell_number(5) == 6\n\n\ndef divisible_by_seven(n):\n    '''\n    Write a function to find if a number is divisible by 7 or not.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(2)==2, 'bell_number(2) is wrong!'\nassert     bell_number(1)==1, 'bell_number(1) is wrong!'\nassert     bell_number(0)==1, 'bell_number(0) is wrong!'\nassert     bell_number(6)==7, 'bell_number(6) is wrong!'\nassert     bell_number(15)==24, 'bell_number(15) is wrong!'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef solve(arr,n):\n    '''\n    You are given a set of numbers. Return the size of set of all possible subsets\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 14\nassert     bell_number(5) == 42\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(6) == 13\nassert bell_number(7) == 21\nassert bell_number(8) == 28\nassert bell_number(9) == 33\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(5) == 5\nassert     bell_number(10) == 20\nassert     bell_number(40) == 860\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(0) == 0\nassert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 2\nassert     bell_number(4) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 7\nassert     bell_number(5) == 11\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([-1,-1,-1,-1]) == True, \"Wrong output\"\nassert     is_Monotonic([1,2,3,4]) == False, \"Wrong output\"\nassert     is_Monotonic([1,2,3,4,5]) == False, \"Wrong output\"\nassert     is_Monotonic([1,2,3,4,5,6]) == False, \"Wrong output\"\nassert     is_Monotonic([-1,-1,1,1,2]) == True, \"Wrong output\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_Monotonic([1, 2, 1])\nassert not is_Monotonic([3, 2, 1])\nassert not is_Monotonic([1, 2, 2, 3])\nassert is_Monotonic([1, 2, 1, 3, 1, 2, 1])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Monotonic([1,2,1,3,4]) == True, \"Not a Monotonic\"\nassert     is_Monotonic([1,1,1,1]) == True, \"Is a Monotonic\"\nassert     is_Monotonic([2,2,2,2]) == True, \"Is a Monotonic\"\nassert     is_Monotonic([2,1,2]) == False, \"Not a Monotonic\"\nassert     is_Monotonic([2,2,2,2,2]) == False, \"Is a Monotonic\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1,1,2]) == False, 'The given array should be Monotonic'\nassert is_Monotonic([1,1,1]) == True, 'The given array should be Monotonic'\nassert is_Monotonic([3,1,2]) == True, 'The given array should be Monotonic'\nassert is_Monotonic([3,3,2]) == True, 'The given array should be Monotonic'\nassert is_Monotonic([3,1,3]) == False, 'The given array should be Monotonic'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1,2,3,3,2,1]) == True\nassert     is_Monotonic([1,2,2,3,3,2,1]) == False\nassert     is_Monotonic([2,2,2,3,3,2,1]) == False\nassert     is_Monotonic([1,1,1,1,1,1,1]) == True\nassert     is_Monotonic([]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_Monotonic([1,2,1]) == False\nis_Monotonic([1,2,1,3,5]) == False\nis_Monotonic([1,2,3,3]) == False\nis_Monotonic([1,2,3,4]) == False\nis_Monotonic([1,2,3,3,3]) == True\nis_Monotonic([1,1,1,1,1]) == True\nis_Monotonic([1,1,1,1,1,1]) == True\nis_Monotonic([1,1,1,1,1,2]) == False"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic( [ 1, 2, 2, 3 ] ) == True\nassert     is_Monotonic( [ 1, 2, 3 ] ) == False\nassert     is_Monotonic( [-1, -2, -2 ] ) == True\nassert     is_Monotonic( [-1, -2, 1 ] ) == False\nassert     is_Monotonic( [-1, -2, -3 ] ) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([], []) == False, \"Test Case 1: Empty list\"\nassert     is_sublist([1], []) == False, \"Test Case 2: Empty sublist\"\nassert     is_sublist([1,2], []) == False, \"Test Case 3: Empty list\"\nassert     is_sublist([1,2], [1]) == True, \"Test Case 4: Equal Sublists\"\nassert     is_sublist([1,2], [2]) == True, \"Test Case 5: Equal Sublists\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [2,3]) == True\nassert     is_sublist([1,2,3], [1,2,4]) == False\nassert     is_sublist([1,2,3], [1,2,3,4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sublist([1,2], [1,2]) == True\nassert     is_sublist([1,2], [1,2,3]) == False\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [1,2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_sublist([1,2], 1)\nassert is_sublist([1,2,3], 1)\nassert is_sublist([1,2,3,4], 1)\nassert not is_sublist([1,2,3], 1)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_sublist(l, s):\n    '''\n    Write a function to return the first occurrence of the sublist in a given list.\n    '''\n    pass\n\nassert \n\ndef get_sublist(l, s):\n    '''\n    Write a function to return the first occurrence of the sublist in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint (\"You passed the is_sublist function test!\")\n\n\ndef longest_substring_with_k_distinct(str, k):\n    '''\n    Write a function that returns the length of the longest substring with k distinct characters in str.\n    '''\n    pass\n\n\nassert longest_substring_with_k_distinct('aaabb', 2) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_sublist([1,2,3,4,5,6], [1,2,3,4]) == True\nassert is_sublist([1,2,3,4,5,6], [1,2,3,5,6]) == False\nassert is_sublist([1,2,3,4], [1,2,3,4,5,6]) == True\nassert is_sublist([1,2,3,4], [1,2,4]) == False\nassert is_sublist([1,2,3,4], [1,2,3]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_sublist([1,2,3,4,5], [1,2,3,4]) == True\nassert is_sublist([1,2,3,4,5], [1,2,3,5]) == False\nassert is_sublist([1,2,3,4], [1,2,3,4]) == True\nassert is_sublist([1,2,3,4], [1,2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([1,2,3], []) == False\nassert     is_sublist([1,2,3],  [1,2]) == True\nassert     is_sublist([1,2,3],  [1,3]) == True\nassert     is_sublist([1,2,3],  [2,3]) == True\nassert     is_sublist([1,2,3],  [2,3,4]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple(() ) == True, 'Empty tuple'\nassert     find_equal_tuple( (3, 4, 2) ) == True, 'Tuple having 3'\nassert     find_equal_tuple( (3, 4, 2, 'a', 'b') ) == False, 'Tuple having 4'\nassert     find_equal_tuple( (3, 4, 2, 'a', 'b', 'c') ) == True, 'Tuple having 5'\nassert     find_equal_tuple( (3, 4, 2, 'a', 'b', 'c', 'd', 'e') ) == False, 'Tuple having 6'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1, 2), (1,), (1, 2, 3)]) is True, \"not correct\"\nassert     find_equal_tuple([(1,), (1, 2), (1, 2, 3)]) is True, \"not correct\"\nassert     find_equal_tuple([(1, 2), (1,), (1, 2, 3)]) is False, \"not correct\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple(tuple(range(10))) == False\nassert     find_equal_tuple(tuple(range(10))) == True\nassert     find_equal_tuple(tuple(range(10))) == True\nassert     find_equal_tuple(tuple(range(10))) == True\nassert     find_equal_tuple(tuple(range(10))) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True, '\\nExpected: True\\nActual: False'\nassert     find_equal_tuple([(1, 2), (3, 4), (5, )]) == False, '\\nExpected: False\\nActual: True'\nassert     find_equal_tuple([(1, 2), (2, ), (3, )]) == True, '\\nExpected: True\\nActual: False'\nassert     find_equal_tuple([(1, ), (2, ), (3, )]) == False, '\\nExpected: False\\nActual: True'\nassert     find_equal_tuple([(1, 2, 3), (2, 3), (3, )]) == False, '\\nExpected: False\\nActual: True'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd')]) == False\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]) == True\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'a')]) == True\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'a'), ('b', 'c')]) == False\nassert     find_equal_tuple([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'a'), ('b', 'b')]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == True\nassert     find_equal_tuple([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(1, 2), (1,), (1,2,3), (1,2)]) == True, 'Wrong'\nassert     find_equal_tuple([(1, 2), (1,), (1,2,3), (1,2,3)]) == False, 'Wrong'\nassert     find_equal_tuple([(1, 2, 3, 4), (1,2,3,4), (1,2,3), (1,2,3)]) == False, 'Wrong'\nassert     find_equal_tuple([(1, 2), (1,), (1,2,3), (1,2,3)]) == False, 'Wrong'\nassert     find_equal_tuple([(1, 2, 3), (1,2,3), (1,2,3), (1,2,3)]) == True, 'Wrong'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (2,), (1, 2, 3)]) == False, \"Wrong output\"\nassert     find_equal_tuple([(1, 2), (1, 2), (2,), (1, 2, 3)]) == True, \"Wrong output\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple(((1,2),(3,4,5),(6,))) ==     True\nassert     find_equal_tuple(((1,2),(3,4,5),(5,))) ==     True\nassert     find_equal_tuple(((1,2),(3,4,5),(5,3,4,1,))) ==     False\nassert     find_equal_tuple(((1,2),(3,4),(5,3,4,1,))) ==     True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple(Input = [(1,2),(2,3),(2,3),(2,3)]) == False, \"Should return False\"\nassert     find_equal_tuple(Input = [(1,2),(2,3),(2,3),(3,4)]) == False, \"Should return False\"\nassert     find_equal_tuple(Input = [(1,2),(2,3),(2,3),(3,4),(3,4),(5,6)]) == True, \"Should return True\"\n\nprint(\"\\nFind_Equal_Tuple Tests Passed\")\nprint(\"--------------------------------------\\n\")"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert(comb_sort([1,2,5,7,10,20,80,99,100])==[1,2,5,7,10,20,80,99,100])\nassert(comb_sort([100])==[100])\nassert(comb_sort([])==[])\nassert(comb_sort([3,2,3])==[3,2,3])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     comb_sort([2,4,6,8,3,1,9,7]) == [1,2,3,4,6,7,8,9], 'Comb sort is incorrect'\nassert     comb_sort([5,4,3,2,1]) == [1,2,3,4,5], 'Comb sort is incorrect'\nassert     comb_sort([7,5,9,4,6,3,2,1]) == [1,2,3,4,5,6,7,9], 'Comb sort is incorrect'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nclass Solution:\n    '''\n    Given an array A of integers and integer K, return the index of K\u2019th largest element in the array.\n    Note that it is the K\u2019th largest element in the sorted order, not the Kth distinct element.\n    '''\n    def findKthLargest(self, nums, k):\n        pass\n\n    # check the correctness of findKthLargest\n    assert \n\nif __name__ == '__main__':\n    nums = [3, 2, 1, 5, 6, 4]\n    k = 2\n    print(Solution().findKthLargest(nums, k)"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([1, 3]) == [1, 3]\nassert     comb_sort([3, 1]) == [1, 3]\nassert     comb_sort([1, 3, 5]) == [1, 3, 5]\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dif_Square(13) == True, 'False'\nassert     dif_Square(125) == True, 'False'\nassert     dif_Square(10) == False, 'True'\nassert     dif_Square(1) == False, 'True'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(3) == True\nassert     dif_Square(6) == False\nassert     dif_Square(10) == True\n\ndef dif_Square_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    The input will be a positive integer\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not dif_Square(1)\nassert dif_Square(2)\nassert dif_Square(3)\nassert dif_Square(4)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dif_Square(36) == True, \" 36 should be a perfect square\"\nassert     dif_Square(16) == False, \" 16 should not be a perfect square\"\n\ndef find_Even_Odd(num): \n    '''\n    Write a python function to find the sum of even and odd numbers from a given number.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(0) == True, \"0 is a perfect square.\" \nassert     dif_Square(3) == True, \"3 is a perfect square.\" \nassert     dif_Square(12) == False, \"12 is not a perfect square.\" \nassert     dif_Square(28) == True, \"28 is a perfect square.\" \nassert     dif_Square(29) == False, \"29 is not a perfect square.\" \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(0) == True, 'The number 0 can be represented as the difference of squares as 0'\nassert     dif_Square(1) == False, 'The number 1 can be represented as the difference of squares as 1'\nassert     dif_Square(2) == True, 'The number 2 can be represented as the difference of squares as 2'\nassert     dif_Square(3) == False, 'The number 3 can be represented as the difference of squares as 5'\nassert     dif_Square(4) == False, 'The number 4 can be represented as the difference of squares as 4'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([], [])     == True\nassert     is_samepatterns(['red','blue','green','red','blue','blue','blue','green','green'], ['red','blue','green'])     == True\nassert     is_samepatterns(['red','green','red','green','red'], ['red','green','red','green','red'])     == True\nassert     is_samepatterns(['red','red','green','blue','green','blue','red','blue','red','red','blue','red','blue'], ['red','green','red','blue','green','blue'])     == True\nassert     is_samepatterns(['red','red','green','blue','green','blue','red','blue','red','red','blue','red','blue'], ['red','green','red','blue','green','blue'])     == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == True, \"is_samepatterns should be True\"\nassert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == False, \"is_samepatterns should be False\"\nassert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == False, \"is_samepatterns should be False\"\nassert     is_samepatterns([0, 1, 2], [[1, 2, 3],\n                                        [2, 3, 1],\n                                        [3, 1, 2]]) == True, \"is_samepatterns should be True\"\n\ndef is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_samepatterns(colors, patterns) == True\n\nprint('YOUR ANSWER:', is_samepatterns(colors, patterns))\nprint('Expected: True')\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns([],    [])    == True\nassert     is_samepatterns([],    [\"aba\"])    == False\nassert     is_samepatterns([\"baa\"],    [\"aba\"])    == False\nassert     is_samepatterns([\"abab\", \"aba\"],    [\"aba\", \"baa\"])    == True\nassert     is_samepatterns([\"aba\", \"abab\"],    [\"aba\", \"baa\"])    == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([], patterns) == True, \"is_samepatterns([], patterns) == True\"\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], patterns) == True, \"is_samepatterns(['red', 'blue', 'green'], patterns) == True\"\nassert     is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"black\", \"white\"], patterns) == False, \"is_samepatterns(['red', 'blue', 'green', 'yellow', 'black', 'white'], patterns) == False\"\nassert     is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\", \"black\", \"white\"], [\"green\", \"black\", \"red\", \"blue\", \"white\"]) == False, \"is_samepatterns(['red', 'blue', 'green', 'yellow', 'black', 'white'], ['green', 'black','red', 'blue', 'white']) == False\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 10) == [(10, 20, 30), (40, 50, 60)]\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 20) == []\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 50) == [(40, 50, 60)]\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 60) == [(40, 50, 60), (70, 80, 90)]\nassert     find_tuples([(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)], 70) == [(40, 50, 60), (70, 80, 90)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nfind_tuples([(1,2),(3,4),(5,6)],3) == [(1,2)]\nfind_tuples([(1,2,3),(3,4,5)],3) == [(1,2,3)]\n\nfind_tuples([(1,2),(3,4,5)],1) == [(1,),(3,),(5,)]\nfind_tuples([(1,2,3),(3,4,5)],2) == []\nfind_tuples([(1,2,3),(3,4,5)],3) == []\nfind_tuples([(1,2,3),(3,4,5)],5) == []\n\nfind_tuples([(1,2,3,4,5)],1) == [(1,),(3,),(5,)]\nfind_tuples([(1,2,3,4,5)],2) == [(1,2),(3,4),(5,)]\nfind_tuples([(1,2,3,4,5)],3) == []\nfind_tuples([(1,2,3,4,5)],5) == []\n\nfind_tuples([(1,2,3,4,5)],4) == [(1,2,3,4),(1,2,4,5),(1,3,4,5)]\nfind_tuples([(1,2,3,4,5)],3) == []\nfind_tuples([(1,2,3,4,5)],6) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(3,2,1),(2,2,1)], 2) ==    [[3,2,1], [2,2,1]]\nassert     find_tuples([(1,2,3,4),(2,2,3,4)], 2) ==    [[1,2,3,4], [2,2,3,4]]\nassert     find_tuples([(3,2,1),(2,2,1),(2,2,2),(2,2,3)], 2) ==    [[2,2,1], [2,2,2], [2,2,3]]\nassert not     find_tuples([(3,2,1),(2,2,1)], 3) ==    [[3,2,1]]\nassert not     find_tuples([(3,2,1),(2,2,1)], 2) ==    [[3,2,1], [2,2,1]]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 2) == [(1,2,4),(3,4,5)]\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 3) == [(1,2,3),(1,3,4),(2,3,4),(2,4,5),(3,4,5),(4,5,6)]\n\n'''\nOutput:\n\n(1, 2, 4)\n(2, 4, 5)\n(3, 4, 5)\n(4, 5, 6)\n(5, 6, 2)\n(6, 2, 3)\n(5, 6, 3)\n(6, 3, 4)\n(5, 6, 4)\n(6, 4, 5)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, 6, 5)\n(6, 5, 4)\n(5, "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 2) == []\nassert     find_tuples([(1, 2, 3, 4, 5, 6)], 4) == [(1, 2, 3, 4)]\nassert     find_tuples([(1, 2, 3, 4, 5, 6)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(5, 6, 4), (3, 2, 1), (4, 6, 3)], 3) == [(5, 6, 3)]\nassert find_tuples([(5, 6, 4), (3, 2, 1), (4, 6, 3)], 2) == []\nassert find_tuples([(5, 6, 4), (3, 2, 1), (4, 6, 3)], 1) == [(3, 2, 1)]"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(3,4),(6,8)], 3) == [('3', '4')]\nassert find_tuples([(3,4),(6,8),(9,10),(20,30)], 5) == \n[('6', '8'), ('9', '10'), ('20', '30')]\nassert find_tuples([(0,1),(2,3)], 1) == []\nassert find_tuples([(3,4),(6,8)], 3) == []\nassert find_tuples([(6,8)], 3) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3)], K = 4) == [(1, 1, 1), (2, 2, 2)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6)], K = 5) == [(1, 2, 3), (4, 5, 6)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], K = 2) == []\nassert     find_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3)], K = 8) == []\nassert     find_tuples([(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)], K = 2) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 10) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 1) == [(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 5) == [(1, 2, 3, 5)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 4) == []\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 3) == [(3, 4, 5, 6)]\nfind_tuples([(1, 2, 3, 5), (3, 4, 5, 6), (7, 8, 9, 10)], 2) == ["
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(1) == False\nassert     is_Diff(11) == True\nassert     is_Diff(22) == False\nassert     is_Diff(111) == True\nassert     is_Diff(1111) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Diff(21) == True, \"21 is divisible by 11\"\nassert     is_Diff(10) == False, \"10 is not divisible by 11\"\nassert     is_Diff(6) == False, \"6 is not divisible by 11\"\nassert     is_Diff(11) == True, \"11 is divisible by 11\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(15) == True, \"Value is not 15\"\nassert     is_Diff(25) == False, \"Value is not 25\"\nassert     is_Diff(20) == False, \"Value is not 20\"\nassert     is_Diff(17) == True, \"Value is not 17\"\nassert     is_Diff(19) == True, \"Value is not 19\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(22) == True, \"Error found in the return of is_Diff.\"\nassert     is_Diff(1) == False, \"Error found in the return of is_Diff.\"\nassert     is_Diff(10) == True, \"Error found in the return of is_Diff.\"\nassert     is_Diff(20) == False, \"Error found in the return of is_Diff.\"\nassert     is_Diff(40) == True, \"Error found in the return of is_Diff.\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Diff(4) == False, \"is_Diff should return False\"\nassert     is_Diff(10) == True, \"is_Diff should return True\"\nassert     is_Diff(2) == True, \"is_Diff should return True\"\nassert     is_Diff(9) == True, \"is_Diff should return True\"\nassert     is_Diff(11) == True, \"is_Diff should return True\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Divisible(num, divisor):\n    '''\n    Write a python function to check whether a number is divisible by any number between 2 and 20.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     word_len('') == False\nassert     word_len('a') == True\nassert     word_len('aaaaa') == False\nassert     word_len('a') == True\nassert     word_len('123') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len('') == False\nassert word_len('Hello') == True\nassert word_len('python') == True\nassert word_len('python') == True\nassert word_len('Python') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len('') == False\nassert     word_len('cacaca') == True\nassert     word_len('Hello') == False\nassert     word_len('llama') == True\nassert     word_len('a') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef word_odd_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    # check if the function works or not\n    assert word_len(\"short\") == True\n    assert word_len(\"abcd\") == False\n    assert word_len(\"shorts\") == False\n    "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     word_len(\"hello\") == False, \"The length of word 'hello' is odd.\"\nassert     word_len(\"world\") == True, \"The length of word 'world' is odd.\"\nassert word_len(\"\") == False, \"The length of word '' is odd.\"\nassert word_len(\"a\") == True, \"The length of word 'a' is odd.\"\n\nprint(\"We are checking the correctness of word_len()\")\nprint(\"All the tests passed.\")\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(tetrahedral_number(1))\nprint(tetrahedral_number(2))\nprint(tetrahedral_number(3))\nprint(tetrahedral_number(4))\nprint(tetrahedral_number(5))\nprint(tetrahedral_number(6))\nprint(tetrahedral_number(7))\nprint(tetrahedral_number(8))\nprint(tetrahedral_number(9))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 8\nassert     tetrahedral_number(5) == 12\nassert     tetrahedral_number(6) == 20\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(0) == 1\nassert    tetrahedral_number(1) == 2\nassert    tetrahedral_number(2) == 6\nassert    tetrahedral_number(3) == 15\nassert    tetrahedral_number(4) == 32\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef tetrahedral_number(n): \n    '''\n    Find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 8\nassert     tetrahedral_number(3) == 24\nassert     tetrahedral_number(4) == 64\nassert     tetrahedral_number(5) == 216\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 1, \"Wrong result, should be 1\"\nassert     tetrahedral_number(2) == 4, \"Wrong result, should be 4\"\nassert     tetrahedral_number(3) == 12, \"Wrong result, should be 12\"\nassert     tetrahedral_number(4) == 20, \"Wrong result, should be 20\"\nassert     tetrahedral_number(5) == 22, \"Wrong result, should be 22\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(1) == math.pi*4/3, \"volume_sphere(1) = pi/3\"\nassert     volume_sphere(2) == 4*math.pi*(4/3), \"volume_sphere(2) = 4*pi*(4/3)\"\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(1) ==    4.188407934570139\nassert     volume_sphere(2) ==    66.2113888888889\nassert     volume_sphere(3) ==    148.8126984126984\nassert     volume_sphere(4) ==    3141.60228515625\nassert     volume_sphere(5) ==    3556.510204081633\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef volume_sphere(r):\n    if not r >= 0:\n        raise ValueError(\"Argument must be positive.\")\n    return 4./3. * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(1) == math.pi, \"incorrect\"\nassert     volume_sphere(2) == math.pi * 4, \"incorrect\"\nassert     volume_sphere(3) == math.pi * 8, \"incorrect\"\nassert     volume_sphere(4) == math.pi * 16, \"incorrect\"\nassert     volume_sphere(5) == math.pi * 32, \"incorrect\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nA sphere is an object with a radius. Given a positive integer, r, find and print the volume of a sphere with radius r.\n'''\ndef volume_sphere(r):\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nvolume_sphere(3) == math.pi * 3 ** 2\nassert volume_sphere(3.5) == math.pi * (3.5 ** 2)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert volume_sphere(1) == math.pi * 4 / 3\nassert volume_sphere(2) == math.pi * 4 / 3 * 1.8 ** 3\nassert volume_sphere(3) == math.pi * 4 / 3 * 1.8 ** 3 * 1.6 ** 3\nassert volume_sphere(4) == math.pi * 4 / 3 * 1.8 ** 3 * 1.6 ** 3 * 1.4 ** 3\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char(\"\") == 0, \"Test Case 1 Failed!\"\nassert     get_Char(\"a\") == 65, \"Test Case 2 Failed!\"\nassert     get_Char(\"abc\") == 98, \"Test Case 3 Failed!\"\nassert     get_Char(\"xyz\") == 121, \"Test Case 4 Failed!\"\nassert     get_Char(\"ABC\") == 65, \"Test Case 5 Failed!\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"\") == 0\nassert     get_Char(\"ABC\") == 4\nassert     get_Char(\"ABCD\") == 5\nassert     get_Char(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\") == 7\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char('a') == 104 \nassert get_Char('ab') == 11 \nassert get_Char('abc') == 12 \nassert get_Char('abcd') == 19\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(\"Hi\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"Hi\"))\nassert     get_Char(\"Hii\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"Hii\"))\nassert     get_Char(\"I am\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"I am\"))\nassert     get_Char(\"I\") == 0, \"Expected 0, Actual = \" + str(get_Char(\"I\"))\nassert     get_Char(\"Hello\") == 1, \"Expected 1, Actual = \" + str(get_Char(\"Hello\"))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char(\"Hello\") == 5, \"get_Char function gives incorrect result\"\nassert get_Char(\"Bonjour\") == 55, \"get_Char function gives incorrect result\"\nassert get_Char(\"abcd\") == 0, \"get_Char function gives incorrect result\"\nassert get_Char(\"monday\") == 0, \"get_Char function gives incorrect result\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char('Nishanth')==57\nassert     get_Char('Aishwarya')==125\nassert     get_Char('Nishanth')==124\nassert     get_Char('Nishanth')==103\nassert     get_Char('P')==65\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(strr = \"A\") == 97\nassert     get_Char(strr = \"B\") == 98\nassert     get_Char(strr = \"C\") == 99\nassert     get_Char(strr = \"D\") == 100\nassert     get_Char(strr = \"E\") == 101\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char('abc')=='',    \\\n            'get_Char returned an empty string.'\nassert     get_Char('ae')=='','get_Char returned an empty string.'\nassert get_Char('ye')=='e','get_Char returned an empty string.'\nassert get_Char('th')=='h','get_Char returned an empty string.'\nassert get_Char('A')=='a','get_Char returned an empty string.'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequence(0) == 1\nassert     sequence(1) == 2\nassert     sequence(5) == 13\nassert     sequence(10) == 22\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequence(0) == 1, 'First is 1'\nassert     sequence(1) == 2, 'Second is 2'\nassert     sequence(2) == 4, 'Third is 4'\nassert     sequence(3) == 6, 'Fourth is 6'\nassert     sequence(4) == 8, 'Fifth is 8'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sequence(0) == 0\nassert sequence(1) == 1\nassert sequence(3) == 3\nassert sequence(4) == 4\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef sequence_1(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 4\nassert     sequence(5) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef circumference_sphere(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsurfacearea_sphere(1) == 14.57033553218\nassert \nsurfacearea_sphere(2) == 56.0\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(1) == 57.2958, \\\n        \"1. Your surface area is incorrect\"\nassert     surfacearea_sphere(2) == 78.5398, \\\n        \"2. Your surface area is incorrect\"\nassert     surfacearea_sphere(4) == 94.4761, \\\n        \"3. Your surface area is incorrect\"\nassert     surfacearea_sphere(6) == 106.8398, \\\n        \"4. Your surface area is incorrect\"\nassert     surfacearea_sphere(8) == 124.4761, \\\n        \"5. Your surface area is incorrect\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1) == 4*math.pi, 'incorrect'\nassert     surfacearea_sphere(2) == 12*math.pi, 'incorrect'\nassert     surfacearea_sphere(3) == 24*math.pi, 'incorrect'\nassert     surfacearea_sphere(4) == 32*math.pi, 'incorrect'\n\nprint('All test cases have been passed!')\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(0.7) == 4*math.pi*math.pow(0.7, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(1) == 4*math.pi*math.pow(1, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(2) == 4*math.pi*math.pow(2, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(3) == 4*math.pi*math.pow(3, 2), \"incorrect surfacearea_sphere\"\nassert surfacearea_sphere(4) == 4*math.pi*math.pow(4, 2), \"incorrect surfacearea_sphere\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * 1 ** 2, \"1 is not a perfect sphere\"\nassert surfacearea_sphere(2) == 4 * math.pi * 2 ** 2, \"2 is not a perfect sphere\"\nassert surfacearea_sphere(3) == 4 * math.pi * 3 ** 2, \"3 is not a perfect sphere\"\nassert surfacearea_sphere(4) == 4 * math.pi * 4 ** 2, \"4 is not a perfect sphere\"\nassert surfacearea_sphere(5) == 4 * math.pi * 5 ** 2, \"5 is not a perfect sphere\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nsurfacearea_sphere(1) == 4 * math.pi * r ** 2\nsurfacearea_sphere(3) == 12 * math.pi * r ** 2\nsurfacearea_sphere(4) == 20 * math.pi * r ** 2\n\nprint('pass')\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * 1 ** 2, 'incorrect result'\nassert     surfacearea_sphere(2) == 4 * math.pi * 2 ** 2, 'incorrect result'\nassert     surfacearea_sphere(3) == 4 * math.pi * 3 ** 2, 'incorrect result'\nassert     surfacearea_sphere(4) == 4 * math.pi * 4 ** 2, 'incorrect result'\nassert     surfacearea_sphere(5) == 4 * math.pi * 5 ** 2, 'incorrect result'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(1) == 0\nassert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == -1\nassert     centered_hexagonal_number(4) == 0\nassert     centered_hexagonal_number(5) == 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(6) == 27\nassert     centered_hexagonal_number(8) == 377\nassert     centered_hexagonal_number(10) == 155\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 5\nassert     centered_hexagonal_number(4) == 7\nassert     centered_hexagonal_number(5) == 9\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(3) == 9\nassert     centered_hexagonal_number(4) == 14\nassert     centered_hexagonal_number(6) == 24\nassert     centered_hexagonal_number(8) == 56\nassert     centered_hexagonal_number(10) == 108\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(2) == 12 \nassert     centered_hexagonal_number(3) == 14 \nassert     centered_hexagonal_number(4) == 16 \nassert     centered_hexagonal_number(5) == 22 \nassert     centered_hexagonal_number(6) == 28 \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(6) == 7\nassert     centered_hexagonal_number(8) == 9\nassert     centered_hexagonal_number(10) == 21\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert    centered_hexagonal_number(3) == 8\nassert    centered_hexagonal_number(5) == 27\nassert    centered_hexagonal_number(7) == 145\nassert    centered_hexagonal_number(9) == 258\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = n**(1/2)\n    return a\n\nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 3\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({\"1\":\"a\",\"2\":\"b\",\"3\":\"c\"}, {\"1\":\"a\",\"3\":\"d\",\"4\":\"e\"}, {\"1\":\"a\",\"2\":\"b\",\"5\":\"f\",\"6\":\"g\"}) == {\"1\":\"a\",\"2\":\"b\",\"3\":\"c\",\"4\":\"e\",\"5\":\"f\",\"6\":\"g\"}\nassert     merge_dictionaries_three({\"1\":\"a\",\"2\":\"b\",\"3\":\"c\"}, {\"1\":\"a\",\"3\":\"d\",\"4\":\"e\"}, {\"1\":\"a\",\"2\":\"b\",\"5\":\"f\",\"6\":\"g\",\"7\":\"h\"}) == {\"1\":\"a\",\"2\":\"b\",\"3\":\"c\",\"4\":\"e\",\"5\":\"f\",\"6\":\"g\",\"7\":\"h\"}\nassert     merge_dictionaries_three({\"1\":\"a\",\"2\":\"b\",\"3\":\"c\"}, {\"1\":\"a\",\"3\":\"d\",\"4\":\"e\"}, {\"1\":\"a\",\"2\":\"b\",\"5\":\"f\",\"6\":\"g\"}) == {\"1\":\"a\",\"2\":\"b\",\"3\":\"c\",\"4\":\"e\",\"5\":\"f\",\"6\":\"g\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({\"a\":1,\"b\":2}, {\"x\":3,\"y\":4}, {\"z\":5,\"w\":6}) == {\"a\":1,\"b\":2,\"x\":3,\"y\":4,\"z\":5,\"w\":6}\nassert    merge_dictionaries_three({\"a\":1}, {\"x\":3,\"y\":4}, {\"z\":5,\"w\":6}) == {\"a\":1,\"x\":3,\"y\":4,\"z\":5,\"w\":6}\nassert    merge_dictionaries_three({\"a\":1}, {\"x\":3,\"y\":4}, {}) == {\"a\":1,\"x\":3,\"y\":4}\nassert    merge_dictionaries_three({}, {\"x\":3,\"y\":4}, {\"z\":5,\"w\":6}) == {\"x\":3,\"y\":4,\"z\":5,\"w\":6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({1:10, 2:20}, {1:11, 3:30}, {1:12, 4:40}) == {1:12, 2:20, 3:30, 4:40}\nassert     merge_dictionaries_three({}, {}, {}) == {}\nassert     merge_dictionaries_three({1:10}, {1:11}, {1:12}) == {1:12}\nassert     merge_dictionaries_three({1:10, 2:20}, {1:11, 3:30}, {1:12, 4:40}) == {1:12, 2:20, 3:30, 4:40}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({1: \"a\", 2: \"b\", 3: \"c\"}, {4: \"d\"}, {5: \"e\", 6: \"f\"}) == {1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\", 6: \"f\"}\nassert merge_dictionaries_three({1: \"a\", 2: \"b\"}, {4: \"d\", 5: \"e\"}, {3: \"c\", 6: \"f\"}) == {1: \"a\", 2: \"b\", 4: \"d\", 5: \"e\", 3: \"c\", 6: \"f\"}\nassert merge_dictionaries_three({1: \"a\"}, {4: \"d\"}, {5: \"e\"}) == {1: \"a\", 4: \"d\", 5: \"e\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3}, {\"w\": 1, \"x\": 2, \"y\": 3, \"z\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 1, \"y\": 2, \"z\": 3, \"w\": 1, \"x\": 2, \"y\": 3, \"z\": 4}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3}, {\"x\": 2, \"y\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 3}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3}, {\"x\": 2, \"y\": 3, \"z\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 4}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3, \"w\": 4}, {\"x\": 2, \"y\": 3, \"z\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 4, \"w\": 4}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, {\"x\": 1, \"y\": 2, \"z\": 3, \"w\": 4}, {\"x\": 2, \"y\": 3, \"z\": 4, \"w\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"x\": 2, \"y\": 3, \"z\": 4, \"w\": 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({\"key1\": 1}, {\"key2\": 2}, {\"key3\": 3}) == {'key1': 1, 'key2': 2, 'key3': 3}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3}'\"\nassert     merge_dictionaries_three({\"key1\": 1, \"key3\": 3}, {\"key2\": 2}, {\"key3\": 4}) == {'key1': 1, 'key2': 2, 'key3': 3}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3}'\"\nassert     merge_dictionaries_three({\"key1\": 1}, {\"key2\": 2}, {\"key3\": 3, \"key4\": 4}) == {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}'\"\nassert     merge_dictionaries_three({\"key1\": 1, \"key2\": 2}, {\"key3\": 3}, {\"key4\": 4}) == {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4}'\"\nassert     merge_dictionaries_three({\"key1\": 1, \"key2\": 2, \"key3\": 3}, {\"key4\": 4}, {\"key5\": 5}) == {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}, \\\n    \"Error in merge_dictionaries_three(dict1, dict2, dict3): returned '{'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5}'\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7, 'h': 8}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({\"a\": 1}, {\"b\": 2}, {\"c\":3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"c\": 3}, {\"a\": 5}) == {\"a\": 5, \"b\": 2, \"c\": 3}\nassert     merge_dictionaries_three({\"a\": 1}, {\"b\": 2}, {\"c\": 3, \"d\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n\n\ndef merge_two_dicts(dict1, dict2):\n    '''\n    Write a function to merge two dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({1: 10, 2: 20, 3: 30}, {2: 40, 3: 50, 4: 60}, {3: 70, 4: 80}) == {1: 10, 2: 40, 3: 70, 4: 80}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2}, {'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2}, {'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a':1, 'b':2}, {'b':2, 'c':3}, {'a':1, 'c':3}) == {'a':1, 'b':2, 'c':3}\nassert     merge_dictionaries_three({'c':3, 'd':4}, {'a':1, 'b':2}, {'a':1, 'b':2}) == {'a':1, 'b':2, 'c':3, 'd':4}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlist1 = [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\nassert freq_count(list1) == {'h': 5, 'e': 4, 'l': 4}\nassert freq_count([]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert freq_count([2, 5, 2, 2, 4, 3, 6, 5, 6, 4]) == collections.Counter({2: 4, 5: 4, 4: 3, 3: 2, 6: 1})\n\nassert freq_count([1, 1, 2, 3, 4, 5, 3, 4, 3, 2]) == collections.Counter({1: 4, 2: 3, 3: 2, 4: 1, 5: 1})\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_freq(list1):\n    '''\n    Write a function to get the maximum frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([\"a\"]) == {\"a\":1}\nassert     freq_count([\"a\",\"a\"]) == {\"a\":2}\nassert     freq_count([\"a\",\"b\",\"c\"]) == {\"a\":2,\"b\":1,\"c\":1}\nassert     freq_count([\"a\",\"b\",\"c\",\"d\",\"a\"]) == {\"a\":3,\"b\":2,\"c\":2,\"d\":1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef freq_count_new(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \n    Note: The returned dictionary should be a tuple of (element: count)\n    '''\n    return {key:list1.count(key) for key in list1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count([]) == {}, 'empty list'\nassert     freq_count([1,2,3,4,4,4,4,5,6,7,8]) == {1:2, 2:3, 3:4, 4:4, 5:4, 6:1, 7:1, 8:1}, 'three times 2'\nassert     freq_count(['a', 'b', 'a', 'b']) == {'a':2, 'b':2}, 'two 'a, two 'b' in a list'\nassert     freq_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([]) == {}\nassert freq_count([1]) == {1: 1}\nassert freq_count([1, 1, 1, 1, 1, 1]) == {1: 6, 2: 4, 3: 3, 4: 2, 5: 1}\nassert freq_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == {1: 6, 2: 4, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert freq_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == {1: 10, 2: 4, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfreq_count([1,2,3,4,5,6,7,8,9,10,10]) == {1:1, 2:3, 3:4, 4:3, 5:2, 6:1, 7:1, 8:1, 9:1, 10:2}\n\ndef sum_tuple(t):\n    '''\n    Write a function to find the sum of all the elements in a tuple\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([1,1,1,1,1,2,3]) == {1:5, 2:3, 3:1}\nassert freq_count([1,1,2,2,3]) == {1:3, 2:2}\nassert freq_count([]) == {}\n\ndef is_anagram(s1, s2):\n    '''\n    Given two strings s1 and s2, write a function to determine if s2 is an anagram of s1.\n\n    Example 1:\n    Input: s1 = \"anagram\", s2 = \"nagaram\"\n    Output: true\n    Example 2:\n    Input: s1 = \"rat\", s2 = \"car\"\n    Output: false\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([1,1,2,3,4,5,5,5,6]) == {1: 2, 2: 2, 3: 1, 4: 1, 5: 2, 6: 1}\n\ndef find_nth(lst, n):\n    '''\n    Find the nth occurence of a number in a list of numbers.\n    '''\n    if n < 0 or n > len(lst):\n        raise ValueError('n must be between 0 and the number of elements in the list')\n    return lst[n-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert closest_num(3) == 2\nassert closest_num(11) == 10\nassert closest_num(5) == 4\nassert closest_num(34) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert closest_num(14) == 10\nassert closest_num(9) == 9\nassert closest_num(0) == 0\nassert closest_num(14.001) == 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_num(21) == 14\nassert     closest_num(55) == 45\nassert     closest_num(41) == 40\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_num(1) == 1\nassert     closest_num(10) == 1\nassert     closest_num(15) == 2\nassert     closest_num(16) == 2\nassert     closest_num(17) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_num(2) == 1\nassert     closest_num(3) == 2\nassert     closest_num(4) == 3\nassert     closest_num(5) == 3\nassert     closest_num(7) == 4\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    \ndef is_a_happy_number(N):\n    '''\n    Write a function to check if n is a happy number\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_num(19) == 3\nassert closest_num(30) == 4\nassert closest_num(5) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log([]) == 0\nassert len_log([1]) == 1\nassert len_log([1,2,3]) == 3\n\ndef len_str(str1):\n    '''\n    Write a python function to find the length of the longest word in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([]) == 0, \"empty list\"\nassert     len_log([2,3]) == 2, \"length of one word\"\nassert     len_log([\"abc\",\"abd\",\"abs\",\"abed\",\"adb\",\"abdb\"]) == 5, \"multiple words\"\nassert     len_log([\"a\",\"b\",\"c\",\"d\",\"e\"]) == 5, \"single word\"\nassert     len_log([\"abc\",\"ab\",\"ab\",\"ab\",\"a\",\"b\"]) == 6, \"three words\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([\"hello\", \"computer\"]) == 3\nassert     len_log([\"hello\", \"computer\", \"hellooooooo\"]) == 5\nassert     len_log([]) == 0\nassert     len_log([\"a\",\"b\",\"c\",\"d\",\"e\"]) == 5\nassert     len_log([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log([]) == 0,'len_log([]): It should be 0'\nassert     len_log([2,4,6]) == 3,'len_log([2,4,6]): It should be 3'\nassert     len_log(['a',1,'b']) == 3,'len_log([\"a\",1,\"b\"]): It should be 3'\nassert     len_log([\"hello\",'hi',\"hi\",\"hihi\"]) == 5,'len_log([\"hello\",\"hi\",\"hi\",\"hihi\"]): It should be 5'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log(['cat','dog','tiger']) == 4\n\ndef replace(str1):\n    '''\n    Write a python function to replace first occurrence of character 'a' with 'd' \n    and second occurrence of character 'a' with 'e'. \n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlen_log([]) == 0\nassert len_log(['']) == 0\nassert len_log(['.', 'A', 'a', 'B']) == 3\nassert len_log(['.', 'A', 'a', 'b', 'B']) == 4\nassert len_log(['a', '.', 'a', 'b', 'B']) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([]) == 0\nassert     len_log([\"this\"]) == 1\nassert     len_log([\"this\", \"is\"]) == 2\nassert     len_log([\"this\", \"is\", \"a\"]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log(['the','way','is','to','go']) == 5\nassert     len_log(['a','human','exists','in','a','language','of','nature']) == 13\nassert     len_log(['not', 'an', 'other','man']) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     len_log([]) == 0, \"Empty list\"\nassert     len_log([1, 2, 3]) == 3, \"One element\"\nassert     len_log([1, 2, 3, 4]) == 4, \"Two elements\"\nassert     len_log([1, 2, 3, 4, 5]) == 5, \"Five elements\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring('hello', 'hello') == 'True'\nassert     find_substring('hello', 'lol') == 'False'\nassert     find_substring('hello', 'hello1') == 'False'\nassert     find_substring('hello', 'hello12') == 'False'\nassert     find_substring('hello', 'hello123') == 'False'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"hello world\", \"\") == False, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"o\") == True, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"l\") == True, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"hell\") == False, \"Test failed for example\"\nassert     find_substring(\"hello world\", \"lo\") == False, \"Test failed for example\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring(\"aab\",\"a\") == True, \"case 1\"\nassert     find_substring(\"aab\",\"aab\") == True, \"case 2\"\nassert     find_substring(\"aab\",\"aabc\") == False, \"case 3\"\nassert     find_substring(\"aab\",\"abc\") == False, \"case 4\"\nassert     find_substring(\"aab\",\"ab\") == False, \"case 5\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring('helloworld', 'hello') == True, 'Should return True'\nassert     find_substring('helloworld', 'world') == False, 'Should return False'\nassert     find_substring('abcd', 'ab') == True, 'Should return True'\nassert     find_substring('abcd', 'cd') == False, 'Should return False'\nassert     find_substring('abcd', 'bc') == True, 'Should return True'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_substring_v2(str1, sub_str):\n    '''\n    Another way of finding a substring is by using a flag variable.\n    '''\n    pass\n\nassert \n\n\ndef find_substring_v3(str1, sub_str):\n    '''\n    Instead of checking a flag variable and then doing string comparison,\n    we can do some operations directly to the string itself.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring(\"leetcode\", \"code\") == True\nassert     find_substring(\"google\", \"oogle\") == True\nassert     find_substring(\"code\", \"leet\") == False\nassert     find_substring(\"ab\", \"ba\") == True\nassert     find_substring(\"\", \"\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring('geeksforgeeks', 'forgeeks') == True\nassert     find_substring('geeksforgeeks', 'geeks') == True\nassert     find_substring('geeksforgeeks', 'geek') == False\nassert     find_substring('geeksforgeeks', 'gfe') == False\nassert     find_substring('geeksforgeeks', 'geez') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_substring('a', ['a', 'b', 'c']) == True\nassert find_substring('', ['a', 'b', 'c']) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nWrite a function to remove all duplicates from a given list of strings.\n'''\ndef remove_duplicates(list_of_strings):\n    '''\n    Write a function to remove all duplicates from a given list of strings.\n    '''\n    pass"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_undulating(3) == True\nassert     is_undulating(4) == False\nassert     is_undulating(2) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(0) == False\nassert     is_undulating(1) == False\nassert     is_undulating(2) == True\nassert     is_undulating(3) == True\nassert     is_undulating(4) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(is_undulating(1),'undulating')\nprint(is_undulating(10),'undulating')\nprint(is_undulating(100),'undulating')\nprint(is_undulating(1000),'undulating')\nprint(is_undulating(10000),'undulating')\nprint(is_undulating(100000),'undulating')\nprint(is_undulating(1000000),'undulating')\nprint(is_undulating(10000000),'undulating')\nprint(is_undulating(100000000),'undulating')\nprint(is_undulating(1000000000),'undulating')\nprint(is_undulating(10000000000),'undulating')\nprint(is_undulating(100000000000),'undulating')\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_undulating(1) == False\nassert is_undulating(2) == False\nassert is_undulating(3) == True\nassert is_undulating(5) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%10 == 1:\n        return False\n    else:\n        if n//10 == n//10%10:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(4, 2) == 16, 'Wrong! The output is {0}'.format(power(4, 2))\nassert     power(2, 4) == 1, 'Wrong! The output is {0}'.format(power(2, 4))\nassert     power(4, 1) == 4, 'Wrong! The output is {0}'.format(power(4, 1))\nassert     power(1, 4) == 1, 'Wrong! The output is {0}'.format(power(1, 4))\nassert     power(4, 0) == 1, 'Wrong! The output is {0}'.format(power(4, 0))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Check the correctness of power():')\nprint(power(a=2,b=3))\nprint(power(b=3,a=2))\nprint(power(3,a=3))\nprint(power(2,2))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(power(2,3))"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(3,2) == 9, 'power(3,2) is wrong.'\nassert     power(3,0) == 1, 'power(3,0) is wrong.'\nassert     power(3,1) == 3, 'power(3,1) is wrong.'\nassert     power(3,2) == 9, 'power(3,2) is wrong.'\nassert     power(2,100) == 1024, 'power(2,100) is wrong.'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(2,3) == 8\nassert     power(3,4) == 81\nassert     power(7,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,1) == 2\nassert     power(2,0) == 1\nassert     power(2,5) == 32\nassert     power(2,4) == 16\nassert     power(2,-1) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(2,2) == 4\nassert    power(3,3) == 27\nassert    power(-2,3) == -8\nassert    power(-3,-3) == 27\nassert    power(0,3) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power(3,2)==9\nassert     power(3.0,2)==9.0\nassert     power(1.1,2)==1.1\nassert     power(2.0,3)==8.0\nassert     power(0,1)==0\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')]) == ('Peter', 'One')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 2) == ('Pete', 'One')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 3) == ('Pete', 'Nine')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 5) == ('Pete', 'Nine')\nassert     index_minimum([('Peter', 'Sevening'), ('Pete', 'Nine'), ('Pete', 'One'), ('Peter', 'One')], 0) == ('Peter', 'Sevening')\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 4), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    assert index_minimum(test_list) == (1, 5)\n    test_list = [(1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5), (1, 5)]\n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not index_minimum([(1, 2), (2, 4), (4, 1)])\nassert index_minimum([(1, 2), (2, 4), (4, 1)]) == (1, 2)\n\ndef index_minimum_solution_1(test_list):\n    # Solution 1\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert index_minimum([\"a\", \"b\", \"c\", \"d\"]) == \"a\"\nassert index_minimum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"c\"\nassert index_minimum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"b\"\nassert index_minimum([(0, 1), (1, 2), (2, 3), (3, 4)]) == (0, 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum([(0,0),(0,1),(1,1),(1,2),(2,0)]) == (0,0), \\\n        \"Wrong result for index_minimum([(0,0),(0,1),(1,1),(1,2),(2,0)])\"\nassert     index_minimum([(0,0),(0,2),(1,1),(1,2),(2,0)]) == (1,1), \\\n        \"Wrong result for index_minimum([(0,0),(0,2),(1,1),(1,2),(2,0)])\"\n\n'''\nGiven a list of tuples, write a function that returns the first value of the tuple with the second smallest second value.\n'''\n\ndef index_second_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the second smallest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef my_function(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return (list(map(itemgetter(1), test_list)))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,1)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,2)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,3)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (1,4)\nassert     index_minimum([(1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (3,1)]) == (2,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (1, 1)\nassert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (1, 1)\n\nassert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (2, 2)\nassert     index_minimum([(1,1),(2,2),(3,3),(4,4)]) == (1, 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntest_list = [(1,2),(1,3),(1,3),(1,4),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5),(1,5)]\nassert(index_minimum(test_list) == 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_minimum([(\"Suleman\", 23), (\"Tariq\", 7), (\"Lauri\", 8)]) == \"Suleman\"\nassert     index_minimum([(\"Vatsal\", 28), (\"Abhishek\", 25), (\"Kushal\", 25)]) == \"Vatsal\"\nassert     index_minimum([(\"Vatsal\", 25), (\"Abhishek\", 24), (\"Kushal\", 23)]) == \"Abhishek\"\nassert     index_minimum([(\"Abhishek\", 23), (\"Vatsal\", 25), (\"Kushal\", 24)]) == \"Abhishek\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[5, 3], [4, 2], [9, 6]]) == 1, \"Wrong answer\"\nassert     Find_Min_Length([[5, 3], [4, 2], [9, 6], [1, 2]]) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nFind_Min_Length([1,2,3])\nFind_Min_Length([3,2,1])\nFind_Min_Length([])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([1, 2, 3, 4]) == 1, \"Test 1 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4], [5, 6]]) == 2, \"Test 2 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4], [5]]) == 1, \"Test 3 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4], [5, 6]]) == 4, \"Test 4 Failed\"\nassert     Find_Min_Length([[1, 2], [3, 4]]) == 1, \"Test 5 Failed\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1],2,[3,4],5,6]) == 3, \"Wrong Answer\"\nassert Find_Min_Length([[1],[2]],[3]) == 2, \"Wrong Answer\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1, 2, 3], [1, 2, 5], [1, 2, 8]]) == 2,'should return 2'\nassert     Find_Min_Length([[1, 2, 3], [1, 2, 5], [1, 2, 8], [1, 2, 9]]) == 1,'should return 1'\nassert     Find_Min_Length([[1, 2], [1, 2], [1, 2]]) == 1,'should return 1'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[5,3],1,2,8,9]) == 5, \"Wrong output\"\nassert Find_Min_Length([[5,3],1,2,8,9,0,11,0]) == 3, \"Wrong output\"\nassert Find_Min_Length([[5,3],1,2,8,9,0,11,0,2]) == 3, \"Wrong output\"\nassert Find_Min_Length([[5,3,1,2,8,9,0,11,0,2]]) == 1, \"Wrong output\"\nprint(\"\\nList_Length : Find_Min_Length\")\nprint(\"- Check case 1 -\")\nprint(Find_Min_Length([[5,3],1,2,8,9]))\nprint(\"- Check case 2 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2]]))\nprint(\"- Check case 3 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2],[1],[1,2,3]]))\nprint(\"- Check case 4 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2],[1],[1,2,3],[1],[2],[3]]))\nprint(\"- Check case 5 -\")\nprint(Find_Min_Length([[5,3,1,2,8,9,0,11,0,2],[1],[1,2,3],[1],[2],[3],[3]]))\nprint(\"- Check case 6 -\")\nprint(Find_Min_Length([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]))\nprint(\"- Check case 7 -\")\nprint(Find_Min_Length([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15], [1,2,3,4,5]]))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8], [9, 10]]) == 3, 'Wrong output'\nassert Find_Min_Length([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == 1, 'Wrong output'\nassert Find_Min_Length([[]]) == 0, 'Wrong output'\nassert Find_Min_Length([[1], [1], [1], [1], [1], [1], [1]]) == 2, 'Wrong output'\nprint('The output should be 2, 1, or 0.')\nprint('If all assertions pass, your function will return 2, 1, or 0.')\n\n'''\nThis problem is a variation of the Find the Maximum element in a Matrix problem.\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([1]) == 1\nassert     Find_Min_Length([[1]]) == 1\nassert     Find_Min_Length([[1],[2]]) == 2\nassert     Find_Min_Length([[1],[2],[3]]) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(0) == 1\nassert     divisor(3) == 2\nassert     divisor(3) == 2\nassert     divisor(4) == 3\nassert     divisor(15) == 8\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndivisor(9) == 3\ndivisor(1) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_divisor():\n    assert divisor(1) == 2\n    assert divisor(2) == 1\n    assert divisor(3) == 1\n    "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(3)== 5, '3 is divisor of 5'\nassert     divisor(4)== 5, '4 is divisor of 5'\nassert     divisor(10)== 6, '10 is divisor of 6'\nassert     divisor(12)== 4, '12 is divisor of 4'\nassert     divisor(20)== 6, '20 is divisor of 6'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisor(1) == 0, \"Error 1\"\nassert     divisor(2) == 1, \"Error 2\"\nassert     divisor(4) == 2, \"Error 3\"\nassert     divisor(5) == 2, \"Error 4\"\nassert     divisor(6) == 3, \"Error 5\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisor(10) == 4\nassert     divisor(20) == 5\nassert     divisor(0) == 1\nassert     divisor(12) == 3\nassert     divisor(15) == 6\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisor(1) == 1, \"divisor should return 1\"\nassert     divisor(2) == 1, \"divisor should return 1\"\nassert     divisor(3) == 1, \"divisor should return 1\"\nassert     divisor(6) == 2, \"divisor should return 2\"\nassert     divisor(8) == 3, \"divisor should return 3\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert frequency_lists([[1,3,4],\n    [5],\n    [2,4,6],\n    [9,3]]) == {1: 3, 3: 2, 4: 1, 9: 1}\n\nassert frequency_lists([[1,2,3],\n    [2],\n    [3,4,5]]) == {1: 2, 2: 1, 3: 3}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency_lists([]) == {}, \"Empty List\"\nassert     frequency_lists([1,2,3]) == {\"1\":1,\"2\":1,\"3\":1}, \"One Element\"\nassert     frequency_lists([1,2,2,3,3,3,3,4]) == {\"1\":2,\"2\":3,\"3\":3,\"4\":1}, \"Repeated\"\nassert     frequency_lists([1,2,3,4,5,6,7,8,9,10,11,12]) == {\"1\":2,\"2\":3,\"3\":4,\"4\":1,\"5\":1,\"6\":2,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}, \"Multiple Occurances\"\nassert     frequency_lists([1,2,3,4,5,5,6,7,7,7,7,7,7,7]) == {\"1\":2,\"2\":3,\"3\":4,\"4\":5,\"5\":5,\"6\":6,\"7\":1}, \"Multiple Occurances\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert     frequency_lists([[1, 2, 3, 4, 5], [2, 3, 4, 5]]) == {1: 1, 2: 2, 3: 2, 4: 2, 5: 2}\n\ndef flat_list(nested_list):\n    '''\n    Write a function to flatten a nested list. \n    Example:\n    Input = [[1, 2], 3]\n    Output = [1, 2, 3]\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[2,2], [1,1], [1,1,1], [2,1,1,2,1]]) == {2:2, 1:3, 1:3, 2:1}\nassert     frequency_lists([[3,3], [2,2], [1,1], [1,1,1], [2,1,1,2,1]]) == {3:3, 2:3, 1:5}\nassert     frequency_lists([[1,1], [1,1,1], [2,1,1,2,1]]) == {1:4, 1:4, 2:2}\nassert     frequency_lists([[1], [1,1], [2,1,1,2,1]]) == {1:3, 2:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4]]) == {\n    1: 2,\n    2: 2,\n    3: 1,\n    4: 1\n}, 'incorrect'\nassert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4], [2]]) == {\n    1: 2,\n    2: 2,\n    3: 1,\n    4: 1\n}, 'incorrect'\nassert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4], [2, 3, 4]]) == {\n    1: 2,\n    2: 3,\n    3: 2,\n    4: 1\n}, 'incorrect'\nassert     frequency_lists([[1], [1, 2], [1, 2, 3], [2, 2, 4], [2, 3, 4]]) == {\n    1: 2,\n    2: 2,\n    3: 1,\n    4: 1\n}, 'incorrect'\n\ndef find_the_frequent_element(list1):\n    '''\n    Write a function to find the frequent element in a list of lists, as well as the frequency of the element.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([[],]) == {' ': 1}\nassert     frequency_lists([[1, 2, 3], [], [4, 5, 6]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\nassert     frequency_lists([[1, 2, 3], [], [4, 5, 6], [4]]) == {1: 1, 2: 1, 3: 1, 4: 2, 5: 1, 6: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,2,3,4],[5,6,7,8],[9,10]]) == {1: 2, 5: 1, 9: 1, 2: 1, 6: 1, 3: 1, 7: 1, 4: 1, 8: 1, 10: 1}\nassert     frequency_lists([[1,2,3,4,5,6,7,8,9,10]]) == {1: 5, 2: 4, 3: 4, 4: 4, 5: 4, 6: 4, 7: 4, 8: 4, 9: 4, 10: 4}\nassert     frequency_lists([]) == {}\nassert     frequency_lists([[]]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1], [1, 2], [2, 2, 3, 3]]) == {1: 1, 2: 2, 3: 2}\n\nassert     frequency_lists([[1, 2], [3, 4, 5], [1, 2, 3, 4], [1, 1, 1, 1]]) == {1: 4, 2: 2, 3: 3, 4: 2}\n\nassert     frequency_lists([[1, 2, 2, 2], [1, 3, 3, 3], [1, 4, 4, 4], [1, 2, 2, 2]]) == {1: 4, 2: 2, 3: 3, 4: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1, 2, 3, 4], [2, 4, 5, 6], [3, 4, 5, 6]]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 1, 6: 2}\nassert     frequency_lists([[1, 2, 3], [2, 4, 5], [3, 4, 5]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1, 2, 3, 4, 5], [2, 4, 5, 6, 7], [3, 4, 5, 6, 7]]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 1}\nassert     frequency_lists([[1, 2], [2, 4, 5], [3, 4, 5]]) == {1: 2, 2: 2, 3: 1, 4: 2, 5: 2}\nassert     frequency_lists([[1, 2], [2, 3, 4], [1, 2]]) == {1: 2, 2: 2, 3: 1, 4: 1}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_all(numbers): \n    '''\n    Write a function to return the sum of the whole list and divide the whole list with the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([]) == 1, \"Multiply numbers in an empty list.\"\nassert     multiply_num([1, 2, 3, 4]) == 24, \"Multiply numbers in the list.\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([]) == 1\nassert multiply_num([1,2,3,4,5]) == 120\nassert multiply_num([1,2,3]) == 6\nassert multiply_num([1]) == 1\nassert multiply_num([1,2,3,4,5,6,7,8,9,10]) == 12240\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([1,2,3,4]) == 24, 'Should be 24'\nassert     multiply_num([1,2,3,4,5,6]) == 120, 'Should be 120'\nassert     multiply_num([0,0,0,0]) == 0, 'Should be 0'\nassert     multiply_num([0,0,0,0,0,0]) == 0, 'Should be 0'\nassert     multiply_num([0,1,0,0]) == 1, 'Should be 1'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_num([2, 6]) == 24\nassert     multiply_num([]) == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(4) == \"0100\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(7) == \"0111\"\nassert     decimal_to_binary(9) == \"1101\"\nassert     decimal_to_binary(10) == \"1010\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    decimal_to_binary(1) == \"1\"\n    decimal_to_binary(2) == \"10\"\n    decimal_to_binary(3) == \"11\"\n    decimal_to_binary(4) == \"100\"\n    decimal_to_binary(7) == \"111\"\n    decimal_to_binary(10) == \"1010\"\n    decimal_to_binary(13) == \"10101\"\n    decimal_to_binary(15) == \"101001\"\n    decimal_to_binary(25) == \"1010101\"\n    decimal_to_binary(30) == \"10101010\"\n    decimal_to_binary(32) == \"101010101\"\n    decimal_to_binary(33) == \"1010101010\"\n    decimal_to_binary(40) == \"10101010101\"\n    decimal_to_binary(70) == \"101010101010\"\n    decimal_to_binary(99) == \"10101010101010\"\n    decimal_to_binary(100) == \"101010101010101\"\n    decimal_to_binary(1000) == \"10101010101010101\"\n    decimal_to_binary
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_of_square_numbers_list(N):\n    '''\n    Write a function to calculate the sum of square numbers from 1 to N (inclusive).\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(12) == \"1100\"\nassert     decimal_to_binary(15) == \"1101\"\nassert     decimal_to_binary(18) == \"1110\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(7) == '111'\nassert     decimal_to_binary(14) == '1101'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(17) == '1100001'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(0) == '0'\n\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number represented as a string to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(13) == \"111011\"\nassert     decimal_to_binary(27) == \"101110111010\"\nassert     decimal_to_binary(26) == \"10111011101\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndecimal_to_binary(0) == '0'\ndecimal_to_binary(1) == '1'\ndecimal_to_binary(10) == '1010'\ndecimal_to_binary(15) == '1111'\ndecimal_to_binary(27) == '1001'\ndecimal_to_binary(42) == '1010100'\ndecimal_to_binary(74) == '111001'\ndecimal_to_binary(96) == '111111'\ndecimal_to_binary(103) == '110111'\ndecimal_to_binary(109) == '111111'\ndecimal_to_binary(116) == '111111'\ndecimal_to_binary(128) == '111111'\ndecimal_to_binary(144) == '111111'\ndecimal_to_binary(186) == '111111'\ndecimal_to_binary(216) == '111111'\ndecimal_to_binary(240) == '111111'\ndecimal_to_binary(255) == '111111'\ndecimal_to_binary(256) == '111111'\ndecimal_to_binary(512) == '111111'\ndecimal_to_binary(1024) == '111111'\ndecimal_to_binary(2048) == '111111'\ndecimal_to_binary(4096) == '111111'\ndecimal_to_binary(8192) == '111111'\ndecimal_to_binary(16384) == '111111'\ndecimal_to_binary(32768) == '111111'\ndecimal_to_binary(65536) == '111111'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(819) == 822, 'next_smallest_palindrome should return 822, not {}'.format(next_smallest_palindrome(819))\nassert     next_smallest_palindrome(934) == 939, 'next_smallest_palindrome should return 939, not {}'.format(next_smallest_palindrome(934))\nassert     next_smallest_palindrome(1234) == 1239, 'next_smallest_palindrome should return 1239, not {}'.format(next_smallest_palindrome(1234))\nassert     next_smallest_palindrome(9999) == 9999, 'next_smallest_palindrome should return 9999, not {}'.format(next_smallest_palindrome(9999))\nassert     next_smallest_palindrome(6888) == 6880, 'next_smallest_palindrome should return 6880, not {}'.format(next_smallest_palindrome(6888))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert next_smallest_palindrome(27) == 27\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(12345) == 12345\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(21) == 21\nassert     next_smallest_palindrome(22) == 23\nassert     next_smallest_palindrome(23) == 24\nassert     next_smallest_palindrome(24) == 25\nassert     next_smallest_palindrome(25) == 26\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(123) == 121\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(123334) == 123334\nassert     next_smallest_palindrome(12345678) == 12345678\nassert     next_smallest_palindrome(123789) == 123789\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    num = 10\n    next_smallest_palindrome(num"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5) == 5, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4) == 4, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3) == 3, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 0) == 0, \"incorrect k\"\nassert     kth_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 1) == 1, \"incorrect k\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     kth_element([], 1) == None, \"kth_element([], 1): 1st case\"\nassert     kth_element([2, 4, 5, 6, 7, 9, 11, 13], 3) == 6, \"kth_element([2, 4, 5, 6, 7, 9, 11, 13], 3): 2nd case\"\nassert     kth_element([1, 2, 3, 4, 5, 6], 6) == 5, \"kth_element([1, 2, 3, 4, 5, 6], 6): 3rd case\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_it(arr):\n    '''\n    Write a function to reverse the order of the array by swapping the elements.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    kth_element([1, 2, 3, 4, 5, 6], 2) == 5\n    kth_element([1, 2, 3, 4, 5, 6], 6) == 6\n    kth_element([1, 2, 3, 4, 5, 6], 7) == -1\n    kth_element([1, 2, 3, 4, 5, 6], 1) == 1\n    kth_element([1, 2, 3, 4, 5, 6], 2) == 2\n    kth_element([1, 2, 3, 4, 5, 6], -1) == -1\n    kth_element([1, 2, 3, 4, 5, 6], 0) == 1\n    kth_element([1, 2, 3, 4, 5, 6], 6) == 6\n    kth_element([1, 2, 3, 4, 5, 6], 6) == 6\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test-1\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 3)} = 3')\n    # Test-2\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 5)} = 5')\n    # Test-3\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 1)} = 1')\n    # Test-4\n    print(f'{kth_element([1, 3, 5, 7, 9, 11, 13], 13)} = 13'"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([3, 2, 5, 4, 1, 6, 7], 4) == 4\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 0) == 3\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 1) == 2\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 2) == 5\nassert     kth_element([3, 2, 5, 4, 1, 6, 7], 3) == 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_with_') =='snakeCaseWith'\nassert     snake_to_camel('snake_case_with_dashes') =='snakeCaseWithDashes'\nassert     snake_to_camel('snake_case_with_underscores') =='snakeCaseWithUnderscores'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('my_snake_case_variable') =='mySnakeCaseVariable'\nassert     snake_to_camel('the_snake_case_variable_that_is_acronym') == 'theSnakeCaseVariableThatIsAcronym'\nassert     snake_to_camel('the_snake_case_variable_that_is_acronym_') == 'theSnakeCaseVariableThatIsAcronym'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\n---\nConversion to Camel Case\n\nYour task is to convert the name of a software project from Camel Case to Pascal Case.\n\nExample:\n\nprojectNameCamelCase(projectName)\nshould return the following:\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    snake_to_camel('snake') =='snake'\n    snake_to_camel('snake_camel') =='snakeCamel'\n    snake_to_camel('snake_camel_') =='snakeCamel'\n    snake_to_camel('snake_camel_snake_') =='snakeCamelSnake'\n    snake_to_camel('snake_camel_snake') =='snakeCamelSnake'\n    snake_to_camel('snake_snake') =='snakeSnake'\n    snake_to_camel('snake_snake_') =='snakeSnake'\n    snake_to_camel('snake_snake_snake') =='snakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_') =='snakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake') =='snakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_') =='snakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_snake') =='snakeSnakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_snake_') =='snakeSnakeSnakeSnakeSnake'\n    snake_to_camel('snake_snake_snake_snake_snake_snake') =='snakeSnakeSnakeSnakeSnakeSnake'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snakecase\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snake_case\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snake_CASE\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snakeCASE\") == \"snakeCamelCase\"\nassert     snake_to_camel(\"snakecamelcase\") == \"snakeCamelCase\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel(\"snake_case_string\")     == \"snake_case_string\"\nassert snake_to_camel(\"snake_case_string_\") == \"snake_case_string\"\nassert snake_to_camel(\"snake_case_string_2\") == \"snake_case_string_2\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake') =='snake'\nassert     snake_to_camel('snake_to_camel') =='snake_to_camel'\nassert     snake_to_camel('snake_to_camel_') =='snake_to_camel'\n\ndef snake_to_camel_2(word):\n    '''\n    Use 'title' instead of'snake' for snake case strings.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef snake_to_camel2(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower()+word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', \"Wrong answer\"\nassert snake_to_camel('snake_case') =='snakeCase', \"Wrong answer\"\nassert snake_to_camel('SNAKE_CASE') =='sNAkeCase', \"Wrong answer\"\nassert snake_to_camel('SNAKE_CASE') =='sNAkeCase', \"Wrong answer\"\nassert snake_to_camel('SNAKE_CASE') =='sNAKeCase', \"Wrong answer\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case', f'snake_to_camel(\"snake_case\") == {snake_to_camel(\"snake_case\")}'\nassert     snake_to_camel('snake_case_') =='snake_case', f'snake_to_camel(\"snake_case_\") == {snake_to_camel(\"snake_case_\")}'\nassert     snake_to_camel('snake_case_.') =='snake_case', f'snake_to_camel(\"snake_case_.\") == {snake_to_camel(\"snake_case_.\")}'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(3, 3) == 1\nassert     eulerian_num(3, 7) == 2\nassert     eulerian_num(7, 3) == 4\nassert     eulerian_num(7, 7) == 8\nassert     eulerian_num(5, 4) == 10\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    eulerian_num(2, 1) == 2\n    eulerian_num(2, 2) == 4\n    eulerian_num(3, 1) == 4\n    eulerian_num(3, 2) == 8\n    eulerian_num(3, 3) == 12\n    eulerian_num(3, 4) == 12\n    eulerian_num(4, 1) == 8\n    eulerian_num(4, 2) == 16\n    eulerian_num(5, 1) == 16\n    eulerian_num(5, 2) == 24\n    eulerian_num(6, 1) == 24\n    eulerian_num(6, 2) == 32\n    eulerian_num(7, 1) == 32\n    eulerian_num(7, 2) == 48\n    eulerian_num(8, 1) == 48\n    eulerian_num(8, 2) == 64\n    eulerian_num(9, 1) == 64\n    eulerian_num(9, 2) == 96\n    eulerian_num(10, 1) == 96\n    eulerian_num(10, 2) == 128\n    eulerian_num(11, 1) == 128\n    eulerian_num(11, 2) == 144\n    eulerian_num(12, 1) == 144\n    eulerian_num(12, 2) == 192\n    eulerian_num(13, 1) == 192\n    eulerian_num(13, 2) == 256\n    eulerian_num(14, 1) == 256\n    eulerian_num(14, 2) == 288\n    eulerian_num(15, 1) == 288\n    eulerian_num(15, 2) == 384\n    eulerian_num(16, 1) == 384\n    eulerian_num(16, 2) == 512\n    eulerian_num(17, 1) == 512\n    eulerian_num(17, 2) == 768\n    eulerian_num(18, 1) == 768\n    eulerian_num(18, 2) == 864\n    eulerian_num(19, 1) == 864\n    eulerian_num(19, 2) == 1152\n    eulerian_num(20, 1) == 1152\n    eulerian_num(20, 2) == 1344\n    eulerian_num(21, 1) == 1344\n    eulerian_num(21, 2) == 1440\n    eulerian_num(22, 1) == 1440\n    eulerian_num(22, 2) == 1536\n    eulerian_num(23, 1) == 1536\n    eulerian_num(23, 2) == 1584\n    eulerian_num(24, 1) == 1584\n    eulerian_num(24, 2) == 1728\n    eulerian_num(25, 1) == 1728\n    eulerian_num(25, 2) == 1776\n    eulerian_num(26, 1) == 1776\n    eulerian_num(26, 2) == 2032\n    eulerian_num(27, 1) == 2032\n    eulerian_num(27, 2) == 2088\n    eulerian_num(28, 1) == 2088\n    eulerian_num(28, 2) == 2160\n    eulerian_num(29, 1) == 2160\n    eulerian_num(29, 2) == 2288\n    eulerian_num(30, 1) == 2288\n    eulerian_num(30, 2) == 2640\n    eulerian_num(31, 1) == 2640\n    eulerian_num(31, 2) == 2672\n    eulerian_num(32, 1) == 2672\n    eulerian_num(32, 2) == 2680\n    eulerian_num(33, 1) == 2680\n    eulerian_num(33, 2) == 2688\n    eulerian_num(34, 1) == 2688\n    eulerian_num(34, 2) == 2696\n    eulerian_num(35, 1) == 2696\n    eulerian_num(35, 2) == 2700\n    eulerian_num(36, 1) == 2700\n    eulerian_num(36, 2) == 2704\n    eulerian_num(37, 1) == 2704\n    eulerian_num(37, 2) == 2712\n    eulerian_num(38, 1) == 2712\n    eulerian_num(38, 2) == 2716\n    eulerian_num(39, 1) == 2716\n    eulerian_num(39, 2) == 2720\n    eulerian_num(40, 1) == 2720\n    eulerian_num(40, 2) == 2728\n    eulerian_num(41, 1) == 2728\n    eulerian_num(41, 2) == 2736\n    eulerian_num(42, 1) == 2736\n    eulerian_num(42, 2) == 2744\n    eulerian_num(43, 1) == 2744\n    eulerian_num(43, 2) == 2752\n    eulerian_num(44, 1) == 2752\n    eulerian_num(44, 2) == 2758\n    eulerian_num(45, 1) == 2758\n    eulerian_num(45, 2) == 2760\n    eulerian_num(46, 1) == 2760\n    eulerian_num(46, 2) == 2764\n    eulerian_num(47, 1) == 2764\n    eulerian_num(47, 2) == 2772\n    eulerian_num(48, 1) == 2772\n    eulerian_num(48, 2) == 2776\n    eulerian_num(49, 1) == 2776\n    eulerian_num(49, 2) == 2780\n    eulerian_num(50, 1) == 2780\n    eulerian_num(50, 2) == 2784\n    eulerian_num(51, 1) == 2784\n    eulerian_num(51, 2) == 2792\n    eulerian_num(52, 1) == 2792\n    eulerian_num(52, 2) == 2796\n    eulerian_num(53, 1) == 2796\n    eulerian_num(53, 2) == 2800\n    eulerian_num(54, 1) == 2800\n    eulerian_num(54, 2) == 2804\n    eulerian_num(55, 1) == 2804\n    eulerian_num(55, 2) == 2808\n    eulerian_num(56, 1) == 2808\n    eulerian_num(56, 2) == 2816\n    eulerian_num(57, 1) == 2816\n    eulerian_num(57, 2) == 2820\n    eulerian_num(58, 1) == 2820\n    eulerian_num(58, 2) == 2828\n    eulerian_num(59, 1) == 2828\n    eulerian_num(59, 2) == 2836\n    eulerian_num(60, 1) == 2836\n    eulerian_num(60, 2) == 2844\n    eulerian_num(61, 1) == 2844\n    eulerian_num(61, 2) == 2852\n    eulerian_num(62, 1) == 2852\n    eulerian_num(62, 2) == 2856\n    eulerian_num(63, 1) == 2856\n    eulerian_num(63, 2) == 2864\n    eulerian_num(64, 1) == 2864\n    eulerian_num(64, 2) == 2872\n    eulerian_num(65, 1) == 2872\n    eulerian_num(65, 2) == 2876\n    eulerian_num(66, 1) == 2876\n    eulerian_num(66, 2) == 2880\n    eulerian_num(67, 1) == 2880\n    eulerian_num(67, 2) == 2884\n    eulerian_num(68, 1) == 2884\n    eule"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eulerian_num(3, 1) == 4\nassert     eulerian_num(2, 3) == 2\nassert     eulerian_num(10, 12) == 22\nassert     eulerian_num(2, 1) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eulerian_num(5, 5) == 1\nassert     eulerian_num(5, 10) == 3\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(2, 3) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef eulerian_path(n, m): \n    '''\n    Write a function to find the Eulerian path a(n, m) using Eulerian traversal.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(1, 0) == 1\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 2\nassert     eulerian_num(2, 3) == 2\nassert     eulerian_num(2, 4) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(2, 2) == 2\nassert     eulerian_num(2, 3) == 1\nassert     eulerian_num(4, 4) == 6\nassert     eulerian_num(5, 5) == 10\nassert     eulerian_num(10, 10) == 36\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef eulerian_path(n, m, s, t): \n    '''\n    Write a function to find the Eulerian path a(n, m) from source s to\n    target t.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['a','b','c'],['b','c','d'],['c','d','e']]) == [['a','b','c'],['b','c','d'],['c','d','e']]\nassert sort_sublists([['b','d','c'],['d','a','c'],['a','b','d']]) == [['b','d','c'],['d','a','c'],['a','b','d']]\nassert sort_sublists([['b','a','c'],['c','d','e'],['a','b','d']]) == [['a','b','c'],['b','a','c'],['c','d','e']]\nassert sort_sublists([['b','a','c'],['d','c','e'],['a','b','d']]) == [['a','b','c'],['d','c','e'],['b','a','d']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']]\nassert     sort_sublists([['e', 'f'], ['c', 'd'], ['a', 'b']]) == [['a', 'b'], ['e', 'f'], ['c', 'd']]\nassert     sort_sublists([[], ['c', 'd'], ['a', 'b']]) == [[], ['a', 'b'], ['c', 'd']]\nassert     sort_sublists([[], ['a', 'b']]) == [[], ['a', 'b']]\nassert     sort_sublists([['a', 'b']]) == [['a', 'b']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == ['a', 'd', 'b', 'e', 'c', 'f']\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g']]) == ['a', 'd', 'b', 'd', 'e', 'f', 'c', 'g']\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g', 'h']]) == ['a', 'd', 'b', 'd', 'e', 'f', 'c', 'g', 'h']\nassert     sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == ['a', 'b', 'd', 'e', 'c', 'f']\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g']]) == ['a', 'b', 'd', 'd', 'e', 'f', 'c', 'g']\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_list(input_list):\n    '''\n    Write a function that takes a list of lists as input and returns a sorted list of lists.\n    '''\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([[\"lala\", \"bala\"], [\"baa\", \"lala\"]]) == \n        [[\"lala\", \"baa\"], [\"lala\", \"bala\"]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists(['tarek', 'ahmet', 'ahmet', 'hafiz']) == [['tarek', 'ahmet', 'ahmet', 'hafiz'], ['ahmet', 'ahmet', 'hafiz', 'tarek']]\nassert     sort_sublists(['tarek', 'ahmet', 'ahmet', 'hafiz','sara', 'tarek', 'ahmet']) == [['tarek', 'ahmet', 'ahmet', 'hafiz','sara', 'tarek', 'ahmet'], ['ahmet', 'ahmet', 'hafiz', 'tarek','sara', 'tarek', 'ahmet']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert sort_sublists([[1, 2], [\"a\", \"b\"]]) == [[1, 2], [\"a\", \"b\"]]\nassert sort_sublists([[1, 2], [\"a\"]]) == [[1, 2], [\"a\"]]\nassert sort_sublists([[\"b\", \"a\"], [\"a\", \"b\"]]) == [[], [\"a\", \"b\"], [\"a\", \"b\"]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([\"abcd\", \"abcd\", \"x\", \"y\", \"z\"]) == [['x','y','z','a','b'],['abcd'],['abcd']]\nassert     sort_sublists([\"abcde\", \"abcd\", \"x\", \"y\", \"z\"]) == [['x','y','z','a','b'],['abcd'],['abcde']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f']]) == [['a', 'b', 'c'], ['d', 'e'], ['f']]\nassert     sort_sublists([['a', 'a', 'a'], ['b', 'c']]) == [['a', 'a'], ['b', 'c']]\nassert sort_sublists([['a', 'a', 'a'], ['a', 'a']]) == [['a', 'a'], ['a', 'a']]\nassert sort_sublists([['a', 'a'], ['a']]) == [['a', 'a'], ['a']]\nassert sort_sublists([['a'], ['a']]) == [['a'], ['a']]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count([True, False, False, True]) == 3\nassert     count([False, False, False, True]) == 1\nassert     count([True, True]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True,True,False]) == 1, \"Wrong answer.\"\nassert     count([True,False,True]) == 0, \"Wrong answer.\"\nassert     count([True,False,False]) == 1, \"Wrong answer.\"\nassert     count([False,True,False]) == 1, \"Wrong answer.\"\nassert     count([False,True,True]) == 0, \"Wrong answer.\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([]) == 0\nassert     count([True]) == 1\nassert     count([False]) == 1\nassert     count([True, False]) == 2\nassert     count([False, True]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([True, False, True]) == 2\nassert     count([True, False]) == 1\nassert     count([]) == 0\nassert     count([True, 'john', 'jane', True]) == 3\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([True, True, False, True, False, True]) == 3, \"Correct count is not 3.\"\nassert     count([True, True, False, True, False, True, False]) == 5, \"Correct count is not 5.\"\nassert     count([True, True, False, True, False, True, False, False]) == 6, \"Correct count is not 6.\"\nassert     count([True, True, False, True, False, True, False, False, False]) == 8, \"Correct count is not 8.\"\nassert     count([True, True, False, True, False, True, False, True, False, False, True, True, True, False, True, False]) == 11, \"Correct count is not 11.\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True, False, True, False, True]) == 3\nassert     count([]) == 0\nassert     count([1, 2, 3]) == 0\nassert     count([True, True, True, False, True]) == 2\nassert     count([False, False, False]) == 1\nprint (\"correct\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([]) == 0\nassert     count([True]) == 1\nassert     count([True, True]) == 2\nassert     count([False, False, False]) == 2\nassert     count([True, True, False, False]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([True, False, False]) == 1, \"returns 1\"\nassert     count([True, False, True]) == 0, \"returns 0\"\nassert     count([\"True\", \"False\", \"False\"]) == 0, \"returns 0\"\nassert     count([False, False, False, False, False, False, True]) == 3, \"returns 3\"\nassert     count([]) == 0, \"returns 0\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count([True, False, True, True]) == 2, \"Error: count\"\nassert count([True, False, True, False]) == 0, \"Error: count\"\nassert count([True]) == 1, \"Error: count\"\nassert count([False]) == 1, \"Error: count\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count([True,False,True]) == 2\nassert count([True,True,False,False,True]) == 5\nassert count([True,False,True,True,False]) == 5\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    test_list = [1,2,3,4,5,6]\n    test_tup = ((1,2),(3,4),(5,6))\n    add_lists(test_list, test_tup) == [(1,2),(3,4),(5,6)]\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([], ()) == ()\nassert     add_lists([1], (1,)) == (1,)\nassert     add_lists([1,1], (1,1,)) == (1,1)\nassert     add_lists([1,1,1], (1,1,1,)) == (1,1,1)\nassert     add_lists([1,2,3], (1,2,3,)) == (1,2,3)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to test if the given lists are equal or not.\n'''"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([0,1,2], [(0,1),(1,2),(2,3)]) == [(0,1),(1,2),(2,3)]\nassert     add_lists([], [(0,1),(1,2),(2,3)]) == [(0,1),(1,2),(2,3)]\nassert     add_lists([0], [(0,1),(1,2),(2,3)]) == [(0,1),(1,2),(2,3)]\nassert     add_lists([0], [(0,1)]) == [(0,1)]\nassert     add_lists([0], [(0,1,2)]) == [(0,1,2)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1,2,3], (1,2)) == [(1,2), (1,2), (1,2), (1,2)]\nassert     add_lists([1,2,3], (3,4)) == [(1,2), (3,4), (1,2), (3,4)]\nassert     add_lists([1,2,3], (4,5)) == [(1,2), (4,5), (1,2), (4,5)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nTime Complexity: O(n)\nSpace Complexity: O(1)\n'''"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef subtract_lists(test_list, test_tup):\n    '''\n    Write a function to subtract the given list from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([1,2,3], (10, 11)) == [(1,2,3), (10,11)], \\\n    \"WRONG. Expected the result to be [(1,2,3), (10,11)], but was instead {}\".format((1,2,3), (10,11)))\n\nassert     add_lists([1,2,3], (1,2)) == [(1,2,3), (1,2)], \\\n    \"WRONG. Expected the result to be [(1,2,3), (1,2)], but was instead {}\".format((1,2,3), (1,2))\n\nassert     add_lists([1,2,3], (1,2,3)) == [(1,2,3), (1,2,3)], \\\n    \"WRONG. Expected the result to be [(1,2,3), (1,2,3)], but was instead {}\".format((1,2,3), (1,2,3))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists([1,2,3], [(4,5), (6,7,8)]) == [(1,2,3),(4,5,6,7,8)]\nassert     add_lists([1,2,3], [(1,2), (2,4)]) == [(1,2,3),(1,2),(2,4)]\nassert     add_lists([1,2,3], [(2,4), (2,5)]) == [(1,2,3),(2,4),(2,5)]\nassert     add_lists([1,2,3], [(1,2,3),(4,5), (6,7,8)]) == [(1,2,3),(4,5,6,7,8)]\nprint(\"The add_lists function works!\")\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists(list1, tuple1) == tuple1 + list1\nassert     add_lists(list1, tuple2) == tuple2 + list1\nassert     add_lists(list1, tuple3) == tuple3 + list1\nassert     add_lists(list1, tuple4) == tuple4 + list1\nassert     add_lists(list2, tuple1) == tuple1 + list2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef merge_sort(l):\n    \"\"\"\n    Sort the list of integers in-place\n    Input:\n    l: List of integers\n    \"\"\"\n\n    def merge(nums1, nums2):\n        \"\"\"\n        Merge sorted array nums1 and nums2\n        \"\"\"\n        i, j = 0, 0\n        res = []\n\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] <= nums2[j]:\n                res.append(nums1[i])\n                i += 1\n            else:\n                res.append(nums2[j])\n                j += 1\n\n        if i < len(nums1):\n            res += nums1[i:]\n        if j < len(nums2):\n            res += nums2[j:]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef merge_sort(num_list):\n    '''\n    Write a function to sort a list in ascending order using merge sort.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,2,4],[2,3,4],[1,3,4]) == [1,1,2,2,3,3,4,4]\nassert     merge_sorted_list([1,1,2],[2,3],[2,4,5]) == [1,1,2,2,2,3,4,4,5]\nassert     merge_sorted_list([2,3],[1,2],[4,5,6]) == [1,1,2,2,3,3,4,4,5,5,6]\nassert     merge_sorted_list([],[],[2,3,4,5]) == [2,3,4,5]"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9], \"Wrong output\"\nassert     merge_sorted_list([2,4,6,8], [1,3,5,7], [9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12], \"Wrong output\"\nassert     merge_sorted_list([7,9,11,14], [2,4,6,8], [1,3,5,7]) == [1,2,3,4,5,6,7,7,9,10,11,13,14], \"Wrong output\"\nassert     merge_sorted_list([4,6,9], [1,5,8], [2,3,7]) == [1,2,3,4,5,6,7,8,9], \"Wrong output\"\nassert     merge_sorted_list([2,4,6], [1,3,5], [9,10,11,12]) == [1,2,3,4,5,6,7,9,10,11,12], \"Wrong output\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # use a list to store the result\n    # compare with the first list\n    # if the second list is not empty, put all elements in the list\n    # if the second list is empty, it will not get any element\n    # if the second list is empty, put all elements in the first list\n    # using max heap to store the elements in the result list\n    \n    # create a list to store the result\n    result = []\n    # if the first list is not empty\n    if num1:\n        # add all the elements from the first list to the result list\n        result += num1\n        # add the last element from the second list to the result list\n        result += num2\n        # add the last element from the third list to the result list\n        result += num3\n    else:\n        # add the last element from the second list to the result list\n        result += num2\n        # add the last element from the third list to the result list\n        result += num3\n    # using max heap to store the elements in the result list\n    max_heap = []\n    # add all the elements from the result list to the max heap\n    for i in range(len(result)):\n        # push the element to the max heap\n        heapq.heappush(max_heap,result[i])\n        # return the max_heap\n        return max_heap\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == sorted([1,2,3,4,5,6,7,8,9])\nassert     merge_sorted_list([1,2,3,1], [4,5,6,7], [7,8,9,10]) == sorted([1,1,2,3,4,5,6,7,8,9,7,8,9,10])\nassert     merge_sorted_list([1,2,3,1], [4,5,6,7,8], [7,8,9,10,11]) == sorted([1,1,2,3,4,5,6,7,8,7,8,9,10,11])\nassert     merge_sorted_list([1,2,3,1], [4,5,6,7,8], [7,8,9,10,11,12]) == sorted([1,1,2,3,4,5,6,7,8,7,8,9,10,11,12])\nassert     merge_sorted_list([1,2,3,1,2], [4,5,6,7,8,9], [7,8,9,10,11]) == sorted([1,1,2,2,3,4,5,6,7,7,8,9,10,11])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1, 3, 5], [2, 4, 6], [3, 5, 6]) == [1, 2, 3, 4, 5, 6, 5, 6, 6]\nassert     merge_sorted_list([1, 3, 5, 7, 9], [2, 4, 6, 8], [3, 5, 6]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     merge_sorted_list([1, 3], [2, 4, 6], [3, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     merge_sorted_list([], [2, 4, 6], [3, 5, 6]) == []\nassert     merge_sorted_list([1, 3, 5], [2, 4, 6], [3, 5, 6]) == [1, 2, 3, 4, 5, 6, 5, 6, 6]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,2,3], [1,2,4], [2,3,4]) ==  [1,1,2,2,3,3,4,4]\nassert     merge_sorted_list([3,2,1], [2,3,4], [4,5,6]) ==  [1,2,2,3,3,4,4,5,5,6]\nassert     merge_sorted_list([1,2,3,4], [5,6], [7,8,9]) ==  [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2,3,4], [5], [7,8,9]) ==  [1,2,3,4,5,7,8,9]\nassert     merge_sorted_list([1,2], [1,2,3,4], [1,2,3,4]) ==  [1,1,1,2,2,2,3,3,3,4,4,4]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_Equivalent(\"1001\",\"3\") == \"1011\", \"odd_Equivalent(\"1001\",\"3\") returns \"1011\" not 1010\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1010\", \"odd_Equivalent(\"1001\",\"3\") returns \"1010\" not 1011\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1100\", \"odd_Equivalent(\"1001\",\"3\") returns \"1100\" not 1101\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1101\", \"odd_Equivalent(\"1001\",\"3\") returns \"1101\" not 1110\"\nassert \nodd_Equivalent(\"1001\",\"3\") == \"1110\", \"odd_Equivalent(\"1001\",\"3\") returns \"1110\" not 1111\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_Equivalent(\"0101010101000111\",4) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent(s='100101',n=2) == 3\nassert \nodd_Equivalent(s='1010110',n=3) == 5\nassert \nodd_Equivalent(s='100101',n=4) == 3\n\nprint(\"You've successfully passed the unit test!\")\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_Equivalent(\"01010101\",3) == \"01110111\"\nassert \nodd_Equivalent(\"10101010\",2) == \"11100100\"\nassert \nodd_Equivalent(\"10101010\",6) == \"11100100\"\nassert \nodd_Equivalent(\"10101010\",7) == \"11100100\"\nassert \nodd_Equivalent(\"10101010\",8) == \"11100101\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_Equivalent('10111101', 1) == 6\nassert     odd_Equivalent('10111101', 2) == 3\nassert     odd_Equivalent('10111101', 3) == 1\nassert     odd_Equivalent('10111101', 4) == 1\nassert     odd_Equivalent('10111101', 5) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent(\"1010101011\",3) == 3\nassert \nodd_Equivalent(\"1010101011\",2) == 5\nassert \nodd_Equivalent(\"1010101011\",1) == 8\nassert \nodd_Equivalent(\"1010101011\",0) == 9\nassert \nodd_Equivalent(\"101010101\",0) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_Equivalent('011010',1)==2\nassert odd_Equivalent('011010',2)==6\nassert odd_Equivalent('011010',3)==11\nassert odd_Equivalent('011010',4)==15\nassert odd_Equivalent('011010',5)==19\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_Equivalent
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_Equivalent('1010',2) == 2\nassert     odd_Equivalent('1011',2) == 4\nassert     odd_Equivalent('101010',4) == 6\nassert     odd_Equivalent('1010101010',8) == 12\nassert     odd_Equivalent('1010101010',9) == 27\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_Equivalent('100', 1) == 2, \"error\"\nassert odd_Equivalent('01', 1) == 1, \"error\"\nassert odd_Equivalent('001', 1) == 4, \"error\"\nassert odd_Equivalent('011', 1) == 2, \"error\"\nassert odd_Equivalent('101', 2) == 5, \"error\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1,2,3], [], [1,2,3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1,2,3], [1,2], [1,2,3]]) == []\nassert     common_in_nested_lists([[1,2,3], [1,2], []]) == []\nassert     common_in_nested_lists([[], [], []]) == []\nassert     common_in_nested_lists([[1,2,3], [], [], []]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1, 2], [3], [5, 4]]) == [3, 5], \"First\"\nassert     common_in_nested_lists([[1, 2, 3], [5], [4]]) == [5, 4], \"Second\"\nassert     common_in_nested_lists([[1, 2], [3], [5, 4, 6]]) == [], \"Third\"\nassert     common_in_nested_lists([[1, 2], [3], [5], [6]]) == [], \"Fourth\"\nassert     common_in_nested_lists([[1, 2, 3, 4], [5], [6]]) == [1, 2, 3, 4], \"Fifth\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1,2],[[1,2],3]]) == {1,2}\nassert     common_in_nested_lists([[1,2],[[1,2,3],3]]) == {1,2,3}\nassert     common_in_nested_lists([[1,2,3],[[1,2,3],3]]) == {1,2,3}\nassert     common_in_nested_lists([[1,2,3],[[1,2],3]]) == {1,2,3}\nassert     common_in_nested_lists([[1,2],[[1,2,3,4],3]]) == {1,2,3,4}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[2], [], [[2]]]) == True\nassert     common_in_nested_lists([[2, 2], [], [[2]]]) == True\nassert     common_in_nested_lists([[], [2, 2], [[2]]]) == True\nassert     common_in_nested_lists([[], [], [[2]]]) == False\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1, 2], [[2], 3]]) == [[2]]\nassert     common_in_nested_lists([[2], [3], [[2], 3]]) == [[2]]\nassert     common_in_nested_lists([[1, 2], [2, 1]]) == []\nassert     common_in_nested_lists([[2], [1, 3], [[2], 3]]) == [[2]]\nassert     common_in_nested_lists([[[2], 3]]) == [[2]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[1], [2, 3], [4, 5, 6, 7]]) == [[1], [4, 5, 6, 7]]\nassert common_in_nested_lists([[1, 2], [2, 3], [4, 5, 6, 7]]) == [[1, 2], [4, 5, 6, 7]]\nassert common_in_nested_lists([[1, 2], [3, 4], [5, 6, 7, 8, 9]]) == [[1, 2], [3, 4], [5, 6, 7, 8, 9]]\nassert common_in_nested_lists([[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]) == [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]\nassert common_in_nested_lists([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[1, 2], [3, 4, 5], [6, 7, 8, 9]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[1], 2, 3]) == [1], 'Test 1 Failed'\nassert     common_in_nested_lists([[1], 2, 3]) == [1], 'Test 2 Failed'\nassert     common_in_nested_lists([[1, 2], 2, 3]) == [1, 2], 'Test 3 Failed'\nassert     common_in_nested_lists([[1, 2], 2, 3]) == [1, 2], 'Test 4 Failed'\nassert     common_in_nested_lists([[1, 2], 2, [3, 4]]) == [1, 2, 3, 4], 'Test 5 Failed'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([1, 2, 4, 5, 6, 8, 8]) == 4\nassert     common_in_nested_lists([1, 2, 4, 5, 6, 8, 8, 8]) == 8\nassert     common_in_nested_lists([1, 2, 4, 5, 6, 8]) == False\nassert     common_in_nested_lists([1, 2, 4, 5, 6]) == True\nassert     common_in_nested_lists([1]) == True\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5]]) == [[2,4],[4,5]]\nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5], [2,2,2]]) == [[2,2,2]]\nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5], [4,2,2]]) == [[4,2,2]]\nassert common_in_nested_lists([[1,2,3], [2,4,4], [3,4,5], [2,2,2,2,5], [4,2,2]]) == [[4,2,2]]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer(\"-10\") == False\nassert     check_integer(\"10.0\") == True\nassert     check_integer(\"10\") == False\nassert     check_integer(\"a\") == False\nassert     check_integer(\"ab\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('5') == True\nassert     check_integer('5.5') == True\nassert     check_integer('5a') == False\nassert     check_integer('5a.') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_string(text):\n    '''\n    Write a function to check if a string contains all digits or not.\n    '''\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer(1) == True\nassert    check_integer(\"1\") == True\nassert    check_integer(\"a\") == False\nassert    check_integer(\"5.5\") == False\nassert    check_integer(\"12.5\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer('123')\nassert     check_integer('12.3')\nassert     check_integer('-123')\nassert     check_integer('-1.23')\nassert     check_integer('-1.2e3')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('abc') == False\nassert     check_integer('2') == True\nassert     check_integer('-2') == True\nassert     check_integer('-2.3') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # check if the return value is integer\n        # the function should return the expected result\nassert check_integer('1') == True\nassert check_integer('1.1') == False\nassert check_integer('-1.1') == False\nassert check_integer('a') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(num):\n    '''\n    Write a function to check if the given number is a prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('abc') == False\nassert     check_integer('1a3') == False\nassert     check_integer('1.3') == False\nassert     check_integer('-1') == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([{}, {}, {}, {}]) == False, 'Wrong Output!'\nassert     empty_dit([{}, {}, {}, {}, {}]) == True, 'Wrong Output!'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit(['', {}, set(), 'tuple']) == False, 'tuple'\nassert     empty_dit(['', {}, set(), '']) == True,'string'\nassert     empty_dit([{}, set()]) == True, 'two empty'\nassert     empty_dit([{}, {}, {}, {'str': 'tuple'}]) == True,'string and dict'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit([]) == True, \"Wrong output!\"\nassert     empty_dit([{},{},{},{}]) == True, \"Wrong output!\"\nassert     empty_dit([{},{},{},None]) == False, \"Wrong output!\"\nassert     empty_dit([{},{},{}]) == False, \"Wrong output!\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert empty_dit([]) == True\nassert empty_dit([{},{},{}]) == True\nassert empty_dit([{'a':1},{'b':2},{'c':3}]) == False\nassert empty_dit([{'a':1},{'b':2},{'c':3},{'d':4}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_dit([{},{},{},{}])\nassert     not empty_dit([{},{}])\nassert empty_dit([{},{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1},{},{2},{2,1,1},{2,3,4,5},{2,4,5},{2,5}]) == False\nassert     empty_dit([{},{1:1},{1,1,1},{1,2,2},{1,2,3},{1,2,4,5},{1,2,4,5},{1,2,5}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:2},{},{1:2}]) == False\nassert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{},{},{}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert empty_dit([{},{}]) == True\nassert empty_dit([{},{},\" \"]) == True\nassert empty_dit([{},{},\" \",\" \"]) == True\nassert empty_dit([{},{},\" \",\" \",\" \"]) == False\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3,4,5)) == 120\nassert tuple_to_int((1,2,3,4,5,6)) == 420\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((1,2,3,4,5)) == 45\nassert     tuple_to_int((0,1,2,3,4)) == 24\nassert     tuple_to_int((5,)) == 15\nassert     tuple_to_int((5,6,7,8,9)) == 45\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1,2))     ==     3\nassert     tuple_to_int((1,1,1))     ==     3\nassert     tuple_to_int((1,1,2))     ==     4\nassert     tuple_to_int((1,1,1,1,1)) ==     5\nassert     tuple_to_int((1,1,1,1,2)) ==     5\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_int([5, 2, 3]) == 13\nassert     tuple_to_int((5, 2, 3)) == 13\nassert     tuple_to_int((2, 3, 5)) == 15\nassert     tuple_to_int((2, 4, 5, 6)) == 26\nassert     tuple_to_int((2, 2, 2)) == 2\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 24, 'tuple_to_int test 1 failed'\nassert     tuple_to_int((-3, -1, -2, -5)) == -6, 'tuple_to_int test 2 failed'\nassert     tuple_to_int((-1, 0, 1, 2)) == -3, 'tuple_to_int test 3 failed'\n\nprint('all tests passed')"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((-1,-2,-3,-4)) == -24\nassert     tuple_to_int((0,0,0,0)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((0,2,4)) == 2, 'Should return 2'\nassert     tuple_to_int((-1,-2,-3)) == -1, 'Should return -1'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,3,5)) == 21\nassert     tuple_to_int((5,9,7)) == 35\nassert     tuple_to_int((9,9,9)) == 81\nassert     tuple_to_int((1,2,3,4)) == 24\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((-2,3,4,5)) == -10\nassert     tuple_to_int((1,1,1)) == 1\nassert     tuple_to_int((-1,-1,-1)) == -3\n\ndef sum_first_n_nums(n, nums):\n    '''\n    Write a function to return the sum of the first n elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         list_to_float([[1, 'hello'], '1.5', 1, False, 'False', {}, [[]]]) == [[1.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\nassert         list_to_float([]) == []\nassert         list_to_float([[1, 2, 'hello'], 1.5, 1, False, 'False', {}, [[]]]) == [[1.0, 2.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\nassert         list_to_float([[1, 2, 'hello'], 1.5, 1, False, 'False', {}, [[]]]) == [[1.0, 2.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\nassert         list_to_float([[1, 2, 'hello'], 1.5, 1, False, 'False', {}, [[]]]) == [[1.0, 2.0, 'hello'], 1.5, 1, False, 'False', {}, [[]]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntest_list = [[1, 2.5], ['hello'], 'a string']\nlist_to_float(test_list)\n\ndef float_to_list(test_float):\n    '''\n    Write a function to convert a floating point number to its equivalent integer value.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_to_float([[1, 2, 3]]) == [[1.0, 2.0, 3.0]]\nassert     list_to_float([[1.0, 2.0, 3.0]]) == [[1.0, 2.0, 3.0]]\nassert     list_to_float([[1.0, 2.0, 3.0, 'foo']]) == [[1.0, 2.0, 3.0, 'foo']]\nassert     list_to_float([[1.0, 2.0, 3.0, 4.0, 5.0, 'foo']]) == [[1.0, 2.0, 3.0, 4.0, 5.0, 'foo']]\nassert     list_to_float([[1.0, 2.0, 3.0, 4.0, 5.0, 'foo', 'bar']]) == [[1.0, 2.0, 3.0, 4.0, 5.0, 'foo', 'bar']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert list_to_float([[1,2.0], [3,4.5]]) == [[1, 2.0], [3, 4.5]]\n\n\ndef clean_data(data):\n    '''\n    Write a function to clean a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([[1, 2], [3, 4.0]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([[1, 2], [3, 4.0]]) == [[1, 2.0], [3, 4.0]]\nassert     list_to_float([['a', 1], ['b', 2.0]]) == [['a', 1], ['b', 2.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1,2,3],[4,5,6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1.2,2,3],[4,5,6]]) == [[1.2, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1,2.0,3],[4,5,6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1,2,3.0],[4,5,6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1,2,3],[4,5,6.0]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nlist_to_float([[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]) == [[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]\nassert \nlist_to_float([[\"a\", \"b\", \"c\"], [3.5, 6.8], [\"a\", \"b\", \"c\"]]) == [[3.5, 6.8], [\"a\", \"b\", \"c\"]]\nassert \nlist_to_float([[\"a\", \"b\", \"c\"], [3.5, 6.8], [\"a\", \"b\", \"c\"], 4, 5, 6]) == [[3.5, 6.8], [\"a\", \"b\", \"c\"], 4, 5, 6]\nassert \nlist_to_float([[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]) == [[1, 2, 3], [4.5, 6.8], [\"a\", \"b\", \"c\"]]\nassert \nlist_to_float([[1, 2, 3], [\"a\", \"b\", \"c\"], [4.5, 6.8]]) == [[1, 2, 3], [\"a\", \"b\", \"c\"], [4.5, 6.8]]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_list('spaceless') == ['spaceless']\nassert     string_to_list('spaceless spaces') == ['spaceless','spaces']\nassert     string_to_list('spaceless spaces ') == ['spaceless','spaces', '']\nassert     string_to_list('spaceless spaces  ') == ['spaceless','spaces', '']\nassert     string_to_list('spaceless spaces  ') == ['spaceless','spaces', '']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert string_to_list('1 2 3') == ['1','2','3']\nassert string_to_list('hello world') == ['hello','world']\nassert string_to_list('a b c') == ['a','b','c']\nassert string_to_list('1 2 3 4 5') == ['1','2','3','4','5']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list(\"hello world\") == [\"hello\",\"world\"], \\\n        \"Expected ['hello', 'world'], but got: %s\" %     (string_to_list(\"hello world\"),)\nassert     string_to_list(\"hello world.hello world.hello world\") == [\"hello\",\"world.hello\",\"world.hello\",\"world\"], \\\n        \"Expected ['hello', 'world.hello', 'world.hello', 'world'], but got: %s\" %     (string_to_list(\"hello world.hello world.hello world\"),)\nassert     string_to_list(\"hello world.hello world.hello world\") == [\"hello\",\"world.hello\",\"world.hello\",\"world\"], \\\n        \"Expected ['hello', 'world.hello', 'world.hello', 'world'], but got: %s\" %     (string_to_list(\"hello world.hello world.hello world\"),)\nassert     string_to_list(\"hello world.hello\") == [\"hello\",\"world.hello\"], \\\n        \"Expected ['hello', 'world.hello'], but got: %s\" %     (string_to_list(\"hello world.hello\"),)\nassert     string_to_list(\"hello world.hello world.hello\") == [\"hello\",\"world.hello\",\"world.hello\"], \\\n        \"Expected ['hello', 'world.hello', 'world.hello'], but got: %s\" %     (string_to_list(\"hello world.hello world.hello\"),)\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_list('1 2 3 4 5 6') == ['1','2','3','4','5','6']\nassert     string_to_list('1 2 3 4 5 6 7') == ['1','2','3','4','5','6','7']\nassert     string_to_list('1 2 3 4 5 6 7 8') == ['1','2','3','4','5','6','7','8']\nassert     string_to_list('1 2 3 4 5 6 7 8 9') == ['1','2','3','4','5','6','7','8','9']\nassert     string_to_list('1 2 3 4 5 6 7 8 9 10') == ['1','2','3','4','5','6','7','8','9','10']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef list_to_string(l):\n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_list('hello') == ['h','e','l','l','o']\nassert     string_to_list('hello world') == ['h','e','l','l','o','w','o','r','l','d']\nassert     string_to_list('hello world!') == ['h','e','l','l','o','w','o','r','l','d','!']\nassert     string_to_list('hello world! I am a Robot') == ['h','e','l','l','o','w','o','r','l','d','!']\nassert     string_to_list('hello world! I am a Robot!') == ['h','e','l','l','o','w','o','r','l','d','!']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_list('hello') == ['h','e','l','l','o']\nassert     string_to_list('hello world') == ['h','e','l','l','o','', 'w', 'o', 'r', 'l', 'd']\nassert     string_to_list('hello world asdf') == ['h','e','l','l','o','', 'w', 'o', 'r', 'l', 'd', 'a','s', 'f', 'e']\nassert     string_to_list('hello world asdf   ') == ['h','e','l','l','o','', 'w', 'o', 'r', 'l', 'd', 'a','s', 'f', 'e','', 'w', 'o', 'r', 'l', 'd', 'a','s', 'f', 'e']\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([2,4,8,6,1,9,10,7,4,9]) == 4\nassert     search([2,4,4,8,6,1,9,10,7,4,9]) == 4\nassert     search([2,4,4,4,8,6,1,9,10,7,4,9]) == 0\nassert     search([2,4,4,4,8,6,1,9,10,7,4,9,9]) == 9\nassert     search([2,4,4,4,8,6,1,9,10,7,4,9,10]) == 10\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([2, 3, 1, 2, 3, 5]) == 1, \"Wrong result\"\nassert     search([5, 1, 5, 5, 4, 5, 5]) == 5, \"Wrong result\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('-------------------')\n    print('Testing search()')\n    print('-------------------')\n\n    arr = [1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 188, 188, 189, 189, 190, 190, 191, 191, 192, 192, 193, 193, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 255, 255]\n    assert search(arr) == 243\n    arr = [0]\n    assert search(arr) == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([1,2,3,5,5,6,7,8,9,9]) == 5, \"Your answer is wrong.\"\nassert     search([1,1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nCreate a python program to find the position of a given element in a sorted array.\n'''\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([1,1,3,3,7,7]) == 1, \"Not expected output\"\nassert     search([2,2,2,2,3,3]) == 2, \"Not expected output\"\nassert     search([3,3,3,3,3,3]) == 3, \"Not expected output\"\nassert     search([4,4,4,4,4,4,4,4]) == 4, \"Not expected output\"\nassert     search([1,2,3,4,5,6,7]) == None, \"Not expected output\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([5,1,2,3,4,4,4]) == 4, \"Wrong result\"\nassert     search([5,1,2,3,4,4,4,5,6,7,8,9]) == 5, \"Wrong result\"\nassert     search([1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,7,7,7,8,8,8,8,9,9,9,9,9]) == 7, \"Wrong result\"\nassert     search([1,2,3,4,4,4,5,6,7,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9]) == 9, \"Wrong result\"\n\ndef is_square(n):\n    '''\n    Write a python function to check if a given number is a perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(3, 4), (6, 4), (4, 4)]) == (4 * 6, 4 * 4)\nassert     max_product_tuple([(3, 4), (6, 4), (4, 3)]) == (4 * 6, 4 * 3)\nassert     max_product_tuple([(4, 2), (6, 4), (4, 3)]) == (4 * 4, 6 * 4)\nassert     max_product_tuple([(4, 2), (6, 4), (4, 4)]) == (4 * 4, 6 * 4)\nassert     max_product_tuple([(4, 2), (6, 4), (4, 5)]) == (4 * 4, 6 * 5)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(1,2), (3,4)]) == ((3,4), (1,2)) == (24, 8)\nassert max_product_tuple([(1,2), (3,4), (5,6)]) == ((3,4), (1,2), (5,6)) == (24, 8, 12)\nassert max_product_tuple([(1,2,3), (4,5,6)]) == ((4,5,6), (1,2,3)) == (24, 8, 12)\nassert max_product_tuple([(1,2,3), (4,5,6), (5,6,7)]) == ((4,5,6), (1,2,3), (5,6,7)) == (24, 8, 12, 21)\nassert max_product_tuple([(1,2,3), (4,5,6), (5,6,7), (8,9,10)]) == ((4,5,6), (1,2,3), (5,6,7), (8,9,10)) == (24, 8, 12, 21, 288)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(5, 7), (2, 3), (3, 2), (4, 1), (-1, 2)]) == (-1, 2)\nassert     max_product_tuple([(1, 10), (0, -5), (1, -3), (3, -2), (-1, 0)]) == (-1, 0)\nassert     max_product_tuple([(1, -10), (0, -5), (1, -3), (3, -2), (-1, 0)]) == (1, -10)\nassert     max_product_tuple([(5, 1), (2, -3), (3, -2), (4, 1), (-1, 2)]) == (3, 2)\nassert     max_product_tuple([(1, 10), (0, -5), (1, -3), (3, -2), (-1, 0)]) == (1, 0)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_product_tuple([(1,2),(2,3),(3,4),(4,-1)]) == (24,12), \"First tuple has a product of 24\"\nassert max_product_tuple([(1,-2),(2,3),(3,4),(4,-1)]) == (-1,24), \"Second tuple has a product of -1\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(1, 4), (2, 8), (-5, -7), (3, 8), (7, -5), (8, -6)]) == (1, 8)\nassert max_product_tuple([(1, 3), (2, 3), (-2, 1), (1, 3), (2, 3)]) == (2, 3)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(3,-2,-1),(3,-3,-1),(3,5,2),(-3,-2,1),(-3,4,-1),(1,-2,1)]) == (10, 1)\nassert     max_product_tuple([(3,4,-5),(5,-3,-2),(-7,-2,3),(-1,3,3),(1,-3,-5),(-3,-5,4),(1,4,3),(1,2,5)]) == (-4, -3)\n\ndef max_product_set(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in set of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_product_tuple([(2, 8), (3, 5), (6, 1)]) == 32\nassert max_product_tuple([(1, 2), (5, 10), (2, 4)]) == 12\nassert max_product_tuple([(2, 8), (2, 4), (7, 5), (9, 1)]) == 132\nassert max_product_tuple([(1, 9), (2, 8), (3, 5), (6, 4)]) == 96\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1, -1), (2, 3), (4, -2), (5, 1)]) == (5, 2)\nassert     max_product_tuple([(-1, 1), (2, 3), (4, -2), (5, 1)]) == (-1, 2)\nassert     max_product_tuple([(2, -1), (3, 1), (4, -2), (5, 1)]) == (5, 1)\nassert     max_product_tuple([(1, -1), (2, 1), (4, -2), (5, 1)]) == (5, 2)\nassert     max_product_tuple([(-1, 1), (2, 3), (4, -2), (5, 1)]) == (5, -2)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(1000) == 0, \"incorrect\"\nassert     amicable_numbers_sum(10000) == 539, \"incorrect\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\namicable_numbers_sum(10) == sum([2,7,11,13,17])\nassert amicable_numbers_sum(20) == sum([2,7,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\nassert amicable_numbers_sum(100) == sum([2,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,491,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997])"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(10) == 8\nassert     amicable_numbers_sum(20) == 58\nassert     amicable_numbers_sum(50) == 62\nassert     amicable_numbers_sum(100) == 110\nassert     amicable_numbers_sum(1000) == 1072\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == 7, 'incorrect!'\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(10) ==     7 + 17 = 28\nassert     amicable_numbers_sum(25) ==     22 + 33 = 55\nassert     amicable_numbers_sum(50) ==     22 + 32 + 33 + 34 = 77\nassert     amicable_numbers_sum(100) ==     22 + 33 + 34 + 34 + 37 = 129\nassert     amicable_numbers_sum(1000) ==     22 + 33 + 34 + 34 + 37 + 42 + 47 = 1415\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(500) == 837, \"Incorrect sum of amicable numbers\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(1000) ==    233168\nassert     amicable_numbers_sum(2000) ==    302234\nassert     amicable_numbers_sum(10000) ==    555555\nassert     amicable_numbers_sum(20000) ==    7777777\nassert     amicable_numbers_sum(40000) ==    363636\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(5) == 7\nassert     amicable_numbers_sum(1000) == 483\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(50) == 220\nassert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(25) == 243\nassert     amicable_numbers_sum(30) == 468\nassert     amicable_numbers_sum(50) == 767\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(    -0.0,    1.0) == 0.0\nassert angle_complex(-1.0,    1.0) == -math.pi / 2.0\nassert angle_complex(    1.0,    1.0) == math.pi / 2.0\nassert angle_complex(    2.0,    0.0) == math.pi\nassert angle_complex(    0.0,    0.0) == 0.0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(1+2j,1+3j) == math.degrees(math.atan(2.0/3))\nassert     angle_complex(0+0j,2+0j) == math.degrees(math.atan(2.0/2))\nassert     angle_complex(0+0j,2+0j) == math.degrees(math.atan(2.0/2))\nassert     angle_complex(0+0j,2+0j) == math.degrees(math.atan(2.0/2))\nassert     angle_complex(0+0j,0+0j) == math.degrees(math.atan(2.0/2))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(1+2j, 2+2j) == math.atan(2j)\nassert     angle_complex(1+2j, 1+2j) == math.atan(1j)\nassert     angle_complex(-1-2j, -2-2j) == -math.atan(2j)\nassert     angle_complex(-1-2j, -1-2j) == -math.atan(1j)\nassert     angle_complex(-3+4j, -2+2j) == -math.atan(2j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(1,1) == 0, \"Error\"\nassert     angle_complex(2,3) == 0.5, \"Error\"\nassert     angle_complex(1,2) == 0.5, \"Error\"\nassert     angle_complex(2,3) == 0.5, \"Error\"\nassert     angle_complex(1,-1) == 0.5, \"Error\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(1,3) == 0\nassert     angle_complex(-1,1) == 1\nassert     angle_complex(3,-1) == 1\nassert     angle_complex(-1,3) == 1\nassert     angle_complex(-1,0) == 2*cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex(2+3j, 3-4j) ==  cmath.pi - 3\nassert     angle_complex(3+4j, 5-6j) == -3 + 4j\nassert     angle_complex(5+6j, 3-4j) ==  cmath.pi + 3\nassert     angle_complex(5-6j, 3+4j) == -3 - 4j\nprint (\"Pass\")\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nangle_complex(1,1) == 0\nangle_complex(1, -1) == 0\nangle_complex(1, 0) == 90\nangle_complex(-1,1) == 0\nangle_complex(-1,0) == -90\nangle_complex(0,1) == 180\nangle_complex(-1,0) == -90\nangle_complex(1,1) == 0\nangle_complex(0,1) == 90\nangle_complex(1,-1) == 0\nangle_complex(-1,-1) == 0\nangle_complex(0,-1) == 180\nangle_complex(1,-1) == -90\nangle_complex(1,0) == 90\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(-1,1) == -90\nangle_complex(0,1) == 90\nangle_complex(1,1) == 0\nangle_complex(1,0) == 90\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(-1,-1) == -90\nangle_complex(0,-1) == 180\nangle_complex(-1,-1) == 0\nangle_complex(1,-1) == 90\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -90\nangle_complex(-1,1) == -90\nangle_complex(0,1) == 0\nangle_complex(1,1) == 90\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(-1,-1) == -90\nangle_complex(0,-1) == 90\nangle_complex(1,-1) == 180\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -90\nangle_complex(-1,1) == -90\nangle_complex(0,1) == 0\nangle_complex(1,1) == 90\nangle_complex(1,0) == 180\nangle_complex(-1,0) == -180\nangle_complex(0,0) == 0\nangle_complex(1,0) == -90\nangle_complex(0,1) == 90\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0\nangle_complex(0,0) == 0"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef area_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex(1,1) == 0.0\nassert     angle_complex(1,0) == 90.0\nassert     angle_complex(1,10) == 90.0\nassert     angle_complex(1,100) == 90.0\nassert     angle_complex(1,1j) == 90.0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_length('110000') == 0\nassert     find_length('010110') == 3\nassert     find_length('1111') == 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_length('0101100') == 2\nassert     find_length('101') == 0\nassert     find_length('100') == 2\nassert     find_length('001') == 2\nassert     find_length('10101') == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclass Solution(object):\n    def findMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        '''\n        You are given an integer array nums. The unique element of an array is the minimum element in the array. Your goal is to find the maximum length of a subarray that contains only the same unique element.\n\n        For example, given the array nums = [1,2,3,2,1,4,7], the maximum length subarray is [3,2,1,4,7], because the minimum element in nums[3:5] is 1 and the maximum element in nums[4:7] is 4.\n\n        Return the maximum length of a subarray that contains only the same unique element.\n\n        You can assume that nums' length is at least 1 and each element is an integer between 0 and 100.\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_length('10100') == 1\nassert     find_length('100') == 0\nassert     find_length('10') == 1\nassert     find_length('00010') == 2\nassert     find_length('1110') == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_length('00') == 0, 'It should be 0'\nassert     find_length('0000') == 0, 'It should be 0'\nassert     find_length('11') == 1, 'It should be 1'\nassert     find_length('01') == 2, 'It should be 2'\nassert     find_length('1101') == 1, 'It should be 1'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length('0011010111')     == 4\nassert     find_length('010110111')     == 4\nassert     find_length('11111111')     == 0\nassert     find_length('1111111101111')     == -1\nassert     find_length('01101111011')     == -1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_length('1010101010') == 0\nassert     find_length('1010101010') == 0\nassert     find_length('010110011') == 1\nassert     find_length('010110011') == 1\nassert     find_length('011100001') == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_length('0101') == 4\nassert     find_length('0000') == 0\nassert     find_length('010101') == 0\nassert     find_length('01010101') == 6\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum(2,10) == 10\nassert     sum(2,5) == 7\nassert     sum(5,7) == 11\nassert     sum(7,8) == 17\nassert     sum(20,40) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum(5,8) == 0\nassert sum(10,10) == 0\nassert sum(22,8) == 2\nassert sum(11,13) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum(2,6) == 2 + 3 + 2, \"WRONG\"\nassert     sum(4,6) == 4, \"WRONG\"\nassert     sum(3,9) == 3, \"WRONG\"\nassert     sum(1000000,1000000) == 0, \"WRONG\"\nassert     sum(2333,1234) == 2333 + 2333, \"WRONG\"\nprint (\"correct\")\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sum(6,18) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nimport math\nimport random\n\ndef product(n, *args):\n    '''\n    Write a python function to find the product of the given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum(2,5) == 3, \"incorrect sum\"\nsum(3,3) == 6, \"incorrect sum\"\nsum(4,4) == 6, \"incorrect sum\"\nsum(0,5) == 0, \"incorrect sum\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_int(0, 0) == 0\nassert     multiply_int(0, 2) == 0\nassert     multiply_int(2, 2) == 4\nassert     multiply_int(2, 3) == 6\nassert     multiply_int(2, 4) == 8\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_int(3, 4) == 12\nassert     multiply_int(-5, 7) == -45\nassert     multiply_int(-5, -7) == -45\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(0, 7) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(1,2) == 2, \"You failed the test\"\n\ndef my_map(func, args):\n    '''\n    Write a function to apply a function to each element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(2, 2) == 4\nassert     multiply_int(3, 2) == 6\nassert     multiply_int(1, 2) == 2\nassert     multiply_int(0, 2) == 0\nassert     multiply_int(-2, 3) == -6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(2, 1) == 2\nassert     multiply_int(12, 12) == 144\nassert     multiply_int(12, -12) == -144\nassert     multiply_int(0, -12) == -12\nassert     multiply_int(-12, -12) == 144\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(0, 3) == 0\nassert     multiply_int(-1, 3) == -3\nassert     multiply_int(-2, -4) == -8\nassert     multiply_int(-1, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert multiply_int(12, 34) == 24\nassert multiply_int(23, 46) == 99\nassert multiply_int(47, 49) == 50\nassert multiply_int(100, 11) == 100\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_int(1, 1) == 1\nassert     multiply_int(5, 3) == 15\nassert     multiply_int(-1, 1) == -1\nassert     multiply_int(-1, -1) == -1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     long_words(3, [\"python\", \"matlab\", \"c++\", \"abcd\"]) == [\"python\", \"abcd\"]\nassert     long_words(4, [\"ab\", \"cd\", \"ef\", \"gh\", \"hgf\"]) == [\"ab\", \"cd\", \"ef\", \"gh\"]\nassert     long_words(3, [\"a\", \"aa\", \"aaa\", \"aaaa\"]) == [\"aaa\"]\n\ndef is_even(n):\n    '''\n    Write a function to find whether the given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlong_words(2, [\"go\", \"gone\", \"guild\"]) == {\"guild\", \"gone\"}\nassert \nlong_words(3, [\"go\", \"guild\"]) == {\"guild\"}\nassert \nlong_words(3, [\"gone\"]) == {\"gone\"}\nassert \nlong_words(2, [\"go\", \"gone\"]) == {\"gone\"}\n\n\ndef two_sum(numbers, target):\n    '''\n    Write a function that takes in a list of numbers and a target number.\n    Return the two numbers whose sum is equal to the target.\n    Each element in the returned array should appear as many times as it goes into the returned array.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(4, ['a','apple','banana','bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar']) == ['bar', 'bar']\nassert     long_words(4, ['a','apple','banana','bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'ba"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(3, [\"miguel\", \"pepe\", \"miguel\"]) == [\"miguel\",\"miguel\",\"pepe\"]\nassert     long_words(4, [\"python\", \"is\", \"a\", \"good\", \"language\"]) == [\"python\",\"a\"]\nassert     long_words(5, [\"my\", \"name\", \"is\", \"pepe\"]) == [\"my\",\"name\",\"pepe\"]\nassert     long_words(5, [\"my\", \"name\", \"is\", \"pepe\", \"is\"]) == [\"my\",\"name\",\"is\",\"pepe\",\"is\"]\nassert     long_words(6, [\"my\", \"name\", \"is\", \"pepe\", \"is\"]) == [\"my\",\"name\",\"is\",\"pepe\",\"is\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not long_words(4, [\"cat\", \"dogs\", \"cats\", \"for\"])\nassert not long_words(4, [\"cat\", \"dogs\", \"cat\", \"cat\"])\nassert long_words(4, [\"cat\", \"dogs\", \"cats\"])\nassert not long_words(4, [\"cat\", \"dogs\", \"cats\", \"cat\", \"cat\"])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(1, ['example', 'word', 'to', 'find']) == ['word']\nassert     long_words(2, ['example', 'word', 'to', 'find']) == ['word', 'to']\nassert     long_words(3, ['example', 'word', 'to', 'find']) == ['word', 'to', 'find']\n\ndef find_longest_word(words):\n    '''\n    Write a function to find the longest word in a list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlong_words(10, ['go', 'home', 'to', 'park', '.', 'dont', 'go', 'back']) == {'go', 'dont'}\nassert not long_words(3, ['a', 'aaaaaa', 'to', 'is', 'possible', '.']) == {'aaaaaa'}\n\n\ndef n_largest(n, nums):\n    '''\n    Write a function that returns the n largest numbers in a list in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     long_words(5,[\"a\", \"a\", \"b\", \"bb\", \"cc\"]) == [\"bb\", \"cc\"]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     magic_square_test([\n                    [8,1,6,3,5,7,4,9,2],\n                    [6,4,9,8,7,3,5,1,2],\n                    [4,7,2,1,9,6,5,3,8],\n                    [2,5,1,7,4,3,8,9,6],\n                    [8,3,4,9,5,1,7,2,6],\n                    [4,9,2,6,8,3,5,1,7],\n                    [7,5,1,8,2,6,3,4,9],\n                    [2,6,8,5,3,7,9,1,4],\n                    [3,1,4,9,6,5,2,8,7]\n                    ]) == True, 'Function does not work'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     magic_square_test([[8, 1, 6], \n                            [3, 5, 7], \n                            [4, 9, 2]]) == True, 'First'\nassert     magic_square_test([[8, 1, 6], \n                            [3, 5, 7], \n                            [4, 6, 2]]) == False, 'Second'\nassert     magic_square_test([[8, 1, 6], \n                            [3, 5, 7], \n                            [4, 9, 0]]) == False, 'Third'\nassert     magic_square_test([[1, 2, 3, 4], \n                            [5, 6, 7, 8], \n                            [9, 10, 11, 12], \n                            [13, 14, 15, 16]]) == True, 'Fourth'\nassert     magic_square_test([[1, 2, 3, 4, 5], \n                            [5, 6, 7, 8, 9], \n                            [9, 10, 11, 12, 13], \n                            [13, 14, 15, 16, 17], \n                            [17, 18, 19, 20, 21]]) == True, 'Fifth'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     magic_square_test([[2, 7, 4], \n                        [9, 5, 3], \n                        [6, 1, 8]]) == True, \\\n    'Wrong answer: Magic_square_test should return True for the following matrix, so it\\'s a magic square:\\n{}'.format([[2, 7, 4], \n                        [9, 5, 3], \n                        [6, 1, 8]])\nassert     magic_square_test([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6]]) == False, \\\n    'Wrong answer: Magic_square_test should return False for the following matrix, so it\\'s not a magic square:\\n{}'.format([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6]])\nassert     magic_square_test([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6],\n                        [1, 2, 3]]) == False, \\\n    'Wrong answer: Magic_square_test should return False for the following matrix, so it\\'s not a magic square:\\n{}'.format([[2, 7, 4], \n                        [9, 5, 3], \n                        [8, 1, 6],\n                        [1, 2, 3]])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef magic_square_test_2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_occurrences([1,1,1,2,2,2]) == 2\nassert     max_occurrences([]) == None\nassert     max_occurrences([1,1,1]) == 1\nassert     max_occurrences([1,2,1,2,2,2]) == 2\nassert     max_occurrences([1,2,1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a hashmap to store the frequency of each element\n    # O(n)\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n        # check if there is any element that has more than one occurrences. If yes return the key\n        if freq[n] > 1:\n            return n\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef generate_binary_search_tree(preorder, inorder):\n    '''\n    Given a list of numbers in preorder and inorder traversals of a binary tree,\n    generate the binary tree in postorder.\n    \n    Here is the detailed pseudocode:\n    \n    1) Calculate the length of the inorder traversal of the tree.\n    2) Using a loop, traverse the inorder traversal, and for each item, add the \n       corresponding element from the preorder traversal to the list\n       of nodes.\n       \n       Keep track of the number of nodes in the tree.\n    3) Generate the tree by assigning the left and right subtrees to the nodes \n       and assigning the parent of each node.\n       \n       Keep track of the depth.\n    4) Return the root node of the generated tree.\n    '''\n    pass\n    "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(int)\n    max_occurrences = 0\n    for num in nums:\n        occurrences[num] += 1\n        max_occurrences = max(max_occurrences, occurrences[num])\n    \n    return max_occurrences\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_occurrences([1,2,2,3,4]) == 2\nassert     max_occurrences([1,2,2,3,1,4]) == 1\nassert     max_occurrences([1,2,2,2,2,3,4]) == 2\nassert     max_occurrences([1,2,2,2,3,2,4]) == 4\nassert     max_occurrences([1,1,1,2,2,2,3,3,4,4,4,4]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_occurrences([1,3,4,5,2,3,2,5]) == 2\nassert \nmax_occurrences([1,2,2,3,2,4,2,4]) == 1\nassert \nmax_occurrences([1,2,3,4,5,5,6,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_occurrences([1,2,2,1]) == 2\nassert     max_occurrences([1,1,1,2,2,2,3,3,2,1]) == 3\nassert     max_occurrences([1,2,3,1,1,2]) == 1\nassert     max_occurrences([1]) == 1\nassert     max_occurrences([]) == None\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(reverse_vowels('abcd'))\n    print(reverse_vowels('kyuannqfj'))\n    print(reverse_vowels('abcdfgh'))\n    print(reverse_vowels('gyuannqfj'))\n    print(reverse_vowels('abcdqfgh'))\n\n    # print(reverse_vowels('abcdqfgh')"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_vowels('hello') == 'holle','should be same'\nassert     reverse_vowels('hello world') == 'dlrow olleh','should be same'\nassert     reverse_vowels('hello world!') == 'dlrow olleh!','should be same'\nassert     reverse_vowels('hello world!') == 'dlrow olleh!','should be same'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels(\"\") == \"\"\nassert     reverse_vowels(\"h\") == \"h\"\nassert     reverse_vowels(\"aeiou\") == \"oauiea\"\nassert     reverse_vowels(\"Hello World\") == \"dlrow olleH\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels('hello') == 'olleh', 'first'\nassert     reverse_vowels('world') == 'dlrow','second'\nassert     reverse_vowels('abcdef') == 'edcba', 'third'\nassert     reverse_vowels('abcd') == 'cbad', 'fourth'\nassert     reverse_vowels('aeiou') == 'uoiea', 'fifth'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nreverse_vowels(\"Hello\") == \"holle\"\nassert \nreverse_vowels(\"Hello World\") == \"dlrow olleH\"\nassert \nreverse_vowels(\"I love Python!\") == \"Python!loveloveI\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \n\nstr1 = 'Hello'\nprint(reverse_vowels(str1))\n\n\ndef reverse_vowels2(string):\n    \"\"\"Reverse vowels in a given string\"\"\"\n    vowels = 'aeiouAEIOU'\n    string = list(string)\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] in vowels and string[j] in vowels:\n            string[i], string[j] = string[j], string[i]\n        if string[i] not in vowels:\n            i += 1\n        if string[j] not in vowels:\n            j -= 1\n    return \"\".join(string)"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('leetcode') == 'leotcede'\nassert     reverse_vowels('abcd') == 'dcba'\nassert     reverse_vowels('sjnhvs') == 'vdnhsjs'\nassert     reverse_vowels('jdgnlhj') == 'hgmljdj'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels('python') == 'ytoonhpy'\nassert     reverse_vowels('i love python') == 'y loveloh pytnon'\nassert     reverse_vowels('hax0r') == 'ar0hx0r'\nassert     reverse_vowels('o*he') == '*ooh*e'\nassert     reverse_vowels('aeiou') == 'uoiea'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"Should have been 'olleh'\"\nassert     reverse_vowels(\"testing\") == \"tring\", \"Should have been 'trnging'\"\nassert     reverse_vowels(\"Apple\") == \"pple\", \"Should have been 'ppleA'\"\nassert     reverse_vowels(\"apple\") == \"pApl\", \"Should have been 'pAplE'!\"\nassert     reverse_vowels(\"\") == \"\", \"Should have been ''\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string(('one', 'two', 'three')) == 'one,two,three', \\\n    'Wrong output'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tup_string(('a','b')) == 'ab'\nassert     tup_string(('a','b','c')) == 'abc'\nassert     tup_string(('a','b','c','d')) == 'abcde'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert tup_string(('a', 'b', 'c')) == 'abc'\nassert tup_string((1,2,3)) == '123'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string(('Sid', 'Ranjan', 'Raju')) == 'Sid, Ranjan, Raju'\nassert     tup_string(('Sid', 'Ranjan', 'Raju', 'Arya')) == 'Sid, Ranjan, Raju, Arya'\nassert     tup_string(('Sid', 'Ranjan', 'Raju', 'Arya', 'Kakun')) == 'Sid, Ranjan, Raju, Arya, Kakun'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3', 'incorrect'\nassert     tup_string((1,2,3,4)) == '1,2,3,4', 'incorrect'\nassert     tup_string((1,2,3,4,5)) == '1,2,3,4,5', 'incorrect'\nassert     tup_string((1,2,3,4,5,6)) == '1,2,3,4,5,6', 'incorrect'\n\ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to an integer.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string(('p','r','o','b','l','e')) == 'ple'\nassert     tup_string(('g', 'e', 'e', 'k','s', 'p', 'r', 'i', 'c', 't')) == 'geek'\nassert     tup_string(('a', 'b', 'c', 'd', 'e')) == 'abcde'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(tup_string((1, 2, 3))) # '1 2 3'\n\ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(tup1)) # must write str()\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string(('a', 'b', 'c')) == 'abc'\nassert     tup_string(('g', 'h', 'i')) == 'ghhi'\nassert     tup_string(('p', 'q', 'r')) == 'pqpr'\nassert     tup_string(('o', 'n','m')) == 'onm'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((1,2,3,4,5)) == '1,2,3,4,5', 'incorrect'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tup_string((1, 2)) == '1, 2'\nassert     tup_string((2, 3)) == '2, 3'\n\n'''\nWrite a function to add two tuples element-wise.\n'''\n\ndef add_tuple(tup1, tup2):\n    '''\n    Write a function to add two tuples element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_negativenum([1,2,3,4]) == -1\nassert sum_negativenum([1,-2,-3,-4]) == -6\nassert sum_negativenum([-1,2,-3,-4]) == 4\nassert sum_negativenum([1,-2,3,-4]) == -5\nassert sum_negativenum([-1,-2,-3,-4]) == -5\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([-2, -1, -3, -4]) == -1\nassert     sum_negativenum([-2, 1, 2, 4]) == 3\nassert     sum_negativenum([1]) == 1\nassert     sum_negativenum([]) == 0"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_negativenum([-1, -2, -3]) == -1\nassert     sum_negativenum([-10, -20, -30]) == -30\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1]) == -1\nassert     sum_negativenum([-1, 2]) == -1\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_negativenum([1, 2, 3, 4, -5]) == 0, \"the expected value should be 0\"\nassert     sum_negativenum([5, -4, -3, -2, -1]) == -1, \"the expected value should be -1\"\nassert     sum_negativenum([-4, -3, -2, -1]) == -3, \"the expected value should be -3\"\nassert     sum_negativenum([-2, -3, -4, -5, 6]) == -7, \"the expected value should be -7\"\nassert     sum_negativenum([1, 2, 3, -4, -5]) == -6, \"the expected value should be -6\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -1\nassert     sum_negativenum([-5, -4, -3, -2, -1]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -5\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7]) == -1\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_negativenum([1,2,-3,4,5]) == 2\nassert     sum_negativenum([-1,-2,-3,-4,-5]) == -1\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1,1,2,3,4,5]) == -1"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -6, \"this should be -6\"\nassert     sum_negativenum([1, 2, 3, 4, 5, 6]) == -15, \"this should be -15\"\nassert     sum_negativenum([-3, -5, -9, -11, -13]) == -32, \"this should be -32\"\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == 0, \"this should be 0\"\nassert     sum_negativenum([]) == 0, \"this should be 0\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([-2,1,-3,4,-1,2,1,-5,4]) == 5\nassert     sum_negativenum([-2,1,-3,4,-1,2,1,-5]) == 0\nassert     sum_negativenum([-2,1,-3,4,-1,2,1,-5,-2,-4,1,-5,2,-4,1,2,1,-5,4]) == 0\nassert     sum_negativenum([-2,-1,-3,4,-1,2,1,-5,4]) == -7\nassert     sum_negativenum([1,-2,-3,4,-1,2,1,-5,4]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([1,2,-3,4,-5]) == 2\nassert     sum_negativenum([1,-2,3,-4,5]) == -7\nassert     sum_negativenum([-1,-2,3,-4,5]) == 0\nassert     sum_negativenum([-1,-2,-3,-4,-5]) == -10\nassert     sum_negativenum([-1,2,3,4,5]) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhexagonal_num(1) == 0\nhexagonal_num(2) == 1\nhexagonal_num(3) == 5\nhexagonal_num(4) == 15\nhexagonal_num(5) == 30\nhexagonal_num(6) == 56\nhexagonal_num(7) == 119\nhexagonal_num(8) == 220\nhexagonal_num(9) == 463\nhexagonal_num(10) == 1728\nhexagonal_num(11) == 6776\nhexagonal_num(12) == 33544\nhexagonal_num(13) == 18446744073709551616\nhexagonal_num(14) == 674204592482051302519927168\nhexagonal_num(15) == 21474836480000000000000000\n\nhexagonal_num(16) == 6915162445952958722286484154537377261664\nhexagonal_num(17) == 10989103857024349629731354148943491766784\nhexagonal_num(18) == 5048480230957489094446478556056835064608\nhexagonal_num(19) == 148974881245578533656855992352469683568\nhexagonal_num(20) == 9581617385800706931845955939866415835625\nhexagonal_num(21) == 59749174446327691183806436305094369939193\nhexagonal_num(22) == 7550169296510553847872794766871248657896\nhexagonal_num(23) == 78602423375748373760921651949238201494028\nhexagonal_num(24) == 8626554182377703099310264100135070076959\nhexagonal_num(25) == 90604477310603369741553537205564372409275\nhexagonal_num(26) == 97327397504457450778501610961426597624\nhexagonal_num(27) == 119857412041137689025808935348811184843\nhexagonal_num(28) == 1319412657878248947741151837966223974135\nhexagonal_num(29) == 154995744749589932965925689408870299945\nhexagonal_num(30) == 167179172489693129832218969169238345\nhexagonal_num(31) == 18920671579071566741579161256392781369134\nhexagonal_num(32) == 194995744749589932965925689408870299945\nhexagonal_num(33) == 19477123711935789907857864556856148944\nhexagonal_num(34) == 1962717163492065517271028229933773660\nhexagonal_num(35) == 19677123711935789907857864556856148944\nhexagonal_num(36) == 1973980340283569641490259914798939930\nhexagonal_num(37) == 1978491277272988649498129976231877525\nhexagonal_num(38) == 2019101651438759474864996399585072375\nhexagonal_num(39) == 2068503912348318519125198259930398147\nhexagonal_num(40) == 20510981749178212013826391338400419145\nhexagonal_num(41) == 205720354090199862541766559955820391844\nhexagonal_num(42) == 20618351587641669304714194939131566483\nhexagonal_num(43) == 20659437114795446436869873024060016128\nhexagonal_num(44) == 2073854342041293928806594354405777199\nhexagonal_num(45) == 2076662827115960792388011219939609986\nhexagonal_num(46) == 208489974290590603909781821575552339\nhexagonal_num(47) == 20870352562149412559637962925069375\nhexagonal_num(48) == 209142059644093466260133791830181808\nhexagonal_num(49) == 20958700295599105465012276138895845\nhexagonal_num(50) == 210106950127739004091506150835672640\nhexagonal_num(51) == 21172417506885083682246091167401766\nhexagonal_num(52) == 21278877516991623004174787252735579\nhexagonal_num(53) == 21248241125728782467680199004499096\nhexagonal_num(54) == 212794152801459014890022562030013\nhexagonal_num(55) == 2131766008860202855424592074524216\nhexagonal_num(56) == 21368869637512983209481779313209937\nhexagonal_num(57) == 2140028206955077703865284875364524\nhexagonal_num(58) == 2141766008860202855424592074524216\nhexagonal_num(59) == 2142280287439576029440014008887249\nhexagonal_num(60) == 214367968831316368816157586552365\nhexagonal_num(61) == 214417983958632743231858462108727\nhexagonal_num(62) == 2146706532386265699396055642848\nhexagonal_num(63) == 2146889725280017109099874770916\nhexagonal_num(64) == 2147900396767979490061708299327\nhexagonal_num(65) == 214896602938998513883929590921\nhexagonal_num(66) == 214887739069572894801364827250\nhexagonal_num(67) == 21497693132691729508174816\nhexagonal_num(68) == 2150028206955077703865284875364524\nhexagonal_num(69) == 215169265102513902710820465337\nhexagonal_num(70) == 2152363707465500082979595699\nhexagonal_num(71) == 215338624124555345652163306\nhexagonal_num(72) == 21547169840876448493688982297\nhexagonal_num(73) == 2155916485624421875606008200\nhexagonal_num(74) == 2156932183415421875606008200\nhexagonal_num(75) == 215771680732514993958783714\nhexagonal_num(76) == 2157988489969872734818492818\nhexagonal_num(77) == 215887093268287435931852532\nhexagonal_num(78) == 21589779344185318092746066\nhexagonal_num(79) == 2158977025911914062569863\nhexagonal_num(80) == 2158977025911914062569863\nhexagonal_num(81) == 2158977025911914062569863\nhexagonal_num(82) == 2158977025911914062569863\nhexagonal_num(83) == 2158977025911914062569863\nhexagonal_num(84) == 2158977025911914062569863\nhexagonal_num(85) == 2158977025911914062569863\nhexagonal_num(86) == 2158977025911914062569863\nhexagonal_num(87) == 2158977025911914062569863\nhexagonal_num(88) == 2158977025911914062569863\nhexagonal_num(89) == 2158977025911914062569863\nhexagonal_num(90) == 21"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhexagonal_num(5) == 1"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 27\nassert     hexagonal_num(4) == 225\nassert     hexagonal_num(5) == 286\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     hexagonal_num(1) == 3 \nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 7\nassert     hexagonal_num(4) == 11\nassert     hexagonal_num(5) == 13\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhexagonal_num(1) == 1\nassert hexagonal_num(2) == 3\nassert hexagonal_num(3) == 5\nassert hexagonal_num(4) == 7\nassert hexagonal_num(5) == 13\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef hexagonal_num_opt(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hexagonal_num(1) == 1\nassert hexagonal_num(2) == 5\nassert hexagonal_num(3) == 14\nassert hexagonal_num(4) == 24\nassert hexagonal_num(5) == 44\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    hexagonal_num(1) == 3\n    hexagonal_num(2) == 5\n    hexagonal_num(3) == 7\n    hexagonal_num(4) == 11\n    hexagonal_num(5) == 13\n    hexagonal_num(6) == 15\n    hexagonal_num(7) == 19\n    hexagonal_num(8) == 23\n    hexagonal_num(9) == 29\n    hexagonal_num(10) == 31\n    hexagonal_num(11) == 37\n    hexagonal_num(12) == 41\n    hexagonal_num(13) == 43\n    hexagonal_num(14) == 47\n    hexagonal_num(15) == 49\n    hexagonal_num(16) == 51\n    hexagonal_num(17) == 53\n    hexagonal_num(18) == 55\n    hexagonal_num(19) == 57\n    hexagonal_num(20) == 59\n    hexagonal_num(21) == 61\n    hexagonal_num(22) == 63\n    hexagonal_num(23) == 65\n    hexagonal_num(24) == 67\n    hexagonal_num(25) == 69\n    hexagonal_num(26) == 71\n    hexagonal_num(27) == 73\n    hexagonal_num(28) == 75\n    hexagonal_num(29) == 77\n    hexagonal_num(30) == 79\n    hexagonal_num(31) == 81\n    hexagonal_num(32) == 83\n    hexagonal_num(33) == 85\n    hexagonal_num(34) == 87\n    hexagonal_num(35) == 89\n    hexagonal_num(36) == 91\n    hexagonal_num(37) == 93\n    hexagonal_num(38) == 95\n    hexagonal_num(39) == 97\n    hexagonal_num(40) == 99\n    hexagonal_num(41) == 101\n    hexagonal_num(42) == 103\n    hexagonal_num(43) == 105\n    hexagonal_num(44) == 107\n    hexagonal_num(45) == 109\n    hexagonal_num(46) == 111\n    hexagonal_num(47) == 113\n    hexagonal_num(48) == 115\n    hexagonal_num(49) == 117\n    hexagonal_num(50) == 119\n    hexagonal_num(51) == 121\n    hexagonal_num(52) == 123\n    hexagonal_num(53) == 125\n    hexagonal_num(54) == 127\n    hexagonal_num(55) == 129\n    hexagonal_num(56) == 131\n    hexagonal_num(57) == 133\n    hexagonal_num(58) == 135\n    hexagonal_num(59) == 137\n    hexagonal_num(60) == 139\n    hexagonal_num(61) == 141\n    hexagonal_num(62) == 143\n    hexagonal_num(63) == 145\n    hexagonal_num(64) == 147\n    hexagonal_num(65) == 149\n    hexagonal_num(66) == 151\n    hexagonal_num(67) == 153\n    hexagonal_num(68) == 155\n    hexagonal_num(69) == 157\n    hexagonal_num(70) == 159\n    hexagonal_num(71) == 161\n    hexagonal_num(72) == 163\n    hexagonal_num(73) == 165\n    hexagonal_num(74) == 167\n    hexagonal_num(75) == 169\n    hexagonal_num(76) == 171\n    hexagonal_num(77) == 173\n    hexagonal_num(78) == 175\n    hexagonal_num(79) == 177\n    hexagonal_num(80) == 179\n    hexagonal_num(81) == 181\n    hexagonal_num(82) == 183\n    hexagonal_num(83) == 185\n    hexagonal_num(84) == 187\n    hexagonal_num(85) == 189\n    hexagonal_num(86) == 191\n    hexagonal_num(87) == 193\n    hexagonal_num(88) == 195\n    hexagonal_num(89) == 197\n    hexagonal_num(90) == 199\n    hexagonal_num(91) == 201\n    hexagonal_num(92) == 203\n    hexagonal_num(93) == 205\n    hexagonal_num(94) == 207\n    hexagonal_num(95) == 209\n    hexagonal_num(96) == 211\n    hexagonal_num(97) == 213\n    hexagonal_num(98) == 215\n    hexagonal_num(99) == 217\n    hexagonal_num(100) == 219\n    hexagonal_num(101) == 221\n    hexagonal_num(102) == 223\n    hexagonal_num(103) == 225\n    hexagonal_num(104) == 227\n    hexagonal_num(105) == 229\n    hexagonal_num(106) == 231\n    hexagonal_num(107) == 233\n    hexagonal_num(108) == 235\n    hexagonal_num(109) == 237\n    hexagonal_num(110) == 239\n    hexagonal_num(111) == 241\n    hexagonal_num(112) == 243\n    hexagonal_num(113) == 245\n    hexagonal_num(114) == 247\n    hexagonal_num(115) == 249\n    hexagonal_num(116) == 251\n    hexagonal_num(117) == 253\n    hexagonal_num(118) == 255\n    hexagonal_num(119) == 257\n    hexagonal_num(120) == 259\n    hexagonal_num(121) == 261\n    hexagonal_num(122) == 263\n    hexagonal_num(123) == 265\n    hexagonal_num(124) == 267\n    hexagonal_num(125) == 269\n    hexagonal_num(126) == 271\n    hexagonal_num(127) == 273\n    hexagonal_num(128) == 275\n    hexagonal_num(129) == 277\n    hexagonal_num(130) == 279\n    hexagonal_num(131) == 281\n    hexagonal_num(132) == 283\n    hexagonal_num(133) == 285\n    hexagonal_num(134) == 287\n    hexagonal_num(135) == 289\n    hexagonal_num(136) == 291\n    hexagonal_num(137) == 293\n    hexagonal_num(138) == 295\n    hexagonal_num(139) == 297\n    hexagonal_num(140) == 299\n    hexagonal_num(141) == 301\n    hexagonal_num(142) == 303\n    hexagonal_num(143) == 305\n    hexagonal_num(144) == 307\n    hexagonal_num(145) == 309\n    hexagonal_num(146) == 311\n    hexagonal_num(147) == 313\n    hexagonal_num(148) == 315\n    hexagonal_num(149) == 317\n    hexagonal_num(150) == 319\n    hexagonal_num(151) == 321\n    hexagonal_num(152) == 323\n    hexagonal_num(153) == 325\n    hexagonal_num(154) == 327\n    hexagonal_num(155) == 329\n    hexagonal_num(156) == 331\n    hexagonal_num(157) == 333\n    hexagonal_num(158) == 335\n    hexagonal_num(159) == 337\n    hexagonal_num(160) == 339\n    hexagonal_num(161) == 341\n    hexagonal_num(162) == 343\n    hexagonal_num(163) == 345\n    hexagonal_num(164) == 347\n    hexagonal_num(165) == 349\n    hexagonal_num(166) == 351\n    hexagonal_num(167) == 353\n    hexagonal_num(168) == 355\n    hexagonal_num(169) == 357\n    hexagonal_num(170) == 359\n    hexagonal_num(171) == 361\n    hexagonal_num(172) == 363\n    hexagonal_num(173) == 365\n    hexagonal_num(174) == 367\n    hexagonal_num(175) == 369\n    hexagonal_num(176) == 371\n    hexagonal_num(177) == 373\n    hexagonal_num(178) == 375\n    hexagonal_num(179) == 377\n    hexagonal_num(180) == 379\n    hexagonal_num(181) == 381\n    hexagonal_num(18"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef multi_zero_count(nums):\n    '''\n    Write a function to find the ratio of the number of zeroes multiplied by the number of non-zeroes in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([0,1,0,3,12]) == 0.75, \"The result is wrong.\"\nassert     zero_count([0,0,1,1,1,0,0,0]) == 1.0, \"The result is wrong.\"\nassert     zero_count([0,1,0,3,12,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1]) == 1.0, \"The result is wrong.\"\nassert     zero_count([0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1]) == 1.0, \"The result is wrong.\"\nassert     zero_count([1,1,0,1,1,0,1,1,1,1]) == 1.0, \"The result is wrong.\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nnums = array('i', [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])\nprint(f'nums: {nums}')\nprint(f'zero_count(nums): {zero_count(nums)}')\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i, j = 0, 0\n    count = 0\n    while j < len(nums):\n        if nums[j] == 0:\n            count += 1\n        i += 1\n        j += 1\n    return count / i\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     zero_count([]) == 0, \"Empty array\"\nassert     zero_count([1,0]) == 1, \"One zeros\"\nassert     zero_count([0,1]) == 1, \"One non-zero\"\nassert     zero_count([0,1,0]) == 2, \"Two zeros\"\n\ndef count_zeros(nums):\n    '''\n    Write a function to count the number of zeros in an array of integers.\n    '''\n    # convert the array to list\n    nums = list(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_max(nums):\n    '''\n    Write a function to find the maximum element in an array.\n    '''\n    max_ = float('-inf')\n    for num in nums:\n        if num > max_:\n            max_ = num\n    return max_\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([0, 0, 0, 1, 0, 1, 0, 0, 0, 0]) == 0.25, \"FAILED\"\nassert     zero_count([0, 0, 0, 1, 0, 0, 0, 0, 0, 0]) == 0.25, \"FAILED\"\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0.25, \"FAILED\"\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 1]) == 0.75, \"FAILED\"\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 1, 0]) == 0.5, \"FAILED\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([0,0,1,0,1,1]) == 0.25, \"Should be 0.25\"\nassert     zero_count([0,0,1,0,1,1,0,1,0,0,1]) == 0.5, \"Should be 0.5\"\nassert     zero_count([0,0,0,1,1,1,0,1,0,1]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     zero_count([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_Sum_Of_Powers_Of_Two(4) == True\nassert is_Sum_Of_Powers_Of_Two(12) == True\nassert is_Sum_Of_Powers_Of_Two(42) == False\nassert is_Sum_Of_Powers_Of_Two(4) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False, \"should be False\"\nassert     is_Sum_Of_Powers_Of_Two(10) == True, \"should be True\"\nassert     is_Sum_Of_Powers_Of_Two(12) == False, \"should be False\"\nassert     is_Sum_Of_Powers_Of_Two(128) == True, \"should be True\"\nassert     is_Sum_Of_Powers_Of_Two(12) == False, \"should be False\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nis_Sum_Of_Powers_Of_Two(4)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_Sum_Of_Powers_Of_Two(1) == False\n    is_Sum_Of_Powers_Of_Two(2) == True\n    is_Sum_Of_Powers_Of_Two(3) == False\n    is_Sum_Of_Powers_Of_Two(4) == True\n    is_Sum_Of_Powers_Of_Two(5) == False\n    is_Sum_Of_Powers_Of_Two(6) == True\n    is_Sum_Of_Powers_Of_Two(7) == True\n    is_Sum_Of_Powers_Of_Two(8) == False\n    is_Sum_Of_Powers_Of_Two(9) == False\n    is_Sum_Of_Powers_Of_Two(10) == False\n    is_Sum_Of_Powers_Of_Two(11) == True\n    is_Sum_Of_Powers_Of_Two(12) == True\n    is_Sum_Of_Powers_Of_Two(13) == False\n    is_Sum_Of_Powers_Of_Two(14) == False\n    is_Sum_Of_Powers_Of_Two(15) == False\n    is_Sum_Of_Powers_Of_Two(16) == True\n    is_Sum_Of_Powers_Of_Two(17) == True\n    is_Sum_Of_Powers_Of_Two(18) == False\n    is_Sum_Of_Powers_Of_Two(19) == True\n    is_Sum_Of_Powers_Of_Two(20) == False\n    is_Sum_Of_Powers_Of_Two(21) == True\n    is_Sum_Of_Powers_Of_Two(22) == False\n    is_Sum_Of_Powers_Of_Two(23) == False\n    is_Sum_Of_Powers_Of_Two(24) == False\n    is_Sum_Of_Powers_Of_Two(25) == True\n    is_Sum_Of_Powers_Of_Two(26) == False\n    is_Sum_Of_Powers_Of_Two(27) == True\n    is_Sum_Of_Powers_Of_Two(28) == True\n    is_Sum_Of_Powers_Of_Two(29) == False\n    is_Sum_Of_Powers_Of_Two(30) == True\n    is_Sum_Of_Powers_Of_Two(31) == True\n    is_Sum_Of_Powers_Of_Two(32) == True\n    is_Sum_Of_Powers_Of_Two(33) == True\n    is_Sum_Of_Powers_Of_Two(34) == True\n    is_Sum_Of_Powers_Of_Two(35) == True\n    is_Sum_Of_Powers_Of_Two(36) == True\n    is_Sum_Of_Powers_Of_Two(37) == True\n    is_Sum_Of_Powers_Of_Two(38) == True\n    is_Sum_Of_Powers_Of_Two(39) == True\n    is_Sum_Of_Powers_Of_Two(40) == False\n    is_Sum_Of_Powers_Of_Two(41) == True\n    is_Sum_Of_Powers_Of_Two(42) == True\n    is_Sum_Of_Powers_Of_Two(43) == False\n    is_Sum_Of_Powers_Of_Two(44) == False\n    is_Sum_Of_Powers_Of_Two(45) == True\n    is_Sum_Of_Powers_Of_Two(46) == False\n    is_Sum_Of_Powers_Of_Two(47) == True\n    is_Sum_Of_Powers_Of_Two(48) == False\n    is_Sum_Of_Powers_Of_Two(49) == False\n    is_Sum_Of_Powers_Of_Two(50) == False\n    is_Sum_Of_Powers_Of_Two(51) == False\n    is_Sum_Of_Powers_Of_Two(52) == True\n    is_Sum_Of_Powers_Of_Two(53) == False\n    is_Sum_Of_Powers_Of_Two(54) == False\n    is_Sum_Of_Powers_Of_Two(55) == False\n    is_Sum_Of_Powers_Of_Two(56) == False\n    is_Sum_Of_Powers_Of_Two(57) == True\n    is_Sum_Of_Powers_Of_Two(58) == False\n    is_Sum_Of_Powers_Of_Two(59) == True\n    is_Sum_Of_Powers_Of_Two(60) == False\n    is_Sum_Of_Powers_Of_Two(61) == False\n    is_Sum_Of_Powers_Of_Two(62) == False\n    is_Sum_Of_Powers_Of_Two(63) == True\n    is_Sum_Of_Powers_Of_Two(64) == False\n    is_Sum_Of_Powers_Of_Two(65) == False\n    is_Sum_Of_Powers_Of_Two(66) == True\n    is_Sum_Of_Powers_Of_Two(67) == True\n    is_Sum_Of_Powers_Of_Two(68) == True\n    is_Sum_Of_Powers_Of_Two(69) == True\n    is_Sum_Of_Powers_Of_Two(70) == True\n    is_Sum_Of_Powers_Of_Two(71) == False\n    is_Sum_Of_Powers_Of_Two(72) == True\n    is_Sum_Of_Powers_Of_Two(73) == True\n    is_Sum_Of_Powers_Of_Two(74) == True\n    is_Sum_Of_Powers_Of_Two(75) == True\n    is_Sum_Of_Powers_Of_Two(76) == False\n    is_Sum_Of_Powers_Of_Two(77) == True\n    is_Sum_Of_Powers_Of_Two(78) == True\n    is_Sum_Of_Powers_Of_Two(79) == True\n    is_Sum_Of_Powers_Of_Two(80) == True\n    is_Sum_Of_Powers_Of_Two(81) == True\n    is_Sum_Of_Powers_Of_Two(82) == True\n    is_Sum_Of_Powers_Of_Two(83) == True\n    is_Sum_Of_Powers_Of_Two(84) == True\n    is_Sum_Of_Powers_Of_Two(85) == False\n    is_Sum_Of_Powers_Of_Two(86) == True\n    is_Sum_Of_Powers_Of_Two(87) == False\n    is_Sum_Of_Powers_Of_Two(88) == False\n    is_Sum_Of_Powers_Of_Two(89) == False\n    is_Sum_Of_Powers_Of_Two(90) == False\n    is_Sum_Of_Powers_Of_Two(91) == True\n    is_Sum_Of_Powers_Of_Two(92) == True\n    is_Sum_Of_Powers_Of_Two(93) == True\n    is_Sum_Of_Powers_Of_Two(94) == True\n    is_Sum_Of_Powers_Of_Two(95) == True\n    is_Sum_Of_Powers_Of_Two(96) == True\n    is_Sum_Of_Powers_Of_Two(97) == True\n    is_Sum_Of_Powers_Of_Two(98) == True\n    is_Sum_Of_Powers_Of_Two(99) == False\n    is_Sum_Of_Powers_Of_Two(100) == False\n    is_Sum_Of_Powers_Of_Two(101) == False\n    is_Sum_Of_Powers_Of_Two(102) == False\n    is_Sum_Of_Powers_Of_Two(103) == True\n    is_Sum_Of_Powers_Of_Tw"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(1) == False\nis_Sum_Of_Powers_Of_Two(3) == True\nis_Sum_Of_Powers_Of_Two(10) == True\nis_Sum_Of_Powers_Of_Two(21) == False\nis_Sum_Of_Powers_Of_Two(15) == True\nis_Sum_Of_Powers_Of_Two(27) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(2) == True\nassert \nis_Sum_Of_Powers_Of_Two(6) == False\nassert \nis_Sum_Of_Powers_Of_Two(3) == True\nassert \nis_Sum_Of_Powers_Of_Two(7) == True\nassert \nis_Sum_Of_Powers_Of_Two(12) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(17)     == True,     '17 is Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(11)     == False, '11 is not Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(3)     == False, '3 is not Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(17)     == False, '17 is not Sum of power of 2'\nassert     is_Sum_Of_Powers_Of_Two(11)     == False, '11 is not Sum of power of 2'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_Sum_Of_Powers_Of_Two(-1)\nassert not is_Sum_Of_Powers_Of_Two(0)\nassert is_Sum_Of_Powers_Of_Two(1)\nassert is_Sum_Of_Powers_Of_Two(2)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4) == True, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(8) == False, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(9) == True, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(10) == False, 'Wrong'\nassert     is_Sum_Of_Powers_Of_Two(11) == True, 'Wrong'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Sum_Of_Powers_Of_Two_v2(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    circle_circumference(0) == 0, \"circle_circumference(0)\"\n    circle_circumference(1) == pi, \"circle_circumference(1)\"\n    circle_circumference(2) == pi*2, \"circle_circumference(2)\"\n    circle_circumference(3) == pi*2*3, \"circle_circumference(3)\"\n    circle_circumference(4) == pi*2*3*4, \"circle_circumference(4)\"\n    circle_circumference(5) == pi*2*3*4*5, \"circle_circumference(5)\"\n    circle_circumference(6) == pi*2*3*4*5*6, \"circle_circumference(6)\"\n    circle_circumference(7) == pi*2*3*4*5*6*7, \"circle_circumference(7)\"\n    circle_circumference(8) == pi*2*3*4*5*6*7*8, \"circle_circumference(8)\"\n    circle_circumference(9) == pi*2*3*4*5*6*7*8*9, \"circle_circumference(9)\"\n    circle_circumference(10) == pi*2*3*4*5*6*7*8*9*10, \"circle_circumference(10)\"\n    circle_circumference(11) == pi*2*3*4*5*6*7*8*9*10*11, \"circle_circumference(11)\"\n    circle_circumference(12) == pi*2*3*4*5*6*7*8*9*10*11*12, \"circle_circumference(12)\"\n    circle_circumference(13) == pi*2*3*4*5*6*7*8*9*10*11*12*13, \"circle_circumference(13)\"\n    circle_circumference(14) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14, \"circle_circumference(14)\"\n    circle_circumference(15) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15, \"circle_circumference(15)\"\n    circle_circumference(16) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16, \"circle_circumference(16)\"\n    circle_circumference(17) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17, \"circle_circumference(17)\"\n    circle_circumference(18) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18, \"circle_circumference(18)\"\n    circle_circumference(19) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19, \"circle_circumference(19)\"\n    circle_circumference(20) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20, \"circle_circumference(20)\"\n    circle_circumference(21) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21, \"circle_circumference(21)\"\n    circle_circumference(22) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22, \"circle_circumference(22)\"\n    circle_circumference(23) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23, \"circle_circumference(23)\"\n    circle_circumference(24) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24, \"circle_circumference(24)\"\n    circle_circumference(25) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25, \"circle_circumference(25)\"\n    circle_circumference(26) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26, \"circle_circumference(26)\"\n    circle_circumference(27) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27, \"circle_circumference(27)\"\n    circle_circumference(28) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28, \"circle_circumference(28)\"\n    circle_circumference(29) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29, \"circle_circumference(29)\"\n    circle_circumference(30) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30, \"circle_circumference(30)\"\n    circle_circumference(31) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31, \"circle_circumference(31)\"\n    circle_circumference(32) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32, \"circle_circumference(32)\"\n    circle_circumference(33) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32*33, \"circle_circumference(33)\"\n    circle_circumference(34) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32*33*34, \"circle_circumference(34)\"\n    circle_circumference(35) == pi*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32*33*34*35, \"circle_circumference(35)\"\n    circle_circumference(36) == pi*2*3*"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert circle_circumference(4) == 12.566370614359172, 'Testing fails'"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circle_circumference(1) == 3.141592653589793\nassert circle_circumference(2) == 12.566370614359172\nassert circle_circumference(3) == 15.241379310343505\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncircle_circumference(0.5) == 5.1270951772\nassert circle_circumference(2) == 14.25\nassert circle_circumference(4) == 22.636363636\nassert circle_circumference(8) == 40.0833333333\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circle_circumference(1) == pi * 2, 'incorrect circumference'\nassert     circle_circumference(2) == pi * 4, 'incorrect circumference'\nassert     circle_circumference(0) == pi, 'incorrect circumference'\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(1) ==  3.141592653589793\nassert     circle_circumference(2) ==  9.27741935483871\n\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert circle_circumference(2) == math.pi*2\nassert circle_circumference(0) == math.pi\nassert circle_circumference(5) == 2*math.pi*5\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \nassert not circle_circumference(1)\nassert not circle_circumference(2)\nassert not circle_circumference(0)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncircle_circumference(2) == 5.61\nassert\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_singly([[1,2,3],[4,5],[6]])==[1,2,3,4,5,6], \"extract_singly failed\"\nassert     extract_singly([[1,2,3,4],[5,6]])==[1,2,3,4,5,6], \"extract_singly failed\"\nassert     extract_singly([[1,2,3,4,5],[6,7]])==[1,2,3,4,5,6,7], \"extract_singly failed\"\nassert     extract_singly([[1,2,3,4,5,6,7],[8,9,10]])==[1,2,3,4,5,6,7,8,9,10], \"extract_singly failed\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[1],2,3]) == 1\nassert     extract_singly([[1,2,3]]) == 1\nassert     extract_singly([[1,2,3],2]) == 1\nassert     extract_singly([[1,2,3],[1,2,3]]) == 1\nassert     extract_singly([[1],[2,3],[4],[5,6,7]]) == 1\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1,2],[3,4]]) == [1,2,3,4]\nassert     extract_singly([[1,2,3,4],[5,6,7,8]]) == [1,2,3,4,5,6,7,8]\nassert     extract_singly([[1,2,3],[4,5,6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2,3,4],[5,6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2,3],[4,5,6,7,8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert     extract_singly([[1, 2, 3], [4, 5, 6], []]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2, 3], [4, 5, 6]]) == {1, 2, 3, 4, 5, 6}\n\n\ndef flatten_rec(test_list):\n    '''\n    Write a recursive function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[1,2,3], [4,5,6], [7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12,13]]) == set([1,2,3,4,5,6,7,8,9,10,11,12,13])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     extract_singly([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('correct')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1,2], [3], [[4]]]) == set([1,2,3,4])\nassert     extract_singly([[1], [2], [3]]) == set([1,2,3])\nassert     extract_singly([[1,2], [3], [4]]) == set([1,2,3,4])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef flatten_list_of_lists(lst):\n    '''\n    Write a function to flatten a list of lists into a single list of numbers.\n    '''\n    pass"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[1,2,3],2,3]) == 3, \"Should be 3\"\nassert     extract_singly([[1,2,3],2]) == 3, \"Should be 3\"\nassert     extract_singly([1,2,3]) == 3, \"Should be 3\"\nassert     extract_singly([1,2]) == 2, \"Should be 2\"\nassert     extract_singly([]) == 0, \"Should be 0\""
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('  *** Pancake Sort Test ***')\nnums = [3,2,4,1]\npancake_sort(nums)\nassert nums == [1,2,3,4]\nprint('passed')\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([3]) == [3]\nassert     pancake_sort([4,1,2]) == [1,2,4]\nassert     pancake_sort([4,3,2,1]) == [1,2,3,4]\n\n\ndef pancake_sort2(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        max_element_idx = nums.index(max(nums[0:i+1]))\n        nums.insert(max_element_idx+1, nums.pop(i))\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pancake_sort([3,2,1]) == [1,2,3], \"pancake_sort\"\nassert     pancake_sort([3,2,1,4]) == [1,2,3,4], \"pancake_sort\"\nassert     pancake_sort([1,2,3]) == [1,2,3], \"pancake_sort\"\nassert     pancake_sort([1,2,3,4]) == [1,2,3,4], \"pancake_sort\"\nassert     pancake_sort([0,1,2,3,4]) == [0,1,2,3,4], \"pancake_sort\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert pancake_sort([2, 1, 4, 3]) == [4, 3, 2, 1]\nassert pancake_sort([4, 1, 3, 2]) == [2, 1, 3, 4]\nassert pancake_sort([3, 2, 1]) == [1, 2, 3]\nassert pancake_sort([1, 2, 3]) == [3, 2, 1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not \nassert pancake_sort([3, 5, 2, 1, 4]) == [1, 2, 3, 4, 5]\nassert pancake_sort([3, 5, 2, 1, 4, 7, 6]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([1]) == [1]\nassert     pancake_sort([3,2,4]) == [2,3,4]\nassert     pancake_sort([3,2,4,5,6]) == [3,6,5,4,2]\nassert     pancake_sort([1,2,3,4,5]) == [2,1,4,5,3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Test case 1:')\nlist1 = ['a','b','c','b','c','d']\nlist2 = ['a','a','b','d']\nlist3 = ['a','b','a','c','c','b','d','c']\nprint(count_samepair(list1,list2,list3))\n\nassert\nprint('Test case 2:')\nlist1 = ['a','a','b','c']\nlist2 = ['a','b','a','b','a','b','a','a','a','b','c','c','d']\nlist3 = ['a','a','b','a','c','a','b','a','b','a','b','a','c','c','d']\nprint(count_samepair(list1,list2,list3))\n\nassert\nprint('Test case 3:')\nlist1 = ['a','a','b','c','c','d']\nlist2 = ['a','b','a','b','a','b','a','a','a','b','c','c','d']\nlist3 = ['a','a','b','a','c','a','b','a','b','a','b','a','c','c','d']\nprint(count_samepair(list1,list2,list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 3\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 1\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 0\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 2\nassert     count_samepair([[4, 1, 2, 5, 3, 1], [5, 3, 2, 5, 1, 4], \n                            [4, 3, 5, 3, 2, 5]],\n                            [[3, 2, 3, 4, 5, 5], [4, 5, 4, 5, 3, 5], \n                            [5, 2, 5, 5, 4, 5]],\n                            [[4, 2, 4, 3, 2, 5], [3, 4, 5, 2, 5, 4],\n                            [5, 5, 5, 5, 5, 5]]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    count_samepair([1,2,1],['a','b','a'],['b','c','b'])==2\nassert \n    count_samepair([1,2,1],['a','a','a'],['b','c','b'])==3\nassert \n    count_samepair([1,2,1],['a','b','a'],['b','a','b'])==1\nassert \n    count_samepair([1,2,1],['a','b','a'],['b','c','b'])==1\nassert \n    count_samepair([1,2,1],['a','a','a'],['b','c','b'])==1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3],[2,3,1],[2,2,1]) == 1\nassert     count_samepair([1,2,3,4,5],[2,3,4,4,5],[2,2,1,4,5]) == 3\nassert     count_samepair([1,2,3,4,5,6],[2,3,4,4,5,6],[2,2,1,4,5,6]) == 5\n\ndef count_samepair_improve(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_samepair([1,2,3,4,5],[5,4,3,2,1],[4,3,2,1,5]) == 3, 'incorrect!'\nassert     count_samepair([1,2,3,4,5],[5,4,3,2,1],[1,5,4,3,2]) == 0, 'incorrect!'\nassert     count_samepair([1,2,3,4,5],[5,4,3,2,1],[5,4,3,2,1]) == 2, 'incorrect!'"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ncount_samepair([1,2,3,4,5],[2,4,6,6,6],\n[3,6,6,6,6])==5\n\n'''\nIf same item occurs multiple times, you should not count that item multiple times.\nWrite a function to return the count of items that are identical in the same position of three given lists.\n'''"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_samepair([1,2,3], [2,1,2], [3,2,1]) == 3\nassert     count_samepair([1,2,3], [2,1,3], [3,2,1]) == 0\nassert     count_samepair([1,2,3], [2,1,2], [1,2,1]) == 1\nassert     count_samepair([1,2,3], [2,1,2], [3,2,1]) == 1\nassert     count_samepair([1,2,3], [2,1,2], [3,2,1,1]) == 2\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 0, \"Error!\"\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 4, \"Error!\"\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 0, \"Error!\""
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_lists(([1,2,3],)) == 1\nfind_lists(([],)) == 1\nfind_lists(([], [], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [], [])) == 2\nfind_lists(([], [], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == 2\nfind_lists(([], [])) == "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 0\nassert     find_lists((1, 2)) == 1\nassert     find_lists((1, 2, 3, 4, 5)) == 1\nassert     find_lists((1, 2, 3, 4, 5, 6, 7)) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nInput = (1,2,3,4,5)\nOutput = 5\n\nassert \nInput = (1,2,3,4,5,2,5)\nOutput = 5\n\nassert \nInput = (1,2,3,4,5,6,7,8,9,10)\nOutput = 10\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists(('',1,2,'',3,'',4)) == 1\nassert     find_lists(('',1,2,3,4,'',5,6,7)) == 2\nassert     find_lists(('',1,2,3,4,5,6,7)) == 3\nassert     find_lists(('',1,2,3,4,5,6,7,8,9)) == 4\nassert     find_lists(('1','2','3','4','5','6','7','8','9')) == 0\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 3, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 1, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 2, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 0, \"Wrong result\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14))) == 2, \"Wrong result\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists(((1,), (2,), (3,), (4,), (5,))) == 2\nassert     find_lists(((1,2), (2,3), (3,4), (4,5))) == 1\nassert     find_lists(((1,2), (2,3), (3,4), (4,5,6))) == 0\nassert     find_lists(((1,2,3), (2,3,4), (3,4,5))) == 0\nassert     find_lists(((1,2,3), (2,3,4), (3,4,5,6))) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists(('a', 'b', 'c', 'a', 'c', 'c')) ==         3\nassert     find_lists(('a', 'b', 'c', 'a', 'c', 'd')) ==         0\nassert     find_lists(('a', 'b', 'c')) ==                         2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists(([1, 2], [3, 4], [5, 6], [7, 8])) \nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8])) \nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8], ['a', 'b', 'c'])) == 3\nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'])) == 4\nassert    find_lists(([1, 2], [3, 4], [5, 6], [7, 8], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'])) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists(()) == 0, \"Expected 0, but got \" + str(find_lists((), ))\nassert     find_lists((\"Hello\", \"World\")) == 0, \"Expected 0, but got \" + str(find_lists((\"Hello\", \"World\"), ))\nassert     find_lists((\"Hello\", \"World\", \"Test\")) == 0, \"Expected 0, but got \" + str(find_lists((\"Hello\", \"World\", \"Test\"), ))\nassert     find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\")) == 1, \"Expected 1, but got \" + str(find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\"), ))\nassert     find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\")) == 2, \"Expected 2, but got \" + str(find_lists((\"Hello\", \"World\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\", \"Test\"), ))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\nassert     find_lists(([1,2,3], [4,5,6], [7,8,9]))     == 3, 'Wrong output'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n\n    arr = [-1, 2, 1, -4] \n    max_Abs_Diff(arr) \n\n    arr = [-1, -2, -3, 4, 5]\n    max_Abs_Diff(arr)\n    \n    arr = [-2, -5, -4, -1, 5, 5, 0]\n    max_Abs_Diff(arr)"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([1, -4, 5, -3]) == 5\nassert     max_Abs_Diff([1, 2, 3, 4]) == 2\nassert     max_Abs_Diff([-4, 5, -3]) == 5\nassert     max_Abs_Diff([1, 1, 1, 1, 1]) == 1\nassert     max_Abs_Diff([1, -2, -2, -2, -2]) == 3\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum absolute difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_Abs_Diff([1,2,3,4,5]) == 2, \"Should be 2\"\nassert max_Abs_Diff([1,2,3,4,-5]) == 2, \"Should be 2\"\nassert max_Abs_Diff([-2,1,2,3,-4]) == 3, \"Should be 3\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([1,2,3,4]) ==     3\nassert     max_Abs_Diff([4,3,2,1]) ==     4\nassert     max_Abs_Diff([1,-2,3,4]) ==     4\nassert     max_Abs_Diff([1,2,3,4,5,6,7]) ==     7\nassert     max_Abs_Diff([1,2,3,4,5,6,7,8]) ==     7\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([1,2,3,-4,5,4]) == 6, \"Wrong Answer\"\nassert     max_Abs_Diff([4,2,-3,-4,5,4]) == 6, \"Wrong Answer\"\nassert     max_Abs_Diff([-1,2,3,4,5,-4]) == 5, \"Wrong Answer\"\nassert     max_Abs_Diff([-2,4,2,4,5,4]) == 6, \"Wrong Answer\"\nassert     max_Abs_Diff([-1,-2,4,-4,5,-4]) == 5, \"Wrong Answer\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4]) == 5, \"Wrong\"\nassert     max_Abs_Diff([1, -2, 3, 4]) == 3, \"Wrong\"\nassert     max_Abs_Diff([-1, 2, 3, 4]) == 3, \"Wrong\"\nassert     max_Abs_Diff([1, -2, -3, -4]) == 4, \"Wrong\"\nassert     max_Abs_Diff([-1, 2, -3, -4]) == 4, \"Wrong\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_Abs_Diff([-5, -5, 0, 5, 10]) == 5\nassert \nmax_Abs_Diff([-5, -5, 0, 5, 10]) == 0\nassert \nmax_Abs_Diff([-5, -5, -5, -10]) == -5\nassert \nmax_Abs_Diff([-5, -5, 0, 5, 10]) == 15\nassert \nmax_Abs_Diff([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(1, 1, 3) == (1, 1), 'find_solution should return (1, 1) if given a = 1, b = 1 and n = 3.'\nassert     find_solution(1, 2, 6) == (3, 2), 'find_solution should return (3, 2) if given a = 1, b = 2 and n = 6.'\nassert     find_solution(3, 3, 7) == (1, 3), 'find_solution should return (1, 3) if given a = 3, b = 3 and n = 7.'\nassert     find_solution(2, 1, 3) == None, 'find_solution should return None if given a = 2, b = 1 and n = 3.'\nassert     find_solution(2, 2, 4) == None, 'find_solution should return None if given a = 2, b = 2 and n = 4.'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(2, 3, 1) == None, 'find_solution is wrong'\nassert     find_solution(3, 3, 1) == (1, 1), 'find_solution is wrong'\nassert     find_solution(2, 3, 4) == None, 'find_solution is wrong'\nassert     find_solution(3, 3, 4) == (1, 1), 'find_solution is wrong'\nassert     find_solution(2, 3, 5) == None, 'find_solution is wrong'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('check_solution passed')"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_solution(a = 4, b = 6, n = 11) == (5, 0)\nassert     find_solution(a = 5, b = 7, n = 17) == (6, 1)\nassert     find_solution(a = 7, b = 5, n = 13) == (0, 2)\nassert     find_solution(a = 3, b = 10, n = 15) == (0, 2)\nassert     find_solution(a = 6, b = 9, n = 19) == (0, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_solution(2, 3, 2) == (2, 1)\nassert     find_solution(6, 2, 7) == None\nassert     find_solution(1, 3, 6) == (1, 3)\nassert     find_solution(1, 2, 9) == (1, 2)\nassert     find_solution(2, 4, 10) == (2, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nfind_solution(2, 5, 25) == (5, -1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_solution(2, 4, 0) == None\nfind_solution(2, 4, 1) == (1, 1)\nfind_solution(2, 4, 2) == (1, 2)\nfind_solution(2, 4, 3) == (1, 3)\nfind_solution(2, 4, 4) == (2, 2)\nfind_solution(2, 4, 5) == (2, 3)\nfind_solution(2, 4, 6) == (2, 4)\nfind_solution(2, 4, 7) == (2, 5)\nfind_solution(2, 4, 8) == (2, 6)\nfind_solution(2, 4, 9) == (2, 7)\nfind_solution(2, 4, 10) == (2, 8)\nfind_solution(2, 4, 11) == (2, 9)\nfind_solution(2, 4, 12) == (2, 10)\nfind_solution(2, 4, 13) == (2, 11)\nfind_solution(2, 4, 14) == (2, 12)\nfind_solution(2, 4, 15) == (2, 13)\nfind_solution(2, 4, 16) == (2, 14)\nfind_solution(2, 4, 17) == (2, 15)\nfind_solution(2, 4, 18) == (2, 16)\nfind_solution(2, 4, 19) == (2, 17)\nfind_solution(2, 4, 20) == (2, 18)\nfind_solution(2, 4, 21) == (2, 19)\nfind_solution(2, 4, 22) == (2, 20)\nfind_solution(2, 4, 23) == (2, 21)\nfind_solution(2, 4, 24) == (2, 22)\nfind_solution(2, 4, 25) == (2, 23)\nfind_solution(2, 4, 26) == (2, 24)\nfind_solution(2, 4, 27) == (2, 25)\nfind_solution(2, 4, 28) == (2, 26)\nfind_solution(2, 4, 29) == (2, 27)\nfind_solution(2, 4, 30) == (2, 28)\nfind_solution(2, 4, 31) == (2, 29)\nfind_solution(2, 4, 32) == (2, 30)\nfind_solution(2, 4, 33) == (2, 31)\nfind_solution(2, 4, 34) == (2, 32)\nfind_solution(2, 4, 35) == (2, 33)\nfind_solution(2, 4, 36) == (2, 34)\nfind_solution(2, 4, 37) == (2, 35)\nfind_solution(2, 4, 38) == (2, 36)\nfind_solution(2, 4, 39) == (2, 37)\nfind_solution(2, 4, 40) == (2, 38)\nfind_solution(2, 4, 41) == (2, 39)\nfind_solution(2, 4, 42) == (2, 40)\nfind_solution(2, 4, 43) == (2, 41)\nfind_solution(2, 4, 44) == (2, 42)\nfind_solution(2, 4, 45) == (2, 43)\nfind_solution(2, 4, 46) == (2, 44)\nfind_solution(2, 4, 47) == (2, 45)\nfind_solution(2, 4, 48) == (2, 46)\nfind_solution(2, 4, 49) == (2, 47)\nfind_solution(2, 4, 50) == (2, 48)\nfind_solution(2, 4, 51) == (2, 49)\nfind_solution(2, 4, 52) == (2, 50)\nfind_solution(2, 4, 53) == (2, 51)\nfind_solution(2, 4, 54) == (2, 52)\nfind_solution(2, 4, 55) == (2, 53)\nfind_solution(2, 4, 56) == (2, 54)\nfind_solution(2, 4, 57) == (2, 55)\nfind_solution(2, 4, 58) == (2, 56)\nfind_solution(2, 4, 59) == (2, 57)\nfind_solution(2, 4, 60) == (2, 58)\nfind_solution(2, 4, 61) == (2, 59)\nfind_solution(2, 4, 62) == (2, 60)\nfind_solution(2, 4, 63) == (2, 61)\nfind_solution(2, 4, 64) == (2, 62)\nfind_solution(2, 4, 65) == (2, 63)\nfind_solution(2, 4, 66) == (2, 64)\nfind_solution(2, 4, 67) == (2, 65)\nfind_solution(2, 4, 68) == (2, 66)\nfind_solution(2, 4, 69) == (2, 67)\nfind_solution(2, 4, 70) == (2, 68)\nfind_solution(2, 4, 71) == (2, 69)\nfind_solution(2, 4, 72) == (2, 70)\nfind_solution(2, 4, 73) == (2, 71)\nfind_solution(2, 4, 74) == (2, 72)\nfind_solution(2, 4, 75) == (2, 73)\nfind_solution(2, 4, 76) == (2, 74)\nfind_solution(2, 4, 77) == (2, 75)\nfind_solution(2, 4, 78) == (2, 76)\nfind_solution(2, 4, 79) == (2, 77)\nfind_solution(2, 4, 80) == (2, 78)\nfind_solution(2, 4, 81) == (2, 79)\nfind_solution(2, 4, 82) == (2, 80)\nfind_solution(2, 4, 83) == (2, 81)\nfind_solution(2, 4, 84) == (2, 82)\nfind_solution(2, 4, 85) == (2, 83)\nfind_solution(2, 4, 86) == (2, 84)\nfind_solution(2, 4, 87) == (2, 85)\nfind_solution(2, 4, 88) == (2, 86)\nfind_solution(2, 4, 89) == (2, 87)\nfind_solution(2, 4, 90) == (2, 88)\nfind_solution(2, 4, 91) == (2, 89)\nfind_solution(2, 4, 92) == (2, 90)\nfind_solution(2, 4, 93) == (2, 91)\nfind_solution(2, 4, 94) == (2, 92)\nfind_solution(2, 4, 95) == (2, 93)\nfind_solution(2, 4, 96) == (2, 94)\nfind_solution(2, 4, 97) == (2, 95)\nfind_solution(2, 4, 98) == (2, 96)\nfind_solution(2, 4, 99) == (2, 97)\nfind_solution(2, 4, 100) == (2, 98)\nfind_solution(2, 4, 101) == (2, 99)\nfind_solution(2, 4, 102) == (2, 100)\nfind_solution(2, 4, 103) == (2, 101)\nfind_solution(2, 4, 104) == (2, 102)\nfind_solution(2, 4, 105) == (2, 103)\nfind_solution(2, 4, 106) == (2, 104)\nfind_solution(2, 4, 107) == (2, 105)\nfind_solution(2, 4, 108) == (2, 106)\nfind_solution(2, 4, 109) == (2, 107)\nfind_solutio"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution(2, -3, 4) == (1, 2)\nassert     find_solution(3, -5, 6) == (2, 3)\nassert     find_solution(1, -2, 5) == (1, 2)\nassert     find_solution(2, -3, 4) == (1, 2)\nassert     find_solution(1, 2, 5) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution(4,3,10) == (3,5), \"Wrong\"\nassert     find_solution(1,2,6) == (2,4), \"Wrong\"\nassert     find_solution(3,1,7) == (2,4), \"Wrong\"\nassert     find_solution(4,5,12) == (4,5), \"Wrong\"\nassert     find_solution(8,2,20) == (0,4), \"Wrong\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1, 2, 2, 3, 4], [2, 2, 3, 4]) == None\nassert     remove_elements([1, 2, 2, 3, 4], [3, 4]) == [1, 2, 4]\nassert     remove_elements([1, 2, 2, 3, 4], [2, 3, 4]) == [1, 2, 4]\nassert     remove_elements([1, 2, 2, 3, 4], [2]) == [1, 3, 4]\nassert     remove_elements([], [2, 3, 4]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], []) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_elements([1,2,3,4,5], [1,3,5]) == [2,4], \"Wrong\"\nassert     remove_elements([1,2,3,4,5], [4,5]) == [], \"Wrong\"\nassert     remove_elements([1,2,3,4,5], [4]) == [], \"Wrong\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,3,4],[1,2,3]) == []\nassert     remove_elements([1,2,3,4],[3,4]) == []\nassert     remove_elements([],[]) == []\nassert     remove_elements([1,2,3,4,5],[1,2,3]) == [5]\nassert     remove_elements([1,2,3,4,5],[2,3,4]) == [1,5]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,1,1], [1,1,1]) == [], \"Remove all elements from list2\"\nassert     remove_elements([1,2,2], [1,1,1]) == [1,2,2], \"Remove all elements from list2\"\nassert     remove_elements([1,2,3], [1,1,1]) == [1,2,3], \"Remove all elements from list2\"\nassert     remove_elements([1,2,2], [1,1,1,1]) == [], \"Remove all elements from list2\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef convert_list_to_set(l):\n    '''\n    Write a function to convert a list into a set.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_elements([1,2,3,4,5],[1,2,3]) == [5]\nassert     remove_elements([1,2,3,4,5],[2,3]) == []\nassert     remove_elements([],[]) == []\nassert     remove_elements([1,2,3,4,5],[2]) == [1,3,4,5]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"c\",\"e\",\"f\"]) == \\\n    [\"a\",\"b\",\"g\",\"h\"]\nassert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"a\",\"e\",\"h\",\"i\"]) == \\\n    [\"b\",\"c\",\"d\",\"g\",\"h\",\"i\"]\nassert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"i\",\"j\",\"k\",\"l\"]) == \\\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\nassert \nremove_elements([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[]) == \\\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\nassert \nremove_elements([],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == \\\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_series(3) == 5\nassert     sum_series(4) == 13\nassert     sum_series(5) == 42\nassert     sum_series(10) == 55\nassert     sum_series(1) == 1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_series(6) == 10\nassert sum_series(7) == 13\nassert sum_series(8) == 21\nassert sum_series(9) == 34\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    \ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Solution:\n    # sum_ = n\n    # for i in range(1, n // 2):\n    #     sum_ -= 2*i\n    # return sum_\n    # Solution:\n    # sum_ = n\n    # for i in range(1, n // 2 + 1):\n    #     sum_ += i*2\n    # return sum_\n    # Solution:\n    # sum_ = n\n    # for i in range(1, n // 2 + 1):\n    #     sum_ -= i*2\n    # return sum_\n\n    # Solution:\n    sum_ = n\n    if n == 1:\n        return 1\n    for i in range(1, n // 2 + 1):\n        sum_ -= i*2\n    return sum_\n\nassert sum_series(1) == 1\nassert sum_series(2) == 1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_series(1) == 0, sum_series(1)\nassert     sum_series(4) == 7, sum_series(4)\nassert     sum_series(5) == 15, sum_series(5)\nassert     sum_series(6) == 26, sum_series(6)\nassert     sum_series(7) == 36, sum_series(7)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 2\nassert     sum_series(3) == 3\nassert     sum_series(4) == 4\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 0\nassert     sum_series(2) == 2\nassert     sum_series(3) == 5\nassert     sum_series(4) == 13\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 2\nassert     sum_series(3) == 5\nassert     sum_series(4) == 9\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \narea_polygon(2, 5) == math.sqrt(5)*10\nassert area_polygon(3, 4) == (5*math.sqrt(3)/2)**2\n\n\n'''\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n\nNote: The length of sides should be greater than or equal to 3 and the number of sides should be an even number.\n\nThe first side of the regular polygon is the vertex of the first side and the length of the other two sides should be same.\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to calculate the perimeter of a rectangle given its length and width.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(5, 3) == pi / 3 * 5 ** 2, \"Wrong answer.\"\nassert     area_polygon(6, 4) == pi / 4 * 6 ** 2, \"Wrong answer.\"\nassert     area_polygon(6, 5) == 2 * pi / 5 * 6 ** 2, \"Wrong answer.\"\nassert     area_polygon(4, 4) == pi / 4 * 4 ** 2, \"Wrong answer.\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_polygon(4,5) == 8\nassert     area_polygon(2,5) == 4\nassert     area_polygon(1,5) == 0\n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(4, 2) == 4 * tan(pi / 4)\nassert area_polygon(5, 3) == 5 * tan(pi / 5)\nassert area_polygon(3, 4) == 3 * tan(pi / 4)\nassert area_polygon(8, 6) == 8 * tan(pi / 6)\n\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given three vertices of the triangle.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nUse the function below to test your function. Make sure your function is deterministic.\n'''\n\ns = 6\nl = 3\nassert area_polygon(s,l) == 6\ns = 1\nl = 3\nassert area_polygon(s,l) == 3\ns = 2\nl = 3\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(div_sum(11))\nprint(div_sum(22))\nprint(div_sum(3))\nprint(div_sum(4))\nprint(div_sum(8))\nprint(div_sum(19))\nprint(div_sum(19))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndiv_sum(6) == False\ndiv_sum(5) == True\ndiv_sum(9) == True\ndiv_sum(18) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.extend([i, n//i])\n    return sum(divisors) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef div_sum_soln(a, b):\n    '''\n    The sum of two numbers\u2019s divisors should be equal to each other.\n    '''\n    return (div_sum_naive(a, b) == div_sum_naive(b, a))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_sum(10) == True, \"Wrong answer.\"\nassert     div_sum(11) == False, \"Wrong answer.\"\nassert     div_sum(100) == True, \"Wrong answer.\"\nassert     div_sum(101) == False, \"Wrong answer.\"\nassert     div_sum(999) == True, \"Wrong answer.\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef div_sum_2(n, m): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef divisible(a,b):\n    '''\n    Write a function to determine whether a number is divisible by any number up to and including its double.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     div_sum(6) == True, 'Failed: 6'\nassert     div_sum(8) == False, 'Failed: 8'\nassert     div_sum(9) == False, 'Failed: 9'\nassert     div_sum(11) == False, 'Failed: 11'\nassert     div_sum(4) == True, 'Failed: 4'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     div_sum(6) == True, 'Wrong output'\nassert div_sum(7) == False, 'Wrong output'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_char_position('') == 0, \n            \"count_char_position should return 0 for a blank string.\"\nassert     count_char_position('a') == 1, \n            \"count_char_position should return 1 for an alphabet.\"\nassert     count_char_position('A') == 1, \n            \"count_char_position should return 1 for a capital alphabet.\"\nassert     count_char_position('abc') == 3, \n            \"count_char_position should return 3 for a string containing 3 characters.\"\nassert     count_char_position('aabb') == 2, \n            \"count_char_position should return 2 for a string containing 3 characters.\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_char_position(\"aacaaab\") == 2\nassert     count_char_position(\"abccba\") == 3\nassert     count_char_position(\"aaaa\") == 4\nassert     count_char_position(\"abcde\") == 0\nassert     count_char_position(\"abcd\") == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_char_position('') == 0\nassert count_char_position('a') == 1\nassert count_char_position('aa') == 2\nassert count_char_position('aA') == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_char_position(\"Hello\") == 2\nassert count_char_position(\"abc\") == 1\nassert count_char_position(\"ABC\") == 1\nassert count_char_position(\"abcdefghij\") == 7\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_char_position(\"hbgdwnzqas\") == 4\nassert count_char_position(\"AaBb\") == 2\nassert count_char_position(\"cbacdcbe\") == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_char_position('sour') == 2\nassert count_char_position('Sour') == 2\nassert count_char_position('sour') == 0\nassert count_char_position('sour') == 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_char_position(\"\") == 0\nassert     count_char_position(\"test\") == 0\nassert     count_char_position(\"Test\") == 1\nassert     count_char_position(\"Testtest\") == 3\nassert     count_char_position(\"TESTtest\") == 4\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_char_position('abcdefg') == 6, 'Your count_char_position function is not correct!'\nassert     count_char_position('heLLo world') == 7, 'Your count_char_position function is not correct!'\nassert     count_char_position('hello world') == 4, 'Your count_char_position function is not correct!'\nassert     count_char_position('hello  world') == 8, 'Your count_char_position function is not correct!'\nassert     count_char_position('hello     world') == 8, 'Your count_char_position function is not correct!'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_char_position('abcdefghijklmnopqrstuvwxyz') == 26\nassert count_char_position('ABcdefghijklmnopqrstuvwxyz') == 26\nassert count_char_position('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert count_char_position('ABCDEFGHIJKLMNOPQRSTUVwXYZ') == 26\nassert count_char_position('a') == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(find_even_pair([1,2,3,4,5,6]))"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_even_pair([]) == 0\nassert     find_even_pair([1,2,3]) == 0\nassert     find_even_pair([1,2,3,4,5]) == 2\nassert     find_even_pair([3,4,5,6,7]) == 2\nassert     find_even_pair([1,2,3,4,5,6,7,8,9]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_even_pair(nums_example) == 1, 'Expected: 1, got: %s' %(find_even_pair(nums_example))\nassert     find_even_pair(nums_example_2) == 2, 'Expected: 2, got: %s' %(find_even_pair(nums_example_2))\nassert     find_even_pair(nums_example_3) == 2, 'Expected: 2, got: %s' %(find_even_pair(nums_example_3))\nassert     find_even_pair(nums_example_4) == 0, 'Expected: 0, got: %s' %(find_even_pair(nums_example_4))\nassert     find_even_pair(nums_example_5) == 2, 'Expected: 2, got: %s' %(find_even_pair(nums_example_5))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_even_pair([1, 3, 2]) == 1\nfind_even_pair([1, 4, 5, 6, 7, 2]) == 1\nfind_even_pair([1, 2, 2, 1, 1]) == 1\nfind_even_pair([0, 2, 5, 7, 9, 8]) == 3\nfind_even_pair([1, 4, 3, 2, 5, 6, 7, 8, 9]) == 3\nfind_even_pair([1, 4, 5, 6, 7, 8, 9]) == 0\nfind_even_pair([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n\n\ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_even_pair([4, 2, 5, 4]) == 2\nassert find_even_pair([4, 1, 5, 4]) == 0\nassert find_even_pair([2, 4, 5, 4]) == 1\nassert find_even_pair([4, 3, 5, 4]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 1,     \"Error 1\"\nassert     find_even_pair([0,1,2,4,5]) == 2,     \"Error 2\"\nassert     find_even_pair([0,1,3,4,5]) == 3,     \"Error 3\"\nassert     find_even_pair([1,2,3,5,6]) == 4,     \"Error 4\"\nassert     find_even_pair([1,3,5,7,9]) == 0,     \"Error 5\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_even_pair([1,3,2]) == 2, 'incorrect output'\nassert     find_even_pair([2,3,4]) == 2, 'incorrect output'\nassert     find_even_pair([4,2,1,3,2]) == 3, 'incorrect output'\n\ndef find_even_pair2(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_power_of_2(4) == 2\nassert next_power_of_2(8) == 2\nassert next_power_of_2(10) == 2\nassert next_power_of_2(11) == 3\nassert next_power_of_2(16) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_power_of_2(2)     == 2\nassert     next_power_of_2(1)     == 2\nassert     next_power_of_2(0)     == 1\nassert     next_power_of_2(10)     == 2\nassert     next_power_of_2(20)     == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(2) == 4\nassert     next_power_of_2(1) == 4\nassert     next_power_of_2(8) == 16\nassert     next_power_of_2(15) == 16\nassert     next_power_of_2(16) == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_power_of_2(2)    == 4\nassert next_power_of_2(10)    == 20\nassert next_power_of_2(15)    == 32\nassert next_power_of_2(8)    == 16\nassert next_power_of_2(0)    == 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(next_power_of_2(3)) # 2\nprint(next_power_of_2(2)) # 1\nprint(next_power_of_2(5)) # 2\nprint(next_power_of_2(15)) # 8\nprint(next_power_of_2(9)) # 2\nprint(next_power_of_2(30)) # 8\nprint(next_power_of_2(100)) # 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(3) == 4\nassert next_power_of_2(8) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_power_of_2(16) == 2\nassert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(9) == 2\nassert     next_power_of_2(31) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(15) == 32, \" Wrong output\"\nassert     next_power_of_2(16) == 64, \" Wrong output\"\nassert     next_power_of_2(17) == 128, \" Wrong output\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    frequency([1,3,1,1,1],1) == 4\nassert \n    frequency([1,3,1,1,1],10) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([1,1,2,3],1)==2\nassert     frequency([1,1,2,3],3)==1\nassert     frequency([1,1,2,3],4)==0\nassert     frequency([1,1,2,3],5)==0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency([1,2,1,1,1],1) == 4\nassert     frequency([1,2,1,1,1],2) == 2\nassert     frequency([1,2,1,1,1],3) == 0\nassert     frequency([1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,2,3,3], 3) == 1, 'incorrect'\nassert     frequency([1,2,3,3], 3) == 0, 'incorrect'\nassert     frequency([1,2,3,3], 1) == 1, 'incorrect'\nassert     frequency([1,2,3,3], 0) == 0, 'incorrect'\nassert     frequency([1,2,3,3], 4) == 0, 'incorrect'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([2, 2, 1, 2, 2, 2], 2) == 2\nassert     frequency([], 5) == 0\nassert     frequency([], 2) == 0\nassert     frequency([1, 2, 1], 1) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([1,2,4,1,3,2,5,6,3],1)==4\nassert     frequency([1,2,4,1,3,2,5,6,3],3)==2\nassert     frequency([1,2,4,1,3,2,5,6,3],6)==1\n\n\n\ndef combine(l1,l2): \n    '''\n    Write a function to combine a list and another list into one sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency([1,2,3],1) == 2\nassert     frequency([1,2,3],2) == 1\nassert     frequency([1,2,3],3) == 1\nassert     frequency([1,2,3],4) == 0\nassert     frequency([1,2,3],0) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef generator(a,x):\n    '''\n    Write a function to generate a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\nTesting frequency')\n\nassert (frequency([2,1,5,1,1,3,3,3,1], 3) == 4)\nassert (frequency([2,1,5,1,1,3,3,3,1], 1) == 7)\nassert (frequency([], 1) == 0)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef get_input(prompt):\n    '''\n    Reads input from stdin.\n    '''\n    return input(prompt)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_range_list([1, 2, 3, 4, 5], 1, 2) == 15\nassert sum_range_list([1, 2, 3, 4, 5], 0, 3) == 9\nassert sum_range_list([1, 2, 3, 4, 5], 4, 7) == 12\nassert sum_range_list([1, 2, 3, 4, 5], 2, 5) == 5\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_range_list([10, 20, 30, 40, 50], 2, 4) == 60\nassert     sum_range_list([10, 20, 30, 40, 50], 2, 5) == 60\nassert     sum_range_list([10, 20, 30, 40, 50], 0, 4) == 50\nassert     sum_range_list([10, 20, 30, 40, 50], 0, 5) == 30\nassert     sum_range_list([10, 20, 30, 40, 50], -2, -1) == 40\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 0, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], 1, 4) == 12\nassert     sum_range_list([1, 2, 3, 4], 1, 5) == 12\nassert     sum_range_list([1, 2, 3, 4], 0, 5) == 10\nassert     sum_range_list([1, 2, 3, 4], 0, 6) == 10\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 2, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], 1, 2) == 8\nassert     sum_range_list([1, 2, 3, 4], 0, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], -1, -4) == 5\nassert     sum_range_list([1, 2, 3, 4], 2, 5) == 12\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(sum_range_list([0, 2, 4, 6, 8, 10, 12], 1, 5))\nprint(sum_range_list([0, 2, 4, 6, 8, 10, 12], 2, 8))\nprint(sum_range_list([0, 2, 4, 6, 8, 10, 12], 1, 3))\nprint(sum_range_list([], 1, 0))\nprint(sum_range_list([], 0, 0))\nprint(sum_range_list([], 0, 1))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(2) == 5.0, 'Wrong result!'\nassert     perimeter_pentagon(3) == 7.0, 'Wrong result!'\nassert     perimeter_pentagon(4) == 10.0, 'Wrong result!'\nassert     perimeter_pentagon(5) == 15.0, 'Wrong result!'\nassert     perimeter_pentagon(6) == 21.0, 'Wrong result!'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(1) == 5, \"The correct answer is: 5\"\nassert     perimeter_pentagon(2) == 10, \"The correct answer is: 10\"\nassert     perimeter_pentagon(3) == 15, \"The correct answer is: 15\"\nassert     perimeter_pentagon(4) == 20, \"The correct answer is: 20\"\nassert     perimeter_pentagon(5) == 25, \"The correct answer is: 25\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(1) == 3\nassert     perimeter_pentagon(2) == 5\nassert     perimeter_pentagon(3) == 7\nassert     perimeter_pentagon(4) == 10\nassert     perimeter_pentagon(5) == 12\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint (\"correctness of perimeter_pentagon:\")\nprint (\"case 1:\")\nprint (perimeter_pentagon(2))\nprint (\"case 2:\")\nprint (perimeter_pentagon(3))\nprint (\"case 3:\")\nprint (perimeter_pentagon(4))\nprint (\"case 4:\")\nprint (perimeter_pentagon(5))\nprint (\"case 5:\")\nprint (perimeter_pentagon(6))\nprint (\"case 6:\")\nprint (perimeter_pentagon(7))\nprint (\"case 7:\")\nprint (perimeter_pentagon(8))\nprint (\"case 8:\")\nprint (perimeter_pentagon(9))\nprint (\"case 9:\")\nprint (perimeter_pentagon(10))\nprint (\"case 10:\")\nprint (perimeter_pentagon(11))\nprint (\"case 11:\")\nprint (perimeter_pentagon(12))\nprint (\"case 12:\")\nprint (perimeter_pentagon(13))\nprint (\"case 13:\")\nprint (perimeter_pentagon(14))\nprint (\"case 14:\")\nprint (perimeter_pentagon(15))\nprint (\"case 15:\")\nprint (perimeter_pentagon(16))\nprint (\"case 16:\")\nprint (perimeter_pentagon(17))\nprint (\"case 17:\")\nprint (perimeter_pentagon(18))\nprint (\"case 18:\")\nprint (perimeter_pentagon(19))\nprint (\"case 19:\")\nprint (perimeter_pentagon(20))\nprint (\"case 20:\")\nprint (perimeter_pentagon(21))\nprint (\"case 21:\")\nprint (perimeter_pentagon(22))\nprint (\"case 22:\")\nprint (perimeter_pentagon(23))\nprint (\"case 23:\")\nprint (perimeter_pentagon(24))\nprint (\"case 24:\")\nprint (perimeter_pentagon(25))\nprint (\"case 25:\")\nprint (perimeter_pentagon(26))\nprint (\"case 26:\")\nprint (perimeter_pentagon(27))\nprint (\"case 27:\")\nprint (perimeter_pentagon(28))\nprint (\"case 28:\")\nprint (perimeter_pentagon(29))\nprint (\"case 29:\")\nprint (perimeter_pentagon(30))\nprint (\"case 30:\")\nprint (perimeter_pentagon(31))\nprint (\"case 31:\")\nprint (perimeter_pentagon(32))\nprint (\"case 32:\")\nprint (perimeter_pentagon(33))\nprint (\"case 33:\")\nprint (perimeter_pentagon(34))\nprint (\"case 34:\")\nprint (perimeter_pentagon(35))\nprint (\"case 35:\")\nprint (perimeter_pentagon(36))\nprint (\"case 36:\")\nprint (perimeter_pentagon(37))\nprint (\"case 37:\")\nprint (perimeter_pentagon(38))\nprint (\"case 38:\")\nprint (perimeter_pentagon(39))\nprint (\"case 39:\")\nprint (perimeter_pentagon(40))\nprint (\"case 40:\")\nprint (perimeter_pentagon(41))\nprint (\"case 41:\")\nprint (perimeter_pentagon(42))\nprint (\"case 42:\")\nprint (perimeter_pentagon(43))\nprint (\"case 43:\")\nprint (perimeter_pentagon(44))\nprint (\"case 44:\")\nprint (perimeter_pentagon(45))\nprint (\"case 45:\")\nprint (perimeter_pentagon(46))\nprint (\"case 46:\")\nprint (perimeter_pentagon(47))\nprint (\"case 47:\")\nprint (perimeter_pentagon(48))\nprint (\"case 48:\")\nprint (perimeter_pentagon(49))\nprint (\"case 49:\")\nprint (perimeter_pentagon(50))\nprint (\"case 50:\")\nprint (perimeter_pentagon(51))\nprint (\"case 51:\")\nprint (perimeter_pentagon(52))\nprint (\"case 52:\")\nprint (perimeter_pentagon(53))\nprint (\"case 53:\")\nprint (perimeter_pentagon(54))\nprint (\"case 54:\")\nprint (perimeter_pentagon(55))\nprint (\"case 55:\")\nprint (perimeter_pentagon(56))\nprint (\"case 56:\")\nprint (perimeter_pentagon(57))\nprint (\"case 57:\")\nprint (perimeter_pentagon(58))\nprint (\"case 58:\")\nprint (perimeter_pentagon(59))\nprint (\"case 59:\")\nprint (perimeter_pentagon(60))\nprint (\"case 60:\")\nprint (perimeter_pentagon(61))\nprint (\"case 61:\")\nprint (perimeter_pentagon(62))\nprint (\"case 62:\")\nprint (perimeter_pentagon(63))\nprint (\"case 63:\")\nprint (perimeter_pentagon(64))\nprint (\"case 64:\")\nprint (perimeter_pentagon(65))\nprint (\"case 65:\")\nprint (perimeter_pentagon(66))\nprint (\"case 66:\")\nprint (perimeter_pentagon(67))\nprint (\"case 67:\")\nprint (perimeter_pentagon(68))\nprint (\"case 68:\")\nprint (perimeter_pentagon(69))\nprint (\"case 69:\")\nprint (perimeter_pentagon(70))\nprint (\"case 70:\")\nprint (perimeter_pentagon(71))\nprint (\"case 71:\")\nprint (perimeter_pentagon(72))\nprint (\"case 72:\")\nprint (perimeter_pentagon(73))\nprint (\"case 73:\")\nprint (perimeter_pentagon(74))\nprint (\"case 74:\")\nprint (perimeter_pentagon(75))\nprint (\"case 75:\")\nprint (perimeter_pentagon(76))\nprint (\"case 76:\")\nprint (perimeter_pentagon(77))\nprint (\"case 77:\")\nprint (perimeter_pentagon(78))\nprint (\"case 78:\")\nprint (perimeter_pentagon(79))\nprint (\"case 79:\")\nprint (perimeter_pentagon(80))\nprint (\"case 80:\")\nprint (perimeter_pentagon(81))\nprint (\"case 81:\")\nprint (perimeter_pentagon(82))\nprint (\"case 82:\")\nprint (perimeter_pentagon(83))\nprint (\"case 83:\")\nprint (perimeter_pentagon(84))\nprint (\"case 84:\")\nprint (perimeter_pentagon(85))\nprint (\"case 85:\")\nprint (perimeter_pentagon(86))\nprint (\"case 86:\")\nprint (perimeter_pentagon(87))\nprint (\"case 87:\")\nprint (perimeter_pentagon(88))\nprint (\"case 88:\")\nprint (perimeter_pentagon(89))\nprint (\"case 89:\")\nprint (perimeter_pentagon(90))\nprint (\"case 90:\")\nprint (perimeter_pentagon(91))\nprint (\"case 91:\")\nprint (perimeter_pentagon(92))\nprint (\"case 92:\")\nprint (perimeter_pentagon(93))\nprint (\"case 93:\")\nprint (perimeter_pentagon(94))\nprint (\"case 94:\")\nprint (perimeter_pentagon(95))\nprint (\"case 95:\")\nprint (perimeter_pentagon(96))\nprint (\"case 96:\")\nprint (perimeter_pentagon(97))\nprint (\"case 97:\")\nprint (perimeter_pentagon(98))\nprint (\"case 98:\")\nprint (perimeter_pentagon(99))\nprint (\"case 99:\")\nprint (perimeter_pentagon(100))\nprint (\"case 100:\")\nprint (perimeter_pentagon(101))\nprint (\"case 101:\")\nprint (perimeter_pentagon(102))\nprint (\"case 102:\")\nprint (perimeter_pentagon(103))\nprint (\"case 103:\")\nprint (perimeter_pentagon(104))\nprint (\"case 104:\")\nprint (perimeter_pentagon(105))\nprint (\"case 105:\")\nprint (perimeter_pentagon(106))\nprint (\"case 106:\")\nprint (perimeter_pentagon(107))\nprint (\"case 107:\")\nprint (perimeter_pentagon(108))\nprint (\"case 108:\")\nprint (perimeter_pentagon(109))\nprint (\"case 109:\")\nprint (perimeter_pentagon(110))\nprint (\"case 110:\")\nprint (perimeter_pentagon(11"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perimeter_pentagon(1) == 5.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(2) == 10.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(3) == 15.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(4) == 20.0, 'Pentagon is not a valid pentagon'\nassert    perimeter_pentagon(5) == 25.0, 'Pentagon is not a valid pentagon'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(5) == 20\nassert     perimeter_pentagon(6) == 24\nassert     perimeter_pentagon(7) == 28\nassert     perimeter_pentagon(10) == 50\nassert     perimeter_pentagon(11) == 52\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\"\"\n*******************************************************************************\n                    PYTHON 3 PRACTICE PROBLEM TESTING                               *\n*******************************************************************************\n\"\"\")\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(4) == 5\nassert     perimeter_pentagon(5) == 10\nassert     perimeter_pentagon(6) == 15\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_pentagon_perimeter(l1, l2, l3):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the lengths of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # test_cases\n    '''\n    >>> test_cases = []\n    >>> for i in range(3):\n    ...     test_cases.append(i)\n    >>> for i in range(5, 10):\n    ...     test_cases.append(i)\n    >>> for i in range(10, 20):\n    ...     test_cases.append(i)\n    >>> test_cases = sorted(test_cases, key = lambda i: i, reverse = True)\n    >>> test_cases\n    [10, 12, 14, 16, 18, 20]\n    >>> for i in range(10):\n    ...     print(f'{i} - {perimeter_pentagon(test_cases[i])}')\n    0 - 5.24054415982787\n    1 - 8.91480757438733\n    2 - 15.60584366467655\n    3 - 22.99271850340274\n    4 - 30.85608859022768\n    5 - 37.78845913823356\n    6 - 44.90748860011553\n    7 - 52.94899671519386\n    8 - 60.25088292709871\n    9 - 65.72644789028776\n    '''\n    # case: sides = 10\n    assert perimeter_pentagon(10) == 22.7\n    # case: sides = 12\n    assert perimeter_pentagon(12) == 33.4\n    # case: sides = 14\n    assert perimeter_pentagon(14) == 44.1\n    # case: sides = 16\n    assert perimeter_pentagon(16) == 52.8\n    # case: sides = 18\n    "
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance(\"abra cadabra\") == 4\nassert     count_occurance(\"\") == 0\nassert     count_occurance(\"std\") == 2\n\ndef count_occurance_best(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    '''\n    two ways to solve this question:\n    1) use in built function count. \n    2) use helper function.\n    '''\n    # 1)\n    # inbuilt method\n    return s.count('std')\n\n    # 2)\n    # helper method\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance('stdf') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_occurance('Hello World') == 1\nassert count_occurance('Hello World Python') == 1\nassert count_occurance('Hello Python') == 2\nassert count_occurance('I love Python') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 3, \"Not working\"\nassert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 4, \"Not working\"\nassert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 0, \"Not working\"\nassert     count_occurance(\"abcdef\") == 0, \"Not working\"\nassert     count_occurance(\"the quick brown fox jumps over the lazy dog\") == 2, \"Not working\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance('std') == 1, 'Example 1'\nassert     count_occurance('std') == 0, 'Example 2'\nassert     count_occurance('avg') == 2, 'Example 3'\nassert     count_occurance('far') == 1, 'Example 4'\nassert     count_occurance('study') == 3, 'Example 5'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance(\"hello hello world world hello\") == 2, \"Expected 2, got \" + str(count_occurance(\"hello hello world world hello\"))\nassert     count_occurance(\"hello world hello\") == 1, \"Expected 1, got \" + str(count_occurance(\"hello world hello\"))\nassert     count_occurance(\"hello\") == 0, \"Expected 0, got \" + str(count_occurance(\"hello\"))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance('abdbeefa') == 3\nassert     count_occurance('a') == 1\nassert     count_occurance('a') == 1\nassert     count_occurance('abdbeefa') == 2\nassert     count_occurance('abdbeefa') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_occurance('abc') == 0, 'Test 1 failed'\nassert     count_occurance('abcstd') == 2, 'Test 2 failed'\nassert     count_occurance('abcdefgabc') == 3, 'Test 3 failed'\nassert     count_occurance('abcdefgabcdefg') == 2, 'Test 4 failed'\nassert     count_occurance('abcdefgabcdefgabc') == 1, 'Test 5 failed'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance(\"coding\") == 3\nassert     count_occurance(\"coding st\") == 2\nassert     count_occurance(\"coding std\") == 1\nassert     count_occurance(\"std\") == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type(('Hello', 'World', 1, True)) == True\nassert     check_type((1, 2, 'Hello', 'World', True)) == False\nassert     check_type(('Hello', 'World', 'cat')) == True\nassert     check_type((1, 2, 3)) == False\nassert     check_type((1, 'Hello', 3)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type(('1', '2', '3')) == True, \"Should be true\"\nassert     check_type((1, 2, 3)) == False, \"Should be false\"\nassert     check_type((True, False, True)) == True, \"Should be true\"\nassert     check_type((None, None, None)) == False, \"Should be false\"\nassert     check_type((1, 2.0, '3')) == False, \"Should be false\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type((1,2,'a',2.7)) == True, \"Wrong Answer\"\nassert check_type((1,2,'a',2.7)) == True, \"Wrong Answer\"\nassert check_type((1,2.7,'a',2)) == True, \"Wrong Answer\"\nassert check_type((1,2,'a',2,6)) == False, \"Wrong Answer\"\nassert check_type((1,2,'a',2,6,7)) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type([1, 2, 4]) == False, \"Wrong output\"\nassert     check_type([1, 2, 4.5]) == False, \"Wrong output\"\nassert     check_type([1, 2, \"3\"]) == False, \"Wrong output\"\nassert     check_type([1.1, 2.2, 4.5]) == False, \"Wrong output\"\nassert     check_type([1, 2, 4]) == True, \"Wrong output\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((1, 2, 3, 4, 5, 6, 7, 8, 9))     ==     (True,), \"The tuples are of different data types.\"\nassert     check_type((1, 2, 3, 4, 5, 6, 7, 8, \"s\"))     ==     (True,), \"The tuples are of different data types.\"\nassert     check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, \"a\", \"b\")) == (True,), \"The tuples are of different data types.\"\nassert     check_type((1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9)) == (False,), \"The tuples are of different data types.\"\nassert     check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)) == (False,), \"The tuples are of different data types.\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type((1,2,3,4)) == True, \"Check if tuple's elements are of same data type\"\nassert     check_type((\"A\",\"B\",\"C\",\"D\")) == True, \"Check if tuple's elements are of same data type\"\nassert     check_type((\"1\",\"2\",\"3\",\"4\",\"5\",\"6\")) == False, \"Check if tuple's elements are of same data type\"\nassert     check_type((\"\",\"\")) == False, \"Check if tuple's elements are of same data type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type(('a','b','c')) == True, \"tuple of string should be considered as a string\"\nassert     check_type((1,2,3)) == True, \"tuple of int should be considered as int\"\nassert     check_type((1.1,2.2,3.3)) == True, \"tuple of float should be considered as float\"\nassert     check_type(('a','b','c','a')) == False, \"tuple of string should be considered as a string\"\nassert     check_type((1,2,'a','a')) == False, \"tuple of int should be considered as int\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type([1,2,3,4,5])==True, \"List is not correct\"\nassert     check_type([1,2,3.0,4,5])==True, \"Float is not correct\"\nassert     check_type([1,2,3,\"a\",5])==True, \"String is not correct\"\nassert     check_type([True,True,True,True,True])==True, \"Boolean is not correct\"\nassert     check_type([0,\"xyz\",0])==True, \"String is not correct\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type((1,2,3)) == True, \"First Tuple\"\nassert     check_type((1.2,2.2,3.3)) == True, \"Second Tuple\"\nassert     check_type((True,False,None)) == True, \"Third Tuple\"\nassert     check_type((False,False,True)) == False, \"Fourth Tuple\"\nassert     check_type((True,True,True)) == True, \"Fifth Tuple\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type((1, \"hi\", 5.9, True, (1,2,3))) == True\nassert     check_type((1, \"hi\", \"hi\", True, (1,2,3))) == False\nassert     check_type((1, \"hi\", 5.9, True, (1,2,3))) == False\nassert     check_type((1, \"hi\", \"hi\", True, (1,2,3))) == False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_majority([1, 2, 2, 2], 3, 2) == True\nassert     is_majority([1, 2, 2, 2], 4, 2) == False\nassert     is_majority([1, 1, 2, 2], 2, 1) == True\nassert     is_majority([1, 2, 2, 2], 2, 1) == False\n\ndef majority_element_binary_search_iterative(arr, n):\n    '''\n    Write a function that takes in a sorted array and its length (n) and returns the majority element.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(is_majority([1,2,1,1,3,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_majority([1,2,3], 3, 3) == True\n    is_majority([1,2,1,2,3], 5, 2) == True\n    is_majority([1,2,1,2,3,2], 5, 2) == False\n    is_majority([1,2,1,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,3], 5, 2) == True\n    is_majority([1,2,1,2,3], 5, 2) == False\n    is_majority([1,2,1,2,3,2], 5, 2) == False\n    is_majority([1,1,2,2,3], 5, 2) == True\n    is_majority([1,2,1,2,3,2], 5, 2) == True\n    is_majority([1,2,1,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,3], 5, 2) == False\n    is_majority([1,2,1,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,3], 5, 2) == True\n    is_majority([1,1,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == False\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3], 5, 2) == True\n    is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_majority([1,2,3,4,5], 5, 3) == True\nassert     is_majority([1,2,3,4,5], 5, 1) == False\nassert     is_majority([1,1,1,1,1], 5, 1) == True\nassert     is_majority([1,1,1,1,1,1], 5, 1) == False\nassert     is_majority([1,1,2,1,1,1], 5, 1) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(2) == 0\nassert     count_Set_Bits(4) == 1\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(100) == 1\nassert     count_Set_Bits(10000) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(10) == 5, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(12) == 4, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(15) == 3, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(11) == 2, \"Your function count_Set_Bits returned incorrect result\"\nassert     count_Set_Bits(11) == 2, \"Your function count_Set_Bits returned incorrect result\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_Set_Bits(4) == 3 \nassert count_Set_Bits(8) == 3 \nassert count_Set_Bits(11) == 3\nassert count_Set_Bits(100) == 8\nassert count_Set_Bits(14) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(0) == 0, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(1) == 1, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(2) == 1, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(3) == 2, 'Wrong Function Signature/Name'\nassert     count_Set_Bits(4) == 2, 'Wrong Function Signature/Name'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(11) == 4\nassert     count_Set_Bits(11) == 2\nassert     count_Set_Bits(111) == 4\nassert     count_Set_Bits(10011) == 5\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(9) == 0\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(11) == 2\nassert     count_Set_Bits(12) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(9) == 5\nassert     count_Set_Bits(63) == 0\nassert     count_Set_Bits(0) == 1\nassert     count_Set_Bits(-10) == 3\nassert     count_Set_Bits(7) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(10) == 6\nassert count_Set_Bits(101) == 5\nassert count_Set_Bits(111) == 4\nassert count_Set_Bits(1000) == 11\nassert count_Set_Bits(100) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Set_Bits(5) == 0\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(20) == 1\nassert     count_Set_Bits(10) == 0\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_values_string(\"\") == \"\", \"Provide empty input\"\nassert     odd_values_string(\"w3resource\") == \"\", \"Provide non-empty input\"\nassert     odd_values_string(\"aeiou\") == \"aeiou\", \"Provide non-empty input\"\nassert     odd_values_string(\"aeiouiiiiii\") == \"aeiou\", \"Provide non-empty input\"\nassert odd_values_string(\"aeiouiiiiii\") == \"aeiouiiiiii\", \"Provide non-empty input\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string('this is a test') =='sti'\nassert     odd_values_string('testing') == 'tst'\nassert     odd_values_string('test?') == 'tst'\nassert     odd_values_string('') == ''\nassert odd_values_string('dgfhdfhfhdf') == 'gfhdf'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('') == '', \"First test case does not pass.\"\nassert odd_values_string('abc') == 'b', \"Second test case does not pass.\"\nassert odd_values_string('python') == 'y', \"Third test case does not pass.\"\n\ndef makestring(str1,str2):\n    '''\n    Write a python function to return a string which is the concatenation of two given strings.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"You are passed:\", odd_values_string(\"eplkvkevbymz\"))\nprint(\"You should be passed: eplkvkevbymz\")\n\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string(\"string\"),     \"function fails\" \nassert not odd_values_string(\"string123\"), \"function fails\"\nassert not odd_values_string(\"abcd1234\"), \"function fails\"\nassert odd_values_string(\"abcd\") == \"bcd\", \"function fails\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string(\"sojk\") == \"sk\"\nassert odd_values_string(\"sojkab\") == \"sjk\"\nassert odd_values_string(\"sojkac\") == \"sk\"\nassert odd_values_string(\"sojkabk\") == \"sk\"\nassert odd_values_string(\"sojkad\") == \"sojk\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string('a') == 'a'\nassert     odd_values_string('abc') == 'abc'\nassert     odd_values_string('abcxyz') == 'abcxyz'\nassert     odd_values_string('abcdef') == 'abcdef'\nassert     odd_values_string('abcdefg') == 'bcdefg'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_values_string('python') == 'thp'\nassert odd_values_string('abcd') == ''\nassert odd_values_string('g') == 'g'\nassert odd_values_string('Python') == 'Pyth'\n\ndef check_parenthesis(str1):\n    '''\n    Write a python function to check if a given string contains balanced parentheses or not.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    min_of_three(4, 2, 1) == 1\n\nassert \n    min_of_three(1, 2, 3) == 1\n\nassert \n    min_of_three(100, 1, 1) == 100\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert min_of_three(-10,-8,4) == -8\nassert min_of_three(-10,-8,9) == -10\nassert min_of_three(-10,4,9) == 4\nassert min_of_three(-10,4,-9) == -10\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(-1,2,3) == 1\nassert     min_of_three(1,-2,3) == 1\nassert     min_of_three(1,-2,-3) == -3\nassert     min_of_three(100,5,1000) == 5\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(5,3,1) == 1\nassert     min_of_three(3,1,5) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(1,2,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(5,1,3) == 1\nassert     min_of_three(3,2,3) == 2\nassert     min_of_three(10,20,30) == 10\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(2,3,1) == 1\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # correct\n    assert \n    # correct\n    assert min_of_three(1,2,3) == 1\n    assert min_of_three(3,2,1) == 1\n    assert min_of_three(1,1,1) == 1\n    # incorrect\n    "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,1,1) == True, \"expected True, actual: False\"\nassert     all_Bits_Set_In_The_Given_Range(1,2,1) == True, \"expected True, actual: False\"\nassert     all_Bits_Set_In_The_Given_Range(1,1,2) == False, \"expected False, actual: True\"\nassert     all_Bits_Set_In_The_Given_Range(10,10,10) == True, \"expected True, actual: False\"\nassert     all_Bits_Set_In_The_Given_Range(10,10,12) == False, \"expected False, actual: True\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=8,l=5,r=8)     == False, \"Test Case 1 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=8,l=5,r=7)     == True, \"Test Case 2 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=7,l=5,r=8)     == False, \"Test Case 3 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=7,l=5,r=7)     == True, \"Test Case 4 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(n=7,l=5,r=0)     == True, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(5,0,4) == True \nassert \nall_Bits_Set_In_The_Given_Range(2,0,1) == False"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,5) == False\nassert     all_Bits_Set_In_The_Given_Range(6,0,6) == True\nassert     all_Bits_Set_In_The_Given_Range(6,1,6) == False\nassert     all_Bits_Set_In_The_Given_Range(6,2,6) == True\nassert     all_Bits_Set_In_The_Given_Range(6,3,6) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,0,0) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,0,1) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,1,1) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,1,2) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,2,1) == False, \"Error in all_Bits_Set_In_The_Given_Range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0, 0, 1) == True, \"Input: 0, 0, 1\"\nassert all_Bits_Set_In_The_Given_Range(0, 0, 0) == True, \"Input: 0, 0, 0\"\nassert all_Bits_Set_In_The_Given_Range(0, 2, 3) == True, \"Input: 0, 2, 3\"\nassert all_Bits_Set_In_The_Given_Range(0, 1, 0) == True, \"Input: 0, 1, 0\"\nassert all_Bits_Set_In_The_Given_Range(0, 1, 1) == False, \"Input: 0, 1, 1\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,1,10) == True, \"Should be True\"\nassert     all_Bits_Set_In_The_Given_Range(1,1,10) == False, \"Should be False\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,1) == False, \"Should be False\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,5) == True, \"Should be True\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=1,l=0,r=2) == True, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=2) == False, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=3) == False, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=4) == True, \"TEST FAILED\"\nassert     all_Bits_Set_In_The_Given_Range(n=2,l=0,r=5) == False, \"TEST FAILED\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(10,20,30) == True\nassert all_Bits_Set_In_The_Given_Range(50,60,70) == True\nassert all_Bits_Set_In_The_Given_Range(10,0,1) == False\nassert all_Bits_Set_In_The_Given_Range(10,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(10,2,3) == False\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert re_arrange_array([1,2,3,4,5], 3) == [-4,1,2,3,5]\nassert re_arrange_array([5,4,3,2,1], 2) == [5,4,3,2,1]\nassert re_arrange_array([1,2,3,4,5], 5) == [-4,1,2,3,5]\nassert re_arrange_array([1,2,3,4,5], 1) == [-1,1,2,3,4,5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef reverse_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and reverses the first n elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     re_arrange_array([1, -5, 6, -2, 0, 3, -9], 5) == [1, -5, 6, -9, 0, 3, -2]\nassert     re_arrange_array([1, 5, 2, 7, 8, 3, -9, 6, 0, 4, -1], 5) == [1, 5, 2, 7, 8, 3, -9, 0, 4, 6, -1]\nassert     re_arrange_array([-1, -4, -3, -2, -5, -8, -9, -7, -6, -5, 4, -3, 2, 1, -9, -7, -8, 6, 5, 4], 6) == [-1, -4, -3, -2, -5, -8, -9, -7, -6, -5, 4, -3, 2, 1, -9, -7, -8, 6, 5, 4]\nassert     re_arrange_array([-4, -3, -2, -1, 0, 1, 2, 3, 4], 5) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n\nimport bisect\ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 2) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 5) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 6) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 7) == [-6,-7,-8,-9,1,2,3,4,5]\nassert     re_arrange_array([1,2,3,4,5,-6,-7,8,9], 8) == [-6,-7,-8,-9,1,2,3,4,5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     re_arrange_array([1,2,3,-1,-2,0], 3) == [0,1,2,-1,-2,3]\nassert re_arrange_array([-1,2,3,4,-1,2], 3) == [-1,-1,2,3,2,4]\nassert re_arrange_array([3,4,5,-1,2,0], 3) == [-1,0,-1,2,3,4]\n\n\ndef get_max_subarray_sum_element(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and returns the sum of all elements in the array that is the sum of at least one subarray with length less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([1, 2, -1, 3, -2, 4, 5, -3, -4], 1) == [-1, 1, -2, -3, 4, -4, -5, 5, 3, 2]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], 2) == [-2, -1, 3, 4, -5, 5]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], 1) == [-1, -2, -3, -4, -5, 5]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], 0) == [-1, -2, -3, -4, -5, 5]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 5], -1) == [-2, -1, 3, 4, -5, 5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n    TEST CASE 1:\n    Input: arr = [1, 2, 3, 4, 5, 6], n = 3\n    Output: [-1, 6, 5, 4, 3, 2]\n    Explanation:\n    Since arr[0] = 1 is negative, it should go before any element with a positive number.\n    Similarly, since arr[1] = 2 is negative, it also goes before any element with a positive number.\n    And finally, since arr[5] = 6 is positive, 6 should go after any element with negative number.\n\n    TEST CASE 2:\n    Input: arr = [1, 2, 3, 4, 5], n = 4\n    Output: [-1, 2, 3, 4]\n    Explanation:\n    Since arr[0] = 1 is negative, it should go before any element with a positive number.\n    Similarly, since arr[1] = 2 is negative, it also goes before any element with a positive number.\n    And finally, since arr[4] = 5 is positive, 5 should go after any element with negative number.\n\n    TEST CASE 3:\n    Input: arr = [-2, -1, 0, 3, -4], n = 2\n    Output: [3, -2, -1, 0, -4]\n    Explanation:\n    Since arr[0] = -2 is negative, it should go before any element with a positive number.\n    Similarly, since arr[1] = -1 is negative, it also goes before any element with a positive number.\n    And finally, since arr[3] = 0 is positive, 0 should go after any element with negative number.\n\n'''"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert re_arrange_array([-1, 3, 5, -5, 3, 2, 0, -1, 3], 4) == [-1, 0, 3, 3, 5, 3, 2, 3, -5]\nassert re_arrange_array([5, 1, -10, -3, -10, -7], 3) == [5, 1, -10, -10, -7, -3]\nassert re_arrange_array([2, 0, -2, -5], 1) == [2, 0, -2, -5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re_arrange_array([-1, 2, 3, 4, 5, 6, 7, 8], 3) == [-1, 2, 3, 4, 5, 6, 7, 8], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8], 4) == [-1, -2, -3, -4, 1, 2, 3, 4], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\nassert     re_arrange_array([-10, -2, -3, -4, -5, -6, -7, -8], 2) == [-10, -2, -3, -4, -5, -6, -7, -8], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\nassert     re_arrange_array([-5, -2, -3, -4, -1, 0, 1, 2, 3, 4], 2) == [-5, -2, -3, -4, -1, -2, -3, -4, -1, 0, 1, 2, 3, 4], \"Should rearrange the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_blank(\"Hi        aDxDxdAD\",'D') == 'HiADDAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'B') == 'HiADxAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'x') == 'HiADxDxAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'f') == 'HiADxDxDAD'\nassert     replace_blank(\"Hi        aDxDxdAD\",'b') == 'HiADxDxDxAD'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_blank(\"\",'a') == 'a'\nassert     replace_blank(\"a\",'a') == 'a'\nassert     replace_blank(\"a\",' ') == 'a'\nassert     replace_blank(\"a \",' ') == 'a'\nassert     replace_blank(\"a \",'a') == 'a'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank(\"My name is John\",'x') == \"My name is Johnx\"\nassert     replace_blank(\"My name is John\",' ') == \"My name is John\"\nassert     replace_blank(\"My name is John\",'') == \"My name is John\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\nassert replace_blank('a  b   c  d  e','') == 'a b c d e'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank('abc def', 'x') == 'abc xdef'\nassert     replace_blank('abc def','') == 'abc def'\nassert     replace_blank('abc def', 'y') == 'abc ydef'\nassert     replace_blank('','') == ''\nassert     replace_blank('  ','') == ''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank('', 'a') == ''\nassert     replace_blank('a', 'a') == 'a'\nassert     replace_blank('aaaaaaaaaaa', 'a') == 'aaaaaaaaaaa'\nassert     replace_blank('a ', 'a') == 'a a'\nassert     replace_blank('a a', 'a') == 'a a'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank(\"\", \"\") == \"\", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\nassert     replace_blank(\"\", \" \") == \" \", \"Replace blank spaces.\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank(\"a b c\",' ') == \"a b c\", \"replace_blank should be replaced\"\nassert     replace_blank(\"a b c\",'d') == \"a b c\", \"replace_blank should be replaced\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank('', '*') == ''\nassert     replace_blank('a*', '*') == 'a*'\nassert     replace_blank('a*', '') == 'a*'\nassert     replace_blank('   ', '*') == '*'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef list_weight(list1):\n    '''\n    Write a function that takes in a list of items and returns a list containing the weights of the items in the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef larg_nnum(list1,n):\n    return list1[:n]\n\nassert larg_nnum([0,5,8,7,6],1) ==[7]\nassert larg_nnum([0,5,8,7,6],2) ==[8,7]\nassert larg_nnum([0,5,8,7,6],3) ==[5,7,8]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reversed_array(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the items in the original list\n    reversed.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     larg_nnum([1,2,3,4],3) == [4,3,2]\nassert     larg_nnum([1,2,3,4],3) == [4,3,2]\nassert     larg_nnum([1,2,3,4],1) == [4]\nassert     larg_nnum([],1) == []\nassert     larg_nnum([1,2,3],1) == [3]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlarg_nnum([1,4,2,3,4,5,6,7,8],4) == [4,5,6,7]\nassert \nlarg_nnum([1,4,2,3,4,5,6,7,8],5) == [4,5,6,7,8]\nassert \nlarg_nnum([1,4,2,3,4,5,6,7,8],6) == [4,5,6,7,8,1]\nassert \nlarg_nnum([1,4,2,3,4,5,6,7,8],10) == [4,5,6,7,8,1,2,3,4]\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_copy = list1\n    list_copy.sort()\n    return list_copy[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     larg_nnum([2,5,3,1,7,8,6,4],2) == [8,7], \"Correct result: [8,7]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],3) == [5,7,8], \"Correct result: [5,7,8]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],4) == [5,7,8,3], \"Correct result: [5,7,8,3]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],5) == [5,7,8,3,1], \"Correct result: [5,7,8,3,1]\"\nassert     larg_nnum([2,5,3,1,7,8,6,4],6) == [5,7,8,3,1,5], \"Correct result: [5,7,8,3,1,5]\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef larg_nnum_sol2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlarg_nnum([1, 5, 2, 8, 3, 7], 3) == [8, 7, 5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 1) == [5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 4) == [8, 7, 5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 1) == [5], \"WRONG RESULT\"\nassert \nlarg_nnum([1, 5, 2, 8, 3, 7], 2) == [8, 7], \"WRONG RESULT\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef find_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlateralsuface_cylinder(r=1,h=2) == 3\nlateralsuface_cylinder(r=2,h=3) == 7\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"testcase1: \", lateralsuface_cylinder(1,1) )\nassert lateralsuface_cylinder(2,1) == 2.56\nassert lateralsuface_cylinder(1,2) == 1.05\nprint(\"testcase2: \", lateralsuface_cylinder(2,1) )\nassert lateralsuface_cylinder(3,1) == 2.68\nassert lateralsuface_cylinder(1.2,1) == 1.4\nprint(\"testcase3: \", lateralsuface_cylinder(2,2) )\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(r=3,h=4) == 16.0\nassert     lateralsuface_cylinder(r=4,h=3) == 8.0\nassert     lateralsuface_cylinder(r=5,h=5) == 26.0\nassert     lateralsuface_cylinder(r=6,h=6) == 36.0\nprint(\"You passed all test cases!\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlateralsuface_cylinder(0.5,0.6) == 0.5*0.6\n\nlateralsuface_cylinder(0.3,0.5) == 0.5*0.6\n\nlateralsuface_cylinder(0.3,0.3) == 0.5*0.3\n\nlateralsuface_cylinder(0.4,0.5) == 0.5*0.3\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    lateralsuface_cylinder(1,1) == 1\n    lateralsuface_cylinder(0.5,1) == 0.5\n    lateralsuface_cylinder(1,0.5) == 0.5\n    lateralsuface_cylinder(0.5,0.5) == 1\n\n'''\nExpected Output:\n\nlateralsuface_cylinder(1,1) == 1\nlateralsuface_cylinder(0.5,1) == 0.5\nlateralsuface_cylinder(1,0.5) == 0.5\nlateralsuface_cylinder(0.5,0.5) == 1\n'''"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsuface_cylinder(1,1) == 6\nassert     lateralsuface_cylinder(1,3) == 6\nassert     lateralsuface_cylinder(1,5) == 12\nassert     lateralsuface_cylinder(2,5) == 8\nassert     lateralsuface_cylinder(2,4) == 8\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(r=1,h=3)==4\nassert     lateralsuface_cylinder(r=1,h=1)==0\nassert     lateralsuface_cylinder(r=1,h=2)==0\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(4) == 8\nassert     volume_cube(8) == 64\nassert     volume_cube(5) == 125\n\n'''\nTesting code\n'''"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(5) == 50\nassert volume_cube(10) == 100\nassert volume_cube(1) == 1\n\ndef volume_cube_rec(side):\n    '''\n    Write a recursive function to find the volume of a cube given its side length.\n    '''\n    pass"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"Test passed\")\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(1) == 1\nassert volume_cube(2) == 8\nassert volume_cube(3) == 27\nassert volume_cube(4) == 64\nassert volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(3) == 27, \"volume_cube error\"\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(6) == 108\nassert     volume_cube(8) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_bit_set_number(0b101) == 0b100, \"Should be 0b100\"\nassert     even_bit_set_number(0b1010) == 0b1000, \"Should be 0b1000\"\nassert     even_bit_set_number(0b10111) == 0b1001, \"Should be 0b1001\"\nassert     even_bit_set_number(0b1010101101) == 0b101010110, \"Should be 0b101010110\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(1) == 0\nassert even_bit_set_number(5) == 0\nassert even_bit_set_number(0) == 1\nassert even_bit_set_number(2) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(12) == 13\nassert     even_bit_set_number(3) == 8\nassert     even_bit_set_number(5) == 12\nassert     even_bit_set_number(4) == 6\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(12) == 16, \"Should set even bits to 16\"\nassert     even_bit_set_number(10) == 20, \"Should set even bits to 20\"\nassert     even_bit_set_number(11) == 8, \"Should set even bits to 8\"\nassert     even_bit_set_number(15) == 10, \"Should set even bits to 10\"\nassert     even_bit_set_number(0) == 0, \"Should set even bits to 0\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_bit_set_number(21) == 4\n\neven_bit_set_number(25) == 7\n\ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_bit_set_number(0) == 0\nassert even_bit_set_number(3) == 3\nassert even_bit_set_number(7) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert even_bit_set_number(1) == 0\nassert even_bit_set_number(2) == 1\nassert even_bit_set_number(3) == 1\nassert even_bit_set_number(4) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(0x3) == 0x3, \"incorrect result\"\nassert     even_bit_set_number(0x0) == 0x0, \"incorrect result\"\nassert     even_bit_set_number(0x4) == 0x0, \"incorrect result\"\nassert     even_bit_set_number(0x8) == 0x4, \"incorrect result\"\nassert     even_bit_set_number(0x3) == 0x8, \"incorrect result\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_bit_set_number(11) == 9\neven_bit_set_number(12) == 10\neven_bit_set_number(101) == 5\neven_bit_set_number(1) == 1"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_occurences([(1,3),(1,2),(2,3),(1,1),(3,1),(2,2),(2,3),(3,2)]) == Counter({(1,3): 2, (1,2): 3, (2,3): 2, (3,1): 1, (2,2): 1, (2,3): 1, (3,2): 1})\nassert check_occurences([(1,3),(1,2),(1,3),(3,1),(2,2),(2,3),(3,2)]) == Counter({(1,3): 3, (3,1): 1, (2,2): 1, (2,3): 1, (3,2): 1})\nassert check_occurences([(1,3),(1,2),(1,3),(2,3),(2,3),(3,1),(2,2),(2,3),(3,2)]) == Counter({(1,3): 5, (3,1): 2, (2,2): 2, (2,3): 2, (3,2): 2})\n\n\n'''\nPython code for checking if a given string is a permutation of a palindrome\n\nNote: This is a version of the palindrome permutation problem. \nIn palindrome permutation, an anagram of a palindrome is another palindrome. \nSo the problem is to check if the given string can be made into a palindrome by rearranging the characters of the string. \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_occurences([('a', 5), ('b', 4), ('b', 5), ('c', 4)]) == {('a', 5): 1, ('b', 4): 2, ('b', 5): 1, ('c', 4): 1}\nassert check_occurences([(1, 2), (1, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 1, (2, 4): 2, (3, 4): 1}\n\ndef count_occurences_dict(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\nassert     check_occurences([(1,1), (1,1), (1,1), (2,2), (3,3), (1,1), (2,2)]) == {(1,1):3, (2,2):2, (3,3):1, (1,1):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([(\"hello\", 1), (\"hello\", 2), (\"hello\", 3), (\"hello\", 4), (\"hello\", 5)]) == {\"hello\": 5}\nassert     check_occurences([(\"hi\", 1), (\"hi\", 2), (\"hi\", 3), (\"hi\", 4), (\"hi\", 5)]) == {\"hi\": 5}\nassert     check_occurences([(\"hello\", 1), (\"hi\", 2), (\"hi\", 3), (\"hi\", 4), (\"hi\", 5)]) == {\"hello\": 1, \"hi\": 3}\nassert     check_occurences([(\"hello\", 1), (\"hello\", 2), (\"hello\", 3), (\"hello\", 4), (\"hello\", 5)]) == {\"hello\": 5}\nassert     check_occurences([(\"hello\", 1), (\"hello\", 2), (\"hello\", 3), (\"hello\", 4), (\"hello\", 5)]) == {\"hello\": 5}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([('a',1), ('b',2), ('a',1), ('a',2)]) == {('a',1): 2, ('b',2): 1} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',1), ('a',2)]) == {('a',1): 2, ('b',2): 2} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',2), ('a',1)]) == {('a',1): 3, ('b',2): 2} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',3), ('a',1)]) == {('a',1): 3, ('b',2): 2} \nassert check_occurences([('a',1), ('b',2), ('a',3), ('b',3), ('a',4)]) == {('a',1): 3, ('b',2): 2} \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_occurences([(1,), (1,), (1,), (2,), (2,), (2,), (2,), (3,), (3,), (3,), (4,), (4,), (4,), (5,), (5,), (5,), (6,), (6,), (6,), (7,), (7,), (7,), (8,), (8,), (8,), (9,), (9,), (9,), (10,), (10,), (10,), (11,), (11,), (11,), (12,), (12,), (12,), (13,), (13,), (13,), (14,), (14,), (14,), (15,), (15,), (15,), (16,), (16,), (16,), (17,), (17,), (17,), (18,), (18,), (18,), (19,), (19,), (19,), (20,), (20,), (20,), (21,), (21,), (21,), (22,), (22,), (22,), (23,), (23,), (23,), (24,), (24,), (24,), (25,), (25,), (25,), (26,), (26,), (26,), (27,), (27,), (27,), (28,), (28,), (28,), (29,), (29,), (29,), (30,), (30,), (30,), (31,), (31,), (31,), (32,), (32,), (32,), (33,), (33,), (33,), (34,), (34,), (34,), (35,), (35,), (35,), (36,), (36,), (36,), (37,), (37,), (37,), (38,), (38,), (38,), (39,), (39,), (39,), (40,), (40,), (40,), (41,), (41,), (41,), (42,), (42,), (42,), (43,), (43,), (43,), (44,), (44,), (44,), (45,), (45,), (45,), (46,), (46,), (46,), (47,), (47,), (47,), (48,), (48,), (48,), (49,), (49,), (49,), (50,), (50,), (50,), (51,), (51,), (51,), (52,), (52,), (52,), (53,), (53,), (53,), (54,), (54,), (54,), (55,), (55,), (55,), (56,), (56,), (56,), (57,), (57,), (57,), (58,), (58,), (58,), (59,), (59,), (59,), (60,), (60,), (60,), (61,), (61,), (61,), (62,), (62,), (62,), (63,), (63,), (63,), (64,), (64,), (64,), (65,), (65,), (65,), (66,), (66,), (66,), (67,), (67,), (67,), (68,), (68,), (68,), (69,), (69,), (69,), (70,), (70,), (70,), (71,), (71,), (71,), (72,), (72,), (72,), (73,), (73,), (73,), (74,), (74,), (74,), (75,), (75,), (75,), (76,), (76,), (76,), (77,), (77,), (77,), (78,), (78,), (78,), (79,), (79,), (79,), (80,), (80,), (80,), (81,), (81,), (81,), (82,), (82,), (82,), (83,), (83,), (83,), (84,), (84,), (84,), (85,), (85,), (85,), (86,), (86,), (86,), (87,), (87,), (87,), (88,), (88,), (88,), (89,), (89,), (89,), (90,), (90,), (90,), (91,), (91,), (91,), (92,), (92,), (92,), (93,), (93,), (93,), (94,), (94,), (94,), (95,), (95,), (95,), (96,), (96,), (96,), (97,), (97,), (97,), (98,), (98,), (98,), (99,), (99,), (99,), (100,), (100,), (100,), (101,), (101,), (101,), (102,), (102,), (102,), (103,), (103,), (103,), (104,), (104,), (104,), (105,), (105,), (105,), (106,), (106,), (106,), (107,), (107,), (107,), (108,), (108,), (108,), (109,), (109,), (109,), (110,), (110,), (110,), (111,), (111,), (111,), (112,), (112,), (112,), (113,), (113,), (113,), (114,), (114,), (114,), (115,), (115,), (115,), (116,), (116,), (116,), (117,), (117,), (117,), (118,), (118,), (118,), (119,), (119,), (119,), (120,), (120,), (120,), (121,), (121,), (121,), (122,), (122,), (122,), (123,), (123,), (123,), (124,), (124,), (124,), (125,), (125,), (125,), (126,), (126,), (126,), (127,), (127,), (127,), (128,), (128,), (128,), (129,), (129,), (129,), (130,), (130,), (130,), (131,), (131,), (131,), (132,), (132,), (132,), (133,), (133,), (133,), (134,), (134,), (134,), (135,), (135,), (135,), (136,), (136,), (136,), (137,), (137,), (137,), (138,), (138,), (138,), (139,), (139,), (139,), (140,), (140,), (140,), (141,), (141,), (141,), (142,), (142,), (142,), (143,), (143,), (143,), (144,), (144,), (144,), (145,), (145,), (145,), (146,), (146,), (146,), (147,), (147,), (147,), (148,), (148,), (148,), (149,), (149,), (149,), (150,), (150,), (150,), (151,), (151,), (151,), (152,), (152,), (152,), (153,), (153,), (153,), (154,), (154,), (154,), (155,), (155,), (155,), (156,), (156,), (156,), (157,), (157,), (157,), (158,), (158,), (158,), (159,), (159,), (159,), (160,), (160,), (160,), (161,), (161,), (161,), (162,), (162,), (162,), (163,), (163,), (163,), (164,), "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2)]) == {('Apple', 5): 1, ('Orange', 2): 1, ('Banana', 5): 1, ('Apple', 3): 1}\nassert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2)]) == {('Apple', 5): 1, ('Orange', 2): 1, ('Banana', 5): 1, ('Apple', 3): 1}\nassert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2), ('Orange', 2)]) == {('Apple', 5): 2, ('Orange', 2): 2, ('Banana', 5): 1, ('Apple', 3): 1}\nassert \n    check_occurences([]) == {}\nassert \n    check_occurences([('Apple', 5), ('Apple', 3), ('Orange', 1), ('Banana', 5), ('Apple', 2), ('Orange', 2)]) == {('Apple', 5): 1, ('Orange', 2): 1, ('Banana', 5): 1, ('Apple', 3): 1}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_of_substrings('asfdgadsf') == 6\nassert     number_of_substrings('fdsgafd') == 2\nassert     number_of_substrings('d') == 1\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_of_substrings('') == 0, \n    'Return 0 for an empty string.'\nassert     number_of_substrings('a') == 1, \n    'Return 1 for a string with only one sub-string.'\nassert     number_of_substrings('aab') == 2, \n    'Return 2 for a string with two sub-strings.'\nassert     number_of_substrings('abcb') == 3, \n    'Return 3 for a string with three sub-strings.'\nassert     number_of_substrings('abcbz') == 4, \n    'Return 4 for a string with four sub-strings.'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings(\"\") == 0, \"Valid\"\nassert number_of_substrings(\"A\") == 1, \"Valid\"\nassert number_of_substrings(\"ABA\") == 2, \"Valid\"\nassert number_of_substrings(\"ABAB\") == 3, \"Valid\"\nassert number_of_substrings(\"AAAAAAAAAAAA\") == 5, \"Valid\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_of_substrings('abc') == 0\nassert     number_of_substrings('abcabc') == 3\nassert     number_of_substrings('ab') == 1\nassert     number_of_substrings('abc') == 1\nassert     number_of_substrings('abca') == 4\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_rotation_point(input_string): \n    '''\n    Given a string, find the first non-repeating character in it and return its index.\n    If it doesn't exist, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a python function to find the substring which is maximum length of all substrings of a given string.\n'''\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"The number of substrings are: \", number_of_substrings(\"aabcd\"))\nprint(\"The number of substrings are: \", number_of_substrings(\"abc\"))\nprint(\"The number of substrings are: \", number_of_substrings(\"\"))\nprint(\"The number of substrings are: \", number_of_substrings(\"abcdefghijklmnopqrstuvwxyz\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_of_substrings('aaa') == 1\nassert     number_of_substrings('abcde') == 2\nassert     number_of_substrings('aaabcdef') == 3\nassert     number_of_substrings('aaabcdeaa') == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_of_substrings(\"abcd\") == 0, \"Test Failed\"\nassert     number_of_substrings(\"abcd\") == 1, \"Test Failed\"\nassert     number_of_substrings(\"aabcbcb\") == 4, \"Test Failed\"\nassert     number_of_substrings(\"abc\") == 1, \"Test Failed\"\nassert     number_of_substrings(\"\") == 0, \"Test Failed\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings('Ab') == 3\nassert     number_of_substrings('abc') == 3\nassert     number_of_substrings('abcd') == 4\nassert     number_of_substrings('aaaaaaaaaaaa') == 15\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"check: get_total_number_of_sequences()\")\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(1,0) == 0\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(2,1) == 1\nassert     get_total_number_of_sequences(2,2) == 2\nassert     get_total_number_of_sequences(3,1) == 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(10,2) == 21\nassert     get_total_number_of_sequences(10,3) == 109\nassert     get_total_number_of_sequences(10,4) == 5321\nassert     get_total_number_of_sequences(10,5) == 84720\nassert     get_total_number_of_sequences(10,6) == 1881342\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(10,5) == 40, get_total_number_of_sequences(10,5)\nassert     get_total_number_of_sequences(10,6) == 121, get_total_number_of_sequences(10,6)\nassert     get_total_number_of_sequences(10,7) == 280, get_total_number_of_sequences(10,7)\n\nprint('Test passed')"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    get_total_number_of_sequences(2,3) == 5\n    get_total_number_of_sequences(1,3) == 1\n    get_total_number_of_sequences(3,1) == 0\n    get_total_number_of_sequences(2,2) == 2"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(0, 1) == 0\nassert     get_total_number_of_sequences(0, 2) == 0\nassert     get_total_number_of_sequences(0, 3) == 0\nassert     get_total_number_of_sequences(1, 1) == 1\nassert     get_total_number_of_sequences(1, 2) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(4, 2) == 1\nassert     get_total_number_of_sequences(4, 1) == 6\nassert     get_total_number_of_sequences(1, 1) == 6\nassert     get_total_number_of_sequences(2, 1) == 6\nassert     get_total_number_of_sequences(10, 2) == 42\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(3,4) == 4\nassert get_total_number_of_sequences(10,4) == 2\nassert get_total_number_of_sequences(1000,4) == 4\nassert get_total_number_of_sequences(1000000,4) == 5\nassert get_total_number_of_sequences(100000,5) == 3\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list(['hello','hi','goodbye'],[1,2,3])==['hello','hi','2']\nassert     replace_list([[1,2,3]],[4,5,6])==[[4,5,6]]\nassert     replace_list([[1,2,3,4,5]],[6,7,8])==[1,2,3,4,5,6,7,8]\nassert     replace_list(['goodbye','hi','hello'],[1,2,3])==['goodbye','hi','2']\nassert     replace_list([[1,2,3,4,5]],[6,7,8])==[[1,2,3,4,5],[6,7,8]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert replace_list([1,2,3], [4,5,6]) == [[1,2,3],[4,5,6]]\nassert replace_list([1,2], [3,4,5]) == [[1,2],[3,4,5]]\nassert replace_list([], [1,2,3]) == [[],[1,2,3]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3], [4,5,6]) == [1,2,3,4,5,6]\nassert     replace_list([3,4], [1,2]) == [3,1,2,4]\nassert     replace_list([7], [1,2,3]) == [7,1,2,3]\nassert     replace_list([], [1,2,3]) == []\nassert     replace_list([1,2,3], []) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([4,7,3,9,8], [5,6]) == [4,7,3,9,8,5,6]\nassert     replace_list([4,7,3], [5,6,7]) == [4,7,3,5,6,7]\nassert     replace_list([], []) == []\nassert     replace_list([], []) == []\nassert     replace_list([], []) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([1, 2, 3], [4, 5, 6]) == True\nassert     replace_list([1, 2, 3], ['a', 'b', 'c']) == False\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [1,2,4], \"List 1\"\nassert replace_list([3,2,1],[4,5,6]) == [3,2,4], \"List 2\"\nassert replace_list([1,2,3],[4]) == [1,2,4], \"List 3\"\nassert replace_list([1,2,3],[]) == [1,2,3], \"Empty List\"\nassert replace_list([1],[]) == [1], \"Empty List\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3,4,5], [5,6,7,8,9]) ==     [1,2,3,4,8]\nassert     replace_list([1,2,3,4,5], [6,7,8,9,10]) ==     [1,2,3,4,9]\nassert     replace_list([1,2,3,4,5], [6,7,8,9]) ==     [1,2,3,8]\nassert     replace_list([1,2,3], [4,5,6]) ==     [1,2,4]\nassert     replace_list([1,2,3,4], [5,6,7,8,9]) ==     [1,2,3,8]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (replace_list([1,2,3], [4,5,6]) == [1,2,3,4,5,6]), \"First list is not correct.\"\nassert     (replace_list([1,2,3], [3,4,5]) == [1,2,3,4,5]), \"Second list is not correct.\"\nassert     (replace_list([], [1,2,3]) == []), \"First list is empty.\"\nassert     (replace_list([1,2,3], []) == [1,2,3]), \"Second list is empty.\"\n\ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicate elements removed.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) ==  [1,2,3]\nassert     replace_list([1,2,3],[4,5,6,7]) ==  [1,2,3,7]\nassert     replace_list([1,2,3],[4,5,6,7,8,9]) ==  [1,2,3,7,8,9]\nassert     replace_list([1,2,3],[4,5,6,7,8,9,10]) ==  [1,2,3,7,8,9,10]\n\nprint('Tests passed')\nprint('\\n')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac('hello world') == 11\nassert     count_charac('hello world') == 6\nassert     count_charac('hello') == 3\nassert     count_charac('h') == 1\nassert     count_charac('h' + 'ello') == 4\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_charac(\"this is a string\") == 14, \"Expected 14, actual %s\" % (count_charac(\"this is a string\"))\nassert     count_charac(\"\") == 0, \"Expected 0, actual %s\" % (count_charac(\"\"))\nassert     count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 26, \"Expected 26, actual %s\" % (count_charac(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_charac(\"\") == 0\nassert count_charac(\"a\") == 1\nassert count_charac(\"ab\") == 2\nassert count_charac(\"abc\") == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac('abc') == 3, 'Wrong answer for \"abc\"'\nassert     count_charac('abcdefghijklmnopqrstuvwxyz') == 26, 'Wrong answer for \"abcdefghijklmnopqrstuvwxyz\"'\nassert     count_charac('abcdefghijklmnopqrstuvwxyz'*5) == 156, 'Wrong answer for \"abcdefghijklmnopqrstuvwxyz'*5'\"'\nassert     count_charac('') == 0, 'Wrong answer for \"\"'\nassert     count_charac('q') == 0, 'Wrong answer for \"q\"'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    Words in this string are separated by spaces.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_charac('abcdef') == 6, \"incorrect result\"\nassert     count_charac('abc') == 3, \"incorrect result\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_charac('abracadabra') == 11\nassert     count_charac('abracadabra') == 12\nassert     count_charac('abracadabra') == 12\nassert     count_charac('abracadabra') == 13\n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac(\"Hi\") == 5\nassert     count_charac(\"hihihihihihihihihi\") == 20\nassert     count_charac(\"\") == 0\nassert     count_charac(\"Hi\", \" \") == 0\nassert     count_charac(\"hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_Perfect_Square(9) == 10, \"TEST 1 FAILED\"\nassert     next_Perfect_Square(27) == 28, \"TEST 1 FAILED\"\nassert     next_Perfect_Square(48) == 49, \"TEST 1 FAILED\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_Perfect_Square(7) == 9\nassert     next_Perfect_Square(12) == 14\nassert     next_Perfect_Square(25) == 32\nassert     next_Perfect_Square(33) == 36\nassert     next_Perfect_Square(500) == 512\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnext_Perfect_Square(0) == 0\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(2) == 3\nnext_Perfect_Square(3) == 4\nnext_Perfect_Square(4) == 4\nnext_Perfect_Square(5) == 5\nnext_Perfect_Square(6) == 6\nnext_Perfect_Square(8) == 9\nnext_Perfect_Square(9) == 10\nnext_Perfect_Square(10) == 12\nnext_Perfect_Square(15) == 20\nnext_Perfect_Square(20) == 24\nnext_Perfect_Square(21) == 22\nnext_Perfect_Square(25) == 26\nnext_Perfect_Square(26) == 27\nnext_Perfect_Square(29) == 32\nnext_Perfect_Square(33) == 36\nnext_Perfect_Square(35) == 36\nnext_Perfect_Square(39) == 44\nnext_Perfect_Square(40) == 48\nnext_Perfect_Square(41) == 48\nnext_Perfect_Square(45) == 48\nnext_Perfect_Square(46) == 48\nnext_Perfect_Square(47) == 48\nnext_Perfect_Square(48) == 48\nnext_Perfect_Square(49) == 48\nnext_Perfect_Square(50) == 48\nnext_Perfect_Square(51) == 48\nnext_Perfect_Square(52) == 48\nnext_Perfect_Square(53) == 48\nnext_Perfect_Square(54) == 48\nnext_Perfect_Square(55) == 48\nnext_Perfect_Square(56) == 48\nnext_Perfect_Square(57) == 48\nnext_Perfect_Square(58) == 48\nnext_Perfect_Square(59) == 48\nnext_Perfect_Square(60) == 48\nnext_Perfect_Square(61) == 48\nnext_Perfect_Square(62) == 48\nnext_Perfect_Square(63) == 48\nnext_Perfect_Square(64) == 48\nnext_Perfect_Square(65) == 48\nnext_Perfect_Square(66) == 48\nnext_Perfect_Square(67) == 48\nnext_Perfect_Square(68) == 48\nnext_Perfect_Square(69) == 48\nnext_Perfect_Square(70) == 48\nnext_Perfect_Square(71) == 48\nnext_Perfect_Square(72) == 48\nnext_Perfect_Square(73) == 48\nnext_Perfect_Square(74) == 48\nnext_Perfect_Square(75) == 48\nnext_Perfect_Square(76) == 48\nnext_Perfect_Square(77) == 48\nnext_Perfect_Square(78) == 48\nnext_Perfect_Square(79) == 48\nnext_Perfect_Square(80) == 48\nnext_Perfect_Square(81) == 48\nnext_Perfect_Square(82) == 48\nnext_Perfect_Square(83) == 48\nnext_Perfect_Square(84) == 48\nnext_Perfect_Square(85) == 48\nnext_Perfect_Square(86) == 48\nnext_Perfect_Square(87) == 48\nnext_Perfect_Square(88) == 48\nnext_Perfect_Square(89) == 48\nnext_Perfect_Square(90) == 48\nnext_Perfect_Square(91) == 48\nnext_Perfect_Square(92) == 48\nnext_Perfect_Square(93) == 48\nnext_Perfect_Square(94) == 48\nnext_Perfect_Square(95) == 48\nnext_Perfect_Square(96) == 48\nnext_Perfect_Square(97) == 48\nnext_Perfect_Square(98) == 48\nnext_Perfect_Square(99) == 48\nnext_Perfect_Square(100) == 48\nnext_Perfect_Square(101) == 48\nnext_Perfect_Square(102) == 48\nnext_Perfect_Square(103) == 48\nnext_Perfect_Square(104) == 48\nnext_Perfect_Square(105) == 48\nnext_Perfect_Square(106) == 48\nnext_Perfect_Square(107) == 48\nnext_Perfect_Square(108) == 48\nnext_Perfect_Square(109) == 48\nnext_Perfect_Square(110) == 48\nnext_Perfect_Square(111) == 48\nnext_Perfect_Square(112) == 48\nnext_Perfect_Square(113) == 48\nnext_Perfect_Square(114) == 48\nnext_Perfect_Square(115) == 48\nnext_Perfect_Square(116) == 48\nnext_Perfect_Square(117) == 48\nnext_Perfect_Square(118) == 48\nnext_Perfect_Square(119) == 48\nnext_Perfect_Square(120) == 48\nnext_Perfect_Square(121) == 48\nnext_Perfect_Square(122) == 48\nnext_Perfect_Square(123) == 48\nnext_Perfect_Square(124) == 48\nnext_Perfect_Square(125) == 48\nnext_Perfect_Square(126) == 48\nnext_Perfect_Square(127) == 48\nnext_Perfect_Square(128) == 48\nnext_Perfect_Square(129) == 48\nnext_Perfect_Square(130) == 48\nnext_Perfect_Square(131) == 48\nnext_Perfect_Square(132) == 48\nnext_Perfect_Square(133) == 48\nnext_Perfect_Square(134) == 48\nnext_Perfect_Square(135) == 48\nnext_Perfect_Square(136) == 48\nnext_Perfect_Square(137) == 48\nnext_Perfect_Square(138) == 48\nnext_Perfect_Square(139) == 48\nnext_Perfect_Square(140) == 48\nnext_Perfect_Square(141) == 48\nnext_Perfect_Square(142) == 48\nnext_Perfect_Square(143) == 48\nnext_Perfect_Square(144) == 48\nnext_Perfect_Square(145) == 48\nnext_Perfect_Square(146) == 48\nnext_Perfect_Square(147) == 48\nnext_Perfect_Square(148) == 48\nnext_Perfect_Square(149) == 48\nnext_Perfect_Square(150) == 48\nnext_Perfect_Square(151) == 48\nnext_Perfect_Square(152) == 48\nnext_Perfect_Square(153) == 48\nnext_Perfect_Square(154) == 48\nnext_Perfect_Square(155) == 48\nnext_Perfect_Square(156) == 48\nnext_Perfect_Square(157) == 48\nnext_Perfect_Square(158) == 48\nnext_Perfect_Square(159) == 48\nnext_Perfect_Square(160) == 48\nnext_Perfect_Square(161) == 48\nnext_Perfect_Square(162) == 48\nnext_Perfect_Square(163) == 48\nnext_Perfect_Square(164) == 48\nnext_Perfect_Square(165) == 48\nnext_Perfect_Square(166) == 48\nnext_Perfect_Square(167) == 48\nnext_Perfect_Square(168) == 48\nnext_Perfect_Square(169) == 48\nnext_Perfect_Square(170) == 48\nnext_Perfect_Square(171) == 48\nnext_Perfect_Square(172) == 48\nnext_Perfect_Square(173) == 48\nnext_Perfect_Square(174) == 48\nnext_Perfect_Square(175) == 48\nnext_Perfect_Square(176) == 48\nnext_Perfect_Square(177) == 48\nnext_Perfect_Square(178) == 48\nnext_Perfect_Square(179) == 48\nnext_Perfect_Square(180) == 48\nnext_Perfect_Square(181) == 48\nnext_Perfect_Square(182) == 48\nnext_Perfect_Square(183) == 48\nnext_Perfect_Square(184) == 48\nnext_Perfect_Square(185) == 48\nnext_Perfect_Square(186) == 48\nnext_Perfect_Square(187) == 48\nnext_Perfect_Square(188) == 48\nnext_Perfect_Square(189) == 48\nnext_Perfect_Square(190) == 48\nnext_Perfect_Square(191) == 48\nnext_Perfect_Square(192) == 48\nnext_Perfect_Square(193) == 48\nnext_Perfect_Square(194) == 48\nnext_Perfect_Square(195) == 48\nnext_Perfect_Square(196) == 48\nnext_Perfect_Square(197) == 48\nnext_Perfect_Square(198) == 48\nnext_Perfect_Square(199) == 48\nnext_Perfect_Square(200) == 48\nnext_Perfect_Square(201) == 48\nnext_Perfect_Square(202) == 48\nnext_Perfect_Square(203) == 48\nnext_Perfect_Square(204) ="
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 0 \nassert next_Perfect_Square(1) == 0\nassert next_Perfect_Square(4) == 4\nassert next_Perfect_Square(10) == 10\nassert next_Perfect_Square(7) == 8\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"Pass\" if (next_Perfect_Square(9) == 10) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(16) == 19) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(128) == 32768) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(1024) == 65536) else \"Fail\")\nprint (\"Pass\" if (next_Perfect_Square(1) == 1) else \"Fail\")\n\n\ndef next_Perfect_Square(N): \n    if N == 1: \n        return 1\n    else:\n        if (N % 4 == 0): \n            return int((N/2))*2\n        else: \n            if ((N%2 == 0) & (N%3!= 0)): \n                return int(((N-1)/2))*2 + 1\n            else: \n                return int(((N-1)/2))*2 + 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnext_Perfect_Square(12) == 16\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(12) == 20\nassert     next_Perfect_Square(69) == 82\nassert     next_Perfect_Square(71) == 87\nassert     next_Perfect_Square(69) == 82\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert next_Perfect_Square(1) == 1\nassert next_Perfect_Square(5) == 10\nassert next_Perfect_Square(9) == 19\nassert next_Perfect_Square(16) == 25\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmax_sum([1,3,2,6]) == 7\nmax_sum([4,1,5,7,2,0]) == 14\nmax_sum([1,2,3,4,5]) == 12\nmax_sum([0,1,3,4,7,2,5]) == 13\nmax_sum([7,0,1,3,4,5,2,10]) == 15\nmax_sum([1,2,0,4,3]) == 6\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(max_sum([5,3,1,2,4]))\nprint(max_sum([5,4,3,2,1]))\nprint(max_sum([1,2,3,4,5]))\nprint(max_sum([5,4,3,2,1,10]))\nprint(max_sum([5,4,3,2,1,10,20,1]))\nprint(max_sum([1,2,3,4,5,5,5,5]))\nprint(max_sum([5,4,3,2,1,2,3,4]))\nprint(max_sum([5,4,3,2,1,2,3,4,5,5,5,5]))\n\n\n\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_sum(arr): \n    '''\n    Given an array, we need to find the maximum sum of a subsequence of the array.\n    Example:\n        Input: arr[] = {5, -10, 3, 5, 6, 5, -2}\n        Output: 42\n        The subsequence is {5, -10, 3, 5, 6, 5, -2},\n        whose maximum sum is  42\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr = [1, 3, 2, 5, 4, 6, 1, 3] \nassert max_sum(arr) == 9 \n\n\n\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum([]) == 0\nassert     max_sum([-4, -5, -10]) == -10\nassert     max_sum([-1, 1, -2, 2, -3, 5, -4, 6]) == 11\nassert     max_sum([-1, 1, -2, 2, -3, 5, -4, 6, -4, 3]) == 13\nassert     max_sum([-2, -3, -4, -5, -6, -7, -8]) == -1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert max_sum([3, 1, 2, 5, 3, 7]) == 9, 'test 1 failed'\nassert max_sum([3, 5, 1, 3, 2, 1, 4]) == 10, 'test 2 failed'\nassert max_sum([3, 1, 2, 5, 3, 7, 1, 3, 2, 1, 4]) == 11, 'test 3 failed'\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum([-15, -12, -8, 5, -4, 3]) == 5\nassert     max_sum([-6, -3, -1, 0, 1, 2]) == 8\nassert     max_sum([2, 4, 3, 1, 5, 6, 7, -10]) == 9\nassert     max_sum([-1]) == -1\nassert     max_sum([]) == 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nSolution:\n\n1. The algorithm for babylonian squareroot is to keep adding 1. to the squareroot until it has the same squareroot as the original number. Then subtract the squareroot from the original number, to get the final squareroot.\n''"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(1) == 0\nassert     babylonian_squareroot(2) == 1\nassert     babylonian_squareroot(3) == 1.4142135623730951\nassert     babylonian_squareroot(10) == 3\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(20) == 4\nassert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(30) == 5\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(1) == 0.5, 'incorrect output'\nassert     babylonian_squareroot(2) == 1, 'incorrect output'\nassert     babylonian_squareroot(4) == 2, 'incorrect output'\nassert     babylonian_squareroot(8) == 3, 'incorrect output'\nassert     babylonian_squareroot(16) == 4, 'incorrect output'\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(2) == 1\nassert     babylonian_squareroot(3) == 1\nassert     babylonian_squareroot(4) == 1\nassert     babylonian_squareroot(5) == 1\nassert     babylonian_squareroot(6) == 1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(1) == 0.5\nassert     babylonian_squareroot(2) == 1.0\nassert     babylonian_squareroot(4) == 2.0\nassert     babylonian_squareroot(6) == 3.0\nassert     babylonian_squareroot(8) == 4.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \nclass Solution:\n    '''\n    Given a string, find the longest palindromic subsequence.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (lps(\"aaba\") == 6), \"1\"\nassert     (lps(\"ababa\") == 6), \"2\"\nassert     (lps(\"abbaba\") == 6), \"3\"\nassert     (lps(\"abababa\") == 7), \"4\"\nassert     (lps(\"a\") == 1), \"5\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lps(\"ababa\") == 4\nassert     lps(\"a\") == 1\nassert     lps(\"aa\") == 2\nassert     lps(\"aab\") == 2\nassert     lps(\"abb\") == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lps('abccba') == 7\nassert     lps('abccbb') == 5\nassert     lps('aabcba') == 6\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef lps_dp(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string using Dynamic Programming.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lps(\"acac\") == 3\nassert     lps(\"abcdcba\") == 5\nassert     lps(\"abcdcbaa\") == 6\nassert     lps(\"abcdcbaab\") == 6\nassert     lps(\"a\") == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lps('hello') == 5 \nassert     lps('h') == 2\nassert     lps('a') == 1\nassert     lps('ac') == 3\nassert     lps('abb') == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lps_recursive(str):\n    if len(str) < 2: return len(str)\n    if str[0] == str[-1]:\n        return 2 + lps_recursive(str[1:-1])\n    else:\n        return max(lps_recursive(str[1:]), lps_recursive(str[:-1]))\n\nassert lps('asdfghjkl') == 7\nassert lps_recursive('asdfghjkl') == 7\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(4) == 3\nassert     harmonic_sum(5) == 5.5\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     harmonic_sum(5) == harmonic_sum(10) == harmonic_sum(15) == 1, \"Wrong\"\nassert     harmonic_sum(2) == harmonic_sum(1) == harmonic_sum(0) == 1, \"Wrong\"\nassert     harmonic_sum(0) == harmonic_sum(1) == harmonic_sum(2) == 1, \"Wrong\"\n\n\ndef legendre_polynomial(n, m):\n    '''\n    Write a function that takes in 2 integers n and m and returns the legendre\n    polynomial at the nth order of the mth degree of the form (1-q^2/2!+...+(-1)^n q^2/2!)/(1-q^2/2!+...+(-1)^n q^2/2!)\n\n    Here, the q will be the integer {1, 2, 3,..., n}, and the p\n    will be the integer {1, 2,..., m}.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nharmonic_sum(1) == 0\nharmonic_sum(2) == 1\nharmonic_sum(3) == 1\nharmonic_sum(4) == 2\nharmonic_sum(5) == 1 + 1/2 + 1/3 + 1/4 + 1/5\nharmonic_sum(6) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6\nharmonic_sum(7) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7\nharmonic_sum(8) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8\nharmonic_sum(9) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9\nharmonic_sum(10) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10\nharmonic_sum(11) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11\nharmonic_sum(12) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12\nharmonic_sum(13) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13\nharmonic_sum(14) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14\nharmonic_sum(15) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15\nharmonic_sum(16) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16\nharmonic_sum(17) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17\nharmonic_sum(18) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18\nharmonic_sum(19) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19\nharmonic_sum(20) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20\nharmonic_sum(21) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21\nharmonic_sum(22) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22\nharmonic_sum(23) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23\nharmonic_sum(24) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24\nharmonic_sum(25) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25\nharmonic_sum(26) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26\nharmonic_sum(27) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26 + 1/27\nharmonic_sum(28) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26 + 1/27 + 1/28\nharmonic_sum(29) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/25 + 1/26 + 1/27 + 1/28 + 1/29\nharmonic_sum(30) == 1 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 + 1/11 + 1/12 + 1/13 + 1/14 + 1/15 + 1/16 + 1/17 + 1/18 + 1/19 + 1/20 + 1/21 + 1/22 + 1/23 + 1/24 + 1/2"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(5) == 3.0\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nharmonic_sum(1) == 1\nharmonic_sum(2) == 1.5\nharmonic_sum(3) == 2\nharmonic_sum(4) == 2.5\nharmonic_sum(10) == 55.0"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     harmonic_sum(0) == 0, \"The harmonic sum of 0 should be 0\"\nassert     harmonic_sum(1) == 1, \"The harmonic sum of 1 should be 1\"\nassert     harmonic_sum(2) == 1 + 1, \"The harmonic sum of 2 should be 1 + 1\"\nassert     harmonic_sum(3) == 1 + 1 + 1, \"The harmonic sum of 3 should be 1 + 1 + 1\"\nassert     harmonic_sum(4) == 1 + 1 + 1 + 1, \"The harmonic sum of 4 should be 1 + 1 + 1 + 1\"\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 2\nassert     harmonic_sum(4) == 6\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert harmonic_sum(3) == 1.5\nassert harmonic_sum(5) == 3\nassert harmonic_sum(0) == 1.0\nassert harmonic_sum(1) == 1.0"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nintersection_array([1,2,3],[1,2,3]) == [1,2,3]\nintersection_array([1,1,2],[1,1,2]) == [1,1,2]\nintersection_array([1,1,2],[1,2,3]) == [1,2,3]\nintersection_array([1,2,3],[1,2,3]) == []\nintersection_array([1,2,3],[1,3,4]) == []\nintersection_array([1,2,3,4,5],[1,2,3,4,5]) == [1,2,3,4,5]\nintersection_array([1,2,3],[4,5,6]) == []\nintersection_array([1,2,3],[2,3,4]) == [3]\nintersection_array([1,2,3,4,5],[5,6,7,8,9]) == []\nintersection_array([1,2,3,4,5,6,7],[1,2,3,4,5,7,8]) == [1,2,3,4,5,7,8]\nintersection_array([1,2,3,4,5,6,7,8,9],[9,10,11,12,13]) == [9,10,11,12,13]\nintersection_array([1,2,3,4,5,6,7,8,9],[11,12,13,14,15]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11],[11,12,13,14,15,16,17]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12],[11,12,13,14,15,16,17,18]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13],[11,12,13,14,15,16,17,18,19]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14],[11,12,13,14,15,16,17,18,19,20]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[11,12,13,14,15,16,17,18,19,20,21]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[11,12,13,14,15,16,17,18,19,20,21,22]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) == []\nintersection_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,2,3],[1,2,3]) == [1,2]\nassert     intersection_array([1,2,3],[1,2,3,4]) == [1,2,3]\nassert     intersection_array([1,2,3,4],[1,2,3,4]) == [1,2,3,4]\nassert     intersection_array([1,2,3,4],[1,2]) == []\nassert     intersection_array([1,2,3,4],[1,2,4]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection_array([1,2,3,4,5,6],[2,4,6,8,10]) == 4, 'Should be 4'\nassert     intersection_array([1,2,3,4,5],[2,4,6,8,10]) == 4, 'Should be 4'\nassert     intersection_array([],[2,4,6,8,10]) == 0, 'Should be 0'\nassert     intersection_array([1,2,3],[3,4,5]) == 1, 'Should be 1'\nassert     intersection_array([1,2,3,4,5,6],[2,4,6,8,10]) == 0, 'Should be 0'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([2,3,3,5,7], [2,2,7,7]) == [2,3,7]\nassert     intersection_array([], []) == []\nassert     intersection_array([2,2,2,2,2], [2,2,2,2,2]) == [2,2]\nassert     intersection_array([1,2,3,4], [2,3,4,5]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert intersection_array([2,3,4,5],[3,4,6,7]) == [3,4]\nassert intersection_array([1,2,3,4,5],[3,4,6,7,8]) == []\n\n\n\ndef intersection(nums1, nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,2,1], [1,2,1,2]) == [1,2]\nassert     intersection_array([1,2,2,1], [1,2,2,1]) == [1,2,1]\nassert     intersection_array([1,2,2,1,2,1], [1,2,2,1,2,1]) == [1,2,1]\nassert     intersection_array([1,2,2,1,2,1], [1,2,2,1,2,1]) == [1,2,1,2]\nassert     intersection_array([1,2,2,1,2,1], [1,2,2,1,2,1,1]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    intersection_array([1,3,7,9,11,13],[1,2,7,8,9]) == True\n    intersection_array([1,3,7,9,11,13],[13,7,8,11]) == True\n    intersection_array([1,3,7,9,11,13],[1,2,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,7,1]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,2,3,7,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7,3,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,3,1,7,9]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,9,3,7]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,9,7]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,9,7,11]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,9,7,11,13]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7,3,9,11]) == False\n    intersection_array([1,3,7,9,11,13],[13,1,7,3,9,11,13]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,7,9,11,13,13]) == False\n    intersection_array([1,3,7,9,11,13],[1,3,7,9,11,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13]) == True\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13]) == True\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13]) == True\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,7,9,11],[1,2,4,7,9,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13]) == False\n    intersection_array([1,2,4,"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert intersection_array([1, 2, 3, 4], [2, 4, 6]) == [2, 4]\nassert intersection_array([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nassert intersection_array([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 9]) == [4, 6]\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_X((1, 2, 3, 2, 3, 4, 5, 6, 2), 2) == 3, 'incorrect'\nassert     count_X((1, 2, 3, 2, 3, 4, 5, 6, 2), 5) == 1, 'incorrect'\nassert     count_X((1, 2, 3, 2, 3, 4, 5, 6, 2), 6) == 0, 'incorrect'\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncount_X(('a', 'b', 'c', 'd', 'e'), 'b') == 2\ncount_X(('a', 'b', 'c', 'd', 'e'), 'z') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_X((1,2,3),2) == 2\nassert     count_X((1,2,3),4) == 0\nassert     count_X((1,2,3),2.3) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_X([(1, 2), (2, 3), (3, 4), (2, 4)], 4) == 2\nassert count_X([(1, 2), (2, 3), (3, 4), (2, 4)], 1) == 3\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_X([(1,2,3), (3,2,3), (3,3,3), (2,2,2)], 2) == 2\nassert     count_X((1,2,3), 2) == 1\nassert     count_X((1,2,3,4), 2) == 2\nassert     count_X((1,2,3,4,5), 2) == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntup = (\"apple\", \"banana\", \"mango\", \"apple\", \"orange\", \"apple\", \"banana\", \"mango\", \"apple\")\nassert count_X(tup, \"apple\") == 4\nassert count_X(tup, \"banana\") == 3\nassert count_X(tup, \"mango\") == 2\nassert count_X(tup, \"orange\") == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_X_check(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_X([1,2,3,4,5],1) == 3, \"incorrect count_X(tup,1)\"\nassert     count_X([1,2,3,4,5],0) == 0, \"incorrect count_X(tup,0)\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([1, 2, 3], 0) ==    [0, 1, 2, 3]\nassert     insert_element([1, 2, 3], 3) ==    [1, 2, 3, 0, 1, 2, 3]\nassert     insert_element([1, 2, 3], 4) ==    [1, 2, 3, 4, 1, 2, 3]\nassert     insert_element([1, 2, 3, 4], 2) ==    [1, 2, 3, 4, 2, 1, 2, 3]\nassert     insert_element([], 0) ==    []\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3], \"test 1 Failed\"\nassert     insert_element([3,4,5],1) == [1,3,4,5], \"test 2 Failed\"\nassert     insert_element([],1) == [1], \"test 3 Failed\"\nassert     insert_element([1,2,3,4],1) == [1,1,2,3,4], \"test 4 Failed\"\nassert     insert_element([1,2,3],4) == [4,1,2,3], \"test 5 Failed\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_element(list,element):\n    '''\n    Write a function that takes in a list and an element and returns a boolean representing whether the element exists in the list or not.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element([],1) == [1]\nassert     insert_element([1],1) == [1,1]\nassert     insert_element([1,2],1) == [1,2,1]\nassert     insert_element([1,2],3) == [3,1,2]\nassert     insert_element([1,2,3],1) == [1,1,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef insert_element2(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([1,2,3,4,5], 6) == [1,2,3,4,6,5], \"failed\"\nassert     insert_element([1,2,3], 6) == [1,2,6,3], \"failed\"\nassert     insert_element([1,2], 6) == [1,2,6], \"failed\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     insert_element([1,3,4,5,6],3) == [1,3,3,4,5,6]\nassert     insert_element([1,3,4,5,6],2) == [1,2,3,4,5,6]\nassert     insert_element([1,3,4,5,6],7) == [1,3,4,5,6,7]\nassert     insert_element([1,3,4,5,6],0) == [0,1,2,3,4,5,6]\nassert     insert_element([],0) == [0]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     insert_element([2, 4, 6, 8], 5) == [2, 4, 5, 6, 8]\nassert     insert_element([1, 2, 3, 4], 1) == [1, 2, 3, 4, 1]\nassert     insert_element([1, 2, 3, 4], 4) == [1, 2, 3, 4, 4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3], \"Wrong\"\nassert     insert_element([1,2,3,4],5) == [1,5,2,3,4], \"Wrong\"\nassert     insert_element([],1) == [1], \"Wrong\"\nassert     insert_element([1,2],3) == [1,3,2], \"Wrong\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([1,1]) == ([0.0, 1.1], 0), \"Testcase 1 Failed\"\nassert     convert([1,1]) == ([0.0, 1.1], 0), \"Testcase 2 Failed\"\nassert     convert([0,1]) == ([1.1, 0.0], 1), \"Testcase 3 Failed\"\nassert     convert([0,1]) == ([1.1, 0.0], 1), \"Testcase 4 Failed\"\nassert     convert([-1,1]) == ([1.1, 0.0], 1), \"Testcase 5 Failed\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([2.0,1.0]) == ([1.41421 +0.0j, 1.41421 +0.0j], 1.41421)\nassert convert([2.0,1.0]) == ([2.0 +0.0j, 1.0 +0.0j], 2.0)\nassert convert([1.0,1.0]) == ([1.41421 +0.0j, 1.41421 +0.0j], 1.41421)\nassert convert([1.0,1.0]) == ([1.0 +0.0j, 1.0 +0.0j], 1.0)\nassert convert([0.0,1.0]) == ([0.0 +0.0j, 1.0 +0.0j], 1.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert((1,1)) == (1.0, 1.0)\nassert     convert((1,2)) == (1.0, 1.4142135623730951)\nassert     convert((1,-1)) == (1.0, -1.0)\nassert     convert((0,0)) == (0.0, 0.0)\nassert     convert((0.5,0)) == (0.5, 0.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert([1 + 1j, 2 + 2j, 3 + 3j]) == [(1, 2), (2, 3), (3, 1)]\nassert     convert([1 + 1j, 2 + 2j, 3 + 3j, 4 + 4j]) == [(1, 2), (2, 3), (3, 1), (4, 4)]\nassert     convert([0 + 0j, -1 + -1j, -2 + 2j, -3 + 3j]) == [(0, 0), (1, -1), (-2, 2), (-3, 3)]\nassert     convert([0 + 0j, 1 + 1j, 2 + 2j, 3 + 3j]) == [(0, 0), (1, 1), (2, 2), (3, 3)]\nassert     convert([]) == []\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert([1, 0]) == ['0', '1.000000', '0.000000']\nassert     convert([0, 1]) == ['0', '0.000000', '1.000000']\nassert     convert([0, 0]) == ['0', '0.000000', '0.000000']\nassert     convert([1, 2]) == ['1', '1.000000', '1.14142']\nassert     convert([1, 1j]) == ['1', '1.000000', '1.14142']\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert(3+4j) == (3,4)\nassert     convert(-3+4j) == (3,4)\nassert     convert(3+0j) == (3,0)\nassert     convert(-3+0j) == (3,0)\nassert     convert(0+0j) == (0,0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef radixSort(arr, k):\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert(cmath.sqrt(1+2j)) == (0.5+0.5j,1)\nassert     convert(cmath.sqrt(-1+2j)) == (1+0j,1)\nassert     convert(cmath.sqrt(1-2j)) == (1-0j,1)\nassert     convert(cmath.sqrt(-1-2j)) == (-1+0j,1)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 0\nassert     count_integer([1, 2, 3, 4, 5, 6, 7]) == 5\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_integer([1, 2, 3]) == 3, '1, 2, 3 should be counted as 3'\nassert count_integer([1, 1, 1]) == 3, '1, 1, 1 should be counted as 3'\nassert count_integer([1, 1, 1, 1, 1, 1]) == 6, '1, 1, 1, 1, 1, 1 should be counted as 6'"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([1,2,3,4,5,6]) == 6,'should return 6'\nassert     count_integer([1,2,3,4,5]) == 5,'should return 5'\nassert     count_integer([]) == 0,'should return 0'\nassert     count_integer([2,3,4,5,6,7]) == 5,'should return 5'\nassert     count_integer([1,2,3,4,5,6,7]) == 6,'should return 6'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8]) == 7, \"count_integer is broken\"\nassert     count_integer([1,2,3,4,5,6,7,8,9]) == 8, \"count_integer is broken\"\nassert     count_integer([]) == 0, \"count_integer is broken\"\n\n'''\nTask 1.7\n\nThis function prints the value of the first and last element in a given list.\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([1,2,3,4]) == 4\nassert     count_integer([1,2,3,4.0]) == 4\nassert     count_integer([1,2,3,'a',0.0]) == 5\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1,2,3]) == 3\nassert     count_integer([-1,2,3]) == 3\nassert     count_integer([-1,-2,3]) == 3\nassert     count_integer([]) == 0\n\ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([2,4,6]) == 1, 'this function should return 1'\nassert     count_integer([1,2,3,4,5]) == 5, 'this function should return 5'\nassert     count_integer([-1,-2,-3,-4]) == 4, 'this function should return 4'\n\n\n\n\ndef add_all(list1):\n    '''\n    Write a python function that adds all the numbers in a given list\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 4, \"incorrect result\"\nassert count_integer([]) == 0, \"incorrect result\"\nassert count_integer([1, 2, 3, 4, 5]) == 5, \"incorrect result\"\nassert count_integer([1, 2, 3, 4, 'a']) == 4, \"incorrect result\"\nassert count_integer([1, 2, 3, 4, 'a', 'b']) == 5, \"incorrect result\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1, 2, 3], 3) == [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\nassert     combinations_colors(['a', 'b', 'c'], 2) ==     [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'a'), ('b', 'b'), ('b', 'c'), ('c', 'a'), ('c', 'b'), ('c', 'c')]\nassert     combinations_colors([1, 2], 1) == [(1, 1)]\nassert     combinations_colors([1, 2], 2) == [(1, 1), (1, 2), (2, 1), (2, 2)]\nassert     combinations_colors([1, 2], 3) == [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1,2,3,4], 1) == [[1,2,3,4]]\nassert combinations_colors([1,2,3,4], 2) == [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nassert combinations_colors([1,2,3,4], 3) == [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\nassert combinations_colors([1,2,3,4], 4) == [[1,2,3,4]]\nassert combinations_colors([1,2,3,4], 5) == [[1,2,3,4]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [[(1, 1), (2, 2), (3, 3)], [(1, 1), (3, 3), (2, 2)], [(2, 2), (1, 1), (3, 3)], [(2, 2), (3, 3), (1, 1)], [(3, 3), (1, 1), (2, 2)], [(3, 3), (2, 2), (1, 1)]]\n\n\n\n\ndef hash_index(string_object):\n    '''\n    Write a function that takes a string and returns a hashable integer representing the index of the first occurance of the character in the string.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1,2),(1,3),(2,3)]\nassert     combinations_colors(['a','b','c'], 2) ==  [('a','b'),('a','c'),('b','c')]\nassert     combinations_colors([1,2,3,4,5], 3) ==  [(1,2,3),(1,2,4),(1,2,5),(1,3,4),(1,3,5),(1,4,5),(2,3,4),(2,3,5),(2,4,5),(3,4,5)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nl = ['A', 'B', 'C']\nn = 2\nprint(combinations_colors(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [[(1, 1), (2, 2), (3, 3)], [(1, 1), (3, 3), (2, 2)], [(2, 2), (1, 1), (3, 3)], [(2, 2), (3, 3), (1, 1)], [(3, 3), (1, 1), (2, 2)], [(3, 3), (2, 2), (1, 1)]]\nassert     combinations_colors([1, 2, 3], 1) == [[(1,), (2,), (3,), (1,)], [(1,), (3,), (2,), (1,)], [(2,), (1,), (3,), (1,)], [(3,), (1,), (2,), (1,)], [(1,), (2,), (3,), (1,)], [(2,), (1,), (3,), (1,)], [(3,), (1,), (2,), (1,)]]\nassert     combinations_colors([], 1) == []\nassert     combinations_colors([1,2,3], -1) == []"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 3)]\nassert     combinations_colors(['p', 'r', 'o', 'b'], 2) == [(('p', 'r'), ('p', 'o'), ('p', 'b'), ('r', 'o'), ('r', 'b'), ('o', 'b'))]\nassert     combinations_colors(['p', 'r', 'o', 'b'], 3) == [(('p', 'r'), ('p', 'o'), ('p', 'b')), \n                                                                                      (('p', 'r'), ('p', 'o'), ('o', 'b')), \n                                                                                      (('p', 'r'), ('p', 'b'), ('o', 'b')),\n                                                                                      (('p', 'o'), ('p', 'b'), ('r', 'b')),\n                                                                                      (('p', 'o'), ('p', 'b'), ('r', 'o')),\n                                                                                      (('p', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('p', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('p', 'b'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('p', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('p', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('p', 'o'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('p', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('p', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('p', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'b'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'b'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'b')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'o'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', 'b'), ('r', 'o')),\n                                                                                      (('o', 'o'), ('o', '"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1, 2, 3, 4], 2) == [[(1, 2), (1, 3), (1, 4)], [(2, 1), (2, 3), (2, 4)], [(3, 1), (3, 2), (3, 4)], [(4, 1), (4, 2), (4, 3)]]\nassert     combinations_colors([\"A\", \"B\", \"C\"], 2) == [[(\"A\", \"B\"), (\"A\", \"C\"), (\"B\", \"C\")], [((\"B\", \"C\"), \"A\")]]\nassert     combinations_colors([\"A\", \"B\", \"C\", \"D\"], 1) == [[(\"A\",), (\"B\",), (\"C\",), (\"D\",)]]\nassert     combinations_colors([\"A\", \"B\", \"C\", \"D\"], 4) == []\nassert     combinations_colors([], 4) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\nassert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]\n\ndef validate_puzzle(puzzle):\n    '''\n    Write a function that takes in a puzzle list and validates that the puzzle is a valid PUZZLE by ensuring that the puzzle is\n    in the correct format. The puzzle is valid if:\n    - each row has an equal number of blue tiles and red tiles\n    - each column has an equal number of blue tiles and red tiles\n    - there is a 1 to 1 mapping between blue and red tiles in each row, column and 3x3 subgrid\n    - if a puzzle has been generated already, it is valid, otherwise it must be a correct PUZZLE\n    '''\n    \n    rows = puzzle[0]\n    cols = puzzle[1]\n    subgrids = puzzle[2]\n\n    # check if puzzle has been generated already\n    if not rows == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]:\n        print(\"Error: Puzzle has been generated already\")\n        return\n\n    # check if puzzle has correct format\n    if rows!= len(set(rows)) or cols!= len(set(cols)) or subgrids!= len(set(subgrids)):\n        print(\"Error: Puzzle does not have correct format\")\n        return\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(1) == 0 \nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(5) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(5) == 4\nassert     count_Primes_nums(15) == 3\nassert     count_Primes_nums(10) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(0) == 0, 'incorrect count_Primes_nums(0)'\nassert count_Primes_nums(4) == 3, 'incorrect count_Primes_nums(4)'\nassert count_Primes_nums(8) == 4, 'incorrect count_Primes_nums(8)'\nassert count_Primes_nums(10) == 5, 'incorrect count_Primes_nums(10)'\nassert count_Primes_nums(13) == 7, 'incorrect count_Primes_nums(13)'\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(4) == 2, \"Wrong answer.\"\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        raise ValueError('Negative number not allowed')\n    count = 0\n    i = 1\n    while i <= n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return count\n\ndef is_prime(n):\n    '''\n    Write a python function that takes in a non-negative number and returns True if the number is prime and False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(10) == 0\nassert     count_Primes_nums(15) == 1\nassert     count_Primes_nums(20) == 2\nassert     count_Primes_nums(24) == 3\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(4,3) == (3,4)\nassert     swap_numbers(8,5) == (5,8)\nassert     swap_numbers(9,9) == (9,9)\n\n\ndef combine_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the first number in the first tuple,\n    and then the second number in the second tuple.\n    '''\n    pass"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(1, 2) == (2,1)\nassert swap_numbers(2, 1) == (1,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nswap_numbers(1,2) == (2, 1)\nswap_numbers(1,1) == (1, 1)\nswap_numbers(5, 3) == (3, 5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(6,5) == (5,6)\nassert     swap_numbers(4,4) == (4,4)\nassert     swap_numbers(2,3) == (3,2)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(2, 3) == (3, 2)\nassert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(2, 1) == (1, 2)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(100, 200) == (200, 100)\nassert     swap_numbers(100, 100) == (100, 100)\nassert     swap_numbers(100, 100) == (100, 100)\nassert     swap_numbers(100, 200) == (100, 200)\nassert     swap_numbers(100, 200) == (200, 100)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_numbers(1,3) == (3,1)\nassert     swap_numbers(2,4) == (4,2)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(5,1) == (1,5)\nprint('Test passed')\n\ndef is_number(n):\n    '''\n    Write a function that takes in a string and tests if it is a number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers((1,2,3),(2,1,3)) == (2,1,3)\nassert     swap_numbers((2,3,4),(3,4,2)) == (3,4,2)\nassert     swap_numbers((2,4,6),(4,2,6)) == (4,2,6)\nassert     swap_numbers((8,6,4),(6,8,4)) == (6,8,4)\nassert swap_numbers((9,7,5),(7,9,5)) == (7,9,5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(3, 4) == (4, 3)\nassert     swap_numbers(5, 6) == (6, 5)\nassert     swap_numbers(5, 5) == (5, 5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(10,20) == (20,10)\nassert     swap_numbers(8,3) == (3,8)\nassert     swap_numbers(9,6) == (6,9)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((2,3,4,5,6,7), (4,5,6)) == (4,5,6,7,6,5)\nassert     maximize_elements((2,3,4,5,6,7), (3,2,1,5,7)) == (3,2,1,5,7,6)\nassert     maximize_elements((2,3,4,5,6,7), (3,5,2,1,6)) == (3,5,2,1,6,7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((5, 10), (20, 40)) == (10, 40)\nassert maximize_elements((5, 10), (10, 40)) == (10, 40)\nassert maximize_elements((1, 2, 3), (2, 3, 5)) == (2, 3, 5)\nassert maximize_elements((1, 2, 3), (5, 3, 2)) == (5, 3, 2)\nassert maximize_elements((10, 50, 20), (5, 20, 8)) == (10, 50, 20)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (maximize_elements((1,2), (3,4)) == (1,3)), 'Wrong result (1).'\nassert     (maximize_elements((5,10), (1,2)) == (5,10)), 'Wrong result (2).'\nassert     (maximize_elements((1,2), (3,4)) == (1,3)), 'Wrong result (3).'\nassert     (maximize_elements((5,10), (1,2)) == (5,10)), 'Wrong result (4).'\nassert     (maximize_elements((1,2), (3,4)) == (1,3)), 'Wrong result (5).'\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert maximize_elements((10, 20), (20, 30)) == (20, 30)\nassert maximize_elements((10, 20), (10, 30)) == (30, 20)\nassert maximize_elements((10, 20), (5, 30)) == (20, 30)\nassert maximize_elements((10, 20), (15, 30)) == (20, 30)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((3, 2), (1, 4)) == (3, 2)\nassert     maximize_elements((1, 1), (1, 1)) == (1, 1)\nassert     maximize_elements((1, 0), (1, 1)) == (1, 0)\nassert     maximize_elements((0, 1), (0, 1)) == (0, 1)\nassert     maximize_elements((2, 2), (2, 2)) == (2, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((1, 1), (4, 4)) == (4, 4)\nassert maximize_elements((1, 1), (10, 10)) == (10, 10)\nassert maximize_elements((1, 2), (4, 6)) == (10, 10)\nassert maximize_elements((3, 4), (1, 2)) == (10, 10)\nassert maximize_elements((0, 0), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((1, 2), (3, 4)) == (4, 3)\nassert     maximize_elements((1, 2), (2, 1)) == (2, 1)\nassert     maximize_elements((1, 2), (2, 1, 3, 4)) == (3, 4)\nassert     maximize_elements((2, 1, 3), (4, 1)) == (4, 1)\nassert     maximize_elements((3, 4), (2, 1)) == (4, 3)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((1,2), (4,5)) == (5,1)\nassert maximize_elements((10,4,5,2,1), (3,5,1,8,3)) == (10,10)\nassert maximize_elements((7,6,5,4,2,1), (3,5,1,8,3)) == (7,7)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    maximize_elements((1, 2, 3), (3, 2, 1)) == (1, 2, 3)\nassert \n    maximize_elements((1, 3, 2), (3, 2, 1)) == (1, 3, 2)\n    \nassert \n    maximize_elements((1, 3, 3, 3), (3, 2, 3, 1)) == (1, 3, 3, 3)\nassert \n    maximize_elements((1, 3, 1), (3, 2, 3, 1)) == (1, 3, 1)\n    \nassert \n    maximize_elements((1, 3, 2, 4, 2), (3, 2, 1, 5, 2)) == (1, 3, 2, 4, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((1,2,3), (5,6,7)) == (5,6,7)\nassert     maximize_elements((5,6,7), (1,2,3)) == (5,6,7)\nassert     maximize_elements((1,5,7), (2,3,6)) == (1,2,3)\nassert     maximize_elements((2,3,6), (1,5,7)) == (1,2,3)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_of_primes(n):\n    '''\n    Write a function to sum the numbers of primes in range (1, n+1) in a list.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     newman_prime(1) == 1\nassert     newman_prime(2) == 2\nassert     newman_prime(3) == 3\nassert     newman_prime(4) == 5\nassert     newman_prime(5) == 5\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     newman_prime(10) == 5, 'Wrong value.'\nassert newman_prime(100) == 29, 'Wrong value.'\nassert newman_prime(1) == 2, 'Wrong value.'\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef first_not_square(n):\n    '''\n    Write a function to find the 1st non-square prime number less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     newman_prime(10) == 3\nassert     newman_prime(25) == 11\nassert     newman_prime(75) == 127\nassert     newman_prime(100) == 211\nassert     newman_prime(1000) == 16590105\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_prime_numbers(n):\n    '''\n    Write a function to find all prime numbers below the given n using newman\u2013shanks\u2013williams algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements(('a', 'b'), ('a', 'b')) == (('a', 'b'), ('a', 'b'))\nassert     division_elements(('2', '4'), ('10', '20')) == (('0.5', '0.8333333333333334'), ('0.6666666666666665', '0.8333333333333334'))\nassert     division_elements(('1.5', '2.8'), ('3.5', '4.2')) == (('0.2', '0.5'), ('0.4666666666666666', '0.8333333333333334'))\nassert     division_elements(('2.4', '-5.4'), ('5.2', '-2.2')) == (('-0.6', '0.2'), ('0.8333333333333334', '0.4666666666666666'))\nassert     division_elements(('2.4', '-5.4'), ('5.2', '-2.2')) == (('0.6', '-0.2'), ('0.8333333333333334', '0.4666666666666666'))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements(((2, 5, -3), (3, 2, -1), (1, 1, 3)), ((7, 8, 3), (4, 7, -3), (5, 4, -1)))     ==     ((-1, 4, 2), (-1, 0, -2), (1, 0, -2))\nassert     division_elements(((3, 5, -3), (2, 6, -1), (1, 2, 1)), ((1, 2, 3), (4, 2, -1), (1, 1, 4)))     ==     ((-1, 1, 2), (-1, -1, -2), (1, 1, 1))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef multiplication_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements((1,2),(3,4)) == (1/2,3/4)\nassert     division_elements((1.0,2),(3,4)) == (1.0/2,3.0/4)\nassert     division_elements((1,2.0),(3,4)) == (1/2.0,3/4.0)\n\nassert     division_elements((1,2,3,4),(3,4,5,6)) == (1/2,2/4,3/6,4/8)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1, 2, 3), (2, 2, 2)) == (1, 1, 1)\nassert     division_elements((1, 2, 3), (2, 3, 4)) == (1.5, 2, 2.5)\nassert     division_elements((1, 2, 3), (3, 2, 2)) == (1.5, 2, 2)\nassert     division_elements((3, 2, 4), (2, 1, 2)) == (1.5, 1.5, 2.5)\nassert     division_elements((3, 2, 4), (4, 2, 2)) == (1, 2, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((1,2,3), (4,5,6)) == (0.5, 2.5, 3.0)\nassert     division_elements((1,2,3), (4,0,6)) == (0.25, 0.5, 1.0)\nassert     division_elements((1,2,3), (4,1,6)) == (0.2, 1.0, 1.5)\nassert     division_elements((1,2,3), (4,2,6)) == (0.25, 2.0, 3.0)\nassert     division_elements((1,2,3), (4,3,6)) == (0.3333333333333333, 1.0, 2.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements(((1, 2), (3, 4)), ((1, 2), (3, 4))) == ((1, 0.5), (1.5, 0.25))\nassert     division_elements(((2, 4), (1, 8)), ((3, 6), (5, 4))) == ((2, 0), (5, 0.3333333333333333))\nassert     division_elements(((2, 4), (1, 8)), ((3, 6), (5, 4))) == ((2, 0), (5, 0.3333333333333333))\nassert     division_elements(((2, 4), (1, 8)), ((3, 6), (5, 4))) == ((2, 0), (5, 0.3333333333333333))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsplit_two_parts([0, 1, 2, 3, 4], 2) == ([0, 1, 2], [3, 4])\nassert \nsplit_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\nassert \nsplit_two_parts([0, 1, 2, 3, 4, 5], 3) == ([0, 1, 2], [3, 4, 5])\n\nprint('Testing split_two_parts...')"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_two_parts([1,2,3,4,5,6], 2) == ([1,2], [3,4,5,6])\nassert     split_two_parts([1,2,3,4,5,6], 1) == ([1], [2,3,4,5,6])\nassert     split_two_parts([1,2,3,4,5,6], 8) == ([1,2,3,4,5,6], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ((1, 2, 3), (4, 5)), '2'\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ((1, 2, 3, 4),), '5'\nassert     split_two_parts([1, 2, 3, 4, 5], 1) == ((1,), (2, 3, 4, 5)), '1'\nassert     split_two_parts([1, 2, 3, 4, 5], 10) == ((1, 2, 3, 4), (5)), '10'\nassert     split_two_parts([1, 2, 3, 4, 5], 0) == ((1,), (2, 3, 4, 5)), '0'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([2,3,4,5,6], 3) == ((2,3,4), (5,6)), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 4) == ((2,3,4), (5,6)), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 1) == ((2,3,4,5), ()), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 2) == ((2,3,4,5), ()), \"The list is not split correctly\"\nassert     split_two_parts([2,3,4,5,6], 6) == ((2,3,4,5), ()), \"The list is not split correctly\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 3) == (([1, 2, 3], [4, 5]), ([2, 3, 4, 5], []))\nassert split_two_parts([1, 2, 3, 4], 4) == (([1, 2, 3, 4], []), ([], [1, 2, 3, 4]))\nassert split_two_parts([1, 2, 3], 1) == (([1, 2, 3], []), ([1], []))\nassert split_two_parts([1, 2], 4) == (([1, 2], []), ([1, 2], []))\nassert split_two_parts([1, 2, 3], 4) == (([1, 2, 3], []), ([1, 2, 3], []))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef swap_cases(string):\n    '''\n    Write a function that takes in a string and returns the same string, but with the first letter of each word in the string capitalized and the rest lower-case.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ((1, 2, 3, 4), (5,))\nassert     split_two_parts([1, 2, 3, 4, 5], 1) == ((1, 2, 3, 4), (5,))\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ((1, 2, 3), (4, 5))\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ((1, 2, 3, 4), ())\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ((1, 2, 3, 4), (5,))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4], [5])\n\ndef maximum(lst):\n    '''\n    Write a function that takes in a list and returns the maximum item in the list.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7], 3) == ([1,2,3],[4,5,6,7])\nassert     split_two_parts([1,2,3,4,5,6,7], 4) == ([1,2,3,4], [5,6,7])\nassert     split_two_parts([1,2,3,4,5,6,7], 1) == ([1], [2,3,4,5,6,7])\nassert     split_two_parts([1,2,3,4,5,6,7], 2) == ([1,2], [3,4,5,6,7])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    split_two_parts(list1, 4) == (list1[0:4], list1[4:])\n    split_two_parts(list2, 3) == ([list1[0:3], list1[3:6], list1[6:9]], [list2[0:3], list2[3:6], list2[6:9]])\n    split_two_parts([1,2,3], 3) == ([[1, 2, 3], []], [[1, 2, 3], []])\n    split_two_parts([1,2,3], 4) == ([[1, 2], [3]], [[1, 2], [3]])\n    split_two_parts([1,2,3], 5) == ([[1, 2], [3]], [[1, 2], [3]])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dog_age(6) ==.5\nassert dog_age(12) == 2.5\nassert dog_age(17) == 3.5\nassert dog_age(40) == 5\nassert dog_age(5) == 5\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(5) == 2\nassert     dog_age(6) == 3\nassert     dog_age(10) == 4\nassert     dog_age(3) == 0\nassert     dog_age(8) == 4\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dog_age(2) == 2\nassert     dog_age(3) == 7\nassert     dog_age(10) == 22\nassert     dog_age(12) == 24\nassert     dog_age(18) == 48\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef dog_year(w_age, w_weight):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(10) == 0\nassert     dog_age(2) == 5\nassert     dog_age(60) == 7\n\nprint(\"Expected results: 0, 5, 7\")\nprint(\"Actual results:   {}, {}, {}\".format(dog_age(10), dog_age(2), dog_age(60)))\n\ndef dog_age_in_years(h_age, h_name):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_split([1, 2, 3, 4], 3) == [[1], [2], [3], [4]]\nassert     list_split([1, 2, 3, 4], 4) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 5) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 6) == [[1, 2], [3, 4], [1, 2]]\nassert     list_split([1, 2, 3, 4], 7) == [[1, 2], [3, 4], [1, 2], [3, 4]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5], 3) == [[1,2,3],[4,5]]\nassert     list_split([1,2,3,4,5], 4) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5], 5) == [[1],[2],[3],[4],[5]]\nassert     list_split([1,2,3,4,5], 6) == [[1],[2],[3],[4],[5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_split([], 1) == [[]]\nassert list_split([], 2) == [[], []]\nassert list_split([], 3) == [[], [], []]\nassert list_split([], 4) == [[], [], [], []]\nassert list_split([1, 2, 3], 1) == [[1], [2], [3]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Testing list_split...')\nassert list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\nassert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert list_split([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1,2,3,4], 1) == [[1],[2,3,4]]\nassert     list_split([1,2,3,4], 2) == [[1,2],[3,4]]\nassert     list_split([1,2,3,4], 3) == [[1,2,3],[4]]\nassert     list_split([1,2,3,4], 4) == [[1,2,3,4]]\nassert     list_split([1,2,3,4], 5) == [[1,2,3,4]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1,2,3,4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1,2,3,4], 3) == [[1, 2, 3], [4]]\nassert     list_split([1,2,3,4], 4) == [[1, 2, 3, 4]]\nassert     list_split([1,2,3,4], 5) == [[1, 2], [3, 4]]\n\ndef list_map(L, f):\n    '''\n    Write a function that applies f to every element in a list L and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef lateralsurface_cuboid(l, w, h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its length, width and height.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlateralsurface_cube(5) == 10\nlateralsurface_cube(1) == 1\nlateralsurface_cube(2) == 2\nlateralsurface_cube(3) == 6\nlateralsurface_cube(4) == 24\n\ndef lateral_sphere(l):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to find the volume of a cube given its side length.\n'''\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('Test case passed for lateralsurface_cube.')\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cube(4) == 12\nassert     lateralsurface_cube(8) == 60\nassert     lateralsurface_cube(6) == 20\nassert     lateralsurface_cube(10) == 90\nassert     lateralsurface_cube(1) == 0\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlateralsurface_cube(5) == 20\nlateralsurface_cube(7) == 56\nlateralsurface_cube(11) == 11"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(10) == 130, 'Wrong'\nassert     lateralsurface_cube(5) == 20, 'Wrong'\nassert     lateralsurface_cube(3) == 6, 'Wrong'\nassert     lateralsurface_cube(1) == 4, 'Wrong'\nassert     lateralsurface_cube(0) == 0, 'Wrong'\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_Sum(2) == 7\nassert square_Sum(1) == 1\nassert square_Sum(0) == 0\nassert square_Sum(4) == 33\nassert square_Sum(10) == 385\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nsquare_Sum(4) == 16\nsquare_Sum(7) == 26\nsquare_Sum(12) == 336"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 16\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef square_Sum_alternative(n):\n  '''\n  Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n  '''\n  result = 0\n  i = 1\n  while i <= n:\n    result += i**2\n    i += 2\n  return result\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Test for square_Sum():\")\nprint(square_Sum(3), 16)\nprint(square_Sum(5), 30)\nprint(square_Sum(10), 285)\nprint(square_Sum(15), 385)\n\n\ndef list_even_odd(lst): \n    '''\n    Write a python function that takes in a list of integers and returns a tuple of all the even numbers in the list and all the odd numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(3) == 2*n*(n+1), \"Wrong Answer\"\nassert square_Sum(4) == 0, \"Wrong Answer\"\nassert square_Sum(6) == 25, \"Wrong Answer\"\nassert square_Sum(20) == 582, \"Wrong Answer\""
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_Sum(2) == 1\nassert square_Sum(9) == 5\nassert square_Sum(10) == 29\nassert square_Sum(15) == 154\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_Sum(5) == 10\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 4\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 14\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 1\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 5\nassert     find_star_num(4) == 7\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_star_num(1) == 3, 'find_star_num([1]) is wrong!'\nassert     find_star_num(2) == 5, 'find_star_num([2]) is wrong!'\nassert     find_star_num(3) == 7, 'find_star_num([3]) is wrong!'\nassert     find_star_num(4) == 9, 'find_star_num([4]) is wrong!'\nassert     find_star_num(5) == 11, 'find_star_num([5]) is wrong!'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_star_num(1) == 1, \"Wrong value\"\nassert     find_star_num(2) == 3, \"Wrong value\"\nassert     find_star_num(3) == 4, \"Wrong value\"\nassert     find_star_num(4) == 5, \"Wrong value\"\nassert     find_star_num(5) == 6, \"Wrong value\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_sum_of_digits(n):\n    '''\n    Write a function to find the sum of digits in an integer\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 1\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 6\nassert     find_star_num(4) == 10\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_star_num(1) == (1,2,3,4,5)\nassert     find_star_num(3) == (2,3,4,5,6)\nassert     find_star_num(5) == (3,4,5,6,7)\nassert     find_star_num(10) == (4,5,6,7,8,9,10)\n\n'''\nCSCI-141: Summer 2020 - Assignment 1\nAuthor: Lai Shijie\n'''\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value(\"a\") == 97\nassert     ascii_value(\"b\") == 98\nassert     ascii_value(\"c\") == 99\nassert     ascii_value(\"d\") == 100\nassert     ascii_value(\"e\") == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nWrite a function that accepts an integer list of values and returns the sum of all the values\n'''\ndef sum_integers(values):\n    '''\n    Write a function that accepts an integer list of values and returns the sum of all the values\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('A') == 97\nassert     ascii_value('#') == 35\nassert     ascii_value('$') == 36\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport re\n\ndef ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('d') == 115\nassert     ascii_value('e') == 101\nassert     ascii_value('A') == 65\nassert     ascii_value('E') == 115\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nascii_value('a') == 97\nascii_value('b') == 98\nascii_value('c') == 99\nascii_value('d') == 100\nascii_value('e') == 101\nascii_value('f') == 102\nascii_value('g') == 103\nascii_value('h') == 104\nascii_value('i') == 105\nascii_value('j') == 106\nascii_value('k') == 107\nascii_value('l') == 108\nascii_value('m') == 109\nascii_value('n') == 110\nascii_value('o') == 111\nascii_value('p') == 112\nascii_value('q') == 113\nascii_value('r') == 114\nascii_value('s') == 115\nascii_value('t') == 116\nascii_value('u') == 117\nascii_value('v') == 118\nascii_value('w') == 119\nascii_value('x') == 120\nascii_value('y') == 121\nascii_value('z') == 122\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef ascii_value_list(string):\n    '''\n    Write a function to convert a string to a list of ascii values.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 26\nassert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 26\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 0, \"Expected 0\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 7, \"Expected 7\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 6, \"Expected 6\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 0, \"Expected 0\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 0, \"Expected 0\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 24, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 16, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 16, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 20, \"Wrong Answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 20, \"Wrong Answer\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('\\n\\tCheck the correctness of sum_even_and_even_index')\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index([1, 3, 5, 6, 8, 11]))\nprint(sum_even_and_even_index("
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"---\")\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([1, 3, 5, 7]) == 5, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 3, 5, 7, 8]) == 7, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 3, 5, 7, 8, 9]) == 7, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 3, 5, 7, 8, 9, 10]) == 5, \"Test Case Failed\"\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0, \"Test Case Failed\"\nprint(\"All test cases have passed\")\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"check the correctness of even_Power_Sum\")\neven_Power_Sum(0)\neven_Power_Sum(1)\neven_Power_Sum(2)\neven_Power_Sum(3)\neven_Power_Sum(4)\neven_Power_Sum(10)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert even_Power_Sum(1) == 0, \"Wrong answer for n=1\"\nassert even_Power_Sum(2) == 2, \"Wrong answer for n=2\"\nassert even_Power_Sum(3) == 3, \"Wrong answer for n=3\"\nassert even_Power_Sum(4) == 14, \"Wrong answer for n=4\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_Power_Sum(3) == 60\nassert even_Power_Sum(2) == 25\nassert even_Power_Sum(1) == 1\nassert even_Power_Sum(0) == 1\nassert even_Power_Sum(10) == 3628800\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_Power_Sum(3) == 4\neven_Power_Sum(5) == 20\neven_Power_Sum(10) == 440\neven_Power_Sum(11) == 2144\neven_Power_Sum(20) == 450\neven_Power_Sum(25) == 6185\neven_Power_Sum(100) == 64235\neven_Power_Sum(10000) == 36205875\neven_Power_Sum(150000) == 1656278739"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_Power_Sum(10) == 4\neven_Power_Sum(5) == 5\neven_Power_Sum(0) == 0\neven_Power_Sum(1) == 1\neven_Power_Sum(2) == 2\neven_Power_Sum(3) == 5\neven_Power_Sum(4) == 10\neven_Power_Sum(5) == 30\neven_Power_Sum(6) == 44\neven_Power_Sum(7) == 89\neven_Power_Sum(8) == 144\neven_Power_Sum(9) == 216\neven_Power_Sum(10) == 280\neven_Power_Sum(11) == 704\neven_Power_Sum(12) == 1524\neven_Power_Sum(13) == 3480\neven_Power_Sum(14) == 8064\neven_Power_Sum(15) == 15552\neven_Power_Sum(16) == 38464\neven_Power_Sum(17) == 1048576\neven_Power_Sum(18) == 2097152\neven_Power_Sum(19) == 4194304\neven_Power_Sum(20) == 8388608\neven_Power_Sum(21) == 16777216\neven_Power_Sum(22) == 33554432\neven_Power_Sum(23) == 67108864\neven_Power_Sum(24) == 134217728\neven_Power_Sum(25) == 268435456\neven_Power_Sum(26) == 536870912\neven_Power_Sum(27) == 1073741824\neven_Power_Sum(28) == 2147483648\neven_Power_Sum(29) == 4294967296\neven_Power_Sum(30) == 8589934592\neven_Power_Sum(31) == 17179869184\neven_Power_Sum(32) == 351843720888\neven_Power_Sum(33) == 703687441776\neven_Power_Sum(34) == 1441151880758\neven_Power_Sum(35) == 2882303761512\neven_Power_Sum(36) == 5764607523034\neven_Power_Sum(37) == 1152921504606846976\neven_Power_Sum(38) == 25165824037817\neven_Power_Sum(39) == 4398046511104\neven_Power_Sum(40) == 8053063681553\neven_Power_Sum(41) == 1677721607927\neven_Power_Sum(42) == 3355443214125\neven_Power_Sum(43) == 671088642611\neven_Power_Sum(44) == 1342177271245\neven_Power_Sum(45) == 26843545910156\neven_Power_Sum(46) == 5368709123697\neven_Power_Sum(47) == 10737418243776\neven_Power_Sum(48) == 21474836483981\neven_Power_Sum(49) == 42949672962816\neven_Power_Sum(50) == 85899345925072\neven_Power_Sum(51) == 171798691843536\neven_Power_Sum(52) == 3518437208864\neven_Power_Sum(53) == 70368744177664\neven_Power_Sum(54) == 14411518807584\neven_Power_Sum(55) == 28823037615652\neven_Power_Sum(56) == 576460752303536\neven_Power_Sum(57) == 1152921504606846976\neven_Power_Sum(58) == 251658240378170\neven_Power_Sum(59) == 439804651110432\neven_Power_Sum(60) == 805306368155344\neven_Power_Sum(61) == 16777216079270\neven_Power_Sum(62) == 335544321412544\neven_Power_Sum(63) == 6710886426112\neven_Power_Sum(64) == 134217727124560\neven_Power_Sum(65) == 2684354591015640\neven_Power_Sum(66) == 536870912369745\neven_Power_Sum(67) == 1073741824377760\neven_Power_Sum(68) == 21474836483776\neven_Power_Sum(69) == 4294967296281664\neven_Power_Sum(70) == 85899345925075\neven_Power_Sum(71) == 171798691843640\neven_Power_Sum(72) == 351843720886432\neven_Power_Sum(73) == 703687441776642\neven_Power_Sum(74) == 144115188075863\neven_Power_Sum(75) == 288230376156512\neven_Power_Sum(76) == 576460752303536\neven_Power_Sum(77) == 1152921504606846976\neven_Power_Sum(78) == 251658240378170\neven_Power_Sum(79) == 439804651110432\neven_Power_Sum(80) == 805306368155344\neven_Power_Sum(81) == 167772160792756\neven_Power_Sum(82) == 3355443214125456\neven_Power_Sum(83) == 6710886426112640\neven_Power_Sum(84) == 134217727124560\neven_Power_Sum(85) == 2684354591015636\neven_Power_Sum(86) == 536870912369744\neven_Power_Sum(87) == 1073741824377760\neven_Power_Sum(88) == 2147483648377632\neven_Power_Sum(89) == 4294967296281648\neven_Power_Sum(90) == 858993459250752\neven_Power_Sum(91) == 171798691843640\neven_Power_Sum(92) == 351843720886432\neven_Power_Sum(93) == 703687441776642\neven_Power_Sum(94) == 144115188075863\neven_Power_Sum(95) == 288230376156512\neven_Power_Sum(96) == 576460752303536\neven_Power_Sum(97) == 1152921504606846976\neven_Power_Sum(98) == 251658240378170\neven_Power_Sum(99) == 439804651110432\neven_Power_Sum(100) == 805306368155344\neven_Power_Sum(101) == 167772160792756\neven_Power_Sum(102) == 3355443214125456\neven_Power_Sum(103) == 6710886426112640\neven_Power_Sum(104) == 134217727124560\neven_Power_Sum(105) == 2684354591015636\neven_Power_Sum(106) == 536870912369744\neven_Power_Sum(107) == 1073741824377760\neven_Power_Sum(108) == 2147483648377632\neven_Power_Sum(109) == 4294967296281648\neven_Power_Sum(110) == 858993459250752\neven_Power_Sum(111) == 171798691843640\neven_Power_Sum(112) == 351843720886432\neven_Power_Sum(113) == 703687441776642\neven_Power_Sum(114) == 144115188075863\neven_Power_Sum(115) == 288230376156512\neven_Power_Sum(116) == 576460752303536\neven_Power_Sum(117) == 1152921504606846976\neven_Power_Sum(118) == 251658240378170\neven_Power_Sum(119) == 439804651110432\neven_Power_Sum(120) == 805306368155344\neven_Power_Sum(121) == 167772160792756\neven_Power_Sum(122) == 3355443214125456\neven_Power_Sum(123) == 6710886426112640\neven_Powe"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_Power_Sum(2) == 1\neven_Power_Sum(3) == 3\neven_Power_Sum(8) == 2\neven_Power_Sum(10) == 2\neven_Power_Sum(15) == 2\neven_Power_Sum(16) == 2\neven_Power_Sum(100) == 252\neven_Power_Sum(1000) ==\neven_Power_Sum(0) == "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 1\nassert     even_Power_Sum(3) == 2\nassert     even_Power_Sum(4) == 6\nassert     even_Power_Sum(5) == 24\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(5) == 12\nassert     even_Power_Sum(10) == 34\nassert     even_Power_Sum(15) == 112\n\n\ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rear_extract([(1,2), (3,4), (5,6), (7,8)]) == [2,4,6,8], 'Fail'\nassert rear_extract([(1,2), (3,4), (5,6)]) == [2,4], 'Fail'\nassert rear_extract([(1,2)]) == [2], 'Fail'\nassert rear_extract([(1,2),(3,4)]) == [2,4], 'Fail'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'White', 'St.')]) == ['Green', 'White']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\nassert     rear_extract([('Cheshire', 'Green', 'St.'), ('Dover', 'Green', 'St.')]) == ['Green', 'Green']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([('A',1),('B',2)]) == ['B',2]\nassert     rear_extract([('A',1),('B',2),('C',3)]) == ['B',2,3]\nassert     rear_extract([('A',1),('B',2),('C',3),('D',4)]) == ['B',2,3,4]\nassert     rear_extract([('A',1),('B',2),('C',3),('D',4),('E',5)]) == ['B',2,3,4,5]\nassert     rear_extract([('A',1),('B',2),('C',3),('D',4),('E',5),('F',6)]) == ['B',2,3,4,5,6]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract(['a', 'b', ('c', 'd'), 'e']) == ['d', 'b', 'a', 'c']\nassert     rear_extract([('a', 'b'), 'c', 'd', 'e']) == ['c', 'd', 'a', 'b']\nassert     rear_extract([('a', 'b', 'c'), 'd', 'e']) == ['d', 'c', 'a', 'b']\nassert     rear_extract([('a', 'b', 'c', 'd'), 'e']) == ['e', 'b', 'a', 'c', 'd']\nassert     rear_extract([]) == []\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    #tuple1 = (1, 2, 3, 4, 5, 6)\n    #tuple2 = (10, 20, 30, 40, 50, 60)\n    #tuple3 = (100, 200, 300, 400, 500, 600)\n    #tuple4 = (1000, 2000, 3000, 4000, 5000, 6000)\n    #tuple5 = (10000, 20000, 30000, 40000, 50000, 60000)\n    #rear_extract(tuple1)\n    #assert rear_extract(tuple1) == (3, 4, 5, 6)\n    #rear_extract(tuple2)\n    #assert rear_extract(tuple2) == (30, 40, 50, 60)\n    #rear_extract(tuple3)\n    #assert rear_extract(tuple3) == (300, 400, 500, 600)\n    #rear_extract(tuple4)\n    #assert rear_extract(tuple4) == (4000, 5000, 6000)\n    #rear_extract(tuple5)\n    #"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([('a', 1), ('b', 2)]) == ['b', 2], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('a', 1)) == ['b', 2], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('b', 2)) == ['a', 1], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('c', 2)) == ['b', 2], 'Failed!'\nassert     rear_extract([('a', 1), ('b', 2)], ('a', 2)) == ['a'], 'Failed!'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rear_extract([('A', 1), ('B', 2)]) == [1,2], \"This is not a list of tuples\"\nassert rear_extract([('A', 1)]) == [1], \"This is not a list of tuples\"\nassert rear_extract([('A', 1)]) == [1], \"This is not a list of tuples\"\nassert rear_extract([(1,2,3)]) == [1], \"This is not a list of tuples\"\nassert rear_extract([(1,)]) == [1], \"This is not a list of tuples\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((1, 2), (3, 4)) == (1, 1)\nassert     substract_elements((1, 2), (3, 1)) == (1, -1)\n\nprint(\"All tests are passed\")"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiply the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (substract_elements((1,2,3), (1,2,3)) == (0,0,0))\nassert     (substract_elements((1,2,3), (2,2,2)) == (0,1,0))\nassert     (substract_elements((3,2,1), (1,2,3)) == (2,0,1))\nassert     (substract_elements((1,2,3), (1,2,3)) == (0,0,0))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (substract_elements((), (1,2,3)) == (0,0,0)), \\\n                \"Expected (0,0,0) but returned (0,0,0)\"\nassert     (substract_elements((1,2,3), (1,2,3)) == (0,0,0)), \\\n                \"Expected (0,0,0) but returned (0,0,0)\"\nassert     (substract_elements((2,4,6), (1,2,3)) == (1,0,3)), \\\n                \"Expected (1,0,3) but returned (1,0,3)\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     substract_elements((1,2,3), (10,10,20)) == (-2,-2,-2)\nassert substract_elements((1,2,3,4), (10,10,20)) == (11,11,11,0)\nassert substract_elements((1,2,3), (10,10,20)) == (0,0,0)\n\n\n'''\n6. Write a function that takes in a 2D list and returns the number of integers within the given 2D list that are odd.\n'''\ndef check_odd(test_list):\n    '''\n    Write a function that takes in a 2D list and returns the number of integers within the given 2D list that are odd.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     substract_elements(('python',), ('m', 'a')) == ('p', 'y')\nassert     substract_elements(('python',), ('m', 'p', 'y')) == ('m',)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (substract_elements((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == \nsubstract_elements((\"d\", \"e\", \"f\"), (\"a\", \"b\", \"c\")) == \nsubstract_elements((1, 2, 3), (4, 5, 6)) == \nsubstract_elements((), (1, 2, 3)) == \nsubstract_elements((1, 2, 3), (2, 4, 6)) == \nsubstract_elements((1, 2, 3), (3, 3, 3)) == \nsubstract_elements((1, 2), (3, 2)) == \nsubstract_elements((1, 2), (2, 3))) == \nTrue)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsubstract_elements((1, 2, 3), (1, 2)) == (1, 1, 1)\nsubstract_elements((1, 1, 3), (1, 2)) == (0, 0, 2)\nsubstract_elements((1, 2, 3), (3, 2)) == (1, 1, 0)\nsubstract_elements((3, 2, 1), (3, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 2)) == (0, 0, 0)\nsubstract_elements((1, 2, 3), (3, 2)) == (0, 0, 2)\nsubstract_elements((3, 3, 3), (3, 2)) == (0, 0, 2)\nsubstract_elements((1, 2, 3), (1, 2)) == (2, 2, 2)\nsubstract_elements((1, 2, 3), (2, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 2)) == (2, 2, 2)\nsubstract_elements((3, 3, 3), (2, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 2)) == (0, 0, 0)\nsubstract_elements((1, 2, 3), (3, 2)) == (0, 0, 2)\nsubstract_elements((3, 3, 3), (3, 2)) == (0, 0, 2)\nsubstract_elements((3, 3, 3), (1, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 4)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 0)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (0, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (1, 4)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (2, 4)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (3, 4)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (4, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (4, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (4, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (4, 4)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (5, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (5, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (5, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (5, 4)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (6, 1)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (6, 2)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (6, 3)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (6, 4)) == (0, 0, 0)\nsubstract_elements((3, 3, 3), (7, 1)) == ("
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum( 1) == 2\nassert     even_binomial_Coeff_Sum( 2) == 10\nassert     even_binomial_Coeff_Sum( 7) == 40\nassert     even_binomial_Coeff_Sum(4) == 6"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 0\nassert even_binomial_Coeff_Sum(2) == 1\nassert even_binomial_Coeff_Sum(3) == 1\nassert even_binomial_Coeff_Sum(4) == 3\nassert even_binomial_Coeff_Sum(5) == 3\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint (even_binomial_Coeff_Sum(4))\nprint (even_binomial_Coeff_Sum(9))"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum(5) == 11\nassert     even_binomial_Coeff_Sum(10) == 50\nassert     even_binomial_Coeff_Sum(15) == 1545\nassert     even_binomial_Coeff_Sum(18) == 35040\nassert     even_binomial_Coeff_Sum(21) == -122500\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum( 1) == 0 \nassert even_binomial_Coeff_Sum( 2) == 1 \nassert even_binomial_Coeff_Sum( 5) == 9 \nassert even_binomial_Coeff_Sum(6) == 30 \nassert even_binomial_Coeff_Sum(8) == 42 \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_binomial_Coeff_Sum( 1) == 1\nassert     even_binomial_Coeff_Sum( 2) == 1\nassert     even_binomial_Coeff_Sum( 3) == 0\nassert     even_binomial_Coeff_Sum( 4) == 1\nassert     even_binomial_Coeff_Sum( 5) == 1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 0\nassert     even_binomial_Coeff_Sum(2) == 0\nassert     even_binomial_Coeff_Sum(3) == 1\nassert     even_binomial_Coeff_Sum(4) == 2\nassert     even_binomial_Coeff_Sum(5) == 4\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_binomial_Coeff_Sum(1) == 1\nassert \neven_binomial_Coeff_Sum(2) == 1\nassert \neven_binomial_Coeff_Sum(3) == 1\nassert \neven_binomial_Coeff_Sum(4) == 5\nassert \neven_binomial_Coeff_Sum(5) == 7\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(2,3) == 8, \"Input is incorrect\"\nassert     volume_cylinder(1,1) == 1, \"Input is incorrect\"\nassert     volume_cylinder(1.5,3.5) == 5.16, \"Input is incorrect\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cylinder(2,2) == 4, 'incorrect'\nassert     volume_cylinder(3,4) == 12, 'incorrect'\nassert     volume_cylinder(5,8) == 80, 'incorrect'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(1,2) == 3\nassert     volume_cylinder(1.2,2.3) == 5.5\nassert     volume_cylinder(2,2) == 8\nassert     volume_cylinder(3,4) == 36\nassert     volume_cylinder(3.4,4.5) == 42.2\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(2,2) == 8, 'volume_cylinder(2,2) has the wrong value'\nassert     volume_cylinder(1.2,1) == 1.56, 'volume_cylinder(1.2,1) has the wrong value'\nassert     volume_cylinder(0.5,1) == 0.14, 'volume_cylinder(0.5,1) has the wrong value'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(10, 5) == 50\nassert     volume_cylinder(4, 10) == 40000\nassert     volume_cylinder(4, 3) == 0.1416\nassert     volume_cylinder(10, 3) == 1200\nassert     volume_cylinder(5, 8) == 696\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(1,2) == 3.14\nassert     volume_cylinder(2,3) == 3.14*2*2\nassert     volume_cylinder(3,4) == 3.14*3*3\n\ndef volume_sphere(radius):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cylinder(1,1) == 3.14*r*r, \"volume_cylinder(1,1) == 3.14*r*r is wrong\"\nassert     volume_cylinder(0.3,0.3) == 3.14*r*r, \"volume_cylinder(0.3,0.3) == 3.14*r*r is wrong\"\nassert     volume_cylinder(2,1) == 6.28*r*r, \"volume_cylinder(2,1) == 6.28*r*r is wrong\"\nassert     volume_cylinder(10,10) == 63514.0, \"volume_cylinder(10,10) == 63514.0 is wrong\"\nassert     volume_cylinder(20,30) == 966982.0, \"volume_cylinder(20,30) == 966982.0 is wrong\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(1,2) == 1.33\nassert     volume_cylinder(1,2.3) == 1.33\nassert     volume_cylinder(1.3,2) == 0.36\nassert     volume_cylinder(1,2.5) == 1.5\nassert     volume_cylinder(1.5,1) == 2.2\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(2,2)==6.0\nassert     volume_cylinder(2,4)==7.5\nassert     volume_cylinder(2,6)==12.0\nassert     volume_cylinder(1,2)==1.5\nassert     volume_cylinder(1,4)==1.6\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({'b':2, 'a':1, 'c':1, 'd':1, 'a':2, 'c':2}, 2) == {'b':2, 'c':2}\nassert     dict_filter({'b':2, 'a':1, 'c':1, 'd':1, 'a':2, 'c':2}, 2) == {'b':2, 'a':1, 'c':2}\nassert     dict_filter({'b':2, 'a':1, 'c':1, 'd':1, 'a':2, 'c':2}, 1) == {'b':2, 'a':1, 'c':1}\nassert     dict_filter({'b':2, 'a':1, 'c':1, 'd':1, 'a':2, 'c':2}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndict_filter({'a':1, 'b':2, 'c':2}, 1) == {'a':1, 'b':2, 'c':2}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({\"e\": 1, \"d\": 3, \"c\": 5, \"b\": 2}, 1) == {\"d\": 3, \"b\": 2, \"e\": 1, \"c\": 5}, \"Expected 4.\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}, 1) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}, \"Expected 5.\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}, 1, True) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}, \"Expected 4.\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}, 1, False) == {}, \"Expected 4.\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}, 1, False, False) == {}, \"Expected 4.\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({'t':2,'u':3,'p':4,'a':1,'k':5,'s':2,'e':4,'i':1},3) == {'a':1,'i':1}\n\nprint(\"You're all set! See you next time!\""
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({\"id\": 10, \"title\": \"I am an old man and I want to get out of here\", \"category\": \"anime\", \"season\": \"one\", \"episode\": \"1\"}, 2) == {'id': 10, 'title': 'I am an old man and I want to get out of here', 'category': 'anime','season': 'one', 'episode': '1'}, \\\n    'Expected the first dictionary to contain only the keys: id, title, category, season and episode with values greater than or equal to 2, got: {}'.format(dict_filter({\"id\": 10, \"title\": \"I am an old man and I want to get out of here\", \"category\": \"anime\", \"season\": \"one\", \"episode\": \"1\"}, 2))\nassert     dict_filter({\"id\": 10, \"title\": \"I am an old man and I want to get out of here\", \"category\": \"anime\", \"season\": \"one\", \"episode\": \"1\"}, 1) == {'id': 10, 'title': 'I am an old man and I want to get out of here', 'category': 'anime','season': 'one', 'episode': '1'}, \\\n    'Expected the first dictionary to contain only the keys: id, title, category, season and episode with values greater than or equal to 1, got: {}'.format(dict_filter({\"id\": 10, \"title\": \"I am an old man and I want to get out of here\", \"category\": \"anime\", \"season\": \"one\", \"episode\": \"1\"}, 1))\nassert     dict_filter({\"id\": 10, \"title\": \"I am an old man and I want to get out of here\", \"category\": \"anime\", \"season\": \"one\", \"episode\": \"1\"}, 0) == {'id': 10, 'title': 'I am an old man and I want to get out of here', 'category': 'anime','season': 'one', 'episode': '1'}, \\\n    'Expected the first dictionary to contain only the keys: id, title, category, season and episode with values greater than or equal to 0, got: {}'.format(dict_filter({\"id\": 10, \"title\": \"I am an old man and I want to get out of here\", \"category\": \"anime\", \"season\": \"one\", \"episode\": \"1\"}, 0))\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({\"a\":10,\"b\":20}, 10) == {\"a\":10,\"b\":20}, \"first\"\nassert     dict_filter({\"a\":10,\"b\":20}, 9) == {\"a\":10}, \"second\"\nassert     dict_filter({\"a\":10,\"b\":20,\"c\":30}, 10) == {\"a\":10,\"b\":20}, \"third\""
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1}, 1) == {\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1}, \"Should return a dictionary with only the entries with a value greater than 1\"\nassert     dict_filter({\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1}, 0) == {\"a\": 0, \"b\": 1, \"c\": 1}, \"Should return a dictionary with only the entries with a value greater than 0\"\nassert     dict_filter({\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1}, 2) == {\"a\": 0, \"c\": 1, \"d\": 1}, \"Should return a dictionary with only the entries with a value greater than 2\"\nassert     dict_filter({\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1}, -2) == {\"a\": 0, \"b\": 1, \"c\": 1}, \"Should return a dictionary with only the entries with a value greater than -2\"\nassert     dict_filter({\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1}, \"a\") == {\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1}, \"Should return a dictionary with only the entries with a value greater than 0\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'b': 2, 'c': 3, 'd': 4}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 1) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 3) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 5) == {}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, -10) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({1: 2, 2: 1, 3: 4}, 2) == {2: 1, 3: 4}\nassert     dict_filter({1: 2, 2: 1, 3: 4}, 1) == {1: 2, 2: 1, 3: 4}\nassert     dict_filter({1: 2, 2: 1, 3: 4}, 0) == {1: 2, 2: 1, 3: 4}\nassert     dict_filter({1: 2, 2: 1, 3: 4}, 5) == {}\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd')) == 3, 'WRONG'\nassert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'e', 'a', 'b', 'c', 'd')) == 1, 'WRONG'\nassert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd')) == 0, 'WRONG'\nassert     count_first_elements((1,1,1)) == 0, 'WRONG'\nassert     count_first_elements((1,2,1)) == 0, 'WRONG'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((3, 3, 3, 4, 4, 5, 5, 3)) == 3\nassert     count_first_elements((1, 2, 3, 4, 4, 5, 5, 4)) == 3\nassert     count_first_elements((4, 4, 4, 4, 4, 5, 5, 5)) == 3\nassert count_first_elements((4, 4, 4, 4, 4, 5, 5, 5)) == 0\nassert count_first_elements((0, 1, 1, 2, 3, 4, 4, 5, 5)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((4, 5, 6)) == 2\nassert     count_first_elements((4, 3, 5, 2, 1)) == 2\nassert     count_first_elements((1, 1, 1, 1, 1, 1, 1, 1, 1)) == 6\n\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncount_first_elements((1,2,3))"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((3,2,1)) == 1\nassert     count_first_elements((2,4,1)) == 1\nassert     count_first_elements((2,4,1,3)) == 1\nassert     count_first_elements((2,4,1,3,2)) == 1\nassert     count_first_elements((2,4,1,3,2,1)) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements(test_tup) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements(tup1) == 4\nassert     count_first_elements(tup2) == 5\nassert     count_first_elements(tup3) == 4\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements([(1, 2), (1, 3), (2, 5), (1, 3), (1, 2)]) == 2\nassert count_first_elements([(1, 2), (1, 3), (2, 5), (1, 3), (1, 2)]) == 1\nassert count_first_elements([(1, 2), (1, 3), (2, 5), (1, 3), (1, 2), (1, 5)]) == 4\nassert count_first_elements([(1, 2), (1, 3), (2, 5), (1, 3), (1, 2)]) == 3\nassert count_first_elements([(1, 2), (1, 3), (2, 5), (1, 3), (1, 2)]) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements(('a', 'b', 'c')) == 0, \"output 1\"\nassert     count_first_elements(('a', 'b', 'c', 'a', 'b')) == 3, \"output 2\"\nassert     count_first_elements(('a', 'b', 'c', 'b', 'a')) == 2, \"output 3\"\nassert     count_first_elements(('a', 'b', 'c', 'a', 'd', 'b')) == 0, \"output 4\"\nassert     count_first_elements(('a', 'a', 'b', 'a', 'c')) == 3, \"output 5\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements([1,2,3]) == 0, \"Should be 0\"\nassert     count_first_elements([2,4,6]) == 1, \"Should be 1\"\nassert     count_first_elements([2,4,6,2]) == 2, \"Should be 2\"\nassert     count_first_elements([2,4,6,2,4]) == 3, \"Should be 3\"\nassert     count_first_elements([2,4,6,2,4,4]) == 4, \"Should be 4\"\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 5\nassert     is_num_decagonal(4) == 8\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 6\nassert     is_num_decagonal(4) == 10\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint (\"Pass\" if (is_num_decagonal(3)==[1,3,3,2,1]) else \"Fail\")\nprint (\"Pass\" if (is_num_decagonal(4)==[1,3,3,2,1,4,2,1]) else \"Fail\")\nprint (\"Pass\" if (is_num_decagonal(5)==[1,3,3,2,1,4,2,1,5,2,1]) else \"Fail\")\nprint (\"Pass\" if (is_num_decagonal(6)==[1,3,3,2,1,4,2,1,5,2,1,6,2,1]) else \"Fail\")\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_num_decagonal(1) == 1\nassert is_num_decagonal(4) == 5\nassert is_num_decagonal(10) == 15\nassert is_num_decagonal(25) == 35\nassert is_num_decagonal(50) == 55\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_num_decagonal(0) == 1\nassert is_num_decagonal(1) == 25\nassert is_num_decagonal(2) == 625\nassert is_num_decagonal(3) == 3125\nassert is_num_decagonal(4) == 1525\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    # test case\n    assert is_num_decagonal(10) == 25\n    assert is_num_decagonal(15) == 50\n    assert is_num_decagonal(20) == 70\n    "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_num_decagonal(0) == 1\nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 2\nassert is_num_decagonal(3) == 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequential_search([1,2,3,4,5,6,7], 5) == (True, 4), \"False\"\nassert     sequential_search([1,2,3,4,5,6,7], -1) == (False, -1), \"False\"\nassert     sequential_search([1,2,3,4,5,6,7], -2) == (False, -1), \"False\"\nassert     sequential_search([1,2,3,4,5,6,7], 2) == (True, 1), \"False\"\nassert     sequential_search([1,2,3,4,5,6,7], -7) == (False, -1), \"False\"\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndlist = [(0, -1), (3, -1), (5, -1), (7, -1), (8, -1)]\nitem = (3, -1)\nassert sequential_search(dlist, item) == ((3, -1), 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequential_search([1,2,3,4,5,6,7], 1) == (True, 0)\nassert     sequential_search([1,2,3,4,5,6,7], 2) == (True, 1)\nassert     sequential_search([1,2,3,4,5,6,7], 5) == (True, 5)\nassert     sequential_search([1,2,3,4,5,6,7], 10) == (False, -1)\nassert     sequential_search([1,2,3,4,5,6,7], -1) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an ordered list and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequential_search(['apple', 'banana', 'orange', 'grape', 'pineapple'], 'pineapple') == (True, 5)\nassert    sequential_search(['apple', 'banana', 'orange', 'grape', 'pineapple'], 'bannana') == (False, 2)\nassert    sequential_search(['apple', 'banana', 'orange', 'grape', 'pineapple'], 'pine') == (False, 6)\nassert    sequential_search([1,2,3,4,5], 3) == (True, 1)\nassert    sequential_search([1,2,3,4,5], 6) == (False, 5)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1], 1) == (True, 0)\nassert     sequential_search([1], 2) == (False, -1)\nassert     sequential_search([1, 2], 2) == (True, 1)\nassert     sequential_search([1, 2], 1) == (True, 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsequential_search([1,3,9,12,15,18], 10) == (False, -1)\nassert sequential_search([1,3,9,12,15,18], 19) == (False, -1)\nassert sequential_search([1,3,9,12,15,18], 8) == (False, 4)\nassert sequential_search([1,3,9,12,15,18], 13) == (True, 1)\nassert sequential_search([1,3,9,12,15,18], 15) == (True, 5)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique([1,2,3,4,5,6,7,1]) == True\nassert     all_unique([1,1,2,3,4,5,6,7,1]) == False\nassert     all_unique(['a','b','c','a','d','e']) == True\nassert     all_unique(['a','a','b','c','d','e']) == False\nassert     all_unique([1,1,2,3,4,5,5,6,7,7]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique([]) == True, \n        \"The empty list has no unique elements\"\nassert all_unique([1,2,3,2]) == False,\n        \"The list has some unique elements\"\nassert all_unique([1,2,3,3,2,2,2,3]) == True,\n        \"The list has all unique elements\"\nassert all_unique([1,1,2,2,2,3,3,3]) == False,\n        \"The list has some elements twice\"\nassert all_unique([1,1,1,2,2,2,3,3]) == True,\n        \"The list has all unique elements\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([1,1,1])==True, 'Error in all_unique'\nassert     all_unique([1,2,1])==False, 'Error in all_unique'\nassert     all_unique([1,2,1,3,4])==False, 'Error in all_unique'\nassert     all_unique([1,2,1,2,3,4])==True, 'Error in all_unique'\nassert     all_unique([1,2,1,2,3,2])==False, 'Error in all_unique'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([\"a\", \"a\", \"b\"]) == False, \"All unique\"\nassert     all_unique([\"a\", \"a\", \"b\", \"a\"]) == True, \"All unique\"\nassert     all_unique([\"a\", \"a\", \"b\", \"a\", \"a\"]) == True, \"All unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([\"pooja\", \"pooja\", \"pooja\", \"nisha\"]) == False, \"This is not true\"\nassert     all_unique([\"pooja\", \"pooja\", \"nisha\"]) == True, \"This is not true\"\nassert     all_unique([\"pooja\", \"nisha\", \"nisha\"]) == False, \"This is not true\"\nassert     all_unique([1,2,3]) == True, \"This is not true\"\nassert     all_unique([2,1,3]) == False, \"This is not true\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([1,1,2,2,3,3,4]) == False, \"Not all unique\"\nassert     all_unique([1,1,2,2,3]) == True, \"All unique\"\nassert     all_unique([1,1,2]) == False, \"Not all unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,2,3,4,5,6])         == True, 'Wrong output'\nassert     all_unique([1,2,2,3,4,5,6])     == False, 'Wrong output'\nassert     all_unique(['p','q','r','p','s','t']) == True, 'Wrong output'\n\nprint('All the test cases passed')"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique([0,0,1,2,2,3,4,5,5,6,7]) == True, \"Sample data\"\nassert     all_unique([0,0,1,2,3,4,5,6,7]) == False, \"No duplicates\"\nassert     all_unique([0,0,1,2,3,3,3,3,3]) == False, \"Duplicates\"\nassert     all_unique([0,0,1,2,2,2,2,2,2,2]) == False, \"Multiple occurrences\"\nassert     all_unique([0,0,1,2,2,2,2,2,2,2,2,2,2,2]) == False, \"Multiple occurrences\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sub_list([1,2],[3,4]) == [-2,-2], \"Wrong answer\"\n\ndef sub_tuple(tuple1,tuple2):\n    '''\n    Write a function to subtract two tuples element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sub_list([1,2,3],[1,2,3]) == None\nassert     sub_list([1,2,3],[1,2,5]) ==     [2,2,2]\nassert     sub_list([1,2,3,4],[1,2,3,4]) ==     [3,3,3,4]\nassert     sub_list([1,2,3,4,5],[1,2,3,4,5]) ==     [2,2,2,2,2]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sub_list([1,2,3],[4,5,6]) == [1,2,3], 'incorrect'\nassert     sub_list([1,2,3],[-3,-2,-1]) == [-4,-3,-2], 'incorrect'\n\n\ndef sub_matrix(mat1,mat2):\n    '''\n    Write a function to subtract matrices element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sub_list([1,2,3],[4,5,6]) == [1,2,3]\nassert sub_list([-1,2,3],[4,5,6]) == [-1,2,3]\nassert sub_list([-1,-2,-3],[-4,-5,-6]) == [-1,-2,-3]\nassert sub_list([-1,-2,-3],[-4,-5,-6]) == [-1,-2,-3]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sub_list([1,2,3], [1,2,4]) == [[1, 2, 3], [1, 0, 0]]\nassert sub_list([1,2,3], [-1,-2,-3]) == [[0, 1, 2], [1, 1, 1]]\nassert sub_list([], [2]) == [[], [2]]\nassert sub_list([1,2], [3,4]) == [[0, 0], [3, 4]]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sub_list_2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sub_list([1,2,3,4],[1,2]) == [2,3,4,-1], \"Error\"\nassert     sub_list([1,2,3,4],[1,2,3]) == [2,3,-1,-2], \"Error\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     validate(0) == True \nassert     validate(999999) == True \nassert     validate(20) == False \nassert     validate(12345) == False \nassert     validate(54321) == False \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     validate(13) == True,    'Pass'\nassert     validate(4200) == False,    'Pass'\nassert     validate(213123123) == False,    'Pass'\nassert     validate(67) == True,    'Pass'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     validate(27) == False, 'Expected: False, Actual: True'\nassert     validate(10) == True, 'Expected: True, Actual: False'\n\n'''\nWrite a python function, input_output_string, which takes in a string as its input and returns the string reversed i.e. the string should be in the form of \u201cabcd\u201d-> \u201cdcba\u201d.\n'''\ndef input_output_string(string):\n    '''\n    Write a python function takes in a string and returns the string reversed i.e. the string should be in the form of \u201cabcd\u201d-> \u201cdcba\u201d.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     validate(100) == True, \"Frequency of 0 is more than 0\"\nassert     validate(101) == False, \"Frequency of 1 is more than 1\"\nassert     validate(10) == True, \"Frequency of 0 is more than 0\"\nassert     validate(101) == False, \"Frequency of 0 is more than 0\"\nassert     validate(111) == False, \"Frequency of 1 is more than 1\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     validate(1255) == False\nassert     validate(111211) == True\nassert     validate(123456) == False\nassert     validate(11) == True\n\n\n'''\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n'''\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_element([1,2,3,4,5],1) == False, \\\n    ''' The result should be False. Check the function header and body.'''\nassert     check_element([1,2,3,4,5],10) == True, \\\n    ''' The result should be True. Check the function header and body.'''\nassert     check_element([1,2,3,4,5],10) == False, \\\n    ''' The result should be False. Check the function header and body.'''\nassert     check_element([1,2,3,4,5],2) == True, \\\n    ''' The result should be True. Check the function header and body.'''\nassert     check_element([1,2,3,4,5],2) == False, \\\n    ''' The result should be False. Check the function header and body.'''\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_element([1,2,3,4],1) == True, 'List of size 4 should return True'\nassert     check_element([1,2,3,4],4) == False, 'List of size 4 should return False'\nassert     check_element([1,2,3,4],1) == True, 'List of size 3 should return True'\nassert     check_element([1,2,3],4) == False, 'List of size 3 should return False'\nassert     check_element([1,2,3,4],4) == True, 'List of size 1 should return True'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_element_at_index(list,index):\n    '''\n    Write a function that takes in a list and an index and checks whether the item at the given index is equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_element([1,2,3],3) == True, \"should be True\"\nassert     check_element([1,2,3],1) == False, \"should be False\"\nassert     check_element([\"a\",\"b\",\"c\"], \"a\") == True, \"should be True\"\nassert     check_element([\"a\",\"b\",\"c\"], \"d\") == False, \"should be False\"\n\ndef check_element_max(list,element):\n    '''\n    Write a function that takes in a list and element and returns True if all items in the list are equal to the given element\n    and also returns True if the maximum item in the list is equal to the element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_element(['a','b','c','d'], 'b') == True\nassert check_element(['a','b','c','d'], 'd') == False\nassert check_element(['a','b','c','d'], 'e') == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_element([1,2,3,4,5,6], 3) == True, \"it should return True if all elements are equal to 3\"\nassert     check_element([1,2,3,4,5,6], 7) == False, \"it should return False if all elements are equal to 7\"\nassert     check_element([1,2,3,4,5,6], 'hello') == False, \"it should return False if all elements are equal to 'hello'\"\n\n\n\ndef check_element_all_equal(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncheck_element([1,2,3,4,5,6,7,8,9],5) == True, \"assert failed\"\ncheck_element([1,2,3,4,5,6,7,8,9],3) == False, \"assert failed\"\ncheck_element([1,2,3,4,5,6,7,8,9],2) == False, \"assert failed\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_two_three('abababab') == True\nassert     text_match_two_three('a') == False\nassert     text_match_two_three('bbbb') == False\nassert     text_match_two_three('b') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('cabaaaabaaaaab')\nassert     not text_match_two_three('cabaaaabaaaaa')\nassert     text_match_two_three('aaaaabaaaaabbb')\nassert     not text_match_two_three('aaaaabaaaaab')\nassert     text_match_two_three('aaaaaaaaaaaaaab')\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three('aababab') == True\nassert     text_match_two_three('aaaaaa') == False\nassert     text_match_two_three('abb') == False\nassert     text_match_two_three('bbbbbb') == False\nassert     text_match_two_three('b') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('abaaaa') == True\nassert     text_match_two_three('abaaaaa') == False\nassert     text_match_two_three('ababab') == False\nassert     text_match_two_three('bba') == False\nassert     text_match_two_three('aba') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three('aabbbb') == True\nassert     text_match_two_three('abcbb') == False\nassert     text_match_two_three('abbc') == False\nassert     text_match_two_three('abcc') == True\nassert     text_match_two_three('aabc') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('aabbbbaabbbbbb') == True\nassert     text_match_two_three('abcbaabbbbbb') == False\nassert     text_match_two_three('abcbbbbbaaa') == False\nassert     text_match_two_three('aabbbbbaaabbbbbb') == False\nassert     text_match_two_three('aabbbbbaaabbbbbbb') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three(\"aabab\") == True, \"It should match\"\nassert     text_match_two_three(\"aaabb\") == False, \"It should not match\"\nassert     text_match_two_three(\"bbb\") == False, \"It should not match\"\nassert     text_match_two_three(\"aabaa\") == False, \"It should not match\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('abababab') == True, 'Wrong answer for text_match_two_three'\nassert     text_match_two_three('ababab') == False, 'Wrong answer for text_match_two_three'\nassert     text_match_two_three('abbbbbbbb') == False, 'Wrong answer for text_match_two_three'\nassert     text_match_two_three('bbababab') == False, 'Wrong answer for text_match_two_three'\nassert     text_match_two_three('ab') == False, 'Wrong answer for text_match_two_three'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three('') == False, \"No match\"\nassert     text_match_two_three('ab') == False, \"No match\"\nassert     text_match_two_three('abc') == False, \"No match\"\nassert     text_match_two_three('abcba') == True, \"Match\"\nassert     text_match_two_three('aab') == True, \"Match\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, -1, 1], 3, 3) == 6\nassert     max_sub_array_sum_repeated([-1, 3, 5, -3], 2, 2) == 9\nassert     max_sub_array_sum_repeated([-1, 3, 5, -3], 1, 1) == 1\nassert     max_sub_array_sum_repeated([-1, 3, 5, -3], 2, 2) == 8\nassert     max_sub_array_sum_repeated([-1, 3, 5, -3], 2, 3) == 16\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([2,3,-2,4],4,2) == 6\nassert     max_sub_array_sum_repeated([2,-3,0,1],3,2) == 5\nassert     max_sub_array_sum_repeated([0,1,0,1,0,1,0,1,0,1],5,3) == 8\nassert     max_sub_array_sum_repeated([-1,2,-3,4,-5,6,-7,8],7,2) == 6\nassert     max_sub_array_sum_repeated([0,0,0,0,0],1,5) == 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3], 3, 2) == 6\nassert     max_sub_array_sum_repeated([2, 3, 5], 3, 2) == 9\nassert     max_sub_array_sum_repeated([7, 3, 2, 4], 3, 2) == 18\n\ndef max_sub_array_sum_alternate(a, n): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array n times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum_repeated([1,2,3,4], 1, 1) == 12\nassert     max_sub_array_sum_repeated([1,2,3,4], 2, 2) == 20\nassert     max_sub_array_sum_repeated([1,2,3,4], 3, 3) == 12\nassert     max_sub_array_sum_repeated([1,2,3,4], 4, 3) == 12\nassert     max_sub_array_sum_repeated([1,2,3,4], 5, 4) == 12\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_Sum(3) == 18, \"square_Sum test case Failed!\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_Sum(10) == n**2\nassert square_Sum(10) == sum(map(lambda x: x**2, range(0, 10)))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_Sum(1) == 1\nsquare_Sum(5) == 32\nsquare_Sum(10) == 204\nsquare_Sum(15) == 660\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(4) == 16, \"square_Sum(4) == 16 is wrong\"\nassert     square_Sum(10) == 385, \"square_Sum(10) == 385 is wrong\"\nassert     square_Sum(1) == 1, \"square_Sum(1) == 1 is wrong\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_Sum(1) == 1\nsquare_Sum(2) == 4\nsquare_Sum(3) == 14\nsquare_Sum(4) == 32\n\n'''\nWrite a python function takes in a string and returns the last word as a single word.\n'''\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length([[1, 2, 3], \n                    [4, 5, 6],\n                    [7, 8, 9]]) == 3\nassert     max_length([[1, 2, 3, 4], \n                    [5, 6, 7, 8],\n                    [9, 10, 11, 12]]) == 4\nassert     max_length([[1, 2, 3, 4], \n                    [1, 2, 3, 4],\n                    [1, 2, 3, 4]]) == 4\nassert     max_length([[1, 2, 3, 4], \n                    [1, 2, 3, 4],\n                    [1, 2, 3, 4],\n                    [1, 2, 3, 4]]) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef min_length(list1):\n    '''\n    Write a function to find the list of minimum length in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_length([1,2,3]) == 3\nassert max_length([1,2,3,4,5]) == 5\nassert max_length([]) == 0\nassert max_length([[]]) == 0\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    max_length([]) == 0\n    max_length([[]]) == 0\n    max_length([[0]]) == 0\n    max_length([[0, 1]]) == 1\n    max_length([[0, 1, 2]]) == 2\n    max_length([[0, 1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5\n    max_length([[0, 1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11]]) == 4\n    max_length([[0, 1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16, 17]]) == 6\n    max_length([[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]]) == 5\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length([[1,2,3],[3,4,5],[6,7,8]]) == 3, \"Wrong answer\"\nassert     max_length([[1,2,3,4],[3,4,5,6],[7,8,9,10]]) == 5, \"Wrong answer\"\n\ndef max_length_0(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for inner_list in list1:\n        if len(inner_list) > max_length:\n            max_length = len(inner_list)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length([[1,2],[1,2,3],[4,5,6]]) ==     3\nassert     max_length([[1,2,3],[4,5,6]]) ==     2\nassert     max_length([[1],[2,3,4],[5]]) ==     1\nassert     max_length([]) ==     0\nassert     max_length([[]]) ==     0\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    [\n    [1],\n    [1,2],\n    [1,2,3],\n    [1,2,3,4],\n    [1,2,3,4,5],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6,7],\n    [1,2,3,4,5,6,7,8],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9,10],\n    [1,2,3,4,5,6,7,8,9,10,11],\n    [1,2,3,4,5,6,7,8,9,10,11,12],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],\n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[1,2,3],\n                    [5,6,7],\n                    [4,8,9],\n                    [5,2,9,7,7,9]]) == 2, 'Error'\nassert     max_length([[1,2],\n                    [4,5],\n                    [7,8]]) == 2, 'Error'\nassert     max_length([[5,7],\n                    [1,2],\n                    [4,5]]) == 2, 'Error'\nassert     max_length([[5,7,3],\n                    [1,2,4],\n                    [4,5,7],\n                    [1,3,4,5,6]]) == 2, 'Error'\nassert     max_length([[1,1,1,1],\n                    [1,1,1,1],\n                    [1,1,1,1],\n                    [1,1,1,1]]) == 2, 'Error'\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length([[1, 2],\n                    [3, 4, 5],\n                    [1, 2, 3, 4, 5],\n                    [1, 2, 3, 4, 5],\n                    [1, 2, 3, 4, 5]]) == 5, f'max_length([[1, 2],\n                        [3, 4, 5],\n                        [1, 2, 3, 4, 5],\n                        [1, 2, 3, 4, 5],\n                        [1, 2, 3, 4, 5]]) should be 5'\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(3, 1) == 6\nassert     count_no_of_ways(6, 1) == 10\nassert     count_no_of_ways(6, 2) == 4\n\n'''\nThe problem is known to be a dp solution and not a recursion-based solution.\n\ndp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ncount_no_of_ways(3, 2) == 5\ncount_no_of_ways(5, 3) == 7\ncount_no_of_ways(1, 1) == 1\n\ndef count_no_of_ways_memo(n, k, cache):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    This function should use dynamic programming.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_no_of_ways(4, 2) == 3\nassert     count_no_of_ways(3, 2) == 2\nassert     count_no_of_ways(6, 3) == 0\nassert     count_no_of_ways(3, 2) == 2\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_no_of_ways(4, 3) == 4\nassert     count_no_of_ways(5, 5) == 7\nassert     count_no_of_ways(4, 4) == 1"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_no_of_ways(0, 1) == 0, \"count_no_of_ways(0, 1) returned incorrect value\"\nassert     count_no_of_ways(1, 1) == 1, \"count_no_of_ways(1, 1) returned incorrect value\"\nassert     count_no_of_ways(2, 3) == 2, \"count_no_of_ways(2, 3) returned incorrect value\"\nassert     count_no_of_ways(5, 6) == 0, \"count_no_of_ways(5, 6) returned incorrect value\"\nassert     count_no_of_ways(4, 1) == 1, \"count_no_of_ways(4, 1) returned incorrect value\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_no_of_ways(2, 2) == 3\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(5, 5) == 5, \"Failed\"\nassert     count_no_of_ways(5, 2) == 6, \"Failed\"\nassert     count_no_of_ways(4, 3) == 7, \"Failed\"\nassert     count_no_of_ways(3, 2) == 4, \"Failed\"\nassert     count_no_of_ways(2, 1) == 2, \"Failed\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(4, 1) == 2, 'Wrong answer'\nassert     count_no_of_ways(4, 2) == 3, 'Wrong answer'\nassert     count_no_of_ways(4, 3) == 3, 'Wrong answer'\nassert     count_no_of_ways(4, 4) == 6, 'Wrong answer'\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(0, 0) == 0\nassert    find(1, 0) == 0\nassert    find(0, 1) == 0\nassert    find(2, 2) == 2\nassert    find(3, 2) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find(2,2) == 2, \"find(2,2) should be 2\"\nassert     find(2,3) == 2, \"find(2,3) should be 2\"\nassert     find(2,4) == 2, \"find(2,4) should be 2\"\nassert     find(2,5) == 2, \"find(2,5) should be 2\"\nassert     find(3,2) == 2, \"find(3,2) should be 2\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find(5,4) == 2\nassert     find(8,4) == 2\nassert     find(5,5) == 1\nassert     find(8,5) == 1\nassert     find(5,6) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(2,3) == 1\nassert     find(5,3) == 2\nassert     find(0,3) == 0\n\n\n\ndef find_square_root(x):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find(2,4) == 2\nassert     find(3,3) == 1\nassert     find(-2,2) == 0\nassert     find(-3,3) == -1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find(3, 4) == 1\nassert    find(2, 1) == 2\nassert    find(10, 5) == 5\nassert    find(9, 1) == 9\nassert    find(8, 3) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(2,5) == 0, \"Should be 0\"\nassert     find(7,4) == 1, \"Should be 1\"\nassert     find(5,5) == 0, \"Should be 0\"\nassert     find(10,2) == 4, \"Should be 4\"\nassert     find(7,7) == 0, \"Should be 0\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find(10,3) == 3\nassert    find(10,2) == 5\nassert    find(10,1) == 10\nassert    find(10,0) == 10\nassert    find(10,-1) == 9\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find(6,4) == 2\nassert     find(9,4) == 2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(1,4) == 1.5\nassert     otherside_rightangle(4,1) == 1.5\nassert     otherside_rightangle(4,2) == 5\nassert     otherside_rightangle(5,2) == 5\n\ndef otherside_rectangle(l,b):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(1,3) == 4\nassert     otherside_rightangle(5,6) == 7\nassert     otherside_rightangle(11,8) == 9\nassert     otherside_rightangle(100,300) == 400\nassert     otherside_rightangle(5,10) == 5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(2, 3) == 3\nassert     otherside_rightangle(2, 1) == 2\n\ndef print_string(string):\n    print('Here is the String')\n    print(string)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \notherside_rightangle(2,3) == math.sqrt(2/3), 'Wrong answer'\nassert otherside_rightangle(3,2) == math.sqrt(3/2), 'Wrong answer'\nassert otherside_rightangle(2,3) == 1.7320508075688772, 'Wrong answer'\nassert otherside_rightangle(4,2) == math.sqrt(2/2), 'Wrong answer'\nassert otherside_rightangle(4,3) == 1.7320508075688772, 'Wrong answer'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(6,2) == 4\nassert     otherside_rightangle(6,2.1) == 3.9\nassert     otherside_rightangle(6,3) == 5\nassert     otherside_rightangle(6,3.1) == 5.1\nassert     otherside_rightangle(6,4) == 5.9\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(2,2) == 1\nassert     otherside_rightangle(3,4) == math.sqrt(2)\n\ndef subtract_vectors(vec1, vec2):\n    '''\n    Write a function that takes two vectors and returns the vector resulting from subtracting\n    the two vectors.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(5,6) == 12, 'Wrong'\nassert     otherside_rightangle(1,1) == 2, 'Wrong'\nassert     otherside_rightangle(5,1) == 5, 'Wrong'\nassert     otherside_rightangle(6,5) == 6, 'Wrong'\nassert     otherside_rightangle(1,6) == 5, 'Wrong'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     otherside_rightangle(5,5) == 1, \"1st case\"\nassert otherside_rightangle(8,8) == 5, \"2nd case\"\nassert otherside_rightangle(6,9) == 7, \"3rd case\"\nassert otherside_rightangle(5,7) == 6, \"4th case\"\nassert otherside_rightangle(5,5) == math.sqrt(5), \"5th case\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert otherside_rightangle(4,4) == 2\nassert otherside_rightangle(4,2) == 2\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_val([1,2,5,-3,2,3]) == 5\nassert     max_val([1,2,5,-3,2,None]) == 5\nassert     max_val([1,2,5,3]) == 5\nassert     max_val([]) == None\nassert     max_val([1]) == 1\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([0,0,0,0]) == 0, \"Wrong max value!\"\nassert     max_val([10,10,10,10]) == 10, \"Wrong max value!\"\nassert     max_val([-10,-9,-8,-7]) == -10, \"Wrong max value!\"\n\nprint(\"PASSED!\""
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_val_rec(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # base case: \n    if not listval:\n        return None\n    \n    # recur: \n    return max(listval[0],max_val_rec(listval[1:]))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_val([-1, -2, -3, -4, -5]) == 5\nassert max_val([-1, -2, -3, -4, 0]) == 0\nassert max_val([-1, -2, -3, -4, -5, -6]) == -1\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED.\\n\")"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_val([2,4,6,7,5,5]) == 7, \"wrong\"\nassert     max_val([3,4,5,6,7,8,9,10]) == 10, \"wrong\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([1,5,-1,4]) == 5\nassert     max_val([1,5,-1,4,3]) == 5\nassert     max_val([5,1,-1,4,3]) == 5\nassert     max_val([1,5,1,4,3]) == 5\nassert     max_val([1,2,3,4,5,6,7]) == 7\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_div(4) == 2\nassert     sum_div(10) == 2 + 5\nassert     sum_div(6) == 2 + 3 + 2 + 3\nassert     sum_div(12) == 2 + 3 + 4 + 6\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(10) == 5, 'incorrect'\nassert     sum_div(2) == 1, 'incorrect'\nassert     sum_div(12) == 7, 'incorrect'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_sub_classes(number):\n    '''\n    Write a function to return the number of subclasses of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_div(0) == 0, 'Wrong output for sum_div(0)'\nassert     sum_div(1) == 1, 'Wrong output for sum_div(1)'\nassert     sum_div(2) == 1, 'Wrong output for sum_div(2)'\nassert     sum_div(3) == 2, 'Wrong output for sum_div(3)'\nassert     sum_div(4) == 1, 'Wrong output for sum_div(4)'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_div(4) == 2\nassert     sum_div(8) == 1 + 2 + 4 + 8 + 8 + 16 + 32\nassert     sum_div(27) == 1 + 3 + 3 + 5 + 7 + 9 + 13 + 27 + 27 + 81\nassert     sum_div(44) == 1 + 2 + 4 + 8 + 4 + 8 + 16 + 16 + 32 + 32 + 64 + 64 + 128\nassert     sum_div(49) == 1 + 2 + 4 + 8 + 4 + 8 + 16 + 16 + 32 + 32 + 64 + 64 + 128 + 128 + 256 + 256 + 256 + 256 + 512 + 512 + 512 + 512 + 768 + 768 + 768 + 768 + 1024 + 1024 + 1024 + 1024 + 2048 + 2048 + 2048 + 2048 + 4096 + 4096 + 4096 + 4096 + 8192 + 8192 + 8192 + 8192 + 16384 + 16384 + 16384 + 16384 + 32768 + 32768 + 32768 + 32768 + 65536 + 65536 + 65536 + 65536 + 131072 + 131072 + 131072 + 131072 + 262144 + 262144 + 262144 + 262144 + 524288 + 524288 + 524288 + 524288\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_div(10) == 10, 'Input: 10'\nassert sum_div(8) == 4, 'Input: 8'\nassert sum_div(10) == 15, 'Input: 10'\nassert sum_div(13) == 12, 'Input: 13'\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([]) == 0, \"empty array\"\nassert     get_Inv_Count([3,5,1]) == 0, \"single element\"\nassert     get_Inv_Count([5,2,3]) == 0, \"left to right\"\nassert     get_Inv_Count([5,3,2]) == 1, \"left to right\"\nassert     get_Inv_Count([5,1,3]) == 1, \"left to right\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([1]) == 0\nassert     get_Inv_Count([1, 1]) == 0\nassert     get_Inv_Count([1, 1, 2, 3, 4]) == 1\nassert     get_Inv_Count([1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([1,4,3,2]) == 1, \"Wrong answer\"\nassert     get_Inv_Count([1,4,3,2,5]) == 2, \"Wrong answer\"\nassert     get_Inv_Count([1,4,3,2,5,6,7,8]) == 2, \"Wrong answer\"\nassert     get_Inv_Count([1,4,3,2,5,6,7,8,9]) == 3, \"Wrong answer\"\nassert     get_Inv_Count([1,2,3,4,5,6,7,8,9]) == 0, \"Wrong answer\"\nprint(\"You are awesome!\")\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([1,2,3,5]) == 4\nassert     get_Inv_Count([1,3,2,5]) == 5\nassert     get_Inv_Count([1,3,5,2]) == 7\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = []\n    print(get_Inv_Count(arr))\n    print(get_Inv_Count([0, 1, 0, 0]))\n    print(get_Inv_Count([1, 1, 1, 1]))\n    print(get_Inv_Count([1, 0, 0, 1]))\n    print(get_Inv_Count([0, 0, 0, 1]))"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([3,4,2,1,2]) == 4\nassert     get_Inv_Count([3,4,2,1,1]) == 5\nassert     get_Inv_Count([1,1,1]) == 0\nassert     get_Inv_Count([1,1]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert get_Inv_Count([1,2,3,4]) == 1, \"case 1\"\nassert get_Inv_Count([1,2,3,4,5,6]) == 2, \"case 2\"\nassert get_Inv_Count([1,2,3,4,5,6,7]) == 2, \"case 3\"\nassert get_Inv_Count([1,2,3,4,5,6,7,8,9]) == 2, \"case 4\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nget_Inv_Count([1, 3, 4, 2]) == 3, \"Wrong output\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([2,1,3,0])==1\nassert     get_Inv_Count([2,1,3,4])==2\nassert     get_Inv_Count([2,4,1,3])==1\nassert     get_Inv_Count([1,2,3,4])==0\nassert     get_Inv_Count([0,1,2,3,4])==0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Inv_Count([0, 4, 1, 3, 2]) == 5, \"Example 1: Expected: 5, Actual: {0}\"\nassert     get_Inv_Count([1, 0, 4, 3, 2]) == 4, \"Example 2: Expected: 4, Actual: {0}\"\nassert     get_Inv_Count([4, 1, 3, 2, 0]) == 5, \"Example 3: Expected: 5, Actual: {0}\"\nassert     get_Inv_Count([0, 1, 3, 4, 2]) == 5, \"Example 4: Expected: 5, Actual: {0}\"\nassert     get_Inv_Count([0, 4, 1, 3, 2, 2, 3]) == 10, \"Example 5: Expected: 10, Actual: {0}\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flatten_list([[1, 2], [3, 4]])    ==    [1, 2, 3, 4]\nassert     flatten_list([[[1], 2], [[3], 4]]) ==    [1, 2, 3, 4]\nassert     flatten_list([1, 2, 3, 4])    ==    [1, 2, 3, 4]\nassert     flatten_list([])    ==    []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flatten_list([[1, 2, 3], [4, 5], [6], [[7]]]) == [1, 2, 3, 4, 5, 6, 7]\nassert     flatten_list([]) == []\nassert     flatten_list([1, 2, 3]) == [1, 2, 3]\nassert     flatten_list([[], [1, 2, 3]]) == [1, 2, 3]\nassert     flatten_list([[[]]]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     flatten_list([[[]]]) == [[]], \"Wrong result for flat_list example 1\"\nassert     flatten_list([[], [[]]]) == [[], [[]], []], \"Wrong result for flat_list example 2\"\nassert     flatten_list([[[[[[[]]]]]]]) == [[[[[[]]]]]]\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flatten_list([[1,2,3],[4,5]]) == [1,2,3,4,5]\nassert     flatten_list([1,2,[3,4],[5,6]]) == [1,2,3,4,5,6]\nassert     flatten_list([[[1,2,3,4],[5,6]]]) == [1,2,3,4,5,6]\nassert     flatten_list([1,2,3,4,5]) == [1,2,3,4,5]\nassert     flatten_list([]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flatten_list([[1, 2], 3]) == [[1, 2], 3], 'Should return [[1, 2], 3]'\nassert     flatten_list([[1], 2, 3]) == [[1], 2, 3], 'Should return [[1], 2, 3]'\nassert     flatten_list([[[1], 2, 3]]) == [[1, 2, 3]], 'Should return [[1, 2, 3]]'\nassert     flatten_list([[1], 2, 3, [[4], 5], 6]) == [[1], 2, 3, 4, 5, 6], 'Should return [[1], 2, 3, 4, 5, 6]'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef flatten_list_using_recursion(list1):\n    '''\n    Write a function to flatten a given nested list structure using recursion.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     flatten_list([1,2,3,4]) == [1,2,3,4]\nassert     flatten_list([1,[2,3,4],5]) == [1,2,3,4,5]\nassert     flatten_list([1,[[2,3,4]],5]) == [1,2,3,4,5]\nassert     flatten_list([[[2,3],4],5]) == [2,3,4,5]\nassert     flatten_list([[[2,3]],4,5]) == [2,3,4,5]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([[1,2,3],[4,5,6]]) == [[1, 2, 3], 4, 5, 6]\nassert     flatten_list([[1,2,3],[4,5,6],[[7,8,9],[10,11,12]]]) == [[1, 2, 3], 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     flatten_list([[1,2,3,4],[5,6,7,8],9,10,11,12]) == [[1, 2, 3, 4], 5, 6, 7, 8, 9, 10, 11, 12]\nassert     flatten_list([[1,2,3],[4,5,6],[[7,8,9],[10,11,12]]]) == [[1, 2, 3], 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     flatten_list([[1,2,3],[4,5,6],[[7,8,9],[10,11,12]]]) == [[1, 2, 3], 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate([(1, 4), (2, 4), (3, 8)]) == 8, \"Correct max aggregates\"\nassert     max_aggregate([(1, 4), (2, 4), (3, 8)], 0) == 8, \"Correct max aggregates\"\nassert     max_aggregate([(1, 4), (2, 4), (3, 8)], 1) == 4, \"Correct max aggregates\"\nassert     max_aggregate([(1, 4), (2, 4), (3, 8)], 2) == 8, \"Correct max aggregates\"\nassert     max_aggregate([(1, 4), (2, 4), (3, 8)], 3) == 8, \"Correct max aggregates\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([(1, 2, 3),(5, 6, 7)]) == (6, 7, 7)\nassert max_aggregate([(1, 2, 3),(5, 6, 7)]) == (6, 7, 7)\nassert max_aggregate([(1, 2, 3),(4, 5, 6),(7, 8, 9)]) == (8, 9, 9)\nassert max_aggregate([(1, 2, 3),(4, 5, 6),(7, 8, 9)]) == (8, 9, 9)\nassert max_aggregate([(1, 2, 3),(4, 5, 6),(7, 8, 9)]) == (8, 9, 9)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_aggregate([(1, 2), (5, 1), (2, 6)]) == (10, 6)\nassert     max_aggregate([(4, 1), (1, 2)]) == (5, 4)\nassert     max_aggregate([(7, 6)]) == (7, 6)\nassert     max_aggregate([(6, 1), (3, 1), (1, 1), (3, 5), (6, 2), (2, 2)]) == (8, 7)\nassert     max_aggregate([(4, 5), (6, 2), (2, 1), (5, 2), (8, 4), (7, 4)]) == (14, 6)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate([(1,2),(3,4),(2,3)]) == 4, \"Wrong answer\"\nassert     max_aggregate([(1,2,3),(3,4,5),(2,3,4)]) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([('2020-09-01',2),('2020-09-03',1),('2020-09-02',1)]) == '2020-09-02','max_aggregate'\nassert max_aggregate([('2020-09-01',2),('2020-09-03',2),('2020-09-02',1)]) == '2020-09-02','max_aggregate'\nassert max_aggregate([('2020-09-01',2),('2020-09-03',1),('2020-09-02',1)]) == '2020-09-02','max_aggregate'\nassert max_aggregate([('2020-09-01',2),('2020-09-03',1),('2020-09-02',1)]) == '2020-09-02','max_aggregate'\nassert max_aggregate([('2020-09-01',1),('2020-09-03',1),('2020-09-02',1)]) == '2020-09-02','max_aggregate'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_aggregate2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize a variable to store the maximum aggregate\n    # initialize the variable'maxagg' to store the maximum aggregate\n    maxagg = 0\n    for i in stdata:\n        #'stdata' will be a list of tuples\n        # loop through each tuple in'stdata'\n        # if the list element's value is greater than maxagg\n        # then assign the value of maxagg to the list element's value\n        # if the maxagg is less than the list element's value,\n        # then assign the list element's value to maxagg\n        if i[1] > maxagg:\n            maxagg = i[1]\n    return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate( (0,1,4,5,9), (0,3,3,9,12), (1,4,8,10) ) == (5,10)\nassert     max_aggregate( (0,1,4,5,9), (0,3,3,9,12), (1,4,8,10), (10,20) ) == (5,10)\nassert     max_aggregate( (0,1,4,5,9), (0,3,3,9,12), (1,4,8,10), (10,20), (20,30) ) == (5,10)\n\ndef max_aggregate_memo(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_aggregate([(1, 1, 1), (1, 2, 1), (1, 3, 1), (2, 4, 1), (2, 5, 1), (3, 6, 1)]) == (3, 6)\nassert     max_aggregate([(3, 1, 2), (2, 3, 2), (1, 3, 2), (2, 4, 2), (2, 5, 2), (3, 6, 2)]) == (4, 8)\nassert     max_aggregate([(3, 1, 3), (2, 3, 3), (1, 3, 3), (2, 4, 3), (2, 5, 3), (3, 6, 3)]) == (3, 6)\nassert     max_aggregate([(3, 1, 2), (2, 3, 2), (1, 3, 2), (2, 4, 2), (2, 5, 2), (3, 6, 2), (2, 4, 2), (4, 8, 2), (4, 8, 2)]) == (4, 8)\nassert     max_aggregate([(3, 1, 3), (2, 3, 3), (1, 3, 3), (2, 4, 3), (2, 5, 3), (3, 6, 3), (2, 4, 3), (4, 8, 3), (4, 8, 3)]) == (3, 6)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([(1, 2), (3, 4), (5, 6)]) == 6\nassert     max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate([(1, 2), (3, 4), (5, 6)]) == max_aggregate("
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert count_binary_seq(3) == 3\nassert count_binary_seq(4) == 8\nassert count_binary_seq(5) == 15\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_binary_seq(3) == 1\nassert count_binary_seq(4) == 2\nassert count_binary_seq(10) == 3\nassert count_binary_seq(11) == 3\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_binary_seq(2) == 7\ncount_binary_seq(4) == 13\ncount_binary_seq(10) == 2523\n\ndef count_binary_seq_generator(n):\n    '''\n    Write a generator that finds all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_binary_seq(1) == 5, \"Test 1 Failed\"\nassert count_binary_seq(3) == 11, \"Test 2 Failed\"\nassert count_binary_seq(5) == 13, \"Test 3 Failed\"\nassert count_binary_seq(7) == 22, \"Test 4 Failed\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_binary_seq(2) == 4\nassert     count_binary_seq(4) == 10\nassert     count_binary_seq(6) == 20\nassert count_binary_seq(8) == 36\nassert count_binary_seq(10) == 46\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(1)==1\nassert     count_binary_seq(2)==2\nassert     count_binary_seq(3)==8\nassert     count_binary_seq(4)==16\nassert     count_binary_seq(5)==26\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 5\nassert     count_binary_seq(4) == 7\nassert     count_binary_seq(5) == 11\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_binary_seq(3) == 6\nassert count_binary_seq(8) == 23\nassert count_binary_seq(5) == 6\nassert count_binary_seq(1) == 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a':'b'}) == 1\nassert     dict_depth({'a':{'b':'c'}}) == 2\nassert     dict_depth({'a':{'b':{'c':'d'}}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({\"hello\":1,\"world\":2}) == 0\nassert     dict_depth({\"hello\":{\"world\":{\"hi\":\"bye\"}}, \"bye\":True}) == 1\nassert dict_depth({\"hello\":{\"world\":{\"hi\":\"bye\"}}, \"bye\":{\"hi\":\"bye\"}}) == 2\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_depth({'a': 1, 'b': 2, 'c': {'d': 4, 'e': 5}}) == 2\nassert     dict_depth({'a': 1, 'b': 2, 'c': {'d': 4, 'e': 5, 'f': 6}}) == 3\nassert     dict_depth({'a': 1, 'b': 2, 'c': {'d': 4, 'e': 5, 'f': 6, 'g': 7}}) == 4"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({\"a\": 1}) == 1\nassert     dict_depth({\"a\": {\"b\": 1, \"c\": 2}}) == 2\nassert     dict_depth({\"a\": {\"b\": {\"c\": 3}}}) == 3\nassert     dict_depth({\"a\": {\"b\": {\"c\": {\"d\": 4}}}}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth({}) == 0, \"Empty Dictionary: dict_depth should return 0\"\nassert     dict_depth({'a':1,'b':2,'c':3,'d':4}) == 3, \"Depth of a dictionary: dict_depth should return 3\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({'x':1,'y':2}) == 2\nassert     dict_depth({'x':{'y':2}}) == 2\nassert     dict_depth({'x':{'y':{'z':3}}}).equals(2)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_depth({'key1': 'value1', 'key2': 'value2'}) == 1, 'Wrong value'\nassert     dict_depth({'key1': 'value1', 'key2': {'key2.1': 'value2.1', 'key2.2': 'value2.2'}}) == 2, 'Wrong value'\nassert     dict_depth({'key1': 'value1', 'key2': {'key3': {'key4': 'value4', 'key5': 'value5'}}}) == 3, 'Wrong value'\nassert     dict_depth({'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4', 'key5': 'value5'}) == 5, 'Wrong value'\nassert     dict_depth({'key1': 'value1', 'key2': {'key3': 'value3', 'key4': 'value4', 'key5': 'value5'}}) == 5, 'Wrong value'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({}) == 0\nassert dict_depth({1:1}) == 1\nassert dict_depth({1: {2: 2, 3: 3}}) == 3\nassert dict_depth({1: {2: 2, 3: 3}, 3: 3}) == 2\nassert dict_depth({1: {2: 2, 3: 3}, 3: 3, 4: {5: 5}}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_depth(dict(a=1, b=2, c=3))     == 3\nassert dict_depth(dict(a=1, b=2, c=3, d={}))     == 4\nassert dict_depth(dict(a=1, b=2, c=3, d={'a': 1}))     == 4\nassert dict_depth(dict(a=1, b=2, c=3, d={\"a\": 1}))     == 4\nassert dict_depth(dict(a=1, b=2, c=3, d={\"a\": 1, \"c\": 3}))     == 4\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Element([2,6,4,8],2,3,[0,3]) == 6\nassert     find_Element([2,6,4,8],2,3,[3,0]) == 6\nassert     find_Element([2,6,4,8],2,3,[1,2]) == 6\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([5,6,7,4,1],[[0,0,0],[0,0,0],[0,0,0]],[1,0,1],[3])==4\nassert     find_Element([5,6,7,4,1],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0],[2])==7\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Element([[2,3,4],3,2,1,1,2],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint (\"All the test cases have passed\")"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Element(arr=[4, 5, 6, 2], ranges=[3, 1], rotations=[0, 1], index=1) == 4\nassert     find_Element(arr=[4, 5, 6, 2], ranges=[3, 1], rotations=[0, 1], index=0) == 5\nassert     find_Element(arr=[4, 5, 6, 2], ranges=[3, 1], rotations=[0, 1], index=2) == 6\nassert     find_Element(arr=[4, 5, 6, 2], ranges=[3, 1], rotations=[0, 1], index=3) == 2\n\n'''\nTime complexity : O(n)\n'''\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1, 5, 9, 13, 17, 21]\n    ranges = 2\n    rotations = 4\n    index = 5\n    print(find_Element(arr, ranges, rotations, index))\n    "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Element([1,2,3,4,5],(0,2),0,0) == 1\nassert     find_Element([1,2,3,4,5],(0,2),1,1) == 2\nassert     find_Element([1,2,3,4,5],(0,2),2,1) == 3\nassert     find_Element([1,2,3,4,5],(0,2),3,0) == 1\nassert     find_Element([1,2,3,4,5],(0,2),4,0) == 1\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \"p\" == start_withp([\"p\",\"q\",\"r\",\"s\"]), \"return 'p' and 'q'\"\nassert \"p\" == start_withp([\"p\",\"q\",\"r\",\"s\"]), \"return 'p' and 'r'\"\nassert \"p\" == start_withp([\"p\",\"q\",\"r\",\"s\"]), \"return 'p' and 'q'\"\nassert \"p\" == start_withp([\"p\",\"q\",\"r\",\"s\"]), \"return 'p' and's'\"\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     start_withp(['p']    ) == ('p', 'p')\nassert     start_withp(['ppppppppppp']    ) == ('p','ppppppppppp')\nassert     start_withp(['ppppppppppppppppppppp']    ) == ('ppppppppppppppppppppp', 'ppppppppppppppppppppp')\nassert     start_withp(['ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef split_test(words):\n    '''\n    Write a function to return a list of words from a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     start_withp([\"pam\", \"pl\"]) == ('pam', 'pl'), \"Wrong answer\"\nassert     start_withp([\"pm\", \"pl\"]) == ('pm', 'pl'), \"Wrong answer\"\nassert     start_withp([\"pl\", \"pm\"]) == ('pl', 'pm'), \"Wrong answer\"\nassert     start_withp([\"pl\", \"pl\"]) == ('pl', 'pl'), \"Wrong answer\"\nassert     start_withp([\"p\", \"p\"]) == ('p', 'p'), \"Wrong answer\"\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     start_withp([\"pig\", \"piglet\", \"pigs\"]) == [\"piglet\", \"pigs\"]\nassert     start_withp([\"python\"]) == [\"python\"]\nassert     start_withp([\"python\", \"pythons\"]) == [\"python\", \"pythons\"]\nassert     start_withp([\"pigs\"]) == []\n\n\ndef start_withb(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     start_withp([\"pallavi\", \"abhijeet\"]) == (\"pallavi\", \"abhijeet\")\nassert start_withp([\"rahul\", \"pallavi\", \"abhijeet\", \"kumar\"]) == (\"abhijeet\", \"kumar\")\nassert start_withp([\"rahul\", \"pallavi\", \"abhijeet\", \"kumar\", \"raju\"]) == (\"raju\", \"raju\")\nprint(\"YOUR CODE IS CORRECT!\")"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp(['hello','wor','ld','jom','rs','p','b','l','da','x']) == ['p','b']\nassert     start_withp(['hello','wor','ld','jom','rs','p','b','l','da','x']) == ['p','b']\nassert     start_withp(['hello','wor','ld','jom','rs','p','b','l','da','x']) == ['p','b']\nassert     start_withp(['hello','wor','ld','jom','rs','p','b','l','da','x']) == ['p','b']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"pippi\", \"bambooble\"]) == \"pippi\"\nassert start_withp([\"bamboo\", \"bamboocle\", \"pippi\"]) == \"bamboocle\"\nassert start_withp([\"hello\"]) == \"hello\"\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_increasing_subseq([5,7,7,8,2], 5, 0, 2) == 10\nassert     max_sum_increasing_subseq([5,7,7,8,2], 5, 1, 2) == 12\nassert     max_sum_increasing_subseq([5,7,7,8,2], 5, 2, 2) == 15\nassert     max_sum_increasing_subseq([5,7,7,8,2], 5, 3, 2) == 18\nassert     max_sum_increasing_subseq([5,7,7,8,2], 5, 4, 2) == 22\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\nInput : arr[] = {1, 11, 5, 6, 7, 16, 18, 19, 2, 3, 4, 8, 9, 10, 5}\nOutput : 30\nExplanation: The subsequence is {11, 16, 18}\n'''\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nTime complexity : O(n)\nSpace complexity: O(1)\n'''\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Time complexity : O(n)\n    Space complexity: O(1)\n    '''\n    if k == index:\n        return a[k]\n    if k > index:\n        return 0\n    res = 0\n    for i in range(index, k, -1):\n        temp = a[i] + max_sum_increasing_subseq(a, n, i + 1, k)\n        if temp > res:\n            res = temp\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_increasing_subseq([1,2,3,4], 4, 0, 2) == 5\nassert     max_sum_increasing_subseq([1,2,3,4], 4, 0, 3) == 4\nassert     max_sum_increasing_subseq([1,2,3,4], 4, 1, 4) == 5\nassert     max_sum_increasing_subseq([1,2,3,4], 4, 1, 2) == 5\nassert     max_sum_increasing_subseq([1,2,3,4], 4, 1, 3) == 5\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_increasing_subseq([-1,-2,3,-4], 4, 0, 3) == 6\nassert     max_sum_increasing_subseq([-1,10,6,-3,-4,2], 4, 1, 3) == 12\nassert     max_sum_increasing_subseq([-1,4,3,3,1], 3, 0, 2) == 4\nassert     max_sum_increasing_subseq([-1,4,3,3,1], 3, 0, 3) == 6\nassert     max_sum_increasing_subseq([-1,4,3,3,1], 3, 1, 3) == 12\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_increasing_subseq([5, 1, 2, 3, 4], 4, 1, 2) == 5\nassert     max_sum_increasing_subseq([5, 1, 2, 3, 4], 5, 1, 4) == 10\nassert     max_sum_increasing_subseq([5, 1, 2, 3, 4], 5, 1, 5) == 10\nassert     max_sum_increasing_subseq([5, 1, 2, 3, 4], 5, 1, 6) == 10\nassert     max_sum_increasing_subseq([5, 1, 2, 3, 4], 5, 1, 7) == 10\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum_increasing_subseq([1,1,1,1], 1, 3) == 10\nassert     max_sum_increasing_subseq([1,2,3,5,4,6], 3, 4) == 17\nassert     max_sum_increasing_subseq([1,5,10,10,20,5,5], 4, 3) == 10\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum_increasing_subseq([1, 3, -10, 2, 1], 5, 2, 1) == 1\nassert     max_sum_increasing_subseq([-2, 1, 1, -2, 1, -1], 5, 3, 1) == 1\nassert     max_sum_increasing_subseq([-2, 1, -3, 4, -1, 2, 1], 5, 3, 1) == 3\nassert     max_sum_increasing_subseq([-1, 1, 2, 1, -1, 1, 2, 1], 5, 4, 3) == 6\nassert     max_sum_increasing_subseq([1, 3, -10, 2, 1], 5, 2, 3) == 3\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntuplex=('a','b','c','d','e','f','g')\nassert colon_tuplex(tuplex,2,2) == ('a:b', 'c:d', 'e:f', 'g:a')\n\ndef mk_list(lst):\n    '''\n    Write a function to make a list with the specified length.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndef main():\n    assert colon_tuplex((1,2,3),3,3) == ((1,2,3),(3,3,3))\n    assert colon_tuplex((1,2,3),3,1) == ((1,2,3),(3,3,3))\n    assert colon_tuplex((1,2,3),1,3) == ((1,2,3),(3,3,3))\n    assert colon_tuplex((1,2,3),1,1) == ((1,2,3),(3,3,3))\n    "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     colon_tuplex((1,2),3,4) == (1,2,3,4)\nassert     colon_tuplex((1,2),3,1) == (1,2,3)\nassert     colon_tuplex((1,2),4,4) == (1,2,4)\nassert     colon_tuplex((1,2),3,5) == (1,2,3,4,5)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex((1,2,3), 2, 4) == (1,3)\nassert     colon_tuplex((1,2,3), 4, 2) == (3,1)\nassert     colon_tuplex((1,2,3), 5, 6) == ()\nassert     colon_tuplex((1,2,3), 1, 4) == (2,3)\nassert     colon_tuplex((1,2,3,4,5), 1, 4) == (2,3,4)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ntuplex = (1,2,3,4,5,6,7,8,9,10)\n\ncolon_tuplex(tuplex,5,5)\n\ncolon_tuplex(tuplex,5,6)\n\ncolon_tuplex(tuplex,5,7)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     colon_tuplex( ('a','b','c'), 3, 2 ) == ((0,1,2),)\nassert     colon_tuplex( ('a', 'b', 'c'), 3, 3 ) == ((0, 1, 2), (0, 1, 2))\nassert     colon_tuplex( ('a', 'b', 'c'), 3, 4 ) == ((0, 1, 2), (0, 1, 2))\nassert     colon_tuplex( ('a', 'b', 'c'), 3, 5 ) == ((0, 1, 2), (0, 1, 2))\nassert     colon_tuplex( ('a', 'b', 'c'), 2, 4 ) == ((0, 1, 2), (0, 1, 2))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     colon_tuplex((\"cat\", \"dog\"),4,3)==(\"c:d:o:g\",)\nassert     colon_tuplex((\"cat\", \"dog\"),4,4)==(\"c:d:o:g\",)\nassert     colon_tuplex((\"cat\", \"dog\"),4,5)==(\"c:d:o:g\",)\nassert     colon_tuplex((\"cat\", \"dog\", \"mouse\"),4,5)==(\"c:d:o:g\",)\nassert     colon_tuplex((\"cat\", \"dog\", \"mouse\"),4,6)==(\"c:d:o:g\",)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     colon_tuplex((1,2,3),2,1) == 1\nassert     colon_tuplex((1,2,3,4),1,2) == 4\nassert     colon_tuplex((1,2,3,4),1,4) == 2\nassert     colon_tuplex((1,2,3,4),1,3) == 1\nassert     colon_tuplex((1,2,3),0,2) == 3\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef rotate(tuplex,m,n):\n    '''\n    Write a function to rotate a list of m * n elements and returns a new list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     large_product([1,2,3,4,5], [1,2,3,4,5], 5) == [120, 60, 40, 30, 24]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 6) == [120, 60, 40, 30, 24, 24]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 5) == [120, 60, 40, 30, 24]\nassert     large_product([], [], 5) == []\nassert large_product([], [], 1) == []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     large_product([1, 2, 3, 4],\n            [5, 6, 7, 8],\n            3) == 45\nassert     large_product([0, -1, -2, -3, -4],\n            [-5, -6, -7, -8, -9],\n            5) == -120\nassert large_product([1, 2, 3, 4],\n            [5, 6, 7, 8],\n            1) == 24\nassert large_product([0, -1, -2, -3, -4],\n            [-5, -6, -7, -8, -9],\n            3) == -24\nassert large_product([1, 2, 3, 4, 5],\n            [6, 7, 8, 9, 10],\n            3) == 45\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     large_product([1, 2, 3], [4, 5, 6], 3) == [24, 20, 12]\nassert large_product([1, 3, 2], [5, 7, 10], 3) == [60, 60, 20]\nassert large_product([1, 2], [3, 4], 2) == [3, 4]\nassert large_product([1, 2, 3], [5, 6, 7], 3) == [18, 24, 18]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('\\n')\nprint('Testing large_product():')\nprint('\\n')\nprint('Pass' if (large_product([5, 2, 1], [2, 3, 4], 2) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 3, 5], [6, 7, 8], 3) == 80) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 1) == 15) else 'Fail')\nprint('Pass' if (large_product([5, 2], [3, 5, 7], 2) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 3, 5], [6, 7, 8], 3) == 80) else 'Fail')\nprint('Pass' if (large_product([1, 2, 4], [3, 5, 7], 1) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2, 4], [3, 5, 7], 2) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 3) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 4) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 5) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 6) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 7) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 8) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 9) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 10) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 11) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 12) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 13) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 14) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 15) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 16) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 17) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 18) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 19) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 20) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 21) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 22) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 23) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 24) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 25) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 26) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 27) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 28) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 29) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 30) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 31) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 32) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 33) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 34) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 35) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 36) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 37) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 38) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 39) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 40) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 41) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 42) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 43) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 44) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 45) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 46) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 47) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 48) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 49) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 50) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 51) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 52) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 53) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 54) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 55) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 56) == 60) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 57) == 15) else 'Fail')\nprint('Pass' if (large_product([1, 2], [3, 5, 7], 58) == 60) else 'Fail'"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     large_product([1, 2, 3, 4], [-1, -1, -1, -1], 2) == 1, 'First example'\nassert     large_product([-2, 1, 3, 5], [-1, -1, -1, -1], 1) == -2, 'Second example'\nassert large_product([], [-1, -1, -1, -1], 1) == 1, 'Third example'\nassert large_product([1, 2], [-1, -1], 1) == 1, 'Fourth example'\nassert large_product([1, 2], [-1, -1], 2) == 2, 'Fifth example'\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     large_product([], [], 0) == []\nassert     large_product([], [1], 0) == []\nassert     large_product([1], [], 0) == []\nassert     large_product([2], [], 0) == []\nassert     large_product([3], [], 0) == []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert large_product([-1, -3, -4], [-2, -2, -2], 2) == 6, \"Wrong output\"\nassert large_product([-1, -3, -4], [-2, -2, -2], 1) == 4, \"Wrong output\"\nassert large_product([2], [-3, -4], 1) == -1, \"Wrong output\"\nassert large_product([3, -1, 4], [1, -3, 4], 2) == 9, \"Wrong output\"\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     large_product([1,3,-2,4], [0,3,2,-2], 3) == [6,3,4], 'FAILED'\nassert     large_product([1,3,-2,4], [-1,3,2,4], 3) == [-1,6,4], 'FAILED'\n\ndef large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_num = max(max(nums1), max(nums2))\n\n    # build a n * n matrix to hold the largest product\n    dp = [[0] * (N+1) for _ in range(N+1)]\n\n    # initialize the result\n    for i in range(N+1):\n        dp[i][i] = max_num\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     large_product([1,3,2,4,5], [2,1,7,6,8], 3) == [(1,2,4), (1,2,8), (3,6,8)]\nassert     large_product([1,3,2,4,5], [2,1,7,6,8], 5) == [(1,2,4), (1,2,8), (1,3,6), (2,3,4), (2,6,8), (3,4,8), (3,7,6), (3,2,8)]\nassert     large_product([], [2,1,7,6,8], 3) == []\nassert     large_product([1,3,2,4,5], [2,1,7,6,8], 1) == [(2,1,7)]\nassert     large_product([1,3,2,4,5], [2,1,7,6,8], 0) == []\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(100,200) == 200\nassert maximum(100,200) == 200\nassert maximum(200,100) == 200\nassert maximum(100,100) == 100\nassert maximum(100) == 100\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum(1,2) == 2, \"Maximum of 1 and 2 is incorrect\"\nassert     maximum(2,1) == 2, \"Maximum of 1 and 2 is incorrect\"\nassert     maximum(1,1) == 1, \"Maximum of 1 and 1 is incorrect\"\nassert     maximum(2,2) == 2, \"Maximum of 2 and 2 is incorrect\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(1,2) == 2, \"Not True\"\nassert     maximum(3,4) == 4, \"Not True\"\nassert     maximum(2,3) == 3, \"Not True\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum(12,10) == 12, \"input 1 is not a positive integer\"\nassert     maximum(10,12) == 12, \"input 2 is not a positive integer\"\nassert     maximum(-12,-10) == -10, \"input 3 is not a positive integer\"\nassert     maximum(-10,-12) == -12, \"input 4 is not a positive integer\"\nassert     maximum(0,-12) == -12, \"input 5 is not a positive integer\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert maximum(a=1,b=10) == 10\nassert maximum(a=20,b=10) == 20\nassert maximum(a=10,b=10) == 10\nassert maximum(a=10,b=20) == 10\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(10,20) == 20\nassert maximum(-10,-20) == 20\nassert maximum(10,-20) == 10\n\nprint(\"Test Case 2: Passed\")"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(1,2)==2, \"You did not implemented maximum function correctly.\"\nassert maximum(1,2)==2, \"You did not implemented maximum function correctly.\"\nassert maximum(2,1)==2, \"You did not implemented maximum function correctly.\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(10,20) == 20\nassert     maximum(0,20) == 20\nassert     maximum(-10,-20) == -20\nassert     maximum(0,0) == 0\nassert     maximum(0,-10) == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(2,1) == 2, \"error 1\"\nassert     maximum(2,3) == 3, \"error 2\"\nassert     maximum(4,5) == 5, \"error 3\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmaximum(2,5) == 5\nassert maximum(2,6) == 6\nassert maximum(5,4) == 5\nassert maximum(5,6) == 5\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple(\"\") == \"\", \"empty string is not correct\"\nassert     string_to_tuple(\"A\") == \"A\", \"string of length 1 is not correct\"\nassert     string_to_tuple(\"a\") == \"a\", \"string of length 2 is not correct\"\nassert     string_to_tuple(\"abc\") == \"abc\", \"string of length 3 is not correct\"\nassert     string_to_tuple(\"abcde\") == \"abcde\", \"string of length 5 is not correct\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple(\"A\") == ('A',)\nassert     string_to_tuple(\"Aa\") == ('A', 'a')\nassert     string_to_tuple(\"AaA\") == ('A', 'a', 'A')\nassert     string_to_tuple(\"AAA\") == ('A', 'A', 'A')\nassert     string_to_tuple(\"AaAaA\") == ('A', 'a', 'A', 'a', 'A')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('Heeeelllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple('apple') == ('a','p','p','l','e')\nassert     string_to_tuple('orange') == ('o','r','e','n','g')\nassert     string_to_tuple('pear') == ('p','a','r','e','p')\nassert     string_to_tuple('grape') == ('g','a','p','e','r')\n\ndef string_to_dict(str1):\n    '''\n    Write a function to convert a given string to a dictionary of key value pairs.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o'), 'Wrong'\nassert     string_to_tuple('goodbye') == ('g', 'o', 'd', 'e', 'r', 'w', 'o'), 'Wrong'\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple(\"a1b2\") == ('a', 'b', '1', '2')\nassert     string_to_tuple(\"1a2b3\") == ('1', 'a', '2', 'b', '3')\nassert     string_to_tuple(\"a1b\") == ('a', '1', 'b')\nassert     string_to_tuple(\"\") == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_tuple('string') == ('s', 't', 'r', 'i', 'g', 'n')\nassert     string_to_tuple('abc') == ('a', 'b', 'c')\nassert     string_to_tuple('nope') == None\n\ndef string_to_dict(str1):\n    '''\n    Write a function to convert a given string to a dictionary of characters and their frequencies.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple(\"abc\") == (\"a\", \"b\", \"c\")\nassert     string_to_tuple(\"abcd\") == (\"a\", \"b\", \"c\", \"d\")\nassert     string_to_tuple(\"qwertyuiopasdfghjklzxcvbnm\") == (\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"p\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\")\nassert     string_to_tuple(\"1234567890\") == (\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\")\nassert     string_to_tuple(\"abcdefg\") == (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\nassert     string_to_tuple('123') == ('1', '2', '3')\nassert     string_to_tuple('xyz') == ('x', 'y', 'z')\nassert     string_to_tuple('') == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple(\"good\") == (\"g\", \"o\", \"o\", \"d\")\nassert     string_to_tuple(\"hello world\") == (\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\")\nassert     string_to_tuple(\"world\") == (\"w\", \"o\", \"r\", \"l\", \"d\")\nassert     string_to_tuple(\"\") == ()\nassert     string_to_tuple(\"a\") == (\"a\",)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(1) == 0\nassert     set_left_most_unset_bit(2) == 1\nassert     set_left_most_unset_bit(3) == 1\nassert     set_left_most_unset_bit(4) == 2\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_left_most_unset_bit(5) == 1\nassert     set_left_most_unset_bit(5) == 1\nassert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(127) == 127\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_left_most_unset_bit(3) == 4, \"3 should be 4\"\nassert     set_left_most_unset_bit(9) == 2, \"9 should be 2\"\nassert     set_left_most_unset_bit(11) == 5, \"11 should be 5\"\nassert     set_left_most_unset_bit(16) == 1, \"16 should be 1\"\nassert     set_left_most_unset_bit(32) == 0, \"32 should be 0\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_left_most_unset_bit(2) == 0, \\\n        \"set_left_most_unset_bit(2) should be 0\"\nassert     set_left_most_unset_bit(7) == 1, \\\n        \"set_left_most_unset_bit(7) should be 1\"\nassert     set_left_most_unset_bit(15) == 7, \\\n        \"set_left_most_unset_bit(15) should be 7\"\n\n\ndef set_all_bits_to_one(n): \n    '''\n    Write a python function to set all bits to 1.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(0) == True, 'First number should be True'\nassert     set_left_most_unset_bit(1) == True, 'Second number should be True'\nassert     set_left_most_unset_bit(2) == False, 'Third number should be False'\nassert     set_left_most_unset_bit(3) == True, 'Fourth number should be True'\nassert     set_left_most_unset_bit(4) == False, 'Fifth number should be False'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(1) == False, \"There is no unset bit for 1.\"\nassert     set_left_most_unset_bit(0) == False, \"There is no unset bit for 0.\"\nassert     set_left_most_unset_bit(2) == False, \"There is no unset bit for 2.\"\nassert     set_left_most_unset_bit(6) == True, \"There is no unset bit for 6.\"\nassert     set_left_most_unset_bit(7) == False, \"There is no unset bit for 7.\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(10, 10) ==    172.686984\nassert     volume_cone(10, 5) ==    179.684602\nassert     volume_cone(10, 50) ==    5820.894188\nassert     volume_cone(10, 80) ==    686984\nassert     volume_cone(5, 5) ==    40.756038\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cone(1,1) == math.pi*r**2, \"Volume_cone has error\"\nassert     volume_cone(2,3) == math.pi*r**2*h, \"Volume_cone has error\"\nassert     volume_cone(10,100) == math.pi*r**2*h, \"Volume_cone has error\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cone(r=1.5,h=4) == 25.5\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cone(2, 5) == 45\nassert volume_cone(1, 5) == 20\nassert volume_cone(0, 5) == 0\nassert volume_cone(1, 10) == 500\n\ndef mean(lst):\n    '''\n    Write a function to find the mean of a list.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cone(3,5)==5.4999999999999996\nassert     volume_cone(5,4)==15.5\nassert     volume_cone(4,5)==10.5\nassert     volume_cone(10,10)==400\nassert     volume_cone(10,0)==0\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(2,3) == math.pi*(2**2)*3, \\\n        'Your function does not compute the correct volume of a cone.'\n\nprint('The volume of a cone of radius 2 and height 3 is:', volume_cone(2,3))\n\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef volume_cone(r,h):\n    '''\n    The volume of a cone is given by:\n        V = 3/5 * pi * r^2 * h\n    The formula can be simplified:\n        V = pi * r^2 * (h/3)\n    Write a function that uses volume_cone to compute the volume of a cone given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(1.5,1) == math.pi*(1.5**2)*0.5\nassert     volume_cone(3,4) == math.pi*(3**2)*4/3\nassert     volume_cone(3,2) == math.pi*(3**2)*2/3\nassert     volume_cone(3.5,3) == math.pi*(3.5**2)*2.5/3\nassert     volume_cone(3.5,4) == math.pi*(3.5**2)*4/3\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cone(1,10) == math.pi*1**2*10\nassert     volume_cone(2,10) == math.pi*2**2*10\nassert     volume_cone(2,4) == math.pi*2**2*4\nassert     volume_cone(3,10) == math.pi*3**2*10\nassert     volume_cone(4,10) == math.pi*4**2*10\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert highest_Power_of_2(9) == 4\nassert highest_Power_of_2(128) == 64\nassert highest_Power_of_2(9) == 4\nassert highest_Power_of_2(8) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     highest_Power_of_2(8) == 8\nassert highest_Power_of_2(4) == 2\nassert highest_Power_of_2(16) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(5) == 32\nassert highest_Power_of_2(7) == 64\nassert highest_Power_of_2(8) == 8\nassert highest_Power_of_2(10) == 16\nassert highest_Power_of_2(16) == 32\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(16) == 4\nassert     highest_Power_of_2(9) == 2\nassert     highest_Power_of_2(7) == 1\nassert     highest_Power_of_2(4) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     highest_Power_of_2(3) == 2\nassert     highest_Power_of_2(4) == 2\nassert     highest_Power_of_2(5) == 4\n\ndef power_of_2(n):\n    '''\n    Write a python function to find the maximum power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nhighest_Power_of_2(8) == 4\nhighest_Power_of_2(10) == 10\nhighest_Power_of_2(15) == 15\nhighest_Power_of_2(17) == 17\nhighest_Power_of_2(20) == 20\nhighest_Power_of_2(22) == 22\n\nprint('Test passed')"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(3) == 1\nassert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(9) == 2\nassert     highest_Power_of_2(15) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nhighest_Power_of_2(1) == 0\nhighest_Power_of_2(16) == 0\nhighest_Power_of_2(1) == 0\nhighest_Power_of_2(32) == 1\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(9) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(0) == 1\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power_of_2(64) == 5\nhighest_Power_of_2(1024) == 1\nhighest_Power_of_2(512) == 3\nhighest_Power_of_2(1000000) == 1\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(6) == 3\nhighest_Power_of_2(65) == 5\nhighest_Power"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_lucas_1(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lucas(1) == 2, 'Fail to find the 1st lucas number'\nassert     find_lucas(2) == 1, 'Fail to find the 2nd lucas number'\nassert     find_lucas(3) == 4, 'Fail to find the 3rd lucas number'\nassert     find_lucas(5) == 11, 'Fail to find the 5th lucas number'\nassert     find_lucas(6) == 18, 'Fail to find the 6th lucas number'\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nBuild a program to find the sum of the first N natural numbers, using the lucas numbers. \n'''\ndef find_sum(n):\n    '''\n    Write a function to find the sum of the first N natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__': \n    n = 10\n    print(find_lucas(n)) \n    print('\\n')\n    \n    n = 13\n    print(find_lucas(n)) \n    print('\\n')\n    \n    n = 15\n    print(find_lucas(n)) \n    print('\\n')"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_lucas(1) == 1\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 7\nfind_lucas(5) == 11\nfind_lucas(6) == 18\n\ndef find_euler(n):\n    '''\n    Write a function to find then'th euler number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(5) == 13\nassert     find_lucas(100) == 24812679025532878653648372023585628813462684069581737473743867797275046\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lucas(1) == 1\nassert     find_lucas(3) == 4\nassert     find_lucas(6) == 13\nassert     find_lucas(8) == 21\n\ndef find_euler(n): \n    '''\n    Write a function to find then'th Euler number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(5) == 8\nassert     find_lucas(10) == 29\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_string([], \"\") == \"\"\nassert     add_string([\"Hi\", \"Hola\"], \".\") == \"Hi Hola\"\nassert     add_string([\"Hi\", \"Hola\"], \".\") == \"Hi Hola\"\nassert     add_string([\"Hi\", \"Hola\"], \".\") == \"Hi Hola\"\nassert     add_string([\"Hi\", \"Hola\"], \". \") == \"Hi Hola\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string([\"hello\", \"hi\", \"bye\"], \"{0} {1} {0}\") == \"hello hi hello\", \"Wrong answer\"\nassert     add_string([\"hello\", \"hi\", \"bye\"], \"{1} {0} {1}\") == \"hi hello hi\", \"Wrong answer\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_string([1, 2, 3, 4, 5], \"{1}{2}{3}{4}{5}\") == \"12345\"\nassert     add_string([1, 2, 3, 4, 5], \"all in {0}\") == \"all in all\"\nassert     add_string([], \"{0}{1}{2}\") == \"\"\nassert     add_string([], \"{0}{}\") == \"\"\n\ndef first_last(s):\n    '''\n    Write a function that takes a string as input and returns the first and the last characters of the string in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_string([\"a\", \"b\", \"c\"], \"\") == \"a, b, c\"\nassert     add_string([\"a\", \"b\", \"c\"], \",\") == \"a, b, c\"\nassert     add_string([\"a\", \"b\", \"c\"], \"?\") == \"a? b? c?\"\nassert     add_string([\"a\", \"b\", \"c\"], \"!@#$%^&*()_+\") == \"a!@#$%^&*()_+b!@#$%^&*()_+c!\"\nassert     add_string([\"a\", \"b\", \"c\"], \":;<=>?{}[]\\\\|\") == \"a:;<=>?{}[]\\\\|b:;<=>?{}[]\\\\|c:;<=>?{}[]\\\\|\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_string([\"a\", \"b\", \"c\", \"d\"], \"as:\") == [\"as:\", \"as:\", \"as:\", \"as:\"]\nassert     add_string([\"a\", \"b\", \"c\", \"d\"], \"as: \") == [\"as:\", \"as:\", \"as:\", \"as:\"]\nassert     add_string([\"a\", \"b\", \"c\", \"d\"], \"as: \") == [\"as:\", \"as:\", \"as:\", \"as:\"]\nassert     add_string([\"a\", \"b\", \"c\", \"d\"], \"as:a:\") == [\"as:\", \"a:\", \"b:\", \"c:\"]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_string(['a', 'b', 'c'], '<{0}>') == 'a<b>c<'\nassert     add_string(['a', 'b', 'c'], '<{0}>'.format) == 'a<b>c<'\nassert     add_string(['a', 'b', 'c'], '<{0}>'.format('<{0}>')) == 'a<b>c<'\nassert     add_string(['a', 'b', 'c'], '<{0}>'.format('<{0}>'.format)) == 'a<b>c<'\nassert     add_string(['a', 'b', 'c'], '<{0}>'.format('')) == 'a<b>c<'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_string(['a', 'b'], '{}, {}') == ['a', 'b'], 'add_string'\nassert     add_string(['a', 'b'], '{1}, {2}') == ['a', 'b', 'a', 'b'], 'add_string'\nassert     add_string(['a', 'b'], '{a}, {b}') == ['a', 'b', 'a', 'b'], 'add_string'\nassert     add_string(['a', 'b', 'c'], '{1}, {2}') == ['a', 'b', 'c', 'a', 'b', 'c'], 'add_string'\n\n'''\n--- Question 7 ---\nDefine a function max_integer that takes a list of integers as its argument and returns the maximum integer.\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nconvert_list_dictionary([['key1'], ['key2'], ['key3']], [['key1'], ['key2'], ['key3']], [['key1'], ['key2'], ['key3']]) == {'key1': {'key2': {'key3': []}}, 'key2': {'key3': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2']]) == {'key1': {'key2': []}, 'key2': []}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3']]) == {'key1': {'key2': {'key3': []}}, 'key2': {'key3': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3']]) == {'key1': {'key2': {'key3': []}}, 'key2': {'key3': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3']]) == {'key1': {'key2': {'key3': []}}, 'key2': {'key3': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4']]) == {'key1': {'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}, 'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4']]) == {'key1': {'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}, 'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4']]) == {'key1': {'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}, 'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4']]) == {'key1': {'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}, 'key2': {'key3': {'key4': []}}, 'key3': {'key4': []}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4'], ['key5']]) == {'key1': {'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}, 'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4'], ['key5']]) == {'key1': {'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}, 'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4'], ['key5']]) == {'key1': {'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}, 'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4'], ['key5']]) == {'key1': {'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}, 'key2': {'key3': {'key4': {'key5': []}}, 'key3': {'key4': {'key5': []}}, 'key4': {'key5': []}}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4'], ['key5'], ['key6']]) == {'key1': {'key2': {'key3': {'key4': {'key5': {'key6': []}}, 'key3': {'key4': {'key5': {'key6': []}}, 'key4': {'key5': {'key6': []}}}, 'key4': {'key5': {'key6': []}}, 'key5': {'key6': []}}}, 'key3': {'key4': {'key5': {'key6': []}}, 'key3': {'key4': {'key5': {'key6': []}}, 'key4': {'key5': {'key6': []}}}, 'key4': {'key5': {'key6': []}}}}\nconvert_list_dictionary([['key1'], ['key2']], [['key1'], ['key2']], [['key1'], ['key2'], ['key3'], ['key4'], ['key5'], ['key6'], ['key7']]) == {'key1': {'key2': {'key3': {'key4': {'key5': {'key6': {'key7': []}}}, 'key3': {'key4': {'key5': {'key6': {'key7': []}}}, 'key4': {'key5': {'key6': {'key7': []}}}, 'key5': {'key6': {'key7': []}}}}}, 'key3': {'key4': {'key5': {'key6': {'key7': []}}}, 'key3': {'key4': {'key5': {'key6': {'key7': []}}}, 'key4': {'key5': {'key"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    convert_list_dictionary([1, 2, 3], [[3, 2, 1], [1, 2, 3], ['a', 'b', 'c']], [[4, 5, 6], ['x', 'y', 'z']]) == {1: {2: {3: 4}, 3: 5, 1: 6}, 'a': 'x', 'b': 'y', 'c': 'z'}\n\n\ndef remove_dict_value(d1, val):\n    '''\n    Write a function to remove a value from nested dictionary\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"]) == {\"1\":{\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 2: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 3: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}} \nassert     convert_list_dictionary([\"1\",\"2\",\"3\"], [\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"]) == {\"1\":{\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 2: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 3: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}} \nassert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"g\",\"h\",\"i\"]) == {\"1\":{\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 2: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 3: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 4: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 5: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 6: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 7: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 8: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 9: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 10: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 11: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 12: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 13: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 14: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}}\nassert     convert_list_dictionary([\"1\",\"2\",\"3\"], [\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"g\",\"h\",\"i\"], [\"j\",\"k\",\"l\"]) == {\"1\":{\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 2: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 3: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 4: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 5: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 6: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 7: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 8: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 9: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 10: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 11: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 12: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 13: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 14: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}}\nassert     convert_list_dictionary([\"1\",\"2\",\"3\"], [\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"g\",\"h\",\"i\"], [\"j\",\"k\",\"l\"], [\"m\",\"n\",\"o\"]) == {\"1\":{\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 2: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 3: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 4: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 5: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 6: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 7: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 8: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 9: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 10: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 11: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 12: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 13: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}, 14: {\"a\":\"d\", \"b\":\"e\", \"c\":\"f\"}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_key_dictionary(d1):\n    '''\n    Write a function to return max value of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['1', '2', '3']) == {'a': {'x': '1', 'y': '2', 'z': '3'}, 'b': {'x': '1', 'y': '2', 'z': '3'}, 'c': {'x': '1', 'y': '2', 'z': '3'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary(\n    [1,2,3,4],\n    [5,6,7,8],\n    [\"a\",\"b\",\"c\",\"d\"]\n) == \\\n    {\n        1: {5: \"a\", 6: \"b\", 7: \"c\", 8: \"d\"},\n        2: {5: \"a\", 6: \"b\", 7: \"c\", 8: \"d\"},\n        3: {5: \"a\", 6: \"b\", 7: \"c\", 8: \"d\"},\n        4: {5: \"a\", 6: \"b\", 7: \"c\", 8: \"d\"},\n    }\n\nassert convert_list_dictionary(\n    [1,2,3,4,5,6,7,8,9,10],\n    [11,12,13,14,15,16,17,18,19,20],\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]\n) == \\\n    {\n        1: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        2: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        3: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        4: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        5: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        6: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        7: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        8: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        9: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        10: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"}\n    }\n\nassert convert_list_dictionary(\n    [1,2,3,4,5,6,7,8,9,10],\n    [11,12,13,14,15,16,17,18,19,20],\n    [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]\n) == \\\n    {\n        1: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        2: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        3: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        4: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        5: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        6: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        7: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        8: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        9: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"},\n        10: {11: \"a\", 12: \"b\", 13: \"c\", 14: \"d\", 15: \"e\", 16: \"f\", 17: \"g\", 18: \"h\", 19: \"i\", 20: \"j\"}\n    }\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([1,2,3], [0,1,2,3], ['a', 'b', 'c', 'd']) == {1: {0: 'a', 1: 'b', 2: 'c', 3: 'd'}, 2: {0: 'a', 1: 'b', 2: 'c', 3: 'd'}, 3: {0: 'a', 1: 'b', 2: 'c', 3: 'd'}}\nassert     convert_list_dictionary([1,2,3], [[1,2,3], [2,3,4]], ['a', 'b', 'c', 'd']) == {1: {1: 'a', 2: 'b', 3: 'c'}, 2: {1: 'a', 2: 'b', 3: 'c'}, 3: {1: 'a', 2: 'b', 3: 'c'}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 3\nassert     get_max_sum(4) == 3\nassert     get_max_sum(5) == 5\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nget_max_sum(5) == 15\nget_max_sum(20) == 513\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 2\n    s = get_max_sum(n)\n    print(s)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum(0) == 0\nassert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 3\nassert     get_max_sum(4) == 5\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_sum (1) == 1, 'Failed: get_max_sum (1)'\nassert     get_max_sum (2) == 3, 'Failed: get_max_sum (2)'\nassert     get_max_sum (3) == 6, 'Failed: get_max_sum (3)'\nassert     get_max_sum (4) == 9, 'Failed: get_max_sum (4)'\nassert     get_max_sum (5) == 15, 'Failed: get_max_sum (5)'\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nget_max_sum (10) == 20\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 4\nassert     get_max_sum(4) == 6\nassert     get_max_sum(5) == 10\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum(0) == 0\nassert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 3\nassert     get_max_sum(4) == 6\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    assert get_max_sum(4) == 5\n    assert get_max_sum(13) == 43"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum(2) == 1, \"wrong answer\"\nassert     get_max_sum(3) == 1, \"wrong answer\"\nassert     get_max_sum(4) == 1, \"wrong answer\"\nassert     get_max_sum(5) == 1, \"wrong answer\"\nassert     get_max_sum(6) == 1, \"wrong answer\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list([1, 2, 3, 4]) == 3, 'Wrong!'\nassert     max_length_list([1, 2, 3, 4, 5]) == 5, 'Wrong!'\nassert     max_length_list([1, 2, 3, 4, 5, 6]) == 6, 'Wrong!'\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7]) == 7, 'Wrong!'\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9, 'Wrong!'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_length_list([1,2,3]) == [3,1,2]\nassert max_length_list([]) == []\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_length_list_elem(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([1, 2, 3]) == 1, \"Should return 1\"\nassert     max_length_list([1, 2, 3, 4]) == 4, \"Should return 4\"\nassert     max_length_list([1, 2, 3, 4, 5]) == 5, \"Should return 5\"\nassert     max_length_list([1, 2, 3, 4, 5, 6]) == 5, \"Should return 5\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == 6, \"Should return 6\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length_list([1, 2, 3]) == 3\nassert max_length_list([1, 2, 3, 4]) == 4\nassert max_length_list([1, 2, 3, 4, 5]) == 5\nassert max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == 99\nassert max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == 99\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length_list([]) == None, \" Empty list\"\nassert max_length_list([2,3,4,1,5]) == 5, \" Should return 5\"\nassert max_length_list([2,3,4,1,5,5,5]) == 5, \" Should return 5\"\nassert max_length_list([2,3,4,1,5,3]) == 5, \" Should return 5\"\nassert max_length_list([2,3,4,1,5,4,1]) == 5, \" Should return 5\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    max_length_list([]) == None, \"None is not expected!\"\n    max_length_list([1, 2, 3, 4]) == 4, \"All lists should be same length!\"\n    max_length_list([1, 1, 1]) == 1, \"One list should be max!\"\nassert max_length_list([1, 2, 3, 4, 5]) == 5, \"Not found!\"\nprint(\"The expected output is: 5, but the actual output is: {}\".format(max_length_list([1, 2, 3, 4, 5])))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_length_list([[1], [], [2], [], [1], [3], [], []]) == 3, 'Wrong output'\nassert \nmax_length_list([[1], [2], [3], [4], [5], [6], [7], [8]]) == 7, 'Wrong output'\nassert \nmax_length_list([[1, 2, 3], [4, 5, 6, 7], [8], [9, 10, 11]]) == 7, 'Wrong output'\nassert \nmax_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [11], [12]]) == 9, 'Wrong output'\nassert \nmax_length_list([[1], [2], [3], [4], [5], [6], [7], [8]]) == 5, 'Wrong output'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct(('apple', 'banana', 'cherry')) == True, 'Test 1 failed'\nassert     check_distinct(('python', 'python', 'python')) == False, 'Test 2 failed'\nassert     check_distinct(('cat', 'cat', 'cat')) == True, 'Test 3 failed'\nassert     check_distinct(('cat', 'cat', 'dog')) == False, 'Test 4 failed'\nassert     check_distinct(('cat', 'cat', 'cat', 'dog')) == False, 'Test 5 failed'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct(('aaa', 'bbb', 'ccc')) == False\nassert     check_distinct(('abc', 'bbb', 'ccc')) == True\nassert     check_distinct(('abc', 'bbc', 'ccc')) == False\nassert     check_distinct(('a', 'b', 'c')) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_distinct((1,2,3,4,5,1,1)) == True\nassert     check_distinct((1,2,3,4,5,1,2)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct((1,2,3)) == True\nassert     check_distinct((2,2,3)) == False\nassert     check_distinct((3,3,3)) == False\nassert     check_distinct((1,2,1)) == False\nassert     check_distinct((1,3,1)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_duplicates(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct(('a', 'b', 'c', 'd'))         == True\nassert     check_distinct((1, 2, 2, 3, 4))             == False\nassert     check_distinct((1, 2, 3, 4, 5, 6, 'd'))     == True\n\ndef check_distinct_alt(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    check_distinct((1,2,3)) == True\n    check_distinct((1,2,3,4)) == False\n    check_distinct((1,2,3,4,1)) == False\n\n\n\ndef get_palindrome(test_str):\n    '''\n    Write a function to get all palindromic substrings of given string.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct([1,2,3,1,2,3])     == True, 'Fail'\nassert     check_distinct([1,1,1,2,2,2,3,3,3])     == False, 'Fail'\nassert     check_distinct([1,2,3])     == False, 'Fail'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct((1,3,2,3,2,1)) is True,'tuples with duplicate elements are not accepted'\nassert     check_distinct((1,3,2,3,2,2)) is False, 'tuples with duplicate elements are not accepted'\nassert     check_distinct((3,3,2,2,2,1)) is False, 'tuples with duplicate elements are not accepted'\nassert     check_distinct((1,3,3,2,2,1)) is True, 'tuples with duplicate elements are not accepted'\nassert     check_distinct((1,3,3,3,2,2)) is True, 'tuples with duplicate elements are not accepted'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct((1,1,2)) == True, 'error in function '\nassert     check_distinct((1,1,2,3,4,5)) == False, 'error in function '\nassert     check_distinct((3,2,3,4,5,3,4,4)) == False, 'error in function '\nassert     check_distinct((1,2,3,1,4)) == False, 'error in function '\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('abc') == 'a',     \"Wrong answer, it should be a\"\nassert     first_non_repeating_character('abcd') == 'c',     \"Wrong answer, it should be d\"\nassert     first_non_repeating_character('abc') == 'a',     \"Wrong answer, it should be a\"\n\ndef is_palindrome(str1):\n    '''\n    Write a python function to check if a given string is a palindrome or not. A palindrome\n    is a word, phrase, or sequence that reads the same backward as forward, e.g., madam,\n    racecar, or racecarannakayak. Note that spaces and punctuation marks are not considered in\n    the palindrome check.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character('abcd') == 'b', 'First non-repeating character for abcd is b'\nassert     first_non_repeating_character('dkhjekjdkhj') == 'd', 'First non-repeating character for dkhjekjdkhj is d'\nassert     first_non_repeating_character('a') == 'a', 'First non-repeating character for a is a'\nassert     first_non_repeating_character('a') == 'a', 'First non-repeating character for a is a'\nassert     first_non_repeating_character('abcd') == 'a', 'First non-repeating character for abcd is a'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(f'Result of first_non_repeating_character: {first_non_repeating_character(\"aabcccccaaa\")}')\nprint(f'Expected result: c')\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_non_repeating_character(\"\") == -1, \"The empty string must return -1.\"\nassert     first_non_repeating_character(\"abcd\") == -1, \"The string must contain only lower case letters.\"\nassert     first_non_repeating_character(\"abca\") == -1, \"The string must contain only lower case letters.\"\nassert     first_non_repeating_character(\"abcdab\") == -1, \"The first character should be the first non-repeated one.\"\nassert     first_non_repeating_character(\"abcdabcd\") == -1, \"The first character should be the first non-repeated one.\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character(\"abac\") == \"b\"\nassert first_non_repeating_character(\"abacd\") == \"a\"\nassert first_non_repeating_character(\"abacdf\") == \"f\"\nassert first_non_repeating_character(\"abacdefghijklmnopqrstuvwxyz\") == \"z\"\nassert first_non_repeating_character(\"\") == \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character('abcdabcdefg') == 'c'\nassert     first_non_repeating_character('leetcode') == 'e'\nassert     first_non_repeating_character('s') == 'a'\nassert     first_non_repeating_character('aab') == 'a'\nassert     first_non_repeating_character('') == ''\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character('') == -1, \\\n        \"The expected output: -1\"\nassert     first_non_repeating_character('abc') == 0, \\\n        \"The expected output: 0\"\nassert     first_non_repeating_character('leetcode') == 0, \\\n        \"The expected output: 0\"\nassert     first_non_repeating_character('aab') == 1, \\\n        \"The expected output: 1\"\nassert     first_non_repeating_character('leetcode') == 2, \\\n        \"The expected output: 2\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character('abaccdeff') == 'e'\nassert     first_non_repeating_character('abaccdef') == 'd'\nassert     first_non_repeating_character('abaccdefg') == 'f'\nassert     first_non_repeating_character('abaccdefg123456') == 'f'\nassert     first_non_repeating_character('abaccdefgh') == 'g'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_char('abcdefg') == True, \"Should be True\"\nassert check_char('abcdefgh') == False, \"Should be False\"\nassert check_char('abcdefghi') == True, \"Should be True\"\nassert check_char('abcdefghijk') == False, \"Should be False\"\nassert check_char('abcdefghjk') == False, \"Should be False\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_char(\"e\") == True\nassert check_char(\"\") == True\nassert check_char(\"a\") == True\nassert check_char(\"k\") == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_char_2(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if (re.search(r'^[a-z]$|^([a-z]).*\\1$',string)) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_char('') == True\nassert     check_char('abc') == True\nassert     check_char('ab') == False\nassert     check_char('aab') == False\nassert     check_char('ababc') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_char('hi') == True, 'Incorrect'\nassert     check_char('hello') == False, 'Incorrect'\nassert     check_char('lakshay') == True, 'Incorrect'\nassert     check_char('thisisamelectronic') == True, 'Incorrect'\nassert     check_char('thi') == False, 'Incorrect'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_char('ab')==False\nassert check_char('aba')==False\nassert check_char('abca')==True\nassert check_char('abcab')==True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\ndef check_pair(string):\n    '''\n    Write a function to check whether the given string contains an occurrence of 2 same characters in a row or not.\n    '''\n    pass"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_char('')\nassert check_char('a')\nassert check_char('aaa')\nassert check_char('abba')\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_numbers(1, 2, 3) == 2\nassert median_numbers(2, 3, 1) == 2\nassert median_numbers(3, 1, 2) == 2\nassert median_numbers(2, 3, 2) == 2\nassert median_numbers(2, 2, 1) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert median_numbers(1, 2, 3) == 2\nassert median_numbers(1, 2, 5) == 2.5\nassert median_numbers(1, 2, -3) == 2\nassert median_numbers(1, -2, 3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers([1, 2, 3, 4, 5], 2, 2) == 3, \"Wrong Answer\"\nassert median_numbers([1, 2, 3, 4, 5], 2, 3) == 3.5, \"Wrong Answer\"\nassert median_numbers([1, 2, 3, 4, 5], 2, 4) == 2.5, \"Wrong Answer\"\nassert median_numbers([1, 2, 3, 4, 5], 2, 5) == 2.5, \"Wrong Answer\"\nassert median_numbers([1, 2, 3, 4, 5], 2, 6) == 2.5, \"Wrong Answer\"\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(2,1,3) == 2\nassert     median_numbers(3,2,1) == 2\nassert median_numbers(1,2,3) == 2\nassert median_numbers(2,1,3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmedian_numbers(1,2,3)\nmedian_numbers(1,2,1)\nmedian_numbers(2,3,1)\nmedian_numbers(1,1,1)\nmedian_numbers(1,1,2)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers([1, 2, 3], 1, 2) == 2\nassert     median_numbers(1, 2, 3) == 2.5\nassert     median_numbers(1, 2, 3) == 2\nassert     median_numbers(2, 1, 3) == 2.5\nassert     median_numbers(1, 1, 1) == 1\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_of_digits([1234,4567,89]) == 9\nassert     sum_of_digits([4567, 89]) == 10\nassert     sum_of_digits([4567, 89, 1]) == 10\n\n\ndef sum_of_digits_2(nums):\n    '''\n    Write a function that receives a list of numbers, and that returns the sum of the digits of each number.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_of_digits([1,2,3]) == 1+2+3 == 6\nassert     sum_of_digits([0]) == 0 == 0\nassert     sum_of_digits([-10, -100, -1000]) == -10-100+1000 == -30\nassert     sum_of_digits([]) == 0 == 0\nassert sum_of_digits([0, 1]) == 1 == 1\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef min_max_sum_of_digits(nums):\n    '''\n    Write a function to compute the minimum and maximum sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your Code Here\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([12, 234]) == 7\nassert     sum_of_digits([5, 3, 2, 1]) == 9\nassert     sum_of_digits([1]) == 1\n\ndef sum_of_digits_iterative(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of digits.\n    '''\n    s = 0\n    for num in nums:\n        s += int(str(num)[0])\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([12345,92345,123345]) == 1469\nassert     sum_of_digits([1,2,3,4,5]) == 15\nassert     sum_of_digits([0]) == 0\nassert     sum_of_digits([2,3,4]) == 11\nprint(\"You've successfully passed the assignment!\")\nprint(\"You've also passed the unit test! :)\")\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_of_digits([1,2,3,4,5]) == 15\nassert sum_of_digits([1,2,3,4,5]) == 15\nassert sum_of_digits([10,20,30,40]) == 50\nassert sum_of_digits([11,20,30,40]) == 60\nassert sum_of_digits([12,20,30,40]) == 70\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_of_digits([1,2,3]) == 6, \"sum of digits is wrong\"\nassert \nsum_of_digits([3,4,5]) == 7, \"sum of digits is wrong\"\nassert \nsum_of_digits([1,1,1]) == 1, \"sum of digits is wrong\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_of_digits([12, 8, 19, 99, 24, 7, 10, 18, -2]) == 4"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(bitwise_xor(('a', 'b'), ('c', 'd')))\n\nassert \nprint(bitwise_xor(('a', 'b'), ('c', 'b')))\n\nprint(bitwise_xor(('a', 'b'), ('a', 'a')))\n\nprint(bitwise_xor(('a', 'b'), ('a', 'c')))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor((1, 2), (1, 2)) == 0\nassert     bitwise_xor((1, 2), (3, 4)) == 1\nassert     bitwise_xor((2, 3), (3, 4)) == 1\nassert     bitwise_xor((2, 3), (4, 4)) == 0\n\n\ndef string_rotation(string, rot):\n    '''\n    Write a function to rotate the given string by the given value.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bitwise_xor((1, 2), (3, 4)) == (2, 0)\nassert     bitwise_xor((8, 8), (5, 0)) == (9, 8)\nassert     bitwise_xor((0, 1), (1, 1)) == (0, 0)\nassert     bitwise_xor((1, 1), (1, 1)) == (0, 0)\nassert     bitwise_xor((1, 1), (0, 1)) == (1, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (bitwise_xor((0, 0), (0, 0))) == (0, 0)\nassert (bitwise_xor((0, 0), (1, 0))) == (1, 0)\nassert (bitwise_xor((0, 0), (0, 1))) == (1, 1)\nassert (bitwise_xor((0, 0), (1, 1))) == (1, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bitwise_xor((1,2), (3,4)) == (1, 3), \"xor doesn't work with tuples\"\nassert bitwise_xor((1,2), (2,1)) == (3, 1), \"xor doesn't work with tuples\"\nassert bitwise_xor((1,3), (4,5)) == (1, 5), \"xor doesn't work with tuples\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bitwise_xor((2, 6, 10, 20), (2, 6, 10, 20)) == (0, 0, 0, 0)\nassert     bitwise_xor((1, 2, 2, 3), (4, 2, 2, 3)) == (1, 0, 0, 0)\nassert     bitwise_xor((1, 2, 2, 3), (4, 5, 6, 7)) == (1, 0, 0, 1)\nassert     bitwise_xor((1, 2, 2, 3), (4, 2, 2, 3)) == (1, 0, 0, 0)\nprint(\"\\nBitwise Xor Function Test: passed\")\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nTask\n\nYou are given a space separated list of numbers. \nYour task is to print a reversed sorted space separated list.\n\nInput Format\n\nA single line of input containing space separated numbers.\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    bitwise_xor((10, 20, 30), (100, 20, 30)) == (50, 0, 50)\n    bitwise_xor((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\n    bitwise_xor((0, 0, 0), (0, 0, 0)) == (0, 0, 0)\n    bitwise_xor((10, 20, 30), (100, 20, 30)) == (50, 0, 50)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         extract_freq([]) == 0, \"No tuples\"\nassert extract_freq([('a','a'), ('a','b'), ('b','c'), ('b','a'), ('c','a'), ('c','b')]) == 5, \"Expected 5\"\nassert extract_freq([('a','b'), ('a','b'), ('a','c'), ('a','a'), ('c','a'), ('c','b'), ('c','c')]) == 4, \"Expected 4\"\n\n\ndef get_all_unique_elements_using_sets(list_):\n    '''\n    Write a function to get all unique elements in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([0]) == 0\nassert     extract_freq([(0, 0)]) == 1\nassert     extract_freq([(0, 0), (0, 0), (0, 0)]) == 3\nassert     extract_freq([(0, 0), (0, 0), (0, 0), (0, 0)]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_freq(freq_dict):\n    '''\n    Write a function to check the correctness of the frequency dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([[1,1,2,2], [1,2,3,4], [2,3,4,5]]) == 3\nassert     extract_freq([[1,1,1,1], [1,2,2,2], [1,1,3,4], [1,2,3,4]]) == 5\nassert     extract_freq([[1,1,1,1], [1,2,2,2], [1,1,2,2], [1,1,2,2]]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq([[1,2],[2,3],[3,4]]) == 1\nassert     extract_freq([[1,2,3],[2,3,4],[1,3,4],[1,2,3,4]]) == 4\nassert     extract_freq([[1,2,3,4],[2,3,4,5],[1,3,4,5,6],[1,2,3,4,5,6,7,8]]) == 8\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([[1, 2], [1, 2], [1, 2]]) == 3, 'The frequency of the tuples are not the same'\nassert     extract_freq([[1, 2], [1, 2], [1, 2], [1, 2]]) == 4, 'The frequency of the tuples are not the same'\nassert     extract_freq([[1, 2], [1, 2], [1, 2], [1, 2]]) == 4, 'The frequency of the tuples are not the same'\nassert     extract_freq([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]) == 5, 'The frequency of the tuples are not the same'\nassert     extract_freq([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]) == 5, 'The frequency of the tuples are not the same'\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq([[1, 2, 3, 3, 4], [4, 4, 2, 5, 5, 2, 2, 6]]) == 3, 'There are 3 unique tuples.'\nassert     extract_freq([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]) == 6, 'There are 6 unique tuples.'\nassert     extract_freq([[1, 2], [2, 3], [4, 5]]) == 2, 'There are 2 unique tuples.'\nassert     extract_freq([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]) == 6, 'There are 6 unique tuples.'\nassert     extract_freq([[1, 2, 3], [3, 4, 5], [4, 5, 6], [5, 6, 7], [7, 8, 9], [9, 10, 11], [11, 12, 13]]) == 13, 'There are 13 unique tuples.'\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    extract_freq([1,1,1,2,2,3]) == 3\n    extract_freq([1,1,1,2,2,2]) == 2\n    extract_freq([1,1,1,1,1,1]) == 1\n    extract_freq([1,2,1,1,1,1,1,2,2,1,1,1,1,1,1,1]) == 8\n    extract_freq([1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2]) == 5\nassert extract_freq([1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2]) == 9\nassert extract_freq([1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2]) == 10\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_list = [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]\n    print(extract_freq(test_list))"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq(test_list) == 5\nprint(\"You are correct!\")\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_nested_tuples((1, 2, 3, 4), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7, 0)\n\ndef reverse_string(s):\n    '''\n    Write a function to reverse the string.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) ==    (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2,3),(4,5,6)) ==     (1,2,3,4,5,6)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_nested_tuples((1,2), (3,4)) == (1,2), \"Wrong Answer\"\nassert     add_nested_tuples((5,6), (7,8)) == (5,6,7,8), \"Wrong Answer\"\nassert     add_nested_tuples((1,2,3), (4,5,6)) == (1,2,3,4,5,6), \"Wrong Answer\"\n\n\n'''\nQuestion: \n1) Write a function which accepts the name of a file and returns the number of lines in the file\n'''\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_nested_tuples(((1,2,3),(4,5,6)),((1,2,3),(4,5,6))) == (((1,2,3),(4,5,6)),((1,2,3),(4,5,6)))\nassert     add_nested_tuples(((1,2,3),(4,5,6)),((1,2,3),(4,5,6))) == (((1,2,3),(4,5,6)),((1,2,3),(4,5,6)))"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples((1,2), (4,5)) == (1,2,4,5), 'Test Case 1 Failed!'\nassert     add_nested_tuples((1,2), (4,)) == (1,2,4), 'Test Case 2 Failed!'\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_nested_tuples((1,2), (3,4,5)) == (1, 2, 3, 4, 5, 6)\nassert     add_nested_tuples((1,2), (3,4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef addition(a,b):  \n    '''\n    Write a python function to add two numbers.\n    '''\n    pass\n\nassert \n\ndef multiplication(a,b):   \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    minimum(4,5) == 1\n    minimum(5,5) == 1\n    minimum(1,1) == 0\n    minimum(4,4) == 0\n    minimum(0,1) == 0\n    minimum(-3,4) == -3\n    minimum(-4,-5) == -5\n    minimum(-3,-4) == -5\n    minimum(-3,-2) == -2\n    minimum(3,2) == 1\n    minimum(1,-2) == -1\n    minimum(-2,-3) == -4"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minimum(2, 3) == 2, \"testing failed\"\nassert     minimum(2, 1) == 1, \"testing failed\"\nassert     minimum(1, 1) == 1, \"testing failed\"\nassert     minimum(1, 2) == 1, \"testing failed\"\nassert     minimum(2, 3) == 2, \"testing failed\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minimum(4, 5) == min(4,5)\nassert     minimum(7, 4) == 4\nassert     minimum(4, -5) == -5\nassert     minimum(-7, -4) == -4\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     minimum(3,3) == 3, \"Should be 3\"\nassert     minimum(7,3) == 3, \"Should be 3\"\nassert     minimum(3,3) == 3, \"Should be 3\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minimum(3,2) == 1,'should return 1'\nassert     minimum(5,4) == 1,'should return 1'\nassert     minimum(5,2) == 2,'should return 2'\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minimum(4,5) == 4\nassert     minimum(-6,8) == -6\nassert     minimum(7,-5) == -5\nassert     minimum(-4,-5) == -5\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(minimum(10,20))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minimum(4,2) == 2, \"Error in minimum()\"\nassert     minimum(7,5) == 5, \"Error in minimum()\"\nassert     minimum(1,2) == 1, \"Error in minimum()\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minimum(2,1)==1, \"Wrong output\"\nassert     minimum(100,1)==1, \"Wrong output\"\nassert     minimum(2,100)==100, \"Wrong output\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True, \"3, 2, 1\"\nassert     check_tuplex((1,2,3),(2,3,1)) == True, \"2, 3, 1\"\nassert     check_tuplex((1,2,3),(1,3,1)) == False, \"1, 3, 1\"\n\nprint(\"Assertions passed\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex(('z',),('z',)) == True\nassert     check_tuplex((3,),(3,)) == True\nassert     check_tuplex((1,),(3,)) == False\nassert     check_tuplex((),()) == False\nassert     check_tuplex((),(1,)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncheck_tuplex((1,2),(1,2,3)) == True\ncheck_tuplex((1,2),(1,2,3,4)) == False\n\nprint(\"Function Completed\")"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_tuplex((1,2,3),(2,3)) == True\nassert check_tuplex((1,2,3),(1,2)) == True\nassert check_tuplex((1,2,3),(3,1)) == True\nassert check_tuplex((1,2,3),(3,)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_tuplex((10,20,30),(10,20,30))     == True\nassert     check_tuplex((10,20,30),(10,20,40))     == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntuplex = (1, 2, 3)\ntuple1 = (3, 4)\n\nassert check_tuplex(tuplex,tuple1) == False, 'Pass'\nassert check_tuplex(tuple1,tuplex) == True, 'Pass'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex((True,'s', 'i','m', 'p'), ('s', 'i','m', 'p')) == False\nassert     check_tuplex((True,'s', 'i','m', 'p'), ('s', 'i','m', 'p', 'a')) == True\nassert     check_tuplex((True,'s', 'i','m', 'p'), ('s', 'i','m', 'p', 'a', 'a')) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Parity(4) ==    False, 'Test #1 Failed'\nassert     find_Parity(5) ==    True, 'Test #2 Failed'\nassert     find_Parity(6) ==    True, 'Test #3 Failed'\nassert     find_Parity(11) ==    False, 'Test #4 Failed'\nassert     find_Parity(10) ==    True, 'Test #5 Failed'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Parity(0) == 0, \"find_Parity(0) is wrong\"\nassert     find_Parity(1) == 1, \"find_Parity(1) is wrong\"\nassert     find_Parity(2) == 0, \"find_Parity(2) is wrong\"\nassert     find_Parity(3) == 1, \"find_Parity(3) is wrong\"\nassert     find_Parity(4) == 0, \"find_Parity(4) is wrong\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_Parity(9) == True\nfind_Parity(0) == False\nfind_Parity(-1) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Parity(4) == False\nassert     find_Parity(7) == True\nassert     find_Parity(-2) == True\n\n\ndef find_Parity_2(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(7) == 0\nassert     find_Parity(11) == 1\nassert     find_Parity(13) == 1\nassert     find_Parity(11) == 0\n\nprint('All test cases passed.')\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(7) == 0, '7 is an odd number'\nassert     find_Parity(9) == 1, '9 is an odd number'\nassert     find_Parity(1) == 0, '1 is an odd number'\nassert     find_Parity(13) == 1, '13 is an odd number'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Parity(2) == 'Even'\nassert     find_Parity(4) == 'Odd'\nassert     find_Parity(3) == 'Odd'\n\nprint('Test passed')\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(2) == True, \"find_Parity returns True for all even numbers\"\nassert     find_Parity(4) == True, \"find_Parity returns True for all even numbers\"\nassert     find_Parity(3) == False, \"find_Parity returns False for all even numbers\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_Parity2(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    pass\n\nassert \n\ndef find_Parity3(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(0) == 0, \"0 should be 0\"\nassert     rearrange_bigger(2) == 3, \"2 should be 3\"\nassert     rearrange_bigger(10) == 23, \"10 should be 23\"\nassert     rearrange_bigger(100) == 321, \"100 should be 321\"\nassert     rearrange_bigger(1000) == 3123, \"1000 should be 3123\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rearrange_bigger(1534236469) == 54321\nassert     rearrange_bigger(54321) == 354321\nassert     rearrange_bigger
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(100) == 301\nassert     rearrange_bigger(143) == 431\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(10) == 11\nassert     rearrange_bigger(1000) == 1001\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(90) == 930\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(21) == 32\nassert     rearrange_bigger(10) == 11\nassert     rearrange_bigger(9) == 99\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nrearrange_bigger(1234) == 12434\nassert rearrange_bigger(13579) == 57913\nassert rearrange_bigger(644321) == 614432\nassert rearrange_bigger(3456789) == 9876543\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(15532) == \"54321\", rearrange_bigger(15532)\nassert     rearrange_bigger(1555) == \"555\", rearrange_bigger(1555)\nassert     rearrange_bigger(1234) == \"4321\", rearrange_bigger(1234)\nassert     rearrange_bigger(2134) == \"4321\", rearrange_bigger(2134)\nassert     rearrange_bigger(1234) == \"4321\", rearrange_bigger(1234)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef rearrange_bigger_2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    rearrange_bigger(0) == 0, 'failed to rearrange the smaller one'\n    rearrange_bigger(10) == 11, 'failed to rearrange the bigger one'\n    rearrange_bigger(54321) == 54322, 'failed to rearrange the bigger one'\n    rearrange_bigger(555555) == 566666, 'failed to rearrange the bigger one'\n    rearrange_bigger(0) == 0, 'failed to rearrange the smaller one'\n    rearrange_bigger(1) == 2, 'failed to rearrange the bigger one'\n    rearrange_bigger(4) == 5, 'failed to rearrange the bigger one'\n    rearrange_bigger(1234) == 4321, 'failed to rearrange the bigger one'\n    rearrange_bigger(1122) == 1222, 'failed to rearrange the bigger one'\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nclass Solution(object):\n    def k_smallest(self, nums1, nums2, k):\n        '''\n        Write a function that finds k smallest elements from two sorted arrays.\n        '''\n        pass\n\nclass Solution(object):\n    def k_smallest_pairs(self, nums1, nums2, k):\n        '''\n        Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n        '''\n        # sort and get kth element\n        nums1.sort()\n        nums2.sort()\n        i = j = k-1\n\n        while i >= 0 and j >= 0:\n            if nums1[i] < nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        while i >= 0:\n            nums1[k] = nums1[i]\n            k -= 1\n            i -= 1\n\n        while j >= 0:\n            nums1[k] = nums2[j]\n            k -= 1\n            j -= 1\n        return nums1\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     k_smallest_pairs([1,2,4,5,6], \n                           [2,5,6,8,10], \n                           3) == [[2,5],[3,6],[2,4]]\nassert     k_smallest_pairs([1,1,2,3,3], \n                           [1,2,4,5,6,7,8,9,10], \n                           5) == [[1,1],[1,2],[1,3],[2,3],[3,3]]\nassert k_smallest_pairs([1,2,3,4], \n                           [5,6,7,8,9,10], \n                           5) == [[1,5],[2,6],[3,7],[4,8],[5,9]]\nassert k_smallest_pairs([2,4,6,8], \n                           [10,9,11,12], \n                           5) == [[2,10],[4,9],[6,11],[8,12]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([4,5],\n                           [6,7],\n                           1) == [(4,6)]\nassert     k_smallest_pairs([4,5,6,7],\n                           [1,2,3,4,5,6],\n                           4) == [(4,1), (4,2), (4,3), (4,5)]\nassert     k_smallest_pairs([4,5],\n                           [6,7],\n                           3) == [(4,6), (5,7)]\nassert     k_smallest_pairs([4,5],\n                           [6,7],\n                           2) == [(4,6), (5,7)]\nassert     k_smallest_pairs([4,5],\n                           [6,7],\n                           1) == [(4,6)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([5,7,9], [2,4,6], 3) == [[2, 4], [7, 9], [5, 6]]\nassert k_smallest_pairs([2,4,6,8,10], [5,7,9], 3) == [[2, 4], [7, 9], [8, 10]]\nassert k_smallest_pairs([4,5,6,7], [1,2,3], 3) == [[1, 2], [3, 7], [4, 6]]\nassert k_smallest_pairs([1,4,6,8,9], [2,5,7,8,10], 3) == [[1, 2], [4, 6], [7, 8]]\n\n\nclass Solution(object):\n    '''\n    A heap solution using the min heap.\n    The idea is that we use a max heap to keep track of the smallest k numbers in the given array. \n    '''\n    def k_smallest_pairs(self, nums1, nums2, k):\n        # heap is a min heap so we initialize max heap\n        heap = []\n        \n        # compare the 2 arrays\n        for num1 in nums1:\n            for num2 in nums2:\n                # we are comparing the first element in each array to the 1st element in the heap\n                # if the first element in the heap is greater than the current comparison, then we don't need to add the current element to the heap\n                # so, we compare the current element to the first element in the heap and only add the first element if the first element is greater than the current element\n                if len(heap) < k and heap[0] < (num1, num2):\n                    heapq.heappush(heap, (num1, num2))\n        # return the top k elements\n        return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"passed all tests!\")\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([3,4,5],[1,2,3,4],2) == [(1,3),(2,4)]\nassert     k_smallest_pairs([1,1,1,1],[1,2,3,4],3) == [(1,1),(1,1),(1,1)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,1,2,2], [3,3,3,3,4], 2) == [(1,3), (2,3)]\nassert     k_smallest_pairs([1,1,2,2], [3,3,3,3,4], 1) == [(1,3)]\nassert     k_smallest_pairs([1,1,2,2], [3,3,3,3,4], 0) == []\nassert k_smallest_pairs([1,1,2,2], [3,3,3,3,4], 3) == [(1,3), (2,3)]\nassert k_smallest_pairs([1,1,2,2], [3,3,3,3,4], 1) == [(1,3)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6],3) == [[1,2],[1,4],[1,6]]\nassert     k_smallest_pairs([1,5,9],[3,5,7,9],4) == [[1,3],[5,5]]\nassert     k_smallest_pairs([1,4,5,5,6],[10,1,2,5,9],5) == [[1,1],[1,2],[2,5],[5,5]]\nassert     k_smallest_pairs([1,2,3,4,5],[6,7,8,9,10],5) == [[1,6],[2,7],[3,8],[4,9],[5,10]]\nassert     k_smallest_pairs([1,2,3,4,5],[6,7,8,9,10],0) == []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     k_smallest_pairs([1,2,3,4], [5,6,7,8], 3) == [[1,5],[2,6],[3,7]]\nassert k_smallest_pairs([1,2,3,4], [5,6,7,8], 4) == [[1,5],[2,6],[3,7]]\nassert k_smallest_pairs([1,2,3,4], [5,6,7,8], 5) == [[1,5],[2,6],[3,7]]\nassert k_smallest_pairs([1,2,3,4], [5,6,7,8], 6) == [[1,5],[2,6],[3,7]]\nassert k_smallest_pairs([1,2,3,4], [5,6,7,8], 7) == [[1,5],[2,6],[3,7]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_product_tuple([(2, 4), (4, 3), (4, 6), (1, 9), (3, 2)]) == (-2, 4)\nassert     min_product_tuple([(1, 4), (1, 2), (2, 4)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (2, 4)]) == (1, 2)\nassert     min_product_tuple([(3, 2), (2, 4)]) == (2, 4)\nassert     min_product_tuple([(1, 4), (1, 5), (2, 4)]) == (1, 4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlist1 = [(2,3), (4,5), (6,7), (9,10), (4,8)]\nprint(min_product_tuple(list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_product_tuple([])    ==     None\nassert     min_product_tuple([(1,2), (3,4)])    ==     None\nassert     min_product_tuple([(1,4), (2,3)])    ==     (1,4)\nassert     min_product_tuple([(1,4), (2,3), (4,5)])    ==     (1,4)\nassert     min_product_tuple([(2,4), (3,5), (1,2)])    ==     (2,4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(2,2),(3,2),(5,6)]) ==     5\nassert     min_product_tuple([(2,2),(3,6),(5,6)]) ==     4\nassert     min_product_tuple([(2,2),(3,2),(5,2)]) ==     1\nassert     min_product_tuple([(2,2),(3,2),(5,2)]) ==     1\nassert     min_product_tuple([(2,2),(3,2),(5,2)]) ==     1\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([(2, 2), (1, 2), (1, 3), (1, 3), (4, 1), (2, 2)]) == (1, 1)\nassert     min_product_tuple([(2, 2), (2, 1), (1, 2), (1, 3), (1, 3), (4, 1), (2, 2)]) == (1, 2)\nassert     min_product_tuple([(2, 2), (2, 1), (1, 2), (1, 3), (1, 3), (4, 1), (2, 2)]) == (2, 2)\nassert     min_product_tuple([(2, 2), (2, 1), (1, 2), (1, 3), (1, 3), (4, 1), (2, 2)]) == (2, 1)\nassert     min_product_tuple([(2, 2), (2, 1), (1, 2), (1, 3), (1, 3), (4, 1), (2, 2)]) == (2, 1)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_product_tuple([(1,2), (4,6)]) == (1, 2)\nassert     min_product_tuple([(4,6), (1,2)]) == (1, 2)\nassert     min_product_tuple([(1,3), (6,7), (4,6)]) == (6, 7)\nassert     min_product_tuple([(4,6), (1,3), (7,5)]) == (1, 3)\nassert     min_product_tuple([(7,5), (1,3), (4,6)]) == (1, 3)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_product_tuple([(3, -1), (1, -2), (5, -3)]) == (-3, -1)\nassert     min_product_tuple([(4, -1), (2, -2), (1, -3), (5, -4), (6, -5)]) == (-5, -4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert min_product_tuple([(0, 1), (5, 3), (-1, -5)]) == -1\nassert min_product_tuple([(0, 1), (5, 3), (-1, -5)]) == -3\nassert min_product_tuple([(0, 1), (5, 3), (-1, -5)]) == -3\nassert min_product_tuple([(0, 1), (5, 3), (-1, -5)]) == -1\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_val([1,2,3,4,5]) == 1\nassert     min_val([-10,-2,-1,-9,-4]) == -10\nassert     min_val([-1,4,3,0,10]) == -1\nassert     min_val([-5,0,0,0,0]) == -5\nassert     min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([1,2,3,4,5]) == 1\nassert     min_val([1, 2, 3, -4, 5]) == -4\nassert     min_val([100, -2, 3, -4, -5]) == -5\nassert     min_val([100, -2, 3, -4, -5]) == -5\nassert     min_val([100, -2, 3, -4, -5]) == -5\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_val([1,2,3,4])     == 1\nassert     min_val([1,2,3,4,5])    == 1\nassert     min_val([5,6,7,8,9])     == 5\nassert     min_val([-1,-2,-3,-4])     == -1\nassert     min_val([-1,3,-2,8,0])     == -1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    '''\n    Test your code by calling the min_val function below in the console.\n    '''\n    # Test 1\n    in_list1 = [2, 4, 2, 5, 10, 3]\n    expected1 = 2\n    print(f\"\\nTest 1: min_val({in_list1})\")\n    print(f\"Expected: {expected1}\")\n    print(f\"Actual:   {min_val(in_list1)}\")\n    # Test 2\n    in_list2 = [2, 4, 2, 5, 10, 3]\n    expected2 = 2\n    print(f\"\\nTest 2: min_val({in_list2})\")\n    print(f\"Expected: {expected2}\")\n    print(f\"Actual:   {min_val(in_list2)}\")\n    # Test 3\n    in_list3 = [2, 4, 2, 5, 10, 3]\n    expected3 = 2\n    print(f\"\\nTest 3: min_val({in_list3})\")\n    print(f\"Expected: {expected3}\")\n    print(f\"Actual:   {min_val(in_list3)}\")\n    # Test 4\n    in_list4 = [2, 4, 2, 5, 10, 3]\n    expected4 = 4\n    print(f\"\\nTest 4: min_val({in_list4})\")\n    print(f\"Expected: {expected4}\")\n    print(f\"Actual:   {min_val(in_list4)}\")\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([3, 4, 5, 6, 7, -1]) == -1, 'passed wrong'\nassert     min_val([2, 4, 5, 6, 7, 1]) == 1, 'passed wrong'\nassert     min_val([2, 4, 5, 6, 7, -1]) == -1, 'passed wrong'\nassert     min_val([4, -2, 5, 6, 7, -1]) == -2, 'passed wrong'\nassert     min_val([-4, -2, 5, 6, 7, -1]) == -1, 'passed wrong'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert min_val([5, 0, 5, 0, 3, 1, 0, 3, -1]) == 0\nassert min_val([1, 0, 0, 1]) == 1\nassert min_val([5, 0, 5, 0, 3, 1, 0, 3, -1]) == -1\nassert min_val([]) == float('inf')\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") == \"snakeToCamel\"\nassert     snake_to_camel(\"snake_to_camel\") == \"snakeToCamel\"\nassert     snake_to_camel(\"snake_to_camel\") == \"snakeToCamel\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snakecase') =='snakeCase'\nassert     snake_to_camel('snakecase_') =='snakecase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"camel_case\") == \"CamelCase\", \\\n\"Test case fail\"\nassert     snake_to_camel(\"camel_case_snake\") == \"CamelCaseSnake\", \\\n\"Test case fail\"\nassert     snake_to_camel(\"camel_case_snake_snake\") == \"CamelCaseSnakeSnake\", \\\n\"Test case fail\"\nassert     snake_to_camel(\"camel_case_snake_snake_snake\") == \"CamelCaseSnakeSnakeSnake\", \\\n\"Test case fail\"\nassert     snake_to_camel(\"camel_case_snake_snake_snake_snake\") == \"CamelCaseSnakeSnakeSnakeSnake\", \\\n\"Test case fail\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    snake_to_camel('snake_case') =='snakeCase','snake to camel does not match the expected result'\nassert snake_to_camel('snake-case') =='snake_case','snake to camel does not match the expected result'\nassert snake_to_camel('snake_case') =='snake_case','snake to camel does not match the expected result'\nassert snake_to_camel('snake-case') =='snake_case','snake to camel does not match the expected result'\nassert snake_to_camel('snake_case') =='snake_case','snake to camel does not match the expected result'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('camelCaseString') == 'camelCaseString', 'FAIL: snake_to_camel'\nassert     snake_to_camel('camelCaseString123') == 'camelCaseString123', 'FAIL: snake_to_camel'\nassert     snake_to_camel('camelCaseString_') == 'camelCaseString', 'FAIL: snake_to_camel'\nassert     snake_to_camel('camelCaseString') == 'camelCaseString', 'FAIL: snake_to_camel'\nassert     snake_to_camel('camelCaseString1') == 'camelCaseString1', 'FAIL: snake_to_camel'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case2') =='snakeCase2'\nassert     snake_to_camel('snake_case3') =='snakeCase3'\nassert     snake_to_camel('snake_case4') =='snakeCase4'\nassert     snake_to_camel('snake_case_5') =='snakeCase5'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake-case') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_123') =='snakeCase123'\nassert     snake_to_camel('snake_case_123_') =='snakeCase123'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case'\nassert     snake_to_camel('snake_case_b') =='snake_case_b'\nassert     snake_to_camel('snake_case_c') =='snake_case_c'\nassert     snake_to_camel('snake_case_d') =='snake_case_d'\nassert     snake_to_camel('snake_case_b_c') =='snake_case_b_c'\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nremove_odd([0,1,2,3,4,5,6]) == [0,3,6]\nprint('Correct')\n\n'''\nTask 4\nWrite a python function to find the two numbers such that their product is n and the sum of the two numbers is n.\n'''"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l = [1,2,3,4,5,6]\n    print(remove_odd(l))\n    print(l"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7]) == [1,2,5,6,7], 'incorrect result'\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10], 'incorrect result'\nassert     remove_odd([]) == [], 'incorrect result'\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11], 'incorrect result'"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd([2, 5, 9]) == [2, 5], 'Should return a list without odd numbers.'\nassert remove_odd([2, 5, 9, 1, 2, 8, 9]) == [2, 1, 2, 8], 'Should return a list without odd numbers.'\nassert remove_odd([2, 5, 9, 1, 2, 8, 9, 1, 2, 8, 9]) == [2, 1, 2, 8], 'Should return a list without odd numbers.'\nassert remove_odd([2, 5, 9, 1, 2, 8, 9]) == [2, 1, 2, 8], 'Should return a list without odd numbers.'\nassert remove_odd([2, 5, 9, 1]) == [2, 5], 'Should return a list without odd numbers.'\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert \nremove_odd([0,2,4,6,8,10,12,14,16,18]) == [0,2,4,6,8,10,12,14]\nassert \nremove_odd([1,3,5,7,9]) == []\nassert\n\n'''"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10]\nassert remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9,10,11]\nassert remove_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,10,11,12]\nassert remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,3,5,7,9,10,11,12,13]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd([10, 20, 30, 40, 50, 60, 70]) ==  [10, 20, 50, 70], \"the list should be changed to [10, 20, 50, 70]\"\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==  [1, 2, 3, 4, 5, 6, 7, 8, 9], \"the list should be changed to [1, 2, 3, 4, 5, 6, 7, 8, 9]\"\nassert     remove_odd([2, 4, 6, 8, 10]) ==  [2, 4, 6, 8], \"the list should be changed to [2, 4, 6, 8]\"\nassert     remove_odd([]) ==  [], \"the list should be changed to []\"\nassert     remove_odd([0]) ==  [0], \"the list should be changed to [0]\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == \n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == \n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20,\n     22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]) == \n    [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd([1,2,3,4,5,6]) == [1,3,5,6]\nassert     remove_odd([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     remove_odd([]) == []\nassert     remove_odd(['a','b',1,'c']) == ['a','b',1]\n\ndef count_odd(l):\n    '''\n    Write a python function to count odd numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (3, 4)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (5, 6)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == (5, 6)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([('mango', 4), ('apple', 10), ('banana', 2)], 1) == ('apple', 10), 'Test 1 Failed'\nassert     extract_nth_element([('mango', 4), ('apple', 10), ('banana', 2)], 2) == ('banana', 2), 'Test 2 Failed'\nassert     extract_nth_element([('mango', 4), ('apple', 10), ('banana', 2)], 3) == ('mango', 4), 'Test 3 Failed'\nassert     extract_nth_element([('mango', 4), ('apple', 10), ('banana', 2)], 4) == ('banana', 2), 'Test 4 Failed'\nassert     extract_nth_element([('mango', 4), ('apple', 10), ('banana', 2)], 5) == ('apple', 10), 'Test 5 Failed'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([1,2,3,4,5,6,7,8], 2) == 5, \"Failed\"\nassert     extract_nth_element([1,2,3,4,5,6,7,8], 4) == 6, \"Failed\"\nassert     extract_nth_element([1,2,3,4,5,6,7,8], -2) == 8, \"Failed\"\nassert     extract_nth_element([1,2,3,4,5,6,7,8], 0) == 1, \"Failed\"\nassert     extract_nth_element([1,2,3,4,5,6,7,8], 9) == 7, \"Failed\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_extract_nth_element():\n    assert extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 1) == (1, 2)\n    assert extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == (3, 4)\n    assert extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == (5, 6)\n    "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_nth_element([('d1','d2','d3'), ('d4', 'd5', 'd6')], 3) == ('d6',)\nassert     extract_nth_element([('d1','d2','d3'), ('d4', 'd5', 'd6')], 2) == ('d3', 'd6')\nassert     extract_nth_element([('d1','d2','d3'), ('d4', 'd5', 'd6')], 1) == ('d2',)\nassert     extract_nth_element([('d1','d2','d3'), ('d4', 'd5', 'd6')], 0) == ('d1',)\nassert     extract_nth_element([('d1','d2','d3'), ('d4', 'd5', 'd6')], -1) == ('d3',)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 2) == ('c', 3), \"Fail\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 1) == ('b', 2), \"Fail\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 4) == ('d', 4), \"Fail\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 5) == ('e', 5), \"Fail\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 6) == ('e', 5), \"Fail\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_nth_element([(10, 20, 30), (11, 21, 31), (12, 22, 32)], 2) == (11, 21, 31)\nassert     extract_nth_element([(10, 20, 30), (11, 21, 31), (12, 22, 32)], 0) == (10, 20, 30)\nassert     extract_nth_element([(10, 20, 30), (11, 21, 31), (12, 22, 32)], 4) == (12, 22, 32)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     overlapping([1,2,3],[3,4,5]) == True, \"Overlapping\"\nassert     overlapping([1,2,3],[2,4,5]) == False, \"Non-Overlapping\"\nassert     overlapping([1,2,3],[1,2,3]) == True, \"Overlapping\"\nassert     overlapping([],[1,2,3]) == False, \"Empty List\"\nassert     overlapping([1,2,3,4,5],[1,2,3,4,5]) == False, \"Repeated Values\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nlist1 = (1, 2, 3, 4)\nlist2 = (1, 2, 3, 4, 5)\nlist3 = (1, 2, 3, 4, 5, 6)\nassert \nassert overlapping(list1, list2)\nassert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     overlapping([1,2,3,4,5], [1,2,3,4,6]) == True, \"All value should be present\"\nassert     overlapping([1,2,3,4,5], [2,3,4]) == False, \"No overlap\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     overlapping([1,2,3,4,5],[3,4,5,6,7,8,9]), \"should be True\"\nassert     overlapping([1,2,3,4,5],[1,2,3,4,5]), \"should be True\"\nassert     overlapping([1,2,3,4,5],[1,2,4,5]), \"should be False\"\nassert     overlapping([1,2,3,4,5],[1,2,4]), \"should be False\"\nassert     overlapping([1,2,3,4,5],[1,2,4,5]), \"should be True\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     overlapping([1,2,3,4,5,6,7], [2,3,4,5,6]) == True, 'Overlapping elements'\nassert     overlapping([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == False, 'No Overlapping elements'\nassert     overlapping([], [2,3,4,5,6]) == False, 'Empty lists'\nassert     overlapping([1,2,3,4,5,6,7], []) == False, 'Empty list'\nassert     overlapping([1,2,3,4,5,6,7], [3,4,5]) == True, 'Two overlapping elements'\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     overlapping([1,2,3],[2,3,4]) == False\nassert     overlapping([2,3,4],[1,2,3]) == True\nassert     overlapping([1,2,3],[1,2,3]) == True\nassert     overlapping([1,2,3],[]) == False\nassert     overlapping([],[]) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     overlapping([1,2,3,4],[1,2,3])    ==    True,    \"1st\"\nassert     overlapping([1,2,3,4],[2,3,4])    ==    False,    \"2nd\"\nassert     overlapping([1,2,3,4],[2,4])    ==    False,    \"3rd\"\nassert     overlapping([1,2,3,4],[3,4])    ==    False,    \"4th\"\nassert     overlapping([1,2,3,4],[4])    ==    True,    \"5th\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Product([1,2,3,4,5,6]) == 6, \"Test case failed\"\nassert     max_Product([-1,-2,-3,-4,-5,-6]) == -12, \"Test case failed\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Product([1, 2, 3, 4, 5]) == 3, \"Wrong Answer\"\nassert     max_Product([1, 3, 2, 4, 5]) == 6, \"Wrong Answer\"\nassert     max_Product([1, 2, 3, 4, 5]) == 6, \"Wrong Answer\"\nassert     max_Product([1, -2, 3, -4, 5]) == 6, \"Wrong Answer\"\nassert     max_Product([-1, -2, -3, -4, -5]) == -6, \"Wrong Answer\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Product([1, 5, 4, 3]) == (4, 3), 'Should be (4, 3)'\nassert     max_Product([2, 3, 2, 3]) == (6, 2), 'Should be (6, 2)'\nassert     max_Product([3, 2, 1, 5]) == (15, 5), 'Should be (15, 5)'\nassert     max_Product([0, 0]) == (0, 0), 'Should be (0, 0)'\nassert     max_Product([0]) == (0, 0), 'Should be (0, 0)'\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([-1, -2, 4, -3, -4]) == -4, \"Test Failed\"\nassert     max_Product([-2, -1, -3, -4]) == -2, \"Test Failed\"\nassert     max_Product([-4, -2, -3, -1]) == -2, \"Test Failed\"\nassert     max_Product([-4, -2, -3, -1, -5]) == -1, \"Test Failed\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"TESTS: PASSED\\n\""
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Product([2, 3, 5, 6]) == (6, 3)\nassert     max_Product([0, 0]) == (0, 0)\nassert     max_Product([10, 2, 3, 4, 7]) == (42, 10)\nassert     max_Product([]) == (None, None)\nassert     max_Product([-1, -2]) == (None, None)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Product([2, 3, -2, 4]) == 6, \"Wrong output\"\nassert     max_Product([1, 2, 3, 4]) == 6, \"Wrong output\"\nassert     max_Product([-2, 3, 4]) == 6, \"Wrong output\"\nassert     max_Product([-2, -4, 0, -1]) == -4, \"Wrong output\"\nassert     max_Product([0, 0, 0]) == 0, \"Wrong output\"\nprint(\"Correct output\")\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([(5, 'a'), (6, 'b'), (7, 'c'), (8, 'd')]) ==    ((5, 'a'), (6, 'b'), (7, 'c')), \"Wrong output\"\nassert group_tuples([(5, 'a'), (6, 'b'), (7, 'c')]) ==    None, \"Wrong output\"\nassert group_tuples([(5, 'a'), (6, 'b')]) ==    None, \"Wrong output\""
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     group_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == (1, 3)\nassert     group_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == (2, 3)\nassert     group_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == (1, 4)\nassert     group_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == (1, 3)\nassert     group_tuples([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == (1, 3)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([(1,3,4),(2,5),(7,8,10),(1,3)]) == [(1,3)]\nassert     group_tuples([(1,3,4),(2,5),(7,8,10),(1,3),(1,1)]) == [(1,1)]\nassert     group_tuples([(1,3,4),(2,5),(7,8,10),(1,3),(1,1)]) == [(1,1)]\nassert     group_tuples([(1,3,4),(2,5),(7,8,10),(1,3),(1,1)]) == []\nassert     group_tuples([(1,3,4),(2,5),(7,8,10),(1,3),(1,1)]) == []\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([(1,2),(3,4),(1,2),(2,4),(2,3),(2,3)]) == 1\nassert     group_tuples([(1,2),(2,3),(2,4),(2,3),(2,3)]) == 1\nassert     group_tuples([(1,2),(3,4),(1,2),(2,4),(2,3),(2,3)]) == None\nassert     group_tuples([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == 1\nassert     group_tuples([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == None\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples([(1,2), (1,3), (2,3), (1,2), (2,3), (1,2), (2,3)]) == 1\nassert     group_tuples([(1,2), (1,3), (2,3), (1,2), (2,3), (1,2), (2,3)]) == 2\nassert     group_tuples([(1,2), (1,3), (2,3), (1,2), (2,3), (1,2), (2,3)]) == 3\nassert     group_tuples([(1,2), (1,3), (2,3), (1,2), (2,3), (1,2), (2,3)]) == 1\nassert     group_tuples([(1,2), (1,3), (2,3), (1,2), (2,3), (1,2), (2,3)]) == 2\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples(['1','2','3','4','5']) == '1'\nassert     group_tuples([('1','2'),('1','3'),('1','4'),('1','5')]) == '1'\nassert     group_tuples([('1','2'),('2','3'),('3','4'),('4','5')]) == '2'\nassert     group_tuples([('1','2'),('1','3'),('1','4')]) == '1'\nassert     group_tuples([('1','2'),('1','3'),('1','4')]) == '1'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ngroup_tuples([(\"a\", 1), (\"b\", 1), (\"c\", 2), (\"a\", 1), (\"b\", 1), (\"a\", 1)]) == [\"a\"]\ngroup_tuples([(\"a\", 1), (\"b\", 1), (\"c\", 2), (\"a\", 1), (\"b\", 1), (\"a\", 1)]) == [\"a\", \"b\", \"c\"]\ngroup_tuples([(\"a\", 1), (\"b\", 1), (\"c\", 2), (\"a\", 1), (\"b\", 1), (\"a\", 1)]) == [\"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(10, 'b'), (20, 'b'), (30, 'b'), (40, 'b'), (50, 'a'), (60, 'a')]) \nassert     group_tuples([(10, 'b'), (20, 'b'), (30, 'b'), (40, 'b'), (50, 'a'), (60, 'a')]) == (10, 'b')\nassert     group_tuples([(10, 'b'), (20, 'b'), (30, 'b'), (40, 'b'), (50, 'a'), (60, 'a')]) == (10, 'b')\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([(1,2),(3,4),(4,5),(5,6)])==2, 'Wrong output for sample case'\nassert     group_tuples([(1,2),(3,4),(4,5),(5,6)])==1, 'Wrong output for sample case'\nassert     group_tuples([(1,2),(3,4),(4,5),(5,6)])==0, 'Wrong output for sample case'\nassert     group_tuples([])==0, 'Wrong output for sample case'\nassert     group_tuples([(1,2)])==0, 'Wrong output for sample case'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     group_tuples([(1, 2, 5), (2, 3, 6), (1, 3, 4)]) == (1, 3)\nassert     group_tuples([(1, 2, 5), (2, 3, 6), (1, 3, 4)]) == (1, 3)\nassert     group_tuples([(1, 2, 5), (2, 3, 6), (1, 3, 4)]) == (1, 3)\n\ndef count_groups(Input):\n    '''\n    Write a function to count the number of groups in a list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max([1,2,3,4,5])     ==    5\nassert     Find_Max([1,2,3])     ==    3\nassert     Find_Max([])     ==    None\nassert     Find_Max([1,1,1])     ==    1\nassert     Find_Max([1,2,3,4])     ==    4\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, 'Should return 5'\nassert     Find_Max([1,2,3,4,5,7,8]) == 8, 'Should return 8'\nassert     Find_Max([1,2,3,4,5,7,8,9]) == 9, 'Should return 9'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nFind_Max([1,2,3]) == 3, \"First element is 3\"\nFind_Max([1,2,3,4]) == 3, \"All elements are 4\"\nFind_Max([1,2,3,4,5]) == 5, \"Last element is 5\"\nFind_Max([-1,-2,-3,-4,-5]) == 5, \"First element is 5\"\nFind_Max([1,2,3,4,5,6,7,8,9]) == 9, \"All elements are 9\"\nFind_Max([1,2,3,4,5,6,7,8]) == 8, \"Last element is 8\"\nFind_Max([]) == None, \"Empty list\"\nFind_Max([1,2,3,4,5,6,7,8,9,10]) == None, \"List with 10 elements\""
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, Find_Max([1,2,3,4,5])\nassert     Find_Max([1,2,3,4,5]) == 5, Find_Max([1,2,3,4,5,6])\nassert Find_Max([1,2,3,4]) == 4, Find_Max([1,2,3,4,5])\nassert Find_Max([1,2,3,4,5,6]) == 6, Find_Max([1,2,3,4,5,6])\nassert Find_Max([1,2,3,4,5,6,7]) == 6, Find_Max([1,2,3,4,5,6,7])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max([1,2,3,4,5])     == 5, \"Wrong output\"\nassert     Find_Max([1,2,3,4])     == 4, \"Wrong output\"\nassert     Find_Max([])     == None, \"Wrong output\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9])     == 9, \"Wrong output\"\nassert     Find_Max(['a','b','c','d','e','f'])     == 'e', \"Wrong output\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == 15\nassert     Find_Max([[1,2,3,4,5],[6,7,8,9,10]]) == 5\nassert     Find_Max([[1,2,3,4,5]]) == 5\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, \"Incorrect answer.\"\nassert     Find_Max([1,2,3,4]) == 4, \"Incorrect answer.\"\nassert     Find_Max([1,2,3,4,5,6]) == 6, \"Incorrect answer.\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nFind_Max([5,12,7,90,54,12,89]) == 12\nFind_Max([5,12,7,90,54,12,89,5]) == 5\nFind_Max([5,12,7,90,54,12,89,5,12]) == 5\nFind_Max([]) == None\nFind_Max(['a','b','c']) == None\nFind_Max([1,1,1,1,1,1,1,1,1,1,1]) == 1"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(Find_Max([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5]))\nprint(Find_Max([1,2,3,4,5,5]))\nprint(Find_Max([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5]))\nprint(Find_Max([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     round_and_sum([1,2,3,4]) == 21, '1 + 2 + 3 + 4 = 21'\nassert     round_and_sum([1,2,3,4,5]) == 30, '1 + 2 + 3 + 4 + 5 = 30'\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10]) == 120, '1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 120'\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 240, '1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 240'\nassert     round_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120]) == 161230, '1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100 + 101 + 102 + 103 + 104 + 105 + 106 + 107 + 108 + 109 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 120 = 161230'\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     round_and_sum([1.2, 1.4, 1.6]) == 11.0, 'incorrect'\nassert     round_and_sum([3.5, 4.6, 5.7]) == 17.0, 'incorrect'\nassert     round_and_sum([10.2, 10.4, 10.6]) == 220.0, 'incorrect'\nassert     round_and_sum([5.0, 6.1, 7.2]) == 45.0, 'incorrect'\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     round_and_sum([1.0, 2.5, 5.4]) == 9.4\nassert     round_and_sum([1.1, 2.0, 5.3]) == 9.3\nassert     round_and_sum([1.0, 2.5, 4.6]) == 8.2\nassert     round_and_sum([1.0, 2.5, 4.6, 5.1]) == 8.6\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nround_and_sum([1, 2, 3, 4, 5]) == 15, round_and_sum([1, 2, 3, 4, 5])\nassert \nround_and_sum([1, 2, 3, 4, 5]) == 15, round_and_sum([1, 2, 3, 4, 5])"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     round_and_sum([2.3,3.5]) == 1.0, \"expected 1.0\"\nassert round_and_sum([3.0,2.0]) == 3.0, \"expected 3.0\"\nassert round_and_sum([6.3,2.3]) == 13.0, \"expected 13.0\"\nassert round_and_sum([2.2,3.4,5.6]) == 17.0, \"expected 17.0\"\nassert round_and_sum([2.2,3.4,5.6,2.2]) == 14.0, \"expected 14.0\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     round_and_sum([2.12, 3.3, 4.4]) == 24\nassert     round_and_sum([2.12, 3.3, 4.4]) == 24\nassert     round_and_sum([-10.34, -7.43, -3.45, -15.23]) == -5\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     round_and_sum([0.1,0.1,0.1]) == (0,0,0,0,0,0)\nassert     round_and_sum([3.8, 4.1, 5.2, 5.8, 5.9, 5.9]) == (3,4,6,7,8,10)\nassert round_and_sum([0,0,0,0,0,0,0]) == (0,0,0,0,0,0)\nassert round_and_sum([-3,-2,-1,0,0,1,2,3]) == (0,-1,0,2,4,6,9,10)\nassert round_and_sum([-4,-3,-2,-1,0,1,2,3]) == (0,0,0,0,0,0,0,0)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     round_and_sum([1.5, 2.4, 3.3]) == 30\nassert round_and_sum([1.7, 2.4, 3.3]) == 48\nassert round_and_sum([1.3, 2.4, 3.3]) == 12\nassert round_and_sum([1.0, 2.0, 3.0]) == 60\nassert round_and_sum([-1.5, -2.4, -3.3]) == -30\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     round_and_sum([1, 2, 3, 4, 5, 6]) == 16, 'wrong answer'\nassert     round_and_sum([0, 1, 2, 3, 4, 5]) == 10, 'wrong answer'\nassert     round_and_sum([0, 1, 2, 3, 4, 5, 6]) == 18, 'wrong answer'\nassert     round_and_sum([1.5, 2.5, 3.5, 4.5, 5.5, 6.5]) == 30, 'wrong answer'\nassert     round_and_sum([-1, -2, -3, -4, -5]) == -15, 'wrong answer'\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     round_and_sum([2.3, 6.7, 4.3]) == 25.0\nassert     round_and_sum([8.7, 6.7, 5.6]) == 26.0\nassert     round_and_sum([5.1, 7.8, 5.1]) == 26.0\nassert     round_and_sum([3.2, 5.7, 4.5]) == 29.0\nassert     round_and_sum([5.7, 5.7, 8.8]) == 49.0\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(1) == 1, 'Input 1 for cube_Sum is not as expected'\nassert     cube_Sum(2) == 3, 'Input 2 for cube_Sum is not as expected'\nassert     cube_Sum(3) == 8, 'Input 3 for cube_Sum is not as expected'\nassert     cube_Sum(4) == 27, 'Input 4 for cube_Sum is not as expected'\nassert     cube_Sum(5) == 64, 'Input 5 for cube_Sum is not as expected'\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncube_Sum(4) == 8\ncube_Sum(5) == 55\ncube_Sum(6) == 246\ncube_Sum(7) == 488"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 6\nassert     cube_Sum(3) == 24\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 216\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_Sum(4) == (8,0)\nassert cube_Sum(6) == (120,0)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncube_Sum(1) == 8\ncube_Sum(2) == 27\ncube_Sum(3) == 32\ncube_Sum(4) == 64\ncube_Sum(5) == 125\ncube_Sum(6) == 216\ncube_Sum(7) == 343\ncube_Sum(8) == 512\ncube_Sum(9) == 729\ncube_Sum(10) == 806\ncube_Sum(11) == 1023\ncube_Sum(12) == 1264\ncube_Sum(13) == 1521\ncube_Sum(14) == 1764\ncube_Sum(15) == 2185\ncube_Sum(16) == 2636\ncube_Sum(17) == 3423\ncube_Sum(18) == 4133\ncube_Sum(19) == 5103\ncube_Sum(20) == 6144\ncube_Sum(21) == 7285\ncube_Sum(22) == 8922\ncube_Sum(23) == 10586\ncube_Sum(24) == 12162\ncube_Sum(25) == 14653\ncube_Sum(26) == 16950\ncube_Sum(27) == 20743\ncube_Sum(28) == 26048\ncube_Sum(29) == 33044\ncube_Sum(30) == 4116\ncube_Sum(31) == 4853\ncube_Sum(32) == 5791\ncube_Sum(33) == 6897\ncube_Sum(34) == 7986\ncube_Sum(35) == 8883\ncube_Sum(36) == 9790\ncube_Sum(37) == 11696\ncube_Sum(38) == 14391\ncube_Sum(39) == 16820\ncube_Sum(40) == 20361\ncube_Sum(41) == 23800\ncube_Sum(42) == 26306\ncube_Sum(43) == 30648\ncube_Sum(44) == 34714\ncube_Sum(45) == 39243\ncube_Sum(46) == 43715\ncube_Sum(47) == 47106\ncube_Sum(48) == 52715\ncube_Sum(49) == 57821\ncube_Sum(50) == 64962\ncube_Sum(51) == 67845\ncube_Sum(52) == 76617\ncube_Sum(53) == 78944\ncube_Sum(54) == 87775\ncube_Sum(55) == 90192\ncube_Sum(56) == 95834\ncube_Sum(57) == 99790\ncube_Sum(58) == 107395\ncube_Sum(59) == 114820\ncube_Sum(60) == 124618\ncube_Sum(61) == 130246\ncube_Sum(62) == 138270\ncube_Sum(63) == 147083\ncube_Sum(64) == 163440\ncube_Sum(65) == 174275\ncube_Sum(66) == 178894\ncube_Sum(67) == 189735\ncube_Sum(68) == 208339\ncube_Sum(69) == 218242\ncube_Sum(70) == 233954\ncube_Sum(71) == 244960\ncube_Sum(72) == 253937\ncube_Sum(73) == 263764\ncube_Sum(74) == 273824\ncube_Sum(75) == 283610\ncube_Sum(76) == 294568\ncube_Sum(77) == 308442\ncube_Sum(78) == 317395\ncube_Sum(79) == 324414\ncube_Sum(80) == 334940\ncube_Sum(81) == 354495\ncube_Sum(82) == 365072\ncube_Sum(83) == 376929\ncube_Sum(84) == 388570\ncube_Sum(85) == 397290\ncube_Sum(86) == 406533\ncube_Sum(87) == 415253\ncube_Sum(88) == 437571\ncube_Sum(89) == 448633\ncube_Sum(90) == 464984\ncube_Sum(91) == 477314\ncube_Sum(92) == 488951\ncube_Sum(93) == 513119\ncube_Sum(94) == 535294\ncube_Sum(95) == 554822\ncube_Sum(96) == 564800\ncube_Sum(97) == 577245\ncube_Sum(98) == 591061\ncube_Sum(99) == 613154\ncube_Sum(100) == 633255\ncube_Sum(101) == 653228\ncube_Sum(102) == 664202\ncube_Sum(103) == 676184\ncube_Sum(104) == 689219\ncube_Sum(105) == 702782\ncube_Sum(106) == 723691\ncube_Sum(107) == 744791\ncube_Sum(108) == 755657\ncube_Sum(109) == 766555\ncube_Sum(110) == 778558\ncube_Sum(111) == 797607\ncube_Sum(112) == 817646\ncube_Sum(113) == 838691\ncube_Sum(114) == 859892\ncube_Sum(115) == 873103\ncube_Sum(116) == 887289\ncube_Sum(117) == 909871\ncube_Sum(118) == 934186\ncube_Sum(119) == 957708\ncube_Sum(120) == 986287\ncube_Sum(121) == 1007848\ncube_Sum(122) == 1021357\ncube_Sum(123) == 1038199\ncube_Sum(124) == 1056199\ncube_Sum(125) == 1085251\ncube_Sum(126) == 1106448\ncube_Sum(127) == 1136663\ncube_Sum(128) == 1153743\ncube_Sum(129) == 1171665\ncube_Sum(130) == 1198805\ncube_Sum(131) == 1214585\ncube_Sum(132) == 1241607\ncube_Sum(133) == 1263826\ncube_Sum(134) == 1286440\ncube_Sum(135) == 1307695\ncube_Sum(136) == 1327296\ncube_Sum(137) == 1359399\ncube_Sum(138) == 1371526\ncube_Sum(139) == 1390639\ncube_Sum(140) == 1414495\ncube_Sum(141) == 1433372\ncube_Sum(142) == 1441675\ncube_Sum(143) == 1461748\ncube_Sum(144) == 1482388\ncube_Sum(145) == 1508208\ncube_Sum(146) == 1531903\ncube_Sum(147) == 1545190\ncube_Sum(148) == 1575379\ncube_Sum(149) == 1599077\ncube_Sum(150) == 1622863\ncube_Sum(151) == 1649756\ncube_Sum(152) == 1682210\ncube_Sum(153) == 1701146\ncube_Sum(154) == 1734384\ncube_Sum(155) == 1762506\ncube_Sum(156) == 1792093\ncube_Sum(157) == 1815583\ncube_Sum(158) == 1849125\ncube_Sum(159) == 1861593\ncube_Sum(160) == 1886541\ncube_Sum(161) == 1910623\ncube_Sum(162) == 1935321\ncube_Sum(163) == 1975715\ncube_Sum(164) == 2020563\ncube_Sum(165) == 2044981\ncube_Sum(166) == 2071519\ncube_Sum(167) == 2098889\ncube_Sum(168) == 2117426\ncube_Sum(169) == 2138752\ncube_Sum(170) == 2165979\ncube_Sum(171) == 2185537\ncube_Sum(172) == 2201545\ncube_Sum(173) == 2239277\ncube_Sum(174) == 2255308\ncube_Sum(175) == 2265783\ncube_Sum(176) == 2286467\ncube_Sum(177) == 2316116\ncube_Sum(178) == 2347156\ncube_Sum(179) == 2376079\ncube_Sum(180) == 2404232\ncube_Sum(181) == 2435148\ncube_Sum(182) == 2479474\ncube_Sum(183) == 2513149\ncube_Sum(184) == 2549483\ncube_Sum(185) == 2585988\ncube_Sum(186) == 2615943\ncube_Sum(187) == 2"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncube_Sum(5) == 5040\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_Sum(4) == [0, 12, 8, 4]\nprint('Correct')\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncube_Sum(10) == 0, \"cube_Sum is wrong\"\n\nprint(cube_Sum.__doc__)\nprint(cube_Sum.__name__)"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple((1,2,3,4,5)) == 1, 2, 3, 4, 5, 1, 2, 3, 4, 5\nassert     concatenate_tuple(('a','b','c')) == 'a', 'b', 'c', 'a', 'b', 'c'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple(('test', '1', '2')) == 'test1test2', 'Wrong output'\nassert     concatenate_tuple(('test', '1')) == 'test1', 'Wrong output'\nassert     concatenate_tuple(('test')) == 'test', 'Wrong output'\nassert     concatenate_tuple(('test', '2')) == 'test2', 'Wrong output'\nassert     concatenate_tuple(('test',)) == 'test', 'Wrong output'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate_tuple((1,2,3)) == \"1\\t2\\t3\", \"Wrong result\"\nassert concatenate_tuple((1,2,3)) == \"1\\t2\\t3\", \"Wrong result\"\nassert concatenate_tuple((1,2,3)) == \"1\\t2\\t3\", \"Wrong result\"\nassert concatenate_tuple((1,2)) == \"1\\t2\", \"Wrong result\"\nassert concatenate_tuple((1,2)) == \"1\\t2\", \"Wrong result\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nconcatenate_tuple((1,2,3)) == \"1,2,3\"\nassert \nconcatenate_tuple((1,2)) == \"1,2\"\nassert \nconcatenate_tuple((1,2,3,4)) == \"1,2,3,4\"\nassert \nconcatenate_tuple((1,2,3,4,5)) == \"1,2,3,4,5\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate_tuple((2,4,6)) == '2 4 6', \"Test failed.\"\nassert     concatenate_tuple((1,)) == '1', \"Test failed.\"\nassert     concatenate_tuple(()) == '', \"Test failed.\"\nprint(\"[PASS]\")\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'abc', 'First Function must be called'\nassert     concatenate_tuple(('a', 'b')) == 'abc', 'Second Function must be called'\nassert     concatenate_tuple(('a')) == 'a', 'Third Function must be called'\nassert     concatenate_tuple(()) == '', 'Fourth Function must be called'\nassert     concatenate_tuple([]) == '', 'Fifth Function must be called'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple((\"a\",\"b\",\"c\",\"d\")) == \"a,b,c,d\", \"Failed\"\nassert     concatenate_tuple((1,2,3,4)) == \"1,2,3,4\", \"Failed\"\nassert     concatenate_tuple((1,\"a\",\"b\",\"c\")) == \"1,a,b,c\", \"Failed\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c'\nassert     concatenate_tuple((1, 2, 3)) == '1,2,3'\nassert     concatenate_tuple(('first','second', 'third')) == 'first,second,third'"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(3) == 2\nassert     find_Average_Of_Cube(5) == 2.5\nassert     find_Average_Of_Cube(10) == 8\nassert     find_Average_Of_Cube(20) == 19.5\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Average_Of_Cube(1) == 1 \nassert     find_Average_Of_Cube(2) == 1.5\nassert     find_Average_Of_Cube(3) == 1.6666666666666667\nassert     find_Average_Of_Cube(4) == 1.5555555555555556\nassert     find_Average_Of_Cube(5) == 1.4545454545454546\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_Average_Of_Cube(3) == 8\n\n'''\n\nProblem 3\n\nWrite a python function to find the maximum of three numbers.\n\n'''\ndef find_Maximum(a, b, c):\n    pass\n    # check the correctness of find_Maximum\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Average_Of_Cube(5) == (1**3 + 2**3 + 3**3 + 4**3 + 5**3) / 6, \"find_Average_Of_Cube Failed!\"\nprint(\"find_Average_Of_Cube Passed!\")\n\n\n\ndef find_Average_Of_Cube_Fast(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    The function should use the recursive formula of sum of the cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Average_Of_Cube(2) == 8\nassert    find_Average_Of_Cube(5) == 30"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Average_Of_Cube(4) == 27.5\nassert     find_Average_Of_Cube(8) == 64\nassert     find_Average_Of_Cube(10) == 33.333333333333\nassert     find_Average_Of_Cube(2) == 9.0\nassert     find_Average_Of_Cube(1) == 1.0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_Average_Of_Cube(4) == 5\nprint(\"Congratulations!! you have passed the test\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9)) == (9, 8, 7, 6, 5, 4, 3, 2, 1)\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == (12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == ('e', 'f', 'd', 'c', 'b', 'a')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear((\"abc\", \"de\", \"fg\")) == (\"d\", \"e\", \"f\")\nassert     extract_rear((\"abc\", \"de\", \"fg\", \"h\")) == (\"fg\", \"h\")\nassert     extract_rear((\"abc\", \"de\", \"fg\", \"h\", \"i\")) == (\"fg\", \"h\", \"i\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(('car', 'fish', 'cat')) == ('cat', 'fish')\nassert     extract_rear(('car', 'fish', 'cat', 'truck')) == ('cat', 'truck')\nassert     extract_rear(('cat', 'fish', 'dog', 'truck')) == ('dog', 'truck')"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear((0,1,2,3,4,5,6,7,8,9)) == (8,9,0,1,2,3,4,5,6,7)\nassert     extract_rear((0,1,2,3,4,5,6,7,8,9,10)) == (9,8,0,1,2,3,4,5,6,7)\nassert     extract_rear((\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\")) == (\"j\",\"i\",\"g\",\"h\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear((\"Onde\", \"garbage\", \"hoge\", \"fuga\", \"foo\")) == (0, 1, 2, 3, 4)\nassert     extract_rear((\"\", \"\", \"\", \"\", \"\")) == (0, 1, 2, 3, 4)\nassert     extract_rear((\"\", \"\", \"\", \"\", \"\")) == (0, 1, 2, 3, 4)\nassert     extract_rear((\"\", \"\", \"\", \"\", \"\")) == (0, 1, 2, 3, 4)"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntest_data = ('front_door','rear_door', 'door', 'door', 'front', 'front_door', 'door', 'door')\nresult = extract_rear(test_data)\nprint('test_data=', test_data)\nprint('result=', result)\nif isinstance(result, list) and len(result) == len(test_data):\n    print('passed test_case #3')\nelse:\n    print('failed test_case #3')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear(('harry', 'david', 'geek')) == ('h', 'd', 'geek')\nassert     extract_rear(('hello', 'hi', 'how are you', 'I am fine', 'harry')) == ('I am fine', 'harry')\nassert     extract_rear(('apple', 'cherry', 'banana')) == ('cherry', 'banana')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear(('apple', 'cherry', 'banana')) == ('apple', 'banana', 'cherry')\nassert     extract_rear(('apple', 'cherry', 'banana', 'orange')) == ('banana', 'cherry', 'orange')\nassert     extract_rear(('apple', 'cherry', 'banana', 'orange', 'apple')) == ('banana', 'cherry', 'apple')\nassert     extract_rear(('apple', 'cherry', 'banana', 'orange', 'apple', 'cherry')) == ('banana', 'cherry', 'apple')\nassert     extract_rear(('apple', 'cherry', 'banana', 'orange', 'apple', 'cherry', 'banana', 'cherry', 'apple')) == ('banana', 'cherry', 'apple')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear(('abc', 'xyz', 'z', 'X')) == ('abc', 'X')\nassert     extract_rear(('abc', 'xyz', 'z', 'X', 'Y', 'Z')) == ('X', 'Y', 'Z')\nassert     extract_rear(('ABC', 'xyz', 'z', 'X', 'Y', 'Z')) == ('ABC', 'X', 'Y', 'Z')"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear(('abcd', 'xy', 'lmn')) == ('xy', 'lmn')\nassert     extract_rear(('xyz', 'xy', 'xyz')) == ('xyz', 'xy', 'xyz')\nassert     extract_rear(('xyz', 'xy', 'xyz')) == ('xy', 'xyz', 'xyz')\nassert     extract_rear(('xyz', 'xyz', 'xyz')) == ('xyz', 'xyz')\nassert     extract_rear(('xyz', 'xyz', 'xyz')) == ('xyz',)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list([1,2,3], 1) == 1\nassert     count_element_in_list([1,2,3], 3) == 1\nassert     count_element_in_list([1,2,3], 4) == 0\nassert     count_element_in_list([1,2,3], 5) == 0\nassert     count_element_in_list([], 5) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_element_in_list([1, 2], 1) == 1\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8], 7) == 5\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8], 4) == 2\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8], 8) == 0\nassert     count_element_in_list([1, 2, 3, 4, 5, 6, 7, 8], 6) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_element_in_list([], 1) == 0 \nassert     count_element_in_list([1,2,3,4], 1) == 4 \nassert     count_element_in_list([1,2,3,4], 2) == 2\nassert     count_element_in_list([1,2,3,4], 3) == 1\nassert     count_element_in_list([1,2,3,4], 4) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_element_in_list([1, 2, 3, 4], 3) == 2\nassert     count_element_in_list([1, 2, 3, 4], 1) == 1\nassert     count_element_in_list([1, 2, 3, 4], 4) == 0\nassert     count_element_in_list([], 4) == 0\nassert     count_element_in_list([1, 2, 3, 4], 5) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_element_in_list([1,2,3],3) == 2\nassert     count_element_in_list([1,2,3],0) == 0\nassert     count_element_in_list([],0) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert count_element_in_list([], 1) == 0\nassert count_element_in_list([1], 1) == 1\nassert count_element_in_list([1, 2], 1) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_element_in_list([1, 2, 3, 4], 2) == 2\nassert     count_element_in_list([1, 2, 3, 4], 5) == 0\nassert     count_element_in_list([1, 2, 3], 2) == 0\nassert count_element_in_list([1, 2, 3], 4) == 1\nassert count_element_in_list([1, 2, 3], 2) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_element_in_list([1,2], 3) == 0\nassert     count_element_in_list([1,2], 0) == 2\nassert     count_element_in_list([1,2,3], 3) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"\\n\\nCheck the correctness of count_element_in_list:\")\nprint(count_element_in_list(['e', 'e', 'b', 'e', 'b', 'e', 'b', 'b', 'e', 'b'], 'e'))\nassert 1 == 1"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5])    == [1,3,5]\nassert     filter_oddnumbers([10])    == []\nassert     filter_oddnumbers([3,5,8])    == [3,5,8]\nassert     filter_oddnumbers([-1,-2,0])    == [-1,-2,0]\nassert     filter_oddnumbers([4,6,9])    == [4,6,9]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9], \\\n        'Should return [1, 3, 5, 7, 9]'\nassert     filter_oddnumbers([10]) == [], \\\n        'Should return []'\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 5, 7, 9, 11, 13, 15], \\\n        'Should return [1, 3, 5, 7, 9, 11, 13, 15]'\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 3, 5, 7, 9, 11, 13, 15, 16], \\\n        'Should return [1, 3, 5, 7, 9, 11, 13, 15, 16]'\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], \\\n        'Should return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]'\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1, 2, 3, 4]) == [1, 3, 4]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6]) ==     [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) ==     [1,3,5,7,9]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8]) ==     [1,3,5,7,8]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11,12,13]) ==     [1,3,5,7,9,11,13]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([2,3,4,7,8,9]) == False\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == True\nassert     filter_oddnumbers([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == False\nassert     filter_oddnumbers([]) == False\nassert     filter_oddnumbers([1,2,3,4,5,6]) == False\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([4,2,5,9]) == []\nassert     filter_oddnumbers([4,2,5,9,2]) == [2,5,9]\nassert     filter_oddnumbers([4,2,5,9,2,2,5,9]) == [2,5,9]\nassert     filter_oddnumbers([4,2,5,9,2,2,5,9,2]) == [2,5,9]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format('2000-01-01') == '01-01-2000', \"change_date_format('2000-01-01') == '01-01-2000'\"\nassert     change_date_format('20-02-20') == '02-02-20', \"change_date_format('20-02-20') == '02-02-20'\"\nassert     change_date_format('2020-02-20') == '20-02-2020', \"change_date_format('2020-02-20') == '20-02-2020'\"\nassert     change_date_format('2020-03-20') == '20-03-2020', \"change_date_format('2020-03-20') == '20-03-2020'\"\nassert     change_date_format('2021-02-20') == '2021-02-20', \"change_date_format('2021-02-20') == '2021-02-20'\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert change_date_format('2017-02-28') == '28-02-2017'\nassert change_date_format('2015-12-30') == '30-12-2015'\nassert change_date_format('2015-12-31') == '31-12-2015'\nassert change_date_format('2017-03-02') == '02-03-2017'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format(\"19-01-2020\") == \"01-01-2020\"\nassert     change_date_format(\"19-01-20\") == \"01-01-2020\"\nassert     change_date_format(\"19-01-\") == \"01-01-2020\"\nassert     change_date_format(\"2020-01-19\") == \"19-01-2020\"\nassert     change_date_format(\"2020-01-19-01\") == \"19-01-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format(\"20-02-2015\") == \"2-02-2015\", \"Wrong return value\"\nassert change_date_format(\"20-02-2015\") == \"2-02-2015\", \"Wrong return value\"\nassert change_date_format(\"14-02-2015\") == \"2-02-2015\", \"Wrong return value\"\nassert change_date_format(\"22-02-2015\") == \"2-02-2015\", \"Wrong return value\"\nassert change_date_format(\"15-03-2015\") == \"3-3-2015\", \"Wrong return value\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format(\"2019-02-27\") == \"27-02-2019\"\nassert     change_date_format(\"2020-02-27\") == \"27-02-2020\"\nassert     change_date_format(\"2019-02-27\") == \"27-02-2019\"\nassert     change_date_format(\"2020-02-27\") == \"27-02-2020\"\nassert     change_date_format(\"2019-03-01\") == \"01-03-2019\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format('2020-01-01') == '01-01-2020'\nassert     change_date_format('2020-1-1') == '01-01-2020'\nassert     change_date_format('2020-12-31') == '31-12-2020'\nassert     change_date_format('2020-12-30') == '30-12-2020'\nassert     change_date_format('2020-01-01') == '01-01-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_date_format('2019-03-20') == '20-03-2019'\nassert     change_date_format('2100-03-20') == '20-03-2100'\n\ndef filter_dates(dates):\n    '''\n    Write a function to filter a list of strings of the form yyyy-mm-dd and return only those whose date portion is a multiple of 7.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef change_date_format_test():\n    assert change_date_format('2020-11-03') == '03-11-2020'\n    assert change_date_format('2020-3-17') == '17-03-2020'\n    assert change_date_format('2020-11-3') == '3-11-2020'\n    "
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('2019-05-17') == '17-05-2019'\nassert     change_date_format('2020-05-17') == '17-05-2020'\nassert     change_date_format('2020-05-17') == '17-05-2020'\nassert     change_date_format('2025-05-17') == '17-05-2025'\nassert     change_date_format('2020-05-17') == '17-05-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nshell_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nshell_sort([6, 3, 1, 8, 9]) == [1, 3, 6, 8, 9]\nshell_sort([100, 20, 10, 200, 1]) == [1, 10, 20, 100, 200]\nshell_sort([-2, 1, -4, 2, 8, 3]) == [-2, -4, 1, 2, 3, 8]\nshell_sort([]) == []\nshell_sort([-2, -5, -4]) == [-2, -4, -5]\nshell_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nshell_sort([-2, 1, -4, 2, 8, 3]) == [-2, -4, 1, 2, 3, 8]\nshell_sort([100, 20, 10, 200, 1]) == [1, 10, 20, 100, 200]"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     shell_sort([1,3,2,6,8,5,4,9,7,10]) == sorted(my_list), \"Your function didn't sort correctly.\"\nassert     shell_sort([]) == sorted(my_list), \"Your function didn't sort correctly.\"\nassert     shell_sort([5]) == sorted(my_list), \"Your function didn't sort correctly.\"\nassert     shell_sort([5,6,3,8]) == sorted(my_list), \"Your function didn't sort correctly.\"\nassert     shell_sort([1,5,2,6,3,8]) == sorted(my_list), \"Your function didn't sort correctly.\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef quick_sort(my_list):\n    '''\n    Write a function to sort the given array by using quick sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     shell_sort([9,2,3,1]) == [1,2,3,9]\nassert     shell_sort([1,2,3,4]) == [1,2,3,4]\nassert     shell_sort([9,2,3,4]) == [1,2,3,4,9]\nassert     shell_sort([2,9,8,7,3,5,1]) == [1,2,3,5,7,8,9]\nassert     shell_sort([9,2,3,4,5]) == [1,2,3,4,5,9]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nshell_sort([2,7,8,9,3,1,6,5,4,0]) == [0,1,2,3,4,5,6,7,8,9]\nprint(\"Test 2: Passed\")\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert shell_sort([1,2,3,4]) == \nassert shell_sort([5,4,3,2,1]) ==\nassert shell_sort([1,2,3,4,5]) ==\nassert shell_sort([2,1,3,4,5]) ==\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     and_tuples((0,1), (1,1)) == (0,1)\nassert     and_tuples((1,0), (1,1)) == (0,1)\nassert     and_tuples((0,1), (0,1)) == (0,1)\nassert     and_tuples((1,0), (0,1)) == (0,1)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 2) and (3, 4)\nassert     and_tuples((1, 3, 5), (2, 4, 6)) == (1, 3, 5) and (2, 4, 6)\nassert     and_tuples((0, 1), (0,)) == (0, 1) and (0,)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples(('a', 'b', 'c'), ('d', 'e', 'f')) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     and_tuples(('a', 'b', 'c'), ('d', 'e', 'f', 'g')) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\nprint('All done!')"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (3, 4)\nassert     and_tuples((2, 3), (1, 1)) == (1, 1)\nassert     and_tuples((-1, -2), (-3, -4)) == (-2, -4)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (and_tuples((1,2),(3,4)) == ((1,2),(3,4))), 'and_tuples failed'\nassert     (and_tuples((1,2),(3,4)) == ((1,2),(3,4))), 'and_tuples failed'\nassert     (and_tuples((1,2),(3,4,5)) == ((1,2),(3,4,5))), 'and_tuples failed'\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     and_tuples( (5,6), (7,8) ) == (5,8)\nassert     and_tuples( (5,6), (9,10) ) == (5,6)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     and_tuples((1,2),(3,4)) == (1,2), \"and_tuples((1,2),(3,4)) is incorrect\"\nassert     and_tuples((3,4),(1,2)) == (3,4), \"and_tuples((3,4),(1,2)) is incorrect\"\nassert     and_tuples((1,2,3,4),(5,6,7,8)) == (1,2,3,4), \"and_tuples((1,2,3,4),(5,6,7,8)) is incorrect\"\nassert     and_tuples((),()) == (), \"and_tuples((),()) is incorrect\"\nassert     and_tuples((1,2),(3,)) == (1,2), \"and_tuples((1,2),(3,)) is incorrect\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 3), \"Wrong\"\nassert     and_tuples((1, 2, 3), (1, 2)) == (1, 2), \"Wrong\"\nassert     and_tuples((0,), (1, 2, 3)) == (0, 1), \"Wrong\"\nassert     and_tuples((1, 2, 3, 4), (5, 6)) == (1, 2, 3, 4), \"Wrong\"\nprint(\"\\n(1) if you got to this point, then your function is correct\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(0.1, -0.4, 0) == (0.1, -0.4), \"Wrong\"\nassert     parabola_directrix(-0.1, -0.4, 0) == (-0.1, -0.4), \"Wrong\"\nassert     parabola_directrix(0.1, 0.4, 0) == (0.1, 0.4), \"Wrong\"\nassert     parabola_directrix(-0.1, 0.4, 0) == (-0.1, 0.4), \"Wrong\"\nassert     parabola_directrix(0, -0.4, 0.1) == (0.0, -0.4), \"Wrong\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    parabola_directrix(1, -1, 0) == (-1.0, -1.0)\n    parabola_directrix(1, 1, 0) == (-1.0, -1.0)\n    parabola_directrix(1, 1, 1) == (1.0, -1.0)\n    parabola_directrix(1, 1, -1) == (1.0, 1.0)\n    parabola_directrix(0, -1, 0) == (0.0, -1.0)\n    parabola_directrix(0, 1, 0) == (0.0, 1.0)\n    parabola_directrix(1, -1, 0) == (0.0, -1.0)\n    parabola_directrix(0, 1, 0) == (0.0, 1.0)\n    parabola_directrix(0, 0, 1) == (0.0, 0.0)\n    parabola_directrix(0, 0, -1) == (0.0, 0.0)\n    parabola_directrix(0, 0, 0) == (0.0, 0.0)\n    parabola_directrix(0, -0.1, 0) == (0.0, -0.1)\n    parabola_directrix(0, 0.1, 0) == (0.0, 0.1)\n    parabola_directrix(0, -1, 0) == (0.0, -1.0)\n    parabola_directrix(0, 1, 0) == (0.0, 1.0)\n    parabola_directrix(0, 0.1, 0.1) == (0.0, -0.9)\n    parabola_directrix(0, -0.1, 0.1) == (0.0, -0.9)\n    parabola_directrix(0, 0.1, -0.1) == (0.0, 0.9)\n    parabola_directrix(0, -0.1, -0.1) == (0.0, 0.9)\n    parabola_directrix(1, 1, 1) == (1.0, -1.0)\n    parabola_directrix(1, 1, -1) == (1.0, 1.0)\n    parabola_directrix(1, -1, 1) == (-1.0, -1.0)\n    parabola_directrix(1, -1, -1) == (-1.0, 1.0)\n    parabola_directrix(0, 1, 1) == (-0.5, -1.0)\n    parabola_directrix(0, 1, -1) == (-0.5, 1.0)\n    parabola_directrix(0, -1, 1) == (-0.5, -1.0)\n    parabola_directrix(0, -1, -1) == (-0.5, 1.0)\n    parabola_directrix(0.1, 1, 1) == (0.9, -1.0)\n    parabola_directrix(0.1, 1, -1) == (0.9, 1.0)\n    parabola_directrix(0.1, -1, 1) == (-0.9, -1.0)\n    parabola_directrix(0.1, -1, -1) == (-0.9, 1.0)\n    parabola_directrix(-0.1, 1, 1) == (-0.9, -1.0)\n    parabola_directrix(-0.1, 1, -1) == (-0.9, 1.0)\n    parabola_directrix(-0.1, -1, 1) == (0.9, -1.0)\n    parabola_directrix(-0.1, -1, -1) == (0.9, 1.0)\n    parabola_directrix(0, 1, 1) == (0.0, -1.0)\n    parabola_directrix(0, 1, -1) == (0.0, 1.0)\n    parabola_directrix(0, -1, 1) == (0.0, -1.0)\n    parabola_directrix(0, -1, -1) == (0.0, 1.0)\n    parabola_directrix(0, 0, 1) == (0.0, 0.0)\n    parabola_directrix(0, 0, -1) == (0.0, 0.0)\n    parabola_directrix(1, 0, 1) == (0.0, 0.0)\n    parabola_directrix(1, 0, -1) == (0.0, 0.0)\n    parabola_directrix(0, 1, 1) == (0.0, 1.0)\n    parabola_directrix(0, 1, -1) == (0.0, -1.0)\n    parabola_directrix(0, 0, 1) == (0.0, 0.0)\n    parabola_directrix(0, 0, -1) == (0.0, 0.0)\n    parabola_directrix(0, -1, 1) == (0.0, -1.0)\n    parabola_directrix(0, -1, -1) == (0.0, 1.0)\n    parabola_directrix(0, 1, 1) == (0.0, 1.0)\n    parabola_directrix(0, 1, -1) == (0.0, -1.0)\n    parabola_directrix(0, -1, 1) == (0.0, -1.0)\n    parabola_directrix(0, -1, -1) == (0.0, 1.0)\n    parabola_directrix(1, 1, 1) == (1.0, -1.0)\n    parabola_directrix(1, 1, -1) == (1.0, 1.0)\n    parabola_directrix(1, -1, 1) == (-1.0, -1.0)\n    parabola_directrix(1, -1, -1) == (-1.0, 1.0)\n    parabola_directrix(-1, 1, 1) == (-1.0, -1.0)\n    parabola_directrix(-1, 1, -1) == (-1.0, 1.0)\n    parabola_directrix(-1, -1, 1) == (1.0, -1.0)\n    parabola_directrix(-1, -1, -1) == (1.0, 1.0)\n    parabola_directrix(-1, 0, 1) == (-1.0, 0.0)\n    parabola_directrix(-1, 0, -1) == (-1.0, 0.0)\n    parabola_directrix(-1, 1, 1) == (0.0, 1.0)\n    parabola_directrix(-1, 1, -1) == (0.0, -1.0)\n    parabola_directrix(-1, 0, 1) == (0.0, 0.0)\n    parabola_directrix(-1, 0, -1) == (0.0, 0.0)\n    parabola_directrix(1, 0, 1) == (0.0, -1.0)\n    parabola_directrix(1, 0, -1) == (0.0, 1.0)\n    parabola_directrix(0, 1, 1) == (0.0, 1.0)\n    parabola_directrix(0, 1, -1) == (0.0, -1.0)\n    parabola_directrix(0, 0, 1) == (0.0, 0.0)\n    parabola_directrix(0, 0, -1) == (0.0, 0.0)\n    parabola_directrix(0, -1, 1) == (0.0, -1.0)\n    parabola_directrix(0, -1, -"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef parabola_intersect_points(a, b, c): \n    '''\n    Write a function to find the points at which the parabola crosses the x axis.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(1, 2, 3) == {'a': 1.5, 'b': -2.5, 'c': 1}\nassert parabola_directrix(1, -3, 2) == {'a': 1, 'b': -3, 'c': -2}\nassert parabola_directrix(-1, 2, -3) == {'a': -1, 'b': 2, 'c': -3}\nassert parabola_directrix(1, 2, 3) == {'a': 1.5, 'b': -2.5, 'c': 1}\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(common_element([1,2,3], [1,2,4]))\nprint(common_element([1,2,3], [1,3,4]))\nprint(common_element([1,2,3], [1,2]))\nprint(common_element([1,2,3], []))\nprint(common_element([], [1,2,3]))\nprint(common_element([], []))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncommon_element([1, 2, 3, 4], [2, 3, 4, 5])\ncommon_element([1, 2, 3, 4], [1, 3, 4, 5])\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncommon_element([1,2,3,4], [1,2,4])\nassert \ncommon_element([1,2,3,4,5,6], [1,2,4])\nassert \ncommon_element([1,2,3,4], [1,2,5])\nassert \ncommon_element([1,2,3,4], [1,2,5,6])\nassert \ncommon_element([1,2,3], [2,3,4])\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_element([1, 2, 3, 4], [1, 3, 4, 5]) == True\nassert     common_element([1, 2, 3], [1, 3, 4, 5]) == False\nassert     common_element([1, 2, 3], [4, 5, 6]) == False\nassert     common_element([1], [1, 2, 3]) == True\nassert     common_element([1, 2, 3, 4], [1, 2, 3, 5]) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_element([1,2,3],[2,3,1]) == True\nassert     common_element([1,2,3],[3,1,2]) == True\nassert     common_element([1,2,3],[2,3,1,4,5]) == False\nassert     common_element([1,2,3,4],[2,3,1,4,5]) == False\n\n'''\nSolution\n'''\ndef common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1) & set(list2))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncommon_element([1,2,3,4,5], [1,2,3,4,5]) == True, \"should return True\"\nassert common_element([], []) == False, \"should return False\"\nassert common_element([1,2,3,4,5,6], [1,2,3,4,5]) == False, \"should return False\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1, 2, 3], [1, 2, 3]) == True, \\\n        \"input list 1: {}\".format([1, 2, 3]) + \\\n        \"\\noutput: {}\".format(common_element([1, 2, 3], [1, 2, 3]))\nassert     common_element([1, 2, 3], [1, 2, 4]) == False, \\\n        \"input list 1: {}\".format([1, 2, 3]) + \\\n        \"\\noutput: {}\".format(common_element([1, 2, 3], [1, 2, 4]))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1,2,3],[2,3,4]) == True, '2,3'\nassert     common_element([1,2,3],[4,3,2]) == False, '4,3'\nassert     common_element([1,2,3],[1,2,3]) == True, '1,2,3'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_trapezium(3,4,5) == 3.0, 'wrong'\nassert median_trapezium(0,10,100) == 10.0, 'wrong'\nassert median_trapezium(10,10,10) == 10.0, 'wrong'\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_trapezium(1,2,3) == 2\nassert median_trapezium(1,2,3) == 2.5\nassert median_trapezium(2,2,2) == 2\nassert median_trapezium(2,2,4) == 2.5\nassert median_trapezium(1,2,1) == 1\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_trapezium(1,4,3) == 1.75\nassert     median_trapezium(3,1,5) == 3\nassert     median_trapezium(2,3,4) == 2\nassert     median_trapezium(1,2,4) == 2.5\nassert     median_trapezium(4,2,1) == 2."
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_trapezium(2,3,4) == 2.5, \"Wrong output\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_trapezium(3,4,5) == 3\nassert     median_trapezium(3,4,2) == 3.5\nassert     median_trapezium(4,3,2) == 3.5\nassert     median_trapezium(5,3,2) == 4\n\nprint(\"You pass the test!\")\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(median_trapezium(1,2,3))\n\n\n\ndef median_trap(height1,height2,height3):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_trapezium(5,10,11)==4.5, \"incorrect median\"\nassert     median_trapezium(5,10,10)==5, \"correct median\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_trapezium(1, 2, 4) == 3, 'Wrong output'\nassert median_trapezium(5, 10, 3) == 5, 'Wrong output'\nassert median_trapezium(5, 10, 1) == 5, 'Wrong output'\nassert median_trapezium(1, 2, 3) == 2, 'Wrong output'\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(median_trapezium(2,2,3)) == 3\nassert \nprint(median_trapezium(2,3,4)) == 3.5\nassert \nprint(median_trapezium(2,4,5)) == 4\nassert \nprint(median_trapezium(3,4,5)) == 4.5\nassert \nprint(median_trapezium(6,7,7)) == 7\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_greater_or_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than or equal to the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_greater([1,2,3,4], 3) == True, 'INCORRECT'\nassert     check_greater([1,2,3,4], 2) == False, 'INCORRECT'\nassert     check_greater([1,2,3,4], 5) == True, 'INCORRECT'\nassert     check_greater([1,2,3,4], 4) == False, 'INCORRECT'\nassert     check_greater([1,2,3,4], 0) == False, 'INCORRECT'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_greater([1, 2, 3], 5) == False, \"should be False\"\nassert     check_greater([1, 2, 3], 4) == True, \"should be True\"\nassert     check_greater([1, 2, 3], 0) == False, \"should be False\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_greater([1, 2, 3, 4], 5) == False, \"check_greater() failed\"\nassert     check_greater([1, 2, 3, 4], 4) == True, \"check_greater() failed\"\nassert     check_greater([1, 2, 3, 4], 1) == False, \"check_greater() failed\"\nassert     check_greater([1, 2, 3, 4], 0) == False, \"check_greater() failed\"\nassert     check_greater([], 5) == False, \"check_greater() failed\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_greater([1,2,3,4,5],5) == True,'should return true when the element greater than the given element'\nassert     check_greater([1,2,3,4,5],4) == False,'should return false when the element is smaller than the given element'\nassert     check_greater([1,2,3,4,5],0) == True,'should return true when the element is greater than 0'\nassert     check_greater([1,2,3,4,5],-1) == True,'should return true when the element is greater than -1'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_greater([1,2,3], 4) == False, \"Wrong output\"\nassert     check_greater([1,2,3], 2) == True, \"Wrong output\"\nassert     check_greater([1], 1) == True, \"Wrong output\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater([5, 7, 9, 2, 6], 6) == True\nassert     check_greater([5, 7, 9, 2, 6], 1) == False\nassert     check_greater([5, 7, 9, 2, 6], 2) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_greater([1,2,3,4,5], 6) == False, \"check_greater failed\"\nassert     check_greater([1,2,3,4,5], 5) == True, \"check_greater failed\"\nassert     check_greater([1,2,3,4,5], 3) == True, \"check_greater failed\"\nassert     check_greater([1,2,3,4,5], 2) == True, \"check_greater failed\"\nassert     check_greater([1,2,3,4,5], 1) == True, \"check_greater failed\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntext_match_one('abc')\nassert text_match_one('abcb')\nassert not text_match_one('abc')\nassert not text_match_one('abcb')\nassert text_match_one('abcb')\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert text_match_one(\"abab\") == True\nassert text_match_one(\"abcb\") == True\nassert text_match_one(\"abccb\") == True\nassert text_match_one(\"abcb\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one(\"ab\") == True, \"ab\"\nassert     text_match_one(\"abb\") == True, \"abb\"\nassert     text_match_one(\"baa\") == True, \"baa\"\nassert     text_match_one(\"abbb\") == True, \"abbb\"\nassert     text_match_one(\"bb\") == False, \"bb\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one('') == False, 'Empty text'\nassert     text_match_one('a') == False, 'One a'\nassert     text_match_one('ab') == True, 'ab'\nassert     text_match_one('aab') == False, 'aab'\nassert     text_match_one('aabcb') == True, 'aabcb'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one(\"ab\") == True, \"should match a followed by one b\"\nassert     text_match_one(\"ab\") == True, \"should match a followed by one b\"\nassert     text_match_one(\"ab\") == False, \"should not match a followed by one b\"\nassert     text_match_one(\"abc\") == False, \"should not match a followed by one b\""
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one('') == None, \"Passing empty string!\"\nassert     text_match_one('a') == False, \"Passing a string without 'a'!\"\nassert     text_match_one('a'*1) == True, \"Passing a string with only 'a'\"\nassert     text_match_one('a'*2) == True, \"Passing a string with only 'a' and 'a'\"\nassert     text_match_one('ab') == False, \"Passing a string with only 'a'\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one('ab') == True, \\\n        \"\\nExpected the function to return True for 'ab'\\n\" + \\\n        \"instead, returned \" + str(text_match_one('ab')) + \"\\n\"\nassert     text_match_one('ab1') == False, \\\n        \"\\nExpected the function to return False for 'ab1'\\n\" + \\\n        \"instead, returned \" + str(text_match_one('ab1')) + \"\\n\"\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nWrite a function that matches a string that has a b followed by one or more c's.\n'''\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more c's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one('abab') == True\nassert     text_match_one('abbb') == True\nassert     text_match_one('abaa') == False\nassert     text_match_one('aab') == True\nassert     text_match_one('a') == False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(1234567) == 4, 'This is not correct'\nassert     last_Digit(1) == 1, 'This is not correct'\nassert     last_Digit(0) == 0, 'This is not correct'\nassert     last_Digit(9) == 9, 'This is not correct'\nassert     last_Digit(20) == 0, 'This is not correct'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(0) == 0, \"Wrong answer\"\nassert     last_Digit(123) == 3, \"Wrong answer\"\nassert     last_Digit(100) == 1, \"Wrong answer\"\nassert     last_Digit(2033) == 3, \"Wrong answer\"\nassert     last_Digit(2041) == 4, \"Wrong answer\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(123456) == 6\nassert     last_Digit(91234) == 3\nassert     last_Digit(91233) == 3\nassert     last_Digit(91234) == 4\nassert     last_Digit(91236) == 4\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(1024) == 5\nassert last_Digit(1221) == 2\nassert last_Digit(22) == 0\nassert last_Digit(14) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit(1010) == 1\nassert last_Digit(20) == 0\nassert last_Digit(123456) == 6\nassert last_Digit(1000) == 0\nassert last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(24) == 1\nassert     last_Digit(50) == 5\nassert     last_Digit(1234) == 4\nassert     last_Digit(19999) == 9\nassert     last_Digit(-1234) == -4\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(55) == 5\nassert     last_Digit(45) == 4\nassert     last_Digit(20) == 2\nassert     last_Digit(15) == 1\n\nprint(\"Correct\")\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([1, -2, -3, -4, 5]) == [-1, -2, -3, -4, -5]\nassert neg_nos([1, 2, 3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert neg_nos([1, -2, -3, -4, 5]) == [-1, -2, -3, -4, -5]\nassert neg_nos([1, -2, -3, -4, 5, 6]) == [-1, -2, -3, -4, -5, -6]\n\n'''\nProblem 2\n'''\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nneg_nos([-2, 4, 5, -1, -5, -2]) == [-2, -4, -5, -1, -5, -2]\nassert neg_nos([-1, -2, 3, -4, 5]) == [-1, -2, -3, -4, -5]\nassert neg_nos([1, -3, -2, 4, -5]) == [-1, -3, -2, -4, -5]\nassert neg_nos([-1, -2, 3, -4, 5]) == [-1, -2, -3, -4, -5]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert neg_nos([1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\nassert neg_nos([-5, -4, -3, -2, -1]) == [-5, -4, -3, -2, -1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     neg_nos([1,2,3,4]) == [-1,-2,-3,-4], 'neg_nos test 1 failed'\nassert     neg_nos([1,-2,3,4]) == [-1,-2,-3,-4], 'neg_nos test 2 failed'\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     neg_nos([3, -3, 0, -10, -5]) == [-3, -3, 0, -10, -5]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     neg_nos([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\nassert     neg_nos([-2, -3, -4, -5, -6, -7, -8, -9]) == [-8, -7, -6, -5, -4, -3, -2, -1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nneg_nos([]) == []\nneg_nos([1,2,3,4,-1,-2,-3]) == [-2, -3, -1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     neg_nos([1, 2, -1, -5, -7]) == [-1, -5, -7]\nprint(\"correct\")\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nneg_nos([0,-1,2,5,-4]) == [-1,-1,2,5,4]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd('aaabbc') == 'aabbc', \"failed\"\nassert     remove_odd('aaa') == 'aaa', \"failed\"\nassert     remove_odd('ab') == 'a', \"failed\"\nassert     remove_odd('a') == 'a', \"failed\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd('') == ''\nassert     remove_odd('a') == 'a'\nassert     remove_odd('abb') == 'b'\nassert     remove_odd('ab') == 'b'\nassert     remove_odd('abcd') == 'b'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd(\"ABD\") == \"ABCD\", \"Wrong result\"\nassert     remove_odd(\"A\") == \"A\", \"Wrong result\"\nassert     remove_odd(\"ABC\") == \"ABC\", \"Wrong result\"\nassert     remove_odd(\"ABCDABCD\") == \"ABCD\", \"Wrong result\"\nassert     remove_odd(\"ABCD\") == \"ABCD\", \"Wrong result\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd('aabaa') == 'abaa'\nassert     remove_odd('abaaaa') == 'abaa'\nassert     remove_odd('aabaa') == 'abaa'\nassert     remove_odd('ababab') == 'abab'\n\ndef is_substring(str1, str2):\n    '''\n    Write a function to check if one string is a substring of another\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nTask:\nGiven an input string, write a Python function to remove the duplicate characters.\nNote: The output string should have all characters after removing the duplicates in same order.\n'''"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd(\"hello world!\") == \"ell olleh\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"abcdefghijk\") == \"cdehgkj\"\nassert     remove_odd(\"abcd\") == \"cd\"\nassert     remove_odd(\"abcde\") == \"abc\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd(\"i am good.\") == \"im gi od\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"Hello World\") == \"Helo World\"\nassert     remove_odd(\"13\") == \"\"\nassert     remove_odd(\"13.1\") == \"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(1,2),(3,4),(5,6),(7,8)]) == 3\nassert count_bidirectional([(1,2),(3,4),(5,6)]) == 1\nassert count_bidirectional([(1,2),(3,4)]) == 1\nassert count_bidirectional([(1,2),(3,4),(5,6)]) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional([(1, 2), (2, 1)]) == 1\nassert     count_bidirectional([(1, 2), (2, 1), (2, 3)]) == 2\nassert     count_bidirectional([(1, 2), (1, 3), (2, 4)]) == 3\nassert     count_bidirectional([]) == 0\nassert     count_bidirectional([(1, 3), (2, 4), (1, 2)]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([(1, 'a'), (2, 'b'), (3, 'c')]) == 0, \\\n        \"count_bidirectional([(1, 'a'), (2, 'b'), (3, 'c')]) == 0  ->  False\"\nassert     count_bidirectional([(1, 'a'), (2, 'b'), (3, 'c'), (1, 'a')]) == 1, \\\n        \"count_bidirectional([(1, 'a'), (2, 'b'), (3, 'c'), (1, 'a')]) == 1  ->  True\"\nassert     count_bidirectional([(1, 'a'), (2, 'b'), (3, 'c'), (1, 'a')]) == 0, \\\n        \"count_bidirectional([(1, 'a'), (2, 'b'), (3, 'c'), (1, 'a')]) == 0  ->  False\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional([[], []]) == 0\nassert     count_bidirectional([[]]) == 0\nassert     count_bidirectional([[(1, 2)], [(1, 2)]]) == 1\nassert     count_bidirectional([[(1, 2)], [(1, 2)], [(1, 2)]]) == 2\nassert     count_bidirectional([[(1, 2), (3, 4)], [(1, 2), (3, 4)], [(1, 2), (3, 4)]]) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_bidirectional([(1, 2), (2, 1), (2, 3), (3, 2)]) == 3\ncount_bidirectional([(1, 2), (2, 3), (3, 1), (4, 3), (3, 4), (4, 1), (4, 3), (1, 4)]) == 2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([('John', 'Smith'), ('Smith', 'John'), ('John', 'John'), ('Smith', 'Smith')]) == 2, 'FAIL'\nassert count_bidirectional([('John', 'Smith'), ('Smith', 'John'), ('John', 'John'), ('Smith', 'Smith')]) == 2, 'FAIL'\nassert count_bidirectional([('John', 'Smith'), ('Smith', 'John'), ('John', 'John'), ('Smith', 'Smith')]) == 1, 'FAIL'\nassert count_bidirectional([('John', 'Smith'), ('Smith', 'John'), ('John', 'John'), ('Smith', 'Smith')]) == 0, 'FAIL'\nassert count_bidirectional([('John', 'Smith'), ('Smith', 'John')]) == 0, 'FAIL'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([]) == 0, \"Empty list\"\nassert     count_bidirectional([(1, 2), (2, 1)]) == 2, \"One-to-one\"\nassert     count_bidirectional([(1, 2), (1, 3)]) == 1, \"One-to-many\"\nassert     count_bidirectional([(1, 2), (1, 3), (1, 4)]) == 1, \"One-to-many\"\nassert     count_bidirectional([(1, 2), (2, 3), (3, 4)]) == 2, \"Many-to-one\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional([])    ==    0, 'Empty list'\nassert     count_bidirectional([('a',), ('b',), ('c',)])    ==    1, 'Basic'\nassert     count_bidirectional([('a',), ('b',), ('c',), ('a',), ('b',)])    ==    3, 'High level'\nassert     count_bidirectional([('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',), ('b',), ('c',), ('a',)"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional(\n            [('Alex', 'Alexson'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Aozora'),\n            ('Michael', 'Michaelson')]) == 4, \"Wrong\"\nassert     count_bidirectional(\n            [('Alex', 'Alexson'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Aozora'),\n            ('Michael', 'Michaelson')]) == 4, \"Wrong\"\nassert     count_bidirectional(\n            [('Alex', 'Alexson'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Aozora'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Alexson')]) == 3, \"Wrong\"\nassert     count_bidirectional(\n            [('Alex', 'Alexson'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Aozora'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Alexson'),\n            ('Michael', 'Michaelson')]) == 3, \"Wrong\"\nassert     count_bidirectional(\n            [('Alex', 'Alexson'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Aozora'),\n            ('Michael', 'Michaelson'),\n            ('Alex', 'Aozora'),\n            ('Michael', 'Michaelson')]) == 2, \"Wrong\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6, \"Wrong result\"\nassert multiple_to_single([1, 2, 3]) == 6, \"Wrong result\"\nassert multiple_to_single([1, 2, 3, 4, 5, 6]) == 120, \"Wrong result\"\nassert multiple_to_single([1, 2, 3, 4, 5, 6, 7]) == 120, \"Wrong result\"\nassert multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8]) == 120, \"Wrong result\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([1,2,3]) == 6, 'Wrong Answer'\nassert multiple_to_single([]) == 0, 'Wrong Answer'\nassert multiple_to_single([1,2,3]) == 6, 'Wrong Answer'\nassert multiple_to_single([1,2,3,4,5,6,7]) == 123, 'Wrong Answer'\nassert multiple_to_single([1,2,3,4,5,6,7,8,9]) == 123456789, 'Wrong Answer'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert multiple_to_single([1,1,1]) == 2\nassert multiple_to_single([9,3,9,3,9]) == 54\nassert multiple_to_single([1,2,3,4,5,6]) == 120\nassert multiple_to_single([0,2,4,6,8,10]) == 24\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6, 'Wrong!'\nassert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 21, 'Wrong!'\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 10, 'Wrong!'\nassert     multiple_to_single([1, 2, 3, 4]) == 6, 'Wrong!'\nassert     multiple_to_single([1]) == 1, 'Wrong!'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1,2,3,4,5,6,7]) == 123,'multiple_to_single Failed'\nassert     multiple_to_single([]) == 0,'multiple_to_single Failed'\nassert     multiple_to_single([1,2,3,4]) == 1234,'multiple_to_single Failed'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([4,5,6]) == 10\nassert     multiple_to_single([7,8,9]) == 27\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([]) == 0, \"TEST 1: True\"\nassert multiple_to_single([1,2]) == 6, \"TEST 2: True\"\nassert multiple_to_single([-1,-2,-3,-4]) == -12, \"TEST 3: True\"\nassert multiple_to_single([-5,-3,-3,-2]) == -7, \"TEST 4: True\"\nassert multiple_to_single([-1,2,-1,1,2,3,2,3,4,5]) == 1234, \"TEST 5: True\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([3,2,1,0]) == 10, 'Not correct'\nassert     multiple_to_single([1,1,1,1]) == 5, 'Not correct'\nassert     multiple_to_single([2,1,1,1]) == 5, 'Not correct'\nassert     multiple_to_single([0,1,1,1]) == 0, 'Not correct'\nassert     multiple_to_single([0,0,0,0,1,1,1,1,1,1,1]) == 11, 'Not correct'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert multiple_to_single([1,2,3,4]) == 10\nassert multiple_to_single([1,2,3,4,5]) == 15\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position('the second came by the tail of the cat') == 'cat'\nassert     find_adverb_position('the third came by the tail of the cat') == 'cat'\nassert     find_adverb_position('the fourth came by the tail of the cat') == 'cat'\nassert     find_adverb_position('the fifth came by the tail of the cat') == 'cat'\nassert     find_adverb_position('the sixth came by the tail of the cat') == 'cat'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position(\"What is the time?\") == (3, 4)\nassert     find_adverb_position(\"How are you\") == (2, 3)\nassert     find_adverb_position(\"I'm very happy\") == (2, 3)\nassert     find_adverb_position(\"The weather\") == (1, 4)\nassert     find_adverb_position(\"What is the weather\") == (0, 4)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('The first adverb was the most successful of the time.') == (0, 7), find_adverb_position('The first adverb was the most successful of the time.')\nassert     find_adverb_position('The first adverb was a good, somewhat successful, but a little uncomfortable.') == (0, 5), find_adverb_position('The first adverb was a good, somewhat successful, but a little uncomfortable.')\nassert     find_adverb_position('The first adverb was not a good, somewhat successful, and a little uncomfortable.') == (0, 5), find_adverb_position('The first adverb was not a good, somewhat successful, and a little uncomfortable.')\nassert     find_adverb_position('The first adverb was the least successful.') == (0, 5), find_adverb_position('The first adverb was the least successful.')\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverb_position(\"The quick brown fox jumped over the lazy dog.\") == 'over'\nassert     find_adverb_position(\"the quick brown fox jumped over the lazy dog.\") == 'over'\nassert     find_adverb_position(\"The quick brown fox jumped over the lazy dog.\") == 'over'\nassert     find_adverb_position(\"The quick brown fox jumped over the lazy dog. The fox over the lazy dog.\") == 'over'\nassert     find_adverb_position(\"The quick brown fox jumped over the lazy dog. The fox over the lazy dog.\") == 'over'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_adverb_position('The quick brown fox jumps over the lazy dog') == {'quick': 0, 'dog': 6}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position('The very best thing about this is that it does not make you laugh.') == (3, 8)\nassert     find_adverb_position('Well, this is the worst place you have ever been in.') == (3, 5)\nassert     find_adverb_position('This is a very good job for me.') == (4, 6)\nassert     find_adverb_position('Please do not be rude.') == (0, 1)\nassert     find_adverb_position('She is very smart.') == (3, 7)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position('Last night, the cat was playing in the garden. ') == 'last'\nassert     find_adverb_position('After the party, the cat was playing in the garden. ') == 'after'\nassert     find_adverb_position('The cat was playing in the garden. ') == None\nassert     find_adverb_position('The cat was playing. ') == None\n\nprint('Tests Passed!')\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position('I like cookies.') == (3, 4)\nassert     find_adverb_position('I love cats and dogs.') == (3, 5)\nassert     find_adverb_position('I like to eat lots of veggies.') == (0, 1)\nassert     find_adverb_position('The sun is blue.') == (1, 2)\nassert     find_adverb_position('My sister loves books.') == (0, 1)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position('') == None, \"should return None\"\nassert find_adverb_position(\"\") == None, \"should return None\"\nassert find_adverb_position(\"adverb\") == None, \"should return None\"\nassert find_adverb_position(\"adverb, in, position\") == None, \"should return None\"\nassert find_adverb_position(\"this, is, a, test sentence\") == None, \"should return None\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(3) == 54\nassert     surfacearea_cube(4) == 56\nassert     surfacearea_cube(5) == 62\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(2) == 8\nassert     surfacearea_cube(3) == 18\nassert     surfacearea_cube(4) == 24\nassert     surfacearea_cube(5) == 30\nassert     surfacearea_cube(6) == 36\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(3) == 8\nassert     surfacearea_cube(4) == 10\nassert     surfacearea_cube(5) == 12\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cube(3) == 48\nassert surfacearea_cube(5) == 132\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1) == 2\nassert     surfacearea_cube(3) == 12\nassert     surfacearea_cube(5) == 50\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(2) == 12, \"Correctness test failed\"\nassert surfacearea_cube(3) == 24, \"Correctness test failed\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(2) == 14\nassert     surfacearea_cube(3) == 42\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cube(1) == 2\nassert surfacearea_cube(3) == 12\n\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     positive_count([1,2,3,4,5]) == 0.5\nassert     positive_count([0,0,0]) == 0\nassert     positive_count([-3,-2,-1]) == 0\nassert     positive_count([]) == 0\n\ndef positive_count_with_nums(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    The function should be given an array with a length of 4.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \npositive_count([1,2,3,-1]) == 0.5\nassert positive_count([1,2,-3]) == 0.5\nassert positive_count([1,2,3,-1,1,1,2,1,3,1,-1,-2,3,1]) == 0.77\nassert positive_count([-1,0,1,-2,-1,-2]) == 0.5\nassert positive_count([-1,-2,0,-1]) == 1\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert positive_count([-1, 1, 2, 3, 4, 5]) == 0.6, \"Wrong result\"\nassert positive_count([0, 1, 2, 3, 4, 5]) == 0.4, \"Wrong result\"\nassert positive_count([10, 1, 2, 3, 4, 5]) == 0.6, \"Wrong result\"\nassert positive_count([0, -1, 2, 3, 4, 5]) == 0.2, \"Wrong result\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     positive_count([1,2,3,4]) == 0.5, 'incorrect'\nassert positive_count([1,2,-3,4]) == 0.75, 'incorrect'\nassert positive_count([1,2,3,4,0]) == 1, 'incorrect'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     positive_count([1,2,-1,4,3,5,-1,6,7,8]) == 0.75, \"Wrong answer\"\nassert     positive_count([-3,-2,-1,4,3,5,-1,6,7,8]) == 0.25, \"Wrong answer\"\nassert     positive_count([1,1,-1,1,1,1,1,1]) == 1, \"Wrong answer\"\n\ndef multiply_by_two(nums):\n    '''\n    Write a function that takes an array of integers and multiplies each item by 2.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to determine whether an integer is a prime number or not.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     positive_count([-1,1,-2,0,1]) == 0.8, 'WRONG!'\nassert positive_count([-1,0,-1,1,1]) == 0.4, 'WRONG!'\nassert positive_count([-1,0,-2,1,1]) == 0.5, 'WRONG!'\nassert positive_count([-1,-2]) == 0, 'WRONG!'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     positive_count([1,2,3,4,5,6,7,8,9,0]) == 5/9\nassert     positive_count([1,-2,3,4,5,-6,7,8,-9,0]) == 8/9\nassert     positive_count([0,-1,-2,-3,-4,-5,-6,-7,-8,9]) == 8/9\nassert     positive_count([-1,0,1,2,3,4,5,6,7,8]) == 1/8\nassert     positive_count([-1,0,1,2,3,4,5,6,7,8,9]) == 0/8\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert positive_count([2,3,4,5,6]) == 1.2\nassert positive_count([-3,-2,-1,0]) == 0.5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_neg([10,-2,3,0]) == 10, 'Tests Failed'\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"Output for largest_neg\")\nprint(largest_neg([-3, -4, -5, -6, -1, -8, -9]))\nprint(largest_neg([-1, -2, -3, -4, -5]))\nprint(largest_neg([-1, -2]))\nprint(largest_neg([-1]))\nprint(largest_neg([]))\n\ndef largest_even(list1):\n    '''\n    Write a python function to find the largest even number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_neg([-4, -6, -2, -5, -3, -10]) == -10, \"Should be -10\"\nassert     largest_neg([-6, -2, -5, -3, -10, -4]) == -4, \"Should be -4\"\nassert     largest_neg([1,2,3,4,5,6]) == 6, \"Should be 6\"\nassert     largest_neg([1,-2,3,4,5,6]) == 6, \"Should be 6\"\nassert     largest_neg([-1,-2,3,4,5,-6]) == -6, \"Should be -6\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_neg([-2, -3, -5, -1]) == -1, \"Wrong answer\"\nassert     largest_neg([-5, -2, -3, -1]) == -1, \"Wrong answer\"\nassert     largest_neg([-2, -3, -5, -1]) == -2, \"Wrong answer\"\nassert     largest_neg([1, 2, -3, -1]) == 2, \"Wrong answer\"\n\nprint(\"Test passed\")\nprint()\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_neg([-4, -3, -2, -1]) == -1 \nassert largest_neg([-4, -3, -2, -1]) == -1 \nassert largest_neg([-4, -3, -2, -1, -5]) == -1 \nassert largest_neg([-4, -3, -2, -1, 5]) == 5 \nassert largest_neg([-4, -3, -2, -1, 1]) == 1 \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_neg([]) == None, 'Input list is empty.'\nassert     largest_neg([-10, -20, -30, -4, -5]) == -30, 'List has a maximum negative number.'\nassert     largest_neg([-10, -20, -30, -4, -5, 10, 20, 30]) == -30, 'List has a maximum negative number.'\nassert     largest_neg([1, -2, -3, -4, -5]) == -5, 'List has a maximum negative number.'\nassert     largest_neg([-1, -2, -3, -4, -5]) == -1, 'List has a maximum negative number.'\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_neg([-2, -5, -2, -3, -7]) == -3\nassert     largest_neg([-2, -5, -2, -3, -7]) == -7\n\nprint('You passed the test')\n\nif __name__ == '__main__':\n    print(largest_neg([-2, -5, -2, -3, -7])"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1,2,3,4), (2,2,2,2,2), (3,3,3,3,3)], 1) ==\\\n    ((1,2,3,4), (2,2,2,2,2), (3,3,3,3,3))\nassert     trim_tuple([(1,2,3,4), (2,2,2,2,2), (3,3,3,3,3)], 2) ==\\\n    ((1,2,3), (2,2,2), (3,3,3,3,3))\nassert     trim_tuple([(1,2,3,4), (2,2,2,2,2), (3,3,3,3,3)], 3) ==\\\n    ((1,2,3), (2,2,2,2), (3,3,3))\nassert     trim_tuple([(1,2,3,4), (2,2,2,2,2), (3,3,3,3,3)], 4) ==\\\n    ((1,2,3,4), (2,2,2,2), (3,3,3,3,3))\nassert     trim_tuple([(1,2,3,4), (2,2,2,2,2), (3,3,3,3,3)], 5) ==\\\n    ((1,2,3,4), (2,2,2,2,2), (3,3,3,3,3))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple(test_list_1, K) == test_list_2\nassert     trim_tuple(test_list_2, K) == test_list_3\n\n'''\nImplement function `my_sort()` to sort a given list in increasing order using lambda.\n'''\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple([], 1) == []\nassert     trim_tuple([(1,2,3)], 1) == [(1,2,3)]\nassert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], 2) == [(1,2,3), (4,5,6)]\nassert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], 3) == [(1,2,3,4,5,6,7,8,9)]\nassert     trim_tuple([(1,2,3), (4,5,6), (7,8,9)], 1) == [(1,2,3)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([[1,2,3],[4,5,6,7],8,9,10], 3) == [[1,2,3],[4,5,6,7],8,9,10]\nassert     trim_tuple([[1,2,3],[4,5,6,7],8,9,10], 2) == [[1,2,3,8,9,10]]\nassert     trim_tuple([[1,2,3,4],[5,6,7,8],9,10], 2) == [[1,2,3,4,9,10]]\nassert     trim_tuple([[1,2,3,4,5],[6,7,8,9,10],11,12,13], 3) == [[1,2,3,4,5],[6,7,8,9,10]]\nassert     trim_tuple([[1,2,3,4,5,6],[7,8,9,10,11,12],13,14], 4) == [[1,2,3,4,5,6],[7,8,9,10,11,12]]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple([('apple', 1, 2, 3, 4, 5, 6, 7), ('orange', 3)], 4) == \\\n    [('apple', 1, 2, 3, 4, 5, 6, 7), ('orange', 3)]\nassert     trim_tuple([('apple', 1, 2, 3, 4, 5, 6, 7), ('orange', 3)], 5) == \\\n    [('apple', 1, 2, 3, 4, 5, 6, 7)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 1) ==\\\n        [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 2) ==\\\n        [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 3) ==\\\n        [(1, 2), (2, 3), (3, 4)]\nassert trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 4) ==\\\n        [(1, 2), (2, 3), (3, 4)]\nassert trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 5) ==\\\n        [(1, 2), (2, 3), (3, 4)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ntest_list = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3)]\ntrim_tuple(test_list, 1)\n\n\ndef trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple(\n    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ],\n    k = 1\n) ==    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ]\n    \nassert    trim_tuple(\n    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ],\n    k = 2\n) ==    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ]\n    \nassert    trim_tuple(\n    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ],\n    k = 3\n) ==    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ]\n    \nassert    trim_tuple(\n    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ],\n    k = 4\n) ==    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ]\n    \nassert    trim_tuple(\n    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ],\n    k = 5\n) ==    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"e\", 5),\n        (\"f\", 6),\n        (\"g\", 7)\n    ]\n    \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([[1, 2, 3, 4, 5], 2], 2) == [[1, 2, 3, 4, 5], 3]\nassert     trim_tuple([[1, 2, 3, 4, 5], 2], 1) == [[1, 2, 3, 4, 5]]\nassert     trim_tuple([[1, 2, 3, 4, 5], 1], 1) == [[1, 2, 3, 4, 5]]\nassert     trim_tuple([[1, 2, 3, 4, 5], 1], 0) == [[1, 2, 3, 4, 5]]\nassert     trim_tuple([[1, 2, 3, 4, 5], 1], 5) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    (index_multiplication((1,2,3), (2,3,4))) == (2,4,6)\nassert \n    (index_multiplication((0,3,5), (7,8,9))) == (0,20,27)\n\n\ndef data_normalization(dataset):\n    '''\n    Write a function to normalize the given dataset using the following logic:\n        1. Get the minimum and maximum values from the dataset\n        2. Calculate the range by subtracting the minimum from the maximum\n        3. Multiply the range by 0.1\n        4. Divide the dataset values by the range\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == ((1*4)*5)*6\nassert     index_multiplication((1,2,3),(4,5,6)) == ((1*4)*5)*6\nassert     index_multiplication((1,2),(3,4,5)) == ((1*3)*4)*5\nassert     index_multiplication((1,2),(3,4,5)) == ((1*3)*4)*5\nassert     index_multiplication((3,4,5),(1,2,3)) == ((3*1)*2)*3\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1 * test_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication((1,2),(3,4)) == (3,8), 'index_multiplication((1,2),(3,4))!= (3,8)'\nassert     index_multiplication((-1,-1),(3,4)) == (-4,-8), 'index_multiplication((-1,-1),(3,4))!= (-4,-8)'\nassert     index_multiplication((4,2),(3,4)) == (8,10), 'index_multiplication((4,2),(3,4))!= (8,10)'\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication((1,2,3), (4,5,6)) == (4,10,18), \"Index-wise multiplication should be (4, 10, 18)\"\nassert index_multiplication((5,6,7), (8,9,10)) == (30,36,42), \"Index-wise multiplication should be (30, 36, 42)\"\nassert index_multiplication((3,2,1), (4,5,6)) == (24,30,36), \"Index-wise multiplication should be (24, 30, 36)\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication( (10, 20), (30, 40) ) == (1000, 2000)\nassert index_multiplication( (10, 20), (30, 40, 50) ) == (1000, 2000, 3000)\nassert index_multiplication( (10, 20), (30, 40) ) == (1000, 2000)\n\n\n\ndef max_number_of_instances(test_tup1, test_tup2):\n    '''\n    Write a function to find the maximum number of instances of a given number in two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ixmltup(t1, t2) == (10, 12, 14, 16, 18, 20)\nassert ixmltup(t3, t4) == (5, 6, 7, 8, 9)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nif __name__ == '__main__':\n    arr1 = (1, 2, 3)\n    arr2 = (4, 5, 6)\n    assert index_multiplication(arr1, arr2) == (4, 10, 18"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Occurrence((1, 2, 3, 1, 2, 3), [1, 2, 3]) == 3, \"it is not correct\"\nassert     count_Occurrence((1, 2, 3, 1, 2, 3), (1, 2, 3)) == 2, \"it is not correct\"\n\nprint('\\ncheck the correctness of count_Occurrence')\n\n\n\ndef is_symmetric(lst):\n    '''\n    Write a python function to check whether the given list is symmetric.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('\\n', count_Occurrence((1, 1, 2, 3), ['a', 'b', 'a', 'd']))\nprint('\\n', count_Occurrence(('a', 'b', 'a', 'd'), ['a', 'b', 'a', 'd']))\nprint('\\n', count_Occurrence((1, 1, 2, 3), ['a', 'b', 'a', 'd'])) == Counter({'a': 3, 'b': 2, 'd': 1})\n\nprint('\\n', count_Occurrence((1, 1, 2, 3), ['a', 'b', 'a', 'd']))\nprint('\\n', count_Occurrence(('a', 'b', 'a', 'd'), ['a', 'b', 'a', 'd']))\nprint('\\n', count_Occurrence((1, 1, 2, 3), ['a', 'b', 'a', 'd'])) == Counter({'a': 3, 'b': 2, 'd': 1})\n\nprint('\\n', count_Occurrence(('a', 'b', 'a', 'd'), ['a', 'b', 'a', 'd']))\nprint('\\n', count_Occurrence(('a', 'b', 'a', 'd'), ['a', 'b', 'a', 'd']))\nprint('\\n', count_Occurrence(('a', 'b', 'a', 'd'), ['a', 'b', 'a', 'd'])) == Counter({'a': 3, 'b': 2, 'd': 1})\n\ndef check_Equality(a, b):\n    '''\n    Write a python function to check the equality of 2 tuples.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_Occurrence(lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = []\n    count_occ = []\n    for i in range(0, len(lst)):\n        lst_count.append(lst.count(lst[i]))\n    for i in range(0, len(lst)):\n        count_occ.append(lst_count[i]/len(lst))\n    return count_occ\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncount_Occurrence(('a','a','b'), ['a','b','a','a','b']) == Counter('a')\ncount_Occurrence(('a','a','b'), ['a','b','a','a','b']) == Counter('a')\ncount_Occurrence(('a','a','b'), ['a','a','b','a','b']) == Counter('a')\ncount_Occurrence(('a','a','b'), ['a','a','b','a','b','b']) == Counter('a')\ncount_Occurrence(('a','a','b'), ['a','a','b','a','b','a']) == Counter('a')\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_Occurrence((2,4,4,4),(3,4,4,4)) == (1,1)\ncount_Occurrence((2,4,4,4),(3,4,4,4,4)) == (2,2)\ncount_Occurrence((2,4,4,4),(2,3,4,4,4,4)) == (2,4)\ncount_Occurrence((2,4,4,4),(2,4,4,4,4)) == (1,1)\ncount_Occurrence((2,4,4,4),(2,4,4,4,4,5,5)) == (2,4)\ncount_Occurrence((2,4,4,4,4),(2,4,4,4,4)) == (2,2)\ncount_Occurrence((2,4,4,4,4),(2,4,4,4,4,4)) == (1,1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef missing_occurences(lst):\n    '''\n    Write a python function to find the missing occurence of elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Occurrence((1,3,4,5,2,4), [1,3,4,5]) == 3\nassert     count_Occurrence((1,3,4,5,2,4), [1,3,4,5,2,5]) == 5\nassert     count_Occurrence((1,3,4,5,2,4), [1,2,3,4,5,4]) == 4\nassert     count_Occurrence((1,3,4,5,2,4), [1,2,3,4,5,5]) == 5\nassert     count_Occurrence((1,3,4,5,2,4), [1,2,3,4,5]) == 5\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncube_nums([]) == []\ncube_nums([1]) == [1]\ncube_nums([2]) == [8]\ncube_nums([4, 2]) == [64, 8]\ncube_nums([3, 2]) == [27, 8]\ncube_nums([3, 5, 4]) == [405, 64, 256]\ncube_nums([6, 4, 3, 2]) == [1036, 64, 4096, 16384]"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_nums([1,2,3,4]) == [1,4,27,64]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_nums(['x', 2]) == [0, 8], 'Wrong Cube of x'\nassert     cube_nums(['x', 0, -2]) == [0, 0, 8], 'Wrong Cube of x'\nassert     cube_nums(['x', 1, -3]) == [0, 1, 27], 'Wrong Cube of x'\nassert     cube_nums(['x', 2, 4]) == [0, 8, 64], 'Wrong Cube of x'\nassert     cube_nums(['x', 1, 0]) == [0, 1, 1], 'Wrong Cube of x'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\nassert cube_nums([-1, -2, -3, -4]) == [-1, -8, -27, -64]\nassert cube_nums([-2, -3, -4, -5]) == [-4, -27, -64, -125]\n\nprint('You are all set!'"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert     cube_nums([-1, 0, 1, -2, 0]) == [-1, 0, 1, 64, 256]\n\ndef is_sublist(sub, list_in):\n    '''\n    Write a function to check if sub is a sublist of list_in.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 27, 64, 125, 216, 343, 512]\n\n\ndef move_zeros(lst):\n    '''\n    Write a function to move all zeros to the end of given array and return \n    the length of the modified array.\n    '''\n    # write your solution here\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncube_nums([1, 2, 3]) == [1, 8, 27], \"Wrong\"\nassert \ncube_nums([0, 3, 9]) == [0, 27, 81], \"Wrong\"\nassert \ncube_nums([-1, -2, -3]) == [-1, -8, -27], \"Wrong\"\nassert cube_nums([]) == [], \"Wrong\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_nums([-1, 0, 1, 8, 9]) == [0, 1, 8, 81, 81]\n\ndef has_duplicates(s):\n    '''\n    Write a function to check if a string has any duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([]) == []\nassert    cube_nums([0, -1, 2]) == [0, 8, 100]\n\nprint('Passed cubes test')\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef cal_average(n):\n    '''\n    Write a function to calculate the average of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncal_sum(4) == 10\ncal_sum(20) == 55\ncal_sum(0) == 0\ncal_sum(-1) == 0\ncal_sum(-2) == 0\ncal_sum(-100) == 0\ncal_sum(-101) == 0\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert cal_sum(100) == 2550\nassert cal_sum(100000) == 255050\nassert cal_sum(1000000) == 2550505"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nCatching Exceptions\n'''\ntry:\n    print('hello')\nexcept Exception as e:\n    print('something wrong')\n\ntry:\n    print('hello')\nexcept Exception as e:\n    print('something wrong')\nelse:\n    print('Good job')\n\ntry:\n    print('hello')\nexcept Exception as e:\n    print('something wrong')\nfinally:\n    print('This block will be excuted either when an error occur or not')\n    print('so put a code in else block')\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncal_sum(100) == 5050\ncal_sum(1000) == 5050\ncal_sum(10000) == 50050\ncal_sum(100000) == 50050\ncal_sum(1000000) == 5000050\n\nprint('tests passed')\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('PASSED') if cal_sum(2) == 3 else print('FAILED')\nassert cal_sum(10) == 55\nassert cal_sum(100) == 550\nassert cal_sum(1000) == 5600\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert 0 == 1\nassert cal_sum(1) == 1\nassert cal_sum(2) == 3\nassert cal_sum(10) == 55\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i \n    return sum \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string(['hello', 'james'], 2) == ['h', 'j']\nassert     extract_string(['hello', 'james', 'paul'], 2) == ['h', 'j', 'p']\nassert     extract_string(['hello', 'james', 'paul'], 3) == ['h', 'j', 'p']\n\ndef extract_string_list(str_list, n):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_string(['one', 'two', 'three'], 2) == ['on', 'e']\nassert     extract_string(['one', 'two', 'three'], 3) == ['one', 'two', 'th']\nassert     extract_string(['one', 'two', 'three'], 1) == ['o', 'e', 'n']\nassert     extract_string(['one', 'two', 'three'], 0) == []\nassert     extract_string(['one', 'two', 'three'], 4) == ['o', 'e']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string([\"abb\",\"aba\",\"aaa\",\"aaaaa\"], 5) == \"aabaaa\"\nassert     extract_string([\"abb\",\"aba\",\"aaa\",\"aaaaa\"], 1) == \"aaaaa\"\nassert     extract_string([\"abb\",\"aba\",\"aaa\",\"aaaaa\"], 10) == \"aaaaa\"\nassert     extract_string([\"abb\",\"aba\",\"aaa\",\"aaaaa\"], 2) == \"aba\"\nassert     extract_string([\"abb\",\"aba\",\"aaa\",\"aaaaa\"], 3) == \"aba\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string([\"this\",\"is\",\"a\",\"list\",\"of\",\"string\"], 4) == \"ist\"\nassert     extract_string([\"this\",\"is\",\"a\",\"list\",\"of\",\"string\"], 1) == \"is\"\nassert     extract_string([\"this\",\"is\",\"a\",\"list\",\"of\",\"string\"], 0) == \"\"\nassert     extract_string([\"this\",\"is\",\"a\",\"list\",\"of\",\"string\"], 5) == \"\"\nassert     extract_string([\"this\",\"is\",\"a\",\"list\",\"of\",\"string\"], -2) == \"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_string([\"a\", \"b\", \"c\"], 2) == [\"a\", \"b\"]\nassert     extract_string([\"a\", \"b\", \"c\"], 0) == []\nassert     extract_string([\"a\", \"b\", \"c\"], 3) == [\"a\", \"b\", \"c\"]\nassert     extract_string([\"a\", \"b\", \"c\", \"d\"], 2) == [\"a\", \"b\", \"c\"]\nassert     extract_string([\"a\", \"b\", \"c\", \"d\"], 3) == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_string(['a', 'b', 'c', 'd', 'e'], 2) == ['a', 'c']\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 3) == ['b', 'd']\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 4) == ['c', 'e']\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 5) == ['a', 'b', 'e']\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 6) == ['c', 'd']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_string('', 10) == ''\nassert     extract_string('abcdefghijklmn', 10) == 'abcdefghijklmn'\nassert     extract_string('abcdefghijklmn', 5) == 'abcde'\nassert     extract_string('abcdefghijklmn', 0) == ''\nassert     extract_string('abcdefghijklmn', -10) == ''\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string(['Hello', 'World'], 0) == []\nassert     extract_string(['Hello', 'World'], 1) == ['World']\nassert     extract_string(['Hello', 'World'], 2) == ['World']\nassert     extract_string(['Hello', 'World'], 3) == ['World']\n\ndef make_chicken_fried():\n    '''\n    Write a function that accepts a list of strings and returns a new list that\n    contains only the strings that are common to all the strings in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    extract_string([\"hello\", \"there\"], 10) == [\"hello\", \"there\"]\n    assert \n        extract_string([\"hello\", \"there\"], 5) == [\"hello\", \"there\"]\n    assert \n        extract_string([\"hello\", \"there\"], 4) == [\"hello\", \"there\"]\n    assert \n        extract_string([\"hello\", \"there\"], 0) == [\"hello\", \"there\"]\n    assert \n        extract_string([], 0) == []\n    "
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces('     ') == '', \"The function should remove whitespaces\"\nassert     remove_whitespaces('\\n\\r\\t') == '', \"The function should remove whitespaces\"\nassert     remove_whitespaces('\\n\\t') == '', \"The function should remove whitespaces\"\nassert     remove_whitespaces('     ') == '', \"The function should remove whitespaces\"\n\ndef remove_multiple_whitespaces(text1):\n    '''\n    Write a function to remove multiple whitespaces from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\"  \") == \"\", \"Expected: \", \"\", \nassert remove_whitespaces(\" \") == \"\", \"Expected: \", \"\", \nassert remove_whitespaces(\"\") == \"\", \"Expected: \", \"\", \nassert remove_whitespaces(\"  \\n\") == \"\", \"Expected: \", \"\", \nassert remove_whitespaces(\"h\") == \"h\", \"Expected: \", \"\", \n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_whitespaces(\" \") == \"\"\nassert remove_whitespaces(\"   \") == \"\"\nassert remove_whitespaces(\" \" + \"\\n\" + \"  \") == \"\"\nassert remove_whitespaces(\" \" + \"\\n\" + \"    \") == \"\"\nassert remove_whitespaces(\"\\t\\n  \") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_whitespaces('  ') == '','remove_whitespaces: failed'\nassert     remove_whitespaces('ab') == 'ab','remove_whitespaces: failed'\nassert     remove_whitespaces('ab ') == 'ab','remove_whitespaces: failed'\nassert     remove_whitespaces('ab\\t') == 'ab','remove_whitespaces: failed'\nassert     remove_whitespaces('ab\\n') == 'ab','remove_whitespaces: failed'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_whitespaces(\"         Hello  World  \") == \"Hello World\"\nassert     remove_whitespaces(\" hello   world\") == \"hello world\"\nassert     remove_whitespaces(\"     hello   world\") == \"hello world\"\nassert     remove_whitespaces(\"  hello   world\") == \"hello world\"\nassert     remove_whitespaces(\"   hello   world\") == \"hello world\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces('') == '', 'incorrect'\nassert     remove_whitespaces(' ') == '', 'incorrect'\nassert     remove_whitespaces('this is a ') == 'this is a', 'incorrect'\nassert     remove_whitespaces('this is a     ') == 'this is a', 'incorrect'\nassert     remove_whitespaces('this is a     ') == 'this is a', 'incorrect'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert remove_whitespaces('') == ''\nassert remove_whitespaces(' ') == ''\nassert remove_whitespaces('a') == 'a'\nassert remove_whitespaces(' hello world ') =='hello world '\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces(\"     hi     \") == \"hi\"\nassert     remove_whitespaces(\"Hi\") == \"Hi\"\n\ndef remove_newlines(text2):\n    '''\n    Write a function to remove all new lines from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"       \") == \"\", \"whitespaces are not removed\"\nassert     remove_whitespaces(\" Hello World\") == \"Hello World\", \"whitespaces are not removed\"\nassert     remove_whitespaces(\"  hello world\") == \"hello world\", \"whitespaces are not removed\"\nassert     remove_whitespaces(\"This string has\\nwhite spaces.\") == \"This string has white spaces.\", \"whitespaces are not removed\"\nassert     remove_whitespaces(\"This string has\\twhite spaces.\") == \"This string has white spaces.\", \"whitespaces are not removed\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(' ') == ''\nassert     remove_whitespaces('  ') == ''\nassert     remove_whitespaces('\\t\\n\\r') == ''\nassert     remove_whitespaces('\\t\\n\\r\\n') == ''\nassert     remove_whitespaces('\\t\\n\\r\\n \\t\\n') == ''\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(50,40) == 0, \"Wrong Answer\"\nassert    loss_amount(50,50) == 20, \"Wrong Answer\"\nassert    loss_amount(50,10) == 10, \"Wrong Answer\"\nassert    loss_amount(50,11) == 21, \"Wrong Answer\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nactual_cost=float(input('Enter the actual cost of the item '))\nsale_amount=float(input('Enter the sale amount'))\n\nloss_amount(actual_cost,sale_amount)\n\nprint(loss_amount(actual_cost,sale_amount))\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(5,3) == 2, f'actual result: {loss_amount(5,3)}'\nassert     loss_amount(5,2) == 1, f'actual result: {loss_amount(5,2)}'\n\ndef loss_percentage(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss percentage on a sale if the given amount has loss else return 0.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(50,10) == 0, 'wrong'\nassert     loss_amount(40,10) == 10, 'wrong'\nassert     loss_amount(100,10) == 10, 'wrong'\nassert     loss_amount(110,10) == 10, 'wrong'\nassert     loss_amount(0,10) == 0, 'wrong'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(10, 10) == 0\nassert     loss_amount(10, 10.1) == 0.1\nassert     loss_amount(100, 99) == 1\nassert     loss_amount(100, 100.1) == 0\nassert     loss_amount(100, 101) == 1.1\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     loss_amount(100,10) == 0, 'incorrect'\nassert     loss_amount(20,10) == 10, 'incorrect'\nassert     loss_amount(10,10) == 10, 'incorrect'\nassert     loss_amount(30,15) == 5, 'incorrect'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(100,10) == 90\nassert     loss_amount(100,5) == 95\nassert     loss_amount(100,50) == 60\n\nprint(\"  Test case passed \\n\")\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(100.0,10.0) == 0\nassert     loss_amount(100.0,99.0) == 0\nassert     loss_amount(100.0,100.0) == 0\nassert     loss_amount(100.0,101.0) == 10\nassert     loss_amount(100.0,999.0) == 100\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(100,50) == 50\nassert     loss_amount(200,100) == 0\nassert     loss_amount(100,100) == 0\n\nprint('You are done with loss_amount function')\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(100, 20) == 0, \"Expected: 0.0\"\nassert     loss_amount(100, 200) == 40, \"Expected: 40.0\"\nassert     loss_amount(100, 300) == 70, \"Expected: 70.0\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sumofFactors(2) == 2 \nassert     sumofFactors(4) == 0 \nassert     sumofFactors(12) == 6 \nassert     sumofFactors(10) == 2 \nassert     sumofFactors(6) == 1\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef fact(n) :\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sumofFactors(12) == 6\nassert     sumofFactors(24) == 8\n\ndef divisible(num):\n    '''\n    Write a python function to check whether a given number is divisible by another number or not.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sumofFactors(5) == 2 \nassert     sumofFactors(12) == 12 \nassert     sumofFactors(65) == 12 \nassert     sumofFactors(17) == 6 \nassert     sumofFactors(23) == 4 \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sumofFactors(8) == 4, \"Test case 1 failed\"\nassert     sumofFactors(3) == 3, \"Test case 2 failed\"\nassert     sumofFactors(50) == 19, \"Test case 3 failed\"\nassert     sumofFactors(8) == 0, \"Test case 4 failed\"\nassert     sumofFactors(2) == 0, \"Test case 5 failed\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sumofFactors(9) == 9,'Wrong Output'\nassert     sumofFactors(99) == 98,'Wrong Output'\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sumofFactors(6) == 2, \"sumofFactors function is not working as expected\"\nassert     sumofFactors(12) == 6, \"sumofFactors function is not working as expected\"\nassert     sumofFactors(99) == 14, \"sumofFactors function is not working as expected\"\n\ndef sumofFactors1(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(2, n + 1) :\n        if (n % i == 0) :\n            res += i\n    return res\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sumofFactors(n): \n    if n == 0 : \n        return 0\n    sum = 0\n    while n % 2 == 0 : \n        sum += n\n        n = n / 2\n    \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sumofFactors(1) == 1\nassert     sumofFactors(2) == 1\nassert     sumofFactors(12) == 2\nassert     sumofFactors(24) == 2\nassert     sumofFactors(25) == 3\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sumofFactors(3) == 0\nassert sumofFactors(4) == 0\nassert sumofFactors(8) == 4\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a function that matches a word containing 'z'.\n\nNote:\n\nReturn the position of the match in the text. If no match is found, return -1.\n\nNote that the matches can overlap. If that is the case, return the later occurrence.\n'''\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz('apples') == True\nassert     text_match_wordz('appl') == False\nassert     text_match_wordz('applz') == False\nassert     text_match_wordz('apples z') == False\nassert     text_match_wordz('apples a') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz('zebra')\nassert not text_match_wordz('zebra')\nassert     text_match_wordz('zebra')\nassert not text_match_wordz('zebra')\n\ndef text_match_wordz_2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz(    'I like cats and dogs.') == True\nassert     text_match_wordz(    'I like cats and dogs and cats.') == True\nassert     text_match_wordz(    'I like cats and dogs and cats.') == True\nassert     text_match_wordz(    'I like cats and dogs and cats.') == True\nassert     text_match_wordz(    'I like cats and dogs and cats.') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntext_match_wordz('The quick zebra jumps over the lazy dog.') == True\nassert \ntext_match_wordz('The quick dog jumps over the lazy zebra.') == False\nassert \ntext_match_wordz('The quick brown fox jumps over the lazy fox.') == True\nassert \ntext_match_wordz('The quick brown fox jumps over the lazy dog.') == False\nassert \ntext_match_wordz('The lazy fox jumps over the quick brown dog.') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz('the zebra') == True\nassert     text_match_wordz('the zebra zebra') == True\nassert     text_match_wordz('the zebra zebra zebra') == False\nassert     text_match_wordz('the zebra') == False\nassert     text_match_wordz('the zebra zebra') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz(\"zebra\") == True\nassert     text_match_wordz(\"penguin\") == True\nassert     text_match_wordz(\"saltwater\") == True\nassert     text_match_wordz(\"penguins\") == False\nassert     text_match_wordz(\"saltwater\") == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz(\"iz\") == \"true\"\nassert     text_match_wordz(\"ziz\") == \"false\"\nassert     text_match_wordz(\"zizz\") == \"false\"\nassert     text_match_wordz(\"zizzz\") == \"false\"\nassert     text_match_wordz(\"zizzzz\") == \"false\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz('The quick zebra jumps over the lazy dog') == True, 'incorrect'\nassert     text_match_wordz('The quick dog jumps over the zebra') == False, 'incorrect'\nassert     text_match_wordz('The dog quick zebra jumps over the lazy fox') == False, 'incorrect'\nassert     text_match_wordz('The dog quick fox jumps over the lazy zebra') == False, 'incorrect'\nassert     text_match_wordz('The dog jumps quick zebra over the lazy fox') == False, 'incorrect'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(12) == False, \"Passed\"\nassert     check_monthnumb_number(13) == True, \"Passed\"\nassert     check_monthnumb_number(2) == False, \"Passed\"\nassert     check_monthnumb_number(3) == True, \"Passed\"\n\nprint(\"\\n1. Passed\")\nprint(\"2. Passed\")\nprint(\"3. Passed\")\nprint(\"4. Passed\")\nprint(\"5. Passed\")\nprint(\"6. Passed\")\nprint(\"7. Passed\")\nprint(\"8. Passed\")\nprint(\"9. Passed\")\nprint(\"10. Passed\")\nprint(\"11. Passed\")\nprint(\"12. Passed\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(2) == False, \"2 not containing 31 days\"\nassert     check_monthnumb_number(2) == True, \"2 containing 31 days\"\nassert     check_monthnumb_number(12) == True, \"12 containing 31 days\"\nassert     check_monthnumb_number(1) == False, \"1 not containing 31 days\"\nassert     check_monthnumb_number(31) == True, \"31 days containing 31 days\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    assert check_monthnumb_number(3) == True\n    assert check_monthnumb_number(7) == False\n    assert check_monthnumb_number(9) == True\n    assert check_monthnumb_number(11) == True\n    "
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(3) == True\nassert     check_monthnumb_number(4) == False\nassert     check_monthnumb_number(5) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"\\n-----------------------------------\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(13) == True, 'It should be True'\nassert     check_monthnumb_number(10) == False, 'It should be False'\nassert     check_monthnumb_number(11) == True, 'It should be True'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(1) == True, '1st case: no 31 days in 1st month'\nassert     check_monthnumb_number(4) == True, '4th case: 31 days in 4th month'\nassert     check_monthnumb_number(9) == False, '9th case: no 31 days in 9th month'\nassert     check_monthnumb_number(21) == False, '21st case: no 31 days in 21st month'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(3) == True, \"The return value must be True\"\nassert     check_monthnumb_number(12) == True, \"The return value must be True\"\nassert     check_monthnumb_number(5) == False, \"The return value must be False\"\n\ndef check_day_number(daynumb2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(31) == True, \"check_monthnumb_number function returns wrong value\"\nassert     check_monthnumb_number(32) == False, \"check_monthnumb_number function returns wrong value\"\nassert     check_monthnumb_number(9) == False, \"check_monthnumb_number function returns wrong value\"\nassert     check_monthnumb_number(-1) == False, \"check_monthnumb_number function returns wrong value\"\nassert     check_monthnumb_number(\"s\") == False, \"check_monthnumb_number function returns wrong value\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_string_list(['a', 'b', 'c']) == 'cba'\nassert     reverse_string_list(['hi', 'hello', 'hey']) == 'heyhello'\nassert     reverse_string_list(['one', 'two', 'three']) == 'threeoneto'\nassert     reverse_string_list(['a']) == 'a'\nassert     reverse_string_list(['']) == ''\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         reverse_string_list([]) == []\nassert         reverse_string_list([1, 2]) == [2, 1]\nassert         reverse_string_list([\"a\", \"b\"]) == [\"b\", \"a\"]\nassert         reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"]\n\ndef add_list_elements(list1, list2):\n    '''\n    Write a function to add the elements of list2 to list1.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_string_list([\"hello\", \"world\", \"!\", \"hello\", \"hi\", \"bye\"]) == [\"!\", \"bye\", \"hello\", \"hi\", \"hello\", \"world\"]\nassert     reverse_string_list([\"hello\", \"world\", \"!\", \"hello\", \"hi\", \"hi\"]) == [\"!\", \"hello\", \"hi\", \"hi\", \"world\", \"world\"]\nprint(\"check 1: PASS\")\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_string_list([1, 2, 3]) == [3, 2, 1], 'Failed'\nassert     reverse_string_list([1, 2, 3, 4]) == [4, 3, 2, 1], 'Failed'\nassert     reverse_string_list([]) == [], 'Failed'\nassert     reverse_string_list(['1', '2', '3']) == ['3', '2', '1'], 'Failed'\nassert     reverse_string_list(['1', '2', '3', '4']) == ['4', '3', '2', '1'], 'Failed'\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_string_list(['hi', 'hello', 'goodbye', 'good']) == ['goodbye', 'hello', 'good', 'hi']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\n\n'''\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list(['a', 'c', 'b', 'd', 'e']) == ['e', 'd', 'b', 'c', 'a']\nassert     reverse_string_list([1,2,3,4,5]) == [5, 4, 3, 2, 1]\nassert     reverse_string_list(['a','c','b','d','e']) == ['e','d','c','b','a']\nassert     reverse_string_list([]) == []\nassert     reverse_string_list([1,2]) == [2,1]\nprint('Tests pass!')\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list(['ABC','DEF']) == ['DEF','ABC']\nassert reverse_string_list(['ABC']) == ['ABC']\nassert reverse_string_list([]) == []\nassert reverse_string_list(['a']) == ['a']\nassert reverse_string_list([]) == []\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_string_list([\"aditya\", \"sivaraj\"]) == ['sivaraj', 'aditya']\nassert     reverse_string_list([\"key\", \"ey\"]) == ['ey', 'key']\nassert     reverse_string_list([\"new\", \"day\"]) == ['day', 'new']\nassert     reverse_string_list([\"key\"]) == ['key']\nassert     reverse_string_list([]) == []\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_string_list([\"abcd\", \"efgh\", \"ijk\"]) == [\"ijk\", \"efgh\", \"abcd\"]\nassert     reverse_string_list([\"hi\", \"ho\", \"lo\"]) == [\"lo\", \"ho\", \"hi\"]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     Find_Min([1,2,3,4,5,6,7]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min([1,2,3,4,5,6]) == 1, \"Failed 1\"\nassert     Find_Min([1,2,3,4,5,6,6]) == 6, \"Failed 2\"\nassert     Find_Min([1,2,3,4,5,6,7]) == 1, \"Failed 3\"\nassert     Find_Min([1,2,3,4,5,6,7,7]) == 7, \"Failed 4\"\nassert     Find_Min([1,2,3,4,5,6,7,8]) == 1, \"Failed 5\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min([1,2,3]) == 2\nassert     Find_Min([1,2,3,4]) == 3\nassert     Find_Min([1,2,3,4,4,5,6]) == 4\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min([2, 1, 3, 2]) == 2\nassert     Find_Min([2, 1, 3]) == 2\nassert     Find_Min([2, 1, 2, 2, 3]) == 2\nassert     Find_Min([2, 1, 2, 3]) == 2\nassert     Find_Min([2, 1, 2, 2, 2]) == 2\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min([[1, 2], [2, 1], [1, 1]]) == [[1, 1]], 'WRONG!'\nassert     Find_Min([[1, 2], [2, 1], [2, 1]]) == [[2, 1]], 'WRONG!'\nassert     Find_Min([[1, 2], [2, 1], [3, 1]]) == [[1, 1]], 'WRONG!'\nassert     Find_Min([[1, 2], [2, 1], [1, 1], [1, 1]]) == [[1, 1]], 'WRONG!'\nassert     Find_Min([[1, 2], [1, 2], [1, 2]]) == [[1, 2]], 'WRONG!'\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min([[], [1,2], [1,2], [1], []]) == []\nassert     Find_Min([[], [1,2], [1,2], [1], [1,2], []]) == [1, 2]\nassert     Find_Min([[], [1,2], [1,2], [1], [2], []]) == [1,2]\nassert     Find_Min([[], [1,2], [1,2], [1], [1,2], [1,2,3]]) == [1,2]\nassert     Find_Min([[], [1,2], [1,2], [1], [2], []]) == [1,2]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [1, 2, 3, 4, 5, 6, 7]\nassert     Find_Min([2, 1, 3, 4, 5, 6, 7, 8, 9]) ==     [1, 2, 3, 4, 5, 6, 7, 8]\nassert     Find_Min([3, 1, 2, 5, 6, 7, 8, 9]) ==     [1, 2, 3, 5, 6, 7, 8]\nassert     Find_Min([4, 1, 2, 3, 5, 6, 7, 8, 9]) ==     [1, 2, 3, 4, 5, 6, 7]\nassert     Find_Min([5, 1, 2, 3, 4, 6, 7, 8, 9]) ==     [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rectangle_area(5,8) == 20\nassert     rectangle_area(6,9) == 45\nassert     rectangle_area(9,6) == 45\nassert     rectangle_area(8,9) == 20\nassert     rectangle_area(6,8) == 20\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(2,5) == 10, \"rectangle_area(2,5) = 10\"\nassert     rectangle_area(2,3) == 6, \"rectangle_area(2,3) = 6\"\nassert     rectangle_area(1,1) == 1, \"rectangle_area(1,1) = 1\"\nassert     rectangle_area(3,5) == 15, \"rectangle_area(3,5) = 15\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rectangle_area(2,3) == 6\nassert     rectangle_area(3,2) == 6\nassert     rectangle_area(3,3) == 6\nassert     rectangle_area(2,5) == 10\nassert     rectangle_area(4,1) == 4\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(2,3) == 6\nassert     rectangle_area(10,5) == 100\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(10,5) == 50, \"Wrong area\"\nassert rectangle_area(20,7) == 105, \"Wrong area\"\nassert rectangle_area(8,6) == 56, \"Wrong area\"\nassert rectangle_area(3,8) == 18, \"Wrong area\"\nassert rectangle_area(3,3) == 9, \"Wrong area\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rectangle_area(2,2) == 4\nassert     rectangle_area(2,3) == 6\nassert     rectangle_area(1,1) == 1\nassert     rectangle_area(0,0) == 0\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_uppercase(\"\")    == \"\"\nassert     remove_uppercase(\"Hi\")    == \"\"\nassert     remove_uppercase(\"HI\")    == \"\"\nassert     remove_uppercase(\"   HI   \")    == \"\"\nassert     remove_uppercase(\"Hi Hi\")    == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_uppercase(\"hello\") == \"hll\"\nassert     remove_uppercase(\"HELLO\") == \"hll\"\nassert     remove_uppercase(\"Helloworld\") == \"hll\"\nassert     remove_uppercase(\"I love my world\") == \"ivorl\"\nassert     remove_uppercase(\"I love my self\") == \"ivorl\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #Remove all the uppercase substrings from a given string\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert remove_uppercase('') == ''\nassert remove_uppercase('HeLLo') == 'hello'\nassert remove_uppercase('HeLLo  ') == 'hello'\nassert remove_uppercase('HELLO') == 'hello'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"S\") == \"S\"\nassert     remove_uppercase(\"B\") == \"B\"\nassert     remove_uppercase(\"S\") == \"S\"\nassert     remove_uppercase(\"R\") == \"R\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef replace_letters(str1):\n    '''\n    Write a function to replace letters in a given string with lowercase letters.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"A\") == \"A\"\nassert     remove_uppercase(\"A B\") == \"AB\"\nassert     remove_uppercase(\"ABC\") == \"ABC\"\nassert     remove_uppercase(\"ABc\") == \"ABc\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"A\") == \"\"\nassert     remove_uppercase(\"abcABC\") == \"abc\"\nassert     remove_uppercase(\"ABCabc\") == \"abc\"\nassert     remove_uppercase(\"ABCabcABC\") == \"abc\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_uppercase('sTRiNg') =='string'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_uppercase('test') == 'test', \"Testing for remove_uppercase() failed.\"\nassert     remove_uppercase('TEST') == 'test', \"Testing for remove_uppercase() failed.\"\nassert     remove_uppercase('TEST') == 'TEST', \"Testing for remove_uppercase() failed.\"\nassert     remove_uppercase('TEST123') == 'TEST123', \"Testing for remove_uppercase() failed.\"\n\ndef is_positive_num(num):\n    '''\n    Write a function to check whether a given number is positive.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract([[1,2,3,4],\n        [2,3,4,5],\n        [3,4,5,6],\n        [4,5,6,7]]) == [[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]], 'WRONG RESULT'\nprint('Checks pass')\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (Extract([]) == None), \"Test case 1: null\"\nassert     (Extract([1,2,3]) == 1), \"Test case 2: first element\"\nassert     (Extract([[1],[2],[3]]) == 1), \"Test case 3: first element\"\nassert     (Extract([[1],[2],[3],[]]) == 1), \"Test case 4: first element\"\nassert     (Extract([[1],[2],[3],['a','b',['cat']]]) == 1), \"Test case 5: first element\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Extract(lst) == [[1], [2, 4], [5, 7], [9, 11]]"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([[1,2,3],[4,5,6],]) == 1, 'Wrong result'\nassert     Extract([[],[],[1],[],[2],[],]) == [1,2], 'Wrong result'\nassert     Extract([[[]]]) == [], 'Wrong result'\nprint('TESTCASE COMPLETE')\nprint('-------------------------------------')"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    Extract([[0, 1], \n    [2, 3]]) == [0, 1]\nassert Extract([[0, 1], \n    [2, 3, 4]]) == [0, 1]\nassert Extract([[0, 1, 2], \n    [3, 4, 5], \n    [6, 7, 8]]) == [0, 1, 2]\nassert Extract([[0, 1, 2], \n    [3, 4], \n    [5]]) == [0, 1, 2]\n\nprint(\"All the tests have been passed\""
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract([[1, 2, 3], [4, 5], 6]) == [1, 4, 6]\nassert     Extract([[1], [1, 2], 3]) == [1, 3]\nassert     Extract([[1, 2], 1, 2]) == [1, 1, 2]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract([[1,2,3], [1,2], [1,2,3]]) == 1\n    Extract("
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([[1, 2, 3], \n                  [4, 5, 6], \n                  [7, 8, 9]]) == [1, 4, 7], \"Check 1st element of each sublist\"\nassert     Extract([[1, 2, 3], \n                  [4, 5, 6], \n                  [7, 8, 9]]) == [2, 5, 8], \"Check 2nd element of each sublist\"\nassert     Extract([[1, 2, 3], \n                  [4, 5, 6], \n                  [7, 8, 9]]) == [3, 6, 9], \"Check 3rd element of each sublist\"\nassert     Extract([[1, 2, 3], \n                  [4, 5, 6], \n                  [7, 8, 9]]) == [], \"Check empty list\"\nassert     Extract([[1, 2, 3]]) == [1, 2, 3], \"Check single-element list\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract([1, 2, 3, 4]) == 1, \"Should be 1\"\nassert     Extract([[1, 2], [3, 4]]) == 1, \"Should be 1\"\nassert     Extract([[1, 2], [3, 4, 5]]) == 1, \"Should be 1\"\nassert     Extract([1, 2, 3, 4]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Driver code\n    lst = [['p','o','u','k'], ['y','u','r','a','d'], ['i','o','n','g','e'], ['a','l','v','e'], ['x','c','k']]\n    Extract(lst)\n    "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert upper_ctr('hello') == 1, 'test failed'\nassert upper_ctr('HELLO') == 1, 'test failed'\nassert upper_ctr('HELLO!') == 1, 'test failed'\nassert upper_ctr('HELLO!@#') == 1, 'test failed'\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     upper_ctr(\"\") == 0\nassert     upper_ctr(\"a\") == 1\nassert     upper_ctr(\"A\") == 2\nassert     upper_ctr(\"Aa\") == 3\nassert     upper_ctr(\"AaBbCc\") == 4\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     upper_ctr('UPPER') == 3, 'Function did not count the upper case characters'\nassert     upper_ctr('Ha55p@r') == 0, 'Function did not count the lower case characters'\nassert     upper_ctr('Hello world!') == 5, 'Function did not count the special characters'\nassert     upper_ctr('UPPER') == 3, 'Function did not count the upper case characters'\nassert     upper_ctr('Ha55p@r') == 0, 'Function did not count the lower case characters'\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr(\"abcDEFGHIJ\") == 5\nassert     upper_ctr(\"ABCDEFGHIJ\") == 5\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr(\"\") == 0\nassert     upper_ctr(\"Test123\") == 3\nassert     upper_ctr(\"tEST123\") == 4\nassert     upper_ctr(\"Hello\") == 1\nassert     upper_ctr(\"HELLO\") == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return \n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr('') == 0\nassert     upper_ctr('A') == 1\nassert     upper_ctr('C') == 1\nassert     upper_ctr('B') == 1\nassert     upper_ctr('AA') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef double_char(str):\n    '''\n    Write a python function to find the number of times a specific character appears in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    upper_ctr('lower_case') == 0, 'wrong'\nassert\n    upper_ctr('ALLCAPS') == 4, 'wrong'\nassert\n    upper_ctr('ALLCAPS') == 4, 'wrong'\nassert\n    upper_ctr('ALLCAPS') == 4, 'wrong'\nassert \n    upper_ctr('ALLCAPS') == 4, 'wrong'\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3],\n                                              [1, 2, 4],\n                                              [1, 3, 4],\n                                              [2, 3, 4]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3],\n                                                [1, 2, 4],\n                                                [1, 2, 5],\n                                                [1, 3, 4],\n                                                [1, 3, 5],\n                                                [1, 4, 5],\n                                                [2, 3, 4],\n                                                [2, 3, 5],\n                                                [2, 4, 5],\n                                                [3, 4, 5]]\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7]) == [[1, 2, 3, 4],\n                                                       [1, 2, 3, 5],\n                                                       [1, 2, 3, 6],\n                                                       [1, 2, 3, 7],\n                                                       [1, 2, 4, 5],\n                                                       [1, 2, 4, 6],\n                                                       [1, 2, 4, 7],\n                                                       [1, 2, 5, 6],\n                                                       [1, 2, 5, 7],\n                                                       [1, 2, 6, 7],\n                                                       [1, 3, 4, 5],\n                                                       [1, 3, 4, 6],\n                                                       [1, 3, 4, 7],\n                                                       [1, 3, 5, 6],\n                                                       [1, 3, 5, 7],\n                                                       [1, 3, 6, 7],\n                                                       [1, 4, 5, 6],\n                                                       [1, 4, 5, 7],\n                                                       [1, 4, 6, 7],\n                                                       [1, 5, 6, 7],\n                                                       [2, 3, 4, 5],\n                                                       [2, 3, 4, 6],\n                                                       [2, 3, 4, 7],\n                                                       [2, 3, 5, 6],\n                                                       [2, 3, 5, 7],\n                                                       [2, 3, 6, 7],\n                                                       [2, 4, 5, 6],\n                                                       [2, 4, 5, 7],\n                                                       [2, 4, 6, 7],\n                                                       [2, 5, 6, 7],\n                                                       [3, 4, 5, 6],\n                                                       [3, 4, 5, 7],\n                                                       [3, 4, 6, 7],\n                                                       [3, 5, 6, 7],\n                                                       [4, 5, 6, 7]]\n\ndef combinations_1(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3]]\nassert     combinations_list([1,2,3,4]) == [[1,2,3], [1,3,4], [1,4,3], [2,3,4], [2,4,3], [3,4,3], [3,4,2], [3,2,4], [4,3,2], [4,2,3]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4], [1,2,4,3], [1,2,4,5], [1,3,4,5], [2,3,4,5], [2,4,3,5], [3,4,5,5]]\nassert     combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5,6]]\nassert     combinations_list([]) == []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_list([1,2,3,4]) == [[1,2,3,4],\n                                            [1,2,4,3],\n                                            [1,3,2,4],\n                                            [1,3,4,2],\n                                            [1,4,2,3],\n                                            [1,4,3,2],\n                                            [2,1,3,4],\n                                            [2,1,4,3],\n                                            [2,3,1,4],\n                                            [2,3,4,1],\n                                            [2,4,1,3],\n                                            [2,4,3,1],\n                                            [3,1,2,4],\n                                            [3,1,4,2],\n                                            [3,2,1,4],\n                                            [3,2,4,1],\n                                            [3,4,1,2],\n                                            [3,4,2,1],\n                                            [4,1,2,3],\n                                            [4,1,3,2],\n                                            [4,2,1,3],\n                                            [4,2,3,1],\n                                            [4,3,1,2],\n                                            [4,3,2,1]]\n    else:\n        raise ValueError(\"The result is incorrect\")\n\nassert combinations_list([]) == []\nassert combinations_list([0]) == [[0]]\nassert combinations_list([1]) == [[1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4,5], [1,2,4,3,5], [1,2,5,3,4], [1,3,2,4,5], [1,3,4,2,5],\n            [1,3,5,2,4], [1,4,2,3,5], [1,4,5,2,3], [1,5,2,3,4], [1,5,4,2,3], [2,1,3,4,5], [2,1,4,3,5],\n            [2,1,5,3,4], [2,3,1,4,5], [2,3,4,1,5], [2,3,5,1,4], [2,4,1,3,5], [2,4,5,1,3], [2,5,1,3,4],\n            [2,5,4,1,3], [3,1,2,4,5], [3,1,4,2,5], [3,1,5,2,4], [3,2,1,4,5], [3,2,4,1,5], [3,2,5,1,4],\n            [3,4,1,2,5], [3,4,2,1,5], [3,4,5,1,2], [3,5,1,2,4], [3,5,2,1,4], [3,5,4,1,2], [4,1,2,3,5],\n            [4,1,3,2,5], [4,1,5,2,3], [4,2,1,3,5], [4,2,3,1,5], [4,2,5,1,3], [4,3,1,2,5], [4,3,2,1,5],\n            [4,3,5,1,2], [4,5,1,2,3], [4,5,2,1,3], [5,1,2,3,4], [5,1,3,2,4], [5,1,4,2,3], [5,2,1,3,4],\n            [5,2,4,1,3], [5,2,5,1,4], [5,3,1,2,4], [5,3,4,1,2], [5,3,5,1,4], [5,4,1,2,3], [5,4,2,1,3],\n            [5,4,3,1,2], [5,4,5,1,3], [5,5,1,2,4], [5,5,3,1,4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([1]) == [[1]]\nassert     combinations_list([1, 2]) == [[1, 2], [2, 1]]\nassert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1],\n    [3, 1, 2], [3, 2, 1], [1, 3, 2], [1, 2, 3], [2, 3, 1], [3, 1, 2]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 3],\n    [1, 2, 4, 5], [1, 3, 2, 4], [1, 3, 2, 5], [1, 3, 4, 2], [1, 3, 4, 5],\n    [1, 4, 2, 3], [1, 4, 2, 5], [1, 4, 3, 2], [1, 4, 3, 5], [1, 5, 2, 3],\n    [1, 5, 2, 4], [1, 5, 2, 4], [1, 5, 3, 2], [1, 5, 3, 4],\n    [1, 5, 4, 2], [1, 5, 4, 3], [2, 1, 3, 4], [2, 1, 3, 5], [2, 1, 4, 3],\n    [2, 1, 4, 5], [2, 2, 3, 4], [2, 2, 3, 5], [2, 2, 4, 3],\n    [2, 2, 4, 5], [2, 3, 2, 4], [2, 3, 2, 5], [2, 3, 4, 2],\n    [2, 3, 4, 5], [2, 4, 2, 3], [2, 4, 2, 5], [2, 4, 3, 2],\n    [2, 4, 3, 5], [3, 1, 2, 4], [3, 1, 2, 5], [3, 1, 4, 2],\n    [3, 1, 4, 5], [3, 2, 1, 4], [3, 2, 1, 5], [3, 2, 4, 1],\n    [3, 2, 4, 5], [3, 3, 1, 2], [3, 3, 1, 4], [3, 3, 1, 5],\n    [3, 3, 2, 1], [3, 3, 2, 4], [3, 3, 2, 5], [3, 3, 4, 1],\n    [3, 3, 4, 2], [3, 3, 4, 5], [3, 4, 1, 2], [3, 4, 1, 5],\n    [3, 4, 2, 1], [3, 4, 2, 5], [3, 5, 1, 2], [3, 5, 1, 4],\n    [3, 5, 1, 5], [3, 5, 2, 1], [3, 5, 2, 4], [3, 5, 2, 5],\n    [3, 5, 4, 1], [3, 5, 4, 2], [3, 5, 4, 5], [4, 1, 2, 3],\n    [4, 1, 2, 5], [4, 1, 3, 2], [4, 1, 3, 5], [4, 1, 4, 2],\n    [4, 1, 4, 5], [4, 2, 1, 3], [4, 2, 1, 5], [4, 2, 3, 1],\n    [4, 2, 3, 5], [4, 2, 4, 1], [4, 2, 4, 5], [4, 3, 1, 2],\n    [4, 3, 1, 5], [4, 3, 2, 1], [4, 3, 2, 5], [4, 3, 4, 1],\n    [4, 3, 4, 2], [4, 3, 4, 5], [4, 4, 1, 2], [4, 4, 1, 5],\n    [4, 4, 2, 1], [4, 4, 2, 5], [4, 4, 3, 1], [4, 4, 3, 2],\n    [4, 4, 3, 5], [5, 1, 2, 3], [5, 1, 2, 4], [5, 1, 3, 2],\n    [5, 1, 3, 4], [5, 1, 4, 2], [5, 1, 4, 4], [5, 2, 1, 3],\n    [5, 2, 1, 4], [5, 2, 3, 1], [5, 2, 3, 4], [5, 2, 4, 1],\n    [5, 2, 4, 3], [5, 3, 1, 2], [5, 3, 1, 4], [5, 3, 2, 1],\n    [5, 3, 2, 4], [5, 3, 4, 1], [5, 3, 4, 2], [5, 4, 1, 2],\n    [5, 4, 1, 4], [5, 4, 2, 1], [5, 4, 2, 3], [5, 4, 2, 4],\n    [5, 4, 3, 1], [5, 4, 3, 2], [5, 4, 3, 4], ]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], \"Wrong\"\n\nassert combinations_list([0,1,2,3]) == [[0,1,2,3],[0,1,3,2],[0,2,1,3],[0,2,3,1],[0,3,1,2],[0,3,2,1],[1,0,2,3],[1,0,3,2],[1,2,0,3],[1,2,3,0],[1,3,0,2],[1,3,2,0],[2,0,1,3],[2,0,3,1],[2,1,0,3],[2,1,3,0],[2,3,0,1],[2,3,1,0],[3,0,1,2],[3,0,2,1],[3,1,0,2],[3,1,2,0],[3,2,0,1],[3,2,1,0]], \"Wrong\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([1]) == [[1]]\nassert     combinations_list([1, 2]) == [[1], [2], [1, 2]]\nassert     combinations_list([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\nassert     combinations_list([1, 2, 3, 4]) == [[1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5],\n[2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_subarray_product([-2, -1, 2, 1]) == 2\nassert     max_subarray_product([1, 2, 3, 4, 5, 1, 1]) == 6\nassert     max_subarray_product([5, 4, 3, 2, 1]) == 24\nassert     max_subarray_product([1]) == 1\nassert     max_subarray_product([]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_subarray_product_optimized(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6,'should return 6'\nassert     max_subarray_product([2,3,-2,4,5,6,7,8]) == 24,'should return 24'\nassert     max_subarray_product([2,3,4,5,-6,7,8]) == 0,'should return 0'\nassert     max_subarray_product([-3,-2,1,0,-4,5,-6,7]) == 0,'should return 0'\nassert     max_subarray_product([]) == 1,'should return 1'\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint max_subarray_product([-1, -2, -3, 4, 5, 6]) == 60\nprint max_subarray_product([-1, -2, -3]) == -6\nprint max_subarray_product([-2, -3, -4, -1]) == -24\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_subarray_product([1, 2, 3]) == 6, max_subarray_product([1, 2, 3])\nassert     max_subarray_product([-1, -2, -3]) == -6, max_subarray_product([-1, -2, -3])\nassert     max_subarray_product([-2, -3, -1]) == -6, max_subarray_product([-2, -3, -1])\nassert     max_subarray_product([1, 2, -3]) == 6, max_subarray_product([1, 2, -3])\nassert     max_subarray_product([-2, -3, -1, 0, 2, 3]) == 6, max_subarray_product([-2, -3, -1, 0, 2, 3])\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([-2, -3, -4]) == -6\nassert     max_subarray_product([-2, 3, -4]) == 24\nassert     max_subarray_product([0, -1]) == 0\nassert     max_subarray_product([1, 2, 3]) == 6\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\nassert     max_subarray_product([-5, -4, -1, 2, -3, -2, -1]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,1,-5,4]) == 4\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,1,1,-5,4]) == 12\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,1,1,1,1,1,1,1,1,1,-5,4]) == 36\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({ 'a' : 1, 'b' : 1, 'c' : 1, 'd' : 1, 'e' : 1 }, 1) == False, 'First test case'\nassert     check_value({ 'a' : 1, 'b' : 2, 'c' : 1, 'd' : 1, 'e' : 1 }, 1) == True, 'Second test case'\nassert     check_value({ 'a' : 1, 'b' : 1, 'c' : 1, 'd' : 2, 'e' : 1 }, 1) == False, 'Third test case'\nassert     check_value({ 'a' : 1, 'b' : 1, 'c' : 1, 'd' : 1, 'e' : 2 }, 1) == True, 'Fourth test case'\nassert     check_value({ 'a' : 1, 'b' : 1, 'c' : 2, 'd' : 1, 'e' : 1 }, 1) == True, 'Fifth test case'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({1:1,2:2}, 2) == True, 'first'\nassert     check_value({1:1,2:2}, 1) == False,'second'\nassert     check_value({1:1,2:2}, 3) == False, 'third'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({1:1, 2:1, 3:1, 4:1, 5:1, 6:1}, 1) == True, \\\n\"Wrong answer for this input.\"\nassert     check_value({1:1, 2:1, 3:1, 4:1, 5:1, 6:1}, 2) == False, \\\n\"Wrong answer for this input.\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_value({1:1, 2:2, 3:3}, 4) == True\nassert     check_value({1:1, 2:2, 3:3}, 2) == False\nassert     check_value({1:1, 2:2, 3:3}, 4) == False\nassert     check_value({1:1, 2:2, 3:3}, 2) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    dict = {'k1':1, 'k2':2, 'k3':2}\n    assert check_value(dict, \"k1\") == True\n    assert check_value(dict, \"k4\") == False\n    \n    \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({1:1,2:2},1) == True, \"Checked Value is not correct\"\nassert     check_value({1:1,2:2},2) == False, \"Checked Value is not correct\"\nassert     check_value({1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8},1) == True, \"Checked Value is not correct\"\nassert     check_value({1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8},2) == False, \"Checked Value is not correct\"\nassert     check_value({1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8},3) == True, \"Checked Value is not correct\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({\"a\":1, \"b\":1, \"c\":2}, \"all_the_same\") == True\nassert     check_value({\"a\":1, \"b\":1, \"c\":2}, \"one_of_the_same\") == True\nassert     check_value({\"a\":1, \"b\":2, \"c\":2}, \"all_the_same\") == False\nassert     check_value({\"a\":1, \"b\":2, \"c\":2}, \"one_of_the_same\") == False\nassert     check_value({\"a\":1, \"b\":1, \"c\":3}, \"all_the_same\") == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({'a':1, 'b':2}, True)\nassert     check_value({'a':1, 'b':2}, False)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({0:1, 1:1, 2:1}, 0) == True, \"Wrong result\"\nassert     check_value({1:2, 2:2, 3:2}, 1) == True, \"Wrong result\"\nassert     check_value({1:2, 2:3, 3:2}, 2) == False, \"Wrong result\"\nassert     check_value({1:2, 2:3, 3:3}, 1) == False, \"Wrong result\"\nassert     check_value({1:2, 2:3, 3:2}, 0) == True, \"Wrong result\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({}) == {}, \"Your drop_empty function is not working properly.\"\nassert     drop_empty({'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2}, \"Your drop_empty function is not working properly.\"\nassert     drop_empty({'a':1, 'b':2, 'c':3, 'd':None}) == {'a':1, 'b':2, 'c':3}, \"Your drop_empty function is not working properly.\"\nassert     drop_empty({}) == {}, \"Your drop_empty function is not working properly.\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     drop_empty(dict1) == {'x': 1, 'y': 2}\nassert     drop_empty({}) == {}\nassert     drop_empty({'x': 1, 'y': 2}) == {'x': 1, 'y': 2}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({'name': 'Kevin'}) == {'name': 'Kevin'}, 'incorrect'\nassert     drop_empty({'name': 'Kevin', 'age': 16}) == {'name': 'Kevin'}, 'incorrect'\nassert     drop_empty({'name': 'Kevin', 'age': 16, 'passport': 'QWEQWE', 'home_address': 'QWEQWE'}) == {'name': 'Kevin'}, 'incorrect'\nassert     drop_empty({}) == {}, 'incorrect'\nassert     drop_empty({'name': 'Kevin', 'age': 16, 'passport': 'QWEQWE', 'home_address': 'QWEQWE'}) == {'name': 'Kevin', 'age': 16}, 'incorrect'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert drop_empty({'key1':'value1', 'key2':None, 'key3':''}) == {'key1':'value1', 'key2':None, 'key3':None}, \"the dict must not have empty values\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty(\n        { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n    ) ==     { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n\nassert     drop_empty(\n        { }\n    ) ==     {}\n\nassert     drop_empty(\n        { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n    ) ==     { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({\"name\": \"1\"}) == {\"name\": \"1\"}\nassert     drop_empty({\"name\": \"1\", \"age\": 5}) == {\"name\": \"1\"}\nassert     drop_empty({\"name\": \"1\", \"age\": 5, \"address\": \"address\"}) == {\"name\": \"1\"}\nassert     drop_empty({\"name\": \"1\", \"age\": 5, \"address\": \"address\", \"phones\": {}}) == {\"name\": \"1\", \"address\": \"address\"}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     drop_empty({'a':'1','b':'2','c':'3'})== {'b':'2','c':'3'}, 'incorrect'\nassert     drop_empty({})== {}, 'incorrect'\nassert     drop_empty({'a':'1'})== {'a':'1'}, 'incorrect'\n\n\ndef drop_empty_dict(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({'Key1': 1, 'Key2': 2}) == {'Key1': 1}, 'drop_empty(test) failed'\nassert     drop_empty({}) == {}, 'drop_empty(test) failed'\nassert     drop_empty({'Key1': 1, 'Key2': '', 'Key3': 'abc'}) == {'Key1': 1, 'Key3': 'abc'}, 'drop_empty(test) failed'\nassert     drop_empty({'Key1': '', 'Key2': 2}) == {'Key2': 2}, 'drop_empty(test) failed'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product([1, 2, 4, 8, 3, 5]) == 16, \"Correct answer should be 16\"\nassert max_product([1, 2, 3, 4]) == 24, \"Correct answer should be 24\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product([1, 2, 3, 4]) == 24, 'Wrong answer'\nassert     max_product([4, 3, 2, 1]) == 12, 'Wrong answer'\nassert     max_product([3, 2, 1]) == 6, 'Wrong answer'\nassert     max_product([1]) == 1, 'Wrong answer'\nassert     max_product([3, 4, 5, 6]) == 240, 'Wrong answer'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product([]) == 0\nassert     max_product([1]) == 1\nassert     max_product([0, 1]) == 1\nassert     max_product([0, -1]) == 0\nassert     max_product([1, -2, 3]) == 6\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product([-5, -10, -3, -2, 4, 6]) == -60\nassert     max_product([-5, -10, -3, -2, 4, 6, -10, -6, -1]) == 120\nassert     max_product([-5, -10, -3, -2, 4, 6, -10, -6, -1, -5, -4, 5, 6, -8]) == -400\nassert     max_product([-5, -10, -3, -2, 4, 6, -10, -6, -1, -5, -4, 5, 6, -8, -9]) == 200\nassert     max_product([-5, -10, -3, -2, 4, 6, -10, -6, -1, -5, -4, 5, 6, -8, -9, -100]) == 200\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_product([1, 2, 3, -4, 5]) == 6\nassert max_product([-1, -2, -3]) == -1\nassert max_product([]) == 1\nassert max_product([0]) == 0\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert max_product([1, 2, 3, 4, 5]) == 120\nassert max_product([0, 1, 2, 3, 4, 5]) == 0\nassert max_product([-1, -2, -3, -4, -5]) == -120\nassert max_product([0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((3,5,7,9)) == (3,6,9,11), \"Wrong result\"\nassert     add_pairwise((2,3,4)) == (3,5,7), \"Wrong result\"\nassert     add_pairwise((1,2,3)) == (2,4,6), \"Wrong result\"\nassert     add_pairwise((0,1,2)) == (1,3,5), \"Wrong result\"\nassert     add_pairwise((5,3,2)) == (7,6,8), \"Wrong result\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_pairwise((1,2,3,4)) == ((1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7))\nassert     add_pairwise((1,2,3,4,5)) == ((1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise((5,8)) == (5+8, 5+8, 5+8, 5+8, 5+8, 5+8)\nassert     add_pairwise((5,10)) == (5+10, 5+10, 5+10, 5+10, 5+10, 5+10)\nassert     add_pairwise((10,6)) == (10+6, 10+6, 10+6, 10+6, 10+6, 10+6)\n\nprint('check pass')"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nImplement an iterator that returns the sum of the items in an iterable.\n\nExample:\n\nIt gets an iterable of int and returns a sum of all items in the iterable.\n'''\n\ndef get_sum(iterable):\n    '''\n    Write a function that takes in an iterable and returns its sum.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_pairwise((1, 2, 3, 4, 5)) == (2, 3, 4, 5, 6)\nassert add_pairwise((1, 2, 3, 4, 5, 6)) == (3, 4, 5, 6, 7, 8)\n\n\n\n'''\n\nGiven an integer k and a list of integers nums. Return the number of unique k-diff pairs in the array nums. \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_pairwise((1, 2, 3)) == (1, 4, 6)\nassert     add_pairwise((1, 1, 1)) == (2, 2, 2)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_pairwise((1,2,3)) == (2,3,4), \"Wrong result\"\nassert     add_pairwise((2,3,4)) == (1,2,3), \"Wrong result\"\n\ndef add_to_beginning(test_tup):\n    '''\n    Write a function to add the element at the beginning of the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise((1,2,3,4,5,6,7)) == ((2,4,6,8,10,12,14),)\nassert add_pairwise((1,2,3,4,5,6,7)) == ((2,4,6,8,10,12,14),)\nassert add_pairwise((1,2,3,4,5,6,7,8)) == ((2,4,6,8,10,12,14),)\nassert add_pairwise((1,2,3,4,5,6,7,8,9)) == ((2,4,6,8,10,12,14,16),)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([1, 2, 3, 4, 5, 6], 10) == 60\nassert find_remainder([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6], 3) == 0\n\n\ndef find_remainder_1(arr, n): \n    '''\n    Using bit manipulation, write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_remainder([2, 4, 5], 10) == 2, \"Wrong output\"\nassert     find_remainder([4, 6, 8], 10) == 0, \"Wrong output\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_remainder([5, 8, 4], 7) == 2 \nassert find_remainder([8, 4, 5], 7) == 5 \nassert find_remainder([2, 4, 5], 7) == -1\nassert find_remainder([-5, -4, -3], -7) == 4\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_remainder([1,2,3,4,5], 6) == 1\nassert     find_remainder([-2,-1,0,1,2], 6) == -2\nassert     find_remainder([3,-2,4,-5], 6) == 1\nassert     find_remainder([-4,4,-2,-5], 6) == -1\nassert     find_remainder([0,0,-2,0], 6) == -1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder([2,3,4,5,6], 10) == 0\nassert     find_remainder([-2,3,4,5,6], 10) == 45\nassert     find_remainder([2,3,4,5,6], 13) == 4\nassert     find_remainder([-2,3,4,5,6], 13) == -25\n\ndef find_remainder_1(arr, n): \n    '''\n    In this function we need to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([1, 2, 3, 4, 5], 10) == 0, \"Should be 0\"\nassert     find_remainder([1, 2, 3, 4, 5], 11) == 30, \"Should be 30\"\nassert     find_remainder([1, 2, 3, 4, 5], 15) == 210, \"Should be 210\"\nassert     find_remainder([1, 2, 3, 4, 5], 20) == 9, \"Should be 9\"\nassert     find_remainder([1, 2, 3, 4, 5], 6) == 0, \"Should be 0\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_remainder([0,0], 2) == 0\nassert find_remainder([1,2], 10) == 1\nassert find_remainder([5,10], 16) == 1\n\ndef find_remainder_2(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_Consecutive([2,3,4,8,10,12,14,15,20])\nassert     not check_Consecutive([2,3,4,8,10,12,14,15,20,34])\nassert     not check_Consecutive([2,3,4,10,12,14,15,20])\n\ndef check_Consecutive2(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([]) == False, 'Test #1'\nassert check_Consecutive([1, 2, 3, 4, 5]) == True, 'Test #2'\nassert check_Consecutive([1, 1, 1, 2, 4]) == True, 'Test #3'\nassert check_Consecutive([1, 2, 3, 4, 5]) == False, 'Test #4'\nassert check_Consecutive([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 5]) == False, 'Test #5'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6]) == True\nassert     check_Consecutive([1, 2, 2, 4, 4, 5]) == False\nassert     check_Consecutive([1, 2, 2, 4, 4, 5, 5, 6]) == False\nassert     check_Consecutive([1, 2, 2, 4, 4, 5, 5, 6, 6]) == True\nassert     check_Consecutive([1, 2, 2, 4, 4, 5, 6]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncheck_Consecutive([-1,0,1,2,3,4,5,6,7,8]) == True\nassert \ncheck_Consecutive([-1,0,1,2,3,4,5,6,7,8,9,10,11]) == False\nassert \ncheck_Consecutive([10,11,12,13,14,15,16,17,18,19,20]) == True\nassert \ncheck_Consecutive([-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20]) == False\nassert \ncheck_Consecutive([-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([-2, -1, 0, 1, 3, 5]) == False,'should return false for [-2, -1, 0, 1, 3, 5]'\nassert     check_Consecutive([2, 3, 4, 5]) == True,'should return true for 2, 3, 4, 5'\nassert     check_Consecutive([1, 2, 3, 4, 5]) == True,'should return true for 1, 2, 3, 4, 5'\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == True,'should return true for 1, 2, 3, 4, 5, 6'\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True,'should return true for 1, 2, 3, 4, 5, 6, 7'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True\nassert     check_Consecutive([1,2,3,4,5,6]) == False\nassert     check_Consecutive([1,2,3,4,5,6,7]) == True\nassert     check_Consecutive([1,2,3,4,5,6,7,8]) == True\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6]) == True, \"Failed\"\nassert check_Consecutive([1,2,3,2,1]) == False, \"Failed\"\nassert check_Consecutive([1,2,3,4,5,1,2]) == False, \"Failed\"\nassert check_Consecutive([1,2,3,2,1,2]) == True, \"Failed\"\nprint(\"\u2714\ufe0f Test passed\")\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    check_Consecutive([1, 2, 3, 4, 5, 6]) == True\n    check_Consecutive([1, 2, 3, 5, 6, 8, 9]) == True\n    check_Consecutive([1, 2, 3, 6, 8]) == False\n    check_Consecutive([1, 2, 3, 6, 9, 8]) == False\n    check_Consecutive([1, 2, 3, 6, 9, 8, 10]) == False\n\n\n\n\n\ndef check_Consecutive2(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_Consecutive([1,2,4,5,7]) == True\nassert     check_Consecutive([1,3,4,5,6]) == False\nassert     check_Consecutive([1,3,4,5,6,7]) == False\nassert     check_Consecutive([1,2,3,4,5,6]) == False\nassert     check_Consecutive([1,2,3,4,5,6,7]) == True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([[1,2,3],[2,3,4]],[[1,2],[2,3,4]]) == [[1,2,3]]\nassert     tuple_intersection([[1,2,3],[2,3,4]],[[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     tuple_intersection([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]],[[1,2],[3,4],[5,6]]) == [[1,2,3,4,5,6]]\n\ndef numpy_array_addition(numpy_array1, numpy_array2):\n    '''\n    Given two numpy arrays, compute their element-wise addition.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection((1,2,3),(4,5,6)) == (1,4)\nassert     tuple_intersection((4,5,6),(1,2,3)) == (1,4)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([(1, 2), (2, 4), (3, 5)], [(2, 3), (4, 5), (5, 7)]) == [(2, 3), (4, 5)]\nassert     tuple_intersection([(1, 2), (2, 4), (3, 5)], [(2, 3), (5, 7), (4, 5)]) == [(2, 3), (4, 5)]\nassert     tuple_intersection([(1, 2), (2, 4), (3, 5)], [(2, 3), (4, 5), (5, 7)]) == []\n\nassert tuple_intersection([], [(2, 3), (4, 5)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection([1,2,3],[3,4,5]) == (3,)\nassert     tuple_intersection([2,3,4],[3,4,5]) == (3,4)\nassert     tuple_intersection([1,2,3,4],[1,4,5]) == (1,4)\nassert     tuple_intersection([1,2,3,4,5],[1,2,4]) == (1,2,4)\nassert     tuple_intersection([1,2,3,4,5],[]) == ()\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"\\ncheck the correctness of tuple_intersection\")\n\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(4,5),(6,6)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(4,5)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(4,5),(6,6),(7,7)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(4,5),(6,6),(8,8)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(4,5),(6,6),(8,8),(7,7)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], []))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(3,4),(5,6)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(5,6)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(5,6),(7,7)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(11,11)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(11,11),(12,12)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18),(19,19)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18),(19,19),(20,20)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18),(19,19),(20,20),(21,21)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18),(19,19),(20,20),(21,21),(22,22)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18),(19,19),(20,20),(21,21),(22,22),(23,23)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12),(13,13),(14,14),(15,15),(16,16),(17,17),(18,18),(19,19),(20,20),(21,21),(22,22),(23,23),(24,24)]))\nprint(tuple_intersection([(1,1),(2,3),(5,5)], [(1,2),(6,6),(7,7),(8,8),(9,9)"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([],[\"a\",\"b\",\"c\"]) == set()\nassert     tuple_intersection([],[\"a\",\"b\",\"c\",\"d\"]) == set()\nassert     tuple_intersection([\"a\",\"b\",\"c\"],[\"a\",\"b\",\"c\"]) == {(\"a\",)}\nassert     tuple_intersection([\"a\",\"b\",\"c\"],[\"b\",\"c\"]) == {(\"b\",)}\nassert     tuple_intersection([\"a\",\"b\",\"c\"],[\"b\",\"d\"]) == set()\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection([(1, 2), (4, 5)], [(3, 4), (5, 6)]) == [(3, 4)]\nassert     tuple_intersection([(1, 2), (4, 5)], [(1, 2), (5, 6)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (4, 5)], [(3, 4), (1, 2)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (4, 5)], [(3, 4), (1, 1)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (4, 5)], [(3, 4), (3, 4)]) == [(3, 4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([[1,2,3],['a','b','c'],[0,1,1,2,3,3],(1,2,3)], [[1,2,3],['a','b','c'],[0,1,1,2,3,3],(1,2,3)]) == \\\n          [(1,2,3)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_tuple_list1 = (3,2,2,4,3)\ntest_tuple_list2 = (4,3,6,4)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_char('abcd','cd','ab') == 'ababcd'\nassert     replace_char('abcd','cd','ab') == 'abcd'\nassert     replace_char('abcd','d','c') == 'abcd'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char(\"i like python\",\"l\",'m') == \"i like pythonm\"\nassert     replace_char(\"i like python\",\"l\",'a') == \"i like paa naython\"\nassert     replace_char(\"i like python\",\"i\",'a') == \"aaaa like python\"\nassert     replace_char(\"i like python\",\"o\",\"r\") == \"i like purr\"\nassert     replace_char(\"i like python\",\"o\",\"r\") == \"i like purr\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_char(\"This is a good text\", \" \", \" \") == \"ThIs is a gOOd tEt xTex\"\nassert     replace_char(\"This is a good text\", \" \", \"O\") == \"ThIs is a goOD tEt xTex\"\nassert     replace_char(\"This is a good text\", \"x\", \" \") == \"ThIs is a good text\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_char('abcdef', 'a', 'a') == 'bcdek'\nassert     replace_char('abcd', 'c', 'r') == 'abrr'\nassert     replace_char('abcd', 'k', 'z') == 'abzx'\nassert     replace_char('abcd', 'k', 'z') == 'abzx'\nassert     replace_char('abcd', 'a', 'z') == 'abcd'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nreplace_char('hello', 'l', 'p') == 'pho'\n\nreplace_char('hello', 'e', 'a') == 'a'\n\nreplace_char('hello', 'h', 'p') == 'ph'\n\nreplace_char('hello', 'l', 'p') == 'pho'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_char(\"Coding\",'o','1') == \"1C1i1ng\", \"replace_char failed\"\nassert     replace_char(\"Hi, world\",'l','1') == \"1Hi, world\", \"replace_char failed\"\nassert     replace_char(\"I love cake and cup and don't care about pie\",'x','1') == \"1I lovx and cup and don't care about pie\", \"replace_char failed\"\nassert     replace_char(\"I love cake and cup and don't care about pie\",'c','1') == \"1I love x and cup and don't care about pie\", \"replace_char failed\"\nassert     replace_char(\"I love cake and cup and don't care about pie\",'z','1') == \"I love cake and cup and don't care about pie\", \"replace_char failed\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char(\"Chocolate\",'h','c') == 'CoCcichc'\nassert     replace_char(\"abc\",'b','d') == 'adcddd'\nassert     replace_char(\"cab\",\"b\",\"a\") == \"acaa\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char(\"cat\",'t','z') == \"zat\"\nassert     replace_char(\"cat\",'a','t') == \"cat\"\nassert     replace_char(\"cat\",'d','w') == \"cat\"\nassert     replace_char(\"cat\",'c','s') == \"sat\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"replace_char:\",replace_char(\"xyz\",'x','\"'))"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({\"a\":4,\"b\":1,\"c\":5}) == ['c','a','b']\nassert     sort_counter({\"a\":4,\"b\":1,\"c\":5,\"d\":7}) == ['a','d','c','b']\nassert     sort_counter({\"a\":4,\"b\":1,\"c\":5,\"d\":7,\"e\":3}) == ['d','c','a','b','e']\nassert     sort_counter({\"a\":4,\"b\":1,\"c\":5,\"d\":7,\"e\":3,\"f\":2}) == ['d','c','b','a','f','e']\nassert     sort_counter({\"a\":4,\"b\":1,\"c\":5,\"d\":7,\"e\":3,\"f\":2,\"g\":3}) == ['d','c','b','f','a','g','e']\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({'a': 1, 'b': 2, 'c': 4, 'd': 3, 'e': 8}) == {'b': 2, 'd': 3, 'a': 1, 'e': 8, 'c': 4}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 4, 'd': 3, 'e': 8, 'f': 10, 'g': 12, 'h': 15}) == {'a': 1, 'b': 2, 'g': 12, 'e': 8, 'f': 10, 'h': 15, 'd': 3, 'c': 4}\n\ndef sort_counter2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({'one': 1, 'two': 2, 'three': 3}) == \\\n        sorted(dict({'one': 1, 'two': 2, 'three': 3}).items(), key=lambda x: x[1]) == \\\n        sorted(dict({'one': 1, 'two': 2, 'three': 3}).items(), key=lambda x: x[1], reverse=True) == \\\n        sorted(dict({'one': 1, 'two': 2, 'three': 3}).items(), key=lambda x: (x[1], x[0]), reverse=True)\nassert     sort_counter({'one': 1, 'two': 2, 'three': 3}) == \\\n        sorted(dict({'one': 1, 'two': 2, 'three': 3}).items(), key=lambda x: (x[1], x[0])) == \\\n        sorted(dict({'one': 1, 'two': 2, 'three': 3}).items(), key=lambda x: (x[1], x[0]), reverse=True) == \\\n        sorted(dict({'one': 1, 'two': 2, 'three': 3}).items(), key=lambda x: (x[1], x[0]), reverse=True)\n\n'''\nWrite a function that takes a string as input and returns a list of\ncharacters with spaces between them.\n'''"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    sort_counter({\"c\":3, \"a\":1, \"b\":2}) == {\"a\":1, \"b\":2, \"c\":3}\nassert \n    sort_counter({\"c\":1, \"a\":2, \"b\":3}) == {\"a\":2, \"b\":3, \"c\":1}\nassert \n    sort_counter({\"c\":1, \"a\":2, \"b\":3, \"d\":4}) == {\"a\":2, \"b\":3, \"c\":1, \"d\":4}\nassert \n    sort_counter({\"c\":4, \"a\":1, \"b\":2, \"d\":3}) == {\"a\":1, \"b\":2, \"c\":4, \"d\":3}\nassert \n    sort_counter({\"c\":4, \"a\":2, \"b\":1, \"d\":3}) == {\"a\":1, \"b\":2, \"c\":4, \"d\":3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4, 'f': 6}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nprint(\"\\n\\n### Exercise 4: sort_counter ###\")\n\nd = {'c': 3, 'a': 1, 'b': 2}\nprint(\"Expected:\", sorted(d.items(), key=lambda x: x[1]))\n\nprint(\"Actual:\", sort_counter(d))\nprint()\n'''\n\n\n'''\nprint(\"\\n\\n### Exercise 5: dict_words ###\")\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({'a': 4, 'b': 1, 'c': 1, 'd': 1}) == [('c', 1), ('b', 1), ('a', 4), ('d', 1)]\nassert sort_counter({'a': 4, 'b': 1, 'c': 1, 'd': 1}) == [('a', 4), ('b', 1), ('c', 1), ('d', 1)]\nassert sort_counter({'a': 4, 'b': 1, 'c': 1, 'd': 1}) == sorted([('a', 4), ('b', 1), ('c', 1), ('d', 1)])\nassert sort_counter({'a': 4, 'b': 1, 'c': 1, 'd': 1}) == sorted(['a', 'b', 'c', 'd'], key=str.lower)\nassert sort_counter({'a': 4, 'b': 1, 'c': 1, 'd': 1}) == sorted(['a', 'b', 'c', 'd'], key=lambda s: s.lower())\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({'one': 3, 'two': 2, 'three': 1}) == \\\n        [('three', 1), ('two', 2), ('one', 3)]\nassert     sort_counter({'three': 1, 'two': 2, 'one': 3}) == \\\n        [('three', 1), ('two', 2), ('one', 3)]\nassert     sort_counter({'one': 3, 'two': 1, 'three': 1}) == \\\n        [('three', 1), ('two', 1), ('one', 3)]\nassert     sort_counter({'one': 1, 'two': 2, 'three': 3}) == \\\n        [('three', 3), ('two', 2), ('one', 1)]\nassert     sort_counter({'one': 2, 'two': 1, 'three': 1}) == \\\n        [('three', 1), ('two', 1), ('one', 2)]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_sum([5, -1, -5]) == 10, \"assert     big_sum([5, -1, -5]) == 10\"\nassert     big_sum([4, -2, 1, -3, -4, -5, -6]) == 9, \"assert     big_sum([4, -2, 1, -3, -4, -5, -6]) == 9\"\nassert     big_sum([-4, 5, -2, -4, -5, -6, -8]) == -10, \""
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_sum([4, 3, 2, 1, -1, 1, 2, 4]) == 6, 'Not found! '\nassert     big_sum([1, -1, -2, -3, -4]) == -1, 'Not found! '\nassert     big_sum([3, 5, 2, 1, 4]) == 7, 'Not found! '\n\n\ndef smallest_number(array):\n    '''\n    Write a python function to find the smallest element in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([1,2,3]) == 2, \"returns 2\"\nassert     big_sum([1,2,3,4]) == 6, \"returns 6\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef big_diff(nums):\n    '''\n    Write a python function to find the largest and smallest element of a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nbig_sum([-8, -1, -5, -3, -7, -6, -5, -3, -3, -4, -7, -5, -7, -2, -9, -6, -8, -4, -4, -1, -2, -9, -7, -9, -1, -8, -7, -8, -2, -5, -6, -7, -4, -3, -2, -9, -3, -8, -7, -6, -7, -3, -2, -6, -5, -5, -1, -7, -4, -7, -4, -8, -9, -7, -9, -7, -4, -8, -2, -6, -6, -3, -7, -4, -2, -3, -7, -1, -7, -8, -5, -2, -7, -3, -4, -5, -5, -3, -1, -7, -8, -6, -4, -5, -3, -8, -5, -1, -5, -7, -5, -8, -7, -8, -7, -6, -5, -7, -2, -5, -4, -6, -7, -2, -7, -7, -6, -6, -5, -4, -3, -8, -9, -5, -4, -5, -5, -8, -4, -8, -9, -9, -5, -7, -2, -6, -3, -7, -3, -4, -1, -1, -2, -9, -3, -4, -6, -5, -6, -6, -5, -7, -2, -7, -5, -6, -5, -3, -9, -7, -2, -7, -3, -7, -4, -4, -2, -7, -5, -7, -8, -6, -5, -9, -6, -7, -8, -7, -6, -7, -8, -5, -2, -4, -2, -3, -2, -3, -5, -8, -7, -5, -7, -9, -7, -7, -9, -6, -7, -7, -5, -9, -4, -2, -5, -8, -7, -4, -9, -7, -9, -4, -5, -4, -5, -9, -4, -3, -7, -7, -7, -2, -6, -2, -4, -6, -2, -9, -8, -8, -3, -1, -3, -7, -5, -7, -8, -5, -3, -9, -4, -5, -5, -4, -4, -8, -2, -2, -7, -4, -6, -3, -2, -9, -6, -4, -6, -9, -8, -7, -6, -6, -5, -8, -4, -8, -9, -6, -3, -7, -6, -8, -6, -3, -7, -7, -3, -8, -3, -6, -7, -7, -7, -6, -7, -8, -3, -8, -6, -6, -5, -7, -9, -5, -5, -8, -9, -7, -3, -8, -7, -5, -5, -7, -6, -9, -2, -3, -6, -7, -6, -9, -5, -2, -2, -4, -8, -5, -9, -8, -5, -5, -3, -6, -3, -5, -8, -9, -5, -6, -5, -3, -2, -5, -9, -8, -7, -3, -3, -4, -3, -1, -7, -7, -7, -7, -6, -7, -2, -5, -6, -5, -7, -6, -6, -3, -6, -2, -4, -7, -7, -2, -2, -3, -4, -7, -4, -6, -3, -5, -3, -4, -5, -7, -7, -4, -5, -6, -5, -4, -5, -4, -7, -7, -9, -7, -7, -2, -8, -8, -2, -5, -6, -7, -6, -5, -6, -7, -6, -6, -5, -6, -5, -4, -5, -4, -6, -7, -8, -2, -7, -6, -8, -5, -3, -4, -5, -5, -7, -4, -2, -2, -8, -7, -5, -7, -7, -4, -5, -4, -2, -7, -6, -8, -6, -7, -8, -5, -2, -4, -5, -6, -4, -2, -3, -7, -5, -4, -7, -6, -9, -3, -6, -8, -7, -2, -8, -7, -8, -6, -5, -7, -9, -4, -7, -4, -5, -9, -3, -7, -3, -8, -8, -3, -5, -6, -9, -6, -7, -5, -7, -3, -2, -4, -6, -6, -5, -3, -8, -5, -5, -4, -3, -7, -7, -4, -6, -5, -2, -4, -5, -4, -8, -4, -8, -2, -6, -5, -5, -4, -6, -3, -4, -7, -5, -4, -4, -5, -6, -5, -7, -7, -3, -9, -7, -4, -6, -6, -3, -8, -7, -7, -5, -4, -4, -2, -6, -5, -6, -3, -7, -7, -8, -3, -4, -5, -9, -6, -7, -8, -6, -4, -6, -7, -5, -8, -7, -4, -7, -3, -4, -5, -5, -3, -3, -2, -4, -3, -6, -4, -3, -8, -6, -4, -6, -3, -7, -4, -5, -3, -2, -8, -6, -7, -8, -2, -3, -7, -9, -6, -6, -5, -4, -8, -4, -5, -4, -6, -4, -4, -2, -8, -3, -7, -5, -2, -5, -3, -5, -3, -4, -8, -9, -5, -6, -4, -9, -8, -5, -4, -7, -3, -3, -7, -7, -4, -6, -5, -9, -6, -7, -3, -6, -7, -3, -2, -6, -5, -7, -5, -4, -6, -7, -7, -3, -2, -2, -7, -7, -7, -3, -9, -5, -7, -4, -8, -2, -9, -7, -4, -7, -5, -8, -8, -5, -8, -7, -2, -2, -5, -4, -4, -6"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(f\"is_lower() should return lowercase of the given string: {is_lower('1alpha')}\")\nprint(f\"is_lower() should return lowercase of the given string: {is_lower('1ALPHA')}\")\n\nassert\nprint(f\"is_lower() should return lowercase of the given string: {is_lower('1Alpha')}\")\nprint(f\"is_lower() should return lowercase of the given string: {is_lower('1aPta')}\")\n\nprint(f\"is_lower() should return lowercase of the given string: {is_lower('1alpha')}\")\nprint(f\"is_lower() should return lowercase of the given string: {is_lower('1ALPHA')}\")\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower('Hello') == False\nassert     is_lower('HELLO') == True\nassert     is_lower('HELLO WORLD') == True\nassert     is_lower('HELLO WORLD') == True\nassert     is_lower('heLlo wOrlD') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower('How do you do?') == 'how do you do?'\nassert     is_lower('How are you?') == 'how are you?'\nassert     is_lower('I do not know') == 'i do not know'\nassert     is_lower('HeLLo, how are you?') == 'hello, how are you?'\nassert     is_lower('HELLO, HOW ARE YOU?') == 'hello, how are you?'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_lower('abc') == 'abc', \"input error\"\nassert     is_lower('AbC') == 'abc', \"input error\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower(\"Hello\")     == \"hello\"\nassert     is_lower(\"HELLO\")     == \"hello\"\nassert     is_lower(\"HELLO WORLD\")     == \"hello world\"\nassert     is_lower(\"HELLO WORLD123\")     == \"hello world123\"\nassert     is_lower(\"Hi, I'm Uppal\")     == \"hi, i'm uppal\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower('Python') == True\nassert     is_lower('python') == True\nassert     is_lower('Python3') == True\nassert     is_lower('Python_3') == True\nassert     is_lower('pYTHON') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower('HELLO') == False\nassert     is_lower('HELLo') == True\nassert     is_lower('hello') == True\nassert     is_lower
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower(\"A\")==True\nassert     is_lower(\"a\")==True\nassert     is_lower(\"b\")==True\nassert     is_lower(\"B\")==False\nassert     is_lower(\"C\")==False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower('s') == False, \\\n        \"is_lower('s') is wrongly implemented\"\nassert     is_lower('s') == True, \\\n        \"is_lower('s') should be True\"\nassert     is_lower('S') == True, \\\n        \"is_lower('S') should be True\"\nassert     is_lower('s') == False, \\\n        \"is_lower('s') should be False\"\n\ndef is_lower_case(string):\n    '''\n    Write a python function to check whether the given string is lower case or not.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase(\"abc123\") == \"abc123\", \"Wrong output\"\nassert     remove_lowercase(\"abc123#\") == \"abc123\", \"Wrong output\"\nassert     remove_lowercase(\"abc123@\") == \"abc123\", \"Wrong output\"\nassert     remove_lowercase(\"abc123.\") == \"abc123\", \"Wrong output\"\nassert     remove_lowercase(\"abc123.a\") == \"abc123\", \"Wrong output\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase('abcd') == 'abcd', \"testing failed\"\nassert     remove_lowercase('abcd123') == 'abcd123', \"testing failed\"\nassert     remove_lowercase('abcd1234') == 'abcd1234', \"testing failed\"\nassert     remove_lowercase('abcd12345') == 'abcd12345', \"testing failed\"\nassert     remove_lowercase('abcd123456') == 'abcd123456', \"testing failed\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(remove_lowercase(\"This Is a Test\"))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_lowercase(\"camel case\") == \"Camel Case\", \"Should be Camel Case\"\nassert     remove_lowercase(\"python\") == \"python\", \"Should be Python\"\nassert     remove_lowercase(\"PYTHON\") == \"PYTHON\", \"Should be PYTHON\"\nassert     remove_lowercase(\"mixed case\") == \"mixed case\", \"Should be Mixed Case\"\nassert     remove_lowercase(\"12345\") == \"\", \"Should be empty\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    remove_lowercase('lowercaselowercase') == 'lowwercase'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_lowercase(\"abcABCABC\") == \"ABCABC\"\nassert remove_lowercase(\"abCDabcAbc\") == \"ABCABC\"\nassert remove_lowercase(\"AbCAbc\") == \"\"\nassert remove_lowercase(\"abcABCabcABCabcAbc\") == \"ABCABCABCabcABC\"\nassert remove_lowercase(\"AbcAbc\") == \"AbcAbc\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_lowercase('') == ''\nassert remove_lowercase(' ') == ''\nassert remove_lowercase(' ') == ''\nassert remove_lowercase('12345') == '12345'\nassert remove_lowercase('1') == '1'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # 1.\n    print(first_Digit(1234567890))\n    # should print 1\n    \n    # 2.\n    print(first_Digit(1234))\n    # should print 1\n    \n    # 3.\n    print(first_Digit(123))\n    # should print 1\n    \n    # 4.\n    print(first_Digit(12345678))\n    # should print 1\n    \n    # 5.\n    print(first_Digit(123456789))\n    # should print 1\n    \n    # 6.\n    print(first_Digit(1234567890))\n    # should print 1"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_Digit(91) == 1\nassert     first_Digit(2135) == 2\nassert     first_Digit(2748) == 7\nassert     first_Digit(1234) == 0\nassert     first_Digit(-1) == -1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(100) == 0\nassert     first_Digit(10000) == 1\nassert     first_Digit(1234567) == 1\nassert     first_Digit(12345678) == 1\nassert     first_Digit(1234567890) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(1) == 1, \"error in first_Digit\"\nassert first_Digit(3) == 1, \"error in first_Digit\"\nassert first_Digit(10) == 1, \"error in first_Digit\"\nassert first_Digit(14) == 1, \"error in first_Digit\"\nassert first_Digit(88) == 1, \"error in first_Digit\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_Digit(1001) == 1\nassert     first_Digit(1234) == 1\nassert     first_Digit(98765) == 0"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(1234567890) == 0, \"test failed\"\nassert     first_Digit(12345) == 5, \"test failed\"\nassert     first_Digit(01234567890) == 1, \"test failed\"\nassert     first_Digit(123) == 3, \"test failed\"\nassert     first_Digit(1234) == 4, \"test failed\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert first_Digit(1010101) == 1\nassert first_Digit(1234) == 2\nassert first_Digit(12) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_Digit(123) == 2\nassert     first_Digit(1234) == 4\nassert     first_Digit(9000) == 3\nassert     first_Digit(0) == 0\nassert     first_Digit(-123) == 2\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(2323) == 2, \"Wrong Answer!\"\nassert     first_Digit(2) == 1, \"Wrong Answer!\"\nassert     first_Digit(1234) == 3, \"Wrong Answer!\"\nassert     first_Digit(12345) == 4, \"Wrong Answer!\"\nassert     first_Digit(123456) == 5, \"Wrong Answer!\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\n\ndef BestBuy(list): \n    '''\n    Write a python function which takes a list of numbers and returns the best buy.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef Divide(a,b):\n    '''\n    Write a python function which takes two integers and returns true if \n    they are divisible or not.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([1, 2, 3, 4, 5]) == [1, 3, 5] \nassert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7]\nassert     Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert     Split([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert split([1,2,3,4,5,6]) == [1,3,5], 'Wrong'\nassert split([1,2,3,4,5,6,7]) == [1,3,5,7], 'Wrong'\nassert split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9], 'Wrong'\nassert split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10], 'Wrong'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([2, 3, 4, 1, 5, 6, 7, 0, 8]) == [1, 3, 5, 7]\nassert     Split([2, 3, 4, 1, 5, 6, 7, 0, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 11]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5]\nassert    Split([2,4,6,8,10]) == [2,6,8,10]\nassert    Split([]) == []\nassert    Split([0,2,4]) == [0,2,4]\nassert    Split([1,3,5,7,9]) == [1,3,5,7,9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7,9]\nassert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nSplit([1,2,3,4,5,6]) == [1,3,5]\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    difference(5) == {1, 1, 1, 1, 1}\nassert difference(10) == {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     difference(2) == 5\nassert     difference(3) == 6\nassert     difference(4) == 7\n\nprint('Test passed')\n\n\n'''\nTest your code by running your file and checking that it passes all the tests. The contents of the \noutput file will also be provided to you.\n'''"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     difference(0) == 0, \"difference function is wrong\"\nassert     difference(1) == 0, \"difference function is wrong\"\nassert     difference(2) == 1, \"difference function is wrong\"\nassert     difference(3) == 4, \"difference function is wrong\"\nassert     difference(4) == 0, \"difference function is wrong\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     difference(2) == 64\nassert     difference(3) == 154\nassert     difference(4) == 400\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 9\nassert     difference(5) == 25\nassert     difference(10) == 289\n\ndef palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. Words, numbers, and sentences can be palindromes. The words, numbers, and sentences are case-sensitive and so can be either capitalized or not.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. EXCELLENT!\\n\")"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     difference(4) == 52, \"Wrong answer\"\nassert     difference(2) == 26, \"Wrong answer\"\nassert     difference(5) == 856, \"Wrong answer\"\n\nprint(\"You passed all the tests!\")"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 3\nassert find_Odd_Pair([1,2,3,4],5) == 2\nassert find_Odd_Pair([0,1,2,3,4],5) == 2"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"check: find_Odd_Pair\")\nprint(find_Odd_Pair([10,20,30,40,50,60,70,80,90,100],100))\nprint(find_Odd_Pair([1,3,5,7,9,11,13,15,17,19],13))\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([1,2,3,4], 4) == 2\nassert     find_Odd_Pair([1,2,3,4], 5) == 1\nassert     find_Odd_Pair([1,2,3,4], 6) == 3\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair([0, 0, 1, 2],2) == 1, 'FAIL'\nassert     find_Odd_Pair([1, 2, 3, 5],4) == 1, 'FAIL'\nassert     find_Odd_Pair([0, 0, 1, 2],2) == 1, 'FAIL'\nassert     find_Odd_Pair([1, 2, 3, 5],4) == 1, 'FAIL'\nassert     find_Odd_Pair([0, 0, 1, 2],2) == 1, 'FAIL'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Odd_Pair([1,1,1,1],4) == True, 'Should return True'\nassert     find_Odd_Pair([1,2,2,1],4) == False, 'Should return False'\nassert     find_Odd_Pair([1,1,1,1,1,1,1,1],4) == True, 'Should return True'\nassert     find_Odd_Pair([1,1,2,1,2,1],4) == True, 'Should return True'\nassert     find_Odd_Pair([1,1,1,2,1,2],4) == False, 'Should return False'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find_Odd_Pair([1,2,3,4,5,6,7,8,9,10], 10) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 2\nassert     find_Odd_Pair([1,2,3,4],5) == 0\nassert     find_Odd_Pair([1,2,3,4,5],6) == 1\nassert     find_Odd_Pair([1,2,3,4,5,6],7) == 0\nassert     find_Odd_Pair([1,2,3,4,5,6],8) == 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function that takes a string as input and returns a string where all the vowels are uppercase and all other characters are lowercase.\n'''\ndef uppercase_vowels(string):\n    '''\n    Write a function that takes a string as input and returns a string where all the vowels are uppercase and all other characters are lowercase.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string(\"Hello\") == \"hELLO\"\nassert     toggle_string(\"HELLO\") == \"hEllO\"\nassert     toggle_string(\"hELLO\") == \"HELLO\"\nassert     toggle_string(\"HELLO WORLD\") == \"HELLO world\"\nassert     toggle_string(\"HELLO WORLD\") == \"HELLO WORLD\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_substring(string, sub_string):\n    '''\n    Count the number of times a substring appears in a string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string(\"String\") == \"STRING\", \"Should return STRING\"\nassert     toggle_string(\"String\") == \"sTRING\", \"Should return STRING\"\nassert     toggle_string(\"String\") == \"sTRiNg\", \"Should return STRING\"\nassert     toggle_string(\"String\") == \"sTrInG\", \"Should return STRING\"\nassert     toggle_string(\"String\") == \"STrInG\", \"Should return STRING\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string('Hello World!') == 'hELLO wORLD!'\nassert     toggle_string('HELLO WORLD!') == 'hELLO wORLD!'\nassert     toggle_string('HELLO WORLD!') == 'hELLO wORLD!'\nassert     toggle_string('hello world!') == 'Hello World!'\nassert     toggle_string('Hello World!') == 'Hello World!'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('Python') == 'pYTHON'\nassert     toggle_string('Hello') == 'hELLO'\nassert     toggle_string('CamelCase') == 'camelCase'\nassert     toggle_string('Camel_Case') == 'camelCase'\nassert     toggle_string('camel_Case') == 'camelCase'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string('Hello World') == 'hELLo wOrLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wOrLD'\nassert     toggle_string('HELLO world') == 'hELLO wOrLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wOrLD'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(5, 5) == 0, \"Test #1 Failed\"\nassert     digit_distance_nums(5, 5) == 0, \"Test #2 Failed\"\nassert     digit_distance_nums(5, 5) == 0, \"Test #3 Failed\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(37, 76) == 11\nassert     digit_distance_nums(1, 9) == 0\nassert     digit_distance_nums(101, 101) == 0\nassert     digit_distance_nums(12345, 12345) == 0\nassert     digit_distance_nums(123456789, 123456789) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(1234, 5678) == 10\nassert     digit_distance_nums(1234, 8888) == 1\nassert     digit_distance_nums(941, 941) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(100, 12) == 7\nassert     digit_distance_nums(100, 20) == 6\nassert     digit_distance_nums(100, 22) == 3\n\nprint('\\nSolution:')\nprint(digit_distance_nums(1234, 5678))\nprint(digit_distance_nums(1234, 1234))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         digit_distance_nums(100, 4) == 4\nassert         digit_distance_nums(100, 89) == 9\nassert         digit_distance_nums(89, 100) == 9\nassert         digit_distance_nums(19, 16) == 2\nassert         digit_distance_nums(19, 17) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(123, 321) == 6\nassert     digit_distance_nums(123, 2212) == 15\nassert     digit_distance_nums(2137, 2112) == 9\nassert     digit_distance_nums(2137, 2137) == 0\n\ndef sum_of_digit_nums_reversed(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(100,100) == 0, '1000-1000=0'\nassert     digit_distance_nums(123456789,987654321) == 5, '123456789-987654321=5'\nassert     digit_distance_nums(123,456) == 2, '123-456=2'\nassert     digit_distance_nums(1,2) == 1, '1-2=1'\nassert     digit_distance_nums(5,10) == 2, '5-10=2'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digit_distance_nums(10, 20) == 30\nassert     digit_distance_nums(13, 37) == 5\nassert     digit_distance_nums(15, 2) == 5\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(1, 1) == 0, \"1,1 is a correct test case\"\nassert     digit_distance_nums(123, 1231) == 1, \"123,1231 is a correct test case\"\nassert     digit_distance_nums(55, 5) == 4, \"55,5 is a correct test case\"\nassert     digit_distance_nums(10, 11) == 1, \"10,11 is a correct test case\"\n\n'''\nA quick way to learn to use a function is to make a function as small as possible\n'''\ndef calc_distance_of_num(n1, n2):\n    '''\n    Given two integers n1 and n2, return the absolute difference between n1 and n2\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(max_sub_array_sum(a, 4))\nprint(max_sub_array_sum(a, 4))\nprint(max_sub_array_sum(a, 4))\nprint(max_sub_array_sum(a, 4))\n\n\nfrom typing import List\ndef max_sub_array_sum(a:List[int], size:int) -> int:\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum([-1,3,4,-2], 4) == 6\nassert     max_sub_array_sum([1,-3,4,-2], 4) == 1\nassert     max_sub_array_sum([-1,-3,4,-2], 4) == 4\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum([1,3,4,10],3) == 19, \"Wrong solution\"\nassert max_sub_array_sum([0,3,5,8,10],5) == 14, \"Wrong solution\"\nassert max_sub_array_sum([-10,-3,-5,2,-1,5,6],3) == 17, \"Wrong solution\""
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nGiven a sorted list and a number, find the number\u2019s index in the list.\n'''\ndef find_index(alist, element):\n    '''\n    Write a function to find the index of the element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 5) == 9\nassert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3) == 6\nassert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2) == 9\nassert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 1) == 9\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum([3,-1,2,7,9,-3,4], 7) == 9\nassert     max_sub_array_sum([7,8,9,-10], 7) == 7\nassert     max_sub_array_sum([3,-1,2,7,9,-3,4], -1) == 0\n\ndef max_sub_array_sum_using_dp(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    dp = [[0 for j in range(size)] for i in range(size)]\n    # initialize dp array as 0\n    for i in range(size):\n        dp[i][i] = a[i]\n    for i in range(size-2, -1, -1):\n        for j in range(i+1, size):\n            dp[i][j] = a[i] + max(dp[i+1][j], dp[i+1][j-1])\n    # return the maximum sum\n    return max(dp[0])"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nimport unittest\n\nclass Test(unittest.TestCase):\n    '''Test Cases'''\n    data = [\n        ([-2, 1, -3, 4, -1, 2, 1, -5, 4], 6)\n    ]\n\n    def test_max_sub_array_sum(self):\n        for [test_list, expected] in self.data:\n            actual = max_sub_array_sum(test_list, len(test_list))\n            self.assertEqual(actual, expected)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements((1, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\nassert union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert union_elements((1, 2, 3, 4, 5), (6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\nassert union_elements((1, 2, 3, 4), (5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('You are correct!')\nprint()\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nunion_elements((1,2,3,4,5),(2,3,4,5,6)) == (1, 2, 3, 4, 5, 6)\nassert union_elements((1,2,3,4,5),(6,7,8,9,10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1, 2, 3), (5, 6, 7)) == (1, 2, 3, 5, 6, 7)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     union_elements((1,2,3,4), (2,3,4,5)) == (1,2,3,4,5)\nassert union_elements((1,2,4), (2,3,4,5)) == (1,2,3,4,5)\nassert union_elements((1,2,4,5), (2,3,4,5)) == (1,2,3,4,5)\nassert union_elements((1,2,3,4), (3,4)) == (1,2,3,4)\nassert union_elements((1,2,3,4), (3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     union_elements((1,2,3,4), (2,3,4)) == (1,2,3,4)\nassert     union_elements((1,2,3,4), (1,2,3,4)) == (1,2,3,4)\nassert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3), (1,2,3,4,5,6)) == (1,2,3,4,5,6)\n\nprint('All tests passed'"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1, 3, 5, 7), (2, 4, 6, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)\nassert     union_elements((1, 3, 5, 7), (2, 4, 6, 8, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 10)\nassert     union_elements((1, 3, 5, 7), (2, 4, 6, 8, 10, 11)) == (1, 2, 3, 4, 5, 6, 7, 8, 10, 11)\nassert     union_elements((1, 3, 5, 7), (2, 4, 6, 8, 10, 11, 12)) == (1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12)\nassert     union_elements((1, 3, 5, 7, 9), (2, 4, 6, 8, 10, 11, 12)) == (1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 9)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4) == (2, 3, 4)\nassert union_elements((1, 2), (2, 3, 4)) == (1, 2, 3, 4) == (2, 3, 4)\nassert union_elements((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3, 4) == (1, 2, 3, 4)\nassert union_elements((1, 2, 3), (2, 3)) == (1, 2, 3, 2, 3) == (1, 2, 3)\nassert union_elements((), ()) == ()\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1]) == 1\nassert     Find_Max_Length([1,2]) == 2\nassert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,4]) == 4\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([1,2,3]) == 1\nassert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1,2,3,4,5]) == 3\nassert     Find_Max_Length([1,2,3,4,5,6]) == 6\nassert     Find_Max_Length([1,2,3,4,5,6,7]) == 7\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([[]]) == 0, \"Find_Max_Length([[]]) is incorrect\"\nassert Find_Max_Length([[], [], []]) == 0, \"Find_Max_Length([[], [], []]) is incorrect\"\nassert Find_Max_Length([[]]) == 1, \"Find_Max_Length([[]]) is incorrect\"\nassert Find_Max_Length([[],[],[]]) == 1, \"Find_Max_Length([[],[],[]]) is incorrect\"\nassert Find_Max_Length([[],[],[]]) == 2, \"Find_Max_Length([[],[],[]]) is incorrect\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([\"a\", \"b\", \"c\", \"d\"]) == 4, \"Wrong value\"\nassert     Find_Max_Length([\"d\", \"e\", \"f\", \"g\"]) == 4, \"Wrong value\"\nassert     Find_Max_Length([\"c\", \"f\", \"h\", \"i\"]) == 3, \"Wrong value\"\nassert     Find_Max_Length([\"g\", \"i\", \"j\", \"k\"]) == 4, \"Wrong value\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([]) == 0, \"Empty list\"\nassert     Find_Max_Length([1, 2, 3, 4, 5]) == 5, \"Length 5\"\nassert     Find_Max_Length([1, 2, 3, 4, 5, 6]) == 6, \"Length 6\"\nassert     Find_Max_Length([1, 2, 3, 4, 5, 6, 7]) == 7, \"Length 7\"\nassert     Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8]) == 8, \"Length 8\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([1,2,3,4,5,6,7]) == 5, \"Should be 5\"\nassert     Find_Max_Length([2,3,4,5,6,7,8]) == 7, \"Should be 7\"\nassert     Find_Max_Length([2,3,4,5,6,7,8,9]) == 9, \"Should be 9\"\nassert     Find_Max_Length([1,2,3,4,5]) == 4, \"Should be 4\"\nassert     Find_Max_Length([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([[]]) == 0\nassert     Find_Max_Length([[], [], []]) == 0\nassert     Find_Max_Length([[1,2,3],[4,5,6]]) == 5\nassert     Find_Max_Length([[1],[2],[3],[4],[5],[6],[7]]) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max_Length([]) == 0\nassert Find_Max_Length([1,2,3,4]) == 4\nassert Find_Max_Length([1,2,3]) == 3\nassert Find_Max_Length([1]) == 1\nassert Find_Max_Length([1,2]) == 2\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([[1,2,3],[4,5,6],[7,8,9]]) == 6 \nassert     Find_Max_Length([[1,2],[4,5,6],[7,8],[9,10,11,12]]) == 11"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == [\"Hi\", \"He\", \"Lied\", \"Because\", \"Boron\", \"Could\", \"Not\", \"Oxidize\", \"Fluorine\", \"New\", \"Nations\", \"May\", \"Sign\", \"Peace\", \"Security\", \"Can\"]\nassert     extract_values(\"This is a sentence.\") == [\"This\", \"is\", \"a\", \"sentence\"]\nassert     extract_values(\"This is a sentence. I said something else.\") == [\"This\", \"is\", \"a\", \"sentence\", \"I\", \"said\", \"something\", \"else\"]\nassert     extract_values(\"This is a sentence. I said something else. But this time I said something else.\") == [\"This\", \"is\", \"a\", \"sentence\", \"I\", \"said\", \"something\", \"else\", \"But\", \"this\", \"time\", \"I\", \"said\", \"something\", \"else\"]\nassert     extract_values(\"Hello\") == [\"Hello\"]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('Hello, my name is Alex. Welcome to the jungle') == ['Hello','my name is Alex', 'Welcome', 'to', 'the', 'jungle']\nassert     extract_values('Hello, my name is Alex. Welcome to the jungle') == ['Hello','my name is Alex', 'Welcome', 'to', 'the', 'jungle']\nassert     extract_values('Hello, my name is Alex. Welcome to the jungle') == ['Hello','my name is Alex', 'Welcome', 'to', 'the', 'jungle']\nassert     extract_values('Hello, my name is Alex. Welcome to the jungle') == ['Hello','my name is Alex', 'Welcome', 'to', 'the', 'jungle']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values('\"hello\"') == 'hello'\nassert    extract_values('\" hi \"') =='hi '\nassert    extract_values('\" hi \"how are you\"') =='how are you'\nassert    extract_values('\" hi \"how are you') =='hi '\nassert    extract_values('hi \" how are you\"') =='hi '\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values('\"Yes\" and \"No\"') == ['Yes', 'No']\nassert    extract_values('\"yes\" and \"no\"') == ['yes', 'no']\nassert    extract_values('\"YES\" and \"NO\"') == ['YES', 'NO']\nassert    extract_values('\"YES\" \"NO\"') == ['YES', 'NO']\nassert    extract_values('\"Yes\" and \"No\" ') == ['Yes', 'No']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values(\"I love to program\") == \"program\"\nassert     extract_values(\"2 cats\") == \"\"\nassert     extract_values(\"I love 2 cats\") == \"2 cats\"\nassert     extract_values(\"I love 'cats'\") == \"cats\"\nassert     extract_values(\"I love 'cats\\n'\") == \"cats\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values(\"this is a string with single quote and double quote\") == [\"this\",\"is\",\"a\",\"string\",\"with\",\"single\",\"quote\",\"and\",\"double\",\"quote\"]\nassert     extract_values(\"a'b c\") == [\"a\",\"b\",\"c\"]\nassert     extract_values(\"\"\"\n    \"abc\"\n    \"def\"\n    \"ghi\"\n    \"jkl\"\n    \"\"\") == [\"abc\",\"def\",\"ghi\",\"jkl\"]\nassert     extract_values(\"'ab'c'\") == [\"ab\",\"c\"]\nassert     extract_values(\"\"\"'abc'\"\"\") == [\"abc\"]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values(\"The rain in Spain\") == \"The rain in Spain\"\nassert     extract_values(\"The rain and the fog\") == \"The rain and the fog\"\nassert     extract_values(\"The rain is in Spain\") == \"The rain is in Spain\"\nassert     extract_values(\"The rain is, in Spain\") == \"The rain is, in Spain\"\nassert     extract_values(\"The r i n g  is s i n g\") == \"The rain is in Spain\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values(\"Hi, my name is David, and I am 20 years old\") == 'David'\nassert     extract_values(\"I like apples, I like oranges, I like lemons, I like grapes, and I like oxts.\") == 'apple,orange,lemon,grape,oxts'\nassert     extract_values(\"I like apples, I like oranges, I like lemons, I like apples, and I like oxts.\") == 'apple,orange,lemon,apple,oxts'\nassert     extract_values(\"I like apples, I like oranges, I like lemons, I like apples, and I like apples, and I like apples, I like apples, and I like apples, I like apples, and I like apples, I like apples, and I like apples, I like apples, and I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I like apples, I lik"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values('this is a string with single quote \"') =='single quote'\nassert     extract_values('this is a string with single quote \" and a second single quote \\' and last quote\\') =='single quote and a second single quote and last quote'\nassert     extract_values('this is a string with double quotes \"and then single quotes \\' and then last quote\"') == 'double quotes and then single quotes and then last quote'\nassert     extract_values('this is a string with double quotes \"and then single quotes \\' and then last quote\" and a second double quotes \"and then single quotes \\' and then last quote\") == 'double quotes \"and then single quotes \\' and then last quote\" and a second double quotes \"and then single quotes \\' and then last quote\"\nassert     extract_values('this is a string with double quotes \"and then single quotes \\' and then last quote\" and a second double quotes \"and then single quotes \\' and then last quote\") == 'double quotes \"and then single quotes \\' and then last quote\" and a second double quotes \"and then single quotes \\' and then last quote\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    extract_values(\"x = \\\"hello\\\"\") == \"hello\"\n    extract_values(\"x = \\\"hello\\\"\") == \"hello\"\n    extract_values(\"x = \\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = 'hello'\") == \"hello\"\n    extract_values(\"x = 'hello'\") == \"hello\"\n    extract_values(\"x = 'this is a sample string'\") == \"this is a sample string\"\n    extract_values(\"x = 'this is a sample string'\") == \"this is a sample string\"\n    extract_values(\"x = \\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = \\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = \\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = \\\"(this is a sample string)\\\"\") == \"this is a sample string\"\n    extract_values(\"x = \\\"(this is a sample string)\\\"\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\")\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\")\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = \\\"(this is a sample string)\\\")\") == \"this is a sample string\"\n    extract_values(\"x = \\\"(this is a sample string)\\\")\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = \\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = \\\"this is a sample string\\\"\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\")\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\")\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\")\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\")\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x = (\\\"this is a sample string\\\"))\") == \"this is a sample string\"\n    extract_values(\"x "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_Pairs([1,2,3,4,5,6],6) == 7\ncount_Pairs([1,2,3,4,5,6],5) == 6\ncount_Pairs([1,2,3,4,5,6],4) == 4\ncount_Pairs([1,2,3,4,5,6],3) == 3\ncount_Pairs([1,2,3,4,5,6],2) == 2\ncount_Pairs([1,2,3,4,5,6],1) == 1\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Pairs([1,2,3],2)==4, count_Pairs([1,2,3],2)\nassert     count_Pairs([1,2,3],4)==0, count_Pairs([1,2,3],4)\nassert     count_Pairs([1,2,3],5)==0, count_Pairs([1,2,3],5)\nassert count_Pairs([1,2,3],6)==0, count_Pairs([1,2,3],6)\nassert count_Pairs([1,2,3],1)==0, count_Pairs([1,2,3],1)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_Pairs([1,2,3],4) == 1\n    count_Pairs([2,2,2,2],4) == 1\n    count_Pairs([1,2,2,2],4) == 2\n    count_Pairs([4,4,4,4],4) == 3\n    count_Pairs([4,3,4,4],4) == 2\n    count_Pairs([1,2,3,4],4) == 0\n    count_Pairs([1,2,2,2],4) == 2\n    count_Pairs([3,4,5,6],4) == 1\n    count_Pairs([],4) == 0\n    count_Pairs([1,2,2,2],2) == 1\n    count_Pairs([1,2,2,2],1) == 0\n    count_Pairs([1,2,2,2],0) == 0\n    count_Pairs([1,2,2,2],5) == 0\n    count_Pairs([1,2,2,2],6) == 0\n    count_Pairs([1,2,2,2],7) == 0\n    count_Pairs([1,2,2,2],8) == 0\n    count_Pairs([1,2,2,2],9) == 0\n    count_Pairs([1,2,2,2],10) == 0\n    count_Pairs([1,2,2,2],11) == 0\n    count_Pairs([1,2,2,2],12) == 0\n    count_Pairs([1,2,2,2],13) == 0\n    count_Pairs([1,2,2,2],14) == 0\n    count_Pairs([1,2,2,2],15) == 0\n    count_Pairs([1,2,2,2],16) == 0\n    count_Pairs([1,2,2,2],17) == 0\n    count_Pairs([1,2,2,2],18) == 0\n    count_Pairs([1,2,2,2],19) == 0\n    count_Pairs([1,2,2,2],20) == 0\n    count_Pairs([1,2,2,2],21) == 0\n    count_Pairs([1,2,2,2],22) == 0\n    count_Pairs([1,2,2,2],23) == 0\n    count_Pairs([1,2,2,2],24) == 0\n    count_Pairs([1,2,2,2],25) == 0\n    count_Pairs([1,2,2,2],26) == 0\n    count_Pairs([1,2,2,2],27) == 0\n    count_Pairs([1,2,2,2],28) == 0\n    count_Pairs([1,2,2,2],29) == 0\n    count_Pairs([1,2,2,2],30) == 0\n    count_Pairs([1,2,2,2],31) == 0\n    count_Pairs([1,2,2,2],32) == 0\n    count_Pairs([1,2,2,2],33) == 0\n    count_Pairs([1,2,2,2],34) == 0\n    count_Pairs([1,2,2,2],35) == 0\n    count_Pairs([1,2,2,2],36) == 0\n    count_Pairs([1,2,2,2],37) == 0\n    count_Pairs([1,2,2,2],38) == 0\n    count_Pairs([1,2,2,2],39) == 0\n    count_Pairs([1,2,2,2],40) == 0\n    count_Pairs([1,2,2,2],41) == 0\n    count_Pairs([1,2,2,2],42) == 0\n    count_Pairs([1,2,2,2],43) == 0\n    count_Pairs([1,2,2,2],44) == 0\n    count_Pairs([1,2,2,2],45) == 0\n    count_Pairs([1,2,2,2],46) == 0\n    count_Pairs([1,2,2,2],47) == 0\n    count_Pairs([1,2,2,2],48) == 0\n    count_Pairs([1,2,2,2],49) == 0\n    count_Pairs([1,2,2,2],50) == 0\n    count_Pairs([1,2,2,2],51) == 0\n    count_Pairs([1,2,2,2],52) == 0\n    count_Pairs([1,2,2,2],53) == 0\n    count_Pairs([1,2,2,2],54) == 0\n    count_Pairs([1,2,2,2],55) == 0\n    count_Pairs([1,2,2,2],56) == 0\n    count_Pairs([1,2,2,2],57) == 0\n    count_Pairs([1,2,2,2],58) == 0\n    count_Pairs([1,2,2,2],59) == 0\n    count_Pairs([1,2,2,2],60) == 0\n    count_Pairs([1,2,2,2],61) == 0\n    count_Pairs([1,2,2,2],62) == 0\n    count_Pairs([1,2,2,2],63) == 0\n    count_Pairs([1,2,2,2],64) == 0\n    count_Pairs([1,2,2,2],65) == 0\n    count_Pairs([1,2,2,2],66) == 0\n    count_Pairs([1,2,2,2],67) == 0\n    count_Pairs([1,2,2,2],68) == 0\n    count_Pairs([1,2,2,2],69) == 0\n    count_Pairs([1,2,2,2],70) == 0\n    count_Pairs([1,2,2,2],71) == 0\n    count_Pairs([1,2,2,2],72) == 0\n    count_Pairs([1,2,2,2],73) == 0\n    count_Pairs([1,2,2,2],74) == 0\n    count_Pairs([1,2,2,2],75) == 0\n    count_Pairs([1,2,2,2],76) == 0\n    count_Pairs([1,2,2,2],77) == 0\n    count_Pairs([1,2,2,2],78) == 0\n    count_Pairs([1,2,2,2],79) == 0\n    count_Pairs([1,2,2,2],80) == 0\n    count_Pairs([1,2,2,2],81) == 0\n    count_Pairs([1,2,2,2],82) == 0\n    count_Pairs([1,2,2,2],83) == 0\n    count_Pairs([1,2,2,2],84) == 0\n    count_Pairs([1,2,2,2],85) == 0\n    count_Pairs([1,2,2,2],86) == 0\n    count_Pairs([1,2,2,2],87) == 0\n    count_Pairs([1,2,2,2],88) == 0\n    count_Pairs([1,2,2,2],89) == 0\n    count_Pairs([1,2,2,2],90) == 0\n    count_Pairs([1,2,2,2],91) == 0\n    count_Pairs([1,2,2,2],92) == 0\n    count_Pairs([1,2,2,2],93) == 0\n    count_Pairs([1,2,2,2],94) == 0\n    count_Pairs([1,2,2,2],95) == 0\n    count_Pairs([1,2,2,2],96) == 0\n    count_Pairs([1,2,2,2],97) ="
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Pairs([2,3,4,1,5], 5) == 2\nassert     count_Pairs([2,3,4,1,5], 6) == 2\nassert     count_Pairs([2,3,4,1,5], 7) == 3\nassert     count_Pairs([2,3,4,1,5], 8) == 4\nassert     count_Pairs([2,3,4,1,5], 9) == 5\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_Pairs([3,3,4,4,5,5], 8) == 1\nassert \ncount_Pairs([5,3,3,4,4,5], 8) == 2\nassert \ncount_Pairs([3,4,5], 8) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Pairs([3, 4, 5, 5], 2) == 1\nassert     count_Pairs([3, 4, 5, 6], 2) == 2\nassert     count_Pairs([1, 2, 3, 4, 5], 2) == 0\nassert     count_Pairs([1, 2, 3, 4, 5], 3) == 3\nassert     count_Pairs([1, 2, 3, 4], 4) == 0\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert     split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split('hi') == ['h', 'i']\nassert     split('hi world') == ['h', 'i', 'w', 'o', 'r', 'l', 'd']\nassert     split('hi') == ['h', 'i']\nassert     split('hi') == ['h', 'i']\nassert     split('') == []\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split(\"hello\") == [\"h\",\"e\",\"l\",\"l\",\"o\"]\nassert     split(\"hello world!\") == [\"h\",\"e\",\"l\",\"l\",\"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\", \"!\"]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef isPalindrome(word): \n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split('ab') == ['a', 'b']\nassert     split('a') == ['a']\nassert     split('ab') == ['a', 'b']\nassert     split('a') == ['a']\nassert     split('ab') == ['a', 'b']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split(\"How are you\") == ['H', 'o', 'w', 'o', 'r', 'e', 'y']\nassert     split(\"12345\") == ['1', '2', '3', '4', '5']\nassert     split(\"\") == []\nassert     split(\"Hey, welcome to my world. Welcome to my world.\") == ['Hey', ',', 'welcome', 'to','my', 'world.', 'Welcome', 'to','my', 'world.']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split('abcdefghijklmnopqrstuvwxyz') == ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\nassert     split('i have no real data science skill.') == ['i','have','no','real','data','science','skill','.']\nassert     split('i have no real data science skill.') == ['i','have','no','real','data','science','skill','.']\nassert     split('i have no real data science skill.') == ['i','have','no','real','data','science','skill','.']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split(\"hej\") == [\"h\", \"e\", \"j\"] \nassert     split(\"Hej\") == [\"H\", \"e\", \"J\"] \nassert     split(\"hEj\") == [\"h\", \"e\", \"j\"] \nassert     split(\"Hejhej\") == [\"H\", \"e\", \"J\", \"h\", \"e\", \"j\"] \nassert     split(\"Hello World\") == [\"H\", \"e\", \"l\", \"l\", \"o\", \"W\", \"o\", \"r\", \"l\", \"d\"] \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'], 'Wrong Output'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_digits(0) == 0, \"Expected 0\"\nassert     sum_digits(123) == 6, \"Expected 6\"\nassert     sum_digits(1234) == 15, \"Expected 15\"\nassert     sum_digits(12345) == 24, \"Expected 24\"\nassert     sum_digits(123456) == 45, \"Expected 45\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_digits(42) == 10\nassert     sum_digits(999) == 14\nassert     sum_digits(1) == 1\nassert     sum_digits(0) == 0"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not sum_digits(-5)\nassert sum_digits(0) == 0\nassert sum_digits(9) == 9\nassert sum_digits(10) == 10\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_digits(1234) == 10, 'Expected sum_digits(1234) == 10'\nassert     sum_digits(123) == 3, 'Expected sum_digits(123) == 3'\nassert     sum_digits(0) == 0, 'Expected sum_digits(0) == 0'\nassert     sum_digits(101) == 11, 'Expected sum_digits(101) == 11'\nassert     sum_digits(-10) == 2, 'Expected sum_digits(-10) == 2'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(999) == 6\nassert     sum_digits(1000) == 3\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_digits(1234) == 10, 'Wrong!'\nassert sum_digits(0) == 0, 'Wrong!'\nassert sum_digits(123) == 6, 'Wrong!'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(1234567890) == 10\nassert     sum_digits(12345) == 6\nassert     sum_digits(123) == 3\nassert     sum_digits(0) == 0\n\ndef swap(n, i, j):\n    '''\n    Write a function to swap the values of two pairs of integer elements.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(321) == 6\nassert     sum_digits(1234) == 12\nassert     sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(sum_digits(123)) # 6\nprint(sum_digits(1000)) # 3\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     issort_list(['a', 'b', 'c']) == False\nassert     issort_list(['a', 'b', 'c', 'c']) == False\nassert     issort_list(['a', 'a', 'b']) == True\nassert     issort_list(['a', 'a', 'a', 'b']) == False\nassert     issort_list(['a', 'b', 'c', 'd']) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert issort_list([5, 3, 1])\nassert issort_list([1, 5, 3])\nassert issort_list([3, 1, 5])\nassert not issort_list([5, 5, 5])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list([1,2,3,4]) == True\nassert     issort_list([3,2,1,4]) == False\nassert     issort_list([4,3,2,1]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     issort_list([1, 2, 3, 4, 5]) == True\nassert     issort_list([1, 3, 5, 2, 4]) == True\nassert     issort_list([1, 2, 4, 3, 5]) == True\nassert     issort_list([1, 2, 3, 5, 4]) == False\nassert     issort_list([2, 1, 4, 3, 5]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     issort_list(['4','3','1','2']) == True, \"Wrong Answer\"\nassert     issort_list([1,2,3,4]) == True, \"Wrong Answer\"\nassert     issort_list([4,3,2,1]) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     issort_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     issort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == False\nassert     issort_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1]) == False\nassert     issort_list([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == True\nassert     issort_list([9, 8, 7, 6, 5, 4, 3, 2, 1, -1]) == True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(5) == []\nassert     empty_list(10) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(5) == [{}, {}, {}, {}, {}], \"Empty list is not correct\"\nassert empty_list(0) == [], \"Empty list has to be empty\"\nassert empty_list(1) == [{}], \"Empty list has to be empty\"\nassert empty_list(2) == [{}, {}], \"Empty list has to be empty\"\nassert empty_list(3) == [{}, {}, {}], \"Empty list has to be empty\"\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_list(2) == [{},{}], 'Expected the list to contain 2 empty dictionaries'\nassert     empty_list(3) == [{},{},{}], 'Expected the list to contain 3 empty dictionaries'\n\ndef get_values(my_list):\n    '''\n    Write a function that takes a list and returns a new list with the values \n    removed.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_list(1) == []\nassert     empty_list(2) == [[],[]]\nassert     empty_list(3) == [[{}],[{}],[{}]]\n\ndef replace(tuple_list):\n    '''\n    Write a function to replace the last element of a list with the sum of all the elements of the list.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(empty_list(3))\n\nassert empty_list(4) == [{},{},{}]"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_list(0) == [], 'FAIL'\nassert     empty_list(1) == [{}], 'FAIL'\nassert     empty_list(2) == [{}, {}], 'FAIL'\nassert     empty_list(3) == [{}, {}, {}], 'FAIL'\nassert     empty_list(4) == [{}, {}, {}, {}], 'FAIL'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef empty_dictionaries():\n    '''\n    Write a function to create empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(10) == []\nassert     empty_list(20) == []\nassert     empty_list(5) == []\nassert     empty_list(0) == []\n\nprint('All test cases have passed!')\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([[], ['a'], ['a', 'b'], ['a', 'c'], ['a', 'c', 'b'], ['a', 'c', 'b', 'd']]) == [[], ['a'], ['a', 'b'], ['a', 'c'], ['a', 'c', 'b'], ['a', 'c', 'b', 'd']]\n\ndef format_name(first_name, last_name):\n    '''\n    Write a function that takes two strings and returns a string of the format\n    <firstname> <surname>.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef flatten(lst):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([\"ab\", \"ab\", \"aa\"]) == [\"aa\", \"ab\", \"ab\"]\nassert     sort_sublists([\"abb\", \"ab\", \"bbb\"]) == [\"ab\", \"abb\", \"bbb\"]\nassert     sort_sublists([\"abc\", \"b\", \"bca\"]) == [\"abc\", \"b\", \"bca\"]\nassert     sort_sublists([\"a\", \"ab\"]) == [\"ab\", \"a\"]\nassert     sort_sublists([]) == []"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([['a','b','c','d'],['e','f','g']]) == [['a','e','b','f'],['d','c','g','c']]\nassert     sort_sublists([[1,2,3],[4,5,6],[7,8,9]]) == [[1,4,7],[2,5,8],[3,6,9]]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sort_sublists(list1) == None\n\ndef sort_all_lists(list_of_lists):\n    '''\n    Write a function to sort all sublists of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([['apple', 'pen', 'pencil'], ['banana'], ['orange', 'orange']]) == [['apple', 'pen', 'pencil'], ['orange', 'orange', 'banana'], ['pen', 'pencil', 'apple']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists(['x','y','z','w','v']) == ['x','v','y','z','w'], 'test 1 failed'\nassert sort_sublists(['x','w','y','z','v']) == ['x','y','z','w','v'], 'test 2 failed'\nassert sort_sublists(['z','y','x','w','v']) == ['x','y','z','w','v'], 'test 3 failed'\nassert sort_sublists(['x','y','z','w']) == ['x','y','z','w'], 'test 4 failed'\nassert sort_sublists(['w','y','z','x']) == ['x','y','z','w'], 'test 5 failed'\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists(['1', '2', '3']) == ['1', '2', '3']\nassert     sort_sublists(['1', '2', '3']) == ['2', '3', '1']\nassert     sort_sublists(['1', '2', '3']) == ['3', '2', '1']\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([['a', 'a', 'b', 'b', 'b'], ['a', 'a', 'b', 'c'], ['b', 'a', 'c']]) == [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'b', 'b'], ['b', 'a', 'b', 'a', 'c']]"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([1,1,1,2,2,3]) == [1,2,3], 'Passed'\nassert     two_unique_nums([1,2,2,3,4,5]) == [1,2,3,4,5], 'Passed'\nassert     two_unique_nums([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == [1,2,3,4,5,1,2,3,4,5], 'Passed'\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ntwo_unique_nums([[1, 2], [2, 3], [3, 4], [1, 2], [1, 2]])"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert two_unique_nums([[2, 3], [5, 6]]) == [[2, 3], [5, 6]], \"Should return [[2, 3], [5, 6]]\"\nassert two_unique_nums([[1, 1, 1], [1, 1, 1]]) == [[1, 1, 1]], \"Should return [[1, 1, 1]]\"\nassert two_unique_nums([[1, 1, 1, 1], [1, 1, 1], [1, 1, 1, 1]]) == [[1, 1, 1, 1]], \"Should return [[1, 1, 1, 1]]\"\nassert two_unique_nums([[1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == [[1, 1], [1, 1, 1, 1]], \"Should return [[1, 1], [1, 1, 1, 1]]\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums([[1,2,3,4],\n                            [1,2,3,5],\n                            [1,2,3,4],\n                            [1,2,4,5],\n                            [1,2,3,4]]) == [[1,2,3,4],\n                                            [1,2,3,5],\n                                            [1,2,4,5]]\nassert     two_unique_nums([[1,2,3,4],\n                            [1,2,3,5],\n                            [1,2,4,5],\n                            [1,2,4,5],\n                            [1,2,4,5]]) == [[1,2,3,4],\n                                            [1,2,4,5]]\nassert     two_unique_nums([[1,2,3,4],\n                            [1,2,3,5],\n                            [1,2,4,5],\n                            [1,2,4,5]]) == [[1,2,3,4],\n                                            [1,2,4,5]]\nassert     two_unique_nums([[1,2,3,4,5,6],\n                            [1,2,3,4,5,6],\n                            [1,2,3,4,5,6],\n                            [1,2,3,4,5,6],\n                            [1,2,3,4,5,6]]) == [[1,2,3,4,5,6],\n                                            [1,2,3,4,5,6]]\nassert     two_unique_nums([[1,2,3,4,5,6],\n                            [1,2,3,4,5,6],\n                            [1,2,3,4,5,6],\n                            [1,2,3,4,5,6],\n                            [1,2,3,4,5,6]]) == [[1,2,3,4,5,6],\n                                            [1,2,3,4,5,6]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([[1,2,2],[1,1]]) == [[1,2],[1,1]]\nassert     two_unique_nums([[1,1,2],[1,1,1]]) == [[1,1,2],[1,1,1]]\nassert     two_unique_nums([[1,2,1],[1,1]]) == [[1,2],[1,1]]\nassert     two_unique_nums([[1,1,2],[2,2,2]]) == [[1,2],[2,2,2]]\nassert     two_unique_nums([[1,1,2],[2,2,2]]) == [[1,2],[2,2,2]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_sum_of_list(numbers):\n    '''\n    Write a python function to find sum of elements of the list.\n    '''\n    pass\n\nassert get_sum_of_list([1,2,3]) == 6\nassert get_sum_of_list([]) == 0\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntwo_unique_nums([1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,4,5]]\nassert \ntwo_unique_nums([1,2,3,4,5,1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,4,5]]\nassert \ntwo_unique_nums([1,2,3,4,5,1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,4,5]]\nassert \ntwo_unique_nums([1,2,3,4,5,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]]\nassert \ntwo_unique_nums([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,4,5]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1,2,3,4,5,6,7,2]) == product_of_unique_numbers(list_data)\nassert     unique_product([1,2,3,4,5,6,7,2,3]) == product_of_unique_numbers(list_data)\nassert     unique_product([1,2,3,4,5,6,7,2,3,4]) == product_of_unique_numbers(list_data)\nassert     unique_product([1,2,3,4,5,6,7,2,3,4,5]) == product_of_unique_numbers(list_data)\nassert     unique_product([1,2,3,4,5,6,7,2,3,4,5,6]) == product_of_unique_numbers(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_product([1, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3]) == 120, \"incorrect output\"\nassert     unique_product([1, 1, 1, 1, 2, 3, 4, 4, 5, 6, 1, 2, 3]) == 720, \"incorrect output\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1,2,3,4,5]) == 120, \"Test Case 1 Failed\"\nassert     unique_product([1,2,3,4,5]) == 120, \"Test Case 2 Failed\"\nassert     unique_product([1,2,3,4,5,5,4]) == 60, \"Test Case 3 Failed\"\nassert     unique_product([]) == 1, \"Test Case 4 Failed\"\nassert     unique_product([1,2,3,4,5]) == 120, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([-1, 2, -3, 4, 5, 1, -8]) == 20\nassert     unique_product([-1, 2, -3, 4, 5, 1, -8, -5, 10]) == 55\nassert     unique_product([]) == 1\nassert     unique_product([-2, 4, -3, -8, 10]) == -12\nassert     unique_product([1, 1, 1, 1]) == 1\nprint('Congratulations!!')\nprint('All test cases passed.')\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([1,2,3,3,3,4,5,6,7,9]) == 120\nassert     unique_product([2,4,5,6,6,5,7,5,8,9]) == 18\nassert     unique_product([1,2,3,3,3,4,5,6,7,9]) == 120\nassert     unique_product([1,1,1,1,1,1,1,1,1,1]) == 1\nassert     unique_product([1,2,3,3,4,5,6,7,8,9]) == 72\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([2,3,3,4,5,6,6]) == 120\nassert     unique_product([2,3,3,4,5,6,6,1]) == 120\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([1,2,3,4,5,6]) == 120, \"Incorrect product\"\nassert     unique_product([1,2,3,4]) == 24, \"Incorrect product\"\nassert     unique_product([]) == 1, \"Empty list\"\nassert     unique_product(['a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a',"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 120\nassert     unique_product([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 900\nassert     unique_product([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -2400\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 120\nassert     unique_product([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     unique_product([1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 5]) == 10\n\ndef unique_element(list_data):\n    '''\n    Write a python function to get the unique elements from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(1,2) == 2*pi*1\nassert     surfacearea_cylinder(2,3) == 2*pi*3\nassert     surfacearea_cylinder(3,4) == 2*pi*4\nassert     surfacearea_cylinder(4,5) == 2*pi*5\nassert     surfacearea_cylinder(5,6) == 2*pi*6\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(1,3) == 4\nassert surfacearea_cylinder(2,3) == 12\nassert surfacearea_cylinder(2.1,3) == 10.8\n\nprint(\"You've passed the task.\")"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(2,3) == 7.778, 'incorrect result'\nassert     surfacearea_cylinder(3,2) == 12.764, 'incorrect result'\nassert     surfacearea_cylinder(1,2) == 14.142, 'incorrect result'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(10,20) == 500, 'incorrect surfacearea_cylinder'\nassert surfacearea_cylinder(5,6) == 120, 'incorrect surfacearea_cylinder'\nassert surfacearea_cylinder(10,5) == 150, 'incorrect surfacearea_cylinder'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert surfacearea_cylinder(10,6) == 60\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cylinder(2,3) == 12.5\nassert     surfacearea_cylinder(3,4) == 17.6\nassert     surfacearea_cylinder(10,10) == 314.16\nassert     surfacearea_cylinder(5,8) == 78.73\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(1,1) == 2.7765989458853167\nassert     surfacearea_cylinder(2,1) == 3.141592653589793\nassert     surfacearea_cylinder(3,1) == 6.283185307179586\nassert     surfacearea_cylinder(4,1) == 11.0\nassert     surfacearea_cylinder(1,2) == 3.141592653589793\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([1,2,3,4],[[1,2,3],[4,5]]) == True\nassert     is_Sub_Array([1,2,3,4],[[1,2],[3,4],[5]]) == True\nassert     is_Sub_Array([1,2,3,4],[[1],[2],[3],[4],[5]]) == False\nassert     is_Sub_Array([1,2,3,4],[[1,2,3,4]]) == True\n\ndef check_Sub_Array(A,B,n):\n    '''\n    Write a python function to check whether A is a subarray of B or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([3,5,10],[[2,4,6],[2,5,9],[2,8,4],[2,10,3],[4,8,7],[4,5,5]])==True, \"Incorrect output\"\nassert     is_Sub_Array([7,4,1],[[2,4,6],[2,5,9],[2,8,4],[2,10,3],[4,8,7],[4,5,5]])==True, \"Incorrect output\"\nassert     is_Sub_Array([4,1,2],[[2,4,6],[2,5,9],[2,8,4],[2,10,3],[4,8,7],[4,5,5]])==False, \"Incorrect output\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nA = [2,3,4]\nB = A\n\nprint(is_Sub_Array(A,B))\nprint(is_Sub_Array(B,A))"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sub_Array([2,3,4,5,6], [2,3,4]) == True, \"Error1\"\nassert     is_Sub_Array([2,3,4,5,6], [6,7,8]) == False, \"Error2\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3], [1,2,3]) == True\nassert     is_Sub_Array([1,2,3], [1,2]) == False\nassert     is_Sub_Array([], [1,2,3]) == False\nassert     is_Sub_Array([1,2,3], [1,2,3]) == True\nassert     is_Sub_Array([1,2,3], [1,3,3]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sub_Array([1,2,3,4], [3,4])==True, \"is_Sub_Array function is not correct\"\nassert     is_Sub_Array([3,4],[1,2,3,4])==True, \"is_Sub_Array function is not correct\"\nassert     is_Sub_Array([1,2,3,4],[3,4])==False, \"is_Sub_Array function is not correct\"\nassert     is_Sub_Array([1,2,3,4],[1,2,3])==False, \"is_Sub_Array function is not correct\"\nassert     is_Sub_Array([1,2,3,4],[])==False, \"is_Sub_Array function is not correct\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sub_Array([1,2,3,4], [-1,-2,-3,-4]) == False, \"1st test case\"\nassert     is_Sub_Array([2,2,3,4], [-1,-2,-3,-4]) == True, \"2nd test case\"\nassert     is_Sub_Array([1,2,3,4], []) == True, \"3rd test case\"\nassert     is_Sub_Array([1,2,3,4], [1]) == True, \"4th test case\"\nassert     is_Sub_Array([1,2,3,4], [2]) == True, \"5th test case\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint ('The expected output is : True. The actual output is :',is_Sub_Array([1,2,3,4,5,6],[1,2,3,4]))\nassert \nprint ('The expected output is : False. The actual output is :',is_Sub_Array([1,2,3,4,5,6],[1,2,3,4,5]))\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([], [1,2,3,4]) == True, '0'\nassert     is_Sub_Array([1,2,3], [1,2,3]) == True, '1'\nassert     is_Sub_Array([1,2,3], [1,2,4]) == False, '2'\nassert     is_Sub_Array([1,2,3,4], [1,2,3]) == False, '3'\nassert     is_Sub_Array([1,2,3,4], [1,2]) == True, '4'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    if len(A) > len(B):\n        return False\n    while i < len(B):\n        print(i)\n        if A[i] == B[0]:\n            print(i)\n            print(B[i])\n            if len(B) == 1:\n                return True\n            return is_Sub_Array(A[i+1:],B[1:])\n        else:\n            i = i + 1\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(1)    == 0, \"Test Case 1 Failed!\"\nassert     last_Digit_Factorial(9)    == 9, \"Test Case 2 Failed!\"\nassert     last_Digit_Factorial(10)    == 1, \"Test Case 3 Failed!\"\nassert     last_Digit_Factorial(22)    == 2, \"Test Case 4 Failed!\"\nassert     last_Digit_Factorial(25)    == 5, \"Test Case 5 Failed!\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nlast_Digit_Factorial(1) == 1\nassert\nlast_Digit_Factorial(2) == 2\nassert\nlast_Digit_Factorial(3) == 3\nassert\nlast_Digit_Factorial(4) == 4\nassert\nlast_Digit_Factorial(5) == 5\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(12) == 3\nassert     last_Digit_Factorial(13) == 1\nassert     last_Digit_Factorial(20) == 2\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(100)==10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(2) == 2\nassert     last_Digit_Factorial(3) == 3\nassert     last_Digit_Factorial(4) == 4\nassert     last_Digit_Factorial(8) == 8\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(6) == 6\nassert     last_Digit_Factorial(5.5) == 5\nassert     last_Digit_Factorial(-5) == -5\nassert     last_Digit_Factorial(20) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(1)==0\nassert     last_Digit_Factorial(100)==0\nassert     last_Digit_Factorial(1000)==1\nassert     last_Digit_Factorial(10000)==3\nassert     last_Digit_Factorial(100000)==0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit_Factorial(0) == 0\nassert     last_Digit_Factorial(6) == 0\nassert     last_Digit_Factorial(9) == 1\nassert     last_Digit_Factorial(99) == 9\nassert     last_Digit_Factorial(130) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"Correct Answer\")\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3,4],['a','b','c'],['d','e','f']) == ['1','2','3','a','4','b','c','d','e','f']\nassert     interleave_lists([1,2,3],['a','b'],['c','d']) == ['1','a','b','2','c','d','3']\nassert     interleave_lists([1,2],['a','b','c'],['d','e','f']) == ['1','a','b','2','d','e','f','c']\nassert     interleave_lists([1,2],['a','b','c'],['d','e','f','g']) == ['1','a','b','c','2','d','e','f','g']\nassert     interleave_lists([1,2],['a','b','c'],['d','e','f','g'],[7,8,9,10]) == ['1','a','b','c','2','d','e','f','g',7,8,9,10]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]) ==     [1,6,11,2,7,12,3,8,13,4,9,14,5,10,15]\nassert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) ==     [1,4,7,2,5,8,3,6]\n\n\ndef interleave_lists_2(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # *********** Your Solution Here ************************\n    # define an auxilary function\n    def interleave(lst1,lst2,lst3,pos):\n        # define an auxilary function\n        def interleave_aux(lst1,lst2,lst3):\n            # a function to return a list with elements\n            # appended between each element\n            result = []\n            # append the first element\n            result.append(lst1[0])\n            for i in range(1,len(lst1)):\n                result.append(lst1[i])\n                result.append(lst2[i])\n            # append the last element\n            result.append(lst3[-1])\n            return result\n        # return the function with the above defined function\n        return interleave_aux(lst1,lst2,lst3)\n    # return the result\n    return interleave(list1,list2,list3,0)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1, 2, 3, 4], [5, 6, 7, 8], ['a', 'b', 'c']) == [[1, 5, 'a'], [2, 6, 'b'], [3, 7, 'c'], [4, 8, 'c']]\nassert     interleave_lists([1, 2, 3, 4], ['a', 'b', 'c'], [5, 6, 7]) == [[1, 5, 'a'], [2, 6, 'b'], [3, 7, 'c'], [4, 'c', 8]]"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3],['a','b','c'],[4,5,6]) == ['a',1,4,'b',2,5,'c',3,6], \"Should return [1,4,5,'b',2,5,'c',3,6]\"\nassert     interleave_lists([1,2,3],['a','b','c'],[1,2,3]) == ['a',1,1,'b',2,2,'c',3,3], \"Should return [1,1,'a',1,2,'b',2,2,'c',3,3]\"\nassert     interleave_lists([1,2,3],['a','b','c'],[1,2,3,'d']) == ['a',1,1,'b',2,2,'c',3,3,'d',4,5,6], \"Should return [1,1,'a',1,2,'b',2,2,'c',3,3,'d',4,5,6]\"\nassert     interleave_lists([1,2,3],['a','b','c'],[1,2,3,4]) == ['a',1,1,'b',2,2,'c',3,3,4], \"Should return [1,1,'a',1,2,'b',2,2,'c',3,3,4]\"\nassert     interleave_lists([1,2,3],['a','b','c'],[1,2,3,4,5]) == ['a',1,1,'b',2,2,'c',3,3,4,5], \"Should return [1,1,'a',1,2,'b',2,2,'c',3,3,4,5]\"\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     interleave_lists([1,2,3,4,5],[6,7,8,9],[10,11,12,13,14]) == [1,2,3,6,7,4,9,8,5,10,11,12,13,14]\nassert interleave_lists([1,2,3,4,5],[6,7,8],[10,11,12,13,14]) == [1,2,6,3,7,4,8,10,11,12,13,14]\nassert interleave_lists([1,2,3],[6,7],[8,9,10,11,12]) == [1,2,6,3,7,8,9,10,11,12]"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3], ['a','b','c'], ['x','y','z']) == ['1', 'a', 'x', '2', 'b', 'y', 'z', '3', 'c', 'x', 'y', 'z']\nassert     interleave_lists([], ['a','b','c'], ['x','y','z']) == ['a', 'x', 'b', 'y', 'c', 'x', 'y', 'z']\nassert     interleave_lists([1,2,3], ['a','b','c'], ['x','y','z']) == ['1', 'a', 'x', '2', 'b', 'y', 'z', '3', 'c', 'x', 'y', 'z']\nassert     interleave_lists([1,2,3], ['a','b','c'], ['x','y','z']) == ['1', 'a', 'x', '2', 'b', 'y', 'z', '3', 'c', 'x', 'y', 'z']\nassert     interleave_lists([1,2,3,4], ['a','b','c','d'], ['x','y','z','w']) == ['1', 'a', 'x', '2', 'b', 'y', 'z', '3', 'c', 'd', 'w', '4', 'x', 'y', 'z', 'w', '4', 'x', 'y', 'z']\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ninterleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert\ninterleave_lists([1,2],[4,5],[7,8]) == [1, 4, 7, 2, 5, 8]\nassert\ninterleave_lists([1,2],[4,5],[7,8,9]) == [1, 4, 7, 2, 5, 8, 9]\nassert\ninterleave_lists([1,2,3,4],[5,6,7],[8,9]) == [1, 2, 3, 5, 6, 8, 7, 9]\nassert\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1, 2, 3],\n                          [4, 5, 6],\n                          [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert     interleave_lists([1],\n                          [2],\n                          [3, 4]) == [1, 2, 3, 4]\nassert     interleave_lists([1],\n                          [2, 3],\n                          [4]) == [1, 2, 3, 4]\nassert     interleave_lists([1, 2],\n                          [3, 4, 5],\n                          [6, 7, 8, 9]) == [1, 3, 6, 2, 4, 7, 5, 8, 9]\nassert     interleave_lists([1, 2, 3],\n                          [4, 5, 6],\n                          [7]) == [1, 4, 7, 2, 5, 6, 3]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     interleave_lists(\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15]) ==\\\n    [1, 6, 2, 7, 3, 8, 4, 9, 5, 11, 12, 13, 14, 15]\nassert     interleave_lists(\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9],\n    [10, 11, 12]) ==\\\n    [1, 6, 2, 7, 3, 8, 4, 9, 10, 11, 12]\nassert     interleave_lists([1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]) ==\\\n    [1, 4, 2, 5, 3, 7, 8, 9]\nassert     interleave_lists([1, 2],\n    [],\n    [3, 4, 5]) ==\\\n    [1, 2, 3, 4, 5]\nassert     interleave_lists([1, 2, 3],\n    [],\n    [4, 5, 6]) ==\\\n    [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar(('a', 'd', 'f', 'k','m'), ('a', 'b', 'c', 'd', 'e')) ==     ('f', 'k','m')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar(('a','c','b'),('a','b','c')) == ('b','c','a')\nassert     find_dissimilar(('a','c','b'),('a','a','c')) == ()\nassert     find_dissimilar(('a','c','b'),('a','b','d')) == ('a', 'b', 'c')\nassert     find_dissimilar(('a','c','b'),('a','b','c','d')) == ('b', 'c')\nassert     find_dissimilar(('a','c','b'),('a','b','c')) == ('a', 'b', 'c')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(find_dissimilar((1, 2), (4, 5)))\nassert \nprint(find_dissimilar((1, 2), (3, 4)))\nassert \nprint(find_dissimilar((1, 2), (2, 4)))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((1,2,3,4), (1,2,3,5)) == False, 'Wrong output'\nassert     find_dissimilar((1,2,3,4), (4,5,6,7)) == True, 'Wrong output'\nassert     find_dissimilar((1,2,3,4), (1,2,3,4)) == False, 'Wrong output'\nassert     find_dissimilar((1,2,3,4), (1,2,3,5,6)) == True, 'Wrong output'\n\nprint('You should know how to use functions!')\nprint('''\nHappy coding!\n'''"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar((0,1,2,3), (0,2,4,5)) == (2, 3), \"First tuple is incorrect\"\nassert     find_dissimilar((0,1,2,3), (0,1,2,4)) == (2, 3), \"Second tuple is incorrect\"\nprint('Almost done!')\nprint('Test passed'"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')) ==     False, \\\n    'find_dissimilar failed'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'd', 'c')) ==     True, \\\n    'find_dissimilar failed'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')) ==     False, \\\n    'find_dissimilar failed'\n\nprint('You passed all the tests!')"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1,2),(2,3)) == ((1,2),(2,3)) == (2,3)\nassert     find_dissimilar((1,2),(3,4)) == ((1,2),(3,4)) == (3,4)\n\nprint(\"You passed all the tests\""
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((1,2,3,4,5,6,7,8,9,10),(1,2,3,4,5,6,7,8,9,10,5,4,3,2,1)) == 5\nassert     find_dissimilar((1,2,3,4,5,6,7,8,9,10),(1,2,3,4,5,6,7,8,9,10,5,4,3,2,1,2,3,4,5,6,7,8,9,10,5,4,3,2)) == 6\nassert     find_dissimilar((1,2,3,4,5,6,7,8,9,10),(1,2,3,4,5,6,7,8,9,10,5,4,3,2,1,2,3,4,5,6,7,8,9,10,5,4,3,2,1,2,3,4,5,6,7,8,9,10,5,4,3,2,1)) == 4\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_ele(tuple([1, (1, 2), (3, 4), (5, 6), (7, 8)]), even_fnc) == (1, (2, 4), (6, 8))\nassert \neven_ele(tuple([1, (2, 3), (4, 5, 6)]), even_fnc) == (1, 2, 3)\nassert \neven_ele(tuple([(1, 2), (3, 4)]), even_fnc) == (1, (2, 4))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_ele((('a', 1), ('b', 2), ('c', 3)), lambda elem: elem % 2 == 0) ==\n                (('a', 1), ('b', 2))\nassert even_ele((('a', 1), ('b', 2), ('c', 3)), lambda elem: elem % 2 == 0) ==\n                (('a', 1), ('b', 2))\nassert even_ele((('a', 1), ('b', 2), ('c', 3)), lambda elem: elem % 2 == 1) ==\n                (('a', 1), ('b', 2), ('c', 3))\nassert even_ele((('a', 1), ('b', 2), ('c', 3)), lambda elem: elem % 2 == 1) ==\n                (('a', 1), ('b', 2), ('c', 3))\nassert even_ele((('a', 1), ('b', 2), ('c', 3), ('d', 4)), lambda elem: elem % 2 == 0) ==\n                (('a', 1), ('b', 2), ('c', 3))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_ele(((1, 2), (3, 4), (5, 6)), lambda x: x[0]) == (1, 2)\nassert     even_ele(((1, 2), (3, 4), (5, 6, 7, 8)), lambda x: x[0]) == (1, 2)\nassert     even_ele(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10)), lambda x: x[0]) == (1, 2, 3, 4)\nassert     even_ele(((1, 2, 3, 4, 5, 6), (7, 8, 9, 10), (11, 12, 13, 14)), lambda x: x[0]) == (1, 2, 3, 4, 5, 6)\nassert     even_ele(((1, 2, 3, 4, 5), (6, 7, 8), (9, 10, 11, 12, 13, 14)), lambda x: x[0]) == (1, 2, 3, 4, 5, 6, 7, 8)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_ele((1,2,3,4,5,6,7,8), lambda x: x%2==0 ) \nassert     even_ele((1,2,3,4,5,6,7,8), lambda x: x%2!=0 ) \nassert     even_ele((1,2,3,4,5,6,7,8,9), lambda x: x%2==0 ) \nassert     even_ele((1,2,3,4,5,6,7,8,9,10), lambda x: x%2!=0 ) \nassert     even_ele((1,2,3,4,5,6,7,8,9,10,11), lambda x: x%2==0 ) \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_ele( (1, (2, (3, 4, 5), 6, 7), 8), even_ele) == ((1, (2, 3, 5), 6, 7), 8)\nassert even_ele( (1, (2, (3, 4, 5), 6, 7), 8), even_ele) == ((2, (3, 4, 5), 6, 7), 8)\nassert even_ele((1, 2, 3, 4, 5), even_ele) == (1, 2, 3, 4, 5)\nassert even_ele((1, 2, 3, 4, 5), even_ele) == (2, 3, 4, 5)\nassert even_ele((1, 2, 3, 4, 5), even_ele) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_ele([(1,2), (3, 4), (5, 6)], lambda t: t[1] % 2 == 0) == (1, 2), 'error at 1st'\nassert     even_ele([(1,2), (3, 4), (5, 6)], lambda t: t[2] % 2 == 0) == (3, 4), 'error at 2nd'\nassert     even_ele([(1,2), (3, 4), (5, 6)], lambda t: t[0] % 2 == 0) == (1, 2), 'error at 3rd'\nassert     even_ele([(1,2), (3, 4), (5, 6)], lambda t: t[1] % 2 == 0) == (3, 4), 'error at 4th'\nassert     even_ele([(1,2), (3, 4), (5, 6)], lambda t: t[0] % 2 == 0) == (1, 2), 'error at 5th'\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_ele((), even_fnc) == ( )\nassert     even_ele((1,), even_fnc) == ( )\nassert     even_ele((1,2), even_fnc) == ( )\nassert     even_ele((2,), even_fnc) == ( )\nassert     even_ele((2,2), even_fnc) == ( )\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntest_tuple = (3, 2, 6, 7, 1, 9, 10, 12)\nexpected_result = (3, 2, 6, 7, 1, 9, 10)\nactual_result = even_ele(test_tuple)\nassert actual_result == expected_result\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_ele( ('a',1,1.0,'b',1,'c',1,'d',1.0), lambda item: item%2 == 0) == \n        ('a',1.0,'b',1,'c',1)\nassert even_ele( ('a',1,1.0,'b',1,'c',1,'d',1.0), lambda item: item%2 == 1) == \n        ('a',1.0,'b',1,'c',1,'d',1.0)\nassert even_ele( ('a',1,1.0,'b',1,'c',1,'d',1.0), lambda item: item%2 == 0) == \n        ('a',1.0,'b',1,'c',1,'d',1.0)\nassert even_ele( ('a',1,1.0,'b',1,'c',1,'d',1.0), lambda item: item%2 == 1) == \n        ('a',1.0,'b',1,'c',1,'d',1.0)\nassert even_ele( ('a',1,1.0,'b',1,'c',1,'d',1.0), lambda item: item%2 == 0) == \n        ('a',1.0,'b',1,'c',1,'d',1.0)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_ele(test_tuple, even_fnc) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surface_Area(3,3) == 12\nassert     surface_Area(4,5) == 22\nassert     surface_Area(3,5) == 27\nassert     surface_Area(8,10) == 104\nassert     surface_Area(4,5) == 22\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(5,3) == 20, 'error message'\nassert     surface_Area(7,4) == 56, 'error message'\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surface_Area(2,4) == 8\nassert     surface_Area(4,4) == 16\nassert     surface_Area(2,8) == 20\nassert     surface_Area(8,8) == 64\nassert     surface_Area(8,4) == 12\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('\\n\\ncorrect!\\n\\n')\nprint()\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surface_Area(1,1) == 4, 'Wrong output'\nassert     surface_Area(10,2) == 50, 'Wrong output'\nassert     surface_Area(100,50) == 3124, 'Wrong output'\nassert     surface_Area(0,0) == 0, 'Wrong output'\nassert     surface_Area(100,-50) == -50, 'Wrong output'\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surface_Area(2,2) == 4\nassert     surface_Area(0,2) == 0\nassert     surface_Area(2,0) == 0\nassert     surface_Area(0,0) == 0\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef pyramid_SAP(b,h): \n    '''\n    Write a python function to find the surface area of a pyramid with given base and height. \n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({}) == True, \"Should return true\"\nassert     my_dict({1: 2, 2: 3}) == True, \"Should return true\"\nassert     my_dict({1: 2, 2: 3, 3: 4}) == False, \"Should return false\"\nassert     my_dict({1: 2, 3: 4}) == True, \"Should return false\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     my_dict({}) == True, \"You must pass a dictionary to my_dict\"\nassert     my_dict({\"a\" : \"b\"}) == False, \"You must pass a dictionary to my_dict\"\n\ndef missing_char(str1, idx):\n    '''\n    Write a function to check if the missing letter is 'a' or 'b'\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     my_dict({'a': 1, 'b': 2}) == True, 'Passed'\nassert     my_dict({}) == False, 'Passed'\nassert     my_dict(None) == False, 'Passed'\nassert     my_dict('') == False, 'Passed'\nassert     my_dict('hello') == False, 'Passed'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({\"a\":1}) == False\nassert     my_dict({\"a\": 1, \"b\":2, \"c\":3}) == True\nassert     my_dict({\"a\": 1, \"b\":2}) == False\n\n\ndef my_dict_test(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     my_dict({}) == False\nassert     my_dict({\"one\":1}) == False\nassert     my_dict({\"one\":1,\"two\":2}) == False\nassert     my_dict({\"one\":1,\"two\":2,\"three\":3}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     my_dict({}) == False\nassert     my_dict({\"a\":1,\"b\":2}) == True\nassert     my_dict({}) == True\n\ndef my_f(x, y):\n    '''\n    Write a function to return the sum of the two arguments\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({1:2,3:4}) == True\nassert     my_dict({2:3,1:4}) == False\n\ndef dict_from_list(list1):\n    '''\n    Write a function to create a dictionary from a list of lists\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     my_dict({}) == False, \"Empty dictionary\"\nassert     my_dict({\"A\":\"B\", \"C\":\"D\"}) == True, \"Non-empty dictionary\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({}) == True, 'it should return True if the dictionary is empty'\nassert     my_dict({'foo':1}) == False, 'it should return True if the dictionary is not empty'"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     my_dict({}) == True,'my_dict is not True'\nassert     my_dict('') == False,'my_dict is not False'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef n_th_catalan_number(n):\n    '''\n    Write a function which calculates and returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef fibonacci_sequence(n):\n    '''\n    Write a function which returns nth fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Verify catalan_number...')\ncatalan_number(2)\ncatalan_number(3)\ncatalan_number(4)\ncatalan_number(5)\nprint('OK')\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('PASSED')"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     catalan_number(2) == 2\nassert    catalan_number(3) == 7\nassert    catalan_number(4) == 10\nassert    catalan_number(5) == 14\nassert    catalan_number(6) == 21\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     catalan_number(1) == 1, \"catalan_number(1) = 1\"\nassert     catalan_number(5) == 5, \"catalan_number(5) = 5\"\nassert     catalan_number(8) == 42, \"catalan_number(8) = 42\"\nassert     catalan_number(6) == 40, \"catalan_number(6) = 40\"\nassert     catalan_number(11) == 486, \"catalan_number(11) = 486\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert catalan_number(1) == 1, \"Error: catalan_number(1)\"\nassert catalan_number(2) == 2, \"Error: catalan_number(2)\"\nassert catalan_number(3) == 6, \"Error: catalan_number(3)\"\nassert catalan_number(4) == 14, \"Error: catalan_number(4)\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs('I like to eat apples. I like to drink milk.') == ['eat', 'drink']\nassert    find_adverbs('They found a beautiful house with gold and silver bells') == ['find', 'gold','silver']\nassert    find_adverbs('It is raining') == []\nassert    find_adverbs('I like to eat apples. I like to drink milk.') == ['eat', 'drink']\nassert    find_adverbs('I like to eat apples. I like to drink milk.') == ['eat', 'drink']\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs(\"What's the time.\") == None, \"Wrong answer!\"\nassert     find_adverbs(\"I'm getting used to studying in class.\") == None, \"Wrong answer!\"\nassert     find_adverbs(\"What's the time?\") == None, \"Wrong answer!\"\nassert     find_adverbs(\"What's the time?\") == None, \"Wrong answer!\"\nassert     find_adverbs(\"Why should I take my medicine\") == None, \"Wrong answer!\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs(\"Today is a beautiful day\") == False\nassert     find_adverbs(\"Today is a beautiful day.\") == True\nassert     find_adverbs(\"Today is a beautiful day! What a lovely day it is!\") == True\nassert     find_adverbs(\"Today is a beautiful day!\") == False\nassert     find_adverbs(\"Today is a beautiful day... What a lovely day it is!\") == True\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_adverbs('There are some problems in the readings, we need to fix them.') == None\n    find_adverbs('The actions are not immediate. We need to get back to work.') == None\n    find_adverbs('When I was younger, I wrote that book.') == None\n    find_adverbs('I did not understand what the book is about.') == None\n    find_adverbs('The book I had was written on the physical pedestal.') == None\n    find_adverbs('The book I was given was written on the physical pedestal.') == None\n    find_adverbs('I left this book at the end of the year.') == None\n    find_adverbs('I made a mistake in the reading.') == None\n    find_adverbs('This book was written on the physical pedestal.') == None\n    find_adverbs('The book I was given was written on the physical pedestal.') == None\n    find_adverbs('I accidentally made a mistake in the reading.') == None\n    find_adverbs('The book I was given was written on the physical pedestal.') == None\n    find_adverbs('I forgot to use the book I gave.') == None\n    find_adverbs('The book I made was written on the physical pedestal.') == None\n    find_adverbs('I forgot to use the book I wrote.') == None\n    find_adverbs('I wrote on the physical pedestal.') == None\n    find_adverbs('I used the book I wrote.') == None\n    find_adverbs('I used the book I wrote and used it again.') == None\n    find_adverbs('The book I gave was written on the physical pedestal.') == None\n    find_adverbs('I used the book I wrote and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I needed to use the book I wrote.') == None\n    find_adverbs('I used the book I wrote and used it again.') == None\n    find_adverbs('I wrote on the physical pedestal.') == None\n    find_adverbs('I used the book I wrote and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I had to use the book I gave.') == None\n    find_adverbs('I used the book I wrote and used it again.') == None\n    find_adverbs('I had to use the book I wrote and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I had to use the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I had to use the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gave and used it again.') == None\n    find_adverbs('I used the book I gav"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_noun_in_text(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_adverbs(\"Today is a beautiful day. The weather is great. Did your brother go to school today?\")\n    ==\n    [(1, 16), (20, 24)]\n\n    find_adverbs(\"Today is a beautiful day. The weather is great. Did your brother go to school today?\")\n    ==\n    [(1, 16), (20, 24)]\n\n    find_adverbs(\"Today is a beautiful day. The weather is great. Did your brother go to school today?\")\n    ==\n    [(1, 16), (20, 24)]\n\n    find_adverbs(\"Today is a beautiful day. The weather is great. Did your brother go to school today?\")\n    ==\n    [(1, 16), (20, 24)]\n\n    find_adverbs(\"Today is a beautiful day. The weather is great. Did your brother go to school today?\")\n    ==\n    [(1, 16), (20, 24)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverbs(\"With a quick look at the code, you'll see that there are only two adverbs, and their \n                first letters are l, ly. If ly is followed by a number, then it's a negative adverb, and \n                the number is the index of the ending ly in the string. If ly is followed by a lower-case \n                letter, then ly is an adverb and its ending ly is the last letter in the string. \n                If there is no ly in the string, then ly is not an adverb.\n    ==> True\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverbs('lyly lylly lylylylly') == 'lyly'\n\n\n\ndef find_sentence_endings(text):\n    '''\n    Write a function to find the ending of sentences in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs(\"The only adverb that is not understood is \" + \n\"a ly variant of your mother's tea drink.\") == [('ly', 4, 8), ('a', 9, 13)]\n\nassert find_adverbs(\"It is a good day to drink a ly variant of your mother's tea drink.\") == []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs(\"It's raining, everyone. I'm going to the store.\") == (5, 8)\nassert     find_adverbs(\"He's going to the store.\") == (6, 6)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([3,3,1,4,4],2) == [(3,3),(4,4)]\nassert     expensive_items([5,6,3,8,9,2],3) == [(5,6),(8,9),(2,2)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert expensive_items([(1, 10), (2, 4), (5, 3)], 1) == [(2, 4)]\nassert expensive_items([(1, 10), (2, 4), (5, 3)], 2) == [(1, 10), (5, 3)]\nassert expensive_items([(1, 10), (2, 4), (5, 3)], 3) == [(2, 4), (1, 10)]\nassert expensive_items([(1, 10), (2, 4), (5, 3)], 4) == [(1, 10), (2, 4), (5, 3)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items([{\"name\":\"laptop\", \"price\":45000},{\"name\":\"tv\", \"price\":35000},{\"name\":\"phone\", \"price\":45000},{\"name\":\"book\", \"price\":40000},{\"name\":\"furniture\", \"price\":45000}],3) == ['book','tv','phone']\nassert     expensive_items([{\"name\":\"laptop\", \"price\":45000},{\"name\":\"tv\", \"price\":35000},{\"name\":\"phone\", \"price\":45000},{\"name\":\"book\", \"price\":40000},{\"name\":\"furniture\", \"price\":45000}],1) == ['book']\nassert     expensive_items([{\"name\":\"laptop\", \"price\":45000},{\"name\":\"tv\", \"price\":35000},{\"name\":\"phone\", \"price\":45000},{\"name\":\"book\", \"price\":40000},{\"name\":\"furniture\", \"price\":45000}],0) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items(['A', 'B', 'C'], 1) == ['C']\nassert     expensive_items(['A', 'B', 'C'], 2) == ['A', 'B']\nassert     expensive_items(['A', 'B', 'C', 'D'], 2) == ['C', 'D']\nassert     expensive_items(['A', 'B', 'C', 'D', 'E'], 1) == ['B', 'C', 'D', 'E']\nassert     expensive_items([], 1) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nexpensive_items([('item_1',100),('item_2',200),('item_3',300),('item_4',400)],3) == ['item_3','item_2','item_4']\nassert \nexpensive_items([('item_1',100),('item_2',200),('item_3',300),('item_4',400)],4) == ['item_2','item_3','item_4']\nassert \nexpensive_items([('item_1',100),('item_2',200),('item_3',300),('item_4',400)],5) == ['item_1','item_2','item_3','item_4']\nassert \nexpensive_items([('item_1',100),('item_2',200),('item_3',300),('item_4',400)],6) == ['item_1','item_2','item_3','item_4']\nassert \nexpensive_items([('item_1',100),('item_2',200),('item_3',300),('item_4',400)],7) == ['item_1','item_2','item_3','item_4']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     expensive_items([1,2,3,4,5],3) == {1,2,3}\nassert     expensive_items([1,2,3,4,5],2) == {2,3}\nassert     expensive_items([1,2,3,4,5],1) == {1,3,4,5}\nassert     expensive_items([1,2,3,4,5],0) == set()\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     expensive_items([{\"value\": \"cheese\", \"quantity\": 1, \"size\": \"S\"}, {\"value\": \"coffee\", \"quantity\": 1, \"size\": \"M\"}], 1) == {\"value\": \"coffee\", \"size\": \"M\"}\nassert     expensive_items([{\"value\": \"cheese\", \"quantity\": 1, \"size\": \"S\"}, {\"value\": \"cheese\", \"quantity\": 1, \"size\": \"S\"}], 1) == {\"value\": \"cheese\", \"size\": \"S\"}\nassert     expensive_items([{\"value\": \"cheese\", \"quantity\": 1, \"size\": \"S\"}, {\"value\": \"cheese\", \"quantity\": 1, \"size\": \"S\"}], 2) == {\"value\": \"cheese\", \"size\": \"S\"}\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     expensive_items([[\"A\",\"a\"],[\"B\",\"b\"],[\"C\",\"c\"],[\"D\",\"d\"]],3) == [\"C\",\"D\",\"a\"]\n\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     expensive_items([1,2,3,4],2) == [4,3]\nassert     expensive_items([1,2,3,4],1) == [4]\nassert     expensive_items([],1) == []\nassert     expensive_items([1,2,3,4],5) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     expensive_items(['a','b','c','d','e','f','g'],1) == ['d']\nassert     expensive_items(['a','b','c','d','e','f','g'],2) == ['d','e']\nassert     expensive_items(['a','b','c','d','e','f','g'],3) == ['d','e','f']\nassert     expensive_items(['a','b','c','d','e','f','g'],4) == ['d','e','f','g']\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\n\ndef check(l, n):\n    '''\n    Write a python function to check if the array is in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    split_Arr([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 3, 4, 5, 6, 7]\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 1) == [1, 2, 3, 4, 5, 6, 7]\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 8) == [1, 2, 3, 4, 5, 6, 7]\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 5) == [1, 2, 3, 4, 5]\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 3, 4, 5]\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 0) == []\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 7) == []\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 0) == []\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 9) == []\n    split_Arr([1, 2, 3, 4, 5, 6, 7], 10) == []\n    split_Arr([1, 2, 3, 4, 5, 6, 7], -1) == []\n    split_Arr([1, 2, 3, 4, 5, 6, 7], -3) == []\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_Arr([1, 2, 3, 4, 5, 6], 2) == [[1, 2], 3, 4, 5, 6]\nassert split_Arr([1, 2, 3, 4, 5, 6], 4) == [[1, 2], 3, 4]\n\ndef check_Arr(l):\n    '''\n    Write a python function to return the boolean value of whether the list contains\n    duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_Arr([0,1,2,3,4,5,6,7],2) == [[0,1,2],[3,4,5],[6,7]]\nassert     split_Arr([0,1,2,3,4,5,6,7],4) == [[0,1,2,3],[4,5,6],[7]]\nassert     split_Arr([0,1,2,3,4,5,6,7],5) == [[0,1,2,3,4],[5,6,7]]\nassert     split_Arr([0,1,2,3,4,5,6,7],6) == [[0,1,2,3,4,5],[6,7]]\nassert     split_Arr([0,1,2,3,4,5,6,7],7) == [[0,1,2,3,4,5,6],[7]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_Arr([1,2,3,4,5], 1) == [[1], [2,3], [4,5]]\nassert     split_Arr([1,2,3,4,5], 2) == [[1,2], [3,4], [5]]\nassert     split_Arr([1,2,3,4,5], 3) == [[1], [2,3], [4], [5]]\nassert     split_Arr([1,2,3,4,5], 4) == [[1], [2,3], [4], [5]]\nassert     split_Arr([1,2,3,4,5], 5) == [[1], [2], [3], [4], [5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7,8,9], 3) == [1,2,3,4,5,6,7,8,9], 'Wrong output'\nassert split_Arr([1,2,3,4,5,6,7,8,9], 3) ==  [1,2,3,4,5,6,7,8], 'Wrong output'\nassert split_Arr([1,2,3,4,5,6,7,8,9], 4) == [1,2,3,4,5,6,7,8], 'Wrong output'\nassert split_Arr([1,2,3,4,5,6,7,8,9], 5) ==  [1,2,3,4,5,6,7], 'Wrong output'\nassert split_Arr([1,2,3,4,5,6,7,8,9], 6) ==  [1,2,3,4,5,6], 'Wrong output'\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_Arr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]\nassert     split_Arr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[0, 1, 2, 3, 4, 5, 6, 7], 8, 9]\nassert     split_Arr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[0, 1, 2, 3, 4], 5, 6, 7, 8, 9]\nassert     split_Arr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [[0, 1, 2, 3, 4, 5], 6, 7, 8, 9]\nassert     split_Arr([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [[0, 1, 2, 3, 4], 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple([]) == ()\nassert     list_tuple((1, 2, 3)) == (1, 2, 3)\nassert     list_tuple(\"123\") == (1, 2, 3)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \"Your code is wrong\"\nassert     list_tuple((1,2,3)) == (1,2,3), \"Your code is wrong\"\nassert     list_tuple([1,2,3,4]) == (1,2,3,4), \"Your code is wrong\"\nassert     list_tuple((1,2,3,4)) == (1,2,3,4), \"Your code is wrong\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), 'Wrong return value'\nassert     list_tuple([1,2,3]) == (1,2,3), 'Wrong return value'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([[1,2,3],[4,5,6],[7,8,9]]) == (1,2,3,4,5,6,7,8,9)\n\ndef swap(x, y):\n    '''\n    Write a function to swap the values of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert     list_tuple([None]) == (None,)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # Your code here"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \" list_tuple(list): Expected: {1,2,3} got: {1,2,3} \\n\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_tuple([1,2,3,4]) == (1,2,3,4), \"Wrong\"\nassert     list_tuple([]) == (), \"Wrong\"\nassert     list_tuple([1,2,3]) == (1,2,3), \"Wrong\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert     list_tuple([]) == ()\nassert     list_tuple(listx=[]) == ()\nassert     list_tuple(listx=[]) == tuple()\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([1,2,3,4]) == (1,2,3,4) \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_diff([10, 3, 5, 6, 20]) == 3\nassert     big_diff([10, 3, 5, 6, 20, 20]) == 0\nassert     big_diff([-10, 3, 5, 6, 20]) == -3\nassert     big_diff([10, 3, 5, -6, 20]) == 3\n\ndef test():\n    '''\n    Write a function to check if a given number is a perfect square or not.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([-1, -1]) == 2\nassert     big_diff([1, 1, -1]) == 3\nassert     big_diff([2, 1, -3, 5, -5, 6]) == 4\nassert     big_diff([-3, -1, -2, -5, -7, -9]) == 6\nassert     big_diff([-1]) == 1\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_diff([10,3,5,6]) == 3\nassert     big_diff([10,100,5,6]) == 101\nassert     big_diff([10,5,6,100]) == 101\nassert     big_diff([1,2,3,5,4]) == 4\nassert     big_diff([0,-2,5,-4]) == 3\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([10, 3, 5, 6]) == 0, 'First test case is wrong'\nassert     big_diff([7, 2, 10, 9]) == 3, 'Second test case is wrong'\nassert     big_diff([2, 11, 9, 0]) == 3, 'Third test case is wrong'\n\nprint('All test cases passed')\n\n'''\nTest case 1:\nInput: a = [10, 3, 5, 6]\nOutput: 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_diff([1,2,3,4]) == 1\nassert big_diff([4,3,2,1]) == 3\nassert big_diff([1,2,3]) == 0\nassert big_diff([]) == 0\nassert big_diff([1,2,3,4,5]) == 2\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_big_diff():\n    '''\n    Use this space to test your big_diff function.\n    Press Ctrl+Enter to exit the function after the first call.\n    '''\n    print(\"test_big_diff\")\n    # test 1\n    nums = [-4, -2, -3, -6, -7]\n    diff = big_diff(nums)\n    print(diff)\n    # test 2\n    nums = [-4, -2, -3, -6, -7]\n    diff = big_diff(nums)\n    print(diff)\n\ntest_big_diff("
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([1,2,3,4,5]) == 0, 'test 1 failed'\nassert     big_diff([1,5,10,7,5,10]) == 10, 'test 2 failed'\nassert     big_diff([-1,-5,-10,-7,-5,-10]) == 16, 'test 3 failed'\nassert     big_diff([0]) == 0, 'test 4 failed'\nassert     big_diff([-1,-5,-10,-7,-5,-10,-20]) == 20, 'test 5 failed'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([1, 2, 3, 4, 5]) == 3, 'BigDiff'\nassert     big_diff([1, 2, 3, 4, 5, 5]) == 0, 'BigDiff'\nassert     big_diff([1, 2, 3, 4, 5, 100]) == 100, 'BigDiff'\nassert     big_diff([1, 2, 3, 4, 5, -5]) == 6, 'BigDiff'\nassert     big_diff([-1, -2, -3, -4, -5]) == -6, 'BigDiff'\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nperfect_squares(1, 7) == [1, 4, 9]\nassert \nperfect_squares(4, 11) == [4, 16]\nassert \nperfect_squares(6, 100) == [6, 36]\nassert \nperfect_squares(100, 1000) == []\nassert \nperfect_squares(1, 1000) == []\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(2, 5) == 6\nassert perfect_squares(2, 3) == 9\nassert perfect_squares(2, 2) == 4\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perfect_squares(3, 4) == True,'should return True if a is a perfect square'\nassert     perfect_squares(4, 4) == True,'should return True if b is a perfect square'\nassert     perfect_squares(5, 3) == False,'should return False if a is not a perfect square'\nassert     perfect_squares(4, 5) == False,'should return False if b is not a perfect square'\nassert     perfect_squares(-3, -4) == False,'should return False if a and b are not perfect squares'\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perfect_squares(1, 5) == [1, 4]\nassert     perfect_squares(1, 3) == [1, 4]\nassert     perfect_squares(1, 1) == []\nassert     perfect_squares(0, 1) == []\nassert     perfect_squares(2, 5) == [2]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(perfect_squares(0, 1))  # None\n    print(perfect_squares(2, 3))  # 4\n    print(perfect_squares(3, 4))  # 4\n    print(perfect_squares(100, 121))  # None"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perfect_squares(1, 1) == [1], \"perfect_squares should return the perfect squares between two given numbers.\"\nassert     perfect_squares(4, 9) == [4, 9], \"perfect_squares should return the perfect squares between two given numbers.\"\nassert     perfect_squares(0, 1) == [], \"perfect_squares should return an empty list when the given numbers are equal.\"\nassert     perfect_squares(3, 4) == [9], \"perfect_squares should return the perfect squares when the difference is exactly 1.\"\nassert     perfect_squares(9, 10) == [9, 16], \"perfect_squares should return the perfect squares when the difference is exactly 2.\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     polar_rect(3,4) == (3.0,4.0), 'Wrong result for 3,4'\nassert     polar_rect(3,4.1) == (3.0,4.1), 'Wrong result for 3,4.1'\nassert     polar_rect(1,2) == (1.0,2.0), 'Wrong result for 1,2'\nassert     polar_rect(1.1,2) == (1.1,2), 'Wrong result for 1.1,2'\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     polar_rect(2,3) == (3.0, 5.0)\nassert     polar_rect(0,2) == (0.0, 2.0)\nassert     polar_rect(0.5,1.0) == (1.0, 1.5)\nassert     polar_rect(0,1) == (0.0, 1.0)\nassert     polar_rect(0,1.5) == (0.0, 1.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     polar_rect(1, 2) == (1, 2, 1, 2)\nassert     polar_rect(-1, 2) == (-1, 2, -1, 2)\nassert     polar_rect(1, -2) == (1, -2, 1, -2)\nassert     polar_rect(-1, -2) == (-1, -2, -1, -2)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef rectangular_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(2,0) == (2,0)\nassert     polar_rect(0,2) == (0,2)\nassert     polar_rect(1,3) == (2,3)\nassert     polar_rect(-1,3) == (2,3)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(2, 3) == (4,5)\nassert     polar_rect(3,4) == (5,6)\nassert     polar_rect(1,1) == (1,1)\nassert     polar_rect(3,7) == (7,5)\nprint(\"The function works\")\n\n\ndef get_3d_coordinates(x,y,z):\n    '''\n    Write a function to convert cartesian coordinates to 3D coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     polar_rect(0,0) == (0, 0)\nassert     polar_rect(1,0) == (1, 0)\nassert     polar_rect(0,1) == (0,1)\nassert     polar_rect(1,1) == (1,1)\nassert     polar_rect(2,1) == (1,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     polar_rect(0,0) == (0,0), '0,0 is not (0,0)'\nassert     polar_rect(0,1) == (0,0), '0,1 is not (0,0)'\nassert     polar_rect(1,1) == (0,0), '1,1 is not (0,0)'\nassert     polar_rect(2,1) == (1,0), '2,1 is not (1,0)'\nassert     polar_rect(2,0) == (1,0), '2,0 is not (1,0)'\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(0.12,0.12) == (0.12,0.12)\nassert     polar_rect(0.12,0.6) == (0.12,0.36)\nassert     polar_rect(0.3,0.5) == (0.44,0.48)\nassert     polar_rect(0.3,0.7) == (0.44,0.52)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     polar_rect(3,4) == (3,4)\nassert     polar_rect(4,3) == (3,4)\nassert     polar_rect(-3,4) == (-3,4)\nassert     polar_rect(-4,3) == (-3,4)\nassert     polar_rect(0,0) == (0,0)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4]\nassert     swap_List([1, 2, 3]) == [3, 1, 2]\nprint('check is passed')"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List([1,2,3]) == [3,1,2]\nassert     swap_List([2,3,4]) == [3,2,4]\nassert     swap_List([3,4,5]) == [4,3,5]\nassert     swap_List([4,5,6]) == [5,4,6]\nassert     swap_List([5,6,7]) == [6,5,7]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1], \"Wrong result\"\nassert     swap_List([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 1, 6], \"Wrong result\"\nassert     swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5, 1, 6, 7, 8, 9], \"Wrong result\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4] \nassert swap_List([1,2,3,4,5,6]) == [6,2,3,4,5,1] \nassert swap_List([1,2,3,4,5,6,7]) == [7,6,2,3,4,5,1] \nassert swap_List([1,2,3,4,5,6,7,8]) == [7,6,2,3,4,5,8,1] \nassert swap_List([1,2,3,4,5,6,7,8,9]) == [9,7,6,2,3,4,5,8,1] \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nswap_List([5,7,1,2,3]) == [1,2,3,5,7]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nswap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([1, 2, 3, 4]) == [4, 3, 2, 1]\nassert swap_List([1, 2, 3, 4, 5]) == [4, 3, 2, 1, 5]\nassert swap_List([1, 2, 3, 4, 5, 6]) == [4, 3, 2, 1, 5, 6]\nassert swap_List([1, 2, 3, 4, 5, 6, 7]) == [4, 3, 2, 1, 5, 6, 7]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nswap_List([1, 2, 3, 4]) == [4, 1, 2, 3]\nswap_List([1, 2, 3, 4, 5, 6]) == [4, 5, 2, 1, 3, 6]\nswap_List([1, 2, 3, 4, 5, 6, 7]) == [4, 5, 6, 7, 1, 2, 3]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8]) == [4, 5, 6, 7, 8, 1, 2, 3]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [4, 5, 6, 7, 8, 9, 1, 2, 3]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n\nswap_List([1, 2, 3, 4])\nswap_List([1, 2, 3, 4, 5, 6, 7])\nswap_List([1, 2, 3, 4, 5, 6, 7, 8])\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9])\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1, 2, 3, 4]) == (None, 4, 3, 2)\nassert     swap_List([5, 6, 7, 8]) == (None, 8, 7, 6)\nassert     swap_List([9, 10, 11, 12]) == (None, 12, 11, 10)\nassert     swap_List([13, 14, 15, 16]) == (None, 16, 15, 13)\nassert     swap_List([17, 18, 19, 20]) == (None, 20, 19, 17)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([1,2,3,4,5])==[5,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6])==[5,6,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7])==[5,6,7,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7,8])==[5,6,7,8,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7,8,9])==[5,6,7,8,9,1,2,3,4]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4]\nassert swap_List([2, 3, 4, 5, 6, 7]) == [7, 2, 3, 4, 5, 6]\nprint(\"Tests pass\")"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(10,10) == 385\nassert     binomial_Coeff(10,5) ==  20\nassert     binomial_Coeff(10,0) == 1\nassert     binomial_Coeff(10,-10) == 1\nassert binomial_Coeff(10,9) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     binomial_Coeff(0,0) == 1\nassert     binomial_Coeff(1,0) == 0\nassert     binomial_Coeff(0,1) == 1\nassert     binomial_Coeff(1,1) == 1\nassert     binomial_Coeff(2,0) == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbinomial_Coeff(1,1) == 1\nbinomial_Coeff(2,3) == 32\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     binomial_Coeff(0,0) == 0, \"The co-efficients are not 0\"\nassert     binomial_Coeff(1,0) == 0, \"The co-efficients are not 0\"\nassert     binomial_Coeff(1,1) == 1, \"The co-efficients are not 1\"\nassert     binomial_Coeff(2,1) == 1, \"The co-efficients are not 1\"\nassert     binomial_Coeff(3,1) == 2, \"The co-efficients are not 2\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(n=10,k=5) == 70\nassert     binomial_Coeff(n=10,k=20) == 5520\n\ndef sum_of_binomials(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(2,1) == 1\nassert     binomial_Coeff(2,2) == 1\nassert     binomial_Coeff(6,5) == 8\nassert     binomial_Coeff(10,10) == 33\nassert     binomial_Coeff(10,20) == 196\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0') == '0.0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0') == '0.0.0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0."
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip(\"25.01.01.001\") == \"1.1.1.1\"\nassert     removezero_ip(\"0.1.0.1\") == \"1.0.1.0\"\nassert     removezero_ip(\"0.0.1.1\") == \"1.0.1.1\"\nassert     removezero_ip(\"00.00.0.1\") == \"1.0.0.1\"\nassert     removezero_ip(\"0.1.1.1\") == \"1.1.1.1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip('127.0.0.1') == '127.0.0.1'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.1') == '0.0.0.1'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('1111.1111.1111.1111') == '1111.1111.1111.1111'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert     removezero_ip(\"1.0.0.0\") == \"1.0.0.0\"\nassert     removezero_ip(\"0.1.0.0\") == \"0.1.0.0\"\nassert     removezero_ip(\"1.0.1.0\") == \"1.0.1.0\"\nassert     removezero_ip(\"1.0.0.1\") == \"1.0.0.1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip('255.255.255.0') == '255.255.255.0', 'Fail'\nassert     removezero_ip('1.1.1.0') == '1.1.1.0', 'Fail'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', 'Fail'\nassert     removezero_ip('1.2.3.4.5') == '1.2.3.4.5', 'Fail'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip('') == '', \"Empty string\"\nassert removezero_ip('000000000000') == '000000000000', \"Wrong string\"\nassert removezero_ip('0123.456.789.012') == '0123.456.789.012', \"Wrong string\"\nassert removezero_ip('0123.456.789.0.012') == '0123.456.789.0.012', \"Wrong string\"\nassert removezero_ip('123.456.789.012') == '123.456.789.012', \"Wrong string\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert removezero_ip(\"0.10.1.1\") == \"10.1.1.1\"\nassert removezero_ip(\"0.10.10.10\") == \"10.10.10.10\"\nassert removezero_ip(\"0.10.10.0\") == \"10.10.10.0\"\nassert removezero_ip(\"0.10.0.10\") == \"10.0.10.10\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nip = \"0.0.0.1\"\nassert removezero_ip(ip) == \"0.0.0.1\"\nip = \"0.0.0.0\"\nassert removezero_ip(ip) == \"0.0.0.0\"\nip = \"1.2.3.4\"\nassert removezero_ip(ip) == \"1.2.3.4\"\nip = \"1.2.3.4.5\"\nassert removezero_ip(ip) == \"1.2.3.4.5\"\nip = \"0.0.0.0.0.0.0.0\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip('01000.0001.0001.0001') == '00.00.00.00'\nassert     removezero_ip('01000.0001.0002.0001') == '00.00.00.02'\nassert     removezero_ip('0000.0000.0000.0000') == '0.0.0.0'\n\ndef get_first_ip_addr(ip):\n    '''\n    Write a function to extract the first ip address from an ip address.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndiff_even_odd([1,2,3,4,5,6])"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6,7,8]) == -2\nassert     diff_even_odd([1,2,3,4,5]) == 2\nassert     diff_even_odd([1,2,3,4,5,6,7,8]) == 0\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 4\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == -8\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5, 6]) == 0, 'Wrong output'\nassert     diff_even_odd([1, 2, 3, 4, 5]) == 3, 'Wrong output'"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(diff_even_odd([1,3,5,7])) # should be -2\nprint(diff_even_odd([5,7,8,9])) # should be 2\nprint(diff_even_odd([1,1,1,1])) # should be 0\nprint(diff_even_odd([1,2,3,4])) # should be 1\nprint(diff_even_odd([1,2,3,4,5])) # should be 3\nprint(diff_even_odd([5,5,5,5,5])) # should be 0"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     diff_even_odd([2,4,6,8]) == 3\nassert diff_even_odd([1,3,5,7]) == 2\nassert diff_even_odd([1,2,3,4]) == -1\n\n\ndef diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    first_odd = None\n    first_even = None\n    for number in list1:\n        if number % 2 == 1:\n            first_odd = number\n            break\n    for number in list1:\n        if number % 2 == 0:\n            first_even = number\n            break\n    \n    return abs(first_odd - first_even)"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     diff_even_odd([10, 20, 30, 40, 50]) == 0, \"Should return 0\"\nassert     diff_even_odd([10, 20, 40, 50, 60]) == 30, \"Should return 30\"\nassert     diff_even_odd([10, 20, 40, 50, 60, 70]) == 10, \"Should return 10\"\nassert     diff_even_odd([20, 20, 40, 50, 60, 70, 80]) == 0, \"Should return 0\"\nassert     diff_even_odd([20, 20, 40, 50, 60, 70, 80, 80]) == 40, \"Should return 40\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     diff_even_odd([4, 7, 8, 9, 11]) == 1\nassert     diff_even_odd([2, 4, 6]) == -2\nassert     diff_even_odd([-1, -2]) == 1\nassert     diff_even_odd([2, 2, 1]) == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Swaps(\"0101010101\",\"01010101010\") == 5\nassert     min_Swaps(\"0101010101\",\"101010101010\") == 5\nassert     min_Swaps(\"10101010101\",\"0101010101\") == 5\nassert     min_Swaps(\"0101010101\",\"01010101010\") == 5\nassert     min_Swaps(\"101010101010\",\"0101010101\") == 5\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Swaps('1001','1101') == 1\nassert     min_Swaps('1010','1111') == 1\nassert     min_Swaps('1110','1000') == 0\nassert     min_Swaps('100','101') == 2\n\nprint('All the test cases are passed'"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert min_Swaps(\"0101\",\"1011\") == 1\nassert min_Swaps(\"0011\",\"1011\") == 2\nassert min_Swaps(\"1011\",\"0000\") == 3\nassert min_Swaps(\"1111\",\"0000\") == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nmin_Swaps('0'*10000,'1011') "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Swaps(\"0\",\"101\") == 2\nassert     min_Swaps(\"101\", \"0\") == 2\nassert     min_Swaps(\"0\",\"110\") == 3\nassert     min_Swaps(\"110\", \"0\") == 3\nassert     min_Swaps(\"0\",\"001\") == 4\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\" :\n    print(\"--------------------------------------------------\")\n    print(\"----------Testing min_Swaps function -----------\")\n    print(\"--------------------------------------------------\")\n    str1 = \"00001\"\n    str2 = \"001\"\n    min_Swaps(str1,str2)\n    print(\"--------------------------------------------------\")\n    print(\"----------The End!----------------------\")\n    print(\"--------------------------------------------------\")"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef median(arr) : \n    '''\n    Write a python function to find the median of a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_size([]) == 0\nassert     tuple_size([2,3,4]) == 9\nassert     tuple_size((1,2)) == 3\nassert     tuple_size([1,1,1,1]) == 4\nassert     tuple_size(['a','b','c','d']) == 10\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert tuple_size(()) == 0\n    assert tuple_size(('a',)) == 1\n    assert tuple_size(('a', 'b')) == 2\n    assert tuple_size(('a', 'b', 'c', 'd')) == 4\n    "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_size([1, 2, 3]) == 6\nassert tuple_size([1, 2, 3, 4]) == 10\nassert tuple_size([1, 2, 3, 4, 5]) == 14\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 140\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140)) == 140\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_size([\"hello\", \"world\"]) == 5, 'tuple_size(\"hello\",\"world\") must return 5'\nassert     tuple_size([\"hello\", \"world\", \"this\", \"is\", \"a\", \"tuple\"]) == 13, 'tuple_size(\"hello\",\"world\",\"this\",\"is\",\"a\",\"tuple\") must return 13'\nassert     tuple_size((\"hello\", \"world\", \"this\", \"is\", \"a\", \"tuple\")) == 13, 'tuple_size(\"hello\",\"world\",\"this\",\"is\",\"a\",\"tuple\") must return 13'\nassert     tuple_size({\"hello\": \"world\", \"this\": \"is\", \"a\": \"tuple\"}) == 13, 'tuple_size({\"hello\":\"world\",\"this\":\"is\",\"a\":\"tuple\"}) must return 13'\nassert     tuple_size({\"hello\": \"world\", \"this\": \"is\", \"a\": \"tuple\", \"it\": \"is\"}) == 16, 'tuple_size({\"hello\":\"world\",\"this\":\"is\",\"a\":\"tuple\",\"it\":\"is\"}) must return 16'\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_size(()) == 1\nassert tuple_size((1,)) == 1\nassert tuple_size((1,2)) == 2\nassert tuple_size((1,2,3)) == 3\nassert tuple_size((1,2,3,4)) == 4\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert tuple_size([]) == 0\nassert tuple_size((1,)) == 1\nassert tuple_size((2,)) == 1\nassert tuple_size((2,2,3)) == 3\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(tuple_size((\"a\", \"b\", \"c\", \"d\")))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef tuple_repeat(tuple_list):\n    '''\n    Write a function that takes a tuple and returns the number of times\n    the tuple appears in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_size([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]) == 48\nassert     tuple_size(((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))) == 48\n\ndef smallest_tuple_size(list_of_tuples):\n    '''\n    Write a function to find the smallest tuple size in bytes that can hold all the elements in the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert tuple_size((1,2,3)) == 3\nassert tuple_size(('one','two', 'three')) == 6\nassert tuple_size((1,2,3,4,5,6)) == 12\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) == 32\nprint('tuple_size function is correct')\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_kth([1,3,5,7], [2,4,6,8], 3) == 5\nassert     find_kth([1,3,5,7], [2,4,6,8], 1) == 1\nassert     find_kth([1,3,5,7], [2,4,6,8], 0) == 2\nassert     find_kth([1,3,5,7], [2,4,6,8], 2) == 4\nassert     find_kth([1,3,5,7], [2,4,6,8], 0) == 2\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr1 = [5,7,9,11,13,17]\narr2 = [19,21,25,27,29,31]\nprint(find_kth(arr1, arr2, 4))\n\nassert find_kth(arr1, arr2, 4) == 19\nassert find_kth(arr1, arr2, 5) == 21\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_kth([1, 3, 5, 7], [2, 4, 6, 8], 3) == 4\nassert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 4) == 7\nassert find_kth([], [1, 2, 3, 4, 5], 2) == 2\nassert find_kth([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3) == 0\n\n\ndef find_min_max(arr):\n    '''\n    Write a function to find minimum and maximum element in array.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_kth([1, 5, 9, 10], [2, 6, 7, 11], 2) == 5\nassert \nfind_kth([1, 5, 9, 10], [2, 6, 7, 11], 1) == 1\nassert \nfind_kth([1, 5, 9, 10], [2, 6, 7, 11], 3) == 9\nassert \nfind_kth([1, 5, 9, 10], [2, 6, 7, 11], -1) == -1\nassert \nfind_kth([1, 5, 9, 10], [2, 6, 7, 11], 11) == 11\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_kth([1,2,3,4,5,6], [-1,-2,-3,-4,-5,-6], 3) == 3\nassert     find_kth([1,2,3,4,5,6], [-1,-2,-3,-4,-5,-6], 7) == 6\nassert     find_kth([1,2,3,4,5,6], [-1,-2,-3,-4,-5,-6], 8) == 6\nassert     find_kth([1,2,3,4,5,6], [-1,-2,-3,-4,-5,-6], -1) == -1\nassert     find_kth([1,2,3,4,5,6], [-1,-2,-3,-4,-5,-6], 0) == -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_kth([1, 2, 3, 4, 5, 6], [2, 4, 5, 7, 9], 2) == 3\nassert     find_kth([1, 2, 3, 4, 5, 6], [2, 4, 5, 7, 9], 1) == 1\nassert     find_kth([1, 2, 3, 4, 5, 6], [2, 4, 5, 7, 9], 6) == 6\nassert     find_kth([1, 2, 3, 4, 5, 6], [2, 4, 5, 7, 9], 7) == 7\nassert     find_kth([1, 2, 3, 4, 5, 6], [2, 4, 5, 7, 9], 8) == 8\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_kth([], [], 1) == None\nassert     find_kth([5, 8, 12, 17, 20, 25], [3, 7, 10, 13], 1) == 17\nassert     find_kth([], [2, 3, 4], 1) == None\nassert     find_kth([1], [2, 3, 4], 1) == 1\nassert     find_kth([2], [1, 3, 4], 1) == 1\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     armstrong_number(9) == False, \"9 is not an Armstrong number\"\nassert     armstrong_number(13) == True, \"13 is an Armstrong number\"\nassert     armstrong_number(181) == True, \"181 is an Armstrong number\"\nassert     armstrong_number(1332) == False, \"1332 is not an Armstrong number\"\nassert     armstrong_number(1634) == False, \"1634 is not an Armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(8208) == True\nassert     armstrong_number(153) == False\nassert     armstrong_number(8208) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(153) == True, '153 is not an armstrong number'\nassert     armstrong_number(371) == False, '371 is an armstrong number'\nassert     armstrong_number(2718) == True, '2718 is an armstrong number'\nassert     armstrong_number(321) == False, '321 is not an armstrong number'\nassert     armstrong_number(1634) == True, '1634 is an armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    armstrong_number(155) == True\n    armstrong_number(18) == False\n    armstrong_number(40) == False\n    armstrong_number(24) == True\n    armstrong_number(155) == True\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153) == True, '153 should be armstrong number'\nassert     armstrong_number(371) == False, '371 should not be armstrong number'\nassert     armstrong_number(827) == False, '827 should not be armstrong number'\nassert     armstrong_number(153) == True, '153 should be armstrong number'\nassert     armstrong_number(371) == False, '371 should not be armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(armstrong_number(9))\nprint(armstrong_number(153))\nprint(armstrong_number(105))\nprint(armstrong_number(123))\nprint(armstrong_number(12345))\nprint(armstrong_number(1230))\n\ndef armstrong_number(number):\n    # your code here\n    s = 0\n    num = str(number)\n    for i in range(len(num)):\n        s += int(num[i]) ** len(num)\n    if s == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     armstrong_number(153)     == True \nassert     armstrong_number(3)     == False\nassert     armstrong_number(0)     == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \narmstrong_number(10)\narmstrong_number(1234321)\narmstrong_number(123)\narmstrong_number(1234)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_average(1) == 1.0, 'incorrect result'\nassert \nsum_average(2) == 3.0, 'incorrect result'\nassert \nsum_average(10) == 55.0, 'incorrect result'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"We expect the output of sum_average(10) to be (55, 5.6)\")\nsum_average(10)\n\nprint(\"We expect the output of sum_average(20) to be (50, 10.0)\")\nsum_average(20)\n\nprint(\"We expect the output of sum_average(50) to be (100, 20.0)\")\nsum_average(50)\n\nprint(\"We expect the output of sum_average(999) to be (5000, 500.0)\")\nsum_average(999)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_average(4) == 8\nassert     sum_average(1) == 1\nassert     sum_average(5) == 11\nassert     sum_average(100) == 1855\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(5) == 11\nassert     sum_average(0) == 0\nassert     sum_average(100) == 5050\nassert     sum_average(10) == 40\nassert     sum_average(1) == 1\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    sum_average(5) == 10\n    sum_average(6) == 15\n    sum_average(3) == 6\n    sum_average(2) == 5\n    sum_average(10) == 55\n    sum_average(11) == 55\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_average(1) == (1, 1)\nsum_average(2) == (1, 2)\nsum_average(10) == (1, 2)\nsum_average(20) == (1, 3)\nsum_average(100) == (1, 3)\nsum_average(1000) == (1, 4)\nsum_average(10000) == (1, 4)\nsum_average(20000) == (1, 4)\nsum_average(3000000) == (1, 4)\nsum_average(4000000) == (1, 4)\nsum_average(5000000) == (1, 4.5)\nsum_average(6000000) == (1, 4.5)\nsum_average(7000000) == (1, 4.5)\nsum_average(8000000) == (1, 4.5)\nsum_average(9000000) == (1, 4.5)\nsum_average(10000000) == (1, 4.5)\nsum_average(100000000) == (1, 4.5)\nsum_average(1000000000) == (1, 4.5)\nsum_average(1000000000000) == (1, 4.5)\nsum_average(1000000000000000) == (1, 4.5)\nsum_average(100000000000000000) == (1, 4.5)\nsum_average(1000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4.5)\nsum_average(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == (1, 4"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsum_average(10) == 30\nsum_average(1) == 1\nsum_average(100) == 200\nsum_average(2) == 3\nsum_average(123) == 123\nsum_average(100000) == 2000000\nsum_average(1000000) == 2000000\nsum_average(1000000000) == 20000000000\nsum_average(10000000000) == 20000000000\nsum_average(1000000000000) == 2000000000000\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert sum_average(10) == 20.0\nassert sum_average(0) == 0.0\nassert sum_average(15) == 20.0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nis_Even(2) == False\nis_Even(2) == True\nis_Even(7) == False\nis_Even(8) == True"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Even(4) == False, \"test 1\"\nassert     is_Even(5) == True, \"test 2\"\nassert     is_Even(100) == False, \"test 3\""
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Even(3) == True, \"is_Even function is not working correctly\"\nassert     is_Even(4) == False, \"is_Even function is not working correctly\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_Even(2) == True\nassert is_Even(11) == False\nassert is_Even(11) == True\nassert is_Even(0) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Even(1) == False \nassert     is_Even(2) == True\nassert     is_Even(3) == False\nassert     is_Even(4) == True\nassert     is_Even(5) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_Even(2)\nassert is_Even(2)\nassert not is_Even(3)\nassert is_Even(3)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_Even(3)\nassert not is_Even(3.0)\nassert is_Even(3.1)\nassert not is_Even(1.9)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(7) == False, \"Should be False\"\nassert     is_Even(8) == True, \"Should be True\"\nassert     is_Even(0) == False, \"Should be False\"\nassert     is_Even(1) == False, \"Should be False\"\nassert     is_Even(10) == True, \"Should be True\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char(\"hello\") ==     \"e\"\nassert     first_repeated_char(\"hello\") ==     \"l\"\nassert     first_repeated_char(\"hello\") ==     \"h\"\nassert     first_repeated_char(\"hello\") ==     \"\"\nassert     first_repeated_char(\"abcdefg\") ==     \"b\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char('A') == 'A'\nassert     first_repeated_char('aa') == 'a'\nassert     first_repeated_char('aa') == 'a'\nassert     first_repeated_char('abcddd') == 'd'\nassert     first_repeated_char('cdcd') == 'd'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_repeated_char(\"she\") == 'e', \"should return e\"\nassert     first_repeated_char(\"the\") == 't', \"should return t\"\nassert     first_repeated_char(\"he\") == 'h', \"should return h\"\nassert     first_repeated_char(\"hes\") == 'e', \"should return e\"\nassert     first_repeated_char(\"he\") == 'h', \"should return h\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char('aabcccdeee') == 'a'\nassert     first_repeated_char('abc') == 'a'\nassert     first_repeated_char('abcabc') == 'a'\nassert     first_repeated_char('abcdabcdabcd') == 'a'\nassert     first_repeated_char('abcabcabc') == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfirst_repeated_char(str1 = \"Python\") == \"y\"\nfirst_repeated_char(str1 = \"python\") == \"y\"\nfirst_repeated_char(str1 = \"Z\") == \"Z\"\nfirst_repeated_char(str1 = \"a\") == None\n\ndef number_of_distinct_characters(str1):\n    '''\n    Write a python function to count the number of distinct characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert first_repeated_char(\"\") == '', 'Empty string'\nassert first_repeated_char(\"ab\") == '', 'One character'\nassert first_repeated_char(\"abab\") == 'a', 'Repeated characters'\nassert first_repeated_char(\"ababab\") == 'a', 'Repeated characters'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfirst_repeated_char('abcde') == None\nfirst_repeated_char('abcab') == None\nfirst_repeated_char('abc') == 'c'\nfirst_repeated_char('abcd') == 'c'\nfirst_repeated_char('abccdddd') == 'c'\nfirst_repeated_char('abccccdddd') == 'd'\nfirst_repeated_char('abcccccdee') == 'd'\nfirst_repeated_char('abccccdeeee') == 'e'\nfirst_repeated_char('abccccceeeee') == 'e'\nfirst_repeated_char('abccccdddddddd') == 'd'\nfirst_repeated_char('abccccddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('abcd') == 'a'\nassert     first_repeated_char('abcda') == 'a'\nassert     first_repeated_char('abcdda') == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('Python') == 'h'\nassert     first_repeated_char('Monkey') == 'p'\nassert     first_repeated_char('google') == 'g'\nassert     first_repeated_char('bank') == 'b'\nassert     first_repeated_char('code') == 'c'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(0) == []\nassert     get_ludic(1) == []\nassert     get_ludic(2) == []\nassert     get_ludic(3) == [3]\nassert     get_ludic(4) == [3]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(5) == [[5]]\nassert     get_ludic(8) == [[2,2],[4,4]]\nassert     get_ludic(20) == [[4,5],[7,9]]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_ludic(0) == [], \"get_ludic should return [] if n is 0\"\nassert     get_ludic(10) == [], \"get_ludic should return [] if n is 10\"\nassert     get_ludic(11) == [11], \"get_ludic should return [11] if n is 11\"\nassert     get_ludic(20) == [2,4,6,8,10], \"get_ludic should return [2,4,6,8,10] if n is 20\"\nassert     get_ludic(51) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50], \"get_ludic should return [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50] if n is 51\"\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_ludic(3) == [1, 2], 'get_ludic(3) == [1, 2]'\nassert     get_ludic(5) == [1, 2, 3], 'get_ludic(5) == [1, 2, 3]'\nassert     get_ludic(7) == [1, 2, 3, 4, 5], 'get_ludic(7) == [1, 2, 3, 4, 5]'\nassert     get_ludic(9) == [1, 2, 3, 4, 5, 6], 'get_ludic(9) == [1, 2, 3, 4, 5, 6]'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(0) == []\nassert     get_ludic(1) == []\nassert     get_ludic(2) == [2]\nassert     get_ludic(3) == [3]\nassert     get_ludic(4) == []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('done!'"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_ludic(10) == [1, 2, 3, 4, 5, 7, 8, 10]\nassert     get_ludic(4) == [1, 2, 3, 4]\nassert     get_ludic(1) == [1]\nassert     get_ludic(9) == [1, 2, 3, 4, 5, 7, 8, 10]\nassert     get_ludic(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(1) == [1]\nassert get_ludic(2) == [1]\nassert get_ludic(3) == [1]\nassert get_ludic(4) == [1]\nassert get_ludic(5) == [1,2]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nget_ludic(100) == [9, 10, 12, 15, 20, 25, 30, 36, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 96, 98, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 253, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515, 520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585, 590, 595, 600, 605, 610, 615, 620, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725, 730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780, 785, 790, 795, 800, 805, 810, 815, 820, 825, 830, 835, 840, 845, 850, 855, 860, 865, 870, 875, 880, 885, 890, 895, 900, 905, 910, 915, 920, 925, 930, 935, 940, 945, 950, 955, 960, 965, 970, 975, 980, 985, 990, 995, 1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040, 1045, 1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095, 1100, 1105, 1110, 1115, 1120, 1125, 1130, 1135, 1140, 1155, 1160, 1165, 1170, 1175, 1180, 1185, 1190, 1205, 1210, 1215, 1220, 1225, 1230, 1235, 1240, 1245, 1250, 1255, 1260, 1265, 1270, 1275, 1280, 1285, 1290, 1295, 1300, 1315, 1320, 1325, 1330, 1335, 1340, 1345, 1350, 1355, 1360, 1365, 1370, 1375, 1380, 1385, 1390, 1395, 1400, 1405, 1410, 1415, 1420, 1425, 1430, 1435, 1440, 1445, 1450, 1455, 1460, 1465, 1470, 1475, 1480, 1485, 1490, 1495, 1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535, 1540, 1545, 1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595, 1600, 1605, 1610, 1615, 1620, 1625, 1630, 1635, 1640, 1645, 1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695, 1700, 1705, 1710, 1715, 1720, 1725, 1730, 1735, 1740, 1745, 1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795, 1800, 1805, 1810, 1815, 1820, 1825, 1830, 1835, 1840, 1845, 1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885, 1890, 1895, 1900, 1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085, 2090, 2095, 2100, 2105, 2110, 2115, 2120, 2125, 2130, 2135, 2140, 2145, 2150, 2155, 2160, 2165, 2170, 2175, 2180, 2185, 2190, 2195, 2200, 2205, 2210, 2215, 2220, 2245, 2249, 2250, 2253, 2257, 2260, 2265, 2270, 2275, 2280, 2285, 2290, 2295, 2300, 2305, 2310, 2315, 2320, 2325, 2330, 2335, 2334, 2338, 2340, 2345, 2350, 2355, 2360, 2365, 2370, 2375, 2380, 2385, 2390, 2395, 2400, 2405, 2410, 2415, 2420, 2425, 2430, 2435, 2440, 2445, 2450, 2455, 2460, 2465, 2470, 2475, 2480, 2485, 2490, 2495, 2500, 2505, 2510, 2515, 2520, 2525, 2530, 2535, 2540, 2545, 2550, 2555, 2560, 2565, 2570, 2575, 2580, 2585, 2590, 2595, 2600, 2605, 2610, 2615, 2620, 2625, 2630, 2635, 2640, 2645, 2646, 2647, 2650, 2646, 2647, 2646, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 2647, 26"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef reverse_words_in_place(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string in-place.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nreverse_words(\"hello my name is alex\") == \" alex my name is my name alex\"\nassert reverse_words(\"my name is alex\") == \"alex my name is my name alex\"\nassert reverse_words(\"alex my name is alex\") == \" alex my name is my name alex\"\nassert reverse_words(\"hello my name is alex\") == \" alex my name is my name alex\"\nassert reverse_words(\"hello alex\") == \" alex hello\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_words('the dog saw the cat') == 'nahca ot eht ot gat saw la'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_words('hello') == 'olleh', \"should return 'olleh' if input is 'hello'\"\nassert     reverse_words('hello world') == 'dlrow olleh', \"should return 'dlrow olleh' if input is 'hello world'\"\nassert     reverse_words('hello world') == 'dlrow olleh', \"should return 'dlrow olleh' if input is 'hello world'\"\nassert     reverse_words('hello world') == 'dlrow olleh', \"should return 'dlrow olleh' if input is 'hello world'\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_words('The quick brown fox jumps over the lazy dog.') \nassert     reverse_words('a') \nassert     reverse_words('red rum cake')\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nreverse_words('The quick brown fox jumps over the lazy dog') == 'god ynqfc bwfx ouf thmp sleay yxfnu'\nassert \nreverse_words('a good   example') == 'example good a'\nassert \nreverse_words('A man, a plan, a canal, Panama') == 'Panama, Panama, a, man'"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n'''\nUse str.split(), str.join(), str.strip() to reverse words in the given string.\n'''\n\ns = 'hello world'"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words('the quick brown fox') == 'yxvwcudokqftnhbxrei'\nassert     reverse_words('hello world') == 'dlrow olleh'\nassert     reverse_words('a') == 'a'\nassert     reverse_words('chocolate bar') == 'dborecoatlhchez'\nassert     reverse_words('luffy is a good girl') == 'girl a is goody lufy'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef prime_num2(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n\n\n\ndef prime_num3(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_num(1) == False, \"There is no 1\"\nassert     prime_num(2) == True, \"There is only 2\"\nassert     prime_num(3) == True, \"There is only 3\"\nassert     prime_num(4) == False, \"There is no 4\"\nassert     prime_num(5) == True, \"There is only 5\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef fibonacci(n):\n    '''\n    Write a Fibonacci series upto n-th term using recursion.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_prime_num():\n    '''\n    Write a function to check if a given number is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_num(7) == True\nassert     prime_num(8) == False\nassert     prime_num(15) == True\nassert     prime_num(11) == False\nassert     prime_num(10) == True\nprint('Test passed')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint radian_degree(90) == math.pi / 2\nprint radian_degree(180) == math.pi\nprint radian_degree(360) == 2 * math.pi\n\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     radian_degree(180) ==    math.pi / 180.0\nassert     radian_degree(360) ==     math.pi * 2.0\nassert     radian_degree(0) ==     math.pi\nassert     radian_degree(math.pi/2) ==     0.0\nassert     radian_degree(math.pi) ==     math.pi / 2.0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return degree\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_coordinate(radius, angle):\n    '''\n    Write a function to calculate coordinates of a circle given its radius and angle\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nradian_degree(90)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef square_root(x):\n    '''\n    Write a function to compute the square root.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n\nassert radian_degree(180) == math.pi * 180 / 180\nassert radian_degree(0) == math.pi / 2\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     radian_degree(0) == 0.00, \"FAILURE: test_radian_degree_0\"\nassert     radian_degree(90) == math.pi/2, \"FAILURE: test_radian_degree_1\"\nassert     radian_degree(-90) == -math.pi/2, \"FAILURE: test_radian_degree_2\"\nassert     radian_degree(180) == math.pi, \"FAILURE: test_radian_degree_3\"\nassert     radian_degree(360) == 2*math.pi, \"FAILURE: test_radian_degree_4\"\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_radian_degree():\n    assert radian_degree(180) == 3.141592653589793\n    assert radian_degree(0) == 0.0\n    assert radian_degree(math.pi/2) == math.pi/2\n    "
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals('aaabc', '(a|b)*') == (0, 2, 4)\nassert     find_literals('aaabc', 'a*') == (0, 1, 1)\nassert     find_literals('aaabc', 'a+') == (0, 1, 1)\nassert     find_literals('aaabc', 'a?') == (0, 1, 1)\nassert     find_literals('aaabc', 'a{3}') == (0, 1, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_literals(\n            \"this is a string! with some text and not much else and even numbers also without any\",\n            r\"(\\w)\"\n        ) == (\n            \"string!\",\n            8,\n            16\n        )\nassert     find_literals(\n            \"this is a string! with some text and not much else and even numbers also without any\",\n            r\"(\\w)a\"\n        ) == (\n            \"a\",\n            8,\n            12\n        )\nassert     find_literals(\n            \"this is a string! with some text and not much else and even numbers also without any\",\n            r\"(\\w)a(\\w)\"\n        ) == (\n            \"aa\",\n            8,\n            12\n        )\nassert     find_literals(\n            \"this is a string! with some text and not much else and even numbers also without any\",\n            r\"(\\w)a(\\w)(\\w)\"\n        ) == (\n            \"aa\",\n            8,\n            12\n        )\nassert     find_literals(\n            \"this is a string! with some text and not much else and even numbers also without any\",\n            r\"(\\w)a(\\w)(\\w)aa(\\w)\"\n        ) == (\n            \"aa\",\n            8,\n            16\n        )\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals('', 'abc') == (0, 0, 0)\nassert find_literals('abc', 'abc') == (0, 3, 3)\nassert find_literals('abc', 'a') == (0, 1, 1)\nassert find_literals('abcdabc', 'abc') == (0, 3, 3)\nassert find_literals('abcdabc', 'c') == (1, 3, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_literals('i am good, i am very good.', 'good') ==     'good', 'find_literals: Wrong'\nassert     find_literals('i am good, i am very good.', 'good, i') ==     'good', 'find_literals: Wrong'\nassert     find_literals('i am good, i am very good.', 'good,') ==     'good', 'find_literals: Wrong'\nassert     find_literals('i am good, i am very good.', 'good, i') ==     'good', 'find_literals: Wrong'\nassert     find_literals('i am good, i am very good.', 'good, i am') ==     'good', 'find_literals: Wrong'\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals('The rain in spain', 'ai') == ('ai', 0, 9)\nassert     find_literals('The rain in spain', '.*ai') == ('ai', 0, 9)\nassert     find_literals('The rain in spain','spain') == ('spain', 0, 9)\nassert     find_literals('The rain in spain','sp*ain') == ('spain', 0, 9)\nassert     find_literals('The rain in spain', '*ain') == ('ain', 0, 9)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_literals(\n            \"\", r\"\") == (None, 0, 0)\nassert     find_literals(\n            \"abcdef\", r\"\") == (None, 0, 0)\nassert     find_literals(\n            \"abcdef\", r\"cd\") == (None, 0, 0)\nassert     find_literals(\n            \"abcdef\", r\"abcd\") == (None, 0, 0)\nassert     find_literals(\n            \"abcdef\", r\"ef\") == (None, 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('ac', 'abc') == ('a', 0, 1)\nassert     find_literals('ab', 'abc') == ('b', 1, 2)\nassert     find_literals('aaaabcc', 'abc') == ('ab', 1, 6)\nassert     find_literals('abc', 'abc') == ('abc', 0, 5)\nassert     find_literals('abc', 'abcd') == ('abcd', 0, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals(\"abcde\", \"abcde\") == (3, 3, 4)\nassert     find_literals(\"abcd\", \"abcde\") == (1, 2, 3)\nassert     find_literals(\"abcd\", \"abc\") == (1, 2, 3)\nassert     find_literals(\"abcd\", \"ab\") == (1, 2, 3)\nassert     find_literals(\"abcde\", \"abc\") == (1, 2, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef escape_literal(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching literal string, a start index and an end index.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_Number(1) == 1 \nassert bell_Number(2) == 2 \nassert bell_Number(5) == 5 \nassert bell_Number(11) == 55 \nassert bell_Number(121) == 312\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_Number(2) == 1\nassert     bell_Number(3) == 2\nassert     bell_Number(4) == 5\nassert     bell_Number(5) == 14\nassert     bell_Number(6) == 21\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbell_Number(3) == 8\nbell_Number(5) == 8\nbell_Number(8) == 40320\nbell_Number(0) == 1\nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(100) == 2432902008176640000\nbell_Number(1000) == 461373225806451613\nbell_Number(10000) == 18446744073709551616\nbell_Number(3000000) == 32902008176640000\nbell_Number(4000000) == 32902008176640000\nbell_Number(5000000) == 32902008176640000\nbell_Number(6000000) == 32902008176640000\nbell_Number(7000000) == 32902008176640000\nbell_Number(8000000) == 32902008176640000\nbell_Number(9000000) == 32902008176640000\nbell_Number(10000000) == 32902008176640000\nbell_Number(100000000) == 32902008176640000\nbell_Number(1000000000) == 32902008176640000\nbell_Number(10000000000) == 32902008176640000\nbell_Number(100000000000) == 32902008176640000\nbell_Number(1000000000000) == 32902008176640000\nbell_Number(10000000000000) == 32902008176640000\nbell_Number(100000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(10000000000000000) == 32902008176640000\nbell_Number(100000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000000) == 32902008176640000\nbell_Number(100000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell_Number(1000000000000000) == 32902008176640000\nbell"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_Number(1) == 1\nassert bell_Number(2) == 2\nassert bell_Number(3) == 3\nassert bell_Number(4) == 5\nassert bell_Number(5) == 7\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nn = 5\nprint(bell_Number(n))\nprint(True)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_Number(1) == 1, 'bell_Number should return 1'\nassert     bell_Number(2) == 1.5, 'bell_Number should return 1.5'\nassert     bell_Number(3) == 2, 'bell_Number should return 2'\nassert     bell_Number(4) == 3, 'bell_Number should return 3'\nassert     bell_Number(5) == 5, 'bell_Number should return 5'\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert bell_Number(1) == 1\nassert bell_Number(2) == 2\nassert bell_Number(3) == 4\nassert bell_Number(4) == 14\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef third_power(a):\n    '''\n    Write a python function to find the third power of a number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert bell_Number(0) == 1\nassert bell_Number(1) == 1\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([1, 2, 3], 0) == [1, 2, 3], \"Error\"\nassert     remove_kth_element([1, 2, 3], 1) == [1, 3], \"Error\"\nassert     remove_kth_element([1, 2, 3], 2) == [1, 2], \"Error\"\nassert     remove_kth_element([1, 2, 3], 3) == [1, 2], \"Error\"\nassert     remove_kth_element([1, 2, 3], 4) == [1, 2, 3], \"Error\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 4, 5, 6, 7]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7], 0) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7], 9) == [1, 2, 3, 4, 5, 6]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7], 8) == [1, 2, 3, 4, 5, 6]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7], 10) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    remove_kth_element([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n    remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]\n    remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\n    remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]\n    remove_kth_element([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5]\n    remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 3) ==[1,2,4,5]\nassert     remove_kth_element([1,2,3,4,5], 0) ==[1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 1) ==[2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 5) ==[1,2,3,4]\nassert     remove_kth_element([1,2,3,4,5], 6) ==[1,2,3,4,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef remove_kth_element_solution(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([], 5) == None\nassert remove_kth_element([5, 1, 5, 2, 4, 5, 4, 5, 4], 5) == None\nassert remove_kth_element([1, 2, 3, 4, 5], 5) == None\nassert remove_kth_element([], 1) == None\nassert remove_kth_element([1, 2, 3, 4, 5], 0) == None\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([10,20,30,40,50,60,70,80,90,100], 0) == None\nassert     remove_kth_element([10,20,30,40,50,60,70,80,90,100], 5) == None\nassert     remove_kth_element([10,20,30,40,50,60,70,80,90,100], 6) == 100\nassert     remove_kth_element([10,20,30,40,50,60,70,80,90,100], 9) == 90\nassert     remove_kth_element([10,20,30,40,50,60,70,80,90,100], 1) == 20\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_kth_element([1,2,3,4,5], 2) == [1,2,3,4], \"Failed\"\nassert remove_kth_element([1,2,3,4,5], 1) == [1,2,3,4], \"Failed\"\nassert remove_kth_element([1,2,3,4,5], 0) == [1,2,3,4], \"Failed\"\nassert remove_kth_element([], 0) == [], \"Failed\"\n\ndef find_k_largest_numbers(arr, k):\n    '''\n    Write a python function which takes a list of numbers and finds the k largest numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([2, 1, 7, 8, 1], 1) ==[2, 1, 8], \"Failed\"\nassert     remove_kth_element([1, 2, 1], 1) ==[2, 1], \"Failed\"\nassert     remove_kth_element([1, 2, 1], 0) ==[], \"Failed\"\nassert     remove_kth_element([1, 2, 1], 2) ==[1, 2], \"Failed\"\nassert     remove_kth_element([1, 2, 1], 3) ==[1, 2], \"Failed\"\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_of_nth([[2, 4], \n                    [1, 5], \n                    [3, 6],\n                    [8, 10],\n                    [7, 11]], 0) == 5\n\nassert     max_of_nth([[2, 4], \n                    [1, 5], \n                    [3, 6],\n                    [8, 10],\n                    [7, 11]], 1) == 6\n\nassert     max_of_nth([[2, 4], \n                    [1, 5], \n                    [3, 6],\n                    [8, 10],\n                    [7, 11]], 2) == 10\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_of_nth([[1,2,3],[2,3,4],[4,5,6]],1) == 3\nassert     max_of_nth([[1,2,3],[2,3,4],[4,5,6]],2) == 4\nassert     max_of_nth([[1,2,3],[2,3,4],[4,5,6]],3) == 5\nassert     max_of_nth([[1,2,3],[2,3,4],[4,5,6]],4) == 6\nassert     max_of_nth([[1,2,3],[2,3,4],[4,5,6]],5) == 6\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the sum of then'th column.\n    '''\n    pass"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_of_nth([[1,2,3],\n                      [4,5,6],\n                      [7,8,9]], 1) == 9\nassert     max_of_nth([[1,2,3],\n                      [4,5,6],\n                      [7,8,9]], 2) == 7\nassert     max_of_nth([[1,2,3],\n                      [4,5,6],\n                      [7,8,9]], 3) == 8\nassert     max_of_nth([[1,2,3],\n                      [4,5,6],\n                      [7,8,9]], 4) == 6\nassert     max_of_nth([[1,2,3],\n                      [4,5,6],\n                      [7,8,9]], 5) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_of_nth([[5,1,9,11],[4,10,7,2],[3,8,6,7],[2,1,4,5]],3) == 11, \"Wrong result\"\nassert max_of_nth([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]],2) == 15, \"Wrong result\"\nassert max_of_nth([[5,1,9,11],[4,10,7,2],[3,8,6,7],[2,1,4,5]],4) == None, \"Wrong result\"\nassert max_of_nth([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]],5) == None, \"Wrong result\"\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_of_nth([[1,2,3,4],[5,6,7,8],[1,2,3,4],[5,6,7,8]], 1) == 7\nassert max_of_nth([[1,2,3,4],[5,6,7,8],[1,2,3,4],[5,6,7,8]], 2) == 7\nassert max_of_nth([[1,2,3,4],[5,6,7,8],[1,2,3,4],[5,6,7,8]], 3) == 7\nassert max_of_nth([[1,2,3,4],[5,6,7,8],[1,2,3,4],[5,6,7,8]], 4) == 7\nassert max_of_nth([[1,2,3,4],[5,6,7,8],[1,2,3,4],[5,6,7,8]], 5) == 8\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]], \"Should be [[1, 2], [3, 4]]\"\nassert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]], \"Should be [[1, 2], [3, 4], [5, 6]]\"\nassert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]], \"Should be [[1, 2], [3, 4]]\"\nassert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]], \"Should be [[1, 2], [3, 4], [5, 6]]\""
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nmerge([[1, 2],\n    [4, 6],\n    [1, 3],\n    [6, 3],\n    [8, 6],\n    [4, 7]]) == [[1, 2],\n                [4, 6],\n                [1, 3],\n                [6, 3],\n                [8, 6],\n                [4, 7]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge([[1,2,3], [4,5,6]]) == [[1, 2, 3], [4, 5, 6]]\nassert     merge([[7,8,9], [1,2,3]]) == [[7, 8, 9], [1, 2, 3]]\nassert     merge([[7,8,9], [4,5,6]]) == [[7, 8, 9], [4, 5, 6]]\nassert     merge([[7,8], [9,10], [11,12]]) == [[7, 8], [9, 10], [11, 12]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert     merge([[1,2],[3,4],[5,6],[7,8]]) == [[1,2],[3,4],[5,6],[7,8]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1,3],[2,4]]\nassert     merge([[1,2,3],[4,5,6]]) == [[1,4],[2,5],[3,6]]\nassert     merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]\nassert     merge([[1,2,3,4],[5,6]]) == [[1,5,3,4],[2,6]]\nassert     merge([[1],[2]]) == [[1],[2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge([[1, 2], [4, 5], [8, 10]]) == [[1, 2], [4, 5], [8, 10]]\nassert     merge([[1, 2], [4, 5], [10, 20]]) == [[1, 2], [4, 5], [10, 20]]\nassert     merge([[1, 2], [4, 5], [10, 20], [11, 13]]) == [[1, 2], [4, 5], [10, 20], [11, 13]]\nassert     merge([[1], [4], [10], [11, 13]]) == [[1], [4], [10], [11, 13]]\nassert     merge([[], [4], [10], [11, 13]]) == [[], [4], [10], [11, 13]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]]\nassert     merge([]) == []\nassert     merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     merge([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cummulative_sum((1,2,3)) == (1,3,6), 'Expected (1,3,6) but got (%s,%s,%s)' % (1,2,3)\nassert     cummulative_sum((5,4,3)) == (5,8,13), 'Expected (5,8,13) but got (%s,%s,%s)' % (5,4,3)\nassert     cummulative_sum((1,2,3)) == (1,3,6), 'Expected (1,3,6) but got (%s,%s,%s)' % (1,2,3)\nassert     cummulative_sum((10,9,8,7)) == (10,19,38,57), 'Expected (10,19,38,57) but got (%s,%s,%s,%s)' % (10,9,8,7)\n\nprint('All test cases passed.')\nprint('\\n')\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum(('a', 'b', 'c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e') == ('a', 'b', 'c', 'd', 'e')\nassert     cummulative_sum(('a',)) == ('a',) == ('a',)\nassert     cummulative_sum(('a', 'b', 'c', 'd', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f') == ('a', 'b', 'c', 'd', 'e', 'f')\nassert     cummulative_sum(('a', 'b', 'c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e') == ('a', 'b', 'c', 'd', 'e')\nassert     cummulative_sum(()) == () == ()\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cummulative_sum((1,2,3)) == (1, 3, 6)\nassert     cummulative_sum((-1,2,3)) == (1, -3, -6)\nassert     cummulative_sum((2,2,2)) == (2, 4, 6)\nassert     cummulative_sum((-1,-2,-3)) == (1, -3, -6)\nassert     cummulative_sum((4,5,6)) == (4, 9, 12)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\nassert     cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\nassert     cummulative_sum([0]) == [0]\nassert     cummulative_sum([1]) == [1]\nassert     cummulative_sum([-1]) == [-1]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cummulative_sum(('a','b','c')) == ('a', 'ab', 'abc', 'abc', 'ab', 'a')\nassert     cummulative_sum(('b','c','d')) == ('b', 'bc', 'bd', 'c', 'cd', 'd')\nassert     cummulative_sum(('e','f','g')) == ('e', 'ef', 'ef', 'e', 'e', 'e')\nassert     cummulative_sum(('h','i','j')) == ('h', 'hi', 'hj', 'hi', 'hi', 'h')\nassert     cummulative_sum(('k','l','m')) == ('k', 'kl', 'km', 'kl', 'kl', 'kl')\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cummulative_sum([]) == ()\nassert     cummulative_sum([1]) == (1,)\nassert     cummulative_sum([1, 2]) == (1, 3)\nassert     cummulative_sum([1, 2, 3]) == (1, 4)\nassert     cummulative_sum([1, 2, 3, 4]) == (1, 5)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cummulative_sum((1, 2, 3, 4, 5, 6, 7, 8)) == (1, 3, 6, 10, 15, 21, 28, 36)\nassert     cummulative_sum(('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')\nassert     cummulative_sum((-1, -2, -3, -4, -5, -6, -7, -8)) == (-8, -14, -20, -26, -42, -58, -74, -90)\nassert     cummulative_sum(('-1', '-2', '-3', '-4', '-5', '-6', '-7', '-8')) == ('-8', '-14', '-20', '-26', '-42', '-58', '-74', '-90')\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cummulative_sum(test_list) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cummulative_sum((0, 1, 2, 3)) == (0, 1, 3, 6), 'incorrect'\nassert     cummulative_sum((2, 3, 4)) == (2, 4, 6), 'incorrect'\nassert     cummulative_sum((1, 2)) == (1, 2, 3), 'incorrect'\n\nprint('All tests passed')\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert average_tuple(((1,2,3),(4,5,6))) == [2.5,5.0,6.5]\nassert average_tuple(((4,5,6),(7,8,9))) == [5.0,7.5,8.5]\nassert average_tuple(((5,6,7),(8,9,10))) == [6.5,7.5,8.5]\nassert average_tuple(((1,2,3),(1,2,3))) == [2.0,2.0,2.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     average_tuple([\n        (3, 4), \n        (2, 3), \n        (1, 2)\n    ]) == [(1, 2), (2, 3), (3, 4)]\n\nassert average_tuple([\n        (1,), \n        (2,), \n        (3,)\n    ]) == [(1,), (2,), (3,)]\n\nassert average_tuple([\n        (0,), \n        (0,)\n    ]) == [(0,)]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nQuestion:\n   Write a function which takes a list of elements and returns a list of lists with the sums of each\n   sub-list in the original list.\n   \n   Example:\n      input = [1, 2, 3, 4, 5]\n      output = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4], [5, 5, 5, 5, 5]]\n'''"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == [2, 2, 2, 2, 2]\nassert     average_tuple([(2, 2), (2, 2), (2, 2), (2, 2), (2, 2)]) == [2, 2, 2, 2, 2]\nassert     average_tuple([(1, 2), (1, 2, 3), (1, 2, 3, 4, 5, 6)]) == [2, 3.5, 7]\nassert     average_tuple([(1, 2), (1, 2), (1, 2)]) == [2, 2, 2]\nassert     average_tuple([(1, 2), (1, 2), (1, 2, 3, 4, 5, 6)]) == [2, 2, 2]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple([[1, 2, 3], [3, 4, 5], [5, 6, 7]]) == [[1.0, 2.0, 3.0], [3.5, 4.5, 5.5], [5.5, 6.5, 7.5]]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple([[1, 2], [3, 4], [5, 6]]) ==     [2, 3.5]\nassert     average_tuple([[], [], []]) ==     []\nassert     average_tuple([[1, 2, 3], [], [4, 5, 6]]) ==     [2, 3, 5.5]\nassert     average_tuple([[1, 2, 3], [1], [4, 5, 6]]) ==     [2, 2, 5.5]\nassert     average_tuple([[1, 2, 3, 4], [5], [6], [7, 8], [9], []]) ==     [2, 3.5, 5.5, 7.5]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     average_tuple(((1, 2, 3), (2, 3, 4))) == ([2, 3, 3.5],\n                                                            [2.5, 3, 4])\nassert     average_tuple(((1, 2, 3), (2, 3, 4), (2, 3, 4))) == ([2, 3, 3.5],\n                                                                    [2.5, 3, 4])\nassert     average_tuple(((1, 2, 3), (2, 3, 4), (2, 3, 4))) == ([2, 3, 3.5],\n                                                                    [2.5, 3, 4])\nassert     average_tuple(((1, 2, 3), (2, 3, 4), (2, 3, 4))) == ([2, 3, 3.5],\n                                                                    [2.5, 3, 4])\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple(((1, 2), (2, 4), (5, 6), (3, 7))) == [(2, 3), (3, 5.0), (4, 6.5)]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     average_tuple(()) == ()\nassert     average_tuple((1,)) == (1,)\nassert     average_tuple((1,2)) == (1.5,)\nassert     average_tuple((1,2,3)) == (1.666666666666667,2.5,3)\nassert     average_tuple((1,2,3,4)) == (1.666666666666667,2.5,3.666666666666667,4)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 0, 3)\nassert tuple_modulo((1, 2, 3), (4, -5, 6)) == (0, 2, 0)\nassert tuple_modulo((1, 2, 3), (1, -2, 3)) == (2, 0, 1)"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((1,2,3), (2,3,4)) == (1,0,1)\nassert     tuple_modulo((1,2,3), (4,5,6)) == (1,0,1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((1,2), (4,6)) == (0,2)\nassert     tuple_modulo((1,2), (3,6)) == (0,1)\nassert     tuple_modulo((1,2), (2,6)) == (0,1)\nassert     tuple_modulo((1,2), (0,6)) == (0,0)\n\n\ndef tuple_element(test_tup):\n    '''\n    Write a function which takes a tuple of the same length and returns the element at the ith index.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((1, 2), (1, 2)) == (0, 0)\nassert     tuple_modulo((1, 2), (2, 4)) == (0, 2)\nassert     tuple_modulo((1, -2), (2, 4)) == (2, 2)\nassert     tuple_modulo((1, -2), (2, -4)) == (1, 2)\nassert     tuple_modulo((1, 2), (3, 4)) == (2, 4)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo((12, 4, 20, 8), (1, 2, 10, 3)) == (9, 0, 60, 2)\nassert tuple_modulo((2, 4, 10, 6), (1, 2, 4, 7)) == (9, 0, 4, 1)\n\n\n\ndef calc_mod_with_if(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo using if.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         tuple_modulo((0,3), (0,3))     == (0,0)\nassert         tuple_modulo((0,2), (0,3))     == (0,1)\nassert         tuple_modulo((4,4), (5,3))     == (0,0)\nassert         tuple_modulo((1,0), (1,0))     == (0,0)\nassert         tuple_modulo((0,2), (0,1))     == (0,1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo( (10, 20), (10, 20)) == (0, 0)\nassert     tuple_modulo( (2, 4), (10, 20)) == (2, 2)\n\nprint('All tests passed!')\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo((1, 2), (4, 2)) == (1, 1)\nassert     tuple_modulo((2, 3), (5, 7)) == (0, 0)\nassert     tuple_modulo((1, 2, 2), (3, 2, 2)) == (1, 1, 1)\nassert     tuple_modulo((0, 2, 2), (1, 2, 2)) == (0, 0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         tuple_modulo((4, 4), (4, 4)) == (0, 0)\nassert         tuple_modulo((4, 4), (5, 5)) == (1, 1)\nassert         tuple_modulo((2, 2), (2, 2)) == (0, 0)\nassert         tuple_modulo((-2, 2), (2, 2)) == (1, 0)"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef min_Jumps_v2(steps, d):\n    '''\n    Use dynamic programming and check whether the minimum number of jumps can be made is exactly one or not.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Jumps([5, 1, 1, 1, 1, 1], (1, 0)) == 2\nassert     min_Jumps([4, 2, 1, 1, 2, 2], (1, 0)) == 2\nassert     min_Jumps([7, 1, 1, 1, 1, 1, 1], (1, 0)) == 2\nassert     min_Jumps([1, 2, 1, 1, 1, 1], (1, 0)) == 2\nassert     min_Jumps([1, 2, 1, 1, 1, 1, 1, 1], (1, 0)) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Jumps(3, (0, 0)) == 1\nassert     min_Jumps(3, (0, 1)) == 0\nassert     min_Jumps(3, (0, 2)) == 2\nassert     min_Jumps(3, (1, 0)) == 1\nassert     min_Jumps(3, (1, 1)) == 0\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(steps=5, d=2) == 2, \"Case 1.\"\nassert     min_Jumps(steps=9, d=3) == 3, \"Case 2.\"\nassert     min_Jumps(steps=9, d=4) == 4, \"Case 3.\"\nassert     min_Jumps(steps=3, d=2) == 0, \"Case 4.\"\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Jumps(2, 1) == 1, \"incorrect answer\"\nassert     min_Jumps(2, 0) == 1, \"incorrect answer\"\nassert     min_Jumps(2, 2) == 0, \"incorrect answer\"\nassert     min_Jumps(2, 3) == 1, \"incorrect answer\"\nassert     min_Jumps(2, 4) == 2, \"incorrect answer\"\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps(2,2) == 2\nassert     min_Jumps(4,4) == 1\nassert     min_Jumps(5,5) == 2\nassert     min_Jumps(6,6) == 2\nassert     min_Jumps(7,7) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_Jumps(4, 2) == 1\nassert     min_Jumps(4, 4) == 1\nassert     min_Jumps(4, 5) == 2\nassert     min_Jumps(5, 1) == 1\nassert     min_Jumps(5, 5) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Jumps(6, 1) == 1\nassert     min_Jumps(6, 2) == 1\nassert     min_Jumps(6, 3) == 2\nassert     min_Jumps(6, 4) == 2\nassert     min_Jumps(6, 5) == 3\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndiv_list([1,2,3,4],[0,2,3,4]) == [1,1,1,1]\nassert \ndiv_list([1,2,3,4],[1,2,3,4]) == [1,1,1,1]\nassert \ndiv_list([1,2,3,4],[0,2,0,4]) == [1,1,1,1]\nassert \ndiv_list([1,2,3,4],[1,0,3,4]) == [1,1,1,1]\nassert \ndiv_list([1,2,3,4],[1,2,3,4]) == [1,1,1,1]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef shift_list(nums):\n    '''\n    Write a function to shift a list to the left by k places.\n    '''\n    pass"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_list([1,2,3], [4,5,6]) == None, \"Should return None\"\nassert     div_list([1,2], [4,5,6]) == None, \"Should return None\"\nassert     div_list([1], [4,5,6]) == None, \"Should return None\"\nassert     div_list([], [4,5,6]) == None, \"Should return None\"\nassert     div_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == None, \"Should return None\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_list([1,2,3],[2,2,2]) ==     [1,1/2,1/2]\nassert     div_list([1,2,3],[0,2,2]) ==     [1,1/2,1/2]\nassert     div_list([0,2,2],[1,2,2]) ==     [0,0/1,0/1]\n\ndef div_list_test(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert div_list([1,2,3,4,5],3) ==[0.2,0.4,0.6,1.0,2.0]\nassert div_list([1,1,1,1,1],3) ==[0.333,0.333,0.333,0.333,0.333]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     div_list([1,2,3,4],\n                [4,5,6,7]) == [[1,2],[3,4],[4,5],[6,7]], \"not correct\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    div_list([1,2,3,4],2) == [[1,2],2,3,4], \"Wrong result\"\nassert\n    div_list([1,2,3],4) == [[1,1],[2,2],[3,3]], \"Wrong result\"\n\ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num('pqrstu') == 'prstuq', 'First'\nassert     move_num('abcdef') == 'bdefabc', 'Second'\nassert     move_num('a') == 'a', 'Third'\nassert     move_num('') == '', 'Fourth'\n\n'''\nWrite a function that takes a string as input and returns the string with its first character\nof each word capitalized.\n'''"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num('12:35:45') == '45:35:12'\nassert     move_num('12:35:45p') == 'p:35:45'\nassert     move_num('12:35:45') == '45:35:12'\nassert     move_num('12345') == '1234'\nassert     move_num('123456789') == '123456789'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num('0') == '1'\nassert     move_num('3') == '3'\nassert     move_num('1234') == '124'\nassert     move_num('100') == '100'\n\nprint('All assertions passed')\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num(\"a1b2c3d4e\") == \"d4e1b2c3a\"\nassert     move_num(\"12a2c3d4e\") == \"e2c3d4a12\"\nassert     move_num(\"abcdefg\") == \"gabcdef\"\nassert     move_num(\"\") == \"\"\n\n\ndef rotate_list(l):\n    '''\n    Write a function that takes as input a list of integers and returns the same list\n    but with its items rotated. For example, if l is [1, 2, 3], the function should\n    return [3, 1, 2].\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_num('a2345g') == 'g2345a'\nassert     move_num('12345') == '54321'\nassert     move_num('a') == 'a'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num(\"the quick brown fox jumps over the lazy dog\") == \"he, x, y, j, u, t, h, h, o, x, b, l, a, d, f, q, u, n, g, x, r, j, w, r, a, c, e\", \"Wrong answer.\"\nprint(\"correct\")\n\ndef new_line(test_str):\n    '''\n    Write a function which returns the string with all the words having the same length as the first word.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num('a1b2c3d4e') == 'e1b2c3d4a', 'test 1 Failed'\nassert     move_num('4f-6g-3h') == 'h-3g-f-', 'test 2 Failed'\nassert     move_num('aeiou') == 'oui', 'test 3 Failed'\nassert     move_num('3ch4f2') == '3ch4f2', 'test 4 Failed'\nassert     move_num('5df1') == '1df5', 'test 5 Failed'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num('s1e2t3r4f5g') == 'g1t2f3r4e5s', \"expected 'g1t2f3r4e5s', got 'g1t2f3r4e5s'\"\nassert     move_num('t2g1r4f') == 'f1g2r3t4', \"expected 'f1g2r3t4', got 'f1g2r3t4'\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num(\"arLfAvAvbOjkEdD\") == \"avbLfOjkEdD\", \\\n    \"Should be avbLfOjkEdD\"\n\nassert     move_num(\"avbLfOjkEdD\") == \"avbLfOjkEdD\", \\\n    \"Should be avbLfOjkEdD\"\n\nassert     move_num(\"jvLKgMnKiCtthKrGc\") == \"CthKrGcLKgMnKiCtthKrGc\", \\\n    \"Should be CthKrGcLKgMnKiCtthKrGc\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num('a890fad4') == 'ad4f90a', 'incorrect move_num'\nassert     move_num('890adf4') == 'ad4f90', 'incorrect move_num'\nassert     move_num('adf4') == 'adf4', 'incorrect move_num'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([3, 6, 2, 5]) == 3\nassert largest_subset([4, 3, 3, 2]) == 2\nassert largest_subset([0, 1]) == 1\nassert largest_subset([1, 2]) == 1\nassert largest_subset([1, 2, 3]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_subset([1,2,3,4,5]) == 4\nassert     largest_subset([1,2,3,4,5,6,7]) == 6\nassert     largest_subset([1,2,3,4,5,6,7,8]) == 6\nassert     largest_subset([1,2,3,4,5,6,7,8,9]) == 9\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10]) == 9\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    pass\n\n\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([8, 4, 2, 1, 5, 6, 7, 9, 10]) == 7\nassert     largest_subset([5, 7, 9, 10, 2, 6, 4, 3]) == 7\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_subset([1, 2, 3]) == 6, \"Wrong\"\nassert     largest_subset([2, 3, 4]) == 6, \"Wrong\"\nassert     largest_subset([3, 4, 5]) == 5, \"Wrong\"\nassert     largest_subset([1, 2, 3, 4]) == 3, \"Wrong\"\nassert     largest_subset([1, 1, 1]) == 2, \"Wrong\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert largest_subset([1,2,3,4,5]) == 6\nassert largest_subset([1,2,3,4,6,8,9]) == 17\nassert largest_subset([2,4,6,8]) == 8\nassert largest_subset([2,4,6,8,10,12]) == 18\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_subset([1, 3, 5, 7, 9]) == 4, 'Wrong result for largest_subset([1, 3, 5, 7, 9]): 4'\nassert     largest_subset([1, 3, 5, 7, 9, 11]) == 5, 'Wrong result for largest_subset([1, 3, 5, 7, 9, 11]): 5'\nassert     largest_subset([1, 3, 5, 7, 9, 11, 13]) == 6, 'Wrong result for largest_subset([1, 3, 5, 7, 9, 11, 13]): 6'\nassert     largest_subset([1, 3, 5, 7, 9, 11, 13, 15]) == 8, 'Wrong result for largest_subset([1, 3, 5, 7, 9, 11, 13, 15]): 8'\nassert     largest_subset([1, 3, 5, 7, 9, 11, 13, 15, 17]) == 9, 'Wrong result for largest_subset([1, 3, 5, 7, 9, 11, 13, 15, 17]): 9'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_subset([1,2,3,4,5]) == 1, \"Wrong answer\"\nassert     largest_subset([5,4,3,2,1]) == 1, \"Wrong answer\"\nassert     largest_subset([6,5,4,3,2,1]) == 1, \"Wrong answer\"\nassert     largest_subset([2,4,6,8]) == 1, \"Wrong answer\"\nassert     largest_subset([2,4,6]) == 1, \"Wrong answer\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7]) == 7\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert get_median([1,2,3,4], [2,3,4,5], 5) == 3.5\nassert get_median([2,1,5,3,4], [1,5,3,2,4], 6) == 3.5\nassert get_median([1,2,3,4], [5,6,7,8], 4) == 4\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_median([1, 2, 3], [4, 5, 6], 3) == 2.5\n\nassert get_median([1, 2, 3], [4, 5, 6], 4) == 2.5"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_median2(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if arr1 == arr2:\n        return arr1[n//2]\n    else:\n        a = arr1\n        b = arr2\n        arr = []\n        while len(a) > 0 and len(b) > 0:\n            if a[0] <= b[0]:\n                arr.append(a[0])\n                a = a[1:]\n            else:\n                arr.append(b[0])\n                b = b[1:]\n\n        while len(a) > 0:\n            arr.append(a[0])\n            a = a[1:]\n        while len(b) > 0:\n            arr.append(b[0])\n            b = b[1:]\n\n        if len(arr) % 2 == 0:\n            return (arr[len(arr)//2] + arr[len(arr)//2 - 1])/2\n        else:\n            return arr[len(arr)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_median_sorted_arrays(arr1, arr2):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_median([1,2,3,4,5], [2,3,4,5,6], 5) == 2.5\nassert     get_median([1,2,3,4,5], [2,3,4,5,6], 6) == 3.5\nassert     get_median([1,2,3,4,5], [2,3,4,5,6], 7) == 3.5\nassert     get_median([1,2,3,4,5], [2,3,4,5,6], 8) == 4.5\nassert     get_median([1,2,3,4,5], [2,3,4,5,6], 9) == 4.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_median([1, 2, 3, 4, 5, 6, 7, 8, 9], \n                    [10, 11, 12, 13, 14, 15, 16, 17, 18],\n                    3) == 5\nassert get_median([1, 2, 3, 4, 5, 6, 7, 8, 9], \n                    [10, 11, 12, 13, 14, 15, 16, 17, 18],\n                    4) == 6\nassert get_median([1, 2, 3, 4, 5, 6, 7, 8, 9], \n                    [10, 11, 12, 13, 14, 15, 16, 17, 18],\n                    5) == 8\nassert get_median([1, 2, 3, 4, 5, 6, 7, 8, 9], \n                    [10, 11, 12, 13, 14, 15, 16, 17, 18],\n                    6) == 9\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     nth_nums([2,3,4],1) == [2**1,3**1,4**1]\nassert     nth_nums([2,3,4],2) == [2**2,3**2,4**2]\nassert     nth_nums([2,3,4],3) == [2**3,3**3,4**3]\nassert     nth_nums([2,3,4],4) == [2**4,3**4,4**4]\nassert     nth_nums([2,3,4],5) == [2**5,3**5,4**5]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert nth_nums([1,2,3,4],2) == [1, 4, 9, 16]\nassert nth_nums([1,2,3,4],3) == [1, 8, 27, 64]\nassert nth_nums([1,2,3,4],4) == [1, 81, 324, 1008]\nassert nth_nums([1,2,3,4],5) == None\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     nth_nums([1,2,3,4],2) == [1,4,9,16]\nassert     nth_nums([1,2,3,4],3) == [1,4,9,16]\nassert     nth_nums([1,2,3,4],4) == [1,4,9,16]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_digit(x,d):\n    '''\n    Write a function to get the digit at index d of a number x.\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     nth_nums([1,2,3,4],1) == [1, 2, 3, 4]\nassert     nth_nums([1,2,3,4],2) == [1, 4, 9, 16]\nassert     nth_nums([1,2,3,4],3) == [1, 8, 27, 64]\nassert     nth_nums([1,2,3,4],4) == [1, 16, 81, 256]\nassert     nth_nums([1,2,3,4],5) == [1, 32, 243, 1024]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     nth_nums([1,2,3],1) == 1\nassert     nth_nums([1,2,3],2) == 2\nassert     nth_nums([1,2,3],3) == 3\nassert     nth_nums([1,2,3],4) == 9\nassert     nth_nums([1,2,3],5) == 27\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     nth_nums([1,2,3], 1) == [1]\nassert     nth_nums([1,2,3], 2) == [1,4]\nassert     nth_nums([1,2,3], 3) == [1,2,9]\nassert     nth_nums([1,2,3], 4) == [1,2,3,27]\nassert     nth_nums([1,2,3], 5) == [1,2,3,4,36]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     nth_nums([1,2,3],3) == [1,4,9]\nassert     nth_nums([1,2,3],5) == [1,4,9]\nassert     nth_nums([1,2,3],6) == [1,4,9]\nassert     nth_nums([1,2,3],7) == [1,4,9]\nassert     nth_nums([1,2,3],8) == [1,4,9]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     nth_nums([1,2,3,4,5],5) == [1,2,3,4,5]\nassert     nth_nums([1,2,3,4,5],4) == [1,4,9,16]\nassert     nth_nums([1,2,3,4,5],3) == [1,9,25]\nassert     nth_nums([1,2,3,4,5],2) == [1,4]\nassert     nth_nums([1,2,3,4,5],1) == [1]\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_upper(\"ALQ\")\nassert not is_upper(\"alq\")\n\ndef is_upper_all(string):\n    '''\n    Write a python function to check if a given string contains only uppercase characters.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_upper(\"Bello\") == False, \"is_upper error\"\nassert     is_upper(\"BELLO\") == True, \"is_upper error\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper('') == False\nassert     is_upper('abc') == False\nassert     is_upper('ABC') == True\n\n'''\n6. Write a Python function to find the first non-repeating character in a given string.\nNote: In the case of an empty string, return '_'.\n'''\ndef first_non_repeating_character(string):\n    '''\n    Write a Python function to find the first non-repeating character in a given string.\n    Note: In the case of an empty string, return '_'.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_upper('karthik') == False\nassert     is_upper('karthik') == True\nassert     is_upper('karthik') == True\nassert     is_upper('karthik') == True\nassert     is_upper('karthik') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper('Hello') == False\nassert     is_upper('Hello World!') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_substr_by_word(word,string):\n    '''\n    Write a python function to return substring starting from specified index.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper('Dog') == False, \"Testcase failed\"\nassert     is_upper('DOG') == False, \"Testcase failed\"\nassert     is_upper('Dog') == True, \"Testcase failed\"\nassert     is_upper('Dog12') == True, \"Testcase failed\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper('Hi') == True, 'is_upper: True expected.'\nassert     is_upper('hi') == False, 'is_upper: False expected.'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_upper('HA')\nassert is_upper('Hello')\nassert is_upper('HellO')\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1, 2, 3, 4]) == [2, 1, 4, 3], 'Wrong Answer'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List([10,20,30,40,50]) == [50,10,30,40,50]\nassert     swap_List([10,20,30,40,50]) == [50,10,40,20,30]\n\ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the order of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4,5]) == [2,3,4,5,1]\nassert     swap_List([0,0,0,0,0]) == [0,0,0,0,0]\nassert     swap_List([4,3,2,1,0]) == [4,3,2,1,0]\nassert     swap_List([0,1,2,3,4]) == [0,1,2,3,4]\nassert     swap_List([0,0,0,0,0]) == [0,0,0,0,0]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [2,3,4,1,5,6], \"Should be: 2,3,4,1,5,6\"\nassert     swap_List([1,2,3,4,5,6]) == [2,3,4,1,5,6], \"Should be: 2,3,4,1,5,6\"\nassert     swap_List([1,2,3,4,5,6]) == [1,2,3,4,5,6], \"Should be: 1,2,3,4,5,6\"\nassert     swap_List([1,2,3,4,5,6]) == [2,3,4,1,5,6], \"Should be: 2,3,4,1,5,6\"\nassert     swap_List([1,2,3,4,5,6]) == [2,3,4,1,5,6], \"Should be: 2,3,4,1,5,6\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nswap_List([1,2,3,4]) == [4,1,2,3]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [6,5,4,3,2,1] \nassert swap_List([1,2,3,4,5]) == [5,4,3,2,1]\nassert swap_List([1,2,3,4]) == [4,3,2,1]"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1,2,3]) == [3,2,1], \"Should be :[3,2,1]\"\nassert     swap_List([]) == None, \"Should be None\"\nassert swap_List([5,2,5,4,7,8,9]) == [5,4,7,5,2,8,9], \"Should be : [5,4,7,5,2,8,9]\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nswap_List([1,2,3,4,5,6,7]) == [7,1,2,3,4,5,6]\nassert swap_List([7,1,2,3,4,5,6]) == [7,1,2,3,4,5,6]\nassert swap_List([1,2,3,4,5,6,7,8]) == [8,7,1,2,3,4,5,6]\nassert swap_List([8,7,1,2,3,4,5,6]) == [8,7,1,2,3,4,5,6]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4]) == (4,1,2,3)\nassert     swap_List([1,2,3,4,5]) == (5,1,2,3,4)\nassert     swap_List([1,2,3,4,5,6]) == (6,1,2,3,4,5)\nassert swap_List([1,2,3,4,5,6,7]) == (7,1,2,3,4,5,6)\nassert swap_List([1,2,3,4,5,6,7,8]) == (8,1,2,3,4,5,6,7)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(1) == 1, \"triangle_area(1) must be 1.0\"\nassert triangle_area(2) == 1.5, \"triangle_area(2) must be 1.5\"\nassert triangle_area(3) == 1.7499999999999999, \"triangle_area(3) must be 1.7499999999999999\"\n\n\nimport math \n\ndef triangle_area(a,b,c) : \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(2) == 3.0\nassert     triangle_area(1) == 1.0\nassert     triangle_area(0) == 0.0\nassert     triangle_area(3) == 2.0\nassert     triangle_area(4) == 5.0"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triangle_area(4) == 5.28398953348834, 'WRONG!'\nassert     triangle_area(1) == 0, 'WRONG!'\nassert     triangle_area(0) == 1, 'WRONG!'\nassert     triangle_area(1.5) == 1.5, 'WRONG!'\nassert     triangle_area(2.6) == 2.6, 'WRONG!'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Your result : {}\".format(triangle_area(3)))\nassert\nprint(\"Correct\")\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(2) == 1.4142135623730951\nassert     triangle_area(4) == 1.3999999999999999\nassert     triangle_area(6) == 1.5235987755982988\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(0) == 0, \"The area should be 0\"\nassert     triangle_area(1) == 1, \"The area should be 1\"\nassert     triangle_area(4) == 3, \"The area should be 3\"\nassert     triangle_area(5) == 4, \"The area should be 4\"\nassert     triangle_area(6) == 6, \"The area should be 6\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(triangle_area(2))"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(0) == 0\nassert     triangle_area(1) == 1\nassert     triangle_area(2) == 3.7777777777777777\nassert     triangle_area(3) == 5.7777777777777777\nassert     triangle_area(4) == 7.7777777777777777\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_First_Missing([1,2,4])==3\nassert find_First_Missing([5,1,2,4])==3\nassert find_First_Missing([3,4,5,1])==2\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([1,2,3,4]) == 1\nassert     find_First_Missing([1,2,3,4,7]) == 6\nassert     find_First_Missing([1,2,3,5,7,8]) == 4\nassert     find_First_Missing([1,2,3,5,7,8,10]) == 1\nassert     find_First_Missing([1,2,3,5,7,8,10,11]) == 9\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_First_Missing([1,2,3,4,5])==2\nassert     find_First_Missing([1,2,3,4,5,6,7])==5\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10])==1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11])==1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12])==1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_First_Missing([1,2,3]) == 1\nassert     find_First_Missing([1,2,3,4,5]) == 1\nassert     find_First_Missing([1,2,3,5]) == 4\nassert     find_First_Missing([]) == 1\nassert     find_First_Missing([1,2,4,5,6]) == 3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([1,2,3]) == 2, \"The smallest missing number should be 2\"\nassert     find_First_Missing([1,2,4,5,6,7,8,9]) == 5, \"The smallest missing number should be 5\"\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == 0, \"The smallest missing number should be 0\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([1,2,3])==4, \"Should find 1\"\nassert     find_First_Missing([1,3,5])==2, \"Should find 2\"\nassert     find_First_Missing([1,2,3,4])==5, \"Should find 3\"\nassert     find_First_Missing([1,2,3,4,5,6])==7, \"Should find 5\"\nassert     find_First_Missing([1,2,3,4,5,6,7])==9, \"Should find 7\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([1,2,3,4,6]) == 3\nassert find_First_Missing([1,2,3,4,5]) == 4\nassert find_First_Missing([1,2,3,4,5,6]) == 5\nassert find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([1, 2, 3]) == 1\nassert     find_First_Missing([1, 2, 4]) == 3\nassert     find_First_Missing([1, 3, 4]) == 2\nassert     find_First_Missing([1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16]) == 5\nassert     find_First_Missing([1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == 62\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__=='__main__':\n    test_data = [\n        [ 1, 2, 3, 5, 6, 7, 9 ],\n        [ 1, 2, 3, 5, 6, 7, 9, 11 ],\n        [ 1, 2, 3, 5, 6, 7, 9, 11, 13 ],\n        [ 1, 2, 3, 5, 6, 7, 9, 11, 13, 15 ],\n        [ 1, 2, 3, 5, 6, 7, 9, 11, 13, 15, 17 ]\n    ]\n    for test_case in test_data:\n        print(find_First_Missing(test_case)"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('www.google.com') == 'www.google.com', \"1\"\nassert     replace_spaces('www.google.co.in') == 'www.google.co.in', \"2\"\nassert     replace_spaces('www.google.co.uk') == 'www.google.co.uk', \"3\"\n\ndef replace_spaces_e(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('hello   world') == 'hello%20world', 'fails'\nassert     replace_spaces('world') == 'world', 'fails'\nassert     replace_spaces('hello   ') == 'hello%20', 'fails'\nassert     replace_spaces('hello   world') == 'hello%20world', 'fails'\nassert     replace_spaces('') == '', 'fails'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Mr John Smith  \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"  Mr John Smith  \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Mr John Smith  \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"    Mr John Smith  \") == \"Mr%20John%20Smith\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('a b cd') == 'a%20b%20cd'\nassert     replace_spaces('a%20b%20cd') == 'a%20b%20cd'\nassert     replace_spaces('a b cd') == 'a%20b%20cd'\nassert     replace_spaces('a % b cd') == 'a%20%20b%20cd'\nassert     replace_spaces('a%20b%20cd') == 'a%20b%20cd'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('this is a test') == 'this%20is%20a%20test'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces('T') == 'T%20'\nassert     replace_spaces('T%20') == 'T%20'\nassert     replace_spaces('%20') == '%20'\nassert     replace_spaces('%20%20') == '%20%20'\nassert     replace_spaces('') == ''\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces('lotw %20lotw') == 'lotw%20lotw','replace_spaces'\nassert     replace_spaces('lotw %20lotw  ') == 'lotw%20lotw','replace_spaces'\nassert     replace_spaces('lotw %20lotw  lotw') == 'lotw%20lotwlotw','replace_spaces'\nassert     replace_spaces('lotw %20lotw  lotw lotw') == 'lotw%20lotwlotw%20lotw','replace_spaces'\nassert     replace_spaces('lotw %20lotw  lotw lotw') == 'lotw%20lotwlotw%20lotw','replace_spaces'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nSplit([1,2,3,4,5,6]) == [2,4,6], \"Wrong\"\nprint (\"Pass\" if (Split([1,2,3,4,5,6]) == [2,4,6]) else \"Fail\")\nprint (\"Pass\" if (Split([4,5,6,7]) == [4,6,7]) else \"Fail\")\nprint (\"Pass\" if (Split([]) == []) else \"Fail\")\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8,10] \n\nassert \nassert Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10] \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert Split([1, 2, 3, 4, 5]) == [2, 4]\nassert Split([0, 1, 2, 3, 4]) == [0, 2, 4]\nassert Split([4, 3, 5, 8, 9]) == [4, 8]\nassert Split([]) == []\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nSplit([1,3,5,7,9,11]) == [2, 4, 6, 8, 10, 12]\nassert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1,2,3,4,5]) == [2,4]\nassert     Split([]) == []\nassert     Split([1,2]) == [2]\nassert     Split([1,2,3,4]) == [2,4]\nassert     Split([1,2,3,4,5]) == [2,4]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == [2,4,6]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nSplit(list) == [2,4,6,8]\n\n\ndef isPalindrome(string):\n    '''\n    Write a python function to check whether a string is palindrome or not. \n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5])==[2,4,6], \"Wrong\"\nassert     Split([1,2,3,4,6])==[2,4], \"Wrong\"\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    for i in range(1, 5):\n        print('\\n')\n        for j in range(1, 5):\n            print(adjac((i, j), []))"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     adjac((1,2)) == [(2,2), (2,1), (1,1), (1,2)]\nassert adjac((0,0)) == []\nassert adjac((0,1)) == [(1,1)]\nassert adjac((1,1)) == [(1,0), (1,2)]\nassert adjac((1,2)) == [(1,1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     adjac((1,1), []) == [(1,2), (2,1)], 'First'\nassert     adjac((1,1), [(1,2), (2,1)]) == [(2,1)], 'Second'\nassert     adjac((1,1), [(2,1), (3,1), (4,1)]) == [(2,1), (3,1), (4,1)], 'Third'\nassert     adjac((1,1), [(2,1), (2,2), (2,3), (3,1), (4,1)]) == [(2,1), (2,2), (2,3)], 'Fourth'\nassert     adjac((1,1), [(2,1), (2,2), (2,3), (3,1), (4,1), (5,1)]) == [(2,1), (2,2), (2,3), (3,1), (4,1), (5,1)], 'Fifth'\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     adjac((0,0)) == [], \"Test 1: FAILED\"\nassert     adjac((0,1)) == [(0,0), (0,1)], \"Test 2: FAILED\"\nassert     adjac((0,2)) == [(0,0), (0,1), (0,2)], \"Test 3: FAILED\"\nassert     adjac((1,0)) == [(1,0), (1,1)], \"Test 4: FAILED\"\nassert     adjac((2,0)) == [(2,0), (2,1), (2,2)], \"Test 5: FAILED\"\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not adjac(1, 1) == adjac(0, 0)\nassert not adjac(1, 1) == adjac(1, 0)\nassert not adjac(0, 0) == adjac(0, 1)\nassert adjac(1, 1) == adjac(0, 1)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     adjac((5,2), [(6,5), (6,3)]) == [(5,3), (5,4)]\nassert     adjac((5,2), [(4,5), (5,3)]) == []\n\n'''\n    Q2. Write a function to find the number of vertices in a simple graph (i.e., if there are V vertices and E edges)\n    In other words, write a function to count the vertices and the edges.\n'''\n\ndef ver_count(graph):\n    '''\n    Write a function to count the vertices and the edges in a simple graph.\n    '''\n    pass"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"hello world\") == \"hello_world\"\nassert     replace_spaces(\"hello world\") == \"hello___world\"\nassert     replace_spaces(\"hello world\") == \"hello____world\"\nassert     replace_spaces(\"hello world\") == \"hello____world\"\nassert     replace_spaces(\"hello world\") == \"hello____world\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"hi    how    are    you\") == \"hi_how_are_you\"\nassert     replace_spaces(\"this is a test of the replace_spaces function\") == \"this_is_a_test_of_the_replace_spaces_function\"\nassert     replace_spaces(\"   hello world   \") == \"hello_world\"\nassert     replace_spaces(\"\") == \"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('Hello World') == 'hello_world', 'Replace spaces'\nassert     replace_spaces('Hello World 123') == 'hello_world_123', 'Replace spaces'\nassert     replace_spaces('Hello World_') == 'hello_world_', 'Replace spaces'\n\ndef replace_spaces_2(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('12 a') == '1_a','replace spaces error'\nassert     replace_spaces('12 a ') == '1_a','replace spaces error'\nassert     replace_spaces('123') == '1_3','replace spaces error'\nassert     replace_spaces('12') == '1_2','replace spaces error'\nassert     replace_spaces('a') == '_a','replace spaces error'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(\"I am a python developer.\") == \"I_am_a_python_developer.\"\nassert     replace_spaces(\"This is a sample text.\") == \"This_is_a_sample_text.\"\nassert     replace_spaces(\"Merry Christmas.\") == \"Merry_Christmas.\"\nassert     replace_spaces(\"   \") == \"___\"\nassert     replace_spaces(\"    \") == \"___\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('This is a string with spaces') == 'this_is_a_string_with_underscores'\nassert     replace_spaces('') == ''\nassert     replace_spaces('1') == '1'\nassert     replace_spaces('apple') == 'apple'\nassert     replace_spaces('1apple') == '1apple'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"Hello World\") == \"hello_world\"\nassert     replace_spaces(\"Hello World      \") == \"hello_world\"\nassert     replace_spaces(\"Hello World           \") == \"hello_world\"\nassert     replace_spaces(\"Hello World           \") == \"hello_world\"\nassert     replace_spaces(\"Hello World           \") == \"hello_world\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('Hello world!') == 'h_e_l_o_w_r_l_d_!'\nassert     replace_spaces('Hello world!') == 'h_e_l_o_w_r_l_d_!'\nassert     replace_spaces('Hello world!') == 'h_e_l_o_w_r_l_d_!'\nassert     replace_spaces('Hello world!') == 'h_e_l_o_w_r_l_d_!'\nassert     replace_spaces('Hello world!') == 'h_e_l_o_w_r_l_d_!'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_repeats(text):\n    '''\n    Write a function to replace multiple occurrences of the same substring with a single occurrence.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"I am very happy today.\") == \"I___am_very_happy_today.\"\nassert     replace_spaces(\"Hi_There\") == \"Hi_There\"\nassert     replace_spaces(\"I'm_a_student\") == \"I__am_a_student\"\nassert     replace_spaces(\"She is a college student\") == \"She___is_a_college_student\"\n\n'''\nA cryptosystem can be described as a sequence of transformations applied to a message.\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_zero([0, 1, 2, 0, 2, 1, 0]) == [0, 1, 2, 1, 2, 0, 0]\nassert     move_zero([0, 1, 0, 2, 1, 0, 1, 2, 0, 1]) == [0, 1, 1, 2, 1, 1, 0, 0, 1, 1]\nassert     move_zero([0, 0, 1, 1, 1, 2]) == [0, 0, 1, 1, 1, 1]"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_zero(['a', 0, 0, 1, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0]) == \\\n        ['a', 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero(['a', 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \\\n        ['a', 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero(['a', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \\\n        ['a', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero(['a', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \\\n        ['a', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero(['a', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \\\n        ['a', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     [1, 0, 0, 0, 0, 0] == move_zero([1, 2, 0, 3, 4, 5, 0, 0, 6, 0, 7, 0, 8, 0, 9])\nassert     [1, 2, 0, 3, 4, 5, 0, 0, 6, 0, 7, 0, 8, 0, 9] == move_zero([1, 2, 0, 3, 4, 5, 0, 0, 6, 0, 7, 0, 8, 0, 9])\nassert     [0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 0, 0, 6, 7, 8, 9] == move_zero([0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == move_zero([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == move_zero([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_zero([0, 2, 3, 1, 2, 1, 4, 4, 4, 0]) == [4, 1, 2, 3, 1, 2, 4, 4, 0, 0]\nassert     move_zero([9, 0, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 0]\nassert     move_zero([0]) == [0]\nassert     move_zero([]) == []\nprint(\"move_zero Test passed\\n\")\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nnum_list = [5, 3, 2, 6, 0, 0, 0, 7, 8, 0]\nmove_zero(num_list)\nassert num_list == [5, 3, 2, 6, 0, 0, 7, 8, 0, 0]\n\n\n\n'''\n15. Write a function that takes a list of numbers and returns the index of the largest element in the list.\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([0,0,0,1]) == [1,0,0,0]\nassert move_zero([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_zero([0,1,0,3,12]) == [1,3,12,0,0], 'Wrong answer, try again'\nassert     move_zero([0,1,0,3,12,0,1]) == [1,3,12,0,0,1], 'Wrong answer, try again'\nassert     move_zero([1,2,0]) == [1,2,0], 'Wrong answer, try again'\nassert     move_zero([1,2,0,0,2]) == [1,2,0,0,2], 'Wrong answer, try again'\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert move_zero([1,2,0,3,0,5]) == [1,2,3,5,0,0]\nassert move_zero([0,0,0,0,0,0]) == [0,0,0,0,0,0]\nassert move_zero([0]) == [0]\nassert move_zero([]) == []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_zero([1,2,3,4,0,0,0,0]) == [1,2,3,4,0,0,0,0]\nassert     move_zero([0,0,0,1,0,0,0,1]) == [0,0,0,1,0,0,0,1]\nassert     move_zero([0,0,0,0,0,0,1,1]) == [0,0,0,0,0,0,1,1]\nassert     move_zero([0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_xor_Sum([1,3,2],3) == 4, \"sample 1\"\nassert pair_xor_Sum([1,3,2,4],4) == 5, \"sample 2\"\nassert pair_xor_Sum([1,3,2],5) == 5, \"sample 3\"\nassert pair_xor_Sum([1,3,2],6) == 7, \"sample 4\"\nassert pair_xor_Sum([1,3,2,4],6) == 5, \"sample 5\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([1,1,2,3,4],4) == 10, 'False'\nassert pair_xor_Sum([1,1,2,3,4],5) == 17, 'False'\nassert pair_xor_Sum([1,1,2,3,4],0) == 0, 'False'\nassert pair_xor_Sum([1,1,2,3,4],1) == 1, 'False'\nassert pair_xor_Sum([1,1,2,3,4],2) == 2, 'False'\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \npair_xor_Sum([1, 2, 3, 4],4) == 10\nassert pair_xor_Sum([1, 2, 3, 4],2) == 8\nassert pair_xor_Sum([1, 2, 3, 4],5) == 13\nassert pair_xor_Sum([1, 2, 3, 4],6) == 16\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 5     #result 5\nassert     pair_xor_Sum([1,2,3,4],5) == 4     #result 4\nassert     pair_xor_Sum([2,5,7,9,11],10) == 16     #result 16\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    pair_xor_Sum([1,2,3,4]) == 5\n    pair_xor_Sum([0,1,2,3,4]) == 10\n    pair_xor_Sum([0,0,0,0,0]) == 0\n    pair_xor_Sum([1,2,3,4,5]) == 10\n    pair_xor_Sum([2,3,4,5,6]) == 0"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9],9) == 0, \"Wrong answer\"\nassert pair_xor_Sum([2,3,4,5,6,7,8,9,10],10) == 6, \"Wrong answer\"\nassert pair_xor_Sum([2,3,4,5,6,7,8,9,10,11],11) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int,input().split()))\n    arr = list(map(str,arr))\n    print (pair_xor_Sum(arr,n))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    pair_xor_Sum([1,2,3,4,5,6],6) == 14 \n    pair_xor_Sum([1,2,3,4,5,6],5) == 9\n\ndef  solve(a,b) : \n    '''\n    Write a python function to find whether the given two numbers are coprime or not.\n    '''\n    pass\n    "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nThe heap_sort() function should return a sorted list.\nIn the case, the provided list is already sorted, the function should return its original list.\n'''\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # build the heap\n    heap = []\n    for val in iterable:\n        hq.heappush(heap, val)\n    \n    # copy the heap to a new list\n    sort_list = []\n    while heap:\n        sort_list.append(hq.heappop(heap))\n    \n    return sort_list\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # build the heap\n    heap = []\n    for val in iterable:\n        hq.heappush(heap, val)\n    \n    # copy the heap to a new list\n    sort_list = []\n    while heap:\n        sort_list.append(hq.heappop(heap))\n    \n    return sort_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_sort([]) == []\nassert     heap_sort([1, 5, 3, 6, 4, 2]) == [1, 2, 3, 4, 5, 6]\nassert     heap_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     heap_sort([-3, -2, -1, 1, 2, 3]) == [-3, -2, -1, 1, 2, 3]\nassert     heap_sort(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_sort([7,3,2,4,5,6,7]) == sorted([7,3,2,4,5,6,7])\nassert     heap_sort([1,2,3,4,5]) == sorted([1,2,3,4,5])\nassert     heap_sort([-9,-8,-7,-6,-5,0,1]) == sorted([-9,-8,-7,-6,-5,0,1])\nassert     heap_sort([]) == []\nassert     heap_sort([-123,45,6,7,8,1,-9]) == sorted([-123,1,-9,6,45,7,8])\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nheap_sort([3, 6, 8, 1, 3, 5]) == [1, 3, 3, 5, 6, 8]\nassert \nheap_sort([2, -5, 3, -6, 7, 4, 0, -1]) == [-1, -5, 0, 4, 7, 3, -6, 2]\nassert \nheap_sort([-2, -4, -5, -3, -6, -1, -7, -8, -2, -4, -5]) == [-8, -7, -6, -5, -4, -3, -2, -2, -4, -5, -6]\nassert \nheap_sort([-2, -4, -5, -3, -6, -1, -7, -8, -2, -4, -5, -3, -6, -1, -7, -8, -2, -4, -5]) == [-8, -7, -6, -5, -4, -3, -2, -2, -4, -5, -6, -7, -3, -1, -2, -4, -5, -3, -6]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_sort([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     heap_sort(['a', 'c', 'b', 'e', 'd', 'f']) ==\n    ['a', 'b', 'c', 'd', 'e', 'f']\nassert     heap_sort([5, 4, 3, 2, 1]) ==\n    [1, 2, 3, 4, 5]\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14]) ==\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     heap_sort(['Hello', 'world']) == ['world', 'Hello']\nassert     heap_sort([3, 5, 8, 1, -1, 3]) == [-1, 1, 3, 3, 5, 8]\nassert     heap_sort([-3, -5, -8, -1, -1, 3]) == [-1, -1, -1, -3, -5, -8]\nassert     heap_sort([-3, -5, -8, 1, -1, 3]) == [-1, -1, 1, -3, -5, -8]\nassert     heap_sort([]) == []\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(100,120) == False\nassert     noprofit_noloss(100,10) == False\nassert     noprofit_noloss(100,1) == False\nassert     noprofit_noloss(100,0) == True"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef profit_loss_noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and no loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     noprofit_noloss(actual_cost=23.45,sale_amount=20.0) == False\nassert     noprofit_noloss(actual_cost=25.0,sale_amount=10.0) == True\nassert     noprofit_noloss(actual_cost=29.0,sale_amount=7.0) == True\nassert     noprofit_noloss(actual_cost=50.0,sale_amount=10.0) == True\nassert     noprofit_noloss(actual_cost=60.0,sale_amount=10.0) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # the function should return True\n    noprofit_noloss(100,90) == True\n    # the function should return False\n    noprofit_noloss(100,80) == False\n    # the function should return False\n    noprofit_noloss(100,70) == False\n    # the function should return False\n    noprofit_noloss(100,60) == False\n    # the function should return False\n    noprofit_noloss(100,50) == False\n    # the function should return False\n    noprofit_noloss(100,40) == False\n    # the function should return False\n    noprofit_noloss(100,30) == False\n    # the function should return True\n    noprofit_noloss(100,0) == True\n    # the function should return False\n    noprofit_noloss(100,-10) == False\n    # the function should return False\n    noprofit_noloss(100,-100) == False\n    # the function should return True\n    noprofit_noloss(100,-200) == True\n    # the function should return True\n    noprofit_noloss(100,-200) == True\n    # the function should return True\n    noprofit_noloss(100,-400) == True\n    # the function should return True\n    noprofit_noloss(100,-400) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return True\n    noprofit_noloss(100,-800) == True\n    # the function should return Tru"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nnoprofit_noloss(actual_cost,sale_amount)"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nactual_cost = [12,30,40,50]\nsale_amount = [10,20,10,10]\n\ndef noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost = 0\n    for i in range(len(actual_cost)):\n        total_cost = total_cost + actual_cost[i] * sale_amount[i]\n    if total_cost == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     noprofit_noloss(123.34, 123.32) == True, 'Incorrect Answer'\nassert     noprofit_noloss(123.34, 123.33) == False, 'Incorrect Answer'\nassert     noprofit_noloss(123.34, 123.38) == False, 'Incorrect Answer'\nassert     noprofit_noloss(123.34, 123.36) == True, 'Incorrect Answer'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(wind_chill(3, 30)) #, 27.8)\nprint(wind_chill(8, 30)) #, 30.9)\nprint(wind_chill(7, 30)) #, 31.0)\nprint(wind_chill(5, 30)) #, 33.5)\nprint(wind_chill(2, 30)) #, 34.2)\nprint(wind_chill(3, 20)) #, 18.8)\nprint(wind_chill(8, 20)) #, 17.1)\nprint(wind_chill(7, 20)) #, 17.2)\nprint(wind_chill(5, 20)) #, 16.8)\nprint(wind_chill(2, 20)) #, 15.2)\nprint(wind_chill(3, 10)) #, 15.5)\nprint(wind_chill(8, 10)) #, 16.1)\nprint(wind_chill(7, 10)) #, 16.5)\nprint(wind_chill(5, 10)) #, 16.6)\nprint(wind_chill(2, 10)) #, 15.4)\nprint(wind_chill(3, 5)) #, 15.2)\nprint(wind_chill(8, 5)) #, 14.8)\nprint(wind_chill(7, 5)) #, 14.9)\nprint(wind_chill(5, 5)) #, 14.9)\nprint(wind_chill(2, 5)) #, 13.7)\nprint(wind_chill(3, 2)) #, 13.8)\nprint(wind_chill(8, 2)) #, 13.6)\nprint(wind_chill(7, 2)) #, 13.7)\nprint(wind_chill(5, 2)) #, 13.6)\nprint(wind_chill(2, 2)) #, 13.7)\nprint(wind_chill(3, 0)) #, 13.7)\nprint(wind_chill(8, 0)) #, 13.7)\nprint(wind_chill(7, 0)) #, 13.7)\nprint(wind_chill(5, 0)) #, 13.7)\nprint(wind_chill(2, 0)) #, 13.7)\nprint(wind_chill(3, 10)) #, 32.5)\nprint(wind_chill(8, 10)) #, 31.3)\nprint(wind_chill(7, 10)) #, 30.8)\nprint(wind_chill(5, 10)) #, 29.7)\nprint(wind_chill(2, 10)) #, 28.1)\nprint(wind_chill(3, 5)) #, 24.6)\nprint(wind_chill(8, 5)) #, 23.2)\nprint(wind_chill(7, 5)) #, 21.9)\nprint(wind_chill(5, 5)) #, 21.9)\nprint(wind_chill(2, 5)) #, 20.7)\nprint(wind_chill(3, 2)) #, 15.6)\nprint(wind_chill(8, 2)) #, 14.5)\nprint(wind_chill(7, 2)) #, 13.9)\nprint(wind_chill(5, 2)) #, 13.9)\nprint(wind_chill(2, 2)) #, 13.9)\nprint(wind_chill(3, 0)) #, 13.7)\nprint(wind_chill(8, 0)) #, 13.7)\nprint(wind_chill(7, 0)) #, 13.7)\nprint(wind_chill(5, 0)) #, 13.7)\nprint(wind_chill(2, 0)) #, 13.7)\nprint(wind_chill(3, 10)) #, 50.3)\nprint(wind_chill(8, 10)) #, 48.2)\nprint(wind_chill(7, 10)) #, 46.5)\nprint(wind_chill(5, 10)) #, 45.8)\nprint(wind_chill(2, 10)) #, 44.1)\nprint(wind_chill(3, 5)) #, 33.6)\nprint(wind_chill(8, 5)) #, 31.8)\nprint(wind_chill(7, 5)) #, 30.6)\nprint(wind_chill(5, 5)) #, 30.6)\nprint(wind_chill(2, 5)) #, 29.1)\nprint(wind_chill(3, 2)) #, 18.8)\nprint(wind_chill(8, 2)) #, 16.7)\nprint(wind_chill(7, 2)) #, 15.3)\nprint(wind_chill(5, 2)) #, 14.5)\nprint(wind_chill(2, 2)) #, 13.7)\nprint(wind_chill(3, 0)) #, 12.5)\nprint(wind_chill(8, 0)) #, 11.8)\nprint(wind_chill(7, 0)) #, 10.8)\nprint(wind_chill(5, 0)) #, 10.8)\nprint(wind_chill(2, 0)) #, 10.8)\nprint(wind_chill(3, 10)) #, 63.9)\nprint(wind_chill(8, 10)) #, 57.2)\nprint(wind_chill(7, 10)) #, 55.9)\nprint(wind_chill(5, 10)) #, 54.6)\nprint(wind_chill(2, 10)) #, 53.3)\nprint(wind_chill(3, 5)) #, 42.5)\nprint(wind_chill(8, 5)) #, 41.2)\nprint(wind_chill(7, 5)) #, 39.9)\nprint(wind_chill(5, 5)) #, 39.9)\nprint(wind_chill(2, 5)) #, 38.6)\nprint(wind_chill(3, 2)) #, 26.4)\nprint(wind_chill(8, 2)) #, 23.8)\nprint(wind_chill(7, 2)) #, 21.5)\nprint(wind_chill(5, 2)) #, 20.5)\nprint(wind_chill(2, 2)) #, 19.5)\nprint(wind_chill(3, 0)) #, 18.4)\nprint(wind_chill(8, 0)) #, 15.8)\nprint(wind_chill(7, 0)) #, 14.1)\nprint(wind_chill(5, 0)) #, 13.6)\nprint(wind_chill(2, 0)) #, 13.6)\nprint(wind_chill(3, 10)) #, 37.6)\nprint(wind_chill(8, 10)) #, 34.1)\nprint(wind_chill(7, 10)) #, 32.4)\nprint(wind_chill(5, 10)) #, 30.7)\nprint(wind_chill(2, 10)) #, 29.9)\nprint(wind_chill(3, 5)) #, 26.2)\nprint(wind_chill(8, 5)) #, 25.3)\nprint(wind_chill(7, 5)) #, 24.7)\nprint(wind_chill(5, 5)) #, 23.2)\nprint(wind_chill(2, 5)) #, 22.7)\nprint(wind_chill(3, 2)) #, 16.9)\nprint(wind_chill(8, 2)) #, 15.4)\nprint(wind_chill(7, 2)) #, 14.5)\nprint(wind_chill(5, 2)) #, 13.3)\nprint(wind_chill(2, 2)) #, 12.5)\nprint(wind_chill(3, 0)) #, 11.8)\nprint(wind_chill(8, 0)) #, 10.8)\nprint(wind_chill(7, 0)) #, 10.8)\nprint(wind_chill(5, 0)) #, 10.8)\nprint(wind_chill(2, 0)) #, 10."
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     wind_chill(35.2, 40) == 22.4\nassert wind_chill(35.4, 40) == 22.4\nassert wind_chill(35.3, 40) == 22.5\nassert wind_chill(35.2, 32) == -9.6\nassert wind_chill(35.2, -32) == -16.4\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(11, -3) == 11.0\nassert     wind_chill(5, 25) == 3.34\nassert     wind_chill(15, -10) == 10.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef wind_chill_compare(a,b,c):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     wind_chill(2, 20) == 25\nassert     wind_chill(3, 20) == 24\nassert     wind_chill(4, 20) == 24\nassert     wind_chill(2, 20.9) == 22.0\nassert     wind_chill(1.9, 20.9) == 21.2\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     wind_chill(0,0) == 37.8\nassert     wind_chill(1,0) == 37.8\nassert     wind_chill(1,50) == 0\nassert     wind_chill(2,50) == 37.7\nassert     wind_chill(3,50) == 37.9\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(0, 0) == \"Wind chill is not defined for 0 mph.\"\nassert wind_chill(50, 20) == \"Wind chill is -18.62.\"\nassert wind_chill(100, 30) == \"Wind chill is -18.61.\"\n\ndef windchill_k(wind_speed, temperature):\n    '''\n    Write a function to calculate the wind chill index given the wind speed and a temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert wind_chill(5,30) == 5.1\nassert wind_chill(3,30) == 4.6\nassert wind_chill(4,30) == 5\nassert wind_chill(6,30) == 5.1\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam(['jenny', 'jesse', 'jeffrey']) == 8\nassert     sample_nam(['daniel', 'david', 'tim', 'diane', 'jesse']) == 10\nassert     sample_nam(['willie','marry', 'will', 'jill','marry','molly','molly']) == 8\nassert     sample_nam(['molly','molly','molly','molly','molly']) == 4\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam([]) == 0,    \"Fail: Your sample_nam function returns an empty list\"\nassert     sample_nam([]) == 0,    \"Fail: Your sample_nam function returns an empty list\"\nassert     sample_nam([]) == 0,    \"Fail: Your sample_nam function returns an empty list\"\nassert     sample_nam([]) == 0,    \"Fail: Your sample_nam function returns an empty list\"\nassert     sample_nam(['John']) == 0,    \"Fail: Your sample_nam function returns 0 when the list is just one name.\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sample_nam([\"Joey Tribbiani\", \"Monica Geller\", \"Chandler Bing\", \"Phoebe Buffay\"]) == \"Monica Geller, Joey Tribbiani, Chandler Bing, Phoebe Buffay\"\nassert     sample_nam([\"Chandler Bing\", \"Joey Tribbiani\", \"Monica Geller\", \"Phoebe Buffay\"]) == \"Chandler Bing, Joey Tribbiani, Monica Geller, Phoebe Buffay\"\nassert     sample_nam([\"Joey Tribbiani\", \"Phoebe Buffay\", \"Chandler Bing\", \"Monica Geller\"]) == \"Phoebe Buffay, Joey Tribbiani, Chandler Bing, Monica Geller\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsample_nam([]) == 0\nsample_nam(['toluene', 'ammonia', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene']) == 5\nsample_nam(['toluene', 'ammonia', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene']) == 5\nsample_nam(['toluene', 'ammonia', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxtoluene', 'praznoxto"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sample_nam(['Sree','ram','Raman','Ray','Karan','Krish']) == 15\nassert     sample_nam(['Sree','Ram','Raman','Ray','Karan','Krish']) == 15\nassert     sample_nam(['ram','Sree','Ray','Karan','Krish']) == 5\nassert     sample_nam(['Sree','Ram','Raman','Ray','Karan','Krish','ram']) == 5\nassert     sample_nam(['Sree','Ram','Raman','Ray','Karan','Krish','ram','Sree']) == 5\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sample_nam(['a', 'b', 'c', 'd']) == 1,'sample_nam([\"a\", \"b\", \"c\", \"d\"]) = 1'\nassert     sample_nam(['A', 'B', 'C', 'D']) == 1,'sample_nam([\"A\", \"B\", \"C\", \"D\"]) = 1'\nassert     sample_nam(['a', 'b', 'c', 'd', 'd']) == 2,'sample_nam([\"a\", \"b\", \"c\", \"d\", \"d\"]) = 2'\nassert     sample_nam(['a', 'b', 'c', 'd', 'e', 'e']) == 2,'sample_nam([\"a\", \"b\", \"c\", \"d\", \"e\", \"e\"]) = 2'\nassert     sample_nam(['a', 'b', 'c', 'd', 'e', 'f']) == 2,'sample_nam([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) = 2'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam(['Aaliyah', 'Corinne', 'Samantha', 'Aaliyah']) == 2, 'incorrect output'\nassert     sample_nam(['Aaliyah', 'Corinne', 'Samantha', 'Aaliyah', 'Abagail']) == 4, 'incorrect output'\nassert     sample_nam(['Abagail', 'Samantha', 'Abagail', 'Samantha']) == 2, 'incorrect output'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam(['abhishek', 'vijay', 'dev','marry']) == 9, \"You have entered an incorrect value\"\nassert     sample_nam(['abc', 'abc', 'abd', 'abd']) == 5, \"You have entered an incorrect value\"\nassert     sample_nam(['abc', 'abcd', 'abcd']) == 4, \"You have entered an incorrect value\"\nprint(\"All the tests passed\")\n\n'''\nWrite a function that takes in a list of integers and returns the product of all the integers except the largest integer.\n'''\n\ndef product_except_largest_num(lst):\n    '''\n    Write a function that takes in a list of integers and returns the product of all the integers except the largest integer.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis(\"(()())()\") == \"()()()\"\nassert     remove_parenthesis(\"((()()))())()\") == \"()()()\"\nassert     remove_parenthesis(\"(())((()))())()\") == \"()()()\"\nassert     remove_parenthesis(\"((()))()\") == \"()()()\"\nassert     remove_parenthesis(\"(()()()())\") == \"()()()\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis('(((())))') == '()'\nassert     remove_parenthesis('(((())' ) == '()'\nassert     remove_parenthesis('((()()))') == '()()'\nassert     remove_parenthesis('((()))') == '()'\nassert     remove_parenthesis('(((())))') == '()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis(\"(())(()())\") == \"()()()\"\nassert     remove_parenthesis(\"(())(()(()))\") == \"()()(())()\"\nassert     remove_parenthesis(\"(())(())()\") == \"()()()\"\nassert     remove_parenthesis(\"(())(())(()()())\") == \"()()()()()()\"\nassert     remove_parenthesis(\"(())(())(()())(()(()))\") == \"()()()()()()()\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis(\"(1, 2, 3)\") == \"1, 2, 3\"\nassert     remove_parenthesis(\"(1, 2, (3, 4, 5))\") == \"1, 2, 3, 4, 5\"\nassert     remove_parenthesis(\"(1, 2, (3, 4, 5))\") == \"1, 2, 3, 4, 5\"\nassert     remove_parenthesis(\"(1, 2)\") == \"1, 2\"\nassert     remove_parenthesis(\"(1, 2, 3)\") == \"1, 2, 3\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis('(())')    == '()'\nassert     remove_parenthesis('(()(()))')    == '()()'\nassert     remove_parenthesis('(((()())())(()))')    == '()()()()'\nassert     remove_parenthesis('((()))')    == '()'\nassert     remove_parenthesis('((()(()))')    == '()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_parenthesis(\"((hi(la))(hi)))\") == \"hi(hi(hi)))\", \"test 1 is failed\"\nassert     remove_parenthesis(\"((hi(la))(hi))\") == \"hi(hi(hi))\", \"test 2 is failed\"\nassert     remove_parenthesis(\"((hi(la))hi))\") == \"hi(hi(hi))\", \"test 3 is failed\"\nassert     remove_parenthesis(\"((hi(la)hi))hi)\") == \"hi(hi(hi))hi)\", \"test 4 is failed\"\n\ndef is_palindrome(word):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis('5 - 6 * 7 - (8 + 9 - (10 - (11 * (12 + 13 * 14) - 15) + 16))') == '5 - 6 * 7 - (8 + 9 - (10 - (11 * 12) + (13 * 14) - 15) + 16)'\nassert     remove_parenthesis('5 - 6 * 7 - (8 + 9 - (10 - (11 * (12 + 13 * 14) - 15) + 16))') == '5 - 6 * 7 - (8 + 9 - (10 - (11 * 12) + (13 * 14) - 15) + 16)'\nassert     remove_parenthesis('5 + 6 + 7 - (8 + 9 - (10 - (11 * (12 + 13 * 14) - 15) + 16))') == '5 + 6 + 7 - (8 + 9 - (10 - (11 * 12) + (13 * 14) - 15) + 16)'\nassert     remove_parenthesis('(5 + 6 + 7 - 8) - (9 - 10) - (11 + (12 + 13) * (14 - 15))') == '(5 + 6 + 7 - 8) - (9 - 10) - (11 + (12 + 13) * (14 - 15))'\nassert     remove_parenthesis('(5 + 6 + 7) - (8 - 9) - (10 + (11 + (12 + 13) * (14 - 15)))') == '(5 + 6 + 7) - (8 - 9) - (10 + (11 + (12 + 13) * (14 - 15)))'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_parenthesis('hello')    == 'hello'\nassert     remove_parenthesis('hello(hi)there')    == 'hello(hi)there'\nassert     remove_parenthesis('()')    == ''\nassert     remove_parenthesis('()())')    == ''\nassert     remove_parenthesis(')()(hi)there')    == 'hithere'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(\"(fun)\") == \"fun\", \"Wrong output\"\nassert     remove_parenthesis(\"(fun)\") == \"fun\", \"Wrong output\"\nassert     remove_parenthesis(\"()()()\") == \"\", \"Wrong output\"\nassert     remove_parenthesis(\"(fun) (fun)\") == \"fun\", \"Wrong output\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_parenthesis(\"hello(hi)\") == \"hello\"\nassert     remove_parenthesis(\"hello(hi)hi)\") == \"hello\"\nassert     remove_parenthesis(\"(hi)\") == \"hi\"\nassert     remove_parenthesis(\"hello(hi)hi\") == \"hello(hi)hi\"\nassert     remove_parenthesis(\"hello(hi)hi)hi)\") == \"hello(hi)hi)hi)\"\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nonagonal(5) == 13\nassert     is_nonagonal(6) == 18\nassert     is_nonagonal(7) == 25\nassert     is_nonagonal(8) == 28\n\ndef non_diagonal_numbers(n):\n    '''\n    Write a function to find the nth non-diagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_nonagonal(1) == 1 \nassert     is_nonagonal(2) == 4 \nassert     is_nonagonal(3) == 7 \nassert     is_nonagonal(4) == 10\nassert     is_nonagonal(5) == 13 \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_nonagonal(1) == 2\nassert is_nonagonal(2) == 3\nassert is_nonagonal(3) == 5\nassert is_nonagonal(4) == 8\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 9\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    is_nonagonal(3) == 13\n    is_nonagonal(1) == 1\n    is_nonagonal(10) == 21\n    is_nonagonal(25) == 36\n    is_nonagonal(10000) == 11055\n    is_nonagonal(100) == 101"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_pentagonal(n): \n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_nonagonal(0) == 0, 'Testing is_nonagonal(0)'\nassert     is_nonagonal(1) == 1, 'Testing is_nonagonal(1)'\nassert     is_nonagonal(2) == 3, 'Testing is_nonagonal(2)'\nassert     is_nonagonal(3) == 6, 'Testing is_nonagonal(3)'\nassert     is_nonagonal(4) == 10, 'Testing is_nonagonal(4)'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_nonagonal(1) == 1, \"1st test case is wrong\"\n    is_nonagonal(2) == 4, \"2nd test case is wrong\"\n    is_nonagonal(3) == 6, \"3rd test case is wrong\"\n    is_nonagonal(4) == 10, \"4th test case is wrong\"\n    is_nonagonal(5) == 15, \"5th test case is wrong\"\n    is_nonagonal(6) == 21, \"6th test case is wrong\"\n    is_nonagonal(7) == 28, \"7th test case is wrong\"\n    is_nonagonal(8) == 36, \"8th test case is wrong\"\n    is_nonagonal(9) == 45, \"9th test case is wrong\"\n    is_nonagonal(10) == 55, \"10th test case is wrong\"\n    is_nonagonal(11) == 61, \"11th test case is wrong\"\n    is_nonagonal(12) == 68, \"12th test case is wrong\"\n    is_nonagonal(13) == 75, \"13th test case is wrong\"\n    is_nonagonal(14) == 85, \"14th test case is wrong\"\n    is_nonagonal(15) == 95, \"15th test case is wrong\"\n    is_nonagonal(16) == 105, \"16th test case is wrong\"\n    is_nonagonal(17) == 116, \"17th test case is wrong\"\n    is_nonagonal(18) == 127, \"18th test case is wrong\"\n    is_nonagonal(19) == 138, \"19th test case is wrong\"\n    is_nonagonal(20) == 148, \"20th test case is wrong\"\n    is_nonagonal(21) == 159, \"21th test case is wrong\"\n    is_nonagonal(22) == 180, \"22th test case is wrong\"\n    is_nonagonal(23) == 181, \"23th test case is wrong\"\n    is_nonagonal(24) == 197, \"24th test case is wrong\"\n    is_nonagonal(25) == 198, \"25th test case is wrong\"\n    is_nonagonal(26) == 209, \"26th test case is wrong\"\n    is_nonagonal(27) == 210, \"27th test case is wrong\"\n    is_nonagonal(28) == 212, \"28th test case is wrong\"\n    is_nonagonal(29) == 213, \"29th test case is wrong\"\n    is_nonagonal(30) == 214, \"30th test case is wrong\"\n    is_nonagonal(31) == 215, \"31th test case is wrong\"\n    is_nonagonal(32) == 216, \"32th test case is wrong\"\n    is_nonagonal(33) == 217, \"33th test case is wrong\"\n    is_nonagonal(34) == 218, \"34th test case is wrong\"\n    is_nonagonal(35) == 219, \"35th test case is wrong\"\n    is_nonagonal(36) == 220, \"36th test case is wrong\"\n    is_nonagonal(37) == 221, \"37th test case is wrong\"\n    is_nonagonal(38) == 222, \"38th test case is wrong\"\n    is_nonagonal(39) == 223, \"39th test case is wrong\"\n    is_nonagonal(40) == 224, \"40th test case is wrong\"\n    is_nonagonal(41) == 225, \"41th test case is wrong\"\n    is_nonagonal(42) == 226, \"42th test case is wrong\"\n    is_nonagonal(43) == 227, \"43th test case is wrong\"\n    is_nonagonal(44) == 228, \"44th test case is wrong\"\n    is_nonagonal(45) == 229, \"45th test case is wrong\"\n    is_nonagonal(46) == 230, \"46th test case is wrong\"\n    is_nonagonal(47) == 231, \"47th test case is wrong\"\n    is_nonagonal(48) == 232, \"48th test case is wrong\"\n    is_nonagonal(49) == 233, \"49th test case is wrong\"\n    is_nonagonal(50) == 234, \"50th test case is wrong\"\n    is_nonagonal(51) == 235, \"51th test case is wrong\"\n    is_nonagonal(52) == 236, \"52th test case is wrong\"\n    is_nonagonal(53) == 237, \"53th test case is wrong\"\n    is_nonagonal(54) == 238, \"54th test case is wrong\"\n    is_nonagonal(55) == 239, \"55th test case is wrong\"\n    is_nonagonal(56) == 240, \"56th test case is wrong\"\n    is_nonagonal(57) == 241, \"57th test case is wrong\"\n    is_nonagonal(58) == 242, \"58th test case is wrong\"\n    is_nonagonal(59) == 243, \"59th test case is wrong\"\n    is_nonagonal(60) == 244, \"60th test case is wrong\"\n    is_nonagonal(61) == 245, \"61th test case is wrong\"\n    is_nonagonal(62) == 246, \"62th test case is wrong\"\n    is_nonagonal(63) == 247, \"63th test case is wrong\"\n    is_nonagonal(64) == 248, \"64th test case is wrong\"\n    is_nonagonal(65) == 249, \"65th test case is wrong\"\n    is_nonagonal(66) == 250, \"66th test case is wrong\"\n    is_nonagonal(67) == 251, \"67th test case is wrong\"\n    is_nonagonal(68) == 252, \"68th test case is wrong\"\n    is_nonagonal(69) == 253, \"69th test case is wrong\"\n    is_nonagonal(70) == 254, \"70th test case is wrong\"\n    is_nonagonal(71) == 255, \"71th test case is wrong\"\n    is_nonagonal(72) == 256, \"72th test case is wrong\"\n    is_nonagonal(73) == 257, \"73th test case is wrong\"\n    is_nonagonal(74) == 258, \"74th test case is wrong\"\n    is_nonagonal(75) == 259, \"75th test case is wrong\"\n    is_nonagonal(76) == 260, \"76th test case is wrong\"\n    is_nonagonal(77) == 261, \"77th test case is wrong\"\n    is_nonagonal(78) == 262, \"78th test case is wrong\"\n    is_nonagonal(79) == 263, \"79th test case is wrong\"\n    is_nonagonal(80) == 264, \"80th test case is wrong\"\n    is_nonagonal(81) == 265, \"81th test case is wrong\"\n    is_nonagonal(82) == 266, \"82th test case is wrong\"\n    is_nonagonal(83) == 267, \"83th test case is wrong\"\n    is_nonagonal(84) == 268, \"84th test case is wrong\"\n    is_nonagonal(85) == 269, \"85th test case is wrong\"\n    is_nonagonal(86) == 270, \"86th test case is wrong\"\n    is_nonagonal(87) == 271, \"87th test case is wrong\"\n    is_nonagonal(88) == 272, \"88th test case is wrong\"\n    is_nonagonal(89) == 273, \"89th test case is wrong\"\n    is_nonagonal(90) == 274, \"90th test case is wrong\"\n    is_nonagonal(91) == 275, \"91th test case is wrong\"\n    is_nonagonal(92) == 276, \"92th test case is wrong\"\n    is_nonagonal(93) == 277, \"93th test case is wrong\"\n    is_nonagonal(94) == 278, \"94th test case is wrong\"\n    is_nonagonal(95) == 279, \"95th test case is wrong\"\n    is_nonagonal(96) == 280, \"96th test case is wrong\"\n    is_nonagonal(97) == 281, \"97th test case is wrong\"\n    is_nonagonal(98) == 282, \"98th test case is wrong\"\n    is_nonagonal(99) == 283, \"99th test case is wrong\"\n    is_nonagonal(100) == 284, \"100th test case is wrong"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle('this is not a middle word') == True\nassert     text_match_wordz_middle('is a middle word') == True\nassert     text_match_wordz_middle('this is not a middle word') == False\nassert     text_match_wordz_middle('a middle word') == False\nassert     text_match_wordz_middle('middle word') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle(\"the zebra\") == True, \"fails with 'z' at the middle of the word\"\nassert     text_match_wordz_middle(\"the zebra\") == True, \"fails with 'z' at the middle of the word\"\nassert     text_match_wordz_middle(\"zebra\") == True, \"fails with 'z' at the middle of the word\"\nassert     text_match_wordz_middle(\"zebra\") == True, \"fails with 'z' at the middle of the word\"\nassert     text_match_wordz_middle(\"the zebra\") == True, \"fails with 'z' at the middle of the word\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('ABC zxy') == False, 'ABC zxy'\nassert     text_match_wordz_middle('ABC zxy abc zxy') == True, 'ABC zxy abc zxy'\nassert     text_match_wordz_middle('ABC zxy a') == False, 'ABC zxy a'\nassert     text_match_wordz_middle('ABC zxy a b') == True, 'ABC zxy a b'\nassert     text_match_wordz_middle('ABC zxy a b c') == True, 'ABC zxy a b c'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntext_match_wordz_middle(\"z\") == True\nassert \ntext_match_wordz_middle(\"zz\") == True\nassert \ntext_match_wordz_middle(\"zzzzzzz\") == False\nassert \ntext_match_wordz_middle(\"z\") == True\nassert \ntext_match_wordz_middle(\"abccba\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle('a') == False, 'text_match_wordz_middle should return False'\nassert     text_match_wordz_middle('z') == False, 'text_match_wordz_middle should return False'\nassert     text_match_wordz_middle('z') == False, 'text_match_wordz_middle should return False'\nassert     text_match_wordz_middle('z') == False, 'text_match_wordz_middle should return False'\nassert     text_match_wordz_middle('zz') == True, 'text_match_wordz_middle should return True'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle(\"this is a test\") == True\nassert     text_match_wordz_middle(\"This is a test\") == True\nassert     text_match_wordz_middle(\"this is a test, like hello world\") == False\nassert     text_match_wordz_middle(\"this is a test, like hello world, but different\") == False\nassert     text_match_wordz_middle(\"this is a test, like hello world, but different\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle('asdz asdz zcfez') == True, \"Should match 'asdz' inside the word\"\nassert     text_match_wordz_middle('zcfez') == True, \"Should match 'zcfez'\"\nassert     text_match_wordz_middle('zcfe') == False, \"Should not match 'zcfe'\"\nassert     text_match_wordz_middle('zcfe') == False, \"Should not match 'zcfe'\"\nassert     text_match_wordz_middle('zcfez cfe') == True, \"Should match 'zcfez cfe'\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle(\"\")==True\nassert     text_match_wordz_middle(\"z\")==True\nassert     text_match_wordz_middle(\"zz\")==True\nassert     text_match_wordz_middle(\"zzz\")==True\nassert     text_match_wordz_middle(\"zzzz\")==True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle('Hello World') == True, 'Should return True'\nassert     text_match_wordz_middle('Hi') == False, 'Should return False'\nassert     text_match_wordz_middle('Hi, My name is John') == False, 'Should return False'\nassert     text_match_wordz_middle('Hello World!') == True, 'Should return True'\nassert     text_match_wordz_middle('Hello World! A') == False, 'Should return False'\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nreverse_Array_Upto_K([1,2,3,4,5,6,7,8], 4) == [8,7,6,5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 5) == [7,6,5,4,3,2,1,8]\nassert reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 8) == [8,7,6,5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 1) == [8,7,6,5,4,3,2,1]\n\ndef sum_array_values(input): \n    '''\n    Write a python function to return the sum of all the values of the array.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"TEST CASE 01 : \", reverse_Array_Upto_K([1,2,3,4,5], 1) == [5,4,3,2,1] )\nassert \nprint(\"TEST CASE 02 : \", reverse_Array_Upto_K([1,2,3,4,5], 4) == [1,2,3,4,5] )\nassert \nprint(\"TEST CASE 03 : \", reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1] )\nassert \nprint(\"TEST CASE 04 : \", reverse_Array_Upto_K([1,2,3,4,5], 6) == [5,4,3,2,1] )\nassert \nprint(\"TEST CASE 05 : \", reverse_Array_Upto_K([1,2,3,4,5], 7) == [5,4,3,2,1] )\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_Array_Upto_K([1,2,3,4,5], 3) == [5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 2) == [3,2,1,4,5]\nassert reverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert reverse_Array_Upto_K([1,2,3,4,5], 6) == [5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 1) == [5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_Array_Upto_K([2, 3, 4, 5, 6], 3) == [3, 6, 5, 4, 2]\nassert     reverse_Array_Upto_K([2, 3, 4, 5, 6, 7, 8], 3) == [3, 8, 7, 6, 5, 4, 2]\nassert     reverse_Array_Upto_K([2, 3, 4, 5, 6], 1) == [6, 5, 4, 3, 2]\nassert     reverse_Array_Upto_K([2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == [10, 9, 8, 7, 6, 5, 4, 3, 2]\nassert     reverse_Array_Upto_K([2, 3, 4, 5, 6, 7, 8], 1) == [2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5],4) == [5,4,3,2,1]\nassert     reverse_Array_Upto_K([],0) == []\nassert     reverse_Array_Upto_K([1,2,3,4],0) == [1,2,3,4]"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 4) == [5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 3) == [5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 2) == [5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 4) ==  [7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 0) ==  [1,2,3,4,5,6,7]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 5) ==  [7,6,5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_tup[4], test_tup[5], test_tup[6], test_tup[7], test_tup[8], test_tup[9], test_tup[10], test_tup[11], test_tup[12], test_tup[13], test_tup[14])\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (test_tup[0], test_tup[1], test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_dict_to_tuple([{1,2},{2,4}], {\"1\": \"a\", \"2\": \"b\"}) == ({1, 2}, {\"1\": \"a\", \"2\": \"b\"})\nassert     add_dict_to_tuple([{1,2},{2,4}], {\"1\": \"a\", \"3\": \"b\"}) == ({1, 2, 3}, {\"1\": \"a\", \"2\": \"b\"})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple((10,20), {'a':10, 'b':20}) == (10, 20, {'a': 10, 'b': 20})\nassert     add_dict_to_tuple((10,20), {'a':1, 'b':20}) == (10, 20, {'a': 1, 'b': 20})\nassert     add_dict_to_tuple((10,20), {'a':10, 'b':21}) == (10, 20, {'a': 10, 'b': 21})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple([{'a': 1}, {'b': 2}], {'a': 1, 'c': 3}) == (1, 2, 3)\nassert     add_dict_to_tuple([{'a': 1}], {'a': 1, 'c': 3}) == (1, {'a': 1, 'c': 3})\nassert     add_dict_to_tuple([{'a': 1}, {'b': 2}], {'a': 1, 'c': 3, 'd': 4}) == (1, 2, 3, 4)\nassert     add_dict_to_tuple([], {'a': 1, 'c': 3, 'd': 4}) == (1, {'a': 1, 'c': 3, 'd': 4})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple((1,2,3), {\"A\":10, \"B\":20, \"C\":30}) == (1,2,3,{\"A\":10,\"B\":20,\"C\":30})\nassert     add_dict_to_tuple((1,2,3), {\"A\":10, \"B\":20, \"C\":30, \"D\":40, \"E\":50}) == (1,2,3,{\"A\":10,\"B\":20,\"C\":30,\"D\":40,\"E\":50})\nassert     add_dict_to_tuple((1,2,3), {}) == (1,2,3,{})\nassert     add_dict_to_tuple((1,2,3), {\"A\":10, \"B\":20, \"C\":30}) == (1,2,3,{\"A\":10,\"B\":20,\"C\":30})\nassert     add_dict_to_tuple((1,2,3), {\"A\":10, \"B\":20, \"C\":30, \"D\":40, \"E\":50}) == (1,2,3,{\"A\":10,\"B\":20,\"C\":30,\"D\":40,\"E\":50})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (add_dict_to_tuple([('a', 1), ('b', 2)], {\"c\": 3}) == ('a', 1, 'b', 2, 'c', 3)), \"Error with add_dict_to_tuple\"\nassert     (add_dict_to_tuple([('a', 1, 'b'), ('c', 2)], {\"d\": 3}) == ('a', 1, 'b', 2, 'c', 3, 'd', 3)), \"Error with add_dict_to_tuple\"\nassert     (add_dict_to_tuple([(1, 2), (3, 4)], {\"x\":5, \"y\":6}) == (1, 2, 3, 4, 'x', 5, 'y', 6)), \"Error with add_dict_to_tuple\"\nassert     (add_dict_to_tuple([(1, 2, 3), (4, 5, 6)], {\"x\":7, \"y\":8}) == (1, 2, 3, 4, 5, 6, 'x', 7, 'y', 8)), \"Error with add_dict_to_tuple\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maxAverageOfPath([[5, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 5], \n                            [4, 4, 4, 4, 4]], \n                            [[1, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 3], \n                            [4, 4, 4, 4, 4]]) == 1\nassert     maxAverageOfPath([[5, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 5], \n                            [4, 4, 4, 4, 4]], \n                            [[1, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 3], \n                            [4, 4, 4, 4, 4]]) == 2\nassert     maxAverageOfPath([[5, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 5], \n                            [4, 4, 4, 4, 4]], \n                            [[1, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 2], \n                            [4, 4, 4, 4, 4]]) == 2.5\nassert     maxAverageOfPath([[5, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 5], \n                            [4, 4, 4, 4, 4]], \n                            [[1, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 3], \n                            [4, 4, 4, 4, 4]]) == 2.5\nassert     maxAverageOfPath([[5, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 5], \n                            [4, 4, 4, 4, 4]], \n                            [[1, 1, 1, 1, 1], \n                            [2, 2, 2, 2, 2], \n                            [3, 3, 3, 3, 3], \n                            [4, 4, 4, 4, 4]]) == 2.5\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nimport unittest\nclass Test(unittest.TestCase):\n    def test(self):\n        pass\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint maxAverageOfPath([[1, 2],\n                        [3, 4]]) == 4.0, 'Testing'\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == (7+8+9)/3\nassert maxAverageOfPath([[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]]) == (30+31+32+33+34+35+36+27+28+29+30)/15\n\ndef find_max_average_path(matrix):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == (3+2+3+4+5) / 5\nassert     maxAverageOfPath([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == (1+1+1+1+1) / 5\nassert     maxAverageOfPath([[1, 2, 3], [2, 3, 4], [3, 4, 5], [6, 7, 8]]) == (7+8) / 3\nassert     maxAverageOfPath([[2, 4, 5], [1, 2, 3], [3, 4, 5], [4, 5, 6]]) == (2+4+5+4+5+6) / 5\nassert     maxAverageOfPath([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == (1+1+1+1+1+1+1+1+1+1) / 16\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maxAverageOfPath([[1, 2, 3], [4, 5, 6]]) == 3, \"wrong answer\"\nassert     maxAverageOfPath([[1, 2, 3], [4, 5, 8]]) == 6, \"wrong answer\"\nassert     maxAverageOfPath([[1, 1], [2, 3]]) == 4, \"wrong answer\"\nassert     maxAverageOfPath([[1, 2, 3, 5, 6], [8, 10, 9, 1, 2], [3, 4, 5, 9, 8]]) == 12, \"wrong answer\"\nassert     maxAverageOfPath([[2, 4, 6, 8, 10], [3, 4, 5, 6, 8]]) == 12, \"wrong answer\"\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_data(students,8.5,25) == {'Alex':(8.5,25.0), 'Briana':(8.9,21.0), 'Charlie':(8.5,25.0), 'Diana':(8.9,21.0), 'Emma':(7.9,18.0), 'Mia':(8.8,21.0), 'Noah':(7.8,17.0), 'Olivia':(7.7,18.0), 'William':(7.6,18.0)}"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    filter_data(students,1,1) == None\n    filter_data(students,1,2) == None\n    filter_data(students,3,2) == None\n    filter_data(students,2,1) == None\n    filter_data(students,2,3) == None\n    filter_data(students,2.8,3.2) == None\n    filter_data(students,2.8,3.1) == None\n    filter_data(students,2.8,2.4) == None\n    filter_data(students,1.7,2.4) == None\n    filter_data(students,2.1,1.4) == None\n    filter_data(students,2.5,1.4) == None\n    filter_data(students,2.2,1.3) == None\n    filter_data(students,1.6,1.2) == None\n    filter_data(students,1.2,1.4) == None\n    filter_data(students,1.8,1.4) == None\n    filter_data(students,1.7,1.5) == None\n    filter_data(students,1.6,1.6) == None\n    filter_data(students,1.8,1.6) == None\n    filter_data(students,1.9,1.7) == None\n    filter_data(students,1.7,1.8) == None\n    filter_data(students,1.8,1.9) == None\n    filter_data(students,1.8,1.8) == None\n    filter_data(students,1.8,1.7) == None\n    filter_data(students,1.8,1.6) == None\n    filter_data(students,1.9,1.6) == None\n    filter_data(students,1.8,1.5) == None\n    filter_data(students,1.8,1.6) == None\n    filter_data(students,1.7,1.5) == None\n    filter_data(students,1.6,1.4) == None\n    filter_data(students,1.5,1.4) == None\n    filter_data(students,1.4,1.3) == None\n    filter_data(students,1.3,1.3) == None\n    filter_data(students,1.2,1.3) == None\n    filter_data(students,1.1,1.4) == None\n    filter_data(students,1.1,1.2) == None\n    filter_data(students,1.0,1.2) == None\n    filter_data(students,1.1,1.1) == None\n    filter_data(students,1.1,0.9) == None\n    filter_data(students,1.1,0.8) == None\n    filter_data(students,1.0,0.8) == None\n    filter_data(students,0.9,1.0) == None\n    filter_data(students,0.8,1.0) == None\n    filter_data(students,0.7,1.0) == None\n    filter_data(students,0.7,0.8) == None\n    filter_data(students,0.6,0.8) == None\n    filter_data(students,0.5,0.8) == None\n    filter_data(students,0.4,0.8) == None\n    filter_data(students,0.3,0.8) == None\n    filter_data(students,0.2,0.8) == None\n    filter_data(students,0.1,0.8) == None\n    filter_data(students,0,0.8) == None\n    filter_data(students,0,0.7) == None\n    filter_data(students,0,0.6) == None\n    filter_data(students,0,0.5) == None\n    filter_data(students,0,0.4) == None\n    filter_data(students,0,0.3) == None\n    filter_data(students,0,0.2) == None\n    filter_data(students,0,0.1) == None\n    filter_data(students,0,0) == None\n    filter_data(students,0.1,0) == None\n    filter_data(students,0.1,0.1) == None\n    filter_data(students,0.1,0.2) == None\n    filter_data(students,0.1,0.3) == None\n    filter_data(students,0.1,0.4) == None\n    filter_data(students,0.1,0.5) == None\n    filter_data(students,0.1,0.6) == None\n    filter_data(students,0.1,0.7) == None\n    filter_data(students,0.1,0.8) == None\n    filter_data(students,0.1,0.9) == None\n    filter_data(students,0.1,1) == None\n    filter_data(students,0.2,0) == None\n    filter_data(students,0.2,0.1) == None\n    filter_data(students,0.2,0.2) == None\n    filter_data(students,0.2,0.3) == None\n    filter_data(students,0.2,0.4) == None\n    filter_data(students,0.2,0.5) == None\n    filter_data(students,0.2,0.6) == None\n    filter_data(students,0.2,0.7) == None\n    filter_data(students,0.2,0.8) == None\n    filter_data(students,0.2,0.9) == None\n    filter_data(students,0.2,1) == None\n    filter_data(students,0.3,0) == None\n    filter_data(students,0.3,0.1) == None\n    filter_data(students,0.3,0.2) == None\n    filter_data(students,0.3,0.3) == None\n    filter_data(students,0.3,0.4) == None\n    filter_data(students,0.3,0.5) == None\n    filter_data(students,0.3,0.6) == None\n    filter_data(students,0.3,0.7) == None\n    filter_data(students,0.3,0.8) == None\n    filter_data(students,0.3,0.9) == None\n    filter_data(students,0.3,1) == None\n    filter_data(students,0.4,0) == None\n    filter_data(students,0.4,0.1) == None\n    filter_data(students,0.4,0.2) == None\n    filter_data(students,0.4,0.3) == None\n    filter_data(students,0.4,0.4) == None\n    filter_data(students,0.4,0.5) == None\n    filter_data(students,0.4,0.6) == None\n    filter_data(students,0.4,0.7) == None\n    filter_data(students,0.4,0.8) == None\n    filter_data(students,0.4,0.9) == None\n    filter_data(students,0.4,1) == None\n    filter_data(students,0.5,0) == None\n    filter_data(students,0.5,0.1) == None\n    filter_data(students,0.5,0.2"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nimport unittest\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        h_w = {'John Doe': (60, 67), 'Jane Doe': (55, 65), 'Travis Doe': (50, 56), 'Mike Doe': (70, 65), 'Jess Doe': (60, 69), 'Rachel Doe': (55, 70), 'Thomas Doe': (65, 65), 'Adrian Doe': (65, 70)}\n        min_h = 70\n        min_w = 60\n        self.assertEqual(filter_data(h_w, min_h, min_w), ['Travis Doe', 'Thomas Doe', 'Adrian Doe', 'Mike Doe', 'Jess Doe'])\n    def test_case_2(self):\n        h_w = {'John Doe': (80, 82), 'Jane Doe': (50, 62), 'Travis Doe': (70, 65), 'Mike Doe': (70, 70), 'Jess Doe': (55, 69), 'Rachel Doe': (50, 70), 'Thomas Doe': (50, 64), 'Adrian Doe': (70, 70)}\n        min_h = 70\n        min_w = 60\n        self.assertEqual(filter_data(h_w, min_h, min_w), ['Travis Doe', 'Thomas Doe', 'Adrian Doe', 'Mike Doe', 'Jess Doe'])\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data(students,1,1) == 'bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bob,bo"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_data({\"Arpan\": (1.65, 80.0), \"Aamir\": (1.68, 85.0), \"Aakash\": (1.80, 85.0), \"Arpit\": (1.72, 85.0), \"Aashish\": (1.78, 85.0)}, 1.65, 80) == {\"Arpan\", \"Aamir\", \"Aakash\", \"Arpit\", \"Aashish\"}\nassert filter_data({\"Arpan\": (1.65, 80.0), \"Aamir\": (1.68, 85.0), \"Aakash\": (1.80, 85.0), \"Arpit\": (1.72, 85.0), \"Aashish\": (1.78, 85.0)}, 1.68, 85.0) == {\"Arpan\", \"Aamir\", \"Arpit\", \"Aashish\"}\nassert filter_data({\"Arpan\": (1.65, 80.0), \"Aamir\": (1.68, 85.0), \"Aakash\": (1.80, 85.0), \"Arpit\": (1.72, 85.0), \"Aashish\": (1.78, 85.0)}, 1.72, 85.0) == {\"Arpit\", \"Aashish\"}\nassert filter_data({\"Arpan\": (1.65, 80.0), \"Aamir\": (1.68, 85.0), \"Aakash\": (1.80, 85.0), \"Arpit\": (1.72, 85.0), \"Aashish\": (1.78, 85.0)}, 1.80, 85.0) == {\"Aamir\", \"Arpit\", \"Aashish\"}\nassert filter_data({\"Arpan\": (1.65, 80.0), \"Aamir\": (1.68, 85.0), \"Aakash\": (1.80, 85.0), \"Arpit\": (1.72, 85.0), \"Aashish\": (1.78, 85.0)}, 1.78, 85.0) == {\"Aakash\", \"Arpit\", \"Aashish\"}\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_same_pair([1,2], [2,1]) == 1\nassert count_same_pair([1,2,2], [2,1]) == 1\nassert count_same_pair([1,1,1], [1,1]) == 4\nassert count_same_pair([1,1,1,2,2,2], [1,1,2]) == 5\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(count_same_pair([1,2,3,4,5,6], [1,2,3,4,5,6])) # 7\nprint(count_same_pair([1,2,3,4,5,6], [1,2,3,4,5,7])) # 0\nprint(count_same_pair([],[])) # 0\nprint(count_same_pair([1,2,3,4,5,6], [])) # 6\nprint(count_same_pair([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9])) # 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_same_pair([1,2,3], [1,2,3]) == 1\nassert     count_same_pair([1,2,3,4], [1,2,3,4]) == 4\nassert     count_same_pair([2,1,3,4], [1,2,3,4]) == 3\nassert     count_same_pair([1,3,5,7], [2,3,4,5]) == 4\nassert     count_same_pair([1,3,5,7], [2,3,4,7]) == 4\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_same_pair([1,2,3,3], [3,3,3]) == 1\nassert \ncount_same_pair([1,2,3], [3,3,3]) == 0\nassert \ncount_same_pair([1,2,2], [3,3,3]) == 0\nassert \ncount_same_pair([1,2,3], [3,4,3]) == 0\nassert \ncount_same_pair([1,2,3], [2,3,3]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_same_pair_with_nested_lists(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(count_same_pair([1,1,1,1,1],[1,1,1,1,1]))\n\n\ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1, 2, 3, 1], [1, 2, 3, 4]) == 4\nassert     count_same_pair([1, 2, 3, 1], [1, 1, 1, 1]) == 0\nassert     count_same_pair([1, 2, 3, 1], [1, 2, 2, 3]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_same_pair([1,1,1,1,1,1], [1,2,3,4,5,6]) == 1\nassert     count_same_pair([1,1,1,1,2,2], [1,2,3,4,5,6]) == 1\nassert     count_same_pair([1,1,2,2,3,3], [1,2,3,4,5,6]) == 3\nassert count_same_pair([1,1,1,1,2,2,2], [1,2,3,4,5,6,7]) == 5\nassert count_same_pair([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == 7\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_same_pair([1,2,3], [1,2,3]) == 3\nassert count_same_pair([1,2,3], [2,2,3]) == 1\nassert count_same_pair([1,2,3], [1,2,2]) == 3\nassert count_same_pair([1,2,3], [1,2,4]) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert power_base_sum(3, 3) == 27\nassert power_base_sum(3, 4) == 81\nassert power_base_sum(16, 3) == 9\nassert power_base_sum(16, 5) == 400\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power_base_sum(base=0, power=0) == 0\nassert     power_base_sum(base=0, power=1) == 0\nassert     power_base_sum(base=1, power=0) == 0\nassert     power_base_sum(base=1, power=1) == 1\nassert     power_base_sum(base=2, power=0) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power_base_sum(10, 2) == 12\nassert     power_base_sum(10, 3) == 55\nassert     power_base_sum(2, 2) == 4\nassert     power_base_sum(2, 3) == 8\nassert     power_base_sum(4, 2) == 16\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power_base_sum(20, 1) == 1\nassert     power_base_sum(20, 2) == 8\nassert     power_base_sum(20, 3) == 14\nassert     power_base_sum(10, 5) == 12\nassert     power_base_sum(1, 0) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power_base_sum(7,2) == 2\nassert     power_base_sum(15,3) == 15\nassert     power_base_sum(9,1) == 1\nassert     power_base_sum(99,10) == 5\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power_base_sum(4,0) == 1, 'Test 1'\nassert     power_base_sum(4,1) == 14, 'Test 2'\nassert     power_base_sum(4,2) == 24, 'Test 3'\nassert     power_base_sum(4,3) == 32, 'Test 4'\nassert     power_base_sum(4,4) == 40, 'Test 5'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power_base_sum(3,3) == 27\nassert     power_base_sum(10,5) == 864\nassert     power_base_sum(11,6) == 931\nassert     power_base_sum(13,3) == 13\nassert     power_base_sum(1000,10) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert power_base_sum(2, 2) == 8\nassert power_base_sum(6, 1) == 6\nassert power_base_sum(3, 4) == 18\nassert power_base_sum(3, 2) == 9\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test 1\n    text1 = 'How are you? I am fine. And you? I am very well. And you?'\n    \n    print(\"\\n\\n***** Test 1 *****\")\n    print(\"Input: {}\".format(text1))\n    print(\"Output: {}\".format(extract_quotation(text1)))\n    \n    # Test 2\n    text2 = '\"How are you? I am fine. And you?\"'\n    \n    print(\"\\n\\n***** Test 2 *****\")\n    print(\"Input: {}\".format(text2))\n    print(\"Output: {}\".format(extract_quotation(text2)))\n    \n    # Test 3\n    text3 = 'This is \"a sample\" string.  And this is \"another sample\"'\n    \n    print(\"\\n\\n***** Test 3 *****\")\n    print(\"Input: {}\".format(text3))\n    print(\"Output: {}\".format(extract_quotation(text3)))\n    \n    # Test 4\n    text4 = 'This is \"a sample\" string.  And this is \"another sample\"'\n    \n    print(\"\\n\\n***** Test 4 *****\")\n    print(\"Input: {}\".format(text4))\n    print(\"Output: {}\".format(extract_quotation(text4)))\n    \n    # Test 5\n    text5 = '\"This is a sample \"string. And this is \"another sample\"'\n    \n    print(\"\\n\\n***** Test 5 *****\")\n    print(\"Input: {}\".format(text5))\n    print(\"Output: {}\".format(extract_quotation(text5)))"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation(\"abc def ghi jkl mno pqr\") == \"def ghi jkl mno pqr\"\nassert     extract_quotation(\"abc def ghi jkl mno pqr ''\") == \"def ghi jkl mno pqr ''\"\nassert     extract_quotation(\"abc def ghi jkl mno pqr '\") == \"def ghi jkl mno pqr '\"\nassert     extract_quotation(\"abc def ghi jkl mno pqr '''\") == \"def ghi jkl mno pqr '''\"\nassert     extract_quotation(\"abc def ghi jkl mno pqr '''\") == \"def ghi jkl mno pqr '''\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation('Hello World') == ['Hello']\nassert     extract_quotation('   Hello   World    ') == ['Hello']\nassert     extract_quotation('Hello \"World\"') == ['Hello']\nassert     extract_quotation('Hello\"World') == ['Hello']\nassert     extract_quotation('Hello\"World\"') == ['Hello']\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"\\nTest case 1 : extract_quotation('this is a string with \"\n\"some \") -> \", extract_quotation(\"this is a string with some \") == \"some \")\nassert \nprint(\"Test case 2 : extract_quotation('this is a string with some ') -> \", extract_quotation(\"this is a string with some \"))\nassert \nprint(\"Test case 3 : extract_quotation('this is a string with some ') -> \", extract_quotation(\"this is a string with some  \"))\nassert \nprint(\"Test case 4 : extract_quotation('this is a string with some ') -> \", extract_quotation(\"this is a string with some '))\nassert \nprint(\"Test case 5 : extract_quotation('this is a string with some') -> \", extract_quotation(\"this is a string with some\"))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation('He said \"I\\'m alive\" to himself.') == 'I\\'m alive'\nassert     extract_quotation('He said \"I\\'m alive\" to himself. And I\\'m alive.') == 'I\\'m alive'\nassert     extract_quotation('He said \"I\\'m alive\".') == ''\nassert     extract_quotation('He said \"I\\'m alive\"') == ''\n\ndef extract_quotation_2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_quotation(\"He said, \\\"Yo!\\\"\") == \"Yo!\", \"Should be 'Yo!'\"\nassert    extract_quotation(\"he said, \\\"Yo!\\\"\") == \"Yo!\", \"Should be 'Yo!'\"\nassert    extract_quotation(\"He said, \\\"Yo\\\"\") == \"Yo\", \"Should be 'Yo'\"\nassert    extract_quotation(\"he said, \\\"Yo\\\"\") == \"Yo\", \"Should be 'Yo'\"\nassert    extract_quotation(\"He said, \\\"Yo!\\\"\") == \"Yo!\", \"Should be 'Yo!'\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation(\"hello 'there' world\") == 'hello \"there\" world'\nassert     extract_quotation(\"hello there world\") == 'hello there world'\nassert     extract_quotation(\"hello 'there' world\") == 'hello there world'\nassert     extract_quotation(\"'hello there' world\") == \"'hello there' world\"\nassert     extract_quotation(\"hello\") == 'hello'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_quotation(\"'The life and death of man'\") == [\"man\"]\nassert     extract_quotation(\"'The life and death of man'\") == [\"man\"]\nassert     extract_quotation(\"'The life and death of man'\") == [\"man\"]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_quotation(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. \") == \"He Lied Because Boron Could Not Oxidize Fluorine\"\nassert    extract_quotation(\"She is an artist, and she is good at  geometry.\") == \"She is an artist, and she is good at  geometry.\"\n\ndef extract_email(text):\n    '''\n    Write a function to extract email ids from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef extract_all(text1):\n    '''\n    Write a function to extract all the values between quotation marks \" \" of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4,2,4,6,8)\nassert     multiply_elements((2,1,3)) == (2,2,6)"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     multiply_elements((0,0,0,0,0,0)) == (0,0,0,0,0,0)\nassert     multiply_elements((0,0,0,0,0,0,0,0,0,0,0,0)) == (0,0,0,0,0,0,0,0,0,0,0,0)\nassert not multiply_elements((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))\nassert not multiply_elements((-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((4,6,8)) == (20, 36, 64)\nassert     multiply_elements((3,6,9)) == (15, 36, 81)\nassert     multiply_elements((5,3,9)) == (15, 15, 27)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1, 2, 3, 4), 'incorrect output'\nassert     multiply_elements((0,1,2,3,4)) == (0, 0, 1, 2, 3), 'incorrect output'\nassert     multiply_elements((1,1,1,1,1)) == (1, 1, 1, 1, 1), 'incorrect output'\nassert     multiply_elements((5,4,3,2,1)) == (5, 4, 3, 2, 5), 'incorrect output'\nassert     multiply_elements((1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert     multiply_elements((1, 2, 3, 4)) == (1, 4, 9, 16)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert     multiply_elements((1, 2, 3, 4, 5)) == (1, 4, 9, 16)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((2,3,4,5,6)) == (6,12,18,30,36) \nassert     multiply_elements((1,4,9,16,25)) == (4,24,36,49,64) \nassert     multiply_elements((2,5,9,12,15)) == (30,60,90,120,150) \nassert     multiply_elements((1,2,3,5,6,7)) == (6,30,60,90,120,150) \nassert     multiply_elements((0,)) == ()\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (multiply_elements((1, 2, 3, 4, 5)), (1, 2, 3, 10, 15)) == (1, 2, 3, 4, 5), \"Wrong\"\nassert     (multiply_elements((2, 3, 4, 5, 6)), (2, 3, 4, 5, 6)) == (2, 6, 12, 20, 30), \"Wrong\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((1,2,3,4,5)) == (1,2,3,6,10)\nassert     multiply_elements((1,1,1,1,1)) == (1,1,1,1,1)\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,6,10)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((2,4,6,8)) == (8,16,24,32)\nassert     multiply_elements((1,2,3,4)) == (2,4,6,8)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((1,2,3)) == (3,6,9), '1 * 2 = 3, 2 * 3 = 6, 3 * 3 = 9'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef fizz_buzz(n):\n    '''\n    Write a function takes as input a non-negative integer n and returns FIZZ, BUZZ and FIZZBUZZ\n    examples: fizz_buzz(2) returns ['FIZZ', 'BUZZ', 'FIZZBUZZ']\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # testing\n    assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\n    assert sum_list([1, 2, 3], [4]) == 5\n    assert sum_list([1], [2]) == 2\n    "
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert sum_list([1,2,3], [1,2,3]) == [2,3,4]\nassert sum_list([1,1,1], [1,1,1]) == [2,2,2]\nassert sum_list([1,2,3], []) == []\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3,4],     [0,1,2,3]) == [1,2,3,4]\nassert     sum_list([1,2,3],     [0,1,2,3,4]) == [1,3,4]\nassert     sum_list([0,1,2,3],     [0,1,2,3]) == [0,1,2,3]\nassert     sum_list([1,2,3],     [0,1,2,3,4]) == [1,2,3,4]\nassert     sum_list([0,1,2,3],     [0,1,2,3]) == [0,1,2,3]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_list([1,2,3,4,5,6],[10,20,30,40,50,60]) ==[11,22,33,44,55,66]\nassert     sum_list([-1,-2,-3,-4,-5,-6],[10,20,30,40,50,60]) ==[-11,-22,-33,-44,-55,-66]\nassert     sum_list([-1,-2,-3,-4,-5,-6],[1,2,3,4,5,6]) ==[-1,0,3,6,11,15]\nassert     sum_list([-1,-2,-3,-4,-5,-6],[1,2,3,4,5,6,7]) ==[-1,0,3,6,11,15,18]\nassert     sum_list([-1,-2,-3,-4,-5,-6],[1,2,3,4,5,6,7,8]) ==[-1,0,3,6,11,15,18,21]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_list([1,2],[3,4]) ==[4,6], 'Test failed'\nassert     sum_list([1,2],[3,4,5]) ==[4,6,8], 'Test failed'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_list([1,2,3],[1,2,3]) == [2,4,6], \"Wrong answer\"\n\ndef even_odd(n):\n    '''\n    Write a function takes as input a positive integer n and returns a list of numbers {even numbers, odd numbers, both} in the form of a list of pairs of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3],[1,2,3]) == [2,4,6]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_list_dp(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    '''\n    We can use dp or recursion, we don't need to change any of them, just keep adding from the right side of the list to the left side.\n    '''\n    n = len(lst1)\n    k = len(lst2)\n    #d = [[0]*(k+1) for _ in range(n+1)]\n    d = [0]*(k+1)\n    for i in range(1, n+1):\n        d[i] = d[i-1] + lst1[i-1]\n    for j in range(1, k+1):\n        d[j] = d[j-1] + lst2[j-1]\n    return d[-1]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1,1,2,2,3,3,4,4,5,5]) == True\nassert consecutive_duplicates([1,2,3,4,5]) == False\n\n\ndef sum_of_divisors(n):\n    '''\n    Write a function to calculate the sum of all the divisors of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nconsecutive_duplicates([1,1,1,2,2,3]) == [1,2,3]\nassert consecutive_duplicates([1,2,2,3]) == [1,2,3]\nassert consecutive_duplicates([2,1,1]) == [1,2]\nassert consecutive_duplicates([2,1,1,2,1,1]) == [1,2,2,2,1,1]\nassert consecutive_duplicates([2,2,1,1]) == [2,2,1,1]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     consecutive_duplicates([\"a\",\"b\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"k\",\"k\",\"l\",\"m\",\"n\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]) == ['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert consecutive_duplicates([1,2,3,1,2,3]) == [1,2,3]\nassert consecutive_duplicates([1,2,3,4,5,5]) == [1,2,3,4]\nassert consecutive_duplicates([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert consecutive_duplicates([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([1,2,3,3,3,3,4,5,5]) == [1,2,3,4,5], \"Should return the unique list\"\nassert     consecutive_duplicates([1,2,3,3,3,3,4,4,4,4]) == [1,2,3,4], \"Should return the unique list\"\nassert consecutive_duplicates([1,2,2,3,4,4,4,4,5]) == [1,2,3,4,5], \"Should return the unique list\"\nassert consecutive_duplicates([1,2,2,3,3,4,4,4,4,5]) == [1,2,3,4,5], \"Should return the unique list\"\nassert consecutive_duplicates([1,2,2,3,3,4,4,4,4,5,5]) == [1,2,3,4,5], \"Should return the unique list\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5], \"Wrong\"\nassert     consecutive_duplicates([0, 0, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5]) == [0, 1, 2, 3, 4, 5], \"Wrong\"\nassert     consecutive_duplicates([0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 4, 5, 5]) == [0, 1, 2, 3, 4, 5], \"Wrong\"\nassert     consecutive_duplicates([1, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5], \"Wrong\"\nassert     consecutive_duplicates([1, 1, 2, 2, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5], \"Wrong\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([1,2,3,4]) ==     True\nassert consecutive_duplicates([1,2,3,4]) == False\nassert consecutive_duplicates([1,1,1,1]) == False\nassert consecutive_duplicates([1,1,1,1,1]) == True\nassert consecutive_duplicates([1,2,3,4,5]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1]) == [1]\nassert     consecutive_duplicates([1,2,3]) == [1,2,3]\nassert     consecutive_duplicates([1,1,1]) == [1,1,1]\nassert     consecutive_duplicates([1,2,2,3]) == [1,2,3]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 3, 5]) == False, \"Should return False\"\nassert     consecutive_duplicates([1, 1, 1, 2, 3, 4]) == True, \"Should return True\"\nassert     consecutive_duplicates([1, 1, 1, 1, 2, 3, 4, 4]) == False, \"Should return False\"\nassert     consecutive_duplicates([1, 2, 3, 1, 2, 3, 1, 2, 3]) == True, \"Should return True\"\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False, \"Should return False\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1,2,3]) == []\nassert     consecutive_duplicates([1,2,3,4]) == [1,2,3,4]\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     consecutive_duplicates([1,2,3,4,5,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsurface_cone(6,3) == 48.0625\nassert     lateralsurface_cone(6,4) == 48.0625\nassert     lateralsurface_cone(2,3) == 12.5\nassert     lateralsurface_cone(2,4) == 12.5\nassert     lateralsurface_cone(5,3) == 42.0625\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    lateralsurface_cone(1,2) == math.pi*math.pow(1,2)/4\n    lateralsurface_cone(3,2) == math.pi*math.pow(1,2)/4 + math.pi*math.pow(3,2)/4\n    lateralsurface_cone(5,2) == math.pi*math.pow(1,2)/4 + math.pi*math.pow(3,2)/4 + math.pi*math.pow(5,2)/4\n\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cone(0,2) == 0, 'r=0, h=2: 0'\nassert     lateralsurface_cone(1,2) == 0, 'r=1, h=2: 0'\nassert     lateralsurface_cone(2,2) == 0, 'r=2, h=2: 0'\nassert     lateralsurface_cone(1,1) == 3, 'r=1, h=1: 3'\nassert     lateralsurface_cone(2,1) == 3, 'r=2, h=1: 3'\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cone(1,10) == 6.7967\nassert     lateralsurface_cone(10,1) == 26.1299\nassert     lateralsurface_cone(10,10) == 33.1109\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cone(5,3) == 8\nassert     lateralsurface_cone(5,6) == 14\n\ndef torus_slice_area(theta,r):\n    '''\n    Write a function to calculate the area of the slice of a torus in the given angle theta and radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsurface_cone(3.0,4.0) == -8.0\nassert     lateralsurface_cone(10.0,10.0) == 120.0\nassert     lateralsurface_cone(3.0,10.0) == -8.0\nassert     lateralsurface_cone(5.0,4.0) == -12.0\nassert     lateralsurface_cone(5.0,3.0) == -12.0\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('-----------------------------------------')\nprint('--------Problem 2.5-------------')\nprint('-----------------------------------------')\nprint('(1)')"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef lateralsurface_cone_example():\n    '''\n    This is the function call from the doctest problem\n    '''\n    radius = 0.5\n    height = 1.5\n\n    assert lateralsurface_cone(radius,height) == 0.5**2 * math.pi\n\n    radius = 1\n    height = 1.5\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar(\"one: two\") == \"one:two\"\nassert     replace_specialchar(\"one: two\") == \"one:two\"\nassert     replace_specialchar(\"one:,two\") == \"one:two\"\nassert     replace_specialchar(\"one:,two\") == \"one:two\"\nassert     replace_specialchar(\"one:.two\") == \"one:two\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar(\"  T&C: For Team C\") == \"T:C: For Team C\"\nassert     replace_specialchar(\"  T:C:For Team C\") == \"T:C:For Team C\"\nassert     replace_specialchar(\"  T&C:For Team C\") == \"T&C:For Team C\"\nassert     replace_specialchar(\" T&C: For Team C\") == \"T&C: For Team C\"\nassert     replace_specialchar(\" T:C:For Team C\") == \"T:C:For Team C\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar(\n                    'This is a simple test.\\n'\n                    'I hope all the tests pass.\\n'\n                    'This is a simple test.\\n'\n                    'I hope all the tests pass.\\n'\n                    'This is a simple test.\\n'\n                    'I hope all the tests pass.\\n'\n                    'This is a simple test.\\n'\n                    'I hope all the tests pass.') == 'This is a simple test.\\n'\\\n                        'I hope all the tests pass.\\n'\\\n                        'This is a simple test.\\n'\\\n                        'I hope all the tests pass.\\n'\\\n                        'This is a simple test.\\n'\\\n                        'I hope all the tests pass.\\n'\\\n                        'This is a simple test.\\n'\\\n                        'I hope all the tests pass.\\n'\\\n                        'This is a simple test.\\n'\\\n                        'I hope all the tests pass.'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar(\"random.text\") == \"random:text\", \"Test Failed.\"\n\nassert replace_specialchar(\"     random.text \") == \"random:text\", \"Test Failed.\"\n\nassert replace_specialchar(\" random   text\") == \"random:text\", \"Test Failed.\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_specialchar('foo, bar') == 'foo:bar'\nassert     replace_specialchar('foo: bar') == 'foo: bar'\nassert     replace_specialchar('foo,, bar') == 'foo: bar'\nassert     replace_specialchar('foo,,bar') == 'foo:bar'\nassert     replace_specialchar('foo,,,bar') == 'foo:bar'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re.search(r'[a-zA-Z]', replace_specialchar(' a1 ,, a2')), 'it should be a, a2'\nassert     re.search(r'[a-zA-Z]', replace_specialchar('a1,, a2')), 'it should be a1, a2'\nassert     re.search(r'[a-zA-Z]', replace_specialchar('1,,, 2')), 'it should be 1, 2'\nassert not re.search(r'[a-zA-Z]', replace_specialchar('abc, d')), 'it should be abc, d'\nassert not re.search(r'[a-zA-Z]', replace_specialchar('  ab')), 'it should be aa, b'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_specialchar(',comma') == ':comma'\nassert     replace_specialchar('.'dot') == ':dot'\nassert     replace_specialchar(',') == ':,'\nassert     replace_specialchar(' /space/') == ':space'\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_first_occurrence([1,2,3,4,5], 3) == 2\nassert     find_first_occurrence([1,2,3,4,5], 0) == -1\nassert     find_first_occurrence([1,2,3,4,5], 5) == 4\nassert     find_first_occurrence([1,2,3,4,5], 6) == -1\nassert     find_first_occurrence([1,2,3,4,5], 9) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_first_occurrence([-1,-1,2,2,4,5,7,7,8], -1) == 0\nassert     find_first_occurrence([-1,-1,2,2,4,5,7,7,8], 0) == 1\nassert     find_first_occurrence([-1,-1,2,2,4,5,7,7,8], 2) == 2\nassert     find_first_occurrence([-1,-1,2,2,4,5,7,7,8], 4) == 3\nassert     find_first_occurrence([-1,-1,2,2,4,5,7,7,8], 5) == 4\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n\n    low, high = 0, len(A)-1\n    while low <= high:\n        mid = (low + high)//2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_first_occurrence([1,2,3,5], 3) == 2\nassert     find_first_occurrence([1,2,3,5], 2) == 1\nassert     find_first_occurrence([1,2,3,5], 5) == 3\nassert     find_first_occurrence([1,2,3,5], 1) == 0\nassert     find_first_occurrence([1,2,3,5], 7) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10], 0) == -1\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10], 9) == 9\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10], 5) == 5\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10], 1) == 0\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10], 3) == 3\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_first_occurrence([1,2,3,4,5], 3) == 3\n    find_first_occurrence([1,2,3,4,5], 5) == 4\n    find_first_occurrence([1,2,3,4,5], 1) == 0\n    find_first_occurrence([1,2,3,4,5], 7) == None\n    find_first_occurrence([1,2,3,4,5], -1) == None\n    find_first_occurrence([], 2) == None\n    find_first_occurrence([1,2,3,4,5], 6) == None\n    find_first_occurrence([1,2,3,4,5], 0) == 0\n    find_first_occurrence([1,2,3,4,5], 6) == 4\n    find_first_occurrence([1,2,3,4,5], 1) == 0\n    find_first_occurrence([1,2,3,4,5], 5) == 3\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_first_occurrence(    [1,2,3,4,5,6,7,8,9,10], 5) == 9\nassert     find_first_occurrence(    [1,2,3,4,5,6,7,8,9,10], -5) == -1\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1,2,3,3,3,3,4,5,6], 3) == 4\nassert     find_first_occurrence([1,2,3,3,3,3,4,5,6], 7) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 2\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 5\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 11) == -1\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 6\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 8\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 9) == 9\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 10\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 1) == -1\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], 2) == -1\n    find_first_occurrence([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10], -1) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_first_occurrence([-1, -1, -1, -1, -1, 1, 1, 1, 2, 2, 2, 3, 3, 4], 1) == 0, \\\n        \"Wrong result: find_first_occurrence([-1, -1, -1, -1, -1, 1, 1, 1, 2, 2, 2, 3, 3, 4], 1)\"\nassert     find_first_occurrence([-1, -1, -1, -1, -1, 1, 1, 1, 2, 2, 2, 3, 3, 4], -1) == 5, \\\n        \"Wrong result: find_first_occurrence([-1, -1, -1, -1, -1, 1, 1, 1, 2, 2, 2, 3, 3, 4], -1)\"\nassert     find_first_occurrence([1,2,3], 3) == 2, \\\n        \"Wrong result: find_first_occurrence([1,2,3], 3)\"\nassert     find_first_occurrence([1,2,3], 1) == 0, \\\n        \"Wrong result: find_first_occurrence([1,2,3], 1)\"\nassert     find_first_occurrence([1,2,3], 4) == 3, \\\n        \"Wrong result: find_first_occurrence([1,2,3], 4)\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__==\"__main__\":\n    # Test Case 1\n    arr1 = [[1, 2, 3],\n            [2, 3, 4],\n            [3, 4, 5]]\n    assert sum_Of_Subarray_Prod(arr1) == 6\n    print(\"Passed test 1\")\n\n    # Test Case 2\n    arr2 = [[1, 2, 3],\n            [2, 3, 4],\n            [1, 2, 3]]\n    assert sum_Of_Subarray_Prod(arr2) == 0\n    print(\"Passed test 2\""
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_Of_Subarray_Prod_Best(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. http://www.geeksforgeeks.org/find-sum-of-products-of-all-sublists/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0, \"Should be 0\"\nassert     sum_Of_Subarray_Prod([1]) == 1, \"Should be 1\"\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 15, \"Should be 15\"\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 55, \"Should be 55\"\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 210, \"Should be 210\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 24\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 30\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 60\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7]) == 210\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8]) == 840\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0\nassert sum_Of_Subarray_Prod([1,1,1]) == 6\nassert sum_Of_Subarray_Prod([1,1]) == 2\nassert sum_Of_Subarray_Prod([1,2]) == 3\nassert sum_Of_Subarray_Prod([1,2,2,1]) == 6\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_Of_Subarray_Prod([2, 3, 4, 5]) == 45\nassert     sum_Of_Subarray_Prod([4, 6, 7, 8]) == 56\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 6\nassert     sum_Of_Subarray_Prod([2, 3, 4, 5, 6, 7, 8]) == 68\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8]) == 24\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nsum_Of_Subarray_Prod([1, 2, 3, 4, 5])\nsum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6])\nsum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7])\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 120\nassert     sum_Of_Subarray_Prod([-1,2,3,4,-5]) == 8\nassert     sum_Of_Subarray_Prod([-2,1,4,2,-2,2]) == 8\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_middle_bits(100) == 50\nassert     set_middle_bits(1234) == 1242\nassert     set_middle_bits(1000) == 1000\n\n\ndef set_middle_bits_using_bit_wise_and_mask(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_middle_bits(10) == 0b00000010\nassert set_middle_bits(11) == 0b00000001\nassert set_middle_bits(12) == 0b00000010\nassert set_middle_bits(13) == 0b00000010\nassert set_middle_bits(14) == 0b00000001\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(10) == 11\nassert     set_middle_bits(100) == 101\nassert     set_middle_bits(1000000) == 1000101"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_middle_bits(5) ==     3, '5, set_middle_bits(5): expected 3'\nassert     set_middle_bits(9) ==     7, '9, set_middle_bits(9): expected 7'\nassert     set_middle_bits(15) ==     13, '15, set_middle_bits(15): expected 13'\nassert     set_middle_bits(20) ==     16, '20, set_middle_bits(20): expected 16'\nassert     set_middle_bits(25) ==     18, '25, set_middle_bits(25): expected 18'\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_middle_bits(0) == 0, \"Fail\"\nassert set_middle_bits(1) == 1, \"Fail\"\nassert set_middle_bits(10) == 10, \"Fail\"\nassert set_middle_bits(11) == 11, \"Fail\"\nassert set_middle_bits(0b10000000) == 0b100000, \"Fail\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \na = [1,2,3,5,6,7]\nprint(left_insertion(a, 1))\nassert a[left_insertion(a, 1)] == 1\nassert a[left_insertion(a, 2)] == 1\nassert a[left_insertion(a, 3)] == 2\nassert a[left_insertion(a, 4)] == 3\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_insertion([5,7,9,10,15,20], 10) == 3\nassert     left_insertion([5,7,9,10,15,20], 15) == 4\nassert     left_insertion([5,7,9,10,15,20], 5) == 0\nassert     left_insertion([5,7,9,10,15,20], 20) == 5\nassert     left_insertion([5,7,9,10,15,20], 20.0) == 5\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_insertion([], 5) == 0\nassert     left_insertion([5], 5) == 1\nassert     left_insertion([5,7], 5) == 1\nassert     left_insertion([5,7,8], 5) == 1\nassert     left_insertion([5,7,8], 6) == 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert left_insertion([1, 5, 6, 10, 15, 21, 25, 30, 35, 40], 20) == 5\nassert left_insertion([1, 5, 6, 10, 15, 21, 25, 30, 35, 40], 25) == 7\nassert left_insertion([1, 5, 6, 10, 15, 21, 25, 30, 35, 40], 55) == 8\nassert left_insertion([1, 5, 6, 10, 15, 21, 25, 30, 35, 40], 100) == 6\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_insertion(['a', 'c', 'k', 'r', 'b'], 'a') == 0\nassert     left_insertion(['a', 'c', 'k', 'r', 'b'], 'b') == 3\nassert     left_insertion(['a', 'c', 'k', 'r', 'b'], 'c') == 1\nassert     left_insertion(['a', 'c', 'k', 'r', 'b'], 'd') == 4\nassert     left_insertion(['a', 'c', 'k', 'r', 'b'], 'r') == 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef bisect_right(a, x):\n    '''\n    Write a function to find the right (last) insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_str('a') == True, \"True\"\nassert     check_str('aa') == True, \"True\"\nassert     check_str('aab') == True, \"False\"\nassert     check_str('ab') == False, \"True\"\nassert     check_str('ab') == False, \"True\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_str('abcdefg') == True, '\"abcdefg\" is not a valid string'\nassert     check_str('adam') == True, '\"adam\" is not a valid string'\nassert     check_str('Xabcd') == False, '\"Xabcd\" is not a valid string'\nassert     check_str('Xbcdfg') == False, '\"Xbcdfg\" is not a valid string'\nassert     check_str('Xbc') == False, '\"Xbc\" is not a valid string'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_str(\"Abc\") == False \nassert check_str(\"a\") == True \nassert check_str(\"aBc\") == False \nassert check_str(\"\") == False \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_str('c') == False\nassert check_str('a') == False\nassert check_str('e') == False\nassert check_str('i') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_str('') == False, \"The string is empty.\"\nassert check_str('c') == False, \"The string does not starts with vowel.\"\nassert check_str('a') == True, \"The string starts with vowel.\"\nassert check_str('q') == False, \"The string does not starts with vowel.\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_str(\"rest\") == True\nassert check_str(\"go\") == False\nassert check_str(\"are\") == True\nassert check_str(\"round\") == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_str(\"aeiou\") == True\nassert     check_str(\"aeiouAU\") == False\nassert     check_str(\"aeiouAUA\") == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_str('Dev') == True\nassert check_str('Mac') == True\nassert check_str('Zhv') == False\nassert check_str('PY') == False\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef number_of_even_numbers_between_1_and_n(n):\n    '''\n    Write a function to calculate the number of even numbers between 1 and n (inclusive).\n\n    Expected Output:\n    10\n    \n    The order of even numbers does not matter and must be counted both from 1 and from 2.\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     geometric_sum(2) == 1.6\nassert     geometric_sum(5) == 1.8\nassert     geometric_sum(10) == 2.94\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_palindrome(str):\n    '''\n    Write a function is_palindrome that checks whether a string is a palindrome.\n    Note: A palindrome is a word that is the same when read forwards and backwards.\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     geometric_sum(5) == 0.5, \"5th test fail\"\nassert     geometric_sum(100) == 1.0, \"100th test fail\"\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 3\nassert     geometric_sum(5) == 16\nassert     geometric_sum(8) == 37\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Exercise 2:\")\nprint(geometric_sum(5))\nprint(geometric_sum(10))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     geometric_sum(3) == 2.0, 'input 3 should return 2.0'\nassert     geometric_sum(4) == 5.0, 'input 4 should return 5.0'\nassert     geometric_sum(5) == 8.0, 'input 5 should return 8.0'\nassert     geometric_sum(6) == 18.0, 'input 6 should return 18.0'\nassert     geometric_sum(7) == 30.0, 'input 7 should return 30.0'\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 3\nassert     geometric_sum(4) == 8\nassert     geometric_sum(5) == 19\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert geometric_sum(4) == 2\nassert geometric_sum(6) == 4\nassert geometric_sum(100) == 99\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert find_Index(1) == 0, \"test case 1 failed\"\nassert find_Index(2) == 1, \"test case 2 failed\"\nassert find_Index(3) == 2, \"test case 3 failed\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Index(3) == 2, \"Should return 2\"\nassert     find_Index(7) == 5, \"Should return 5\"\n\ndef find_Index2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while i < (10**(n-1)) :\n        if i*(i+1)/2 == (10**(n-1) - i):\n            return i\n        i += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_Index2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Index(4) == 5, \"OOPS\"\nassert     find_Index(10) == 10, \"OOPS\"\nassert     find_Index(9) == 8, \"OOPS\"\nassert     find_Index(3) == 0, \"OOPS\"\nassert     find_Index(2) == 1, \"OOPS\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_Index_rec(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_Index(3) == 1 \nassert find_Index(5) == 4 \nassert find_Index(4) == 0 \nassert find_Index(1) == 0\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Index(2) == 1\nassert     find_Index(4) == 2\nassert     find_Index(5) == 3\nassert     find_Index(6) == 4\nassert     find_Index(7) == 5\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the index of smallest triangular number with n digits\n    count = 0\n    # count the number of triangular number with n digits\n    while (count < n): \n        count = count + 1\n        n = n + 1\n    return n - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Index(3) == 0 \nassert     find_Index(4) == 1 \nassert     find_Index(6) == 2 \nassert     find_Index(8) == 3\nassert     find_Index(9) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Index(3)==0 \nassert     find_Index(4)==1 \nassert     find_Index(5)==2 \nassert     find_Index(6)==3 \nassert     find_Index(7)==4 \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_dict(('a', 1, 'b', 2, 'c', 3)) == {'a': 1, 'b': 2, 'c': 3}\nassert tuple_to_dict(('a', 1, 'b', 2, 'c', 3, 'a')) == {'a': 1, 'b': 2, 'c': 3}\nassert tuple_to_dict(('a', 1, 'b', 2, 'c', 3, 'a', 'b')) == {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'b': 2}\nassert tuple_to_dict(('a', 1, 'b', 2, 'c', 3, 'a', 'b', 'c')) == {'a': 1, 'b': 2, 'c': 3, 'a': 1, 'b': 2, 'c': 3}"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict((2, 3, 4, 5)) == {2: 3, 3: 4, 4: 5}\nassert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}\nassert tuple_to_dict((2, 3, 4, 5, 6, 7)) == {2: 3, 3: 4, 4: 5, 5: 6, 6: 7}\nassert tuple_to_dict((5, 2, 1, 4)) == {5: 2, 2: 1, 1: 4}\n\n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple-adjacent-elements/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5,5:None}, \"Should return dictionary with adjacent elements\"\nassert     tuple_to_dict((1,2,3)) == {1:2,2:3,3:None}, \"Should return dictionary with adjacent elements\"\nassert     tuple_to_dict((1,2,3,4)) == {1:2,2:3,3:4,4:None}, \"Should return dictionary with adjacent elements\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_dict((2, 'a')) == {(0, 'a'): (1, 'b')}, \"Fail\"\nassert     tuple_to_dict((3, 'a', 'b')) == {(0, 'a'): (1, 'b'), (1, 'b'): (2, 'a')}, \"Fail\"\nassert     tuple_to_dict((2, 'a', 'b', 'c')) == {(0, 'a'): (1, 'b'), (1, 'b'): (2, 'a'), (2, 'a') : (3, 'c')}, \"Fail\"\nassert     tuple_to_dict((4, 'a', 'b', 'c')) == {(0, 'a'): (1, 'b'), (1, 'b'): (2, 'a'), (2, 'a') : (3, 'c'), (3, 'c') : (4, 'a')}, \"Fail\"\n\ndef first_non_dup(string):\n    '''\n    Write a function that takes a non-empty string and returns the first non-duplicate character\n    Note: O(n)\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_dict((0,1,2,3)) == {(0,1):2, (1,2):3, (2,3):3, (0,3):3}, 'incorrect'\nassert     tuple_to_dict((0,1,2,3,4,5,6,7)) == {(0,1,2):4, (0,3,4):5, (1,3,4):5, (1,4,5):5, (1,2,4):5, (1,2,3,5):5, (2,3,4):5, (2,4,5):5, (3,4,5):5, (3,5,6):6, (4,5,6):6, (4,6,7):7}, 'incorrect'\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99)) == {\n    0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99}\n\nassert tuple_to_dict((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99)) == {\n    0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99}\n\nassert tuple_to_dict((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99)) == {\n    0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using key-value pairs. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple-key-value-pairs/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_dict((1,2,3)) == {1:'a', 2:'b', 3:'c'}\nassert tuple_to_dict((1,3,2)) == {1:'a', 3:'b', 2:'c'}\nassert tuple_to_dict((1,2,3,4)) == {1:'a', 2:'b', 3:'c', 4:'d'}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_dict((1,2,3)) == {\"1\":2,\"2\":3}\nassert     tuple_to_dict((1,2,3,4)) == {\"1\":2,\"2\":3,\"4\":4}\nassert     tuple_to_dict((1,2,3,4,5)) == {\"1\":2,\"2\":3,\"3\":4,\"4\":5}\nassert     tuple_to_dict((1,2,3,4,5,6)) == {\"1\":2,\"2\":3,\"3\":4,\"4\":5,\"5\":6}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4)) == {\n                                            1: 2,\n                                            2: 3,\n                                            3: 4\n                                            }\nassert     tuple_to_dict((1, 2, 3, 4, 5, 6)) == {\n                                            1: 2,\n                                            2: 3,\n                                            3: 4,\n                                            4: 5,\n                                            5: 6\n                                            }\nassert     tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == {\n                                            1: 2,\n                                            2: 3,\n                                            3: 4,\n                                            4: 5,\n                                            5: 6,\n                                            6: 7,\n                                            7: 8,\n                                            8: 9,\n                                            9: 10\n                                            }\n\n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a key-value tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-key-value-tuple-using-adjacent-elements/\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same(['a', 'a', 'a', 'b', 'b', 'c', 'c', 'c']) == True\nassert     all_Characters_Same(['a', 'b', 'b', 'b', 'b', 'c', 'c', 'c']) == False\nassert     all_Characters_Same([]) == False\nassert     all_Characters_Same([\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"C\"]) == False"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Characters_Same('abcdef')     ==     True\nassert     all_Characters_Same('abcde')     ==     False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('abcd') == True\nassert all_Characters_Same('abcd') == False\nassert all_Characters_Same('abce') == False\nassert all_Characters_Same('abce') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('abc') == True, \"Should be True\"\nassert     all_Characters_Same('abc') == False, \"Should be False\"\nassert     all_Characters_Same('abc') == True, \"Should be True\"\nassert     all_Characters_Same('abc') == True, \"Should be True\"\nassert     all_Characters_Same('abc') == False, \"Should be False\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Characters_Same(    \"abc\",    \"abc\")     == True\nassert     all_Characters_Same(    \"abd\",    \"abc\")     == False\nassert     all_Characters_Same(    \"a\",    \"a\")     == True\nassert     all_Characters_Same(    \"aa\",    \"aa\")     == True\nassert     all_Characters_Same(    \"aaa\",    \"aaa\")     == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nall_Characters_Same('cdad') == True, 'Wrong Answer'\nall_Characters_Same('ABC') == False, 'Wrong Answer'\nall_Characters_Same('ABBA') == True, 'Wrong Answer'\nall_Characters_Same('ABBB') == False, 'Wrong Answer'\nall_Characters_Same('ABBC') == True, 'Wrong Answer'\n\nprint('all_Characters_Same() Test Passed!')\nprint('\\n')\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nall_Characters_Same('a') == False\nassert all_Characters_Same('AA') == True\nassert all_Characters_Same('Aa') == False\nassert all_Characters_Same('AAAAA') == True\nassert all_Characters_Same('aAAa') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same(\"AA\") == True, \"should be true\"\nassert     all_Characters_Same(\"ABC\") == False, \"should be false\"\nassert     all_Characters_Same(\"AAABBC\") == True, \"should be true\"\nassert     all_Characters_Same(\"AAABBC\") == False, \"should be false\"\nassert     all_Characters_Same(\"AAABBC\") == True, \"should be true\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert all_Characters_Same('A') == True\nassert all_Characters_Same('C') == False\nassert all_Characters_Same('AB') == True\nassert all_Characters_Same('BC') == True\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_tetrahedron(5) == 10\nassert area_tetrahedron(6) == 20"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(area_tetrahedron(3)) #6.5\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('area_tetrahedron', area_tetrahedron(5))\n\n\ndef area_rectangle(length, width):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert area_tetrahedron(2) == 4\nassert area_tetrahedron(3) == 6\nassert area_tetrahedron(4) == 8\nassert area_tetrahedron(5) == 10\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_tetrahedron(3) == 12\nassert    area_tetrahedron(4) == 20\nassert    area_tetrahedron(5) == 35\n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_tetrahedron(1) == 1.0\nassert     area_tetrahedron(2) == 1.5\nassert     area_tetrahedron(3) == 1.73205142362\nassert     area_tetrahedron(4) == 1.8770782764\nassert     area_tetrahedron(5) == 2.1740316679\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nrotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert \nrotate_right([1,2,3,4,5,6,7], 3) == [4,5,6,1,2,7,3]\nassert \nrotate_right([1,2,3,4,5], 5) == [5,1,2,3,4]\nassert \nrotate_right([1,2,3,4,5], 7) == [1,2,3,4,5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rotate_right([], 0) == []\nassert     rotate_right([], 1) == []\nassert     rotate_right([1], 1) == [1]\nassert     rotate_right([1, 2], 1) == [2, 1]\nassert     rotate_right([1, 2, 3], 1) == [3, 2, 1]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert \nrotate_right([1,2,3,4,5], -3) == [5,1,2,3,4]\nassert \nrotate_right([1,2,3,4,5], 1) == [2,3,4,5,1]\nassert \nrotate_right([1,2,3,4,5], 6) == [3,4,5,1,2]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rotate_right([1, 2, 3, 4], 2) == [3, 4, 1, 2], 'wrong'\nassert     rotate_right([1, 2, 3, 4], -2) == [1, 2, 3, 4], 'wrong'\nassert     rotate_right([1, 2, 3, 4, 5, 6, 7, 8], -5) == [5, 6, 7, 8, 1, 2, 3, 4], 'wrong'\nassert     rotate_right([1, 2, 3, 4], 2) == [1, 2, 3, 4], 'wrong'\n\ndef merge_intervals(intervals):\n    '''\n    Write a function to merge all overlapping intervals. You may assume the intervals were initially sorted according to their start times.\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rotate_right([1,2,3,4,5,6], 3) == [3,4,5,6,1,2]\nassert     rotate_right([1,2,3,4,5], 4) == [5,1,2,3,4]\nassert     rotate_right([1,2,3,4,5,6,7], 6) == [6,7,1,2,3,4,5]\nassert     rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     rotate_right([1,2,3,4,5], -1) == [3,4,5,1,2]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert     rotate_right([], 2) == []\nassert     rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     rotate_right([1,2,3,4,5], 1) == [2,3,4,5,1]\nassert     rotate_right([1,2,3,4,5], -1) == [4,5,1,2,3]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_none(None) == True\nassert     check_none((0,1,2,3)) == True\nassert     check_none((0,'hello',False,None)) == False\nassert     check_none((0,1,2,'',False,'',None)) == False\nassert     check_none((0,1,2,0,True,1,True)) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none(('a', None, 1))     == False\nassert     check_none(('a', 1, None))     == False\nassert     check_none((None, None, 1))     == False\nassert     check_none(('a', None, 1))     == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_none((1,2,3,4,5))     ==    False, \"1st tuple\"\nassert     check_none((1,2,3,None,5))     ==    True, \"2nd tuple\"\nassert     check_none((None,2,3,4,5))     ==    True, \"3rd tuple\"\nassert     check_none((1,None,3,4,5))     ==    True, \"4th tuple\"\nassert     check_none((None,2,None,4,5))     ==    True, \"5th tuple\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none((None,)) == False, \"test_none\"\nassert     check_none((1, None, None)) == True, \"test_none\"\nassert     check_none((None, None, None, 1, None)) == True, \"test_none\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none((1,2,3,4,5,6,None,7,8,9)) == True, \"True output is expected\"\nassert     check_none((1,2,3,None,5,6,7,8,9)) == False, \"False output is expected\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none((1,None,4)) == True, \"First\"\nassert     check_none((1,2,4)) == False, \"Second\"\nassert     check_none((None,None,4)) == True, \"Third\"\nassert     check_none((1,None,4,3)) == False, \"Fourth\"\nassert     check_none((None,None,None)) == True, \"Fifth\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none((1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none((None,1,2)) == False\nassert     check_none((2,None,3)) == True\nassert     check_none((None,2,None)) == True\n\ndef check_valid_tuple(tup):\n    '''\n    Write a function to check if the given tuple is valid or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntest_tup = (1,2,3,4,None)\ncheck_none(test_tup) == True\n\ntest_tup = (1,2,3,4)\ncheck_none(test_tup) == False"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none(()) == False\nassert     check_none((None,)) == True\nassert     check_none((None, None, None, None, None, None)) == True\nassert     check_none((None, 'abcd')) == False\nassert     check_none((None, None, 'abcd', 'abcd', 'abcd', 'abcd', 'abcd')) == False"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert divisible_by_digits(0, 100) == []\nassert divisible_by_digits(10, 20) == [10]\nassert divisible_by_digits(20, 50) == [20]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisible_by_digits(1, 1000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     divisible_by_digits(3, 100) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     divisible_by_digits(34, 1000) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     divisible_by_digits(1001, 1000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     divisible_by_digits(1000, 1000) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisible_by_digits(10, 10) == True\nassert     divisible_by_digits(20, 20) == True\nassert     divisible_by_digits(30, 30) == False\nassert     divisible_by_digits(40, 40) == True\nassert     divisible_by_digits(50, 50) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(1000, 2000) == True\nassert     divisible_by_digits(1000, 1000) == True\nassert     divisible_by_digits(1000, 1001) == False\nassert     divisible_by_digits(0, 1000) == True\nassert     divisible_by_digits(1000, 0) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndivisible_by_digits(0,100) == {0, 1, 4, 5, 10, 20, 25, 50, 51, 60, 70, 80, 90, 100}"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(100,200) == [100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisible_by_digits(12,14) ==     True\nassert     divisible_by_digits(10,12) ==     True\nassert     divisible_by_digits(100,127) ==     True\nassert     divisible_by_digits(8,40) ==     False"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(sector_area(1,360)) # None\nprint(sector_area(2,30)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,0)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,60)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,240)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None\nprint(sector_area(2,360)) # None"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    '''\n    Write a function to find the area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    assert sector_area(5,45) == 0\n    assert sector_area(5,360) == 0\n    assert sector_area(5,3) == 5*math.pi*(5**2)\n    "
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sector_area(1,90) == 3.14*1.5\nassert sector_area(1,0) == 3.14*1.5\nassert sector_area(1,360) == 3.14*1.5\nassert sector_area(1,360+90) == None\nassert sector_area(1,360+90+90) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    sector_area(1,360) == None\n    sector_area(1,2) == None\n    sector_area(1,0) == None\n    sector_area(1,-360) == None\n    sector_area(2,360) == None\n    sector_area(2,2) == None\n    sector_area(2,0) == None\n    sector_area(2,-360) == None\n    sector_area(3,360) == None\n    sector_area(3,2) == None\n    sector_area(3,0) == None\n    sector_area(3,-360) == None\n    sector_area(4,360) == None\n    sector_area(4,2) == None\n    sector_area(4,0) == None\n    sector_area(4,-360) == None\n    sector_area(5,360) == None\n    sector_area(5,2) == None\n    sector_area(5,0) == None\n    sector_area(5,-360) == None\n    sector_area(6,360) == None\n    sector_area(6,2) == None\n    sector_area(6,0) == None\n    sector_area(6,-360) == None\n    sector_area(7,360) == None\n    sector_area(7,2) == None\n    sector_area(7,0) == None\n    sector_area(7,-360) == None\n    sector_area(8,360) == None\n    sector_area(8,2) == None\n    sector_area(8,0) == None\n    sector_area(8,-360) == None\n    sector_area(9,360) == None\n    sector_area(9,2) == None\n    sector_area(9,0) == None\n    sector_area(9,-360) == None\n    sector_area(10,360) == None\n    sector_area(10,2) == None\n    sector_area(10,0) == None\n    sector_area(10,-360) == None\n    sector_area(11,360) == None\n    sector_area(11,2) == None\n    sector_area(11,0) == None\n    sector_area(11,-360) == None\n    sector_area(12,360) == None\n    sector_area(12,2) == None\n    sector_area(12,0) == None\n    sector_area(12,-360) == None\n    sector_area(13,360) == None\n    sector_area(13,2) == None\n    sector_area(13,0) == None\n    sector_area(13,-360) == None\n    sector_area(14,360) == None\n    sector_area(14,2) == None\n    sector_area(14,0) == None\n    sector_area(14,-360) == None\n    sector_area(15,360) == None\n    sector_area(15,2) == None\n    sector_area(15,0) == None\n    sector_area(15,-360) == None\n    sector_area(16,360) == None\n    sector_area(16,2) == None\n    sector_area(16,0) == None\n    sector_area(16,-360) == None\n    sector_area(17,360) == None\n    sector_area(17,2) == None\n    sector_area(17,0) == None\n    sector_area(17,-360) == None\n    sector_area(18,360) == None\n    sector_area(18,2) == None\n    sector_area(18,0) == None\n    sector_area(18,-360) == None\n    sector_area(19,360) == None\n    sector_area(19,2) == None\n    sector_area(19,0) == None\n    sector_area(19,-360) == None\n    sector_area(20,360) == None\n    sector_area(20,2) == None\n    sector_area(20,0) == None\n    sector_area(20,-360) == None\n    sector_area(21,360) == None\n    sector_area(21,2) == None\n    sector_area(21,0) == None\n    sector_area(21,-360) == None\n    sector_area(22,360) == None\n    sector_area(22,2) == None\n    sector_area(22,0) == None\n    sector_area(22,-360) == None\n    sector_area(23,360) == None\n    sector_area(23,2) == None\n    sector_area(23,0) == None\n    sector_area(23,-360) == None\n    sector_area(24,360) == None\n    sector_area(24,2) == None\n    sector_area(24,0) == None\n    sector_area(24,-360) == None\n    sector_area(25,360) == None\n    sector_area(25,2) == None\n    sector_area(25,0) == None\n    sector_area(25,-360) == None\n    sector_area(26,360) == None\n    sector_area(26,2) == None\n    sector_area(26,0) == None\n    sector_area(26,-360) == None\n    sector_area(27,360) == None\n    sector_area(27,2) == None\n    sector_area(27,0) == None\n    sector_area(27,-360) == None\n    sector_area(28,360) == None\n    sector_area(28,2) == None\n    sector_area(28,0) == None\n    sector_area(28,-360) == None\n    sector_area(29,360) == None\n    sector_area(29,2) == None\n    sector_area(29,0) == None\n    sector_area(29,-360) == None\n    sector_area(30,360) == None\n    sector_area(30,2) == None\n    sector_area(30,0) == None\n    sector_area(30,-360) == None\n    sector_area(31,360) == None\n    sector_area(31,2) == None\n    sector_area(31,0) == None\n    sector_area(31,-360) == None\n    sector_area(32,360) == None\n    sector_area(32,2) == None\n    sector_area(32,0) == None\n    sector_area(32,-360) == None\n    sector_area(33,360) == None\n    sector_area(33,2) == None\n    sector_area(33,0) == None\n    sector_area(33,-360) == None\n    sector_area(34,360) == None\n    sector_area(34,2) == None\n    sector_area(34,0) == None\n    sector_area(34,-360) == None\n    sector_area(35,360) == None\n    sector_area(35,2) == None\n    sector_area(35,0) == None\n    sector_area(35,-360) == None\n    sector_area(36,360) == None\n    sector_area(36,2) == None\n    sector_area(36,0) == None\n    sector_area(36,-360) == None\n    sector_area(37,360) == None\n    sector_area(37,2) == None\n    sector_area(37,0) == None\n    sector_area(37,-360) == None\n    sector_area(38,360) == None\n    sector_area(38,2) == None\n    sector_area(38,0) == None\n    sector_area(38,-360) == None\n    sector_area(39,360) == None\n    sector_area(39,2) == None\n    sector_area(39,0) == None\n    sector_area(39,-360) == None\n    sector_area(40,360) == None\n    sector_area(40,2) == None\n    sector_area(40,0) == None\n    sector_area(40,-360) == None\n    sector_area(41,360) == None\n    sector_area(41,2) == None\n    sector_area(41,0) == None\n    sector_area(41,-360) == None\n    sector_area(42,36"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sector_area(3.2, 3.4) == None, \"incorrect\"\nassert sector_area(3.2, 360) == None, \"incorrect\"\nassert sector_area(3.2, -360) == None, \"incorrect\"\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sector_area(1,0) == None\nassert     sector_area(1,359) == None\nassert sector_area(3,0) == 0.5*math.pi*3**2\nassert sector_area(3,90) == 2*math.pi*3**2\nassert sector_area(3,180) == 2*math.pi*3**2\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sector_area(1, math.pi) == math.pi * math.pi / 4\nassert     sector_area(1, 3.14) == None\nassert sector_area(1, 1) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sector_area(1,30) == 7.5, 'incorrect'\nassert     sector_area(1,360) == None, 'incorrect'\nassert     sector_area(1,0) == None, 'incorrect'\n\ndef get_angle(r1,r2):\n    '''\n    Write a function to find angle between two points\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lcs_of_four(X, Y, Z, T): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lcs_of_three('aba','acb','bd') == 'ab'\nassert     lcs_of_three('aaa','a','a') == 'a'\nassert     lcs_of_three('abc','abc','abc') == 'abc'\nassert     lcs_of_three('aaa','a','aa') == 'aa'\nassert     lcs_of_three('acb','a','cb') == 'cb'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclass Solution:\n    def lcs_of_three(X, Y, Z):\n        '''\n        Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n        '''\n        # initialize dp table\n        dp_table = [[[0 for i in range(len(Z)+1)] for j in range(len(Y)+1)] for k in range(len(X)+1)]\n        \n        # fill first row and column\n        for i in range(1, len(X)+1):\n            for j in range(1, len(Y)+1):\n                for k in range(1, len(Z)+1):\n                    if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                        dp_table[i][j][k] = 1 + dp_table[i-1][j-1][k-1]\n                    else:\n                        dp_table[i][j][k] = max(dp_table[i-1][j][k], dp_table[i][j-1][k])\n                        dp_table[i][j][k] = max(dp_table[i][j-1][k], dp_table[i][j][k-1])\n                        dp_table[i][j][k] = max(dp_table[i][j][k], dp_table[i-1][j][k])\n        return dp_table[-1][-1][-1]"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lcs_of_three('AGGTAB', 'GXTXAYB', 'TXTXAYB') == 'GXTXAYB'\nassert     lcs_of_three('AGGTAB', 'GXTXAYB', 'AGGTAB') == 'AGGTAB'\nassert     lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAYB') == 'AGGTAB'\nassert     lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAB') == 'GXTXAB'\nassert     lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAB') == 'GXTXAB'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nclass Solution:\n    def lcs(self, X, Y, Z):\n        pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lcs_of_three( 'abcde', 'ace', 'abc' ) == 'c'\nassert     lcs_of_three( 'abcde', 'ace', 'x' ) == ''\nassert     lcs_of_three( 'abcde', 'ace', 'abcd' ) == 'd'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"XYZHG\") == \"AB\"\nassert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"XYZHG\") == \"AB\"\nassert     lcs_of_three(\"ABCDGH\",\"XYZHG\",\"AEDFHR\") == \"AB\"\nassert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"XYZHG\") == \"AB\"\nassert     lcs_of_three(\"ABCDGH\",\"ABCDEFGH\",\"ABCDEFGH\") == \"\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lcs_of_four(X, Y, Z, A): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     capital_words_spaces(\"This is the first sentence\") == \"This is the first sentence\", \"incorrect capital_words_spaces function\"\nassert     capital_words_spaces(\"Hello, World!\") == \"Hello, World!\", \"incorrect capital_words_spaces function\"\nassert     capital_words_spaces(\"Hello, world!\") == \"Hello, world!\", \"incorrect capital_words_spaces function\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     capital_words_spaces(\n    \"  Hello World!  \") == \" Hello World!  \", \"Wrong!\"\nassert capital_words_spaces(\n    \"  Hello World!  \") == \" Hello World!  \", \"Wrong!\"\nassert capital_words_spaces(\n    \"  Hello World!  \") == \" Hello World!  \", \"Wrong!\"\nassert capital_words_spaces(\n    \"  Hello World!  \") == \" Hello World!  \", \"Wrong!\"\n\nprint(\"Test 1:\", capital_words_spaces(\"  Hello World!  \") == \" Hello World!  \", \"OK\")\nprint(\"Test 2:\", capital_words_spaces(\"  Hello World!  \") == \" Hello World!  \", \"OK\")\nprint(\"Test 3:\", capital_words_spaces(\"  Hello World!  \") == \" Hello World!  \", \"OK\")\nprint(\"Test 4:\", capital_words_spaces(\"  Hello World!  \") == \" Hello World!  \", \"OK\")\nprint(\"Test 5:\", capital_words_spaces(\"  Hello World!  \") == \" Hello World!  \", \"OK\")\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert capital_words_spaces('') == ''\nassert capital_words_spaces('hello') == 'Hello'\nassert capital_words_spaces('HelL o') == 'HelL o'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef capital_words_spaces_2(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return \" \".join(w[0].upper() + w for w in str1.split())\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces(\"python\") == \"Python\"\nassert     capital_words_spaces(\"Python\") == \"Python\"\nassert     capital_words_spaces(\"Python3\") == \"Python 3\"\nassert     capital_words_spaces(\"  Python   \") == \"Python   \"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert capital_words_spaces('Sfjdklsfjdklsf') == 'S F JDKLSF JDKLSF'\n\nassert capital_words_spaces('This is a Sentence') == 'Th Is A Sentence'"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     capital_words_spaces( \"hello world\") == \"Hello World\"\nassert capital_words_spaces( \"I AM DR.J.P.\") == \"I AM Dr.J.P.\"\nassert capital_words_spaces( \"hello\") == \"Hello\"\nassert capital_words_spaces( \"hello world\") == \"Hello world\"\nassert capital_words_spaces(\"hello\") == \"Hello\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     capital_words_spaces(\"First Name: LYPH\") == \"First Name: LYPH\"\nassert     capital_words_spaces(\"First Name: LYPH First Name: LYPH\") == \"First Name: LYPH First Name: LYPH\"\nassert     capital_words_spaces(\"First Name: LYPH First Name: LYPH First Name: LYPH\") == \"First Name: LYPH First Name: LYPH First Name: LYPH\"\nassert     capital_words_spaces(\"First Name: LYPH First Name: LYPH First Name: LYPH First Name: LYPH First Name: LYPH First Name: LYPH\") == \"First Name: LYPH First Name: LYPH First Name: LYPH First Name: LYPH First Name: LYPH First Name: LYPH First Name: LYPH\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(capital_words_spaces(\"This is a test string.\"))\nprint(capital_words_spaces(\"This is a test string.\"))\n\nassert\nprint(capital_words_spaces(\"This is a test string.\"))\n\nassert\nprint(capital_words_spaces(\"This is a test string.\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     capital_words_spaces('I like basketball') == 'I like basketball'\nassert     capital_words_spaces('I Like Basketball') == 'I like Basketball'\nassert     capital_words_spaces('i like basketball') == 'I like basketball'\nassert     capital_words_spaces('I Like BAAGHT') == 'I Like BAAGHT'\nassert     capital_words_spaces('I Like BAAGHT') == 'I Like BAAGHT'\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nnums_str = ['1', '2', '3', '12', '3']\nsorted_nums_str = sort_numeric_strings(nums_str)\nassert sorted_nums_str == ['1', '2', '3', '3', '12'"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numeric_strings(['-','1','2','3','4','5','6','7','8','9']) == ['1','2','3','4','5','6','7','8','9','-']\nassert     sort_numeric_strings(['1','2','3','4','5','6','7','8','9','-']) == ['1','2','3','4','5','6','7','8','9','-']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsort_numeric_strings([\"1\", \"1000\", \"1000\", \"2\"]) == [\"1\", \"2\", \"1000\", \"1000\"]"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numeric_strings(['21', '35', '45', '9', '3']) == ['3', '9', '9', '3', '35', '21', '45', '45', '35']\nassert     sort_numeric_strings(['3', '3', '3', '35', '9', '9', '21', '35', '21']) == ['9', '9', '3', '3', '35', '35', '21', '21', '21']\nassert     sort_numeric_strings(['3', '3', '3', '35', '9', '9', '21', '35', '21', '9', '21']) == ['9', '9', '3', '3', '35', '35', '21', '21', '21', '9', '9']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numeric_strings([\"5\", \"6\", \"10\"]) == [\"10\", \"6\", \"5\"]\nassert     sort_numeric_strings([\"7\", \"4\", \"2\"]) == [\"2\", \"4\", \"7\"]\nassert     sort_numeric_strings([\"9\", \"3\", \"7\", \"8\"]) == [\"3\", \"7\", \"9\", \"8\"]\n\ndef sort_numeric_strings_optimized(nums_str):\n    '''\n    Another optimized version of the sort_numeric_strings function. \n    Reference: https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if not nums_str:\n        return []\n\n    def max_char_index(char):\n        max_char_index = 0\n        for i, ch in enumerate(nums_str):\n            if ch == char:\n                max_char_index = i\n        return max_char_index\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numeric_strings([\"3\", \"7\", \"1\", \"9\", \"4\", \"2\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"7\"]\nassert     sort_numeric_strings([\"1\", \"2\", \"4\", \"5\", \"3\", \"9\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"9\"]\nassert     sort_numeric_strings([\"1\", \"9\", \"2\", \"4\", \"5\", \"3\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"9\"]\nassert     sort_numeric_strings([\"9\", \"2\", \"3\", \"4\", \"5\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"9\"]\nassert     sort_numeric_strings([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numeric_strings(['4', '10', '10', '50', '2', '5']) == ['2', '5', '4', '50', '10', '10']\nassert     sort_numeric_strings(['50', '10', '10', '4', '2', '5']) == ['2', '5', '4', '50', '10', '10']\nassert     sort_numeric_strings(['100', '10', '10', '4', '2', '5']) == ['2', '5', '4', '10', '10', '100']\nassert     sort_numeric_strings(['50', '10', '10', '4', '2', '5', '1', '10']) == ['2', '5', '4', '10', '10', '50', '1', '10']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sort_strings_by_length(strings_list):\n    '''\n    Write a function to sort the list of strings based on length of strings. You can assume that all the strings contain only uppercase latin letters.\n    '''\n    pass\n\ndef sort_strings_by_length_and_count_of_upper_characters(strings_list):\n    '''\n    Write a function to sort the list of strings based on length of strings and count of upper case characters in the strings. You can assume that all the strings contain only uppercase latin letters.\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings(['1','2','3','4','5','6','7','8','9','10']) ==     [ '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\nassert     sort_numeric_strings(['0','3','6','2','5','9','1','4','8']) ==     [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     sort_numeric_strings(['0','2','3','4','5','6','7','8','9','10']) ==     [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     sort_numeric_strings(['3','2','1','4','5','6','7','8','9','0']) ==     [ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_tuple([1,2,3], (5,6,7)) ==     [1,2,3,5,6,7], 'Wrong answer'\nassert     add_tuple([1,2,3], (5,6,7,8)) ==     [1,2,3,5,6,7,8], 'Wrong answer'"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_tuple([1,2,3], (3,4,5)) == (1,2,3,4,5)\nassert     add_tuple([1,2], (3,4,5)) == (1,2,3,4,5)\nassert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([1,2], (3,4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_tuple([], (1, 2, 3)) == (1, 2, 3)\nassert     add_tuple([(1, 2, 3)], (3, 4, 5)) == (1, 2, 3, 3, 4, 5)\nassert     add_tuple([(1, 2, 3)], (2, 3, 4)) == (1, 2, 3, 2, 3, 4)\nassert     add_tuple([(1, 2, 3), (2, 3, 4)], (4, 5, 6)) == (1, 2, 3, 2, 3, 4, 4, 5, 6)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nassert     add_tuple([], (4, 5, 6)) == [4, 5, 6]\nassert     add_tuple([1, 2, 3], ()) == [1, 2, 3]\nassert     add_tuple([1, 2, 3], (4, )) == [1, 2, 3, 4]\n\ndef is_odd(num):\n    '''\n    Write a function to determine if the given number is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_tuple([], (1,2,3)) == [1,2,3], 'Failed 1st example'\nassert     add_tuple([(1,2,3)], (4,5,6)) == [(1,2,3), (4,5,6)], 'Failed 2nd example'\nassert     add_tuple([(1,2,3), (4,5,6)], (7,8,9)) == [(1,2,3), (4,5,6), (7,8,9)], 'Failed 3rd example'\nassert     add_tuple([(1,2,3), (4,5,6), (7,8,9)], (10,11,12)) == [(1,2,3), (4,5,6), (7,8,9), (10,11,12)], 'Failed 4th example'\nassert     add_tuple([(1,2,3), (4,5,6), (7,8,9), (10,11,12)], (13,14,15)) == [(1,2,3), (4,5,6), (7,8,9), (10,11,12), (13,14,15)], 'Failed 5th example'\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([1,2,3], (4,5,6,1)) == (1,2,3,4,5,6,1)\nassert     add_tuple([1,2,3], (4,5,6,2)) == (1,2,3,4,5,6,2)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef flatten_list(test_list):\n    '''\n    Write a function that takes a list of lists and flattens it into a single list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_tuple([],(1,2,3,4,5)) == [(1,2,3,4,5)], 'add_tuple Failed'\nassert add_tuple([(1,2,3,4,5)], (6,7,8,9,10)) == [(1,2,3,4,5),(6,7,8,9,10)], 'add_tuple Failed'\nassert add_tuple([(1,2,3,4,5),(6,7,8,9,10)], (11,12,13,14,15)) == [(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15)], 'add_tuple Failed'\nassert add_tuple([(1,2,3,4,5),(6,7,8,9,10)], (11,12,13,14,15,16)) == [(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15,16)], 'add_tuple Failed'\nassert add_tuple([(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15,16)], (17,18,19,20,21)) == [(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15,16),(17,18,19,20,21)], 'add_tuple Failed'\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_heap([1,2,3,4,5,6,7]), \n    check_min_hea"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_min_heap_helper([5,6,2,8,3], 3) == True, 'Incorrect'\nassert     check_min_heap_helper([5,6,2,8,3], 4) == False, 'Incorrect'\nassert     check_min_heap_helper([5,6,2,8,3], 5) == False, 'Incorrect'\nassert     check_min_heap_helper([5,6,2,8,3], 2) == False, 'Incorrect'\nassert     check_min_heap_helper([5,6,2,8,3], 1) == False, 'Incorrect'\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_min_heap_helper([1, 2, 3, 4, 5], 2) == True, \"Error. Min Heap\"\nassert     check_min_heap_helper([2, 1, 3, 5, 4], 2) == False, \"Error. Min Heap\"\nassert     check_min_heap_helper([3, 1, 2, 4, 5], 2) == True, \"Error. Min Heap\"\nassert     check_min_heap_helper([3, 1, 2, 4, 5], 0) == True, \"Error. Min Heap\"\nassert     check_min_heap_helper([1, 2, 3, 4, 5], 0) == True, \"Error. Min Heap\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_min_heap_helper([4, 1, 3, 2], True) == True\nassert     check_min_heap_helper([1, 2, 3, 4], False) == True\nassert     check_min_heap_helper([-5, 5, -1, 1], True) == False\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] >= arr[i + 1]:\n                return False\n        if i == len(arr) - 1:\n            if arr[i] >= arr[i - 1]:\n                return False\n\n        if i > 0 and i < len(arr) - 1:\n            if arr[i] >= arr[i + 1] and arr[i] >= arr[i - 1]:\n                return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncheck_min_heap_helper([], 0)\ncheck_min_heap_helper([1], 0)\ncheck_min_heap_helper([1, 3], 0)\ncheck_min_heap_helper([1, 3, 2], 0)\ncheck_min_heap_helper([1, 2, 3], 0)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 0)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 1)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 2)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 3)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 4)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 5)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 6)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 7)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 8)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 9)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 10)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 11)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 12)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 13)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 14)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 15)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 16)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 17)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 18)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 19)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 20)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 21)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 22)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 23)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 24)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 25)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 26)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 27)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 28)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 29)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 30)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 31)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 32)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 33)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 34)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 35)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 36)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 37)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 38)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 39)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 40)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 41)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 42)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 43)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 44)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 45)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 46)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 47)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 48)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 49)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 50)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 51)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 52)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 53)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 54)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 55)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 56)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 57)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 58)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 59)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 60)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 61)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 62)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 63)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 64)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 65)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 66)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 67)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 68)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 69)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 70)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 71)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 72)\ncheck_min_heap_helper([1, 3, 2, 6, 5, 4], 73)\ncheck_min_heap_helper([1, 3, "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_min_heap_helper2(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        for i in range(len(arr)):\n            if i!= 0 and arr[i] < arr[i - 1]:\n                return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 4\nassert     jacobsthal_num(4) == 7\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\n[1, 1, 2, 4, 7, 11, 18, 29,...]\n'''\n\ndef jacobsthal_all(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n\nassert jacobsthal_all(1) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(10) == 11\nassert     jacobsthal_num(20) == 171\nassert     jacobsthal_num(50) == 351\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert jacobsthal_num(0) == 0, \"jacobsthal_num(0) = 0 is wrong.\"\nassert jacobsthal_num(1) == 1, \"jacobsthal_num(1) = 1 is wrong.\"\nassert jacobsthal_num(2) == 1, \"jacobsthal_num(2) = 1 is wrong.\"\nassert jacobsthal_num(3) == 1, \"jacobsthal_num(3) = 1 is wrong.\"\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(3) == 2\nassert jacobsthal_num(4) == 2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 3\nassert     jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \njacobsthal_num(1) == 1\njacobsthal_num(2) == 1\njacobsthal_num(3) == 1\njacobsthal_num(5) == 1\njacobsthal_num(8) == 1\njacobsthal_num(10) == 2\njacobsthal_num(15) == 3\njacobsthal_num(21) == 5\njacobsthal_num(43) == 11\njacobsthal_num(85) == 2731\njacobsthal_num(171) == 683\njacobsthal_num(341) == 1365\njacobsthal_num(683) == 2731\njacobsthal_num(1001) == 7685\njacobsthal_num(1071) == 931\njacobsthal_num(1093) == 931\njacobsthal_num(1251) == 1633\njacobsthal_num(1365) == 2731\njacobsthal_num(1441) == 2731\njacobsthal_num(1531) == 2731\njacobsthal_num(1651) == 2731\njacobsthal_num(1731) == 2731\njacobsthal_num(1831) == 2731\njacobsthal_num(1931) == 2731\njacobsthal_num(2031) == 2731\njacobsthal_num(2131) == 2731\njacobsthal_num(2231) == 2731\njacobsthal_num(2331) == 2731\njacobsthal_num(2431) == 2731\njacobsthal_num(2531) == 2731\njacobsthal_num(2631) == 2731\njacobsthal_num(2731) == 2731\njacobsthal_num(2831) == 2731\njacobsthal_num(2931) == 2731\njacobsthal_num(3031) == 2731\njacobsthal_num(3131) == 2731\njacobsthal_num(3231) == 2731\njacobsthal_num(3431) == 2731\njacobsthal_num(3631) == 2731\njacobsthal_num(3831) == 2731\njacobsthal_num(3931) == 2731\njacobsthal_num(4031) == 2731\njacobsthal_num(4131) == 2731\njacobsthal_num(4231) == 2731\njacobsthal_num(4431) == 2731\njacobsthal_num(4631) == 2731\njacobsthal_num(4831) == 2731\njacobsthal_num(5131) == 2731\njacobsthal_num(5211) == 2731\njacobsthal_num(5311) == 2731\njacobsthal_num(5411) == 2731\njacobsthal_num(5511) == 2731\njacobsthal_num(5611) == 2731\njacobsthal_num(5711) == 2731\njacobsthal_num(5811) == 2731\njacobsthal_num(5911) == 2731\njacobsthal_num(6011) == 2731\njacobsthal_num(6211) == 2731\njacobsthal_num(6311) == 2731\njacobsthal_num(6411) == 2731\njacobsthal_num(6511) == 2731\njacobsthal_num(6611) == 2731\njacobsthal_num(6711) == 2731\njacobsthal_num(6811) == 2731\njacobsthal_num(6911) == 2731\njacobsthal_num(7011) == 2731\njacobsthal_num(7211) == 2731\njacobsthal_num(7311) == 2731\njacobsthal_num(7411) == 2731\njacobsthal_num(7511) == 2731\njacobsthal_num(7611) == 2731\njacobsthal_num(7711) == 2731\njacobsthal_num(7811) == 2731\njacobsthal_num(7911) == 2731\njacobsthal_num(8011) == 2731\njacobsthal_num(8211) == 2731\njacobsthal_num(8311) == 2731\njacobsthal_num(8411) == 2731\njacobsthal_num(8511) == 2731\njacobsthal_num(8611) == 2731\njacobsthal_num(8711) == 2731\njacobsthal_num(8811) == 2731\njacobsthal_num(8911) == 2731\njacobsthal_num(9011) == 2731\njacobsthal_num(9211) == 2731\njacobsthal_num(9311) == 2731\njacobsthal_num(9411) == 2731\njacobsthal_num(9511) == 2731\njacobsthal_num(9611) == 2731\njacobsthal_num(9711) == 2731\njacobsthal_num(9811) == 2731\njacobsthal_num(9911) == 2731\njacobsthal_num(10000) == 2731\njacobsthal_num(10001) == 2731\njacobsthal_num(10002) == 2731\njacobsthal_num(10003) == 2731\njacobsthal_num(10004) == 2731\njacobsthal_num(10005) == 2731\njacobsthal_num(10006) == 2731\njacobsthal_num(10007) == 2731\njacobsthal_num(10008) == 2731\njacobsthal_num(10009) == 2731\njacobsthal_num(10010) == 2731\njacobsthal_num(10011) == 2731\njacobsthal_num(10012) == 2731\njacobsthal_num(10013) == 2731\njacobsthal_num(10014) == 2731\njacobsthal_num(10015) == 2731\njacobsthal_num(10016) == 2731\njacobsthal_num(10017) == 2731\njacobsthal_num(10018) == 2731\njacobsthal_num(10019) == 2731\njacobsthal_num(10020) == 2731\njacobsthal_num(10021) == 2731\njacobsthal_num(10022) == 2731\njacobsthal_num(10023) == 2731\njacobsthal_num(10024) == 2731\njacobsthal_num(10025) == 2731\njacobsthal_num(10026) == 2731\njacobsthal_num(10027) == 2731\njacobsthal_num(10028) == 2731\njacobsthal_num(10029) == 2731\njacobsthal_num(10030) == 2731\njacobsthal_num(10031) == 2731\njacobsthal_num(10032) == 2731\njacobsthal_num(10033) == 2731\njacobsthal_num(10034) == 2731\njacobsthal_num(10035) == 2731\njacobsthal_num(10036) == 2731\njacobsthal_num(10037) == 2731\njacobsthal_num(10038) == 2731\njacobsthal_num(10039) == 2731\njacobsthal_num(10040) == 2731\njacobsthal_num(10041) == 2731\njacobsthal_num(10042) == 2731\njacobsthal_num(10043) == 2731\njacobsthal_num(10044) == 2731\njacobsthal_num(10045) == 2731\njacobsthal_num(10046) == 2731\njacobsthal_nu"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_k([(2, 3, 4), (5, 8, 9), (1, 2, 3), (5, 7, 8)], 2) == [(1, 2, 3), (5, 7, 8)]\nassert     min_k([(2, 3, 4), (5, 8, 9), (1, 2, 3), (5, 7, 8)], 3) == []\nassert     min_k([(2, 3, 4), (5, 8, 9), (1, 2, 3), (5, 7, 8)], 1) == []\n\nprint(\"min_k Tests are passed!\")"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 2) == [1, 3]\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [1, 2, 3]\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 1) == [1]\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 0) == []\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 5) == [1, 3, 4, 5, 6]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_k([(1,2,3),(10,20,30),(100,200,300),(1000,2000,3000)], 3) == (1,2,3)\nassert     min_k([(1,2,3),(10,20,30),(100,200,300),(1000,2000,3000)], 5) == (1,2,3,10,100)\nassert     min_k([(1,2,3),(10,20,30),(100,200,300),(1000,2000,3000)], 7) == (1,2,3,10,100,1000,2000)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_k([(\"a\",1),(\"b\",1),(\"c\",2)], 3) == [\"a\", \"c\", \"b\"]\nassert     min_k([(\"a\",1),(\"b\",1),(\"c\",2)], 1) == [\"b\"]\nassert     min_k([(\"a\",1),(\"b\",1),(\"c\",2)], 0) == [\"a\", \"b\", \"c\"]\nassert     min_k([(\"a\",1),(\"b\",1),(\"c\",2)], 4) == [\"a\", \"c\", \"b\"]\nassert     min_k([(\"a\",1),(\"b\",1),(\"c\",2)], 2) == [\"b\", \"c\", \"a\"]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_k([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9),(8,9,10),(9,10,11)], 2) ==  [(2,3,4),(3,4,5)]\nassert     min_k([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9),(8,9,10),(9,10,11)], 3) ==  [(1,2,3),(2,3,4),(3,4,5)]\nassert     min_k([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9),(8,9,10),(9,10,11)], 4) ==  [(1,2,3),(2,3,4)]\nassert     min_k([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9),(8,9,10),(9,10,11)], 5) ==  [(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9),(8,9,10)]\nassert     min_k([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9),(8,9,10),(9,10,11)], 6) ==  [(1,2,3),(2,3,4),(3,4,5)]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k([(1,2),(3,4),(5,6)], 1)    ==  (1, 2), \"Wrong result\"\nassert     min_k([(1,2),(3,4),(5,6)], 2)    ==  (3, 4), \"Wrong result\"\nassert     min_k([(1,2),(3,4),(5,6)], 3)    ==  (1, 2), \"Wrong result\"\nassert     min_k([(1,2),(3,4),(5,6)], 4)    ==  (1, 2), \"Wrong result\"\nassert     min_k([(1,2),(3,4),(5,6)], 5)    ==  (1, 2), \"Wrong result\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_k([(2, 3), (5, 1), (7, 5), (9, 6), (10, 7)], 3) == (2, 3)\nassert     min_k([(2, 3), (5, 1), (7, 5), (9, 6), (10, 7)], 1) == (2, 3)\nassert     min_k([(2, 3), (5, 1), (7, 5), (9, 6), (10, 7)], 2) == (5, 1)\nassert     min_k([(2, 3), (5, 1), (7, 5), (9, 6), (10, 7)], 4) == (7, 5)\nassert     min_k([(2, 3), (5, 1), (7, 5), (9, 6), (10, 7)], 5) == (9, 6)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_k([(10, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')], 1) == (10, 'a'), \"incorrect\"\nassert     min_k([(10, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')], 2) == (2, 'b'), \"incorrect\"\nassert     min_k([(10, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')], 3) == (3, 'c'), \"incorrect\"\nassert     min_k([(10, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')], 4) == (4, 'd'), \"incorrect\"\nassert     min_k([(10, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')], 5) == (5, 'e'), \"incorrect\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_k([(5,4,7), (1,2,3), (4,5,6)], K = 2) == (1,2)\nassert     min_k([(5,4,7), (1,2,3), (4,5,6)], K = 3) == (1,2,3)\nassert     min_k([(5,4,7), (1,2,3), (4,5,6)], K = 1) == (5,4,7)\nassert     min_k([(5,4,7), (1,2,3), (4,5,6)], K = 0) == ()\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    \nassert extract_index_list([1,2,3], [4,5,6], [7,8,9]) == \n    [4,5,6]\nassert extract_index_list([4,5,6], [1,2,3], [7,8,9]) == \n    [1,2,3]\nassert extract_index_list([4,5,6], [4,5,6], [1,2,3]) == \n    []\n\n'''\nWrite a function, which will take a list of numbers and a number k and return a list of the last k numbers in the given list. \nIf the length of the list is less than k, just return the whole list.\n'''\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_index_list([1, 2, 3, 4], [1, 2, 3], [1, 2, 3]) == [1, 3]\nassert     extract_index_list([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3]) == [1, 2]\nassert     extract_index_list([1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\nassert     extract_index_list([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     extract_index_list([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_index_list([1, 1, 1, 1], [1, 2, 3], [2, 3, 4]) == [1]\nassert     extract_index_list([1, 1, 1, 1], [1, 2, 3], [2, 3, 4, 3]) == [1]\nassert     extract_index_list([1, 1, 1, 1], [1, 2, 3], [2, 3, 4, 5]) == [1]\n\nprint('All test cases passed.'"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_index_list([1, 2, 3, 4, 5], [1, 2, 3, 6, 7], [4, 5, 6, 7]) == [2, 4], \"Should be [2, 4]\"\nassert     extract_index_list([1, 2, 3, 4, 5], [1, 2, 3, 6, 7], [4, 5, 6]) == [], \"Should be []\"\nassert     extract_index_list([1, 2, 3, 4, 5], [1, 2, 3, 6, 7], [4, 5, 6, 7]) == [2, 4, 5, 6], \"Should be [2, 4, 5, 6]\"\n\nprint('check_index_list function is working.')\nprint('You should see a correct output of extract_index_list function.')\n\ndef check_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef extract_index_list_test(input_list1, input_list2, input_list3):\n    assert len(input_list1) == len(input_list2) == len(input_list3)\n    assert len(input_list1) > 0\n    assert len(input_list1) == len(set(input_list1))\n    \n    index_list_1 = extract_index_list(input_list1, input_list2, input_list3)\n    index_list_2 = extract_index_list(input_list2, input_list1, input_list3)\n    index_list_3 = extract_index_list(input_list3, input_list1, input_list2)\n    \n    return index_list_1, index_list_2, index_list_3\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_index_list([1,2,3], [3,2,1], [4,5,6]) == [1, 2]\nassert     extract_index_list([1,2,3,4,5,6], [2,3,4], [1,5,6]) == [1,2]\nassert     extract_index_list([1,2,3,4,5,6], [1,2,3], [1,2,3,4,5,6]) == [1,2]\nassert     extract_index_list([1,2,3], [1,2,3], [1,2,3,4,5,6]) == [1]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l1 = [-2, -1, 0, 2, 5]\n    l2 = [-1, -2, 0, 3, 6]\n    l3 = [-2, 0, 2, 3, 6]\n    print(extract_index_list(l1, l2, l3)) # [-2, -1, 3, 6]"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \n\nassert extract_index_list([1,2,3],[2,3,4],[1,3,4]) == [1,2,3]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = ['a', 'b', 'c', 'd', 'e', 'f']\n    l3 = [7, 8, 9, 10, 11, 12]\n    print(extract_index_list(l1, l2, l3))\n    \n    # list in list in list\n    # a = [[1, 2], 3, 4]\n    # b = [[2], 5, 6]\n    # c = [[3, 4], 7, 8]\n    # print(extract_index_list(a, b, c)) # a list in b list in c list\n    # # [[1, 2], 3, 4]\n    # # [[2], 5, 6]\n    # # [[3, 4], 7, 8]\n\n    # list in list\n    # a = [[1, 2], 3, 4]\n    # b = [[2], 5, 6]\n    # print(extract_index_list(a, a, b))\n    # # []\n    # # []\n    # # []\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # print(extract_index_list(a, b, b))\n    # # # a list in b list\n    # # # a list in b list\n    # # # a list in b list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # print(extract_index_list(a, a, b))\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # print(extract_index_list(a, a, b))\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # print(extract_index_list(a, a, b))\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in a list\n    # # print(extract_index_list(a, a, b))\n    # # a list in a list\n    # # a list in a list\n    # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # a list in a list\n    # # # # a list in a list\n    # # # # a list in "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l1 = [0, 1, 2, 3, 4, 5]\n    l2 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    l3 = [\"b\", \"d\", \"c\", \"e\", \"a\", \"f\"]\n    print(\"List l1:\", l1)\n    print(\"List l2:\", l2)\n    print(\"List l3:\", l3)\n    print(\"List of common elements in l1, l2 and l3:\", extract_index_list(l1, l2, l3))"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     second_smallest([0]) == 0, \"TEST FAILURE: second_smallest\"\nassert     second_smallest([1]) == 1, \"TEST FAILURE: second_smallest\"\nassert     second_smallest([-1, -2, -3]) == -2, \"TEST FAILURE: second_smallest\"\nassert     second_smallest([]) == None, \"TEST FAILURE: second_smallest\"\nassert     second_smallest([1,2]) == None, \"TEST FAILURE: second_smallest\"\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     second_smallest([10, 50, 75, 95, 60, 25]) == 75\nassert     second_smallest([10, 50, 75, 55, 25, 10]) == 10\nassert     second_smallest([10, 50, 75, 85, 25, 10]) == 10\nassert     second_smallest([10, 50, 75, 85, 60, 10]) == 50\nassert     second_smallest([10, 50, 75, 85, 60, 10]) == 60\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([5, 6, 7, 3]) == 3, 'wrong answer'\nassert     second_smallest([5, 6, 3]) == 3, 'wrong answer'\n\n'''\n(find the third smallest number in a list)\n\nGiven a list of integers, return the third smallest number in the list.\n\nNote: If there is a tie for the smallest number, return the number which is the smallest.\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([10, 2, 30, 4, 50]) == 2, 'wrong'\nassert     second_smallest([10, 2, -30, 4, 50]) == -30, 'wrong'\nassert     second_smallest([1, 2, 30, 4, 50]) == 1, 'wrong'\nassert     second_smallest([-1, 2, 30, 4, 50]) == 2, 'wrong'\nassert     second_smallest([10, 2, 30, 4, 50]) == 2, 'wrong'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     second_smallest([-2, 7, 5, 3, 7, -1, 9])     == -1\nassert second_smallest([2, 7, 5, 3, 7, -1, 9])     == -1\nassert second_smallest([2, 7, 5, 3, 7, -1, 9, -2, -1])     == -2\nassert second_smallest([-2, 7, 5, 3, 7, -1, 9, -2, -1, 2])     == -2\nassert second_smallest([-2, 7, 5, 3, 7, -1, 9, -2, -1, 1])     == -1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     second_smallest([1, 5, 9, 12, 4, 2, 6, 2, 1]) == 4\nassert     second_smallest([1, 5, 9, 12, 4, 2, 6, 2, 1]) == 5\nassert     second_smallest([1, 5, 9, 12, 4, 2, 6, 2, 1, 10]) == 1\nassert     second_smallest([]) == None\nassert     second_smallest([2]) == 2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     second_smallest([2, 3, 5, 3]) == 3, \"the smallest number is 3\"\nassert     second_smallest([10, -2, 2, -2, -1, -2, -2]) == -2, \"the second smallest number is -2\"\nassert     second_smallest([]) == None, \"the list is empty\"\nassert     second_smallest([100]) == None, \"the list is only one element\"\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert second_smallest([2, 10, 8, 4, 3]) == 10\nassert second_smallest([-10, -3, 2, 3, 4]) == -3\nassert second_smallest([2, 10, 8, 4, 3, -1, -2]) == -2\nassert second_smallest([2, 10, 8, 4, 3, 5]) == 5\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one(\"aabaa\")\nassert     not text_match_zero_one(\"abaaa\")\nassert     text_match_zero_one(\"abaaaa\")\nassert     not text_match_zero_one(\"ab\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('aaa')\nassert     text_match_zero_one('a')\nassert     text_match_zero_one('ab')\nassert     text_match_zero_one('aab')\nassert     text_match_zero_one('baaab')\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one('ababb') == True, \"Should return True if 'a' followed by 'b' is present\"\nassert     text_match_zero_one('abbb') == False, \"Should return False if 'a' followed by 'b' is not present\"\nassert     text_match_zero_one('abcab') == True, \"Should return True if 'a' followed by 'b' is present\"\nassert     text_match_zero_one('abc') == True, \"Should return True if 'a' followed by 'b' is present\"\nassert     text_match_zero_one('abcabc') == True, \"Should return True if 'a' followed by 'b' is present\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('a') == True\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('a') == False\nassert     text_match_zero_one('b') == True\n\n'''\nWrite a function that matches a string that has an 'a' followed by one or more 'b's followed by zero or more 'c's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n'''\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one('bbb') == False, \"Should match 'a' followed by 'b'\"\nassert     text_match_zero_one('aaaa') == False, \"Should not match 'a' followed by 'b'\"\nassert     text_match_zero_one('b') == False, \"Should not match 'a' followed by 'b'\"\nassert     text_match_zero_one('aaaa') == True, \"Should match 'a' followed by 'b'\"\nassert     text_match_zero_one('bbbb') == False, \"Should not match 'a' followed by 'b'\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one(\"ababab\") == \"ababab\"\nassert     text_match_zero_one(\"abbba\") == \"abbba\"\nassert     text_match_zero_one(\"abbb\") == \"abbb\"\nassert     text_match_zero_one(\"bba\") == \"bba\"\nassert     text_match_zero_one(\"bb\") == \"bb\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('a') == False, 'Expected False'\nassert     text_match_zero_one('b') == False, 'Expected False'\nassert     text_match_zero_one('aa') == False, 'Expected False'\nassert     text_match_zero_one('bb') == False, 'Expected False'\nassert     text_match_zero_one('aab') == True, 'Expected True'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one(text=\"aabab\") == True, \"Expected: True, Actual: True\"\nassert     text_match_zero_one(text=\"aaaab\") == False, \"Expected: False, Actual: True\"\nassert     text_match_zero_one(text=\"aaaaab\") == True, \"Expected: True, Actual: True\"\nassert     text_match_zero_one(text=\"aaaa\") == True, \"Expected: True, Actual: True\"\nassert     text_match_zero_one(text=\"abaa\") == True, \"Expected: True, Actual: True\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one(\"ab\") == \"0\"\nassert     text_match_zero_one(\"bb\") == \"1\"\nassert     text_match_zero_one(\"aab\") == \"0\"\nassert     text_match_zero_one(\"b\") == \"1\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_reverse_pairs([]) == 0, \"Empty list\"\nassert     count_reverse_pairs(['a','b','c']) == 2, \"All Reverse\"\nassert     count_reverse_pairs(['a','ab','abc','abcd']) == 4, \"All Reversed\"\nassert     count_reverse_pairs(['a','ab','abcd','ab']) == 2, \"One Reversed\"\nassert     count_reverse_pairs(['ab','abcd','cba']) == 2, \"One Reversed\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_reverse_pairs(['abcd', 'dcba', 'aefg']) == 1\nassert     count_reverse_pairs(['abcd', 'dcba', 'aefg', 'cdef']) == 1\nassert     count_reverse_pairs(['abcd', 'dcba', 'aefg', 'cdef', 'zxcv']) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_reverse_pairs(['abcd', 'dcba']) == 1\nassert     count_reverse_pairs(['abcd', 'ddef']) == 0\nassert     count_reverse_pairs(['abcd', 'efg']) == 2\nassert     count_reverse_pairs(['abcd', 'zab']) == 1\nassert     count_reverse_pairs([]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs([\"apple\", \"banana\", \"facebook\", \"microsoft\"]) == 3\nassert     count_reverse_pairs([\"gfg\", \"rfr\", \"gog\", \"erh\"]) == 3\nassert     count_reverse_pairs([\"a\", \"b\", \"c\", \"d\", \"e\"]) == 0\nassert     count_reverse_pairs([\"gog\", \"erh\", \"gfg\", \"rfr\"]) == 3\nassert     count_reverse_pairs([]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_reverse_pairs([]) == 0, \"Empty list\"\nassert     count_reverse_pairs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 1, \"One-to-one\"\nassert     count_reverse_pairs(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']) == 2, \"One-to-two\"\nassert     count_reverse_pairs(['x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','y','z']) == 2, \"One-to-two\"\nassert     count_reverse_pairs(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','z','y','x']) == 2, \"One-to-two\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_reverse_pairs([\"abc\", \"abcd\", \"abcde\", \"abcd\"]) == 2\ncount_reverse_pairs([\"pqr\", \"ps\", \"rs\", \"tt\"]) == 0\ncount_reverse_pairs([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == 0\ncount_reverse_pairs([\"xx\", \"xy\", \"yx\"]) == 1\ncount_reverse_pairs([\"xx\", \"xy\", \"yx\", \"xy\"]) == 2\ncount_reverse_pairs([\"xx\", \"xy\", \"xy\", \"yx\"]) == 3\ncount_reverse_pairs([\"xx\", \"xy\", \"xx\", \"yx\"]) == 4\ncount_reverse_pairs([\"xy\", \"xx\", \"xx\", \"yx\"]) == 2\ncount_reverse_pairs([\"xy\", \"xx\", \"xy\", \"yx\"]) == 4\ncount_reverse_pairs([\"xy\", \"xx\", \"xx\", \"yx\", \"xx\"]) == 6\ncount_reverse_pairs([\"xy\", \"xx\", \"xx\", \"yx\", \"xx\", \"xx\"]) == 6\ncount_reverse_pairs([\"xy\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\", \"xx\"]) == 8\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\"]) == 0\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\"]) == 1\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\"]) == 2\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\"]) == 3\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\"]) == 5\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\", \"xx\"]) == 6\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\", \"xx\", \"xx\"]) == 6\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\"]) == 7\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\"]) == 7\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\"]) == 9\ncount_reverse_pairs([\"abcd\", \"abc\", \"ab\", \"xx\", \"xy\", \"yx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\", \"xx\""
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_reverse_pairs([\"abcd\", \"dcba\", \"fghi\", \"klmn\", \"xcvb\", \"zzzz\"]) == 5\nassert count_reverse_pairs([\"abcd\", \"dcba\", \"fghi\", \"klmn\", \"xcvb\", \"zzzz\", \"apple\", \"orange\"]) == 8\nassert count_reverse_pairs([\"abc\", \"ab\", \"abb\", \"bab\", \"baa\", \"aab\", \"aab\", \"ba\"]) == 2\nassert count_reverse_pairs([\"a\", \"b\", \"c\"]) == 0\nassert count_reverse_pairs([\"\"]) == 0\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([1,2,3]) == {([1,2,3],1),([1,2,3],2),([1,2,3],3)}\nassert unique_sublists([1,2,2,1,1,1,1,1,1]) == {([1,2,2],2),([1,1],3),([1,1],1)}\nassert unique_sublists([1,1,2,2,1,1]) == {([1,1],2),([2],1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([1,2,3,4]) == {(1,1),(2,1),(3,1),(4,1)}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1,2,3,4,5,5,5]) == {(1,5),(2,4),(3,3),(5,2),(5,1)}\n\ndef is_pangram(sentence):\n    '''\n    Write a function that will take a sentence as a input and return whether or not it is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([[1,2],2,2]) == {(1,2):2}\nassert     unique_sublists([[1,2],2]) == {(1,2):2}\nassert     unique_sublists([2,2]) == {(2,2):1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([[1,2], [2,3], [1,3]]) == {(1, 2): 1, (2, 3): 2, (1, 3): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([1,2,3]) == {(1,1),(2,1),(3,1)}, 'Not unique_sublists'\nassert     unique_sublists([]) == {()}, 'Empty'\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([[1,2],[3],[3],[4,5,6]]) == {tuple([1, 2]): 1, tuple([3]): 1, tuple([4, 5, 6]): 1}\nassert     unique_sublists([[2,2],[2,2],[2,2]]) == {tuple([2, 2]): 3}\nassert     unique_sublists([[2,2,2,2,2]]) == {tuple([2, 2, 2, 2, 2]): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[2,3,4,5,6],5,5,7,8]) == {([2,3,4,5,6],5):2,([7,8],):1}\n\ndef unique_sublists_2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists( [[1,2],[3,4]] ) == {(1,3):1,(2,4):1}\nassert     unique_sublists( [[1,1,1],[2,2,2],[3,3,3]] ) == {(1,1,1):3,(2,2,2):2,(3,3,3):1}\nassert     unique_sublists( [[1,2,3,4],[3,4,5,6,7]] ) == {(1,3,4):1,(2,4,5):1,(3,5,6):1,(4,6,7):1}\nassert     unique_sublists( [[1,2,3,4,5,6,7]] ) == {(1,2,3,4,5,6,7):1}\nassert     unique_sublists( [[1,2,3,4,5,6,7,8,9,10]] ) == {(1,2,3,4,5,6,7,8,9,10):1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([1,2,3,2,2,3]) == {(1, 1), (2, 3), (3, 2), (2, 2), (2, 2), (3, 1)}\nassert     unique_sublists([3,3,3,3,3,3,3]) == {(3, 4), (3, 3), (3, 3), (3, 3)}\nassert     unique_sublists([]) == {()}\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_decimal('2.1') == True\nassert     is_decimal('-2.1') == True\nassert     is_decimal('0') == True\nassert     is_decimal('-0') == True\nassert     is_decimal('1.1') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_decimal(\"1.1\") == True\nassert     is_decimal(\"1.0\") == False\nassert     is_decimal(\"1.01\") == True\nassert     is_decimal(\"1.00\") == True\nassert     is_decimal(\"1234\") == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_decimal('0.1')\n\nassert not is_decimal('0.2')\nassert not is_decimal('abc')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_decimal('1') == False, 'Not correct'\nassert     is_decimal('3.1') == True, 'Not correct'\nassert     is_decimal('3.01') == False, 'Not correct'\nassert     is_decimal('3.001') == True, 'Not correct'\nassert     is_decimal('3.0001') == True, 'Not correct'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_decimal(\"1.1\") == True, \"Test Failed\"\nassert     is_decimal(\"1.2\") == False, \"Test Failed\"\nassert     is_decimal(\"1.3\") == False, \"Test Failed\"\nassert     is_decimal(\"1.1\") == True, \"Test Failed\"\nassert     is_decimal(\"1.2\") == False, \"Test Failed\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_decimal(2) == False\nassert     is_decimal('2.2') == False\nassert     is_decimal('2.2.3') == False\nassert     is_decimal('2.3') == True\nassert     is_decimal('2') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_decimal(\"3.14\") == True\nassert     is_decimal(\"-2.5\") == False\nassert     is_decimal(\"1.00\") == True\nassert     is_decimal(\"-1.2\") == False\nassert     is_decimal(\"3.14159265\") == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_decimal('3.14') == True, 'the wrong'\nassert     is_decimal('3.2') == False, 'the wrong'\n\nprint(is_decimal('3.2'))\nprint(is_decimal('3.14'))\nprint(is_decimal('3.0'))\nprint(is_decimal('3.001'))\nprint(is_decimal('3.00'))\nprint(is_decimal('3.0'))\n\n\n\ndef is_interval(num):\n    '''\n    Write a function to check whether a given number is within a range.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n    Expected Output:\n    false\n'''"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n1) Complete the function below to return True if the string contains the string \"Jul\", \"Feb\", or \"Mar\".\n'''\n\ndef july_feb_mar(day):\n    '''\n    Write a function that takes in a string and returns True if the string\n    contains the substring \"Jul\", \"Feb\", or \"Mar\".\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_Element([1,2,3,4,5]) == True, 'Test case 2 : 1, 2, 3, 4, 5'\nassert     unique_Element([1,1,1,1,1]) == False, 'Test case 1 : 1, 1, 1, 1, 1'\nassert     unique_Element([1,2,3,4,5,6,7,8,9,9]) == True, 'Test case 3 : 1, 2, 3, 4, 5, 6, 7, 8, 9'\nassert     unique_Element([1,2,3,4,5,6,7,8,9,10,11,11]) == False, 'Test case 4 : 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11'\n\nprint('All test cases passed!'"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([0,1,1,2,3])==True, \"Wrong Answer\"\nassert     unique_Element([0,1,1,2,3,4])==False, \"Wrong Answer\"\nassert     unique_Element([1,2,1,2,3])==False, \"Wrong Answer\"\nassert     unique_Element([1,2,1,2,3,4])==True, \"Wrong Answer\"\nassert     unique_Element([0,1,2,3,1,2,3])==True, \"Wrong Answer\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef print_array(arr):\n    '''\n    Write a python function to print an array.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    [1, 1, 1, 1, 1, 1, 1] == unique_Element([1, 1, 1, 1, 1, 1, 1]), \"Error message\"\n    [1, 1, 2, 1, 3, 1, 2] == unique_Element([1, 1, 2, 1, 3, 1, 2]), \"Error message\"\n    [2, 3, 2, 1, 3, 1, 2] == unique_Element([2, 3, 2, 1, 3, 1, 2]), \"Error message\"\n    [1, 1, 1, 1, 1, 1, 1] == unique_Element([1, 1, 1, 1, 1, 1, 1]), \"Error message\"\n    [5, 1, 2, 3, 4] == unique_Element([5, 1, 2, 3, 4]), \"Error message\"\n    [1, 1, 1, 1, 1, 1, 1] == unique_Element([1, 1, 1, 1, 1, 1, 1]), \"Error message\"\n\n'''\n    "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([3,2,5,3,3,2,3,2,5]) == True\nassert     unique_Element([2,2,5,3,3,2,3,2,5]) == True\nassert     unique_Element([2,2,5,3,3,2,3,2,6]) == False\nassert     unique_Element([3,3,2,2,2,2,2,2,2,2,2]) == False\nassert     unique_Element([]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_Element([1, 2, 2, 1, 1]) == True\nassert     unique_Element([1, 1, 2, 2]) == True\nassert     unique_Element([2, 2, 1, 2]) == False\nassert     unique_Element([1, 1, 1]) == False\nassert     unique_Element([1]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nunique_Element([1,2,3,4]) == False\nunique_Element([3,3,3,3]) == True\nunique_Element([1,2,3,4,5]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,2,3,4,5]) == False, \"Wrong Output\"\nassert     unique_Element([1,2,2,4,5]) == True, \"Wrong Output\"\nassert     unique_Element([1,1,1,1,1]) == True, \"Wrong Output\"\n\nprint(\"All test cases passed\")"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_Element([1,2,3,3]) == False, \"test case 1 Failed\"\nassert     unique_Element([1,2,3,3,4]) == True, \"test case 2 Failed\"\nassert     unique_Element([1,1,1,1,1]) == True, \"test case 3 Failed\"\nassert     unique_Element([1,2,3,4]) == False, \"test case 4 Failed\"\nassert     unique_Element([1,2,3,4,5]) == True, \"test case 5 Failed\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(12) == True, 'Failed'\nassert     check_monthnumber_number(1) == True, 'Failed'\nassert     check_monthnumber_number(2) == False, 'Failed'\nassert     check_monthnumber_number(3) == True, 'Failed'\nassert     check_monthnumber_number(4) == True, 'Failed'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(5) == True\nassert     check_monthnumber_number(6) == False\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(13) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(11) == True, 'There is no 30 days in this month.'\nassert     check_monthnumber_number(12) == False, 'There are 30 days in this month.'\nassert     check_monthnumber_number(2) == True, 'There are 30 days in this month.'\nassert     check_monthnumber_number(1) == False, 'There are 30 days in this month.'\nassert     check_monthnumber_number(13) == False, 'There are 30 days in this month.'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not check_monthnumber_number(1)\nassert not check_monthnumber_number(2)\nassert not check_monthnumber_number(3)\nassert not check_monthnumber_number(4)\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(1) == True, \"Months = 1 does not contain 30 days\"\nassert     check_monthnumber_number(2) == True, \"Months = 2 does not contain 30 days\"\nassert     check_monthnumber_number(3) == False, \"Months = 3 contains 30 days\"\nassert     check_monthnumber_number(4) == False, \"Months = 4 contains 30 days\"\nassert     check_monthnumber_number(5) == False, \"Months = 5 contains 30 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(1) == False, \"Wrong answer\"\nassert     check_monthnumber_number(12) == False, \"Wrong answer\"\nassert     check_monthnumber_number(13) == False, \"Wrong answer\"\nassert     check_monthnumber_number(2) == False, \"Wrong answer\"\nassert     check_monthnumber_number(3) == True, \"Wrong answer\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(1) == False, \"Incorrect: 1\"\nassert     check_monthnumber_number(2) == True, \"Incorrect: 2\"\nassert     check_monthnumber_number(31) == False, \"Incorrect: 31\"\nassert     check_monthnumber_number(32) == True, \"Incorrect: 32\"\nassert     check_monthnumber_number(33) == False, \"Incorrect: 33\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(1) == False\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(1) == False, 'Testing for 1:False'\nassert     check_monthnumber_number(2) == True, 'Testing for 2:True'\nassert     check_monthnumber_number(3) == False, 'Testing for 3:False'\nassert     check_monthnumber_number(4) == False, 'Testing for 4:False'\nassert     check_monthnumber_number(5) == False, 'Testing for 5:False'\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_min_diff([4, 8, 2, 2],2) == 5\nassert find_min_diff([1, 3, 6, 10],1) == 0\nassert find_min_diff([1, 3, 6, 10],2) == 5\nassert find_min_diff([3, 6, 10, 100],3) == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_min_diff([-1,3,5],2) == -3,'sample case 1'\nassert     find_min_diff([-1,3,5],3) == -4,'sample case 2'\nassert     find_min_diff([-1,3,5],4) == -4,'sample case 3'\nassert     find_min_diff([-1,-2,3,4],1) == -1,'sample case 4'\nassert     find_min_diff([-2,-2,3,4],1) == 2,'sample case 5'\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_min_diff([1,3,4,6],4) == 1\nfind_min_diff([1,2,3,4,5],5) == 1\nfind_min_diff([1,3,4,6],1) == 0\nfind_min_diff([1,3,4,6],6) == -1\nfind_min_diff([1,3,4,6],7) == -1\nfind_min_diff([1,3,4,6],1) == 0\nfind_min_diff([1,3,4,6],6) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_min_diff([3, 4, 1, 5], 2) == 2 \nassert find_min_diff([3, 4, 1, 5], 1) == 3 \nassert find_min_diff([1, 5, 4], 2) == -1\nassert find_min_diff([1, 5, 4], 1) == 0\nassert find_min_diff([-5, 4, -1, 7, -9, -4, -7], 1) == -7\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([1,3,2],2) == -1\nassert     find_min_diff([1,3,2],5) == 2\nassert     find_min_diff([4,5,3,8,7],2) == -1\nassert     find_min_diff([4,5,3,8,7],5) == 0\nassert     find_min_diff([4,5,3,8,7],10) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_min_diff([1,2,3,4,5],5) == 1\nassert     find_min_diff([1,2,3,4,5],4) == 1\nassert     find_min_diff([1,2,3,4,5],2) == 1\nassert     find_min_diff([1,2,3,4,5],1) == 1\nassert     find_min_diff([1,2,3,4,5],0) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_min_diff([1,7,4,9,0],5) == 1\nassert     find_min_diff([1,3,6],3) == 0\nassert     find_min_diff([1,2],1) == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\narr = [-1, -1, -1, 0, 0, 0, 1, 1, 1]\nprint(\"The minimum difference is\", find_min_diff(arr, len(arr)))\n\narr = [-1, 1, 1, 0, 0, 0, 1, 1, 1]\nprint(\"The minimum difference is\", find_min_diff(arr, len(arr)))"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_min_diff([-1,3,4],1) == 1\nassert     find_min_diff([1,3,4],1) == 1\nassert     find_min_diff([1,3,4],2) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_min_diff([1,5,2,7],2) == 3\nassert     find_min_diff([2,3,5,7],2) == -1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr(\"2\") == 1, \"Test Failed\"\nassert     number_ctr(\"2a\") == 1, \"Test Failed\"\nassert     number_ctr(\"2_\") == 1, \"Test Failed\"\nassert     number_ctr(\"2.\") == 1, \"Test Failed\"\nassert     number_ctr(\"2@\") == 1, \"Test Failed\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert number_ctr(\"123213\") == 3\nassert number_ctr(\"123\") == 1\nassert number_ctr(\"13\") == 1\nassert number_ctr(\"1313\") == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr(\"456789\") == 8, '''\nThe number_ctr function is not correct.\n'''\n\ndef is_valid_date(date):\n    '''\n    Write a python function to check if the date is a valid date\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_ctr('2345') == 3\nassert     number_ctr('123') == 1\nassert     number_ctr('') == 0\nassert     number_ctr('  ') == 0\nassert     number_ctr('1') == 1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr('123') == 1, 'Test #1 failed'\nassert     number_ctr('the quick brown fox jumps over the lazy dog') == 4, 'Test #2 failed'\nassert     number_ctr('the quick brown fox jumps over the lazy dog') == 4, 'Test #3 failed'\nprint('Tests passed!!!')\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_ctr('079') == 2, 'wrong'\nassert     number_ctr('87') == 1, 'wrong'\nassert     number_ctr('69') == 1, 'wrong'\nassert     number_ctr('1899') == 2, 'wrong'\nassert     number_ctr('1898') == 2, 'wrong'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr('one') == 1\nassert     number_ctr('123') == 1\nassert     number_ctr('12345') == 1\nassert     number_ctr('12345678') == 1\nassert     number_ctr('123456789') == 1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert number_ctr(\"\") == 0\nassert number_ctr(\"a\") == 0\nassert number_ctr(\"2345\") == 1\nassert number_ctr(\"hii\") == 1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr('8.7') == 2, \"Test Case Failed!\"\nassert     number_ctr('8.7') == 2, \"Test Case Failed!\"\nassert     number_ctr('4.2.7') == 4, \"Test Case Failed!\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr('python is easy') == 1, \"Should be 1.\"\nassert     number_ctr('python is easy and easy') == 2, \"Should be 2.\"\nassert     number_ctr('python is easy and easy') == 3, \"Should be 3.\"\nassert     number_ctr('python is easy and easy and easy') == 4, \"Should be 4.\"\nassert     number_ctr('python is easy and easy and easy and easy') == 5, \"Should be 5.\"\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_polite(1) == 1\nassert     is_polite(2) == 2\nassert     is_polite(3) == 3\nassert     is_polite(4) == 4\nassert     is_polite(5) == 5\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    is_polite(4) == 5\n    is_polite(20) == 19\n    is_polite(100) == 99\n    is_polite(10000) == 9950\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_polite2(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # generate the list of all politely numbers\n    p = [1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000]\n    # total count of numbers in the list \n    count = len(p) \n    # total count of numbers to be printed \n    ans = (n - 1) // count \n    if (n - 1) % count!= 0: \n        ans += 1\n    print(ans, end = \" \") \n    # iterate the list to print the required number \n    for i in range(0, n - 1): \n        print(p[i], end = \" \")\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint (is_polite(0))\n\nprint (is_polite(1))\n\nprint (is_polite(2))\n\nprint (is_polite(3))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_polite(1) == 2 \nassert     is_polite(2) == 3 \nassert     is_polite(3) == 4 \nassert     is_polite(4) == 5 \nassert     is_polite(5) == 6 \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(is_polite(1)) \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_polite(1) == is_polite(2) == is_polite(3) == is_polite(4) == is_polite(5) == is_polite(6) == is_polite(7) == is_polite(8) == is_polite(9) == is_polite(10) == is_polite(11) == is_polite(12) == is_polite(13) == is_polite(14) == is_polite(15) == is_polite(16) == is_polite(17) == is_polite(18) == is_polite(19) == is_polite(20) == is_polite(21) == is_polite(22) == is_polite(23) == is_polite(24) == is_polite(25) == is_polite(26) == is_polite(27) == is_polite(28) == is_polite(29) == is_polite(30) == is_polite(31) == is_polite(32) == is_polite(33) == is_polite(34) == is_polite(35) == is_polite(36) == is_polite(37) == is_polite(38) == is_polite(39) == is_polite(40) == is_polite(41) == is_polite(42) == is_polite(43) == is_polite(44) == is_polite(45) == is_polite(46) == is_polite(47) == is_polite(48) == is_polite(49) == is_polite(50) == is_polite(51) == is_polite(52) == is_polite(53) == is_polite(54) == is_polite(55) == is_polite(56) == is_polite(57) == is_polite(58) == is_polite(59) == is_polite(60) == is_polite(61) == is_polite(62) == is_polite(63) == is_polite(64) == is_polite(65) == is_polite(66) == is_polite(67) == is_polite(68) == is_polite(69) == is_polite(70) == is_polite(71) == is_polite(72) == is_polite(73) == is_polite(74) == is_polite(75) == is_polite(76) == is_polite(77) == is_polite(78) == is_polite(79) == is_polite(80) == is_polite(81) == is_polite(82) == is_polite(83) == is_polite(84) == is_polite(85) == is_polite(86) == is_polite(87) == is_polite(88) == is_polite(89) == is_polite(90) == is_polite(91) == is_polite(92) == is_polite(93) == is_polite(94) == is_polite(95) == is_polite(96) == is_polite(97) == is_polite(98) == is_polite(99) == is_polite(100): \n    print(True)\nelse: \n    print(False)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_polite(1) == True\nassert     is_polite(2) == False\nassert     is_polite(10) == False\nassert     is_polite(30) == True\nassert     is_polite(40) == True\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_wise([1,2,3,4,5,6,7,8,9]) ==     [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]\nassert     pair_wise([1,2,3,4,5,6]) ==     [[1,2],[2,3],[3,4],[4,5],[5,6]]\nassert     pair_wise([1,2,3,4]) ==     [[1,2],[2,3],[3,4]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert pair_wise([]) == []\nassert pair_wise([1, 2]) == [(1, 2)]\nassert pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_wise([]) == []\nassert pair_wise([1]) == [[1]]\nassert pair_wise([1, 2, 3]) == [[1, 2], [2, 3]]\nassert pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pair_wise([]) == []\nassert     pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]\nassert     pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert     pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise(['a', 'b', 'c']) == [['a', 'b'], ['b', 'c']]\nassert     pair_wise(['a', 'c', 'd']) == [['a', 'c'], ['c', 'd']]\nassert     pair_wise(['a', 'c', 'd', 'f']) == [['a', 'c'], ['c', 'd'], ['d', 'f']]\nassert     pair_wise(['a', 'c', 'd', 'f', 'g']) == [['a', 'c'], ['c', 'd'], ['d', 'f'], ['f', 'g']]\nassert     pair_wise(['a', 'c', 'd', 'f', 'g', 'h', 'i', 'j']) == [['a', 'c'], ['c', 'd'], ['d', 'f'], ['f', 'g'], ['g', 'h'], ['h', 'i'], ['i', 'j']]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]]\nassert pair_wise([5, 4, 3, 2, 1]) == [[5, 4], [4, 3], [3, 2], [2, 1], [1, 5]]\n\ndef list_of_numbers_with_consecutive_repeated_elements(l):\n    '''\n    Write a function to return a list of all lists of consecutive elements from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_wise([]) == []\nassert pair_wise([1]) == []\nassert pair_wise([1, 2]) == [[1, 2]]\nassert pair_wise([1, 2, 3]) == [[1, 2], [2, 3]]\nassert pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert pair_wise([1]) == [[1]]\nassert pair_wise([]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]\nassert     pair_wise([]) == []\nassert     pair_wise([1]) == [[1]]\nassert     pair_wise([1, 2, 3]) == [[1, 2], [2, 3]]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 5) == 3\nassert     get_pairs_count([1,2,3,4,5], 6) == 0\nassert     get_pairs_count([1,1,2,2], 5) == 2\nassert     get_pairs_count([1,1,2,2], 3) == 0\nassert     get_pairs_count([], 3) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_pairs_count([1, 4, 3, 6], 6) == 2\nassert     get_pairs_count([1, 4, 3, 6], 7) == 0\nassert     get_pairs_count([1, 4, 3, 6], 10) == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_pairs_count([], 0) == 0\nassert     get_pairs_count([1], 1) == 0\nassert     get_pairs_count([1, 2], 1) == 1\nassert     get_pairs_count([1, 2, 3], 4) == 2\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_pairs_count([1, 2, 3, 1], 3) == 2\nassert     get_pairs_count([1, 2, 3, 1], 4) == 0\nassert     get_pairs_count([5, 2, 3, 1], 4) == 2\nassert     get_pairs_count([5, 2, 3, 1], 6) == 3\nassert     get_pairs_count([5, 2, 3, 1], 7) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nWrite a python function to get all pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum.\n'''"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_pairs_count_2(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_pairs_count([1,2,3], 4) == 2\nassert     get_pairs_count([3,1,4,1,5], 6) == 1\n\ndef get_pairs_count_m1(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6]\n    sum = 8\n    print(get_pairs_count(arr, sum))\n    assert get_pairs_count(arr, sum) == 3, print(\"No of pairs are wrong\")\n    print(\"Test case passed\")\n    \n    "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Diff([1,3,5,7,9], [1,2,4,6,8,9]) == [3,5,7]\nassert     Diff([1,2,3,4,5], [1,2,3,4,5]) == []\nassert     Diff([], []) == []\nassert     Diff([], [2]) == []\nassert     Diff([1], [1]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Diff([1,2,3],[1,2,4]) == 2, \"Diff not working as expected.\"\nprint(\"Diff worked as expected\")\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Diff([1,2,3,4],    [1,2,3,5])\nassert not Diff([1,2,3,4],    [1,2,5,6])"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef Merge(l1,l2):\n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Diff([1,2,3,4,5,6],[3,5,7,9]) == [[1,2],[4,5],[6]]\nassert     Diff([1,2,3,4],[3,5,7,9]) == [[1,2,3],[4]]\nassert     Diff([1,2,3,4],[1,2,3]) == [[4]]\nassert     Diff([1,2,3,4,5,6,7,8,9],[5,6,7]) == [[1,2,3,4],[5,6],[7]]\nassert     Diff([1,2,3,4,5,6,7,8,9],[5,6,7,9]) == [[1,2,3,4],[5,6,7],[8,9]]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert Diff([1,2,3],[1,2,3]) == [2,3]\nassert Diff([1,2,3],[1,2]) == [3]\nassert Diff([1,2,3],[2]) == [3]\nassert Diff([1,2,3],[3]) == [1,2]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Diff([1,2,3],    [1,2]) == [3]\nassert     Diff([1,2,3],    [1,2,3]) == []\nassert     Diff([1,2],    [1,2,3]) == [2]\nassert     Diff([1,2,3],    [1,2,3]) == []\nassert     Diff([1,2],    [1,2,3]) == [2]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Diff([1,2,3],[1,2,4]) == 2\nassert     Diff([1,2,3],[1,2,3]) == 0\nassert     Diff([1,2,3],[1,2,4,3]) == 2\nassert     Diff([1,2,3,4],[1,2,4,5]) == 3\nassert     Diff([1,2,3,4],[1,2,5,6]) == 2\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff([],[]), \"Diff should return an empty list, but it returned a list\"\nassert     Diff([1,2,3],[4,5,6,7]), \"Diff should return [5,6,7]\"\nassert     Diff([4,5,6,7,8],[1,2,3]), \"Diff should return [7,8]\"\nassert     Diff([1,2,3,4],[5,6,7]), \"Diff should return [3,4]\"\nassert     Diff([0,1,2,3,4],[5,6,7]), \"Diff should return [4]\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_num_sum(2) == 4\nassert     odd_num_sum(5) == 13\nassert     odd_num_sum(10) == 55\nassert     odd_num_sum(11) == 60\n\ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(odd_num_sum(3))\n    print(odd_num_sum(4))\n    print(odd_num_sum(5))\n    print(odd_num_sum(6))\n    print(odd_num_sum(7))"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_num_sum(1) == 1\nodd_num_sum(4) == 13\nodd_num_sum(5) == 30\nodd_num_sum(7) == 385\nodd_num_sum(10) == 1425\nodd_num_sum(0) == 0"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_num_sum(10) == 8444, 'Some Error'\nassert odd_num_sum(10) == 515, 'Some Error'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(0) == 0,'should be 0'\nassert     odd_num_sum(3) == 1,'should be 1'\nassert     odd_num_sum(4) == 7,'should be 7'\nassert     odd_num_sum(5) == 22,'should be 22'\nassert     odd_num_sum(8) == 177,'should be 177'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_num_sum(1) == 1\nassert     odd_num_sum(2) == 5\nassert     odd_num_sum(3) == 14\nassert     odd_num_sum(4) == 44\nassert     odd_num_sum(5) == 121\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_num_sum(1) == 1\nassert odd_num_sum(2) == 1\nassert odd_num_sum(3) == 2\nassert odd_num_sum(4) == 4\nassert odd_num_sum(5) == 8\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_num_sum(2) == 14, 'function is not returning the correct sum'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_num_sum(8) == ((2**4)+1)\nassert     odd_num_sum(10) == ((2**4)+1)\nassert     odd_num_sum(100) == ((2**4)+1)\nassert     odd_num_sum(10000) == ((2**4)+1)\nassert     odd_num_sum(100000) == ((2**4)+1)\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_exp_balance_bracket(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_expression(\"((a+b)*c)/d\") == True\nassert     check_expression(\"((a+b)+(c+d))*((e+f)+(g+h))\") == True\nassert     check_expression(\"((a+b)+(c+d))*((e+f)+(g+h))\") == False\nassert     check_expression(\"((a+b)+(c+d))*((e+f)+(g+h))\") == True\nassert     check_expression(\"((a+b)+(c+d))*((e+f)+(g+h))\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_expression(\"()\") == True, \"Invalid\"\nassert     check_expression(\"()\") == True, \"Invalid\"\nassert     check_expression(\"()\") == True, \"Invalid\"\nassert     check_expression(\"()()\") == True, \"Invalid\"\nassert     check_expression(\"()(())\") == True, \"Invalid\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_expression('') == True\nassert     check_expression('(((a+b)*c)*(d-e))') == True\nassert     check_expression('(((a+b)*c)+((d-e)*(f+g)))') == False\nassert     check_expression('(((a+b)*c)+((d-e)*(f+g)))') == True\nassert     check_expression('(((((((a+b)*c)+((d-e)*(f+g)))-h)-i)-j)-k)') == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_expression('((a+b))') == True, \"Error\"\nassert     check_expression('(((a+b))') == False, \"Error\"\nassert     check_expression('(((a+b))') == False, \"Error\"\nassert     check_expression('((a+((b+c)))))') == True, \"Error\"\nassert     check_expression('((a+b))') == False, \"Error\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression(\"(i*2)*i\") == True, \"i*2)*i\"\nassert     check_expression(\"((i*2)*i)\") == True, \"((i*2)*i)\nassert     check_expression(\"((((i*2)*i))\") == False, \"((((i*2)*i))\"\nassert     check_expression(\"i*2)*i\") == False, \"i*2)*i\"\nassert     check_expression(\"i*2)*i\") == False, \"i*2)*i\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_balanced_parentheses(exp):\n    '''\n    Write a function to find the balanced parentheses in an expression. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_expression('(((a+b))+c)*d)') == True\nassert     check_expression('(((a+b))+c)*(d+e)*f') == True\nassert     check_expression('(((a+b))+c)*(d+e)*f*g') == False\nassert     check_expression('((a+b)*(c+d)*(e+f))') == False\nassert     check_expression('(((a+b))+c)*(d+e)*f*g') == False\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_length(\"The quick brown fox jumps over the lazy dog\", 1) ==     \"The quick brown dog jumps over the lazy\"\nassert     remove_length(\"The quick brown fox jumps over the lazy dog\", 2) ==     \"The quick brown fox\"\nassert     remove_length(\"The quick brown fox jumps over the lazy dog\", 3) ==     \"The quick brown dog\"\nassert     remove_length(\"The quick brown fox jumps over the lazy dog\", 4) ==     \"The quick brown fox jumps over the lazy\"\nassert     remove_length(\"The quick brown fox jumps over the lazy dog\", 5) ==     \"The quick brown fox jumps\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length(\"mylongstr \", 1) == \"mystr \", \"remove_length is incorrect\"\nassert     remove_length(\"mylongstr \", 2) == \"mystr \", \"remove_length is incorrect\"\nassert     remove_length(\"mylongstr \", 3) == \"mystr \", \"remove_length is incorrect\"\nassert     remove_length(\"mylongstr \", 4) == \"mystr \", \"remove_length is incorrect\"\nassert     remove_length(\"mylongstr \", 5) == \"mystr \", \"remove_length is incorrect\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length(\"i love you\", 2) == \"i love you\"\nassert     remove_length(\"i love you\", 1) == \"i love y\"\nassert     remove_length(\"i love you\", 0) == \"i\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_length('aaabbbbcccccddddddeeeeeee', 2) == 'aaabbccccddddddeeeeeee'\nassert     remove_length('aaabbbbcccccddddddeeeeeee', 4) == 'bbcccddddeeeeee'\nassert     remove_length('aaabbbbcccccddddddeeeeeee', 5) == 'cccddddeeeeee'\nassert     remove_length('aaabbbbcccccddddddeeeeeee', 0) == ''\nassert     remove_length('aaabbbbcccccddddddeeeeeee', 8) == 'eeeeee'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length(\"Testing one two three four\", 2) == \"Testing one two three\"\nassert     remove_length(\"Testing one two three four\", 3) == \"Testing one two three four\"\nassert     remove_length(\"Testing one two three four\", 4) == \"Testing one two three\"\nassert     remove_length(\"Testing one two three four\", 5) == \"Testing one two three four\"\nassert     remove_length(\"Testing one two three four\", 6) == \"Testing one two three four\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length(\"it\", 1) == \"t\"\nassert     remove_length(\"themanran\", 1) == \"manran\"\nassert     remove_length(\"themanran\", 2) == \"ran\"\nassert     remove_length(\"themanran\", 3) == \"ran\"\nassert     remove_length(\"themanran\", 4) == \"ran\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_length(\"aabccdde\", 1) == \"aabccdd\"\nassert     remove_length(\"aabccdde\", 2) == \"abccdd\"\nassert     remove_length(\"aabccdde\", 3) == \"aab\"\nassert     remove_length(\"aabccdde\", 4) == \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_length('tththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththththt"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring(\"Helloworld\",\"l\") ==     [2,6]\nassert     occurance_substring(\"Helloworld\",\"Hello\") == None\nassert     occurance_substring(\"Helloworld\",\"Hell\") ==     [3,5]\nassert     occurance_substring(\"Helloworld\",\"Helllo\") ==     [3,8]\nassert     occurance_substring(\"Helloworld\",\"Hell\") ==     None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring('mississippi', 'issi') =='mississippi'\nassert occurance_substring('mississippi', 'issi') == 'ississippi'\nassert occurance_substring('mississippi','ssi') =='mississippi'\nassert occurance_substring('mississippi', 'a') =='mississippi'\nassert occurance_substring('mississippi', 'b') =='mississippi'\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     occurance_substring(\"abcabcde\", \"abc\") == (0, 3, 3)\nassert     occurance_substring(\"abcabcde\", \"c\") == (0, 2, 3)\nassert     occurance_substring(\"abcabcde\", \"ab\") == (0, 1, 3)\nassert     occurance_substring(\"abcabcde\", \"de\") == (3, 4, 3)\nassert     occurance_substring(\"abcabcde\", \"abcde\") == (0, 4, 5)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     occurance_substring(\"abababaababaababa\",\"ab\")==(3,5)\nassert     occurance_substring(\"abcabc\",\"abc\")==(3,3)\nassert     occurance_substring(\"\",\"\")==None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     occurance_substring('aaab','a') == None\nassert     occurance_substring('aaab','b') == (2,2)\nassert     occurance_substring('aaab','aab') == (2,2)\nassert     occurance_substring('aaab','ab') == (1,1)\nassert     occurance_substring('aaab','aa') == (0,0)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('hello world','') == None, \"test 1 failed\"\nassert     occurance_substring('hello world', 'hello') == (0, 0), \"test 2 failed\"\nassert     occurance_substring('hello world', 'world') == (3, 4), \"test 3 failed\"\nassert     occurance_substring('hello world', 'world') == (3, 4), \"test 4 failed\"\nassert     occurance_substring('hello world', 'hll') == (0, 0), \"test 5 failed\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    occurance_substring(\"paul\",\"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"paul\", \"x\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"paul\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"x\", \"x\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"paul\") == None\n    occurance_substring(\"paul\", \"x\""
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     occurance_substring('hello there', 'the') ==     (True,1)\nassert     occurance_substring('hello there', 'e') ==     (False,None)\nassert     occurance_substring('hello there', 'd') ==     (False,None)\nassert     occurance_substring('hello there', 'h') ==     (False,None)\nassert     occurance_substring('hello there', 'e') ==     (False,None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntext = 'A cloud of catnip came in, A cloud of catnip came out of the cave, A cloud of catnip came in again.'\npattern = 'A'\noccurance_substring(text,pattern)\n\n'''\nThe first occurrence of the pattern in the string text is at index 0.\n\nThe second occurrence of the pattern in the string text is at index 8.\n\nThe third occurrence of the pattern in the string text is at index 16.\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_position([1,2,3,4,5]) == False\nassert     odd_position([2,4,1,5,9,6]) == True\nassert     odd_position([1,2,3,4,5,6,7]) == True\nassert     odd_position([1,2,3,4,5,6]) == False\nassert     odd_position([]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_position([4,5,6,3,7,8,9]) == True, 'Fail'\nassert odd_position([1,2,3,4,5,6,7,8,9]) == False, 'Fail'\nassert odd_position([1,2,3,4,5,6]) == True, 'Fail'\nassert odd_position([1,2,3,4,5,6,7,8,9]) == False, 'Fail'\nassert odd_position([1,2,3,4,5]) == True, 'Fail'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_position([1, 2, 3, 4, 5]) == True\nassert     odd_position([1, 3, 5]) == True\nassert     odd_position([1, 2, 3, 4, 5, 6]) == False\nassert     odd_position([1, 2, 3, 4, 5, 6, 7]) == True\n\ndef odd_position_v2(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return sum(n % 2 for n in nums) == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_position([1, 2, 3, 4, 5]) == False, \"Wrong\"\nassert     odd_position([1, 2, 3, 4, 5, 6]) == True, \"Wrong\"\n\ndef odd_position_1(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd_index.append(i)\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] = 0\n    return odd_index == nums\n\nassert odd_position_1([1, 2, 3, 4, 5]) == True, \"Wrong\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nodd_position([1, 2, 3, 4, 5, 6])"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11]) == True\nassert odd_position([]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9]) == True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_position([1,2,3,4,5])\nassert odd_position([1,2,3,4,6]) == False\nassert odd_position([1,2,3,4,7]) == True\n\n\ndef odd_position2(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert odd_position([1,2,3,4,5,6,7,8,9,10])\nassert not odd_position([1,2,3,4,5,6,7,8,9,11])\nassert not odd_position([1,2,3,4,5,6,7,8,9,10,11])\nassert not odd_position([1,2,3,4,5,6,7,8,9,10,11,12])\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels('abracadabra') == 5\nassert     count_vowels('apppppppp') == 2\nassert     count_vowels('tourist') == 6\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_vowels('AaEe') == 3\nassert     count_vowels('BbCc') == 0\nassert     count_vowels('ab') == 1\nassert     count_vowels('d') == 0\nassert     count_vowels('aA') == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_vowels('Codility') == 5\nassert     count_vowels('codility') == 5\nassert     count_vowels('CODILIVITY') == 7\nassert count_vowels('Python') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels('AAaA') == 3, \"Wrong answer\"\nassert     count_vowels('hehehehe') == 6, \"Wrong answer\"\nassert     count_vowels('aaaaa') == 4, \"Wrong answer\"\nassert     count_vowels('aAaA') == 3, \"Wrong answer\"\n\nprint('All test cases are passed!')\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_vowels('poultry') == 2\nassert count_vowels('poultry') == 1\nassert count_vowels('poultry') == 2\nassert count_vowels('poultry') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels(\"Lloyd is the best\") == 3, \"Should be 3\"\nassert     count_vowels(\"Hello there\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_vowels('abracadabra') == 5\nassert     count_vowels('Python') == 5\nassert     count_vowels('abcdefghijklmnopqrstuvwxyz') == 26\nassert     count_vowels('rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels(\"abracadabra\") == {'a': 4, 'b': 2, 'r': 2, 'd': 1, 'a': 2, 'r': 2}\nassert     count_vowels(\"Hello there!\") == {'o': 2, 'e': 1, 'h': 1, 'l': 1, 'l': 1}\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_vowels('gustavo') == 1\nassert     count_vowels('rango') == 3\nassert     count_vowels('austen') == 1\nassert     count_vowels('samuel') == 2\nassert     count_vowels('natalie') == 2\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_sum([2,1,2,3,3,5,5,7]) == 8\nassert find_sum([2,1,2,3,3,5]) == 12\nassert find_sum([1,2,2,3,3,5,7]) == 10\nassert find_sum([2,1,2,2,3,3,5]) == 10\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_sum([1,4,3,2,5,7]) == 11 \nfind_sum([5,6,7,5,9]) == 14\nfind_sum([1,2,2,2,3,4]) == 6\nfind_sum([]) == 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not find_sum([1,2,3,4,5])\nassert not find_sum(['a','b','c','d','e','f'])\nassert find_sum([1,2,1,1,1])\nassert find_sum([1,1,1,1,1])\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_sum([1, 1, 1]) == 3\nfind_sum([1, 2, 3]) == 6\nfind_sum([1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert \nfind_sum([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9]) == 15"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_sum([1,2,3,4,5,7,8,9,9,9]) == 9\nassert find_sum([1,2,3,4,5,7,8,9,9,7,8,8,8,8,8,8]) == 14\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([]) == [], \"Empty list\"\nassert     pack_consecutive_duplicates([0]) == [[0]], \"Single element\"\nassert     pack_consecutive_duplicates([0, 1, 2]) == [[0], [1], [2]], \"Single element\"\nassert     pack_consecutive_duplicates([0, 0, 1, 1, 2, 3, 3]) == [[0], [0, 1], [1, 2], [2, 3], [3]], \"Three elements\"\nassert     pack_consecutive_duplicates([0, 0, 0, 1, 1, 1, 2, 2, 2]) == [[0, 0], [0, 1], [1, 2], [2, 2], [2, 3], [3]], \"Two identical elements\"\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1]) == [[1]]\nassert     pack_consecutive_duplicates([1, 1, 1]) == [[1], [1], [1]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1]) == [[1], [1], [1], [1]]\nassert     pack_consecutive_duplicates([1, 2, 1, 1]) == [[1], [2], [1], [1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef print_lcs(X, Y, m, n): \n    \n    # X: sequence \n    # Y: sequence \n    # m: size of X \n    # n: size of Y \n    \n    dp_table = [[0 for x in range(n+1)] for x in range(m+1)] \n    \n    # Fill dp_table in bottom up manner \n    for i in range(m + 1): \n        for j in range(n + 1): \n        \n            # If last characters are same, then their \n            # LCS is the previous table value \n            if (X[i - 1] == Y[j - 1]): \n                dp_table[i][j] = dp_table[i - 1][j - 1] + 1\n            else: \n                dp_table[i][j] = max(dp_table[i - 1][j], dp_table[i][j - 1]) \n    \n    # Initialize result \n    result = \"\" \n    # Traverse through dp_table in down to up direction \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        \n        # If current character are same, then \n        # they are part of the LCS \n        if X[i - 1] == Y[j - 1]: \n            result = result + X[i - 1] \n            i = i - 1\n            j = j - 1\n        \n        # If not same, then find the larger of two \n        # and go in the direction of larger value \n        else: \n            if dp_table[i - 1][j] > dp_table[i][j - 1]: \n                i = i - 1\n            else: \n                j = j - 1\n    \n    # print result\n    return result \n\nassert print_lcs(\"sunday\", \"saturday\", 3, 4) == \"saturday\"\nassert print_lcs(\"courses\", \"recours\", 4, 4) == \"courses\"\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([1,2,2,3,4,4,5,5]) == [[1, 2], [2, 3], [4, 4, 5]]\nassert     pack_consecutive_duplicates([1,1,2,3,4,4,5,5]) == [[1, 1], [2, 3], [4, 4, 5]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1]) == [[1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates(['hi', 'hi', 'hi', 'hi', 'hi']) == [['hi', 'hi', 'hi'], ['hi', 'hi'], ['hi']]\nassert     pack_consecutive_duplicates(['hi', 'hi', 'hi']) == [['hi', 'hi', 'hi']]\nassert     pack_consecutive_duplicates(['hi']) == [['hi']]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates(['hi', 'hi', 'hi']) == [['hi', 'hi', 'hi']]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 10]) == [[1, 2, 3, 4, 5], [6, 7, 8, 10]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [[1, 2, 3, 4, 5], [6, 7, 8], [9]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == [[1], [2, 3, 4, 5, 6], [7, 8, 9], [1]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10], [1]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11], [12]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 2, 3, 3, 4, 5]) == [[1, 2], [2, 2], [3, 3], [3, 4], [4, 5]]\nassert     pack_consecutive_duplicates([1, 2, 2, 3, 3, 4, 5]) == [[1, 2], [2, 2], [3, 3], [3, 4], [4, 5]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 1, 1]) == [[1, 1]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [[1, 1], [1, 1], [1, 1]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1,2,2,3,4,5,6]) == [[1, 2], [2, 3], [4, 5], [6]]\nassert     pack_consecutive_duplicates([1,2,3,4]) == [[1, 2], [3, 4]]\nassert     pack_consecutive_duplicates([1,2,3,3]) == [[1, 2], [3]]\nassert     pack_consecutive_duplicates([1,2,3,2,2,3]) == [[1, 2], [3], [2, 2], [3]]\nassert     pack_consecutive_duplicates([1,1,1,1,1,1,1]) == [[1], [1], [1], [1], [1], [1], [1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert unique_sublists([]) == {}\nassert unique_sublists([1]) == {(1,):1}\nassert unique_sublists([1,1]) == {(1,1):2}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([]) == {(): 0}, \"Empty list\"\nassert     unique_sublists([1, 1]) == {(): 2}, \"Two items\"\nassert     unique_sublists([1, 2]) == {(): 1, (1, 2): 1}, \"Same item\"\nassert     unique_sublists([1, 2, 2, 2, 3, 3, 4, 4]) == {(): 9, (1, 2): 4, (1, 3): 3, (1, 4): 2, (2, 2): 2, (2, 3): 2, (2, 4): 1, (3, 3): 2, (3, 4): 1, (4, 4): 1}, \"Same items and frequency\"\nassert     unique_sublists([1, 2, 3, 1, 2, 3, 1, 2, 3]) == {(): 9, (1, 2): 3, (1, 3): 2, (2, 2): 2, (2, 3): 2, (3, 3): 2}, \"Different items and frequency\"\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if type(i) == tuple:\n            for j in i:\n                if j in d:\n                    d[j] += 1\n                else:\n                    d[j] = 1\n    return d"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([[1, 1, 1], [1, 2, 3], [3, 1, 2]]) == {([1, 1, 1], 2), ([1, 2, 3], 3), ([3, 1, 2], 2)}\nassert unique_sublists([1, 1, 1, 1, 1, 1]) == {([1, 1, 1], 6)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([[1,2], [1,3], [2,3]]) == {([1,2], 1), ([1,3], 1), ([2,3], 1)}\nassert     unique_sublists([[1,2], [1,2], [2,3], [3,3]]) == {([1,2], 2), ([2,3], 2), ([3,3], 2)}\nassert     unique_sublists([[1,2], [1,2], [1,2]]) == {([1,2], 3)}\nassert     unique_sublists([[1,2]]) == {([1,2], 1)}\nassert     unique_sublists([[1,2]]) == {([1,2], 1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([[1,2,3], [3,4,5], [2,3,4], [1,2,3]]) == {(1,3):3, (2,3):2, (3,4):2, (1,2):3, (2,3):3, (3,4):1, (1,2,3):1}\nassert     unique_sublists([[1,2,3], [3,4,5], [2,3,4]]) == {(1,3):2, (2,3):2, (3,4):1, (1,2):3, (2,3):3, (3,4):1, (1,2,3):1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1,2],[2,3],\n                          [1,2]]) == {\n                                [1,2]:2,\n                                [2,3]:1,\n                                (1,2):1,\n                                (2,3):1\n                          }\n\nassert     unique_sublists([[1,2,3,4],[2,3,4],[3,4]]) == {\n                                [1,2,3,4]:4,\n                                [2,3,4]:3,\n                                [3,4]:2,\n                                (1,2,3,4):2,\n                                (2,3,4):2,\n                                (3,4):1\n                          }\n\nassert     unique_sublists([]) == {}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef f(x):\n    return [i for i in range(x)]\n\ndef f1(x):\n    return [i for i in range(x) if i % 2 == 0]\n\ndef f2(x):\n    return {i for i in range(x)}\n\ndef f3(x):\n    return {i: True for i in range(x)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {}\nassert     unique_sublists([1]) == {(1,): 1}\nassert     unique_sublists([1,2]) == {(1,): 1, (2,): 1}\nassert     unique_sublists([1,2,3]) == {(1,): 1, (2,): 1, (3,): 1}\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == \n    [((1, 2), (3, 4), (5, 6)), ((7, 8), (9, 10), (11, 12))] \n    \nassert     find_combinations([(1, 2), (3, 4), (5, 6)]) == \n    [((1, 2), (3, 4), (5, 6))] \n    \nassert find_combinations([(1, 2), (3, 4), (5, 6)]) == \n    [((1, 2), (3, 4), (5, 6))] \n    \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_combinations([]) == []\nassert     find_combinations([[1,2,3],[4,5,6]]) == [[(1,4,5)], [(1,3,5)], [(2,4,6)], [(2,3,6)], [(3,4,6)], [(3,5,6)]]\nassert     find_combinations([[1,2,3,4],[5,6,7,8]]) == [[(1,5,6)], [(1,2,5)], [(1,3,5)], [(1,4,5)], [(2,3,6)], [(2,4,6)], [(3,4,6)], [(3,5,6)], [(4,5,6)]]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([(1,2), (3,4), (5,6)]) == [{1, 3}, {2, 4}, {5, 6}]\nassert     find_combinations([(1,2), (3,4), (5,6), (7,8)]) == [{1, 3, 7}, {1, 3, 8}, {2, 4, 7}, {2, 4, 8}, {3, 4, 7}, {3, 4, 8}, {5, 6, 7}, {5, 6, 8}]\nassert     find_combinations([(1,2), (3,4), (5,6), (7,8), (9,10)]) == [{1, 3, 7, 9}, {1, 3, 8, 9}, {2, 4, 7, 9}, {2, 4, 8, 9}, {3, 4, 7, 9}, {3, 4, 8, 9}, {5, 6, 7, 9}, {5, 6, 8, 9}]\nassert     find_combinations([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)]) == [{1, 3, 7, 9, 11}, {1, 3, 8, 9, 11}, {2, 4, 7, 9, 11}, {2, 4, 8, 9, 11}, {3, 4, 7, 9, 11}, {3, 4, 8, 9, 11}, {5, 6, 7, 9, 11}, {5, 6, 8, 9, 11}]\nassert     find_combinations([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14), (15,16)]) == [{1, 3, 7, 9, 11, 13}, {1, 3, 8, 9, 11, 13}, {2, 4, 7, 9, 11, 13}, {2, 4, 8, 9, 11, 13}, {3, 4, 7, 9, 11, 13}, {3, 4, 8, 9, 11, 13}, {5, 6, 7, 9, 11, 13}, {5, 6, 8, 9, 11, 13}]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntest_list = [[1,2,3,4],\n    [1,2,4,6],\n    [5,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,4,5,6,7,8,9],\n    [1,2,5,6,7,8,9],\n    [1,2,3,5,7,8,9],\n    [1,2,3,4,6,7,8,9],\n    [1,2,3,4,5,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,6,7,8,9],\n    [1,2,3,4,5,6,8,9],\n    [1,2,3,4,5,6,7,9],\n    [1,2,3,4,5,6,7,8],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,2,3,4,5,6,7,8,9],\n    [1,"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations(test_list) == [[('a', 1), ('b', 1)], [('a', 1), ('b', 2)], [('a', 1), ('b', 3)], [('a', 2), ('b', 1)],\n    [('a', 2), ('b', 2)], [('a', 2), ('b', 3)], [('a', 3), ('b', 1)], [('a', 3), ('b', 2)], [('a', 3), ('b', 3)]]\n\ntest_list2 = []\nprint(find_combinations(test_list2))\n\ntest_list3 = [('a', 1), ('b', 1)]\nprint(find_combinations(test_list3))\n\ntest_list4 = [('a', 1), ('b', 2)]\nprint(find_combinations(test_list4))\n\ntest_list5 = [('a', 1), ('b', 3)]\nprint(find_combinations(test_list5))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([(1,3),(2,4),(3,5)]) == [(1,3),(2,4),(3,5)]\nassert     find_combinations([(1,3),(2,4),(3,5),(6,10),(7,8)]) == [(1,3),(2,4),(3,5),(6,10),(7,8)]\nassert     find_combinations([(1,3),(2,4),(3,5),(6,10),(7,8)]) == [(1,3),(2,4),(3,5),(6,10),(7,8)]\nassert     find_combinations([(1,3),(2,4),(3,5),(6,10),(7,8)]) == [(1,3),(2,4),(3,5),(6,10),(7,8)]\nassert     find_combinations([(1,3),(2,4),(3,5),(6,10),(7,8)]) == [(1,3),(2,4),(3,5),(6,10),(7,8)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_combinations([(1,3),(2,3),(3,3)]) ==      [(1,3),(2,3),(3,3)], 'Error'\nassert     find_combinations([(1,2),(2,2)]) ==     [(1,2),(2,2)], 'Error'\nassert     find_combinations([(1,2),(2,1)]) ==     [(1,2),(2,1)], 'Error'\nassert     find_combinations([(1,2),(2,3)]) ==     [(1,2),(2,3)], 'Error'\nassert     find_combinations([(1,2),(2,2)]) ==     [(1,2),(2,2)], 'Error'\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_combinations([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert     find_combinations([1,2,3,4,5,6]) == []\nassert     find_combinations([1,2,3,4,5,6,7]) == [[1,2,3,4,5,6],[1,2,3,4,5,6,7]]\nassert     find_combinations([1,2,3,4,5,6,7,8]) == [[1,2,3,4,5,6,7,8]]\nassert     find_combinations([1,2,3,4,5,6,7,8,9]) == [[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8,9]]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([('a', 1), ('b', 2), ('c', 3)]) == set([('a', 'b', 'c')])\nassert     find_combinations([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == set([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e'), ('a', 'c', 'd'), ('a', 'c', 'e'), ('a', 'd', 'e'), ('b', 'c', 'd'), ('b', 'c', 'e'), ('b', 'd', 'e'), ('c', 'd', 'e')])\nassert     find_combinations([('a', 1), ('b', 2), ('c', 3)]) == set([('a', 'b', 'c')])\nassert     find_combinations([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == set([('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'e'), ('a', 'c', 'd'), ('a', 'c', 'e'), ('a', 'd', 'e'), ('b', 'c', 'd'), ('b', 'c', 'e'), ('b', 'd', 'e'), ('c', 'd', 'e')])\nassert     find_combinations([('a', 1), ('b', 2), ('c', 3)]) == set([('a', 'b', 'c')])\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations(test_list_1) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\nassert     find_combinations(test_list_2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\nassert     find_combinations(test_list_3) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\nassert     find_combinations(test_list_4) == []\nassert     find_combinations(test_list_5) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20)]\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_divisors(10) == 2\nassert     count_divisors(100) == 4\nassert     count_divisors(1000) == 8\nassert     count_divisors(10000) == 13\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef list_to_dict(L) :\n    '''\n    Write a python function to convert a list of keys and values into a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_even_or_odd(n) :\n    '''\n    Write a python function to check whether the number is even or odd.https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-15.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_divisors(n):\n    # count the divisors of n\n    divisors = 0\n    if n%2 == 0:\n        divisors = divisors + 1\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors = divisors + 2\n            \n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_divisors(13) == 6, 'incorrect return value'\nassert     count_divisors(16) == 6, 'incorrect return value'\nassert     count_divisors(18) == 6, 'incorrect return value'\nassert     count_divisors(24) == 6, 'incorrect return value'\nassert     count_divisors(27) == 6, 'incorrect return value'\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_divisors(4) == 2\nassert count_divisors(15) == 5\nassert count_divisors(16) == 4\n\ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not. If the given number is not prime then return False, else return True.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_divisors(6) == 4\nassert     count_divisors(7) == 6\nassert     count_divisors(10) == 5\nassert     count_divisors(30) == 6\n\n\ndef factorial(n) :\n    '''\n    Write a python function to compute the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_divisors(10) == 5, \"True\"\nassert     count_divisors(20) == 6, \"True\"\nassert     count_divisors(30) == 8, \"True\"\nassert     count_divisors(50) == 11, \"True\"\nassert     count_divisors(100) == 20, \"True\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not count_divisors(0)\nassert count_divisors(1)\nassert count_divisors(2)\nassert count_divisors(3)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_divisors(2) == 2\nassert     count_divisors(3) == 2\nassert     count_divisors(4) == 1\nassert     count_divisors(5) == 2\nassert     count_divisors(6) == 1\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nodd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 19\nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 33\nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 150\nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]) == 250\nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]) == 334\n\n\ndef odd_length_sum_array(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert odd_length_sum([]) == 0, 'input an empty list'\nassert odd_length_sum([1, 2, 3]) == 6, 'input a list of positive integers'\nassert odd_length_sum([1, 2, 3, 4, 5]) == 21, 'input a list of integers'\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45, 'input a list of integers'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_length_sum([1, 2, 3]) == 6\nassert     odd_length_sum([1, 2, 3, 4]) == 10\nassert     odd_length_sum([1, 2, 3, 4, 5]) == 14\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 18\n\ndef even_length_sum(arr):\n    '''\n    Write a python function to find the sum of all even length subarrays. https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef  sum_of_subarrays(arr,n,k):\n    '''\n    Write a python function to find the sum of all subarrays with length greater than or equal to k.\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_length_sum([1,2,3]) == 3\nodd_length_sum([1,2,3,4]) == 0\nodd_length_sum([1,3,5,7,9]) == 3\nodd_length_sum([1,2,3,4,5,6,7]) == 1\nodd_length_sum([1,2,3,4,5,6,7,8,9]) == 3\nodd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 4\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 5\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 5\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nodd_length_sum([]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0\nodd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_length_sum([1,1,2,3,5]) == 7, 'Odd length sum is not correct'\nassert odd_length_sum([1,2,3]) == 0, 'Odd length sum is not correct'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_length_sum([2, -1, 3, 4, -1, -2, 1]) == 8\nassert \nodd_length_sum([2, -1, 3, 4, -1, -2, 1, 7]) == 8\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_length_sum([1,2,3,4]) == 7\nassert     odd_length_sum([1,2,3,4,5]) == 14\nassert     odd_length_sum([2,2,2,2]) == 6\n\ndef anagram(s1,s2):\n    '''\n    Write a python function to determine whether two strings are anagrams or not. https://www.geeksforgeeks.org/anagrams-in-python/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 15\nassert     odd_length_sum([1, 2, 3, 4]) == 15\nassert     odd_length_sum([1, 2, 3]) == 0\n\n\ndef replace_strings_using_indices(arr):\n    '''\n    Write a python function to replace all the strings in a given string array using the given indices\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nr, g, b = 4, 5, 6\nhsv = rgb_to_hsv(r, g, b)\nassert(hsv == (45.0, 1.0, 1.0))\n\nr, g, b = 8, 7, 6\nhsv = rgb_to_hsv(r, g, b)\nassert(hsv == (60.0, 0.0, 1.0))\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert     rgb_to_hsv(255, 0, 0) == (255, 0, 0)\nassert     rgb_to_hsv(0, 255, 0) == (0, 255, 0)\nassert     rgb_to_hsv(0, 0, 255) == (0, 0, 255)\nassert     rgb_to_hsv(0.5, 0, 1) == (36, 0, 1)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rgb_to_hsv(1, 2, 3) == (1.5811388301169, 0.166667, 0.4)\n\nassert rgb_to_hsv(0, 0, 0) == (0, 0, 0)\n\nassert rgb_to_hsv(0, 0, 0.5) == (0, 0, 0.5)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # ('rgb_to_hsv', rgb_to_hsv ), 'Your code is incorrectly implemented'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 120\nassert     mul_even_odd([-5, -4, -3, -2, -1]) == -20\nassert     mul_even_odd([1, 2, 3, 4]) == 24\nassert     mul_even_odd([]) == 1\n\ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is a prime number or not.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mul_even_odd([2, 3, 5, 5, 4, 6]) == 120, 'incorrect result'\nassert     mul_even_odd([10, 20, 30]) == 0, 'incorrect result'\nassert     mul_even_odd([1, 4, 9]) == 81, 'incorrect result'\nassert     mul_even_odd([0, 0, 0]) == 0, 'incorrect result'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_number_product = 1\n    odd_number_product = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_number_product *= i\n        else:\n            odd_number_product *= i\n\n    return even_number_product, odd_number_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mul_even_odd([3, 5, 8, 9, 10, 11, 14]) == 72, \\\n        'mul_even_odd([3, 5, 8, 9, 10, 11, 14]) == 72'\nassert     mul_even_odd([10, 20, 30, 40, 50]) == 0, \\\n        'mul_even_odd([10, 20, 30, 40, 50]) == 0'\nassert     mul_even_odd([0, 1, 2, 3, 4, 5]) == 0, \\\n        'mul_even_odd([0, 1, 2, 3, 4, 5]) == 0'\nassert     mul_even_odd([2, 4, 8, 10]) == 120, \\\n        'mul_even_odd([2, 4, 8, 10]) == 120'\nassert     mul_even_odd([1, 2, 3, 4, 5]) == 0, \\\n        'mul_even_odd([1, 2, 3, 4, 5]) == 0'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mul_even_odd([2,3,4,5,6]) == 24\nassert     mul_even_odd([1,2,3,4,5]) == 30\nassert     mul_even_odd([]) == 0\nassert     mul_even_odd([1,1,1,1,1]) == 1\nassert     mul_even_odd([100,200,300,400]) == 0\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mul_even_odd([1,3,2,8,9])== 3*11, \"incorrect multiplication\"\nassert mul_even_odd([1,2,3,4,5])== 2*3, \"incorrect multiplication\"\nassert mul_even_odd([10,20,30,40,50])== 120, \"incorrect multiplication\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mul_even_odd([1,2,3,4,5,6,7]) == [120, 30]\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10]) == [120, 30, 360]\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10,11]) == [120, 30, 360, 420]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 20, 'Return should be 20'\nassert     mul_even_odd([1,2,3,4,5,6]) == 36, 'Return should be 36'\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10]) == 120, 'Return should be 120'\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 240, 'Return should be 240'\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 1040, 'Return should be 1040'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mul_even_odd([3,6,9,12]) == 0\nassert     mul_even_odd([4,8,15,16]) == 16\nassert     mul_even_odd([]) == 0\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1,2,3), 'Wrong tuple'\nassert     tuple_str_int('(1,2)') == (1,2), 'Wrong tuple'\nassert     tuple_str_int('(1,2,3,4)') == (1,2,3,4), 'Wrong tuple'\nassert     tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5), 'Wrong tuple'\nassert     tuple_str_int('(1,2,3,4,5,6,7)') == (1,2,3,4,5,6,7), 'Wrong tuple'\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int('(\"a\", \"b\")') == ('a', 'b')\nassert     tuple_str_int('(\"a\", \"b\", \"c\")') == ('a', 'b', 'c')\nassert     tuple_str_int('(\"a\", \"b\", \"c\", \"d\")') == ('a', 'b', 'c', 'd')\nassert     tuple_str_int('(\"a\", \"b\", \"c\", \"d\", \"e\")') == ('a', 'b', 'c', 'd', 'e')\nassert     tuple_str_int('(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")') == ('a', 'b', 'c', 'd', 'e', 'f')\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int(('', '0', '0.3', '0.7', '0.8', '1.2', '1.8', '2.3', '4', '5', '-6', '-1', '-1.4', '-1.5', '-1.6', '-1.7')) == (0,0,0.3,0.7,0.8,1.2,1.8,2.3,4,5,-6,-1, -1.4,-1.5,-1.6,-1.7)\nassert tuple_str_int(('', '0', '0.3', '0.7', '0.8', '1.2', '1.8', '2.3', '4', '5', '-6', '-1', '-1.4', '-1.5', '-1.6', '-1.7')) == (0,0,0.3,0.7,0.8,1.2,1.8,2.3,4,5,-6,-1, -1.4,-1.5,-1.6,-1.7)\nassert tuple_str_int(('', '0', '0.3', '0.7', '0.8', '1.2', '1.8', '2.3', '4', '5', '-6', '-1', '-1.4', '-1.5', '-1.6', '-1.7')) == (0,0,0.3,0.7,0.8,1.2,1.8,2.3,4,5,-6,-1, -1.4,-1.5,-1.6,-1.7)\nassert tuple_str_int(('', '0', '0.3', '0.7', '0.8', '1.2', '1.8', '2.3', '4', '5', '-6', '-1', '-1.4', '-1.5', '-1.6', '-1.7')) == (0,0,0.3,0.7,0.8,1.2,1.8,2.3,4,5,-6,-1, -1.4,-1.5,-1.6,-1.7)\nassert tuple_str_int(('', '0', '0.3', '0.7', '0.8', '1.2', '1.8', '2.3', '4', '5', '-6', '-1', '-1.4', '-1.5', '-1.6', '-1.7')) == (0,0,0.3,0.7,0.8,1.2,1.8,2.3,4,5,-6,-1, -1.4,-1.5,-1.6,-1.7)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nWrite a function to generate a tuple, randomly generated list\n'''\ndef random_tuple():\n    '''\n    Write a function to generate a tuple, randomly generated list\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3), 'tuples!'\nassert     tuple_str_int('(0, 1, 2)') == (0, 1, 2), 'tuples!'\nassert     tuple_str_int('(3, 4, 5)') == (3, 4, 5), 'tuples!'\nassert     tuple_str_int('(6, 7, 8, 9)') == (6, 7, 8, 9), 'tuples!'\nassert     tuple_str_int('(0)') == (0), 'tuples!'\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_str_int('(5, 6, 7, 8, 9)') == (5, 6, 7, 8, 9)\nassert     tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(10, )') == (10,)\nassert     tuple_str_int('( )') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_str_int(\"(1,2,3,4)\") == (1,2,3,4)\nassert     tuple_str_int(\"(3,2,1)\") == (3,2,1)\nassert     tuple_str_int(\"(3,2,1)\") == (3,2,1)\nassert     tuple_str_int(\"(1,2,3,4,5,6,7)\") == (1,2,3,4,5,6,7)\nassert     tuple_str_int(\"(9,8,7,6,5,4)\") == (9,8,7,6,5,4)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert tuple_str_int('(1,2,3,4)') == (1,2,3,4)\nassert tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5)\nassert tuple_str_int('(1,2,3,4,5,6)') == (1,2,3,4,5,6)\nassert tuple_str_int('(1,2,3,4,5,6,7)') == (1,2,3,4,5,6,7)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(10)\") == (10, )\nassert     tuple_str_int(\"(10,)\") == (10, )\nassert     tuple_str_int(\"(10, )\") == (10, )\nassert     tuple_str_int(\"(10, )\") == (10, )\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int(('10', '10')) == ('10', '10')\nassert tuple_str_int(('10', '20')) == ('10', '20')\nassert tuple_str_int(('10', '30')) == ('10', '30')\nassert tuple_str_int(('10', '40')) == ('10', '40')\nassert tuple_str_int(('10', '50')) == ('10', '50')\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert right_insertion([], 2) == 0\nassert right_insertion([1, 2, 3], 2) == 1\nassert right_insertion([1, 2, 3], 4) == 3\nassert right_insertion([1, 2, 3], 0) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\na = [4, 6, 1, 2]\nfor i in range(len(a)):\n    print(right_insertion(a, i))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     right_insertion([1, 5, 2, 4, 3], 0) == 2\nassert right_insertion([1, 5, 2, 4, 3], 2) == 4\nassert right_insertion([1, 5, 2, 4, 3], 5) == 4\nassert right_insertion([1, 5, 2, 4, 3], 6) == 5\nassert right_insertion([1, 5, 2, 4, 3], 7) == 5\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     right_insertion([3, 4, 5, 6, 7], 4) == 3\nassert     right_insertion([3, 4, 5, 6, 7], 7) == 4\nassert     right_insertion([3, 4, 5, 6, 7], 5) == 4\nassert     right_insertion([3, 4, 5, 6, 7], 6) == 4\nassert     right_insertion([3, 4, 5, 6, 7], 7) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     right_insertion([1, 5, 2, 4, 3], 1) == 1\nassert     right_insertion([1, 5, 2, 4, 3], 5) == 4\nassert     right_insertion([1, 5, 2, 4, 3], 2) == 2\nassert     right_insertion([1, 5, 2, 4, 3], 3) == 3\nassert     right_insertion([1, 5, 2, 4, 3], 4) == 3\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     right_insertion([0,2,4,6,8,10,11], 3) == 4\nassert     right_insertion([0,2,4,6,8,10,11], 5) == 4\nassert     right_insertion([0,2,4,6,8,10,11], 12) == 5\nassert     right_insertion([0,2,4,6,8,10,11], 1) == 1\nassert     right_insertion([0,2,4,6,8,10,11], 4) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_insertion([1,2,3,4], 2) == 3\nassert     right_insertion([1,2,3,4], 5) == 4\nassert     right_insertion([1,2,3,4], 0) == 0\nassert     right_insertion([], 0) == 0\nassert     right_insertion([], 5) == 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_insertion([0,2,3,5,6,8], 5) == 3, 'wrong'\nassert     right_insertion([1,2,3,4,5], 1) == 1, 'wrong'\nassert     right_insertion([1,2,3,4,5], 4) == 4, 'wrong'\nassert     right_insertion([1,2,3,4,5], 8) == 5, 'wrong'\nassert     right_insertion([1,2,3,4,5], 2) == 2, 'wrong'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three('abababab') == 'abababab'\nassert     text_match_three('bbbbbbbbbb') == 'bbbbbbbbbb'\nassert     text_match_three('aaaaaaaaaaaaaaaaaa') == 'aaaaaaaaaaaaaaaaaa'\nassert     text_match_three('aaaaaaaaaaaaaaaaa') == 'aaaaaaaaaaaaaaaaa'\nassert     text_match_three('aaaaaaaaaaaaaaaaaaa') == 'aaaaaaaaaaaaaaaaaaa'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('abababababab') == True\nassert     text_match_three('aba') == False\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three('ab') == True\nassert     text_match_three('ababab') == True\nassert     text_match_three('abcabcabc') == True\nassert     text_match_three('aaaa') == False\nassert     text_match_three('aaaaa') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_three('ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b', 'b', and then a b.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three('') == False, \"Text is not a string.\"\nassert     text_match_three(\"ababab\") == True, \"Wrong match.\"\nassert     text_match_three(\"abababab\") == False, \"Wrong match.\"\nassert     text_match_three(\"abb\") == False, \"Wrong match.\"\nassert     text_match_three(\"\") == False, \"Wrong match.\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three('ababab') == True, 'a followed by b followed by b followed by b'\nassert     text_match_three('aba') == False, 'a followed by b followed by b'\nassert     text_match_three('ababa') == True, 'a followed by b followed by b'\nassert     text_match_three('abbb') == True, 'a followed by b followed by b'\nassert     text_match_three('abbbb') == False, 'a followed by b followed by b'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three('aabab') == 'abc'\nassert     text_match_three('aabab') == 'abc'\nassert     text_match_three('aabab') == 'abc'\nassert     text_match_three('abab') == 'a'\nassert     text_match_three('abab') == 'a'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three(\"ababb\") == True\nassert     text_match_three(\"aaab\") == False\nassert     text_match_three(\"aaab\") == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three(\"aabaaaaab\")\nassert     text_match_three(\"aabababab\") == None\nassert     text_match_three(\"aabaaaaaa\") == \"aabaaaaaa\"\nassert     text_match_three(\"aaa\") == None\nassert     text_match_three(\"bb\") == None\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_tuple(test_tuple, test_tuple2):\n    '''\n    Write a function to check whether the given tuples are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     new_tuple(test_list, test_str) == (test_str, test_list), \"Fail\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnew_tuple([\"cat\", \"dog\"], \"the cat\") == (\"the\", \"cat\")\nassert \nnew_tuple([\"cat\", \"dog\", \"fish\"], \"the cat\") == (\"the\", \"cat\", \"fish\")\nassert \nnew_tuple([\"cat\", \"dog\", \"fish\"], \"the fish\") == (\"the\", \"cat\", \"fish\")\nassert \nnew_tuple([\"cat\", \"dog\", \"fish\"], \"dog\") == (\"dog\", \"cat\", \"fish\")\nassert \nnew_tuple([\"cat\", \"dog\", \"fish\"], \"dog fish\") == (\"dog\", \"cat\", \"fish\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c')\nassert     new_tuple([1, 2, 3], '123') == (1, 2, 3)\nassert     new_tuple([1, 2], 'abc') == ('a', 'b', 'c')\nassert     new_tuple([1], 'a') == (1,)\nassert     new_tuple([], 'a') == ()\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c'), 'Your solution is wrong'\nassert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c'), 'Your solution is wrong'\nassert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c'), 'Your solution is wrong'\nassert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c'), 'Your solution is wrong'\nassert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c'), 'Your solution is wrong'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     new_tuple([1,2,3,4], 'hello') == (1,2,3,4), \"Wrong output\"\nassert     new_tuple([1,2,3,4], 'world') == (1,2,3,4), \"Wrong output\"\nassert     new_tuple([1,2,3,4],'my') == (1,2,3,4), \"Wrong output\"\nassert     new_tuple([1,2,3,4],'my ') == (1,2,3,4), \"Wrong output\"\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     new_tuple([1,2,3], 'hello') == (1, 2, 3), 'Wrong'\nassert     new_tuple([1,2,3], 'world') == (1, 2, 3), 'Wrong'\nassert     new_tuple([1,2,3], 'the') == (1, 2, 3), 'Wrong'\nassert     new_tuple([1,2,3], 'apple') == (1, 2, 3), 'Wrong'\nassert     new_tuple([1,2,3], 'abc') == (1, 2, 3), 'Wrong'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_list = ['a','b','c']\n    test_str = 'abc'\n    \n    print(f\"new_tuple(test_list, test_str):\\n{new_tuple(test_list, test_str)}\")\n    "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     new_tuple([1, 2, 3], 'abc') == (1, 2, 3)\nassert     new_tuple([1, 2, 3], 'ABC') == (1, 2, 3)\nassert     new_tuple([1, 2, 3], 'aBc') == (1, 2, 3)\nassert     new_tuple([1, 2, 3], 'aBc') == (1, 2, 3)\nassert     new_tuple([1, 2, 3], 'Bc') == (2, 3, 1)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_position([1,2,3,4,5,6,7]) == False\neven_position([1,2,3,4,5,6,7,8,9,10]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    nums = []\n    print(even_position(nums)"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([3,6,9,0,12,3]) == True\nassert     even_position([5,8,3,4,6,2,1]) == False\nassert     even_position([9,7,8,5,6,4,3]) == True\nassert     even_position([7,8,5,6,4,3]) == False\nassert     even_position([6,4,3,2,1]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_position([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert even_position([1, 2, 3, 4, 5, 6]) == False\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert even_position([1, 2, 3, 4, 5, 6, 7]) == True\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == False, \"Should be False\"\nassert     even_position([1, 2, 3, 4, 5, 6]) == True, \"Should be True\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7]) == True, \"Should be True\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) == False, \"Should be False\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False, \"Should be False\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_position([1,2,3,4,5,6]) == True\nassert \neven_position([0,1,2,3,4,5]) == True\nassert \neven_position([-1,-2,-3,-4,-5]) == True\nassert \neven_position([]) == False\nassert \neven_position([5,6,7,8,9]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == True\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([1,2,3,4,5,6,7,8]) == True\nassert     even_position([1,2,3,4,5,6,7,8,9,10]) == False\nassert even_position([1,2,3,4,5,6,7]) == False\nassert even_position([1,2,3,4,5,6,7,8,9]) == False\nassert even_position([]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) is True, \"Even position function is not correct.\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is True, \"Even position function is not correct.\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) is False, \"Even position function is not correct.\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) is True, \"Even position function is not correct.\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) is False, \"Even position function is not correct.\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_position([1,2,3,4,5]) == True\nassert     even_position([1,2,3,4,7]) == False\nassert     even_position([1,2,3,5]) == True\nassert     even_position([1,2,3,4,10]) == True\nassert     even_position([1,2,3,5,8,10]) == True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested((1,2,3,(4,5),6)) == (1,2,3,6)\nassert     remove_nested((1,2,3,(4,5),6)) == (1,2,3,(4,5),6)\nassert     remove_nested((1,2,3,(4,5),6)) == (1,2,3,(4,5),6)\nassert     remove_nested((1,2,3,(4,5),6)) == (1,2,3,(4,5),6)\nassert     remove_nested((1,2,3,(4,5),6)) == (1,2,3,(4,5),6)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested((3, 4, 5, 6, 3, 4, 5, 6, 3, 4)) == ((3, 4, 5, 6),)\nassert remove_nested((3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6)) == ((3, 4, 5, 6),)\nassert remove_nested((3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6)) == ((3, 4, 5, 6),)\nassert remove_nested((3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6)) == ((3, 4, 5, 6),)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested((0, (), ())) == (0,)\nassert     remove_nested((0, (0,), (0,))) == (0, 0)\nassert     remove_nested((0, (0,), (0,), (0,))) == (0, 0)\nassert     remove_nested((0, (0,), (0,), (0,), (0,))) == (0, 0)\nassert     remove_nested((0, (), (0,), (0,), (0,))) == (0, 0)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested((1, 2, (3, 4))) == (1, 2)\nassert     remove_nested((1, 2, (3, (4, 5)))) == (1, 2)\nassert     remove_nested((1, 2, (3, (4, (5, 6)))) == (1, 2)\nassert     remove_nested((1, 2, (3, (4, (5, 6))))) == (1, 2)\nassert     remove_nested((1, 2, (3, (4, (5, 6))))) == (1, 2)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((1,2,3)) ==     ((1,), (2,), (3,))\nassert     remove_nested((1,2,3,4,5,6)) ==     ((1,2,3), (4,5,6))\nassert     remove_nested((1,(2,3),4,5,6)) ==     ((1,), ((2,3), 4, 5, 6))\nassert     remove_nested((1,(2,3),4,(5,6))) ==     ((1,), ((2,3), 4, (5,6)))\nassert     remove_nested((1,(2,3),4)) ==     ((1,), (2, 3, 4))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested((1, 2, 3, 4)) == (1, 2, 3, 4), \"should return (1, 2, 4)\"\nassert     remove_nested((1, (2, 3), 4)) == (1, 2, 4), \"should return (1, (2, 3), 4)\"\nassert     remove_nested((1, (2, 3), (4, 5, 6))) == (1, 2, (4, 5, 6)), \"should return (1, 2, (4, 5, 6))\"\nassert     remove_nested((1, (2, 3), (4, 5, 6), 7)) == (1, (2, 3), (4, 5, 6)), \"should return (1, (2, 3), (4, 5, 6))\"\nassert     remove_nested((1, (2, 3), (4, 5, 6), (7, 8, 9))) == (1, (2, 3), (4, 5, 6)), \"should return (1, (2, 3), (4, 5, 6))\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested([(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12), (13, 14, 15)]) == [(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12), (13, 14, 15)]\nassert     remove_nested((1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     remove_nested((1, 2, 3)) == (1, 2, 3)\nassert     remove_nested((1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     remove_nested((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested((1, 2, (3,), 4, 5)) == ((1, 2, 4, 5),), \\\n    \"Error in remove_nested\"\nassert     remove_nested((1, 2, (3, 4), 5)) == ((1, 2, 5),), \\\n    \"Error in remove_nested\"\nassert     remove_nested((1, 2, (3, 4, 5), 6)) == ((1, 2, 4, 5),), \\\n    \"Error in remove_nested\"\n\ndef remove_nested_recursive(test_tup):\n    '''\n    Write a recursive function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((\"hellow\", \"what\", \"how\", \"are\", \"you\", \"lol\", \"s\", \"coding\")) == ('hellow', 'how', 'are', 'you')\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([[1,2,3],[4,5,6],[7,8,9]]) == 1, \"Expected 1\"\nassert     count_list([[1,2,3],[4,5,6,7],[8,9,10]]) == 2, \"Expected 2\"\nassert     count_list([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == 3, \"Expected 3\"\nassert     count_list([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == 4, \"Expected 4\"\nassert     count_list([[1,2,3,4,5],[6,7,8,9],[10,11,12,13,14]]) == 5, \"Expected 5\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_list([[],[],[],[]]    ==    1) \nassert     count_list([[[],[],[],[]]])     ==    1\nassert     count_list([[[],[],[],[]],[[],[],[],[]]])     ==    2\nassert     count_list([[[],[],[],[],[]],[[],[],[],[],[]],[[],[],[],[]]])     ==    3\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_list([[1,2,3],[4,5,6],[7,8,9]]) == 3, \"function does not return the correct value\"\nassert     count_list([[1,2,3],[4,5,6],[7,8,9]]) == 1, \"function does not return the correct value\"\nassert     count_list([[1,2,3],[1,2,3],[1,2,3]]) == 3, \"function does not return the correct value\""
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncount_list([[],[],[],[],[]]) == 0\ncount_list([[],[],[],[]]) == 1\ncount_list([[[],[],[],[]]]) == 1\ncount_list([[[],[]]]) == 2\ncount_list([[[],[],[],[]]]) == 3\ncount_list([[[],[],[]]]) == 4\ncount_list([[[],[]]]) == 5\ncount_list([[[],[]]]) == 6"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_list([[1, 2, 3], [4], [5]]) == 3\nassert     count_list([[[1, 2, 3]], [[4]], [[5]]]) == 2\nassert     count_list([[[1, 2, 3], [4, 5]], [[6, 7]], [[8, 9]]]) == 1\nassert     count_list([[[1, 2, 3], [4, 5]], [[6, 7]], [[8, 9]]]) == 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert count_list([[1,2,3], [1,2,3,4,5], [1,2,3]]) == 2\nassert count_list([[1,2,3,4,5,6,7,8,9,10], ['a','b','c','d','e','f','g','h','i','j'], ['k','l','m','n','o','p','q','r','s','t'], ['u','v','w','x','y','z']]) == 6\nassert count_list([[1,2,3,4,5,6,7,8,9], ['a','b','c','d','e','f','g','h','i'], ['k','l','m','n','o','p','q','r','s','t'], ['u','v','w','x','y','z']]) == 5\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([[1,2,3],[4,5],[6,7,8]]) == 3, \"Function does not work!\"\nprint(\"Function works!\")\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_list([[1,2,3,4], [1,2], [1]]) == 3, \"Expected 3\"\nassert     count_list([[1,2,3,4], [1,2], [1]]) == 2, \"Expected 2\"\nassert     count_list([[1,2,3,4], [1,2], [1]]) == 0, \"Expected 0\"\nassert     count_list([[1], [1,2,3], [1,2]]) == 2, \"Expected 2\"\nassert     count_list([[1,2], [1,2], [1,2,3]]) == 3, \"Expected 3\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('All assertions are passed')\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([1,3,4,5,6,7], 3) == 5, \"wrong output\"\nassert     last([1,3,4,5,6,7], 9) == 4, \"wrong output\"\nassert     last([1,3,4,5,6,7], 1) == 6, \"wrong output\"\nassert     last([1,3,4,5,6,7], 8) == 7, \"wrong output\"\n\nprint(\"all test cases passed\")\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last([5, 6, 7, 8, 9], 5) == 3, 'wrong answer'\nassert     last([5, 6, 7, 8, 9], 6) == 4, 'wrong answer'\nassert     last([5, 6, 7, 8, 9], 7) == 5, 'wrong answer'\nassert     last([5, 6, 7, 8, 9], 8) == 6, 'wrong answer'\nassert     last([5, 6, 7, 8, 9], 9) == 7, 'wrong answer'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last([1,2,3,4,5], 1) == 4\nassert last([1,2,3,4,5], 2) == 5\nassert last([1,2,3,4,5], 3) == 4\nassert last([1,2,3,4,5], 4) == 3\nassert last([1,2,3,4,5], 5) == 2\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last([1,2,3,4,5],3) == 3, 'Wrong result'\nassert last([1,2,3,4,5],5) == 5, 'Wrong result'\nassert last([1,2,3,4,5],1) == 5, 'Wrong result'\nassert last([1,2,3,4,5],2) == 3, 'Wrong result'\nassert last([1,2,3,4,5],0) == 0, 'Wrong result'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9],9) == 9\nassert     last([1,2,3,4,5,6,7,8,9],0) == -1\nassert     last([1,2,3,4,5,6,7,8,9],2) == 2\nassert     last([1,2,3,4,5,6,7,8,9],11) == -1\nassert     last([1,2,3,4,5,6,7,8,9],0) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([1, 2, 3, 4, 5], 5) == 4\nassert     last([1, 2, 3, 4, 5], 1) == -1\nassert     last([1, 2, 3, 4, 5], 3) == 1\nassert     last([1, 2, 3, 4, 5], 6) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert last([1,2,3,4],4)==3\nassert last([1,2,3,4],1)==0\nassert last([1,2,3,4],5)==-1\n\n\ndef is_leap(year):\n    '''\n    Write a python function to check whether a year is leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    last([1,2,3,4,6],4) == 3\n    last([1,2,3,4,6],6) == 4\n    last([1,2,3,4,6],1) == -1\n    last([1,2,3,4,6],0) == -1\n    last([],1) == -1\n    last([],0) == -1\n    last([1],1) == -1\n    last([1],0) == -1\n    last([1],-1) == -1\n    last([1],-2) == -1\n    last([1,1],1) == -1\n    last([1,1],2) == -1\n    last([1,1],3) == 1\n    last([1,1,1],1) == -1\n    last([1,1,1],2) == -1\n    last([1,1,1],3) == 1\n    last([1,2,3,1],3) == -1\n    last([1,2,3,1],4) == -1\n    last([1,2,3,1],5) == 1\n    last([1,2,3,1],6) == 1\n    last([1,2,3,1],7) == -1\n    last([1,2,3,1],0) == -1\n    last([1,2,3,1],-1) == -1\n    last([1,2,3,1],-2) == -1\n    last([1,2,3,1],-3) == -1\n    last([1,2,3,4,6],4) == 4\n    last([1,2,3,4,6],5) == -1\n    last([1,2,3,4,6],6) == 6\n    last([1,2,3,4,6],7) == 7\n    last([1,2,3,4,6],8) == 7\n    last([1,2,3,4,6],9) == -1\n    last([1,2,3,4,6],10) == -1\n    last([1,2,3,4,6],11) == -1\n    last([1,2,3,4,6],12) == -1\n    last([1,2,3,4,6],13) == -1\n    last([1,2,3,4,6],14) == -1\n    last([1,2,3,4,6],15) == -1\n    last([1,2,3,4,6],16) == -1\n    last([1,2,3,4,6],17) == -1\n    last([1,2,3,4,6],18) == -1\n    last([1,2,3,4,6],19) == -1\n    last([1,2,3,4,6],20) == -1\n    last([1,2,3,4,6],21) == -1\n    last([1,2,3,4,6],22) == -1\n    last([1,2,3,4,6],23) == -1\n    last([1,2,3,4,6],24) == -1\n    last([1,2,3,4,6],25) == -1\n    last([1,2,3,4,6],26) == -1\n    last([1,2,3,4,6],27) == -1\n    last([1,2,3,4,6],28) == -1\n    last([1,2,3,4,6],29) == -1\n    last([1,2,3,4,6],30) == -1\n    last([1,2,3,4,6],31) == -1\n    last([1,2,3,4,6],32) == -1\n    last([1,2,3,4,6],33) == -1\n    last([1,2,3,4,6],34) == -1\n    last([1,2,3,4,6],35) == -1\n    last([1,2,3,4,6],36) == -1\n    last([1,2,3,4,6],37) == -1\n    last([1,2,3,4,6],38) == -1\n    last([1,2,3,4,6],39) == -1\n    last([1,2,3,4,6],40) == -1\n    last([1,2,3,4,6],41) == -1\n    last([1,2,3,4,6],42) == -1\n    last([1,2,3,4,6],43) == -1\n    last([1,2,3,4,6],44) == -1\n    last([1,2,3,4,6],45) == -1\n    last([1,2,3,4,6],46) == -1\n    last([1,2,3,4,6],47) == -1\n    last([1,2,3,4,6],48) == -1\n    last([1,2,3,4,6],49) == -1\n    last([1,2,3,4,6],50) == -1\n    last([1,2,3,4,6],51) == -1\n    last([1,2,3,4,6],52) == -1\n    last([1,2,3,4,6],53) == -1\n    last([1,2,3,4,6],54) == -1\n    last([1,2,3,4,6],55) == -1\n    last([1,2,3,4,6],56) == -1\n    last([1,2,3,4,6],57) == -1\n    last([1,2,3,4,6],58) == -1\n    last([1,2,3,4,6],59) == -1\n    last([1,2,3,4,6],60) == -1\n    last([1,2,3,4,6],61) == -1\n    last([1,2,3,4,6],62) == -1\n    last([1,2,3,4,6],63) == -1\n    last([1,2,3,4,6],64) == -1\n    last([1,2,3,4,6],65) == -1\n    last([1,2,3,4,6],66) == -1\n    last([1,2,3,4,6],67) == -1\n    last([1,2,3,4,6],68) == -1\n    last([1,2,3,4,6],69) == -1\n    last([1,2,3,4,6],70) == -1\n    last([1,2,3,4,6],71) == -1\n    last([1,2,3,4,6],72) == -1\n    last([1,2,3,4,6],73) == -1\n    last([1,2,3,4,6],74) == -1\n    last([1,2,3,4,6],75) == -1\n    last([1,2,3,4,6],76) == -1\n    last([1,2,3,4,6],77) == -1\n    last([1,2,3,4,6],78) == -1\n    last([1,2,3,4,6],79) == -1\n    last([1,2,3,4,6],80) == -1\n    last([1,2,3,4,6],81) == -1\n    last([1,2,3,4,6],82) == -1\n    last([1,2,3,4,6],83) == -1\n    last([1,2,3,4,6],84) == -1\n    last([1,2,3,4,6],85) == -1\n    last([1,2,3,4,6],86) == -1\n    last([1,2,3,4,6],87) == -1\n    last([1,2,3,4,6],88) == -1\n    last([1,2,3,4,"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb('abab') == False, 'a, b, a, b'\nassert     text_starta_endb('abcb') == True, 'a, b, c, b'\nassert     text_starta_endb('aab') == False, 'a, b, a, b'\nassert     text_starta_endb('ab') == False, 'a, b'\nassert     text_starta_endb('ababab') == True, 'a, b, a, b, a, b'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('abc') == False, 'abc'\nassert     text_starta_endb('abcba') == True, 'abcba'\nassert     text_starta_endb('abcbaabcba') == False, 'abcbaabcba'\nassert     text_starta_endb('abcbaabcbaa') == False, 'abcbaabcbaa'\nassert     text_starta_endb('abcbaabcbaaa') == False, 'abcbaabcbaaa'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('ab') == True \nassert     text_starta_endb('bb') == False \nassert     text_starta_endb('bbb') == True \nassert     text_starta_endb('bbba') == True \nassert     text_starta_endb('baa') == True \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb(\"ab\") == True\nassert     text_starta_endb(\"ab\") == False\nassert     text_starta_endb(\"aa\") == True\nassert     text_starta_endb(\"bb\") == True\nassert     text_starta_endb(\"acb\") == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('aaaa') == True\nassert     text_starta_endb('bbbb') == True\nassert     text_starta_endb('aaaaa') == False\nassert     text_starta_endb('aaaaab') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb(\"aaab\") == False, '1'\nassert     text_starta_endb(\"abac\") == False, '2'\nassert     text_starta_endb(\"aab\") == True, '3'\nassert     text_starta_endb(\"aaac\") == False, '4'\nassert     text_starta_endb(\"abcd\") == False, '5'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_text_starta_endb():\n    assert text_starta_endb('ab') == True\n    assert text_starta_endb('aaaabb') == True\n    assert text_starta_endb('aaab') == False\n    "
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb('a') == False\nassert     text_starta_endb('abc') == False\nassert     text_starta_endb('abb') == True\nassert     text_starta_endb('abbab') == True\nassert     text_starta_endb('abbaaaab') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb(\"ababa\") == True\nassert     text_starta_endb(\"bbbab\") == False\nassert     text_starta_endb(\"ab\") == False\nassert     text_starta_endb(\"ababababab\") == False\nassert     text_starta_endb(\"bbbbbbbb\") == True\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({}) == 0, 'Empty dictionary'\nassert     return_sum({0: 1}) == 1, 'Dictionary with one key'\nassert     return_sum({1: 1, 2: 5}) == 6, 'Dictionary with two keys'\nassert     return_sum({1: 2, 2: 5, 3: 10}) == 13, 'Dictionary with multiple keys'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nreturn_sum({}) == 0\nreturn_sum({0: 1, 1:2}) == 3\nreturn_sum({0:1, 1:2}) == 3\nreturn_sum({0:1, 1:2, 2:3}) == 5\nreturn_sum({0:1, 1:2, 2:3, 3:4}) == 8\nreturn_sum({0:1, 1:2, 2:3, 3:4, 4:5}) == 15\nreturn_sum({0:1, 1:2, 2:3, 3:4, 4:5, 5:6}) == 21\n\n'''\nWrite function which checks whether the given dictionary is empty or not.\n'''\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 3\nassert     return_sum({}) == 0\nassert     return_sum({'a': 1}) == 1\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({\"A\":1,\"B\":2,\"C\":3}) == 6\nassert     return_sum({\"A\":1,\"B\":2,\"D\":4}) == 7\n\ndef count_letters(list_of_strings):\n    '''\n    Write function to count the number of characters in a list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({}) == 0, 'Expected: 0'\nassert     return_sum({'key1': 1}) == 1, 'Expected: 1'\nassert     return_sum({'key1': 1, 'key2': 2}) == 3, 'Expected: 3'"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     return_sum({1: 1, 2: 2, 3: 3}) == 6\nassert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6\nassert     return_sum({'h': 1, 'e': 2, 'l': 3, 'o': 4}) == 13\n\nprint('Test 1 Successful.')\n\nprint('Test 2 Successful.')\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     return_sum({1:1, 2:2}) == 3, \"Not working correctly\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({}) == 0, f\"wrong answer: {return_sum({})}\"\nassert     return_sum({1:1, 2:2}) == 3, f\"wrong answer: {return_sum({1:1, 2:2})}\"\nassert     return_sum({1:1, 2:2, 3:3}) == 6, f\"wrong answer: {return_sum({1:1, 2:2, 3:3})}\"\nassert     return_sum({1:1, 2:2, 3:3, 4:4, 5:5}) == 15, f\"wrong answer: {return_sum({1:1, 2:2, 3:3, 4:4, 5:5})}\"\nassert     return_sum({1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9}) == 21, f\"wrong answer: {return_sum({1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9})}\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(return_sum({\n    1: 3,\n    2: 5,\n    3: 6,\n    4: 7\n    })) == 14, \"Test 1 failed\"\nprint(return_sum({\n    1: 3,\n    2: 5,\n    3: 6,\n    4: 7\n    })) == 14, \"Test 2 failed\"\nprint(return_sum({\n    1: 3,\n    2: 5,\n    3: 6,\n    4: 7\n    })) == 14, \"Test 3 failed\"\n\n\nprint('Testing function is_factor_of')\n\ndef is_factor_of(num, factor):\n    '''\n    Write function to check whether the given number is factor of the given number.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    \n    # uncomment to run doctest\n    # doctest.testfile('doctest_test.txt')\n\n    # find the sum of all items in the dictionary\n    dict = {'a': 3, 'b': 7}\n    print(return_sum(dict))\n    # 6"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(1, 2) == 1, 'Wrong'\nassert sum_odd(1, 3) == 1, 'Wrong'\nassert sum_odd(10, 15) == 1, 'Wrong'\n\ndef sum_odd_v1(l, r):\n    '''\n    This function is an original implementation of the sum_odd function and the input and output are same.\n    The only difference between the original function and this function is that the original function:\n    '''\n    res = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            res += i\n    return res\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_odd(1,2) == 1\nassert     sum_odd(3,5) == 9\nassert     sum_odd(0,10) == sum_odd(0,10)\nassert     sum_odd(10,15) == sum_odd(10,15)\nassert     sum_odd(-1,0) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_odd(0, -2) == 0, 'the result should be 0'\nassert     sum_odd(1, -2) == 1, 'the result should be 1'\nassert     sum_odd(-1, 0) == 0, 'the result should be 0'\nassert     sum_odd(0, 1) == 1, 'the result should be 1'\nassert     sum_odd(1, 2) == 3, 'the result should be 3'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_odd(100) == 149\nassert     sum_odd(0) == 0\nassert     sum_odd(1) == 1\nassert     sum_odd(2) == 3\nassert     sum_odd(3) == 6\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_odd(3,5) == 13\nassert     sum_odd(1,4) == 1\nassert     sum_odd(2,3) == 5\nassert     sum_odd(1,2) == 1\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_odd(10) == 0\nsum_odd(100) == 200\nsum_odd(-10) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sum_odd(0,0) == 0\nassert sum_odd(0,1) == 0\nassert sum_odd(0,2) == 1\nassert sum_odd(1,0) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sum_odd(2) == 3\nassert sum_odd(7) == 13\nassert sum_odd(100) == sum_odd(1000) == sum_odd(10000) == sum_odd(100000) == sum_odd(1000000) == sum_odd(1000001) == sum_odd(999999) == sum_odd(999999999) == sum_odd(99999999999) == sum_odd(99999999999999) == sum_odd(99999999999999999) == sum_odd(999999999999999999999) == sum_odd(9999999999999999999999999) == sum_odd(999999999999999999999999999) == sum_odd(9999999999999999999999999999) == sum_odd(9999999999999999999999999999999) == sum_odd(9999999999999999999999999999999999999) == sum_odd(99999999999999999999999999999999999999999) == sum_odd(99999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == sum_odd(999999999999999999999999999999999999999999999) == su"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (sum_odd(2) == 3), \"Should be 3\"\nassert     (sum_odd(4) == 8), \"Should be 8\"\nassert     (sum_odd(5) == 15), \"Should be 15\"\nassert     (sum_odd(10) == 33), \"Should be 33\"\nassert     (sum_odd(50) == 137), \"Should be 137\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([1,2,3,4,5,6]) == 21, 'Wrong output'\nassert _sum([]) == 0, 'Wrong output'\nassert _sum([1]) == 1, 'Wrong output'\nassert _sum([1,2,3,4,5,6]) == 21, 'Wrong output'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert _sum([1,2,3]) == 6\nassert _sum([0,1,2,3]) == 6\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     _sum([1,2,3,4,5]) == 15\nassert     _sum([0,0]) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     _sum([1,2,3,4]) == 10\nassert     _sum([]) == 0\nassert     _sum([1,2,3,4,5]) == 15\nassert     _sum([1,2,3,4,5,6,7]) == 21\nassert     _sum([1,2,3,4,5,6,7,8,9]) == 33\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     _sum([1, 2, 3, 4, 5]) == 15,    \"WRONG\"\nassert     _sum([1, 2, 3, 4, 5, 5, 5, 5, 5]) == 15,    \"WRONG\"\nassert     _sum([]) == 0,    \"WRONG\"\nassert     _sum([1, 2, 3, 4, 5, 6]) == 15,    \"WRONG\""
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     _sum([1,2,3]) == 6, \"_sum\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     _sum([1,2,3,4]) == 10, 'incorrect'\nassert     _sum([-1,-2,-3,-4]) == -10, 'incorrect'\nassert     _sum([1,2,3,4]) == 10, 'incorrect'\nassert     _sum([-1,-2,-3,-4]) == -10, 'incorrect'\nassert     _sum([1]) == 1, 'incorrect'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     _sum([1,2,3,4]) == 10, \"It should return the sum of all array elements.\"\nassert _sum([1,2,3,4]) == 10, \"It should return the sum of all array elements.\"\nassert _sum([1,2,3,4]) == 10, \"It should return the sum of all array elements.\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     _sum([1, 2, 3, 4, 5, 6]) == 15"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef right_rotate(n,d):\n    '''\n    Write a function that right rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_rotate(17,0) == 17, 'left_rotate must be the same as 17'\nassert     left_rotate(27,2) == 15, 'left_rotate must be the same as 15'\nassert     left_rotate(27,3) == 20, 'left_rotate must be the same as 20'\nassert left_rotate(45,5) == 75, 'left_rotate must be the same as 75'\nassert left_rotate(45,8) == 63, 'left_rotate must be the same as 63'\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_rotate(5,0) == 5\nassert     left_rotate(5,1) == 4\nassert     left_rotate(5,2) == 3\nassert     left_rotate(5,3) == 2\nassert     left_rotate(5,4) == 1\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    left_rotate(1,3) == 0b000\n    left_rotate(0b111,3) == 0b100\n    left_rotate(0b1111,3) == 0b0000\n\n    left_rotate(0b111,2) == 0b100\n    left_rotate(0b1111,2) == 0b0000\n    left_rotate(0b111,5) == 0b100\n    left_rotate(0b1111,5) == 0b0000\n\n    left_rotate(0b1111,0) == 0b1111\n    left_rotate(0b1111,31) == 0b1111\n    left_rotate(0b1111,32) == 0b1111\n    left_rotate(0b1111,63) == 0b1111\n\n    left_rotate(0b11111,0) == 0b11111\n    left_rotate(0b11111,31) == 0b11111\n    left_rotate(0b11111,32) == 0b11111\n    left_rotate(0b11111,63) == 0b11111\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     left_rotate(1,1) == 0\nassert     left_rotate(2,1) == 0\nassert     left_rotate(2,2) == 1\nassert     left_rotate(3,2) == 1\nassert     left_rotate(7,1) == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(left_rotate(0b00000101,3)) # 000110\nprint(left_rotate(0b00000101,5)) # 10011\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_all_spaces('hello') == 'hello', 'Expected \"hello\" but got \"%s\"' % remove_all_spaces('hello')\nassert remove_all_spaces('hello world') == 'hello world', 'Expected \"hello world\" but got \"%s\"' % remove_all_spaces('hello world')\nassert remove_all_spaces('') == '', 'Expected \"\" but got \"%s\"' % remove_all_spaces('')\nassert remove_all_spaces('  ') == '', 'Expected \"\" but got \"%s\"' % remove_all_spaces('  ')\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_occurences_of_element_in_array(text, search_element, delimiter =''):\n    '''\n    Write a function to count the number of times a particular element (search_element) appears in a string\n    delimiter is not counted, so the count should be accurate\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces('1234') == '1234', \"remove_all_spaces returns wrong value.\"\nassert     remove_all_spaces('  hi  ') == 'hi', \"remove_all_spaces returns wrong value.\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_lower_case(text):\n    '''\n    Write a function to check whether all the characters in a string are in lower case.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_all_spaces(\"This is a test\") == \"This is a test\", \"Should remove all spaces\"\nassert remove_all_spaces(\"     \") == \"\", \"Should remove all spaces\"\nassert remove_all_spaces(\"\\n\\t\\t\\t\") == \"\", \"Should remove all spaces\"\n\ndef remove_all_spaces_2(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces(' hello  world!') == 'hello world'\nassert     remove_all_spaces(' hello     world!') == 'hello world'\nassert     remove_all_spaces('hello world  ') == 'hello world'\nassert     remove_all_spaces('hello world') == 'hello world'\nassert     remove_all_spaces('   hello world') == 'hello world'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces(\"   \") == \"\", \"Wrong\"\nassert     remove_all_spaces(\"\") == \"\", \"Wrong\"\nassert     remove_all_spaces(\" \") == \"\", \"Wrong\"\nassert     remove_all_spaces(\"   \\t\") == \"\", \"Wrong\"\n\ndef remove_all_spaces_and_trim(text):\n    '''\n    Write a function that removes all spaces and\n    returns the string with leading and trailing spaces removed.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_all_spaces(\"this is a text\") == \"this is a text\"\nassert     remove_all_spaces(\"This is a text\") == \"This is a text\"\nassert     remove_all_spaces(\"this   is    a text\") == \"this   is    a text\"\nassert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_three_equal(0,0,0) == 3\ntest_three_equal(3,3,3) == 1\ntest_three_equal(3,0,3) == 2\ntest_three_equal(3,3,0) == 2\n\n'''\na. Write a python function to sort a list of integers by sorting the list using merge sort algorithm\n'''\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_three_equal(1,2,3) == 2, \"Failed\"\nassert     test_three_equal(1,1,3) == 3, \"Failed\"\nassert     test_three_equal(1,2,1) == 1, \"Failed\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_three_equal(1, 2, 3) == 1\nassert     test_three_equal(3, 3, 3) == 1\nassert     test_three_equal(3, 3, 1) == 2\nassert     test_three_equal(1, 1, 1) == 3\nassert     test_three_equal(2, 2, 2) == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_three_equal(3,3,3) == 3\nassert     test_three_equal(3,3,4) == 2\nassert     test_three_equal(3,4,3) == 0\nassert     test_three_equal(3,4,4) == 1\nassert     test_three_equal(3,3,5) == 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_three_equal(1,2,3) == 0, 'Test Case 1 Failed'\nassert     test_three_equal(2,2,2) == 1, 'Test Case 2 Failed'\nassert     test_three_equal(2,2,3) == 2, 'Test Case 3 Failed'\nassert     test_three_equal(2,3,2) == 1, 'Test Case 4 Failed'\nassert     test_three_equal(3,2,2) == 2, 'Test Case 5 Failed'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_three_equal(1,1,1) == 3, 'Should be 3'\nassert     test_three_equal(1,1,2) == 2, 'Should be 2'\nassert     test_three_equal(1,2,1) == 1, 'Should be 1'\nassert     test_three_equal(1,2,2) == 0, 'Should be 0'\nassert     test_three_equal(2,1,1) == 0, 'Should be 0'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_three_equal(1,2,3) == 0, 'Fail'\nassert     test_three_equal(1,2,3) == 0, 'Fail'\nassert     test_three_equal(1,1,3) == 3, 'Fail'\nassert     test_three_equal(1,2,1) == 0, 'Fail'\nassert     test_three_equal(1,2,1) == 0, 'Fail'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_three_equal(0,0,0) == 3\nassert     test_three_equal(0,1,0) == 2\nassert     test_three_equal(1,0,0) == 1\nassert     test_three_equal(1,1,1) == 0\nassert     test_three_equal(2,2,2) == 0"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_rotation([3,4,5,1,2]) == 4\n    count_rotation([2, 1, 3]) == 1\n    count_rotation([-2, -3, 4, 1, -2]) == 2\n    count_rotation([1, 2, 1]) == 0\n    count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n    count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_rotation([]) == 0\nassert \ncount_rotation([1]) == 0\nassert \ncount_rotation([1, 2]) == 0\nassert \ncount_rotation([2, 1]) == 0\nassert \ncount_rotation([1, 2, 3]) == 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_rotation([1,2,3]) == 3, \"Wrong Answer\"\nassert count_rotation([1,3,2]) == 3, \"Wrong Answer\"\nassert count_rotation([1,3,2,2]) == 2, \"Wrong Answer\"\nassert count_rotation([1,3,2,2,2]) == 1, \"Wrong Answer\"\nassert count_rotation([1,2,3,4]) == 0, \"Wrong Answer\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('Tests passed...')\nprint('Correct answer is 14. Expected answer is 14')\n\nprint('-----------------------------------------------')\n\nprint('Testing count_rotation')\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncount_rotation(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_rotation([0,1,2,3,4,5,6]) == 2\nassert count_rotation([1,2,3,4,5,6,0]) == 0\nassert count_rotation([1,2,3,4,5,6,0,7,8,9]) == 9\n\nprint('Congratulations, you have passed all requirements for this problem!')\n\n'''\nQuestion 1: Write a Python program to create the first 20 perfect squares. \nhttps://en.wikipedia.org/wiki/Perfect_squares\n'''\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_rotation([3, 4, 5, 6, 1]) == 3\nassert     count_rotation([1, 2, 3, 4, 5]) == 0\nassert     count_rotation([1, 2, 3, 4, 5, 6]) == 1\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7]) == 2\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_rotation([0,1,2,3,4,5,6,7,8,9]) == 9\nassert     count_rotation([0,1,2,3,4,5,6,7,8,9,10]) == 6\nassert     count_rotation([0,1,2,3,4,5,6,7,8,9,10,11]) == 1\nassert     count_rotation([0,1,2,3,4,5,6,7,8,9,10,11,12]) == 0"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_rotation_naive(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_primes(start, end) :\n    '''\n    Write a program to count the number of prime numbers between a given range. https://www.geeksforgeeks.org/count-the-number-of-prime-numbers-in-a-given-range/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_perfect_square(4) == True\nassert is_perfect_square(9) == False\n\ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is a prime number or not. https://www.geeksforgeeks.org/check-whether-a-number-is-a-prime-number-in-python/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_perfect_square(25) == True, \"Should return True\"\nassert     is_perfect_square(9) == False, \"Should return False\"\nassert     is_perfect_square(-2) == False, \"Should return False\"\nassert     is_perfect_square(1) == False, \"Should return False\"\nassert     is_perfect_square(4) == True, \"Should return True\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"\\n\")\n\ndef print_primes_up_to(n):\n    '''\n    Print all the prime numbers from 2 up to n using while loop and return as a list.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_perfect_square(9) == False\nassert is_perfect_square(25) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_perfect_square(0) == False, \"Should return False for n = 0\"\nassert     is_perfect_square(1) == False, \"Should return False for n = 1\"\nassert     is_perfect_square(2) == False, \"Should return False for n = 2\"\nassert     is_perfect_square(3) == False, \"Should return False for n = 3\"\nassert     is_perfect_square(4) == False, \"Should return False for n = 4\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_perfect_square(1) == False, \"1 is not a perfect square\"\nassert     is_perfect_square(3) == False, \"3 is not a perfect square\"\nassert     is_perfect_square(4) == True, \"4 is a perfect square\"\nassert     is_perfect_square(25) == True, \"25 is a perfect square\"\n\nprint(\"is_perfect_square passed all tests\")\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_product_even([1, 2, 3, 4, 5]) == True\nassert     is_product_even([1, 2, 4, 8, 16]) == False\nassert     is_product_even([1, 2, 2]) == True\n\nprint(\"All tests passed\")\n\ndef is_product_odd(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_product_even([2,3,4,5,6,7,8,9,10]) == True, \n        \"is_product_even([2,3,4,5,6,7,8,9,10]) is wrong\"\nassert     is_product_even([1,2,3,4,5,6,7,8,9,10,11]) == False, \n        \"is_product_even([1,2,3,4,5,6,7,8,9,10,11]) is wrong\"\nassert     is_product_even([1,2,3,4,5,6,7,8,9,10,11,12]) == False, \n        \"is_product_even([1,2,3,4,5,6,7,8,9,10,11,12]) is wrong\"\nassert     is_product_even([]) == False, \n        \"is_product_even([]) is wrong\"\nassert     is_product_even(None) == False, \n        \"is_product_even(None) is wrong\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_product_even([1,2,3,4,5]) == False, \"Wrong answer\"\nassert is_product_even([2,4,6,8]) == True, \"Wrong answer\"\nassert is_product_even([2,3]) == False, \"Wrong answer\"\n\ndef min_element(arr):\n    '''\n    Write a function that takes a list of integers and returns the minimum element.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_product_even([2, 4, 6]) == False, \"First\"\nassert     is_product_even([2, 2, 2]) == True, \"Second\"\nassert     is_product_even([3, 4, 5]) == True, \"Third\"\nassert     is_product_even([2, 4]) == False, \"Fourth\"\nassert     is_product_even([4, 2]) == True, \"Fifth\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_product_even([\"cat\", \"dog\"]) == False, \"Product of the list is not even\"\nassert     is_product_even([\"cat\", \"mouse\"]) == False, \"Product of the list is even\"\nassert     is_product_even([\"cat\"]) == False, \"Product of the list is even\"\nassert     is_product_even([]) == False, \"Product of the list is even\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_product_even([-1, 2, 3, -4]) == True\nassert     is_product_even([1, 2, -3, -4]) == False\nassert     is_product_even([]) == False\nassert     is_product_even([-10, 20, 30, -40]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_product_even([1,2,3,4,5]) == False, 'Not a product of numbers'\nassert     is_product_even([1,2,3,4,5]) == True, 'a product of numbers'\nassert     is_product_even([1,2,3,4,5,10]) == False, 'Not a product of numbers'\nassert     is_product_even([1,2,3,4,5,10]) == True, 'a product of numbers'\n\ndef is_product_odd(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_product_even([2,4,6]) == False, 'Not False'\nassert     is_product_even([2,4,6,8]) == False, 'Not False'\nassert     is_product_even([2,4,6,9]) == True, 'Not True'\nassert     is_product_even([3,4,5]) == False, 'Not False'\nassert     is_product_even([3,4,5,6]) == False, 'Not False'\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([[1,2,3,4], [3,4,5,6], [1,2,3,4], [3,4,5,6]]) == [[1,2,3,4], [3,4,5,6], [1,2,3,4], [3,4,5,6]], \"Wrong\"\nassert max_sum_list([[1,2,3], [4,5,6], [7,8,9], [2,3,4]]) == [[1,2,3], [4,5,6], [7,8,9], [2,3,4]], \"Wrong\"\n\ndef max_sum_list_recursive(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_list([[1,2,3], [4,5,6]]) == [[1,2,3], [4,5,6]]\nassert     max_sum_list([[5,3,4,1,2], [10,6,9,11,7], [1,2,3,4,5]]) == [[5,3,4,1,2], [1,2,3,4,5], [10,6,9,11,7]]\nassert     max_sum_list([[4,2,1,1,1], [3,2,4,4,3], [1,2,3,4,5]]) == [[4,2,1,1,1], [3,2,4,4,3], [1,2,3,4,5]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_sum_list([[1,2,3,4,5,6],\n                [4,5,6,7,8,9],\n                [3,2,1,0,9,8]]) == [[4,5,6],\n                    [3,2,1],\n                    [0,9,8]]\nassert max_sum_list([[1,2,3,4,5,6],\n                [4,5,6,7,8,9],\n                [3,2,1,0,9,8],\n                [6,7,8,9,10]]) == [[10],\n                    [9,8],\n                    [8,7,6,5,4,3],\n                    [7,6,5,4,3]]\nassert max_sum_list([[1,2,3,4,5],\n                [4,5,6,7,8],\n                [3,2,1,0,9],\n                [6,7,8,9,10]]) == [[10],\n                    [9,8],\n                    [7,6,5,4,3],\n                    [6,5,4,3]]\nassert max_sum_list([[1,2,3,4,5,6],\n                [4,5,6,7,8,9],\n                [3,2,1,0,9,8],\n                [6,7,8,9,10,11]]) == [[10],\n                    [9,8],\n                    [7,6,5,4,3],\n                    [6,5,4,3],\n                    [11]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_list([[1], [-2], [1, 2], [-1, -2, 2]]) == [[-1], [-2], [-1, -2, 2]]\nassert     max_sum_list([[1], [-2], [1, 2], [-1, -2, 2], [-2], [-1, -2, 2]]) == [[1], [-2], [1, 2], [-1, -2, 2], [-2], [-1, -2, 2]]\nassert     max_sum_list([[1, 2, 3], [3, 4, 5]]) == [[1, 2, 3], [3, 4, 5]]\nassert     max_sum_list([[1, 2, 3, 4], [4, 5, 6, 7]]) == [[1, 2, 3, 4], [4, 5, 6, 7]]\nassert     max_sum_list([[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 3, 4]]) == [[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 3, 4]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nlists = [[3, 3, 3, 3],\n    [2, -1, 2],\n    [-1, 1, 2],\n    [-4, 2, 1, 5],\n    [-6, -4, -3, -5],\n    [2, 2, 2, 2],\n    [-4, -3, -5, -6]]\n\ndef max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    new_list = []\n    for i in lists:\n        for j in i:\n            new_list.append(j)\n    max_sum = max(new_list)\n    max_list = []\n    for i in lists:\n        for j in i:\n            if j == max_sum:\n                max_list.append(i)\n                \n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert max_sum_list([[1, 1, 1], [2, 2, 2], [-1, -2, 3]]) == [[1, 1, 1], [-1, -2, 3]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_list([[1,2],[3,-3],[-1,-2]]) == [[1,2],[3,-3],[-1,-2]]\nassert     max_sum_list([[3,3],[3,1],[-2,2]]) == [[3,3],[3,1],[-2,2]]\nassert     max_sum_list([[1,1],[-5,-2],[3,-1]]) == [[1,1],[-5,-2],[3,-1]]\nassert     max_sum_list([[0,-1],[-2,-3],[-4,-5]]) == [[0,-1],[-2,-3],[-4,-5]]\nassert     max_sum_list([[-2,-1],[-3,-2],[-1,-5]]) == [[-2,-1],[-3,-2],[-1,-5]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum_list([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1]]\nassert     max_sum_list([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == [[1, 1, 1, 1], [1, 1, 1, 1]]\nassert     max_sum_list([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\nassert     max_sum_list([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\nassert     max_sum_list([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert max_sum_list([]) == []\nassert max_sum_list([[]]) == []\nassert max_sum_list([[1]]) == [[1]]\nassert max_sum_list([[2], [3]]) == [[2], [3]]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase('A') == 1\nassert     max_run_uppercase('AB') == 2\nassert     max_run_uppercase('ABB') == 3\nassert     max_run_uppercase('abbc') == 2\nassert     max_run_uppercase('abBc') == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase('ABDCBA') == 3, 'WRONG'\nassert     max_run_uppercase('sdfsdfsdfsdf') == 1, 'WRONG'\nassert     max_run_uppercase('dudududuududu') == 1, 'WRONG'\nassert     max_run_uppercase('ABAB') == 1, 'WRONG'\nassert     max_run_uppercase
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase('ABCBDAB') == 3, 'ABCBDAB'\nassert     max_run_uppercase('abcdeff') == 3, 'abcdeff'\nassert     max_run_uppercase('a') == 1, 'a'\nassert     max_run_uppercase('aaaaaaa') == 4, 'aaaaaaa'\nassert     max_run_uppercase('aabbccddeeff') == 5, 'aabbccddeeff'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_run_uppercase('Aa') == 0\nassert     max_run_uppercase('AA') == 1\nassert     max_run_uppercase('AAA') == 3\nassert     max_run_uppercase('AAAB') == 1\nassert     max_run_uppercase('AAAABBBCCDAA') == 4\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmax_run_uppercase(\"aA\") == 0\nmax_run_uppercase(\"abBA\") == 1\nmax_run_uppercase(\"AaBbAa\") == 2\nmax_run_uppercase(\"EfjgfEfgfgEE\") == 4"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase(\"CODE\") == 1\nassert     max_run_uppercase(\"aCODEd\") == 2\nassert     max_run_uppercase(\"AaCODEb\") == 2\nassert     max_run_uppercase(\"AaAaCODEb\") == 2\nassert     max_run_uppercase(\"WaaWaaCODEb\") == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_run_uppercase(\"Aaabbaa\") == 'abaaaaa'\nassert     max_run_uppercase(\"AaabbAAA\") == 'abaaaaA'\nassert     max_run_uppercase(\"aAaAaAaAa\") == 'aaaaaaaa'\nassert     max_run_uppercase(\"AAabAAAAA\") == 'aaaaaaaa'\nassert     max_run_uppercase(\"abABab\") == 'bab'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase(\"AaBbCc\") == 3\nassert     max_run_uppercase(\"ZZZZZZZZZZZ\") == 0\nassert     max_run_uppercase(\"AaBbCc\") == 3\nassert     max_run_uppercase(\"QQQQQQQ\") == 4\nassert     max_run_uppercase(\"AaAaAaAaAaA\") == 3\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_run_uppercase('a') == 1\nassert     max_run_uppercase('A') == 1\nassert     max_run_uppercase('aaa') == 3\nassert     max_run_uppercase('aaAZ') == 3\nassert     max_run_uppercase('ZZZZ') == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_odd([1,4,2,5,7])     == 2, 'Wrong answer'\nassert     first_odd([1,4,2,5,5,7])     == 5, 'Wrong answer'\nassert     first_odd([1,4,2,5,3,7])     == 3, 'Wrong answer'\nassert     first_odd([1,4,2,5,3,3,7])     == 3, 'Wrong answer'\nassert     first_odd([1,4,2,5,3,3,3,7])     == 3, 'Wrong answer'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_odd([]) == None, 'Empty list'\nassert     first_odd([2, 3, 1, 3, 2]) == 1, 'Two numbers, first odd'\nassert     first_odd([2, 1, 3, 4, 6]) == 1, 'One number, first odd'\nassert     first_odd([]) == None, 'Empty list'\nassert     first_odd([0, 1, 1, 1, 1]) == None, 'First even'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    first_odd([2,3,4,5,7]) == 7\n    first_odd([10,3,1,2]) == 3\n    first_odd([0,8,13,5,7,7]) == 7\n    first_odd([1,2,3,4]) == 4\n    first_odd([3,4,5,6,7]) == None\n    first_odd([4,5,6,7]) == None\n    first_odd([8,7,6,5,4]) == None\n    first_odd([1]) == 1\n    first_odd([]) == None\n    first_odd([2,3,4,5]) == 5\n    first_odd([0,5,5,6,7]) == 5\n    first_odd([-2,4,5,6,7]) == None\n    first_odd([1,2,3,4,5,6,7,8,9]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,0,1]) == 0\n    first_odd([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]) == 1\n    first_odd([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,12,13]) == 13\n    first_odd([1,2,3,4,5,6,7,8,9,10]) == 10\n    first_odd([0,5,5,6,7,7]) == 7\n    first_odd([-1,-2,-3,-4,-5,5,6,7,8,9,10,11]) == 5\n    first_odd([-1,-2,-3,-4,-5,6,7,8,9,10,11]) == None\n    first_odd([-1,2,3,4,5,6,7,8,9,10,11]) == 11\n    first_odd([1,2,3,4,5,6,7,8,9,10,11]) == None\n    first_odd([-1,-2,-3,-4,-5,6,7,8,9,10,11]) == None\n    first_odd([-1,2,3,4,5,6,7,8,9,10,11,12]) == None\n    first_odd([-1,2,3,4,5,6,7,8,9,10,11,12,13]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == None\n    first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,3"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([1,2,3,4,5]) == 1\nassert     first_odd([1,2,3,4,5,6,7,8,9]) == 6\nassert     first_odd([1,2,3,4,5,6]) == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_odd([1,2,3,4,5]) == None\nassert     first_odd([1,2,3,4,5,6,7,8,9]) == None\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 2\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 3\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 4\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_odd([1,2,3,4,5]) == 1, 'Should return 1'\nassert first_odd([2,3,5,6]) == 2, 'Should return 2'\nassert first_odd([3,4,5,6]) == 4, 'Should return 4'\nassert first_odd([2,3,5,6,7]) == 6, 'Should return 6'\nassert first_odd([3,4,5,6,7,8]) == 8, 'Should return 8'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([1,2,3]) == 2\nassert     first_odd([-1,2,3]) == -1\nassert     first_odd([]) == None\nassert     first_odd([-1, -2, -3]) == -1\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_K((1, 2, 3), 1) == True\nassert     check_K((1, 2, 3), 0) == False\nassert     check_K((1, 2, 3, 4), 1) == True\nassert     check_K((1, 2, 3, 4, 5), 0) == False\nassert     check_K((1, 2, 3, 4, 5), 3) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_K((1, 2), 1) == True, 'Test Case 1 Failed'\nassert     check_K((1, 2), 2) == False, 'Test Case 2 Failed'\nassert     check_K((1, 2, 3), 2) == True, 'Test Case 3 Failed'\nassert     check_K((1, 2, 3), 3) == False, 'Test Case 4 Failed'\nassert     check_K((1, 2, 3, 4), 2) == True, 'Test Case 5 Failed'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K((), 3) == True, \"Error : 1\"\nassert     check_K(((1,), (2,), (3,), (4,), (5,)), 1) == False, \"Error : 2\"\nassert     check_K(((1, 2, 3), (2, 3, 4), (3, 4, 5)), 1) == False, \"Error : 3\"\nassert     check_K(((1, 2, 3), (2, 3, 4), (3, 4, 5)), 2) == True, \"Error : 4\"\nassert     check_K(((1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5)), 2) == True, \"Error : 5\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_K(('a', 'b', 'c'), 0) == True\nassert     check_K(('a', 'b', 'c'), 1) == True\nassert     check_K(('a', 'b', 'c'), 2) == False\nassert     check_K(('a', 'b', 'c'), 3) == True\nassert     check_K(('a', 'b', 'c'), 4) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_K(((3,4,1,2),(5,6,7,8,4)), 2) == True\nassert     check_K(((2,3,4,5),(6,7,8,9,10,11),(2,3,4,5)), 3) == False\nassert     check_K(((1,2,3,4),(5,6,7,8,4,5),(1,2,3,4)), 2) == True\nassert     check_K(((1,2,3,4),(5,6,7,8,4,5),(1,2,3,4)), 1) == False\nassert     check_K(((1,2,3,4),(5,6,7,8,4,5),(1,2,3,4),(5,6,7,8,4,5)), 3) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K(((1,2,3,4), (1,2,3,4), (1,2,3,4)), 2) == True\nassert     check_K(((1,2,3,4), (1,2,3,4), (1,2,3,4)), 3) == True\nassert     check_K(((1,2,3,4), (1,2,3,4), (1,2,3,4)), 4) == True\nassert     check_K(((1,2,3,4), (1,2,3,4), (1,2,3,4)), 5) == True\nassert     check_K(((1,2,3,4), (1,2,3,4), (1,2,3,4)), 6) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_K(test_tup, K):\n    '''\n    Write a function to return the location of K in the tuple. If K is not present in the tuple, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_K((1,2,3), 1) == True, \"Expected: True\"\nassert     check_K((1,2,3), 0) == False, \"Expected: False\"\nassert     check_K((1,2,3,4), 1) == False, \"Expected: False\"\n\ndef check_V(test_tup, K, V):\n    '''\n    Write a function to check if the given tuple contains the specific value.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller(t1,t2) == True\nassert check_smaller(t1,t3) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((4, 8), (3, 6)) == True, \"Fail\"\nassert     check_smaller((8, 1), (2, 8)) == False, \"Fail\"\nassert     check_smaller((6, 7), (1, 9)) == True, \"Fail\"\nassert     check_smaller((2, 8), (2, 9)) == False, \"Fail\"\nassert     check_smaller((4, 8), (7, 9)) == True, \"Fail\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_smaller((3,2),(1,2)) == False, \"Wrong answer\"\nassert     check_smaller((0,1),(2,3)) == False, \"Wrong answer\"\nassert     check_smaller((1,3),(2,1)) == True, \"Wrong answer\"\nassert     check_smaller((3,3),(2,1)) == False, \"Wrong answer\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_smaller((1,2,3),(4,3,2)) == True, \"Tuple 1\"\nassert     check_smaller((1,2,3),(4,3,2,6)) == False, \"Tuple 2\"\nassert     check_smaller((1,2,3),(4,3,2,6,7)) == False, \"Tuple 3\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_smaller((5, 1), (2, 1)) == (False, False)\nassert     check_smaller((5, 2), (2, 1)) == (False, True)\nassert     check_smaller((5, 3), (2, 1)) == (True, False)\n\ndef check_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is equal to its corresponding element in the first tuple.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((1,2), (1,2)) == False, \"wrong\"\nassert     check_smaller((2,3), (2,4)) == True, \"wrong\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_smaller((2,3),(1,2)) == True, \"Wrong answer.\"\nassert     check_smaller((1,1),(2,2)) == False, \"Wrong answer.\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1, 2, 3), (4, 2, 1)) == True\nassert     check_smaller((2, 1, 3), (3, 4, 1)) == False\nassert     check_smaller((1, 1, 2), (1, 1, 3)) == False\nassert     check_smaller((1, 1, 1), (1, 1, 1)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nQ3. Write a function to check whether the given tuple is a duplicate tuple or not.\n'''\ndef is_duplicate(test_tup):\n    '''\n    Write a function to check whether the given tuple is a duplicate tuple or not.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((1,2), (2,1)) == True, 'tuple 1 is smaller than tuple 2'\nassert     check_smaller((2,4), (1,2)) == False, 'tuple 2 is smaller than tuple 1'\nassert     check_smaller((0,-1), (0,1)) == True, 'tuple 1 is smaller than tuple 2'\nassert     check_smaller((1,2), (1,2)) == True, 'tuple 1 is smaller than tuple 2'\n"
    }
]