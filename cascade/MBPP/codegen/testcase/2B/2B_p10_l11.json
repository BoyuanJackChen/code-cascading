[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements((1,2,3),(1,2,3)) == (1,2,3),\\\n        \"similar_elements((1,2,3),(1,2,3)) is not correct\"\nassert     similar_elements((1,2,3),(1,2,3)) == (1,2,3),\\\n        \"similar_elements((1,2,3),(1,2,3)) is not correct\"\nassert     similar_elements((1,2,3),(1,2,3)) == (1,2,3),\\\n        \"similar_elements((1,2,3),(1,2,3)) is not correct\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements([1,2,3,4,5], [6,7,8,9,10,11]) == (1, 2, 3, 4, 5)\nassert     similar_elements([1,2,3,4,5], [6,7,8,9,11]) == (1, 2, 3, 4, 5)\nassert     similar_elements([1,2,3], [4,5,6]) == (1, 2, 3)\nassert     similar_elements([], []) == ()\nassert     similar_elements([1,2,3], [4,5,6]) == ()\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     similar_elements([\"mam\", \"dada\", \"kam\"], [\"mas\", \"dada\", \"kam\"]) == [\"dada\"]\nassert     similar_elements([\"a\", \"b\", \"c\"], [\"b\", \"d\", \"a\"]) == [\"b\"]\nassert     similar_elements([\"das\", \"dasdas\"], [\"ds\", \"dasdas\"]) == []\nassert     similar_elements([\"kam\"], [\"mas\"]) == []\nassert     similar_elements([], [\"mas\"]) == []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements(\n            ['1','2','3','4','5','6','7','8','9','10','11','12'],\n            ['1','2','3','4','5','6','7','8','9','10','11','12']) == ('3','4','5','6','7','8','9','10','11','12')\nassert     similar_elements(\n            ['1','2','3','4','5','6','7','8','9','10','11','12'],\n            ['1','2','3','4','5','6','7','8','9','10','11','12','13']) == ('3','4','5','6','7','8','9','10','11','12')\nassert     similar_elements(\n            ['1','2','3','4','5','6','7','8','9','10','11','12'],\n            ['1','2','3','4','5','6','7','8','9','10','11','12','13','14']) == ('3','4','5','6','7','8','9','10','11','12')\nassert     similar_elements(\n            ['1','2','3','4','5','6','7','8','9','10','11','12'],\n            ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16']) == ('3','4','5','6','7','8','9','10','11','12')\nassert     similar_elements(\n            ['1','2','3','4','5','6','7','8','9','10','11','12'],\n            ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16']) == ('3','4','5','6','7','8','9','10','11','12')\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements([1, 2, 3], [2, 3, 4]) == (True, (1, 2, 3))\nassert     similar_elements([1, 2, 3], [3, 4, 5]) == (False, ())\nassert     similar_elements([1], [1, 2, 3]) == (True, (1,))\nassert     similar_elements([], []) == (True, ())\nassert     similar_elements([1, 2, 3], []) == (True, ())\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements(('A', 'B', 'C', 'D'), ('D', 'E', 'F', 'C')) == ['D', 'E', 'F']\nassert     similar_elements(('A', 'B', 'C', 'D'), ('D', 'C', 'B', 'A')) == ['D']\nassert     similar_elements(('A', 'B', 'C', 'D'), ('D', 'E', 'C', 'A')) == ['D', 'E', 'C']\nassert     similar_elements(('A', 'B', 'C', 'D'), ('D', 'E', 'B', 'A')) == ['D', 'E', 'B']\nassert     similar_elements(('A', 'B', 'C', 'D'), ('A', 'B', 'C', 'D')) == ['A', 'B', 'C', 'D']\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     similar_elements((1,2,3),(1,2,3)) == (1,2)\nassert     similar_elements((1,2,3),(1,3,3)) == (1,3)\nassert     similar_elements((1,2,3,4,5),(1,2,3)) == (1,2,3)\nassert     similar_elements((1,2,3,4,5),(1,3,3)) == (1,3)\nassert     similar_elements((1,2,3,4,5),(1,4,3)) == (1,4)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsimilar_elements((1, 2, 3, 4), (1, 2, 4)) == (1, 2)\nassert \nsimilar_elements((1, 2, 4), (1, 2, 3)) == (1, 2)\nassert \nsimilar_elements((1, 2), (1, 2, 3)) == (1)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]) == [2, 3, 4]\nassert     similar_elements([1, 2, 3], [2, 3, 4, 5]) == []\nassert     similar_elements([], [2, 3, 4, 5]) == []\nassert     similar_elements([1, 2, 3, 4], [2, 3, 4, 5]) == []\nassert     similar_elements([1, 2, 3], [2, 3, 4, 5]) == [2, 3]\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_not_prime(1) == False\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_not_prime(7) == False, '7 is not a prime.'\nassert     is_not_prime(0) == True, '0 is not a prime.'\nassert     is_not_prime(11) == True, '11 is not a prime.'\nassert     is_not_prime(13) == False, '13 is a prime.'\nassert     is_not_prime(2) == True, '2 is not a prime.'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_not_prime(8) == False, \"First Test Case Failed\"\nassert is_not_prime(9) == True, \"Second Test Case Failed\"\nassert is_not_prime(11) == True, \"Third Test Case Failed\"\nassert is_not_prime(29) == True, \"Fourth Test Case Failed\"\nassert is_not_prime(33) == False, \"Fifth Test Case Failed\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(5) == False\nassert     is_not_prime(5.2) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_not_prime(10) == True\nassert is_not_prime(8) == True\nassert is_not_prime(4) == False\nassert is_not_prime(1) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(17) == False, \"17 is a prime number\"\nassert     is_not_prime(3) == True, \"3 is a not a prime number\"\n\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_not_prime(5)\nassert is_not_prime(1) == False\nassert is_not_prime(0) == False\nassert is_not_prime(-3) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_not_prime(4) == True\nassert is_not_prime(7) == False\nassert is_not_prime(2) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_not_prime(2)\nassert is_not_prime(3)\nassert not is_not_prime(7)\nassert not is_not_prime(6)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([5,2,3,7,8,1,9,4,6],5) == [9,8,7,6,5,4,3,2,1]\nassert     heap_queue_largest([4,2,3,1,2,4,5],3) == [4,5,2,2,3,1]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n\nassert     heap_queue_smallest([5,2,3,7,8,1,9,4,6],5) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Hint: heapq has built-in min function to return the largest value in an iterable.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([1,3,5,2,4],3) == [4,5,3,2,1]\nassert     heap_queue_largest([1,3,5,2,4],2) == [4,5,3,2]\nassert     heap_queue_largest([1,3,5,2,4],1) == [5,3,4,2,1]\nassert     heap_queue_largest([1,3,5,2,4],0) == [3,5,4,2,1]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([2,3,1,5,4],3) == [5,4,3]\nassert     heap_queue_largest([1,3,5,7,9],3) == [9,7,5]\nassert     heap_queue_largest([1,3,5,7,9],1) == [1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([-5,10,4,2,0],1) == [-5,0,4,2,10], \"wrong\"\nassert     heap_queue_largest([1,1,3,2,5],3) == [-5,5,3,1,1], \"wrong\"\nassert     heap_queue_largest([2,2,3,3,1,0,1,2],5) == [-5,5,5,5,3,2,2,2], \"wrong\"\nassert     heap_queue_largest([],1) == [], \"wrong\"\nassert     heap_queue_largest([],0) == [], \"wrong\"\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_queue_largest([],10)==[]\nassert     heap_queue_largest([5,2,4,7,1,3],5)==[7,5,5,4,2]\nassert     heap_queue_largest([1,2,3,4,5,6],4)==[5,6,6,5]\n\n\n\n'''\nWrite a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n'''\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert heap_queue_largest([3,5,12,2,6],1) == [12]\nassert heap_queue_largest([3,5,12,2,6],2) == [12,6]\nassert heap_queue_largest([3,5,12,2,6],3) == [12,6,5]\nassert heap_queue_largest([3,5,12,2,6],4) == [12,6,5,3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nclass BinaryHeap:\n    def __init__(self, nums):\n        '''\n        nums : list of numbers\n        '''\n        self.heap = list(sorted(nums))\n    \n    def insert(self, value):\n        '''\n        value : integer\n        '''\n        if self.heap:\n            if value > self.heap[0]:\n                self.heap.append(value)\n                self.heapify_up(len(self.heap)-1)\n            else:\n                self.heap.insert(0, value)\n                self.heapify_down(0)\n        else:\n            self.heap.append(value)\n            self.heapify_down(0)\n    \n    def delete_min(self):\n        '''\n        Returns:\n            int -- the minimum element in the heap\n        '''\n        if self.heap:\n            if len(self.heap) == 1:\n                self.heap.pop()\n                return self.heap[0]\n            elif self.heap[0] < self.heap[1]:\n                self.heap[0], self.heap[1] = self.heap[1], self.heap[0]\n                self.heapify_down(1)\n            else:\n                self.heap[0], self.heap[-1] = self.heap[-1], self.heap[0]\n                self.heapify_down(0)\n                self.heap.pop()\n        else:\n            return None\n    \n    def heapify_down(self, i):\n        '''\n        The heap property is maintained by repeatedly making the largest element smaller than its children.\n        This is done by repeatedly swapping it with the larger of its two children and recursively calling\n        heapify_down on both the children.\n        '''\n        while 2*i+1 <= len(self.heap)-1:\n            left = 2*i+1\n            right = 2*i+2\n            if right <= len(self.heap)-1:\n                if self.heap[i] <= self.heap[left] and self.heap[i] <= self.heap[right]:\n                    break\n                elif self.heap[i] < self.heap[left] and self.heap[i] < self.heap[right]:\n                    if self.heap[left] <= self.heap[right]:\n                        break\n                    else:\n                        self.heap[i], self.heap[left] = self.heap[left], self.heap[i]\n                        i = left\n                        continue\n                else:\n                    if self.heap[i] <= self.heap[left]:\n                        self.heap[i], self.heap[left] = self.heap[left], self.heap[i]\n                        i = left\n                        continue\n                    else:\n                        self.heap[i], self.heap[right] = self.heap[right], self.heap[i]\n                        i = right\n                        continue\n            else:\n                if self.heap[i] <= self.heap[left]:\n                    break\n                else:\n                    self.heap[i], self.heap[left] = self.heap[left], self.heap[i]\n                    i = left\n                    continue\n    \n    def heapify_up(self, i):\n        '''\n        The heap property is maintained by repeatedly making the smallest element larger than its children.\n        This is done by repeatedly swapping it with the smaller of its two children and recursively calling\n        heapify_up on both the children.\n        '''\n        if i > 0:\n            while i // 2 > 0:\n                if self.heap[i] < self.heap[i//2]:\n                    self.heap[i], self.heap[i//2] = self.heap[i//2], self.heap[i]\n                    i = i//2\n                else:\n                    break\n        \n        \n    def delete_largest(self):\n        '''\n        Returns:\n            int -- the largest element in the heap\n        '''\n        if self.heap:\n            if len(self.heap) == 1:\n                self.heap.pop()\n                return self.heap[0]\n            elif self.heap[0] < self.heap[1]:\n                self.heap[0], self.heap[1] = self.heap[1], self.heap[0]\n                self.heapify_down(1)\n            else:\n                self.heap[0], self.heap[-1] = self.heap[-1], self.heap[0]\n                self.heapify_down(0)\n                self.heap.pop()\n        else:\n            return None\n    \n    def is_empty(self):\n        '''\n        Returns:\n            bool -- True if the heap is empty, False otherwise\n        '''\n        return len(self.heap) == 0\n\ndef heap_queue_largest_recursive(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n\ndef heap_queue_largest_binary_search(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef heappush_queue_smallest(heap, item):\n    '''\n    Write a function to push an element into a heap.\n    The function should perform this in logarithmic time.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two (4),'returns False'\nassert     is_Power_Of_Two (8),'returns True'\nassert     is_Power_Of_Two (21),'returns False'\nassert     is_Power_Of_Two (55),'returns True'\nassert     is_Power_Of_Two (0),'returns False'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_Power_Of_Two_using_bit_manipulation(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_Power_Of_Two(0) == False\nassert is_Power_Of_Two(1) == False\nassert is_Power_Of_Two(2) == True\nassert is_Power_Of_Two(4) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two (3) == True\nassert     is_Power_Of_Two (11) == False\nassert     is_Power_Of_Two (2) == True\nassert     is_Power_Of_Two (9) == True\nassert     is_Power_Of_Two (10) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__': \n    # print is_Power_Of_Two(1)\n    # print is_Power_Of_Two(2)\n    # print is_Power_Of_Two(10)\n    # print is_Power_Of_Two(11)\n    print is_Power_Of_Two(2)\n    print is_Power_Of_Two(3)\n    print is_Power_Of_Two(4)\n    print is_Power_Of_Two(5)\n    print is_Power_Of_Two(6)\n    print is_Power_Of_Two(7)\n    print is_Power_Of_Two(8)\n    print is_Power_Of_Two(9)\n    print is_Power_Of_Two(10)"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(1) == False, \"Should be False\"\nassert     is_Power_Of_Two(2) == True, \"Should be True\"\nassert     is_Power_Of_Two(4) == False, \"Should be False\"\nassert     is_Power_Of_Two(8) == True, \"Should be True\"\nassert     is_Power_Of_Two(16) == False, \"Should be False\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nis_Power_Of_Two(2)  == True\nis_Power_Of_Two(3)  == False\nis_Power_Of_Two(6)  == False\nis_Power_Of_Two(13) == True\nis_Power_Of_Two(3<<1)  == False\nis_Power_Of_Two(3<<3)  == True\n\ndef power_Of_Two(x): \n    '''\n    Write a python function to return the power of 2 if the given number is power of 2 else it should return the number itself\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n    Expected Output:\n    true\n    \n    Output\n    1\n'''\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long(\"\") == []\nassert     find_char_long(\"a\") == [\"a\"]\nassert     find_char_long(\"heLlo\") == [\"hello\"]\nassert     find_char_long(\"\") == []\nassert     find_char_long(\"helo\") == [\"hello\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('I') == ['I']\nassert     find_char_long('I love you') == ['I', 'you']\nassert     find_char_long('I love you to') == ['I', 'you', 'to']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long(\"I like fish\") == None\nassert     find_char_long(\"I like fish and fish and fish and fish and fish and fish\") == \"fish\"\nassert     find_char_long(\"I like fish and fish and fish and fish and fish and fish and fish and fish\") == \"fish\"\nassert     find_char_long(\"I like fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fish and fis"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_char_long_str(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n\ndef find_char_long_re(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n\ndef find_long_numbers(text):\n    '''\n    Write a function to find all numbers which are at least 4 characters long in a string.\n    '''\n    pass\n\ndef find_long_numbers_str(text):\n    '''\n    Write a function to find all numbers which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long('This is a test string') == [ 'this', 'is', 'a', 'test','string' ]\nassert     find_char_long('This is a test string') == ['test','string' ]\nassert     find_char_long('This is a test string') == ['test']\nassert     find_char_long('This is a test string') == []\nassert     find_char_long('This is a test string with spaces') == ['test','string']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long(\"\") == []\nassert     find_char_long(\"123\") == []\nassert     find_char_long(\"12345\") == []\nassert     find_char_long(\"AbC\") == []\nassert     find_char_long(\"ab\") == [\"ab\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long(\"\") == []\nassert     find_char_long(\"a\") == [\"a\"]\nassert     find_char_long(\"awesome\") == [\"awesome\"]\nassert     find_char_long(\"aawesome\") == [\"aawesome\"]\nassert     find_char_long(\"awesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesome\") == [\"awesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomeawesomea"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_char_long(\"This is a simple text.\") == ['this', 'is','simple']\nassert     find_char_long(\"This is a simple text.\") == ['this', 'is','simple']\nassert     find_char_long(\"This is a simple text.\") == ['this', 'is','simple']\nassert     find_char_long(\"This is a simple text.\") == ['this', 'is','simple']\nassert     find_char_long(\"This is a simple text.\") == ['this', 'is','simple']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('a') == []\nassert     find_char_long('ab') == []\nassert     find_char_long('abcd') == ['abcd']\nassert     find_char_long('abcd ab') == ['abcd']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_char_long('asdfghjkl zxcvbnm') == ['asdf','ghjkl','zxcvbnm']\nassert     find_char_long('we are the champions') == ['we', 'champions']\nassert     find_char_long('asdfghjkl zxcvbnm asdfghjkl zxcvbnm asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfghjkl asdfgh"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('\\n\\nTesting square_nums...')\ndef square_nums(nums):\n    result = []\n    for i in nums:\n        result.append(i * i)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([-4,-2,0,2,4]) == [0,4,4,16,16]\nassert square_nums([0,-2,2,4]) == [0,4,4,16]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\nassert     square_nums([0, 3, 5, 7]) == [0, 1, 4, 9]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([1,2,3,4]) == [1,4,9,16]\nassert     square_nums([-1,-2,-3,-4]) == [-1,-4,9,16]\nassert     square_nums([-9,-8,-7,-6]) == [-9,-16,25,36]\nassert     square_nums([-1,-4,-9,-16]) == [-1,-4,25,36]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert square_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 4, 9, 16, 25]\nassert square_nums([-5, -3, -1, -7, -6, -10]) == [49, 81, 64, 100, 121, 130]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_nums([4, 5, -10, -3, 7, -8, 9, 20, -11, 1, 1]) == [-36, -27, 0, 0, 49, 0, 81, 64, 81, 256, 81, 256]\nassert square_nums([4, 5, -10, -3, 7, -8, 9, 20, -11, 1, 1, 1]) == [-36, -27, 0, 0, 49, 0, 81, 64, 81, 256, 81, 256]\nassert square_nums([]) == []\nassert square_nums([1, 1]) == [1, 1]\nassert square_nums([5, 0, 8, -10, -4, -2, -6, 0]) == [-50, 0, 64, 0, 1024, 0, 8128, 0]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_nums([1, 2, 3]) == [1, 4, 9]\nassert     square_nums([4, 4, 4, 4]) == [16, 16, 16, 16]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 4, 9, 16, 25]\nassert square_nums([-1, -2, -3, -4, -5]) == [-1, 4, -9, 16, -25]\nassert square_nums([]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nProblem 1 - ROTATION\n\nGiven a string s, and an integer k, the task is to find the minimum number of rotation that will make the string s, k-rotations. If the minimum number of rotations is greater than or equal to k, then print -1.\n\nInput Format:\nFirst line contains T, number of test cases. For each test case first line contains S and K separated by a space.\n\nOutput Format:\nFor each test case in a new line print the minimum number of rotations required to make the string s k-rotations.\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations('') == 0, \"Should be: 0\"\nassert     find_Rotations('a') == 0, \"Should be: 0\"\nassert     find_Rotations('ab') == 1, \"Should be: 1\"\nassert     find_Rotations('abcd') == 1, \"Should be: 1\"\nassert     find_Rotations('abcdabc') == 2, \"Should be: 2\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(find_Rotations(''))\nprint(find_Rotations('a'))\nprint(find_Rotations('abc'))\nprint(find_Rotations('abcde'))\nprint(find_Rotations('abcdef'))\nprint(find_Rotations('abcdefg'))\nprint(find_Rotations('abcdefgh'))\nprint(find_Rotations('abcdefghi'))\nprint(find_Rotations('abcdefghij'))\nprint(find_Rotations('abcdefghijkl'))\nprint(find_Rotations('abcdefghijklmn'))\nprint(find_Rotations('abcdefghijklmnop'))\nprint(find_Rotations('abcdefghijklmnopq'))\nprint(find_Rotations('abcdefghijklmnopqr'))\nprint(find_Rotations('abcdefghijklmnopqrst'))\nprint(find_Rotations('abcdefghijklmnopqrstuv'))\nprint(find_Rotations('abcdefghijklmnopqrstuvw'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwx'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxy'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz012345'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01234567'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz012345678901'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01234567890123'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz012345678901234567'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01234567890123456789'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345678901'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz012345678901234567890123'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01234567890123456789012345'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345678901234567'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz012345678901234567890123456789'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01234567890123456789012345678901'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345678901234567890123'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz012345678901234567890123456789012345'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01234567890123456789012345678901234567'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345678901234567890123456789'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz012345678901234567890123456789012345678901'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345678901234567890123456789012345'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz01234567890123456789012345678901234567890123456789'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345678901234567890123456789012345678901234567'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz0123456789012345678901234567890123456789012345678901234567890123456789'))\nprint(find_Rotations('abcdefghijklmnopqrstuvwxyz
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Rotations('GEEKS FOR GEEKS') == 2, \"Should be 2\"\nassert     find_Rotations('ABAB') == 0, \"Should be 0\"\nassert     find_Rotations('ABAB') == 1, \"Should be 1\"\nassert     find_Rotations('ABABAB') == 2, \"Should be 2\"\nassert     find_Rotations('AAA') == 0, \"Should be 0\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations('Hello') == 0, 'The number of rotations should be 0'\nassert     find_Rotations('hi') == 1, 'The number of rotations should be 1'\nassert     find_Rotations('Hi') == 2, 'The number of rotations should be 2'\nassert     find_Rotations('HellO') == 0, 'The number of rotations should be 0'\nassert     find_Rotations('HelloThere') == 0, 'The number of rotations should be 0'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations('abcd') == 1, 'The given string is not a permutation'\nassert     find_Rotations('abcba') == 0, 'The given string is a permutation'\nassert     find_Rotations('abcdcba') == 1, 'The given string is a permutation'\nassert     find_Rotations('abbcba') == 1, 'The given string is a permutation'\nassert     find_Rotations('abbbbba') == 2, 'The given string is a permutation'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations('abcde') == 3\nassert     find_Rotations('cabde') == 3\nassert     find_Rotations('acbde') == 2\nassert     find_Rotations('aabcde') == 2\nassert     find_Rotations('abcdee') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Rotations(\"kayak\")     ==     2\nassert     find_Rotations(\"drowssap\") ==     2\nassert     find_Rotations(\"banana\")     ==     1\nassert     find_Rotations(\"amanaplanacanalpanama\")     ==     10\n\nprint(\"function find_Rotations is working correctly\")\nprint()\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ('h','e') == 'hi'\nassert     remove_Occ('h','s') == 'hi'\nassert     remove_Occ('a','e') == 'a'\nassert     remove_Occ('hi','i') == 'h'\nassert     remove_Occ('hi','i') == 'h'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n'''\nThis function should return the string after removing the first and last occurrence of the specified character from the given string.\n'''\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"\\n# Remove first and last occurrence of a given character from the string.\")\n\ns = 'pythony'\nch = 'y'\nprint(remove_Occ(s,ch))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ(\"pippo\",\"p\") == \"ippo\"\nassert     remove_Occ(\"pippo\",\"o\") == \"pippo\"\nassert     remove_Occ(\"pippo\",\"x\") == \"pippo\"\nassert     remove_Occ(\"pippo\",\"b\") == \"pipp\"\nassert     remove_Occ(\"pippo\",\"P\") == \"pi\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ(\"hi\",\"i\") == \"h\"\nassert     remove_Occ(\"hi\",\"h\") == \"\"\nassert     remove_Occ(\"\",\"i\") == \"\"\nassert     remove_Occ(\"\",\"h\") == \"\"\nassert     remove_Occ(\"\",\"\") == \"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ('ram','r') == 'am'\nassert     remove_Occ('zebra','z') == 'be'\nassert     remove_Occ('xyz','x') == 'yz'\nassert     remove_Occ('abc','x') == 'ab'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_Occ(\"guitar\",\"i\") == \"guitar\"\nassert     remove_Occ(\"dog\",\"t\") == \"dog\"\nassert     remove_Occ(\"hello\",\"e\") == \"h\"\nassert     remove_Occ(\"ab\",\"a\") == \"b\"\nassert     remove_Occ(\"ab\",\"b\") == \"ab\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_Occ(\"12abcd23\", \"b\") == \"123\"\nassert     remove_Occ(\"12abcd23\", \"c\") == \"12ab23\"\n\ndef remove_Occ_v2(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_Occ('geeks', 'e') =='sks'\nassert     remove_Occ('geeksforgeeks', 'k') == 'ksgeek'\nassert     remove_Occ('gk', 'k') == 'g'\nassert     remove_Occ('geeksgeeks', 'k') =='sks'\nassert     remove_Occ('geeksforgeeksgeeks', 'k') =='sks'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ(\"abcde\", \"a\") == \"bcde\"\nassert     remove_Occ(\"abcde\", \"e\") == \"abcde\"\nassert     remove_Occ(\"abcde\", \"b\") == \"abc\"\nassert     remove_Occ(\"abcde\", \"c\") == \"abde\"\nassert     remove_Occ(\"abcde\", \"d\") == \"abc\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([[6,4,2],[5,8,7],[3,1,9]]) == [[3, 1, 9], [2, 4, 5], [6, 7, 8]]\nassert     sort_matrix([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19,20], [21,22,23,24,25]]) == [[21, 22, 23, 24, 25], [16, 17, 18, 19, 20], [11, 12, 13, 14, 15], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[0, 1, 0], \n                    [1, 1, 1], \n                    [1, 1, 1]]) == [[0, 0, 0], \n                    [0, 1, 0], \n                    [0, 1, 1]]\n\nassert     sort_matrix([[1, 2, 2], \n                    [3, 4, 1], \n                    [2, 1, 3]]) == [[1, 1, 2], \n                    [3, 4, 2], \n                    [2, 2, 1]]\n\nassert     sort_matrix([[1, 2, 4, 1], \n                    [2, 2, 4, 1], \n                    [3, 1, 2, 1], \n                    [2, 2, 1, 4]]) == [[1, 1, 2, 1], \n                    [1, 2, 2, 1], \n                    [1, 2, 2, 1], \n                    [1, 3, 1, 4]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[1, 7, 3],\n                      [5, 2, 4],\n                      [6, 8, 9]]) == [[1, 2, 3],\n                                    [5, 6, 8],\n                                    [7, 8, 9]]\n\nassert     sort_matrix([[1, 9, 5],\n                      [7, 3, 8],\n                      [2, 4, 6]]) == [[1, 2, 3],\n                                    [4, 5, 6],\n                                    [7, 8, 9]]\n\nassert     sort_matrix([[2, 6, 1],\n                      [9, 3, 8],\n                      [4, 5, 7]]) == [[1, 2, 3],\n                                    [4, 5, 6],\n                                    [7, 8, 9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([\n    [5,4,3],\n    [2,1,0],\n    [9,8,7]\n    ]) == [[2,1,0], [3,4,5], [9,8,7]]\nassert     sort_matrix([\n    [4,-4,0],\n    [5,-2,3],\n    [-1,3,2]\n    ]) == [[-1,3,2], [-4,5,-2], [0,3,4]]\nassert     sort_matrix([\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n    ]) == [[0,0,0], [0,0,0], [0,0,0]]\nassert     sort_matrix([\n    [1,3,5],\n    [1,2,4],\n    [1,2,4],\n    [1,2,4],\n    [1,2,4]\n    ]) == [[1,1,1], [1,2,2], [1,2,4], [1,3,3], [1,4,4]]\nassert     sort_matrix([\n    [1,1,1],\n    [1,2,2],\n    [1,2,2],\n    [1,2,2],\n    [1,2,2],\n    [1,2,2]\n    ]) == [[1,1,1], [1,2,2], [1,2,2], [1,2,2], [1,2,2], [1,2,2]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sort_matrix([[1,2,3,4], \n                    [5,6,7,8], \n                    [9,10,11,12]]) == [[1, 2, 3, 4], \n                                 [5, 6, 7, 8], \n                                 [9, 10, 11, 12]]\n\nassert sort_matrix([[1,2,3], \n                    [1,2,3], \n                    [1,2,3]]) == [[1, 1, 1], \n                               [1, 2, 3], \n                               [1, 2, 3]]"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_matrix([[2, 3, 5],\n                        [9, 0, 0],\n                        [4, 3, 6]]) == [[0, 0, 0],\n                                        [0, 3, 3],\n                                        [4, 5, 6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sort_matrix_aux(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    Use auxiliary data structure to store the sums of each row.\n\n    We'll start by creating the auxiliary data structure, which will be a dictionary where each entry will be initialized to 0. \n    The dictionary will only have one key: the sum of the whole matrix.\n    We'll then have to iterate over each row, and first, we'll have to create the dictionary for each row, where the key is the index of the row,\n    and the value is the sum of the row.\n    Next, we'll iterate over the rows and add the entries to the dictionary, using a comprehension like this: \n\n    d[i] = (sum(M[i]))\n\n    Once we've added all the entries to the dictionary, we'll add the key: sum(M) to the dictionary.\n    Finally, we'll create a new array, sorted_mat, of the same size as the original matrix, using a simple for-loop.\n    Each element in sorted_mat will be the key from the dictionary.\n    Each entry in sorted_mat will be the corresponding value from the dictionary.\n    Finally, we return the sorted_mat array.\n    '''\n    sums_mat = {}\n    for i, row in enumerate(M):\n        sums_mat[i] = sum(row)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(3,5,7)==60.0, \"Should be 60.0\"\nassert     find_Volume(4,3,9)==12.5, \"Should be 12.5\"\nassert     find_Volume(6,9,5)==22.5, \"Should be 22.5\"\nassert     find_Volume(8,5,4)==24.0, \"Should be 24.0\"\nassert     find_Volume(5,8,5)==36.5, \"Should be 36.5\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume([1,2,3],1,2) == 3\nassert     find_Volume([4,5,6],2,2) == 8\nassert     find_Volume([7,8,9],3,3) == 24\nassert     find_Volume([10,11,12],3,3) == 48\nassert     find_Volume([13,14,15],3,3) == 96\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume(4,2,6) == 20\nassert     find_Volume(4,4,2) == 8\nassert     find_Volume(4,4,6) == 32\nassert     find_Volume(4,6,6) == 12\nassert     find_Volume(3,4,2) == 4\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume([5,5,10],10,10) == 50, \"Test Case 1 Failed\"\nassert     find_Volume([1,1,1],10,10) == 1, \"Test Case 2 Failed\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Assertion passed')"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(1,1,1,10) == 200\nassert     find_Volume(2,2,2,10) == 16\nassert     find_Volume(2,3,2,10) == 8\nassert     find_Volume(2,2,3,10) == 32\nassert     find_Volume(4,4,2,10) == 16\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume([2.0, 3.0, 4.0], 1.0, 2.0) == 6.0\nassert     find_Volume([1.0, 1.0, 1.0], 1.0, 1.0) == 1.0\nassert     find_Volume([-1.0, 1.0, 1.0], 1.0, 1.0) == 1.0\nassert     find_Volume([1.0, -1.0, 1.0], 1.0, 1.0) == 1.0\nassert     find_Volume([1.0, 1.0, -1.0], 1.0, 1.0) == 1.0\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume(1,1,1) == 1.5\nassert     find_Volume(2,3,4) == 7.2\n\nprint(\"\\n\\nAll tests passed.\")"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume([1,2,3],2,3) == (1*2*3)/2, \"Wrong output\"\nassert     find_Volume([1,2,3],1,2) == (1*2*3)/2, \"Wrong output\"\nassert     find_Volume([1,2,3],4,5) == (1*2*3)/2, \"Wrong output\"\nassert     find_Volume([1,2,3],3,1) == (1*2*3)/2, \"Wrong output\"\nassert     find_Volume([1,2,3],2,0) == (1*2*3)/2, \"Wrong output\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"_ThisIsACorretText_123_\") == False\nassert     text_lowercase_underscore(\"_ThisIsACorretText_123_\") == False\nassert     text_lowercase_underscore(\"ThisIsACorretText_123_\") == True\nassert     text_lowercase_underscore(\"_ThisIsACorretText_\") == False\nassert     text_lowercase_underscore(\"_ThisIsACorretText_\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ntext_lowercase_underscore('he-llo-w-er-d') == True\nassert \ntext_lowercase_underscore('HE-LLO-W-ER-d') == True\nassert \ntext_lowercase_underscore('HE_Ll_O_W_Er_D') == True\nassert \ntext_lowercase_underscore('he_ll_o_w_er_d') == False\nassert \ntext_lowercase_underscore('HeLlO_W_Er_D') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('sdgsdfds') == True, 'a'\nassert     text_lowercase_underscore('sdsdsdg') == True, 'b'\nassert     text_lowercase_underscore('sdgsdfds') == False, 'c'\nassert     text_lowercase_underscore('asdgsdfgsdfgsdf') == False, 'd'\nassert     text_lowercase_underscore('asdgfdsdfg') == False, 'e'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('a_b_c') == True, 'FAILED'\nassert     text_lowercase_underscore('3_5_7') == True, 'FAILED'\nassert     text_lowercase_underscore('t0_s1_c2') == True, 'FAILED'\nassert     text_lowercase_underscore('a2c3') == False, 'FAILED'\nassert     text_lowercase_underscore('A2c3') == False, 'FAILED'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert text_lowercase_underscore(\"x\") == False\nassert text_lowercase_underscore(\"x_\") == True\nassert text_lowercase_underscore(\"__x\") == True\nassert text_lowercase_underscore(\"_x\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore(\"hi.p.py\") == True\nassert     text_lowercase_underscore(\"HELLO\") == True\nassert     text_lowercase_underscore(\"_hey_\") == False\nassert     text_lowercase_underscore(\"\") == True\nassert     text_lowercase_underscore(\"Helo\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"This is a test\") == True\nassert     text_lowercase_underscore(\"this is a test\") == False\nassert     text_lowercase_underscore(\"this is a test.\") == False\nassert     text_lowercase_underscore(\"this is a test..\") == False\nassert     text_lowercase_underscore(\"ThIs a TeST\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore(\"_This_is_a_test_\") == True, \"Test #1 failed\"\nassert     text_lowercase_underscore(\"A_test_\") == True, \"Test #2 failed\"\nassert     text_lowercase_underscore(\"_\") == True, \"Test #3 failed\"\nassert     text_lowercase_underscore(\"a\") == False, \"Test #4 failed\"\nassert     text_lowercase_underscore(\"_A_\") == False, \"Test #5 failed\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('The_Great_Number')\nassert     not text_lowercase_underscore('I_am_an_i')\nassert not text_lowercase_underscore('uWY_')\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 9\n\n\n\ndef find_examples(s):\n    '''\n    Write a function that takes an input string and returns a dictionary of the form\n    {\n        \"first_character\": {\n        \"last_character\": 1,\n        },\n        \"second_character\": {\n        \"third_character\": 1,\n        }\n    }\n    where the keys are the first and second characters in the string, and the values are the \n    number of characters in the string with that first and second character.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(3) == 6\nassert     square_perimeter(4) == 16\nassert     square_perimeter(6) == 42\nassert     square_perimeter(8) == 64\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(3) == 9\nassert     square_perimeter(5) == 14\n\ndef is_square(n):\n    '''\n    Write a function that takes an integer n as input and returns True if n is a perfect square or False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 6\nassert     square_perimeter(4) == 8\nassert     square_perimeter(5) == 10\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_perimeter(3) == 6, \"Fail\"\nassert     square_perimeter(4) == 8, \"Fail\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(1)    ==    1, 'incorrect'\nassert     square_perimeter(2)    ==    2, 'incorrect'\nassert     square_perimeter(4)    ==    4, 'incorrect'\nassert     square_perimeter(8)    ==    10, 'incorrect'\nassert     square_perimeter(10)    ==    18, 'incorrect'\nprint('correct'"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_perimeter(5) == 10\nassert square_perimeter(5) == 10\n\nassert square_perimeter(10) == 20\nassert square_perimeter(10) == 20\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef str_to_dict(string): \n    '''\n    Write a function to convert string into dictionary.\n    '''\n    pass\n\ndef str_to_dict(string): \n    '''\n    Write a function to convert string into dictionary.\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef list_to_str(char_list):\n    '''\n    Write a function to print a string in the form of a list.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_permutation(str1, str2):\n    '''\n    Write a function to check if the two given strings are permutations or not.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     str_to_list('aaaaaabbbb') == ['a', 'a', 'b', 'b']\nassert     str_to_list('ab') == ['a', 'b']\nassert     str_to_list('ab') == ['a', 'b']\nassert     str_to_list('aa') == ['a']\nassert     str_to_list('ab') == ['a', 'b']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert str_to_list('aacd') == 'a'\nassert str_to_list('bccc') == 'c'\nassert str_to_list('gfk') == 'k'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert str_to_list(\"12343433333\") == ['1', '2', '3', '4', '3', '2', '1']\nassert str_to_list(\"12343433321\") == ['1', '2', '3', '3', '2', '1']\nassert str_to_list(\"2233333\") == ['2', '3', '3', '3']\nassert str_to_list(\"3332233\") == ['3', '3', '3', '2']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     str_to_list('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklm'\nassert     str_to_list('abcdefghijklmnopqrstuvwxyzgh') == 'cdeghijklmno'\nassert     str_to_list('abcdefghijklmnopqrstuvwxyzghik') == 'cdeghiklmo'\nassert     str_to_list('abcdefghijklmnopqrstuvwxyzghikj') == 'cdeghiklmo'\nassert     str_to_list('abcdefghijklmnopqrstuvwxyzghikjk') == 'cdeghiklmo'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_duplicate([1,2,3,1]) == True, \"WRONG!!!\"\nassert     test_duplicate([1,2,3,4]) == False, \"WRONG!!!\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,2,3,1]) == False\nassert     test_duplicate([1,2,3,4]) == True\nassert     test_duplicate([1,1,3,4]) == True\nassert     test_duplicate([1,1,1,3,4]) == Tru"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_sort(arraynums):\n    '''\n    Write a function to sort an array of strings, such that all the anagrams are next to each other.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_duplicate([1, 1, 1, 1, 1]) == False, '1, 1, 1, 1, 1 failed.'\nassert     test_duplicate([1, 1, 1, 2, 2]) == False, '1, 1, 1, 2, 2 failed.'\nassert     test_duplicate([1, 1, 1, 2, 3]) == True, '1, 1, 1, 2, 3 failed.'\nassert     test_duplicate([1, 2, 3, 4, 5]) == True, '1, 2, 3, 4, 5 failed.'\nassert     test_duplicate([1, 2, 3, 1, 2]) == True, '1, 2, 3, 1, 2 failed.'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([5,1,2,4,6,3,5]) == True, \"Wrong answer\"\nassert     test_duplicate([5,1,2,4,6,3,5,1,2,4,6,3,5]) == False, \"Wrong answer\"\nassert     test_duplicate([1,2,3,4,5]) == True, \"Wrong answer\"\nassert     test_duplicate([1,2,3,4,5,5]) == False, \"Wrong answer\"\nassert     test_duplicate([1,2,3,4,5,5,6]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate([1,2,3,4,5,6]) == False, 'test_duplicate'\nassert     test_duplicate([1,2,3,4,5,2]) == True, 'test_duplicate'\n\n\n\ndef unique(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(12) == True, 'False, incorrect result'\nassert     is_woodall(5) == False, 'False, incorrect result'\nassert     is_woodall(14) == False, 'False, incorrect result'\n\nprint('correct')\nprint()\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_woodall(10)\nassert not is_woodall(11)\nassert not is_woodall(12)\nassert not is_woodall(13)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(12) == False\nassert     is_woodall(12.2) == False\nassert     is_woodall(\"abcd\") == False\nassert     is_woodall(\"12\") == False\nassert     is_woodall(0) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(8) == True, \"8 is not Woodall\"\nassert     is_woodall(7) == False, \"7 is Woodall\"\n\ndef is_woodall_list(lst): \n    '''\n    Write a function to check if a given list contains only woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(5) == False\nassert     is_woodall(8) == True\nassert     is_woodall(9) == False\nassert     is_woodall(10) == False\nassert     is_woodall(11) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_woodall(27) == True\nassert     is_woodall(78) == False\nassert     is_woodall(400) == True\nprint('All the tests are passed!')\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_woodall(2) == True\nassert     is_woodall(123) == False\nassert     is_woodall(0) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(6)     == True \nassert     is_woodall(-1)     == False \nassert     is_woodall(12345)     == False\nassert     is_woodall(5.7)     == False \nassert     is_woodall('1')     == False \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_woodall(50) == False, \"is_woodall should return False for 50\"\nassert is_woodall(-10) == False, \"is_woodall should return False for -10\"\nassert is_woodall(0) == False, \"is_woodall should return False for 0\"\nassert is_woodall(10**10) == False, \"is_woodall should return False for 10**10\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    print(\"This is rev function\")\n    num = int(input(\"Enter a number: \"))\n    rv = rev(num)\n    if rv:\n        print(num, \"is one less than twice its reverse\")\n    else:\n        print(num, \"is not one less than twice its reverse\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrev(15)==7\nassert rev(1)==0\nassert rev(2)==1\nassert rev(8)==8\nassert rev(0)==1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(rev(1))"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert rev(1) == 0\nassert rev(3) == 2\nassert rev(5) == 4\nassert rev(6) == 5\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(1) == 0, \"Test 1 Failed\"\nassert     rev(2) == 1, \"Test 2 Failed\"\nassert     rev(1) == 0, \"Test 3 Failed\"\nassert     rev(3) == 2, \"Test 4 Failed\"\nassert     rev(9) == 8, \"Test 5 Failed\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert rev(13) == False\nassert rev(0) == True\nassert rev(-14) == True\nassert rev(3) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(1) == 0, \"your function is wrong\"\nassert     rev(2) == 1, \"your function is wrong\"\nassert     rev(3) == 0, \"your function is wrong\"\nassert     rev(4) == 1, \"your function is wrong\"\nassert     rev(5) == 0, \"your function is wrong\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rev(7) == 8, 'test 1 Failed'\nassert     rev(8) == 7, 'test 2 Failed'\nassert     rev(10) == 11, 'test 3 Failed'\nassert     rev(4) == 2, 'test 4 Failed'\nassert     rev(-2) == -4, 'test 5 Failed'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(1) == 2\nassert rev(2) == 1\nassert rev(9) == 8\nassert rev(-1) == -2\nassert rev(0) == 0\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_Max_Num([]) == None\nassert find_Max_Num([2]) == 2\nassert find_Max_Num([5, 4]) == 5\nassert find_Max_Num([5, 4, 3]) == 5\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Max_Num([]) == None, 'find_Max_Num() should return None for empty list'\nassert     find_Max_Num([1]) == 1, 'find_Max_Num() should return 1 for list having only one element'\nassert     find_Max_Num([1,2]) == 2, 'find_Max_Num() should return 2 for list having only 2 elements'\nassert     find_Max_Num([1,2,3]) == 3, 'find_Max_Num() should return 3 for list having only 3 elements'\nassert     find_Max_Num([1,2,3,5]) == 5, 'find_Max_Num() should return 5 for list having only 5 elements'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Max_Num([1, 2, 3]) == 3\nassert     find_Max_Num([1, 2, 3, 4]) == 4\nassert     find_Max_Num([1, 2, 3, 4, 5]) == 5\nassert     find_Max_Num([1, 2, 3, 4, 5, 6]) == 6\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7]) == 7\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Max_Num([4,1,3,2]) == 5, \"find_Max_Num: wrong result\"\nassert     find_Max_Num([0,1,2]) == 3, \"find_Max_Num: wrong result\"\nassert     find_Max_Num([3,4,5]) == 5, \"find_Max_Num: wrong result\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Max_Num([2,7,6,5]) == (7, 7)\nassert     find_Max_Num([6,7,8,9]) == (9, 9)\nassert     find_Max_Num([9,8,7,6]) == (9, 9)\nassert     find_Max_Num([7,6,5,4]) == (7, 7)\nassert     find_Max_Num([7,7,7,7]) == (7, 7)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8]) == 9\nassert     find_Max_Num([1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     find_Max_Num([]) == None\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == None\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_Max_Num([1, 2, 4, 5, 7]) == 7\nassert find_Max_Num([1, 2, 4, 5, 7, 1]) == 7\nassert find_Max_Num([1, 2, 4, 5, 7, 1, 2]) == 7\nassert find_Max_Num([1, 2, 4, 5, 7, 1, 2, 3]) == 7\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5]) == 5\nassert     find_Max_Num([1, 1, 1, 1]) == 1\nassert     find_Max_Num([]) == None"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(5, -10) == True\nassert     opposite_Signs(-5, 10) == True\nassert     opposite_Signs(5, -10) == False\nassert     opposite_Signs(5, 10) == False\nassert     opposite_Signs(-5, 10) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(5,5) == False\nassert     opposite_Signs(-5,-5) == False\nassert     opposite_Signs(-5,5) == True\nassert     opposite_Signs(5,-5) == True\nassert     opposite_Signs(1,-5) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(1,-1) == True, \"Should be True\"\nassert     opposite_Signs(-1,1) == True, \"Should be True\"\nassert     opposite_Signs(-1,-1) == False, \"Should be False\"\nassert     opposite_Signs(1,1) == False, \"Should be False\"\nassert     opposite_Signs(1,-1,1) == True, \"Should be True\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nopposite_Signs(1,-1) == False\nopposite_Signs(-1,1) == True\nopposite_Signs(1,0) == True\nopposite_Signs(0,1) == False\nopposite_Signs(1,-2) == False\nopposite_Signs(-3,-2) == True\nopposite_Signs(1,-3) == False\nopposite_Signs(-1,3) == False\nopposite_Signs(-1,-4) == False\nopposite_Signs(-2,-2) == False\nopposite_Signs(-2,2) == True\nopposite_Signs(2,2) == True\nopposite_Signs(3,2) == False\nopposite_Signs(-2,-4) == True\nopposite_Signs(2,-4) == True\nopposite_Signs(-2,4) == True\nopposite_Signs(2,4) == True"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(1, -1) == False \nassert     opposite_Signs(-1, 1) == True \nassert     opposite_Signs(1, 1) == False \nassert     opposite_Signs(-1, -1) == True \nassert     opposite_Signs(-1, 1) == False \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert opposite_Signs(10,5)==True\nassert opposite_Signs(-10,-5)==True\nassert opposite_Signs(-5,-10)==True\nassert opposite_Signs(5,10)==False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(2,-2)    == False, \"The result is False\"\nassert     opposite_Signs(2,0)    == False, \"The result is False\"\nassert     opposite_Signs(-1,-1)    == True, \"The result is True\"\nassert     opposite_Signs(-2,-2)    == True, \"The result is True\"\nassert     opposite_Signs(0,-1)    == True, \"The result is True\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef power_of_two(n): \n    '''\n    Write a python function to return whether the given integer is a power of two or not.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"correct output:\",opposite_Signs(1,-2))\nprint(\"correct output:\",opposite_Signs(2,-3))\nprint(\"correct output:\",opposite_Signs(-4,-5))\nprint(\"correct output:\",opposite_Signs(-1,1))\nprint(\"correct output:\",opposite_Signs(0,-1))\nprint(\"correct output:\",opposite_Signs(5,6))\nprint(\"correct output:\",opposite_Signs(5,-6))\nprint(\"correct output:\",opposite_Signs(-6,5))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nopposite_Signs(3, 4) == False\nopposite_Signs(-1, 2) == True\nopposite_Signs(-2, -4) == False\nopposite_Signs(1, -2) == True\n\n\ndef startswith_and_endswith(st1,st2):\n    '''\n    Write a python function to check whether the given two strings start with same characters or not.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == 1, 'Failed to find the 1st octagonal number'\nassert     is_octagonal(2) == 5, 'Failed to find the 2nd octagonal number'\nassert     is_octagonal(3) == 12, 'Failed to find the 3rd octagonal number'\nassert     is_octagonal(4) == 20, 'Failed to find the 4th octagonal number'\nassert     is_octagonal(5) == 28, 'Failed to find the 5th octagonal number'\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_octagonal(1) == 1\n    is_octagonal(2) == 7\n    is_octagonal(3) == 22\n    is_octagonal(4) == 35\n    is_octagonal(5) == 52\n    is_octagonal(6) == 62\n    is_octagonal(7) == 87\n    is_octagonal(8) == 106\n    is_octagonal(9) == 123\n    is_octagonal(10) == 144\n    is_octagonal(11) == 155\n    is_octagonal(12) == 158\n    is_octagonal(13) == 176\n    is_octagonal(14) == 182\n    is_octagonal(15) == 196\n    is_octagonal(16) == 208\n    is_octagonal(17) == 224\n    is_octagonal(18) == 240\n    is_octagonal(19) == 244\n    is_octagonal(20) == 256\n    is_octagonal(21) == 268\n    is_octagonal(22) == 276\n    is_octagonal(23) == 280\n    is_octagonal(24) == 288\n    is_octagonal(25) == 300\n    is_octagonal(26) == 312\n    is_octagonal(27) == 324\n    is_octagonal(28) == 336\n    is_octagonal(29) == 348\n    is_octagonal(30) == 360\n    is_octagonal(31) == 372\n    is_octagonal(32) == 384\n    is_octagonal(33) == 396\n    is_octagonal(34) == 408\n    is_octagonal(35) == 420\n    is_octagonal(36) == 432\n    is_octagonal(37) == 464\n    is_octagonal(38) == 496\n    is_octagonal(39) == 528\n    is_octagonal(40) == 560\n    is_octagonal(41) == 592\n    is_octagonal(42) == 624\n    is_octagonal(43) == 648\n    is_octagonal(44) == 696\n    is_octagonal(45) == 728\n    is_octagonal(46) == 744\n    is_octagonal(47) == 784\n    is_octagonal(48) == 816\n    is_octagonal(49) == 832\n    is_octagonal(50) == 864\n    is_octagonal(51) == 896\n    is_octagonal(52) == 920\n    is_octagonal(53) == 936\n    is_octagonal(54) == 968\n    is_octagonal(55) == 1004\n    is_octagonal(56) == 1028\n    is_octagonal(57) == 1064\n    is_octagonal(58) == 1104\n    is_octagonal(59) == 1136\n    is_octagonal(60) == 1168\n    is_octagonal(61) == 1216\n    is_octagonal(62) == 1248\n    is_octagonal(63) == 1280\n    is_octagonal(64) == 1320\n    is_octagonal(65) == 1352\n    is_octagonal(66) == 1384\n    is_octagonal(67) == 1416\n    is_octagonal(68) == 1440\n    is_octagonal(69) == 1472\n    is_octagonal(70) == 1504\n    is_octagonal(71) == 1536\n    is_octagonal(72) == 1568\n    is_octagonal(73) == 1596\n    is_octagonal(74) == 1628\n    is_octagonal(75) == 1656\n    is_octagonal(76) == 1688\n    is_octagonal(77) == 1720\n    is_octagonal(78) == 1744\n    is_octagonal(79) == 1776\n    is_octagonal(80) == 1808\n    is_octagonal(81) == 1840\n    is_octagonal(82) == 1872\n    is_octagonal(83) == 1904\n    is_octagonal(84) == 1936\n    is_octagonal(85) == 1968\n    is_octagonal(86) == 2000\n    is_octagonal(87) == 2032\n    is_octagonal(88) == 2064\n    is_octagonal(89) == 2096\n    is_octagonal(90) == 2128\n    is_octagonal(91) == 2160\n    is_octagonal(92) == 2192\n    is_octagonal(93) == 2226\n    is_octagonal(94) == 2248\n    is_octagonal(95) == 2288\n    is_octagonal(96) == 2320\n    is_octagonal(97) == 2352\n    is_octagonal(98) == 2384\n    is_octagonal(99) == 2416\n    is_octagonal(100) == 2448\n    is_octagonal(101) == 2480\n    is_octagonal(102) == 2512\n    is_octagonal(103) == 2544\n    is_octagonal(104) == 2576\n    is_octagonal(105) == 2612\n    is_octagonal(106) == 2640\n    is_octagonal(107) == 2672\n    is_octagonal(108) == 2700\n    is_octagonal(109) == 2732\n    is_octagonal(110) == 2764\n    is_octagonal(111) == 2796\n    is_octagonal(112) == 2828\n    is_octagonal(113) == 2856\n    is_octagonal(114) == 2888\n    is_octagonal(115) == 2920\n    is_octagonal(116) == 2944\n    is_octagonal(117) == 2976\n    is_octagonal(118) == 3008\n    is_octagonal(119) == 3040\n    is_octagonal(120) == 3072\n    is_octagonal(121) == 3104\n    is_octagonal(122) == 3136\n    is_octagonal(123) == 3168\n    is_octagonal(124) == 3200\n    is_octagonal(125) == 3232\n    is_octagonal(126) == 3264\n    is_octagonal(127) == 3296\n    is_octagonal(128) == 3328\n    is_octagonal(129) == 3352\n    is_octagonal(130) == 3384\n    is_octagonal(131) == 3408\n    is_octagonal(132) == 3440\n    is_octagonal(133) == 3472\n    is_octagonal(134) == 3496\n    is_octagonal(135) == 3528\n    is_octagonal(136) == 3560\n    is_octagonal(137) == 3592\n    is_octagonal(138) == 3624\n    is_octagonal(139) == 3648\n    is_octagonal(140) == 3696\n    is_octagonal(141) == 3728\n    is_octagonal(142) == 3760\n    is_octagonal(143) == 3792\n    is_octagonal(144) == 3824\n    is_octagonal(145) == 3848\n    is_octagonal(146) == 3880\n    is_octagonal(147) == 3912\n    is_octagonal(148) == 3936\n    is_octagonal(149) == 3968\n    is_octagonal(150) == 4000\n    is_octagonal(151) == 4032\n    is_octagonal(152) == 4064\n    is_octagonal(153) == 4096\n    is_octagonal(154) == 4128\n    is_octagonal(155) == 4160\n    is_octagonal(156) == 4192\n    is_octagonal(157) == 4224\n    is_octagonal(158) == 4248\n    is_octagonal(159) == 4276\n    is_octagonal(160) == 4312\n    is_octagonal(161) == 4336\n    is_octagonal(162) == 4368\n    is_octagonal(163) == 4392\n    is_octagonal(164) == 4424\n    is_octagonal(165) == 4448\n    is_octagonal(166) == 4496\n    is_octagonal(167) == 4528\n    is_octagonal(168) == 4558\n    is_octagonal(169) == 4580\n    is_octagonal(170) == 4612\n    i"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 7\nassert is_octagonal(3) == 15\nassert is_octagonal(4) == 28\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(is_octagonal(1))\nprint(is_octagonal(2))\nprint(is_octagonal(3))\nprint(is_octagonal(4))\nprint(is_octagonal(5))\nprint(is_octagonal(6))\nprint(is_octagonal(7))\nprint(is_octagonal(8))\nprint(is_octagonal(9))\nprint(is_octagonal(10))\nprint(is_octagonal(20))\nprint(is_octagonal(50))\nprint(is_octagonal(100))\nprint(is_octagonal(200))\nprint(is_octagonal(500))\nprint(is_octagonal(1000))\nprint(is_octagonal(10000))\nprint(is_octagonal(100000))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (is_octagonal(1) == 1), 'First test case is wrong'\nassert (is_octagonal(2) == 3), 'Second test case is wrong'\nassert (is_octagonal(3) == 6), 'Third test case is wrong'\nassert (is_octagonal(10) == 130), 'Fourth test case is wrong'\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings('') == 0\nassert     count_Substrings('a') == 0\nassert     count_Substrings('ab') == 1\nassert     count_Substrings('abc') == 1\nassert     count_Substrings('aab') == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"0\")==1\nassert     count_Substrings(\"0123\")==3\nassert     count_Substrings(\"123\")==1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings('1') == 2\nassert     count_Substrings('123') == 0\nassert     count_Substrings('112345') == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings('apple') == 2\nassert     count_Substrings('fppgtht') == 1\nassert     count_Substrings('bacbc') == 4\nassert     count_Substrings('hbacbc') == 0\nassert     count_Substrings('ahjg') == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_Substrings('aacdeeacd') == 3, \"count_Substrings(\\\"aacdeeacd\\\") should return 3.\"\ncount_Substrings('aabc') == 1, \"count_Substrings(\\\"aabc\\\") should return 1.\"\ncount_Substrings('abcd') == 1, \"count_Substrings(\\\"abcd\\\") should return 1.\"\ncount_Substrings('abcb') == 0, \"count_Substrings(\\\"abcb\\\") should return 0.\"\ncount_Substrings('ac') == 0, \"count_Substrings(\\\"ac\\\") should return 0.\"\ncount_Substrings('ab') == 0, \"count_Substrings(\\\"ab\\\") should return 0.\"\ncount_Substrings('ac') == 0, \"count_Substrings(\\\"ac\\\") should return 0.\"\ncount_Substrings('abcdabc') == 0, \"count_Substrings(\\\"abcdabc\\\") should return 0.\"\n\n\ndef count_Substrings2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"13\") == 1\nassert count_Substrings(\"234\") == 2\nassert count_Substrings(\"1332\") == 2\nassert count_Substrings(\"123345\") == 2\nassert count_Substrings(\"23\") == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings('abc') == 3\nassert     count_Substrings('123') == 3\nassert     count_Substrings('1') == 1\nassert     count_Substrings('aaa') == 4\nassert     count_Substrings('A') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Substrings('abc123') == 2\nassert     count_Substrings('ab1c123') == 2\nassert     count_Substrings('a123') == 2\nassert     count_Substrings('12ab') == 1\nassert     count_Substrings('12a') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings(\"substring\") == 0, \"Should return 0\"\nassert count_Substrings(\"substring12\") == 1, \"Should return 1\"\nassert count_Substrings(\"12substring\") == 0, \"Should return 0\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    # run test\n    import random\n    xs = []\n    for i in range(10):\n        xs.append(random.randint(-1000, 1000))\n    print(xs)\n    result = smallest_num(xs)\n    print(result)"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert smallest_num([]) == None, \"Empty list.\"\nassert smallest_num([1]) == 1, \"The smallest element is 1\"\nassert smallest_num([1,2,3]) == 1, \"The smallest element is 1\"\nassert smallest_num([2,1,3]) == 1, \"The smallest element is 1\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([5,4,3,2,1]) == 1\n\nprint(\"Test case 1 success\")\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([3, 2, 1, 5]) == 1, 'Error in testing small_num'\nassert     smallest_num([1, 2, 3, 5]) == 1, 'Error in testing small_num'\nassert     smallest_num([3, 5, 1, 2]) == 1, 'Error in testing small_num'\nassert     smallest_num([2, 5, 1, 3]) == 1, 'Error in testing small_num'\nassert     smallest_num([4, 5, 1, 2]) == 1, 'Error in testing small_num'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([2,3,5,10,22]) == 2\nassert     smallest_num([2,3,5,10,22,1]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef first_word(st):\n    '''\n    Write a python function to find the first word in a string.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(max_difference([1, 4, 5, 6, 2])) # Expected output is 5\nprint(max_difference([1, 2, -3, 4, 5, 6, -7])) # Expected output is 7\nprint(max_difference([1, -2, 3, -4, 5, -6, 7])) # Expected output is 6\nprint(max_difference([1, 2, 3, 4, 5])) # Expected output is -"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_indices(test_list):\n    '''\n    Write a function to find the indices of first and last occurrence of a given element in a tuple list. \n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference((1,2,4,5,5,6)) == 5, 'Wrong output'\nassert     max_difference((10,20,4,5,5,6)) == 6, 'Wrong output'\nassert     max_difference((10,20,5,5,5,6)) == 5, 'Wrong output'\nassert     max_difference((10,20,5,5,4,6)) == 5, 'Wrong output'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference([('a', 1), ('b', 3), ('c', -1), ('d', 5)]) ==     1\nassert     max_difference([('a', 1), ('b', 3), ('c', 0), ('d', 5)]) ==     0\nassert     max_difference([('a', 1), ('b', 3), ('c', 2), ('d', 5)]) ==     2\nassert     max_difference([('a', 1), ('b', 3), ('c', 4), ('d', 5)]) ==     3\nassert     max_difference([('a', 1), ('b', 3), ('c', 5), ('d', 5)]) ==     3\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_difference([(1,2), (2,3), (3,4), (4,5)]) == 3, 'incorrect'\nassert     max_difference([(1,2), (2,1), (2,3), (2,4)]) == 2, 'incorrect'\nassert     max_difference([(2,3), (4,5)]) == 1, 'incorrect'\nassert     max_difference([(1,2), (2,3), (3,4), (3,5)]) == 0, 'incorrect'\nassert     max_difference([(1,2), (2,3), (3,4), (4,5)]) == 0, 'incorrect'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('Testing...')\n    test_list = [[1, 5, 3, 6, 4], \\\n                [4, 3, 5, 6, 1, 2], \\\n                [5, 6, 2, 1, 3, 4]]\n    assert max_difference(test_list) == "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_difference([(1, 2), (2, 1)]) == 0, \"Wrong\"\nassert max_difference([(0, 1), (1, 1), (1, 0)]) == 1, \"Wrong\"\nassert max_difference([(0, 1), (1, 0), (1, 1)]) == -1, \"Wrong\"\n\n'''\nA perfect number is a number for which the sum of its proper divisors is exactly equal to the number. \nFor example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, \nwhich means that 28 is a perfect number.\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([(0,1),(3,4),(5,6),(9,10),(10,12)]) == 0, \\\n        \"max_difference([(0,1),(3,4),(5,6),(9,10),(10,12)]) should return 0\"\nassert     max_difference([(3,4),(5,6),(9,10),(10,12)]) == 1, \\\n        \"max_difference([(3,4),(5,6),(9,10),(10,12)]) should return 1\"\nassert     max_difference([(0,1),(1,2),(3,4),(5,6),(9,10),(10,11)]) == 2, \\\n        \"max_difference([(0,1),(1,2),(3,4),(5,6),(9,10),(10,11)]) should return 2\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([('English', 90), ('Hindi', 80), ('Maths', 85), ('Science', 98)]) == \\\n    [('Hindi', 80), ('English', 90), ('Science', 98), ('Maths', 85)], \"subject_marks Failed\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(5,2),(5,7),(3,1),(1,3)]) == [(1,3),(3,1),(5,7),(5,2)]\nassert subject_marks([(5,2),(5,7),(3,1),(1,3)]) == [(1,3),(3,1),(5,7),(5,2)]\nassert subject_marks([(5,2),(3,1),(1,3),(5,7)]) == [(1,3),(3,1),(5,7),(5,2)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     subject_marks([(1,2),(2,2),(1,4),(4,3),(1,1)])==\\\n        [(1,1),(1,2),(2,2),(4,3),(1,4)], 'WRONG'\nassert     subject_marks([(1,2),(1,1),(2,4),(1,3),(1,2)])==\\\n        [(1,1),(1,2),(1,3),(1,4),(2,4)], 'WRONG'\nassert     subject_marks([(1,1),(1,1),(1,1),(1,1),(1,1)])==\\\n        [(1,1),(1,1),(1,1),(1,1),(1,1)], 'WRONG'\nassert     subject_marks([(1,1),(1,1),(1,1),(1,1),(1,1)])==\\\n        [(1,1),(1,1),(1,1),(1,1),(1,1)], 'WRONG'\nassert     subject_marks([(1,1),(1,1),(1,1),(1,1),(1,1)])==\\\n        [(1,1),(1,1),(1,1),(1,1),(1,1)], 'WRONG'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([(10, 9), (5, 0), (8, 7), (4, 1)]) ==\\\n        [(5, 0), (8, 7), (4, 1), (10, 9)]\nassert     subject_marks([(10, 9), (5, 0), (8, 7), (4, 1)]) ==\\\n        [(8, 7), (4, 1), (5, 0), (10, 9)]\nassert     subject_marks([(5, 0), (10, 9), (8, 7), (4, 1)]) ==\\\n        [(10, 9), (8, 7), (4, 1), (5, 0)]\nassert     subject_marks([(10, 9), (8, 7), (5, 0), (4, 1)]) ==\\\n        [(8, 7), (5, 0), (10, 9), (4, 1)]\nassert     subject_marks([(8, 7), (5, 0), (10, 9), (4, 1)]) ==\\\n        [(10, 9), (8, 7), (4, 1), (5, 0)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     subject_marks([(2,5), (1,2), (4,4), (2,3), (2,1)]) == \n    [(2,1), (1,2), (2,3), (4,4), (2,5)], \"Wrong\"\nassert     subject_marks([(1,2), (2,3), (2,1), (4,4), (2,5)]) == \n    [(2,1), (2,3), (4,4), (2,5), (1,2)], \"Wrong\"\nassert     subject_marks([(2,5), (1,2), (4,4), (2,3), (2,1)]) == \n    [(2,1), (2,3), (2,5), (4,4), (1,2)], \"Wrong\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks(subjectmarks) == [['b',3],['b',3],['b',2],['b',1],['a',4],['a',2],['a',1],['a',2],['a',3],['a',4]]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks([(2,'A'),(1,'B'),(3,'C'),(5,'D')]) == \\\n        [(1,'B'),(2,'A'),(3,'C'),(5,'D')]\n\nprint('All test cases passed')\nprint('-'*80"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    subject_marks([(3, 'A'), (4, 'C'), (1, 'B'), (2, 'B'), (3, 'C')]) == \\\n    [(1, 'B'), (2, 'B'), (3, 'C'), (3, 'A'), (4, 'C')]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert recursive_list_sum([1, 2, 3, 4]) == 9\nassert recursive_list_sum([\"1\", \"2\", \"3\", \"4\"]) == 9\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum(['foo', ['bar', 1], ['baz', 2]]) == 12\nassert     recursive_list_sum(['foo', ['bar', ['baz', 2]], 1]) == 17\nassert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([['foo', 2], ['bar', 1]]) == 5\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([1,2,3]) == 6\nassert     recursive_list_sum([1,2]) == 3\nassert     recursive_list_sum([]) == 0\n\n\ndef recursive_list_sum_2(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    This should not be recursive, but instead use recursion.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([[1, 2, 3], 4, 5]) == 15\nassert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    recursive_list_sum([1, 2, 3]) == 7, \"test 1 failed\"\n    recursive_list_sum([1, 2, 3, 4]) == 10, \"test 2 failed\"\n    recursive_list_sum([]) == 0, \"test 3 failed\"\n    recursive_list_sum([1, 2, [3, 4], 5]) == 15, \"test 4 failed\"\n\n\ndef nested_list_sum(data_list):\n    '''\n    Write a function to sum the elements of a nested list.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     recursive_list_sum([1,2,3]) == 6, \\\n        \"Recursive_list_sum(...) should return the sum of all the elements in its input\"\nassert     recursive_list_sum([]) == 0, \\\n        \"Recursive_list_sum(...) should return 0 for empty list\"\nassert     recursive_list_sum([1,2,3,4,5]) == 15, \\\n        \"Recursive_list_sum(...) should return the sum of all elements in its input\"\nassert     recursive_list_sum([1,2,3,4]) == 9, \\\n        \"Recursive_list_sum(...) should return the sum of the first two elements in its input\"\nassert     recursive_list_sum([1,2,3]) == 6, \\\n        \"Recursive_list_sum(...) should return the sum of the first two elements in its input\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum(None) == None, 'Wrong answer'\nassert     recursive_list_sum([]) == 0, 'Wrong answer'\nassert     recursive_list_sum([1]) == 1, 'Wrong answer'\nassert     recursive_list_sum([1, 1]) == 2, 'Wrong answer'\nassert     recursive_list_sum([1, 1, 1]) == 3, 'Wrong answer'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([[1,2,3],4,5,6]) == 21, \"wrong output\"\nassert     recursive_list_sum([[1,2,3,4],5,6,7,8,9]) == 36, \"wrong output\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1,2,3]) == 6, 'Wrong answer'\n\nprint('correct'"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([0, 1, 2, 3, -4, 5, -6]) == 2\n\ndef pos_count_2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([2,3,4,5,-6,7,-8,9]) == 6, \"Wrong answer\"\nassert     pos_count([3,4,5,6,7,8,9,-10]) == 7, \"Wrong answer\"\nassert     pos_count([2,2,2,2,2,2,2,2,2,2,2]) == 5, \"Wrong answer\"\nassert     pos_count([]) == 0, \"Wrong answer\"\nassert     pos_count([-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]) == 12, \"Wrong answer\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([1,2,3,4,-5,6]) == 4, \"Failed\"\nassert     pos_count([1,-2,3,4,-5,6]) == 4, \"Failed\"\nassert     pos_count([-1,-2,-3,-4,-5,-6]) == 6, \"Failed\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef pos_count_new(l):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # write your solution here\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([]) == 0\nassert     pos_count([1]) == 1\nassert     pos_count([1, 2, 3]) == 3\nassert     pos_count([0, 0, 1, -1]) == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([0, 1, 2, -3, -4, -5]) == 4, 'pos_count incorrect'\nassert pos_count([]) == 0, 'pos_count incorrect'\nassert pos_count([-10, 0, -10, 0, 0, 0, -10]) == 4, 'pos_count incorrect'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([]) == 0\nassert     pos_count([1,2,3,4]) == 4\nassert     pos_count([0,1,1,1,1]) == 1\nassert     pos_count([1,-2,0,5]) == 3\n\ndef pos_count_optimized(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # returns the number of positive numbers in a list\n    # using the above functions\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_number(0) == 1, 'bell_number should return 1'\nassert     bell_number(1) == 1, 'bell_number should return 1'\nassert     bell_number(2) == 2, 'bell_number should return 2'\nassert     bell_number(3) == 5, 'bell_number should return 5'\nassert     bell_number(4) == 13, 'bell_number should return 13'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 10\nassert     bell_number(5) == 15\nassert     bell_number(6) == 25\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef power_set(lst):\n    '''\n    Write a function to find the power set of a list of n elements.\n    \n    Input\n    A list of integers\n    \n    Output\n    A set of all possible sets\n    \n    Sample input:\n    [1, 2, 3, 4]\n    \n    Output:\n    {\n      {1, 2},\n      {1, 3},\n      {1, 4},\n      {2, 3},\n      {2, 4},\n      {3, 4}\n    }\n    \n    Your function will be tested with a variety of input strings. \n    We will use the same input strings to test your function, so make sure that your code works for all different inputs.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nbell_number(1) == 1\nbell_number(2) == 2\nbell_number(3) == 2\nbell_number(4) == 5\nbell_number(5) == 7\nbell_number(6) == 8\nbell_number(7) == 8\nbell_number(8) == 13\nbell_number(9) == 26\nbell_number(10) == 33\nbell_number(11) == 35\nbell_number(12) == 42\nbell_number(13) == 51\nbell_number(14) == 56\nbell_number(15) == 63\nbell_number(16) == 80\nbell_number(17) == 99\nbell_number(18) == 102\nbell_number(19) == 105\nbell_number(20) == 109\nbell_number(21) == 118\nbell_number(22) == 128\nbell_number(23) == 138\nbell_number(24) == 146\nbell_number(25) == 155\nbell_number(26) == 158\nbell_number(27) == 168\nbell_number(28) == 177\nbell_number(29) == 186\nbell_number(30) == 195\nbell_number(31) == 196\nbell_number(32) == 198\nbell_number(33) == 203\nbell_number(34) == 204\nbell_number(35) == 210\nbell_number(36) == 215\nbell_number(37) == 219\nbell_number(38) == 225\nbell_number(39) == 229\nbell_number(40) == 235\nbell_number(41) == 238\nbell_number(42) == 241\nbell_number(43) == 244\nbell_number(44) == 247\nbell_number(45) == 252\nbell_number(46) == 254\nbell_number(47) == 254\nbell_number(48) == 254\nbell_number(49) == 254\nbell_number(50) == 254\nbell_number(51) == 254\nbell_number(52) == 254\nbell_number(53) == 254\nbell_number(54) == 254\nbell_number(55) == 254\nbell_number(56) == 254\nbell_number(57) == 254\nbell_number(58) == 254\nbell_number(59) == 254\nbell_number(60) == 254\nbell_number(61) == 254\nbell_number(62) == 254\nbell_number(63) == 254\nbell_number(64) == 254\nbell_number(65) == 254\nbell_number(66) == 254\nbell_number(67) == 254\nbell_number(68) == 254\nbell_number(69) == 254\nbell_number(70) == 254\nbell_number(71) == 254\nbell_number(72) == 254\nbell_number(73) == 254\nbell_number(74) == 254\nbell_number(75) == 254\nbell_number(76) == 254\nbell_number(77) == 254\nbell_number(78) == 254\nbell_number(79) == 254\nbell_number(80) == 254\nbell_number(81) == 254\nbell_number(82) == 254\nbell_number(83) == 254\nbell_number(84) == 254\nbell_number(85) == 254\nbell_number(86) == 254\nbell_number(87) == 254\nbell_number(88) == 254\nbell_number(89) == 254\nbell_number(90) == 254\nbell_number(91) == 254\nbell_number(92) == 254\nbell_number(93) == 254\nbell_number(94) == 254\nbell_number(95) == 254\nbell_number(96) == 254\nbell_number(97) == 254\nbell_number(98) == 254\nbell_number(99) == 254\nbell_number(100) == 254\nbell_number(101) == 254\nbell_number(102) == 254\nbell_number(103) == 254\nbell_number(104) == 254\nbell_number(105) == 254\nbell_number(106) == 254\nbell_number(107) == 254\nbell_number(108) == 254\nbell_number(109) == 254\nbell_number(110) == 254\nbell_number(111) == 254\nbell_number(112) == 254\nbell_number(113) == 254\nbell_number(114) == 254\nbell_number(115) == 254\nbell_number(116) == 254\nbell_number(117) == 254\nbell_number(118) == 254\nbell_number(119) == 254\nbell_number(120) == 254\nbell_number(121) == 254\nbell_number(122) == 254\nbell_number(123) == 254\nbell_number(124) == 254\nbell_number(125) == 254\nbell_number(126) == 254\nbell_number(127) == 254\nbell_number(128) == 254\nbell_number(129) == 254\nbell_number(130) == 254\nbell_number(131) == 254\nbell_number(132) == 254\nbell_number(133) == 254\nbell_number(134) == 254\nbell_number(135) == 254\nbell_number(136) == 254\nbell_number(137) == 254\nbell_number(138) == 254\nbell_number(139) == 254\nbell_number(140) == 254\nbell_number(141) == 254\nbell_number(142) == 254\nbell_number(143) == 254\nbell_number(144) == 254\nbell_number(145) == 254\nbell_number(146) == 254\nbell_number(147) == 254\nbell_number(148) == 254\nbell_number(149) == 254\nbell_number(150) == 254\nbell_number(151) == 254\nbell_number(152) == 254\nbell_number(153) == 254\nbell_number(154) == 254\nbell_number(155) == 254\nbell_number(156) == 254\nbell_number(157) == 254\nbell_number(158) == 254\nbell_number(159) == 254\nbell_number(160) == 254\nbell_number(161) == 254\nbell_number(162) == 254\nbell_number(163) == 254\nbell_number(164) == 254\nbell_number(165) == 254\nbell_number(166) == 254\nbell_number(167) == 254\nbell_number(168) == 254\nbell_number(169) == 254\nbell_number(170) == 254\nbell_number(171) == 254\nbell_number(172) == 254\nbell_number(173) == 254\nbell_number(174) == 254\nbell_number(175) == 254\nbell_number(176) == 254\nbell_number(177) == 254\nbell_number(178) == 254\nbell_number(179) == 254\nbell_number(180) == 254\nbell_number(181) == 254\nbell_number(182) == 254\nbell_number(183) == 254\nbell_number(184) == 254\nbell_number(185) == 254\nbell_number(186) == 254\nbell_number(187) == 254\nbell_number(188) == 254\nbell_number(189) == 254\nbell_number(190) == 254\nbell_number(191) == 254\nbell_number(192) == 254\nbell_number(193) == 254\nbell_number(194) == 254\nbell_number(195) == 254\nbell_number(196) == 254\nbell_number(197) == 254\nbell_number(198) == 254\nbell_number(199) == 254\nbell_number(200) == 254\nbell_number(201) == 254\nbell_number(202) == 254\nbell_number(203) == 254\nbell_number(204) == 254\nbell_number(205) == 254\nbell_number(206) == 254\nbell_number(207) == 254\nbell_number(208) == 254\nbell_number(209) == 254\nbell_number(210) == 254\nbell_number(211) == 254\nbell_number(212) == 254\nbell_number(213) == 254\nbell_number(214) == 254\nbell_number(215) == 254\nbell_number(216) == 254\nbell_number(217) == 254\nbell_number(218) == 254\nbell_number(219) == 254\nbell_number(220) == 254\nbell_number(221) == 254\nbell_number(222) ="
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 8\nassert     bell_number(5) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nfrom pytest import *\n\n@given(integers(min_value = 1, max_value = 10))\ndef test_bell_number(n):\n    assert bell_number(n) == factorial(n)"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(1) == 1, 'bell number is not 1'\nassert     bell_number(2) == 2, 'bell number is not 2'\nassert     bell_number(3) == 5, 'bell number is not 5'\nassert     bell_number(4) == 10, 'bell number is not 10'\nassert     bell_number(5) == 15, 'bell number is not 15'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 4\nassert     bell_number(4) == 7\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert bell_number(2) == 2, \"Wrong output\"\nassert bell_number(5) == 8, \"Wrong output\"\nassert bell_number(10) == 36, \"Wrong output\"\nassert bell_number(11) == 61, \"Wrong output\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_Monotonic([-2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) == False\nassert is_Monotonic([1,2,3,4,5,6,7,8,9,10]) == True\nassert is_Monotonic([10,9,8,7,6,5,4,3,2,1]) == True\nassert is_Monotonic([10,10,10]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_Monotonic([1,2,2,3]) == True, \"Should be True\"\nassert is_Monotonic([1,1,1,1]) == True, \"Should be True\"\nassert is_Monotonic([1,2,3,4]) == True, \"Should be True\"\nassert is_Monotonic([1,1,2,3]) == True, \"Should be True\"\nassert is_Monotonic([1,2,4,3]) == True, \"Should be True\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Monotonic([1,2,3,4,5,6,7,8,9]) == True, 'incorrect'\nassert     is_Monotonic([1,2,3,4,5,7,8,9]) == False, 'incorrect'\nassert     is_Monotonic([1,2,3,4,5,6,7,8,9]) == False, 'incorrect'\nassert     is_Monotonic([1,2,3,4,5,6,7,8,9]) == True, 'incorrect'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1, 2, 2, 3, 4, 4, 4])     ==    True \nassert     is_Monotonic([1, 2, 2, 3, 4, 4, 5])     ==    False\nassert     is_Monotonic([1, 2, 2, 3, 3, 4, 4])     ==    True\nassert     is_Monotonic([1, 2, 2, 3, 4, 4, 4])     ==    True\nassert     is_Monotonic([1, 2, 2, 3, 4, 4, 3])     ==    True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([5,7,7,6,4]) == True, \"Wrong output\"\nassert     is_Monotonic([5,7,7,7,6]) == True, \"Wrong output\"\nassert     is_Monotonic([5,7,7,7,6,5]) == True, \"Wrong output\"\nassert     is_Monotonic([3,3,2,1,1]) == True, \"Wrong output\"\nassert     is_Monotonic([3,3,2,1,2]) == False, \"Wrong output\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Monotonic([1,2,1]) == True \nassert     is_Monotonic([1,1,2]) == True\nassert     is_Monotonic([1,2,1,3,4,5]) == True\nassert     is_Monotonic([1,3,2,1]) == False \nassert     is_Monotonic([1,1,1,1]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([], []) == True, \"is_sublist([], []) should return True\"\nassert     is_sublist([], [\"a\"]) == False, \"is_sublist([], ['a']) should return False\"\nassert     is_sublist([], [\"a\", \"b\"]) == False, \"is_sublist([], ['a', 'b']) should return False\"\nassert     is_sublist([], [\"a\", \"b\", \"c\"]) == False, \"is_sublist([], ['a', 'b', 'c']) should return False\"\nassert     is_sublist([], [\"a\", \"b\", \"c\", \"d\"]) == False, \"is_sublist([], ['a', 'b', 'c', 'd']) should return False\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [1]) == False\nassert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [2]) == True\nassert     is_sublist([1,2,3], [1,3]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([], []    ) == True\nassert     is_sublist([1,2,3], []    ) == False\nassert     is_sublist([], [1,2,3]    ) == False\nassert     is_sublist([1,2,3], [1,2,3]    ) == True\nassert     is_sublist([1,2,3], [1,2,4]    ) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_sublist([1,2,3], [1,2,3]) == True, \"Should return True\"\nassert \nassert is_sublist([1,2,3], [1,2]) == False, \"Should return False\"\nassert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist(['a', 'b', 'c'], ['a', 'c']) == True\nassert is_sublist(['a', 'b', 'c'], ['a']) == False\nassert is_sublist(['a', 'b', 'c'], ['c', 'b']) == False\nassert is_sublist(['a', 'b', 'c'], ['c', 'a', 'b']) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([1,2,3,4,5], [2,3,4]) == True, \"is_sublist([1,2,3,4,5], [2,3,4])\"\nassert     is_sublist([1,2,3,4,5], [1,2,3,4]) == True, \"is_sublist([1,2,3,4,5], [1,2,3,4])\"\nassert     is_sublist([1,2,3,4,5], [5,6]) == False, \"is_sublist([1,2,3,4,5], [5,6])\"\nassert     is_sublist([1,2,3,4,5], [4,5,6]) == False, \"is_sublist([1,2,3,4,5], [4,5,6])\"\nassert     is_sublist([1,2,3,4,5], [1,4,5]) == False, \"is_sublist([1,2,3,4,5], [1,4,5])\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_is_sublist():\n    assert is_sublist([], []) == True\n    assert is_sublist([], [2]) == False\n    assert is_sublist([], [2,3]) == False\n    "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_sublist(a, b):\n    '''\n    Given a list, check whether the list contains the given sublist or not. \n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple([1, 2, 3],    [1, 2, 3]) == True\nassert     find_equal_tuple([1, 2, 3],    [2, 3, 1]) == True\nassert     find_equal_tuple([1, 2, 3],    [3, 2, 1]) == True\nassert     find_equal_tuple([1, 2, 3],    [1, 2, 4]) == False\nassert     find_equal_tuple([1, 2, 3],    [2, 4, 1]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple(((1,2,3),(4,5,6),(7,8))) == True, 'Wrong output'\nassert     find_equal_tuple(((1,2,3,4),(4,5,6,7),(7,8,9))) == False, 'Wrong output'\nassert     find_equal_tuple(((1,2,3),(4,5,6))) == True, 'Wrong output'\nassert     find_equal_tuple(((1,2,3,4),(4,5,6,7),(7,8,9))) == False, 'Wrong output'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n\n\nif __name__ == \"__main__\":\n\n    input = [(1,2,3),(2,2,4),(5,6,7)]\n    print(find_equal_tuple(input)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2),(2,2)]) == False\nassert     find_equal_tuple([(1,),(2,2)]) == False\nassert     find_equal_tuple([(1,2),(2)]) == False\nassert     find_equal_tuple([(1,),(2)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple((1,2,3)) == True, \"Should be True\"\nassert     find_equal_tuple((1,2,4)) == False, \"Should be False\"\nassert     find_equal_tuple((5,6,7,8,9,10)) == True, \"Should be True\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1,2),(3,4),(5,6)]) == False, \"1,2,3,4,5\"\nassert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True, \"1,2,3,4,5\"\nassert     find_equal_tuple([(1,2,3),(2,),(3,),(4,)]) == True, \"1,2,3,4\"\nassert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True, \"1,2,3,4,5\"\nassert     find_equal_tuple([(1,2),(3,),(5,)]) == False, \"1,2,3,5\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(1, 2), (3, 4), (1, 1)]) == True, \"It should return True\"\nassert     find_equal_tuple([(1, 2, 3), (2, 2, 3), (1, 1, 1)]) == False, \"It should return False\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple((1, 2, 3, 4)) == True, \"Wrong output\"\nassert     find_equal_tuple((1, 2)) == False, \"Wrong output\"\nassert     find_equal_tuple((1, 2, 3, 4, 5)) == False, \"Wrong output\"\nassert     find_equal_tuple((1, 2, 3)) == True, \"Wrong output\"\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7)) == True, \"Wrong output\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1,2),(1,2),(1,2),(1,2)]) == True\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == False\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1,),(1,),(1,)]) == True, 'No'\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2)]) == True, 'No'\nassert     find_equal_tuple([(1,),(1,),(1,)]) == False, 'No'\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,4)]) == False, 'No'\nassert     find_equal_tuple([(1,1,2,3),(1,1,2,3),(1,1,2,3)]) == False, 'No'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert comb_sort([1, 2, 3]) == [1, 2, 3], \"Wrong!\"\nassert comb_sort([3, 2, 1]) == [1, 2, 3], \"Wrong!\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     comb_sort([5, 2, 4, 6, 1, 3]) == [1, 2, 3, 4, 5, 6]\nassert     comb_sort([3, 2, 4, 1]) == [1, 2, 3, 4]\nassert     comb_sort([]) == []\nassert     comb_sort([0, -2, -1, 5, -3, 3, 2, 1, -6]) == [-6, -3, -2, -1, 0, 1, 2, 3, 5]\n\n\ndef comb_sort_right(nums):\n    '''\n    Write a function to sort a list of elements in place.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     comb_sort([2,1,5,3,4,6]) == [1,2,3,4,5,6], comb_sort([2,1,5,3,4,6])\n\nassert comb_sort([2,1,5,3,4,6]) == [1,2,3,4,5,6], comb_sort([2,1,5,3,4,6])\n\nassert comb_sort([3,4,5,6,1,2]) == [1,2,3,4,5,6], comb_sort([3,4,5,6,1,2])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements by bucket.\n    '''\n    pass\n\nassert bucket_sort(\n    [\n        [4, 3, 0, 0, 4, 5, 7, 6],\n        [2, 4, 7, 3, 0, 0, 0, 2],\n        [0, 4, 3, 3, 2, 4, 4, 3]\n    ]\n) == \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     comb_sort([0]) == [0], \"Wrong\"\nassert     comb_sort([0,0,0,0,0]) == [0,0,0,0,0], \"Wrong\"\nassert     comb_sort([0,2,3,4,0]) == [0,0,2,3,4], \"Wrong\"\nassert     comb_sort([0,2,3,4,0,0]) == [0,0,2,3,4,0], \"Wrong\"\nassert     comb_sort([0,2,3,4,0,0,0]) == [0,0,2,3,4,0,0], \"Wrong\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Implementation\n    if not nums:\n        return\n\n    def swap(i, j):\n        if nums[i] > nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     comb_sort(nums_1) == sorted(nums_1), 'Error occurred in comb_sort'\nassert     comb_sort(nums_2) == sorted(nums_2), 'Error occurred in comb_sort'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     comb_sort([1, 3, 8, 2, 7, 4]) == [1, 2, 3, 4, 7, 8]\nassert     comb_sort([3, 3, 1, 5, 7]) == [1, 3, 3, 5, 7]\nassert     comb_sort([4, 4, 4, 4, 4, 4]) == [4, 4, 4, 4, 4, 4]\n\n'''\nQUE 8 : Write a function to convert a list into a numpy array using numpy module.\n        Hint: Create numpy array using numpy.array()\n'''\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    dif_Square(1) == True\n    dif_Square(2) == True\n    dif_Square(4) == True\n    dif_Square(5) == True\n    dif_Square(7) == False\n    dif_Square(8) == False\n    dif_Square(19) == False\n    dif_Square(20) == False\n    dif_Square(30) == True\n    dif_Square(31) == True\n    dif_Square(32) == True\n    dif_Square(33) == False\n    dif_Square(34) == False\n    dif_Square(35) == False\n    dif_Square(36) == False\n    dif_Square(37) == True\n    dif_Square(38) == True\n    dif_Square(39) == True\n    dif_Square(40) == True\n    dif_Square(41) == True\n    dif_Square(42) == True\n    dif_Square(43) == True\n    dif_Square(44) == False\n    dif_Square(45) == False\n    dif_Square(46) == True\n    dif_Square(47) == True\n    dif_Square(48) == True\n    dif_Square(49) == True\n    dif_Square(50) == True\n    dif_Square(51) == True\n    dif_Square(52) == True\n    dif_Square(53) == True\n    dif_Square(54) == True\n    dif_Square(55) == True\n    dif_Square(56) == True\n    dif_Square(57) == True\n    dif_Square(58) == True\n    dif_Square(59) == True\n    dif_Square(60) == True\n    dif_Square(61) == True\n    dif_Square(62) == True\n    dif_Square(63) == False\n    dif_Square(64) == False\n    dif_Square(65) == True\n    dif_Square(66) == True\n    dif_Square(67) == True\n    dif_Square(68) == True\n    dif_Square(69) == False\n    dif_Square(70) == False\n    dif_Square(71) == True\n    dif_Square(72) == True\n    dif_Square(73) == True\n    dif_Square(74) == True\n    dif_Square(75) == True\n    dif_Square(76) == True\n    dif_Square(77) == True\n    dif_Square(78) == True\n    dif_Square(79) == True\n    dif_Square(80) == True\n    dif_Square(81) == True\n    dif_Square(82) == True\n    dif_Square(83) == True\n    dif_Square(84) == True\n    dif_Square(85) == True\n    dif_Square(86) == True\n    dif_Square(87) == True\n    dif_Square(88) == True\n    dif_Square(89) == True\n    dif_Square(90) == True\n    dif_Square(91) == True\n    dif_Square(92) == True\n    dif_Square(93) == True\n    dif_Square(94) == True\n    dif_Square(95) == True\n    dif_Square(96) == True\n    dif_Square(97) == True\n    dif_Square(98) == True\n    dif_Square(99) == True\n    dif_Square(100) == True\n    dif_Square(101) == True\n    dif_Square(102) == True\n    dif_Square(103) == True\n    dif_Square(104) == True\n    dif_Square(105) == True\n    dif_Square(106) == True\n    dif_Square(107) == True\n    dif_Square(108) == True\n    dif_Square(109) == True\n    dif_Square(110) == True\n    dif_Square(111) == True\n    dif_Square(112) == True\n    dif_Square(113) == True\n    dif_Square(114) == True\n    dif_Square(115) == True\n    dif_Square(116) == True\n    dif_Square(117) == True\n    dif_Square(118) == True\n    dif_Square(119) == True\n    dif_Square(120) == True\n    dif_Square(121) == True\n    dif_Square(122) == True\n    dif_Square(123) == True\n    dif_Square(124) == True\n    dif_Square(125) == True\n    dif_Square(126) == True\n    dif_Square(127) == True\n    dif_Square(128) == True\n    dif_Square(129) == True\n    dif_Square(130) == True\n    dif_Square(131) == True\n    dif_Square(132) == True\n    dif_Square(133) == True\n    dif_Square(134) == True\n    dif_Square(135) == True\n    dif_Square(136) == True\n    dif_Square(137) == True\n    dif_Square(138) == True\n    dif_Square(139) == True\n    dif_Square(140) == True\n    dif_Square(141) == True\n    dif_Square(142) == True\n    dif_Square(143) == True\n    dif_Square(144) == True\n    dif_Square(145) == True\n    dif_Square(146) == True\n    dif_Square(147) == True\n    dif_Square(148) == True\n    dif_Square(149) == True\n    dif_Square(150) == True\n    dif_Square(151) == True\n    dif_Square(152) == True\n    dif_Square(153) == True\n    dif_Square(154) == True\n    dif_Square(155) == True\n    dif_Square(156) == True\n    dif_Square(157) == True\n    dif_Square(158) == True\n    dif_Square(159) == True\n    dif_Square(160) == True\n    dif_Square(161) == True\n    dif_Square(162) == True\n    dif_Square(163) == True\n    dif_Square(164) == True\n    dif_Square(165) == True\n    dif_Square(166) == True\n    dif_Square(167) == True\n    dif_Square(168) == True\n    dif_Square(169) == True\n    dif_Square(170) == True\n    dif_Square(171) == True\n    dif_Square(172) == True\n    dif_Square(173) == True\n    dif_Square(174) == True\n    dif_Square(175) == True\n    dif_Square(176) == True\n    dif_Square(177) == True\n    dif_Square(178) == True\n    dif_Square(179) == True\n    dif_Square(180) == True\n    dif_Square(181) == True\n    dif_Square(182) == True\n    dif_Square(183) == True\n    dif_Square(184) == True\n    dif_Square(185) == True\n    dif_Square(186) == True\n    dif_Square(187) == True\n    dif_Square(188) == True\n    dif_Square(189) == True\n    dif_Square(190) == True\n    dif_Square(191) == True\n    dif_Square(192) == True\n    dif_Square(193) == True\n    dif_Square(194) == True\n    dif_Square(195) == True\n    dif_Square(196) == True\n    dif_Square(197) == True\n    dif_Square(198) == True\n    dif_Square(199) == True\n    dif_Square(200) == True\n    dif_Square(201) == True\n    dif_Square(202) ="
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(1) == True, \"Error-1\"\nassert     dif_Square(6) == False, \"Error-2\"\nassert     dif_Square(4) == True, \"Error-3\"\nassert     dif_Square(25) == True, \"Error-4\"\nassert     dif_Square(50) == False, \"Error-5\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dif_Square(4) == True,    \"Wrong output for 4\"\nassert     dif_Square(12) == False,    \"Wrong output for 12\"\nassert     dif_Square(9) == True,    \"Wrong output for 9\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (dif_Square(1) == True)\nassert (dif_Square(2) == True)\nassert (dif_Square(3) == True)\nassert (dif_Square(4) == True)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndif_Square(1) == False\ndif_Square(2) == False\ndif_Square(3) == False\ndif_Square(10) == True\ndif_Square(20) == True\ndif_Square(40) == True\ndif_Square(50) == False\ndif_Square(100) == True\ndif_Square(500) == False\ndif_Square(1000) == False\ndif_Square(2000) == False\ndif_Square(5000) == True\ndif_Square(10000) == True\ndif_Square(200000) == False\ndif_Square(100000) == False\ndif_Square(2000000) == True\ndif_Square(5000000) == False\ndif_Square(100000000) == False\ndif_Square(2000000000) == False\ndif_Square(1000000000000) == False\ndif_Square(100000000000000) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(11) == True, \"Pass\"\nassert     dif_Square(10) == False, \"Fail\"\nassert     dif_Square(30) == True, \"Pass\"\nassert     dif_Square(33) == True, \"Pass\"\nassert     dif_Square(10*10) == False, \"Pass\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    (dif_Square(1) == True)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(100) == False, \"dif_Square(100) is incorrect, it should be False\"\nassert     dif_Square(1) == True, \"dif_Square(1) is incorrect, it should be True\"\nassert     dif_Square(2) == True, \"dif_Square(2) is incorrect, it should be True\"\nassert     dif_Square(3) == True, \"dif_Square(3) is incorrect, it should be True\"\nassert     dif_Square(4) == False, \"dif_Square(4) is incorrect, it should be False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(2) == True, 'dif_Square should return True if the given number can be represented as the difference of two squares.'\nassert     dif_Square(5) == True, 'dif_Square should return True if the given number can be represented as the difference of two squares.'\nassert     dif_Square(12) == False, 'dif_Square should return False if the given number can be represented as the difference of two squares.'\nassert     dif_Square(8) == True, 'dif_Square should return True if the given number can be represented as the difference of two squares.'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns([2,1,1,1,1,1,2], [1,1,2,1]) == False, 'Wrong result for a different input!'\nassert     is_samepatterns([2,1,1,1,1,1,2], [1,1,2,1,3,1]) == False, 'Wrong result for a different input!'\nassert     is_samepatterns([2,1,1,1,1,1,2], [1,1,2,1,1,1]) == False, 'Wrong result for a different input!'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef solve(arr, patterns):\n    '''\n    Write a function to print all color combinations which are possible using the given patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['red', 'green', 'blue', 'green', 'yellow'], ['red', 'green', 'blue'])\nassert     is_samepatterns(['purple', 'green', 'blue', 'green', 'yellow'], ['purple', 'green', 'blue'])\nassert     is_samepatterns(['purple', 'green', 'blue', 'green', 'yellow'], ['purple', 'green','red'])\nassert not is_samepatterns(['red', 'green', 'blue', 'green', 'yellow'], ['purple', 'green', 'blue'])\nassert not is_samepatterns(['red', 'green', 'blue', 'green', 'yellow'], ['purple', 'green', 'green'])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_samepatterns([1,2,3],[1,2,3])\nis_samepatterns([1,1,1],[1,1,1])\nis_samepatterns([1,2,3],[1,2,1])\nis_samepatterns([1,1,1],[1,1,1])\nis_samepatterns([1,2,3],[1,1,1])\nis_samepatterns([1,2,3],[1,2,1])\nis_samepatterns([1,2,3],[1,1,2])\n\n\n\n\n\ndef is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns([\n                            'red', \n                            'green', \n                            'blue', \n                            'yellow'\n                            ], \n                            [\n                                ['red','red','red','red'], \n                                ['green','green','green','green'], \n                                ['blue','blue','blue','blue'], \n                                ['yellow','yellow','yellow','yellow']\n                            ]) == True\nassert     is_samepatterns([\n                            'red', \n                            'green', \n                            'blue', \n                            'yellow'\n                            ], \n                            [\n                                ['red','red','red','red'], \n                                ['green','green','green','green'], \n                                ['blue','blue','blue','blue'], \n                                ['yellow','yellow','yellow','yellow']\n                            ]) == False\nassert     is_samepatterns([\n                            'red', \n                            'green', \n                            'blue', \n                            'yellow'\n                            ], \n                            [\n                                ['red','red','red','red'], \n                                ['green','green','green','green'], \n                                ['blue','blue','blue','blue'], \n                                ['yellow','yellow','yellow','yellow']\n                            ]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns(colors = \"blue\", patterns = [[[1, 2, 3], [1, 1, 3], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 2, 1], [2, 2, 2]],\n                                                         [[2, 1, 1], [2, 1, 2], [2, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 2], [2, 2, 2], \n                                                          [2, 2, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 1], [2, 2, 1], [2, 1, 2],\n                                                          [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 1, 1],\n                                                          [2, 1, 2], [2, 2, 1], [2, 2, 2], [1, 1, 1], [2, 1, 1], [2, 1, 2],\n                                                          [1, 2, 1], [2, 2, 1], [2, 2, 2],\n                                                          [[2, 1, 1], [1, 1, 2], [2, 2, 1], [1, 1, 1], [2, 2, 1], [2, 2, 2],\n                                                           [2, 1, 2], [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2],\n                                                           [2, 1, 1],\n                                                           [2, 1, 2],\n                                                           [1, 2, 1],\n                                                           [1, 1, 2],\n                                                           [2, 2, 2]]], True)\nassert     is_samepatterns(colors = \"blue\", patterns = [[[1, 2, 3], [1, 1, 3], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 2, 1], [2, 2, 2]],\n                                                         [[2, 1, 1], [2, 1, 2], [2, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 2], [2, 2, 2], \n                                                          [2, 2, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 1], [2, 2, 1], [2, 1, 2],\n                                                          [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 1, 1],\n                                                          [2, 1, 2], [2, 2, 1], [2, 2, 2], [1, 1, 1], [2, 1, 1], [2, 1, 2],\n                                                          [1, 2, 1], [2, 2, 1], [2, 2, 2],\n                                                          [[2, 1, 1], [1, 1, 2], [2, 2, 1], [1, 1, 1], [2, 2, 1], [2, 2, 2],\n                                                           [2, 1, 2], [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2],\n                                                           [2, 1, 1],\n                                                           [2, 1, 2],\n                                                           [1, 2, 1],\n                                                           [1, 1, 2],\n                                                           [2, 2, 2]]], False)\n\nassert     is_samepatterns(colors = \"yellow\", patterns = [[[1, 2, 3], [1, 1, 3], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 2, 1], [2, 2, 2]],\n                                                         [[2, 1, 1], [2, 1, 2], [2, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 2], [2, 2, 2], \n                                                          [2, 2, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 1], [2, 2, 1], [2, 1, 2],\n                                                          [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 1, 1],\n                                                          [2, 1, 2], [2, 2, 1], [2, 2, 2], [1, 1, 1], [2, 1, 1], [2, 1, 2],\n                                                          [1, 2, 1], [2, 2, 1], [2, 2, 2],\n                                                          [[2, 1, 1], [1, 1, 2], [2, 2, 1], [1, 1, 1], [2, 2, 1], [2, 2, 2],\n                                                           [2, 1, 2], [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2],\n                                                           [2, 1, 1],\n                                                           [2, 1, 2],\n                                                           [1, 2, 1],\n                                                           [1, 1, 2],\n                                                           [2, 2, 2]]], True)\nassert     is_samepatterns(colors = \"yellow\", patterns = [[[1, 2, 3], [1, 1, 3], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 2, 1], [2, 2, 2]],\n                                                         [[2, 1, 1], [2, 1, 2], [2, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 2], [2, 2, 2], \n                                                          [2, 2, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 1], [2, 2, 1], [2, 1, 2],\n                                                          [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2], [2, 1, 1],\n                                                          [2, 1, 2], [2, 2, 1], [2, 2, 2], [1, 1, 1], [2, 1, 1], [2, 1, 2],\n                                                          [1, 2, 1], [2, 2, 1], [2, 2, 2],\n                                                          [[2, 1, 1], [1, 1, 2], [2, 2, 1], [1, 1, 1], [2, 2, 1], [2, 2, 2],\n                                                           [2, 1, 2], [1, 2, 1], [1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 2, 2],\n                                                           [2, 1, 1],\n                                                           [2, 1, 2],\n                                                           [1, 2, 1],\n                                                           [1, 1, 2],\n                                                           [2, 2, 2]]], False)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns(colors, patterns) == True, \"Wrong answer!\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns(['D', 'D', 'B'], ['DB', 'DD', 'DB']) == True\nassert     is_samepatterns(['D', 'D', 'B'], ['DDB', 'DDD', 'DBB']) == False\nassert     is_samepatterns(['D', 'D', 'B'], ['DD', 'DDD', 'DB']) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(1,2,3), (4,5), (6,7,8,9)], 3) == [(1,4,6), (2,5,8), (3,7,9)]\nassert     find_tuples([(1,2,3), (4,5), (6,7,8,9)], 7) == [(1,4,6,8,9)]\nassert     find_tuples([(1,2,3), (4,5), (6,7,8,9)], 5) == [(1,4,5,6,7,8,9)]\nassert     find_tuples([(1,2,3), (4,5), (6,7,8,9)], 8) == [(1,4,5,6,7,8,9)]\n\n'''"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(2,2),(2,3),(2,4),(2,5)], 2) == [(2,2),(2,3),(2,4),(2,5)]\nassert     find_tuples([(2,2),(2,3),(2,4),(2,5)], 3) == []\nassert     find_tuples([(2,2),(2,3),(2,4),(2,5)], 5) == []\nassert     find_tuples([(2,2),(2,3),(2,4),(2,5)], 6) == []\nassert     find_tuples([(2,2),(2,3),(2,4),(2,5)], 8) == [(2,2)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(1,2,3,4),(1,2,3,8,9),(1,2,3,4,5)], 3) == [(1,2,3),(1,2,3,4),(1,2,3,4,5)]\nassert     find_tuples([(1,2,3,4),(1,2,3,8,9),(1,2,3,4,5)], 1) == [(1,2,3,4)]\nassert     find_tuples([(1,2,3,4),(1,2,3,8,9),(1,2,3,4,5)], 0) == []\nassert     find_tuples([(1,2,3,4),(1,2,3,8,9),(1,2,3,4,5)], 2) == [(1,2,3,4)]\nassert     find_tuples([(1,2,3,4),(1,2,3,8,9),(1,2,3,4,5)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1, 2), (4, 5), (3, 4), (4, 5)], 2) ==    [(1, 4), (3, 4)]\nassert     find_tuples([(1, 2, 3), (2, 4, 5), (3, 4, 5)], 2) ==    [(1, 3), (2, 4), (3, 5)]\nassert     find_tuples([(1, 2, 3), (2, 4, 5), (3, 4, 5)], 5) ==    [(1, 2, 3, 4, 5)]\nassert     find_tuples([(1, 2, 3, 4), (2, 4, 5, 6), (3, 4, 5, 6)], 2) ==    [(1, 2, 4, 5), (3, 4, 5, 6)]\nassert     find_tuples([(1, 2, 3, 4), (2, 4, 5, 6), (3, 4, 5, 6)], 5) ==    [(1, 2, 3, 4, 5)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_tuples([(1,2),(2,4),(3,6),(4,8)], 2) == [(1,2),(3,6)]\n\nassert\nfind_tuples([(1,2),(2,4),(3,6),(4,8)], 2) == [(1,2)]\n\nassert \nfind_tuples([(1,2),(2,4),(3,6),(4,8)], 4) == [(1,2),(2,4),(3,6),(4,8)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 10)], 2) == \\\n    [(2, 4, 6, 8), (3, 6, 9, 10)]\nassert     find_tuples([(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 10)], 3) == \\\n    [(3, 6, 9, 10)]\nassert     find_tuples([(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 10)], 4) == \\\n    [(1, 2, 3, 4)]\nassert     find_tuples([(1, 2, 3, 4), (2, 4, 6, 8), (3, 6, 9, 10)], 5) == \\\n    []\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(1, 3), (2, 5), (8, 10)], 3) == [(1, 3), (2, 5)]\nassert find_tuples([(1, 3), (2, 5), (8, 10)], 5) == []\nassert find_tuples([(1, 3), (2, 5), (8, 10)], 6) == []\nassert find_tuples([(1, 3), (2, 5), (8, 10)], 7) == [(1, 3)]\nassert find_tuples([(1, 3), (2, 5), (8, 10)], 9) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(3, 5, 8), (6, 8, 10), (9, 5, 10)], 3) == [(3, 5, 8), (6, 8, 10)]\nassert     find_tuples([(3, 5, 8), (6, 8, 10), (9, 5, 10)], 5) == [(3, 5, 8), (6, 8, 10)]\nassert     find_tuples([(3, 5, 8), (6, 8, 10), (9, 5, 10)], 6) == []\nassert     find_tuples([], 3) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples(test_list, 2) == [(3, 2), (5, 4)]\nassert     find_tuples(test_list, 3) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 2) == [(3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 4) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples( [(1, 2), (3, 4), (5, 6), (7, 8)], 3 ) == [(1, 2), (3, 4)]\nassert     find_tuples( [(1, 2), (3, 4), (5, 6), (7, 8)], 4 ) == []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(11) == True, \"Correct answer: True\"\nassert     is_Diff(10) == False, \"Correct answer: False\"\nassert     is_Diff(9) == True, \"Correct answer: True\"\nassert     is_Diff(0) == True, \"Correct answer: True\"\nassert     is_Diff(1) == True, \"Correct answer: True\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Diff(5) == False, 'is_Diff returns True for divisible by 11'\nassert     is_Diff(21) == True, 'is_Diff returns False for not divisible by 11'\nassert     is_Diff(11) == True, 'is_Diff returns False for divisible by 11'\n\ndef is_Mul(n):\n    '''\n    Write a python function to check whether a number is a multiple of 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nif __name__ == \"__main__\":\n    print (\"This program tests the is_Diff function.\")\n\n    # Test 1\n    # Correct result is True\n    is_Diff(0)\n\n    # Test 2\n    # Correct result is False\n    is_Diff(2)\n\n    # Test 3\n    # Correct result is True\n    is_Diff(33)\n\n    # Test 4\n    # Correct result is False\n    is_Diff(44)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"All tests passed\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(10) \nassert     not is_Diff(20) \nassert     is_Diff(11) \nassert     not is_Diff(14) "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Diff(20) == True\nassert     is_Diff(10) == False\n\nprint('\\nAll tests passed!')\nprint('-'*80)"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(1) == False, \"is_Diff(1) should return False\"\nassert     is_Diff(2) == False, \"is_Diff(2) should return False\"\nassert     is_Diff(11) == True, \"is_Diff(11) should return True\"\nassert     is_Diff(12) == True, \"is_Diff(12) should return True\"\nassert     is_Diff(21) == False, \"is_Diff(21) should return False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Diff(123) == False\nassert     is_Diff(101) == True\nassert     is_Diff(11) == True\nassert     is_Diff(22) == False\nassert     is_Diff(0) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Diff(4) == True\nassert     is_Diff(6) == False\nassert     is_Diff(13) == True\nassert     is_Diff(19) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Diff(11) == True, 'Something is wrong with the is_Diff function'\nassert     is_Diff(12) == False, 'Something is wrong with the is_Diff function'\nassert     is_Diff(10) == False, 'Something is wrong with the is_Diff function'\nassert     is_Diff(17) == True, 'Something is wrong with the is_Diff function'\nassert     is_Diff(17) == True, 'Something is wrong with the is_Diff function'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert word_len('abc') == False\nassert word_len('abc12') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert word_len('') == 0\nassert word_len('aba') == 1\nassert word_len('abababababab') == 2\nassert word_len('a') == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len('hello') == True, 'Not a palindrome'\nassert word_len('hello') == False, 'A palindrome'\nassert word_len('abcd') == True, 'Not a palindrome'\nassert word_len('abcd') == False, 'A palindrome'\nassert word_len('abcd') == False, 'Not a palindrome'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not word_len(\"\")\nassert not word_len(\"h\")\nassert not word_len(\"hh\")\nassert not word_len(\"\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     word_len('racecar') == True, 'The length of the word is odd!'\nassert     word_len('ab') == False, 'The length of the word is even!'\nassert     word_len('quis') == True, 'The length of the word is odd!'\nassert     word_len('a') == True, 'The length of the word is odd!'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     word_len('') == False\nassert     word_len('asd') == True\nassert     word_len('fdsa') == True\nassert     word_len('a') == True\nassert     word_len('asdf') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     word_len( 'python') == False\nassert     word_len( 'Python') == False\nassert     word_len('') == True\nassert     word_len(' ') == False\nassert     word_len('  ') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     word_len(\"\") == False\nassert     word_len(\"hello\") == True\nassert     word_len(\"hello world\") == False\nassert     word_len(\"hello world\") == False\nassert     word_len(\"hello world hello world\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(1) == 8\nassert     tetrahedral_number(3) == 27\nassert     tetrahedral_number(10) == 1728\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(1) == 4, '1st tetrahedral number is 4.'\nassert     tetrahedral_number(2) == 12, '2nd tetrahedral number is 12.'\nassert     tetrahedral_number(3) == 20, '3rd tetrahedral number is 20.'\nassert     tetrahedral_number(4) == 24, '4th tetrahedral number is 24.'\nassert     tetrahedral_number(5) == 28, '5th tetrahedral number is 28.'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 12\nassert     tetrahedral_number(4) == 20\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Passed!\")"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 3\nassert     tetrahedral_number(3) == 4\nassert     tetrahedral_number(4) == 8\nassert     tetrahedral_number(5) == 15\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 7\nassert     tetrahedral_number(4) == 8\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntetrahedral_number(2) == 10, \"Wrong answer\"\nassert \ntetrahedral_number(1) == 4, \"Wrong answer\"\nassert \ntetrahedral_number(0) == 1, \"Wrong answer\"\nassert \ntetrahedral_number(5) == 29, \"Wrong answer\"\nassert \ntetrahedral_number(20) == 4145, \"Wrong answer\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(1) == 4/3*math.pi, \"Wrong volume\"\nassert     volume_sphere(0) == 0, \"Wrong volume\"\nassert     volume_sphere(2.1) == 4.1887435871075037, \"Wrong volume\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(1) == 4/3*math.pi*(3/4)*pow(r,3)\nassert     volume_sphere(0) == 0\nassert     volume_sphere(1.2) == 0\nassert     volume_sphere(-2.4) == 0\nassert     volume_sphere(5) == 58.265386771875\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(1) == math.pi*pow(r,2), 'Not right'\nassert volume_sphere(0) == 0, 'Not right'\nassert volume_sphere(10) == 12159.929055318408, 'Not right'\nassert volume_sphere(100) == 6283.0758525717636, 'Not right'\nassert volume_sphere(-10) == 0, 'Not right'\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_sphere(1) == 4 / 3 * math.pi * 1**3\nassert     volume_sphere(2) == 4 / 3 * math.pi * 2**3\nassert     volume_sphere(3) == 4 / 3 * math.pi * 3**3\nassert     volume_sphere(4) == 4 / 3 * math.pi * 4**3\nassert     volume_sphere(0) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(1) == 4/3*3.14*r**3, \"Wrong\"\nassert     volume_sphere(2) == 4/3*3.14*r**3, \"Wrong\"\nassert     volume_sphere(3) == 4/3*3.14*r**3, \"Wrong\"\nassert     volume_sphere(4) == 4/3*3.14*r**3, \"Wrong\"\nassert     volume_sphere(5) == 4/3*3.14*r**3, \"Wrong\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_sphere(1) == math.pi * math.pow(1,2) / 2\nassert     volume_sphere(2) == 4 * math.pi * math.pow(2,2) / 3\nassert     volume_sphere(3) == 4/3 * math.pi * math.pow(3,2)\nassert     volume_sphere(4) == 4/3 * math.pi * math.pow(4,2)\nassert     volume_sphere(5) == 4/3 * math.pi * math.pow(5,2)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert volume_sphere(3) == 4.0\nassert volume_sphere(1) == 4.0\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert volume_sphere(3.1) == 75.64890\nassert volume_sphere(0.5) == 125.1296\nassert volume_sphere(0) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_sphere(3) == math.pi * (3 ** 3) / 4, 'Wrong'\nassert     volume_sphere(0.5) == math.pi * (0.5 ** 3) / 4, 'Wrong'\nassert     volume_sphere(10) == volume_sphere(20), 'Wrong'\n\ndef distance_on_the_sphere(r):\n    '''\n    Write a function to find the distance from the origin to a point on a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char('abcdefghij') == 'd'\nassert     get_Char('JASDghijkl') == 'D'\nassert     get_Char('AaB') == 'A'\nprint(\"You are passed\")\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"hello\")==43, \"failed\"\nassert     get_Char(\"abd\")==76, \"failed\"\nassert     get_Char(\"siddhi\")==103, \"failed\"\nassert     get_Char(\"tari\")==129, \"failed\"\n\nprint(\"Passed\")\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"\") == \"\", \"Input error 1\"\nassert     get_Char(\"A\") == \"\", \"Input error 2\"\nassert     get_Char(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"\", \"Input error 3\"\nassert     get_Char(\"abcdefghijklmnopqrstuvwxyz\") == \"\", \"Input error 4\"\nassert     get_Char(\"a\") == \"\", \"Input error 5\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char('Vinayak') == 'V','get_Char(Vinayak) is incorrect'\nassert     get_Char('Tushar') == 'T','get_Char(Tushar) is incorrect'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char(    \"Welcome\") == (61 + 96 + 67 + 82 + 104 + 84) % 26 == 60, \"Test Case Failed\"\nassert     get_Char(    \"if\") == (105 + 97 + 98 + 100) % 26 == 55, \"Test Case Failed\"\nassert     get_Char(    \"yow\") == (117 + 101 + 108 + 111) % 26 == 46, \"Test Case Failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char('abc') == 'a'\nassert     get_Char('hello') == 'h'\nassert     get_Char('qwerty') == 'q'\nassert     get_Char('pom') == 'o'\nassert     get_Char('zxc') == 'e'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char(\"A\") == 65, \"Test failed\"\nassert     get_Char(\"B\") == 66, \"Test failed\"\nassert     get_Char(\"C\") == 67, \"Test failed\"\nassert     get_Char(\"D\") == 68, \"Test failed\"\nassert     get_Char(\"E\") == 69, \"Test failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(\"Ravi\") == 60, \"Wrong output\"\nassert     get_Char(\"Z\") == 65, \"Wrong output\"\nassert     get_Char(\"a\") == 97, \"Wrong output\"\nassert     get_Char(\"b\") == 98, \"Wrong output\"\nassert     get_Char(\"c\") == 99, \"Wrong output\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char('a') == 1\nassert get_Char('bb') == 33\nassert get_Char('ccc') == 27\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 2\nassert     sequence(4) == 3\nassert     sequence(5) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequence(1) == 1\nassert sequence(2) == 1\nassert sequence(3) == 1\nassert sequence(4) == 2\nassert sequence(5) == 2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nsequence(1) == 1\nsequence(2) == 3\nsequence(3) == 5\nsequence(4) == 7\nsequence(5) == 11\nsequence(6) == 15\nsequence(7) == 21\nsequence(8) == 37\nsequence(9) == 61\nsequence(10) == 109\nsequence(11) == 145\nsequence(12) == 337\nsequence(13) == 613\nsequence(14) == 1213\nsequence(15) == 1613\nsequence(16) == 2023\nsequence(17) == 2323\nsequence(18) == 2413\nsequence(19) == 2613\nsequence(20) == 3113\nsequence(21) == 3113\nsequence(22) == 3113\nsequence(23) == 3113\nsequence(24) == 3113\nsequence(25) == 3113\nsequence(26) == 3113\nsequence(27) == 3113\nsequence(28) == 3113\nsequence(29) == 3113\nsequence(30) == 3113\nsequence(31) == 3113\nsequence(32) == 3113\nsequence(33) == 3113\nsequence(34) == 3113\nsequence(35) == 3113\nsequence(36) == 3113\nsequence(37) == 3113\nsequence(38) == 3113\nsequence(39) == 3113\nsequence(40) == 3113\nsequence(41) == 3113\nsequence(42) == 3113\nsequence(43) == 3113\nsequence(44) == 3113\nsequence(45) == 3113\nsequence(46) == 3113\nsequence(47) == 3113\nsequence(48) == 3113\nsequence(49) == 3113\nsequence(50) == 3113\nsequence(51) == 3113\nsequence(52) == 3113\nsequence(53) == 3113\nsequence(54) == 3113\nsequence(55) == 3113\nsequence(56) == 3113\nsequence(57) == 3113\nsequence(58) == 3113\nsequence(59) == 3113\nsequence(60) == 3113\nsequence(61) == 3113\nsequence(62) == 3113\nsequence(63) == 3113\nsequence(64) == 3113\nsequence(65) == 3113\nsequence(66) == 3113\nsequence(67) == 3113\nsequence(68) == 3113\nsequence(69) == 3113\nsequence(70) == 3113\nsequence(71) == 3113\nsequence(72) == 3113\nsequence(73) == 3113\nsequence(74) == 3113\nsequence(75) == 3113\nsequence(76) == 3113\nsequence(77) == 3113\nsequence(78) == 3113\nsequence(79) == 3113\nsequence(80) == 3113\nsequence(81) == 3113\nsequence(82) == 3113\nsequence(83) == 3113\nsequence(84) == 3113\nsequence(85) == 3113\nsequence(86) == 3113\nsequence(87) == 3113\nsequence(88) == 3113\nsequence(89) == 3113\nsequence(90) == 3113\nsequence(91) == 3113\nsequence(92) == 3113\nsequence(93) == 3113\nsequence(94) == 3113\nsequence(95) == 3113\nsequence(96) == 3113\nsequence(97) == 3113\nsequence(98) == 3113\nsequence(99) == 3113\nsequence(100) == 3113\nsequence(101) == 3113\nsequence(102) == 3113\nsequence(103) == 3113\nsequence(104) == 3113\nsequence(105) == 3113\nsequence(106) == 3113\nsequence(107) == 3113\nsequence(108) == 3113\nsequence(109) == 3113\nsequence(110) == 3113\nsequence(111) == 3113\nsequence(112) == 3113\nsequence(113) == 3113\nsequence(114) == 3113\nsequence(115) == 3113\nsequence(116) == 3113\nsequence(117) == 3113\nsequence(118) == 3113\nsequence(119) == 3113\nsequence(120) == 3113\nsequence(121) == 3113\nsequence(122) == 3113\nsequence(123) == 3113\nsequence(124) == 3113\nsequence(125) == 3113\nsequence(126) == 3113\nsequence(127) == 3113\nsequence(128) == 3113\nsequence(129) == 3113\nsequence(130) == 3113\nsequence(131) == 3113\nsequence(132) == 3113\nsequence(133) == 3113\nsequence(134) == 3113\nsequence(135) == 3113\nsequence(136) == 3113\nsequence(137) == 3113\nsequence(138) == 3113\nsequence(139) == 3113\nsequence(140) == 3113\nsequence(141) == 3113\nsequence(142) == 3113\nsequence(143) == 3113\nsequence(144) == 3113\nsequence(145) == 3113\nsequence(146) == 3113\nsequence(147) == 3113\nsequence(148) == 3113\nsequence(149) == 3113\nsequence(150) == 3113\nsequence(151) == 3113\nsequence(152) == 3113\nsequence(153) == 3113\nsequence(154) == 3113\nsequence(155) == 3113\nsequence(156) == 3113\nsequence(157) == 3113\nsequence(158) == 3113\nsequence(159) == 3113\nsequence(160) == 3113\nsequence(161) == 3113\nsequence(162) == 3113\nsequence(163) == 3113\nsequence(164) == 3113\nsequence(165) == 3113\nsequence(166) == 3113\nsequence(167) == 3113\nsequence(168) == 3113\nsequence(169) == 3113\nsequence(170) == 3113\nsequence(171) == 3113\nsequence(172) == 3113\nsequence(173) == 3113\nsequence(174) == 3113\nsequence(175) == 3113\nsequence(176) == 3113\nsequence(177) == 3113\nsequence(178) == 3113\nsequence(179) == 3113\nsequence(180) == 3113\nsequence(181) == 3113\nsequence(182) == 3113\nsequence(183) == 3113\nsequence(184) == 3113\nsequence(185) == 3113\nsequence(186) == 3113\nsequence(187) == 3113\nsequence(188) == 3113\nsequence(189) == 3113\nsequence(190) == 3113\nsequence(191) == 3113\nsequence(192) == 3113\nsequence(193) == 3113\nsequence(194) == 3113\nsequence(195) == 3113\nsequence(196) == 3113\nsequence(197) == 3113\nsequence(198) == 3113\nsequence(199) == 3113\nsequence(200) == 3113\nsequence(201) == 3113\nsequence(202) == 3113\nsequence(203) == 3113\nsequence(204) == 3113\nsequence(205) == 3113\nsequence(206) == 3113\nsequence(207) == 3113\nsequence(208) == 3113\nsequence(209) == 3113\nsequence(210) == 3113\nsequence(211) == 3113\nsequence(212) == 3113\nsequence(213) == 3113\nsequence(214) == 3113\nsequence(215) == 3113\nsequence(216) == 3113\nsequence(217) == 3113\nsequence(218) == 3113\nsequence(219) == 3113\nsequence(220) == 3113\nsequence(221) == 3113\nsequence(222) == 3113\nsequence(223) == 3113\nsequence(224) == 3113\nsequence(225) == 3113\nsequence(226) == 3113\nsequence(227) == 3113\nsequence(228) == 3113\nsequence(229) == 3113\nsequence(230) == 3113\nsequence(231) == 3113\nsequence(232) == 3113\nsequence(233) == 3113\nsequence(234) == 3113\nsequence(235) == 3113\nsequence(236) == 3113\nsequence(237) == 3113\nsequence(238) == 3113\nsequence(239) == 3113\nsequence(240) == 3113\nsequence(241) == 3113\nsequence(242) == 3113\nsequence(243) == 3113\nsequence(244) == 3113\nsequence(245) == 3113\nsequence(246) == 3113\nsequence(247) == 3113\nsequence(248) == 3113\nsequence(249) == 3113\nsequence(250) == 3113\nsequence(251) == 3113\nsequence(25"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    surfacearea_sphere(1) == 4 * math.pi\n\nassert \n    surfacearea_sphere(3) == 12 * math.pi\n\nassert \n    surfacearea_sphere(5) == 30 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(1) == 4\nassert     surfacearea_sphere(2) == 56\nassert     surfacearea_sphere(3) == 194\n\nprint(\"Correct\")\n\ndef volume_cylinder(height,radius):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(2) == 4 * math.pi * 2\nassert     surfacearea_sphere(3) == 4 * math.pi * 3\nassert     surfacearea_sphere(4) == 4 * math.pi * 4\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1) == 4\nassert     surfacearea_sphere(2) == 78\nassert     surfacearea_sphere(3) == 216\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsurfacearea_sphere(2) == math.pi*4*2**2\nassert surfacearea_sphere(3) == math.pi*4*3**2\nassert surfacearea_sphere(5) == math.pi*4*5**2\nassert surfacearea_sphere(10) == math.pi*4*10**2\nprint('You have passed all the tests')\nprint('Congratulations, you passed the unit tests')\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsurfacearea_sphere(1) == 4 * math.pi\nassert surfacearea_sphere(2) == 16 * math.pi\nassert surfacearea_sphere(3) == 20 * math.pi\nassert surfacearea_sphere(4) == 24 * math.pi\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == 0\nassert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == 1\nassert     centered_hexagonal_number(4) == 2\nassert     centered_hexagonal_number(5) == 3\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncentered_hexagonal_number(1) == 1\nassert \ncentered_hexagonal_number(2) == 3\nassert \ncentered_hexagonal_number(3) == 5\nassert \ncentered_hexagonal_number(4) == 7\nassert \ncentered_hexagonal_number(5) == 11\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(1) == 1, \"Wrong centered_hexagonal_number(1)\"\nassert     centered_hexagonal_number(4) == 2, \"Wrong centered_hexagonal_number(4)\"\nassert     centered_hexagonal_number(7) == 3, \"Wrong centered_hexagonal_number(7)\"\nassert     centered_hexagonal_number(12) == 9, \"Wrong centered_hexagonal_number(12)\"\nassert     centered_hexagonal_number(20) == 14, \"Wrong centered_hexagonal_number(20)\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 5\nassert     centered_hexagonal_number(4) == 7\nassert     centered_hexagonal_number(5) == 11\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({\"a\":1,\"b\":2,\"c\":3}, {\"a\":2,\"b\":3,\"d\":4}, {\"a\":1,\"b\":2,\"c\":3,\"e\":4}) == {\"a\": 1, \"b\": 3, \"c\": 3, \"d\": 4, \"e\": 4}\n\nassert     merge_dictionaries_three({\"a\":1,\"b\":2,\"c\":3}, {\"a\":2,\"b\":3,\"d\":4}, {\"a\":1,\"b\":2,\"c\":3,\"e\":4,\"f\":5}) == {\"a\": 1, \"b\": 3, \"c\": 3, \"d\": 4, \"e\": 4, \"f\": 5}\n\nassert     merge_dictionaries_three({\"a\":1,\"b\":2,\"c\":3}, {\"a\":2,\"b\":3,\"d\":4}, {\"a\":1,\"b\":2,\"c\":3,\"e\":4,\"f\":5,\"g\":6}) == {\"a\": 1, \"b\": 3, \"c\": 3, \"d\": 4, \"e\": 4, \"f\": 5, \"g\": 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert merge_dictionaries_three({1: 10, 2: 20, 3: 30},{2: 40, 4: 50, 5: 60}, {3: 70, 6: 80, 7: 90}) == {1: 10, 2: 40, 3: 70, 4: 50, 5: 60, 6: 80, 7: 90}\nassert merge_dictionaries_three({\"1\": 10, \"2\": 20}, {\"2\": 40, \"4\": 50, \"5\": 60}, {\"3\": 70, \"6\": 80, \"7\": 90}) == {\"1\": 10, \"2\": 40, \"3\": 70, \"4\": 50, \"5\": 60, \"6\": 80, \"7\": 90}\n\n\ndef merge_dictionaries_two(dict1, dict2):\n    \"\"\"\n    Merge two dictionaries into one. Return the result.\n\n    Parameters:\n        dict1 (dict): first dictionary\n        dict2 (dict): second dictionary\n    \n    Return:\n        (dict): a dictionary which contains the union of the two dictionaries\n    \"\"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmerge_dictionaries_three({\"a\": 2, \"b\": 2}, {\"c\": 2, \"d\": 2}, {\"e\": 2, \"f\": 2}) == {\"a\": 2, \"b\": 2, \"c\": 2, \"d\": 2, \"e\": 2, \"f\": 2}\nassert not merge_dictionaries_three({\"a\": 2}, {\"c\": 2, \"d\": 2}, {\"e\": 2, \"f\": 2}) == {\"a\": 2, \"c\": 2, \"d\": 2, \"e\": 2, \"f\": 2}\nassert not merge_dictionaries_three({\"a\": 2}, {\"c\": 2, \"d\": 2, \"e\": 2}, {\"f\": 2}) == {\"a\": 2, \"c\": 2, \"d\": 2, \"e\": 2, \"f\": 2}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({1:10,2:20,3:30},{4:40,5:50,6:60},{7:70,8:80,9:90}) == {1:10,2:20,3:30,4:40,5:50,6:60,7:70,8:80,9:90}\n\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries. The merged dictionary's key set should not be a subset of the \n    dictionary keys or it would not be the correct dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({1:10, 2:20, 3:30}, {4:40, 5:50, 6:60}, {7:70, 8:80, 9:90}) == {1:10, 2:20, 3:30, 4:40, 5:50, 6:60, 7:70, 8:80, 9:90}\nassert merge_dictionaries_three({1:10, 2:20, 3:30}, {4:40, 5:50, 6:60}, {7:70, 8:80, 9:90}, {1:50, 2:60, 3:70}) == {1:50, 2:60, 3:70, 4:40, 5:50, 6:60, 7:70, 8:80, 9:90}\n\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries. The keys for the merged dictionary should be sorted.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'd': 4}, {'b': 1, 'c': 3, 'd': 4}) == {'a': 1, 'b': 1, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\nassert     merge_dictionaries_three({'a': 1, 'c': 3}, {'b': 2, 'c': 3}, {'b': 2, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'c': 3}, {'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'c': 3}, {'b': 2}, {'b': 2, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({\"A\": 1, \"B\": 2}, {\"C\": 3, \"D\": 4}, {\"E\": 5, \"F\": 6}) == {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6}\nassert     merge_dictionaries_three({\"A\": 1}, {\"C\": 3, \"D\": 4}, {\"E\": 5, \"F\": 6}) == {\"A\": 1, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6}\nassert     merge_dictionaries_three({\"A\": 1, \"B\": 2}, {\"C\": 3}, {\"D\": 4, \"E\": 5, \"F\": 6}) == {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6}\nassert     merge_dictionaries_three({\"A\": 1}, {\"B\": 2, \"C\": 3}, {\"D\": 4, \"E\": 5, \"F\": 6}) == {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6}\nassert     merge_dictionaries_three({\"A\": 1}, {\"B\": 2}, {\"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6}) == {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({1: 'a', 3: 'c'}, {2: 'b', 5: 'e'}, {3: 'f', 6: 'g'}) == {1: 'a', 2: 'b', 3: 'f', 5: 'e', 6: 'g'}\nassert merge_dictionaries_three({1: 'a', 2: 'b', 3: 'c'}, {4: 'd', 5: 'e'}, {6: 'f', 7: 'g'}) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g'}\nassert merge_dictionaries_three({1: 'a', 2: 'b', 3: 'c'}, {4: 'd', 5: 'e'}, {6: 'f', 7: 'g', 8: 'h'}) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h'}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1]) == {1:1}\nassert     freq_count([1,1]) == {1:2}\nassert     freq_count([1,2,1]) == {1:2, 2:1}\nassert     freq_count([1,2,2,1]) == {1:2, 2:2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef freq_count2(list1):\n    '''\n    Given a list, return a dictionary of the count of each element.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([1,1,1,2,2,2,2]) == {1:5, 2:4}\nassert     freq_count([1,1,1,1,2,2,2,2]) == {1:4, 2:3}\nassert     freq_count([1,1,1,1,1,1,1,1]) == {1:5}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8]) == \n    {1: 3, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\nassert    freq_count([1, 2, 3]) == \n    {1: 3, 2: 1, 3: 1}\nassert     freq_count([]) == {}\n\ndef freq_count1(s):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     freq_count([1,1,1,2,2,2,3,3,3,4]) == {1:5, 2:3, 3:4, 4:1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n'''\n'''\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    c = {}\n    for i in list1:\n        if i in c:\n            c[i] += 1\n        else:\n            c[i] = 1\n    return c\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([2,2,3,4,5,5,6,6,7,7,7,8]) == collections.Counter({2:4, 3:3, 4:2, 5:2, 6:2, 7:2, 8:1})\nassert freq_count([2,2,3,4,5,5,6,6,7,7,7,8,2,3,4]) == collections.Counter({2:6, 3:5, 4:4, 5:3, 6:2, 7:2, 8:1})\n\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Counter gives dictionary functionality\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count([\"apple\", \"cherry\", \"apple\", \"cherry\", \"cherry\"]) == {\"apple\": 3, \"cherry\": 2}\nassert     freq_count([\"apple\", \"cherry\", \"apple\", \"cherry\", \"apple\", \"cherry\"]) == {\"apple\": 3, \"cherry\": 2}\nassert     freq_count([\"apple\", \"apple\", \"apple\"]) == {\"apple\": 3}\nassert     freq_count([\"apple\"]) == {\"apple\": 1}\nassert     freq_count([]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_frequency_count(list1):\n    '''\n    Write a function to check whether the frequency of all the elements in a list is the same or not.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef freq_count1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # initialising counter\n    dct = {}\n    \n    # traversing through list\n    for i in range(len(list1)):\n        # adding the element with its frequency\n        dct[list1[i]] = dct.get(list1[i], 0) + 1\n    \n    # returning the dictionary\n    return dct"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert closest_num(10) == 9\nassert closest_num(100) == 99\nassert closest_num(150) == 139\nassert closest_num(150) == 139\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_num(3) == 1\nassert     closest_num(5) == 2\nassert     closest_num(10) == 2\nassert     closest_num(15) == 2\nassert     closest_num(20) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_num(1) == 0, 'Wrong answer'\nassert     closest_num(3) == 2, 'Wrong answer'\nassert     closest_num(6) == 3, 'Wrong answer'\nassert     closest_num(9) == 4, 'Wrong answer'\nassert     closest_num(10000000) == 0, 'Wrong answer'\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 1:\n        return 1\n    i = 1\n    while i <= n:\n        j = n\n        while j >= i:\n            if j - i == 1:\n                return i\n            else:\n                j -= 1\n        i += 1"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert closest_num(1) == -1\nassert closest_num(3) == 1\nassert closest_num(5) == 2\nassert closest_num(4) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef closest_num2(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_num(5) == 3\nassert     closest_num(15) == 10\nassert     closest_num(1) == 0\nassert     closest_num(11) == 10\nassert     closest_num(13) == 11\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log([]) == 0, 'empty list'\nassert     len_log([1, 2, 3, 'a', 'ab']) == 6, 'different length'\nassert     len_log([]) == 0, 'empty string'\nassert     len_log([]) == 0, 'empty list'\nassert     len_log([1, 2, 'a', 'ab']) == 4, 'different length'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([]) == 0, \"Wrong output\"\nassert len_log([\"hello\",\"world\",\"hello\"]) == 5, \"Wrong output\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([]) == 0\nassert     len_log(['']) == 0\nassert     len_log([1,2,3]) == 3\nassert     len_log(['a', 'b', 'c']) == 3\nassert     len_log([\n    'This', \n    'is', \n    'a', \n    'str', \n    'of', \n    'practice', \n    ]) == 10\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log([\"the\", \"quick\", \"brown\", \"fox\"]) == 5\nassert len_log([\"cat\", \"an\", \"cat\"]) == 3\nassert len_log([\"hello\", \"b\", \"c\"]) == 3\nassert len_log([]) == 0\nassert len_log([\"how\", \"are\", \"you\"]) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert len_log(['F', 'I', 'G', 'E']) == 4\nassert len_log(['I', 'L', 'O', 'K']) == 5\nassert len_log(['D', 'A', 'H', 'I']) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef delete_words(string, delete_words):\n    '''\n    Write a python function to delete a set of words from the given string and return the string.\n    \n    A word is defined as a sequence of non-space characters.\n    \n    Note:\n    The function should also return the length of the deleted string and the number of words deleted.\n    \n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef len_log2(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log([]) == 0, \"The function should return 0 for empty lists.\"\nassert     len_log([]) == 0, \"The function should return 0 for empty lists.\"\nassert     len_log([\"\"]) == 0, \"The function should return 0 for empty lists.\"\nassert     len_log([\"x\"]) == 1, \"The function should return 1 for 1 word.\"\nassert     len_log([\"x\", \"y\", \"z\"]) == 3, \"The function should return 3 for three words.\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    # function call\n    len_log([])\n    \n    len_log([1, 2, 3])\n    \n    len_log([1, 2, 3, 4])\n    \n    len_log([1, 2, 3, 4, 4])\n    \n    len_log([4, 4, 4, 4, 4, 4, 4, 4, 4])\n    \n    len_log([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring(str1 = 'abababab', sub_str = 'ab') == True\nassert     find_substring(str1 = 'abababab', sub_str = 'abab') == False\nassert     find_substring(str1 = 'abababab', sub_str = 'ab') == True\nassert     find_substring(str1 = 'abababab', sub_str = 'a') == True\nassert     find_substring(str1 = 'abababab', sub_str = 'b') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring('geeksforgeeks', 'geeks') == True\nassert     find_substring('geeksforgeeks', 'geek') == False\nassert     find_substring('geeksforgeeks', 'geekss') == False\nassert     find_substring('geeksforgeeks', 'g') == False\nassert     find_substring('geeksforgeeks', 'ge') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring(    'aabaaba',     'aaba') == True, 'incorrect'\nassert     find_substring(    'aabaaba',     'baa') == True, 'incorrect'\nassert     find_substring(    'aabaaba',     'a') == False, 'incorrect'\nassert     find_substring(    'aabaaba',     'aaba') == False, 'incorrect'\nassert     find_substring(    'aabaaba',     'aabaaba') == True, 'incorrect'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_substring(\n    \"This is a string example\",\n    \"string\"\n) == True\n\nassert\nfind_substring(\n    \"This is a string example\",\n    \"exam\"\n) == False\n\nassert \nfind_substring(\n    \"This is a string example\",\n    \"exam1\"\n) == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_substring(\"hello\",\"ll\") == True, \"case 1\"\nassert     find_substring(\"hello\",\"hell\") == False, \"case 2\"\nassert     find_substring(\"aa\",\"a\") == True, \"case 3\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring('helloworld', 'hello') == True, 'helloworld should be present in the list'\nassert     find_substring('helloworld', 'world') == False, 'helloworld should not be present in the list'\nassert     find_substring('hihello', 'hello') == False, 'hihello should not be present in the list'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring('The quick brown fox jumps over the lazy dog.', 'fox') == True\nassert     find_substring('The quick brown fox jumps over the lazy dog.', 'dog') == False\nassert     find_substring('The quick brown fox jumps over the lazy dog.', 'cat') == False\nassert     find_substring('The quick brown fox jumps over the lazy dog.', 'dog.') == True\nassert     find_substring('The quick brown fox jumps over the lazy dog.', 'dog?') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring(\"abc\", \"abc\") == True\nassert     find_substring(\"abc\", \"def\") == False\nassert     find_substring(\"aac\", \"abc\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring(\"abc\",\"abc\") == True\nassert     find_substring(\"bca\",\"abc\") == True\nassert     find_substring(\"bc\",\"abc\") == True\nassert     find_substring(\"c\",\"abc\") == False\nassert     find_substring(\"\",\"abc\") == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Running some tests\")\n    assert is_undulating(0) == True\n    assert is_undulating(1) == False\n    assert is_undulating(2) == True\n    "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_hundulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_undulating(-1)\nassert not is_undulating(1)\nassert is_undulating(6)\nassert not is_undulating(20)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(11) == True\nassert     is_undulating(12) == False\nassert     is_undulating(13) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_undulating(4) == True, \"is_undulating should return True for undulating numbers\"\nassert is_undulating(8) == False, \"is_undulating should return False for undulating numbers\"\nassert is_undulating(3) == False, \"is_undulating should return False for undulating numbers\"\nassert is_undulating(6) == True, \"is_undulating should return True for undulating numbers\"\nassert is_undulating(5) == False, \"is_undulating should return False for undulating numbers\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_undulating(2) == False\nassert     is_undulating(5) == False\nassert     is_undulating(8) == True\nassert     is_undulating(36) == False\nassert     is_undulating(40) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(2,5) == 32\nassert     power(2,2) == 4\nassert     power(4,3) == 64\nassert     power(2,3) == 8\nassert     power(2,1) == 2\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(a=2, b=3) == 8\nassert     power(a=3, b=3) == 27\nassert     power(a=2, b=5) == 32\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (1 == power(1, 0) ), 'First Input should be 1'\nassert     (0 == power(0, 0) ), 'Second Input should be 0'\nassert     (0 == power(0, 1) ), 'Third Input should be 0'\nassert     (1 == power(2, 1) ), 'Fourth Input should be 2'\nassert     (0 == power(2, -1) ), 'Fifth Input should be 0'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power(10,3) == 1000\nassert     power(2,3) == 8\nassert     power(3,2) == 9\nassert     power(2,0) == 1\nassert     power(0,3) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(2,4) == 16, \"error 1\"\nassert     power(8,2) == 16, \"error 2\"\n\nprint(\"  PASSED :\")\nprint(\"\")\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(2,3) == 8\nassert     power(3,2) == 3\nassert     power(2,0) == 1\nassert     power(2,-2) == 1\nassert     power(0,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(2,1) == 2\nassert     power(2,2) == 4\nassert     power(2,3) == 8\nassert     power(3,1) == 3\nassert     power(3,2) == 9\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,2) == 4\nassert     power(2,3) == 8\nassert     power(3,3) == 27\nassert     power(3,4) == 81\nassert     power(3,5) == 243\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    power(2,2) == 4\n    \n    power(2,1) == 2\n    \n    power(2,0) == 1\n    \n    power(0,2) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power(1, 2) == 1\nassert     power(2, 2) == 4\nassert     power(3, 2) == 9\nassert     power(4, 2) == 16\nassert     power(2, 4) == 8\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([('a', 1), ('b', 2), ('c', 4), ('d', 6)]) == ('d', 6)\nassert     index_minimum([('a', 1), ('a', 4), ('b', 2), ('c', 4), ('d', 6)]) == ('d', 6)\nassert     index_minimum([('a', 2), ('a', 4), ('a', 6), ('b', 2), ('c', 4), ('d', 6)]) == ('d', 6)\nassert     index_minimum([('a', 2), ('a', 4), ('a', 6), ('b', 2), ('c', 4), ('c', 6)]) == ('c', 6)\nassert     index_minimum([('a', 2), ('a', 4), ('a', 6), ('b', 2), ('c', 4), ('d', 6)]) == ('a', 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the biggest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_minimum([(1,2),(2,4),(3,1),(4,1),(5,10)]) == (1,1)\nassert     index_minimum([(1,2),(2,4),(3,1),(4,1),(5,10)]) == (1,1)\nassert     index_minimum([(1,2),(2,4),(3,1),(4,1),(5,10)]) == (1,1)\nassert     index_minimum([(1,2),(2,4),(3,1),(4,1),(5,10)]) == (1,1)\nassert     index_minimum([(1,2),(2,4),(3,1),(4,1),(5,10)]) == (1,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_minimum([(2,2),(2,1),(3,1),(1,2)]) == (2,2)\nassert     index_minimum([(2,2),(2,1),(3,1),(1,2)]) == (2,1)\nassert     index_minimum([(2,2),(2,1),(3,1),(1,2)]) == (2,1)\nassert     index_minimum([(2,2),(2,1),(3,1),(1,2)]) == (2,1)\nassert     index_minimum([(2,2),(2,1),(3,1),(1,2)]) == (2,2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum([(1,1),(3,4),(1,2),(4,1),(5,3)]) == (1,1)\nassert     index_minimum([(2,10),(3,4),(1,2),(4,1),(5,3)]) == (1,2)\nassert     index_minimum([(2,10),(3,10),(1,2),(4,1),(5,3)]) == (1,2)\nassert     index_minimum([(1,1),(3,4),(1,2),(4,1),(5,3)]) == (1,1)\nassert     index_minimum([(1,1),(3,4),(1,2),(4,1),(5,3)]) == (1,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_minimum([('a', 2), ('b', 1), ('c', 3)]) == ('b', 1)\nassert     index_minimum([('a', 2), ('c', 3), ('b', 1)]) == ('c', 3)\nassert     index_minimum([('c', 3), ('b', 1), ('a', 2)]) == ('c', 3)\nassert     index_minimum([('a', 2), ('b', 1), ('a', 2)]) == ('a', 2)\nassert     index_minimum([('a', 2), ('b', 1), ('a', 2), ('b', 1)]) == ('a', 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([('a', 5), ('b', 1), ('c', 1)]) == ('a', 1)\nassert     index_minimum([('a', 5), ('b', 4), ('c', 1)]) == ('a', 5)\nassert     index_minimum([('b', 4), ('a', 5), ('c', 1)]) == ('b', 4)\nassert     index_minimum([('b', 4), ('a', 4), ('c', 1)]) == ('b', 4)\nassert     index_minimum([('c', 1), ('b', 4), ('a', 5)]) == ('c', 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_minimum([(1,2),(2,3),(3,4),(1,1),(4,4),(4,3),(3,1),(3,2)]) == (1,1)\nassert     index_minimum([(1,2),(3,1),(1,1)]) == (1,1)\nassert     index_minimum([(1,2),(3,1),(1,2)]) == (1,2)\nassert     index_minimum([(1,2),(1,1),(1,1)]) == (1,1)\nassert     index_minimum([(1,2),(1,1),(3,1)]) == (1,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert index_minimum([(1, 2), (2, 4), (3, 3)]) == (1, 3)\nassert index_minimum([(1, 2), (1, 3), (1, 4)]) == (1, 1)\nassert index_minimum([(1, 2), (2, 4)]) == (1, 2)\nassert index_minimum([(1, 2), (1, 3)]) == (1, 1)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nFind_Min_Length([[1,2],[2,3],[3,4]]) == 3, \"Expected 3, but got %s\" %Find_Min_Length([[1,2],[2,3],[3,4]])\nassert \nFind_Min_Length([[1,2],[2,3],[3,4,5],[4,5,6]]) == 2, \"Expected 2, but got %s\" %Find_Min_Length([[1,2],[2,3],[3,4,5],[4,5,6]])\n\n\n'''\nGiven a list of strings, write a python function to check if all the strings\nin the list are different.\n'''\ndef all_strings_are_different(lst):  \n    '''\n    Write a python function to check if all the strings in a list are different.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef Find_Sum(lst):\n    '''\n    Write a python function to find the sum of elements in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length(lst) == 2, \"Find_Min_Length should return the length of the smallest list in a list of lists\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[1,2,3],[2,3,4]]) == 3\nassert     Find_Min_Length([[1,2,3],[3,4,5]]) == 2\nassert     Find_Min_Length([[1,2,3]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1,2,3,4],[2,3,4,5,6]]) == 1\nassert     Find_Min_Length([[1,2,3,4],[2,3,4,5]]) == 4\nassert     Find_Min_Length([[1,2],[3,4],[5,6]]) == 2\nassert     Find_Min_Length([[1,2,3,4],[2,3,4,5,6],[3,4,5,6,7,8,9]]) == 2\nassert     Find_Min_Length([[1,2,3,4],[2,3,4,5,6]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[],[]]) == 0\nassert     Find_Min_Length([[1, 2, 3, 4, 5],\n                           [1, 2, 3, 4, 5],\n                           [1, 2, 3, 4, 5],\n                           [1, 2, 3, 4, 5],\n                           [1, 2, 3, 4, 5]]) == 5\nassert     Find_Min_Length([[1, 2, 3],\n                           [1, 2, 3],\n                           [1, 2, 3],\n                           [1, 2, 3],\n                           [1, 2, 3]]) == 3"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[4,3,2,4,2],\n                        [5,2,3,4,1],\n                        [1,3,2,4,5]]) == 2, 'Find_Min_Length should return 2'\nassert Find_Min_Length([[4,3,2,4,2],\n                        [5,2,3,4,1],\n                        [1,3,2,4,5],\n                        [1,1,1,1,1]]) == 0, 'Find_Min_Length should return 0'\nassert Find_Min_Length([[]]) == 0, 'Find_Min_Length should return 0'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[2,3,1], [3,6,4], [5,3,2], [4,5,1]]) == 3\nassert     Find_Min_Length([[2,3,1], [3,6,4], [5,3,2]]) == 3\nassert     Find_Min_Length([[2,3,1,4], [3,6,4], [5,3,2], [4,5,1]]) == 4\n\nprint('test passed'"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([1,2,3,4,5,6,7,8]) == 1\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == 2\nassert     Find_Min_Length([[1,2,3,4,5,6,7,8],[9,10,11,12],['a','b','c','d','e']]) == 3\nassert     Find_Min_Length([[1,2,3,4,5,6,7,8],[9,10,11,12],['a','b','c','d','e','f']]) == 4\nassert     Find_Min_Length([[1,2,3,4,5,6,7,8],[9,10,11,12],['a','b','c','d','e','f','g']]) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(4) == 1 + 1 + 1 + 1\nassert     divisor(0) == 0\nassert     divisor(-1) == 0\nassert     divisor(12) == 1 + 1 + 1 + 1 + 2 + 3\nassert     divisor(18) == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(15) == 4, 'incorrect'\nassert     divisor(7) == 5, 'incorrect'\nassert     divisor(5) == 2, 'incorrect'\nassert     divisor(6) == 3, 'incorrect'\nassert     divisor(12) == 3, 'incorrect'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisor(10) == 4, 'Test case failed'\nassert     divisor(8) == 4, 'Test case failed'\nassert     divisor(3) == 2, 'Test case failed'\nassert     divisor(0) == 1, 'Test case failed'\nassert     divisor(1) == 1, 'Test case failed'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndivisor(5) == 1\ndivisor(6) == 2\ndivisor(20) == 4\ndivisor(8) == 5\ndivisor(9) == 3\n\nprint('Test passed')\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(10) == 2, 'Test 1 failed'\nassert     divisor(11) == 3, 'Test 2 failed'\nassert     divisor(12) == 4, 'Test 3 failed'\nassert     divisor(13) == 6, 'Test 4 failed'\n\nprint('All tests passed')\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisor(8) == 4, \"test case 1 failed\"\nassert     divisor(12) == 4, \"test case 2 failed\"\nassert     divisor(16) == 3, \"test case 3 failed\"\nassert     divisor(9) == 1, \"test case 4 failed\"\nassert     divisor(13) == 2, \"test case 5 failed\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return (n + 1) / 2\n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    res = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            res = res + 1\n    return res\n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return n + 1 - n % 2\n    \ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n % 2 == 0:\n        return 2\n    else:\n        return 1\n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    res = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            res = res + 1\n            n = n / i\n        i = i + 1\n    return res\n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return 2\n    return 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists([[1, 2, 3, 4], [2, 1, 2, 3, 4], [1, 2, 1, 1, 1], [1, 1, 1, 1, 1]]) == {1: 4, 2: 3, 3: 3, 4: 2}\nassert     frequency_lists([[1], [2], [1], [1]]) == {1: 4, 2: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # Test 1\n    assert frequency_lists([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]) == \n    {1: 4, 2: 3, 3: 3, 4: 2, 5: 1}\n    # Test 2\n    assert frequency_lists([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5,2]]) == \n    {1: 4, 2: 3, 3: 3, 4: 2, 5: 1}\n    # Test 3\n    assert frequency_lists([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5,2]]) == \n    {1: 4, 2: 3, 3: 3, 4: 2, 5: 1}\n    # Test 4\n    assert frequency_lists([[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]]) == \n    {1: 7, 2: 6, 3: 5, 4: 4, 5: 3, 6: 2, 7: 1}\n    # Test 5\n    "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency_lists([1,2,3,4,1,2]) == {1: 2, 2: 3, 3: 2, 4: 1}\nassert     frequency_lists([2,1,1,1,1,1,1]) == {1: 3, 2: 3, 1: 4}\nassert     frequency_lists([2,2,2,3,2,2,2,2,2,2,2,2,2]) == {2: 5, 3: 4}"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1,2,3],[2,3,4]]) == {1:2, 2:3, 3:2, 4:1}\nassert     frequency_lists([[1,1,2,1],[2,2,2]]) == {1:3, 2:2, 2:2, 3:1}\n\n'''\n    One more important trick to convert the list to a string:\n    \n    list_to_str(lst)\n\n    For example, if we have the following list:\n    \n    [\"a\",\"b\",\"c\",\"d\"]\n    \n    we want to return the string \"a,b,c,d\"\n\n    The solution to this problem is to use the function \n    list_to_str(lst), where lst is the list of elements we want to convert to a string.\n    \n    The first element of the list is the string of which all other elements are appended by ', '.\n    \n    For example, if we have the following list:\n    \n    [\"a\",\"b\",\"c\",\"d\"]\n    \n    we want to return the string \"a,b,c,d\"\n'''\ndef list_to_str(lst):\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfrequency_lists([[1,2,3], [1,3,4], [3,2,1]]) == {1: 2, 3: 2, 2: 1, 4: 1}\nassert \nfrequency_lists([[1,2,3], [1,3,4], [3,2,1]]) == {1: 2, 2: 2, 3: 2, 4: 1}\nassert \nfrequency_lists([[1,2,3,4], [1,3,4,5], [3,2,1,6], [4,5,6]]) == {1: 2, 2: 2, 3: 3, 4: 2, 5: 1, 6: 2}\nassert \nfrequency_lists([[1,2,3,4,5], [1,3,4,5,6], [3,2,1,6,7], [4,5,6,7]]) == {1: 2, 2: 2, 3: 3, 4: 2, 5: 2, 6: 1, 7: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1,2,3], [2,3,4]]) == {1:1, 2:2, 3:2, 4:1}\nassert     frequency_lists([[1,2,3], [2,3], [3]]) == {1:1, 2:2, 3:2}\nassert     frequency_lists([[1,2,3], [1], [1], [3]]) == {1:4, 2:1, 3:1}\nassert     frequency_lists([[1,2,3], [], [], []]) == {1:1, 2:1, 3:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([[1,2,3,4],\n    [1,2,3,4],\n    [1,2,3,4]]) == {1:3, 2:2, 3:1, 4:1}\nassert     frequency_lists([[1,2,3,4],\n    [1,2,3,4],\n    [1,2,3,4]]) == {1:4, 2:3, 3:2, 4:1}\nassert     frequency_lists([[1,2,3,4],\n    [1,2,3,4],\n    [1,2,3,4]]) == {1:4, 2:3, 3:2, 4:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9]]) == {1: 2, 2: 2, 3: 3, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists([[1, 2, 3], \n            [2, 4, 3], \n            [5, 1, 2]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1, 2, 3], \n            [4, 4, 3], \n            [5, 1, 2]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1, 2, 3], \n            [2, 2, 3], \n            [5, 1, 2]]) == {1: 2, 2: 2, 3: 2, 5: 2}\nassert     frequency_lists([[1, 2, 3], \n            [4, 4, 4], \n            [5, 1, 2]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1,1], [1], [1]]) == {1:3, 1:2}\nassert     frequency_lists([[1,1,1], [1], [1]]) == {1:4, 1:2}\nassert     frequency_lists([[1,1,1], [2], [1]]) == {1:4, 2:1}\nassert     frequency_lists([[1,1,1,1], [2], [1]]) == {1:5, 2:1}\nassert     frequency_lists([[1,1,1,1], [1], [2]]) == {1:5, 2:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1,2,3], ['a','b','c'], ['a','b','c']]) == {'a':2, 'b':2, 'c':2, 1:1, 'a':1, 'b':1, 'c':1}\nassert     frequency_lists([[1,1,1], ['a','a','a'], ['a','a','a']]) == {'a':3, 'a':2, 1:1, 'a':1}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_num([1,2,3,4,5]) == 120 \nassert     multiply_num([10,20,30,40,50]) == 1000 \nassert     multiply_num([10,20,30,40,50]) == 1000 "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([3,4,5]) ==     24\nassert multiply_num([3,4,5,6]) ==     72\nassert multiply_num([3,4]) ==     12\nassert multiply_num([1]) ==     1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([1,2,3]) == 3\nassert     multiply_num([1,2,3,4,5]) == 120\nassert     multiply_num([1,2,3,4,5,6,7,8,9]) == 918\nassert     multiply_num([1,2,3,4,5,6]) == 0\nassert     multiply_num([1,2,3,4,5,6,7]) == 42\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([2, 4]) == 8\nassert     multiply_num([]) == 1\nassert     multiply_num([2, 3, 4]) == 24\nassert     multiply_num([1, 1, 1, 1]) == 1\nassert     multiply_num([1, 2, 3]) == 6\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert multiply_num([2, 4, 6, 8]) == 48\nassert multiply_num([1, 2, 3, 4, 5, 6]) == 360\nassert multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1890\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_num([1, 2, 3]) == 3\nassert     multiply_num([0]) == 0\nassert     multiply_num([]) == 1"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_num([2,3,4]) == 48\nassert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([1,2,3,4,5]) == 120\nassert     multiply_num([-1,-2,-3,-4,-5]) == -120\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_num([]) == 0, \"Empty list is not accepted\"\nassert     multiply_num([1]) == 1, \"Single element list is not accepted\"\nassert     multiply_num([1,2,3,4]) == 24, \"Multi-element list is not accepted\"\nassert    multiply_num([1,2,3,4,5,6,7,8]) == 120, \"list with 8 elements is not accepted\"\nassert    multiply_num([1,2,3,4,5,6,7,8,9]) == 72, \"list with 9 elements is not accepted\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_num([1,2,3,4,5]) == 120\nassert     multiply_num([1,2,3,4,5,5]) == 120\nassert     multiply_num([1,2,3,4,5,1,1]) == 120\nassert     multiply_num([1,1,1]) == 1\nassert     multiply_num([1,1,1,1]) == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    binary_to_decimal(\"0\") == 0\n    binary_to_decimal(\"1\") == 1\n    binary_to_decimal(\"10\") == 2\n    binary_to_decimal(\"101\") == 3\n    binary_to_decimal(\"111\") == 4\n    binary_to_decimal(\"10\") == 2\n    binary_to_decimal(\"01010101\") == 15\n    binary_to_decimal(\"101101010\") == 33\n    binary_to_decimal(\"101101111\") == 34\n    binary_to_decimal(\"010101101\") == 10\n    binary_to_decimal(\"01010111\") == 5\n    binary_to_decimal(\"100010101\") == 101\n    binary_to_decimal(\"11111111\") == 111\n    binary_to_decimal(\"1111101\") == 105\n    binary_to_decimal(\"11111101\") == 114\n    binary_to_decimal(\"1111111100\") == 4294967295\n    binary_to_decimal(\"11111111\") == 4294967295\n\ndef decimal_to_binary_fast(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert decimal_to_binary(42) == '101010'\nassert decimal_to_binary(5) == '101'\nassert decimal_to_binary(45) == '10110101'\nassert decimal_to_binary(22) == '10110010001010000'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(12) == \"1100\", \"For given input 12, expected output is: 1100\"\nassert     decimal_to_binary(40) == \"1010\", \"For given input 40, expected output is: 1010\"\nassert     decimal_to_binary(58) == \"1011\", \"For given input 58, expected output is: 1011\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert\n\ndef test_decimal_to_binary():\n    assert decimal_to_binary(30) == '0b1010'\n    assert decimal_to_binary(75) == '0b1111'\n    "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef decimal_to_binary_no_str(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string without leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number represented as a string into its decimal equivalent.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(13) == '1101'\nassert     decimal_to_binary(16) == '1110'\nassert     decimal_to_binary(19) == '1001'\nassert     decimal_to_binary(32) == '1011'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(24) == 22\nassert     next_smallest_palindrome(20) == 19\nassert     next_smallest_palindrome(21) == 21\nassert     next_smallest_palindrome(22) == 21\n\ndef odd_even_palindrome(num):\n    '''\n    Write a function to find if a given integer is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(2020) == 22018\nassert     next_smallest_palindrome(12121) == 21121\nassert     next_smallest_palindrome(1311) == 15111\nassert     next_smallest_palindrome(2764) == 2269\nassert     next_smallest_palindrome(2341) == 2511\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef next_greatest_palindrome(num):\n    '''\n    Write a function to find the next greatest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(next_smallest_palindrome(3)) == 2\nprint(next_smallest_palindrome(2)) == 2\nprint(next_smallest_palindrome(1)) == 2\n\n'''\nProblem:\n\nGiven a positive integer n, return the number of times you should iterate to find the next smallest palindrome \nbefore reaching a number with the property that is a palindrome.\n\nA palindrome is a string that reads the same forward and backward. \nThe tests do not contain any spaces.\nExample:\n\nFor n = 3, the output should be\nfindNextPalindrome(n) = 1;\nFor n = 4, the output should be\nfindNextPalindrome(n) = 2;\nFor n = 5, the output should be\nfindNextPalindrome(n) = 3;\nFor n = 6, the output should be\nfindNextPalindrome(n) = 4.\n'''\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(12321) == 12322\nassert     next_smallest_palindrome(1234) == 1235\nassert     next_smallest_palindrome(1235) == 1236\nassert     next_smallest_palindrome(1236) == 1237\nassert     next_smallest_palindrome(1237) == 1238\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(9999) ==     96969\nassert next_smallest_palindrome(11) == 11\nassert next_smallest_palindrome(21) == 22\nassert next_smallest_palindrome(25) == 29\nassert next_smallest_palindrome(15) == 15\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(100) == 101\nassert     next_smallest_palindrome(13) == 14\nassert     next_smallest_palindrome(12345678) == 12345679\nassert next_smallest_palindrome(100) == 101\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(1234) == 0\nassert     next_smallest_palindrome(9234) == 1\nassert     next_smallest_palindrome(5678) == 6\nassert     next_smallest_palindrome(9679) == 7\nassert     next_smallest_palindrome(9944) == 10\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     kth_element([4, 7, 10, 11, 13], 3) == 11\nassert     kth_element([4, 7, 10, 11, 13], 1) == 4\nassert     kth_element([4, 7, 10, 11, 13], 100) == None\nassert     kth_element([4, 7, 10, 11, 13], 0) == None\nassert     kth_element([], 1) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     kth_element([1,2,3,4,5,6,7], 4) == 5\nassert     kth_element([1,2,3,4,5,6,7], 6) == 7\nassert     kth_element([1,2,3,4,5,6,7], 10) == None\n\ndef kth_largest(arr, k):\n    '''\n    Write a function to find the kth largest element in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     kth_element([], 1) == None\nassert     kth_element([1], 1) == 1\nassert     kth_element([1, 2], 1) == 1\nassert     kth_element([1, 2, 3], 1) == 1\nassert     kth_element([1, 2, 3, 4, 5, 6], 1) == 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     kth_element([1, 2, 3, 4, 5], 4) == 5, \"Error in kth_element function\"\nassert     kth_element([1, 2, 3, 4, 5], 0) == 1, \"Error in kth_element function\"\nassert     kth_element([1, 2, 3, 4, 5], 6) == -1, \"Error in kth_element function\"\nassert     kth_element([1, 2, 3, 4, 5], 8) == -1, \"Error in kth_element function\"\nassert     kth_element([1, 2, 3, 4, 5], 10) == -1, \"Error in kth_element function\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     kth_element([1,2,3,4,5,6,7], 5) == 5, 'wrong kth_element'\nassert     kth_element([1,2,3,4,5,6,7], 9) == 6, 'wrong kth_element'\n\ndef kth_smallest(arr, k):\n    '''\n    Write a function that finds the kth smallest element in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([1, 2, 3, 4, 5, 6], 4) == 4, 'kth_element should return 4'\nassert     kth_element([1, 2, 3, 4, 5, 6], 5) == 5, 'kth_element should return 5'\nassert     kth_element([1, 2, 3, 4, 5, 6], 10) == 6, 'kth_element should return 6'\nassert     kth_element([1, 2, 3, 4, 5, 6], 0) == 1, 'kth_element should return 1'\nassert     kth_element([], 1) == None, 'kth_element should return None'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', f\"failed: snake_to_camel('snake_case')\"\nassert     snake_to_camel('snake_camel') =='snakeCamel', f\"failed: snake_to_camel('snake_camel')\"\nassert     snake_to_camel('snake_mix') =='snakeMix', f\"failed: snake_to_camel('snake_mix')\"\nassert     snake_to_camel('snake_mix_') =='snakeMix', f\"failed: snake_to_camel('snake_mix_')\"\nassert     snake_to_camel('snake_mix__') =='snakeMix', f\"failed: snake_to_camel('snake_mix__')\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake') =='snake', \"Should return snake\"\nassert     snake_to_camel('snake_Case') =='snakeCase', \"Should return snake_case\"\nassert     snake_to_camel('snake_Case_') =='snakeCase', \"Should return snake_case\"\nassert     snake_to_camel('snake_Case_abc') =='snake_case_abc', \"Should return snake_case_abc\"\nassert     snake_to_camel('snake_Case_abc_') =='snake_case_abc', \"Should return snake_case_abc\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert snake_to_camel('snake_case_string') =='snakeCaseString'\nassert snake_to_camel('snake_case_string_2') =='snakeCaseString'\nassert snake_to_camel('snake_case_string_3') =='snakeCaseString'\nassert snake_to_camel('snake_case_string_4') =='snakeCaseString'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('camelCase') == 'camelCamelCase'\nassert     snake_to_camel('camelCase12') == 'camelCamelCase12'\nassert     snake_to_camel('123') == '123'\nassert     snake_to_camel('camelCase9') == 'camelCase9'\nassert     snake_to_camel('camelCase') == 'camelCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCased', 'Snake case to camel case failed'\nassert snake_to_camel('snake_c_case') =='snakeC_cased', 'Snake case to camel case failed'\nassert snake_to_camel('SNAke_Case') =='snaKe_cAsE', 'Snake case to camel case failed'\nassert snake_to_camel('sNAke_cAsE') =='snaKeC_cAsE', 'Snake case to camel case failed'\nassert snake_to_camel('sNAKe_cAsE_') =='snaKeC_cAsE_', 'Snake case to camel case failed'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snaK') =='snake_case','snaK is not snake_case'\nassert     snake_to_camel('snaKed') =='snaKed','snaKed is not snake_case'\n\ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake') =='snakeCase', 'Wrong'\nassert     snake_to_camel('snake_case') =='snakeCase', 'Wrong'\nassert     snake_to_camel('snake_case_2') =='snakeCase2', 'Wrong'\nassert     snake_to_camel('snake_case_3') =='snakeCase3', 'Wrong'\nassert     snake_to_camel('snake_case_4') =='snakeCase4', 'Wrong'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\", \"incorrect\"\nassert     snake_to_camel(\"snake-case\") == \"snakeCase\", \"incorrect\"\nassert     snake_to_camel(\"snake-case\") == \"snakeCase\", \"incorrect\"\nassert     snake_to_camel(\"snake_case\") == \"snakeCase\", \"incorrect\"\nassert     snake_to_camel(\"_snake_case\") == \"SnakeCase\", \"incorrect\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(0, 2) == 0\nassert     eulerian_num(1, 2) == 2\nassert     eulerian_num(2, 2) == 2\nassert     eulerian_num(3, 2) == 2\nassert     eulerian_num(4, 2) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neulerian_num(1, 1) == 1\neulerian_num(2, 2) == 2\neulerian_num(3, 3) == 3\neulerian_num(4, 4) == 5\neulerian_num(5, 5) == 6\neulerian_num(5, 6) == 5\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eulerian_num(4, 2) == 6, \\\n    'eulerian_num should return 6 for n = 4, m = 2'\nassert     eulerian_num(10, 3) == 24, \\\n    'eulerian_num should return 24 for n = 10, m = 3'\nassert     eulerian_num(8, 7) == 56, \\\n    'eulerian_num should return 56 for n = 8, m = 7'\nassert     eulerian_num(12, 3) == 63, \\\n    'eulerian_num should return 63 for n = 12, m = 3'\n\n\ndef eulerian_path(n, m):\n    '''\n    Write a function to find the Eulerian path a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(3, 4) == 2, 'Error with eulerian_num'\nassert     eulerian_num(4, 3) == 4, 'Error with eulerian_num'\n\ndef eulerian_path(n, m, graph, vertexes_map):\n    '''\n    Write a function to find the Eulerian Path a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(7, 5) == 15, \"incorrect Eulerian number\"\nassert     eulerian_num(6, 4) == 12, \"incorrect Eulerian number\"\nassert     eulerian_num(6, 5) == 18, \"incorrect Eulerian number\"\nassert     eulerian_num(1, 1) == 1, \"incorrect Eulerian number\"\nassert     eulerian_num(1, 2) == 2, \"incorrect Eulerian number\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(5, 6) == 5, \"Wrong Eulerian Number\"\nassert     eulerian_num(5, 4) == 4, \"Wrong Eulerian Number\"\nassert     eulerian_num(5, 2) == 3, \"Wrong Eulerian Number\"\nassert     eulerian_num(7, 9) == 7, \"Wrong Eulerian Number\"\nassert     eulerian_num(7, 2) == 8, \"Wrong Eulerian Number\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eulerian_num(0, 0) == 1 \nassert eulerian_num(1, 1) == 1\nassert eulerian_num(2, 3) == 1\nassert eulerian_num(3, 3) == 1\nassert eulerian_num(4, 5) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert eulerian_num(2, 1) == 1\nassert eulerian_num(4, 1) == 4\nassert eulerian_num(1, 2) == 1\nassert eulerian_num(2, 2) == 2\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists(['cat', 'dog', 'pig']) == ['cat', 'dog', 'pig'], 'failed'\nassert     sort_sublists(['Hello', 'World', 'A', 'B', 'C', 'X']) == ['A', 'B', 'C', 'Hello', 'X', 'World'], 'failed'\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not sort_sublists([['a','b'],['c','d'],['e','f']])\nassert sort_sublists([[1, 2], ['c', 'd'], ['a', 'b']]) == [[1, 2], ['a', 'b'], ['c', 'd']]\nassert sort_sublists([['g', 'f'], ['d', 'c'], ['a', 'b']]) == [['a', 'b'], ['d', 'c'], ['g', 'f']]\nassert sort_sublists([['a', 'b'], ['c', 'd'], ['e', 'f']]) == [['a', 'b'], ['c', 'd'], ['e', 'f']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([['c', 'a', 'b'], ['b', 'c'], ['a']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['b', 'c', 'a']]\nassert     sort_sublists([['c', 'b', 'a'], ['b', 'a', 'c'], ['a']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['c', 'b', 'a']]\n\ndef get_min_max(input_list):\n    '''\n    Write a function that returns a tuple of minimum and maximum values in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([[0,1,2],['a','b','c']]) == [['a','b','c'],[0,1,2]]\nassert     sort_sublists([['a','b','c'],[0,1,2]]) == [['a','b','c'],[0,1,2]]\nassert     sort_sublists([[0,1,2,3],['a','b','c']]) == [['a','b','c'],[0,1,2,3]]\nassert sort_sublists([[0,1,2],['a','b','c']]) == [['a','b','c'],[0,1,2]]\nassert sort_sublists([[0,1,2,3],['a','b','c']]) == [['a','b','c'],[0,1,2,3]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['a', 'd', 'e'], ['x', 'y', 'z']] ) == \\\n            [['a', 'b', 'c'], ['a', 'd', 'e'], ['x', 'y', 'z']]\nassert     sort_sublists([['a', 'b', 'c'], ['x', 'y', 'z'], ['a', 'd', 'e']] ) == \\\n            [['a', 'b', 'c'], ['x', 'y', 'z'], ['a', 'd', 'e']]\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'd', 'e']] ) == \\\n            [['a', 'b', 'c'], ['a', 'd', 'e']]\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'd']] ) == \\\n            [['a', 'b', 'c'], ['a', 'd']]\nassert     sort_sublists([['a', 'b', 'c'], ['x', 'y', 'z'], ['a', 'd', 'e']] ) == \\\n            [['a', 'b', 'c'], ['x', 'y', 'z'], ['a', 'd', 'e']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\nassert     sort_sublists(['c', 'a', 'd', 'b']) == ['a', 'b', 'c', 'd']\nassert     sort_sublists(['b', 'c', 'd', 'a']) == ['a', 'b', 'c', 'd']\nassert     sort_sublists([]) == []\nassert     sort_sublists(['a', 'c', 'd', 'b']) == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([[1, 2, 3],\n                        [5, 7, 8],\n                        [4, 6, 9]]) == [[1, 2, 3],\n                                [4, 5, 6],\n                                [7, 8, 9]]\nassert     sort_sublists([[7, 4, 2],\n                        [2, 8, 1],\n                        [4, 6, 3]]) == [[2, 4, 4],\n                                [2, 8, 7],\n                                [1, 6, 3]]\nassert     sort_sublists([[2, 4, 2],\n                        [2, 8, 1],\n                        [2, 6, 3]]) == [[2, 2, 2],\n                                [2, 2, 1],\n                                [2, 6, 3]]\n\n'''\n[5, 7, 8]\n[4, 6, 9]\n[1, 2, 3]\n'''\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count([True, True, True, True]) == 4\nassert     count([False, False, True, False]) == 3\nassert     count([True, False, True, False]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True,True,True,False,False]) == 3, \"Failed\"\nassert     count([False,True,True,False,False]) == 3, \"Failed\"\nassert     count([False,False,True,False,False]) == 2, \"Failed\"\nassert     count([False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True]) == 10, \"Failed\"\nassert     count([True,False,True,False,True,False,True,False]) == 5, \"Failed\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([True, False, True, True, False, True, True]) == 4, \"Error in count()\"\nassert     count([True, False, True, False, True, False, True, True]) == 6, \"Error in count()\"\nassert     count([True, False, False, False, True, False, True, True]) == 4, \"Error in count()\"\nassert     count([True, False, False, False, True, False, True, False]) == 4, \"Error in count()\"\nassert     count([True, False, False, False, True, False, False, True]) == 4, \"Error in count()\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count([True, False, True, False]) == 1, \\\n    \"\\nThe count of True in a list: \" + str(count([True, False, True, False])) + \"is not 1.\"\nassert count([True, True, True]) == 0, \\\n    \"\\nThe count of True in a list: \" + str(count([True, True, True])) + \"is not 0.\"\n\n\n\ndef divisible_by_three(x):\n    '''\n    Write a python function to check whether the input number is divisible by 3 or not.\n    Input : 5\n    Output: True\n    Input : 11\n    Output: False\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([1,2,3,4,True,5]) == 5\nassert     count([1,2,3,4,5]) == 4\nassert     count([1,2,3,4]) == 4\nassert     count([]) == 0\nassert     count([1,2,3,4,False]) == 5\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True, False, True, False, True, False]) == 3, \"Test Case 1 Failed\"\nassert     count([True, False, False, True, True, False]) == 5, \"Test Case 2 Failed\"\nassert     count([True, False, True, True, False, False]) == 4, \"Test Case 3 Failed\"\nassert     count([True, True, False, True, True, False, False]) == 4, \"Test Case 4 Failed\"\n\nprint (\"All test cases passed\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([True, True, False, True, False, False, False, False]) == 3\nassert count([True, False]) == 2\nassert count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([1, 2, True, 4, 5]) == 4,'return 4'\nassert     count([1, False, 4, 5]) == 2,'return 2'\nassert     count([1, 2, 3, 4, 5]) == 5,'return 5'\nassert     count([1, 2, 3, 4, 5, 0, 1]) == 5,'return 5'\nassert     count([1, 2, 3, 4, 5, True]) == 6,'return 6'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count([True, False, True, True]) == 2, \"Fail\"\nassert count([True, True, False, False, True]) == 3, \"Fail\"\nassert count([True, True, False, False, False]) == 4, \"Fail\"\nassert count([True, True, False]) == 2, \"Fail\"\nassert count([]) == 0, \"Fail\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1,2,3], (1,2,3)) == (1,2,3), 'Wrong Output'\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_lists(test_list, test_tup) == \\\n        [('1',), ('2',), ('3',)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists(['x', 'y', 'z'], ('a', 'b')) == ['x', 'y', 'z', ('a', 'b')]\nassert add_lists(['x', 'y', 'z'], ('a',)) == ['x', 'y', 'z', ('a',)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1, 2], (3, 4, 5)) == ([1, 2], (3, 4, 5))\nassert     add_lists([1, 2], (1, 2, 3)) == ([1, 2], (1, 2, 3))\nassert     add_lists([], (1, 2)) == ([], (1, 2))\nassert     add_lists([], ()) == ([], ())\nassert     add_lists([], ()) == ([], ())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([], ()) == ([], ())\nassert     add_lists([1], ()) == ([1], ())\nassert     add_lists([1,2], ()) == ([1,2], ())\nassert     add_lists([1], (2,)) == ([1], (2,))\nassert     add_lists([1,2], (3,4)) == ([1,2,3,4], ())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (add_lists([1,2,3], [(4,5), (6,7)])) == [(1,2,3), (4,5,6,7)]\nassert     (add_lists([1,2], [(3,4), (5,6)])) == [(1,2), (3,4,5,6)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([1, 2], (3, 4)) == (1, 2, 3, 4), \"Wrong Answer\"\nprint(\"Correct\")\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists([1,2,3],(4,5,6)) == ((1,2,3),(4,5,6)), 'Wrong output'\nassert     add_lists([1,2,3],(3,4,5)) == ((1,2,3),(3,4,5)), 'Wrong output'\nassert     add_lists([1,2,3,4],(3,5,6)) == ((1,2,3,4),(3,5,6)), 'Wrong output'\nassert     add_lists([1,2,3,4],(3,5)) == ((1,2,3,4),(3,5)), 'Wrong output'\nassert     add_lists([1,2,3],(4,5,6)) == ((1,2,3),(4,5,6)), 'Wrong output'\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,2,3,5],[4,6,7,8],[10,12,13,14]) == [1,2,3,4,5,6,7,8,10,12,13,14]\nassert     merge_sorted_list([],[],[1,2,3,4,5]) == [1,2,3,4,5]\nassert     merge_sorted_list([2,5,4,7,3],[2,5,7,8],[2,3,4,5,6]) == [2,2,3,4,5,5,7,7,8,8,4,5,6]\n\ndef merge_sort(list_of_nums):\n    '''\n    Write a function to sort a list of numbers using merge sort.\n    '''\n    if len(list_of_nums)==1:\n        return list_of_nums\n    else:\n        middle_of_list = len(list_of_nums)//2\n        left_half = merge_sort(list_of_nums[0:middle_of_list])\n        right_half = merge_sort(list_of_nums[middle_of_list:])\n        return merge(left_half,right_half)\n\ndef merge(list1,list2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_sorted_list([1,2,3],[2,3,4], [4,5,6]) == [1,2,2,3,3,4,4,5,5,6]\nassert     merge_sorted_list([1,2,4],[3,4,5],[5,6,6]) == [1,2,3,4,4,5,5,6,6]\nassert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([],[],[]) == []\n\ndef merge_sort(a_list):\n    '''\n    Write a function that sorts a list using the merge_sorted_list function.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([2,1,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\n\ndef merge_sorted_list2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list using heapq.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef binary_search(arr, x, left, right):\n    '''\n    Write a function to search a given element x in arr[left...right] and return \n    its index if found else return -1.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_sorted_list([], [1,2], [3]) == [1,2,3]\nassert     merge_sorted_list([1], [2], [3]) == [1,2,3]\nassert     merge_sorted_list([1,2,3], [], []) == [1,2,3]\nassert     merge_sorted_list([1,2,3], [], [4]) == [1,2,3,4]\nassert     merge_sorted_list([1,2,3], [4], []) == [1,2,3,4]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnum1=[1,2,3]\nnum2=[4,5]\nnum3=[6,7,8]\nmerge_sorted_list(num1,num2,num3)"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([], [], []) == []\nassert    merge_sorted_list([], [1], []) == [1]\nassert    merge_sorted_list([], [2], []) == [2]\nassert    merge_sorted_list([], [3], []) == [3]\nassert    merge_sorted_list([2], [], []) == [2]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10],\n                            [1,2,3,4,5,6,7,8,9,10]) == sorted([1,2,3,4,5,6,7,8,9,10])\nassert     merge_sorted_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10],\n                            [1,2,3,4,5,6,7,8,9,10]) == sorted([1,2,3,4,5,6,7,8,9,10])\nassert     merge_sorted_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10],\n                            [1,2,3,4,5,6,7,8,9,10,11,12]) == sorted([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     merge_sorted_list([1,2,3,4,5,6,7,8,9,10], [],\n                            [1,2,3,4,5,6,7,8,9,10]) == sorted([1,2,3,4,5,6,7,8,9,10])\nassert     merge_sorted_list([], [1,2,3,4,5,6,7,8,9,10],\n                            [1,2,3,4,5,6,7,8,9,10]) == sorted([1,2,3,4,5,6,7,8,9,10])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_Equivalent(\"1100\",0) == 0, \"pass\"\nassert \nodd_Equivalent(\"1100\",1) == 1, \"pass\"\nassert \nodd_Equivalent(\"1101\",1) == 2, \"pass\"\nassert \nodd_Equivalent(\"1010\",1) == 1, \"pass\"\nassert \nodd_Equivalent(\"1111\",1) == 0, \"pass\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    odd_Equivalent(\"1010\", 1) == 2\n    odd_Equivalent(\"1001\", 1) == 3\n    odd_Equivalent(\"10001\", 1) == 4\n    odd_Equivalent(\"100010001\", 3) == 4\n    odd_Equivalent(\"100011111\", 5) == 5\n    odd_Equivalent(\"101010101\", 3) == 3\n    odd_Equivalent(\"1010101010001\", 5) == 4\n    odd_Equivalent(\"1010101010001001\", 5) == 5\n    odd_Equivalent(\"101010101000100011\", 5) == 5\n    odd_Equivalent(\"1010101010001000101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"10101010100010001010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"1010101010001000101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000100010101010101010101010101010101010101010101010101010101010101010101010101\", 5) == 5\n    odd_Equivalent(\"101010101000"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_Equivalent(\"1111100111\", 2) == 5\nassert     odd_Equivalent(\"1111100111\", 4) == 5\nassert     odd_Equivalent(\"1111100111\", 6) == 5\nassert     odd_Equivalent(\"1111100111\", 8) == 5\nassert     odd_Equivalent(\"1111100111\", 10) == 5\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_Equivalent(\"1010\",\"3\") == \"0011\"\nassert     odd_Equivalent(\"1010\",\"4\") == \"1110\"\nassert     odd_Equivalent(\"1010\",\"5\") == \"1011\"\nassert     odd_Equivalent(\"1010\",\"6\") == \"1100\"\nassert     odd_Equivalent(\"1010\",\"7\") == \"1101\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_Equivalent(\"10\",1) == 2\nodd_Equivalent(\"10\",2) == 2\nodd_Equivalent(\"10\",3) == 2\nodd_Equivalent(\"101\",1) == 2\nodd_Equivalent(\"101\",2) == 2\nodd_Equivalent(\"101\",3) == 2\nodd_Equivalent(\"101010\",1) == 2\nodd_Equivalent(\"101010\",2) == 2\nodd_Equivalent(\"101010\",3) == 2\nodd_Equivalent(\"10101010\",1) == 2\nodd_Equivalent(\"10101010\",2) == 2\nodd_Equivalent(\"10101010\",3) == 2\nodd_Equivalent(\"101010101010\",1) == 2\nodd_Equivalent(\"101010101010\",2) == 2\nodd_Equivalent(\"101010101010\",3) == 2\nodd_Equivalent(\"101010101010\",4) == 2\nodd_Equivalent(\"101010101010\",5) == 2\nodd_Equivalent(\"101010101010\",6) == 2\nodd_Equivalent(\"101010101010\",7) == 2\nodd_Equivalent(\"101010101010\",8) == 2\nodd_Equivalent(\"101010101010\",9) == 2\nodd_Equivalent(\"101010101010\",10) == 2\nodd_Equivalent(\"101010101010\",11) == 2\nodd_Equivalent(\"101010101010\",12) == 2\nodd_Equivalent(\"101010101010\",13) == 2\nodd_Equivalent(\"101010101010\",14) == 2\nodd_Equivalent(\"101010101010\",15) == 2\nodd_Equivalent(\"101010101010\",16) == 2\nodd_Equivalent(\"101010101010\",17) == 2\nodd_Equivalent(\"101010101010\",18) == 2\nodd_Equivalent(\"101010101010\",19) == 2\nodd_Equivalent(\"101010101010\",20) == 2\nodd_Equivalent(\"101010101010\",21) == 2\nodd_Equivalent(\"101010101010\",22) == 2\nodd_Equivalent(\"101010101010\",23) == 2\nodd_Equivalent(\"101010101010\",24) == 2\nodd_Equivalent(\"101010101010\",25) == 2\nodd_Equivalent(\"101010101010\",26) == 2\nodd_Equivalent(\"101010101010\",27) == 2\nodd_Equivalent(\"101010101010\",28) == 2\nodd_Equivalent(\"101010101010\",29) == 2\nodd_Equivalent(\"101010101010\",30) == 2\nodd_Equivalent(\"101010101010\",31) == 2\nodd_Equivalent(\"101010101010\",32) == 2\nodd_Equivalent(\"101010101010\",33) == 2\nodd_Equivalent(\"101010101010\",34) == 2\nodd_Equivalent(\"101010101010\",35) == 2\nodd_Equivalent(\"101010101010\",36) == 2\nodd_Equivalent(\"101010101010\",37) == 2\nodd_Equivalent(\"101010101010\",38) == 2\nodd_Equivalent(\"101010101010\",39) == 2\nodd_Equivalent(\"101010101010\",40) == 2\nodd_Equivalent(\"101010101010\",41) == 2\nodd_Equivalent(\"101010101010\",42) == 2\nodd_Equivalent(\"101010101010\",43) == 2\nodd_Equivalent(\"101010101010\",44) == 2\nodd_Equivalent(\"101010101010\",45) == 2\nodd_Equivalent(\"101010101010\",46) == 2\nodd_Equivalent(\"101010101010\",47) == 2\nodd_Equivalent(\"101010101010\",48) == 2\nodd_Equivalent(\"101010101010\",49) == 2\nodd_Equivalent(\"101010101010\",50) == 2\nodd_Equivalent(\"101010101010\",51) == 2\nodd_Equivalent(\"101010101010\",52) == 2\nodd_Equivalent(\"101010101010\",53) == 2\nodd_Equivalent(\"101010101010\",54) == 2\nodd_Equivalent(\"101010101010\",55) == 2\nodd_Equivalent(\"101010101010\",56) == 2\nodd_Equivalent(\"101010101010\",57) == 2\nodd_Equivalent(\"101010101010\",58) == 2\nodd_Equivalent(\"101010101010\",59) == 2\nodd_Equivalent(\"101010101010\",60) == 2\nodd_Equivalent(\"101010101010\",61) == 2\nodd_Equivalent(\"101010101010\",62) == 2\nodd_Equivalent(\"101010101010\",63) == 2\nodd_Equivalent(\"101010101010\",64) == 2\nodd_Equivalent(\"101010101010\",65) == 2\nodd_Equivalent(\"101010101010\",66) == 2\nodd_Equivalent(\"101010101010\",67) == 2\nodd_Equivalent(\"101010101010\",68) == 2\nodd_Equivalent(\"101010101010\",69) == 2\nodd_Equivalent(\"101010101010\",70) == 2\nodd_Equivalent(\"101010101010\",71) == 2\nodd_Equivalent(\"101010101010\",72) == 2\nodd_Equivalent(\"101010101010\",73) == 2\nodd_Equivalent(\"101010101010\",74) == 2\nodd_Equivalent(\"101010101010\",75) == 2\nodd_Equivalent(\"101010101010\",76) == 2\nodd_Equivalent(\"101010101010\",77) == 2\nodd_Equivalent(\"101010101010\",78) == 2\nodd_Equivalent(\"101010101010\",79) == 2\nodd_Equivalent(\"101010101010\",80) == 2\nodd_Equivalent(\"101010101010\",81) == 2\nodd_Equivalent(\"101010101010\",82) == 2\nodd_Equivalent(\"101010101010\",83) == 2\nodd_Equivalent(\"101010101010\",84) == 2\nodd_Equivalent(\"101010101010\",85) == 2\nodd_Equivalent(\"101010101010\",86) == 2\nodd_Equivalent(\"101010101010\",87) == 2\nodd_Equivalent(\"101010101010\",88) == 2\nodd_Equivalent(\"101010101010\",89) == 2\nodd_Equivalent(\"101010101010\",90) == 2\nodd_Equivalent(\"101010101010\",91) == 2\nodd_Equivalent(\"101010101010\",92) == 2\nodd_Equivalent(\"101010101010\",93) == 2\nodd_Equivalent(\"101010101010\",94) == 2\nodd_Equivalent(\"101010101010\",95) == 2\nodd_Equivalent(\"101010101010\",96) == 2\nodd_Equivalent(\"101010101010\",97) == 2\nodd_Equivalent(\"101010101010\",98) == 2\nodd_Equivalent(\"101010101010\",99) == 2\nodd_Equivalent(\"101010101010\",100) == 2\nodd_Equivalent(\"101010101010\",101) == 2\nodd_Equivalent(\"101010101010\",102) == 2\nodd_Equivalent(\"101010101010\",103) == 2\nodd_Equivalent(\"101010101010\",104) == 2\nodd_Equivalent(\"101010101010\",105) == 2\nodd_Equivalent(\"101010101010\",106) == 2\nodd_Equivalent(\"101010101010\",107) == 2\nodd_Equivalent(\"101010101010\",108) == 2\nodd_Equivalent(\"101010101010\",109) == 2\nodd_Equivalent(\"101010101010\",110) == 2\nodd_Equivalent(\"101010101010\",111) == 2\nodd_Equivalent(\"101010101010\",112) == 2\nodd_Equivalent(\"101010101010\",113) == 2\nodd_Equivalent(\"101010101010\",114) == 2\nodd_Equivalent(\"1010"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent('1','1') == 1, \"odd_Equivalent (1,1) = 1\"\nassert odd_Equivalent('1','2') == 1, \"odd_Equivalent (1,2) = 1\"\nassert odd_Equivalent('1','3') == 1, \"odd_Equivalent (1,3) = 1\"\nassert odd_Equivalent('1','4') == 1, \"odd_Equivalent (1,4) = 1\"\nassert odd_Equivalent('1','5') == 1, \"odd_Equivalent (1,5) = 1\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_Equivalent('10100', 1) == '1'\nassert odd_Equivalent('10100', 2) == '010'\nassert odd_Equivalent('10100', 3) == '000'\nassert odd_Equivalent('10100', 4) == '0'\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_Equivalent('100101010110100','10') == 9, \"your code is worng\"\nassert odd_Equivalent('100101010110100','11') == 10, \"your code is worng\"\nassert odd_Equivalent('100101010110100','12') == 8, \"your code is worng\"\nassert odd_Equivalent('100101010110100','13') == 7, \"your code is worng\"\nassert odd_Equivalent('100101010110100','10') == 9, \"your code is worng\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1,2], [1,3], [3,4], [2,4], [4,5], [1,5]]) == [1,2,3,4,5], \"Wrong output\"\nassert     common_in_nested_lists([[\"A\", \"B\"], [\"C\", \"D\"], [\"E\", \"F\"]]) == [\"A\", \"C\", \"E\"], \"Wrong output\"\nassert     common_in_nested_lists([[\"X\", \"Y\"], [\"Z\", \"AA\"]]) == [\"Z\", \"AA\"], \"Wrong output\"\nassert     common_in_nested_lists([[1,2], [\"a\", \"b\"], [3,4]]) == [], \"Wrong output\"\nassert     common_in_nested_lists([[1,2,3], [\"a\", \"b\", \"c\"]]) == [\"a\", \"b\"], \"Wrong output\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists(nestedlist) == ['a', 'b', 'c']\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[1,2,3], [2,3,4], [1,2,3,4,5]]) == 2, \"didn't pass\"\nassert     common_in_nested_lists([[1,2,3], [2,3,4], [1,2,3]]) == 3, \"didn't pass\"\nassert     common_in_nested_lists([[1,2,3], [2,3,4], [1,2,3,4]]) == 4, \"didn't pass\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[5],[[8],9],[[2,9]]]) ==  [8]\nassert common_in_nested_lists([[5],[[8],9],[[2,9]]]) ==  []\nassert common_in_nested_lists([[5,2,8],[[8],9,10],[[2,9]]]) ==  [2,9]\nassert common_in_nested_lists([[5,2,8],[[8],9,10],[[2,9]]]) ==  []\nassert common_in_nested_lists([[5,2,8],[[8],9,10],[[2,9,1]]) ==  [2,9,1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert common_in_nested_lists([[1,2], [3,4], [5,6]]) == 1, 'Testing failed'\nassert common_in_nested_lists([[1,2], [1,2,3], [2,3,4]]) == 2, 'Testing failed'\nassert common_in_nested_lists([[1], [2], [3], [4]]) == 1, 'Testing failed'\nassert common_in_nested_lists([[], [], []]) == 0, 'Testing failed'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[1, 2], [1, 2], [1, 2]]) == (1, 2), \"Wrong\"\nassert     common_in_nested_lists([[[1, 2], [1, 2]], [[1, 2], [1, 2]], [[1, 2], [1, 2]]]) == (1, 2), \"Wrong\"\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == (1, 2, 3), \"Wrong\"\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3], [1, 2]]) == (1, 2, 3, 4), \"Wrong\"\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6], [1, 2, 3], [1, 2, 4]]) == (1, 2, 3, 4), \"Wrong\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[1, 2], 2, 3, 4]) == 1\nassert     common_in_nested_lists([[2, 4], 2, 3, 4]) == 2\nassert     common_in_nested_lists([[4, 2], 2, 3, 4]) == 4\nassert     common_in_nested_lists([[4, 2, 1], 2, 3, 4]) == 2\nassert     common_in_nested_lists([[4, 2, 1], 1, 2, 4]) == 1\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if (text.isdigit() or text.replace(\".\", \"\").isdigit()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer(1) is True\nassert     check_integer(1.1) is False\nassert     check_integer(\"False\") is False\nassert     check_integer(\"1A\") is False\nassert     check_integer(\"two\") is False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('3') == True, 'Should be True'\nassert     check_integer('3.1') == False, 'Should be False'\nassert     check_integer('False') == False, 'Should be False'\nassert     check_integer('3+2i') == False, 'Should be False'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer('12') == True\nassert     check_integer('abc') == False\nassert     check_integer('123') == True\nassert     check_integer('-1') == True\nassert     check_integer('123.5') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer('100') == True\nassert     check_integer('100000') == True\nassert     check_integer('-100') == True\nassert     check_integer('-1.5') == True\nassert     check_integer('-1.e4') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer('123') == True,    'incorrect'\nassert     check_integer('1.2') == False,    'incorrect'\nassert     check_integer('abc') == False,    'incorrect'\nassert     check_integer('a') == False,    'incorrect'\nassert     check_integer('1.') == False,    'incorrect'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer('True') == True,    'failed'\nassert     check_integer('False') == True,    'failed'\nassert     check_integer('3.14') == False,    'failed'\nassert     check_integer('5') == True,    'failed'\nassert     check_integer('0') == True,    'failed'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncheck_integer('123') == False\ncheck_integer('-123') == False\ncheck_integer('123.5') == False\ncheck_integer('0x53') == False\ncheck_integer('0b1010') == False\ncheck_integer('0o153') == False\ncheck_integer('00o123') == False\ncheck_integer('-0x12') == False\ncheck_integer('-0b1010') == False\ncheck_integer('-0o123') == False\ncheck_integer('-00o123') == False\ncheck_integer('0') == False\ncheck_integer('') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer('12') == True\nassert     check_integer('12.1') == True\nassert     check_integer('-12') == False\nassert     check_integer('-1.5') == False\nassert     check_integer('-') == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([]) == True, 'Pass'\nassert     empty_dit([{}]) == True, 'Pass'\nassert     empty_dit([{'a': 1}, {'b': 2}]) == False, 'Pass'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([{}, {}, {}]) == True\nassert     empty_dit([{},{},{}]) == False\nassert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{},{},{}]) == False\nassert     empty_dit([{},{},{}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert empty_dit([]) == True\nassert empty_dit([{}]) == True\nassert empty_dit([{},{}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([{}, {}, {}, {}, {}]) == True, 'Wrong'\nassert     empty_dit([{'a':1}, {}, {}, {}, {}]) == False, 'Wrong'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nempty_dit([])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    empty_dit(empty_dit) == False\n    empty_dit(1) == True\n    empty_dit([1,2,3]) == False\n    empty_dit({1:1}) == False\n    empty_dit({'1': 1}) == False\n    empty_dit([]) == True\n    empty_dit('') == True\n    empty_dit({''}) == True\n    empty_dit([1,2,3]) == False\n    empty_dit(['1','2','3']) == False\n    empty_dit(['1','2','3',{},{'a':1,'b':2}]) == False\n    empty_dit(['1','2','3',{'a':1,'b':2},{}]) == False\n    empty_dit([1,2,3,{},{'a':1,'b':2},{}]) == False\n    empty_dit([1,2,3,{'a':1,'b':2},{}]) == False\n    empty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2}]) == True\n    empty_dit([1,2,3,{},{},{}]) == True\n    empty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{}]) == False\n    empty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2}]) == False\n    empty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == True\n    empty_dit([1,2,3,{},{},{},{}]) == True\n    empty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == False\n    empty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2}]) == True\n\nempty_dit([]) == True\nempty_dit(1) == True\nempty_dit([1,2,3]) == False\nempty_dit({1:1}) == False\nempty_dit({'1': 1}) == False\nempty_dit([]) == True\nempty_dit('') == True\nempty_dit({''}) == True\nempty_dit([1,2,3]) == False\nempty_dit(['1','2','3']) == False\nempty_dit(['1','2','3',{},{'a':1,'b':2}]) == False\nempty_dit(['1','2','3',{'a':1,'b':2},{}]) == False\nempty_dit([1,2,3,{},{'a':1,'b':2},{}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2}]) == True\nempty_dit([1,2,3,{},{},{}]) == True\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == True\nempty_dit([1,2,3,{},{},{},{}]) == True\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2}]) == False\nempty_dit([1,2,3,{},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == False\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == True\nempty_dit([1,2,3,{},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == True\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == True\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{}]) == True\nempty_dit([1,2,3,{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a':1,'b':2},{'a'"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([]) == True, \"Expected empty_dit([]) to be True\"\nassert     empty_dit([{}]) == True, \"Expected empty_dit([{}]) to be True\"\nassert     empty_dit([{}, {}, {}]) == True, \"Expected empty_dit([{}, {}, {}]) to be True\"\nassert     empty_dit([{}, {}, {}]) == True, \"Expected empty_dit([{}, {}, {}]) to be True\"\nassert     empty_dit([{}]) == False, \"Expected empty_dit([{}]) to be False\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    empty_dit([{}, {}, {}, {}]) == True\n    empty_dit([{}, {}, {}, {'a': 'A'}]) == False\n    empty_dit([{}, {}, {}, {'a': 'A'}, {}, {}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit([{},{},{}]) == True, \"Fail\"\nassert     empty_dit([{1:1},{},{1:1}]) == True, \"Fail\"\nassert     empty_dit([{},{},{}]) == True, \"Fail\"\nassert empty_dit([{}]) == True, \"Fail\"\nassert     empty_dit([{},{},{}]) == False, \"Fail\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert tuple_to_int((0,1,2,3)) == 6\nassert tuple_to_int((0,1,2,3,4)) == 10\nassert tuple_to_int((0,1,2,3,4,5)) == 15\nassert tuple_to_int((0,1,2,3,4,5,6)) == 21\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1, 3, 5)) == 15\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 0\nassert     tuple_to_int((1, 3, 5, 7, 9, 11, 13, 15)) == 231\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 12\nassert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,2)) == 2\nassert     tuple_to_int((2,4)) == 10\nassert     tuple_to_int((2,4,6,8)) == 48\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_int((1,2,3,4,5)) == 15, \"Wrong!\"\nassert tuple_to_int((1,2,3)) == 6, \"Wrong!\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1,2,3)) == 6, \"Wrong output\"\nassert     tuple_to_int((1,1,1)) == 0, \"Wrong output\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 24, 'wrong'\nassert     tuple_to_int((1, 2, 3, 5)) == 45, 'wrong'\nassert     tuple_to_int((1,)) == 1, 'wrong'\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 240, 'wrong'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 15\nassert     tuple_to_int((3, 5, 8, 13, 15)) == 61\nassert     tuple_to_int((4, 0, 7, 9, 15)) == 17\nassert     tuple_to_int((3, 5, 8, 11, 12)) == 67\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((1,2,3,4,5)) == 120\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert tuple_to_int((1, 1, 1)) == 1\nassert tuple_to_int((0, 0, 0)) == 0\nassert tuple_to_int((1, 1, -1)) == -1\nassert tuple_to_int((1, -1, -1)) == -1\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_to_float([1, 2, 3.0]) == [1.0, 2.0, 3.0], \"Wrong result\"\nassert     list_to_float([1.5, \"2.5\", 3.5, 4.5, 5.5]) == [1.5, 2.5, 3.5, 4.5, 5.5], \"Wrong result\"\nassert     list_to_float([1, 2, \"3\", 4, \"5\"]) == [1.0, 2.0, \"3.0\", 4.0, \"5.0\"], \"Wrong result\"\nassert     list_to_float([]) == [], \"Wrong result\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float( [[4,'A'], [2.5,'B'], ['one','two']] ) == [[4.0, 'A'], [2.5, 'B'], ['one', 'two']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_to_float([[1, 2], [3, 'A']]) == [[1.0, 2.0], [3.0, 'A']]\nassert     list_to_float([[1, 2], [3, 'A']]) == [[1.0, 2.0], [3.0, 'A']]\nassert     list_to_float([[1.0, 2.0], ['a', 4.0]]) == [[1.0, 2.0], ['a', 4.0]]\nassert     list_to_float([[1.0, 2.0], ['a', 4.0]]) == [[1.0, 2.0], ['a', 4.0]]\nassert     list_to_float([[1.0, 2.0], ['a', 4.0]]) == [[1.0, 2.0], ['a', 4.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_to_float([[1,2.5,4.5]]) == [[1.0, 2.5, 4.5]]\nassert     list_to_float([[1,2,4], \n                        [3,4,5],\n                        [6,8,9]]) == [[1.0, 2.0, 4.0],\n                                  [3.0, 4.0, 5.0],\n                                  [6.0, 8.0, 9.0]]\nassert     list_to_float([[1,2,4], \n                        [3,4,5],\n                        [6,8,9]]) == [[1.0, 2.0, 4.0],\n                                  [3.0, 4.0, 5.0],\n                                  [6.0, 8.0, 9.0]]\nassert     list_to_float([[1,2,4], \n                        [3,4,5],\n                        [6,8,9]]) == [[1.0, 2.0, 4.0],\n                                  [3.0, 4.0, 5.0],\n                                  [6.0, 8.0, 9.0]]\nassert     list_to_float([[1,2.5,4.5]]) == [[1.0, 2.5, 4.5]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float([[1, 'a'], 'b', 1, 'a']) == [[1.0, 'a'], 'b', 1.0, 'a']\nassert     list_to_float([[1, 1], 'a', 'a', 'a']) == [[1.0, 1.0], 'a', 'a', 'a']\nassert     list_to_float([['a', 'b', 'c'], 1, 1, 1, 1]) == [['a', 'b', 'c'], 1.0, 1.0, 1.0, 1.0]\nassert     list_to_float([[1, 2], 'a', 'b', 'c', 'd', 'e']) == [[1.0, 2.0], 'a', 'b', 'c', 'd', 'e']\nassert     list_to_float([]) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1,2,3], [4,5,6]]) == [[1.0,2.0,3.0], [4.0,5.0,6.0]]\nassert list_to_float([[1,2,3], ['a', 'b', 'c']]) == [[1.0,2.0,3.0], ['a', 'b', 'c']]\nassert list_to_float([[1,2,3], None]) == [[1.0,2.0,3.0], None]\nassert list_to_float([[1,2,3], [4,5,6]]) == [[1.0,2.0,3.0], [4.0,5.0,6.0]]\nassert list_to_float([[1,2,3], None]) == [[1.0,2.0,3.0], None]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_to_float([]) == []\nassert     list_to_float([[]]) == []\nassert     list_to_float([[3, '5']]) == [3.0, 5.0]\nassert     list_to_float([[3, '5.0']]) == [3.0, 5.0]\nassert     list_to_float([[3, '5.2']]) == [3.0, 5.2]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_list(\"Hello World\") == [\"Hello\", \"World\"]\nassert     string_to_list(\"Hello, World\") == [\"Hello\", \"\", \"\", \"World\"]\nassert     string_to_list(\"Hello, World! \") == [\"Hello\", \"\", \"\", \"World\", \"\"]\nassert     string_to_list(\"Hello\") == [\"Hello\"]\nassert     string_to_list(\"\") == []\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_list('a b c') == ['a', 'b', 'c'], 'incorrect list'\nassert     string_to_list('a b c') == ['a', 'b', 'c'], 'incorrect list'\nassert     string_to_list('a-b-c') == ['a', '-', 'b', '-', 'c'], 'incorrect list'\nassert     string_to_list('a,b,c') == ['a', 'b', 'c'], 'incorrect list'\nassert     string_to_list('a;b;c') == ['a', ';', 'b', ';', 'c'], 'incorrect list'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nstring_to_list(\"bob has a cat\") == ['bob', 'has', 'a', 'cat']\nassert \nstring_to_list(\"\") == []\nassert \nstring_to_list(\"bob has a cat with a dog\") == ['bob', 'has', 'a', 'cat', 'with', 'a', 'dog']\nassert \nstring_to_list(\"bob has a cat\") == ['bob', 'has', 'a', 'cat']\nassert \nstring_to_list(\"bob has a cat with a dog\") == ['bob', 'has', 'a', 'cat', 'with', 'a', 'dog']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_list(\"I love Python\") == [\"I\", \"love\", \"Python\"], \"incorrect\"\nassert     string_to_list(\"I like Python\") == [\"I\", \"like\", \"Python\"], \"incorrect\"\nassert     string_to_list(\"I like Python and C#\") == [\"I\", \"like\", \"Python\", \"and\", \"C#\"], \"incorrect\"\nassert     string_to_list(\"I like Python and PHP\") == [\"I\", \"like\", \"Python\", \"and\", \"PHP\"], \"incorrect\"\nassert     string_to_list(\"I like Python, C# and PHP\") == [\"I\", \"like\", \"Python\", \"C#\", \"and\", \"PHP\"], \"incorrect\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert string_to_list(\"1 2 3\") == [\"1\", \"2\", \"3\"]\nassert string_to_list(\"1 2 3   5  7 8\") == [\"1\", \"2\", \"3\", \"5\", \"7\", \"8\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert string_to_list('abc') == ['abc'], 'Failed'\nassert string_to_list('   abc  ') == ['abc'], 'Failed'\nassert string_to_list('abcdef') == ['abc', 'def'], 'Failed'\nassert string_to_list('   abc') == ['abc'], 'Failed'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert \n    # Use the below input values to test your function.\n    input_string = \"hello world\"\n    print(string_to_list(input_string))\n\n    input_string = \"hello world my friend\"\n    print(string_to_list(input_string))\n    \n    input_string = \"hello my friend hello my friend\"\n    print(string_to_list(input_string))\n    \n    input_string = \"hello\"\n    print(string_to_list(input_string))\n    \n    input_string = \"hello my friend\"\n    print(string_to_list(input_string))\n    \n    input_string = \"hello\"\n    print(string_to_list(input_string))\n    \n    input_string = \"hello my friend my friend\"\n    print(string_to_list(input_string))\n    \n    input_string = \"\"\n    print(string_to_list(input_string))"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    string_to_list(\"a b c\") == [\"a\", \"b\", \"c\"]\n    string_to_list(\"1 2 3\") == [\"1\", \"2\", \"3\"]\n    string_to_list(\"1 2 3.5\") == [\"1\", \"2\", \"3.5\"]\nassert not \n    string_to_list(\"a b c\") == [\"a\", \"b\", \"c\"]\n    string_to_list(\"1 2 3\") == [\"1\", \"2\", \"3\"]\n    string_to_list(\"1 2 3.5\") == [\"1\", \"2\", \"3.5\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1,1,2,3,3,4,4,5,5]) == 4, \"search failed\"\nassert     search([1,1,2,2,3,4,5,5]) == 4, \"search failed\"\nassert     search([1,2,2,2,3,4,4,5,5]) == 4, \"search failed\"\nassert     search([1,1,2,3,3,3,4,4,4,5,5]) == 1, \"search failed\"\n\nprint(\"search function test passed!\")\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([1, 2, 1, 3, 1])     == 1, 'Sample case failed'\nassert     search([1, 2, 1, 3, 1])     == 1, 'Sample case failed'\nassert     search([1, 2, 1, 2, 2, 2])     == 1, 'Sample case failed'\nassert     search([1, 1, 2, 1, 3, 4, 4, 3])     == 1, 'Sample case failed'\nassert     search([1, 1, 2, 1, 3, 4, 4, 3])     == 1, 'Sample case failed'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([1,1,1,2,2,2,3,3,3,4,4,4]) == 1, \"incorrect\"\nassert search([1,2,2,3,4,4,4,4]) == 4, \"incorrect\"\nassert search([1,2,2,3,4,4,5]) == 5, \"incorrect\"\nassert search([1,2,3,4,5]) == 2, \"incorrect\"\nassert search([1,2,3,4,5,5]) == 5, \"incorrect\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([2,3,3,5,5,6,6,7,8,9,9,9,9,9,9])==9\nassert     search([2,3,3,5,5,6,6,7,8,9,9,9,9,9,9])==None\nassert     search([2,2,2,3,3,3,5,5,6,6,7,8,9,9,9])==9\nassert     search([2,2,2,2,2,3,3,5,5,6,6,7,8,9,9,9])==None\nassert     search([2,2,2,2,2,2,3,3,5,5,6,6,7,8,9,9,9])==9\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsearch([1,1,2,2,3,3,4,4,5,5]) == 1\nassert \nsearch([1,1,2,2,3,3,4,4,5,5,1,1]) == 1\nassert \nsearch([2,2,2,2,2,2,2,2,2,2,2,2]) == 2\nassert \nsearch([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([1,1,3,3,5,4,4,3,2,3]) == 5\nassert    search([1,1,3,4,4,3,2,3]) == 3\n\n'''\nWrite a python program to check if a binary tree is a binary search tree or not.\n'''"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([1, 2, 3, 4, 5, 5]) == 5\nassert     search([1, 2, 3, 4, 5, 5, 5]) == 5\nassert     search([1, 2, 3, 4, 5, 6, 7, 9]) == 9\nassert     search([1, 2, 3, 4, 5, 5, 5]) == 5\nassert     search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([]) == None, \"Searching element not present in an empty array\"\nassert     search([1,2,3,4,5,1,2,3,4,5]) == 5, \"Searching element present twice\"\nassert     search([-5, -1, 1, 3, 3, 5, 2, 2, 4, 5]) == -1, \"Searching element not present\"\nassert     search([1,1,2,2,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5]) == 5, \"Searching element present more than once\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([1,1,2,2,3,4]) == 2, \"search failed\"\nassert     search([1,2,2,3,4]) == 2, \"search failed\"\nassert     search([]) == None, \"search failed\"\nassert     search([1,2,3,4,5,6]) == 5, \"search failed\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(1,2), (1,4), (-1, -3)]) == (1,4)\nassert     max_product_tuple([(1,2), (1,4), (-1, -3), (-1, -4)]) == (1,4)\nassert     max_product_tuple([(1,2), (1,4), (-1, -3), (-1, -4), (1,4)]) == (1,4)\nassert     max_product_tuple([(1,2), (1,4), (-1, -3), (-1, -4), (1,4)]) == (1,4)\nassert     max_product_tuple([(1,2), (1,4), (-1, -3), (-1, -4), (1,4), (1,2)]) == (1,4)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(1, 2), (4, 5), (3, 4)]) == (4, 5)\nassert     max_product_tuple([(1, 2), (4, 5), (3, 5)]) == (4, 5)\nassert     max_product_tuple([(1, 2), (4, 5), (3, 5)]) == (5, 5)\nassert     max_product_tuple([(1, 2), (4, 5), (3, 5), (4, 5), (5, 6), (5, 7)]) == (4, 5)\nassert     max_product_tuple([(1, 2), (4, 5), (3, 5), (4, 5), (5, 6), (5, 7)]) == (5, 6)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(1,2),(-3,5),(7,8),(8,7)]) == (7,8)\nassert     max_product_tuple([(1,2),(-2,3),(0,-7),(-5,5)]) == (2,3)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\n15\n(1, -1)\n(1, 2)\n(2, 3)\n(3, 4)\n(5, 6)\n(7, 8)\n(8, 9)\n(10, 11)\n(11, 12)\n(13, 14)\n(1, 2)\n(1, 3)\n(1, 5)\n(1, 6)\n(2, 3)\n(2, 4)\n(2, 5)\n(2, 6)\n(3, 4)\n(3, 5)\n(3, 6)\n(4, 5)\n(4, 6)\n(5, 6)\n(1, 2)\n(1, 3)\n(1, 5)\n(1, 6)\n(2, 3)\n(2, 4)\n(2, 5)\n(2, 6)\n(3, 4)\n(3, 5)\n(3, 6)\n(4, 5)\n(4, 6)\n(5, 6)\n(1, 2)\n(1, 3)\n(1, 5)\n(1, 6)\n(2, 3)\n(2, 4)\n(2, 5)\n(2, 6)\n(3, 4)\n(3, 5)\n(3, 6)\n(4, 5)\n(4, 6)\n(5, 6)\n(1, 2)\n(1, 3)\n(1, 5)\n(1, 6)\n(2, 3)\n(2, 4)\n(2, 5)\n(2, 6)\n(3, 4)\n(3, 5)\n(3, 6)\n(4, 5)\n(4, 6)\n(5, 6)\n'''\n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1:\n        max_product = max(list1)\n        max_product_index = list1.index(max_product)\n        max_product_1 = list1[max_product_index - 1]\n        max_product_2 = list1[max_product_index + 1]\n        if max_product_1 > 0 and max_product_2 > 0:\n            return max_product * max_product_1 * max_product_2\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(1, 2), (2, 4), (3, -2), (4, 8), (5, -10)]) == (2, 8)\nassert max_product_tuple([(1, 2), (2, 4), (3, -2), (4, 8), (5, -10)]) == (-2, 8)\nassert max_product_tuple([(1, 2), (2, 4), (3, -2), (4, 8), (5, -10)]) == (2, 4)\nassert max_product_tuple([(1, 2), (2, 4), (3, -2), (4, 8), (5, -10)]) == (2, 8)\nassert max_product_tuple([(1, 2), (2, 4), (3, -2), (4, 8), (5, -10)]) == (4, 8)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(1,2),(3,4),(5,6)]) == 6, 'Wrong'\nassert     max_product_tuple([(2,3),(4,5),(6,7)]) == 42, 'Wrong'\nassert     max_product_tuple([(-1,1),(0,-1)]) == -1, 'Wrong'\nassert     max_product_tuple([(1,2),(2,1)]) == 1, 'Wrong'\nassert     max_product_tuple([(0,2),(3,4),(5,6)]) == 12, 'Wrong'\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product_tuple([(1,2),(2,3),(3,4)]) ==     (2,3)\nassert max_product_tuple([(1,2),(2,3),(3,4)]) ==     (2,3)\nassert max_product_tuple([(1,2),(2,3),(3,4)]) ==     (2,3)\nassert max_product_tuple([(1,2),(3,4),(5,6)]) ==     (3,4)\nassert max_product_tuple([(1,2),(3,4),(5,6)]) ==     (3,4)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(max_product_tuple([(1,2),(3,4),(-1,-2),(3,-4),(5,-6)]))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_product_tuple([(2, -5), (3, 7), (4, -4), (1, 2), (-2, -8)]) == 8\nassert     max_product_tuple([(2, -5), (3, 7), (4, -4), (1, 2), (-2, -8)]) == -16\nassert     max_product_tuple([(2, -5), (3, 7), (4, -4), (1, 2), (-2, -8)]) == 16\nassert     max_product_tuple([(2, -5), (3, 7), (4, -4), (1, 2), (-2, -8)]) == 64\nassert     max_product_tuple([(2, -5), (3, 7), (4, -4), (1, 2), (-2, -8)]) == -64\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1,2), (-1,-2), (1,-2), (3,4), (-1,-2), (1,-2), (3,4)]) == (-1,-2)\nassert     max_product_tuple([(1,2), (-1,-2), (1,-2), (3,4), (-1,-2), (1,-2), (3,4)]) == (-1,-2)\nassert     max_product_tuple([(1,2), (-1,-2), (1,-2), (3,4), (-1,-2), (1,-2), (3,4)]) == (1,2)\nassert     max_product_tuple([(1,2), (-1,-2), (1,-2), (3,4), (-1,-2), (1,-2), (3,4)]) == (3,4)\nassert     max_product_tuple([(1,2), (-1,-2), (1,-2), (3,4), (-1,-2), (1,-2), (3,4)]) == (3,4)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(100) == 25, \"incorrect result\"\nassert     amicable_numbers_sum(1000) == 684, \"incorrect result\"\nassert     amicable_numbers_sum(10000) == 243, \"incorrect result\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\namicable_numbers_sum(1000) == 1201"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\namicable_numbers_sum(100)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(100) == 10, \"ValueError\"\nassert     amicable_numbers_sum(200) == 12, \"ValueError\"\nassert     amicable_numbers_sum(1000) == 233, \"ValueError\"\nassert     amicable_numbers_sum(10000) == 1047, \"ValueError\"\nassert     amicable_numbers_sum(1000000) == 14939, \"ValueError\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(100) == 153\nassert     amicable_numbers_sum(1000) == 1543\nassert     amicable_numbers_sum(10000) == 2857\nassert     amicable_numbers_sum(100000) == 28571\nassert     amicable_numbers_sum(1000000) == 28571\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(1000) == 516\nassert     amicable_numbers_sum(10000) == 1755\nassert     amicable_numbers_sum(1000000) == 3467\nassert     amicable_numbers_sum(10000000) == 1753\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert amicable_numbers_sum(10) == 32\nassert amicable_numbers_sum(20) == 51\nassert amicable_numbers_sum(100) == 233\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(1000) == sum(list(range(1, 1001)))\nassert     amicable_numbers_sum(10000) == sum(list(range(1, 10001)))\n\n'''\nWrite a Python function that determines whether a specified year is a leap year.\n'''\ndef leap_year(year):\n    '''\n    Write a function that determines whether a specified year is a leap year.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(1,2) == cmath.phase(complex(1,2))\nassert     angle_complex(3+4j,2-1j) == cmath.phase(complex(3,4))\nassert     angle_complex(3+4j,2-1j) == cmath.phase(complex(3,4))\nassert     angle_complex(2,1) == cmath.phase(complex(2,1))\nassert     angle_complex(2,1) == cmath.phase(complex(2,1))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(1.0,1.0) == 0.0\nassert     angle_complex(1.0,-1.0) == -0.0\nassert     angle_complex(1.0,-2.0) == math.pi\nassert     angle_complex(-1.0,1.0) == math.pi\nassert     angle_complex(-1.0,2.0) == math.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(0,0) == 0\nassert     angle_complex(1,0) == -1j\nassert     angle_complex(0,1) == -1\nassert     angle_complex(1,1) == 1\nassert     angle_complex(0,0.1) == 0.1j\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(1,2) == 1.04719755373045\nassert     angle_complex(1,1) == 1\nassert     angle_complex(0,1) == 1.5707963267948966\nassert     angle_complex(1,0) == 0\nassert     angle_complex(0,0) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    \ndef measure_triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     angle_complex(2,3) == 0.7853981633974483\nassert     angle_complex(-3,3) == -0.7853981633974483\nassert     angle_complex(3,3) == 0.7853981633974483\n\ndef are_equal_complex(a,b):\n    '''\n    Write a function to check whether two complex numbers are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert angle_complex(3,5) == 0\nassert angle_complex(1.5,-1.5) == -1\nassert angle_complex(-1,1) == 1\nassert angle_complex(0,0) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     angle_complex(1+3j,3+0j) == 0.7853981633974483\nassert     angle_complex(1+3j,3-0j) == 1.5707963267948966\nassert     angle_complex(2+0j,0-0j) == -1.5707963267948966\nassert     angle_complex(2+0j,1+0j) == -0.7853981633974483\nassert     angle_complex(-1+0j,0+0j) == -0.7853981633974483\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a < 0:\n        a *= -1\n    if b < 0:\n        b *= -1\n    angle = -a + b\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_length_range(binary_string, low, high):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_diff(string):\n    '''\n    Write a function to find the minimum number of changes required to be \n    made to a binary string, so that all of the 0s and all of the 1s are \n    presented in the string. \n\n    Note that no extra space is allowed.\n\n    Example 1:\n    Input: \"1101\"\n    Output: 1\n    Explanation: 1 change is required: \"1101\" -> \"11011\"\n    \n    Example 2:\n    Input: \"10101\"\n    Output: 2\n    Explanation: 2 changes are required: \"10101\" -> \"10110\" -> \"11001\" -> \"11011\"\n\n    Example 3:\n    Input: \"0001111\"\n    Output: 8\n    Explanation: 8 changes are required: \"0001111\" -> \"01001111\" -> \"11011111\" -> \"111000000\" -> \"11101111\" -> \"11001011\" -> \"11011011\" -> \"11010111\" -> \"11011101\" -> \"11011110\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_max_length(input):\n    '''\n    Given a binary string, find the maximum length of sub-string with the maximum number of 0s and 1s.\n    Input: String '1010101010110101'\n    Output: 4\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_length(\"01100011110010001\") == 10\nassert find_length(\"01101010110101\") == 10\nassert find_length(\"010011\") == 4\nassert find_length(\"0111\") == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_length(\"0101010110\") == 0 \nassert     find_length(\"1101010110\") == 1 \nassert     find_length(\"110101010\") == 1 \nassert     find_length(\"11010100110\") == 1 \nassert     find_length(\"11010100110\") == 1 \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length(\"101010110011\") == 6\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sub_string_with_longest_substring_of_1s(binary_string):\n    '''\n    Write a function to find the longest substring of 1s that is also a continuous sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum(1,2) == 3\nassert     sum(2,2) == 4\nassert     sum(1,2) == 3\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum(0,0) == 0\nassert     sum(0,1) == 0\nassert     sum(1,1) == 1\nassert     sum(1,2) == 1\nassert     sum(2,2) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum(10,20) == 30, \"10+20=30\""
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum(17, 10) == 6\nassert \nsum(6, 8) == 14\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sum(1,1)==0\nassert sum(3,3)==3\nassert sum(13,21)==2"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == '__main__':\n    arr = [(2, 5), (4, 5), (5, 5), (4, 7), (4, 9), (4, 10), (7, 15), (7, 20)]\n    for a,b in arr:\n        print(f\"sum of {a} and {b} = {sum(a,b)}\")\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum(5,4) == 5\nassert     sum(3,4) == 3\nassert     sum(100,1000) == 612"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (multiply_int(6, 4) == 24)\nassert     (multiply_int(-4, -4) == -16)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_int(123, 678) == 123 * 678\nassert     multiply_int(345, 'a') == 345 * 'a'\nassert     multiply_int(1, 'a') == 1 * 'a'\nassert     multiply_int('a', 'a') == 'a' * 'a'\n\ndef string_splosion(str):\n    '''\n    Write a function that returns the string constructed by \n    applying the string expansion method to a given string.\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    multiply_int(5,5) == 25, '5x5=25'\n    multiply_int(3,5) == 15, '3x5=15'\n    multiply_int(3,5) == 15, '3x5=15'\n    multiply_int(3,5) == 15, '3x5=15'\n    multiply_int(4,4) == 16, '4x4=16'\n    multiply_int(3,4) == 12, '3x4=12'\n    multiply_int(9,9) == 81, '9x9=81'\n    multiply_int(3,9) == 27, '3x9=27'\n    multiply_int(9,7) == 63, '9x7=63'\n    multiply_int(9,7) == 63, '9x7=63'\n    multiply_int(7,9) == 63, '7x9=63'\n    multiply_int(9,7) == 63, '9x7=63'\n    multiply_int(9,3) == 63, '9x3=63'\n    multiply_int(9,3) == 63, '9x3=63'\n    multiply_int(1,9) == 9, '1x9=9'\n    multiply_int(2,9) == 18, '2x9=18'\n    multiply_int(8,9) == 72, '8x9=72'\n    multiply_int(2,8) == 16, '2x8=16'\n    multiply_int(1,2) == 2, '1x2=2'\n    multiply_int(1,2) == 2, '1x2=2'\n    multiply_int(1,1) == 1, '1x1=1'\n    multiply_int(1,1) == 1, '1x1=1'\n    multiply_int(2,1) == 2, '2x1=2'\n    multiply_int(2,1) == 2, '2x1=2'\n    multiply_int(2,2) == 4, '2x2=4'\n    multiply_int(2,2) == 4, '2x2=4'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    multiply_int(9,5) == 45, '9x5=45'\n    mul"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(-1, -1) == -2\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    multiply_int(3, 4) == 12\n    multiply_int(0, 5) == 0\n    multiply_int(3, -4) == -12\n    multiply_int(-3, 4) == 12\n    multiply_int(-3, -4) == 12\n    multiply_int(0, 0) == 0"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (multiply_int(12, 34) == 3444)\nassert     (multiply_int(100, 12) == 120000)\n\nprint('Test pass')\nprint()\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_int(2,3) == 6\nassert     multiply_int(3,2) == 6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert multiply_int(2, 2) == 4\nassert multiply_int(-2, 3) == -6\nassert multiply_int(2, -3) == -6\nassert multiply_int(0, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef subtract_int(x, y):\n    '''\n    Write a function to subtract two integers.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlong_words(1, ['hello', 'world']) == ['hello', 'world']\nlong_words(2, ['hello', 'world']) == ['world']\nlong_words(5, ['hello', 'world']) == []\nlong_words(6, ['hello', 'world']) == []\nlong_words(5, ['hello', 'world', 'goodbye', 'hello']) == ['hello', 'goodbye']\nlong_words(5, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello']\nlong_words(5, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello']\nlong_words(5, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello']\nlong_words(4, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello']\nlong_words(4, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']\nlong_words(4, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']\nlong_words(4, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']\nlong_words(3, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello', 'hello']\nlong_words(3, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello', 'hello', 'hello']\nlong_words(2, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello']\nlong_words(2, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello', 'hello']\nlong_words(1, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello']\nlong_words(1, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == ['hello', 'goodbye', 'hello']\nlong_words(0, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(0, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(6, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(6, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(5, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(5, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(4, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(4, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(3, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(3, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(2, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(2, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(1, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == []\nlong_words(1, ['hello', 'world', 'goodbye', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello']"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(4, [\"mold\", \"lung\", \"news\", \"strategy\"]) == ['news']\nassert     long_words(4, [\"good\", \"mold\", \"mould\", \"mouldy\", \"lung\"]) == ['mold','mould','mouldy', 'lung']\nassert     long_words(4, [\"lung\", \"news\", \"strategy\"]) == []\nassert     long_words(1, [\"good\"]) == ['good']\nassert     long_words(4, [\"mold\", \"strategy\"]) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(4, [\"purple\", \"multiverse\", \"zoo\"]) == ['zoo']\nassert     long_words(5, [\"purple\", \"multiverse\", \"zoo\"]) == ['multiverse']\nassert     long_words(2, [\"purple\", \"multiverse\", \"zoo\"]) == []\nassert     long_words(1, [\"purple\", \"multiverse\", \"zoo\"]) == ['purple']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert long_words(6, [\"python\", \"is\", \"simple\", \"and\", \"trivial\"]) == [\"python\", \"is\", \"simple\"]\nassert long_words(5, [\"python\", \"is\", \"simple\", \"and\", \"trivial\"]) == [\"python\", \"is\", \"simple\", \"and\"]\nassert long_words(4, [\"python\", \"is\", \"simple\", \"and\", \"trivial\"]) == [\"python\", \"is\", \"simple\", \"and\"]\nassert long_words(3, [\"python\", \"is\", \"simple\", \"and\", \"trivial\"]) == [\"python\", \"is\", \"simple\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     long_words(2,[\"a\",\"bb\",\"aa\"]) == [\"aa\"]\nassert     long_words(1,[\"a\",\"bb\",\"aa\"]) == [\"aa\"]\nassert     long_words(10,[\"a\",\"bb\",\"aa\",\"dddd\",\"ccc\"]) == [\"dddd\",\"ccc\"]\nassert     long_words(10,[\"a\",\"bb\",\"aa\",\"dddd\",\"ccc\"]) == [\"dddd\",\"ccc\"]\nassert     long_words(5,[\"a\",\"bb\",\"aa\",\"dddd\",\"ccc\"]) == [\"dddd\",\"ccc\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     long_words(2, ['ab', 'a', 'xy', 'xyz', 'abc']) == ['xy', 'xyz']\nassert long_words(1, ['a', 'a', 'a', 'a', 'b', 'c', 'b', 'a']) == ['a', 'b', 'a']\nassert long_words(3, ['a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a']\nassert long_words(2, ['a', 'a', 'b', 'c', 'd', 'a']) == ['a', 'a', 'b', 'c']\nassert long_words(4, ['a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     long_words(1, [\"Hello\", \"world\"])    == [\"world\"]\nassert     long_words(2, [\"Hello\", \"world\"])    == [\"world\"]\nassert     long_words(3, [\"Hello\", \"world\"])    == []\nassert     long_words(4, [\"Hello\", \"world\"])    == [\"world\"]\nassert     long_words(5, [\"Hello\", \"world\"])    == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nGiven a m x n matrix and an integer x, how many elements will be smaller than x in matrix?\n'''\n\ndef magic_square_in_matrix(my_matrix, x):\n    '''\n    Write a function to count how many numbers in the matrix is smaller than x.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == True, \"Not magic square\"\nassert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 0]]) == False, \"Not magic square\"\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == False, \"Not magic square\"\nassert     magic_square_test([[0, 0, 0],\n                            [0, 0, 0],\n                            [0, 0, 0]]) == True, \"Empty matrix\""
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(magic_square_test([[8,3,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],[2,6,4]]))\nprint(magic_square_test([[3,8,4],[1,5,9],[6,7,2]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[8,3,4],[1,5,9],[2,7,6]]))\nprint(magic_square_test([[4,9,2],[3,5,7],[8,1,6]]))\nprint(magic_square_test([[9,8,1],[3,7,5],["
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert magic_square_test([[4, 9, 2],\n                          [3, 5, 7],\n                          [8, 1, 6]]) == True, 'Test 1: Test case failed'\nassert magic_square_test([[4, 2, 3],\n                          [8, 5, 1],\n                          [7, 6, 9]]) == False, 'Test 2: Test case failed'\nassert magic_square_test([[1, 1, 1, 1, 1, 1],\n                          [1, 1, 1, 1, 1, 1],\n                          [1, 1, 1, 1, 1, 1],\n                          [1, 1, 1, 1, 1, 1],\n                          [1, 1, 1, 1, 1, 1],\n                          [1, 1, 1, 1, 1, 1]]) == True, 'Test 3: Test case failed'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     magic_square_test([\n        [4, 9, 2],\n        [3, 5, 7],\n        [8, 1, 6]\n    ]) == False, \"Should be False\"\nassert     magic_square_test([\n        [4, 9, 2],\n        [3, 5, 7],\n        [8, 1, 6],\n        [2, 7, 6]\n    ]) == True, \"Should be True\"\nassert     magic_square_test([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]) == False, \"Should be False\"\nassert     magic_square_test([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [2, 3, 4]\n    ]) == False, \"Should be False\""
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_occurrences([1,2,2,4,4,4,5,5,5,6,6,7,7]) == 7\nassert     max_occurrences([1,1,2,2,3,4,5]) == 1\nassert     max_occurrences([]) == None\nassert     max_occurrences([1,1,1,1]) == 1\n\n'''\nCode:\ndef max_occurrences(nums):\n    if len(nums) == 0:\n        return None\n    freq_map = defaultdict(lambda:0)\n    for num in nums:\n        freq_map[num] += 1\n    max_val = -1\n    for key, val in freq_map.items():\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_occurrences([1, 2, 2, 3, 3, 3, 4]) == 3, max_occurrences([1, 2, 2, 3, 3, 3, 4])\nassert     max_occurrences([2, 2, 2, 2]) == 2, max_occurrences([2, 2, 2, 2])\nassert     max_occurrences([]) == None, max_occurrences([])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_occurrences([1,2,3,3,4,1,1,1,1,1,1,1,1,2,3]) == 1\nassert     max_occurrences([1,2,3,3,4,1,1,1,1,1,1,1,1,2,3,1,3,4,1]) == 4\nassert     max_occurrences([1,2,3,3,4,1,1,1,1,1,1,1,1,2,3,1,3,4,1,3,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,1,3,4,1]) == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_occurrences([1,2,3,3,3,3]) == 3\nassert max_occurrences([1,1,1,1,1,1]) == 1\nassert max_occurrences([1,2,3,1,2,1]) == 2\n\n'''\nYou are given an array of integers. Find out if the array contains any \nduplicates.\n\nInput:\nThe first line of input contains an integer T denoting the number of test \ncases. Then T test cases follow. Each test case consists of two lines. \nThe first line of each test case is N and M, where N is the size of the array. \nThen in the next line are N space separated values of the array.\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # find the maximum occurence in nums\n    # return the item with maximum occurence\n    return max(nums,key=nums.count)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnums = [10,9,8,7,6,5,4,3,2,1]\nassert max_occurrences(nums) == 1\nassert max_occurrences([]) == -1\n\ndef max_occurrences_optimized(nums):\n    '''\n    Use another hashmap to track the number of occurances for each number.\n    '''\n    pass"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 5]) == 3\nassert max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 5]) == 3\nassert max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 5]) == 3\nassert max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 5]) == 3\nassert max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 5]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_occurrences([1,2,2,3,3,3,3,3]) == 3\nassert max_occurrences([1,2,3,3,3]) == 1\nassert max_occurrences([1,1,1,1,1]) == 1\nassert max_occurrences([1,2,3,3,3,3,3,4,5]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_occurrences2(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_vowels(\"harry\") == \"hhryr\", \"Should return hhhryr\"\nassert     reverse_vowels(\"sunny\") == \"nunys\", \"Should return nunys\"\nassert     reverse_vowels(\"was it a car or a cat I saw\") == \"it acar saw it cay ran\", \"Should return it acar saw it cay ran\"\nassert     reverse_vowels(\"we go to heaven and hell and so forth\") == \"we go to heave nd heavn and othr\", \"Should return we go to heave nd heavn and othr\"\nassert     reverse_vowels(\"z\") == \"z\", \"Should return z\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels('There is an apple') == 'elppa anwa', 'Should be elppa anwa'\nassert     reverse_vowels('There is an apple') == 'elppa pana', 'Should be elppa pana'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_vowels('Hello') == 'holle'\nreverse_vowels('Hello World!') == '!olleH'\nreverse_vowels('aeiou') == 'uoiea'\n\ndef reverse_vowels2(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef palindrome(str1):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"Should be 'holle'\"\nassert     reverse_vowels(\"hello world\") == \"dlrow olleh\", \"Should be 'dlrow olleh'\"\nassert     reverse_vowels(\"Hello World\") == \"World Hello\", \"Should be 'World Hello'\"\nassert     reverse_vowels(\"1a2e5x\") == \"e1x5a2\", \"Should be 'e1x5a2'\"\nassert     reverse_vowels(\"3z5h4h\") == \"h4z5h3\", \"Should be 'h4z5h3'\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_vowels( 'hello' ) == 'holle'\nassert     reverse_vowels( 'Programming' ) == 'grogramming'\nassert     reverse_vowels( 'Happy') == 'yippah'\nassert     reverse_vowels( 'I love Python') == 'doPython'\nassert     reverse_vowels( 'A man, a plan, a canal: Panama') == 'amanaPnalcanal'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('rrr') == 'rrl'\nassert     reverse_vowels('python') == 'thonpy'\nassert     reverse_vowels('a') == 'a'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nstr1 = \"this is a string\"\nassert reverse_vowels(str1) == \"ti sasrn eguht si sihT\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels(\"hello world\") == \"dlrow olleh\", \"Wrong\"\nassert     reverse_vowels(\"pythony\") == \"yhtiop\", \"Wrong\"\nassert     reverse_vowels(\"hgfdjfl\") == \"fghdljk\", \"Wrong\"\nassert     reverse_vowels(\"hello\") == \"ehllo\", \"Wrong\""
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntup = (1,2,3,4,5,6)\nassert tup_string(tup) == '12345'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tup_string(('ABC','DEF','GHI')) == 'ABCDEFGHI'\nassert     tup_string(('1','2','3')) == '123'\nassert     tup_string(('a','b','c')) == 'abc'"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string((1, 2, 3)) == \"123\", \"Wrong!\"\nassert     tup_string((1, '2', 3)) == \"123\", \"Wrong!\"\nassert     tup_string((1, '2', 3.0)) == \"123.0\", \"Wrong!\"\nassert     tup_string((1, False, '2', 3)) == \"123\", \"Wrong!\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string((1, 2, 3, 4, 5, 6)) == \"1, 2, 3, 4, 5, 6\", tup_string((1, 2, 3, 4, 5, 6))\nassert     tup_string((1, 2, 3)) == \"1, 2, 3\", tup_string((1, 2, 3))\nassert     tup_string((1, 2)) == \"1, 2\", tup_string((1, 2))\nassert     tup_string((1,)) == \"1\", tup_string((1,))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((1, 2, 3)) == \"123\" \nassert     tup_string((1, 2, 3, 4)) == \"1234\"\nassert     tup_string((1, 2, 3, 4, 5)) == \"12345\"\nassert     tup_string((1, 2, 3, 4, 5, 6)) == \"123456\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string((1,2,3,4)) == \"1,2,3,4\", 'tup_string'\nassert     tup_string((1)) == \"1\", 'tup_string'\nassert     tup_string(()) == \"\", 'tup_string'\nassert     tup_string((1,)) == \"1,\", 'tup_string'\nassert     tup_string((1,2,3)) == \"1,2,3\", 'tup_string'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    tup_string((1,2,3)) == \"1, 2, 3\", 'WRONG'\n    tup_string((1,2,3,\"abc\")) == \"1, 2, 3, abc\", 'WRONG'\n    tup_string((1,2,3,\"abc\", \"xyz\")) == \"1, 2, 3, abc, xyz\", 'WRONG'\n    tup_string((1,)) == \"1\", 'WRONG'\n    tup_string(()) == \"\", 'WRONG'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((1,2,3)) == \"1 2 3\", \"Should be (1, 2, 3)\"\nassert tup_string((0,1,2)) == \"0 1 2\", \"Should be (0, 1, 2)\"\nassert tup_string(()) == \"\", \"Should be ()\"\nassert tup_string((0,)) == \"0\", \"Should be (0,)\"\nassert tup_string((0,1)) == \"0 1\", \"Should be (0, 1)\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tup_string((1, 2)) == \"1,2\"\nassert     tup_string((0,)) == \"\"\nassert     tup_string((2, 4)) == \"2,4\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    sum_negativenum([-5, -4, -3, -2, -1]) == 1\n    sum_negativenum([0, 0, 0, 0, 0]) == 0\n    sum_negativenum([-2, -3, -5, -7]) == -1\n    sum_negativenum([-1, -2, -3, -5, -7]) == -6\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7]) == -2\n    sum_negativenum([-2, -3, -5, -7, -9]) == -8\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -9]) == -10\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -12\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -15\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == -18\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == -21\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == -25\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == -28\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == -31\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]) == -34\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]) == -37\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]) == -40\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == -43\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -46\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]) == -49\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]) == -52\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]) == -55\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24]) == -58\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]) == -61\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26]) == -64\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27]) == -67\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28]) == -70\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29]) == -73\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30]) == -76\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31]) == -79\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32]) == -82\n    sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([1, -4, 5, -6, 7, -8, 9, -10]) == -1\nassert     sum_negativenum([2, -3, -4, 5, -6, 7, 8, -9]) == -11\nassert     sum_negativenum([-1, 2, -3, 4, -5, 6, -7, 8, -9]) == -13\nassert     sum_negativenum([-10, -1, 2, -3, 4, -5, 6, -7, 8, -9]) == -23\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_negativenum([1,-2,3,-4,-5]) == 1\nassert     sum_negativenum([-1,-2,3,-4,-5]) == -1\nassert     sum_negativenum([1,-2,3,4,5]) == -2\nassert     sum_negativenum([-1,-2,3,4,5,-6]) == -3\nassert     sum_negativenum([1,-2,3,4,5,6,7,8,9,10]) == -10\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsum_negativenum([1, -2, 3, -4]) == -1\nsum_negativenum([1, 2, 3, -4, -5]) == -6\nsum_negativenum([-1, -2, 3, -4]) == -5\nsum_negativenum([-1, 2, 3, -4, -5]) == -6\nsum_negativenum([1, 2, 3, -4]) == -5\nsum_negativenum([-1, 2, 3, -4, 5]) == -6\nsum_negativenum([-1, 2, 3, -4, -5, -6]) == -7\nsum_negativenum([1, 2, 3, -4, -5, -6]) == -7\nsum_negativenum([-1, 2, 3, 4, 5, 6]) == 13\nsum_negativenum([-1, -2, 3, 4, -5, 6]) == 7\nsum_negativenum([1, -2, 3, 4, -5, 6]) == 9\nsum_negativenum([-1, -2, 3, 4, -5, -6]) == 7"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    s = sum_negativenum([1,2,-3,4])\n    assert s == -1, \"should be -1\"\n    \n    s = sum_negativenum([1,-2,3,-4,5])\n    assert s == -10, \"should be -10\"\n    \n    s = sum_negativenum([1,-2,3,-4,5,-6,7,-8,9,10])\n    assert s == -50, \"should be -50\"\n    \n    s = sum_negativenum([1,-2,3,-4,5,-6,7,-8,9,10,-11,12,13,-14,-15,-16,-17,18,19])\n    assert s == -155, \"should be -155\"\n    \n    s = sum_negativenum([1,-2,3,-4,5,-6,7,-8,9,10,11,-12,13,-14,-15,-16,-17,18,19,20])\n    "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([1,2,-3,4]) == -1\nassert     sum_negativenum([1,-2,-3,4]) == -1\nassert     sum_negativenum([1,2,-3,4,-5,-6]) == -15\nassert     sum_negativenum([1,-2,-3,4,5,-6]) == -12\nassert     sum_negativenum([-1,-2,-3,-4,-5,-6]) == -21\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sum_positivenum(nums):\n    '''\n    Write a function to calculate the sum of the positive numbers of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([-2, -1, -4, -5]) == -7\nassert     sum_negativenum([-2, -4, -5, -3, -2]) == -5\nassert     sum_negativenum([-1, -1, -2, -3, -4, -5, -6]) == -13\nassert     sum_negativenum([-1, -3, -5, -7, -9, -11, -13, -15]) == -22\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, -392, -393, -394, -395, -396, -397, -398, -399, -400, -401, -402, -403, -404, -405, -406, -407, -408, -409, -410, -411, -412, -413, -414, -415, -416, -417, -418, -419, -420, -421, -422, -423, -424, -425, -426, -427, -428, -429, -430, -431, -432, -433, -434, -435, -436, -437, -438, -439, -440, -441, -442, -443, -444, -445, -446, -447, -448, -449, -450, -451, -452, -453, -454, -455, -456, -457, -458, -459, -460, -461, -462, -463, -464, -465, -466, -467, -468, -469, -470, -471, -472, -473, -474, -475, -476, -477, -478, -479, -480, -481, -482, -483, -484, -485, -486, -487, -488, -489, -490, -491, -492, -493, -494, -495, -496, -497, -498, -499, -500, -501, -502, -503, -504, -505, -506, -507, -508, -509, -510, -511, -512, -513, -514, -515, -516, -517, -518, -519, -520, -521, -522, -523, -524, -525, -526, -527, -528, -529, -530, -531, -532, -533, -534, -535, -536, -537, -538, -539, -540, -541, -542, -543, -544, -545, -546, -547, -548, -549, -550, -551, -552, -553, -554, -555, -556, -557, -558, -559, -560, -561, -562, -563, -564, -565, -566, -567, -568, -569, -570, -571, -572, -573, -574, -575, -576, -577, -578, -579, -580, -581, -582, -583, -584, -585, -586, -587, -588, -589, -590, -591, -592, -593, -594, -595, -596, -597, -598, -599, -600, -601, -602, -603, -604, -605, -606, -607, -608, -609, -610, -611, -612, -613"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     hexagonal_num(1) == 1, \"Wrong\"\nassert     hexagonal_num(3) == 3, \"Wrong\"\nassert     hexagonal_num(5) == 8, \"Wrong\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     hexagonal_num(1)==1\nassert     hexagonal_num(3)==5\nassert     hexagonal_num(7)==37\nassert     hexagonal_num(9)==259\nassert     hexagonal_num(13)==393\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"1. Testing for the correctness of hexagonal_num():\")\nif hexagonal_num(1) == 1:\n    print(\"\u2714 Test 1: Passed\")\nelse:\n    print(\"\u2718 Test 1: Failed\")\n\nassert hexagonal_num(2) == 3\nassert hexagonal_num(3) == 5\nassert hexagonal_num(4) == 7\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nhexagonal_num(4) == 12\nhexagonal_num(3) == 11\nhexagonal_num(2) == 10\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef make_list_of_lists(n):\n    '''\n    Write a function to return a list of lists with n rows and m columns, with the numbers 1 to n*m. \n    e.g. the return value of make_list_of_lists(3) would be:\n    [[1,2,3], [4,5,6], [7,8,9]]\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(hexagonal_num(1)) # 1\nprint(hexagonal_num(4)) # 5\nprint(hexagonal_num(8)) # 21\nprint(hexagonal_num(10)) # 301\nprint(hexagonal_num(20)) # 104700\n\n'''\n[ \n    1\n    5\n    21\n    301\n    104700\n]\n'''"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nhexagonal_num(0) == 1\nhexagonal_num(1) == 3\nhexagonal_num(2) == 5\nhexagonal_num(3) == 7\nhexagonal_num(4) == 9\nhexagonal_num(5) == 11\nhexagonal_num(6) == 13\nhexagonal_num(7) == 15\nhexagonal_num(8) == 17\nhexagonal_num(9) == 19\nhexagonal_num(10) == 21\nhexagonal_num(11) == 23\nhexagonal_num(12) == 25\nhexagonal_num(13) == 27\nhexagonal_num(14) == 29\nhexagonal_num(15) == 31\nhexagonal_num(16) == 33\nhexagonal_num(17) == 35\nhexagonal_num(18) == 37\nhexagonal_num(19) == 39\nhexagonal_num(20) == 41\nhexagonal_num(21) == 43\nhexagonal_num(22) == 45\nhexagonal_num(23) == 47\nhexagonal_num(24) == 49\nhexagonal_num(25) == 51\nhexagonal_num(26) == 53\nhexagonal_num(27) == 55\nhexagonal_num(28) == 57\nhexagonal_num(29) == 59\nhexagonal_num(30) == 61\nhexagonal_num(31) == 63\nhexagonal_num(32) == 65\nhexagonal_num(33) == 67\nhexagonal_num(34) == 69\nhexagonal_num(35) == 71\nhexagonal_num(36) == 73\nhexagonal_num(37) == 75\nhexagonal_num(38) == 77\nhexagonal_num(39) == 79\nhexagonal_num(40) == 81\nhexagonal_num(41) == 83\nhexagonal_num(42) == 85\nhexagonal_num(43) == 87\nhexagonal_num(44) == 89\nhexagonal_num(45) == 91\nhexagonal_num(46) == 93\nhexagonal_num(47) == 95\nhexagonal_num(48) == 97\nhexagonal_num(49) == 99\nhexagonal_num(50) == 101\nhexagonal_num(51) == 103\nhexagonal_num(52) == 105\nhexagonal_num(53) == 107\nhexagonal_num(54) == 109\nhexagonal_num(55) == 111\nhexagonal_num(56) == 113\nhexagonal_num(57) == 115\nhexagonal_num(58) == 117\nhexagonal_num(59) == 119\nhexagonal_num(60) == 121\nhexagonal_num(61) == 123\nhexagonal_num(62) == 125\nhexagonal_num(63) == 127\nhexagonal_num(64) == 129\nhexagonal_num(65) == 131\nhexagonal_num(66) == 133\nhexagonal_num(67) == 135\nhexagonal_num(68) == 137\nhexagonal_num(69) == 139\nhexagonal_num(70) == 141\nhexagonal_num(71) == 143\nhexagonal_num(72) == 145\nhexagonal_num(73) == 147\nhexagonal_num(74) == 149\nhexagonal_num(75) == 151\nhexagonal_num(76) == 153\nhexagonal_num(77) == 155\nhexagonal_num(78) == 157\nhexagonal_num(79) == 159\nhexagonal_num(80) == 161\nhexagonal_num(81) == 163\nhexagonal_num(82) == 165\nhexagonal_num(83) == 167\nhexagonal_num(84) == 169\nhexagonal_num(85) == 171\nhexagonal_num(86) == 173\nhexagonal_num(87) == 175\nhexagonal_num(88) == 177\nhexagonal_num(89) == 179\nhexagonal_num(90) == 181\nhexagonal_num(91) == 183\nhexagonal_num(92) == 185\nhexagonal_num(93) == 187\nhexagonal_num(94) == 189\nhexagonal_num(95) == 191\nhexagonal_num(96) == 193\nhexagonal_num(97) == 195\nhexagonal_num(98) == 197\nhexagonal_num(99) == 199\nhexagonal_num(100) == 201\n\ndef hexagonal_num_2(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     hexagonal_num(4) == 28\nassert     hexagonal_num(10) == 144\nassert     hexagonal_num(16) == 225\nassert     hexagonal_num(100) == 502500\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert zero_count([1,0,0,0,0]) == 1\nassert zero_count([1,1,0,0,0]) == 3\nassert zero_count([0,0,0,0,0]) == 5\nassert zero_count([1,0,1,0,0]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_zero(nums):\n    '''\n    Write a function to count the number of zeroes in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_0s_1s(nums):\n    '''\n    Write a function to count the number of zeros, ones, and fives in a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     zero_count([1,3,0,5,0,0]) == 0.625\nassert     zero_count([1,3,0,5,0,1]) == 0.75\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert zero_count([0, 0, 1, 1, 1, 0]) == 0.25\nassert zero_count([0, 0, 0, 1, 1, 0]) == 0.5\nassert zero_count([0, 0, 0, 1, 1, 1]) == 0.75\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nzero_count([0,0,0,1,1,1]) == 0.2\n\ndef longest_consecutive(nums):\n    '''\n    Write a function to find the length of the longest consecutive sequence of a given array.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([0, 0, 1, 0, 1, 2, 0, 1]) == 1/6\nassert     zero_count([1, 1, 1, 1, 1, 0, 0, 0]) == 3/9\nassert     zero_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 4/37\nassert     zero_count([0, 0, 1, 1, 1, 1, 1, 1]) == 2/12\nassert     zero_count([0, 0, 0, 0, 1, 1, 1, 1]) == 6/17\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     zero_count([1,0,0]) == 0.5\nassert     zero_count([0,0,0,0]) == 0.0\nassert     zero_count([0,0,0,1]) == 0.25\nassert     zero_count([1,0,0,0]) == 1\nassert     zero_count([1,0,1,0]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     zero_count([0,1,0,0,1]) == 0.25\nassert     zero_count([1,0,0,1]) == 0.5\nassert     zero_count([1,0,0,0,1]) == 0.25\nassert     zero_count([0,0,0,0,1]) == 0.5\nassert     zero_count([0,0,0,1]) == 1.0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(11) == True, \"is_Sum_Of_Powers_Of_Two function is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(15) == True, \"is_Sum_Of_Powers_Of_Two function is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(2) == True, \"is_Sum_Of_Powers_Of_Two function is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(4) == False, \"is_Sum_Of_Powers_Of_Two function is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(12) == False, \"is_Sum_Of_Powers_Of_Two function is incorrect\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2**11 + 2**9 + 2**7) is True \nassert     is_Sum_Of_Powers_Of_Two(2**11 + 2**8 + 2**7) is False \nassert     is_Sum_Of_Powers_Of_Two(2**11 + 2**6 + 2**7) is False \nassert     is_Sum_Of_Powers_Of_Two(2**11 + 2**5 + 2**7) is False \nassert     is_Sum_Of_Powers_Of_Two(2**11 + 2**4 + 2**7) is False \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == False\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(7) == True\nassert     is_Sum_Of_Powers_Of_Two(8) == False\nassert     is_Sum_Of_Powers_Of_Two(16) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(1) == False, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(2) == True, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(3) == False, 'Wrong Answer'\nassert     is_Sum_Of_Powers_Of_Two(4) == True, 'Wrong Answer'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(4) == True\nis_Sum_Of_Powers_Of_Two(5) == False\nis_Sum_Of_Powers_Of_Two(2) == True\nis_Sum_Of_Powers_Of_Two(6) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False, \\\n        \"is_Sum_Of_Powers_Of_Two(0) is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(1) == False, \\\n        \"is_Sum_Of_Powers_Of_Two(1) is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(2) == True, \\\n        \"is_Sum_Of_Powers_Of_Two(2) is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(3) == True, \\\n        \"is_Sum_Of_Powers_Of_Two(3) is incorrect\"\nassert     is_Sum_Of_Powers_Of_Two(4) == False, \\\n        \"is_Sum_Of_Powers_Of_Two(4) is incorrect\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True, \"Test case 0 failed.\"\nassert     is_Sum_Of_Powers_Of_Two(1) == False, \"Test case 1 failed.\"\nassert     is_Sum_Of_Powers_Of_Two(2) == True, \"Test case 2 failed.\"\nassert     is_Sum_Of_Powers_Of_Two(3) == False, \"Test case 3 failed.\"\nassert     is_Sum_Of_Powers_Of_Two(4) == True, \"Test case 4 failed.\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # keep this function call here\n    print(is_Sum_Of_Powers_Of_Two(100))\n    print(is_Sum_Of_Powers_Of_Two(128))\n    print(is_Sum_Of_Powers_Of_Two(10))"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True, \"0 is not a Sum_Of_Powers_Of_Two\"\nassert     is_Sum_Of_Powers_Of_Two(2) == True, \"2 is not a Sum_Of_Powers_Of_Two\"\nassert     is_Sum_Of_Powers_Of_Two(5) == False, \"5 is a Sum_Of_Powers_Of_Two\"\nassert     is_Sum_Of_Powers_Of_Two(6) == True, \"6 is a Sum_Of_Powers_Of_Two\"\nassert     is_Sum_Of_Powers_Of_Two(7) == True, \"7 is a Sum_Of_Powers_Of_Two\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(0)     == math.pi * 2\nassert     circle_circumference(1)     == math.pi * 4\nassert     circle_circumference(2)     == math.pi * 6\nassert     circle_circumference(3)     == math.pi * 8\nassert     circle_circumference(4)     == math.pi * 10\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # the output is correct and return float\nassert\n    # the function is correct\nassert \n    # the circumference is correct\nassert\n    # the value is not equal to zero\nassert\n    # the value is between 1 and 10\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert circle_circumference(0) == 0\nassert circle_circumference(1) == 2*math.pi\nassert circle_circumference(2) == 2*math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circle_circumference(3) == 12.566370614359172\nassert     circle_circumference(0) == 0\nassert     circle_circumference(1) == math.pi * 2\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circle_circumference(1) == pi*2, \"incorrect\"\nassert     circle_circumference(2) == pi*4, \"incorrect\"\nassert     circle_circumference(3) == pi*6, \"incorrect\"\nassert     circle_circumference(4) == pi*8, \"incorrect\"\nassert     circle_circumference(5) == pi*10, \"incorrect\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncircle_circumference(1) == 3.141592653589793\nassert \ncircle_circumference(2) == 6.283185307179586\nassert \ncircle_circumference(3) == 12.566370614359172\nassert \ncircle_circumference(4) == 22.13386814518398\nassert \ncircle_circumference(5) == 32.13386814518398\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    circle_circumference(5) == 30.461538461538453\nassert \n    circle_circumference(5.2) == 34.10864\nassert \n    circle_circumference(7) == 42.812489375\nassert \n    circle_circumference(0) == 0\nassert \n    circle_circumference(1) == 1.5707963267948966\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     circle_circumference(2) ==     4.749999999999998\nassert     circle_circumference(3) ==     6.2800000000000006\nassert     circle_circumference(0) ==     0\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_list = [[1,2,3], [4,5,6], ['a','b','c']]\nassert extract_singly(test_list) == {1,2,3,4,5,6, 'a','b','c'}"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly(list_test1) == output_test1\nassert     extract_singly(list_test2) == output_test2\nassert     extract_singly(list_test3) == output_test3\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6], \"Wrong!\"\nassert     extract_singly([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6], \"Wrong!\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[1, 2], [3, 4, 5], [6, 7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     extract_singly([[1, 2], [3, 4, 5, 6, 7], [8, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     extract_singly([[1, 2], [3, 4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_singly([[1], [2], [3]]) == [1, 2, 3]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_list = [[1,2,3],[4,5,6]]\n    extract_singly(test_list)\n    \n    assert extract_singly(test_list) == {1,2,3,4,5,6}\n    \n    \n    test_list = [[1,2,3],[4,5,6,7]]\n    extract_singly(test_list)\n    \n    assert extract_singly(test_list) == {1,2,3,4,5,6,7}\n    \n    \n    test_list = [[1,2,3,4,5,6,7]]\n    extract_singly(test_list)\n    \n    assert extract_singly(test_list) == {1,2,3,4,5,6,7}\n    \n    \n    test_list = [[1,2,3,4,5,6,7],[8,9,10]]\n    extract_singly(test_list)\n    \n    "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly([[1, 2, 3, 4], [5, 6, 7, 8]])     ==  {1, 2, 3, 4, 5, 6, 7, 8}\nassert extract_singly([[1, 2, 3, 4]])     ==  {1, 2, 3, 4}\nassert extract_singly([[1], [2], [3]])     ==  {1, 2, 3}\nassert extract_singly([[1, 2, 3, 4], [5, 6]])     ==  {1, 2, 3, 4, 5, 6}\nassert extract_singly([[1, 2], [3, 4], [5, 6]])     ==  {1, 2, 3, 4, 5, 6}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1, 2, 3], [[4, 5], 6, 7], [[8], 9, 10, 11]]) == set([1,2,3,4,5,6,7,8,9,10,11])\nassert     extract_singly([[[1]], [[2, 3]], [[4, 5], 6, 7]]) == set([1,2,3,4,5,6,7])\nassert     extract_singly([[[1], 2, 3, 4, 5, 6, 7, 8], [[9], 10, 11]]) == set([1,2,3,4,5,6,7,8,9,10,11])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[1,2,3],\n    [1,2],\n    [1,2]]) == {1,2,3,1,2,1,2}\nassert     extract_singly([[1,2,3],\n    [1,2],\n    [1,2]]) == {1,2,3,1,2,1,2}\nassert     extract_singly([[1,2,3],\n    [1,2],\n    [1,2]]) == {1,2,3,1,2,1,2}\nassert     extract_singly([[1,2,3],\n    [1,2],\n    [1,2]]) == {1,2,3,1,2,1,2}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_singly([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]\nassert     extract_singly([[1,2,3,4],[5,6,7,8]]) == [1,2,3,4,5,6,7,8]\nassert     extract_singly([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert     extract_singly([[1,2,3,4,5,6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2,3,4,5,6,7,8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[[1], 2], 3, 4]) == [1, 2, 3, 4], 'Wrong'\nassert     extract_singly([[[1], 2], [[3], 4], 5]) == [1, 2, 3, 4, 5], 'Wrong'\nassert     extract_singly([[[[1], 2], 3], 4, 5]) == [1, 2, 3, 4, 5], 'Wrong'\nassert     extract_singly([[[[1], 2], 3], 4, 5]) == [1, 2, 3, 4, 5], 'Wrong'\nassert     extract_singly([[[1], 2], 3]) == [1, 2], 'Wrong'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pancake_sort([0]) == [0]\nassert     pancake_sort([]) == []\nassert     pancake_sort([1,2,3,4]) == [1,2,3,4]\nassert     pancake_sort([1,2,3,4,4]) == [1,2,3,4,4]\nassert     pancake_sort([1,2,3,4,1]) == [1,1,2,3,4]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pancake_sort([4,2,3,1]) == [1,2,3,4]\nassert     pancake_sort([1,3,2,4]) == [4,1,2,3]\nassert     pancake_sort([4,1,3,2]) == [2,3,1,4]\nassert     pancake_sort([1,2,3,4]) == [1,2,3,4]\nassert     pancake_sort([4,3,1,2]) == [2,3,4,1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pancake_sort([3,2,4,1]) == [1, 2, 3, 4]\nassert     pancake_sort([4,3,2,1]) == [1, 2, 3, 4]\nassert     pancake_sort([1,2,3,4]) == [1, 2, 3, 4]\nassert     pancake_sort([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     pancake_sort([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4]\nassert     pancake_sort([3, 4, 5, 1, 2]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([1, 2, 3, 4, 5]) == []\nassert     pancake_sort([]) == []\nassert     pancake_sort([1, 2, 3, 4, 5, 6]) == []\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pancake_sort([7,2,1,3,5,6,4]) == [7,6,5,4,3,2,1]\n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4]\nassert pancake_sort([3, 3, 2, 1]) == [1, 2, 3, 3]\nassert pancake_sort([3, 2, 3, 1]) == [1, 2, 3, 3]\nassert pancake_sort([3, 2, 3, 1, 2]) == [1, 1, 2, 2, 3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(count_samepair([1,2,3,2,1], [4,5,6,5,4], [7,8,9,8,7])) == 2\nassert count_samepair([1,2,3,4,2], [4,5,6,5,4], [7,8,9,8,7]) == 2\nassert count_samepair([1,2,3,4,2], [4,5,6,5,4], [7,8,9,8,7]) == 0\nassert count_samepair([1,2,3,1], [4,5,6,5,4], [7,8,9,8,7]) == 0\nprint('You pass the test')\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([1,2,3],[2,3,4],[3,4,5]) == 2\nassert     count_samepair([2,2,2],[3,4,5],[3,4,5]) == 0\nassert     count_samepair([2,2,3],[2,3,4],[3,4,5]) == 1\nassert     count_samepair([2,2,3],[2,3,4],[3,4,5]) == 1\nassert     count_samepair([2,3,4],[2,3,4],[2,3,4]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 3, 'Case 1 should return 3'\nassert     count_samepair([1,1,3,4], [1,2,3,4], [1,2,3,4]) == 3, 'Case 2 should return 3'\nassert     count_samepair([1,1,2,4], [1,2,3,4], [1,2,3,4]) == 2, 'Case 3 should return 2'\nassert     count_samepair([1,1,2,2], [1,2,3,4], [1,2,3,4]) == 0, 'Case 4 should return 0'\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 5, 'Case 5 should return 5'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3,1,4], [3,1,2,1,4], [3,1,2,1,4]) == 3\nassert     count_samepair([3,1,2,1,4], [3,1,2,1,4], [3,1,2,1,4]) == 3\nassert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3\nassert     count_samepair([3,1,2,1,4], [3,1,2,1,4], [3,1,2,1,4]) == 0\nassert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([0,1,2,3], [0,2,2,3], [0,1,2,3]) == 1\nassert     count_samepair([0,1,2,3,4], [0,2,3,4,5], [0,1,2,3,4]) == 2\nassert     count_samepair([1,2,2,3,4], [2,2,3,4,5], [2,1,2,3,4]) == 3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_samepair([0,1,1,2,3,3,4,4,5,5,5,5], [0,1,2,3,4,5,6,7,8,9,10,11], [0,1,2,3,4,5,6,7,8,9,10,11]) == 12\nassert count_samepair([0,1,1,2,3,3,4,4,5,5,5,5], [0,1,2,3,4,5,6,7,8,9,10,11], [0,1,1,1,2,3,4,4,5,5,5,5]) == 12\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_samepair([1,2,3], [2,2,1], [3,1,2]) == 2\nassert     count_samepair([1,2,3], [2,2,1], [3,1,2]) == 1\nassert     count_samepair([1,2,3], [2,2,1], [1,3,2]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    list1 = [3, 4, 6, 5, 2, 8, 9, 5, 5, 9]\n    list2 = ['a', 'a', 'b', 'b', 'a', 'a']\n    list3 = [5, 5, 5, 5, 5]\n    assert count_samepair(list1,list2,list3) == 2\n    print(\"Correct!\")\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists(    ( 'a','b',['c',[1,2]],['d',[2,4]],['e',[4,6]]] ) == 1, \"Should be 1\"\nassert     find_lists(    ( 'a','b',['c',[1,2]],['d',[2,4]],['e',[4,6]]] ) == 0, \"Should be 0\"\nassert     find_lists(    ([1,2,3],[2,3,4]) ) == 0, \"Should be 0\"\nassert     find_lists(    ([1,2,3],[2,3,4],1) ) == 1, \"Should be 1\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(((1,2,3,4),(2,3,4),(5,6))) == 3\nassert     find_lists(((1,2,3,4),(2,3,4),(5,6),(7,8,9,10))) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists(([1,2,3],[3,4],(5,6),[7])) == 2\nassert     find_lists(([],[],[])) == 0\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists((0,1,1,2,3,3,3)) ==         3, 'Wrong result'\nassert     find_lists((0,1,1,2,3,3,3,5,6,7,8,8)) ==     7, 'Wrong result'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists(('',)) == 1, \"This should be 1\"\nassert     find_lists((1,2)) == 2, \"This should be 2\"\nassert     find_lists((1,2,'',3)) == 3, \"This should be 3\"\nassert     find_lists((1,2,2,3)) == 1, \"This should be 1\"\nassert     find_lists((1,2,2,3,4)) == 0, \"This should be 0\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists(('1', '2', '3')) == 1, \"Should be 1\"\nassert     find_lists((0, 0, 0)) == 1, \"Should be 1\"\nassert     find_lists((0, 1, 0)) == 2, \"Should be 2\"\nassert     find_lists((1, 0, 0)) == 2, \"Should be 2\"\nassert     find_lists((1, 1, 1)) == 3, \"Should be 3\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists(tuple()) == 0, \"tuple should be empty\"\nassert     find_lists((1, 2, 3)) == 1, \"tuple should have one list\"\nassert     find_lists((\"a\", \"b\", \"c\")) == 3, \"tuple should have 3 lists\"\n\nprint(\"The code works correctly\")\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists(([],[],[],[])) == 0\nassert     find_lists(([1],[1],[1],[2])) == 1\nassert     find_lists(([],[],[],[1])) == 4\nassert     find_lists(([],[],[],[1],[2],[3],[4],[5])) == 5\n\ndef find_singles(Input):\n    '''\n    Write a function to find number of singles present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 0\nassert     find_lists((1, 2, 3, 4)) == 1\nassert     find_lists((1, 2, 3, 4, 5)) == 1\nassert     find_lists((1, 2, 3, 4, 5, 6)) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists(((1,2,3), (1,2,4), (1,2,5))) == 2\nassert     find_lists(((1,2,3), (1,2,4), (1,2,5), (1,2,4))) == 2\nassert     find_lists(((1,2,3,4), (1,2,4,5), (1,2,4,6))) == 2\nassert     find_lists(((1,2,3), (1,2,4), (1,2,5), (1,2,4))) == 3\nassert     find_lists(((1,2,3), (1,2,4), (1,2,5), (1,2,4,5))) == 3\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Abs_Diff([1, 2, 3, -4]) == 5, \"The testcase is wrong\"\nassert     max_Abs_Diff([1, 4, -9, 10]) == 9, \"The testcase is wrong\"\nassert     max_Abs_Diff([1, -4, 10, -9]) == 10, \"The testcase is wrong\"\nassert     max_Abs_Diff([1, 2, -4, -10, 10, 20]) == 11, \"The testcase is wrong\"\nassert     max_Abs_Diff([1, 2, 3, -4]) == 5, \"The testcase is wrong\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_Abs_Diff([-20,-1,-2,3,5]) == 5\nassert max_Abs_Diff([-3,-2,1,2,3]) == 4\nassert max_Abs_Diff([1,-2,3,4,5]) == 4\nassert max_Abs_Diff([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(max_Abs_Diff([1, 2, 3, -3, 4, 5]))\n\nassert "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([-6, -3, -2, -1, 1, 2, 3, 4, 5]) == 4, 'Wrong answer, see max_Abs_Diff'\nassert max_Abs_Diff([1, 4, 5, 6, -2, -10, 1, -3]) == 7, 'Wrong answer, see max_Abs_Diff'\nassert max_Abs_Diff([-1, 0, -1, -2, -3, -2]) == 1, 'Wrong answer, see max_Abs_Diff'\nassert max_Abs_Diff([1, 2, 3, 4, 5, 6]) == 0, 'Wrong answer, see max_Abs_Diff'\nassert max_Abs_Diff([1, 1, 1, 1, 1]) == 0, 'Wrong answer, see max_Abs_Diff'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmax_Abs_Diff([10, 20, 4, -50]) == 40\nassert max_Abs_Diff([10, 20, 4, -50]) == -50\nassert max_Abs_Diff([]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr = [-5,-3,-1,-7,-3] \nprint(max_Abs_Diff(arr)) \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([3, -4, 5, 6]) == 5\nassert max_Abs_Diff([-5, 6, -2, 2, -1]) == 4\nassert max_Abs_Diff([-1, -2, -3, -4, -5]) == -1\nassert max_Abs_Diff([-10, 1, 2, 3, -10]) == 3\nassert max_Abs_Diff([2, 5, -4, -1, 3]) == 5\nprint(\"\\n max_Abs_Diff function passes all test cases\\n\")\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(1,1,2) == (1,1)\nassert     find_solution(3,2,5) == (1,2)\nassert     find_solution(5,7,11) == (3,2)\nassert     find_solution(5,7,12) == (3,2)\nassert     find_solution(5,7,15) == (3,2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(1,2,3) == (1,2), 'find_solution should return (1, 2)'\nassert     find_solution(1,2,4) == None, 'find_solution should return None if no solution exists'\nassert     find_solution(5,15,10) == (3, 5), 'find_solution should return (3, 5)'\nassert     find_solution(1,3,4) == (1, 3), 'find_solution should return (1, 3)'\nassert     find_solution(1,3,5) == None, 'find_solution should return None if no solution exists'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_solution(1, 1, 1) == (1, 1), 'Your find_solution function did not return the correct tuple'\nassert     find_solution(1, 1, 2) == (1, 1), 'Your find_solution function did not return the correct tuple'\nassert     find_solution(1, 1, 3) == (1, 1), 'Your find_solution function did not return the correct tuple'\nassert     find_solution(1, 1, 4) == (1, 1), 'Your find_solution function did not return the correct tuple'\nassert     find_solution(1, 1, 5) == (1, 1), 'Your find_solution function did not return the correct tuple'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(find_solution(1, 1, 2))\nprint(find_solution(1, 1, 3))\nprint(find_solution(1, 2, 2))\nprint(find_solution(2, 1, 2))\nprint(find_solution(2, 2, 2))\nprint(find_solution(2, 3, 3))\nprint(find_solution(3, 2, 4))\nprint(find_solution(3, 3, 5))\nprint(find_solution(3, 4, 7))\nprint(find_solution(4, 3, 5))\nprint(find_solution(4, 4, 7))\nprint(find_solution(4, 5, 7))\nprint(find_solution(5, 4, 7))\nprint(find_solution(5, 5, 7))\nprint(find_solution(5, 6, 7))\nprint(find_solution(6, 5, 7))\nprint(find_solution(6, 6, 7))\nprint(find_solution(6, 7, 8))\nprint(find_solution(7, 6, 7))\nprint(find_solution(7, 7, 8))\nprint(find_solution(7, 8, 8))\nprint(find_solution(8, 7, 8))\nprint(find_solution(8, 8, 8))\nprint(find_solution(8, 9, 9))\nprint(find_solution(9, 8, 9))\nprint(find_solution(9, 9, 9))\nprint(find_solution(9, 10, 10))\nprint(find_solution(10, 9, 10))\nprint(find_solution(10, 10, 10))\nprint(find_solution(10, 11, 11))\nprint(find_solution(11, 10, 11))\nprint(find_solution(11, 11, 11))\nprint(find_solution(11, 12, 12))\nprint(find_solution(12, 11, 12))\nprint(find_solution(12, 12, 12))\nprint(find_solution(12, 13, 13))\nprint(find_solution(13, 12, 13))\nprint(find_solution(13, 13, 13))\nprint(find_solution(13, 14, 14))\nprint(find_solution(14, 13, 14))\nprint(find_solution(14, 14, 14))\nprint(find_solution(14, 15, 15))\nprint(find_solution(15, 14, 15))\nprint(find_solution(15, 15, 15))\nprint(find_solution(15, 16, 16))\nprint(find_solution(16, 15, 16))\nprint(find_solution(16, 16, 16))\nprint(find_solution(16, 17, 17))\nprint(find_solution(17, 16, 17))\nprint(find_solution(17, 17, 17))\nprint(find_solution(17, 18, 18))\nprint(find_solution(18, 17, 18))\nprint(find_solution(18, 18, 18))\nprint(find_solution(18, 19, 19))\nprint(find_solution(19, 18, 19))\nprint(find_solution(19, 19, 19))\nprint(find_solution(19, 20, 20))\nprint(find_solution(20, 19, 20))\nprint(find_solution(20, 20, 20))\nprint(find_solution(20, 21, 21))\nprint(find_solution(21, 20, 21))\nprint(find_solution(21, 21, 21))\nprint(find_solution(21, 22, 22))\nprint(find_solution(22, 21, 22))\nprint(find_solution(22, 22, 22))\nprint(find_solution(22, 23, 23))\nprint(find_solution(23, 22, 23))\nprint(find_solution(23, 23, 23))\nprint(find_solution(23, 24, 24))\nprint(find_solution(24, 23, 24))\nprint(find_solution(24, 24, 24))\nprint(find_solution(24, 25, 25))\nprint(find_solution(25, 24, 25))\nprint(find_solution(25, 25, 25))\nprint(find_solution(25, 26, 26))\nprint(find_solution(26, 25, 26))\nprint(find_solution(26, 26, 26))\nprint(find_solution(26, 27, 27))\nprint(find_solution(27, 26, 27))\nprint(find_solution(27, 27, 27))\nprint(find_solution(27, 28, 28))\nprint(find_solution(28, 27, 28))\nprint(find_solution(28, 28, 28))\nprint(find_solution(28, 29, 29))\nprint(find_solution(29, 28, 29))\nprint(find_solution(29, 29, 29))\nprint(find_solution(29, 30, 30))\nprint(find_solution(30, 29, 30))\nprint(find_solution(30, 30, 30))\nprint(find_solution(30, 31, 31))\nprint(find_solution(31, 30, 31))\nprint(find_solution(31, 31, 31))\nprint(find_solution(31, 32, 32))\nprint(find_solution(32, 31, 32))\nprint(find_solution(32, 32, 32))\nprint(find_solution(32, 33, 33))\nprint(find_solution(33, 32, 33))\nprint(find_solution(33, 33, 33))\nprint(find_solution(33, 34, 34))\nprint(find_solution(34, 33, 34))\nprint(find_solution(34, 34, 34))\nprint(find_solution(34, 35, 35))\nprint(find_solution(35, 34, 35))\nprint(find_solution(35, 35, 35))\nprint(find_solution(35, 36, 36))\nprint(find_solution(36, 35, 36))\nprint(find_solution(36, 36, 36))\nprint(find_solution(36, 37, 37))\nprint(find_solution(37, 36, 37))\nprint(find_solution(37, 37, 37))\nprint(find_solution(37, 38, 38))\nprint(find_solution(38, 37, 38))\nprint(find_solution(38, 38, 38))\nprint(find_solution(38, 39, 39))\nprint(find_solution(39, 38, 39))\nprint(find_solution(39, 39, 39))\nprint(find_solution(39, 40, 40))\nprint(find_solution(40, 39, 40))\nprint(find_solution(40, 40, 40))\nprint(find_solution(40, 41, 41))\nprint(find_solution(41, 40, 41))\nprint(find_solution(41, 41, 41))\nprint(find_solution(41, 42, 42))\nprint(find_solution(42, 41, 42))\nprint(find_solution(42, 42, 42))\nprint(find_solution(42, 43, 43))\nprint(find_solution(43, 42, 43))\nprint(find_solution(43, 43, 43))\nprint(find_solution(43, 44, 44))\nprint(find_solution(44, 43, 44))\nprint(find_solution(44, 44, 44))\nprint(find_solution(44, 45, 45))\nprint(find_solution(45, 44, 45))\nprint(find_solution(45, 45, 45))\nprint(find_solution(45, 46, 46))\nprint(find_solution(46, 45, 46))\nprint(find_solution(46, 46, 46))\nprint(find_solution(46, 47, 47))\nprint(find_solution(47, 46, 47))\nprint(find_solution(47, 47, 47))\nprint(find_solution(47, 48, 48))\nprint(find_"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_solution(1,2,4) == (1,1)\nassert     find_solution(2,5,17) == (1,2)\nassert     find_solution(6,6,44) == None\nassert     find_solution(1,2,3) == None\nassert     find_solution(2,3,5) == (1,2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_solution(a = 0, b = 0, n = 4) == (0, 1)\nassert find_solution(a = 1, b = 2, n = 8) == (1, 3)\nassert find_solution(a = 2, b = 1, n = 5) == (0, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution(1, 1, 2) == (1, 1)\nassert     find_solution(1, 1, 2) == None\nassert     find_solution(3, 6, 5) == (2, 3)\nassert     find_solution(2, 2, 2) == (1, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_solution(1,1,3) == (1,1)\nfind_solution(2,1,3) == (1,2)\nfind_solution(2,2,3) == (1,1)\nfind_solution(2,3,3) == (1,1)\nfind_solution(2,5,4) == (2,2)\nfind_solution(4,3,3) == (1,1)\nfind_solution(3,2,3) == (1,1)\nfind_solution(3,3,3) == (1,2)\nfind_solution(3,4,3) == (1,3)\nfind_solution(3,5,3) == (2,2)\nfind_solution(3,6,3) == (1,3)\nfind_solution(6,3,3) == (1,1)\nfind_solution(4,4,5) == (2,2)\nfind_solution(7,4,5) == (1,1)\nfind_solution(4,4,6) == (1,1)\nfind_solution(3,5,6) == (2,2)\nfind_solution(6,4,6) == (1,1)\nfind_solution(7,4,6) == (1,1)\nfind_solution(3,5,7) == (2,2)\nfind_solution(3,6,7) == (1,1)\nfind_solution(7,5,7) == (1,1)\nfind_solution(3,7,7) == (2,2)\nfind_solution(4,7,7) == (2,2)\nfind_solution(3,7,8) == (1,2)\nfind_solution(6,7,8) == (1,1)\nfind_solution(3,8,8) == (2,2)\nfind_solution(8,7,8) == (1,1)\nfind_solution(3,8,9) == (2,2)\nfind_solution(7,8,9) == (1,1)\nfind_solution(3,9,9) == (2,2)\nfind_solution(9,8,9) == (1,1)\nfind_solution(3,9,10) == (2,2)\nfind_solution(9,9,10) == (1,1)\nfind_solution(3,10,10) == (2,2)\nfind_solution(10,9,10) == (1,1)\nfind_solution(3,10,11) == (2,2)\nfind_solution(10,10,11) == (1,1)\nfind_solution(3,11,11) == (2,2)\nfind_solution(11,10,11) == (1,1)\nfind_solution(3,11,12) == (2,2)\nfind_solution(11,11,12) == (1,1)\nfind_solution(3,12,12) == (2,2)\nfind_solution(12,11,12) == (1,1)\nfind_solution(4,5,13) == (2,2)\nfind_solution(4,6,13) == (1,1)\nfind_solution(4,7,13) == (1,1)\nfind_solution(5,6,13) == (2,2)\nfind_solution(6,5,13) == (1,1)\nfind_solution(5,7,13) == (1,1)\nfind_solution(5,8,13) == (1,1)\nfind_solution(6,7,13) == (2,2)\nfind_solution(7,6,13) == (1,1)\nfind_solution(7,8,13) == (1,1)\nfind_solution(7,9,13) == (1,1)\nfind_solution(8,7,13) == (1,1)\nfind_solution(8,9,13) == (1,1)\nfind_solution(8,10,13) == (1,1)\nfind_solution(9,8,13) == (1,1)\nfind_solution(9,10,13) == (1,1)\nfind_solution(9,11,13) == (1,1)\nfind_solution(10,9,13) == (1,1)\nfind_solution(10,11,13) == (1,1)\nfind_solution(11,10,13) == (1,1)\nfind_solution(12,11,13) == (1,1)\nfind_solution(13,12,13) == (1,1)\nfind_solution(12,13,13) == (2,2)\nfind_solution(13,12,13) == (1,1)\nfind_solution(13,13,13) == (2,2)\nfind_solution(13,14,13) == (1,1)\nfind_solution(14,13,13) == (1,1)\nfind_solution(13,14,13) == (2,2)\nfind_solution(14,13,13) == (1,1)\nfind_solution(13,14,14) == (2,2)\nfind_solution(14,13,14) == (1,1)\nfind_solution(14,14,14) == (2,2)\nfind_solution(13,14,15) == (1,1)\nfind_solution(14,13,15) == (1,1)\nfind_solution(13,14,16) == (1,1)\nfind_solution(14,13,16) == (1,1)\nfind_solution(13,15,16) == (1,1)\nfind_solution(15,14,16) == (1,1)\nfind_solution(15,15,16) == (1,1)\nfind_solution(15,16,16) == (1,1)\nfind_solution(14,15,17) == (1,1)\nfind_solution(15,14,17) == (1,1)\nfind_solution(14,16,17) == (1,1)\nfind_solution(16,15,17) == (1,1)\nfind_solution(16,16,17) == (1,1)\nfind_solution(16,17,17) == (1,1)\nfind_solution(17,16,17) == (1,1)\nfind_solution(17,17,17) == (2,2)\nfind_solution(17,18,17) == (1,1)\nfind_solution(18,17,17) == (1,1)\nfind_solution(17,18,18) == (2,2)\nfind_solution(18,17,18) == (1,1)\nfind_solution(17,18,19) == (1,1)\nfind_solution(18,17,19) == (1,1)\nfind_solution(17,18,20) == (1,1)\nfind_solution(18,17,20) == (1,1)\nfind_solution(17,19,20) == (1,1)\nfind_solution(19,18,20) == (1,1)\nfind_solution(17,19,21) == (1,1)\nfind_solution(19,17,21) == (1,1)\nfind_solution(17,20,21) == (1,1)\nfind_solution(20,17,21) == (1,1)\nfind_solution(17,21,21) == (2,2)\nfind_solution(20,17,21) == (1,1)\nfind_solution(17,21,22) == (1,1)\nfind_solution(21,20,22) == (1,1)\nfind_solution(21,21,22) == (1,1)"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([2,1,2,4,5,5,2,1,2], [2,4,2,5]) == None,'remove_elements test 1 failed'\nassert     remove_elements([2,1,2,4,5,5,2,1,2], [2,1,2,2]) == [2,1,2,4,5,5,2,1,2],'remove_elements test 2 failed'\nassert     remove_elements([2,1,2,4,5,5,2,1,2], [2,1,2,4,5,5,2,1]) == None,'remove_elements test 3 failed'\nassert     remove_elements([2,1,2,4,5,5,2,1,2], [2,1,2]) == None,'remove_elements test 4 failed'\nassert     remove_elements([2,1,2,4,5,5,2,1,2], []) == None,'remove_elements test 5 failed'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_elements([1, 2, 2, 2], [2]) == [1]\nremove_elements([1, 2, 2, 2], [2, 2]) == []\nremove_elements([1, 2, 2, 2], []) == []\nremove_elements([1, 2], [1, 2]) == []\nremove_elements([], [1, 2]) == []\nremove_elements([1], [1]) == []\nremove_elements([1], []) == []\nremove_elements([1, 2, 2, 2], [1, 2]) == [2, 2]\nremove_elements([1, 2, 2, 2], [2]) == [1, 2, 2]\nremove_elements([1, 2, 2, 2], [3]) == []\nremove_elements([1, 2, 2, 2], [2, 2]) == [1]\nremove_elements([1, 2, 2, 2], [2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2]) == [1, 2]\nremove_elements([1, 2, 2, 2], [2, 2, 2]) == [1]\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], []) == []\nremove_elements([], []) == []\nremove_elements([1, 2, 2, 2], [1, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [1, 2, 2, 2]) == [1]\nremove_elements([1, 2, 2, 2], [1, 2, 2, 2, 2]) == [1]\nremove_elements([1, 2, 2, 2], [2]) == []\nremove_elements([], [2]) == []\nremove_elements([1, 2, 2, 2], []) == []\nremove_elements([1, 2, 2], [1, 2, 2]) == []\nremove_elements([1, 2, 2], [1, 2, 2, 2]) == [1, 2]\nremove_elements([1, 2, 2], [2]) == []\nremove_elements([], [2]) == []\nremove_elements([1, 2, 2], []) == []\nremove_elements([1], [1, 2, 2, 2]) == [2]\nremove_elements([1], [1, 2, 2, 2, 2]) == [1]\nremove_elements([1], [2]) == []\nremove_elements([], [2]) == []\nremove_elements([1, 2, 2, 2], []) == []\nremove_elements([], []) == []\nremove_elements([1, 2, 2, 2], [1, 2]) == [1]\nremove_elements([1, 2, 2, 2], [2]) == []\nremove_elements([1, 2, 2, 2], [2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, 2], [2, 2, 2, 2]) == []\nremove_elements([1, 2, 2, "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4,5,6],[1,2,3,4]) == None\nassert     remove_elements([],[]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == None"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_elements([], []) == []\nassert     remove_elements([1], []) == []\nassert     remove_elements([1,2,3], []) == []\nassert     remove_elements([], [3,5]) == []\nassert     remove_elements([1,2,3], [3,5]) == [1,2]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint()\nprint()\nprint()\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements(['c', 'b', 'a', 'd'], ['c', 'a', 'b', 'd', 'e']) == ['b', 'd']\n\nassert     remove_elements(['c', 'b', 'a'], ['c', 'a', 'b', 'd', 'e']) == ['b', 'd']\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,2,3,4,5,6], [2,3,5]) ==     [1,4,6], \"Wrong Answer\"\nassert     remove_elements([1,2,3,4,5,6], [2]) ==     [1,3,4,5,6], \"Wrong Answer\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([1,2,3,4],[1]) == []\nassert     remove_elements([1,2,3,4],[2]) == [3,4]\nassert     remove_elements([1,2,3,4],[3,4]) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('\\n')\nprint(remove_elements([1, 2, 3, 4], [3, 4]))\nprint('\\n')\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([1, 2, 3], [3]) == [1, 2], \"fail\"\nassert     remove_elements([2, 3, 4], [1]) == [2, 3, 4], \"fail\"\nassert     remove_elements([2, 3, 4, 5], [1]) == [2, 3, 4, 5], \"fail\"\nassert     remove_elements([1, 2, 3, 4], [1, 2]) == [3, 4], \"fail\"\nassert     remove_elements([1, 2, 3, 4, 5, 6], [1, 2]) == [3, 4, 5, 6], \"fail\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_series(4) == 8, 'Test fail'\nassert     sum_series(10) == 30, 'Test fail'\nassert     sum_series(20) == 76, 'Test fail'\nassert     sum_series(30) == 165, 'Test fail'\nassert     sum_series(40) == 328, 'Test fail'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_series_iterative(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    result = n\n    for i in range(2, n//2 + 1):\n        result -= i\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 0\nassert     sum_series(2) == 2\nassert     sum_series(3) == 4\nassert     sum_series(4) == 6\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_series(1) == 0, \"First case\"\nassert     sum_series(2) == 1, \"Second case\"\nassert     sum_series(3) == 1, \"Third case\"\nassert     sum_series(5) == 3, \"Fourth case\"\nassert     sum_series(10) == 5, \"Fifth case\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_series(3) == 4, 'WRONG!'\nassert     sum_series(4) == 11, 'WRONG!'\nassert     sum_series(5) == 19, 'WRONG!'\nassert     sum_series(10) == 78, 'WRONG!'\nassert     sum_series(20) == 93, 'WRONG!'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('Correct:', sum_series(0) == 0)\nprint('Correct:', sum_series(1) == 1)\nprint('Correct:', sum_series(2) == 3)\nprint('Correct:', sum_series(3) == 6)\nprint('Correct:', sum_series(4) == 10)\nprint('Correct:', sum_series(5) == 15)\nprint('Correct:', sum_series(6) == 21)\nprint('Correct:', sum_series(7) == 28)\nprint('Correct:', sum_series(8) == 36)\nprint('Correct:', sum_series(9) == 45)\nprint('Correct:', sum_series(10) == 55)\nprint('Correct:', sum_series(11) == 63)\nprint('Correct:', sum_series(12) == 72)\nprint('Correct:', sum_series(13) == 81)\nprint('Correct:', sum_series(14) == 90)\nprint('Correct:', sum_series(15) == 99)\nprint('Correct:', sum_series(16) == 108)\nprint('Correct:', sum_series(17) == 117)\nprint('Correct:', sum_series(18) == 126)\nprint('Correct:', sum_series(19) == 135)\nprint('Correct:', sum_series(20) == 144)\nprint('Correct:', sum_series(21) == 153)\nprint('Correct:', sum_series(22) == 162)\nprint('Correct:', sum_series(23) == 171)\nprint('Correct:', sum_series(24) == 180)\nprint('Correct:', sum_series(25) == 189)\nprint('Correct:', sum_series(26) == 198)\nprint('Correct:', sum_series(27) == 207)\nprint('Correct:', sum_series(28) == 216)\nprint('Correct:', sum_series(29) == 225)\nprint('Correct:', sum_series(30) == 234)\nprint('Correct:', sum_series(31) == 243)\nprint('Correct:', sum_series(32) == 252)\nprint('Correct:', sum_series(33) == 261)\nprint('Correct:', sum_series(34) == 270)\nprint('Correct:', sum_series(35) == 279)\nprint('Correct:', sum_series(36) == 288)\nprint('Correct:', sum_series(37) == 297)\nprint('Correct:', sum_series(38) == 306)\nprint('Correct:', sum_series(39) == 315)\nprint('Correct:', sum_series(40) == 324)\nprint('Correct:', sum_series(41) == 333)\nprint('Correct:', sum_series(42) == 342)\nprint('Correct:', sum_series(43) == 351)\nprint('Correct:', sum_series(44) == 360)\nprint('Correct:', sum_series(45) == 369)\nprint('Correct:', sum_series(46) == 378)\nprint('Correct:', sum_series(47) == 387)\nprint('Correct:', sum_series(48) == 396)\nprint('Correct:', sum_series(49) == 405)\nprint('Correct:', sum_series(50) == 414)\nprint('Correct:', sum_series(51) == 423)\nprint('Correct:', sum_series(52) == 432)\nprint('Correct:', sum_series(53) == 441)\nprint('Correct:', sum_series(54) == 450)\nprint('Correct:', sum_series(55) == 459)\nprint('Correct:', sum_series(56) == 468)\nprint('Correct:', sum_series(57) == 477)\nprint('Correct:', sum_series(58) == 486)\nprint('Correct:', sum_series(59) == 495)\nprint('Correct:', sum_series(60) == 504)\nprint('Correct:', sum_series(61) == 513)\nprint('Correct:', sum_series(62) == 522)\nprint('Correct:', sum_series(63) == 531)\nprint('Correct:', sum_series(64) == 540)\nprint('Correct:', sum_series(65) == 549)\nprint('Correct:', sum_series(66) == 558)\nprint('Correct:', sum_series(67) == 567)\nprint('Correct:', sum_series(68) == 576)\nprint('Correct:', sum_series(69) == 585)\nprint('Correct:', sum_series(70) == 594)\nprint('Correct:', sum_series(71) == 603)\nprint('Correct:', sum_series(72) == 612)\nprint('Correct:', sum_series(73) == 621)\nprint('Correct:', sum_series(74) == 630)\nprint('Correct:', sum_series(75) == 639)\nprint('Correct:', sum_series(76) == 648)\nprint('Correct:', sum_series(77) == 657)\nprint('Correct:', sum_series(78) == 666)\nprint('Correct:', sum_series(79) == 675)\nprint('Correct:', sum_series(80) == 684)\nprint('Correct:', sum_series(81) == 693)\nprint('Correct:', sum_series(82) == 702)\nprint('Correct:', sum_series(83) == 711)\nprint('Correct:', sum_series(84) == 720)\nprint('Correct:', sum_series(85) == 729)\nprint('Correct:', sum_series(86) == 738)\nprint('Correct:', sum_series(87) == 747)\nprint('Correct:', sum_series(88) == 756)\nprint('Correct:', sum_series(89) == 765)\nprint('Correct:', sum_series(90) == 774)\nprint('Correct:', sum_series(91) == 783)\nprint('Correct:', sum_series(92) == 792)\nprint('Correct:', sum_series(93) == 799)\nprint('Correct:', sum_series(94) == 808)\nprint('Correct:', sum_series(95) == 817)\nprint('Correct:', sum_series(96) == 826)\nprint('Correct:', sum_series(97) == 835)\nprint('Correct:', sum_series(98) == 844)\nprint('Correct:', sum_series(99) == 853)\nprint('Correct:', sum_series(100) == 862)\nprint('Correct:', sum_series(101) == 871)\nprint('Correct:', sum_series(102) == 880)\nprint('Correct:', sum_series(103) == 889)\nprint('Correct:', sum_series(104) == 898)\nprint('Correct:', sum_series(105) == 907)\nprint('Correct:', sum_series(106) == 916)\nprint('Correct:', sum_series(107) == 925)\nprint('Correct:', sum_series(108) == 934)\nprint('Correct:', sum_series(109) == 943)\nprint('Correct:', sum_series(110) == 952)\nprint('Correct:', sum_series(111) == 961)\nprint('Correct:', sum_series(112) == 970)\nprint('Correct:', sum_series(113) == 979)\nprint('Correct:', sum_series(114) == 988)\nprint('Correct:', sum_series(115) == 997)\nprint('Correct:', sum_series(116) == 1006)\nprint('Correct:', sum_series(117) == 1015)\nprint('Correct:', sum_series(118) == 1024)\nprint('Correct:', sum_series(119) == 1033)\nprint('Correct:', sum_series(120) == 1042)\nprint('Correct:', sum_series(121) == 1051)\nprint('Correct:', sum_series(122) == 1060)\nprint('Correct:', sum_series(123) == 1069)\nprint('Correct:', sum_series(124) == 1078)\nprint('Correct:', sum_series(125) == 1087)\nprint('Correct:', sum_series(126) ="
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    assert sum_series(10) == 55\n    assert sum_series(9) == 50\n    assert sum_series(8) == 45\n    assert sum_series(7) == 35\n    "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_series(5) == sum_series(4) + sum_series(3)\nassert     sum_series(6) == sum_series(5) + sum_series(4) + sum_series(3)\n\ndef sum_series_adv(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    This time, you should consider that the sum is not the only function needed (you should calculate it recursively).\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_polygon(3,4) == 9.0\nassert area_polygon(2.8,3) == 7.4\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_polygon(1, 1) == 1\nassert     area_polygon(2, 3) == 4.0/3\nassert     area_polygon(5, 8) == 22.5\nassert     area_polygon(2, 4) == 8\nassert     area_polygon(3, 5) == 10\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(3, 5) == 12, 'area_polygon wrong'\n\ndef area_triangle(s1, s2, s3):\n    '''\n    Write a function to calculate the area of a triangle given the legnth of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef num_sides(s, l):\n    '''\n    Write a function to check whether a given set of 4 sides, representing a regular polygon, is a right-angle polygon.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(1, 1) == 1\nassert     area_polygon(2, 3) == 4\nassert     area_polygon(3, 4) == 12\n\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_polygon(3, 4) == 12\nassert area_polygon(4, 5) == 20\nassert area_polygon(5, 6) == 40\nassert area_polygon(7, 8) == 56\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     area_polygon(3, 3) == 30\nassert area_polygon(2, 2) == 4\n\ndef area_of_regular_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_polygon(5, 2) == 5 * (5 - 1) / 2\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     div_sum(24) == False, \"True\"\nassert     div_sum(24) == False, \"False\"\nassert     div_sum(55) == True, \"True\"\nassert     div_sum(55) == False, \"False\"\nassert     div_sum(2) == False, \"True\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_div(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef div_sum_2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nWrite a function that takes a list of integers and checks to see if any element of the list is a perfect square. If any such element is found, return that element, otherwise return None.\n\nFor example, the following code should return 4 because 4 is a perfect square:\n\n>>> a = [3, 4, -1, 16]\n>>> perfect_square(a)\n4\n'''\ndef perfect_square(nums):\n    pass\n\n\n'''\nWrite a function that takes a list of integers and checks to see if any element of the list is a perfect square. If any such element is found, return that element, otherwise return None.\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndiv_sum(1)\ndiv_sum(2)\ndiv_sum(3)\ndiv_sum(4)\ndiv_sum(5)\ndiv_sum(6)\ndiv_sum(7)\ndiv_sum(8)\ndiv_sum(9)\ndiv_sum(10)\ndiv_sum(11)\ndiv_sum(12)\ndiv_sum(13)\ndiv_sum(14)\ndiv_sum(15)\ndiv_sum(16)\ndiv_sum(17)\ndiv_sum(18)\ndiv_sum(19)\ndiv_sum(20)\ndiv_sum(21)\ndiv_sum(22)\ndiv_sum(23)\ndiv_sum(24)\ndiv_sum(25)\ndiv_sum(26)\ndiv_sum(27)\ndiv_sum(28)\ndiv_sum(29)\ndiv_sum(30)\ndiv_sum(31)\ndiv_sum(32)\ndiv_sum(33)\ndiv_sum(34)\ndiv_sum(35)\ndiv_sum(36)\ndiv_sum(37)\ndiv_sum(38)\ndiv_sum(39)\ndiv_sum(40)\ndiv_sum(41)\ndiv_sum(42)\ndiv_sum(43)\ndiv_sum(44)\ndiv_sum(45)\ndiv_sum(46)\ndiv_sum(47)\ndiv_sum(48)\ndiv_sum(49)\ndiv_sum(50)\ndiv_sum(51)\ndiv_sum(52)\ndiv_sum(53)\ndiv_sum(54)\ndiv_sum(55)\ndiv_sum(56)\ndiv_sum(57)\ndiv_sum(58)\ndiv_sum(59)\ndiv_sum(60)\ndiv_sum(61)\ndiv_sum(62)\ndiv_sum(63)\ndiv_sum(64)\ndiv_sum(65)\ndiv_sum(66)\ndiv_sum(67)\ndiv_sum(68)\ndiv_sum(69)\ndiv_sum(70)\ndiv_sum(71)\ndiv_sum(72)\ndiv_sum(73)\ndiv_sum(74)\ndiv_sum(75)\ndiv_sum(76)\ndiv_sum(77)\ndiv_sum(78)\ndiv_sum(79)\ndiv_sum(80)\ndiv_sum(81)\ndiv_sum(82)\ndiv_sum(83)\ndiv_sum(84)\ndiv_sum(85)\ndiv_sum(86)\ndiv_sum(87)\ndiv_sum(88)\ndiv_sum(89)\ndiv_sum(90)\ndiv_sum(91)\ndiv_sum(92)\ndiv_sum(93)\ndiv_sum(94)\ndiv_sum(95)\ndiv_sum(96)\ndiv_sum(97)\ndiv_sum(98)\ndiv_sum(99)\ndiv_sum(100)\ndiv_sum(101)\ndiv_sum(102)\ndiv_sum(103)\ndiv_sum(104)\ndiv_sum(105)\ndiv_sum(106)\ndiv_sum(107)\ndiv_sum(108)\ndiv_sum(109)\ndiv_sum(110)\ndiv_sum(111)\ndiv_sum(112)\ndiv_sum(113)\ndiv_sum(114)\ndiv_sum(115)\ndiv_sum(116)\ndiv_sum(117)\ndiv_sum(118)\ndiv_sum(119)\ndiv_sum(120)\ndiv_sum(121)\ndiv_sum(122)\ndiv_sum(123)\ndiv_sum(124)\ndiv_sum(125)\ndiv_sum(126)\ndiv_sum(127)\ndiv_sum(128)\ndiv_sum(129)\ndiv_sum(130)\ndiv_sum(131)\ndiv_sum(132)\ndiv_sum(133)\ndiv_sum(134)\ndiv_sum(135)\ndiv_sum(136)\ndiv_sum(137)\ndiv_sum(138)\ndiv_sum(139)\ndiv_sum(140)\ndiv_sum(141)\ndiv_sum(142)\ndiv_sum(143)\ndiv_sum(144)\ndiv_sum(145)\ndiv_sum(146)\ndiv_sum(147)\ndiv_sum(148)\ndiv_sum(149)\ndiv_sum(150)\ndiv_sum(151)\ndiv_sum(152)\ndiv_sum(153)\ndiv_sum(154)\ndiv_sum(155)\ndiv_sum(156)\ndiv_sum(157)\ndiv_sum(158)\ndiv_sum(159)\ndiv_sum(160)\ndiv_sum(161)\ndiv_sum(162)\ndiv_sum(163)\ndiv_sum(164)\ndiv_sum(165)\ndiv_sum(166)\ndiv_sum(167)\ndiv_sum(168)\ndiv_sum(169)\ndiv_sum(170)\ndiv_sum(171)\ndiv_sum(172)\ndiv_sum(173)\ndiv_sum(174)\ndiv_sum(175)\ndiv_sum(176)\ndiv_sum(177)\ndiv_sum(178)\ndiv_sum(179)\ndiv_sum(180)\ndiv_sum(181)\ndiv_sum(182)\ndiv_sum(183)\ndiv_sum(184)\ndiv_sum(185)\ndiv_sum(186)\ndiv_sum(187)\ndiv_sum(188)\ndiv_sum(189)\ndiv_sum(190)\ndiv_sum(191)\ndiv_sum(192)\ndiv_sum(193)\ndiv_sum(194)\ndiv_sum(195)\ndiv_sum(196)\ndiv_sum(197)\ndiv_sum(198)\ndiv_sum(199)\ndiv_sum(200)\ndiv_sum(201)\ndiv_sum(202)\ndiv_sum(203)\ndiv_sum(204)\ndiv_sum(205)\ndiv_sum(206)\ndiv_sum(207)\ndiv_sum(208)\ndiv_sum(209)\ndiv_sum(210)\ndiv_sum(211)\ndiv_sum(212)\ndiv_sum(213)\ndiv_sum(214)\ndiv_sum(215)\ndiv_sum(216)\ndiv_sum(217)\ndiv_sum(218)\ndiv_sum(219)\ndiv_sum(220)\ndiv_sum(221)\ndiv_sum(222)\ndiv_sum(223)\ndiv_sum(224)\ndiv_sum(225)\ndiv_sum(226)\ndiv_sum(227)\ndiv_sum(228)\ndiv_sum(229)\ndiv_sum(230)\ndiv_sum(231)\ndiv_sum(232)\ndiv_sum(233)\ndiv_sum(234)\ndiv_sum(235)\ndiv_sum(236)\ndiv_sum(237)\ndiv_sum(238)\ndiv_sum(239)\ndiv_sum(240)\ndiv_sum(241)\ndiv_sum(242)\ndiv_sum(243)\ndiv_sum(244)\ndiv_sum(245)\ndiv_sum(246)\ndiv_sum(247)\ndiv_sum(248)\ndiv_sum(249)\ndiv_sum(250)\ndiv_sum(251)\ndiv_sum(252)\ndiv_sum(253)\ndiv_sum(254)\ndiv_sum(255)\ndiv_sum(256)\ndiv_sum(257)\ndiv_sum(258)\ndiv_sum(259)\ndiv_sum(260)\ndiv_sum(261)\ndiv_sum(262)\ndiv_sum(263)\ndiv_sum(264)\ndiv_sum(265)\ndiv_sum(266)\ndiv_sum(267)\ndiv_sum(268)\ndiv_sum(269)\ndiv_sum(270)\ndiv_sum(271)\ndiv_sum(272)\ndiv_sum(273)\ndiv_sum(274)\ndiv_sum(275)\ndiv_sum(276)\ndiv_sum(277)\ndiv_sum(278)\ndiv_sum(279)\ndiv_sum(280)\ndiv_sum(281)\ndiv_sum(282)\ndiv_sum(283)\ndiv_sum(284)\ndi"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_sum(2) == True\nassert     div_sum(10) == True\nassert     div_sum(13) == True\nassert     div_sum(28) == False\nassert     div_sum(100) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     div_sum(6) == True\nassert     div_sum(4) == True\nassert     div_sum(12) == True\nassert     div_sum(6) == True\nassert     div_sum(10) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(div_sum(15)) # should return True\nprint(div_sum(16)) # should return False\nprint(div_sum(24)) # should return False\n\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n % 2 == 0 or sum(range(3, int(math.sqrt(n))+1, 2)) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef div_sum_opt(n, m):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_char_position('abcdefg') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}\nassert count_char_position('abcdefgh') == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 1, 'f': 2, 'g': 3}\nassert count_char_position('abcdefghi') == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 1, 'f': 2, 'g': 3}\nassert count_char_position('abdefg') == {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}\nassert count_char_position('abcdefghik') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 2}\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_password(password): \n    '''\n    Write a function to check if a password is valid. A password is valid if it satisfies the following conditions:\n    \u2022 The length of the password should be between 6 and 20 characters.\n    \u2022 It should contain at least one lowercase letter, at least one uppercase letter, at least one digit and one special character.\n    \u2022 It should contain at least one lowercase letter, at least one uppercase letter, at least one digit, and one special character.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_char_position('hello') == 2\nassert count_char_position('Hi!') == 1\nassert count_char_position('hello world') == 4\nassert count_char_position('aA') == 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_char_position('abcd') == 2, 'Testcase 1 failed'\nassert     count_char_position('abc') == 2, 'Testcase 2 failed'\nassert     count_char_position('ABC') == 2, 'Testcase 3 failed'\nassert     count_char_position('abc') == 1, 'Testcase 4 failed'\nassert     count_char_position('ABC') == 1, 'Testcase 5 failed'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_char_position('abab') == 2, 'The result should be 2'\nassert     count_char_position('succeed') == 5, 'The result should be 5'\nassert     count_char_position('mrlksrbuj') == 11, 'The result should be 11'"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_char_position(\"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\") == 14\nassert count_char_position(\"bob\") == 2\nassert count_char_position(\"\") == 0\nassert count_char_position(\"a\") == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_char_position('banana') == 3\nassert     count_char_position('BANANA') == 3\nassert     count_char_position('a') == 1\nassert     count_char_position('aA') == 2\nassert     count_char_position('ab') == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_char_position(\"aac\") == 1, 'Expected : 1'\nassert count_char_position(\"aaz\") == 1, 'Expected : 1'\nassert count_char_position(\"aaac\") == 2, 'Expected : 2'\nassert count_char_position(\"abb\") == 0, 'Expected : 0'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26, \"Should count all the characters in the string\"\nassert count_char_position(\"hello world\") == 0, \"Should count only the characters in the string\"\nassert count_char_position(\"tHis is a weZiCaSe\") == 17, \"Should count the characters in the string\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_even_pair([0, 1, 0, 1, 0, 1, 1, 0]) ==     4\nassert     find_even_pair([0, 1, 0, 1, 0, 1, 1, 1]) ==     3\nassert     find_even_pair([0, 1, 0, 1, 0, 1, 1, 1, 1]) ==     2\n\n\ndef find_even_pair_b(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    This is based on the idea that if you xor with an even number,\n    then all other numbers in the list are 0.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_even_pair([1, 1, 1]) == 0, \"Wrong result\"\nassert     find_even_pair([1, 2, 3]) == 1, \"Wrong result\"\nassert     find_even_pair([4, 5, 6]) == 0, \"Wrong result\"\nassert     find_even_pair([1, 2, 3, 4]) == 2, \"Wrong result\"\nassert     find_even_pair([1, 2, 3, 4, 5]) == 2, \"Wrong result\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_even_pair([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 1, \"XOR operation is not used in this problem\"\nassert find_even_pair([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 2, \"XOR operation is not used in this problem\"\nassert find_even_pair([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 2, \"XOR operation is not used in this problem\"\nassert find_even_pair([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 2, \"XOR operation is not used in this problem\"\nassert find_even_pair([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 2, \"XOR operation is not used in this problem\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_even_pair([1,2,4,5,6,7,8,8]) == 2, \"Input: {}, Expected Output: 2\"\nassert     find_even_pair([1,3,3,7,8,9]) == 0, \"Input: {}, Expected Output: 0\"\nassert     find_even_pair([1,2,3,4,5,6,7,8,8]) == 2, \"Input: {}, Expected Output: 2\""
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_even_pair([]) == 0\nassert     find_even_pair([3]) == 0\nassert     find_even_pair([3,5,1,9]) == 1\nassert     find_even_pair([1,9,3,7,8,5]) == 2\nassert     find_even_pair([1,2,5,6,4,3]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_even_pair([1,2,3,4,5,6,7]) == 2, \"Wrong result\"\nassert find_even_pair([0,1,2,3,4,5,6,7]) == 0, \"Wrong result\"\nassert find_even_pair([0,2,4,6,8,10]) == 2, \"Wrong result\"\nassert find_even_pair([0,2,4,6,8,10,12,14]) == 1, \"Wrong result\"\nassert find_even_pair([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 2, \"Wrong result\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_even_pair([2,4,6,8]) == 2, \"Should be 2\"\nassert     find_even_pair([5,7,9]) == 0, \"Should be 0\"\nassert     find_even_pair([1,3,5,7]) == 0, \"Should be 0\"\nassert     find_even_pair([1,2,3,4,5]) == 0, \"Should be 0\"\nassert     find_even_pair([1,2,3,4,5,6]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_even_pair([1,2,3,4]) == 2, \"found 2 pairs\"\nassert     find_even_pair([1,2,3,4,4]) == 2, \"found 2 pairs\"\nassert     find_even_pair([1,2,3,4,4,2]) == 2, \"found 2 pairs\"\nassert     find_even_pair([1,2,3,4,4,4,4,2]) == 2, \"found 2 pairs\"\nassert     find_even_pair([1,2,3,4,4,4,4,2,4]) == 0, \"found 0 pairs\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(next_power_of_2(4)) # 2\nprint(next_power_of_2(15)) # 8\nprint(next_power_of_2(9)) # 2\nprint(next_power_of_2(12)) # 4\nprint(next_power_of_2(1)) # 1"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nnext_power_of_2(1) == 1\nassert next_power_of_2(2) == 2\nassert next_power_of_2(3) == 2\nassert next_power_of_2(4) == 4\nassert next_power_of_2(5) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_power_of_2(1)    == 0\nassert     next_power_of_2(3)    == 1\nassert     next_power_of_2(4)    == 2\nassert     next_power_of_2(7)    == 2\nassert     next_power_of_2(15)    == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(4) == 2\nassert next_power_of_2(8) == 2\nassert next_power_of_2(16) == 2\nassert next_power_of_2(32) == 4\nassert next_power_of_2(64) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnext_power_of_2(4) == 2\nnext_power_of_2(1) == 2\nnext_power_of_2(8) == 4"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nnext_power_of_2(1) == 1\nnext_power_of_2(7) == 8\nnext_power_of_2(12) == 16\n\n\ndef smallest_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency([1,1,2,3,3,4,5,6,7,7], 3) == 6 \nassert frequency([1,1,2,3,3,4,5,6,7,7], 2) == 6 \nassert frequency([1,1,2,3,3,4,5,6,7,7], 1) == 10 \nassert frequency([1,1,2,3,3,4,5,6,7,7], 7) == 1 \nassert frequency([1,1,2,3,3,4,5,6,7,7], 8) == 0 \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    frequency([1,2,3,3,3,3], 3) == 3\nassert \n    frequency([1,2,3,3,3,3,4], 3) == 0\nassert \n    frequency([1,2,3,3,3,4], 3) == 3\nassert \n    frequency([1,2,3,3,4,4], 3) == 0\n\ndef sum(a,b):\n    '''\n    Write a function to compute the sum of two lists.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('Assert is correct:', frequency([1,2,3,4,2,3], 2) == 2)\nprint('Assert is correct:', frequency([1,2,3,4,2,3], 4) == 2)\nprint('Assert is correct:', frequency([1,2,3,4,2,3], 1) == 4)\nprint('Assert is correct:', frequency([1,2,3,4,2,3], 5) == 0)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    res = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            res += 1\n    return res\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([1,2,2,3,4],2) == 2, \"Wrong\"\nassert     frequency([2,1,3,4,3,2],2) == 4, \"Wrong\"\nassert     frequency([],2) == 0, \"Wrong\"\nassert     frequency([1,2,3,2,3,4],2) == 1, \"Wrong\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    frequency([1,2,3], 1) == 1\nassert\n    frequency([1,2,3,2], 2) == 2\nassert\n    frequency([1,2,3,3], 3) == 1\nassert\n    frequency([1,2,3,3,2], 2) == 2\nassert\n    frequency([1,2,3,3,2,3], 3) == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency([3, 2, 4, 1, 4, 5, 3, 2, 1, 1], 4) == 5\nassert    frequency([4, 4, 2, 1, 4, 5, 3, 2, 1, 1], 1) == 5\nassert    frequency([3, 2, 4, 1, 4, 5, 3, 2, 1, 1], 4) == 5\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency(nums = [1,2,3,3,3,3,4,5],x = 3) == 2\nassert     frequency(nums = [1,2,3,3,3,3,4,5],x = 7) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 1, 2) == 6\nassert     sum_range_list([1, 2, 3, 4], 2, 4) == 10\nassert     sum_range_list([1, 2, 3, 4], 0, 4) == 10\nassert     sum_range_list([], 0, 0) == 0\nassert     sum_range_list([], 2, 2) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 1) == 2\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 2) == 6\nassert     sum_range_list([1, 2, 3, 4, 5], 3, 4) == 8\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 5) == 12\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 6) == 15\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('sum_range_list')\nprint(sum_range_list([1,2,3,4],0,1))\nprint(sum_range_list([1,2,3,4],0,3))\nprint(sum_range_list([1,2,3,4],1,2))\nprint(sum_range_list([1,2,3,4],0,3))\nprint(sum_range_list([1,2,3,4],0,4))\nprint(sum_range_list([1,2,3,4],0,5))\nprint(sum_range_list([1,2,3,4],0,6))\nprint(sum_range_list([1,2,3,4],0,7))\nprint(sum_range_list([1,2,3,4],0,8))\nprint(sum_range_list([1,2,3,4],0,9))\nprint(sum_range_list([1,2,3,4],0,10))\nprint(sum_range_list([1,2,3,4],0,11))\nprint(sum_range_list([1,2,3,4],0,12))\nprint(sum_range_list([1,2,3,4],0,13))\nprint(sum_range_list([1,2,3,4],0,14))\nprint(sum_range_list([1,2,3,4],0,15))\nprint(sum_range_list([1,2,3,4],0,16))\nprint(sum_range_list([1,2,3,4],0,17))\nprint(sum_range_list([1,2,3,4],0,18))\nprint(sum_range_list([1,2,3,4],0,19))\nprint(sum_range_list([1,2,3,4],0,20))\nprint(sum_range_list([1,2,3,4],0,21))\nprint(sum_range_list([1,2,3,4],0,22))\nprint(sum_range_list([1,2,3,4],0,23))\nprint(sum_range_list([1,2,3,4],0,24))\nprint(sum_range_list([1,2,3,4],0,25))\nprint(sum_range_list([1,2,3,4],0,26))\nprint(sum_range_list([1,2,3,4],0,27))\nprint(sum_range_list([1,2,3,4],0,28))\nprint(sum_range_list([1,2,3,4],0,29))\nprint(sum_range_list([1,2,3,4],0,30))\nprint(sum_range_list([1,2,3,4],0,31))\nprint(sum_range_list([1,2,3,4],0,32))\nprint(sum_range_list([1,2,3,4],0,33))\nprint(sum_range_list([1,2,3,4],0,34))\nprint(sum_range_list([1,2,3,4],0,35))\nprint(sum_range_list([1,2,3,4],0,36))\nprint(sum_range_list([1,2,3,4],0,37))\nprint(sum_range_list([1,2,3,4],0,38))\nprint(sum_range_list([1,2,3,4],0,39))\nprint(sum_range_list([1,2,3,4],0,40))\nprint(sum_range_list([1,2,3,4],0,41))\nprint(sum_range_list([1,2,3,4],0,42))\nprint(sum_range_list([1,2,3,4],0,43))\nprint(sum_range_list([1,2,3,4],0,44))\nprint(sum_range_list([1,2,3,4],0,45))\nprint(sum_range_list([1,2,3,4],0,46))\nprint(sum_range_list([1,2,3,4],0,47))\nprint(sum_range_list([1,2,3,4],0,48))\nprint(sum_range_list([1,2,3,4],0,49))\nprint(sum_range_list([1,2,3,4],0,50))\nprint(sum_range_list([1,2,3,4],0,51))\nprint(sum_range_list([1,2,3,4],0,52))\nprint(sum_range_list([1,2,3,4],0,53))\nprint(sum_range_list([1,2,3,4],0,54))\nprint(sum_range_list([1,2,3,4],0,55))\nprint(sum_range_list([1,2,3,4],0,56))\nprint(sum_range_list([1,2,3,4],0,57))\nprint(sum_range_list([1,2,3,4],0,58))\nprint(sum_range_list([1,2,3,4],0,59))\nprint(sum_range_list([1,2,3,4],0,60))\nprint(sum_range_list([1,2,3,4],0,61))\nprint(sum_range_list([1,2,3,4],0,62))\nprint(sum_range_list([1,2,3,4],0,63))\nprint(sum_range_list([1,2,3,4],0,64))\nprint(sum_range_list([1,2,3,4],0,65))\nprint(sum_range_list([1,2,3,4],0,66))\nprint(sum_range_list([1,2,3,4],0,67))\nprint(sum_range_list([1,2,3,4],0,68))\nprint(sum_range_list([1,2,3,4],0,69))\nprint(sum_range_list([1,2,3,4],0,70))\nprint(sum_range_list([1,2,3,4],0,71))\nprint(sum_range_list([1,2,3,4],0,72))\nprint(sum_range_list([1,2,3,4],0,73))\nprint(sum_range_list([1,2,3,4],0,74))\nprint(sum_range_list([1,2,3,4],0,75))\nprint(sum_range_list([1,2,3,4],0,76))\nprint(sum_range_list([1,2,3,4],0,77))\nprint(sum_range_list([1,2,3,4],0,78))\nprint(sum_range_list([1,2,3,4],0,79))\nprint(sum_range_list([1,2,3,4],0,80))\nprint(sum_range_list([1,2,3,4],0,81))\nprint(sum_range_list([1,2,3,4],0,82))\nprint(sum_range_list([1,2,3,4],0,83))\nprint(sum_range_list([1,2,3,4],0,84))\nprint(sum_range_list([1,2,3,4],0,85))\nprint(sum_range_list([1,2,3,4],0,86))\nprint(sum_range_list([1,2,3,4],0,87))\nprint(sum_range_list([1,2,3,4],0,88))\nprint(sum_range_list([1,2,3,4],0,89))\nprint(sum_range_list([1,2,3,4],0,90))\nprint(sum_range_list([1,2,3,4],0,91))\nprint(sum_range_list([1,2,3,4],0,92))\nprint(sum_range_list([1,2,3,4]"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 1) == 6,'sum_range_list 1'\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 3) == 5,'sum_range_list 2'\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 5) == 7,'sum_range_list 3'\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 5) == 7,'sum_range_list 4'\nassert     sum_range_list([1, 2, 3, 4, 5], 2, -1) == 5,'sum_range_list 5'\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to count the number of times that a specific value appears in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         sum_range_list([1, 5, 3, 4, 2, 8], 1, 3) == 4\nassert         sum_range_list([1, 5, 3, 4, 2, 8], 2, 4) == 15\nassert         sum_range_list([1, 5, 3, 4, 2, 8], 1, 2) == 5\nassert         sum_range_list([1, 5, 3, 4, 2, 8], 3, 4) == 14\nassert         sum_range_list([1, 5, 3, 4, 2, 8], 1, 5) == 8\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([0, 1, 2, 3, 4], 0, 3) == 9, \"Your sum_range_list function is incorrect.\"\nassert     sum_range_list([0, 1, 2, 3, 4], 1, 4) == 10, \"Your sum_range_list function is incorrect.\"\nassert     sum_range_list([], 1, 4) == 0, \"Your sum_range_list function is incorrect.\"\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 4) == 15, \"Your sum_range_list function is incorrect.\"\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 5) == 12, \"Your sum_range_list function is incorrect.\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 0, 2) == 7, \"incorrect\"\nassert     sum_range_list([1, 2, 3, 4], 1, 3) == 12, \"incorrect\"\nassert     sum_range_list([1, 2, 3, 4], 1, 4) == 10, \"incorrect\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         sum_range_list([1, 2, 3, 4, 5], 2, 4) == 15, 'incorrect sum_range_list'\nassert         sum_range_list([1, 2, 3, 4, 5], 0, 0) == 5, 'incorrect sum_range_list'\nassert         sum_range_list([1, 2, 3, 4, 5], 1, 2) == 5, 'incorrect sum_range_list'\nassert         sum_range_list([1, 2, 3, 4, 5], -4, 3) == 6, 'incorrect sum_range_list'\nprint('sum_range_list is correct')\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle whose length is a and whose breadth is b.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(2) == 5.0\nassert     perimeter_pentagon(3) == 6.0\nassert     perimeter_pentagon(4) == 8.0\nassert     perimeter_pentagon(5) == 10.0\nassert     perimeter_pentagon(6) == 12.0\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(1) == 5, 'incorrect result of perimeter_pentagon(1)'\nassert     perimeter_pentagon(2) == 10, 'incorrect result of perimeter_pentagon(2)'\nassert     perimeter_pentagon(3) == 15, 'incorrect result of perimeter_pentagon(3)'\nassert     perimeter_pentagon(4) == 20, 'incorrect result of perimeter_pentagon(4)'\nassert     perimeter_pentagon(5) == 25, 'incorrect result of perimeter_pentagon(5)'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perimeter_pentagon(1) == 5,'should be 5'\nassert     perimeter_pentagon(2) == 7,'should be 7'\nassert     perimeter_pentagon(3) == 10,'should be 10'\nassert     perimeter_pentagon(4) == 12,'should be 12'\nassert     perimeter_pentagon(5) == 15,'should be 15'\nprint('Correct')\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(3) == 10\nassert     perimeter_pentagon(7) == 28\nassert     perimeter_pentagon(15) == 110\nassert     perimeter_pentagon(23) == 216\nassert     perimeter_pentagon(32) == 346\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert perimeter_pentagon(1) == 3\nassert perimeter_pentagon(2) == 5\nassert perimeter_pentagon(3) == 8\nassert perimeter_pentagon(4) == 12\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(1) == 5, \"incorrect\"\nassert     perimeter_pentagon(2) == 10, \"incorrect\"\nassert     perimeter_pentagon(3) == 20, \"incorrect\"\nassert     perimeter_pentagon(4) == 30, \"incorrect\"\nassert     perimeter_pentagon(5) == 50, \"incorrect\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance(\"Python is great!\") == 3, \"Sample Test Failed.\"\nassert     count_occurance(\"Hello, Python! How are you?\") == 8, \"Sample Test Failed.\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ns = \"This is a string with'std' and it has'std' and 'Std','stdev' and 'STD' and 'STd' and 'STDd' and 'STDd' and 'STdd' and 'STDdd' and 'STddd' and 'STDddd' and 'STDdddd' and 'STDddddd' and 'STDdddddd' and 'STDddddddd' and 'STDdddddddd' and 'STDddddddddd' and 'STDddddddddd' and 'STDddddddddddd' and 'STDddddddddddd' and 'STDddddddddddd' and 'STDddddddddddd' and 'STDddddddddddd' and 'STDddddddddddddd' and 'STDddddddddddddd' and 'STDddddddddddddd' and 'STDddddddddddddddd' and 'STDddddddddddddddddd' and 'STDddddddddddddddddd' and 'STDddddddddddddddddddd' and 'STDddddddddddddddddddd' and 'STDddddddddddddddddddd' and 'STDddddddddddddddddddddd' and 'STDdddddddddddddddddddddd' and 'STDddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddd' and 'STDddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddd' and 'STDddddddddddddddddddddddddddd' and 'STDddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' and 'STDdddddddddddddddddddddddddddddddddddddd' an"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_occurance('abcdefghi') == 6\nassert count_occurance('abbcddddd') == 5\nassert count_occurance('abcdddddd') == 4\nassert count_occurance('abcddddddd') == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance('the number of times the box is opened') == 3\nassert     count_occurance('the number of times the box is opened') == 2\nassert     count_occurance('the number of times the box is opened') == 1\nassert     count_occurance('the number of times the box is opened') == 0\nassert     count_occurance('the number of times the box is opened') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_polindrome(s):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance('abbaaaddddsss') == 3\nassert     count_occurance('abbbbaaaaddddsss') == 5\nassert     count_occurance('abaaasdsss') == 4\nassert     count_occurance('') == 0\nassert     count_occurance('aaasdsss') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_occurance_v2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \n    Hint: Use a variable to count the number of occurence.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance('Hello World') == 1, 'The function does not have the right output'\nassert     count_occurance('Hello World', 'l') == 0, 'The function does not have the right output'\nassert     count_occurance('Hello World', 'l') == 1, 'The function does not have the right output'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_occurance('abc') == 1\nassert     count_occurance('abcdddddd') == 3\nassert     count_occurance('std') == 1\nassert     count_occurance('stddddddddddddddd') == 2\nassert     count_occurance('stdddddddddddddddd') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance(\"Hello world. You can learn Python at Python Core.\") == 1\nassert     count_occurance(\"Hello world. You can learn Python at Python Core.\") == 3\nassert     count_occurance(\"Hello world. You can learn Python at Python Core. You can learn Python at Python Core.\") == 4\nassert     count_occurance(\"I am sure that I am\") == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type([1, 'a', True, 3.14, 'hello']) == True, \"Wrong answer\"\nassert     check_type([1, 'a', True, 3.14, 'hello']) == False, \"Wrong answer\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_type2(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((\"a\", 1, 2, 3)) == True, \"Test failed. Input does not have same data type\"\nassert     check_type((\"a\", 2, 2, 2)) == False, \"Test failed. Input does not have same data type\"\nassert     check_type((1, 1, 1, 1)) == False, \"Test failed. Input does not have same data type\"\nassert     check_type(()) == False, \"Test failed. Input does not have same data type\"\n\ndef check_type_concatenate(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type((1, 2, 3, 4)) == True\nassert     check_type((1.0, 2.0, 3.0, 4.0)) == False\nassert     check_type(\"hello\") == False\nassert     check_type(1.0) == True\nassert     check_type(\"1.0\") == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type((\"abc\", 1, 2.3, 4, 5)) == True, \"All the elements have same data type\"\nassert     check_type((\"abc\", 1, 2.3, 4, 5.5)) == True, \"All the elements have same data type\"\nassert     check_type((\"abc\", 1, 2.3, 5.5, 4)) == False, \"One of the element does not have same data type\"\nassert     check_type((\"abc\", \"s\", 1.3, 2, 2)) == False, \"All the elements have same data type\"\nassert     check_type((\"abc\", 1.3, 1.3, 1.3, 1.3)) == True, \"All the elements have same data type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type([1, 1.0, 'a']) == True\nassert     check_type((1, 1.0, 'a')) == False\nassert     check_type([]) == False\nassert     check_type((1, 1.0, [])) == False\nassert     check_type((1, 1, {1, 2, 3})) == True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type(('a',1,'a','b','c'))\nassert     check_type(('a',2,'a','b','c'))\nassert     check_type(('a',2.0,'a','b','c'))\nassert     check_type((1,2,3,4))\n\ndef write_loop_statement(iterable):\n    '''\n    Write a loop statement to iterate all elements in the iterable.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type((1,2,3,4,5,6,7,8,9,10)) ==     True\nassert check_type((1,2,3,4,\"5\",6,7,8,9,10)) ==     False\nassert check_type((1,2,3,4,\"5\",6.7,7,8,9,10)) ==     False\nassert check_type((1,2,3,\"a\",\"b\",6,7,8,9,10)) ==     False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_majority([1,2,3,4,5,6], 6, 3) == True, \"is_majority should return True when the element occurs more than half of the time.\"\nassert     is_majority([1,2,3,4,5,6], 4, 3) == False, \"is_majority should return False when the element occurs more than half of the time.\"\nassert     is_majority([1,2,3,4,5,6], 6, 2) == True, \"is_majority should return True when the element occurs more than half of the time.\"\nassert     is_majority([1,2,3,4,5,6], 4, 2) == False, \"is_majority should return False when the element occurs more than half of the time.\"\nassert     is_majority([1,1,1,1], 3, 1) == True, \"is_majority should return True when the element occurs more than half of the time.\"\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_majority([1,2,3], 3, 3) == True\nassert is_majority([1,2,3], 4, 3) == False\nassert is_majority([1,2,3], 5, 3) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_majority([0, 0, 1, 1, 2, 2], 5, 1)\nassert not is_majority([0, 0, 1, 1, 2, 2], 5, 2)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_majority([], 1, 3) == False\nassert     is_majority([], 2, 3) == False\nassert     is_majority([], 3, 3) == True\nassert     is_majority([1], 1, 1) == False\nassert     is_majority([1], 2, 1) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_majority([1,2,3,4,4], 4, 4) == True\nassert     is_majority([1,1,1,3,3], 3, 3) == True\nassert     is_majority([1,2,3,4,5], 5, 4) == False\nassert     is_majority([1,1,1,1,1], 5, 4) == False\nassert     is_majority([1,1,1,1,1,2,2], 5, 4) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nExplanation:\n\nSuppose that arr is a sorted array of length n. Let n_m be the number of elements in arr which is greater than m (i.e., n_m > m). For example, if m = 2 and arr = {1, 2, 3, 4, 5, 6, 7} then n_m = 4.\n\nLet x = 3. Then n_m = 4, so x is the majority element.\n\nIf we see another element x, we update n_m to n_m + 1. Now we see that x is not the majority element anymore.\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_Set_Bits_TEST():\n    assert count_Set_Bits(5) == 1\n    assert count_Set_Bits(6) == 1\n    assert count_Set_Bits(4) == 0\n    "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(12) == 0\nassert     count_Set_Bits(1234) == 1\nassert     count_Set_Bits(12346789) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(16)==3\nassert     count_Set_Bits(34)==4\nassert     count_Set_Bits(42)==4\nassert     count_Set_Bits(43)==3\n\ndef filter_neg_odd_even(A):\n    '''\n    Write a python function to filter out all odd and even numbers from a given array\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(0) == 0, 'for example, 0 should return 0'\nassert count_Set_Bits(1) == 1, 'for example, 1 should return 1'\nassert count_Set_Bits(4) == 2, 'for example, 4 should return 2'\nassert count_Set_Bits(127) == 8, 'for example, 127 should return 8'\nassert count_Set_Bits(256) == 9, 'for example, 256 should return 9'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_Set_Bits(4) == 0\nassert count_Set_Bits(15) == 4\nassert count_Set_Bits(128) == 1\nassert count_Set_Bits(7) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(5) == 1\nassert     count_Set_Bits(12) == 3\nassert     count_Set_Bits(101) == 4\nassert count_Set_Bits(2**100) == 100\nassert count_Set_Bits(0) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(5) == 2\nassert     count_Set_Bits(9) == 3\nassert     count_Set_Bits(10) == 2\nassert     count_Set_Bits(15) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(0) == 0, \"count_Set_Bits(0) is wrong\"\nassert     count_Set_Bits(7) == 1, \"count_Set_Bits(7) is wrong\"\nassert     count_Set_Bits(9) == 1, \"count_Set_Bits(9) is wrong\"\nassert     count_Set_Bits(10) == 2, \"count_Set_Bits(10) is wrong\"\nassert     count_Set_Bits(11) == 2, \"count_Set_Bits(11) is wrong\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_values_string(str=\"abcd\") == \"acd\"\nassert odd_values_string(str=\"abcdabcd\") == \"abcdabcd\"\nassert odd_values_string(str=\"aabcabc\") == \"aabcabc\"\n\n\n\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([ch for i,ch in enumerate(str) if i%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string('w3resource') == 'w3w3w3w'\nassert     odd_values_string('w3w3w3w3w') == '3w3w3w3w3w'\nassert     odd_values_string('w3w3w3w3w') == 'w3w3w3w'\nassert     odd_values_string('w3w3w3w3w3w') == ''\nassert     odd_values_string('w3w3w3w3w3w3w') == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string(\"GeeksQuiz\") == \"Qe\"\nassert odd_values_string(\"GeeksQuiz\") == \"Qe\"\nassert odd_values_string(\"GeeksQuizGeeks\") == \"QG\"\nassert odd_values_string(\"GeeksQuizGeeksQuiz\") == \"G\"\n\ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('abcdefghijklmnopqrstuvwxyz') == 'bdefghjklnoprstvwxyz'\nassert odd_values_string('asdfghjkl') == 'fhjk'\nassert odd_values_string('asdfghjklas') == 'fhk'\nassert odd_values_string('asdfghjklz') == 'fgjk'\nassert odd_values_string('asdfghjkl1') == 'fhjk'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string(\"hello\") == \"hl\"\nassert     odd_values_string(\"hi\") == \"h\"\nassert     odd_values_string(\"python\") == \"thon\"\nassert     odd_values_string(\"hii\") == \"h\"\nassert     odd_values_string(\"yui\") == \"y\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string('cba') == \"ccc\" \nassert odd_values_string('abcdef') == \"abc\" \nassert odd_values_string('aab') == \"aab\" \nassert odd_values_string('') == \"\" \nassert odd_values_string('x') == 'x'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string(\"abcdef\") == \"abc\"\nassert     odd_values_string(\"abcde\") == \"de\"\nassert     odd_values_string(\"abcdefghijk\") == \"ghijk\"\nassert     odd_values_string(\"abcdefghijklmnop\") == \"ghijklmnop\"\nassert     odd_values_string(\"abcdefghijklmnopq\") == \"ghijklmnopq\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_values_string('prince') == 'p'\nodd_values_string('code') == 'od'\nodd_values_string('ab') == 'aa'\nodd_values_string('abab') == 'aa'\nodd_values_string('hello') == 'hello'\nodd_values_string('prince') == 'p'\n\n\ndef odd_values_string_reverse(str):\n    '''\n    Write a python function to reverse the string and then remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_values_string('aba') == 'bba'\nodd_values_string('aabcaa') == 'cba'\nodd_values_string('abc') == 'c'\nodd_values_string('') == ''\nodd_values_string('abcabc') == 'abc'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(1,2,3)==1\nassert     min_of_three(3,1,2)==1\nassert     min_of_three(1,2,1)==1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(1,1,1) == 1\nassert     min_of_three(1,1,3) == 1\nassert     min_of_three(3,1,1) == 1\nassert     min_of_three(1,3,1) == 1\nassert     min_of_three(3,3,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a \n    if b < min_num:\n        min_num = b \n    if c < min_num:\n        min_num = c \n    return min_num \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(5,5,5) == 5\nassert     min_of_three(3,5,2) == 2\nassert min_of_three(4,5,1) == 1\nassert min_of_three(3,4,5) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(2,3,1) == 1\nassert     min_of_three(-2,3,1) == 1\nassert     min_of_three(2,3,-1) == -1\nassert     min_of_three(1,-2,-3) == -1\nassert     min_of_three(-1,-2,-3) == -1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_of_three(10, 20, 30) == 30, \"Wrong answer\"\nprint(\"Test 1 (min_of_three) passed\")\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_of_three(0,0,0) == 0\nassert     min_of_three(5,3,9) == 3\nassert     min_of_three(8,7,1) == 1\nassert     min_of_three(0,2,1) == 1\nassert     min_of_three(1,2,3) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_of_three(5,6,7) == 5\nassert min_of_three(8,6,7) == 6\nassert min_of_three(7,5,6) == 5\nassert min_of_three(9,9,9) == 9"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,4) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == False\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,4) == False\n    all_Bits_Set_In_The_Given_Range(5,0,5) == False\n    all_Bits_Set_In_The_Given_Range(5,1,4) == False\n    all_Bits_Set_In_The_Given_Range(5,1,5) == False\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == False\n    all_Bits_Set_In_The_Given_Range(5,0,5) == False\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,2,5) == True\n    all_Bits_Set_In_The_Given_Range(5,1,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range(5,0,5) == True\n    all_Bits_Set_In_The_Given_Range("
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,0,1) == True, \"1 is not unset and 0 is set.\"\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == True, \"0 is not unset and 0 is set.\"\nassert     all_Bits_Set_In_The_Given_Range(1,0,2) == True, \"1 is not unset and 1 is set.\"\nassert     all_Bits_Set_In_The_Given_Range(2,0,2) == False, \"2 is unset and 2 is set.\"\nassert     all_Bits_Set_In_The_Given_Range(1,0,1) == True, \"1 is not unset and 1 is set.\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,3)==True, \"Error\"\nassert     all_Bits_Set_In_The_Given_Range(5,2,5)==True, \"Error\"\nassert     all_Bits_Set_In_The_Given_Range(5,5,10)==False, \"Error\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,4) == False\nassert     all_Bits_Set_In_The_Given_Range(5,0,5) == True\nassert     all_Bits_Set_In_The_Given_Range(6,0,6) == True\nassert     all_Bits_Set_In_The_Given_Range(1,0,2) == False\nassert     all_Bits_Set_In_The_Given_Range(1,0,1) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,0,3) == True, \"expected: True, actual: {}\".format(all_Bits_Set_In_The_Given_Range(1,0,3))\nassert     all_Bits_Set_In_The_Given_Range(1,3,5) == False, \"expected: False, actual: {}\".format(all_Bits_Set_In_The_Given_Range(1,3,5))\nassert     all_Bits_Set_In_The_Given_Range(1,5,6) == True, \"expected: True, actual: {}\".format(all_Bits_Set_In_The_Given_Range(1,5,6))\nassert     all_Bits_Set_In_The_Given_Range(2,0,2) == False, \"expected: False, actual: {}\".format(all_Bits_Set_In_The_Given_Range(2,0,2))\nassert     all_Bits_Set_In_The_Given_Range(1,0,0) == True, \"expected: True, actual: {}\".format(all_Bits_Set_In_The_Given_Range(1,0,0))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,2,3) == True\nassert     all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert     all_Bits_Set_In_The_Given_Range(10,4,6) == True\nassert     all_Bits_Set_In_The_Given_Range(10,4,7) == False\nassert     all_Bits_Set_In_The_Given_Range(3,0,3) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,4)== True, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert all_Bits_Set_In_The_Given_Range(5,4,7)== False, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert all_Bits_Set_In_The_Given_Range(1,0,1)== True, \"Error in all_Bits_Set_In_The_Given_Range\"\nassert all_Bits_Set_In_The_Given_Range(6,0,7)== False, \"Error in all_Bits_Set_In_The_Given_Range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,4) == True\nassert     all_Bits_Set_In_The_Given_Range(5,1,3) == False\nassert     all_Bits_Set_In_The_Given_Range(5,3,4) == False\nassert     all_Bits_Set_In_The_Given_Range(5,4,5) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10,1,10) == True\nassert     all_Bits_Set_In_The_Given_Range(11,1,11) == False\nassert     all_Bits_Set_In_The_Given_Range(12,1,12) == True\nassert     all_Bits_Set_In_The_Given_Range(12,3,12) == False\nassert     all_Bits_Set_In_The_Given_Range(12,2,12) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(9,1,8) == False\nassert all_Bits_Set_In_The_Given_Range(7,6,7) == False\nassert all_Bits_Set_In_The_Given_Range(1,0,1) == False"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\narr = [1, -2, 3, -4, 5, -6, 7, 8, -9]\nn = 4\n\nre_arrange_array(arr, n)\nassert arr == [7, 8, -9, 1, -2, 3, -4, 5, -6]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     re_arrange_array([-4, -1, 2, -2, 0], 5) == [-4, 0, -1, -2, 2]\nassert     re_arrange_array([-5, -4, -2, 0, 1, -3, -6], 3) == [-5, 0, 1, -4, -2, -3, -6]\nassert     re_arrange_array([-4, -1, 2, -2, 0], 1) == [-4, -1, -2, 0]\nassert     re_arrange_array([-4, -1, 2, -2, 0], 5) == [-4, 0, -1, -2, 2]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     re_arrange_array([1,3,-2,0,-1], 3) == [-1,0,-1,-2,3]\nassert     re_arrange_array([1,3,2,-1], 2) == [3,2,-1,1]\nassert     re_arrange_array([-1,-2,0,-1], 1) == [-2,-1,0,-1]\nassert     re_arrange_array([], 1) == []\nassert     re_arrange_array([1,2,3], 0) == []\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     re_arrange_array([1,2,3,-4,5,-6], 3) == [-6,1,2,5,-4,3], \"FAIL\"\nassert     re_arrange_array([2,3,4,-5,6,7,8,9,-10,11,12,-13], 4) == [-13,2,3,4,5,6,7,8,-10,9,11,-12], \"FAIL\"\nassert     re_arrange_array([1,2,3,4,5,6,7,8,-9,10,-11,12,13,14,15,16], 5) == [-11,1,2,3,4,5,6,7,8,9,10,13,14,15,16], \"FAIL\"\nassert     re_arrange_array([-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], 4) == [-2,0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], \"FAIL\"\nassert     re_arrange_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], 5) == [-2,0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], \"FAIL\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     re_arrange_array([3,1,-2,4,2], 4) == [-2,1,-3,2,4]\nassert     re_arrange_array([1,4,-2,1,5,-6,-7,-3,2], 5) == [-7,-6,-5,-4,-3,-2,-1,-1,1]\n\ndef find_n_larget_value(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and returns the n-th largest element in the array. \n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([2, 1, -1, 3, -2], 2) == [-2, 1, -1, 3, 2]\nassert re_arrange_array([2, 1, -1, 3, -2], 1) == [-2, 1, -1, 3, -2]\nassert re_arrange_array([2, 1, -1, 3, -2], 0) == [-2, 1, -1, 3, -2]\nassert re_arrange_array([2, -1, 3, -2, 4], 1) == [-2, 1, -1, 3, -2, 4]\nassert re_arrange_array([2, -1, 3, -2, 4], 0) == [-2, -1, 3, -2, 4]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([-1, 5, 3, -4, -3], 3) == [-1, 5, 3, -4, -3], 'wrong'\nassert     re_arrange_array([-1, 5, 3, -4, -3], 4) == [-1, -3, -4, 5, 3], 'wrong'\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_blank('hello world!',' ') == 'hello world!'\nassert     replace_blank('a b c',' ') == 'a b c'\nassert     replace_blank(' ', '$') == '$'\nassert     replace_blank(' ','') ==''\nassert     replace_blank('','') == ''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_blank('i have no ', 'i') == 'i have no       '\nassert     replace_blank('i have no  ', 'i') == 'i have no         '\n\nprint('Done!'"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreplace_blank(\"A B  C\",' ')==\"A B C\"\n\nprint('')"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank('this is a test','') == 'this is a test', 'failed'\nassert     replace_blank('','') == '', 'failed'\nassert     replace_blank(' ', '') == '', 'failed'\nassert     replace_blank('     ','') == '', 'failed'\nassert     replace_blank('','') == '', 'failed'\nprint('passed all tests')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n'''\nx =''\ny = 'a'\nreplace_blank(x,y)\n'''\n\ndef search_and_replace(str1,char1,char2):\n    '''\n    Write a function that takes in a string and character, searches for the character in the string and replaces it with the second character.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank('','') == ''\nassert     replace_blank(' ','') == ''\nassert     replace_blank('','x') == 'x'\nassert     replace_blank('hello','') == 'hello'\nassert     replace_blank('hello','x') == 'xhello'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     larg_nnum([10,5,2,3,7,4,5,6], 5) == [10,5,2,3,7]\nassert     larg_nnum([10,5,2,3,7,4,5,6], 4) == [7,4,5,6]\nassert     larg_nnum([10,5,2,3,7,4,5,6], 3) == [7,5]\nassert     larg_nnum([10,5,2,3,7,4,5,6], 2) == [5,7]\nassert     larg_nnum([10,5,2,3,7,4,5,6], 1) == [5,7,6,3,2,10,4]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     larg_nnum([1,2,3,4,5,6,7,8,9],2) == [9, 8]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9],3) == [9, 8, 7]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9],5) == [8, 7, 6, 5, 4]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9],0) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef closest_small(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     larg_nnum([10,100,20,30,40,50,60,70,80,90],3) == [40,70,90]\nassert     larg_nnum([10,100,20,30,40,50,60,70,80,90],4) == [80,100,90,70]\nassert     larg_nnum([1,100,2,3,4,5,6,7,8,9],2) == [7,9]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9],3) == []\nassert     larg_nnum([10,1,20,30,40,50,60,70,80,90],5) == [70,80,90]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlarg_nnum([1, 2, 3, 5, -10],3) == [-10, 5, 3]\nassert larg_nnum([1, 2, 3, 5, -10],4) == [-10, 5, 3, 1]\nassert larg_nnum([1, 2, 3, 5, -10],2) == [-10, 5]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef larg_lst(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     larg_nnum([10,1,2,7,1,4,10,10,10,10,11],1) == [10,]\nassert     larg_nnum([10,1,2,7,1,4,10,10,10,10,11],2) == [10,1,11]\nassert     larg_nnum([10,1,2,7,1,4,10,10,10,10,11],3) == [10,1,4,10,11]\nassert     larg_nnum([1,1,1,1],1) == [1,]\nassert     larg_nnum([1,1,1,1],2) == [1,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"OK!\")\nprint(\"Smallest Nnum tests passed!\")"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef zeros(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsuface_cylinder(2,1) == 2*pi*r, 'incorrect lateralsuface_cylinder'\nassert     lateralsuface_cylinder(2,2) == 2*pi*r*h, 'incorrect lateralsuface_cylinder'\nassert     lateralsuface_cylinder(2.1,1) == 2*pi*r, 'incorrect lateralsuface_cylinder'\nassert     lateralsuface_cylinder(2.1,2) == 2*pi*r*h, 'incorrect lateralsuface_cylinder'\nassert     lateralsuface_cylinder(2,3) == 2*pi*r*h, 'incorrect lateralsuface_cylinder'\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(3,2) == 2\nassert     lateralsuface_cylinder(2,3) == 4\nassert     lateralsuface_cylinder(3,4) == 8\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsuface_cylinder(10,5) == 2.1666666666666667\nassert     lateralsuface_cylinder(5,5) == 3.14\nassert     lateralsuface_cylinder(1,10) == 1.5\nassert     lateralsuface_cylinder(0,10) == 0.0\nassert     lateralsuface_cylinder(0,0) == 0.0\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlateralsuface_cylinder(1,1) == 1.5 * 3.14 * 1 * 2\nassert \nlateralsuface_cylinder(5,5) == 1.5 * 3.14 * 5 * 4\nassert \nlateralsuface_cylinder(2,2) == 1.5 * 3.14 * 2 * 2\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsuface_cylinder(10,3) == 5.8\nassert     lateralsuface_cylinder(3,4) == 5.76\nassert     lateralsuface_cylinder(5,3) == 7.4\nassert     lateralsuface_cylinder(2,2) == 4.4\nassert     lateralsuface_cylinder(5,5) == 8.8\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsuface_cylinder(0.2,0.3) == 0.14, \"Wrong calculation\"\nprint(\"You passed the test!\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlateralsuface_cylinder(5,2)\nlateralsuface_cylinder(3,3)\n\n\n'''\nSolution:\n'''\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cube(5) == 25\nassert     volume_cube(1) == 1\nassert     volume_cube(0.5) == 0.25\nassert     volume_cube
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(1) == 1, \"Wrong\"\nassert     volume_cube(2) == 2, \"Wrong\"\nassert     volume_cube(3) == 27, \"Wrong\"\nassert     volume_cube(4) == 64, \"Wrong\"\nassert     volume_cube(5) == 125, \"Wrong\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # input\n    print('Example:')\n    print(volume_cube(3))\n\n    # output\n    print('Expected:')\n    print(27)\n\n    assert volume_cube(3) == 2"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(5) == 125\nassert     volume_cube(10) == 1000\nassert     volume_cube(20) == 2000\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(4) == 16\nassert     volume_cube(6) == 216\n\n'''\nWrite a function called volume_cuboid that takes a length and a width and a height as inputs and returns the volume of a cuboid given those dimensions.\n\nFor example, volume_cuboid(5, 7, 4) should return 70 since the volume of a cuboid with dimensions 5 by 7 by 4 is 70.\n'''\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(6) == 216\nassert     volume_cube(8) == 864\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 2\nassert     volume_cube(3) == 6\nassert     volume_cube(4) == 24\nassert     volume_cube(5) == 120\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef odd_bit_set_number(n):\n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_bit_set_number(0xAA) == 0x55\nassert even_bit_set_number(0xABC) == 0xCC\nassert even_bit_set_number(0x11000000) == 0x55\nassert even_bit_set_number(0x11000001) == 0x55\nassert even_bit_set_number(0x11001100) == 0xCC\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(1) == 1\nassert     even_bit_set_number(2) == 2\nassert even_bit_set_number(3) == 1\nassert even_bit_set_number(4) == 2\nassert even_bit_set_number(8) == 2\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_bit_set_number(1) == 0\neven_bit_set_number(2) == 0\neven_bit_set_number(3) == 0\neven_bit_set_number(8) == 1\neven_bit_set_number(15) == 1\neven_bit_set_number(32) == 1\neven_bit_set_number(64) == 1\neven_bit_set_number(128) == 1\neven_bit_set_number(256) == 0\neven_bit_set_number(512) == 0\neven_bit_set_number(1024) == 0\neven_bit_set_number(2048) == 0\neven_bit_set_number(4096) == 1\neven_bit_set_number(8192) == 1\neven_bit_set_number(16384) == 1\neven_bit_set_number(32768) == 1\neven_bit_set_number(65536) == 0\neven_bit_set_number(131072) == 0\neven_bit_set_number(262144) == 0\neven_bit_set_number(524288) == 1\neven_bit_set_number(1048576) == 0\neven_bit_set_number(2097152) == 1\neven_bit_set_number(4194304) == 1\neven_bit_set_number(8388608) == 1\neven_bit_set_number(16777216) == 1\neven_bit_set_number(33554432) == 1\neven_bit_set_number(67108864) == 1\neven_bit_set_number(134217728) == 1\neven_bit_set_number(268435456) == 1\neven_bit_set_number(536870912) == 1\neven_bit_set_number(1073741824) == 0\neven_bit_set_number(2147483648) == 0\neven_bit_set_number(4294967296) == 1\neven_bit_set_number(8589934592) == 1\neven_bit_set_number(17179869184) == 1\neven_bit_set_number(34359738368) == 1\neven_bit_set_number(650390625) == 1\neven_bit_set_number(137438953472) == 1\neven_bit_set_number(274877906944) == 1\neven_bit_set_number(524288000) == 1\neven_bit_set_number(1099511627776) == 1\neven_bit_set_number(2199023255552) == 1\neven_bit_set_number(429496729760) == 1\neven_bit_set_number(8796093022208) == 1\neven_bit_set_number(17592186044416) == 1\neven_bit_set_number(35184372088832) == 1\neven_bit_set_number(634765625) == 1\neven_bit_set_number(131072000) == 0\neven_bit_set_number(268435456) == 0\neven_bit_set_number(524288000) == 0\neven_bit_set_number(1099511627776) == 0\neven_bit_set_number(2199023255552) == 0\neven_bit_set_number(429496729760) == 0\neven_bit_set_number(8796093022208) == 0\neven_bit_set_number(17592186044416) == 0\neven_bit_set_number(35184372088832) == 0\neven_bit_set_number(634765625) == 0\neven_bit_set_number(131072000) == 1\neven_bit_set_number(268435456) == 1\neven_bit_set_number(524288000) == 1\neven_bit_set_number(1099511627776) == 1\neven_bit_set_number(2199023255552) == 1\neven_bit_set_number(429496729760) == 1\neven_bit_set_number(8796093022208) == 1\neven_bit_set_number(17592186044416) == 1\neven_bit_set_number(35184372088832) == 1\neven_bit_set_number(634765625) == 1\neven_bit_set_number(131072000) == 1\neven_bit_set_number(268435456) == 1\neven_bit_set_number(524288000) == 1\neven_bit_set_number(1099511627776) == 1\neven_bit_set_number(2199023255552) == 1\neven_bit_set_number(429496729760) == 1\neven_bit_set_number(8796093022208) == 1\neven_bit_set_number(17592186044416) == 1\neven_bit_set_number(35184372088832) == 1\neven_bit_set_number(634765625) == 1\neven_bit_set_number(131072000) == 0\neven_bit_set_number(268435456) == 0\neven_bit_set_number(524288000) == 0\neven_bit_set_number(1099511627776) == 0\neven_bit_set_number(2199023255552) == 0\neven_bit_set_number(429496729760) == 0\neven_bit_set_number(8796093022208) == 0\neven_bit_set_number(17592186044416) == 0\neven_bit_set_number(35184372088832) == 0\neven_bit_set_number(634765625) == 0\neven_bit_set_number(131072000) == 1\neven_bit_set_number(268435456) == 1\neven_bit_set_number(524288000) == 1\neven_bit_set_number(1099511627776) == 1\neven_bit_set_number(2199023255552) == 1\neven_bit_set_number(429496729760) == 1\neven_bit_set_number(8796093022208) == 1\neven_bit_set_number(17592186044416) == 1\neven_bit_set_number(35184372088832) == 1\neven_bit_set_number(634765625) == 1\neven_bit_set_number(131072000) == 1\neven_bit_set_number(268435456) == 1\neven_bit_set_number(524288000) == 1\neven_bit_set_number(1099511627776) == 1\neven_bit_set_number(2199023255552) == 1\neven_bit_set_number(429496729760) == 1\neven_bit_set_number(8796093022208) == 1\neven_bit_set_number(17592186044416) == 1\neven_bit_set_number(35184372088832) == 1\neven_bit_set_number(634765625) == 1\neven_bit_set_number(131072000) == 1\neven_bit_set_number(268435456) == 1\neven_bit_set_number(524288000) == 1\neven_bit_set_number(1099511627776) == 1\neven_bit_set_number(2199023255552) == 1\neven_bit_set_number(429496729760) == 1\neven_bit_set_number(8796093022208) == 1\neven_bit_set_number(17592186044416) == 1\neven_bit_set_number(35184372088832) == 1\neven_bit_set_number(634765625) == 1\neven_bit_set_number(131072000) == 1\neven_bit_set_number(268435456) == 1\neven_bit_set_number(524288000) == 1\neven_bit_set_number(1099511627776) == 1\neven_bit_set_number(2199023255552) == 1\neven_bit_set_number(429496"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef even_bit_set_number_using_bin(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_bit_set_number(0b0000) == 0b0000\nassert     even_bit_set_number(0b0001) == 0b0001\nassert     even_bit_set_number(0b0010) == 0b0000\nassert     even_bit_set_number(0b0011) == 0b0011\nassert     even_bit_set_number(0b0100) == 0b0000\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_bit_set_number(0b010101010101010101010101010101010101) == 0b010101010101010101010101010101010101\neven_bit_set_number(0b000001010101010101010101010101010101) == 0b00011010101010101010101010101010101\neven_bit_set_number(0b111011101010101010101010101010101) == 0b11111101010101010101010101010101\neven_bit_set_number(0b11111101010101010101010101010101) == 0b11111101010101010101010101010101\n\n\ndef even_bit_set_number_with_n_bits(n): \n    '''\n    Write a python function to set all even bits of a given number upto n bits.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([(1,2), (2,3), (1,1), (3,4), (2,2)]) == {(1,1): 3, (2,2): 2, (3,4): 1}\nassert check_occurences([(1,2), (2,3), (1,1), (3,4), (2,2), (4,5)]) == {(1,1): 3, (2,2): 2, (3,4): 1, (4,5): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_occurences([(2, 4), (1, 2), (1, 3), (1, 4), (1, 3), (2, 2)]) == {(1, 2): 5, (1, 3): 4, (2, 2): 3}\nassert check_occurences([(1, 2), (2, 2), (3, 2), (1, 2), (3, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2): 5, (1, 2): 4, (2, 2): 3}\n\ndef mapper(items):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_occurences([(0, 1), (2, 3), (4, 5)]) == {(0, 1): 2, (2, 3): 1, (4, 5): 1}\nassert     check_occurences([(0, 1), (2, 3), (3, 4)]) == {(0, 1): 1, (2, 3): 2, (3, 4): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_occurences([(\"a\", 1), (\"a\", 3), (\"a\", 4), (\"a\", 2), (\"b\", 1), (\"b\", 4), (\"b\", 2), (\"c\", 2), (\"c\", 4), (\"c\", 5)]) == {\n                (\"a\", 1):3, \n                (\"b\", 1):2, \n                (\"c\", 2):3}\n\nassert check_occurences([(\"a\", 1), (\"a\", 3), (\"a\", 4), (\"a\", 2), (\"b\", 1), (\"b\", 4), (\"b\", 2), (\"c\", 2), (\"c\", 4), (\"c\", 5)]) == {\n                (\"a\", 1):3, \n                (\"a\", 3):1, \n                (\"a\", 4):2, \n                (\"a\", 2):1, \n                (\"b\", 1):2, \n                (\"b\", 4):2, \n                (\"b\", 2):1, \n                (\"c\", 2):3, \n                (\"c\", 4):2, \n                (\"c\", 5):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_occurences([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9)]) == \n        {\n            (1, 2): 3,\n            (2, 3): 3,\n            (3, 4): 3,\n            (4, 5): 3,\n            (5, 6): 3,\n            (6, 7): 3,\n            (7, 8): 3,\n            (8, 9): 3\n        }\nassert     check_occurences([(1,2,3), (2,3,4), (3,4,5)]) == \n        {\n            (1, 2, 3): 2,\n            (2, 3, 4): 2,\n            (3, 4, 5): 2\n        }\nassert     check_occurences([]) == \n        {}\nassert     check_occurences([(1,2)]) == \n        {\n            (1, 2): 1\n        }\n\ndef check_occurences2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_occurences([('a', 1), ('b', 2), ('a', 1)]) == {('a', 1): 2, ('b', 2): 1, ('a', 1): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([(1, 'a'), (1, 'b'), (1, 'c')]) == {(1, 'a'): 2, (1, 'b'): 1, (1, 'c'): 1}\nassert     check_occurences([(2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b')]) == {(2, 'a'): 3, (2, 'b'): 1, (3, 'a'): 1, (3, 'b'): 1}\nassert     check_occurences([(2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b')]) == {(2, 'a'): 3, (2, 'b'): 1, (3, 'a'): 1, (3, 'b'): 1}\nassert     check_occurences([(1, 'a'), (1, 'b'), (2, 'a')]) == {(1, 'a'): 2, (1, 'b'): 1, (2, 'a'): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_list = [['apple', 'banana'], ['apples', 'banana'], ['apple', 'banana']]\n\nresult = {('apple', 'banana'): 2, ('apples', 'banana'): 2, ('apple', 'banana'): 2}\n\nassert check_occurences(test_list) == result, 'Expected: {}, Output: {}'.format(result, check_occurences(test_list))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert number_of_substrings(\"banana\") == 6\nassert number_of_substrings(\"\") == 0\nassert number_of_substrings(\"abc\") == 3\nassert number_of_substrings(\"ab\") == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert number_of_substrings('a') == 1\nassert number_of_substrings('b') == 0\nassert number_of_substrings('bb') == 2\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_of_substrings('abc') == 3\nassert     number_of_substrings('abcdef') == 5\nassert     number_of_substrings('abcabc') == 6\nassert     number_of_substrings('abcabcdef') == 7\nassert     number_of_substrings('abcabcdefgh') == 7\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_of_substrings(\"abracadabra\") == 11, \"Wrong answer, please check your code\"\nassert     number_of_substrings(\"\") == 0, \"Wrong answer, please check your code\"\nassert     number_of_substrings(\" \") == 0, \"Wrong answer, please check your code\"\nassert     number_of_substrings(\"\") == 0, \"Wrong answer, please check your code\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    number_of_substrings('hello world') == 4\n    number_of_substrings('hello world') == 5\n    number_of_substrings('hello world') == 2\n    number_of_substrings('hello world') == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\nTesting number_of_substrings:')\nnum_of_substrings = number_of_substrings(\"kkkllll\")\nassert num_of_substrings == 5\nnum_of_substrings = number_of_substrings(\"kkkk\")\nassert num_of_substrings == 4\nnum_of_substrings = number_of_substrings(\"kk\")\nassert num_of_substrings == 3\nnum_of_substrings = number_of_substrings(\"kk\")\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings('abc') == 2\nassert     number_of_substrings('abab') == 4\nassert     number_of_substrings('abac') == 2\nassert     number_of_substrings('abcd') == 0\n\ndef number_of_substrings_in_python(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    The minimum length substring is a string with minimum number of letters.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(3,2) == 4, \"get_total_number_of_sequences returned incorrect result\"\n\nassert     get_total_number_of_sequences(0,0) == 0, \"get_total_number_of_sequences returned incorrect result\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(3,1) == 1\nassert     get_total_number_of_sequences(10,3) == 10\nassert     get_total_number_of_sequences(8,4) == 60\nassert     get_total_number_of_sequences(8,5) == 120\n\nprint (\"Passed tests\")"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(6, 2) == 4\nassert     get_total_number_of_sequences(2, 4) == 2\nassert     get_total_number_of_sequences(1, 1) == 1\nassert     get_total_number_of_sequences(10, 5) == 6\nassert     get_total_number_of_sequences(6, 1) == 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(3,4) == 4\nassert     get_total_number_of_sequences(3,5) == 6\nassert     get_total_number_of_sequences(3,6) == 10\nassert     get_total_number_of_sequences(3,7) == 14\nassert     get_total_number_of_sequences(3,8) == 18\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(5,3) == 2, \"Total number of sequences of length 3 = 2\"\nassert     get_total_number_of_sequences(7,5) == 4, \"Total number of sequences of length 5 = 4\"\nassert     get_total_number_of_sequences(12,5) == 10, \"Total number of sequences of length 5 = 10\"\nassert     get_total_number_of_sequences(1,1) == 0, \"Total number of sequences of length 1 = 0\"\nassert     get_total_number_of_sequences(7,2) == 0, \"Total number of sequences of length 2 = 0\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nget_total_number_of_sequences(4,3) == 7\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nget_total_number_of_sequences(5,3) == 8\nget_total_number_of_sequences(12,6) == 243\n\n\ndef get_total_number_of_sequences_recursive(m, n):\n    if m < n:\n        return 0\n    if m == n:\n        return 1\n    return get_total_number_of_sequences_recursive(m, n - 1) + get_total_number_of_sequences_recursive(m - 1, n)"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(3,5) == 7 \nassert     get_total_number_of_sequences(5,5) == 24 \nassert     get_total_number_of_sequences(3,3) == 2 \nassert     get_total_number_of_sequences(7,3) == 13 \nassert     get_total_number_of_sequences(8,4) == 56 \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (replace_list(['a','b','c'], ['d','e','f']) == ['a','b','f'])\nassert     (replace_list(['a','b','c'], ['a','e','f']) == ['a','b','c'])\nassert     (replace_list(['a','b','c'], ['c','e','f']) == ['a','b','c'])\nassert     (replace_list(['a','b','c'], ['d','e','f']) == ['a','b','c'])\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint()\nprint(\"*** Task 2: write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\")\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3,4],[5,6,7]) == [1,2,7,4], 'Error in replace_list'\nassert     replace_list([1,2,3,4],[5,6]) == [1,2,3,5], 'Error in replace_list'\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([1,2,3,4,5], [11,22,33,44,55]) ==    [1,2,3,11,22,33,44,55] \nassert     replace_list([], [11,22,33,44,55]) ==    [11,22,33,44,55] \nassert     replace_list([1,2,3,4,5,6,7], [11,22,33,44,55]) ==    [1,2,3,11,22,33,44,55] \nassert     replace_list([1,2,3,4,5,6,7], [11,22]) ==    [1,2,3,11,22,33,44,55] \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nreplace_list([1,2,3],[4,5,6]) == [1,2,3,4,5,6]\nassert \nreplace_list([8,9,10,11],[12,13,14,15]) == [8,9,10,11,12,13,14,15]\nassert \nreplace_list([1,2,3],[4,5,6,7]) == [1,2,3,4,5,6,7]"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\nassert     replace_list([4, 5, 6], [1, 2, 3]) == [4, 5, 6]\nassert     replace_list([], [1, 2, 3]) == [1, 2, 3]\nassert     replace_list([1, 2, 3], []) == [1, 2, 3]\nassert     replace_list([1, 2, 3], None) == None\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [1,2,3,4,5,6], 'Wrong output'\nprint('The function replace_list passes all tests')\n\n\ndef replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list2 = list2[1:]\n    return list1 + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"Wrong\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef add_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and adds them together. Return the sum as a new list.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_charac(\"Hi there!\") == 13\nassert count_charac(\"\") == 0\n\n\ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_charac(\"\")    == 0\nassert     count_charac(\"test\")    == 5\nassert     count_charac(\"This is a test\")    == 13\nassert     count_charac(\"a\")    == 1\nassert     count_charac(\"ab\")    == 2\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac('qweasdzxc') == 6\nassert     count_charac('') == 0\nassert     count_charac('qw') == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_charac(\"abcdef\") == 6\nassert     count_charac(\"a\") == 1\nassert     count_charac(\"\") == 0\nassert     count_charac(\"a \") == 1\nassert     count_charac(\"a\\n\") == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    print(len(str1))"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_charac('A') == 1\nassert     count_charac('a') == 1\nassert     count_charac('I') == 1\nassert     count_charac('i') == 1\nassert     count_charac('I') == 2\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac('python') == 10\nassert     count_charac('tcp') == 9\nassert     count_charac('pythonp') == 11\nassert     count_charac('') == 0\nassert     count_charac('pyth') == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_charac('hello world') == 6, \"Not correct\"\nassert     count_charac('a a a a') == 4, \"Not correct\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    next_Perfect_Square(1) == 1\n    next_Perfect_Square(2) == 3\n    next_Perfect_Square(4) == 5\n    next_Perfect_Square(8) == 9\n    next_Perfect_Square(10) == 10\n    next_Perfect_Square(11) == 11\n    next_Perfect_Square(12) == 13\n    next_Perfect_Square(14) == 15\n    next_Perfect_Square(16) == 17\n    next_Perfect_Square(18) == 19\n    next_Perfect_Square(20) == 21\n    next_Perfect_Square(21) == 23\n    next_Perfect_Square(22) == 24\n    next_Perfect_Square(23) == 25\n    next_Perfect_Square(24) == 26\n    next_Perfect_Square(25) == 27\n    next_Perfect_Square(26) == 29\n    next_Perfect_Square(27) == 31\n    next_Perfect_Square(28) == 33\n    next_Perfect_Square(29) == 35\n    next_Perfect_Square(30) == 37\n    next_Perfect_Square(31) == 39\n    next_Perfect_Square(32) == 41\n    next_Perfect_Square(33) == 43\n    next_Perfect_Square(34) == 45\n    next_Perfect_Square(35) == 47\n    next_Perfect_Square(36) == 49\n    next_Perfect_Square(37) == 51\n    next_Perfect_Square(38) == 53\n    next_Perfect_Square(39) == 55\n    next_Perfect_Square(40) == 57\n    next_Perfect_Square(41) == 59\n    next_Perfect_Square(42) == 61\n    next_Perfect_Square(43) == 63\n    next_Perfect_Square(44) == 65\n    next_Perfect_Square(45) == 67\n    next_Perfect_Square(46) == 69\n    next_Perfect_Square(47) == 71\n    next_Perfect_Square(48) == 73\n    next_Perfect_Square(49) == 75\n    next_Perfect_Square(50) == 77\n    next_Perfect_Square(51) == 79\n    next_Perfect_Square(52) == 81\n    next_Perfect_Square(53) == 83\n    next_Perfect_Square(54) == 85\n    next_Perfect_Square(55) == 87\n    next_Perfect_Square(56) == 89\n    next_Perfect_Square(57) == 91\n    next_Perfect_Square(58) == 93\n    next_Perfect_Square(59) == 95\n    next_Perfect_Square(60) == 97\n    next_Perfect_Square(61) == 99\n    next_Perfect_Square(62) == 101\n    next_Perfect_Square(63) == 103\n    next_Perfect_Square(64) == 105\n    next_Perfect_Square(65) == 107\n    next_Perfect_Square(66) == 109\n    next_Perfect_Square(67) == 111\n    next_Perfect_Square(68) == 113\n    next_Perfect_Square(69) == 115\n    next_Perfect_Square(70) == 117\n    next_Perfect_Square(71) == 119\n    next_Perfect_Square(72) == 121\n    next_Perfect_Square(73) == 123\n    next_Perfect_Square(74) == 125\n    next_Perfect_Square(75) == 127\n    next_Perfect_Square(76) == 129\n    next_Perfect_Square(77) == 131\n    next_Perfect_Square(78) == 133\n    next_Perfect_Square(79) == 135\n    next_Perfect_Square(80) == 137\n    next_Perfect_Square(81) == 139\n    next_Perfect_Square(82) == 141\n    next_Perfect_Square(83) == 143\n    next_Perfect_Square(84) == 145\n    next_Perfect_Square(85) == 147\n    next_Perfect_Square(86) == 149\n    next_Perfect_Square(87) == 151\n    next_Perfect_Square(88) == 153\n    next_Perfect_Square(89) == 155\n    next_Perfect_Square(90) == 157\n    next_Perfect_Square(91) == 159\n    next_Perfect_Square(92) == 161\n    next_Perfect_Square(93) == 163\n    next_Perfect_Square(94) == 165\n    next_Perfect_Square(95) == 167\n    next_Perfect_Square(96) == 169\n    next_Perfect_Square(97) == 171\n    next_Perfect_Square(98) == 173\n    next_Perfect_Square(99) == 175\n    next_Perfect_Square(100) == 177\n    next_Perfect_Square(101) == 179\n    next_Perfect_Square(102) == 181\n    next_Perfect_Square(103) == 183\n    next_Perfect_Square(104) == 185\n    next_Perfect_Square(105) == 187\n    next_Perfect_Square(106) == 189\n    next_Perfect_Square(107) == 191\n    next_Perfect_Square(108) == 193\n    next_Perfect_Square(109) == 195\n    next_Perfect_Square(110) == 197\n    next_Perfect_Square(111) == 199\n    next_Perfect_Square(112) == 201\n    next_Perfect_Square(113) == 203\n    next_Perfect_Square(114) == 205\n    next_Perfect_Square(115) == 207\n    next_Perfect_Square(116) == 209\n    next_Perfect_Square(117) == 211\n    next_Perfect_Square(118) == 213\n    next_Perfect_Square(119) == 215\n    next_Perfect_Square(120) == 217\n    next_Perfect_Square(121) == 219\n    next_Perfect_Square(122) == 221\n    next_Perfect_Square(123) == 223\n    next_Perfect_Square(124) == 225\n    next_Perfect_Square(125) == 227\n    next_Perfect_Square(126) == 229\n    next_Perfect_Square(127) == 231\n    next_Perfect_Square(128) == 233\n    next_Perfect_Square(129) == 235\n    next_Perfect_Square(130) == 237\n    next_Perfect_Square(131) == 239\n    next_Perfect_Square(132) == 241\n    next_Perfect_Square(133) == 243\n    next_Perfect_Square(134) == 245\n    next_Perfect_Square(135) == 247\n    next_Perfect_Square(136) == 249\n    next_Perfect_Square(137) == 251\n    next_Perfect_Square(138) == 253\n    next_Perfect_Square(139) == 255\n    next_Perfect_Square(140) == 257\n    next_Perfect_Square(141) == 259\n    next_Perfect_Square(142) == 261\n    next_Perfect_Square(143) == 263\n    next_Perfect_Square(144) == 265\n    next_Perfect_Square(145) == 267\n    next_Perfect_Square(146) == 269\n    next_Perfect_Square(147) == 271\n    next_Perfect_Square(148) == 273\n    next_Perfect_Square(149) == 275\n    next_Perfect_Square(150) == 277\n    next_Perfect_Square(151) == 279\n    next_Perfect_Square(152) == 281\n    next_Perfect_Square(153) == 283\n    next_Perfect_Square(154) == 285\n    next_Perfect_Square(155) == 287\n    next_Perfect_Square(156) == 289\n    next_Perfect_Square(157) == 291\n    next_Perfect_Square(158) == 293\n    next_Perfect_Square(159) == 295\n    next_Perfect_Square(160) == 297\n    next_Perfect_Square(161) == 299\n    next_Perfect_Square(162) == 301\n    next_Perfect_Square(163) == 303\n    next_Perfect_Square(164) == 305\n    next_Perfect_Square(165) == 307\n    next_Perfect_Square(166) == 309\n    next_Perfect_Square(167) == 311\n    next_Perfect_Square(168) == 313\n    next_Perfect_Square(169) == 315\n    next_Perfect_Square(170) == 317\n    next_Perfect_Square(171) == 319\n    next_Perfect_Square(172) == 321\n    next_Perfect_Square(173) == 323\n    next_Perfect_Square(174) == 325\n    next_Perfect_Square(175"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_Perfect_Square(1)    == 1\nassert     next_Perfect_Square(2)    == 3\nassert     next_Perfect_Square(3)    == 4\nassert     next_Perfect_Square(4)    == 5\nassert     next_Perfect_Square(6)    == 9\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(2) == 3\nassert next_Perfect_Square(9) == 12\nassert next_Perfect_Square(17) == 19\n\ndef is_Anagram(s1,s2):\n    '''\n    Write a python function that check whether the two strings are anagram or not.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(27) == 28\nassert     next_Perfect_Square(9) == 13\nassert     next_Perfect_Square(26) == 39\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert next_Perfect_Square(4) == 4\nassert next_Perfect_Square(9) == 10\nassert next_Perfect_Square(25) == 26\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert next_Perfect_Square(1) == 1\nassert next_Perfect_Square(4) == 4\nassert next_Perfect_Square(13) == 13\nassert next_Perfect_Square(16) == 16\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(5) == 6\nassert     next_Perfect_Square(6) == 7\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(1) == 1, \"Error in next_Perfect_Square\"\nassert     next_Perfect_Square(4) == 5, \"Error in next_Perfect_Square\"\nassert     next_Perfect_Square(6) == 9, \"Error in next_Perfect_Square\"\nassert     next_Perfect_Square(8) == 13, \"Error in next_Perfect_Square\"\nassert     next_Perfect_Square(2) == 3, \"Error in next_Perfect_Square\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(1) == 1, \"Not true\"\nassert     next_Perfect_Square(4) == 5, \"Not true\"\nassert     next_Perfect_Square(100) == 101, \"Not true\"\nassert     next_Perfect_Square(99) == 100, \"Not true\"\nassert     next_Perfect_Square(99999) == 100001, \"Not true\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint (\"Pass\" if  (next_Perfect_Square(9) == 10) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(1) == 1) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(4) == 4) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(12) == 13) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(16) == 17) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(26) == 27) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(49) == 50) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(61) == 62) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(77) == 78) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(91) == 92) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(100) == 101) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(121) == 122) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(131) == 132) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(141) == 142) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(151) == 152) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(161) == 162) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(171) == 172) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(181) == 182) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(191) == 192) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(201) == 202) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(211) == 212) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(221) == 222) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(231) == 232) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(241) == 242) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(251) == 252) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(261) == 262) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(271) == 272) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(281) == 282) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(301) == 302) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(311) == 312) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(321) == 322) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(331) == 332) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(341) == 342) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(351) == 352) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(361) == 362) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(371) == 372) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(381) == 382) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(391) == 392) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(401) == 402) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(411) == 412) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(421) == 422) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(431) == 432) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(441) == 442) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(451) == 452) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(461) == 462) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(471) == 472) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(481) == 482) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(491) == 492) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(501) == 502) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(511) == 512) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(521) == 522) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(531) == 532) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(541) == 542) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(551) == 552) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(561) == 562) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(571) == 572) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(581) == 582) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(591) == 592) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(601) == 602) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(611) == 612) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(621) == 622) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(631) == 632) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(641) == 642) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(661) == 662) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(681) == 682) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(691) == 692) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(701) == 702) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(711) == 712) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(721) == 722) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(731) == 732) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(751) == 752) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(761) == 762) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(781) == 782) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(791) == 792) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(801) == 802) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(811) == 812) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(821) == 822) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(831) == 832) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(841) == 842) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(861) == 862) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(881) == 882) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(891) == 892) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(901) == 902) else \"Fail\")\nprint (\"Pass\" if  (next_Perfect_Square(911) == 912) else \"Fail\""
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum([1, 3, 2, 5, -6, 6]) == 6\nassert     max_sum([-2, 4, 7, -8, 9]) == 10\nassert     max_sum([-3, -6, -4, -8, -3, 6]) == 0\nassert     max_sum([-1, -4, -6, -8, -9, -12, -4, -8, -13]) == 12\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum([1,3,2,5,5,4,7]) == 12, \"Should be 12\"\nassert     max_sum([3,7,1,5,3,3,3]) == 13, \"Should be 13\"\nassert     max_sum([2,1,3,4]) == 4, \"Should be 4\"\nassert     max_sum([-1,-2,-3,-4,-5]) == -1, \"Should be -1\"\nassert     max_sum([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"\\n\\n\\tTESTS : \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\nprint(\"\\n\\n\\t\\tTest 1 :\")\nprint(\"\\t\\tInput = [1,3,-1,-3,5,-6,7,9]\")\nprint(\"\\t\\tOutput = 13\")\nassert max_sum([1,3,-1,-3,5,-6,7,9]) == 13\n\nprint(\"\\n\\n\\t\\tTest 2 :\")\nprint(\"\\t\\tInput = [9,4,5,2,1]\")\nprint(\"\\t\\tOutput = 9\")\nassert max_sum([9,4,5,2,1]) == 9\n\nprint(\"\\n\\n\\t\\tTest 3 :\")\nprint(\"\\t\\tInput = [9,4,5,2,1,4]\")\nprint(\"\\t\\tOutput = 16\")\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum([-1, 3, 2, 3, 6, -1, 4]) == 5, 'check max_sum()'\nassert max_sum([3, 8, 1, 5, 7, 10, 4, 6, 2]) == 10, 'check max_sum()'\nassert max_sum([1, 2, 3, 4, 5]) == 15, 'check max_sum()'\nassert max_sum([3, 2, 1, 5, 7]) == 8, 'check max_sum()'\nassert max_sum([1, 2, 3]) == 3, 'check max_sum()'\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum([]) == 0\nassert     max_sum([5]) == 5\nassert     max_sum([3, 8, -5, 7, 9]) == 9\nassert     max_sum([3, 8, -5, 7, 9, 2]) == 9\nassert     max_sum([3, 8, -5, 7, 9, 2, 6, 4, 5]) == 15\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert max_sum([1, 3, 8, 2, 6]) == 14\nassert max_sum([1, 3, 8, -2, 6]) == 14\nassert max_sum([-1, 3, 8, 2, 6]) == 19\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(2) == 1.4142135623730950\nassert     babylonian_squareroot(7) == 2.44948974278317\nassert     babylonian_squareroot(9) == 2.6451612903226804\nassert     babylonian_squareroot(16) == 2.8284271247529065\nassert     babylonian_squareroot(25) == 3.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     babylonian_squareroot(0) == 0\nassert    babylonian_squareroot(1) == 1\nassert    babylonian_squareroot(2) == 1.4142135623730951\nassert    babylonian_squareroot(3) == 1.7320508075688772\nassert    babylonian_squareroot(4) == 2.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_babylonian_squareroot():\n    # check square root of 0 and positive numbers\n    assert babylonian_squareroot(0) == 0\n    assert babylonian_squareroot(1) == 1\n    assert babylonian_squareroot(2) == 1.4142135623730951\n    "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     babylonian_squareroot(11) == 3\nassert     babylonian_squareroot(0) == 0\nassert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(2) == 1.4142135623730951\nassert     babylonian_squareroot(3) == 1.732050807568877\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(2) == 1\nassert     babylonian_squareroot(0) == 0\nassert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(9) == 3\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(12) == 4\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(19) == 4\nassert     babylonian_squareroot(17) == 4\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(9)    == 3, \\\n            \"the output should be 3, but is %d\" % babylonian_squareroot(9)\nassert     babylonian_squareroot(10)    == 3.0, \\\n            \"the output should be 3.0, but is %f\" % babylonian_squareroot(10)\nassert     babylonian_squareroot(11)    == 2.0, \\\n            \"the output should be 2.0, but is %f\" % babylonian_squareroot(11)\nassert     babylonian_squareroot(22)    == 3.0, \\\n            \"the output should be 3.0, but is %f\" % babylonian_squareroot(22)\nassert     babylonian_squareroot(26)    == 2.0, \\\n            \"the output should be 2.0, but is %f\" % babylonian_squareroot(26)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lps(\"abaxyzzyxf\") == 7, \"Not correct\"\nassert     lps(\"abbaxyzzyxf\") == 6, \"Not correct\"\nassert     lps(\"abaxyzzyxf\") == 7, \"Not correct\"\n\ndef lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # DP table\n    n = len(str)\n    dp = [[False for i in range(n)] for j in range(n)]\n\n    # To build the table, we need to fill up the first row, first column, and middle column\n    # We do so by marking if the strings are palindrome\n    for i in range(n):\n        dp[i][i] = True\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lps('babad') == 4\nassert     lps('abbaba') == 4\nassert     lps('cbbd') == 3\nassert     lps('bb') == 1\nassert     lps('baba') == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert lps('babad') == 4\nassert lps('abdba') == 3\nassert lps('aaa') == 1\nassert lps('ac') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef lps_dp(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lps(\"abcbb\") == 3, 'abccbb'\nassert     lps(\"cbbd\") == 3, 'bbbbb'\nassert     lps(\"ab\") == 1, 'bb'\nassert     lps(\"cbbd\") == 3, 'bbbbb'\nassert     lps(\"cbbd\") == 3, 'bbbbb'\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lps(\"tactcoa\") == 5\nassert     lps(\"abcddcba\") == 7\nassert     lps(\"aaa\") == 4\nassert     lps(\"aac\") == 2\n\n\ndef lps1(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # trivial - just reverse the input string and compare with itself\n    n = len(str)\n    res = 0\n    for i in range(n):\n        j = n - i\n        if str[i] == str[j-1]:\n            res = max(res, 2 + i)\n        else:\n            res = max(res, 1)\n    return res\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef lps_good(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nharmonic_sum(5) == 8.0\nharmonic_sum(9) == 27.0\nharmonic_sum(10) == 43.0\nharmonic_sum(11) == 60.0\nharmonic_sum(12) == 99.0\nharmonic_sum(13) == 144.0\nharmonic_sum(14) == 233.0\nharmonic_sum(15) == 360.0\nharmonic_sum(16) == 484.0\nharmonic_sum(17) == 654.0\nharmonic_sum(18) == 729.0\nharmonic_sum(19) == 864.0\nharmonic_sum(20) == 987.0\nharmonic_sum(21) == 1042.0\nharmonic_sum(22) == 1275.0\nharmonic_sum(23) == 1545.0\nharmonic_sum(24) == 1836.0\nharmonic_sum(25) == 2127.0\nharmonic_sum(26) == 2578.0\nharmonic_sum(27) == 2793.0\nharmonic_sum(28) == 3231.0\nharmonic_sum(29) == 3569.0\nharmonic_sum(30) == 3841.0\nharmonic_sum(31) == 4147.0\nharmonic_sum(32) == 4776.0\nharmonic_sum(33) == 5397.0\nharmonic_sum(34) == 5791.0\nharmonic_sum(35) == 6300.0\nharmonic_sum(36) == 6692.0\nharmonic_sum(37) == 7023.0\nharmonic_sum(38) == 7359.0\nharmonic_sum(39) == 7708.0\nharmonic_sum(40) == 7914.0\nharmonic_sum(41) == 8018.0\nharmonic_sum(42) == 8272.0\nharmonic_sum(43) == 8496.0\nharmonic_sum(44) == 8767.0\nharmonic_sum(45) == 9095.0\nharmonic_sum(46) == 9348.0\nharmonic_sum(47) == 9689.0\nharmonic_sum(48) == 10086.0\nharmonic_sum(49) == 10257.0\nharmonic_sum(50) == 10516.0\nharmonic_sum(51) == 10761.0\nharmonic_sum(52) == 11022.0\nharmonic_sum(53) == 11158.0\nharmonic_sum(54) == 11211.0\nharmonic_sum(55) == 11365.0\nharmonic_sum(56) == 11719.0\nharmonic_sum(57) == 11985.0\nharmonic_sum(58) == 12240.0\nharmonic_sum(59) == 12591.0\nharmonic_sum(60) == 12866.0\nharmonic_sum(61) == 13222.0\nharmonic_sum(62) == 13576.0\nharmonic_sum(63) == 13920.0\nharmonic_sum(64) == 14265.0\nharmonic_sum(65) == 14609.0\nharmonic_sum(66) == 14976.0\nharmonic_sum(67) == 15353.0\nharmonic_sum(68) == 15809.0\nharmonic_sum(69) == 16292.0\nharmonic_sum(70) == 16794.0\nharmonic_sum(71) == 17392.0\nharmonic_sum(72) == 17956.0\nharmonic_sum(73) == 18454.0\nharmonic_sum(74) == 18994.0\nharmonic_sum(75) == 19465.0\nharmonic_sum(76) == 20026.0\nharmonic_sum(77) == 20701.0\nharmonic_sum(78) == 21383.0\nharmonic_sum(79) == 21990.0\nharmonic_sum(80) == 22771.0\nharmonic_sum(81) == 23592.0\nharmonic_sum(82) == 24479.0\nharmonic_sum(83) == 25389.0\nharmonic_sum(84) == 26349.0\nharmonic_sum(85) == 27304.0\nharmonic_sum(86) == 28235.0\nharmonic_sum(87) == 29233.0\nharmonic_sum(88) == 30250.0\nharmonic_sum(89) == 32019.0\nharmonic_sum(90) == 33226.0\nharmonic_sum(91) == 35261.0\nharmonic_sum(92) == 37376.0\nharmonic_sum(93) == 39428.0\nharmonic_sum(94) == 41726.0\nharmonic_sum(95) == 43491.0\nharmonic_sum(96) == 46795.0\nharmonic_sum(97) == 49224.0\nharmonic_sum(98) == 52025.0\nharmonic_sum(99) == 53207.0\nharmonic_sum(100) == 55461.0\nharmonic_sum(101) == 57802.0\nharmonic_sum(102) == 60526.0\nharmonic_sum(103) == 64532.0\nharmonic_sum(104) == 68738.0\nharmonic_sum(105) == 72996.0\nharmonic_sum(106) == 77425.0\nharmonic_sum(107) == 80454.0\nharmonic_sum(108) == 84530.0\nharmonic_sum(109) == 88385.0\nharmonic_sum(110) == 92457.0\nharmonic_sum(111) == 96789.0\nharmonic_sum(112) == 100463.0\nharmonic_sum(113) == 103949.0\nharmonic_sum(114) == 107786.0\nharmonic_sum(115) == 111005.0\nharmonic_sum(116) == 114190.0\nharmonic_sum(117) == 117646.0\nharmonic_sum(118) == 120536.0\nharmonic_sum(119) == 124839.0\nharmonic_sum(120) == 127136.0\nharmonic_sum(121) == 129057.0\nharmonic_sum(122) == 133871.0\nharmonic_sum(123) == 138005.0\nharmonic_sum(124) == 142537.0\nharmonic_sum(125) == 146343.0\nharmonic_sum(126) == 149240.0\nharmonic_sum(127) == 153893.0\nharmonic_sum(128) == 159665.0\nharmonic_sum(129) == 164365.0\nharmonic_sum(130) == 168834.0\nharmonic_sum(131) == 174832.0\nharmonic_sum(132) == 179429.0\nharmonic_sum(133) == 185732.0\nharmonic_sum(134) == 196933.0\nharmonic_sum(135) == 197432.0\nharmonic_sum(136) == 202839.0\nharmonic_sum(137) == 210412.0\nharmonic_sum(138) == 215864.0\nharmonic_sum(139) == 220515.0\nharmonic_sum(140) == 226878.0\nharmonic_sum(141) == 234412.0\nharmonic_sum(142) == 239639.0\nharmonic_sum(143) == 246435.0\nharmonic_sum(144) == 253832.0\nharmonic_sum(145) == 261287.0\nharmonic_sum(146) == 270904.0\nharmonic_sum(147) == 277783.0\nharmonic_sum(148) == 285959.0\nharmonic_sum(149) == 294640.0\nharmonic_sum(150) == 303096.0\nharmonic_sum(151) == 309960.0\nharmonic_sum(152) == 312755.0\nharmonic_sum(153) == 314590.0\nharmonic_sum(154) == 317037.0\nharmonic_sum(155) == 318898.0\nharmonic_sum(156) == 323512.0\nharmonic_sum(157) == 327834.0\nharmonic_sum(158"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(harmonic_sum(5))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nharmonic_sum(5) == 1.6\nharmonic_sum(1) == 1.0\nharmonic_sum(10) == 3.166667"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert harmonic_sum(4) == 4\nassert harmonic_sum(10) == 55\nassert harmonic_sum(99) == 10199\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     harmonic_sum(4) == 1.5\nassert     harmonic_sum(100) == 5050\nassert     harmonic_sum(20) == 20\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     harmonic_sum(10) == 55, 'wrong answer'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     harmonic_sum(3) == 2\nassert     harmonic_sum(5) == 4\nassert     harmonic_sum(10) == 55\nassert     harmonic_sum(20) == 6876\nassert     harmonic_sum(30) == 4386789\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     harmonic_sum(2) == 1, \"harmonic_sum failed for n = 2\"\nassert     harmonic_sum(3) == 2, \"harmonic_sum failed for n = 3\"\nassert     harmonic_sum(4) == 1, \"harmonic_sum failed for n = 4\"\nassert     harmonic_sum(5) == 2, \"harmonic_sum failed for n = 5\"\nassert     harmonic_sum(6) == 3, \"harmonic_sum failed for n = 6\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1,2,3,4,5],[6,7,8,9,10]) == set([6,7,8,9,10])\nassert     intersection_array([1,1,2,3,4],[1,4,5,8,10]) == set([1,4,5,8])\nassert     intersection_array([1,2,3,4,5],[1,2,3,4,5]) == set([1,2,3,4,5])\nassert     intersection_array([1,2,3,4,5],[6,7,8,9,10]) == set([])\nassert     intersection_array([1,2,3,4],[1,4,5,8,10]) == set([1,4,5,8])\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,2,2,2,3], [2,2]) == [2,2]\nassert     intersection_array([1,2,2,2,2,2,2], [2,2]) == [2,2]\nassert     intersection_array([1,2,3,4,2], [2,3,4]) == [2,3,4]\nassert     intersection_array([1,2,3,4,5], [2,3,4,5]) == []\nassert     intersection_array([], [2,3,4,5]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    intersection_array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 8]) == set([2, 3, 4, 5, 6])\n    intersection_array([1, 2, 3, 4, 5, 6], [7, 8, 9]) == set([])\n    intersection_array([1, 2, 3], [4, 5, 6, 7, 8]) == set([])\n    intersection_array([1, 2, 3, 4, 5, 6], []) == set([])\n    intersection_array([1], [1, 2, 3, 4, 5, 6]) == set([])\n    intersection_array([1, 2, 3], [4, 5, 6, 7, 8, 9]) == set([4, 5, 6])\n    intersection_array([1, 2, 3], []) == set([1, 2, 3])\n    intersection_array([1], [1, 2, 3]) == set([1])\n\ndef make_dict(file_path):\n    '''\n    Write a function to read a text file and make a dictionary.\n    '''\n    pass\n\ndef print_dict(dict_data):\n    '''\n    Write a function to print a dictionary.\n    '''\n    pass\n\ndef main():\n    '''\n    Write a program to read the text file and print the dictionary.\n    '''\n    file_path = 'C:\\\\Users\\\\user\\\\PycharmProjects\\\\pythonProject\\\\my_text_files'\n    dict_data = make_dict(file_path)\n    print_dict(dict_data)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(intersection_array([1,2,2,1],\n                            [2,2,1,1,2]\n                            ))\n\ndef intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    for num in array_nums2:\n        if num in array_nums1:\n            return num\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,3],\n                              [3,4,5]) == [3,4,5],\\\n        \"intersection_array([1,2,3], [3,4,5]) = [[3,4,5]] is not correct\"\n\nassert intersection_array([1,2,3],\n                              [3,4,5,6]) == [],\\\n        \"intersection_array([1,2,3], [3,4,5,6]) = [] is not correct\"\n\nassert intersection_array([1,2,3,4,5],\n                              [1,2,3,4,5]) == [1,2,3,4,5],\\\n        \"intersection_array([1,2,3,4,5], [1,2,3,4,5]) = [1,2,3,4,5] is not correct\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,2,1], [2,2,1,3]) == 2\nassert intersection_array([1,2,2,1], [2,1,3,2]) == 2\nassert intersection_array([1,2,2,1], [2,2,2,1]) == 2\nassert intersection_array([1,2,2,1], [1,1,3,2]) == 1\nassert intersection_array([1,2,2,1], [3,2,2,1]) == 0\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection_array([1,1,2,2],[1,2,2,4])==[1,1,2,2]\nassert     intersection_array([1,2,2,2],[1,2,2,4])==[]\nassert     intersection_array([1,1,1,2,2,2,2,4],[1,2,2,2,3,4])==[1,1,1,2,2,2]\nassert     intersection_array([1,1,1,2,2,2,2,4],[1,2,2,2,3,4])==[1,1,1,2,2]\nassert     intersection_array([1,1,1,2,2,2,2,4],[1,2,2,2,3,4])==[1,1,1,2,2]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     [1,3,6,10,15] == intersection_array([1,2,3,4,5,6], [3,5,7,8,10,12]), \"Wrong answer\"\nassert     [0,0,0,0] == intersection_array([1,2,3,4,5,6], []), \"Wrong answer\"\nassert     [0,0,0,0] == intersection_array([], [1,2,3,4,5,6]), \"Wrong answer\"\nassert     [1,1,2] == intersection_array([1,2,3,4,5,6], [3,5,7,8,10,12]), \"Wrong answer\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_X((1,2,3,3,3,3,3,3,3,3), 3) == 6\nassert \ncount_X((1,2,3,3,3,3,3,3,3,3), 10) == 0\nassert \ncount_X((1,2,3,3,3,3,3,3,3,3), 4) == 1\nassert \ncount_X((1,2,3,3,3,3,3,3,3,3), 2) == 2\nassert \ncount_X((1,2,3,3,3,3,3,3,3,3), 1) == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_X((1,2,3,4,5), 5) == 3\nassert count_X((1,2,3,4,5), 7) == 0\nassert count_X((1,2,3,4,5), -1) == 0\nassert count_X((1,2,3,4,5), -2) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_X((1,2,3,4),2) == 2\nassert count_X((2,2,2,1),2) == 2\nassert count_X((3,2,3,1),1) == 2\nassert count_X((2,2,1),1) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_X((1,2,3),3) == 1\nassert count_X((1,2,3),4) == 0\nassert count_X((1,2,3),1) == 2\nassert count_X((1,2,3,4,5,5),5) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_X((1,2,3,4,5),1) == 1, \"Counting incorrect: 1\"\nassert \ncount_X((1,2,3,4,5),5) == 1, \"Counting incorrect: 5\"\nassert \ncount_X((1,2,3,4,5),6) == 0, \"Counting incorrect: 6\"\nassert \ncount_X((1,2,3,4,5),2) == 1, \"Counting incorrect: 2\"\nassert \ncount_X((1,2,3,4,5),3) == 1, \"Counting incorrect: 3\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_X([1,1,1,2,2,2,3,3],2) == 2\ncount_X([1,1,1,2,2,2,3,3],1) == 3\ncount_X([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"], \"hello\") == 6"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_X(('apple', 'banana', 'orange', 'grape'), 'apple') == 3\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_X((1, 2, 3, 4), 1) == 2, 'Failed'\nassert     count_X((2, 1, 2, 3, 1), 2) == 3, 'Failed'\nassert     count_X((2, 1, 2, 3, 1), 1) == 4, 'Failed'\nassert     count_X((1, 1, 1, 2, 2, 1), 1) == 6, 'Failed'"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([1,2,3,4],0) == [0,1,2,3,4]\nassert     insert_element([1,2,3,4],5) == [0,1,2,3,4,5]\nassert     insert_element([1,2,3,4],-2) == [0,1,2,3,4,4]\nassert     insert_element([1,2,3,4,5],-6) == [0,1,2,3,4,5,5]\nassert     insert_element([1,2,3,4],0.2) == [0.2,1.2,2.2,3.2,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(insert_element([1,2,3],4)) #[1,4,2,3]\n\nassert \nprint(insert_element([1,2,3],4)) #[1,4,2,3]\n\nassert \nprint(insert_element([4,5,6],7)) #[4,7,5,6]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3,4,5,6,7,8,9],2) == [1,2,2,3,4,5,6,7,8,9]\nassert     insert_element([1,2,3,4,5,6,7,8,9],3) == [1,2,3,3,4,5,6,7,8,9]\nassert     insert_element([1,2,3,4,5,6,7,8,9],5) == [1,2,3,4,5,6,7,8,9]\nassert     insert_element([1,2,3,4,5,6,7,8,9],6) == [1,2,3,4,5,6,6,7,8,9]\nassert     insert_element([1,2,3,4,5,6,7,8,9],7) == [1,2,3,4,5,6,6,7,8,9]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     insert_element([1,2,3,4],2) == [1,2,2,3,4]\nassert     insert_element([1,2,3,4],5) == [1,2,5,3,4]\nassert     insert_element([1,2,3,4],2) == [1,2,3,4,1]\nassert     insert_element([1,2,3,4],1) == [1,1,2,3,4]\nassert     insert_element([1,2,3,4],0) == [1,0,2,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     insert_element([3,2,1],2) == [2,3,1], 'Fail'\nassert     insert_element([3,2,1],1) == [1,2,3], 'Fail'\nassert     insert_element([3,2,1],10) == [1,2,3,10], 'Fail'\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([1, 2, 3, 4, 5, 6], 0) == [0, 1, 2, 3, 4, 5, 6]\nassert     insert_element([1, 2, 3, 4, 5, 6], 3) == [0, 1, 2, 3, 4, 3, 5, 6]\nassert     insert_element([1, 2, 3, 4, 5, 6], 6) == [0, 1, 2, 3, 4, 5, 6]\nassert     insert_element([1, 2, 3, 4, 5, 6], 7) == [0, 1, 2, 3, 4, 5, 6]\nassert     insert_element([1, 2, 3, 4, 5, 6], 8) == [0, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ninsert_element([1,2,3],4) == [1,4,2,3], \"Error\"\nassert \ninsert_element([1,2,3],4) == [4,1,2,3], \"Error\""
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     insert_element([],0) == [0]\nassert     insert_element([1],1) == [1,1]\nassert     insert_element([1,2],0) == [0,1,2]\nassert     insert_element([1,2,3,4],2) == [1,2,2,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert(complex(0,1)) == (0,1)\nassert     convert(complex(1,0)) == (1,0)\nassert     convert(complex(2,0)) == (2,0)\nassert     convert(complex(3,4)) == (3,4)\nassert     convert(complex(4,4)) == (4,4)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([-2+4j,2-1j,0+5j,4-3j,1-2j,2+0j]) ==    [(3+5j,2+1j),(2+0j,4+3j),(1+2j,2+0j),(2+0j,4+3j),(1+2j,2+0j),(2+0j,4+3j)]\n\nassert     convert([0+5j,1+2j,2+3j,3+4j]) ==     [(0+5j,2+3j),(1+2j,3+4j),(2+3j,4+0j),(3+4j,0+5j)]\n\nassert     convert([2+3j,4+5j,6+7j,8+9j]) ==     [(2+3j,4+5j),(4+5j,6+7j),(6+7j,8+9j),(8+9j,2+3j)]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([1,2,3,4,5]) == [2.04166666666667, 4.60833333333333, 5.083333333333333, 6.222222222222222, 7.5] \nassert     convert([1,2+5j,3,4]) == [-1.18288888888889, 2.20277777777778, 3.502777777777778, 4.902777777777778]\nassert     convert([1,2,3,4,5]) == [2.04166666666667, 4.60833333333333, 5.083333333333333, 6.222222222222222, 7.5] \nassert     convert([1,2+5j,3,4]) == [-1.18288888888889, 2.20277777777778, 3.502777777777778, 4.902777777777778]\nassert     convert([1,2,3,4,5]) == [2.04166666666667, 4.60833333333333, 5.083333333333333, 6.222222222222222, 7.5] \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert([complex(3, -4), complex(0, -1), complex(2, 2), complex(2, -2), complex(2, 0)]) == \\\n        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\nassert     convert([complex(0, -1), complex(0, 0), complex(2, -1), complex(2, 0), complex(2, 1)]) == \\\n        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\nassert     convert([complex(1, 1), complex(1, -1), complex(1, 0), complex(0, 1), complex(0, -1)]) == \\\n        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    cmath.polar(complex(1,3)) == (0, 1 + 3j)\n    cmath.polar(complex(-3, -4)) == (3 + 4j, -2 - 5j)\n    cmath.polar(complex(-3, 4)) == (3 - 4j, -2 + 5j)\n\ndef exp(n):\n    '''\n    Write a python function to calculate e raised to the power n.\n    '''\n    pass\n\n    assert exp(0) == 1\n    assert exp(1) == e\n    "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert([2+3j, 3+5j, 8+9j, 4+6j])==[[2, 3], [5, 6], [8, 9], [4, 5]], \"Wrong\"\nprint(\"correct\")\n\ndef convert_1(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert(\n(0.4+0.8j, 0.0)\n) == (0.4, 0.0, 0.8, 0.0)\nassert     convert(\n(0.0+1j, 0.0)\n) == (0.0, 0.0, 1.0, 0.0)\nassert     convert(\n(0.3+0.7j, 0.5)\n) == (0.3, 0.5, 0.7, 0.5)\nassert     convert(\n(0.7+0.3j, 0.4)\n) == (0.7, 0.4, 0.3, 0.4)\nassert     convert(\n(0.7+0.3j, 0.4)\n) == (0.7, 0.4, 0.3, 0.4)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert([2+3j, 2-3j, 4+5j, 4-5j]) ==  [(3.0, 5.0), (3.0, 5.0), (5.0, 5.0), (5.0, 5.0)]\nassert     convert([4+2j, 4-2j, 2+5j, 2-5j]) ==  [(4.0, 2.0), (4.0, 2.0), (5.0, 2.0), (5.0, 2.0)]\nassert     convert([2+5j, 2-5j, 4+5j, 4-5j]) ==  [(2.0, 5.0), (2.0, 5.0), (5.0, 5.0), (5.0, 5.0)]\nassert     convert([1+0j, 1-0j, 0+1j, 0-1j]) ==  [(1.0, 0.0), (1.0, 0.0), (0.0, 1.0), (0.0, 1.0)]\nassert     convert([1+0j, 1-0j, 0+1j, 0-1j, 5+6j, 5-6j]) ==  [(1.0, 0.0), (1.0, 0.0), (0.0, 1.0), (0.0, 1.0), (6.0, 6.0), (6.0, 6.0)]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert([2,4,8,-8]) == ([3,1],2)\nassert     convert([2,4,8,-8]) == ([3,1],-2)\nassert     convert([3,0,-1]) == ([4,0],3)\nassert     convert([3,0,-1]) == ([4,0],-3)\nassert     convert([-3,0,1]) == ([0,1],-3)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_integer([]) == 0, \"should return 0\"\nassert count_integer([1, 2, 3]) == 3, \"should return 3\"\nassert count_integer([-1, -2, -3]) == 3, \"should return 3\"\nassert count_integer([-1, -2, -3, -4]) == 4, \"should return 4\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_integer([1,2,3,4,5]) == 4\n\ndef count_letter(list1):\n    '''\n    Write a python function that returns the number of letter elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_integer([1,2,3,4,5,6,7]) == 6\nassert count_integer([1,2,3,4,5,6,7,8,9]) == 8\nassert count_integer([1,2,3,4,5,6,7,8]) == 7\nassert count_integer([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 11\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,10]) == 10, \"Should return 10\"\nassert count_integer([]) == 0, \"Should return 0\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(count_integer([1,2,3,4,5,6,7,8,9]))\nprint(count_integer([1,2,3,4,5,6,7,8,9,0,0]))\nprint(count_integer([1,2,3,4,5,6,7,8,9,0,0,0]))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5]) == 13, \\\n'Function should return the number of integers in a given list'\nassert     count_integer([]) == 0, 'Function should return 0 if a given list is empty'\nassert     count_integer([2]) == 1, 'Function should return 1 if a given list contains exactly one integer'\nassert     count_integer([1, 1, 1, 1, 1, 1, 1]) == 10, 'Function should return the number of integers in a given list'\n\nprint('Function passes all tests!'"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([1,2,3,4,5,6]) == 4\nassert     count_integer([1,2,3,4,5,6,7]) == 5\nassert     count_integer([1,2,3,4,5,6,7,8]) == 5\nassert     count_integer([1,2,3,4,5,6,7,8,9]) == 5\nassert     count_integer([0,0,0,0]) == 1\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_integer([]) == 0, \"Test Case 1 Failed\"\nassert     count_integer([1, 2, 3, 4]) == 4, \"Test Case 2 Failed\"\nassert     count_integer([2, 4, 2, 4, 6]) == 3, \"Test Case 3 Failed\"\nassert     count_integer([-1, -2, -3, -4]) == 4, \"Test Case 4 Failed\"\nassert     count_integer([-100, -55, -44, -33, -22, -11, -1, 0, 1, 2, 3, 4]) == 7, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1, 2, 3, 4, 5], 1) == [[1, 2, 3, 4, 5]]\nassert     combinations_colors([1, 2, 3, 4, 5], 2) == [(1, 2, 3), (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), (3, 4, 5)]\nassert     combinations_colors([1, 2, 3, 4, 5], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\nassert     combinations_colors([1, 2, 3, 4, 5], 4) == [(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), (1, 2, 4, 5), (1, 2, 4, 6), (1, 2, 5, 6), (1, 3, 4, 5), (1, 3, 4, 6), (1, 3, 5, 6), (1, 4, 5, 6), (2, 3, 4, 5), (2, 3, 4, 6), (2, 3, 5, 6), (2, 4, 5, 6), (3, 4, 5, 6)]\nassert     combinations_colors([1, 2, 3, 4, 5], 5) == [(1, 2, 3, 4, 5)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1,2,3], 3) == \\\n            [(1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,3),\n            (1,2,"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1, 2, 3], 1) == [()] \nassert     combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)] \nassert     combinations_colors([1, 2, 3], 3) == [(1, 2, 3)] \nassert     combinations_colors([1, 2, 3], 4) == [(1, 2, 3, 4)] \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors([1, 2, 3], 3) == [[1, 2, 3], (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\nassert     combinations_colors([1, 2, 3, 4], 3) == [[1, 2, 3], (1, 2, 3), (1, 3, 2), (1, 3, 4), (2, 1, 3), (2, 3, 1), (2, 3, 4), (2, 4, 1), (3, 1, 2), (3, 2, 1), (3, 4, 1), (4, 1, 2), (4, 2, 1), (4, 3, 1)]\n\n'''\n10. Define a function that takes a list of integers as argument and returns the count of numbers that are a power of 2.\n'''\ndef isPowerOf2(number):\n    '''\n    Write a function that takes a number as input and return if that number is a power of 2.\n    '''\n    pass\n\nassert isPowerOf2(4) == True\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncombinations_colors([\"a\",\"b\",\"c\"], 2) == [(\"a\",\"b\"), (\"a\",\"c\"), (\"b\",\"c\")]\ncombinations_colors([], 2) == []\ncombinations_colors([\"a\",\"b\",\"c\"], 1) == [([\"a\"],[\"b\",\"c\"])]\ncombinations_colors([\"a\",\"b\",\"c\"], 3) == [\n    ([\"a\"],[\"b\"],[\"c\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"],[\"c\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"],[\"c\"],[\"a\",\"b\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"],[\"c\"],[\"a\",\"b\"],[\"c\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"],[\"c\"],[\"a\",\"b\"],[\"c\"],[\"a\",\"c\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"],[\"c\"],[\"a\",\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"]), \n    ([\"a\"],[\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"],[\"c\"],[\"a\",\"b\"],[\"c\"],[\"a\",\"c\"],[\"b\",\"c\"],[\"c\"])\n]\n\ncombinations_colors([\"a\",\"b\",\"c\",\"d\",\"e\"], 3) == [\n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"])\n]\n\ncombinations_colors([\"a\",\"b\",\"c\",\"d\",\"e\"], 4) == [\n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\"], [\"a\",\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"], [\"a\",\"c\",\"e\"], [\"b\",\"c\",\"e\"], [\"c\",\"e\"], [\"d\",\"e\"])\n]\n\ncombinations_colors([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], 3) == [\n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"], [\"b\",\"c\",\"f\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"], [\"b\",\"c\",\"f\"], [\"c\",\"f\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"], [\"b\",\"c\",\"f\"], [\"c\",\"f\"], [\"d\",\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"], [\"b\",\"c\",\"f\"], [\"c\",\"f\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"], [\"b\",\"c\",\"f\"]), \n    ([\"a\",\"b\",\"c\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"], [\"b\",\"c\",\"f\"], [\"c\",\"f\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"f\"], [\"b\",\"c\",\"f\"], [\"c\",\"f\"], [\"d\",\"e\",\"f\"])\n]\n\ncombinations_colors([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], 4) == [\n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"], [\"b\",\"c\",\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"], [\"b\",\"c\",\"e\",\"f\"], [\"c\",\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"], [\"b\",\"c\",\"e\",\"f\"], [\"c\",\"e\",\"f\"], [\"d\",\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"], [\"b\",\"c\",\"e\",\"f\"], [\"c\",\"e\",\"f\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"], [\"b\",\"c\",\"e\",\"f\"]), \n    ([\"a\",\"b\",\"c\",\"d\"], [\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"], [\"b\",\"c\",\"e\",\"f\"], [\"c\",\"e\",\"f\"], [\"d\",\"e\",\"f\"], [\"a\",\"c\",\"e\",\"f\"], [\"b\",\"c\",\"e\",\"f\"], [\"c\",\"e\",\"f\"], [\"d\",\"e\",\"f\"])\n]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1,2,3], 2) == [\n    (1, 2),\n    (1, 3),\n    (2, 3)\n    ]\n\nassert     combinations_colors([1,2,3], 3) == [\n    (1, 2, 3),\n    (1, 3, 2),\n    (2, 1, 3),\n    (2, 3, 1),\n    (3, 1, 2),\n    (3, 2, 1)\n    ]\n\ndef combinations_colors_n_repetition(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1,2,3,4], 2) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n\nassert     combinations_colors([\"a\", \"b\", \"c\"], 2) == [(\"a\", \"b\"), (\"a\", \"c\"), (\"b\", \"c\")]\n\nprint(\"SUCCESS: test_cases.py\")\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([\"A\",\"B\",\"C\",\"D\"], 2) == [\n        (\"A\",\"B\"),\n        (\"A\",\"C\"),\n        (\"A\",\"D\"),\n        (\"B\",\"C\"),\n        (\"B\",\"D\"),\n        (\"C\",\"D\")]\nassert     combinations_colors([\"A\",\"B\",\"C\",\"D\",\"E\"], 2) == [\n        (\"A\",\"B\"),\n        (\"A\",\"C\"),\n        (\"A\",\"D\"),\n        (\"A\",\"E\"),\n        (\"B\",\"C\"),\n        (\"B\",\"D\"),\n        (\"B\",\"E\"),\n        (\"C\",\"D\"),\n        (\"C\",\"E\"),\n        (\"D\",\"E\")]\nassert     combinations_colors([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], 4) == [\n        (\"A\",\"B\",\"C\",\"D\"),\n        (\"A\",\"B\",\"C\",\"E\"),\n        (\"A\",\"B\",\"C\",\"F\"),\n        (\"A\",\"B\",\"C\",\"G\"),\n        (\"A\",\"B\",\"D\",\"C\"),\n        (\"A\",\"B\",\"D\",\"E\"),\n        (\"A\",\"B\",\"D\",\"F\"),\n        (\"A\",\"B\",\"D\",\"G\"),\n        (\"A\",\"B\",\"E\",\"C\"),\n        (\"A\",\"B\",\"E\",\"D\"),\n        (\"A\",\"B\",\"E\",\"F\"),\n        (\"A\",\"B\",\"E\",\"G\"),\n        (\"A\",\"B\",\"F\",\"C\"),\n        (\"A\",\"B\",\"F\",\"D\"),\n        (\"A\",\"B\",\"F\",\"E\"),\n        (\"A\",\"B\",\"F\",\"G\"),\n        (\"A\",\"B\",\"G\",\"C\"),\n        (\"A\",\"B\",\"G\",\"D\"),\n        (\"A\",\"B\",\"G\",\"E\"),\n        (\"A\",\"B\",\"G\",\"F\"),\n        (\"A\",\"C\",\"D\",\"B\"),\n        (\"A\",\"C\",\"D\",\"E\"),\n        (\"A\",\"C\",\"D\",\"F\"),\n        (\"A\",\"C\",\"D\",\"G\"),\n        (\"A\",\"C\",\"E\",\"B\"),\n        (\"A\",\"C\",\"E\",\"D\"),\n        (\"A\",\"C\",\"E\",\"F\"),\n        (\"A\",\"C\",\"E\",\"G\"),\n        (\"A\",\"C\",\"F\",\"B\"),\n        (\"A\",\"C\",\"F\",\"D\"),\n        (\"A\",\"C\",\"F\",\"E\"),\n        (\"A\",\"C\",\"F\",\"G\"),\n        (\"A\",\"C\",\"G\",\"B\"),\n        (\"A\",\"C\",\"G\",\"D\"),\n        (\"A\",\"C\",\"G\",\"E\"),\n        (\"A\",\"C\",\"G\",\"F\"),\n        (\"A\",\"D\",\"B\",\"C\"),\n        (\"A\",\"D\",\"B\",\"E\"),\n        (\"A\",\"D\",\"B\",\"F\"),\n        (\"A\",\"D\",\"B\",\"G\"),\n        (\"A\",\"D\",\"C\",\"B\"),\n        (\"A\",\"D\",\"C\",\"E\"),\n        (\"A\",\"D\",\"C\",\"F\"),\n        (\"A\",\"D\",\"C\",\"G\"),\n        (\"A\",\"D\",\"E\",\"B\"),\n        (\"A\",\"D\",\"E\",\"C\"),\n        (\"A\",\"D\",\"E\",\"D\"),\n        (\"A\",\"D\",\"E\",\"F\"),\n        (\"A\",\"D\",\"E\",\"G\"),\n        (\"A\",\"D\",\"F\",\"B\"),\n        (\"A\",\"D\",\"F\",\"C\"),\n        (\"A\",\"D\",\"F\",\"D\"),\n        (\"A\",\"D\",\"F\",\"E\"),\n        (\"A\",\"D\",\"F\",\"G\"),\n        (\"A\",\"D\",\"G\",\"B\"),\n        (\"A\",\"D\",\"G\",\"C\"),\n        (\"A\",\"D\",\"G\",\"D\"),\n        (\"A\",\"D\",\"G\",\"E\"),\n        (\"A\",\"D\",\"G\",\"F\"),\n        (\"A\",\"E\",\"B\",\"C\"),\n        (\"A\",\"E\",\"B\",\"D\"),\n        (\"A\",\"E\",\"B\",\"F\"),\n        (\"A\",\"E\",\"B\",\"G\"),\n        (\"A\",\"E\",\"C\",\"B\"),\n        (\"A\",\"E\",\"C\",\"D\"),\n        (\"A\",\"E\",\"C\",\"F\"),\n        (\"A\",\"E\",\"C\",\"G\"),\n        (\"A\",\"E\",\"D\",\"B\"),\n        (\"A\",\"E\",\"D\",\"C\"),\n        (\"A\",\"E\",\"D\",\"D\"),\n        (\"A\",\"E\",\"D\",\"F\"),\n        (\"A\",\"E\",\"D\",\"G\"),\n        (\"A\",\"E\",\"F\",\"B\"),\n        (\"A\",\"E\",\"F\",\"C\"),\n        (\"A\",\"E\",\"F\",\"D\"),\n        (\"A\",\"E\",\"F\",\"E\"),\n        (\"A\",\"E\",\"F\",\"G\"),\n        (\"A\",\"E\",\"G\",\"B\"),\n        (\"A\",\"E\",\"G\",\"C\"),\n        (\"A\",\"E\",\"G\",\"D\"),\n        (\"A\",\"E\",\"G\",\"E\"),\n        (\"A\",\"E\",\"G\",\"F\"),\n        (\"A\",\"F\",\"B\",\"C\"),\n        (\"A\",\"F\",\"B\",\"D\"),\n        (\"A\",\"F\",\"B\",\"E\"),\n        (\"A\",\"F\",\"B\",\"G\"),\n        (\"A\",\"F\",\"C\",\"B\"),\n        (\"A\",\"F\",\"C\",\"D\"),\n        (\"A\",\"F\",\"C\",\"E\"),\n        (\"A\",\"F\",\"C\",\"G\"),\n        (\"A\",\"F\",\"D\",\"B\"),\n        (\"A\",\"F\",\"D\",\"C\"),\n        (\"A\",\"F\",\"D\",\"E\"),\n        (\"A\",\"F\",\"D\",\"G\"),\n        (\"A\",\"F\",\"E\",\"B\"),\n        (\"A\",\"F\",\"E\",\"C\"),\n        (\"A\",\"F\",\"E\",\"D\"),\n        (\"A\",\"F\",\"E\",\"E\"),\n        (\"A\",\"F\",\"E\",\"G\"),\n        (\"A\",\"F\",\"G\",\"B\"),\n        (\"A\",\"F\",\"G\",\"C\"),\n        (\"A\",\"F\",\"G\",\"D\"),\n        (\"A\",\"F\",\"G\",\"E\"),\n        (\"A\",\"F\",\"G\",\"F\"),\n        (\"A\",\"G\",\"B\",\"C\"),\n        (\"A\",\"G\",\"B\",\"D\"),\n        (\"A\",\"G\",\"B\",\"E\"),\n        (\"A\",\"G\",\"B\",\"F\"),\n        (\"A\",\"G\",\"C\",\"B\"),\n        (\"A\",\"G\",\"C\",\"D\"),\n        (\"A\",\"G\",\"C\",\"E\"),\n        (\"A\",\"G\",\"C\",\"F\"),\n        (\"A\",\"G\",\"D\",\"B\"),\n        (\"A\",\"G\",\"D\",\"C\"),\n        (\"A\",\"G\",\"D\",\"E\"),\n        (\"A\",\"G\",\"D\",\"F\"),\n        (\"A\",\"G\",\"E\",\"B\"),\n        (\"A\",\"G\",\"E\",\"C\"),\n        (\"A\",\"G\",\"E\",\"D\"),\n        (\"A\",\"G\",\"E\",\"E\"),\n        (\"A\",\"G\",\"E\",\"F\"),\n        (\"A\",\"G\",\"F\",\"B\"),\n        (\"A\",\"G\",\"F\",\"C\"),\n        (\"A\",\"G\",\"F\",\"D\"),\n        (\"A\",\"G\",\"F\",\"E\"),\n        (\"A\",\"G\",\"F\",\"F\"),\n        (\"A\",\"G\",\"G\",\"B\"),\n        (\"A\",\"G\",\"G\",\"C\"),\n        (\"A\",\"G\",\"G\",\"D\"),\n        (\"A\",\"G\",\"G\",\"E\"),\n        (\"A\",\"G\",\"G\",\"F\"),\n        (\"B\",\"C\",\"D\",\"E\"),\n        (\"B\",\"C\",\"D\",\"F\"),\n        (\"B\",\"C\",\"D\",\"G\"),\n        (\"B\",\"C\",\"E\",\"D\"),\n        (\"B\",\"C\",\"E\",\"F\"),\n        (\"B\",\"C\",\"E\",\"G\"),\n        (\"B\",\"C\",\"F\",\"D\"),\n        (\"B\",\"C\",\"F\",\"E\"),\n        (\"B\",\"C\",\"F\",\"G\"),\n        (\"B\",\"C\",\"G\",\"D\"),\n        (\"B\",\"C\",\"G\",\"E\"),\n        (\"B\",\"C\",\"G\",\"F\"),\n        (\"B\",\"D\",\"E\",\"F\"),\n        (\"B\",\"D\",\"E\",\"G\"),\n        (\"B\",\"D\",\"F\",\"E\"),\n        (\"B\",\"D\",\"F\",\"G\"),\n        (\"B\",\"E\",\"F\",\"G\"),\n        (\"B\",\"E\",\"G\",\"F\"),\n        (\"B\",\"E\",\"G\",\"G\"),\n        (\"B\",\"E\",\"F\",\"F\"),\n        (\"B\",\"F\",\"G\",\"G\"),\n        (\"C\",\"D\",\"B\",\"E\"),\n        (\"C\",\"D\",\"B\",\"F\"),\n        (\"C\",\"D\",\"B\",\"G\"),\n        (\"C\",\"D\",\"E\",\"B\"),\n        (\"C\",\"D\",\"E\",\"D\"),\n        (\"C\",\"D\",\"E\",\"F\"),\n        (\"C\",\"D\",\"E\",\"G\"),\n        (\"C\",\"D\",\"F\",\"B\"),\n        (\"C\",\"D\",\"F\",\"D\"),\n    "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_colors([1,2,3], 2) == [[1,2],[1,3],[2,3]], \"Wrong\"\nassert     combinations_colors([1,2,3], 1) == [[1],[2],[3]], \"Wrong\"\nassert     combinations_colors([1,2,3], 4) == [[1,2,3],[1,2,4],[1,3,4],[2,3,4]], \"Wrong\"\nassert     combinations_colors([1,2,3], 1) == [[1]], \"Wrong\"\nassert     combinations_colors([1,2,3], 4) == [[1,2,3,4]], \"Wrong\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_Primes_nums(4) == 2\ncount_Primes_nums(5) == 5\ncount_Primes_nums(1000) == 653\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(10) == 5, \"Test Failed\"\nassert     count_Primes_nums(20) == 9, \"Test Failed\"\nassert     count_Primes_nums(30) == 17, \"Test Failed\"\n\ndef sum_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the sum of all prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Primes_nums(1) == 0, \"The result is incorrect\"\nassert     count_Primes_nums(5) == 4, \"The result is incorrect\"\nassert     count_Primes_nums(10) == 7, \"The result is incorrect\"\nassert     count_Primes_nums(20) == 9, \"The result is incorrect\"\nassert     count_Primes_nums(30) == 10, \"The result is incorrect\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(count_Primes_nums(10))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_Primes_nums(1) == 0\nassert count_Primes_nums(4) == 2\nassert count_Primes_nums(10) == 4\n\n'''\nWrite a python function that takes in a non-negative number n and returns True if the number is a perfect square and False otherwise.\n'''\ndef is_perfect_square(n):\n    '''\n    Write a python function that takes in a non-negative number n and returns True if the number is a perfect square and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(10) == 5\nassert     count_Primes_nums(100) == 25\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_Primes_nums(11) == 2\nassert count_Primes_nums(0) == 0\nassert count_Primes_nums(1) == 0\nassert count_Primes_nums(11) == 2\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(1,5)    == (5,1)\nassert     swap_numbers(3,4)    == (4,3)\nassert     swap_numbers(1,3)    == (3,1)\nassert     swap_numbers(1,1)    == (1,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(2,3)!= (3,2)\nassert     swap_numbers(5,2) == (2,5)\nassert     swap_numbers(5,2)!= (2,5)\nassert     swap_numbers(7,2) == (2,7)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(2,2) == (2,2)\nprint(\"You got it right!\")\nprint(\"\\n\")\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers(1, 2) == (2, 1), 'test failed'\nassert     swap_numbers(2, 1) == (1, 2), 'test failed'\nassert     swap_numbers(6, 7) == (7, 6), 'test failed'\nassert     swap_numbers(7, 6) == (6, 7), 'test failed'\nassert     swap_numbers(2, 1) == (1, 2), 'test failed'\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(10,20) == (20,10)\nassert     swap_numbers(20,10) == (20,10)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(5,7) == (7,5)\nassert     swap_numbers(7,5) == (7,5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert swap_numbers(2,1) == (1,2)\nassert swap_numbers(1,1) == (1,1)\nassert swap_numbers(1,2) == (1,2)\nassert swap_numbers(2,1) == (2,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers((1,2),(2,1)) == (2,1)\nassert     swap_numbers((3,4),(4,3)) == (4,3)\nassert     swap_numbers((1,1),(1,1)) == (1,1)\nassert     swap_numbers((2,2),(2,2)) == (2,2)\nassert     swap_numbers((2,2),(3,1)) == (3,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_numbers(2, 3) == (3, 2)\nassert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(0, 1) == (1, 0)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(12,8) == (8,12)\nassert     swap_numbers(16,24) == (24,16)\nassert     swap_numbers(4,5) == (5,4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((1,2), (3,4)) == (3,4)\nassert     maximize_elements((7,5), (3,4)) == (7,5)\nassert     maximize_elements((5,5), (3,4)) == (5,5)\n\nassert maximize_elements((1,2), (1,2)) == (1,2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((1,2),(2,3)) == (3,2)\nassert     maximize_elements((3,2),(2,3)) == (3,2)\nassert     maximize_elements((3,4),(2,4)) == (3,4)\nassert     maximize_elements((3,3),(2,3)) == (3,3)\nassert     maximize_elements((3,4),(3,4)) == (3,4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (4, 3, 2, 1)\nmaximize_elements(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((1,2,3,4), (5,6,7,8)) == (1,5,3,8)\nassert    maximize_elements((1,2,3,4), (8,6,7,5)) == (1,8,3,5)\nassert    maximize_elements((1,2,3,4,5), (5,6,7,8,9)) == (1,5,3,8,9)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((3,2,4),(4,1,5)) == (4,5,4), \"Wrong output\"\nassert     maximize_elements((-4,3,2),(7,5,-8)) == (3,2,-4), \"Wrong output\"\nassert     maximize_elements((1,2,3),(1,1,1)) == (1,1,3), \"Wrong output\"\nassert     maximize_elements((-1,2,3),(1,1,1)) == (1,1,3), \"Wrong output\"\nassert     maximize_elements((1,2,3),(1,1,1)) == (1,1,3), \"Wrong output\"\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((2,1), (5,2)) == (2, 5)\nassert     maximize_elements((0,1), (5,2)) == (5, 2)\nassert     maximize_elements((-1,1), (5,2)) == (5, 2)\n\nprint('All tests passed.')"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((1, 2), (4, 3)) == (4, 3)\nassert     maximize_elements((2, 3), (1, 2)) == (3, 2)\nassert     maximize_elements((1, 2), (2, 3)) == (3, 2)\nassert     maximize_elements((1, 2, 3), (1, 2)) == (3, 2)\nassert     maximize_elements((1, 2), (2, 3, 4)) == (3, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximize_elements((1,2,3), (4,5,6)) == (4,5,6)\nassert     maximize_elements((-1,2,3), (4,5,6)) == (4,5,6)\nassert     maximize_elements((1,2,3), (1,2,3)) == (1,2,3)\nassert     maximize_elements((-1,2,3), (1,2,3)) == (1,2,3)\nassert     maximize_elements((1,2,3), (3,2,1)) == (3,2,1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((1, 2), (3, 4)) == (4, 3)\nassert     maximize_elements((1, -2), (-3, 4)) == (4, -3)\n\nprint('PASSED ALL TESTS!'"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nnewman_prime(4)\nnewman_prime(8)\nnewman_prime(12)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((1, 2), (3, 4)) == (0.5, 0.8)\nassert     division_elements((3, 4), (1, 2)) == (0.5, 0.8)\nassert     division_elements((0, 2), (4, 2)) == (0.0, 0.8)\nassert     division_elements((-1, 2), (1, 2)) == (-0.5, 0.8)\nassert     division_elements((-1, 2), (0, 2)) == (-0.5, 0.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef swap_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and swaps the first and second elements in each tuple element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     division_elements((10, 2), (20, 2)) == (5, 1)\nassert     division_elements((10, 2), (10, 2)) == (1, 0)\nassert     division_elements((10, 2), (10, 5)) == (1, 0)\nassert     division_elements((1, 2), (10, 2)) == (0.5, 0.5)\nassert     division_elements((0.5, 2), (10, 2)) == (0.25, 0.25)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements((2,4), (2,2)) == (1, 2)\nassert     division_elements((2,4), (2,3)) == (0.5, 1.5)\nassert     division_elements((4,8), (2,2)) == (2, 4)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     division_elements((1,2),(2,4)) == (0.5, 1.0)\nassert     division_elements((1,2),(2,5)) == (0.5, 1.0)\nassert     division_elements((1,2),(3,4)) == (1.0, 1.0)\nassert     division_elements((1,2),(4,5)) == (2.0, 1.0)\nassert     division_elements((1,2),(1,1)) == (2.0, 1.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements( (5, 5), (4, 5) ) == (1, 1)\nassert     division_elements( (6, 5), (4, 5) ) == (2, 1)\nassert     division_elements( (2, 2), (4, 5) ) == (0, 0)\nassert     division_elements( (2, 3), (4, 5) ) == (0, 0)\nassert     division_elements( (6, 6), (4, 5) ) == (1, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1,2,3,4), (1,2,3)) == (0.5,1.0,2.5,4.0)\nassert     division_elements((3,4), (3,4,5)) == (3.0,4.0)\nassert     division_elements((0,0), (0,0)) == (0.0,0.0)\nassert     division_elements((0,0), (1,1)) == (0.0,0.0)\nassert     division_elements((1,2,3,4), (1,2,3,4)) == (0.25,0.5,1.0,2.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((\"a\", \"b\"), (\"c\", \"d\")) == ((\"a\", \"c\"), (\"b\", \"d\"))\nassert     division_elements((\"a\", \"b\"), (\"c\", \"d\")) == ((\"1/2\", \"1/2\"), (\"1/2\", \"1/2\"))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndivision_elements( (2, 3, 4, 5), (2, 0, 4, 4)) == (2.0, 1.0, 4.0, 8.0)\nassert \ndivision_elements( (2, 3, 4, 5), (2, 3, 0, 4)) == (2.0, 1.0, -1.0, 8.0)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])\nassert     split_two_parts([1,2,3,4,5,6], 2) == ([1,2], [3,4,5,6])\nassert     split_two_parts([1,2,3,4], 2) == ([1,2], [3,4])\nassert     split_two_parts([1,2,3,4], 3) == ([1,2], [3])\nassert     split_two_parts([1,2,3], 3) == ([1,2], [3])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2], [3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 1) == ([1], [2, 3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 0) == ([], [1, 2, 3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 7) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], -1) == ([], [1, 2, 3, 4, 5, 6])\n    split_two_parts([], 2) == ([], [])\n    split_two_parts([], 1) == ([], [])\n    split_two_parts([], 0) == ([], [])\n    split_two_parts([], -1) == ([], [])\n    split_two_parts([], -2) == ([], [])\n    split_two_parts([1], 0) == ([1], [])\n    split_two_parts([1], -1) == ([1], [])\n    split_two_parts([1], -2) == ([1], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], 1) == ([1], [2, 3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 4) == ([1, 2, 3, 4], [5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 5) == ([1, 2, 3, 4, 5], [6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 6) == ([1, 2, 3, 4, 5, 6], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], 7) == ([], [1, 2, 3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], 8) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], 9) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], 10) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], -1) == ([], [1, 2, 3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], -2) == ([], [1, 2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5, 6], -3) == ([], [1, 2, 3])\n    split_two_parts([1, 2, 3, 4, 5, 6], -4) == ([], [1, 2, 3, 4])\n    split_two_parts([1, 2, 3, 4, 5, 6], -5) == ([], [1, 2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5, 6], -6) == ([], [1, 2, 3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], -7) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], -8) == ([], [1, 2, 3, 4, 5, 6])\n    split_two_parts([1, 2, 3, 4, 5, 6], -9) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5, 6], -10) == ([], [])\n    split_two_parts([], -1) == ([], [])\n    split_two_parts([], -2) == ([], [])\n    split_two_parts([], -3) == ([], [])\n    split_two_parts([], -4) == ([], [])\n    split_two_parts([], -5) == ([], [])\n    split_two_parts([], -6) == ([], [])\n    split_two_parts([], -7) == ([], [])\n    split_two_parts([], -8) == ([], [])\n    split_two_parts([], -9) == ([], [])\n    split_two_parts([], -10) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\n    split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5], [])\n    split_two_parts([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4, 5], [])\n    split_two_parts([1, 2, 3, 4, 5], 7) == ([], [1, 2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 8) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], 9) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], 10) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], -1) == ([], [1, 2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], -2) == ([], [1, 2, 3, 4])\n    split_two_parts([1, 2, 3, 4, 5], -3) == ([], [1, 2, 3])\n    split_two_parts([1, 2, 3, 4, 5], -4) == ([], [1, 2, 3, 4])\n    split_two_parts([1, 2, 3, 4, 5], -5) == ([], [1, 2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], -6) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], -7) == ([], [1, 2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], -8) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], -9) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], -10) == ([], [])\n    split_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\n    split_two_parts([1, "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4, 5], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert split_two_parts([1,2,3,4,5], 2) == ([1, 2], [3, 4, 5]), 'incorrect'\nassert split_two_parts([1,2,3,4,5], 3) == ([1, 2, 3], [4, 5]), 'incorrect'\nassert split_two_parts([1,2,3,4,5], 0) == ([1, 2, 3, 4, 5], []), 'incorrect'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_two_parts([1,2,3,4], 2) == (([1,2], [3,4]), ([1,2], [3,4]))\nassert split_two_parts([1,2,3,4], 3) == ([1,2,3], [4])\nassert split_two_parts([1,2,3,4], 1) == (([1], [2,3,4]), ([1]))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsplit_two_parts([1,2,3,4,5,6,7,8,9], 5) == ([1, 2, 3, 4], [5, 6, 7, 8, 9])"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])\nassert     split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5])\nassert     split_two_parts([1,2,3,4,5], 4) == ([1,2,3,4], [5])\nassert     split_two_parts([1,2,3,4,5], 5) == ([1,2,3,4,5], [])\nassert     split_two_parts([1,2,3,4,5], 6) == ([1,2,3,4,5], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ((1, 2, 3, 4), (5, 6))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 3) == ((1, 2, 3), (4, 5, 6))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 4) == ((1, 2, 3, 4), (5, 6))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 5) == ((1, 2, 3, 4, 5), ())\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 6) == ((1, 2, 3, 4, 5), ())\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dog_age(10) == 2\nassert dog_age(12) == 7\nassert dog_age(17) == 9\nassert dog_age(22) == 11\nassert dog_age(35) == 27\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(0) == 0, \"incorrect dog_age(0)\"\nassert     dog_age(3) == 8, \"incorrect dog_age(3)\"\nassert     dog_age(12) == 24, \"incorrect dog_age(12)\"\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dog_age(10) == 0\nassert     dog_age(100) == 3\nassert     dog_age(90) == 4\nassert     dog_age(90) == 4\nassert     dog_age(100) == 3\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef dog_years(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to human years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dog_age(5) == 7, \"You should calculate a dog's age in dog's years.\"\nassert dog_age(10) == 86, \"You should calculate a dog's age in dog's years.\"\nassert dog_age(3) == 24, \"You should calculate a dog's age in dog's years.\"\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8,9,10], 3) == [[1,2,3],[4,5,6],[7,8,9],[10]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 5) == [[1,2,3,4,5],[6,7,8,9,10]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 10) == [[1,2,3,4,5,6,7,8,9,10]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 8) == [[1,2,3,4,5,6,7,8],[9,10]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 7) == [[1,2,3,4,5,6,7],[8,9,10]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_split([1,2,3,4,5,6], 1) == [[1,2,3,4,5,6]]\nassert     list_split([1,2,3,4,5,6], 2) == [[1,2],[3,4,5,6]]\nassert     list_split([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\nassert     list_split([1,2,3,4,5,6], 4) == [[1,2],[3,4],[5,6]]\nassert     list_split([1,2,3,4,5,6], 5) == [[1,2],[3,4],[5,6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert list_split([1,2,3], 1) == [[1],[2],[3]]\nassert list_split([1,2,3], 2) == [[1,2],[3]]\nassert list_split([1,2,3], 3) == [[1,2,3]]\nassert list_split([1,2,3], 4) == [[1,2,3],[]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse(L):\n    '''\n    Write a function that reverses a list, returning a new list.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef list_reverse(L):\n    '''\n    Write a function that takes in a list and returns the same list with the elements reversed\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n'''\n    >>> list_split([\"a\", \"b\", \"c\"], 2)\n    [['a', 'b'], ['c']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\"], 2)\n    [['a', 'b'], ['c', 'd']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\"], 3)\n    [['a', 'b', 'c'], ['d']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 3)\n    [['a', 'b', 'c'], ['d', 'e', 'f']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 3)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 6)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 7)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 4)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 5)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 8)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 9)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 10)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 12)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 8)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 9)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 10)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 11)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 12)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 13)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 14)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 15)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 16)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 17)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 18)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 19)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 20)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 21)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 22)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 23)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 24)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 25)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 26)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h']]\n    >>> list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 27)\n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7, None, None]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 1) == [[1, 2, 3], [4, 5, 6], [7, None, None]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 2) == [[1, 2], [3, 4], [5, 6], [7, None]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 5) == [[1, 2, 3], [4, 5, 6], [7, None, None]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 0) == [[1, 2, 3], [4, 5, 6], [7, None, None]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_split(range(10), 2) == [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]\nassert     list_split(range(10), 3) == [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]\nassert     list_split(range(10), 10) == [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]\nassert     list_split(range(10), 5) == [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]\nassert     list_split(range(10), 2) == [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1,2,3,4,5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1,2,3,4,5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1,2,3,4,5], 4) == [[1, 2, 3, 4]]\nassert     list_split([1,2,3,4,5], 5) == [[1, 2, 3, 4, 5]]\nassert     list_split([1,2,3,4,5], 6) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlateralsurface_cube(5) == 20\nassert lateralsurface_cube(7) == 56\nassert lateralsurface_cube(4) == 40\nassert lateralsurface_cube(8) == 64\nassert lateralsurface_cube(10) == 100\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(3) == 6, 'Wrong result'\nassert     lateralsurface_cube(4) == 10, 'Wrong result'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsurface_cube(1) == 2\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(4) == 20\nassert     lateralsurface_cube(5) == 24\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert lateralsurface_cube(3) == 27\nassert lateralsurface_cube(4) == 44\nassert lateralsurface_cube(5) == 57\nassert lateralsurface_cube(6) == 72\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(10) == 50\nassert     lateralsurface_cube(1) == 6\n\ndef lateralsurface_cuboid(l, h, w):\n    '''\n    Write a function to find the lateral surface area of a cuboid given its length, width and height.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(1) == 8\nassert     lateralsurface_cube(2) == 18\nassert     lateralsurface_cube(3) == 24\nassert     lateralsurface_cube(4) == 32\nassert     lateralsurface_cube(5) == 40\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Test Case 1: \")\nassert lateralsurface_cube(1) == 2\nprint(\"Test Case 2: \")\nassert lateralsurface_cube(2) == 4\nprint(\"Test Case 3: \")\nassert lateralsurface_cube(3) == 6\nprint(\"Test Case 4: \")\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nlateralsurface_cube(3)\nlateralsurface_cube(4)\nlateralsurface_cube(5)\nlateralsurface_cube(6)\nlateralsurface_cube(7)\nlateralsurface_cube(8)\nlateralsurface_cube(9)\nlateralsurface_cube(10)\nlateralsurface_cube(11)\nlateralsurface_cube(12)\nlateralsurface_cube(13)\nlateralsurface_cube(14)\nlateralsurface_cube(15)\nlateralsurface_cube(16)\nlateralsurface_cube(17)\nlateralsurface_cube(18)\nlateralsurface_cube(19)\nlateralsurface_cube(20)\nlateralsurface_cube(21)\nlateralsurface_cube(22)\nlateralsurface_cube(23)\nlateralsurface_cube(24)\nlateralsurface_cube(25)\nlateralsurface_cube(26)\nlateralsurface_cube(27)\nlateralsurface_cube(28)\nlateralsurface_cube(29)\nlateralsurface_cube(30)\nlateralsurface_cube(31)\nlateralsurface_cube(32)\nlateralsurface_cube(33)\nlateralsurface_cube(34)\nlateralsurface_cube(35)\nlateralsurface_cube(36)\nlateralsurface_cube(37)\nlateralsurface_cube(38)\nlateralsurface_cube(39)\nlateralsurface_cube(40)\nlateralsurface_cube(41)\nlateralsurface_cube(42)\nlateralsurface_cube(43)\nlateralsurface_cube(44)\nlateralsurface_cube(45)\nlateralsurface_cube(46)\nlateralsurface_cube(47)\nlateralsurface_cube(48)\nlateralsurface_cube(49)\nlateralsurface_cube(50)\nlateralsurface_cube(51)\nlateralsurface_cube(52)\nlateralsurface_cube(53)\nlateralsurface_cube(54)\nlateralsurface_cube(55)\nlateralsurface_cube(56)\nlateralsurface_cube(57)\nlateralsurface_cube(58)\nlateralsurface_cube(59)\nlateralsurface_cube(60)\nlateralsurface_cube(61)\nlateralsurface_cube(62)\nlateralsurface_cube(63)\nlateralsurface_cube(64)\nlateralsurface_cube(65)\nlateralsurface_cube(66)\nlateralsurface_cube(67)\nlateralsurface_cube(68)\nlateralsurface_cube(69)\nlateralsurface_cube(70)\nlateralsurface_cube(71)\nlateralsurface_cube(72)\nlateralsurface_cube(73)\nlateralsurface_cube(74)\nlateralsurface_cube(75)\nlateralsurface_cube(76)\nlateralsurface_cube(77)\nlateralsurface_cube(78)\nlateralsurface_cube(79)\nlateralsurface_cube(80)\nlateralsurface_cube(81)\nlateralsurface_cube(82)\nlateralsurface_cube(83)\nlateralsurface_cube(84)\nlateralsurface_cube(85)\nlateralsurface_cube(86)\nlateralsurface_cube(87)\nlateralsurface_cube(88)\nlateralsurface_cube(89)\nlateralsurface_cube(90)\nlateralsurface_cube(91)\nlateralsurface_cube(92)\nlateralsurface_cube(93)\nlateralsurface_cube(94)\nlateralsurface_cube(95)\nlateralsurface_cube(96)\nlateralsurface_cube(97)\nlateralsurface_cube(98)\nlateralsurface_cube(99)\nlateralsurface_cube(100)\nlateralsurface_cube(101)\nlateralsurface_cube(102)\nlateralsurface_cube(103)\nlateralsurface_cube(104)\nlateralsurface_cube(105)\nlateralsurface_cube(106)\nlateralsurface_cube(107)\nlateralsurface_cube(108)\nlateralsurface_cube(109)\nlateralsurface_cube(110)\nlateralsurface_cube(111)\nlateralsurface_cube(112)\nlateralsurface_cube(113)\nlateralsurface_cube(114)\nlateralsurface_cube(115)\nlateralsurface_cube(116)\nlateralsurface_cube(117)\nlateralsurface_cube(118)\nlateralsurface_cube(119)\nlateralsurface_cube(120)\nlateralsurface_cube(121)\nlateralsurface_cube(122)\nlateralsurface_cube(123)\nlateralsurface_cube(124)\nlateralsurface_cube(125)\nlateralsurface_cube(126)\nlateralsurface_cube(127)\nlateralsurface_cube(128)\nlateralsurface_cube(129)\nlateralsurface_cube(130)\nlateralsurface_cube(131)\nlateralsurface_cube(132)\nlateralsurface_cube(133)\nlateralsurface_cube(134)\nlateralsurface_cube(135)\nlateralsurface_cube(136)\nlateralsurface_cube(137)\nlateralsurface_cube(138)\nlateralsurface_cube(139)\nlateralsurface_cube(140)\nlateralsurface_cube(141)\nlateralsurface_cube(142)\nlateralsurface_cube(143)\nlateralsurface_cube(144)\nlateralsurface_cube(145)\nlateralsurface_cube(146)\nlateralsurface_cube(147)\nlateralsurface_cube(148)\nlateralsurface_cube(149)\nlateralsurface_cube(150)\nlateralsurface_cube(151)\nlateralsurface_cube(152)\nlateralsurface_cube(153)\nlateralsurface_cube(154)\nlateralsurface_cube(155)\nlateralsurface_cube(156)\nlateralsurface_cube(157)\nlateralsurface_cube(158)\nlateralsurface_cube(159)\nlateralsurface_cube(160)\nlateralsurface_cube(161)\nlateralsurface_cube(162)\nlateralsurface_cube(163)\nlateralsurface_cube(164)\nlateralsurface_cube(165)\nlateralsurface_cube(166)\nlateralsurface_cube(167)\nlateralsurface_cube(168)\nlateralsurface_cube(169)\nlateralsurface_cube(170)\nlateralsurface_cube(171)\nlateralsurface_cube(172)\nlateralsurface_cube(173)\nlateralsurface_cube(174)\nlateralsurface_cube(175)\nlateralsurface_cube(176)\nlateralsurface_cube(177)\nlateralsurface_cube(178)\nlateralsurface_cube(179)\nlateralsurface_cube(180)\nlateralsurface_cube(181)\nlateralsurface_cube(182)\nlateralsurface_cube(183)\nlateralsurface_cube(184)\nlateralsurface_cube(185)\nlateralsurface_cube(186)\nlateralsurface_cube(187)\nlateralsurface_cube(188)\nlateralsurface_cube(189)\nlateralsurface_cube(190)\nlateralsurface_cube(191)\nlateralsurface_cube(192)\nlateralsurface_cube(193)\nlateralsurface_cube(194)\nlateralsurface_cube(195)\nlateralsurface_cube(196)\nlateralsurface_cube(197)\nlateralsurface_cube(198)\nlateralsurface_cube(199)\nlateralsurface_cube(200)\nlateralsurface_cube(201)"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cube(5) == 15\nassert     lateralsurface_cube(10) == 50\nassert     lateralsurface_cube(12) == 66\nassert     lateralsurface_cube(15) == 150\nassert     lateralsurface_cube(25) == 250\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(2) == 3\nassert     lateralsurface_cube(3) == 6\nassert     lateralsurface_cube(4) == 10\nassert     lateralsurface_cube(5) == 14\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nsquare_Sum(5) == 1\nsquare_Sum(10) == 36\nsquare_Sum(20) == 1225\nsquare_Sum(25) == 2025\nsquare_Sum(30) == 84\nsquare_Sum(40) == 252500\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert square_Sum(2) == 7, 'Sum of squares should be 11'\nassert square_Sum(0) == 0, 'Sum of squares should be 0'\nassert square_Sum(1) == 1, 'Sum of squares should be 1'\nassert square_Sum(3) == 14, 'Sum of squares should be 14'\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(3) == 25, 'incorrect'\nassert square_Sum(4) == 52, 'incorrect'\n\n'''\nGiven a list of numbers, return the product of those numbers\n'''\ndef product(list_of_nums):\n  result = 1\n  for i in list_of_nums:\n    result = result * i\n  return result\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(5) == 0, \"FAILURE: square_Sum\"\nassert     square_Sum(3) == 9, \"FAILURE: square_Sum\"\nassert     square_Sum(6) == 45, \"FAILURE: square_Sum\"\nassert     square_Sum(10) == 285, \"FAILURE: square_Sum\"\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_Sum(0) == 0, \"incorrect\"\nassert square_Sum(1) == 1, \"incorrect\"\nassert square_Sum(2) == 1+4, \"incorrect\"\nassert square_Sum(3) == 1+4+9, \"incorrect\"\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert square_Sum(0) == 0, 'The function square_Sum should return the sum of the squares of the first n odd natural numbers.'\n\nassert square_Sum(10) == 4950, 'The function square_Sum should return the sum of the squares of the first n odd natural numbers.'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 4\nassert     find_star_num(4) == 5\nassert     find_star_num(5) == 6\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_star_num(1) == 1\nfind_star_num(2) == 3\nfind_star_num(3) == 5\nfind_star_num(4) == 7\nfind_star_num(5) == 11\nfind_star_num(6) == 13\nfind_star_num(7) == 15\nfind_star_num(8) == 17\nfind_star_num(9) == 19\nfind_star_num(10) == 21\nfind_star_num(11) == 23\nfind_star_num(12) == 25\nfind_star_num(13) == 27\nfind_star_num(14) == 29\nfind_star_num(15) == 31\nfind_star_num(16) == 33\nfind_star_num(17) == 35\nfind_star_num(18) == 37\nfind_star_num(19) == 39\nfind_star_num(20) == 41\nfind_star_num(21) == 43\nfind_star_num(22) == 45\nfind_star_num(23) == 47\nfind_star_num(24) == 49\nfind_star_num(25) == 51\nfind_star_num(26) == 53\nfind_star_num(27) == 55\nfind_star_num(28) == 57\nfind_star_num(29) == 59\nfind_star_num(30) == 61\nfind_star_num(31) == 63\nfind_star_num(32) == 65\nfind_star_num(33) == 67\nfind_star_num(34) == 69\nfind_star_num(35) == 71\nfind_star_num(36) == 73\nfind_star_num(37) == 75\nfind_star_num(38) == 77\nfind_star_num(39) == 79\nfind_star_num(40) == 81\nfind_star_num(41) == 83\nfind_star_num(42) == 85\nfind_star_num(43) == 87\nfind_star_num(44) == 89\nfind_star_num(45) == 91\nfind_star_num(46) == 93\nfind_star_num(47) == 95\nfind_star_num(48) == 97\nfind_star_num(49) == 99\nfind_star_num(50) == 101\nfind_star_num(51) == 103\nfind_star_num(52) == 105\nfind_star_num(53) == 107\nfind_star_num(54) == 109\nfind_star_num(55) == 111\nfind_star_num(56) == 113\nfind_star_num(57) == 115\nfind_star_num(58) == 117\nfind_star_num(59) == 119\nfind_star_num(60) == 121\nfind_star_num(61) == 123\nfind_star_num(62) == 125\nfind_star_num(63) == 127\nfind_star_num(64) == 129\nfind_star_num(65) == 131\nfind_star_num(66) == 133\nfind_star_num(67) == 135\nfind_star_num(68) == 137\nfind_star_num(69) == 139\nfind_star_num(70) == 141\nfind_star_num(71) == 143\nfind_star_num(72) == 145\nfind_star_num(73) == 147\nfind_star_num(74) == 149\nfind_star_num(75) == 151\nfind_star_num(76) == 153\nfind_star_num(77) == 155\nfind_star_num(78) == 157\nfind_star_num(79) == 159\nfind_star_num(80) == 161\nfind_star_num(81) == 163\nfind_star_num(82) == 165\nfind_star_num(83) == 167\nfind_star_num(84) == 169\nfind_star_num(85) == 171\nfind_star_num(86) == 173\nfind_star_num(87) == 175\nfind_star_num(88) == 177\nfind_star_num(89) == 179\nfind_star_num(90) == 181\nfind_star_num(91) == 183\nfind_star_num(92) == 185\nfind_star_num(93) == 187\nfind_star_num(94) == 189\nfind_star_num(95) == 191\nfind_star_num(96) == 193\nfind_star_num(97) == 195\nfind_star_num(98) == 197\nfind_star_num(99) == 199\nfind_star_num(100) == 201\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_star_num(4) == 5\nassert find_star_num(1) == 1\nassert find_star_num(5) == 12\n\ndef generate_adjacency_list(g):\n    '''\n    Write a function that generates a dict of an adjacency list.\n    A adjacency list is a dict with a key for every node.\n    The value for each key is a list of adjacent nodes (i.e., the node next to the given node).\n    For example, if the graph is the following,\n    a = {1: [2,3],\n        2: [4],\n        3: [5],\n        4: [1],\n        5: [6],\n        6: []}\n    then the adjacency list is as follows:\n    a = {1: [2, 3, 4],\n        2: [5],\n        3: [5],\n        4: [1],\n        5: [6],\n        6: []}\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_star_num(1) == 1\nassert find_star_num(2) == 4\nassert find_star_num(3) == 7\nassert find_star_num(4) == 12\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_star_num(1) == 1\nfind_star_num(2) == 3\nfind_star_num(3) == 5\nfind_star_num(4) == 7\nfind_star_num(5) == 11\nfind_star_num(6) == 13\nfind_star_num(7) == 15\nfind_star_num(8) == 17\nfind_star_num(9) == 19\nfind_star_num(10) == 23\nfind_star_num(11) == 29\nfind_star_num(12) == 31\nfind_star_num(13) == 37\nfind_star_num(14) == 41\nfind_star_num(15) == 43\nfind_star_num(16) == 47\nfind_star_num(17) == 53\nfind_star_num(18) == 59\nfind_star_num(19) == 61\nfind_star_num(20) == 67\nfind_star_num(21) == 71\nfind_star_num(22) == 73\nfind_star_num(23) == 79\nfind_star_num(24) == 83\nfind_star_num(25) == 89\nfind_star_num(26) == 97\nfind_star_num(27) == 101\nfind_star_num(28) == 103\nfind_star_num(29) == 107\nfind_star_num(30) == 109\nfind_star_num(31) == 113\nfind_star_num(32) == 127\nfind_star_num(33) == 131\nfind_star_num(34) == 137\nfind_star_num(35) == 139\nfind_star_num(36) == 149\nfind_star_num(37) == 151\nfind_star_num(38) == 157\nfind_star_num(39) == 163\nfind_star_num(40) == 167\nfind_star_num(41) == 173\nfind_star_num(42) == 179\nfind_star_num(43) == 181\nfind_star_num(44) == 191\nfind_star_num(45) == 193\nfind_star_num(46) == 197\nfind_star_num(47) == 199\nfind_star_num(48) == 211\nfind_star_num(49) == 223\nfind_star_num(50) == 227\nfind_star_num(51) == 229\nfind_star_num(52) == 233\nfind_star_num(53) == 239\nfind_star_num(54) == 241\nfind_star_num(55) == 251\nfind_star_num(56) == 257\nfind_star_num(57) == 263\nfind_star_num(58) == 269\nfind_star_num(59) == 271\nfind_star_num(60) == 277\nfind_star_num(61) == 281\nfind_star_num(62) == 289\nfind_star_num(63) == 293\nfind_star_num(64) == 307\nfind_star_num(65) == 311\nfind_star_num(66) == 313\nfind_star_num(67) == 317\nfind_star_num(68) == 331\nfind_star_num(69) == 337\nfind_star_num(70) == 347\nfind_star_num(71) == 349\nfind_star_num(72) == 353\nfind_star_num(73) == 359\nfind_star_num(74) == 361\nfind_star_num(75) == 363\nfind_star_num(76) == 379\nfind_star_num(77) == 383\nfind_star_num(78) == 389\nfind_star_num(79) == 391\nfind_star_num(80) == 397\nfind_star_num(81) == 401\nfind_star_num(82) == 409\nfind_star_num(83) == 419\nfind_star_num(84) == 421\nfind_star_num(85) == 431\nfind_star_num(86) == 433\nfind_star_num(87) == 439\nfind_star_num(88) == 441\nfind_star_num(89) == 443\nfind_star_num(90) == 449\nfind_star_num(91) == 457\nfind_star_num(92) == 461\nfind_star_num(93) == 463\nfind_star_num(94) == 467\nfind_star_num(95) == 479\nfind_star_num(96) == 481\nfind_star_num(97) == 483\nfind_star_num(98) == 489\nfind_star_num(99) == 491\nfind_star_num(100) == 499\nfind_star_num(101) == 503\nfind_star_num(102) == 509\nfind_star_num(103) == 511\nfind_star_num(104) == 517\nfind_star_num(105) == 529\nfind_star_num(106) == 531\nfind_star_num(107) == 533\nfind_star_num(108) == 541\nfind_star_num(109) == 547\nfind_star_num(110) == 557\nfind_star_num(111) == 561\nfind_star_num(112) == 563\nfind_star_num(113) == 569\nfind_star_num(114) == 571\nfind_star_num(115) == 577\nfind_star_num(116) == 581\nfind_star_num(117) == 583\nfind_star_num(118) == 587\nfind_star_num(119) == 593\nfind_star_num(120) == 597\nfind_star_num(121) == 601\nfind_star_num(122) == 607\nfind_star_num(123) == 613\nfind_star_num(124) == 617\nfind_star_num(125) == 621\nfind_star_num(126) == 629\nfind_star_num(127) == 631\nfind_star_num(128) == 641\nfind_star_num(129) == 643\nfind_star_num(130) == 647\nfind_star_num(131) == 661\nfind_star_num(132) == 663\nfind_star_num(133) == 671\nfind_star_num(134) == 673\nfind_star_num(135) == 677\nfind_star_num(136) == 679\nfind_star_num(137) == 683\nfind_star_num(138) == 691\nfind_star_num(139) == 701\nfind_star_num(140) == 709\nfind_star_num(141) == 719\nfind_star_num(142) == 721\nfind_star_num(143) == 733\nfind_star_num(144) == 739\nfind_star_num(145) == 743\nfind_star_num(146) == 751\nfind_star_num(147) == 757\nfind_star_num(148) == 761\nfind_star_num(149) == 763\nfind_star_num(150) == 769\nfind_star_num(151) == 771\nfind_star_num(152) == 773\nfind_star_num(153) == 777\nfind_star_num(154) == 783\nfind_star_num(155) == 797\nfind_star_num(156) == 809\nfind_star_num(157) == 821\nfind_star_num(158) == 823\nfind_star_num(159) == 827\nfind_star_num(160) == 829\nfind_star_num(161) == 831\nfind_star_num(162) == 839\nfind_star_num(163) == 841\nfind_star_num(164) == 843\nfind_star_num(165) == 857\nfind_star_num(166) == 859\nfind_star_num(167) == 863\nfind_star_num(168) == 869\nfind_star_num(169) == 887\nfind_star_num(170) == 893\nfind_star_num(171) == 899\nfind_star_num(172) == 911\nfind_star_num(173) == 917\nfind_star_num(174) == 921\nfin"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(2) == 2\nassert     find_star_num(3) == 3\nassert     find_star_num(4) == 3\nassert     find_star_num(5) == 5\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef ascii_name(v):\n    '''\n    Write a function to convert ascii value to character.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef ascii_value_to_name(v):\n    '''\n    Write a function to find the name of a character in ascii value.\n    '''\n    pass\n\nassert ascii_value_to_name(7) == 'a', 'Wrong!'\n\ndef xor(s1, s2):\n    '''\n    Write a function to find the xor of 2 strings, return a string with\n    the result.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     ascii_value('A') == 97\nassert     ascii_value('B') == 98\nassert     ascii_value('C') == 99\nassert     ascii_value('D') == 100\nassert     ascii_value('E') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97, '\\nFAILED: ascii_value(\"a\")'\nassert     ascii_value('A') == 65, '\\nFAILED: ascii_value(\"A\")'\nassert     ascii_value('0') == 48, '\\nFAILED: ascii_value(\"0\")'\nassert     ascii_value('1') == 49, '\\nFAILED: ascii_value(\"1\")'\nassert     ascii_value('9') == 57, '\\nFAILED: ascii_value(\"9\")'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    k = 'a'\n    print(ascii_value(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('A') == 65\nassert     ascii_value('B') == 66\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([1, 3, 5]) == 0\nassert     sum_even_and_even_index([1, 3, 5, 7]) == 0\nassert     sum_even_and_even_index([1, 2, 3, 4, 5]) == 10\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 29\nassert     sum_even_and_even_index([2, 2, 2, 2, 2, 2]) == 12\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5]) == 0, \"Wrong answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6]) == 6, \"Wrong answer\"\nassert     sum_even_and_even_index([]) == 0, \"Wrong answer\"\nassert     sum_even_and_even_index([1,2,3,4,5]) == 0, \"Wrong answer\"\nassert     sum_even_and_even_index([1,2,3,4,5,6]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \n32\n\nassert\nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \n36\n\nassert\nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == \n38\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([10, 11, 21, 31, 41]) == 2, \"Sum of even numbers at even index should be 2\"\nassert     sum_even_and_even_index([4, 7, 1, 8, 2]) == 12, \"Sum of even numbers at even index should be 12\"\nassert     sum_even_and_even_index([10, 11, 21, 31, 41, 51, 61, 71]) == 0, \"Sum of even numbers at even index should be 0\"\nassert     sum_even_and_even_index([1, 2, 4, 5, 6]) == 0, \"Sum of even numbers at even index should be 0\"\nassert     sum_even_and_even_index([4, 7, 1, 8, 2, 4, 7, 1, 8, 2]) == 10, \"Sum of even numbers at even index should be 10\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 10\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 14\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 21\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 24\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 29\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7]\n    sum_even_and_even_index(arr"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 8, \"Test is failed\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0, \"Test is failed\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 16, \"Test is failed\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 19, \"Test is failed\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 26, \"Test is failed\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_Power_Sum(10) == 0\neven_Power_Sum(100) == 0\neven_Power_Sum(100) == 55\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_Power_Sum(4) == 16\neven_Power_Sum(10) == 2550\neven_Power_Sum(25) == 35125\neven_Power_Sum(100) == 61875000\n\nprint('All test cases have passed')"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_Power_Sum(3) == 27\nassert even_Power_Sum(2) == 36\nassert even_Power_Sum(5) == 545\n\n'''"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(3) == 4, 'Test failed.'\nassert     even_Power_Sum(1) == 1, 'Test failed.'\nassert     even_Power_Sum(5) == 6, 'Test failed.'\n\n\ndef even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_even_Power_Sum():\n    # using different numbers as input.\n    # Hint: Use built-in function `sum` to achieve this.\n    # Hint: Python 3.0+ has `max`, so you can directly use `max` to do this.\n    # Your test_even_Power_Sum() test case should be able to accept a -10 as input.\n    assert even_Power_Sum(-10) == 0\n    assert even_Power_Sum(10) == 0\n    assert even_Power_Sum(20) == 0\n    "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_Power_Sum(0)    == 0, 'First Test Case: Fail.'\nassert     even_Power_Sum(1)    == 1, 'Second Test Case: Fail.'\nassert     even_Power_Sum(2)    == 1, 'Third Test Case: Fail.'\nassert     even_Power_Sum(3)    == 8, 'Fourth Test Case: Fail.'\nassert     even_Power_Sum(4)    == 144, 'Fifth Test Case: Fail.'\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef same_name(first_name, last_name):\n    '''\n    Write a python function that takes in two strings and returns True if the first name is the same as the second name, otherwise returns False\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 1\nassert     even_Power_Sum(3) == 2\nassert     even_Power_Sum(4) == 5\nassert     even_Power_Sum(5) == 32\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_Power_Sum(1) == 0\nassert even_Power_Sum(2) == 2\nassert even_Power_Sum(3) == 14\nassert even_Power_Sum(4) == 25\nassert even_Power_Sum(5) == 50\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_Power_Sum(1) == 4\nassert even_Power_Sum(4) == 15\nassert even_Power_Sum(10) == 153\nassert even_Power_Sum(20) == 1545\nassert even_Power_Sum(100) == 10405\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rear_extract([('E','A'),('A','C'),('B','B'),('C','B')]) == ['B','B','B','B'], \\\n    \"rear_extract([('E','A'),('A','C'),('B','B'),('C','B')]): Your function has a logic error!\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','',25)]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30,60),('Peter','')]) == ['John', 'Susan', 'Amanda', 'Peter']\n    front_extract([('John','Johnsmith',40),('Susan','',20),('Amanda',30"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rear_extract([(1, 2), (2, 3), (4, 5)]) == [(2, 3), (4, 5)], \"Should be [(2, 3), (4, 5)]\"\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) ==     [('c', 3), ('b', 2)], \"Should be [('c', 3), ('b', 2)]\"\n\nprint(\"\\nAll the tests passed\")\n\nprint(\"\\n\\n#### Test Case 2: Now the function should return the reversed list ####\\n\")\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # The following tests will fail due to how we're defining the list of tuples.\n    # The function will always return a list of size 1.\n    # The first element is the rear element of each tuple.\n    assert rear_extract(\n        [\n            (1,2),\n            (3,4),\n            (5,6)\n        ]\n    ) == [5,6,5]\n    assert rear_extract(\n        [\n            (1,2),\n            (3,4),\n            (5,6,7)\n        ]\n    ) == [5,6,7,5]\n    assert rear_extract(\n        [\n            (1,2,3),\n            (4,5,6),\n            (7,8,9,10)\n        ]\n    ) == [7,8,9,10,7]\n    assert rear_extract(\n        [\n            (1,2,3),\n            (4,5,6,7),\n            (8,9,10,11)\n        ]\n    ) == [7,8,9,10,11,7]\n    "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [(3,4),(5,6)]\nassert     rear_extract([('apple',2),('orange',4),('pear',6)]) == ['pear',(4,6)]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([(1, 2), (2, 4), (4, 5)]) == [(2, 4)], 'Wrong'\nassert rear_extract([(1, 2, 3), (2, 4)]) == [(2, 4)], 'Wrong'\nassert rear_extract([(1), (2, 3)]) == [(2, 3)], 'Wrong'\n\nprint('Testing of rear_extract is finished!')\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) ==     [1, 2, 3]\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) ==     ['a', 2, 3]\nassert     rear_extract([(1, 1), (2, 2), (3, 3)]) ==     [1, 2, 3]\nassert     rear_extract([(1, 1), (2, 2), (3, 3)]) ==     [1, 2, 3]\nassert     rear_extract([(1, 1), (2, 2), (3, 3)]) ==     [1, 2, 3]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     substract_elements((10,20,30), (1,2,3)) ==     (9,8,7)\nassert     substract_elements((10,20,30), (1,1,1)) ==     (9,9,9)\nassert     substract_elements((10,20,30), (10,20,30)) ==     (0,0,0)\nassert     substract_elements((10,20,30), (20,30,40)) ==     (-10,0,0)\nassert     substract_elements((10,20,30), (20,10,40)) ==     (-20,-10,-40)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((3,4,5), (1,2,3)) == (2,1,3)\nassert substract_elements((3,4,5), (2,3,1)) == (1,1,2)\nassert substract_elements((3,4,5), (1,1,1)) == (1,1,1)\nprint('Done!')\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((10,), (10,)) == (0,)\nassert     substract_elements((-1,2,3), (-1,2,3)) == (-2,1,0)\nassert     substract_elements((), (10,)) == ()\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntest_tup1 = (1,2,3)\ntest_tup2 = (3,4,5)\nexpected_output = (1,2,0)\noutput = substract_elements(test_tup1, test_tup2)\nprint(output)"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (substract_elements((1,2,3),(2,2,2)) == (1,0,3))\nassert     (substract_elements((1,2,3),(3,2,2)) == (0,1,0))\nassert     (substract_elements((1,2,3,4),(2,2,2)) == (0,0,1,2))\nassert     (substract_elements((1,2),(3,2,2,2)) == (1,1,0,1))\nassert     (substract_elements((1,2),(3,2,2)) == (0,0,1,2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     substract_elements((1,2), (3,4)) == (-1,-2), \"substract_elements works for tuples of same lenght.\"\nassert     substract_elements((1,2,3), (4,5,6)) == (-2,-2, -3), \"substract_elements works for tuples of different lenght.\"\n\ndef add_element_tuple(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and add the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     substract_elements((1, 2, 3), (4, 5, 6)) == (-1, -2, -3)\nassert     substract_elements((1, 2, 4), (0, 5, 6)) == (-1, 2, 4)\nassert     substract_elements((1, 2, 3), (1, 1, 1)) == (-2, -3, -4)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsubstract_elements((1, 2, 3), (4, 5, 6)) == (1, 1, 1)\nsubstract_elements((1, 2, 3), (2, 2, 2)) == (1, 1, 0)\nsubstract_elements((1, 2, 3), (3, 4, 5)) == (0, 0, 0)\n\n\n\ndef n_larger_than_m(test_list, test_num):\n    '''\n    Write a function that takes in a list and a number and returns the number of elements in the list that are greater than the number.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements((1,2,3), (4,5,6)) == (1,2,3)\nassert     substract_elements((1,2,3), (4,5,6,7)) == (1,2,3)\nassert     substract_elements((1,2,3), (4,5,6,7,8)) == (1,2,3)\nassert     substract_elements((1,2,3,4,5), (4,5,6)) == (1,2,3,4,5)\nassert     substract_elements((1,2,3,4,5), (4,5,6,7,8)) == (1,2,3,4,5)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert substract_elements((1, 2, 3), (3, 2, 1)) == (0, 0, 1)\nassert substract_elements((2, 4, 6), (1, 2, 3)) == (1, 0, 2)\nassert substract_elements((3, 2, 1), (1, 2, 3)) == (0, 1, 0)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 1\nassert     even_binomial_Coeff_Sum(1) == 1\nassert     even_binomial_Coeff_Sum(2) == 2\nassert     even_binomial_Coeff_Sum(3) == 7\nassert     even_binomial_Coeff_Sum(4) == 10\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum(4) == 0\nassert     even_binomial_Coeff_Sum(12) == 3\nassert     even_binomial_Coeff_Sum(11) == 22\nassert     even_binomial_Coeff_Sum(21) == 888\nassert     even_binomial_Coeff_Sum(35) == 46189\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    even_binomial_Coeff_Sum(0) == 0\n    even_binomial_Coeff_Sum(1) == 1\n    even_binomial_Coeff_Sum(2) == 1\n    even_binomial_Coeff_Sum(3) == 1\n    even_binomial_Coeff_Sum(4) == 1\n    even_binomial_Coeff_Sum(5) == 2\n    even_binomial_Coeff_Sum(6) == 2\n    even_binomial_Coeff_Sum(7) == 2\n    even_binomial_Coeff_Sum(8) == 2\n    even_binomial_Coeff_Sum(9) == 2\n    even_binomial_Coeff_Sum(10) == 3\n    even_binomial_Coeff_Sum(11) == 3\n    even_binomial_Coeff_Sum(12) == 3\n    even_binomial_Coeff_Sum(13) == 3\n    even_binomial_Coeff_Sum(14) == 4\n    even_binomial_Coeff_Sum(15) == 4\n    even_binomial_Coeff_Sum(16) == 4\n    even_binomial_Coeff_Sum(17) == 4\n    even_binomial_Coeff_Sum(18) == 4\n    even_binomial_Coeff_Sum(19) == 5\n    even_binomial_Coeff_Sum(20) == 5\n    even_binomial_Coeff_Sum(21) == 5\n    even_binomial_Coeff_Sum(22) == 5\n    even_binomial_Coeff_Sum(23) == 5\n    even_binomial_Coeff_Sum(24) == 6\n    even_binomial_Coeff_Sum(25) == 6\n    even_binomial_Coeff_Sum(26) == 6\n    even_binomial_Coeff_Sum(27) == 6\n    even_binomial_Coeff_Sum(28) == 6\n    even_binomial_Coeff_Sum(29) == 6\n    even_binomial_Coeff_Sum(30) == 6\n    even_binomial_Coeff_Sum(31) == 6\n    even_binomial_Coeff_Sum(32) == 7\n    even_binomial_Coeff_Sum(33) == 7\n    even_binomial_Coeff_Sum(34) == 7\n    even_binomial_Coeff_Sum(35) == 7\n    even_binomial_Coeff_Sum(36) == 7\n    even_binomial_Coeff_Sum(37) == 7\n    even_binomial_Coeff_Sum(38) == 7\n    even_binomial_Coeff_Sum(39) == 7\n    even_binomial_Coeff_Sum(40) == 8\n    even_binomial_Coeff_Sum(41) == 8\n    even_binomial_Coeff_Sum(42) == 8\n    even_binomial_Coeff_Sum(43) == 8\n    even_binomial_Coeff_Sum(44) == 8\n    even_binomial_Coeff_Sum(45) == 8\n    even_binomial_Coeff_Sum(46) == 8\n    even_binomial_Coeff_Sum(47) == 8\n    even_binomial_Coeff_Sum(48) == 9\n    even_binomial_Coeff_Sum(49) == 9\n    even_binomial_Coeff_Sum(50) == 9\n    even_binomial_Coeff_Sum(51) == 9\n    even_binomial_Coeff_Sum(52) == 9\n    even_binomial_Coeff_Sum(53) == 9\n    even_binomial_Coeff_Sum(54) == 9\n    even_binomial_Coeff_Sum(55) == 9\n    even_binomial_Coeff_Sum(56) == 10\n    even_binomial_Coeff_Sum(57) == 10\n    even_binomial_Coeff_Sum(58) == 10\n    even_binomial_Coeff_Sum(59) == 10\n    even_binomial_Coeff_Sum(60) == 10\n    even_binomial_Coeff_Sum(61) == 10\n    even_binomial_Coeff_Sum(62) == 10\n    even_binomial_Coeff_Sum(63) == 11\n    even_binomial_Coeff_Sum(64) == 11\n    even_binomial_Coeff_Sum(65) == 11\n    even_binomial_Coeff_Sum(66) == 11\n    even_binomial_Coeff_Sum(67) == 11\n    even_binomial_Coeff_Sum(68) == 11\n    even_binomial_Coeff_Sum(69) == 11\n    even_binomial_Coeff_Sum(70) == 12\n    even_binomial_Coeff_Sum(71) == 12\n    even_binomial_Coeff_Sum(72) == 12\n    even_binomial_Coeff_Sum(73) == 12\n    even_binomial_Coeff_Sum(74) == 12\n    even_binomial_Coeff_Sum(75) == 12\n    even_binomial_Coeff_Sum(76) == 12\n    even_binomial_Coeff_Sum(77) == 13\n    even_binomial_Coeff_Sum(78) == 13\n    even_binomial_Coeff_Sum(79) == 13\n    even_binomial_Coeff_Sum(80) == 13\n    even_binomial_Coeff_Sum(81) == 14\n    even_binomial_Coeff_Sum(82) == 14\n    even_binomial_Coeff_Sum(83) == 14\n    even_binomial_Coeff_Sum(84) == 14\n    even_binomial_Coeff_Sum(85) == 14\n    even_binomial_Coeff_Sum(86) == 15\n    even_binomial_Coeff_Sum(87) == 15\n    even_binomial_Coeff_Sum(88) == 15\n    even_binomial_Coeff_Sum(89) == 15\n    even_binomial_Coeff_Sum(90) == 16\n    even_binomial_Coeff_Sum(91) == 16\n    even_binomial_Coeff_Sum(92) == 16\n    even_binomial_Coeff_Sum(93) == 16\n    even_binomial_Coeff_Sum(94) == 16\n    even_binomial_Coeff_Sum(95) == 17\n    even_binomial_Coeff_Sum(96) == 17\n    even_binomial_Coeff_Sum(97) == 17\n    even_binomial_Coeff_Sum(98) == 17\n    even_binomial_Coeff_Sum(99) == 18\n    even_binomial_Coeff_Sum(100) == 18\n    even_binomial_Coeff_Sum(101) == 18\n    even_binomial_Coeff_Sum(102) == 18\n    even_binomial_Coeff_Sum(103) == 18\n    even_binomial_Coeff_Sum(104) == 19\n    even_binomial_Coeff_Sum(105) == 19\n    even_binomial_Coeff_Sum(106) == 19\n    even_binomial_Coeff_Sum(107) == 19\n    even_binomial_Coeff_Sum(108) == 20\n    even_binomial_Coeff_Sum(109) == 20\n    even_binomial_Coeff_Sum(110) == 20\n    even_binomial_Coeff_Sum(111) == 20\n    even_binomial_Coeff_Sum(112) == 21\n    even_binomial_Coeff_Sum(113) == 21\n    even_binomial_Coeff_Sum(114) == 21\n    even_binomial_Coeff_Sum(115) == 21\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_binomial_Coeff_Sum(0) == 0\nassert \neven_binomial_Coeff_Sum(1) == 0\nassert \neven_binomial_Coeff_Sum(2) == 0\nassert \neven_binomial_Coeff_Sum(3) == 0\nassert \neven_binomial_Coeff_Sum(4) == 0\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum( 2) == 2 \nassert     even_binomial_Coeff_Sum( 5) == 10\nassert     even_binomial_Coeff_Sum( 10) == 545\nassert     even_binomial_Coeff_Sum(15) == 1445\nassert     even_binomial_Coeff_Sum(20) == 12180\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 1\nassert     even_binomial_Coeff_Sum(2) == 1\nassert even_binomial_Coeff_Sum(3) == 1\nassert even_binomial_Coeff_Sum(4) == 6\nassert even_binomial_Coeff_Sum(5) == 21\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum(5) == 1\nassert     even_binomial_Coeff_Sum(0) == 0\nassert     even_binomial_Coeff_Sum(2) == 0\nassert even_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(3) == 4\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_binomial_Coeff_Sum( 5) == 4\nassert     even_binomial_Coeff_Sum(12) == 70\nassert     even_binomial_Coeff_Sum(18) == 1063\nassert     even_binomial_Coeff_Sum(42) == 1319\nassert     even_binomial_Coeff_Sum(3) == 0\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 7 #2\nassert even_binomial_Coeff_Sum(4) == 5 #4\nassert even_binomial_Coeff_Sum(5) == 11 #5\nassert even_binomial_Coeff_Sum(6) == 34 #6\nassert even_binomial_Coeff_Sum(8) == 44 #8\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum(3) == 1\nassert     even_binomial_Coeff_Sum(4) == 2\nassert     even_binomial_Coeff_Sum(5) == 7\nassert     even_binomial_Coeff_Sum(7) == 18\n\n'''\nA p-norm binary quadratic model (BQM) can be described as a set of clauses with \nat most 2^(p-1)-1 variables. \nFor example, a 3-regular binary quadratic model (BQM) can be described as \na set of clauses with at most 2^(3-1)-1 variables. \nConsider the following example of the BQM from the lecture notes. \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    volume_cylinder(2,3) ==  6.56\n    volume_cylinder(3,4) ==  24.0\n\ndef volume_cube(s):\n    '''\n    Write a function that takes in the length of a cube and returns the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint()\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(1,5) == pi*r*h, \"Should be pi*r*h\"\n\ndef distance_between_points(x1,y1,x2,y2):\n    '''\n    Write a function that takes in the x and y coordinates of two points and returns the distance between the two points.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(2,2) == pi*2**2*2/3\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(1,2) == 3.14*pow(2,2)\nassert     volume_cylinder(4,7) == 4/3*3.14*pow(4,2)\nprint(\"Well done!\")\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(10, 20) == 330, \"incorrect volume\"\nassert     volume_cylinder(10, 1) == 1, \"incorrect volume\"\nassert     volume_cylinder(2, 2) == 4, \"incorrect volume\"\nassert     volume_cylinder(4, 5) == 78, \"incorrect volume\"\nassert     volume_cylinder(5, 10) == 78, \"incorrect volume\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nvolume_cylinder(10,1) == 10\nvolume_cylinder(10,10) == 100\nvolume_cylinder(10,2) == 20\nvolume_cylinder(5,5) == 100\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(4,6) == 32, 'incorrect'\nassert     volume_cylinder(3,5) == 27, 'incorrect'\nassert     volume_cylinder(2,9) == 81, 'incorrect'\nassert     volume_cylinder(3,4) == 24, 'incorrect'\nassert     volume_cylinder(1.5,1.5) == 25, 'incorrect'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(3,4) == 9.65, 'failed to return the correct volume'\nassert volume_cylinder(3,4) == 9.65, 'failed to return the correct volume'\nassert volume_cylinder(2.5,3.5) == 18.38, 'failed to return the correct volume'\nassert volume_cylinder(2.5,3.5) == 18.38, 'failed to return the correct volume'\nprint('Success')\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({'a':1, 'b': 2, 'c': 3, 'd': 4}, 2) == {'a':1, 'd':4}\nassert     dict_filter({'a':1, 'b': 2, 'c': 3, 'd': 4}, 0) == {}\nassert     dict_filter({'a':1, 'b': 2, 'c': 3, 'd': 4}, -2) == {}\nassert     dict_filter({'a':1, 'b': 2, 'c': 3, 'd': 4}, 5) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {'a': 1, 'b': 2}\nassert dict_filter({'a': 1, 'b': 2, 'c': 3}, 3) == {'a': 1, 'b': 2}\nassert dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'a': 1}\nassert dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2}\nassert dict_filter({'a': 1, 'b': 2, 'c': 3}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({'key1':1, 'key2':2, 'key3':3}, 1) == {'key1':1, 'key2':2, 'key3':3}, 'filter'\nassert     dict_filter({'key1':1, 'key2':2, 'key3':3}, 2) == {'key1':1, 'key2':2, 'key3':3}, 'filter'\nassert     dict_filter({'key1':1, 'key2':2, 'key3':3}, 3) == {'key1':1, 'key2':2, 'key3':3}, 'filter'\nassert     dict_filter({'key1':1, 'key2':2, 'key3':3}, 1.1) == {'key1':1, 'key2':2, 'key3':3}, 'filter'\nassert     dict_filter({'key1':1, 'key2':2, 'key3':3}, 0) == {}, 'filter'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}\nassert dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {}\nassert dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}\nassert dict_filter({'a': 1, 'b': 2, 'c': 3}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    dict_filter({'a':2, 'b':1, 'c':3}, 1) == {'b':1, 'c':3}\n    dict_filter({'a':2, 'b':1, 'c':3}, 3) == {'a':2, 'c':3}\n    dict_filter({'a':2, 'b':1, 'c':3}, 2) == {'a':2, 'b':1}\n    dict_filter({'a':2, 'b':1, 'c':3}, 4) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 1) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}, \"Wrong output\"\nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 3) == {'a': 1, 'b': 2, 'd': 4}, \"Wrong output\"\nassert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 5) == {}, \"Wrong output\""
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 3) == {'a': 1, 'b': 2, 'c': 3}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 5) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'a': 10, 'b': 1, 'c': 22}, 3) == {'b': 1, 'c': 22}\nassert dict_filter({'a': 10, 'b': 1, 'c': 22}, 2) == {}\n\n'''\nExercise:\nWrite a function dict_filter that takes in a dictionary and integer n and returns a dictionary with only the keys that have values greater than or equal to n.\n'''"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({'a':2,'b':2,'c':2,'d':3},2) == {'c':2,'d':3}\nassert     dict_filter({'a':2,'b':2,'c':2,'d':3},1) == {'a':2,'b':2,'c':2,'d':3}\nassert     dict_filter({'a':2,'b':2,'c':2,'d':3},0) == {'a':2,'b':2,'c':2,'d':3}\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements((1,2,3,3,2)) == 1\nassert     count_first_elements((1,2,3,3,1)) == 0\nassert     count_first_elements((1,1,2,2,2)) == 2\nassert     count_first_elements((2,2,2,1,1)) == 1\nassert     count_first_elements((2,2,2,1,2)) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((5,1,2,3)) == 4, 'Should be 4'\nassert     count_first_elements((1,1,2,3)) == 3, 'Should be 3'\nassert     count_first_elements((2,1,2,3)) == 2, 'Should be 2'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((2,2,4,2,4,2,1,3,2,3,2,1)) == 5, \"Should be 5\"\nassert count_first_elements((2,2,4,2,4,2,1,3,2,3,2,1)) == 2, \"Should be 2\"\nassert count_first_elements((1,1,1,1,1,1,1,1,1,1)) == 0, \"Should be 0\"\nassert count_first_elements((2,2,4,2,4,2,1,3,2,3,2,1)) == 3, \"Should be 3\"\nassert count_first_elements((2,2,2,2,2,2,2,2,2,2,2,2,2)) == 4, \"Should be 4\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 3, 2, 1)) == 1, 'Should be 1'\nassert     count_first_elements((1, 2, 3, 3, 2, 1)) == 0, 'Should be 0'\n\ndef count_first_elements_no_duplicates(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    The input tuple can have duplicate elements\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_first_elements([1, 3, 4, 5, 5]) == 1\nassert count_first_elements([1, 2, 4, 4, 5]) == 2\nassert count_first_elements([1, 1, 4, 4, 5]) == 3\nassert count_first_elements([1, 3, 3, 4, 5]) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements((1, 2, 3, 3, 4, 5)) == 3, 'Wrong answer'\nassert     count_first_elements((3, 3, 3, 3, 3)) == 3, 'Wrong answer'\nassert     count_first_elements((1, 2, 3, 3, 4, 5, 6)) == 4, 'Wrong answer'\nassert     count_first_elements((1, 2, 3, 4, 5, 6)) == 3, 'Wrong answer'\nassert     count_first_elements((3, 3, 3, 3, 3, 3, 3)) == 6, 'Wrong answer'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements((1,2,3)) == 0\nassert     count_first_elements((1,2,1)) == 1\nassert     count_first_elements((1,2,2)) == 1\nassert     count_first_elements((3,2,1)) == 1\nassert     count_first_elements((3,2,2)) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not count_first_elements((1, 3, 5, 6))\nassert \nassert count_first_elements((1, 3, 5, 6)) == 2\nassert \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements(('c','a','b','b','c','a')) == 3\nassert     count_first_elements(('c','a','a','b','b','c')) == 1\nassert     count_first_elements(('c','a','a','a','a','a','a','c','c','b')) == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_digit_decagonal(n):\n    '''\n    Write a function to find the nth digit decagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_num_decagonal(1) == 1\n    is_num_decagonal(2) == 3\n    is_num_decagonal(3) == 5\n    is_num_decagonal(4) == 7\n    is_num_decagonal(5) == 11\n    is_num_decagonal(6) == 13\n    is_num_decagonal(7) == 15\n    is_num_decagonal(8) == 21\n    is_num_decagonal(9) == 25\n    is_num_decagonal(10) == 27\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 4\nassert     is_num_decagonal(4) == 5\nassert     is_num_decagonal(5) == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_num_decagonal(0) == 1\nassert is_num_decagonal(1) == 10\nassert is_num_decagonal(2) == 121\nassert is_num_decagonal(3) == 123\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_num_catalan(n): \n    '''\n    Write a function to find the nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 2) == (True, 1)\nassert     sequential_search([5,5,5,5,5], 2) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequential_search([1,2,3,4,5], 2) == (True, 1)\nassert     sequential_search([1,2,3,4,5], -1) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 1) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 1.2) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 5.2) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequential_search([1, 2, 3], 3) == (True, 0)\nassert     sequential_search([1, 2, 3], 4) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sequential_search([], -10) == (-1, -1)\n    sequential_search([], 2) == (-1, -1)\n    sequential_search([], 8) == (-1, -1)\n    sequential_search([1,2,3,4,5], 1) == (-1,-1)\n    sequential_search([1,2,3,4,5], 7) == (-1,-1)\n    sequential_search([1,2,3,4,5], 2) == (0,-1)\n    sequential_search([1,2,3,4,5], -10) == (-1, 4)\n    sequential_search([1,2,3,4,5], 5) == (3, 4)\n    sequential_search([1,2,3,4,5], 10) == (-1, -1)\n    sequential_search([1,2,3,4,5], 6) == (-1, -1)\n    sequential_search([1,2,3,4,5], 9) == (-1, -1)\n    sequential_search([1,2,3,4,5], -1) == (-1, -1)\n    sequential_search([1,2,3,4,5], 0) == (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    The array should be ordered in such a way that the first occurrence of an element should be at index 0, the second one at index 1 and so on.\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('--------------------------------------------------')\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert sequential_search([1, 3, 4, 4, 4, 4], 4) == (True, 5)\nassert sequential_search([1, 3, 4, 4, 4, 4], 2) == (False, 1)\nassert sequential_search([1, 3, 4, 4, 4, 4], 6) == (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique([1,2,3,4,5,6]) == False, \"All unique should return False.\"\nassert     all_unique([1,2,2,4,5,6]) == True, \"All unique should return True.\"\nassert     all_unique(['a','b','c','d','a','c','b']) == False, \"All unique should return False.\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique(['a', 'b', 'c', 'd', 'e', 'f']) == True, 'one of the elements in the list is already present in the list'\nassert all_unique(['a', 'a', 'a', 'a', 'a', 'a']) == False, 'one of the elements in the list is already present in the list'\nassert all_unique([]) == True, 'the empty list is unique'\nassert all_unique([1]) == True,'single element is unique'\nassert all_unique([-5, -2, -1]) == True, 'all negative numbers are unique'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([1,2,3,4,5,6,7,8,9]) == True, 'Error'\nassert     all_unique([2,3,4,5,6,7,8,9]) == False, 'Error'\nassert     all_unique([2,2,3,3,4,4,5,5,6,6,7,7]) == True, 'Error'\nassert     all_unique([1,1,2,2,3,3,4,4,5,5,6,6]) == True, 'Error'\nprint(\"done\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([1,2,3,2]) == True, \"Wrong output\"\nassert     all_unique([1,2,2,3,1]) == False, \"Wrong output\"\n\nprint('All test cases passed')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique(['a','a','b','a','b','c','a','b','a','d']) == True, \"Not all elements are unique!\"\nassert     all_unique(['a','a','b','a','b','c','a','b','a','d']) == False, \"Not all elements are unique!\"\nassert     all_unique(['a','a','b','a','b','c','a','b','a','d','a','a','b','a','b','c','a','b','a','d']) == False, \"Not all elements are unique!\"\nassert     all_unique(['a','a','b','a','b','c','a','b','a','d','a','a','b','a','b','c','a','b','a','d','a','a','b','a','b','c','a','b','a','d']) == True, \"Not all elements are unique!\""
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([2,3,4,5,5,6,7,7,8,9]) == True\nassert     all_unique([2,3,4,5,6,7,8,9,9,10,11]) == False\nassert     all_unique([2,3,4,5,6,7,7,8,9,10,11,11]) == True\nassert     all_unique([2,3,4,5,5,6,7,7,8,9,10,11,12]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([1,2,3,4,5,2]) == True, 'all_unique should return True if list contain unique elements'\nassert     all_unique([1,2,3,4,5,2,1]) == False, 'all_unique should return True if list contain duplicate elements'\nassert     all_unique([2,4,6,8,10]) == True, 'all_unique should return True if list contain unique elements'\nassert     all_unique([-2,4,-6,-8,-10]) == True, 'all_unique should return True if list contain unique elements'\nassert     all_unique([]) == True, 'all_unique should return True if list contain unique elements'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,2,3,4,5,6]) == False, 'Wrong return value'\nassert     all_unique([1,2,2,4,4,5,6]) == True, 'Wrong return value'\nassert     all_unique([1,1,2,2,3,3,4,4,5,6]) == True, 'Wrong return value'\nassert     all_unique([1,2,3,4,5,6,3,4,5]) == False, 'Wrong return value'\n\ndef unique_even_odd(test_list):\n    '''\n    Write a python function to check if all the numbers in the list are unique and\n    even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique([1, 2, 3]) == False, \"failed case 1\"\nassert     all_unique([1, 1, 1]) == True, \"failed case 2\"\nassert     all_unique([\"a\",\"b\",\"c\"]) == False, \"failed case 3\"\nassert     all_unique([]) == True, \"failed case 4\"\n\nprint(\"passed all_unique test case1\")\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sub_list([1,2,3,4], [5,6,7,8]) == [4,3,2,1], \"should be [4,3,2,1]\"\nassert     sub_list([1,2,3], [4,5,6,7]) == [-1,-2,-3,4], \"should be [-1,-2,-3,4]\""
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sub_list([],[] ) == []\nassert     sub_list([1,2,3], [4,5,6]) == [-3,-2,-1]\nassert     sub_list([-1,-2,-3], [-4,-5,-6]) == [-3,-2,-1]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nYou are given two arrays (without duplicates) nums1 and nums2 where nums1\u2019s elements are subset of nums2.\nFind all the next greater numbers for nums1's elements in the corresponding places of nums2.\nThe Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. \nIf it does not exist, output -1 for this number.\n'''\n\ndef next_greater_numbers(nums1, nums2):\n    '''\n    Write a function that takes in a list of integers and a list of integers. \n    The function should return a list of integers that represent the next greater numbers for each element in nums1 in the list nums2.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sub_list([1, 2, 3], [4, 5, 6]) == [1, 0, 0]\nassert     sub_list([3, 4, 6], [3, 4, 5]) == [0, 0, 1]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_the_duplicate(nums):\n    '''\n    Write a function which finds and returns the duplicate number in a list which has unique elements.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sub_list([1,2,3,4],[1,2,3,4]) == [1,2,3,4]\nassert     sub_list([0,2,5,7],[2,4,6,8]) == [0,2,2,4]\nassert     sub_list([-1,-2,0,-4],[-2,-4,0,2]) == [-3,-3,-1,-3]\n\ndef list_sum(a,b):\n    '''\n    Write a function to get the sum of the two lists\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sub_list([1,2,3], [-1,0,1]) == [2,2,3],'sub_list'\nassert     sub_list([1,2], [-1,0,1]) == [1,-1,2],'sub_list'\nassert     sub_list([1,2], [1]) == [0,1],'sub_list'\nassert     sub_list([1,2], []) == [0,0],'sub_list'\nassert     sub_list([], [1,2]) == [],'sub_list'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     validate(12345) == True, \"12345 is valid.\"\nassert     validate(1234) == False, \"1234 is not valid.\"\nassert     validate(1235) == True, \"1235 is valid.\"\nassert     validate(1234) == False, \"1234 is not valid.\"\nassert     validate(12345678901234567890) == False, \"12345678901234567890 is valid.\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert validate(28), \"Should be true\"\nassert not validate(78), \"Should be false\"\nassert not validate(9), \"Should be true\"\nassert validate(41), \"Should be false\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     validate(10) == True, \"Should be True\"\nassert     validate(21) == True, \"Should be True\"\nassert     validate(5) == False, \"Should be False\"\n\ndef function(n):\n    '''\n    Write a python function takes in an integer and return whether the integer is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('The result of validate(99) is:', validate(99))\n\nassert \nprint('The result of validate(23) is:', validate(23))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     validate(5) == True, 'validate should return True if 5 is an integer with digits less than or equal to 5'\nassert     validate(111) == True, 'validate should return True if 111 is an integer with digits less than or equal to 11'\nassert     validate(1234567890) == False, 'validate should return False if 1234567890 is an integer with digits less than or equal to 12'\nassert     validate(5) == False, 'validate should return False if 5 is an integer with digits less than or equal to 5'\nassert     validate(-55) == False, 'validate should return False if -55 is an integer with digits less than or equal to 5'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     validate(1) == False\nassert     validate(10) == True\nassert     validate(1001) == True\nassert     validate(1111) == False\nassert     validate(113) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     validate(123) == True, \"123 should be True\"\nassert     validate(456789) == False, \"456789 should be False\"\nassert     validate(65432) == False, \"65432 should be False\"\nassert     validate(890123) == False, \"890123 should be False\"\nassert     validate(8901234) == False, \"8901234 should be False\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nn = 123\nif validate(n) == True:\n    print(\"True\")\nelse:\n    print(\"False\")\n\n'''\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is greater than or equal to the digit itself.\n'''\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert validate(5) == False, \"5 is an integer.\"\nassert validate(11) == True, \"11 is an integer.\"\nassert validate(123) == False, \"123 is an integer.\"\nassert validate(1000) == True, \"1000 is an integer.\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     validate(12) == True, \"Incorrect\"\nassert     validate(123) == False, \"Incorrect\"\nassert     validate(20) == False, \"Incorrect\"\nassert     validate(0) == False, \"Incorrect\"\nassert     validate(-1) == False, \"Incorrect\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_element([1, 2, 3], 3) == True, 'Should return true if the elements are the same'\nassert     check_element([1, 2, 3], 1) == False, 'Should return false if the elements are not equal'\nassert     check_element([1, 2, 3], 5) == False, 'Should return false if the element is not in the list"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_element([1,1,1,1,1,1,1,1,1,1,1,1],1) == True\nassert check_element([1,1,1,1,1,1,1,1,1,1,1,1],2) == False\nassert check_element([1,1,1,1,1,1,1,1,1,1,1,1],3) == True\nassert check_element([1,1,1,1,1,1,1,1,1,1,1,1],4) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_element([1,2,3],1) == True, \"wrong element\"\nassert     check_element([1,2,3],3) == False, \"wrong element\"\nassert     check_element([\"1\",\"2\",\"3\"],3) == True, \"wrong element\"\nassert     check_element([1,2,3],2) == False, \"wrong element\"\nassert     check_element([1,2,3],4) == False, \"wrong element\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_element([1,2,3,4,5],2) == True\nassert     check_element([1,2,3,4,5],6) == False\nassert     check_element([1,2,3,4,5],0) == False"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_element([1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3],2)\nassert not    check_element([1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3],1)\nassert not    check_element([1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3],5)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_element([1,2,3,4,5], 5) == True\nassert     check_element([1,2,3,4,5], 8) == False\nassert     check_element([1,2,3,4,5], 5) == True\nassert     check_element([], 10) == False\nassert     check_element([], 10) == Fals"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_element([1,2,3], 3) == True, 'Should be True'\nassert     check_element([1,2,3], 4) == False, 'Should be False'\nassert     check_element([], 3) == False, 'Should be False'\nassert     check_element([1,2,3], 3) == True, 'Should be True'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('abacbab') == True\nassert     text_match_two_three('abacba') == True\nassert     text_match_two_three('abacbaa') == False\nassert     text_match_two_three('abcba') == False\nassert     text_match_two_three('ab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('') == False\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('aab') == True\nassert     text_match_two_three('aab') == True\nassert     text_match_two_three('abcb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three('abbbbbaa') == True\nassert     text_match_two_three('bbaaba') == False\nassert     text_match_two_three('abbbbabbba') == True\nassert     text_match_two_three('aabab') == False\nassert     text_match_two_three('aa') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('abc') == True\nassert     text_match_two_three('abcd') == False\nassert     text_match_two_three('abcb') == True\nassert     text_match_two_three('bbb') == False\nassert     text_match_two_three('bcb') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('bbbbbbb') == True\nassert     text_match_two_three('bbbbbbbb') == False\nassert     text_match_two_three('a') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three('abab') == True, 'First case'\nassert     text_match_two_three('aaaa') == True, 'Second case'\nassert     text_match_two_three('abaab') == True, 'Third case'\nassert     text_match_two_three('aaaab') == False, 'Fourth case'\nassert     text_match_two_three('ababa') == False, 'Fifth case'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('aba') == True\nassert     text_match_two_three('aa') == False\nassert     text_match_two_three('bb') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three('bbbba')    == True\nassert     text_match_two_three('bbbbb')    == True\nassert     text_match_two_three('aaa')    == False\nassert     text_match_two_three('aaaaa')    == False\nassert     text_match_two_three('bbbbbba')    == True\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 5, 2))"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum_repeated([0, 1, 0, 5, 0, 3, 5], 5, 2) == 9, \"Should be 9\"\nassert     max_sub_array_sum_repeated([0, 1, 0, 5, 0, 3, 5], 5, 3) == 18, \"Should be 18\"\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2) == 45, \"Should be 45\"\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 3) == 60, \"Should be 60\"\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 4) == 60, \"Should be 60\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum_repeated([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 10, 2) == 0\nassert     max_sub_array_sum_repeated([10, 5, 1, 20, 5, 6, 20, 10], 4, 2) == 30\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n\nQuestion 2\nWrite a function to return the index of first appearance of the maximum element in the array\n\nSample Input    Expected Output\n[1,2,3,4,5,5,5]    4    \n\n'''"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([2,3,1,2,4,3], 5, 2) == 9, \"Should be 9\"\nassert     max_sub_array_sum_repeated([-1,1,1,0,1], 1, 3) == 2, \"Should be 2\"\nassert     max_sub_array_sum_repeated([-3,-2,-1], 2, 2) == -1, \"Should be -1\"\nassert     max_sub_array_sum_repeated([0,3,2], 2, 2) == 6, \"Should be 6\"\nassert     max_sub_array_sum_repeated([3,3,3,2,1], 3, 2) == 12, \"Should be 12\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsquare_Sum(3) == 5, f\"{square_Sum(3)}\"\nassert \nsquare_Sum(4) == 16, f\"{square_Sum(4)}\"\nassert \nsquare_Sum(5) == 41, f\"{square_Sum(5)}\"\nassert \nsquare_Sum(6) == 58, f\"{square_Sum(6)}\"\nassert \nsquare_Sum(7) == 70, f\"{square_Sum(7)}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_Sum(0) == 0, \"should be 0\"\nassert     square_Sum(1) == 1, \"should be 1\"\nassert     square_Sum(2) == 4, \"should be 4\"\nassert     square_Sum(3) == 4, \"should be 4\"\nassert     square_Sum(4) == 16, \"should be 16\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_Sum(2) == 4, \"square_Sum is not working\"\nassert     square_Sum(4) == 14, \"square_Sum is not working\"\nassert     square_Sum(1) == 1, \"square_Sum is not working\"\nassert     square_Sum(0) == 0, \"square_Sum is not working\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nn = 2\nassert square_Sum(n) == 16\n\nprint(\"All tests passed\""
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_Sum(10) == 225\nprint(\"Correct\")\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(5) == sum([x**2 for x in range(1,6)])\nassert     square_Sum(0) == 0"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(7) == 0, 'n must be a positive integer.'\nassert     square_Sum(6) == 32, 'n must be a positive integer.'\nassert     square_Sum(5) == 25, 'n must be a positive integer.'\nassert     square_Sum(4) == 16, 'n must be a positive integer.'\nassert     square_Sum(3) == 9, 'n must be a positive integer.'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_Sum(5) == 30\nassert square_Sum(5) == 144\nassert square_Sum(5) == 216\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_Sum(3) == 5, 'incorrect'\nassert square_Sum(4) == 9, 'incorrect'\nassert square_Sum(5) == 28, 'incorrect'\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]) == 16\nassert max_length([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('Checking your code. The result should be the following:')\nprint('Checking your code. The result should be the following:')\nprint(max_length([[1, 2], [3], [4, 5]]))\nprint(max_length([[1, 2, 3], [5, 6, 7], [9]]))\nprint(max_length([[1, 2], [3], [4, 5, 6]]))\nprint(max_length([[1, 2, 3], [5, 6, 7], [9, 8]]))\nprint(max_length([[1, 2, 3], [5, 6, 7], [9, 8, 1]]))\nprint(max_length([[1, 2, 3], [5, 6, 7], [9, 8, 1, 2]]))\nprint(max_length([[1, 2], [3], [4, 5, 6]]))\nprint(max_length([[1, 2], [3], [4, 5, 6, 7]]))\nprint(max_length([[1, 2], [3], [4, 5, 6, 7, 8]]))\nprint(max_length([[1, 2], [3, 4], [5, 6, 7]]))\nprint(max_length([[1, 2], [3, 4], [5, 6, 7, 8]]))\nprint(max_length([[1, 2], [3, 4], [5, 6, 7, 8, 9]]))\nprint(max_length([[1, 2], [3, 4], [5, 6, 7, 8, 9, 10]]))\nprint(max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\nprint(max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]))\nprint(max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]]))\nprint(max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12]]))\nprint(max_length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))\nprint(max_length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13]]))\nprint(max_length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13, 14]]))\nprint(max_length([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]))\nprint(max_length([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16]]))\nprint(max_length([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17]]))\nprint(max_length([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]]))\nprint(max_length([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]))\nprint(max_length([[1, 2, 3, 4, 5, "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert max_length([[1,2,3],[4,5,6],[7,8,9]]) == 3\nassert max_length([]) == 0\nassert max_length([[]]) == 0\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length([]) == 0, \"Empty list\"\nassert     max_length([[]]) == 0, \"Empty list\"\nassert     max_length([[1],[2,1],[3,4,1],[5],[6,7,8]]) == 8, \"List of lists\"\nassert     max_length([[1],[2,1],[3,4,1],[5],[6,7,8]]) == 8, \"List of lists\"\nassert     max_length([[1],[2,1],[3,4,1],[5],[6,7,8,4],[3,4,1,2,1]]) == 8, \"List of lists\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length([[1,2,3],2,[2,3],2,2,2,1]) == 4\nassert     max_length([[1,2,3],2,[2,3],2,2,2,1,1]) == 4\nassert     max_length([[1,2,3,4],2,[2,3,4],2,2,2,2,1]) == 4\nassert     max_length([[1,2,3,4],2,[2,3,4],2,2,2,2,1]) == 4\nassert     max_length([[1,2,3,4],2,[2,3,4],2,2,2,2,1,1]) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length([[1,2,3],[4,5,6],[1,2,3]])==[[1,2,3],[4,5,6]]\nassert max_length([[1,2,3,4,5,6],[1,2,3],[1,2,3]])==[[1,2,3],[1,2,3]]\nassert max_length([[1,2,3],[4,5,6]])==[[1,2,3],[4,5,6]]\n\n\ndef max_length_sum(list1):\n    '''\n    Write a function to find the maximum sum of a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_length_array(arr):\n    '''\n    Given an array of integers, return the maximum length of a contiguous subarray.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [4, 6]\nassert     max_length([[1, 2], [3, 4], [5, 6], [7], [8, 9, 10]]) == [3, 4]\nassert     max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 4]\nassert     max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [4]\nassert     max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11]]) == [4, 1]\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_no_of_ways(4, 2) == 6\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(3, 4) == 2, 'Wrong output'\nassert     count_no_of_ways(4, 4) == 1, 'Wrong output'\nassert     count_no_of_ways(7, 4) == 6, 'Wrong output'\nassert     count_no_of_ways(4, 2) == 1, 'Wrong output'\n\n'''\nCount the number of ways to paint the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(4, 2) == 2, \"Case 1\"\nassert     count_no_of_ways(4, 3) == 4, \"Case 2\"\nassert     count_no_of_ways(5, 2) == 2, \"Case 3\"\nassert     count_no_of_ways(5, 3) == 4, \"Case 4\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nIf we want to paint the fence in an alternating color pattern, we can paint the posts in the following order : \n1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, \n\nInput: \nn = 4\nk = 2\n\nOutput: \n5\n\nInput: \nn = 6\nk = 3\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # n = 5\n    # k = 2\n    # print(count_no_of_ways(n, k))\n    # print(count_no_of_ways_v2(n, k))\n\n    # n = 4\n    # k = 2\n    # print(count_no_of_ways(n, k))\n    # print(count_no_of_ways_v2(n, k))\n\n    n = 10\n    k = 2\n    print(count_no_of_ways(n, k))\n    print(count_no_of_ways_v2(n, k))\n\n    n = 10\n    k = 4\n    print(count_no_of_ways(n, k))\n    print(count_no_of_ways_v2(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n--- Day 9: Sensor Boost ---\n\nAs you're about to give the final check, you realize that you probably forgot a keypad lock. The Elves quickly draw you a map of the current scene, but something's wrong and it looks like you have some sensor readings.\n\nThe Elves would like you to find out if the readings detected any suspicious activity. To make sure you're not overlooking anything, you need to know the exact number of times each of 1-3 buttons must have been pressed for a reading to be valid. (Every button has a corresponding number of times it has been pressed.)\n\nFor example, suppose you gave the following readings:\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_no_of_ways(4, 3) == 5\n    count_no_of_ways(5, 4) == 4\n    count_no_of_ways(5, 5) == 4\n    count_no_of_ways(5, 6) == 7\n    count_no_of_ways(5, 7) == 7\n    count_no_of_ways(5, 8) == 8\n    count_no_of_ways(6, 4) == 4\n    count_no_of_ways(6, 5) == 2\n    count_no_of_ways(6, 6) == 1\n    count_no_of_ways(6, 7) == 2\n    count_no_of_ways(6, 8) == 2\n    count_no_of_ways(7, 4) == 4\n    count_no_of_ways(7, 5) == 2\n    count_no_of_ways(7, 6) == 2\n    count_no_of_ways(7, 7) == 2\n    count_no_of_ways(7, 8) == 2\n    count_no_of_ways(8, 4) == 2\n    count_no_of_ways(8, 5) == 2\n    count_no_of_ways(8, 6) == 2\n    count_no_of_ways(8, 7) == 2\n    count_no_of_ways(8, 8) == 2\n    count_no_of_ways(9, 4) == 3\n    count_no_of_ways(9, 5) == 1\n    count_no_of_ways(9, 6) == 1\n    count_no_of_ways(9, 7) == 2\n    count_no_of_ways(9, 8) == 2\n    count_no_of_ways(9, 9) == 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_no_of_ways(5, 3) == 5\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(4, 2) == 8, \"Case 1 failed\"\nassert     count_no_of_ways(5, 3) == 24, \"Case 2 failed\"\nassert     count_no_of_ways(20, 10) == 77380, \"Case 3 failed\"\nassert     count_no_of_ways(18, 8) == 4238, \"Case 4 failed\"\nassert     count_no_of_ways(5, 2) == 2, \"Case 5 failed\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(1,1) == 1\nassert     count_no_of_ways(2,1) == 1\nassert     count_no_of_ways(4,3) == 3\nassert     count_no_of_ways(3,3) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind(2,4)==2\nfind(4,2)==2\nfind(2,3)==1\n\n'''\nWrite a python function that takes in an array of integers as argument and returns a sorted array of integers after performing a double sort on the input array.\n'''\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find(3,5) == 0, \"Test Case Failed\"\nassert     find(3,7) == 1, \"Test Case Failed\"\nassert     find(3,11) == 0, \"Test Case Failed\"\nassert     find(4,5) == 0, \"Test Case Failed\"\nassert     find(4,7) == 1, \"Test Case Failed\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find(3,4) == 0, \"Test failed\"\nassert     find(3,4) == 1, \"Test failed\"\nassert     find(1,4) == 0, \"Test failed\"\nassert     find(1,4) == 0, \"Test failed\"\n\nprint (\"All the tests passed\")\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(10,5) == 5, \"Test Failed\"\nassert     find(10,10) == 10, \"Test Failed\"\nassert     find(10,3) == 3, \"Test Failed\"\nassert     find(10,4) == 4, \"Test Failed\"\nassert     find(10,5) == 5, \"Test Failed\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find(5,4)==1, 'quotient not found'\nassert     find(0,0)==0, 'quotient not found'\nassert     find(-5,-4)==-2, 'quotient not found'\nassert     find(10,10)==1, 'quotient not found'\nprint('Passed all tests')\n\n'''\n1) Find the quotient of two numbers.\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find(8,5) == 2\n    \n    print(\"YOUR CODE IS CORRECT!\")\n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find(2,3) == 1, \"f() should return 1\"\nassert     find(3,3) == 1, \"f() should return 1\"\nassert     find(10,10) == 1, \"f() should return 1\"\nassert     find(10,11) == 2, \"f() should return 2\"\nassert     find(-10,-10) == -10, \"f() should return -10\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(3,4) == 0, \"Incorrect answer\"\nassert     find(4,4) == 0, \"Incorrect answer\"\nassert     find(10,4) == 2, \"Incorrect answer\"\nassert     find(10,5) == 2, \"Incorrect answer\"\nassert     find(10,6) == 3, \"Incorrect answer\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find(2,3) == 1\nassert     find(6,4) == 2\nassert     find(1,3) == 0\nassert     find(5,5) == 1\nassert     find(10,2) == 5\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find(4,2) == 2, \"Test Failed: find(4,2)\"\nassert find(10,2) == 5, \"Test Failed: find(10,2)\"\nassert find(20,2) == 10, \"Test Failed: find(20,2)\"\nassert find(21,2) == 10, \"Test Failed: find(21,2)\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(3,5) == 4.5\nassert     otherside_rightangle(3,3) == 3\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(6,7) == 0.5555555555555555\nassert     otherside_rightangle(3,3) == 0.0\nassert     otherside_rightangle(6,4) == 0.2777777777777777\nassert     otherside_rightangle(6,4.1) == 0.5740740740740741\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(3,4) == 1.5\nassert     otherside_rightangle(4,3) == 2\nassert     otherside_rightangle(2,2) == math.sqrt(2)\nassert     otherside_rightangle(1,3) == 2\nassert     otherside_rightangle(2,2.2) == math.sqrt(2.2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(2,3) == 1.7320508075688772\nassert     otherside_rightangle(3,4) == 2.1739130434782608\nassert     otherside_rightangle(4,5) == 2.92849030331125\nassert     otherside_rightangle(5,6) == 3.6045029292139898\nassert     otherside_rightangle(6,7) == 3.906179775280892\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(10,12) == 14\nassert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(10,12) == 14\nassert     otherside_rightangle(3,4) == 5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nYou will be given a function called otherside_rightangle. The function should take three arguments:\nw, the length of the right side,\nh, the length of the hypotenuse, and\nthe width, the length of the other side. It should return the third side of the triangle as a float.\n\nYou can test your function by printing out otherside_rightangle(5,4,3)\n'''\n\ndef rightangle_triangle_area(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(5,4) == 3.0\nassert     otherside_rightangle(1,5) == 2.0\nassert     otherside_rightangle(3,2) == 1.0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     otherside_rightangle(6,4) == 10\nassert     otherside_rightangle(6,5) == 11\nassert     otherside_rightangle(5,4) == 10\nassert     otherside_rightangle(5,5) == 11\nassert     otherside_rightangle(4,4) == 10\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     otherside_rightangle(2,3) == 2, \"Wrong result\"\nassert     otherside_rightangle(3,2) == 2, \"Wrong result\"\nassert     otherside_rightangle(2,2) == 3, \"Wrong result\"\n\ndef triangle_area(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle with base a, height b and hypotenuse c.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_val([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     max_val([True, False, True, False, False, True]) == True\nassert     max_val([True, False, True]) == True\nassert     max_val([]) == None\nassert     max_val([1]) == 1\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = ['a', 1, 2, 'c', 'd', 'e', 'f']\n    assert max_val(lst) == 'e'"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_val([1,2,3,4]) == 4\n\nassert max_val([1,2,1,1]) == 2\nassert max_val([1,2,1,1,3]) == 3\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_val([1, 2, 3]) == 3\nassert     max_val([1.1, 2.2, 3.3, 4.4]) == 4.4\nassert     max_val([True, False,'s', 'test', {'test': 5}]) == {'test': 5}\nassert     max_val([False, True, None, 'test', {'test': 5}, [1, 2, 3]]) == {'test': 5}\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_val([1,2,3,4,5,6]) == 6, '1'\nassert     max_val([1.5,2,3,4,5,6]) == 6, '2.5'\nassert     max_val([1,2.3,3,4,5,6]) == 6, '3'\nassert     max_val([1,2,3,4,5]) == 5, '5'\nassert     max_val([1,2,3,4]) == 4, '4'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_val([1, 2, 3]) == 3\nassert     max_val([-2, 2, 1]) == 3\nassert     max_val([1, -2, 3]) == 3\nassert     max_val([1, -2, -3]) == 3\nassert     max_val([-1, -2, -3]) == -1\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"Tests: \", end = \"\")\nassert max_val([10,20,30]) == 30\nassert max_val([10,None,30]) == 30\nassert max_val([None,10,30]) == 30\nassert max_val([10,None,None,20]) == None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([1,2,4,6,8,9]) == 9\nassert     max_val([5,7,3,7,4,2]) == 7\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_div(7) == 15, \"incorrect result\"\nassert     sum_div(9) == 14, \"incorrect result\"\nassert     sum_div(5) == 11, \"incorrect result\"\nassert     sum_div(4) == 3, \"incorrect result\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_div(15) == 7\nassert     sum_div(72) == 23\nassert     sum_div(5) == 6\n\ndef is_prime(n):\n    '''\n    Write a function to determine whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_div(100) == 50\nassert sum_div(3) == 3 + 2 + 1\nassert sum_div(9) == 3 + 3 + 3\nassert sum_div(0) == 0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_div(12) == 8, \"The result should be 4 (1 + 2 + 3 + 4)\"\nassert     sum_div(20) == 9, \"The result should be 6 (1 + 2 + 3 + 4 + 5 + 6)\"\nassert     sum_div(24) == 18, \"The result should be 8 (1 + 2 + 3 + 4 + 6 + 8)\"\nassert     sum_div(36) == 27, \"The result should be 12 (1 + 2 + 3 + 4 + 6 + 9 + 12)\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_div(1) == 0, \"Fail\"\nassert     sum_div(2) == 1, \"Fail\"\nassert     sum_div(4) == 1, \"Fail\"\nassert     sum_div(7) == 4, \"Fail\"\nassert     sum_div(10) == 5, \"Fail\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(1) == 1\nassert     sum_div(2) == 2\nassert     sum_div(6) == 3\nassert     sum_div(12) == 6\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_div(0) == 0, 'incorrect output'\nassert     sum_div(1) == 1, 'incorrect output'\nassert     sum_div(2) == 2, 'incorrect output'\nassert     sum_div(3) == 6, 'incorrect output'\nassert     sum_div(4) == 3, 'incorrect output'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(1) == 1\nassert     sum_div(2) == 1\nassert     sum_div(10) == 1\nassert     sum_div(25) == 1\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_div(1) == 1\nassert     sum_div(2) == 1+2\nassert     sum_div(4) == 1+2+4\nassert     sum_div(6) == 1+2+3+4+6\nassert     sum_div(8) == 1+2+3+4+5+6+8\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    get_Inv_Count([2, 4, 1, 3]) == 5, \"Should return 5\"\n    get_Inv_Count([2, 4, 1, 5, 3]) == 8, \"Should return 8\"\n    get_Inv_Count([2, 4, 1, 5, 3, 6]) == 10, \"Should return 10\"\n    get_Inv_Count([2, 4, 1, 5, 3, 6, 7]) == 17, \"Should return 17\"\n    get_Inv_Count([]) == 0, \"Should return 0\"\n    get_Inv_Count([1]) == 1, \"Should return 1\"\n    get_Inv_Count([2, 2, 2, 2, 2, 2]) == 0, \"Should return 0\"\n    get_Inv_Count([2, 2, 3, 4, 5, 6]) == 0, \"Should return 0\"\n    get_Inv_Count([1, 2, 3, 4, 5, 6]) == 6, \"Should return 6\"\n    get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0, \"Should return 0\"\n    get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 0, \"Should return 0\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([3, 2, 1]) == 1\nassert     get_Inv_Count([10, 5, 8, 4, 2, 9, 7, 6, 1]) == 6\nassert     get_Inv_Count([1, 1, 1, 1, 1, 1]) == 1\n\n'''\nExercise 6\n'''\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([3, 2, 1, 4]) == 1\nassert     get_Inv_Count([1, 2, 3, 4, 5]) == 0\nassert     get_Inv_Count([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 2\nassert     get_Inv_Count([1, 1, 1]) == 0\nassert     get_Inv_Count([2, 1, 1]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([1,2,4,3,2,5]) == 4\nassert     get_Inv_Count([1,2,3,4,5,6]) == 2\nassert     get_Inv_Count([1,2,3,4,5,5]) == 0\n\n'''\n    Task 11 - Count Unique Characters\n'''\n\ndef count_Unique_Characters(arr):\n    '''\n    Write a python function to count the number of unique characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Inv_Count([]) == 0, 'Test Case 1 - Empty Array'\nassert     get_Inv_Count([1,2,3]) == 0, 'Test Case 2 - No Inversions'\nassert     get_Inv_Count([3,1,5,2]) == 1, 'Test Case 3 - One Inversion'\nassert     get_Inv_Count([2,1,5,3]) == 2, 'Test Case 4 - Two Inversions'\nassert     get_Inv_Count([2,5,1,3]) == 3, 'Test Case 5 - Three Inversions'\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([1,2]) == 1\nassert     get_Inv_Count([1,2,3]) == 0\nassert     get_Inv_Count([3,2,1]) == 1\nassert     get_Inv_Count([1,2,3,4]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Inv_Count([1, 3, 1, 2, 3]) == 2\nassert     get_Inv_Count([3, 2, 1]) == 0\nassert     get_Inv_Count([2, 3, 1, 2, 3]) == 1"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([1, 1]) == 0\nassert     get_Inv_Count([1, 2]) == 1\nassert     get_Inv_Count([2, 1]) == 1\nassert     get_Inv_Count([2, 2]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([1,3,5,7,2,4,6,0,8]) == 5\nassert get_Inv_Count([1,3,5,7,2,4,6,0,8,9]) == 6\nassert get_Inv_Count([0,1,2,3,4,5,6,7,8,9]) == 0\nassert get_Inv_Count([10,9,8,7,6,5,4,3,2,1]) == 6\nassert get_Inv_Count([9,8,7,6,5,4,3,2,1,10]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nget_Inv_Count([1,2,3,4]) == 0\nget_Inv_Count([1,2,3,4,5]) == 1\nget_Inv_Count([]) == 0\nget_Inv_Count([1,2,3,4,3,2,1]) == 1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_list_from_index(list_of_numbers, index):\n    '''\n    Write a function to get the value of the element at a given index.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flatten_list([[1, 2], 3]) == 1, 'flatten_list([]): wrong result'\nassert     flatten_list([1, 2]) == 1, 'flatten_list([1, 2]): wrong result'\nassert     flatten_list([1, 2, 3]) == 1, 'flatten_list([1, 2, 3]): wrong result'\nassert     flatten_list([1, 2, [3, 4], 5]) == 1, 'flatten_list([1, 2, [3, 4], 5]): wrong result'\nassert     flatten_list([[1, 2], 3, [[[[[[1]]]]]]]) == 1, 'flatten_list([[1, 2], 3, [[[[[[1]]]]]]]): wrong result'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nflatten_list([1, 2, 3]) # [1, 2, 3]\nflatten_list([1,2,3]) # [1, 2, 3]\nflatten_list([]) # []\nflatten_list([[[]]]) # [[]]\nflatten_list([[[[]]]]) # [[[]]]\n\n'''\n----------------------------------------------------------------------\nWrite a function that takes in a list of integers and returns the \nlargest integer in that list. If the list is empty, the function \nshould return None.\n\nFor example:\n\n    [10, 4, 5, 6, 1, 2]  -> 10\n    []                   -> None\n    [10]                 -> 10\n'''\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nimport unittest\n\nclass TestFlattenList(unittest.TestCase):\n\n    def test_case_01(self):\n        self.assertEqual(flatten_list([1, 2, 3]), [1, 2, 3])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     flatten_list([1, 2, [3,4], 5]) == [1, 2, 3, 4, 5]\nassert     flatten_list([1, 2, [[3],4], 5]) == [1, 2, 3, 4, 5]\nassert     flatten_list([[[[1]]]]) == [1]\nassert     flatten_list([]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert flatten_list([1,2,3,4]) == [1,2,3,4]\nassert flatten_list([2,4,6]) == [2,4,6]\nassert flatten_list([[3,4],[2,5,6]]) == [3,4,2,5,6]\nassert flatten_list([[],[]]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([]) == []\nassert     flatten_list([[]]) == []\nassert     flatten_list([[[]]]) == []\nassert     flatten_list([[[[]]]]) == []\nassert     flatten_list([[[[1]],[[2]]]]) == [1, 2]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate(\n        [('SalePrice', 100),\n         ('SalePrice', 80),\n         ('SalePrice', 60),\n         ('SalePrice', 40)]) == 80\n\nassert     max_aggregate(\n        [('SalePrice', 100),\n         ('SalePrice', 80),\n         ('SalePrice', 60),\n         ('SalePrice', 40),\n         ('SalePrice', 60),\n         ('SalePrice', 40),\n         ('SalePrice', 40),\n         ('SalePrice', 40)]) == 100\n\nassert     max_aggregate(\n        [('SalePrice', 100),\n         ('SalePrice', 80),\n         ('SalePrice', 60),\n         ('SalePrice', 40)]) == 100\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_valid_path(path):\n    '''\n    A path is valid if it can be travelled from the start to the end.\n    '''\n    pass\n\ndef min_dist_path(stdata, st, en):\n    '''\n    Write a function that returns the minimum distance to travel from start to end.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate(['a', 'b', 'c', 'a', 'b']) == 'a'\nassert     max_aggregate(['a', 'b', 'c', 'd', 'e']) == 'd'\nassert     max_aggregate(['a', 'b', 'c', 'd', 'e', 'f']) == 'e'\n\nprint('PASSED')\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([(1, 3), (3, 2), (3, 4), (2, 1)]) == (3, 4)\nassert     max_aggregate([(1, 5), (2, 3), (3, 2), (4, 2), (5, 5), (2, 5)]) == (5, 5)\nassert     max_aggregate([(1, 5), (2, 4), (3, 3), (4, 2), (5, 5), (2, 5)]) == (5, 5)\nassert     max_aggregate([(1, 5), (2, 4), (3, 3), (4, 2), (5, 5)]) == (5, 5)\nassert     max_aggregate([(1, 5), (2, 4), (3, 3), (4, 2), (5, 5), (2, 2)]) == (5, 5)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_aggregate(\n    [\n        (1, 4, 3),\n        (2, 4, 7),\n        (3, 5, 7),\n    ]) == 8\nassert     max_aggregate(\n    [\n        (1, 4, 3),\n        (2, 4, 7),\n        (2, 5, 7),\n    ]) == 8\nassert     max_aggregate(\n    [\n        (1, 4, 3),\n        (2, 4, 7),\n        (3, 5, 7),\n        (4, 5, 7),\n    ]) == 12\nassert     max_aggregate(\n    [\n        (1, 4, 3),\n        (2, 4, 7),\n        (3, 5, 7),\n        (4, 5, 6),\n    ]) == 12\nassert     max_aggregate(\n    [\n        (1, 4, 3),\n        (2, 4, 7),\n        (3, 5, 7),\n        (4, 5, 6),\n        (5, 5, 6),\n    ]) == 11\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([(1,2),(3,4)]) == max([1,3,4])\nassert     max_aggregate([(1,2),(2,1)]) == max([2,1,1])\nassert     max_aggregate([(1,2),(2,3)]) == max([3,1,2])\nassert     max_aggregate([(1,2),(1,2),(3,3)]) == max([3,3,1,2])\nassert     max_aggregate([(1,2),(2,3),(3,4)]) == max([3,3,4])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef common_characters(s1, s2):\n    '''\n    Write a function to count the common characters in two strings\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate(\n        [\n            (1, 1),\n            (2, 3),\n            (3, 5),\n        ]\n    ) == 6\nassert     max_aggregate(\n        [\n            (1, 1),\n            (2, 5),\n            (3, 5),\n        ]\n    ) == 7\nassert     max_aggregate(\n        [\n            (1, 1),\n            (1, 3),\n            (2, 3),\n        ]\n    ) == 3\nassert     max_aggregate(\n        [\n            (1, 1),\n            (2, 1),\n            (2, 3),\n        ]\n    ) == 4\nassert     max_aggregate(\n        [\n            (1, 1),\n            (1, 2),\n            (2, 1),\n        ]\n    ) == 3\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([(1,2),(3,4),(5,6)]) == (6,4)\nassert     max_aggregate([(5,7),(5,7),(5,7)]) == (7,7)\nassert     max_aggregate([(1,2),(3,4),(5,6)]) == (6,4)\n\ndef reduce_sum(data):\n    '''\n    Write a function to calculate the sum of a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 1\nassert     count_binary_seq(6) == 8\nassert     count_binary_seq(8) == 16\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_binary_seq(0) == 0, 'Check the correctness of count_binary_seq function'\nassert     count_binary_seq(1) == 0, 'Check the correctness of count_binary_seq function'\nassert     count_binary_seq(2) == 3, 'Check the correctness of count_binary_seq function'\nassert     count_binary_seq(3) == 11, 'Check the correctness of count_binary_seq function'\nassert     count_binary_seq(4) == 20, 'Check the correctness of count_binary_seq function'\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_binary_seq(1)    == 1\nassert     count_binary_seq(2)    == 9\nassert     count_binary_seq(3)    == 20\nassert     count_binary_seq(5)    == 84\nassert     count_binary_seq(10)    == 3668\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nn = 5\nprint(count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(3) == 7, 'Failed!'\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_binary_seq(2) == 6\ncount_binary_seq(4) == 15\ncount_binary_seq(10) == 934\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_binary_seq(2) == 5\nassert     count_binary_seq(3) == 10\nassert     count_binary_seq(5) == 45\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_depth({1:1}) == 0\nassert     dict_depth({1:1, 2:1}) == 0\nassert     dict_depth({1:1, 2:1, 3:1}) == 1\nassert     dict_depth({1:1, 2:1, 3:1, 4:1}) == 2\nassert     dict_depth({1:1, 2:1, 3:1, 4:1, 5:1}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({\"A\":{\"B\":1}}) == 1\nassert     dict_depth({\"A\":{\"B\":1}, \"C\":{\"D\":2}, \"E\":{}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_depth({}) == 0, 'Empty dictionary'\nassert     dict_depth({'a': 1}) == 1, 'Dictionary with one element'\nassert     dict_depth({'a': {'b': 2}}) == 2, 'Dictionary with deeper structure'"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth(d={1: 2})         ==     2\nassert     dict_depth(d={1: 2, 3: {4: 5}}) == 3\nassert     dict_depth(d={1: 2, 3: {4: 5, 6: 7}}) == 3\nassert     dict_depth(d={1: 2, 3: {4: 5, 6: 7, 8: 9}}) == 3\nassert     dict_depth(d={1: 2, 3: {4: 5, 6: 7, 8: {9: 10, 11: 12, 13: {14: 15, 16: {17: 18, 19: {20: 21}}}}, 21: 22}}) == 5\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth(dict(a = {1: \"a\"}, b = {2: \"b\"}, c = \"c\")) == 1\nassert     dict_depth(dict(a = \"a\", b = {1: \"b\"}, c = {2: \"c\"})) == 2\nassert     dict_depth(dict(a = {1: \"a\"}, b = \"b\", c = {2: \"c\"})) == 3\n\n\ndef dict_depth2(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({}) is 0\nassert     dict_depth({\"key1\": \"val1\"}) is 1\nassert     dict_depth({\"key1\": {}, \"key2\": {}}) is 2\nassert     dict_depth({\"key1\": {\"key3\": 3}, \"key2\": {\"key3\": 4}}) is 3"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_depth(dict()) == 0\nassert     dict_depth(dict([(1,2),(3,4)])) == 1\nassert     dict_depth(dict([(1,2),(3,4),(5,6)])) == 2\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({}) == 0, 'depth is 0'\nassert     dict_depth({\"a\":1}) == 1, 'depth is 1'\nassert     dict_depth({\"a\":{\"b\":1,\"c\":1}}) == 2, 'depth is 2'\nassert     dict_depth({\"a\":{\"b\":{\"c\":1}}}) == 3, 'depth is 3'\nassert     dict_depth({\"a\":{\"b\":{\"c\":1}, \"d\":1, \"e\":1}}) == 4, 'depth is 4'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"Output for find_Element: \")\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,3) == 4\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,4) == 7\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,5) == 5\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,6) == 2\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,7) == 1\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,8) == 8\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,9) == 9\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,10) == 10\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,11) == 11\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,12) == 12\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,13) == 13\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,14) == 14\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,15) == 15\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,16) == 16\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,17) == 17\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,18) == 18\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,19) == 19\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,20) == 20\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,21) == 21\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,22) == 22\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,23) == 23\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,24) == 24\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,25) == 25\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,26) == 26\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,27) == 27\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,28) == 28\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,29) == 29\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,30) == 30\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,31) == 31\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,32) == 32\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,33) == 33\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,34) == 34\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,35) == 35\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,36) == 36\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,37) == 37\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,38) == 38\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,39) == 39\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,40) == 40\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,41) == 41\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,42) == 42\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,43) == 43\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,44) == 44\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,45) == 45\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,46) == 46\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,47) == 47\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,48) == 48\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,49) == 49\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,50) == 50\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,51) == 51\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,52) == 52\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,53) == 53\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,54) == 54\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,55) == 55\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,56) == 56\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,57) == 57\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,58) == 58\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,59) == 59\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,60) == 60\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,61) == 61\nfind_Element([10,9,8,7,6,5,4,3,2,1],3,2,6"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Element(arr,ranges,rotations,0) == 5\nassert     find_Element(arr,ranges,rotations,2) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Element([3,5,8,9,2,4,7],3,2,5) == 8\nassert     find_Element([3,5,8,9,2,4,7],3,2,7) == 9\nassert     find_Element([3,5,8,9,2,4,7],3,2,8) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\narr = [1,2,3,4,5,6]\nranges = [[0,1,3],[2,4,5]]\nrotations = [[1,2],[2,4],[3,4],[3,4]]\nindex = 1\n\nprint(find_Element(arr,ranges,rotations,index))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Element([12,13,15,16],[[1,2],2],3,[2]) == 16,    \"Should be 16\"\nassert     find_Element([12,13,15,16],[[1,2],2],3,[1]) == 13,    \"Should be 13\"\nassert     find_Element([12,13,15,16],[[1,2],2],3,[0]) == 12,    \"Should be 12\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Element([1,2,3,4],1,1,0) == 1\nassert     find_Element([1,2,3,4],1,1,1) == 1\nassert     find_Element([1,2,3,4],2,2,1) == 3\nassert     find_Element([1,2,3,4],2,2,2) == 3\nassert     find_Element([1,2,3,4],3,3,1) == 2\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     start_withp(['penny', 'penny', 'penny']) == ('penny', 'penny')\nassert     start_withp(['penny', 'penny', 'pendy']) == ('penny', 'penny')\nassert     start_withp(['pennies', 'pennies', 'pennies']) == ('pennies', 'pennies')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     start_withp([\"p\",\"q\",\"r\",\"s\"]) == ['p','q']\n\ndef end_withs(words):\n    '''\n    Write a function to return words from a list of words ending with letter's'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     start_withp(['animal', 'poultry', 'plants', 'birds','snakes', 'fruits']) == ['poultry', 'birds']\n\nassert    start_withp(['animals', 'poultry', 'plants', 'birds','snakes', 'fruits']) == ['poultry', 'birds']\n\nassert    start_withp(['animals', 'poultry', 'plants', 'birds','snakes', 'fruits', 'pig', 'fox']) == ['poultry', 'birds','snakes', 'fruits']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     start_withp(['all', 'practice','makes', 'perfect', 'coding']) == ['practice','makes']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     start_withp([\"John\", \"Peter\", \"George\", \"Ringo\", \"will\", \"start\", \"with\", \"p\", \"likes\", \"Peter\", \"George\"]) == ['Peter', 'George']\n\nassert    start_withp([\"Python\", \"is\", \"fun\"]) == ['Python']\nassert    start_withp([\"this\", \"is\", \"fun\"]) == []\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     start_withp(['python', 'pythoner', 'pythonly']) == ['pythoner', 'pythonly']\nassert start_withp(['a', 'b', 'p', 'p', 'l', 'e', 'x', 'z']) == ['p', 'p']\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return (word for word in words if word.startswith('p'))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef end_with_e(words):\n    '''\n    Write a function to return the two words from a list of words ending with letter 'e'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     start_withp(['lala', 'papapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapapa"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp([\"apple\", \"banana\", \"papaya\"]) == ['apple', 'papaya']\nassert     start_withp([\"apple\", \"banana\", \"papaya\", \"pear\", \"kiwi\", \"lemon\"]) == ['apple', 'pear']\nassert     start_withp([\"apple\", \"banana\", \"papaya\", \"pear\", \"kiwi\", \"lemon\", \"orange\"]) == ['apple', 'lemon']"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"pom\", \"pot\", \"po\"]) == ['po', 'po']\nassert    start_withp([\"pot\", \"pom\", \"pot\", \"pot\", \"po\"]) == ['pot', 'pom', 'pot']\nassert     start_withp([\"po\", \"pot\", \"pom\", \"pot\"]) == ['po', 'pom']\nassert     start_withp([\"po\", \"pot\", \"pom\", \"pot\", \"po\"]) == ['po', 'pom']\nassert     start_withp([\"po\", \"pot\", \"pom\", \"pot\", \"po\", \"po\"]) == ['po', 'pom', 'pot']\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_increasing_subseq([10, 4, 5, 4, 4], 4, 2, 0) == 10\nassert     max_sum_increasing_subseq([10, 4, 5, 4, 4], 4, 0, 3) == 16\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_sum_increasing_subseq_dp(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    Use dynamic programming.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_increasing_subseq([1, 2, 3, 5, 1, 1], 8, 5) == 8\nassert     max_sum_increasing_subseq([1, 2, 3, 5, 1, 1], 8, 6) == 10\nassert     max_sum_increasing_subseq([1, 2, 3, 5, 1, 1], 8, 7) == 12\nassert     max_sum_increasing_subseq([1, 2, 3, 5, 1, 1], 8, 8) == 12\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function uses dynamic programming to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_increasing_subseq([1, 7, 3, 4, 6, 8], 5, 2, 5) == 16, 'wrong output'\nassert     max_sum_increasing_subseq([1, 5, 7, 9, 11, 7, 4], 8, 5, 6) == 17, 'wrong output'\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_increasing_subseq([2,3,1,4,4,3,2,5,1], 9, 0, 3) == 9\nassert     max_sum_increasing_subseq([2,3,1,4,4,3,2,5,1], 9, 0, 4) == 13\nassert     max_sum_increasing_subseq([1, 4, 4, 2, 1, 7, 4, 7], 4, 5, 2) == 14\n\ndef max_sum_increasing_subseq_dp(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] >= a[i]:\n                max_sum = max(max_sum, sum(a[i:j+1]))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex((1, 2), 1, 2) == (1, 2)\nassert     colon_tuplex((1, 2), 2, 2) == (1, 2)\nassert     colon_tuplex((1, 2), 1, 1) == (1, 2, 1)\nassert     colon_tuplex((1, 2, 3), 1, 1) == (1, 2, 3)\nassert     colon_tuplex((1, 2), 1, 1) == (1, 2, 1)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     colon_tuplex((1,2,3,4),1,2) == (1,2,3,4)\nassert     colon_tuplex((1,2,3,4),2,2) == (2,3,4)\nassert     colon_tuplex((1,2,3,4),0,2) == (1,3)\nassert     colon_tuplex((1,2,3,4),1,0) == (1,1)\nassert     colon_tuplex((1,2,3,4),1,1) == (1)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    colon_tuplex((1,2,3),1,2) == (2,3)\n    colon_tuplex((1,2,3),2,2) == (1,3)\n    colon_tuplex((1,2,3),3,2) == (1,2)\n    colon_tuplex((1,2,3),4,2) == (1,2)\n    colon_tuplex((1,2,3),1,3) == (2,3)\n    colon_tuplex((1,2,3),2,3) == (1,2)\n    colon_tuplex((1,2,3),3,3) == (1,2)\n    colon_tuplex((1,2,3),4,3) == (1,2)\n    colon_tuplex((1,2,3),1,4) == (2,3)\n    colon_tuplex((1,2,3),2,4) == (1,3)\n    colon_tuplex((1,2,3),3,4) == (1,2)\n    colon_tuplex((1,2,3),4,4) == (1,2)\n    colon_tuplex((1,2,3),1,5) == (2,3)\n    colon_tuplex((1,2,3),2,5) == (1,3)\n    colon_tuplex((1,2,3),3,5) == (1,2)\n    colon_tuplex((1,2,3),4,5) == (1,2)\n    colon_tuplex((1,2,3),1,6) == (2,3)\n    colon_tuplex((1,2,3),2,6) == (1,3)\n    colon_tuplex((1,2,3),3,6) == (1,2)\n    colon_tuplex((1,2,3),4,6) == (1,2)\n    colon_tuplex((1,2,3),1,7) == (2,3)\n    colon_tuplex((1,2,3),2,7) == (1,3)\n    colon_tuplex((1,2,3),3,7) == (1,2)\n    colon_tuplex((1,2,3),4,7) == (1,2)\n    colon_tuplex((1,2,3),1,8) == (2,3)\n    colon_tuplex((1,2,3),2,8) == (1,3)\n    colon_tuplex((1,2,3),3,8) == (1,2)\n    colon_tuplex((1,2,3),4,8) == (1,2)\n    colon_tuplex((1,2,3),1,9) == (2,3)\n    colon_tuplex((1,2,3),2,9) == (1,3)\n    colon_tuplex((1,2,3),3,9) == (1,2)\n    colon_tuplex((1,2,3),4,9) == (1,2)\n    colon_tuplex((1,2,3),1,10) == (2,3)\n    colon_tuplex((1,2,3),2,10) == (1,3)\n    colon_tuplex((1,2,3),3,10) == (1,2)\n    colon_tuplex((1,2,3),4,10) == (1,2)\n    colon_tuplex((1,2,3),1,11) == (2,3)\n    colon_tuplex((1,2,3),2,11) == (1,3)\n    colon_tuplex((1,2,3),3,11) == (1,2)\n    colon_tuplex((1,2,3),4,11) == (1,2)\n    colon_tuplex((1,2,3),1,12) == (2,3)\n    colon_tuplex((1,2,3),2,12) == (1,3)\n    colon_tuplex((1,2,3),3,12) == (1,2)\n    colon_tuplex((1,2,3),4,12) == (1,2)\n    colon_tuplex((1,2,3),1,13) == (2,3)\n    colon_tuplex((1,2,3),2,13) == (1,3)\n    colon_tuplex((1,2,3),3,13) == (1,2)\n    colon_tuplex((1,2,3),4,13) == (1,2)\n    colon_tuplex((1,2,3),1,14) == (2,3)\n    colon_tuplex((1,2,3),2,14) == (1,3)\n    colon_tuplex((1,2,3),3,14) == (1,2)\n    colon_tuplex((1,2,3),4,14) == (1,2)\n    colon_tuplex((1,2,3),1,15) == (2,3)\n    colon_tuplex((1,2,3),2,15) == (1,3)\n    colon_tuplex((1,2,3),3,15) == (1,2)\n    colon_tuplex((1,2,3),4,15) == (1,2)\n    colon_tuplex((1,2,3),1,16) == (2,3)\n    colon_tuplex((1,2,3),2,16) == (1,3)\n    colon_tuplex((1,2,3),3,16) == (1,2)\n    colon_tuplex((1,2,3),4,16) == (1,2)\n    colon_tuplex((1,2,3),1,17) == (2,3)\n    colon_tuplex((1,2,3),2,17) == (1,3)\n    colon_tuplex((1,2,3),3,17) == (1,2)\n    colon_tuplex((1,2,3),4,17) == (1,2)\n    colon_tuplex((1,2,3),1,18) == (2,3)\n    colon_tuplex((1,2,3),2,18) == (1,3)\n    colon_tuplex((1,2,3),3,18) == (1,2)\n    colon_tuplex((1,2,3),4,18) == (1,2)\n    colon_tuplex((1,2,3),1,19) == (2,3)\n    colon_tuplex((1,2,3),2,19) == (1,3)\n    colon_tuplex((1,2,3),3,19) == (1,2)\n    colon_tuplex((1,2,3),4,19) == (1,2)\n    colon_tuplex((1,2,3),1,20) == (2,3)\n    colon_tuplex((1,2,3),2,20) == (1,3)\n    colon_tuplex((1,2,3),3,20) == (1,2)\n    colon_tuplex((1,2,3),4,20) == (1,2)\n    colon_tuplex((1,2,3),1,21) == (2,3)\n    colon_tuplex((1,2,3),2,21) == (1,3)\n    colon_tuplex((1,2,3),3,21) == (1,2)\n    colon_tuplex((1,2"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex(('a','b','c'),2,3) == ('a',':','b')\nassert     colon_tuplex(('a','b','c'),1,3) == ('a','b','c')\nassert     colon_tuplex(('a','b','c'),1,2) == ('a','b','c')\nassert     colon_tuplex(('a','b','c'),1,1) == ('a','b','c')\nassert     colon_tuplex(('a','b','c'),0,2) == ('a','b','c')\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex((1,2,3,4),3,4) == ((1,2,3,4), (2,3,4,5))\nassert     colon_tuplex((1,2,3,4),3,3) == ((1,2,3,4), (2,3,4,4))\n\ndef make_colon(n):\n    '''\n    Write a function to make colon of a tuple to a list.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     colon_tuplex((1,2),2,3) == (2,3,1)\nassert     colon_tuplex((3,4,5),3,4) == (5,4,3)\nassert     colon_tuplex((2,3,4),4,5) == (2,3,4)\nassert     colon_tuplex((5,6,7),4,5) == (5,6,7)\n\ndef exe(c):\n    '''\n    Write a function to check whether the input array of three integers is an\n    array of three tuples. Return \"True\" or \"False\" accordingly.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     colon_tuplex((1,2),2,3) == (1,2,None,None)\nassert     colon_tuplex((1,2,3,4),2,4) == (1,2,3,4)\nassert     colon_tuplex((1,2,3,4),2,2) == (1,2,3,4)\nassert     colon_tuplex((1,2,3,4),3,4) == (1,2,3,4)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     colon_tuplex((1,2,3),2,2) == (1,2),'incorrect'\nassert     colon_tuplex((1,2,3),1,2) == (2,3),'incorrect'\nassert     colon_tuplex((1,2,3),2,1) == (3,1),'incorrect'\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     large_product([3,2], [3,5], 3) == 45\nassert     large_product([3,5], [2], 1) == 30\nassert     large_product([1,2], [2], 2) == 4\nassert     large_product([2], [2], 3) == 4\nassert     large_product([3,5,1], [5], 1) == 75\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     large_product([1,2,3,4,5], [2,2,2,2,2], 2) == [6, 24]\nassert large_product([1,2,3,4,5], [2,2,2,2,2], 1) == [2,24]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(large_product([2,3], [4,5], 2)) == 120\nprint(large_product([2,3], [4,5], 2,2)) == 120\nprint(large_product([2,3], [4,5], 2,2,4)) == 120\nprint(large_product([2,3], [4,5], 2,2,4,6)) == 120\nprint(large_product([2,3,4], [5,6,7], 2)) == 720\nprint(large_product([2,3,4], [5,6,7], 2,2)) == 720\nprint(large_product([2,3,4], [5,6,7], 2,2,4)) == 720\nprint(large_product([2,3,4], [5,6,7], 2,2,4,6)) == 720\nprint(large_product([2,3,4], [5,6,7], 2,2,4,6,7)) == 720\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     large_product([1,2,3,4], [5,6,7,8], 3) == [120, 60, 240, 80]\nassert     large_product([1,2,3,4], [5,6,7,8], 5) == [12, 6, 24, 8]\nassert     large_product([1,2,3,4], [5,6,7,8], 7) == [60, 24, 60, 60, 60]\nassert     large_product([1,2,3,4], [5,6,7,8], 8) == [24, 24, 120, 120]\nassert     large_product([1,2,3,4], [5,6,7,8], 9) == [120, 120, 120, 120, 120]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     large_product([2, 3, 6, 7], [2, 3, 6, 7], 2) ==  7 * 6\nassert     large_product([2, 3, 6, 7], [2, 3, 6, 7], 3) ==  7 * 6 * 3\nassert     large_product([2, 3, 6, 7], [2, 3, 6, 7], 4) ==  7 * 6 * 3 * 2\nassert     large_product([2, 3, 6, 7], [2, 3, 6, 7], 5) ==  7 * 6 * 3 * 2 * 3\nassert     large_product([2, 3, 6, 7], [2, 3, 6, 7], 6) ==  7 * 6 * 3 * 2 * 3 * 2\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(large_product([1, 2, 3, 4], [1, 2, 3, 4], 2))\nassert \nprint(large_product([1, 2, 3], [1, 2, 3, 4], 1))\nassert \nprint(large_product([1, 2, 3], [4, 5, 6], 3))\nassert \nprint(large_product([2, 3], [5, 6, 7], 2))"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(1,2) == 2\nassert maximum(1,-1) == 1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(3, 4) == 4, \"incorrect output\"\nassert maximum(3, 4) == 3, \"incorrect output\"\nassert maximum(3, 4) == 3, \"incorrect output\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum(5,5)== 5\nassert     maximum(5,6) == 5\nassert     maximum(5,10) == 10\nassert     maximum(0,10) == 10\nassert     maximum(10,0) == 10\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(10,5) == 10, \"Should be 10\"\nassert    maximum(100,5) == 100, \"Should be 100\"\nassert    maximum(-100,5) == 5, \"Should be 5\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert maximum(4,5) == 5, \"Error\"\nassert maximum(4,5) == 5, \"Error\"\nassert maximum(5,4) == 5, \"Error\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(10,20) == 20, \"10 is not equal to 20\"\nassert maximum(20,10) == 20, \"10 is not equal to 20\"\nassert maximum(100,20) == 100, \"100 is not equal to 20\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(4,2) == 4\nassert     maximum(4,5) == 5\nassert     maximum(9,5) == 9\nassert     maximum(9,9) == 9\nassert     maximum(9,10) == 10\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum(10,20) == 20\nassert     maximum(100,200) == 200\nassert     maximum(10,100) == 100\nassert     maximum(10,-1) == 10\nassert     maximum(-1,100) == 100\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple(\"dog\") == ('d', 'o', 'g')\nassert     string_to_tuple(\"goat\") == ('g', 'o', 'a', 't')\n\n'''\nGiven an integer number n and an array of integers. Return the pair of numbers that adds to n. If there is more than one pair of numbers that adds to n, return the pair with the smallest element.\n\nExample\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple('s')    == ('s',), 'Not valid input'\nassert     string_to_tuple('s1')    == ('s',), 'Not valid input'\nassert     string_to_tuple('s2')    == ('s',), 'Not valid input'\nassert     string_to_tuple('s3')    == ('s',), 'Not valid input'\nassert     string_to_tuple('s4')    == ('s',), 'Not valid input'\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('abb') == ('a', 'b'), \"Example 1 failed\"\nassert     string_to_tuple('c') == ('c',), \"Example 2 failed\"\nassert     string_to_tuple('a') == ('a',), \"Example 3 failed\"\nassert     string_to_tuple('aaa') == ('a', 'a', 'a'), \"Example 4 failed\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple(\"hello world\") == ('h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd')\nassert     string_to_tuple(\"\") == ()\nassert     string_to_tuple(\"abc\") == ('a', 'b', 'c')\nassert     string_to_tuple(\"qwer\") == ('q', 'w', 'e', 'r')\nassert     string_to_tuple(\"qwerty\") == ('q', 'w', 'e', 'r', 't', 'y', 'u')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple(\"15\") == ('1', '5', '0')\nassert     string_to_tuple(\"20\") == ('2', '0', '0')\nassert     string_to_tuple(\"15\") == ('1', '5', '0')\nassert     string_to_tuple(\"10\") == ('1', '0', '0')\nassert     string_to_tuple(\"1\") == ('1', '0', '0')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple('25') == ('2','5','1','2')\nassert     string_to_tuple('50') == ('5','1','2')\n\ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters into a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\nTesting string_to_tuple...')"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple(\"string\") == (\"s\", \"t\", \"r\", \"i\", \"n\", \"g\")\nassert     string_to_tuple(\"\") == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_tuple('a') == ('a',), \"wrong output\"\nassert     string_to_tuple('ab') == ('a', 'b'), \"wrong output\"\nassert     string_to_tuple('abc') == ('a', 'b', 'c'), \"wrong output\"\nassert     string_to_tuple('a b c') == ('a', 'b', 'c'), \"wrong output\"\nassert     string_to_tuple('a b c') == ('a', 'b', 'c'), \"wrong output\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple('Hello') == ('H', 'e', 'l', 'l', 'o')\nassert     string_to_tuple('How are you') == ('H', 'a', 'w', 'o', 'r', 'e', 'y', 'o', 'u', 'n')\nassert     string_to_tuple('What is your name') == ('H', 'a', 't', 'h', 'w', 'o', 'r', 'i', 'n','m', 'a', 'n', 'e')\nassert     string_to_tuple('No way!') == ('N', 'o', 'w', 'a', 'l', 'l', 'i', 'n', 'e')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_left_most_unset_bit(0) == 0, \"Wrong output\"\nassert     set_left_most_unset_bit(5) == 2, \"Wrong output\"\nassert     set_left_most_unset_bit(10) == 3, \"Wrong output\"\nassert     set_left_most_unset_bit(15) == 4, \"Wrong output\"\nassert     set_left_most_unset_bit(20) == 5, \"Wrong output\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(0b0101) == 0b0000, 'Test Case 1 Failed'\nassert set_left_most_unset_bit(0b10101) == 0b0000, 'Test Case 2 Failed'\nassert set_left_most_unset_bit(0b10101010101) == 0b0000, 'Test Case 3 Failed'\nassert set_left_most_unset_bit(0b100000000001) == 0b0001, 'Test Case 4 Failed'\nassert set_left_most_unset_bit(0b010101010101) == 0b0000, 'Test Case 5 Failed'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_left_most_unset_bit(0b00000101) == 0b00000\nassert     set_left_most_unset_bit(0b00000110) == 0b00000\nassert     set_left_most_unset_bit(0b00010000) == 0b00000\nassert     set_left_most_unset_bit(0b00100000) == 0b00000\nassert     set_left_most_unset_bit(0b00100001) == 0b00000\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"Pass\" if ((set_left_most_unset_bit(3) == 1) and\n                    (set_left_most_unset_bit(255) == 1)) else \"Fail\")\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nset_left_most_unset_bit(11)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(0) == 1\nassert     set_left_most_unset_bit(1) == 0\nassert     set_left_most_unset_bit(2) == 0\nassert     set_left_most_unset_bit(3) == 0\nassert     set_left_most_unset_bit(4) == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(4) == 0\nassert     set_left_most_unset_bit(5) == 1\nassert     set_left_most_unset_bit(6) == 1\nassert     set_left_most_unset_bit(7) == 0\nassert     set_left_most_unset_bit(8) == 1\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(2, 3) == math.pi * (1/3)*r*h, \"Houston, we have a problem!\"\n\ndef area_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cone(1,3) == math.pi*3**2*1/3\nassert     volume_cone(5,1) == math.pi*5**2\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cone(1,2)== math.pi*r**2 * h\nassert volume_cone(1,3)== 0\nassert volume_cone(3,3)== math.pi*r**2 * h\nassert volume_cone(2,2)== 4*math.pi*r*h\nassert volume_cone(3,2)== math.pi*r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cone(3,4) == math.pi*(3**2)*r*h/3, \"Volume of cone = \"+str(volume_cone(3,4))\nassert     volume_cone(7,7) == math.pi*(7**2)*r*h/3, \"Volume of cone = \"+str(volume_cone(7,7))\nassert     volume_cone(3,3) == math.pi*(3**2)*r*h/3, \"Volume of cone = \"+str(volume_cone(3,3))\nassert     volume_cone(2,6) == math.pi*(2**2)*r*h/3, \"Volume of cone = \"+str(volume_cone(2,6))\nassert     volume_cone(2,0) == math.pi*(2**2)*r*h/3, \"Volume of cone = \"+str(volume_cone(2,0))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n\ndef calculate_radius(a,b):\n    '''\n    Write a function to calculate the radius of a parabola\n    '''\n    pass\n\ndef calculate_radius(a,b,c):\n    '''\n    Write a function to calculate the radius of a parabola\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(2,2) == math.pi*r**2*(3/4)*h\nassert     volume_cone(3,2) == math.pi*r**2*(2/3)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(3,4)==6.772050807568877\nassert     volume_cone(3,0)==1\nassert     volume_cone(0,0)==0\n\ndef volume_cone_in_rectangle(r,w,h):\n    '''\n    Write a function to find the volume of a cone in a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhighest_Power_of_2(4) == 2\nhighest_Power_of_2(13) == 3\nhighest_Power_of_2(40) == 4\nhighest_Power_of_2(9) == 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    highest_Power_of_2(2) == 1\n    highest_Power_of_2(4) == 2\n    highest_Power_of_2(8) == 3\n    highest_Power_of_2(15) == 4\n    highest_Power_of_2(16) == 4\n    highest_Power_of_2(40) == 4\n    highest_Power_of_2(100) == 5"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhighest_Power_of_2(3) == 2\nhighest_Power_of_2(4) == 2\nhighest_Power_of_2(8) == 4\nhighest_Power_of_2(15) == 4\nhighest_Power_of_2(16) == 5\nhighest_Power_of_2(32) == 8\nhighest_Power_of_2(64) == 8\nhighest_Power_of_2(128) == 8\nhighest_Power_of_2(256) == 8\nhighest_Power_of_2(512) == 8\nhighest_Power_of_2(1024) == 8\nhighest_Power_of_2(2048) == 8\nhighest_Power_of_2(4096) == 8\nhighest_Power_of_2(8192) == 8\nhighest_Power_of_2(16384) == 8\nhighest_Power_of_2(32768) == 8\nhighest_Power_of_2(65536) == 8\nhighest_Power_of_2(131072) == 8\nhighest_Power_of_2(262144) == 8\nhighest_Power_of_2(524288) == 8\nhighest_Power_of_2(1048576) == 8\nhighest_Power_of_2(2097152) == 8\nhighest_Power_of_2(4194304) == 8\nhighest_Power_of_2(8388608) == 8\nhighest_Power_of_2(16777216) == 8\nhighest_Power_of_2(33554432) == 8\nhighest_Power_of_2(67108864) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8\nhighest_Power_of_2(34359738368) == 8\nhighest_Power_of_2(636870912) == 8\nhighest_Power_of_2(134217728) == 8\nhighest_Power_of_2(268435456) == 8\nhighest_Power_of_2(536870912) == 8\nhighest_Power_of_2(1073741824) == 8\nhighest_Power_of_2(2147483648) == 8\nhighest_Power_of_2(4294967296) == 8\nhighest_Power_of_2(8589934592) == 8\nhighest_Power_of_2(17179869184) == 8"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\": \n    input = 5\n    output = highest_Power_of_2(input) \n    if output == 32: \n        print(\"Passed\") \n    else: \n        print(\"Failed\") "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef recursive_power(n, p):\n    '''\n    Write a python function to calculate n raised to the power of p.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     highest_Power_of_2(1) == 0\nassert     highest_Power_of_2(2) == 1\nassert     highest_Power_of_2(6) == 2\nassert     highest_Power_of_2(9) == 3\nassert     highest_Power_of_2(15) == 4\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_lucas(1) == 2\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 7\nfind_lucas(5) == 11\nfind_lucas(6) == 18\nfind_lucas(7) == 29\nfind_lucas(8) == 40\nfind_lucas(9) == 47\nfind_lucas(10) == 61\nfind_lucas(11) == 78\nfind_lucas(12) == 94\nfind_lucas(13) == 101\nfind_lucas(14) == 103\nfind_lucas(15) == 107\nfind_lucas(16) == 109\nfind_lucas(17) == 111\nfind_lucas(18) == 113\nfind_lucas(19) == 127\nfind_lucas(20) == 131\nfind_lucas(21) == 137\nfind_lucas(22) == 139\nfind_lucas(23) == 143\nfind_lucas(24) == 149\nfind_lucas(25) == 157\nfind_lucas(26) == 163\nfind_lucas(27) == 167\nfind_lucas(28) == 173\nfind_lucas(29) == 179\nfind_lucas(30) == 181\nfind_lucas(31) == 191\nfind_lucas(32) == 193\nfind_lucas(33) == 197\nfind_lucas(34) == 199\nfind_lucas(35) == 211\nfind_lucas(36) == 223\nfind_lucas(37) == 227\nfind_lucas(38) == 229\nfind_lucas(39) == 233\nfind_lucas(40) == 239\nfind_lucas(41) == 241\nfind_lucas(42) == 251\nfind_lucas(43) == 257\nfind_lucas(44) == 263\nfind_lucas(45) == 269\nfind_lucas(46) == 271\nfind_lucas(47) == 277\nfind_lucas(48) == 281\nfind_lucas(49) == 283\nfind_lucas(50) == 289\nfind_lucas(51) == 293\nfind_lucas(52) == 299\nfind_lucas(53) == 301\nfind_lucas(54) == 307\nfind_lucas(55) == 313\nfind_lucas(56) == 317\nfind_lucas(57) == 331\nfind_lucas(58) == 337\nfind_lucas(59) == 347\nfind_lucas(60) == 349\nfind_lucas(61) == 353\nfind_lucas(62) == 359\nfind_lucas(63) == 367\nfind_lucas(64) == 373\nfind_lucas(65) == 379\nfind_lucas(66) == 383\nfind_lucas(67) == 389\nfind_lucas(68) == 391\nfind_lucas(69) == 397\nfind_lucas(70) == 401\nfind_lucas(71) == 409\nfind_lucas(72) == 419\nfind_lucas(73) == 431\nfind_lucas(74) == 433\nfind_lucas(75) == 439\nfind_lucas(76) == 447\nfind_lucas(77) == 457\nfind_lucas(78) == 463\nfind_lucas(79) == 479\nfind_lucas(80) == 481\nfind_lucas(81) == 483\nfind_lucas(82) == 489\nfind_lucas(83) == 491\nfind_lucas(84) == 499\nfind_lucas(85) == 503\nfind_lucas(86) == 509\nfind_lucas(87) == 521\nfind_lucas(88) == 531\nfind_lucas(89) == 541\nfind_lucas(90) == 547\nfind_lucas(91) == 563\nfind_lucas(92) == 569\nfind_lucas(93) == 571\nfind_lucas(94) == 577\nfind_lucas(95) == 583\nfind_lucas(96) == 591\nfind_lucas(97) == 593\nfind_lucas(98) == 599\nfind_lucas(99) == 601\nfind_lucas(100) == 607\nfind_lucas(101) == 613\nfind_lucas(102) == 617\nfind_lucas(103) == 621\nfind_lucas(104) == 629\nfind_lucas(105) == 641\nfind_lucas(106) == 643\nfind_lucas(107) == 647\nfind_lucas(108) == 653\nfind_lucas(109) == 657\nfind_lucas(110) == 661\nfind_lucas(111) == 667\nfind_lucas(112) == 671\nfind_lucas(113) == 677\nfind_lucas(114) == 683\nfind_lucas(115) == 689\nfind_lucas(116) == 691\nfind_lucas(117) == 701\nfind_lucas(118) == 709\nfind_lucas(119) == 719\nfind_lucas(120) == 727\nfind_lucas(121) == 733\nfind_lucas(122) == 739\nfind_lucas(123) == 749\nfind_lucas(124) == 751\nfind_lucas(125) == 761\nfind_lucas(126) == 769\nfind_lucas(127) == 771\nfind_lucas(128) == 783\nfind_lucas(129) == 787\nfind_lucas(130) == 793\nfind_lucas(131) == 797\nfind_lucas(132) == 803\nfind_lucas(133) == 809\nfind_lucas(134) == 811\nfind_lucas(135) == 821\nfind_lucas(136) == 829\nfind_lucas(137) == 833\nfind_lucas(138) == 839\nfind_lucas(139) == 851\nfind_lucas(140) == 853\nfind_lucas(141) == 857\nfind_lucas(142) == 859\nfind_lucas(143) == 863\nfind_lucas(144) == 869\nfind_lucas(145) == 871\nfind_lucas(146) == 873\nfind_lucas(147) == 879\nfind_lucas(148) == 881\nfind_lucas(149) == 883\nfind_lucas(150) == 887\nfind_lucas(151) == 901\nfind_lucas(152) == 907\nfind_lucas(153) == 919\nfind_lucas(154) == 931\nfind_lucas(155) == 937\nfind_lucas(156) == 941\nfind_lucas(157) == 947\nfind_lucas(158) == 953\nfind_lucas(159) == 961\nfind_lucas(160) == 967\nfind_lucas(161) == 971\nfind_lucas(162) == 977\nfind_lucas(163) == 983\nfind_lucas(164) == 987\nfind_lucas(165) == 991\nfind_lucas(166) == 997\nfind_lucas(167) == 1009\nfind_lucas(168) == 1013\nfind_lucas(169) == 1019\nfind_lucas(170) == 1021\nfind_lucas(171) == 1027\nfind_lucas(172) == 1031\nfind_lucas(173"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_lucas(0) == 2\nassert \nfind_lucas(1) == 3\nassert \nfind_lucas(5) == 7\nassert \nfind_lucas(10) == 29\nassert \nfind_lucas(100) == 4718023\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nEXERCISE\nWrite a function that takes a numpy array, \nand returns a Boolean array where all elements in the \nBoolean array are True if they are equal to the average\nof their respective elements.\n'''"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lucas(1) == 1\nassert     find_lucas(2) == 1\nassert     find_lucas(3) == 2\nassert     find_lucas(5) == 2\nassert     find_lucas(8) == 4\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 1\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 1\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nfind_lucas(10) == 2\nfind_lucas(20) == 4\nfind_lucas(30) == 6\n\n\ndef find_euler(n):\n    '''\n    Write a function to find then'th Euler number.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_string(['a', 'b', 'c'], '{0} {1} {2}') == 'a b c','should be abc'\nassert     add_string(['a', 'b', 'c'], '{2} {1} {0}') == 'c b a','should be cba'\n\ndef count_x(string):\n    '''\n    Write a function to count the number of x characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef add_string_with_paddings(list_, format_string, pad_width):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_string(['Hello', 'World!'], '{0} {1}') == ['Hello', 'World!'], 'The function should return the following string: Hello World!'\nassert     add_string(['Hello', 'World!'], 'Hi {0}') == ['Hi Hello', 'Hi World!'], 'The function should return the following string: Hi Hello, Hi World!'\nassert     add_string(['Hello', 'World!'], 'Hi {name}') == ['Hi Hello', 'Hi World!'], 'The function should return the following string: Hi Hello, Hi World!'\nassert     add_string(['Hello', 'World!'], 'Hi {name} {age}') == ['Hi Hello', 'Hi World!'], 'The function should return the following string: Hi Hello, Hi World!'\nassert     add_string(['Hello', 'World!'], 'Hi {name} {age} {number}') == ['Hi Hello', 'Hi World!'], 'The function should return the following string: Hi Hello, Hi World!'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string([0, 1, 2, 3, 4, 5, 6, 7, 8], \" * {0:4d}\") == [' * 0','* 1','* 2','* 3','* 4','* 5','* 6','* 7','* 8']\nassert     add_string([0, 1, 2, 3, 4, 5, 6, 7, 8], \" * {0:>4d}\") == [' *   0','*   1','*   2','*   3','*   4','*   5','*   6','*   7','*   8']\nassert     add_string([0, 1, 2, 3, 4, 5, 6, 7, 8], \" * {0:^4d}\") == [' *    0','*    1','*    2','*    3','*    4','*    5','*    6','*    7','*    8']\nassert     add_string([0, 1, 2, 3, 4, 5, 6, 7, 8], \" * {0:0<4d}\") == [' *  000','*  001','*  002','*  003','*  004','*  005','*  006','*  007','*  008']\nassert     add_string([0, 1, 2, 3, 4, 5, 6, 7, 8], \" * {0:4.2f}\") == [' * 0.00','* 0.01','* 0.02','* 0.03','* 0.04','* 0.05','* 0.06','* 0.07','* 0.08']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_string(['12', '34', '45', '67'], '{}') == '12344567'\nassert     add_string(['a', 'b', 'c'], '{}') == 'abc'\nassert     add_string(['d', 'e', 'f'], '{}') == 'def'\nassert     add_string(['g', 'h', 'i'], '{}') == 'ghi'\nassert     add_string(['j', 'k', 'l'], '{}') == 'jk'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_string([1, 2, 3], '* {:d} {:d} {:d}') == \n    '* 1 2 3'\n\n\n\ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary([[1,2,3], [4,5,6], [\"hi\", \"bye\", \"hello\"]] == \n                                    {\"1\": \"2\", \"4\": \"5\", \"6\": \"hello\", \"hi\": [\"bye\", \"hello\"]}) \nassert     convert_list_dictionary([1,2,3] == {\"1\": 2, \"2\": 3}) \nassert     convert_list_dictionary([[\"hi\", \"bye\", \"hello\"]] == {\"hi\": [\"bye\", \"hello\"]}) \nassert     convert_list_dictionary([[1,2,3], \"hi\", \"bye\", \"hello\"]) == {\"1\": 2, \"hi\": \"bye\", \"bye\": \"hello\"} \nassert     convert_list_dictionary([[\"hi\", \"bye\", \"hello\"], 1, 2, 3]) == {\"hi\": [\"bye\", \"hello\"], 1: 2, 3: 3} \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary([], {}, {}) == {}, \"Fail\"\nassert     convert_list_dictionary([1, 2, 3], {}, {}) == {1: {}, 2: {}, 3: {}}, \"Fail\"\nassert     convert_list_dictionary([], {}, {}) == {}, \"Fail\"\nassert     convert_list_dictionary([], {1, 2, 3}, {}) == {}, \"Fail\"\nassert     convert_list_dictionary([1, 2, 3], {1, 2, 3}, {}) == {1: {2: 3}}, \"Fail\"\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary([{'a': 1}, {'b': 2}], ['a', 'b'], ['a', 'b']) == {'a': {'a': 1, 'b': 2}, 'b': {'a': 1, 'b': 2}}\nassert     convert_list_dictionary([{'a': 1}, {'b': 2}], ['a', 'b'], ['a', 'b']) == {'a': {'a': 1, 'b': 2}, 'b': {'a': 1, 'b': 2}}\nassert     convert_list_dictionary([{'a': 1}, {'b': 2}], ['a', 'b'], ['a', 'b']) == {'a': {'a': 1, 'b': 2}, 'b': {'a': 1, 'b': 2}}\nassert     convert_list_dictionary([{'a': 1}, {'b': 2}], ['a', 'b', 'c'], ['a', 'b', 'c']) == {'a': {'a': 1, 'b': 2}, 'b': {'a': 1, 'b': 2}, 'c': {'a': 1, 'b': 2}}\nassert     convert_list_dictionary([{'a': 1}, {'b': 2}], ['a', 'b', 'c'], ['a', 'b', 'c']) == {'a': {'a': 1, 'b': 2}, 'b': {'a': 1, 'b': 2}, 'c': {'a': 1, 'b': 2}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary([1,2,3], {1: 1, 2: 2}, {3: 3, 4: 4}) == {1: 1, 2: 2, 3: 3}\nassert    convert_list_dictionary([1,2,3], {1: 1, 2: 2}, {3: 3, 4: 4}, 3) == {1: 3, 2: 4}\nassert    convert_list_dictionary([1,2,3], {1: 1, 2: 2}, {3: 3, 4: 4}, 4) == {1: 3, 2: 4, 3: 3}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary([1, 2, 3], [['a', 'b', 'c'], ['d', 'e', 'f']], \n                                                     [['g', 'h', 'i'], ['j', 'k', 'l']]) == {1: {'a': {'b': 'c'}, 'd': {'e': 'f'}}, 2: {'g': {'h': 'i'}, 'j': {'k': 'l'}}}, \"Fail\"\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary([1, 2, 3], {1: 1, 2: 2, 3: 3}, {1: 1, 2: 2, 3: 3}) ==     {1: 1, 2: 2, 3: 3}\nassert     convert_list_dictionary([1, 2, 3], {1: 1, 2: 2, 3: 3}, {1: 1, 2: 2, 3: 3, 4: 4}) ==     {1: 1, 2: 2, 3: 3, 4: 4}\nassert     convert_list_dictionary([1, 2, 3], {1: 1, 2: 2, 3: 3}, {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}) ==     {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     convert_list_dictionary([1, 2, 3], {1: 1, 2: 2, 3: 3}, {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}) ==     {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary(l1 = [[1,2,3],[4,5,6],[7,8,9]], l2 = [[0,1],[2,3],[4,5]], l3 = [[0,1,2],[3,4,5],[6,7,8]]) == {'key1':[[0,1],[2,3],[4,5]], 'key2':[[0,1,2],[3,4,5],[6,7,8]]}\nassert     convert_list_dictionary(l1 = [[1,2,3],[4,5,6],[7,8,9]], l2 = [[0,1,2],[3,4,5],[6,7,8]], l3 = [[0,1,2],[3,4,5],[6,7,8]]) == {'key1':[[0,1],[2,3],[4,5]], 'key2':[[0,1,2],[3,4,5],[6,7,8]]}\nassert     convert_list_dictionary(l1 = [['a','b','c'],[4,5,6],[7,8,9]], l2 = [[0,1,2],[3,4,5],[6,7,8]], l3 = [[0,1,2],[3,4,5],[6,7,8]]) == {'key1':['a','b','c'], 'key2':[[0,1],[2,3],[4,5]], 'key3':[[0,1,2],[3,4,5],[6,7,8]]}\nassert     convert_list_dictionary(l1 = ['a','b','c','d'], l2 = [[0,1,2],[3,4,5],[6,7,8]], l3 = [[0,1,2],[3,4,5],[6,7,8]]) == {'key1':['a','b','c','d'], 'key2':[[0,1],[2,3],[4,5]], 'key3':[[0,1,2],[3,4,5],[6,7,8]]}\nassert     convert_list_dictionary(l1 = [['a','b','c'],['d','e','f']], l2 = [[0,1,2],[3,4,5]], l3 = [[0,1,2],[3,4,5]]) == {'key1':['a','b','c'], 'key2':[[0,1],[2,3]], 'key3':[[0,1,2],[3,4,5]]}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef take(n, iterable):\n    '''\n    Take the first n items of an iterable\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    convert_list_dictionary([{'first':'element1'}, {'second':'element2'}, {'third':'element3'}], [{'first':'element4'}, {'second':'element5'}], [{'first':'element6'}, {'second':'element7'}]) == \n{'first':{'first':'element1','second':'element4'},'second':{'second':'element5'}, 'third':{'third':'element3','second':'element7'}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_sum(10) == 21\nassert     get_max_sum(100) == 201\nassert     get_max_sum(1000) == 2031\nassert     get_max_sum(10000) == 2340"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_max_sum(5) == 13\nassert     get_max_sum(15) == 48\nassert     get_max_sum(18) == 81\nassert     get_max_sum(32) == 912\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_sum (5) == 18\nassert     get_max_sum (6) == 22\nassert     get_max_sum (7) == 27\nassert     get_max_sum (8) == 32\nassert     get_max_sum (9) == 37\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 1\nassert     get_max_sum(5) == 11\nassert     get_max_sum(7) == 16\nassert     get_max_sum(8) == 17\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_sum(4) == 12\nassert     get_max_sum(10) == 23\nassert     get_max_sum(12) == 27\nassert     get_max_sum(34) == 34\nassert     get_max_sum(40) == 35\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum(4) == 8, \"the maximum sum\"\nassert     get_max_sum(9) == 47, \"the maximum sum\"\nassert     get_max_sum(2) == 2, \"the maximum sum\"\nassert     get_max_sum(1) == 1, \"the maximum sum\"\nassert     get_max_sum(0) == 0, \"the maximum sum\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 1\nassert     get_max_sum(3) == 1\nassert     get_max_sum(4) == 1\nassert     get_max_sum(5) == 1\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 3\nassert     get_max_sum(3) == 6\nassert     get_max_sum(4) == 10\nassert     get_max_sum(5) == 15\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    get_max_sum(2) == 1\n    get_max_sum(3) == 4\n    get_max_sum(4) == 6\n    get_max_sum(5) == 10\n    get_max_sum(6) == 15\n    get_max_sum(7) == 22\n    get_max_sum(8) == 27\n    get_max_sum(9) == 33\n    get_max_sum(10) == 36\n    get_max_sum(11) == 37\n    get_max_sum(12) == 40\n    get_max_sum(13) == 43\n    get_max_sum(14) == 46\n    get_max_sum(15) == 49\n    get_max_sum(16) == 52\n    get_max_sum(17) == 55\n    get_max_sum(18) == 58\n    get_max_sum(19) == 61\n    get_max_sum(20) == 64\n    get_max_sum(21) == 67\n    get_max_sum(22) == 72\n    get_max_sum(23) == 75\n    get_max_sum(24) == 78\n    get_max_sum(25) == 81\n    get_max_sum(26) == 84\n    get_max_sum(27) == 87\n    get_max_sum(28) == 90\n    get_max_sum(29) == 93\n    get_max_sum(30) == 96\n    get_max_sum(31) == 99\n    get_max_sum(32) == 102\n    get_max_sum(33) == 105\n    get_max_sum(34) == 108\n    get_max_sum(35) == 111\n    get_max_sum(36) == 114\n    get_max_sum(37) == 117\n    get_max_sum(38) == 120\n    get_max_sum(39) == 123\n    get_max_sum(40) == 126\n    get_max_sum(41) == 129\n    get_max_sum(42) == 132\n    get_max_sum(43) == 135\n    get_max_sum(44) == 138\n    get_max_sum(45) == 141\n    get_max_sum(46) == 144\n    get_max_sum(47) == 147\n    get_max_sum(48) == 150\n    get_max_sum(49) == 153\n    get_max_sum(50) == 156\n    get_max_sum(51) == 159\n    get_max_sum(52) == 162\n    get_max_sum(53) == 165\n    get_max_sum(54) == 168\n    get_max_sum(55) == 171\n    get_max_sum(56) == 174\n    get_max_sum(57) == 177\n    get_max_sum(58) == 180\n    get_max_sum(59) == 183\n    get_max_sum(60) == 186\n    get_max_sum(61) == 189\n    get_max_sum(62) == 192\n    get_max_sum(63) == 195\n    get_max_sum(64) == 198\n    get_max_sum(65) == 201\n    get_max_sum(66) == 204\n    get_max_sum(67) == 207\n    get_max_sum(68) == 210\n    get_max_sum(69) == 213\n    get_max_sum(70) == 216\n    get_max_sum(71) == 219\n    get_max_sum(72) == 222\n    get_max_sum(73) == 225\n    get_max_sum(74) == 228\n    get_max_sum(75) == 231\n    get_max_sum(76) == 234\n    get_max_sum(77) == 237\n    get_max_sum(78) == 240\n    get_max_sum(79) == 243\n    get_max_sum(80) == 246\n    get_max_sum(81) == 249\n    get_max_sum(82) == 252\n    get_max_sum(83) == 255\n    get_max_sum(84) == 258\n    get_max_sum(85) == 261\n    get_max_sum(86) == 264\n    get_max_sum(87) == 267\n    get_max_sum(88) == 270\n    get_max_sum(89) == 273\n    get_max_sum(90) == 276\n    get_max_sum(91) == 279\n    get_max_sum(92) == 282\n    get_max_sum(93) == 285\n    get_max_sum(94) == 288\n    get_max_sum(95) == 291\n    get_max_sum(96) == 294\n    get_max_sum(97) == 297\n    get_max_sum(98) == 300\n    get_max_sum(99) == 303\n    get_max_sum(100) == 306\n    get_max_sum(101) == 309\n    get_max_sum(102) == 312\n    get_max_sum(103) == 315\n    get_max_sum(104) == 318\n    get_max_sum(105) == 321\n    get_max_sum(106) == 324\n    get_max_sum(107) == 327\n    get_max_sum(108) == 330\n    get_max_sum(109) == 333\n    get_max_sum(110) == 336\n    get_max_sum(111) == 339\n    get_max_sum(112) == 342\n    get_max_sum(113) == 345\n    get_max_sum(114) == 348\n    get_max_sum(115) == 351\n    get_max_sum(116) == 354\n    get_max_sum(117) == 357\n    get_max_sum(118) == 360\n    get_max_sum(119) == 363\n    get_max_sum(120) == 366\n    get_max_sum(121) == 369\n    get_max_sum(122) == 372\n    get_max_sum(123) == 375\n    get_max_sum(124) == 378\n    get_max_sum(125) == 381\n    get_max_sum(126) == 384\n    get_max_sum(127) == 387\n    get_max_sum(128) == 390\n    get_max_sum(129) == 393\n    get_max_sum(130) == 396\n    get_max_sum(131) == 399\n    get_max_sum(132) == 402\n    get_max_sum(133) == 405\n    get_max_sum(134) == 408\n    get_max_sum(135) == 411\n    get_max_sum(136) == 414\n    get_max_sum(137) == 417\n    get_max_sum(138) == 420\n    get_max_sum(139) == 423\n    get_max_sum(140) == 426\n    get_max_sum(141) == 429\n    get_max_sum(142) == 432\n    get_max_sum(143) == 435\n    get_max_sum(144) == 438\n    get_max_sum(145) == 441\n    get_max_sum(146) == 444\n    get_max_sum(147) == 447\n    get_max_sum(148) == 450\n    get_max_sum(149) == 453\n    get_max_sum(150) == 456\n    get_max_sum(151) == 459\n    get_max_sum(152) == 462\n    get_max_sum(153) == 465\n    get_max_sum(154) == 468\n    get_max_sum(155) == 471\n    get_max_sum(156) == 474\n    get_max_sum(157) == 477\n    get_max_sum(158) == 480\n    get_max_sum(159) == 483\n    get_max_sum(160) == 486\n    get_max_sum(161) == 489\n    get_max_sum(162) == 492\n    get_max_sum(163"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nget_max_sum(5) == 7, \"get_max_sum is not implemented correctly.\" \nprint (\"correct\")"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == 8, \"Should return 8\"\nassert     max_length_list([1, 2, 3, 4]) == 4, \"Should return 4\"\nassert     max_length_list([1, 2]) == 2, \"Should return 2\"\nassert     max_length_list([1, 2, 3]) == 3, \"Should return 3\"\n\n'''\nEXERCISE\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5, \"max_length_list([1,2,3,4,5]): expected: 5, got: \" + str(max_length_list([1,2,3,4,5]))\nassert     max_length_list([1,2,3,4,5,6]) == 5, \"max_length_list([1,2,3,4,5,6]): expected: 5, got: \" + str(max_length_list([1,2,3,4,5,6]))\nassert     max_length_list([1,2,3,4,5,6,7]) == 7, \"max_length_list([1,2,3,4,5,6,7]): expected: 7, got: \" + str(max_length_list([1,2,3,4,5,6,7]))\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9, \"max_length_list([1,2,3,4,5,6,7,8,9]): expected: 9, got: \" + str(max_length_list([1,2,3,4,5,6,7,8,9]))\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10]) == 10, \"max_length_list([1,2,3,4,5,6,7,8,9,10]): expected: 10, got: \" + str(max_length_list([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list([1, 2, 3, 4]) == [3, 4], \"Error\"\nassert     max_length_list([1, 2, 3, 4, 5]) == [5], \"Error\"\nassert     max_length_list([1, 2, 3, 4, 5, 6]) == [6], \"Error\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7]) == [6], \"Error\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == [6], \"Error\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     max_length_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     max_length_list([1, 2, 3]) == [1, 2, 3]\nassert     max_length_list([]) == []\nassert     max_length_list([]) == []\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length_list([]) == ()\nassert     max_length_list([1]) == (1,)\nassert     max_length_list([1,2,3]) == (3,)\nassert     max_length_list([1,2,3,4,5]) == (5,)\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == (9,)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length_list([1,2,3,4]) == 4, \"Expected: 4\"\nassert     max_length_list([2,4,3,1,3,4]) == 4, \"Expected: 4\"\nassert     max_length_list([2,3,4,1,3]) == 4, \"Expected: 4\"\nassert     max_length_list([]) == 0, \"Expected: 0\"\nassert     max_length_list([-2,-4,-3,-1,-3]) == 4, \"Expected: 4\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length_list([]) == (), \"empty list\"\nassert     max_length_list([1, 2, 3]) == (3,), \"three items\"\nassert     max_length_list([]) == (), \"empty list\"\nassert     max_length_list([]) == (), \"empty list\"\nassert     max_length_list([1]) == (1,), \"one item\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Your Code Here\n    max_len = 0\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n\nassert max_length_list([1,2,3]) == 3\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,2,3,4,5)) == False, \"Distinct number in tuple\"\nassert     check_distinct((1,2,3,3,5)) == True, \"Distinct number in tuple\"\nassert     check_distinct((1,2,3,4,5)) == True, \"Distinct number in tuple\"\n\n\n'''\nThe following function takes as input a dictionary as {'a': 1, 'b':2, 'c':3} and\nthen return the count of distinct keys in the dictionary.\n'''\ndef count_distinct(dictionary):\n    '''\n    Write a function to check if given dictionary contains no duplicate keys.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct([1,2,3,4,5]) == True\nassert     check_distinct([1,2,3,4,5,5]) == False\nassert     check_distinct([5,5,5,5,5]) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_distinct([]) == True, 'empty tuple should return True'\nassert check_distinct((1, 2)) == False, 'tuple with two elements should return False'\nassert check_distinct((1, 2, 3)) == True, 'tuple with three elements should return True'\nassert check_distinct((1, 2, 2)) == False, 'tuple with three elements should return False'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(check_distinct((0, 0, 1, 1, 2, 2)))\nassert \nprint(check_distinct((0, 0, 1, 2, 2, 3)))\nassert \nprint(check_distinct((0, 1, 1, 2, 2, 3)))\nassert \nprint(check_distinct((0, 0, 1, 1, 2, 2, 3, 3)))\nprint(\"All the cases are correct!\")\nprint(\"All the cases are correct!\")"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_distinct((1,2,2)) == True, '1,2,2 -> True'\nassert     check_distinct((1,2,3)) == False, '1,2,3 -> False'\nassert     check_distinct((1,2,2,2,3)) == False, '1,2,2,2,3 -> False'\nassert     check_distinct((1,2,2,2,3,1)) == False, '1,2,2,2,3,1 -> False'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct(('A', 'A', 'A', 'A')) == True\nassert     check_distinct(('A', 'B', 'C', 'D', 'E')) == False\nassert     check_distinct(('A', 'B', 'C')) == True\nassert     check_distinct(('A', 'A', 'A')) == True\nassert     check_distinct(('B', 'B', 'C')) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct((1,2,3,4,5)) == True, \\\n    \"It should return True for (1,2,3,4,5)\"\nassert     check_distinct((1,2,3,4)) == False, \\\n    \"It should return False for (1,2,3,4)\"\nassert     check_distinct((1,2,3,3,4,5)) == False, \\\n    \"It should return False for (1,2,3,3,4,5)\"\nassert     check_distinct((1,2,3,4,5,6)) == True, \\\n    \"It should return True for (1,2,3,4,5,6)\"\n\nprint('All test cases passed')"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct((1, 1, 1, 2, 2))\nassert     not check_distinct((1, 1, 1, 2, 2, 4))\nassert     not check_distinct((1, 1, 1, 1, 2, 4, 4))\nassert     not check_distinct((1, 2, 2, 4, 4, 4, 4, 4))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('aabc') == 'a'\nassert     first_non_repeating_character('qwerty') == 'q'\nassert     first_non_repeating_character('ababab') == 'b'\nassert     first_non_repeating_character('abab') == 'a'\nassert     first_non_repeating_character('abc') == 'a'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character(\"abcddd\") == 'a'\nassert     first_non_repeating_character(\"abccabca\") == 'c'\nassert     first_non_repeating_character(\"aaa\") == 'a'\nassert     first_non_repeating_character(\"aaaa\") == 'a'\nassert     first_non_repeating_character(\"bbccb\") == 'b'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfirst_non_repeating_character('aabcdeffg') == 'f'\nfirst_non_repeating_character('xhhgf') == 'f'\nfirst_non_repeating_character('tmmzuxt') == 'z'\nfirst_non_repeating_character('drdrfne') == 'd'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character('aacb') == 'a'\nassert first_non_repeating_character('aabab') == 'a'\nassert first_non_repeating_character('aaab') == 'a'\nassert first_non_repeating_character('abcb') == 'a'\nassert first_non_repeating_character('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz') == 'z'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character('')     == '', 'test string with no non-repeated char'\nassert     first_non_repeating_character('abcd')     == '', 'test string with non-repeated char'\nassert     first_non_repeating_character('bcd')     == '', 'test string with only repeated char'\nassert     first_non_repeating_character('aeiou')     == 'e', 'test string with only repeated char'\nassert     first_non_repeating_character('aeiouf')     == '', 'test string with only repeated char'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_non_repeating_character('') == '', \"Empty string\"\nassert     first_non_repeating_character('a') == 'a', \"A string\"\nassert     first_non_repeating_character('ab') == 'a', \"A non-repeated character\"\nassert     first_non_repeating_character('abcd') == 'a', \"A non-repeated character\"\nassert     first_non_repeating_character('aabcd') == 'a', \"A non-repeated character\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character('aacd') == 'a'\nassert     first_non_repeating_character('abab') == 'b'\nassert     first_non_repeating_character('aabc') == 'a'\nassert     first_non_repeating_character('aabca') == 'a'\nassert     first_non_repeating_character('abcdefghijklmnopqrstuvwxyz') == 'z'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character('hello') == 'l'\nassert     first_non_repeating_character('aaaa') == 'a'\nassert     first_non_repeating_character('abra') == 'b'\nassert     first_non_repeating_character('abraa') == 'a'\nassert     first_non_repeating_character('abracadabra') == 'c'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character(\"abcdefg\") == None\nassert     first_non_repeating_character(\"abcde\") == None\nassert     first_non_repeating_character(\"abbb\") == \"b\"\nassert     first_non_repeating_character(\"\") == None\nassert     first_non_repeating_character(\"ab\") == None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_first_non_repeating_character(capsys):\n    \"\"\"\n    Given a string,\n    print the first non-repeated character in the string. If there is no non-repeated\n    character, print Not Found.\n    \"\"\"\n    assert first_non_repeating_character('abcde') == 'e'\n    out, err = capsys.readouterr()\n    assert out == 'e\\n'\n    assert err == ''\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (check_char('AABA') == True), \"Not OK\"\nassert     (check_char('AABAB') == False), \"OK\"\nassert     (check_char('AABABAAA') == True), \"OK\"\nassert     (check_char('AABABAAABAABAAA') == False), \"OK\"\nassert     (check_char('AABABAAABAABAABAABAAB') == False), \"OK\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_char('abcd') == True \nassert     check_char('abc') == False \nassert     check_char('abc') == True \nassert     check_char('a') == False \nassert     check_char('a') == True \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char('madam') \nassert not check_char('madam')\nassert     check_char('madam')\nassert not check_char('a')\nassert not check_char('a')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_char(\"apple\") == True\nassert check_char(\"apple\") == True\nassert check_char(\"\") == False\nassert check_char(\"a\") == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_char('') \nassert not check_char(' ')\nassert not check_char('Hello World!')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_char(\"a\") == True\nassert    check_char(\"ab\") == False\nassert    check_char(\"aasdf\") == False\nassert    check_char(\"\") == False\nassert    check_char(\"asdfgh\") == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_char('') == True, 'test_01_1'\nassert     check_char('abcdefghij') == False, 'test_01_2'\nassert     check_char('abcd') == False, 'test_01_3'\nassert     check_char('abcdxyz') == False, 'test_01_4'\nassert     check_char('xyz') == False, 'test_01_5'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_char('abc') == True\nassert     check_char('abc') == False\nassert     check_char('abc'.join('123')) == True\nassert     check_char(''.join(['1','2','3'])) == False\nassert     check_char('123') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(median_numbers(1,2,3)) #3\n\nassert\nprint(median_numbers(2,2,2)) #2\n\nassert\nprint(median_numbers(2,2,3)) #2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_numbers([1,2,3],[4,5,6],[7,8,9])    == 5.5, \"Wrong answer for median_numbers([1,2,3],[4,5,6],[7,8,9]): \" + str(5.5)\nassert     median_numbers([1,2,3,4],[5,6,7,8],[9,10,11,12]    )    == 7.5, \"Wrong answer for median_numbers([1,2,3,4],[5,6,7,8],[9,10,11,12]): \" + str(7.5)\nassert     median_numbers([1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]    )    == 6.0, \"Wrong answer for median_numbers([1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]): \" + str(6.0)\nassert     median_numbers([1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]    )    == 4.0, \"Wrong answer for median_numbers([1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]): \" + str(4.0)\nassert     median_numbers([1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21]    )    == 4.0, \"Wrong answer for median_numbers([1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21]): \" + str(4.0)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_numbers(10,6,8) == 7.5\nassert     median_numbers(10,10,6) == 10\nassert     median_numbers(4,5,7) == 5.5\nassert     median_numbers(10,6,8) == 7.5\nassert     median_numbers(1,2,3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_numbers(4,5,6) == 5.0\nassert median_numbers(7,8,9) == 6.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(-1,-2,-3) == -2.5\n\n'''\nWrite a function to find the median of three numbers.\n'''\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,1) == 1\nassert     median_numbers(1,2,2) == 2\nassert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,4) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers(4,5,6) == 5\nassert median_numbers(4,5,6) == 5\nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,1,1) == 1\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30, \"ERROR\"\nassert     sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45, \"ERROR\"\nassert     sum_of_digits([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 13, \"ERROR\"\nassert     sum_of_digits([0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1, \"ERROR\"\nassert     sum_of_digits([0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1, \"ERROR\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_of_digits([-1, -2, -3, -4]) == -7\nsum_of_digits([-1, -2, -3, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -3\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digits([-1, -2, 0, -4]) == -7\nsum_of_digit"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_of_digits([12345, 345, 678, 987]) == 32\nassert     sum_of_digits([23, 42, 63, 4]) == 8\nassert     sum_of_digits([22, 43, 63, 4]) == 11\n\nprint('test passed')\nprint()\n\n\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if it is prime and False if it is not.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([1,2,3,4]) == 3 + 2 + 4, \\\n        \"sum_of_digits([1,2,3,4]): The result should be 3 + 2 + 4 = 9.\"\nassert sum_of_digits([123,12,3,4]) == 6, \\\n        \"sum_of_digits([123,12,3,4]): The result should be 6 = 6.\"\nassert sum_of_digits([999,9,3,4]) == 12, \\\n        \"sum_of_digits([999,9,3,4]): The result should be 12 = 12.\"\nassert sum_of_digits([999,9,3,4,123]) == 15, \\\n        \"sum_of_digits([999,9,3,4,123]): The result should be 15 = 15.\"\nassert sum_of_digits([]) == 0, \\\n        \"sum_of_digits([]): The result should be 0.\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([12,0,21,2]) == 1+2+2+0\nassert    sum_of_digits([21,2]) == 1+2\nassert    sum_of_digits([]) == 0\nassert    sum_of_digits([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 10\nassert    sum_of_digits([11,4,9,3,0,4,7,2]) == 10\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_max_by_digits(digits):\n    '''\n    Find the maximum digit of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_of_digits_v2(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sum_of_squares(nums):\n    '''\n    Write a function to compute the sum of squares of each number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bitwise_xor((1,2,3), (3,1,1)) == (2,3,1)\nassert     bitwise_xor((1,2,3), (3,1,0)) == (2,3,3)\nassert     bitwise_xor((0,0,0), (0,0,0)) == (0,0,0)\nassert     bitwise_xor((0,0,0), (0,0,1)) == (0,0,1)\nassert     bitwise_xor((1,1,1), (0,1,1)) == (1,1,0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor((10, 20), (30, 40)) == (10, 30)\nassert     bitwise_xor((11, 10), (12, 12)) == (11, 12)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bitwise_xor(test_tup1, test_tup2) == (5, 2)\nassert     bitwise_xor(test_tup3, test_tup4) == (9, 8)\nassert     bitwise_xor(test_tup5, test_tup6) == (7, 8)\nassert     bitwise_xor(test_tup7, test_tup8) == (5, 2)\nassert     bitwise_xor(test_tup9, test_tup10) == (0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bitwise_xor((1, 1), (1, 1)) == (0, 1)\nassert     bitwise_xor((0, 0), (1, 1)) == (1, 1)\nassert     bitwise_xor((1, 1), (0, 0)) == (1, 1)\nassert     bitwise_xor((0, 0), (1, 1)) == (1, 1)\nassert     bitwise_xor((0, 1), (1, 1)) == (1, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bitwise_xor((3,4), (4,5)) == (0,1), \"Function call failed\"\nassert     bitwise_xor((4,5), (3,4)) == (1,0), \"Function call failed\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bitwise_xor((0, 1), (0, 0)) == (1, 0)\nassert     bitwise_xor((1, 0), (1, 0)) == (0, 0)\nassert     bitwise_xor((1, 1), (1, 1)) == (0, 0)\nassert     bitwise_xor((0, 0), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor((1, 2), (2, 3)) == (1, 2)\nassert     bitwise_xor((2, 3), (1, 2)) == (2, 3)\nassert     bitwise_xor((3, 1), (2, 3)) == (3, 2)\nassert     bitwise_xor((3, 2), (3, 1)) == (0, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bitwise_xor((1, 1), (1, 1)) == (0, 0), \\\n            \"Expected: (0, 0), Actual: {0}\".format(bitwise_xor((1, 1), (1, 1)))\nassert     bitwise_xor((0, 0), (1, 1)) == (1, 1), \\\n            \"Expected: (1, 1), Actual: {0}\".format(bitwise_xor((0, 0), (1, 1)))\nassert     bitwise_xor((0, 0), (0, 0)) == (0, 0), \\\n            \"Expected: (0, 0), Actual: {0}\".format(bitwise_xor((0, 0), (0, 0)))\nassert     bitwise_xor((1, 0), (0, 0)) == (1, 0), \\\n            \"Expected: (1, 0), Actual: {0}\".format(bitwise_xor((1, 0), (0, 0)))\nassert     bitwise_xor((0, 1), (0, 0)) == (1, 0), \\\n            \"Expected: (1, 0), Actual: {0}\".format(bitwise_xor((0, 1), (0, 0)))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bitwise_xor((2, 4, 6), (2, 4, 5)) == (0, 4, 7)\nassert     bitwise_xor((3, 2, 3), (5, 2, 3)) == (1, 0, 1)\nprint('correct')\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_freq([[1,2,3],\n                        [2,3,1],\n                        [2,3,4],\n                        [1,2,3,4]]) == 4, 'First example failed'\nassert     extract_freq([[2,3,4],\n                        [2,3,1,2],\n                        [2,3,1,2],\n                        [2,3,1,2]]) == 4, 'Second example failed'\nassert     extract_freq([[2,3,4],\n                        [2,3,1,2],\n                        [2,3,1,2],\n                        [2,3,1,2]]) == 2, 'Third example failed'\nassert     extract_freq([[2,3,4],\n                        [2,3,1,2],\n                        [2,3,1,2],\n                        [2,3,1,2]]) == 2, 'Fourth example failed'\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([]) == 0\nassert     extract_freq([1, 2, 3, 3]) == 2\nassert     extract_freq([1, 2, 3, 3, 3, 2, 1]) == 3\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_freq(['a', 'b', 'c']) ==     3\nassert     extract_freq(['a', 'b', 'a', 'c']) ==     3\nassert     extract_freq([]) ==     0\nassert     extract_freq([1, 2, 3, 4, 5]) ==     1\nassert     extract_freq([1, 1, 1, 1, 1]) ==     1"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([\n                (1, 2),\n                (3, 1),\n                (1, 2)\n            ]) == 2, \"Should be 2.\"\nassert     extract_freq([\n                (1, 2, 3),\n                (1, 2),\n                (3, 1)\n            ]) == 1, \"Should be 1.\"\nassert     extract_freq([\n                (1, 2, 3),\n                (1, 2),\n                (3, 1, 2)\n            ]) == 3, \"Should be 3.\"\nassert     extract_freq([\n                (1, 2, 3),\n                (1, 2),\n                (1, 2)\n            ]) == 2, \"Should be 2.\""
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq(test_list) == {0: 1, 1: 2, 2: 1, 3: 2, 4: 1, 5: 1}\nassert     extract_freq(test_list_2) == {0: 1, 1: 2, 2: 2, 3: 2}\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([('a', 2), ('a', 2)]) == 1\nassert     extract_freq([('a', 2), ('b', 3), ('b', 4)]) == 2\nassert     extract_freq([('a', 2), ('a', 3), ('a', 4)]) == 3\nassert     extract_freq([('a', 2), ('b', 3), ('c', 4)]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq([]) == 0, 'No tuples'\nassert     extract_freq([(1, 2), (2, 3), (1, 4), (2, 4), (1, 3), (1, 2), (2, 4)]) == 7, 'Correct number of unique tuples'\nassert     extract_freq([(1, 2), (2, 3), (1, 4), (2, 4), (1, 3), (1, 2)]) == 6, 'Correct number of unique tuples'\nassert     extract_freq([(1, 2), (2, 3), (1, 4), (2, 4), (1, 3), (1, 2)]) == 6, 'Correct number of unique tuples'\nassert     extract_freq([(1, 2), (2, 3), (1, 4), (2, 4), (1, 3), (1, 2), (2, 4)]) == 7, 'Correct number of unique tuples'\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([(1, 2), (2, 3), (4, 1)]) == 2\nassert     extract_freq([(1, 2), (2, 3), (4, 1)]) == 2\nassert     extract_freq([(1, 2), (2, 3), (4, 1)]) == 2\nassert     extract_freq([(1, 2), (2, 3), (4, 1)]) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([('a', 1), ('a', 2), ('b', 1), ('c', 1), ('c', 2)]) == 3\nassert     extract_freq([('a', 1), ('a', 2), ('b', 1), ('c', 1), ('c', 2), ('d', 1)]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([('apple', 3), ('pear', 2), ('orange', 5), ('banana', 5), ('orange', 5)]) == 4\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     add_nested_tuples((7,8,9),(1,2,3)) == (7,8,9,1,2,3)\nassert     add_nested_tuples((1,2,3),(7,8,9)) == (1,2,3,7,8,9)\nassert     add_nested_tuples((1,2,3),(1,2,3)) == (1,2,3,1,2,3)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_of_three(x,y,z):\n    '''\n    Write a function to find the max of three numbers in a nested tuple.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples(tup1, tup2) == (3, 1, 9, 1, 2, 1, 0, 0, 1, 3)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_nested_tuples(((1, 2), (3, 4)), ((1, 2), (3, 4))) == ((2, 4), (6, 8))\nassert     add_nested_tuples(((1, 2), (3, 4)), ((1, 2), (3, 4, 5))) == ((2, 4), (6, 8, 10))\nassert     add_nested_tuples(((1, 2), (3, 4)), ((1, 2, 3), (4, 5, 6))) == ((2, 4, 3), (6, 8, 10, 7))\n\n\ndef add_and_multiply_nested_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to perform addition and multiplication of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (add_nested_tuples((1,2,3),(1,2,3)) == (1,4,6))\nassert     (add_nested_tuples((1,2,3),(1,2,4)) == (1,2,5))\n\n'''"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples(((1, 2), (3, 4), (5, 6)), (1, 2)) == ((1, 2), (3, 4), (5, 6))\nassert     add_nested_tuples(((1, 2), (3, 4), (5, 6)), (1, 3)) == ((1, 2), (3, 8), (5, 6))\nassert     add_nested_tuples(((1, 2), (3, 4), (5, 6)), (1, 2, 3)) == ((1, 2, 3), (3, 4), (5, 6))\nassert     add_nested_tuples(((1, 2), (3, 4), (5, 6)), (1, 2, 3, 5)) == ((1, 2, 3, 5), (3, 4), (5, 6))\nassert     add_nested_tuples(((1, 2), (3, 4), (5, 6)), (1, 3, 2, 5)) == ((1, 2, 3, 5), (3, 8), (5, 6))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_nested_tuples((),()) == (0,0)\nassert     add_nested_tuples(((1,2),),()) == (1,2)\nassert     add_nested_tuples(((1,2),(3,4)),()) == (4,6)\nassert     add_nested_tuples(((1,2),(3,4)),((5,6),)) == (5,6)\nassert     add_nested_tuples(((1,2),(3,4)),((5,6,7),)) == (7,10)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert minimum(7,3) == 3 \nassert minimum(100,200) == 100\nassert minimum(0,0) == 0\nassert minimum(-3,-1) == -3\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minimum(3,5) == 3, \"This should be 3\"\nassert     minimum(-1,-2) == -1, \"This should be -1\"\nassert     minimum(0,5) == 0, \"This should be 0\"\nassert     minimum(3.5,5) == 3.5, \"This should be 3.5\"\nassert     minimum(3.5,-5) == -5, \"This should be -5\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minimum(100,5) == 5\nassert     minimum(5,100) == 5\nassert     minimum(-100,5) == -100\nassert     minimum(100,100) == 100\nassert     minimum(0,-100) == -100\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert minimum(100,300) == 100\nassert minimum(300,100) == 100\nassert minimum(100,100) == 100\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minimum(2,4) == 2\nassert    minimum(-5,7) == -5\nassert    minimum(-5,-7) == -5\nassert    minimum(-5,-5) == -5\nassert    minimum(2.2,5.8) == 2.2\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minimum(5,6) == 1, \"Minimum of 2 numbers is not 1\"\nassert     minimum(9,8) == 1, \"Minimum of 2 numbers is not 1\"\nassert     minimum(6,4) == 1, \"Minimum of 2 numbers is not 1\"\nassert     minimum(1,9) == 1, \"Minimum of 2 numbers is not 1\"\nassert     minimum(10,2) == 1, \"Minimum of 2 numbers is not 1\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minimum(10,20) == 10\nassert     minimum(-10,-20) == -20\nassert     minimum(-100,20) == -100\nassert     minimum(-1.0,-1.5) == -1.5\nassert     minimum(-1.5,3.5) == -1.5\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minimum(4,6) == 4\nassert minimum(7,7) == 7\nassert minimum(5,2) == 2\nassert minimum(-4,4) == -4\nassert minimum(2,4) == 2\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_tuplex((5,2,4),(5,2,4)) == True, \"The first tuple is correct\"\nassert     check_tuplex((5,2,4),(5,2,4)) == False, \"The first tuple is incorrect\"\nassert     check_tuplex((5,2,4),(3,4,5)) == False, \"The second tuple is incorrect\"\nassert     check_tuplex((5,2,4),(1,2,4)) == True, \"The third tuple is correct\"\nassert     check_tuplex((5,2,4),(5,2,4,5)) == False, \"The fourth tuple is incorrect\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_tuplex((1,2),(1,2)) == True, \"Should be True\"\nassert     check_tuplex((1,2),(2,2)) == True, \"Should be True\"\nassert     check_tuplex((1,2),(1,1)) == False, \"Should be False\"\nassert     check_tuplex((1,2,3),(1,2)) == False, \"Should be False\"\nassert     check_tuplex((1,2),(1,2,3)) == False, \"Should be False\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True,\\\n    \"Fail: check_tuplex((1,2,3),(1,2,3)) should be True\"\nassert     check_tuplex((1,2,3),(1,2,3,4)) == False,\\\n    \"Fail: check_tuplex((1,2,3),(1,2,3,4)) should be False\"\nassert     check_tuplex((1,2,3),(1,3,4)) == False,\\\n    \"Fail: check_tuplex((1,2,3),(1,3,4)) should be False\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_tuplex([(1, 'a'),(2, 'b'),(3, 'c')],'a') == True\nassert     check_tuplex([(1, 'a'),(2, 'b'),(3, 'c')],'x') == False\nassert     check_tuplex([(1, 'a'),(2, 'b'),(3, 'c')],'d') == False\nassert     check_tuplex([(1, 'a'),(2, 'b'),(3, 'c')],'c') == True\nassert     check_tuplex([(1, 'a'),(2, 'b'),(3, 'c')],'a') == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert check_tuplex([1,2,3],(1,2))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex([],('a','b','c')) == False \nassert     check_tuplex((1,2,3,4,5),('a','b','c')) == True \nassert     check_tuplex((1,2,3,4,5),(1,2,3,4)) == True \nassert     check_tuplex((1,2,3,4,5),(1,2,3)) == True \nassert     check_tuplex((1,2,3,4,5),(1,2,3,'a')) == False \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Parity(7) == False, \"The returned value should be False\"\nassert     find_Parity(8) == False, \"The returned value should be False\"\nassert     find_Parity(9) == True, \"The returned value should be True\"\nassert     find_Parity(4) == True, \"The returned value should be True\"\nassert     find_Parity(-6) == True, \"The returned value should be True\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_Parity(0)\n    \n    assert \n    find_Parity(1)\n    \n    assert \n    find_Parity(-1)\n    \n    assert \n    find_Parity(-2)\n\ndef find_Parity_2(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_Parity(20) == True, \"20 is odd\"\n    find_Parity(11) == True, \"11 is odd\"\n    find_Parity(19) == False, \"19 is even\"\n    find_Parity(-3) == False, \"The negative number is even\"\n    find_Parity(-19) == False, \"The negative number is even\"\nprint('test passed!')"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(1) == True, \"Input 1\"\nassert     find_Parity(2) == True, \"Input 2\"\nassert     find_Parity(3) == False, \"Input 3\"\nassert     find_Parity(6) == True, \"Input 6\"\nassert     find_Parity(8) == False, \"Input 8\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(2) ==    True\nassert     find_Parity(4) ==    False\nassert     find_Parity(7) ==    True\nassert     find_Parity(8) ==    True\nassert     find_Parity(9) ==    True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Parity(4) ==    True\nassert     find_Parity(5) ==    False\nassert     find_Parity(11) ==    True\nassert     find_Parity(-11) ==    False\nassert     find_Parity(11.0) ==    False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Parity(1) == 1\nassert    find_Parity(2) == 0\nassert    find_Parity(10) == 1\nassert    find_Parity(11) == 0\nassert    find_Parity(-1) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(4) == False, \"Test case 1: wrong result\"\nassert     find_Parity(5) == True, \"Test case 2: wrong result\"\nassert     find_Parity(6) == True, \"Test case 3: wrong result\"\nassert     find_Parity(7) == False, \"Test case 4: wrong result\"\nassert     find_Parity(8) == False, \"Test case 5: wrong result\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(10) == True, \"this should be True\"\nassert     find_Parity(9) == False, \"this should be False\"\nassert     find_Parity(8) == False, \"this should be False\"\n\n'''\n\nQuestion 8:\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rearrange_bigger(531) == 531\nassert     rearrange_bigger(1024) == 1023\nassert     rearrange_bigger(1023) == 1024\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(100) == 101\nassert     rearrange_bigger(200) == 201\nassert     rearrange_bigger(1000) == 1001\nassert     rearrange_bigger(1111) == 1111\nassert     rearrange_bigger(111111) == 111111\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rearrange_bigger(10200) == 12201\nassert     rearrange_bigger(1234) == 4321\nassert     rearrange_bigger(1321) == 123\nassert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(321) == 1231\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(15) == 24\nassert     rearrange_bigger(0) == 0\nassert     rearrange_bigger(-5) == -5\nassert     rearrange_bigger(1) == 2\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(213) == 231\nassert     rearrange_bigger(2130) == 2133\nassert     rearrange_bigger(2313) == 2133\nassert     rearrange_bigger(1213) == 2131\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rearrange_bigger(56) == 70\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(15) == 24\nassert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(1234) == 4321\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef rearrange_bigger_2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nrearrange_bigger(54321) == 54321\nassert \nrearrange_bigger(101) == 1\nassert \nrearrange_bigger(1234) == 12344\nassert\nrearrange_bigger(2147483647) == 2147483647\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nNote:\n\nThe number of elements in the first array is less than or equal to 2000.\nThe number of elements in the second array is less than or equal to 2000.\nThe length of nums1 and nums2 are the same.\nk is a positive integer and fits into range [0, 2000].\nYou may return the pairs in any order.\n'''"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1,3,11,10], [2,4,14,9], 3) == [[1,2],[3,4],[11,14]]\nassert     k_smallest_pairs([4,5,6,7,8,9,10,1], [1,2,3,7,8,9,10,6], 4) == [[5,6],[1,3],[7,8],[10,9]]\nassert     k_smallest_pairs([-4,-2,-1,0,1,2,3], [-5,-1,-2,-2,1,2,2,1], 3) == [[-1,-2],[-4,-1],[-1,-1]]\nassert     k_smallest_pairs([1,1,1,1], [1,1,1,1], 1) == [[1,1]]\n\ndef k_smallest_pairs_optimized(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap, res = [(nums1[i] + nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))], []\n    heapq.heapify(heap)\n    for _ in range(k):\n        a, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([[4,1,2],[5,2,4],[3,2,3]],[[1,2],[2,3],[3,4]],2) == [[1,2],[2,3],[3,4]]\nassert     k_smallest_pairs([[4,1,2],[5,2,4],[3,2,3]],[[1,2],[2,3],[3,4]],3) == [[1,2],[2,3],[3,4]]\nassert     k_smallest_pairs([[4,1,2],[5,2,4],[3,2,3]],[[1,2],[2,3],[3,4]],2) == [[1,2],[2,3],[3,4]]\nassert     k_smallest_pairs([[4,1,2],[5,2,4],[3,2,3]],[[1,2],[2,3],[3,4]],4) == [[1,2],[2,3],[3,4]]\nassert     k_smallest_pairs([[4,1,2],[5,2,4],[3,2,3]],[[1,2],[2,3],[3,4]],0) == [[]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([4,5,1,2], [2,4,1,3], 3) == [[1,2],[2,3],[4,5]]\nassert     k_smallest_pairs([1,4,2,6,3,2,4], [1,2,3,4,4,5], 4) == [[1,2],[2,3],[2,4],[2,5]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([2,1,5,7,2,0,5], [2,4,5,8,2,4,5], 3) == [[2,0],[1,4],[5,2]]\nassert k_smallest_pairs([1,1,1,1], [2,2,2,2], 4) == [[1,1],[1,1]]\n\ndef min_heap_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # the number of pairs\n    n = len(nums1) * len(nums2)\n    \n    # use the heap\n    pairs = []\n    heapq.heapify(pairs)\n    \n    # traverse in the larger nums2\n    for i in range(len(nums2)):\n        \n        # get the smallest element\n        min_element = heapq.heappop(pairs)\n        \n        # if we have k, add to the answer\n        if len(pairs) == k:\n            return pairs\n        \n        # add nums1[i] to the heap\n        heapq.heappush(pairs, nums1[i])\n        \n        # add nums2[i] to the heap\n        heapq.heappush(pairs, nums2[i])\n    \n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6], 3) == [(1, 2), (1, 4), (1, 6)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1,3,4,6], \n                        [2,2,3,3,4], \n                        2) == [[1,3],[3,4]]\nassert     k_smallest_pairs([1,2,5,6,7], \n                        [3,4,6,8,10], \n                        5) == [[1,2],[2,3],[5,6],[6,7],[7,8]]\nassert     k_smallest_pairs([1,2,3,4,5], \n                        [3,4,5,6,7,8], \n                        2) == []\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == (1*1, 2*3)\nassert     min_product_tuple([(3,2),(2,3)]) == (2*2, 3*3)\nassert     min_product_tuple([(3,3),(3,4),(3,5),(3,6),(3,7)]) == (3*3, 4*4)\nassert     min_product_tuple([(3,3),(4,4),(5,5),(6,6),(7,7)]) == (3*3, 4*4)\nassert     min_product_tuple([(3,3),(3,4),(3,5),(3,6),(3,7),(3,8)]) == (3*3, 4*4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(2, 2), (3, 1), (1, 1), (2, 1)]) == (2, 2)\nassert     min_product_tuple([(1, 2), (3, 1), (2, 1), (2, 1)]) == (1, 2)\nassert     min_product_tuple([(5, 3), (3, 5), (4, 3), (2, 3)]) == (3, 5)\nassert     min_product_tuple([(1, 1), (2, 2), (3, 1), (4, 1)]) == (2, 2)\nassert     min_product_tuple([(4, 3), (1, 1), (5, 2), (1, 1)]) == (1, 1)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(3,4),(2,3),(4,5)]) == ((2,3),(4,5))\nassert     min_product_tuple([(2,4),(3,2),(5,6)]) == ((2,4),(3,2))\nassert     min_product_tuple([(5,4),(2,3),(6,2)]) == ((5,4),(2,3))\nassert     min_product_tuple([(3,2),(3,3),(3,4)]) == ((3,2),(3,3))\nassert     min_product_tuple([(1,2),(2,1),(2,1)]) == ((1,2),(2,1))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([(1,2),(2,3),(3,4)]) == (1,2)\nassert     min_product_tuple([(1,2),(2,4),(3,5)]) == (1,2)\nassert     min_product_tuple([(1,2),(3,5),(4,6)]) == (1,2)\nassert     min_product_tuple([(1,2),(1,2),(1,2),(1,2)]) == (1,2)\nassert     min_product_tuple([(1,2),(3,5),(4,6),(1,2),(3,5)]) == (1,2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_product_tuple([(1,2),(3,4),(5,6)]) == (1,2)\nassert     min_product_tuple([(5,6),(3,4),(1,2)]) == (3,4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == (1, 2)\nassert min_product_tuple([(2, 3), (4, 5), (6, 7)]) == (2, 3)\nassert min_product_tuple([(1, 2), (3, 6), (5, 7)]) == (1, 2)\nassert min_product_tuple([(1, 2), (3, 4), (5, 7)]) == (3, 4)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_product_tuple([(2, 3), (4, 5), (4, 5), (3, 2), (2, 4), (5, 3)]) == 1.0, \"Wrong result\"\nassert     min_product_tuple([(2, 3), (4, 5), (3, 2), (2, 4), (5, 3)]) == 1.0, \"Wrong result\"\nassert     min_product_tuple([(2, 3), (4, 5), (4, 5), (3, 2), (2, 4), (5, 3)]) == 3.0, \"Wrong result\"\nassert     min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]) == 0.0, \"Wrong result\"\nassert     min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]) == 0.0, \"Wrong result\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_val([1,3,9])    ==    1\nassert     min_val([True, False, 'foo'])    ==    False\nassert     min_val([False, False, 0, 0, 0])    ==    False\nassert     min_val([-5, -4, -3, -2, -1])    ==    -5\nassert     min_val([])    ==    None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_val([1,2,3]) == 1, 'Error!'\nassert     min_val([1,2,'3']) == 1, 'Error!'\nassert     min_val([]) == None, 'Error!'\nassert     min_val([1,2,3,4]) == 1, 'Error!'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([3,2,1,10]) == 1, \"Wrong Output\"\nassert     min_val([1,2,3,4,5]) == 1, \"Wrong Output\"\nassert     min_val([-10,0,12,-1,-40,-30,100]) == -1, \"Wrong Output\"\nassert     min_val([]) == None, \"Wrong Output\"\nassert     min_val([3,2,1,10,2,1,10,4,3]) == 1, \"Wrong Output\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_val([]) == None\nassert     min_val([True]) == True\nassert     min_val([2,3,4]) == 2\nassert     min_val([False,False]) == False\nassert     min_val([10,9,8,7,6,5,4,3,2,1]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_val([1,2,3]) == 1\nassert     min_val([4,5,3]) == 3\nassert     min_val([-5,-2,0,4]) == -5\nassert     min_val([1,2,1,2,3,2,2]) == 1\nassert     min_val([-5,-2,0,4]) == -5\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_val([1,2,3,4,5]) == 1\nassert min_val([6,7,8,0]) == 0\nassert min_val([1,2,3,4,5,-6]) == -6\n\nprint(\"min_val: {}\".format(min_val.__doc__))\n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([5,4,2,5,6,4,2,3]) == 2\n\n\n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_val([True, False, 1.2, 1, 2, -1, 0, 1]) == -1\nassert     min_val([3, -4, 2]) == -4\n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case', 'Not a snake case word'\nassert     snake_to_camel('snake_Case') =='snake_case', 'Not a snake case word'\nassert     snake_to_camel('snake_case') == 'Snake_case', 'Not a snake case word'\nassert     snake_to_camel('snake_Case') =='snake_Case', 'Not a snake case word'\nassert     snake_to_camel('snake_case') == 'Snake_case', 'Not a snake case word'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake_case_word') =='snakeCasedWord'\nassert     snake_to_camel('snake_case_word_2') =='snakeCasedWord2'\nassert     snake_to_camel('snake_case_word_3') =='snakeCasedWord3'\nassert     snake_to_camel('snake_case_word_4') =='snakeCasedWord4'\nassert     snake_to_camel('snake_case_word_5') =='snakeCasedWord5'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('my_second_name') =='mySecondName'\nassert     snake_to_camel('my_second_name_for_test') =='mySecondNameForTest'\nassert     snake_to_camel('my_second_name_') =='mySecondName'\nassert     snake_to_camel('my_second_name_my_second_name') =='mySecondNameMySecondName'\nassert     snake_to_camel('my_second_name_my_second_name_') =='mySecondNameMySecondName'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case_snake_case') =='snake_case_snakeCase', 'Wrong'\nassert     snake_to_camel('snake_case_snake_case_snake_case_snake_case') =='snake_case_snakeCase_snakeCase_snakeCase_snake_case', 'Wrong'\nassert     snake_to_camel('snake_case_snake_case_snake_case_snake_case') =='snakeCase_snakeCase_snakeCase_snake_case', 'Wrong'\nassert     snake_to_camel('snake_case_snake_case_snake_case') =='snakeCase_snake_case', 'Wrong'\nassert     snake_to_camel('snake_case_snake_case_snake_case') =='snake_case_snake_case', 'Wrong'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('my_snake_case') =='mySnakeCase', 'incorrect'\nassert     snake_to_camel('my_snake_case_2') =='mySnakeCase2', 'incorrect'\nassert     snake_to_camel('my_snake_case_3') =='mySnakeCase3', 'incorrect'\nassert     snake_to_camel('my_snake_case_4') =='mySnakeCase4', 'incorrect'\nassert     snake_to_camel('my_snake_case_5') =='mySnakeCase5', 'incorrect'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(snake_to_camel('snake_camel_string'))\nassert snake_to_camel('snake_Camel_string') =='snakeCamelString'\nassert snake_to_camel('snake_camel_string_') =='snakeCamelString'\nassert snake_to_camel('snake_camel_string_ with_spaces') =='snakeCamelStringWithSpaces'\nassert snake_to_camel('snake_camel_string_with_underscores') =='snakeCamelStringWithUnderscores'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCased'\nassert     snake_to_camel('snake_case_') =='snakeCased'\nassert     snake_to_camel('snake_case__') =='snakeCased'\nassert     snake_to_camel('snake_case_') =='snakeCased'\nassert     snake_to_camel('snake_case___') =='snakeCased'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert snake_to_camel(\"hello_world\") == \"HelloWorld\"\nassert snake_to_camel(\"hello_world_2\") == \"HelloWorld2\"\nassert snake_to_camel(\"hello_world_3\") == \"HelloWorld3\"\nassert snake_to_camel(\"hello_world_4\") == \"HelloWorld4\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nl = [1,2,3,4,5,6,7,8,9,10]\nassert remove_odd(l) == l[::2]"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd([1,2,3,4]) == [1,3,4]\nassert     remove_odd([1,2,3,4,5,6]) == [1,3,5,6]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([1,2,3,4,5,6]) ==    [1,3,5,6]\nassert remove_odd([]) == []\nassert remove_odd([1,1]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd([]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,1]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,1,2]) == [1,3,5,7,9]"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd([]) == []\nassert     remove_odd([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_odd([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_odd([0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd([2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24, 26, 28, 30]) == \n    [2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24]\nassert     remove_odd([2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32]) == \n    [2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24]\nassert     remove_odd([2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24, 30, 32]) == \n    [2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24]\nassert     remove_odd([2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24, 26, 28, 30, 32]) == \n    [2, 4, 6, 8, 10, 14, 15, 16, 18, 20, 22, 24]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_nth_element([(1, 1), (2, 2), (3, 3)], 2) == (2, 2)\nassert     extract_nth_element([(1, 1), (2, 2), (3, 3)], 3) == (3, 3)\nassert     extract_nth_element([(1, 1), (2, 2), (3, 3)], 1) == (1, 1)\n\ndef sort_using_lambda(list1):\n    '''\n    Write a program to sort the list of tuples using Lambda.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == ('a', 1), \"incorrect\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('b', 2), \"incorrect\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 3) == ('c', 3), \"incorrect\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 4) == ('a', 1), \"incorrect\"\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 5) == ('c', 3), \"incorrect\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nextract_nth_element([], 0) == None\nextract_nth_element([1,2,3,4], 0) == 1\nextract_nth_element([1,2,3,4], 1) == 2\nextract_nth_element([1,2,3,4], 2) == 3\nextract_nth_element([1,2,3,4], 3) == 4\nextract_nth_element([1,2,3,4], 4) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)], 1) == 1\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)], 2) == 3\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)], 3) == 6\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)], 4) == 5\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)], 5) == 6\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(extract_nth_element([(1,2),(3,4),(5,6)], 1) == (1,2))\nprint(extract_nth_element([(1,2),(3,4),(5,6)], 2) == (3,4))\nprint(extract_nth_element([(1,2),(3,4),(5,6)], 3) == (5,6))\nprint(extract_nth_element([(1,2),(3,4),(5,6)], 4) == (5,6))\n\nprint(extract_nth_element([], 1) == None)\nprint(extract_nth_element([], 2) == None)\nprint(extract_nth_element([], 3) == None)\nprint(extract_nth_element([], 4) == None)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_nth_element([(2, 3), (1, 2), (3, 2)], 1) == 2\nassert     extract_nth_element([(2, 3), (1, 2), (3, 2)], 2) == 3\nassert     extract_nth_element([(2, 3), (1, 2), (3, 2)], 0) == 1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_nth_element([(1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4)], 0) == (1, 2, 3, 4)\nassert     extract_nth_element([(1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4)], 1) == (1, 2, 3, 4)\nassert     extract_nth_element([(1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4)], 2) == (1, 2, 3, 4)\nassert     extract_nth_element([(1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4)], 3) == (1, 2, 3, 4)\nassert     extract_nth_element([(1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4)], 4) == (1, 2, 3, 4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_k_sorted_arrays(arr1, arr2, k):\n    '''\n    Write a function to count the number of k sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert extract_nth_element([(1,2),(3,4),(5,6)], 1) == (1,2), \"extract_nth_element: Wrong output\"\nassert extract_nth_element([(1,2),(3,4),(5,6)], -1) == (3,4), \"extract_nth_element: Wrong output\"\nassert extract_nth_element([(1,2),(3,4),(5,6)], 2) == (5,6), \"extract_nth_element: Wrong output\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_nth_element([(1,2),(3,4),(5,6)], 1) == 2, \"Wrong output for {}\".format(extract_nth_element([(1,2),(3,4),(5,6)], 1))\nassert     extract_nth_element([(1,2),(3,4),(5,6)], 3) == 5, \"Wrong output for {}\".format(extract_nth_element([(1,2),(3,4),(5,6)], 3))\nassert     extract_nth_element([(1,2),(3,4),(5,6)], 1) == 2, \"Wrong output for {}\".format(extract_nth_element([(1,2),(3,4),(5,6)], 1))\nassert     extract_nth_element([(1,2),(3,4),(5,6)], 2) == 3, \"Wrong output for {}\".format(extract_nth_element([(1,2),(3,4),(5,6)], 2))\nassert     extract_nth_element([(1,2),(3,4),(5,6)], 3) == 6, \"Wrong output for {}\".format(extract_nth_element([(1,2),(3,4),(5,6)], 3))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \noverlapping([1,2,3,4,5,6], [1,2,3,4,5,6]) == True\nassert \noverlapping([1,2,3,4,5,6], [1,5,6,7,8]) == False\n\ndef two_sum(list1,target):\n    '''\n    Write a python function to check whether the target number exists in the sequence or not.\n    '''\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     overlapping([1,2,3,4],[2,3,4,5,6]) == False, \"Overlapping\"\nassert     overlapping([1,2,3,4],[2,3,4,5]) == True, \"Overlapping\"\nassert     overlapping([1,2,3,4],[2,3,4]) == False, \"Overlapping\"\nassert     overlapping([1,2,3,4],[2,3]) == False, \"Overlapping\"\nassert     overlapping([1,2,3,4],[2,3,4,5]) == False, \"Overlapping\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     overlapping(['a','b','c'],['b','d','c']) == True, \"Incorrect\"\nassert     overlapping(['a','b','c'],['b','d','c']) == False, \"Incorrect\"\nassert     overlapping(['a','b','c'],['a','d','e','c']) == True, \"Incorrect\"\nassert     overlapping(['a','b','c'],['a','d','e','c']) == False, \"Incorrect\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     overlapping([1,2,3,5,7,8,9,10,12],[1,2,3,5,7,8,9]) == True, \"Error in: overlapping\"\nassert     overlapping([1,2,3,5,7,8,9,10,12],[1,2,3,5,7,8,9,10,11]) == False, \"Error in: overlapping\"\nassert     overlapping([1,2,3,5,7,8,9,10,12],[1,2,3,5,7,8,9,10,10]) == False, \"Error in: overlapping\"\nassert     overlapping([1,2,3,5,7,8,9,10,12],[1,2,3,5,7,8,9,10,11,12]) == True, \"Error in: overlapping\"\nassert     overlapping([1,2,3,5,7,8,9,10,12],[1,2,3,5,7,8,9,10,11,12,13]) == False, \"Error in: overlapping\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     overlapping([1,2,3,4,5,6,7,8,9],range(10)) == True, \"Overlap\"\nassert     overlapping([1,2,3,4,5,6,7,8,9],range(10,20)) == False, \"No overlap\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     overlapping([1,2,3,4],[3,4,5]) == True, \"wrong\"\nassert    overlapping([1,2,3,4],[1,2]) == True, \"wrong\"\nassert    overlapping([1,2,3,4],[2,3]) == True, \"wrong\"\nassert    overlapping([1,2,3,4],[5]) == False, \"wrong\"\nassert    overlapping([1,2,3,4],[4,5]) == False, \"wrong\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     overlapping([1,2,3],(1,2,3))==True, \"should return True\"\nassert    overlapping([1,2,3],[4,5])==False, \"should return False\"\nassert    overlapping([1,2],[1,2])==True, \"should return True\"\nassert    overlapping([1,2,3,4],[1,2,3,4])==False, \"should return False\"\nassert    overlapping([1,2,3,4,5],[1,2,3,4,5])==True, \"should return True\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert overlapping([1,2,3],[1,2,3]) == False, 'a'\nassert overlapping([1,2,3],[1,3,2]) == True, 'b'\nassert overlapping([1,2,3],[2,1,3]) == True, 'c'\nassert overlapping([1,2,3],[3,2,1]) == False, 'd'\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef list_duplicate_removal(list1,list2):  \n    '''\n    Write a python function to remove duplicates from list.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_Product([1,4,2,3,3]) == 4\nassert     max_Product([-1,3,2,3,3]) == 6\nassert     max_Product([-1,3,2,3,4]) == 6\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\narr = [-1, -2, -1, -4]\n\nmax_Product(arr) == "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Product([0,8,2,1,0]) == (0, 8)\nassert max_Product([1,2,3]) == (1,2)\nassert max_Product([0,0]) == (0,0)\nassert max_Product([-1,2,-5]) == (-1,2)\nassert max_Product([-1,0]) == (0,0)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Product([10, 1, 2, 4, 5, 4, 10, 8, 4]) == (10, 15), \"Wrong answer\"\nassert     max_Product([10, 1, 2, 3, 5, 4, 10, 8, 4]) == (10, 20), \"Wrong answer\"\nassert     max_Product([5, 10, 4, 5, 10, 8, 4]) == (10, 50), \"Wrong answer\"\nassert     max_Product([4, 4, 4, 4, 4]) == (4, 4), \"Wrong answer\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Product([4,2,3]) == 3\nassert max_Product([4,2,3,4]) == 4\nassert max_Product([1,4,3,2,5,6]) == 50\nassert max_Product([1,4,3,2,5,6,7]) == 70\nassert max_Product([1,4,3,2,5,6,7,8]) == 90\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([1,2,3,4,5,6]) == 6, \"Error in max_Product\"\nassert     max_Product([1,2,3,4,5,6,7,8,9,10]) == 60, \"Error in max_Product\"\nassert     max_Product([-1,2,-3,-4,-5,-6]) == -24, \"Error in max_Product\"\nassert     max_Product([-1,-2,-3,-4,-5,-6]) == -24, \"Error in max_Product\"\nassert     max_Product([1,-2,-3,-4,-5,-6]) == 60, \"Error in max_Product\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Product([3,2,1]) == 6, \"Wrong output\"\nassert     max_Product([1,3,2]) == 6, \"Wrong output\"\nassert     max_Product([3,3,2]) == 12, \"Wrong output\"\nassert     max_Product([2,4,5]) == 60, \"Wrong output\"\nassert     max_Product([1,5,4]) == 120, \"Wrong output\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_Product([-1,-2,-3,-4]) == (-1,4), \"Incorrect result\"\n\n\n\ndef max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # code here\n    from collections import defaultdict\n    hashMap = defaultdict(int)\n    max_product = -1\n    for num in arr:\n        hashMap[num] += 1\n        if hashMap[num] > max_product:\n            max_product = hashMap[num]\n    for num in arr:\n        if hashMap[num] == max_product:\n            return num, num * max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Product([5,6,7,8,9]) == 12, 'Wrong Output'\nassert     max_Product([-1,3,5,7]) == 15, 'Wrong Output'\nassert     max_Product([-2,5,7,9,13]) == 50, 'Wrong Output'\nassert     max_Product([5,8,6,9]) == 81, 'Wrong Output'\nassert     max_Product([-10,-9,8,7,5,4,3,2,1]) == 720, 'Wrong Output'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([('a', 1), ('b', 2), ('a', 2), ('a', 1)]) == ['a']\nassert     group_tuples([('a', 1), ('b', 2), ('a', 2)]) == ['a']\nassert     group_tuples([('a', 1), ('b', 2), ('a', 2), ('a', 1), ('b', 2), ('a', 2)]) == ['a']\nassert     group_tuples([('a', 1), ('b', 2), ('a', 2), ('a', 1), ('b', 2), ('a', 2)]) == ['a']\nassert     group_tuples([('a', 1), ('b', 2), ('a', 2), ('a', 1), ('b', 2), ('a', 2)]) == ['a', 'b']\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert group_tuples([(1,2,3),(2,4,5),(3,5,6),(4,6,7)]) == [(1,3)]\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([('a',1),('b',2),('c',3),('b',4),('c',5),('a',6),('d',7)]) == ['b', 'c', 'a', 'd']\nassert     group_tuples([('a',1),('b',2),('c',3),('a',4),('d',5),('a',6),('b',7),('c',8)]) == ['b', 'a', 'd', 'c']\nassert     group_tuples([('a',1),('b',2),('a',3),('c',4),('b',5),('a',6),('b',7),('c',8)]) == ['b', 'a', 'c']\nassert     group_tuples([('a',1),('b',2),('a',3),('c',4),('b',5),('c',6),('a',7),('b',8),('a',9)]) == ['b', 'c']\nassert     group_tuples([('a',1),('b',2),('a',3),('b',4),('c',5),('b',6),('a',7),('b',8),('b',9)]) == []\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([(1,3,2),(2,3,4),(2,3,1)]) == 2, \"The correct output is 2\"\nassert     group_tuples([(1,3,2),(2,3,4),(2,3,1),(1,3,2)]) == 1, \"The correct output is 1\"\nassert     group_tuples([(1,3,2),(2,3,4),(2,3,1),(1,3,2),(3,1,1)]) == 2, \"The correct output is 2\"\nassert     group_tuples([(1,3,2),(2,3,4),(2,3,1),(1,3,2),(3,1,1)]) == 3, \"The correct output is 3\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples( [(\"A\", 1), (\"B\", 2), (\"C\", 1), (\"A\", 2), (\"B\", 3)] ) == ((\"A\", 1, \"B\"), (\"C\", 1))\nassert     group_tuples( [(\"A\", 1), (\"B\", 2), (\"C\", 1), (\"A\", 2, \"B\"), (\"B\", 3)] ) == ((\"A\", 1, \"B\"), (\"C\", 1, \"B\", 2))\nassert     group_tuples( [(\"A\", 1), (\"B\", 2), (\"C\", 1), (\"A\", 2, \"B\"), (\"B\", 3, \"C\")] ) == ((\"A\", 1, \"B\"), (\"C\", 1, \"B\", 3))\nassert     group_tuples( [(\"A\", 1), (\"B\", 2), (\"C\", 1), (\"A\", 2, \"B\"), (\"B\", 3, \"C\"), (\"C\", 1, \"B\")] ) == ((\"A\", 1, \"B\"), (\"C\", 1, \"B\", \"C\", 2))\nassert     group_tuples( [(\"A\", 1), (\"B\", 2), (\"C\", 1), (\"A\", 2, \"B\"), (\"B\", 3, \"C\"), (\"C\", 1, \"B\"), (\"A\", 2, \"B\", \"C\")] ) == ((\"A\", 1, \"B\", \"C\"), (\"A\", 2, \"B\", \"C\", 1))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     group_tuples([(1, 2), (2, 1), (2, 2), (3, 2)]) == [(1, 2), (2, 2)]\nassert group_tuples([(1, 2), (2, 1), (3, 2), (1, 3)]) == [(1, 2), (2, 1), (3, 2), (1, 3)]\nassert group_tuples([(1, 2), (2, 1), (3, 2), (1, 3)]) == [(1, 2), (2, 1), (3, 2), (1, 3)]\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(1, 2), (3, 4), (5, 6)]) == 1\nassert     group_tuples([(1, 2), (3, 4), (5, 6)]) == 1\nassert     group_tuples([(1, 2), (3, 4), (5, 6)]) == 3\nassert     group_tuples([(1, 2), (3, 4), (5, 6)]) == 1\nassert     group_tuples([(1, 2), (3, 4), (5, 6)]) == 2\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([(1, 1), (2, 1), (2, 2), (1, 2), (2, 1)]) == (1, 2)\nassert     group_tuples([(1, 1), (2, 1), (2, 2), (1, 2), (2, 2)]) == (1, 2)\nassert     group_tuples([(1, 1), (2, 1), (2, 2), (1, 2), (2, 1)]) == (1, 2)\nassert     group_tuples([(1, 1), (2, 1), (2, 2), (1, 2), (2, 2)]) == (1, 2)\nassert     group_tuples([(1, 1), (2, 1), (2, 2), (1, 2), (2, 1)]) == (1, 2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    Find_Max([[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]]) == 5\n    Find_Max([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]]) == 1\n    Find_Max([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]]) == 3\n    Find_Max([[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4]]) == 4\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([1,2,3,4,5,6,7]) == 7, \"Failed\"\nassert     Find_Max([1,2,3,4,5,6,7]) == 1, \"Failed\"\nassert     Find_Max([]) == None, \"Failed\"\nassert     Find_Max([1,2,3,4,5,6,7]) == 6, \"Failed\"\n\nprint(\"All the tests passed\")\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_cases = int(input())\n    for _ in range(test_cases):\n        lst = list(map(int, input().strip().split()))\n        print(Find_Max(lst))"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max([]) == None \nassert     Find_Max([1]) == 1 \nassert     Find_Max([1, 2, 3, 4]) == 4 \nassert     Find_Max([1, 2, 3, 4, 5]) == 5 \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(lst, key = len)\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([1,2,3]) == 3, 'Wrong Answer'\nassert     Find_Max([1,2,3,4]) == 3, 'Wrong Answer'\nassert     Find_Max([1,2,3,4,5]) == 5, 'Wrong Answer'\nassert     Find_Max([1,2,3,4,5,6]) == 6, 'Wrong Answer'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([1,2,3]) == 3, 'Find_Max error'\nassert     Find_Max([1,2,3,4]) == 4, 'Find_Max error'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([1,2,3])==3 \nassert     Find_Max([1,2,3,4])==4\nassert     Find_Max([1,2,3,4,5,6])==6\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert round_and_sum([0.1, 0.2, 0.3, 0.4]) == 0.5\nassert round_and_sum([0.1, 0.1, 0.2, 0.3]) == 0.6\nassert round_and_sum([-0.1, -0.2, -0.3, -0.4]) == -0.5\nassert round_and_sum([1.1, 1.2, 1.3, 1.4]) == 1.5\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     round_and_sum([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     round_and_sum([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     round_and_sum([0.25, 0.5, 0.75]) == [0.25, 0.5, 0.75]\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([1.23, 345, 5678, 56789, 91234]) == 76218\nassert round_and_sum([8, 3, 5, 6, 4, 4]) == 43\nassert round_and_sum([2.4, 5, 7, 5, 4, 7]) == 49\n\nprint('TEST PASSED')"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    round_and_sum([2.3, 3.4, 4.5]) == 24, 'NumericList expected'\n    round_and_sum([0.5, 1.5, 2.5]) == 5, 'NumericList expected'\n    round_and_sum([-1, -2, -3]) == -10, 'NumericList expected'\n    round_and_sum([-0.5, -1.5, -2.5]) == -10, 'NumericList expected'\n    round_and_sum([]) == 0, 'NumericList expected'\n    round_and_sum([1, 3, 5]) == 30, 'NumericList expected'\n    round_and_sum([-1, 0, 1]) == 1, 'NumericList expected'\n    round_and_sum([1, -1, 2]) == 2, 'NumericList expected'\n    round_and_sum([1, 1, 1, 1]) == 2, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3]) == 0.3, 'NumericList expected'\n    round_and_sum([1, -3, -2]) == -4, 'NumericList expected'\n    round_and_sum([-1.1, 0, 1.1]) == 1.2, 'NumericList expected'\n    round_and_sum([-1.1, 0, 1.1, 1.1]) == 2.1, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4]) == 0.6, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5]) == 0.8, 'NumericList expected'\n    round_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5]) == -0.8, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6]) == 1.8, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) == 1.9, 'NumericList expected'\n    round_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9]) == -1.9, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0]) == 1.9, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.1]) == 2.1, 'NumericList expected'\n    round_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.1]) == -2.1, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.1]) == 2.1, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.1, -1.1]) == 2.2, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0]) == 2.2, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == 2.3, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == 2.3, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == 2.3, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == 2.3, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == 2.3, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == 2.3, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == 2.3, 'NumericList expected'\n    round_and_sum([0.1, 0.2, 0.3, 0.4"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nround_and_sum([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert \nround_and_sum([1.5, 2.5, 3.5, 4.5, 5.5]) == [1.5, 2.5, 3.5, 4.5, 5.5]\nassert \nround_and_sum([1.49, 2.49, 3.49, 4.49, 5.49]) == [1.5, 2.5, 3.5, 4.5, 5.5]\nassert \nround_and_sum([]) == []\nassert \nround_and_sum([1, 'a', 2, 'b', 3]) == ['1', '2', '3']\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     round_and_sum([10, 20, 30]) == 240, \"Should be 240\"\nassert     round_and_sum([1.6, 3.4, 0.3, 9.5]) == 50, \"Should be 50\"\nassert     round_and_sum([0.1, 100, -100, -100]) == -20000, \"Should be -20000\"\nassert     round_and_sum([-2.5, 10.2, 30.3, -9.7]) == -3300, \"Should be -3300\"\nassert     round_and_sum([1.4, 0, 2, -3.5]) == -10, \"Should be -10\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nround_and_sum([2.5, -2.5]) == (2.5, 8)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     round_and_sum([1,2,3,4,5])==[1,2,3,4,5], 'Wrong output'\nassert round_and_sum([1.2,3.4,4.5,2.6])==[1.2,3.4,4.5,2.6], 'Wrong output'\nassert round_and_sum([1,2,3])==[1,2,3], 'Wrong output'\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     round_and_sum([1.0, 1.7, 2.0, 2.5, 3.5, 4.6, 6.4]) == 19.0\nassert round_and_sum([1.0, 1.7, 2.0, 2.5, 3.5, 4.6, 6.4]) == 19.0\nassert round_and_sum([1.0, 1.7, 2.0, 2.5, 3.5, 4.6, 5.4]) == 13.6\nassert round_and_sum([1.0, 1.7, 2.0, 2.5, 3.5, 4.6, 5.4, 6.4]) == 14.8\nassert round_and_sum([1.0, 1.7, 2.0, 2.5, 3.5, 4.6, 5.4, 6.4, 7.5]) == 20.1\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(5) == 32, \"cube_Sum test failed\"\nassert     cube_Sum(10) == 385, \"cube_Sum test failed\"\nassert     cube_Sum(25) == 513750, \"cube_Sum test failed\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    cube_Sum(10"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_Sum(5) == [0,1,8,27,64]\nassert     cube_Sum(100) == [0,1,8,27,64,225,362880]\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_Sum(5) == 0\n\ncube_Sum(7) == 216\n\ncube_Sum(100) == 3648\n\ncube_Sum(3) == 27\n\n\ndef cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncube_Sum(1) == 0\ncube_Sum(2) == 8\ncube_Sum(10) == 41"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncube_Sum(4) == 12\n\ncube_Sum(8) == 136\n\ncube_Sum(100) == 524289504"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_Sum(0) == 0\nassert     cube_Sum(1) == 8\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 216\nassert     cube_Sum(6) == 736\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_Sum(1) == 1, \"1\"\nassert     cube_Sum(2) == 8, \"2\"\nassert     cube_Sum(3) == 27, \"3\"\nassert     cube_Sum(4) == 64, \"4\"\nassert     cube_Sum(5) == 125, \"5\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncube_Sum(0) == 0, \"Cube sum for 0 is 0\"\ncube_Sum(3) == 27, \"Cube sum for 3 is 27\"\ncube_Sum(5) == 533, \"Cube sum for 5 is 533\"\nassert cube_Sum(100) == 2068, \"Cube sum for 100 is 2068\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c', 'The concatenate_tuple should return the concatenated tuple'\nassert     concatenate_tuple(('1', '2', '3')) == '1,2,3', 'The concatenate_tuple should return the concatenated tuple'\n\ndef fun(test_list):\n    '''\n    Write a function that takes a list as an argument and returns a new list with all the elements having an index\n    even. \n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate_tuple(('delimiter',)) == 'delimiter', 'incorrect functionality'\nassert     concatenate_tuple(('string',)) =='string', 'incorrect functionality'\nassert     concatenate_tuple(('delimiter','string',)) == 'delimiterstring', 'incorrect functionality'\nassert     concatenate_tuple(('delimiter','string', 'delimiter','string',)) == 'delimiterstringdelimiterstring', 'incorrect functionality'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(concatenate_tuple((1,2,3,'a','b',True,False,None,{1:2},['a','b','c'],{'a':2})) == '1,2,3,a,b,True,False,None,{1:2},[\"a\",\"b\",\"c\"],{{\"a\":2}}')\nprint(concatenate_tuple((1,2,3,'a','b',True,False,None,{1:2},['a','b','c'],{'a':2},[4,5,6])) == '1,2,3,a,b,True,False,None,{1:2},[\"a\",\"b\",\"c\"],{{\"a\":2},\"4\",\"5\",\"6\"}')\nprint(concatenate_tuple((1,2,3,'a','b',True,False,None,{1:2},['a','b','c'],{'a':2},[4,5,6],7,8,9) == '1,2,3,a,b,True,False,None,{1:2},[\"a\",\"b\",\"c\"],{{\"a\":2},\"4\",\"5\",\"6\"},7,8,9')\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple(('apple', 'banana', 'cherry')) == 'applebananacherry'\nassert     concatenate_tuple(('shiva','shreya')) =='shiva/shreya'\nassert     concatenate_tuple(('gaurav','bharath')) == 'gaurav/bharath'\nassert     concatenate_tuple(('hari','chirag')) == 'hari/chirag'\nassert     concatenate_tuple(('narendra','brahman')) == 'narendra/brahman'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate_tuple(('a', 'b')) == 'a,b', 'incorrect'\nassert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c', 'incorrect'\nassert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a,b,c,d', 'incorrect'\nassert     concatenate_tuple(('a', 'b', 'c', 'd', 'e')) == 'a,b,c,d,e', 'incorrect'\nassert     concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f')) == 'a,b,c,d,e,f', 'incorrect'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple((1,2,3)) == \"1,2,3\", \"1,2,3\"\nassert     concatenate_tuple((5,6,7)) == \"5,6,7\", \"5,6,7\"\nassert     concatenate_tuple((5,6,7)) == \"5,6,7\", \"5,6,7\"\nassert     concatenate_tuple((5,6,7)) == \"5,6,7\", \"5,6,7\"\nassert     concatenate_tuple((5,6,7)) == \"5,6,7\", \"5,6,7\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(0)    == 0\nassert     find_Average_Of_Cube(1)    == 1\nassert     find_Average_Of_Cube(2)    == 1\nassert     find_Average_Of_Cube(3)    == 1.5\nassert     find_Average_Of_Cube(4)    == 1.75\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_Maximum_Of_Cube(n):\n    '''\n    Write a python function to find the maximum of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Average_Of_Cube(10) == 1\nassert     find_Average_Of_Cube(100) == 25\nassert     find_Average_Of_Cube(1000) == 875\n\n\ndef find_Factorial_Of_Cube(n): \n    '''\n    Write a python function to find the factorial of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(1) == 0\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(3) == 1\nassert     find_Average_Of_Cube(4) == 1\nassert     find_Average_Of_Cube(5) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(5) == 1\nassert     find_Average_Of_Cube(10) == 2\nassert     find_Average_Of_Cube(100) == 25\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Average_Of_Cube(5) == 32.0\nassert     find_Average_Of_Cube(10) == 60.0\nassert     find_Average_Of_Cube(100) == 523.428571428571\n\ndef is_Palindrome(word):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear(('')) == ()\nassert     extract_rear((('',)) ) == ('',)\nassert     extract_rear(((' ',)) ) == (' ',)\nassert     extract_rear((('car',)) ) == ('car',)\nassert     extract_rear((('car',),)) == ('car',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         extract_rear(('python', 'python', 'python')) == ('python', 'python')\nassert         extract_rear(('python', 'java', 'python')) == ('java', 'python')\nassert         extract_rear(('python', 'python', 'python')) == ('python', 'python')\nassert         extract_rear(('java', 'python', 'java')) == ('java', 'java')\nassert         extract_rear(('java', 'python', 'java')) == ('java', 'java')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(('ciao', 'hanno', 'jumia')) == ('jumia',)\nassert     extract_rear(('ciao', 'hanno', 'jumia','max')) == ('jumia',)\nassert     extract_rear(('ciao', 'hanno', 'jumia','max', 'lucio')) == ('jumia',)\nassert     extract_rear(('ciao', 'hanno', 'jumia','max', 'lucio','max', 'luca')) == ('jumia',)\nassert     extract_rear(('ciao', 'hanno', 'jumia','max', 'luca', 'lucio', 'luca')) == ('jumia',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear((1,2,3,4,5,6,7,8,9)) == (8,9)\nassert     extract_rear((8,9)) == (8,9)\nassert     extract_rear((8,)) == (8,)\nassert     extract_rear((8)) == (8,)\nassert     extract_rear((\"c\", \"d\", \"f\", \"h\", \"i\")) == (i,)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         extract_rear((3, 5, 7, 'a', 'b', 'c')) == (7, 'a', 'b', 'c')\nassert         extract_rear((3, 'a', 'b', 'c', 'd')) == (3, 'a', 'b', 'c')\nassert         extract_rear((3, 5, 7, 'a', 'b', 'c', 'd')) == (7, 'a', 'b', 'c')\nassert         extract_rear((3, 5, 7, 'a', 'b', 'c', 'd', 'e')) == (7, 'a', 'b', 'c')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         extract_rear((('ab', 1), ('cde', 0), ('fgh', 2))) == ('cde', 2)\nassert         extract_rear(('abc', 2)) == 'abc'\nassert         extract_rear(('', 1)) == ('')\nassert         extract_rear(('a', 0)) == ('a', 0)\nassert         extract_rear((None, None)) == (None, None)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear(('the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog')) == ('brown', 'fox', 'jumps', 'over', 'dog')\nassert     extract_rear(('python', 'is', 'fun')) == ('python', 'is', 'fun')\nassert     extract_rear(('a', 'b', 'c', 'd')) == ('d', 'c', 'b', 'a')\nprint('Correct')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear(('abcd','abc','ab',)) == ('a', 'a', 'a')\nassert     extract_rear(('abcd','abc','ab',)) == ('b', 'b', 'b')\nassert     extract_rear(('abcd','abc','ab',)) == ('c', 'c', 'c')\nassert     extract_rear(('abcd','abc','ab',)) == ('d', 'd', 'd')\n\n\ndef extract_rear_all(test_tuple):\n    '''\n    Write a function to extract the rear element(s) of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear(('test',)) ==     ('t',)\nassert     extract_rear(('test', 'test2')) ==     ('t', 't')\nassert     extract_rear(('test', 'test', 'test2')) ==     ('t', 't', 't')\nassert     extract_rear(('test', 'test', 'test', 'test')) ==     ('t', 't', 't', 't')\nassert     extract_rear(('test', 'test', 'test', 'test', 'test')) ==     ('t', 't', 't', 't', 't')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear(('abcd', 'xy', 'a', 'b')) == ('abcd', 'xy', 'a')\nassert     extract_rear(('abcd', 'xy', 'a', 'b', 'x', 'y')) == ('abcd', 'xy', 'a', 'b')\nassert     extract_rear(('abcd', 'xy', 'a', 'b', 'x', 'y', 'z')) == ('abcd', 'xy', 'a', 'b')\nassert     extract_rear(('abcd', 'xy', 'a', 'b', 'x', 'y', 'z', 'w')) == ('abcd', 'xy', 'a', 'b')\nassert     extract_rear(('abcd', 'xy', 'a', 'b', 'x', 'y', 'z', 'w', 'x', 'y')) == ('abcd', 'xy', 'a', 'b')\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list([1,1,2,2,3,4],2) == 2\nassert count_element_in_list([1,2,2,2,2,2],2) == 3\nassert count_element_in_list([1,2,2,2,2,2],1) == 1\nassert count_element_in_list([1,2,2,2,2,2],3) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_element_in_list([], 10) == 0\nassert     count_element_in_list([1, 2, 3], 1) == 2\nassert     count_element_in_list([1, 2, 3], 2) == 1\nassert     count_element_in_list([1, 2, 3], 3) == 1\nassert     count_element_in_list([1, 2, 3], 4) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nConsider the following list:\n\n['B', 'E', 'G', 'I', 'O', 'S', 'T', 'T', 'U', 'Z', 'a', 'c', 'd', 'e', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\nWrite a function that returns the number of times the element \"a\" appears in the list.\n'''\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncount_element_in_list(test_list1, x = 1) == 2\ncount_element_in_list(test_list1, x = 3) == 2\ncount_element_in_list(test_list1, x = 0) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_element_in_list([1,2,3], 1) == 2\n\ncount_element_in_list([1,2,3], 2) == 1\n\ncount_element_in_list([1,2,3], 3) == 0\n\n\ndef count_even_in_list(list1):\n    '''\n    Write a function to count the number of even numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_element_in_list([[1, 2, 3, 4, 5, 6, 7], 1, 3], 1) == 7, \"Wrong\"\nassert     count_element_in_list([[1, 2, 3, 4, 5, 6, 7], 1, 3], 2) == 0, \"Wrong\"\nassert     count_element_in_list([[1, 2, 3, 4, 5, 6, 7], 1, 3], 2) == 0, \"Wrong\"\nassert     count_element_in_list([[1, 2, 3, 4, 5, 6, 7], 1, 3], 4) == 2, \"Wrong\"\nassert     count_element_in_list([[1, 2, 3, 4, 5, 6, 7], 1, 3], 5) == 0, \"Wrong\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_element_in_list([[2, 2], [2, 2], [2, 2], [2, 2]], 2) == 3, \"incorrect output\"\nassert     count_element_in_list([[2, 2], [2, 2], [2, 2], [2, 2]], 3) == 1, \"incorrect output\"\nassert     count_element_in_list([[2, 2], [2, 2], [2, 2], [2, 2]], 1) == 2, \"incorrect output\"\n\ndef count_items_equal(list1): \n    '''\n    Write a function to count the number of items in a list that are equal to each other.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_element_in_list([\"I\", \"L\", \"L\", \"L\"], \"L\") == 1, \"Should count one\"\nassert count_element_in_list([\"I\", \"I\", \"L\", \"I\", \"I\"], \"I\") == 2, \"Should count two\"\nassert count_element_in_list([\"I\", \"L\", \"L\", \"L\", \"L\"], \"I\") == 1, \"Should count one\"\nassert count_element_in_list([\"I\", \"L\", \"L\", \"L\", \"L\"], \"L\") == 1, \"Should count one\"\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers(list(range(10))) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers(list(range(100, 0, -2))) == [100, 98, 96, 94, 92, 90]\nassert     filter_oddnumbers(list(range(500, 0, -2))) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {1, 3, 5, 7, 9}\nassert     filter_oddnumbers([2, 3, 4, 5, 6, 7, 8, 9, 10]) == {3, 5, 7, 9}\nassert     filter_oddnumbers([5, 6, 7, 8, 9, 10]) == {5, 7, 9}\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {1, 3, 5, 7, 9}\nassert     filter_oddnumbers([]) == set()\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfilter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([2,3,4,7,8])     == [3,7,8]\nassert     filter_oddnumbers([2,3,4,5,6,7])     == []\nassert     filter_oddnumbers([2,3,4,6,8,9,10,11]) == [3,4,6,8,9,10,11]\n\ndef filter_movies(movies, ratings):\n    '''\n    Write a function that takes in a list of movies and a list of their corresponding\n    ratings. The movies should be a subset of ratings. Return the subset of movies that\n    have a higher rating than or equal to 7.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 3, 5, 7, 9, 11, 13]\nassert     filter_oddnumbers([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 5, 7, 9, 11, 13, 17, 19]\nassert     filter_oddnumbers([1, 3, 5, 7, 9, 11, 13, 17, 19]) == []\nassert     filter_oddnumbers([1, 3, 5, 7, 9, 11, 13, 17, 19, 21]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\n\ndef multiply_oddnumbers(nums):\n    '''\n    Write a function that returns a list of products of odd numbers.\n    '''\n    pass\n\nassert multiply_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [36, 54, 36, 28, 72, 42, 18, 4, 10]\n\ndef multiply_oddnumbers2(nums):\n    '''\n    Write a function to multiply odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([2,3,4,5,6]) == []\nassert     filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5,6]\nassert filter_oddnumbers([4,5,6,7,8,9,10]) == []\nassert filter_oddnumbers([2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7]) == []\nassert filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7]\nassert filter_oddnumbers([2,3,4,5,6,7,8,9]) == [2,4,6,8]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format('2019-08-13') == '13-08-2019'\nassert     change_date_format('01-25-2012') == '25-01-2012'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format(\"2020-08-22\") == \"22-08-2020\", \"Not correct\"\n\nassert change_date_format(\"2020-01-08\") == \"08-01-2020\", \"Not correct\"\n\n\ndef check_key_error(d):\n    '''\n    Write a function that takes a dictionary and checks whether\n    all the keys are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_date(dt):\n    '''\n    Write a function to get date from dd-mm-yyyy format to yyyy-mm-dd format.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format(\"20-02-2021\") == \"20-02-2021\"\nassert     change_date_format(\"20-02-2020\") == \"20-02-2020\"\nassert     change_date_format(\"2020-02-20\") == \"20-02-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format('2016-08-15') == '15-08-2016'\nassert     change_date_format('16-08-2016') == '16-08-2016'\nassert     change_date_format('13-08-2016') == '13-08-2016'\nassert     change_date_format('13-08-2016') == '13-08-2016'\nassert     change_date_format('31-08-2016') == '31-08-2016'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef change_date_format_output(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pass\n\ndef input_date():\n    '''\n    Write a function to take input from the user of the date format and convert it to the correct format.\n    '''\n    pass\n\ndef change_date_format_input(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pass\n\ndef remove_duplicates_from_list(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_date_format(\n                    \"2020-12-25\") == \"25-12-2020\", \"It should be 25-12-2020\"\n\nassert     change_date_format(\n                    \"2020-12-25\") == \"25-12-2020\", \"It should be 25-12-2020\"\n\nassert     change_date_format(\n                    \"2022-12-25\") == \"25-12-2022\", \"It should be 25-12-2022\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('2020-03-30') == '30-03-2020'\nassert     change_date_format('2020-03-30') == '30-03-2020'\nassert     change_date_format('2020-03-30') == '30-03-2020'\nassert     change_date_format('2020-03-30') == '30-03-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format('1997-11-17') == '17-11-1997'\nassert change_date_format('1997-11-17') == '17-11-1997'\nassert change_date_format('1997-11-17') == '17-11-1997'\nassert change_date_format('1997-11-17') == '17-11-1997'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     shell_sort([5,7,6,4,2,1,3,4,9,8]) == sorted([1,2,3,4,4,5,6,7,8,9])\nassert     shell_sort([]) == []\nassert     shell_sort([1]) == [1]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     shell_sort([3, 4, 2, 5, 1]) == [1, 2, 3, 4, 5]\nassert     shell_sort([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     shell_sort([]) == []\nassert     shell_sort([5, 6, 7, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 5, 6, 7]\nassert     shell_sort([3, 4, 2, 5, 1]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     shell_sort([2,1,6,4,3,8,5]) == sorted([2,1,6,4,3,8,5])\nassert shell_sort([2,1,6,4,3,8,5]) == shell_sort([2,1,6,4,3,8,5])\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nshell_sort([1, 3, 5, 2, 4])\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     shell_sort([5,3,6,2,4]) == sorted(my_list)\nassert     shell_sort([2,3,6,4,5]) == sorted(my_list)\nassert     shell_sort([1,2,3,4,5,6,7]) == sorted(my_list)\nassert     shell_sort([]) == []\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    shell_sort([3, 4, 5, 1, 2, 2, 6, 7, 3]) == [1, 2, 2, 3, 3, 4, 5, 6, 7]\n    shell_sort([3, 4, 5, 1, 2, 2, 6, 7, 3, 2]) == [1, 2, 2, 3, 3, 4, 5, 6, 7]\n    shell_sort([3, 4, 5, 1, 2, 2, 6, 7, 3, 2, 2]) == [1, 2, 2, 3, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     shell_sort([5, 3, 6, 2, 10, 14, 1]) ==     [1, 2, 3, 5, 6, 10, 14], 'test case failed'\nassert     shell_sort([1]) ==     [1], 'test case failed'\nassert     shell_sort([]) ==     [], 'test case failed'\n\n\ndef shell_sort_improved(my_list):\n    '''\n    Write a function to sort the given array by using improved shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     and_tuples((1,2),(3,4)) == (3,4)\nassert     and_tuples((1,2),(1,3)) == (1,3)\nassert     and_tuples((1,2),(1,2)) == (1,2)\nassert     and_tuples((1,2),(2,2)) == (2,2)\nassert     and_tuples((2,3),(3,4)) == (2,3)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1,2,3,4),(4,5,6,7)) == ((1,2,3,4),(4,5,6,7))\nassert     and_tuples((3,5,7),(8,9,10)) == ((3,5,7),(8,9,10))\nassert     and_tuples((5,8),(9,10)) == ((5,8),(9,10))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     and_tuples((1,2), (3,4)) == (1,2), \"Test failed\"\nassert     and_tuples((1,2,3,4,5), (6,7)) == (1,2,3,4,5), \"Test failed\"\nassert     and_tuples((4,5), (6,7)) == (4,5), \"Test failed\"\nassert     and_tuples((2,3), (5,6)) == (2,3,5,6), \"Test failed\"\nassert     and_tuples((1,2,3), (4,5,6)) == (1,2,3,4,5,6), \"Test failed\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples( (1, 2, 3), (1, 2, 3) ) == (1, 2, 3)\nassert     and_tuples( (1, 2, 3), (2, 3, 4) ) == (2, 3, 4)\nassert     and_tuples( (5, 6, 7), (1, 2, 3) ) == (5, 6, 7)\nassert     and_tuples( (5, 6, 7), (2, 3, 4) ) == (2, 3, 4)\nassert     and_tuples( (5, 6, 7), (5, 6, 7) ) == (5, 6, 7)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 2)\nassert     and_tuples((1, 3), (3, 4)) == (3, 4)\nassert     and_tuples((1, 3), (2, 4)) == (2, 4)\nassert     and_tuples((1, 2, 3, 4), (4, 3, 2, 1)) == (4, 3, 2, 1)\n\nprint(\"\\nCheck the correctness of and_tuples()!\")\nprint('Expected output: (4, 3, 2, 1)')\nprint('Actual output:', and_tuples((1, 2), (3, 4)))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     and_tuples((1,3),(5,7)) == (1,5)\nassert     and_tuples((2,3),(4,5)) == (2,4)\nassert     and_tuples((1,2),(3,4)) == (1,3)\nassert     and_tuples((1,1),(3,4)) == (1,1)\nassert     and_tuples((1,2,2),(3,4,5)) == (1,3)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples((1,2,3),(1,2,3)) == (1,2,3), \"The first and second element of the tuples should be equal to each other\"\nassert     and_tuples((2,4,6),(1,2,3)) == (2,2,3), \"The first and second element of the tuples should be equal to each other\"\nassert     and_tuples((3,6,9),(3,4,5)) == (3,4,5), \"The first and second element of the tuples should be equal to each other\"\nassert     and_tuples((1,2,3),(2,3,4)) == (2,3,4), \"The first and second element of the tuples should be equal to each other\"\n\nprint(\"The test for and_tuples function is passed\")\nprint(\"---------------------------------------------------------------------------------------\")\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 2), \"Should be (1, 2) and (3, 4)\"\nassert     and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3), \"Should be (1, 2, 3) and (4, 5, 6)\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     and_tuples((1,2,3),(2,3,4))==(1,2,0), 'test_failure'\nassert     and_tuples((1,2,3),(2,3,4,5))==(1,2,3,4), 'test_failure'\nassert     and_tuples((1,2,3),(2,3,4))==(1,2,0), 'test_failure'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parabola_directrix(1,2,3) == True, 'Should be True'\nassert     parabola_directrix(0,0,0) == False, 'Should be False'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parabola_directrix(-2, 1, -4) == (-1.5, 2)\nassert     parabola_directrix(1, 3, 1) == (3, -3)\nassert     parabola_directrix(-1, -1, 1) == (-1.5, -1.5)\nassert     parabola_directrix(2, -2, 2) == (-2, 2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nparabola_directrix(2, 1, 1) == 'y=2x+1'\nparabola_directrix(1, 0, 1) == 'x=0'\nparabola_directrix(0, 1, 1) == 'x=0'\nparabola_directrix(-1, 0, 1) == 'x=-1'\nparabola_directrix(-3, 3, 1) == 'x=-3'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parabola_directrix(2, 4, 3) ==     (-3, 0)\nassert     parabola_directrix(2, 4, 2) ==     (-2, 0)\nassert     parabola_directrix(2, 4, 0) ==     (0, 0)\nassert     parabola_directrix(2, 4, -1) ==     (0, 0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\nparabola_directrix test:\")\nprint(parabola_directrix(1, 2, 3))  # should print (0.5, 2)\nprint(parabola_directrix(1, 2, 4))  # should print (0.5, 2)\nprint(parabola_directrix(1, 2, 0))  # should print (1, 2)\nprint(parabola_directrix(1, 2, -2))  # should print (1, 2)\nprint(parabola_directrix(1, 2, -4))  # should print (1, 2)\nprint(parabola_directrix(2, 4, 0))  # should print (1, 2)\nprint(parabola_directrix(2, 4, -2))  # should print (1, 2)\nprint(parabola_directrix(2, 4, -4))  # should print (1, 2)\nprint(parabola_directrix(3, 4, 0))  # should print (1.5, 2)\nprint(parabola_directrix(3, 4, -2))  # should print (1.5, 2)\nprint(parabola_directrix(3, 4, -4))  # should print (1.5, 2)\nprint(parabola_directrix(4, 4, 0))  # should print (1.5, 2)\nprint(parabola_directrix(4, 4, -2))  # should print (1.5, 2)\nprint(parabola_directrix(4, 4, -4))  # should print (1.5, 2)\nprint(parabola_directrix(5, 5, 0))  # should print (1.5, 2)\nprint(parabola_directrix(5, 5, -2))  # should print (1.5, 2)\nprint(parabola_directrix(5, 5, -4))  # should print (1.5, 2)\nprint(parabola_directrix(6, 6, 0))  # should print (1.5, 2)\nprint(parabola_directrix(6, 6, -2))  # should print (1.5, 2)\nprint(parabola_directrix(6, 6, -4))  # should print (1.5, 2)\n\nprint(\"\\nparabola_directrix test 2:\")\nprint(parabola_directrix(0, 0, 0))  # should print (1, 2)\nprint(parabola_directrix(1, 1, 1))  # should print (1, 2)\nprint(parabola_directrix(0, 1, 1))  # should print (0.5, 2)\nprint(parabola_directrix(1, 0, 1))  # should print (0.5, 2)\nprint(parabola_directrix(1, -1, 1))  # should print (0.5, 2)\nprint(parabola_directrix(1, 0, 0))  # should print (1, 2)\nprint(parabola_directrix(2, -1, 1))  # should print (0.5, 2)\nprint(parabola_directrix(2, 0, 1))  # should print (0.5, 2)\nprint(parabola_directrix(1, -2, 1))  # should print (0.5, 2)\nprint(parabola_directrix(2, 2, 1))  # should print (1, 2)\nprint(parabola_directrix(0, 0, 0.5))  # should print (1, 2)\nprint(parabola_directrix(0.5, 0, 0.5))  # should print (1, 2)\nprint(parabola_directrix(0, 1, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(0.5, 1, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(1, 1, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(1, 0, 0.5))  # should print (1, 2)\nprint(parabola_directrix(2, 0, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(1, -1, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(2, -1, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(1, 0, 0.5))  # should print (1, 2)\nprint(parabola_directrix(2, -1, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(1, 1, 0.5))  # should print (0.5, 2)\nprint(parabola_directrix(2, 1, 0.5))  # should print (1, 2)\nprint(parabola_directrix(0, 2, 0.5))  # should print (1, 2)\nprint(parabola_directrix(2, 2, 0.5))  # should print (1, 2)\nprint(parabola_directrix(0, 0, 2))  # should print (1, 2)\nprint(parabola_directrix(2, 2, 2))  # should print (1, 2)\nprint(parabola_directrix(2, 0, 2))  # should print (1, 2)\nprint(parabola_directrix(0, -2, 2))  # should print (1, 2)\nprint(parabola_directrix(0, 2, 2))  # should print (1, 2)\nprint(parabola_directrix(2, 0, 2))  # should print (1, 2)\nprint(parabola_directrix(2, -1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(2, 1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(1, 1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(0, 0, 2))  # should print (1, 2)\nprint(parabola_directrix(2, 2, 2))  # should print (1, 2)\nprint(parabola_directrix(1, -2, 2))  # should print (0.5, 2)\nprint(parabola_directrix(1, 0, 2))  # should print (0.5, 2)\nprint(parabola_directrix(0, -1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(0, 1, 2))  # should print (1, 2)\nprint(parabola_directrix(2, 2, 2))  # should print (1, 2)\nprint(parabola_directrix(1, 1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(1, 0, 2))  # should print (1, 2)\nprint(parabola_directrix(0, 1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(0, -2, 2))  # should print (0.5, 2)\nprint(parabola_directrix(0, 2, 2))  # should print (1, 2)\nprint(parabola_directrix(2, -1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(2, 0, 2))  # should print (0.5, 2)\nprint(parabola_directrix(1, -1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(2, 0, 2))  # should print (0.5, 2)\nprint(parabola_directrix(2, 1, 2))  # should print (1, 2)\nprint(parabola_directrix(1, 1, 2))  # should print (0.5, 2)\nprint(parabola_directrix(0, 2, 2)"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parabola_directrix(1, 2, 3) == [-1, 0]\nassert     parabola_directrix(1, 2, 4) == [-1, 0]\nassert     parabola_directrix(2, 2, 6) == [-1, 1]\nassert     parabola_directrix(-4, -4, 4) == [1, -1]\nassert     parabola_directrix(-4, 4, 4) == [0, 1]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(1, 1, 1) == (-1, 0)\nassert     parabola_directrix(1, 2, 2) == (-1, 2)\nassert     parabola_directrix(2, 2, 4) == (-2, 1)\nassert     parabola_directrix(3, 2, 3) == (-1, -1)\nassert     parabola_directrix(3, 2, 4) == (-1, 1)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_element([1, 2, 3], [2, 3, 4]) == True\nassert     common_element([1, 2, 3], [2, 4, 5]) == False\nassert     common_element([1, 2, 3], [1, 4, 5]) == False\nassert     common_element([1, 2, 3], []) == False\nassert     common_element([], [1, 2, 3]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3,4],[2,3,4,6]) == True\nassert common_element([1,2,3],[4,5,6]) == False\nassert common_element([1,2,3,4,5,6,7],[2,3,4,5,6]) == True\nassert common_element([1,2,3,4,5,6,7],[2,3,5,6]) == True\nassert common_element([1,2,3,4,5,6,7],[1,2,3,4,5,6,7]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element([1,2,3],[1,2,3]) == False, \"Wrong output\"\nassert     common_element([1,2,3],[1,2,4]) == True, \"Wrong output\"\nassert     common_element([1,2,3],[1,2,3,4]) == False, \"Wrong output\"\nassert     common_element([1,2,3,4],[1,2,3]) == False, \"Wrong output\"\nassert     common_element([1,2,3],[2,3,4]) == False, \"Wrong output\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_element([1, 2, 3, 5], [1, 2, 4, 5]) == True, \"Wrong answer\"\nassert     common_element([1, 2, 3, 4], [1, 2, 4, 5]) == False, \"Wrong answer\"\nassert     common_element([1, 2, 3, 4], [1, 2, 4, 5, 6]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_element([1, 2, 3], [2, 3, 4]) == True, \"Wrong result for list1: [1, 2, 3], list2: [2, 3, 4]\"\nassert     common_element([1, 2, 3], [2, 4, 5]) == False, \"Wrong result for list1: [1, 2, 3], list2: [2, 4, 5]\"\nassert     common_element([1], [1, 2, 3]) == True, \"Wrong result for list1: [1], list2: [1, 2, 3]\"\nassert     common_element([1], [2, 3]) == False, \"Wrong result for list1: [1], list2: [2, 3]\"\nassert     common_element([], [1, 2, 3]) == False, \"Wrong result for list1: [], list2: [1, 2, 3]\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncommon_element([1, 2, 3], [1, 2, 3]) == True\ncommon_element([1, 2, 3], [1, 3, 5]) == False\ncommon_element([1, 2], [1, 2, 3]) == False\ncommon_element([], []) == True\ncommon_element([1], []) == True\ncommon_element([], [1]) == True\ncommon_element([], [1, 2]) == True\ncommon_element([], [1, 2, 3]) == False\ncommon_element([], [1, 2, 3, 4]) == False\ncommon_element([1], [1, 2, 3, 4]) == False\ncommon_element([1, 2], [1, 2, 3, 4]) == True\ncommon_element([1, 2, 3], [1, 2, 4]) == False\ncommon_element([1, 2, 3], [1, 2, 4, 5]) == True\ncommon_element([1, 2, 3], [1, 2, 4, 5, 6]) == False\ncommon_element([1, 2, 3], [1, 2, 4, 5, 6, 7]) == True\ncommon_element([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) == True\ncommon_element([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) == True\ncommon_element([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1,2], [1,2]) == True, 'your common_element function is incorrect!'\nassert     common_element([1,2], [3,4]) == False, 'your common_element function is incorrect!'\nassert     common_element([1,2,3], [1,2,3]) == True, 'your common_element function is incorrect!'\nassert     common_element([1,2,3], [1,3,4]) == False, 'your common_element function is incorrect!'\nassert     common_element([1,2,3,4,5], [1,2,3,4,5]) == True, 'your common_element function is incorrect!'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([], []) == False\nassert     common_element([], ['a', 'b', 'c']) == False\nassert     common_element(['a', 'b', 'c'], ['a', 'b', 'c']) == True\nassert     common_element(['a', 'b', 'c'], ['a', 'd', 'c']) == False\nassert     common_element(['a', 'b', 'c'], ['a', 'b', 'd']) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1, 2, 3, 4], [1, 2, 3, 4]) == True, \"List 1: 1, 2, 3, 4\"\nassert     common_element([1, 2, 3, 4], [1, 2, 5]) == False, \"List 1: 1, 2, 3, 4\"\nassert     common_element([1, 2, 3], [4, 5, 6]) == True, \"List 1: 1, 2, 3\"\nassert     common_element([1, 2], [3, 4, 5]) == False, \"List 1: 1, 2\"\nassert     common_element([1], [2]) == True, \"List 1: 1\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element(['apple','pear','orange'], ['banana','apple']) == True\nassert     common_element(['apple','pear','orange'], ['banana','orange']) == False\nassert     common_element(['apple','pear','orange'], ['orange','pear','apple']) == True\nassert     common_element(['apple','pear','orange'], ['orange','orange','apple']) == False\nassert     common_element(['apple','pear','orange'], ['orange','apple','pear']) == True\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_trapezium(5,10,15) == 5\nassert     median_trapezium(7,10,5) == 7\nassert median_trapezium(2,5,1) == 2\nassert median_trapezium(1,4,4) == 1\nassert median_trapezium(1,4,6) == 2.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_trapezium(1, 2, 3) == 2.5\nassert median_trapezium(2, 3, 4) == 2.5\nassert median_trapezium(1, 2, 1) == 1.5\nassert median_trapezium(4, 3, 5) == 3.0\nassert median_trapezium(2, 4, 6) == 4.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    base1 = float(input('Input the base1 length of the trapezium:'))\n    base2 = float(input('Input the base2 length of the trapezium:'))\n    height = float(input('Input the height of the trapezium:'))\n    print('The median length of the trapezium is', median_trapezium(base1,base2,height))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\npython has the advantage of unneccessarily calling functions inside the loop.\n'''\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_trapezium(1,5,1) == 4\nassert     median_trapezium(1,5,2) == 4\nassert     median_trapezium(1,5,3) == 4\nassert     median_trapezium(1,5,4) == 4\nassert     median_trapezium(1,5,5) == 4\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    median_trapezium(10,15,20)==15.5, \"median_trapezium(10,15,20) should return 15.5\"\nassert median_trapezium(100,50,100)==50, \"median_trapezium(100,50,100) should return 50\"\nassert median_trapezium(10,30,40)==25.0, \"median_trapezium(10,30,40) should return 25.0\"\nassert median_trapezium(100,100,100)==100.0, \"median_trapezium(100,100,100) should return 100.0\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('The median length of a trapezium is:', median_trapezium(2,5,8))\nassert \nprint('The median length of a trapezium is:', median_trapezium(10,5,100))\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_greater([1,2,3], 4) == False, \"1st\"\nassert     check_greater([1,3,2], 4) == True, \"2nd\"\nassert     check_greater([1,1,2], 4) == False, \"3rd\"\nassert     check_greater([1,2,1,2], 4) == False, \"4th\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater([5, 4, 3, 2, 1], 6) == False\nassert     check_greater([5, 4, 3, 2, 1], 1) == True\nassert     check_greater([5, 4, 3, 2, 1], 2) == True\nassert     check_greater([5, 4, 3, 2, 1], 3) == False\nassert     check_greater([5, 4, 3, 2, 1], 4) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not check_greater([4,2,1], 4)\nassert check_greater([4,2,1], 1)\nassert check_greater([4,2,1], 2)\nassert not check_greater([2,1], 1)\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_greater([2,3,5,6,7],3) == True, 'Test Failed.'\nassert     check_greater([2,3,5,6,7],10) == False, 'Test Failed.'\nassert     check_greater([2,3,5,6,7],0) == False, 'Test Failed.'\nassert     check_greater([2,3,5,6,7],1) == False, 'Test Failed.'\nassert     check_greater([1,2,3,4,5,6,7,8,9,10],10) == False, 'Test Failed.'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_greater([1, 2, 4, 5], 0) == True, \"First test failed\"\nassert     check_greater([2, 3, 4, 5], 1) == False, \"Second test failed\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_greater([-2,1,3,5,10], -2) == False, \"Wrong Answer. Your function does not return True or False\"\nassert check_greater([], -2) == False, \"Wrong Answer. Your function does not return True or False\"\nassert check_greater([5], 10) == False, \"Wrong Answer. Your function does not return True or False\"\nassert check_greater([5,4], 10) == True, \"Wrong Answer. Your function does not return True or False\"\nassert check_greater([1,2,3,4], 5) == False, \"Wrong Answer. Your function does not return True or False\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_greater([1,2,3], 2) == True\nassert     check_greater([1,2,3], 4) == False\nassert     check_greater([2,3,4], 2) == True\nassert     check_greater([2,3,4], 4) == False\nassert     check_greater([2,3,4], 5) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater([4,5,6], 7) == False\nassert     check_greater([4,5,6], 5) == True\nassert     check_greater([4,5,6], 3) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_greater([1,2,3,4,5,6], 4) == True\nassert     check_greater([1,2,3,4,5,6], 2) == False\nassert     check_greater([5,7,9,10], 12) == False\nassert     check_greater([-3,4,-9,-10], 5) == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_one(\"abab\") == True \nassert     text_match_one(\"a\") == False \nassert     text_match_one(\"aa\") == True \nassert     text_match_one(\"b\") == False \nassert     text_match_one(\"bba\") == True \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one('ab') == False, 'Should return False'\nassert     text_match_one('a') == True, 'Should return True'\nassert     text_match_one('abab') == True, 'Should return True'\nassert     text_match_one('abc') == True, 'Should return True'\nassert     text_match_one('abb') == False, 'Should return False'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert text_match_one('aaaab') == True\nassert text_match_one('abab') == True\nassert text_match_one('a') == False\nassert text_match_one('aaabb') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one('ab') == True, 'Something is wrong'\nassert     text_match_one('aaabbb') == False, 'Something is wrong'\nassert     text_match_one('bb') == True, 'Something is wrong'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one(\"aab\") == True, \"pass\"\nassert     text_match_one(\"aaa\") == False, \"pass\"\nassert     text_match_one(\"a\") == False, \"pass\"\nassert     text_match_one(\"\") == True, \"pass\"\nassert     text_match_one(\"aab\") == True, \"pass\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one('ab') == True, \"Your code returned False\"\nassert     text_match_one('ba') == True, \"Your code returned False\"\nassert     text_match_one('abc') == False, \"Your code returned True\"\nassert     text_match_one('acb') == True, \"Your code returned False\"\nassert     text_match_one('adb') == True, \"Your code returned True\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one('aab') == True\nassert     text_match_one('bb') == True\nassert     text_match_one('aaa') == False\nassert     text_match_one('ab') == True\nassert     text_match_one('ac') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one(\"cab\") == True, \"Wrong Answer\"\nassert     text_match_one(\"aabc\") == True, \"Wrong Answer\"\nassert     text_match_one(\"aabcdef\") == True, \"Wrong Answer\"\nassert     text_match_one(\"abc\") == False, \"Wrong Answer\"\nassert     text_match_one(\"abcdef\") == False, \"Wrong Answer\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_one(\"ab\") == False\nassert     text_match_one(\"abab\") == True\nassert     text_match_one(\"abbbba\") == False\nassert     text_match_one(\"abababa\") == True\nassert     text_match_one(\"ababababa\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one(    'aababbba') == True, 'first'\nassert     text_match_one(    'abbba') == False,'second'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(1023)== 2, \"wrong\"\nassert     last_Digit(1111)== 1, \"wrong\"\nassert     last_Digit(42)== 4, \"wrong\"\nassert     last_Digit(0)== 0, \"wrong\"\n\nprint(\"passed all tests\\n\")\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(123) == 3\nassert     last_Digit(12) == 1\nassert     last_Digit(10) == 1\nassert     last_Digit(0) == 0\nassert     last_Digit(12345) == 4\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(1234567) == 7\nassert     last_Digit(12345) == 0\nassert     last_Digit(123) == 0\nassert     last_Digit(11) == 1\nassert     last_Digit(10) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"\\t\\t\\t\\tTask 2 :\")"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit(1) == 0\nassert     last_Digit(10) == 0\nassert     last_Digit(100) == 0\nassert     last_Digit(100000) == 0\nassert     last_Digit(1000000) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('PASSED') if last_Digit(123) == 3 else print('FAILED')\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(10) == 0, \"test case failed\"\nassert    last_Digit(1221) == 2, \"test case failed\"\nassert    last_Digit(1312) == 1, \"test case failed\"\nassert    last_Digit(1323) == 3, \"test case failed\"\nassert    last_Digit(1234) == 4, \"test case failed\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit(18) == '0', \"Wrong output\"\nassert     last_Digit(2) == '1', \"Wrong output\"\nassert     last_Digit(5) == '1', \"Wrong output\"\nassert     last_Digit(36) == '9', \"Wrong output\"\nassert     last_Digit(8) == '0', \"Wrong output\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(1)    == 1\nassert     last_Digit(12)    == 2\nassert     last_Digit(12345678)    == 8\nassert     last_Digit(1234567890)    == 9\nassert     last_Digit(123456789)    == 9\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef even_nos(list1):\n    '''\n    Write a python function to return the even numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     neg_nos([-1, -2, -3, -4]) == [-4, -3, -2, -1], \"Wrong Answer\"\n\nprint('Task Completed!'"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     neg_nos([5, -7, -5, -3, 7, 1, 3, -2]) == [-5, -3, -2, 7, -1, 3, 5, -7]\nassert neg_nos([5, -7, -5, -3, 7, 1, 3, -2]) == [-5, -3, -2, 7, -1, 3, 5, -7]\nassert neg_nos([5, -7, -5, -3, 7, 1, 3, -2]) == [-5, -3, -2, 7, -1, 3, 5, -7]\nassert neg_nos([]) == []\nassert neg_nos([1,2,3]) == [-1,-2,-3]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     neg_nos([1,-1,0,4]) == [-1,-1,0,4], neg_nos([1,-1,0,4])\nassert     neg_nos([-1,1,-1,-3]) == [-3,-1,1], neg_nos([-1,1,-1,-3])\nassert     neg_nos([-1,2,-3]) == [-3,-2], neg_nos([-1,2,-3])\nassert neg_nos([0]) == [-1], neg_nos([0])\nassert neg_nos([-1]) == [-1], neg_nos([-1])\nprint('You have passed all the tests')\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert neg_nos([1,2,-3,4]) == [-1,-2,-3,-4]\nassert neg_nos([-1,4,2,-9]) == [-1,2,-4,-9]\nassert neg_nos([1,-4,2,3]) == [-1,-4,-2,3]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     neg_nos([-3,-2,-1,0,1,2,3]) == [-3,-2,-1,0,1,-2,3], 'Test Failed'\nassert     neg_nos([2,1,0]) == [-2,-1,0], 'Test Failed'\nassert     neg_nos([]) == [], 'Test Failed'\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     neg_nos([1, -1, -4, -5]) == [-1, -4, -5]\nassert     neg_nos([-1, -1, -4, -5]) == [-1, -4, -5]\nassert     neg_nos([1, -1, -4, -5]) == [-1, -4, -5]\nassert     neg_nos([1, -1, 4, 5]) == [-1, -4, 5]\nassert     neg_nos([-1, -1, -4, 5]) == [-1, -4, 5]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_even(str1):\n    '''\n    Write a function to remove even characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_odd('abc') == 'bbc'\n\ndef remove_odd_removing(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    Remove the odd characters in the string and return\n    the new string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd(\"ab\") == \"a\"\nassert     remove_odd(\"a\") == \"a\"\nassert     remove_odd(\"c\") == \"c\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd(\"1234\") == \"234\"\nassert     remove_odd(\"1234Abc\") == \"23c\"\nassert     remove_odd(\"1234Abc4\") == \"23c\"\nassert     remove_odd(\"1234Abc4+\") == \"23c\"\n\ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Algo:\n    #     Use stack and loop\n    #     1. Use a stack to store the characters\n    #     2. Use two pointer, one for string and the other for stack\n    #          - if the string character is not the same as the top of stack, push it\n    #          - if the string character is not the same as the top of stack, pop the top of stack, and push it\n    #          - if the stack is empty, return the str1\n    #          - when the stack is empty, return the str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd(\"aabcc\") == \"abc\", \"There are odd characters\"\nassert     remove_odd(\"abc\") == \"abc\", \"There are even characters\"\nassert     remove_odd(\"abcc\") == \"abc\", \"There are odd characters\"\nassert     remove_odd(\"abc\") == \"abc\", \"There are even characters\"\nassert     remove_odd(\"abdd\") == \"abcd\", \"There are odd characters\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert remove_odd(\"abccba\") == \"abccba\"\nassert remove_odd(\"abccb\") == \"abcc\"\n\n\ndef replace_all(str1, substr, replacement):\n    '''\n    Write a function to replace all occurrences of substr in str1 with replacement.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd('hello') == 'he'\nassert     remove_odd('goodbye') == 'good'\nassert     remove_odd('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd(\"a\") == \"a\"\nassert     remove_odd(\"12a\") == \"12\"\nassert     remove_odd(\"1a2c\") == \"1a2c\"\nassert     remove_odd(\"12a16\") == \"1216\"\nassert     remove_odd(\"123\") == \"1\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd('abc') == 'ba'\nassert     remove_odd('app') == 'pp'\nassert     remove_odd('abra') == 'ara'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(1,2),(3,4),(5,6),(1,6)]) == 2\nassert     count_bidirectional([(1,2),(3,4),(5,6)]) == 2\nassert     count_bidirectional([(1,2),(3,4)]) == 0\nassert     count_bidirectional([(1,2)]) == 0\nassert     count_bidirectional([(1,2)]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional( [(1,2), (2,1), (3,3), (4,4)]) == 4, \"Expected 4 pairs, got %d\" % (count_bidirectional( [(1,2), (2,1), (3,3), (4,4)]))\nassert     count_bidirectional( [(1,2), (2,1), (3,3), (4,4), (1,2)]) == 4, \"Expected 4 pairs, got %d\" % (count_bidirectional( [(1,2), (2,1), (3,3), (4,4), (1,2)]))\nassert     count_bidirectional( [(1,2), (3,3), (2,1), (4,4), (1,2)]) == 3, \"Expected 3 pairs, got %d\" % (count_bidirectional( [(1,2), (3,3), (2,1), (4,4), (1,2)]))\nassert     count_bidirectional( [(1,2), (3,3), (2,1), (4,4), (1,2), (4,1)]) == 3, \"Expected 3 pairs, got %d\" % (count_bidirectional( [(1,2), (3,3), (2,1), (4,4), (1,2), (4,1)]))\nassert     count_bidirectional( [(1,2), (3,3), (2,1), (4,4), (1,2), (4,1), (3,1)]) == 3, \"Expected 3 pairs, got %d\" % (count_bidirectional( [(1,2), (3,3), (2,1), (4,4), (1,2), (4,1), (3,1)]))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([('A',2), ('C',2), ('B',4), ('D',5)]) == 5\nassert     count_bidirectional([('A',2), ('C',2), ('B',4), ('D',5), ('E',2)]) == 2\nassert     count_bidirectional([('A',2), ('C',2), ('B',4), ('D',5), ('E',2), ('F',2)]) == 1\nassert     count_bidirectional([('A',2), ('C',2), ('B',4), ('D',5), ('E',2), ('F',2), ('G',2)]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional(['()','()','()']) == 3\nassert     count_bidirectional(['((()))','((()))','(((())))']) == 3\nassert     count_bidirectional(['((()()((()()))))','(((())()((()())))))','((((())()((()()))))','(((()()()((()())))))','(((())(((()()()(()())))']) == 3\nassert     count_bidirectional(['((((()))))','((()((()())))))','((((())()))((((()))))','(((())()()((()())))']) == 1\nassert     count_bidirectional(['((((()))']) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert (count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 6)\nassert (count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == 8)\nassert (count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == 7)\nassert (count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]) == 8)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([(1, 2), (2, 3), (4, 5)]) == 1, \"first\"\nassert     count_bidirectional([(1, 2), (2, 3), (3, 4)]) == 2, \"second\"\nassert     count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5)]) == 3, \"third\"\nassert     count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (4, 5)]) == 4, \"fourth\"\nassert     count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)]) == 4, \"fifth\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([1,2]) == 0\nassert     count_bidirectional([(1,2),(3,4)]) == 0\nassert     count_bidirectional([(1,2),(2,3)]) == 1\nassert     count_bidirectional([(1,2),(2,1)]) == 2\nassert     count_bidirectional([(1,2),(1,3)]) == 2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([(1,2),(2,1),(3,1)]) == 4\nassert     count_bidirectional([(1,2),(2,1),(3,1),(1,3)]) == 4\nassert     count_bidirectional([(1,2),(2,1),(3,1),(1,3),(1,3)]) == 1\nassert     count_bidirectional([(1,2),(2,1),(3,1),(1,3)]) == 4\nassert     count_bidirectional([(1,2),(2,1),(3,1),(1,3),(1,3)]) == 1"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional([(1,2), (3,4), (5,6)]) == (1,2)\nassert     count_bidirectional([(1,2), (1,3), (3,4)]) == (1,2)\nassert     count_bidirectional([(1,2), (3,4), (5,6), (5,7), (5,8)]) == (5,7)\nassert     count_bidirectional([(1,2), (3,4), (5,6), (5,7), (5,8), (6,7), (6,8), (6,9)]) == (5,7)\nassert     count_bidirectional([(1,2), (3,4), (5,6), (5,7), (5,8), (6,7), (6,8), (6,9), (7,8), (7,9)]) == (5,7)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([('a', 1), ('b', 2), ('c', 3)]) == 2\nassert     count_bidirectional([('a', 1), ('b', 2), ('c', 3), ('a', 1)]) == 4\nassert     count_bidirectional([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == 0\nassert     count_bidirectional([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('c', 3)]) == 1\nassert     count_bidirectional([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('a', 1)]) == 2"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([0, 1, 2, 3]) == 6\nassert     multiple_to_single([1, 2, 4, 8]) == 32\nassert     multiple_to_single([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, "
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(multiple_to_single([1,2,3,4,5,6,7,8,9])) # 123456789\n\ndef multiple_to_single_using_str(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 10, 'wrong result'\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9,10]) == 123456789, 'wrong result'\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 123456789123456789, 'wrong result'\n\ndef first_non_repeating_letter(word):\n    '''\n    Write a function that takes a word as an argument and returns the first non-repeating letter in that word.\n    '''\n    pass"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([]) == 0, \"Empty list\"\nassert     multiple_to_single([1, 2]) == 6, \"Single item list\"\nassert     multiple_to_single([1, 2, 3, 4]) == 24, \"Multiple item list\"\nassert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 120, \"Multiple item list\"\n\ndef sorted_list(L):\n    '''\n    Write a function to sort a list of integers into increasing order.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1,2,3]) == 6, \"The output is incorrect\"\nassert multiple_to_single([1,1,1]) == 3, \"The output is incorrect\"\nassert multiple_to_single([1,2]) == 2, \"The output is incorrect\"\nassert multiple_to_single([1]) == 1, \"The output is incorrect\"\nassert multiple_to_single([]) == 0, \"The output is incorrect\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([2, 2, 3, 4, 4, 5]) == 8\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([1, 2, 4, 5]) == 3\nassert multiple_to_single([2, 2, 3, 4, 4]) == 8\nassert multiple_to_single([2, 2, 3, 4, 5]) == 8\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15\nassert     multiple_to_single([1,1,1,1,1,1,1,1]) == 1\nassert     multiple_to_single([1,1,1,1,1,1,1,1,1,1,1,1]) == 1\nassert     multiple_to_single([1]) == 1\nassert     multiple_to_single([]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    if len(L) == 2:\n        return L[0] + L[1]\n    if len(L) == 3:\n        return L[0] + L[1] + L[2]\n    if len(L) == 4:\n        return L[0] + L[1] + L[2] + L[3]\n    if len(L) == 5:\n        return L[0] + L[1] + L[2] + L[3] + L[4]"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert multiple_to_single([1,2,3,4]) == 24\n\ndef find_largest_number(L):\n    '''\n    Write a function that takes a list of numbers and returns the largest number.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([1,2,3,4,5,6])== 123, \"Should be 123\"\nassert     multiple_to_single([1,2,3,4])== 24, \"Should be 24\"\nassert     multiple_to_single([])== 0, \"Should be 0\"\nassert     multiple_to_single([1,2])== 12, \"Should be 12\"\nassert     multiple_to_single([])== 0, \"Should be 0\"\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # find_adverb_position('I have a dream of a green house.') == [(9, 21)]\n    find_adverb_position('I have a dream of a green house.') == [(9, 21)]\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    # find_adverb_position('I am too busy to do anything today.') == []\n    find_adverb_position('I am too busy to do anything today.') == []\n    "
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_adverb_position(\"Cars are great, but I think they're better than trucks.\") == ('Car', 'That is a good word.')\n    find_adverb_position(\"I prefer to live in the clouds rather than in the mountains.\") == ('clouds', 'Clouds are a very good word.')\n    find_adverb_position(\"Where do the cows come from?\") == ('cows', 'Cow are from the mountains.')\n    find_adverb_position(\"Cats are nice and quiet\") == ('quiet', 'Quiet is nice and quiet')\n    find_adverb_position(\"I prefer to go outdoors rather than in the forest.\") == ('outdoors', 'Outdoors are best outdoors.')\n    find_adverb_position(\"I'd rather go to the cinema than the restaurant.\") == ('cinema', 'I want to go to the cinema.')\n    find_adverb_position(\"I used to go to the dentist, but now I have to go to the pharmacy.\") == ('pharmacy', 'Pharmacy is my best doctor.')\n    find_adverb_position(\"We must go to a party so we can have a good night.\") == ('party', 'I want to have a party.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the gym than the theatre.\") == ('gym', 'I want to go to the gym.')\n    find_adverb_position(\"I've been to the beach more than I've been to the sea.\") == ('beach', 'Beach is my best beach.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library and tell my classmates that I've come to the beach.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I would rather go to the library.\") == ('library', 'I want to go to the library.')\n    find_adverb_position(\"I am tired and want to go to the library.\") == ('library', 'I want to go to the library.')\n    find"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('What is the first step of the Act?') == \\\n        ['What is', 'What is the', 'What is the first', 'What is the first step', 'What is the first step of']\n\nassert find_adverb_position('The SUTD spends a lot of time writing programs. What are the 2 least important errors?') == \\\n        ['The SUTD spends', 'The SUTD spends a lot', 'The SUTD spends a lot of', 'The SUTD spends a lot of time', 'The SUTD spends a lot of time writing', 'The SUTD spends a lot of time writing programs', 'What are', 'What are the', 'What are the least', 'What are the least important', 'What are the least important errors']\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_adverb_position(\"A French restaurant is named after Marie-Louise of France, the French restaurant\") == True\nassert find_adverb_position(\"A French restaurant is named after Marie-Louise of France, the French restaurant\") == False\nassert find_adverb_position(\"My favorite restaurant is named after Marie-Louise of France, the French restaurant\") == True\nassert find_adverb_position(\"My favorite restaurant is named after Marie-Louise of France, the French restaurant\") == False\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position('The flight ended yesterday at 12:00.') == (3, 5), 'incorrect'\nassert     find_adverb_position('The flight ended at 12:00 yesterday.') == (0, 1), 'incorrect'\nassert     find_adverb_position('The flight ended at 12:00 yesterday.') == (0, 1), 'incorrect'\nassert     find_adverb_position('The flight ended at 12:00 yesterday.') == (0, 1), 'incorrect'\nassert     find_adverb_position('The flight ended at 12:00 yesterday.') == (0, 1), 'incorrect'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position('So slow and light') == 'So' and 'light'\nassert    find_adverb_position('A frog and a turtle') == 'frog' and 'turtle'\nassert    find_adverb_position('The weather is nice') == 'weather' and 'nice'\nassert    find_adverb_position('It is raining and cool') == 'it' and 'raining' and 'cool'\nassert    find_adverb_position('He is a cat') == 'he' and 'cat'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position(\"I would rather be a little to the right of that than to the left of that.\") == \\\n        (1, 7)\nassert     find_adverb_position(\"I would rather be a little to the right of that than to the left of that.\") == \\\n        (4, 9)\nassert     find_adverb_position(\"I would rather be a little to the right of that than to the left of that.\") == \\\n        (1, 6)\nassert     find_adverb_position(\"I would rather be a little to the right of that than to the left of that.\") == \\\n        (4, 9)\nassert     find_adverb_position(\"I would rather be a little to the right of that than to the left of that.\") == \\\n        (1, 6)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position(\"The cat climbed the tree\") == (3, 7), \\\n        \"Expected (3, 7), but got %s\" %(find_adverb_position(\"The cat climbed the tree\"))\nassert     find_adverb_position(\"The cat climbed the tree\") == (3, 7), \\\n        \"Expected (3, 7), but got %s\" %(find_adverb_position(\"The cat climbed the tree\"))\nassert     find_adverb_position(\"The cat climbed the tree\") == (3, 7), \\\n        \"Expected (3, 7), but got %s\" %(find_adverb_position(\"The cat climbed the tree\"))\nassert     find_adverb_position(\"The cat climbed the tree\") == (3, 7), \\\n        \"Expected (3, 7), but got %s\" %(find_adverb_position(\"The cat climbed the tree\"))\nassert     find_adverb_position(\"The cat climbed the tree\") == (3, 7), \\\n        \"Expected (3, 7), but got %s\" %(find_adverb_position(\"The cat climbed the tree\"))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position(\"The first sentence is an example.\") == ['an', 'at', 'in', 'of', 'the']\nassert     find_adverb_position(\"I went to the store.\") == ['to', 'on', 'it']\nassert     find_adverb_position(\"He went to the store.\") == ['to', 'on', 'it']\nassert     find_adverb_position(\"He went to the store.\") == ['to', 'on', 'it']\nassert     find_adverb_position(\"The car fell off the road.\") == ['off', 'on', 'the', 'road']\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(3) == 8, \"incorrect\"\nassert     surfacearea_cube(6) == 54, \"incorrect\"\nassert     surfacearea_cube(9) == 144, \"incorrect\"\nassert     surfacearea_cube(11) == 244, \"incorrect\"\nassert     surfacearea_cube(14) == 624, \"incorrect\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(2) == 20\nassert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(0) == 0\n\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cube(1) == 1\nassert     surfacearea_cube(2) == 8\nassert     surfacearea_cube(3) == 18"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsurfacearea_cube(10) == 4800\n\ndef surfacearea_pyramid(b, h):\n    '''\n    Write a function to find the surface area of a pyramid of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('OK')\nprint('--------------------------------------')\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(2) == 12\nassert     surfacearea_cube(3) == 24"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(1) == 1, \"1\"\nassert     surfacearea_cube(2) == 1, \"2\"\nassert     surfacearea_cube(3) == 6, \"3\"\nassert     surfacearea_cube(4) == 24, \"4\"\nassert     surfacearea_cube(5) == 50, \"5\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    surfacearea_cube(1) == 6\n    surfacearea_cube(2) == 20\n    surfacearea_cube(5) == 108\n\ndef surfacearea_circle(radius):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     positive_count([-1,1,1,1]) == 0.25, \"Wrong answer\"\n\ndef single_element(nums):\n    '''\n    Write a function to find the single element of an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert positive_count([1,2,3,4,5]) == 0.2, 'the positive_count should return 0.2'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_and_average(arr):\n    '''\n    Write a function that computes the sum of all the values in the array, and the average of the values in the array.\n    '''\n    \n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_and_count_groups(nums):\n    '''\n    Write a function that takes an array of integers (n > 0) and returns a tuple containing\n    the number of groups of only positive numbers, and the array of only positive numbers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_nums(nums):\n    '''\n    Write a function that adds the numbers in an array of integers.\n    '''\n    return 0\n    "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     positive_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 1.6\nassert     positive_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,1]) == 1.6\nassert     positive_count([]) == 1.0\n\ndef min_max_num(nums):\n    '''\n    Write a function to find the min and max numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(positive_count([-3, 4, -9, 2, -5, -1]))\nassert positive_count([1,2,3]) == 0\nassert positive_count([]) == 0\n\ndef sum_of_squares(nums):\n    '''\n    Write a function to find the sum of squares of integers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef negative_count(nums):\n    '''\n    Write a function to find the ratio of negative numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     positive_count([]) == 0.0, \"Error: make sure your function is returning a float value\"\nassert     positive_count([1,2]) == 0.5, \"Error: make sure your function is returning a float value\"\nassert     positive_count([1,2,3,4,5]) == 0.8, \"Error: make sure your function is returning a float value\"\nassert     positive_count([-1,-2,-3,-4,-5]) == 0.0, \"Error: make sure your function is returning a float value\"\nassert     positive_count([-1,-2,0,0,-2]) == 0.8, \"Error: make sure your function is returning a float value\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not positive_count([1,2,3,4,5,6,7,8,9,10]) == 0.0, \"Should return 1.0\"\nassert positive_count([1,2,3,4,5,6,7,8,9,10]) == 1.0, \"Should return 1.0\"\nassert positive_count([0,1,2,3,4,5,6,7,8,9,10]) == 1.0, \"Should return 1.0\"\nassert positive_count([-1,0,1,2,3,4,5,6,7,8,9,10]) == 1.0, \"Should return 1.0\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert largest_neg([1,-2,3,-1]) == 3 \nassert largest_neg([-2,3,-1,-9]) == -1 \nassert largest_neg([-1,-2,-3,-9]) == -3 \nassert largest_neg([-2,-3,-1,-9]) == -1 \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([-2, -1, -5, -3, -7, -4]) == -4\nassert     largest_neg([-2, -1, -5, -3, -7, -4, -9, -6]) == -9\nassert     largest_neg([-2, -1, -5, -3, -7, -4, -9, -6]) == -6\nassert     largest_neg([-2, -1, -5, -3, -7, -4, -9, -6, -9]) == -7\nassert     largest_neg([-2, -1, -5, -3, -7, -4, -9, -6, -9, -8]) == -7\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-1, -2, -4, -5, -3, -8]) == -5, \"Fail\"\nassert     largest_neg([]) == None, \"Fail\"\nassert     largest_neg([-1, -2, -4, -5, -3, -8, -1, 2, -2]) == -1, \"Fail\"\nassert     largest_neg([0, -2, -4, -5, -3, -8, -1, 2, -2]) == 2, \"Fail\"\nassert     largest_neg([-1, -2, -4, -5, -3, -8, -1, 2, -2, 3]) == -3, \"Fail\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(f\"The largest negative number in the list is {largest_neg(list1)}\")"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_neg([2, -5, 1, -3, -4]) == 1 \nassert     largest_neg([-2, -5, 1, -3, -4]) == -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_neg([-2, -3, -4, -5, -10]) == -10\nassert     largest_neg([-3, -4, -5, -10]) == -5\nassert     largest_neg([-2, -3, -4, -5, -100]) == -100\nassert     largest_neg([-10, -9, -8, -7, -1, 0, 1]) == -1\nassert     largest_neg([0, 1, 2, 3, -4, 5, -10, -20, -30, -100]) == -100\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nlargest_neg([-10, -2, -3, -4, -5]) == -5\nlargest_neg([]) == None\nlargest_neg([10, 20, 30, 40, -50]) == -50\nlargest_neg([-1, -2, -3, -4, -5, 0]) == -5\nlargest_neg([10, 20, 30, 40, 50, -50]) == 50"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert largest_neg([-1,-2,-3,-4,-5]) == -5\nassert largest_neg([-1,-2,-3]) == -1\nassert largest_neg([-1]) == -1"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_neg([-3,-2,-1,0,1,2,3]) == 0, 'Wrong result'\nassert     largest_neg([-3,-2,-1,0,1,2,3,4,5,6]) == 6, 'Wrong result'\nassert     largest_neg([-3,-2,-1,-0.8,0,1,2,3]) == 1, 'Wrong result'\nassert     largest_neg([-3,-2,-1,-0.8,0,1,2,3,10]) == 3, 'Wrong result'\nassert     largest_neg([-3,-2,-1,-0.8,0,1,2,3,-5]) == 3, 'Wrong result'\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple(\n            [\n                (1, 2, 3, 4, 5),\n                (2, 3, 4, 5, 6),\n                (2, 3, 4, 5, 6)\n            ],\n            K=2\n        ) ==     [\n                (1, 2),\n                (3, 4, 5),\n                (4, 5, 6)\n        ]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert trim_tuple([(1,2,3,4),(4,3,2,1),(5,6,7,8)],3) == [(1,2,3,4),(4,3,2),(5,6,7,8)]\nassert trim_tuple([(1,2,3,4),(4,3,2,1),(5,6,7,8)],5) == [(1,2,3,4),(4,3,2,1)]\nassert trim_tuple([(1,2,3,4),(4,3,2,1),(5,6,7,8)],1) == [(1,2,3,4),(4,3,2,1),(5,6,7,8)]\nassert trim_tuple([(1,2,3,4),(4,3,2,1),(5,6,7,8)],0) == [(1,2,3,4),(4,3,2,1),(5,6,7,8)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple(test_list, K) == [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)]\nprint('  Checking done')\nprint()"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([(1, 2, 3, 4, 5), (1, 2, 3, 4, 5)], 2) == [(1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3, 4, 5), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5)], 4) == [(1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3, 4, 5), (1, 2, 3, 4, 5)], 0) == [(1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3, 4, 5), (1, 2, 3, 4, 5)], 1) == [(1, 2, 3, 4, 5)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple(test_list, K) == \n    [\n    (0, 1, 2, 3),\n    (1, 2, 3),\n    (2, 3)\n    ]\n\ndef swap_elements(test_list, k, m):\n    '''\n    Write a function to swap the kth and mth element of a list.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple([(1,2),(3,4)], K=1) == [(1,2),(3,4)]\nassert     trim_tuple([(1,2),(3,4)], K=2) == [(3,4)]\nassert     trim_tuple([(1,2),(3,4)], K=3) == []\nassert     trim_tuple([(1,2),(3,4),(5,6)], K=3) == []\nassert     trim_tuple([(1,2),(3,4),(5,6)], K=2) == [(3,4),(5,6)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([(1,2,3),(2,3),(4,5)],2) == [(1,2),(4,5)]\nassert     trim_tuple([(1,2,3),(2,3),(4,5)],3) == [(1,2,3),(2,3),(4,5)]\nassert     trim_tuple([(1,2,3),(2,3,4),(4,5)],1) == [(1,2,3),(2,3,4),(4,5)]\nassert     trim_tuple([(1,2,3),(2,3),(4,5,6)],2) == [(1,2),(4,5)]\nassert     trim_tuple([(1,2),(2,3),(4,5)],1) == [(1,2),(2,3),(4,5)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntest_list = [(1, 2, 3), (4, 5), (6, 7, 8, 9, 10), (11, 12)]\nK = 2\n\nprint('The result is:', trim_tuple(test_list, K))"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntrim_tuple([('a','b'),('c','d'),('e','f')], 2) == ([('a','b'),('c','d')], 2)\nassert trim_tuple([('a','b'),('c','d'),('e','f')], 3) == ([('a','b'),('c','d')], 3)\nassert trim_tuple([('a','b'),('c','d'),('e','f')], 1) == ([('a','b'),('c','d'),('e','f')], 1)\nassert trim_tuple([('a','b'),('c','d'),('e','f')], 0) == ([('a','b'),('c','d'),('e','f')], 0)\nassert trim_tuple([('a','b'),('c','d'),('e','f')], -1) == ([('a','b'),('c','d'),('e','f')], -1)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_multiplication(\n(1,2,3,4), (5,6,7,8)\n) == ((1*5,2*5,3*5,4*5), (5*6,6*7,7*8,8*8))\n\n\ndef index_division(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication(test_tup1, test_tup2) == (\n    (2, 3), (2, 4), (4, 3), (4, 4))\n\n\ndef multiple_element_index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform multiple element index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication((1,2,3), (4,5,6)) == (4, 10, 18)\nassert     index_multiplication((4,5,6), (1,2,3)) == (20, 40, 60)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication((1,2,3), (2,3,4)) == ((2,4,6), (3,6,9))\nassert     index_multiplication((2,4,6), (3,6,9)) == ((6,12,18), (6,12,18))\nassert     index_multiplication((1,2), (3,4)) == ((3,4), (1,4))\nassert     index_multiplication((2,4), (3,4)) == ((4,8), (2,8))\nassert     index_multiplication((1,2,3), (4,5,6)) == ((4,10,18), (2,10,18))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication(('a', 'b'), ('c', 'd')) == ('ac', 'bd'), \"Wrong\"\nassert     index_multiplication(('a', 'b', 'c'), ('d', 'e')) == ('ad', 'ed'), \"Wrong\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_multiplication((1, 2, 3), (10, 20, 30)) == (10, 40, 60)\nassert     index_multiplication((1, 2, 3), (30, 20, 10)) == (300, 200, 10)\nassert     index_multiplication((-1, -2, -3), (10, 20, 30)) == (-100, -200, -300)\nassert     index_multiplication((-1, -2, -3), (30, 20, 10)) == (-310, -210, -10)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_multiplication((10, 20, 30), (1, 2, 3)) == (10, 20, 30, 1, 2, 3)\nassert     index_multiplication((1, 2, 3), (10, 20, 30)) == (1, 2, 3, 10, 20, 30)\nassert     index_multiplication((10, 20, 30), (1, 2, 3)) == (10, 20, 30, 1, 2, 3)\nprint(\"correct\")\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication((1, 2), (3, 4)) == (3, 8) \nassert     index_multiplication((5, 6), (2, 4)) == (20, 24) \nassert     index_multiplication((1, 2, 3, 4), (0, 1, 2, 3)) == (0, 0, 2, 6)\nassert     index_multiplication((1, 2, 3, 4), (0, 3, 0, 5)) == (0, 0, 0, 12)\nassert     index_multiplication((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 4, 6, 24)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18), \"Index multiplication failed\"\nprint(\"Index multiplication passed\")\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Occurrence((1,3,5),[1,2,5,1,4]) == 2\nassert     count_Occurrence((1,3,5),[1,2,5,1,4,2,2,5]) == 2\nassert     count_Occurrence((1,3,5),[1,2,5,1,4,2,2,5,2,2,5]) == 1\nassert     count_Occurrence((1,3,5),[1,2,5,1,4,2,2,5,2,2,5,2,2,5,2,2,5]) == 1\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_Occurrence([1,2,3,4,4,5],[1,2,3,4,4,5]) == (Counter({4: 3, 5: 1}))\nassert count_Occurrence([1,2,3,4,5,6],[1,2,3,4,5,6]) == (Counter({1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}))\n\n\ndef list_Duplicates(lst):\n    '''\n    Write a python function to check whether a given list contains any duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_Occurrence((1,2,3,4), [1,2,3,4]) == 4, \"should be 4\"\nassert \ncount_Occurrence((5,2,4,4), [1,2,3,4]) == 1, \"should be 1\"\nassert \ncount_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == 5, \"should be 5\"\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Occurrence((1,3,1,2,3,3),[1,2,3,4,5,6,7,8,9,10]) == Counter({1:3, 2:1, 3:3})\nassert count_Occurrence((5,2,3,6,6,8,5),[1,2,3,4,5,6,7,8,9,10]) == Counter({2:1, 3:1, 5:2, 6:1, 8:1})\nassert count_Occurrence((5,2,3,6,6,8,5),[1,2,3,4,5,6,7,8,9,10,10]) == Counter({2:1, 3:2, 5:2, 6:1, 8:1, 10:2})\nassert count_Occurrence((2,2,2,2),[1,2,3,4,5,6,7,8,9,10,10]) == Counter({2:5})\nassert count_Occurrence((2,2,2,2),[1,2,3,4,5,6,7,8,9,10,10,10,10]) == Counter({2:6})\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert count_Occurrence((1,3,6,6), [1,2,3,4,5]) == (2,3,1)\nassert count_Occurrence((1,3,6,6), [1,2,3,4,5,6]) == (2,3,1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Occurrence((5, 5, 5), [1, 2, 3]) == (1, 3)\nassert count_Occurrence((5, 5, 5), ['5', 5, 5]) == (2, 2)\nassert count_Occurrence((5, 5, 5), ['5', '5', 5]) == (1, 3)\nassert count_Occurrence((5, 5, 5), ['5', 5, '5']) == (1, 3)\nassert count_Occurrence((5, 5, 5), ['5', '5', '5']) == (2, 1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Occurrence((1,2,3,4), [1,2,3,4]) == 4\nassert     count_Occurrence((1,2,3,4,5,6), [1,2,3,4,5,6]) == 6\nassert     count_Occurrence((1,2,3,4,5,6), [1,2,3,4,5,6,7,8]) == 1\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_permutations(tup):\n    '''\n    Write a python function to count the number of permutations of all elements of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Occurrence( (1,2,3),  []) == Counter()\nassert     count_Occurrence( (1,2,3),  [1,2,3]) == Counter({1:1,2:1,3:1})\nassert     count_Occurrence( (1,2,2),  [1,2,3]) == Counter({1:2,2:1,3:1})\n\ndef count_Occurrence_update(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    You need to use the update method of dictionary to update the dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64], \"Wrong answer\"\nprint(\"You are correct!\\n\")\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert cube_nums([-3, 0, 2, 4, 5]) == [-27, 0, 4, 16, 125]\nassert cube_nums([-5, 0, 2, 4, 5]) == [-125, 0, 4, 16, 64]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_nums([-3, -2, 1, 2, 3]) == [-27, -4, 1, 8, 27]\nassert cube_nums([-3, -2, 1, 2, 3]) == [-27, -4, 1, 8, 27]\nassert cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\nassert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert cube_nums([1, 2, 3, 4, 5, 6]) == [1, 8, 27, 64, 125, 216]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_nums([1,2,3]) == [1,8,27]\nassert     cube_nums([0,0,0]) == [0,0,0]\nassert     cube_nums([-2,-3,-4]) == [-32,-64,-128]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\ncube_nums([1, -2, 3, -4, 5]) == [1, -8, 27, -64, -125]\ncube_nums([1, 2, -3, 4, 5]) == [1, 8, 27, 64, 125]\ncube_nums([-1, -2, -3, -4, -5]) == [1, 8, 27, 64, 125]\n\n\n\ndef word_count(word_list):\n    '''\n    Write a function that counts the number of unique words in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert     cube_nums([2, 4, 1, 0, -1]) == [-8, 64, -256, -1, 0]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_nums([1,2,3,4]) == [1, 8, 27, 64], \"Error\"\nassert cube_nums([1,2,3,4]) == [1, 8, 27, 64], \"Error\"\nassert cube_nums([]) == [], \"Error\"\nassert cube_nums([1,2,3]) == [1, 8, 27], \"Error\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncube_nums([1,2,3,4,5]) == [1,8,27,64,125]\nprint('correct')\n\ncube_nums([0,8,9,16,25]) == [0,64,729,4032,625]\nprint('correct')\n\ncube_nums([1,2,3,4,5,6,7,8,9,10]) == [1,64,729,4032,625,12288,72918,64384,729648,648130,7297568,64,7298112,6389096,7298112,64,729648,6389096,64,7298112,6389096,64,7298112]\nprint('correct')\n\ncube_nums([-1,0,5,6,9,-10]) == [-1,0,64,729,4032,625,64,729,4032,625]\nprint('correct')\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([1, 2, 3]) == [1, 8, 27], \"cube_nums failed\"\nassert cube_nums([1, 3, 4, 5]) == [1, 8, 27, 64], \"cube_nums failed\"\nassert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125], \"cube_nums failed\"\nassert cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64], \"cube_nums failed\"\nassert cube_nums([1, 2, 3]) == [1, 8, 27], \"cube_nums failed\"\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cal_sum(2) == 1\nassert     cal_sum(3) == 4\nassert     cal_sum(4) == 9\nassert     cal_sum(5) == 28\nassert     cal_sum(6) == 88\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cal_sum(10) == 55, \"Test 1 Failed\"\nassert     cal_sum(0) == 0, \"Test 2 Failed\"\nassert     cal_sum(1) == 1, \"Test 3 Failed\"\nassert     cal_sum(2) == 3, \"Test 4 Failed\"\nassert     cal_sum(3) == 6, \"Test 5 Failed\"\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cal_sum(0) == 0, 'The sum of zero is zero.'\nassert     cal_sum(1) == 1, 'The sum of one is one.'\nassert     cal_sum(10) == 55, 'The sum of ten is 55.'\nassert     cal_sum(12) == 77, 'The sum of twelve is 77.'\nassert     cal_sum(13) == 84, 'The sum of thirteen is 84.'\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert cal_sum(10) == 55, 'Input wrong'\nassert cal_sum(50) == 705, 'Input wrong'\nassert cal_sum(150) == 7525, 'Input wrong'\nassert cal_sum(200) == 9685, 'Input wrong'\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cal_sum(5) == (1+2+3+4+5)\nassert     cal_sum(12) == (1+2+3+4+5+6+7+8+9+10+11+12)\nassert     cal_sum(10000) == (1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50+51+52+53+54+55+56+57+58+59+60+61+62+63+64+65+66+67+68+69+70+71+72+73+74+75+76+77+78+79+80+81+82+83+84+85+86+87+88+89+90+91+92+93+94+95+96+97+98+99+100)\nassert     cal_sum(1000000) == (1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40+41+42+43+44+45+46+47+48+49+50+51+52+53+54+55+56+57+58+59+60+61+62+63+64+65+66+67+68+69+70+71+72+73+74+75+76+77+78+79+80+81+82+83+84+85+86+87+88+89+90+91+92+93+94+95+96+97+98+99+100)\n\ndef calc_factorial(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert type(cal_sum) == int\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string([\"asdf\", \"qwer\", \"tyui\"], 1) == \"asdf\"\nassert     extract_string([\"asdf\", \"qwer\", \"tyui\"], 2) == \"asdfqwer\"\nassert     extract_string([\"asdf\", \"qwer\", \"tyui\"], 3) == \"asdfqwertyui\"\nassert     extract_string([\"asdf\", \"qwer\", \"tyui\"], 4) == \"asdfqwertyui\"\nassert     extract_string([\"asdf\", \"qwer\", \"tyui\"], 5) == \"asdfqwertyui\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_string(['a','b','c','d','e'], 2) == ['ab','cd','e']\nassert     extract_string(['a','b','c','d','e'], 3) == ['abc','dee']\nassert     extract_string(['a','b','c','d','e'], 4) == ['aab','cdee']\nassert     extract_string(['a','b','c','d','e'], 5) == ['aaa','bbbb','cdddd','eeee']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_string(['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxyz'], 2) == 'abcde'\nassert     extract_string(['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxyz'], 3) == 'klmno'\nassert     extract_string(['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxyz'], 4) == 'pqrst'\nassert     extract_string(['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxyz'], 5) == 'uvwxyz'\nassert     extract_string(['abcde', 'fghij', 'klmno', 'pqrst', 'uvwxyz'], 6) == ''\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string([\"Hello\", \"I\", \"am\", \"1st\", \"K\", \"nigth\", \"time\", \"to\", \"extract\", \"length\"], 4) == \"Hello\"\nassert     extract_string([\"Hello\", \"I\", \"am\", \"1st\", \"K\", \"nigth\", \"time\", \"to\", \"extract\", \"length\"], 5) == \"\"\n\ndef get_longest_word(words):\n    '''\n    Write a function to get the longest word from a given list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string([\"Hello\", \"How\", \"are\", \"you\", \"\", \"Good\", \"\", \"\", \"Fine\"], 2) == [\"Hello\", \"How\", \"are\", \"you\", \"Good\"]\nassert     extract_string([\"Hello\", \"How\", \"are\", \"you\", \"\", \"Good\", \"\", \"\", \"Fine\"], 0) == [\"Hello\"]\nassert     extract_string([\"Hello\", \"How\", \"are\", \"you\", \"\", \"Good\", \"\", \"\", \"Fine\"], 5) == [\"Hello\", \"How\"]\nassert     extract_string([\"Hello\", \"How\", \"are\", \"you\", \"\", \"Good\", \"\", \"\", \"Fine\"], 10) == [\"Hello\", \"How\"]\nassert     extract_string([\"Hello\", \"How\", \"are\", \"you\", \"\", \"Good\", \"\", \"\", \"Fine\"], 15) == [\"Hello\", \"How\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_string(['a','b','c','d','e'], 3) == ['a','b','c']\nassert     extract_string(['a','b','c','d','e'], 2) == ['a','b']\nassert     extract_string(['a','b','c','d','e'], 1) == ['a','b','c','d','e']\nassert     extract_string(['a','b','c','d','e'], 0) == ['a','b','c','d','e']\nassert     extract_string(['a','b','c','d','e'], -1) == ['a','b','c','d','e']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_string([\"the\", \"quick\", \"brown\", \"fox\"], 2) == [\"the\", \"quick\"]\nassert     extract_string([\"the\", \"quick\", \"brown\", \"fox\"], 1) == [\"the\", \"quick\"]\nassert     extract_string([\"the\", \"quick\", \"brown\", \"fox\"], 0) == [\"the\", \"quick\", \"brown\", \"fox\"]\nassert     extract_string([\"the\", \"quick\", \"brown\", \"fox\"], -1) == [\"the\", \"brown\", \"fox\"]\nassert     extract_string([\"the\", \"quick\", \"brown\", \"fox\"], -2) == [\"the\", \"quick\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_string(['hi', 'hello', 'how'], 2) == ['hi', 'hello']\nassert     extract_string(['hi', 'hello', 'how'], 1) == ['hi']\nassert     extract_string(['hi', 'hello', 'how'], 0) == ['hello', 'how']\nassert     extract_string(['hi', 'hello', 'how'], 3) == ['hi', 'hello']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string(['kkk','eee','uuu'], 2) == ['kkk','uuu']\nassert     extract_string(['kkk','eee','uuu'], 5) == ['kkk','eee','uuu']\nassert     extract_string(['kkk','eee','uuu'], 8) == ['kkk','eee','uuu']\nassert     extract_string(['kkk','eee','uuu'], 1) == ['eee']\nassert     extract_string(['kkk','eee','uuu'], 0) == ['kkk','uuu']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nextract_string([\"test\", \"me\", \"me\", \"me\"], 3) == [\"test\", \"me\", \"me\"]\nassert \nextract_string([\"test\", \"me\", \"me\", \"me\"], 4) == [\"test\", \"me\", \"me\", \"me\"]\nassert \nextract_string([\"test\", \"me\", \"me\", \"me\"], 5) == [\"test\", \"me\", \"me\", \"me\", \"me\"]\nassert \nextract_string([\"test\", \"me\", \"me\", \"me\", \"me\"], 6) == [\"test\", \"me\", \"me\", \"me\", \"me\", \"me\"]\nassert \nextract_string([\"test\", \"me\", \"me\", \"me\", \"me\", \"me\"], 7) == [\"test\", \"me\", \"me\", \"me\", \"me\", \"me\", \"me\"]\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces(' ') == '', 'incorrect result'\nassert     remove_whitespaces('\\t') == '', 'incorrect result'\nassert     remove_whitespaces('\\n') == '', 'incorrect result'\nassert     remove_whitespaces('\\r') == '', 'incorrect result'\nassert     remove_whitespaces(' ') == '', 'incorrect result'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\"space\") == \"space\", \"not found\"\nassert     remove_whitespaces(\"\") == \"\", \"found\"\nassert     remove_whitespaces(\" \") == \"\", \"found\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef words(text1):\n    '''\n    Write a function to return a list of words in the given text.\n    The list should be in the same order as in the original text.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(\"\") == \"\"\nassert     remove_whitespaces(\" \") == \"\"\nassert     remove_whitespaces(\"  \") == \"\"\nassert     remove_whitespaces(\"\\n\\n\\n\") == \"\"\nassert     remove_whitespaces(\"\\n\\t\\n\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef swap_words(text1):\n    '''\n    Write a function to swap the occurrence of words in a given string.\n    For example:\n    \n    Input: the quick brown fox jumps over the lazy dog.\n    Output: jumps over the fox the dog brown the quick\n    \n    The idea is to scan the string in a reverse order. \n    To swap the occurrence of word, we need to swap the word at index i with the word at index j.\n    At each step, we need to check whether we are at the end of the string.\n    If we are at the end of the string, we swap the word and move to the next word.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces(\"\") == \"\", \"remove_whitespaces function should return an empty string\"\nassert remove_whitespaces(\"   \") == \"\", \"remove_whitespaces function should return an empty string\"\nassert remove_whitespaces(\"    \") == \"\", \"remove_whitespaces function should return an empty string\"\nassert remove_whitespaces(\"   \\n\") == \"\", \"remove_whitespaces function should return an empty string\"\nassert remove_whitespaces(\" \\n\") == \"\", \"remove_whitespaces function should return an empty string\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces('') == ''\nassert     remove_whitespaces(' ') == ''\nassert     remove_whitespaces(''+ 'this is a test') == 'this is a test'\nassert     remove_whitespaces(''+ 'this is a test ') == 'this is a test'\nassert     remove_whitespaces('a') == 'a'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"  \") == \"\", \"Remove whitespaces\"\nassert     remove_whitespaces(\"hello world\") == \"hello world\", \"Remove whitespaces\"\nassert     remove_whitespaces(\"hello   world\") == \"hello   world\", \"Remove whitespaces\"\nassert     remove_whitespaces(\"hello\\tworld\") == \"hello\\tworld\", \"Remove whitespaces\"\nassert     remove_whitespaces(\"hello\\t\\nworld\") == \"hello\\tworld\", \"Remove whitespaces\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(100,10) == 20\nassert loss_amount(100,0) == 0\nassert loss_amount(100,-10) == 80\nassert loss_amount(100,-100) == 0\nassert loss_amount(100,100) == 0"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     loss_amount(100,50)==0, \"loss_amount is wrong\"\nassert loss_amount(50,100)==50, \"loss_amount is wrong\"\nassert loss_amount(150,100)==0, \"loss_amount is wrong\"\nassert loss_amount(150,-20)==120, \"loss_amount is wrong\"\nassert loss_amount(30,-30)==0, \"loss_amount is wrong\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(1000,2000) == 2000\nassert loss_amount(1000,-1000) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(45.25,25) == 5.75\nassert     loss_amount(45.25,32) == 0\nassert     loss_amount(30.25,45) == 0\nassert     loss_amount(30.25,30) == 0\nassert     loss_amount(100,30) == 30\nprint(\"The tests for loss_amount have passed.\")\nprint()\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(100,10) == 80\nassert     loss_amount(10,30) == 0\nassert     loss_amount(300,40) == -2"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     loss_amount(1500, 50000)==500,'The loss amount is not correct'\nassert     loss_amount(20000, 50000)==0,'The loss amount is not correct'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(100,60) == 20\nassert     loss_amount(60,40) == 20\nassert     loss_amount(40,10) == 0\nassert     loss_amount(10,0) == 0\nassert     loss_amount(0,20) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(100,120) == 20\nassert    loss_amount(100,70) == 0\nassert    loss_amount(120,120) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(actual_cost=1000,sale_amount=500) == 500\nassert     loss_amount(actual_cost=1000,sale_amount=999) == 1000\nassert     loss_amount(actual_cost=1000,sale_amount=99) == 999\nassert     loss_amount(actual_cost=1000,sale_amount=0) == 0\nassert     loss_amount(actual_cost=1000,sale_amount=-1) == 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sumofFactors(6) == 3, \"Unexpected result\"\nassert sumofFactors(121) == 48, \"Unexpected result\"\n\ndef isPowerOfTwo(n) : \n    '''\n    Write a python function to find whether the input number is a power of 2.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sumofFactors(2) == 2\nassert     sumofFactors(12) == 6\nassert     sumofFactors(15) == 8\nassert     sumofFactors(1) == 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sumofFactors(16) == 2, \"Test Case 1 Failed\"\nassert     sumofFactors(11) == 1, \"Test Case 2 Failed\"\nassert     sumofFactors(12) == 3, \"Test Case 3 Failed\"\nassert     sumofFactors(6) == 2, \"Test Case 4 Failed\"\nassert     sumofFactors(13) == 5, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nLet us calculate the sum of the even factors of the number: \n\nif a number is divisible by 4 it is an even number.\n\nif a number is divisible by 2 it is an even number.\n\nif a number is divisible by 7 it is an even number.\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nCreate a function that takes an array of integers and returns a dictionary\nin which the keys are the integers in the array, and the values are the number\nof times each key appeared in the array. \n\nThe value returned from your function should be a dictionary.\n\nFor example, if the array is {1, 2, 3, 4}, then your function should return\n{1: 1, 2: 1, 3: 1, 4: 1}.\n\nThis function should work even if numbers repeat.\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sumofFactors(6) == 1, \"sum of factors not correct\"\n\nassert sumofFactors(8) == 2, \"sum of factors not correct\""
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sumofFactors(5) == 0\nassert     sumofFactors(30) == 0\nassert     sumofFactors(8) == 1\nassert     sumofFactors(1000) == 1\nassert     sumofFactors(30) == 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sumofFactors(6) == 2, \"Not implemented\"\nassert     sumofFactors(1) == 1, \"Not implemented\"\nassert     sumofFactors(10) == 5, \"Not implemented\"\nassert     sumofFactors(35) == 22, \"Not implemented\"\nassert     sumofFactors(9) == 0, \"Not implemented\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # print text_match_wordz(\"aa_bc_dc_\")\n    # print text_match_wordz(\"aa_bc_d_\")\n    # print text_match_wordz(\"aa_bc_z_\")\n    # print text_match_wordz(\"aa_bc_dz_\")\n    # print text_match_wordz(\"abc_\")\n    # print text_match_wordz(\"a_b\")\n    # print text_match_wordz(\"abb_cd\")\n    # print text_match_wordz(\"abb_cd_\")\n    # print text_match_wordz(\"abc_123\")\n    # print text_match_wordz(\"abc_123_\")\n    # print text_match_wordz(\"abc123\")\n    # print text_match_wordz(\"abc123_\")\n    # print text_match_wordz(\"abc123_z\")\n    # print text_match_wordz(\"abc123_z_\")\n    # print text_match_wordz(\"abz123\")\n    # print text_match_wordz(\"a_z123\")\n    # print text_match_wordz(\"abc_123_z\")\n    # print text_match_wordz(\"abc123_z_\")\n    # print text_match_wordz(\"abc123_z_a\")\n    # print text_match_wordz(\"abc123_z_abc\")\n    print(\"\")\n    print(\"\")\n    # print text_match_wordz(\"aaaaa_123\")\n    # print text_match_wordz(\"aaaaa_123_\")\n    # print text_match_wordz(\"a_aa_a_\")\n    # print text_match_wordz(\"a_aa_a\")\n    # print text_match_wordz(\"aa_a_a_\")\n    # print text_match_wordz(\"aa_a_a\")\n    # print text_match_wordz(\"aa_a_123\")\n    # print text_match_wordz(\"aaa_a_a\")\n    # print text_match_wordz(\"aa_a_\")\n    # print text_match_wordz(\"aaa_a\")\n    # print text_match_wordz(\"aaa_aa_a\")\n    # print text_match_wordz(\"aaa_a_a\")\n    # print text_match_wordz(\"aaa_a_a_\")\n    # print text_match_wordz(\"aaa_a_123\")\n    # print text_match_wordz(\"aaa_a_123_\")\n    # print text_match_wordz(\"aa_a_1_2\")\n    # print text_match_wordz(\"a_a_1_2\")\n    # print text_match_wordz(\"a_a_1_2_\")\n    # print text_match_wordz(\"a_a_1_2_a\")\n    # print text_match_wordz(\"a_a_1_2_aa\")\n    # print text_match_wordz(\"aaa_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a\")\n    # print text_match_wordz(\"aaa_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a_a\")\n    # print text_match_wordz(\"aaa_a_a_a_a_a_a_a_"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz(\"a\") == False\nassert     text_match_wordz(\"z\") == True\nassert     text_match_wordz(\"zz\") == True\nassert     text_match_wordz(\"zzz\") == True\nassert     text_match_wordz(\"zzzz\") == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz('the big Z')\nassert not text_match_wordz('the big z')\nassert not text_match_wordz('the big big z')\nassert not text_match_wordz('the big z z')\nassert     text_match_wordz('the z')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert text_match_wordz('') == False\nassert text_match_wordz('aaaaaaaaaaaaaab') == False\nassert text_match_wordz('az') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz(text) == True, 'Expected: True'\nassert     text_match_wordz('abc') == False, 'Expected: False'\nassert     text_match_wordz('zabc') == True, 'Expected: True'\nassert     text_match_wordz('zaabc') == False, 'Expected: False'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz('I have a zoo with many zebra') == True\nassert     text_match_wordz('I have a zoo with many zebra') == False\nassert     text_match_wordz('I have a zoo with many zebra') == False\nassert     text_match_wordz('I have a zoo with many zebra and this is not a zoo') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz('apple') == False\nassert     text_match_wordz('apples') == True\nassert     text_match_wordz('apples, banana') == False\nassert     text_match_wordz('apples, banana, apples') == False\nassert     text_match_wordz('apples, apple, banana, apple') == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(29) == False\nassert     check_monthnumb_number(52) == True\nassert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(4) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(12) == True\nassert check_monthnumb_number(1) == True"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(30) == False\nassert     check_monthnumb_number(5) == False\n\ndef check_year_number(yearnum):\n    '''\n    Write a function to check whether the given year number is leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(1) == True, 'Test case 1: Correct'\nassert     check_monthnumb_number(2) == False, 'Test case 2: Correct'\nassert     check_monthnumb_number(3) == True, 'Test case 3: Correct'\nassert     check_monthnumb_number(4) == False, 'Test case 4: Correct'\nassert     check_monthnumb_number(5) == True, 'Test case 5: Correct'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(32) == True\nassert     check_monthnumb_number(0) == False\nassert     check_monthnumb_number(13) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not check_monthnumb_number(1)\nassert check_monthnumb_number(2)\nassert check_monthnumb_number(3)\nassert check_monthnumb_number(4)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         check_monthnumb_number(12)     == True \nassert         check_monthnumb_number(1)     == False \nassert         check_monthnumb_number(5)     == False\nassert         check_monthnumb_number(12)     == False \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(31) == True, \"check_monthnumb_number should return True when given 31\"\nassert     check_monthnumb_number(28) == False, \"check_monthnumb_number should return False when given 28\"\nassert     check_monthnumb_number(29) == False, \"check_monthnumb_number should return False when given 29\"\nassert     check_monthnumb_number(30) == False, \"check_monthnumb_number should return False when given 30\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_monthnumb_number(4) == True\nassert check_monthnumb_number(100) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(31) == True, \"31st\"\nassert     check_monthnumb_number(32) == False, \"32nd\"\nassert     check_monthnumb_number(33) == False, \"33rd\"\nassert     check_monthnumb_number(34) == False, \"34th\"\nassert     check_monthnumb_number(35) == False, \"35th\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nreverse_string_list([\"I\", \"am\", \"the\", \"best\"]) == [\"best\", \"the\", \"am\", \"I\"]\nassert reverse_string_list([\"am\", \"the\", \"best\"]) == [\"best\", \"am\", \"the\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    reverse_string_list([]) == []\nassert\n    reverse_string_list([\n      \"hello\"\n    ]) == [\"hello\"]\nassert\n    reverse_string_list([\n      \"hello\",\n      \"Goodbye\"\n    ]) == [\"Goodbye\", \"hello\"]\nassert\n    reverse_string_list([\n      \"hello\",\n      \"Goodbye\",\n      \"Goodbye\"\n    ]) == [\"Goodbye\", \"hello\", \"Goodbye\"]\nassert\n    reverse_string_list([\n      \"hello\",\n      \"Goodbye\",\n      \"Goodbye\",\n      \"Goodbye\"\n    ]) == [\"Goodbye\", \"hello\", \"Goodbye\", \"Goodbye\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert reverse_string_list([]) == []\nassert reverse_string_list([\"a\"]) == [\"a\"]\nassert reverse_string_list([\"a\", \"b\"]) == [\"b\", \"a\"]\nassert reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_string_list([]) == []\nassert    reverse_string_list([\"a\"]) == [\"a\"]\nassert    reverse_string_list([\"a\", \"b\"]) == [\"b\", \"a\"]\nassert    reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_string_list([\"Hello\", \"world\"]) == [\"world\", \"Hello\"]\nassert     reverse_string_list([\"Hello\", \"world\", \"!\"]) == [\"!\", \"world\", \"Hello\"]\nassert     reverse_string_list([1,2,3,4,5,6,7]) == [7,6,5,4,3,2,1]\nassert     reverse_string_list([\"Hello\", \"world\"]) == [\"world\", \"Hello\"]\nassert     reverse_string_list([\"Hello\", \"world\", \"!\"]) == [\"!\", \"world\", \"Hello\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list([]) == []\nassert     reverse_string_list([\"a\",\"b\",\"c\",\"d\"]) == [\"d\",\"c\",\"b\",\"a\"]\nassert     reverse_string_list([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"e\",\"d\",\"c\",\"b\",\"a\"]\nassert     reverse_string_list([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == [\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"]\nassert     reverse_string_list([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]) == [\"g\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list([]) == []\nassert     reverse_string_list([None]) == [None]\nassert     reverse_string_list([\"no problem\"]) == [\"no problem\"]\nassert     reverse_string_list([\"fun and games\"]) == [\"games and fun\"]\nassert     reverse_string_list([\"strange\"]) == [\"strange\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_string_list([\"hello\", \"hi\", \"here\"]) == [\"here\", \"hi\", \"hello\"]\nassert     reverse_string_list([\"tom\", \"bob\", \"jane\"]) == [\"jane\", \"bob\", \"tom\"]\nassert     reverse_string_list([\"what\", \"a\", \"man\"]) == [\"man\", \"a\", \"what\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_string_list([\"Hello\", \"World\"]) == [\"World\", \"Hello\"]\nassert     reverse_string_list([\"apple\", \"banana\", \"cherry\"]) == [\"cherry\", \"banana\", \"apple\"]\nassert     reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_string_list([\"Hello\", \"world\"]) == [\"dlrow\", \"dlroW\"], \"wrong!\"\nassert     reverse_string_list([\"Hello\", \"world\", \"Goodbye\"]) == [\"dlroW\", \"dlroW\", \"dlrow\"], \"wrong!\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nFind_Min([1,2,3,4,5]) == 0\nassert \nFind_Min([1,2,3,4]) == 0\nassert \nFind_Min([1,2,3,4,5,6,7,8,9]) == 0\nassert \nFind_Min([1,2,3,4,5]) == 3\nassert \nFind_Min([1,2,3,4,5,6,7]) == 2\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([]) == None, \"Empty List\"\nassert     Find_Min([1,2,3,4,5]) == 5, \"Smallest Number\"\nassert     Find_Min([4,5,6,7,8]) == 6, \"Smallest Number\"\nassert     Find_Min([8,7,6,5,4]) == 4, \"Smallest Number\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min([]) == None\nassert     Find_Min([1, 2, 3]) == None\nassert     Find_Min([1, 2, 3, 5, 6]) == None\nassert     Find_Min([1, 2, 3, 5, 6, 8]) == [5, 6]\nassert     Find_Min([4, 5, 6]) == None\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min([1,2,3]) == 1\nassert Find_Min([]) == 0\nassert Find_Min([1,2,3,4]) == 1\nassert Find_Min([1,2,3,4,5]) == 2\nassert Find_Min([1,2,3,4,5,6,7,8,9]) == 4\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min([2,6,2,3,4,3,5,6,2,2,2]) == 2\nassert Find_Min([6,7,3,2,3,1]) == 1\n\n'''\nProblem 10\nGiven a list of integers, find the pair of numbers that can \nsum to a specific target.  \n'''\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min([1,2,3]) == [1]\nassert Find_Min([1,2,3,4]) == [1,2,3]\nassert Find_Min([1,2,3,4,5]) == [1,2,3,4]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min([]) == []\nassert     Find_Min([1]) == []\nassert     Find_Min([1,1,1]) == [1]\nassert     Find_Min([1,1,1,1,2]) == [1,1]\nassert     Find_Min([1,2,1]) == [1,2]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rectangle_area(2,2)==4, \"Wrong area: \" + str(rectangle_area(2,2))\nassert     rectangle_area(5,5)==25, \"Wrong area: \" + str(rectangle_area(5,5))\nassert     rectangle_area(2,1)==2, \"Wrong area: \" + str(rectangle_area(2,1))\nassert     rectangle_area(1,2)==2, \"Wrong area: \" + str(rectangle_area(1,2))\nassert     rectangle_area(10,10)==100, \"Wrong area: \" + str(rectangle_area(10,10))\nprint(\"Tests completed!\")\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('\\n')\nprint('*** Rectangle_area_function ***')\nprint('Rectangle_area function should return the area of a rectangle.')\nprint('Rectangle_area function takes two parameters (l,b) and returns the area.')\nprint('\\n')\n\nprint('Rectangle_area function result:')\nprint(rectangle_area(5,7))\nprint('Expected result: 28')\nprint('\\n')\n\nprint('Rectangle_area function result:')\nprint(rectangle_area(7,5))\nprint('Expected result: 35')\nprint('\\n')\n\nprint('Rectangle_area function result:')\nprint(rectangle_area(5,5))\nprint('Expected result: 25')\nprint('\\n')\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef rectangle_area(l,b):\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rectangle_area(4,5) == 20\nassert rectangle_area(3,5) == 25\nassert rectangle_area(3,5) == 25\n\nprint(\"The result is correct.\")\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert rectangle_area(2,2) == 4\nassert rectangle_area(10,2) == 20\nassert rectangle_area(0,2) == 0\nassert rectangle_area(4,4) == 8\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert rectangle_area(1, 1) == 1\nassert rectangle_area(2, 2) == 4\nassert rectangle_area(4, 3) == 9\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(3,2) == 6\nassert     rectangle_area(1,2) == 2\nassert     rectangle_area(3,1) == 3\nassert     rectangle_area(1,1) == 1\nprint(\"\\nTest passed!\")\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rectangle_area(3,5) == 15\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_uppercase('ABCDEF') == 'ABDEFG', 'The output should be 'ABDEFG' but instead it is '%s'.' % (remove_uppercase('ABCDEF'))\nassert     remove_uppercase('ABCDEFGH') == 'ABCDEFGH', 'The output should be 'ABCDEFGH' but instead it is '%s'.' % (remove_uppercase('ABCDEFGH'))\nassert     remove_uppercase('ABCD') == 'ABCD', 'The output should be 'ABCD' but instead it is '%s'.' % (remove_uppercase('ABCD'))\nassert     remove_uppercase('AB') == 'AB', 'The output should be 'AB' but instead it is '%s'.' % (remove_uppercase('AB'))\nassert     remove_uppercase('') == '', 'The output should be '' but instead it is '%s'.' % (remove_uppercase(''))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_files(dir_name):\n    '''\n    Write a function to list all files under a given directory.\n    '''\n    pass\n\ndef search_files(dir_name):\n    '''\n    Write a function to search files in a given directory.\n    '''\n    pass\n\ndef search_files_recursively(dir_name):\n    '''\n    Write a function to search files recursively under a given directory.\n    '''\n    pass\n\ndef search_files_recursively_with_pattern(dir_name):\n    '''\n    Write a function to search files recursively under a given directory using regex patterns.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert remove_uppercase('iNsa') == 'isn'\nassert remove_uppercase('i5sa') == 'i5s'\nassert remove_uppercase('i5Sb') == 'i5s'\nassert remove_uppercase('i5Sb') == 'i5s'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase(\"Hello World\") == \"Hello World\"\nassert     remove_uppercase(\"HELLO WORLD\") == \"HELLO WORLD\"\nassert     remove_uppercase(\"HELLO\") == \"\"\nassert     remove_uppercase(\"HELLO1\") == \"\"\nassert     remove_uppercase(\"HELLO HELLO\") == \"HELLO HELLO\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"abc\") == \"\"\nassert     remove_uppercase(\"ABC\") == \"ABC\"\nassert     remove_uppercase(\"ABC123\") == \"ABC\"\nassert     remove_uppercase(\"ABCABC123\") == \"ABCABC123\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_uppercase('ThisIsAAStraightforwardlyUppercase') == 'tiSisAStraighforwardlyUppercase'\nassert     remove_uppercase('hi world') == 'h i w'\nassert     remove_uppercase('X') == 'X'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase('') == ''\nassert     remove_uppercase('Coding should be fun!') == 'Coding should be fun!'\nassert     remove_uppercase('CodingShouldBeFun') == 'Coding Should Be Fun'\n\ndef check_format(str1):\n    '''\n    Write a function that checks the format of the first argument. It can be either a string or a list.\n    The function should return True if the argument is a string and False if it is a list.\n    '''\n    pass"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_uppercase(\"abcdefABCDEF\") == \"abcdef\", \"Wrong: {0}\".format(remove_uppercase(\"abcdefABCDEF\"))\nassert     remove_uppercase(\"ABCDEABCDEF\") == \"ABCDEABCDEF\", \"Wrong: {0}\".format(remove_uppercase(\"ABCDEABCDEF\"))\nassert     remove_uppercase(\"AabcdefABCDEF\") == \"AbcdefABCDEF\", \"Wrong: {0}\".format(remove_uppercase(\"AabcdefABCDEF\"))\nassert     remove_uppercase(\"ABCabcdefABCDEF\") == \"ABCabcdefABCDEF\", \"Wrong: {0}\".format(remove_uppercase(\"ABCabcdefABCDEF\"))\nassert     remove_uppercase(\"abcABCDEF\") == \"abcABCDEF\", \"Wrong: {0}\".format(remove_uppercase(\"abcABCDEF\"))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_uppercase('HELLO') == 'hll'\nassert     remove_uppercase('LOL') == 'lol'\nassert     remove_uppercase('Lol') == 'lol'\nassert     remove_uppercase('LOL LOL') == 'lol lol'\nassert     remove_uppercase('LOLOL') == 'lol'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Extract([[1,2],2,3,4,5,6]) == 2\nassert    Extract([1,2,3,4,5,6]) == 1\nassert     Extract([1]) == 1\nassert    Extract([]) == None\nassert    Extract([[1,2],2,3,4,5,6,[1,2]]) == 2\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"The first element of each sublist is: \")\n    print(Extract([1,2,3,4,5]))\n    print(Extract([[1,2,3],[4,5,6]]))\n    print(Extract([[1,2,3],[4,5,6]]))\n\n    print(\"The first element of each sublist is: \")\n    print(Extract([1,2,3,4,5,6]))\n    print(Extract([1,2,3,4,5,6]))\n    print(Extract([1,2,3,4,5,6]))"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([[1], [2,3,4,5], ['a','b','c']]) == [1,2,3,4,5]\nassert     Extract([[1], ['a','b','c'], [2,3,4,5]]) == [1, 'a', 2, 3, 4, 5]\nassert     Extract([[1], ['a'], ['b','c'], [2,3,4,5]]) == [1, 'a', 2, 3, 4, 5]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([[1, 2, 3], [], [4, 5, 6], ['a', 'b']]) == (1, None, 4, 'a')\nassert     Extract([[1, 2, 3], None, [4, 5, 6], ['a', 'b']]) == (1, None, 4, 'a')\nassert     Extract([[1, 2, 3], None, [4, 5, 6], None]) == (1, None, 4, None)\nassert     Extract([[1, 2, 3], None, None, None]) == (1, None, None, None)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract(['Purpose', 'of', 'this','solution', 'is', 'to', 'extract', 'the', 'first', 'element', 'of', 'each','sublist']) == ['Purpose', 'of', 'this','solution', 'is', 'to']\nassert     Extract(['Purpose', 'of', 'this','solution', 'is', 'to', 'extract', 'the', 'first', 'element', 'of', 'each','sublist', 'of', 'a', 'list']) == ['Purpose', 'of', 'this','solution', 'is', 'to', 'extract']\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nExtract([[1, 2], [3, 4], [5]]) == (1, 3)\nassert Extract([[1, 2, 3], [4, 5], [6]]) == (1, 5)\nassert Extract([[1, 2, 3, 4], [5, 6]]) == (1, 5)\nassert Extract([[1, 2, 3], [4, 5], [6,7,8]]) == (1, 5)\nassert Extract([[1, 2, 3], [4], [5]]) == (1, 4)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([[], [], [],[], [],[]] ) == [], \"Your code's output should be [], [], [], [], [], [], but printed {}.\".format(lst)\nassert     Extract([[1,2], [3,4], [], [], [], []] ) == [1,2], \"Your code's output should be [1,2], but printed {}.\".format(lst)\nassert     Extract([[], [1,2], [3,4], [], [], []] ) == [1,2], \"Your code's output should be [1,2], but printed {}.\".format(lst)\nassert     Extract([[], [], [], [], [], []] ) == [], \"Your code's output should be [], but printed {}.\".format(lst)\nassert     Extract([[1,2], [3,4], [], [], [], []] ) == [1,2], \"Your code's output should be [1,2], but printed {}.\".format(lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract([[1], [2], [3], [4], [5]]) == 2\nassert     Extract([[1, 2], [3, 4], [5, 6]]) == 2\nassert     Extract([[1], [2], [3], [4]]) == 1\nassert     Extract([[1, 2], [3, 4], [5, 6]]) == 2\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlst = [[1, 2], [3, 4], [5, 6]]\nprint(Extract(lst))"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     upper_ctr('sdsddsd') == 5\nassert     upper_ctr('SdsdsdS') == 11\nassert     upper_ctr('Sdsdsdssdsddd') == 14\nassert     upper_ctr('I Love Python') == 10\nassert     upper_ctr('ThIs Is A THe Super BOOoT') == 14\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     upper_ctr('') == 0\nassert     upper_ctr('Python') == 4\nassert     upper_ctr('PYTHON') == 4\nassert     upper_ctr('PythonPy') == 5\nassert     upper_ctr('Pythony') == 5\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     upper_ctr('b') == 1\nassert     upper_ctr('B') == 1\nassert     upper_ctr('c') == 1\nassert     upper_ctr('C') == 1\nassert     upper_ctr('abc') == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr('sBJ') == 3\nassert     upper_ctr('Hello') == 0\nassert     upper_ctr('sBJj') == 4\nassert     upper_ctr('sBJ') == 5\n\nprint('All the tests are passed!')\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr('abcDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert     upper_ctr('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert     upper_ctr('ABCDEFGHIJKLMNOPQRSTUVWXYZa') == 26\nassert     upper_ctr('ABCDEFGHIJKLMNOPQRSTUVWXYZabc') == 26\nassert     upper_ctr('ABCDEFGHIJKLMNOPQRSTUVWXYZABC') == 26\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert upper_ctr('UPPER CASE') == 6\nassert upper_ctr('Upper') == 3\nassert upper_ctr('testing') == 3\nassert upper_ctr('case') == 2\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \n\ndef upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     upper_ctr(\"ZBR\") == 5, \"Should be 5\"\nassert     upper_ctr(\"zebra\") == 5, \"Should be 5\"\nassert     upper_ctr(\"Zebra\") == 5, \"Should be 5\"\nassert     upper_ctr(\"\") == 0, \"Should be 0\"\nassert     upper_ctr(\"\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3]]\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[1, 2, 3, 4], \n                                                                    [1, 2, 5, 6], \n                                                                    [1, 2, 6, 7], \n                                                                    [1, 2, 7, 8], \n                                                                    [1, 2, 8, 9], \n                                                                    [1, 2, 9, 10], \n                                                                    [1, 3, 4, 5], \n                                                                    [1, 3, 5, 6], \n                                                                    [1, 3, 6, 7], \n                                                                    [1, 3, 7, 8], \n                                                                    [1, 3, 8, 9], \n                                                                    [1, 3, 9, 10], \n                                                                    [1, 4, 5, 6], \n                                                                    [1, 4, 6, 7], \n                                                                    [1, 4, 7, 8], \n                                                                    [1, 4, 8, 9], \n                                                                    [1, 4, 9, 10], \n                                                                    [1, 5, 6, 7], \n                                                                    [1, 5, 7, 8], \n                                                                    [1, 5, 8, 9], \n                                                                    [1, 5, 9, 10], \n                                                                    [1, 6, 7, 8], \n                                                                    [1, 6, 8, 9], \n                                                                    [1, 6, 9, 10], \n                                                                    [1, 7, 8, 9], \n                                                                    [1, 7, 9, 10], \n                                                                    [1, 8, 9, 10], \n                                                                    [2, 3, 4, 5], \n                                                                    [2, 3, 5, 6], \n                                                                    [2, 3, 6, 7], \n                                                                    [2, 3, 7, 8], \n                                                                    [2, 3, 8, 9], \n                                                                    [2, 3, 9, 10], \n                                                                    [2, 4, 5, 6], \n                                                                    [2, 4, 6, 7], \n                                                                    [2, 4, 7, 8], \n                                                                    [2, 4, 8, 9], \n                                                                    [2, 4, 9, 10], \n                                                                    [2, 5, 6, 7], \n                                                                    [2, 5, 7, 8], \n                                                                    [2, 5, 8, 9], \n                                                                    [2, 5, 9, 10], \n                                                                    [2, 6, 7, 8], \n                                                                    [2, 6, 8, 9], \n                                                                    [2, 6, 9, 10], \n                                                                    [2, 7, 8, 9], \n                                                                    [2, 7, 9, 10], \n                                                                    [2, 8, 9, 10], \n                                                                    [3, 4, 5, 6], \n                                                                    [3, 4, 6, 7], \n                                                                    [3, 4, 7, 8], \n                                                                    [3, 4, 8, 9], \n                                                                    [3, 4, 9, 10], \n                                                                    [3, 5, 6, 7], \n                                                                    [3, 5, 7, 8], \n                                                                    [3, 5, 8, 9], \n                                                                    [3, 5, 9, 10], \n                                                                    [3, 6, 7, 8], \n                                                                    [3, 6, 8, 9], \n                                                                    [3, 6, 9, 10], \n                                                                    [3, 7, 8, 9], \n                                                                    [3, 7, 9, 10], \n                                                                    [3, 8, 9, 10], \n                                                                    [4, 5, 6, 7], \n                                                                    [4, 5, 7, 8], \n                                                                    [4, 5, 8, 9], \n                                                                    [4, 5, 9, 10], \n                                                                    [4, 6, 7, 8], \n                                                                    [4, 6, 8, 9], \n                                                                    [4, 6, 9, 10], \n                                                                    [4, 7, 8, 9], \n                                                                    [4, 7, 9, 10], \n                                                                    [4, 8, 9, 10], \n                                                                    [5, 6, 7, 8], \n                                                                    [5, 6, 7, 9], \n                                                                    [5, 6, 7, 10], \n                                                                    [5, 6, 8, 9], \n                                                                    [5, 6, 9, 10], \n                                                                    [5, 7, 8, 9], \n                                                                    [5, 7, 9, 10], \n                                                                    [5, 8, 9, 10], \n                                                                    [6, 7, 8, 9], \n                                                                    [6, 7, 9, 10], \n                                                                    [6, 8, 9, 10], \n                                                                    [7, 8, 9, 10], \n                                                                    [8, 9, 10]]\n\ndef combinations_list_p(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], 'incorrect combinations_list'\nassert     combinations_list([1,2,3,4]) == [[1,2,3,4],[1,2,4,3],[1,4,2,3],[1,3,2,4],[1,3,4,2],[1,4,3,2],[1,4,2,3],[2,1,3,4],[2,1,4,3],[2,3,1,4],[2,3,4,1],[2,4,1,3],[2,4,3,1],[3,1,2,4],[3,1,4,2],[3,2,1,4],[3,2,4,1],[3,4,1,2],[3,4,2,1],[4,1,2,3],[4,1,3,2],[4,2,1,3],[4,2,3,1],[4,3,1,2],[4,3,2,1]], 'incorrect combinations_list'\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,5,4],[1,2,4,3,5],[1,2,4,5,3],[1,2,4,5,3],[1,3,2,4,5],[1,3,2,5,4],[1,3,4,2,5],[1,3,4,5,2],[1,3,4,5,2],[1,4,2,3,5],[1,4,2,3,5],[1,4,3,2,5],[1,4,3,5,2],[1,4,3,5,2],[1,4,5,2,3],[1,4,5,2,3],[2,1,3,4,5],[2,1,3,5,4],[2,1,4,3,5],[2,1,4,5,3],[2,3,1,4,5],[2,3,1,5,4],[2,3,4,1,5],[2,3,4,5,1],[2,3,5,1,4],[2,3,5,4,1],[2,4,1,3,5],[2,4,1,5,3],[2,4,3,1,5],[2,4,3,5,1],[2,4,3,5,1],[2,4,5,1,3],[2,4,5,3,1],[3,1,2,4,5],[3,1,2,5,4],[3,1,4,2,5],[3,1,4,5,2],[3,2,1,4,5],[3,2,1,5,4],[3,2,4,1,5],[3,2,4,5,1],[3,4,1,2,5],[3,4,1,5,2],[3,4,2,1,5],[3,4,2,5,1],[3,4,5,1,2],[3,4,5,2,1],[4,1,2,3,5],[4,1,2,5,3],[4,1,3,2,5],[4,1,3,5,2],[4,2,1,3,5],[4,2,1,5,3],[4,2,3,1,5],[4,2,3,5,1],[4,3,1,2,5],[4,3,1,5,2],[4,3,2,1,5],[4,3,2,5,1],[4,3,5,1,2],[4,3,5,2,1],[4,5,1,2,3],[4,5,1,3,2],[4,5,2,1,3],[4,5,2,3,1],[4,5,3,1,2],[4,5,3,2,1]], 'incorrect combinations_list'\nassert     combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5,6],[1,2,3,6,5,4],[1,2,4,3,5,6],[1,2,4,6,5,3],[1,2,4,5,3,6],[1,2,3,4,6,5],[1,3,4,2,5,6],[1,3,4,5,2,6],[1,3,5,2,4,6],[1,3,5,6,2,4],[1,4,2,3,5,6],[1,4,2,3,6,5],[1,4,2,5,3,6],[1,4,5,2,3,6],[1,4,5,3,2,6],[1,4,5,3,6,2],[1,4,5,6,2,3],[2,1,3,4,5,6],[2,1,3,6,5,4],[2,1,3,5,4,6],[2,1,4,3,5,6],[2,1,4,5,3,6],[2,1,4,5,6,3],[2,3,1,4,5,6],[2,3,1,5,4,6],[2,3,4,1,5,6],[2,3,4,5,1,6],[2,3,5,1,4,6],[2,3,5,4,1,6],[2,3,5,4,6,1],[2,4,1,3,5,6],[2,4,1,5,3,6],[2,4,3,1,5,6],[2,4,3,5,1,6],[2,4,3,5,6,1],[2,4,5,1,3,6],[2,4,5,3,1,6],[2,4,5,3,6,1],[2,4,5,6,1,3],[3,1,2,4,5,6],[3,1,2,6,5,4],[3,1,4,2,5,6],[3,1,4,5,2,6],[3,2,1,4,5,6],[3,2,1,6,5,4],[3,2,4,1,5,6],[3,2,4,5,1,6],[3,2,4,5,6,1],[3,3,1,2,4,5],[3,3,1,2,6,5],[3,3,1,4,2,6],[3,3,1,4,6,2],[3,3,2,1,4,5],[3,3,2,1,6,5],[3,3,2,4,1,6],[3,3,2,4,6,1],[3,3,4,1,2,5],[3,3,4,1,6,5],[3,3,4,2,1,6],[3,3,4,2,6,1],[3,3,4,5,1,2],[3,3,4,5,1,6],[3,3,4,5,2,1],[3,3,4,5,2,6],[3,3,4,5,6,1],[4,1,2,3,5,6],[4,1,2,6,5,4],[4,1,3,2,5,6],[4,1,3,5,2,6],[4,1,4,2,5,6],[4,1,4,6,5,2],[4,2,1,3,5,6],[4,2,1,5,3,6],[4,2,3,1,5,6],[4,2,3,5,1,6],[4,2,3,5,6,1],[4,2,4,1,3,6],[4,2,4,3,1,6],[4,2,4,3,6,1],[4,2,4,5,1,3],[4,2,4,5,3,1],[4,2,4,5,"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_list([1,2,3,4]) == [[1,2,3], [1,2,4], [1,3,4], [2,3,4]]\nassert     combinations_list([1,2,3,4,5,6,7,8,9]) == [[1,2,3,4], [1,2,3,5], [1,2,3,6], [1,2,3,7], [1,2,3,8], [1,2,3,9], [1,2,4,5], [1,2,4,6], [1,2,4,7], [1,2,4,8], [1,2,4,9], [1,2,5,6], [1,2,5,7], [1,2,5,8], [1,2,5,9], [1,2,6,7], [1,2,6,8], [1,2,6,9], [1,2,7,8], [1,2,7,9], [1,2,8,9], [1,3,4,5], [1,3,4,6], [1,3,4,7], [1,3,4,8], [1,3,4,9], [1,3,5,6], [1,3,5,7], [1,3,5,8], [1,3,5,9], [1,3,6,7], [1,3,6,8], [1,3,6,9], [1,3,7,8], [1,3,7,9], [1,3,8,9], [1,4,5,6], [1,4,5,7], [1,4,5,8], [1,4,5,9], [1,4,6,7], [1,4,6,8], [1,4,6,9], [1,4,7,8], [1,4,7,9], [1,4,8,9], [1,5,6,7], [1,5,6,8], [1,5,6,9], [1,5,7,8], [1,5,7,9], [1,5,8,9], [1,6,7,8], [1,6,7,9], [1,6,8,9], [1,7,8,9]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3], [1,2,4], [1,2,5], [1,3,4], [1,3,5], [1,4,5]]\nassert     combinations_list([1,2,3]) == [[1,2,3]]\nassert     combinations_list([1]) == [[1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nYou are given a list of intervals (intervals[i]).\nYou need to find out if \nthere is any overlapping interval in the list.\n\nExample 1:\nInput: intervals[] = [[1, 3], [2, 6], [8, 10], [15, 18]]\nOutput: False\nExplanation: There are no overlapping intervals.\n\nExample 2:\nInput: intervals[] = [[1, 3], [2, 6], [x, y]]\nOutput: True\nExplanation: The given list has overlapping intervals.\n'''\ndef overlapping(intervals):\n    '''\n    Write a function that takes as input a list of non-overlapping intervals, \n    and returns True if such a list has at least one interval that \n    overlaps with the input interval. Otherwise, it should return False.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([]) == []\nassert combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\ndef combinations_list_longer(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    The function should return a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3],\n                                            [1, 3, 2],\n                                            [2, 1, 3],\n                                            [2, 3, 1],\n                                            [3, 1, 2],\n                                            [3, 2, 1]], 'Fail'\n\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7]) == [[1, 2, 3],\n                                                        [1, 2, 4],\n                                                        [1, 2, 5],\n                                                        [1, 2, 6],\n                                                        [1, 2, 7],\n                                                        [1, 3, 4],\n                                                        [1, 3, 5],\n                                                        [1, 3, 6],\n                                                        [1, 3, 7],\n                                                        [1, 4, 5],\n                                                        [1, 4, 6],\n                                                        [1, 4, 7],\n                                                        [1, 5, 6],\n                                                        [1, 5, 7],\n                                                        [2, 3, 4],\n                                                        [2, 3, 5],\n                                                        [2, 3, 6],\n                                                        [2, 3, 7],\n                                                        [2, 4, 5],\n                                                        [2, 4, 6],\n                                                        [2, 4, 7],\n                                                        [2, 5, 6],\n                                                        [2, 5, 7],\n                                                        [3, 4, 5],\n                                                        [3, 4, 6],\n                                                        [3, 4, 7],\n                                                        [3, 5, 6],\n                                                        [3, 5, 7],\n                                                        [4, 5, 6],\n                                                        [4, 5, 7],\n                                                        [5, 6, 7]], 'Fail'\n\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [[1, 2, 3, 4, 5, 6, 7, 8],\n                                                        [1, 2, 3, 4, 5, 7, 8, 9],\n                                                        [1, 2, 3, 4, 6, 7, 8, 9],\n                                                        [1, 2, 3, 4, 7, 8, 9, 10],\n                                                        [1, 2, 3, 5, 6, 7, 8, 9],\n                                                        [1, 2, 3, 5, 6, 7, 10, 9],\n                                                        [1, 2, 3, 5, 7, 8, 9, 10],\n                                                        [1, 2, 3, 6, 7, 8, 9, 10],\n                                                        [1, 2, 4, 5, 6, 7, 8, 9],\n                                                        [1, 2, 4, 5, 7, 8, 9, 10],\n                                                        [1, 2, 4, 6, 7, 8, 9, 10],\n                                                        [1, 2, 5, 6, 7, 8, 9, 10],\n                                                        [1, 3, 4, 5, 6, 7, 8, 9],\n                                                        [1, 3, 4, 5, 7, 8, 9, 10],\n                                                        [1, 3, 4, 6, 7, 8, 9, 10],\n                                                        [1, 3, 5, 6, 7, 8, 9, 10],\n                                                        [1, 4, 5, 6, 7, 8, 9, 10],\n                                                        [2, 3, 4, 5, 6, 7, 8, 9],\n                                                        [2, 3, 4, 5, 7, 8, 9, 10],\n                                                        [2, 3, 4, 6, 7, 8, 9, 10],\n                                                        [2, 3, 5, 6, 7, 8, 9, 10],\n                                                        [2, 4, 5, 6, 7, 8, 9, 10],\n                                                        [3, 4, 5, 6, 7, 8, 9, 10],\n                                                        [4, 5, 6, 7, 8, 9, 10],\n                                                        [5, 6, 7, 8, 9, 10]], 'Fail'\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1,2,3,4]) == [[1,2,3,4], [1,2,4,3], [1,3,2,4],\n                 [1,3,4,2], [1,4,2,3], [1,4,3,2], [2,1,3,4],\n                 [2,1,4,3], [2,3,1,4], [2,3,4,1], [2,4,1,3],\n                 [3,1,2,4], [3,1,4,2], [3,2,1,4], [3,2,4,1],\n                 [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2],\n                 [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]] == \"Correct Answer\", \"Error!\"\n\ndef combine(items, combination_size):\n    '''\n    Write a function that will take a list and a number as arguments and that will return a list of all possible combinations of a given size in the list.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('pass') if (False == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (0 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (1 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (2 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (1 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (4 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (3 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (5 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (6 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (7 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (8 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2,1,-3,4,-1,2,1,-5,4])) else print('fails')\nprint('pass') if (9 == max_subarray_product([-2"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([-5, -4, -3, -2, -1]) == -1\nassert     max_subarray_product([1, 2, -2, -4, 3]) == 6\nassert     max_subarray_product([-2, -3, 4, -1, -2, 1, -5, 2, -3]) == 24"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_subarray_product([-1,-2,-3,-4,1]) == 6,     \"Incorrect output\"\n\nprint(\"All the tests have been passed!\")"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([-2, 0, -1]) == 0\nassert     max_subarray_product([-2, -3, 4, -5, 6]) == 18\nassert     max_subarray_product([-2, 3, -4, 5, 6]) == 30\nassert     max_subarray_product([-2, -3, -4, 5, -6]) == 30\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_subarray_product([1,2,3,4]) == 24\nassert     max_subarray_product([1,-2,3,4]) == 24\nassert     max_subarray_product([-2,-1]) == -1\nassert     max_subarray_product([]) == 1\nassert     max_subarray_product([-2, -3, -4]) == -12\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_subarray_product([2,3,-2,4]) == 6\nassert max_subarray_product([-1,-4,3,-2,-4]) == 0\nassert max_subarray_product([1, -1]) == 1\nassert max_subarray_product([-3, -2, -1]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([1,4,2,5,2,3,8,5]) == 6, 'Wrong answer'\nassert     max_subarray_product([2,4,3,5,7,8,9,10]) == 55, 'Wrong answer'\n\ndef max_subarray_product_inplace(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    \n    Assume you are given the first occurrence of each positive integer.\n    '''\n    max_product = 0\n    \n    # initialise the value for left and right index\n    left_index = 0\n    right_index = 1\n    \n    # initialise the maximum product\n    max_product = float('-inf')\n    \n    # initialise the loop counter\n    count = 0\n    \n    while right_index < len(arr):\n        # check whether the product of the current left index and current right index is greater than the current maximum product\n        # if so then update the maximum product and left index\n        if arr[left_index] * arr[right_index] > max_product:\n            max_product = arr[left_index] * arr[right_index]\n            \n        # update left and right index\n        if arr[left_index] * arr[right_index] < 0:\n            left_index += 1\n        else:\n            right_index += 1\n            \n        # increase the count\n        count += 1\n        \n    return max_product, left_index, right_index, count\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True\nassert     check_value({'a': 1, 'b': 1, 'c': 2}, 1) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\n\n[*] Nested Dictionary\n'''\n\ndef check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({'name': 'Bill', 'phone': 7124567, 'email': 'bill@example.com'}, 'name') == 'Bill'\nassert     check_value({'name': 'Bill', 'phone': 7124567, 'email': 'bill@example.com'}, 'phone') == None\nassert     check_value({'name': 'Bill', 'phone': 7124567, 'email': 'bill@example.com'}, 'email') == None\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_value({}, 1) == True, '1'\nassert     check_value({1:2}, 2) == False, '2'\nassert     check_value({1:2}, 2) == False, '2'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_missing_value(dict):\n    '''\n    Write a function to find the missing value in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 3}, 'a') == True, \"Value of 'a' is not 1\"\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, 'b') == False, \"Value of 'b' is not 2\"\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, 'c') == True, \"Value of 'c' is not 3\""
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({'a': 2, 'b': 1, 'c': 1}, 2) == False\nassert     check_value({'a': 2, 'b': 1, 'c': 2}, 2) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value({1:1, 2:1, 3:1}, 1) == True\nassert     check_value({1:1, 2:2, 3:1}, 1) == False\nassert     check_value({1:1, 2:2, 3:3}, 1) == False\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('The output of drop_empty function is as follows:')\nprint(drop_empty({'name': 'john', 'email': 'john@example.com'})) # --> {'email': 'john@example.com'}\nprint(drop_empty({'name': '', 'email': ''})) # --> {'email': ''}\nprint(drop_empty({})) # --> {}\n\n\n\ndef drop_keys(dict1):\n    '''\n    Write a function to drop keys from a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({0: \"a\", 1: \"b\", 2: \"c\", 3: \"d\"}) == {0: \"a\", 1: \"b\", 2: \"c\"}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10}) == \\\n        {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}, \"Wrong\"\nassert     drop_empty({}) == {}, \"Wrong\"\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}, \"Wrong\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2}\n\nassert     drop_empty({\"a\": 1, \"\": 2, \"c\": 3}) == {\"a\": 1, \"c\": 3}\n\nassert     drop_empty({\"a\": 1, \"\": 2}) == {\"a\": 1}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({1: 2}) == {1: 2}\nassert     drop_empty({1: 2, 3: 4}) == {1: 2}\nassert     drop_empty({1: 2, 3: 4, 5: 6, 7: 8}) == {1: 2, 3: 4, 5: 6}\n\ndef drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 'hi'}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 'hi'}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     drop_empty({}) == {}\nassert     drop_empty(None) == None\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     drop_empty({'a':1, 'b': 2}) == {'a':1, 'b':2}\nassert     drop_empty({'a':1}) == {'a':1}\nassert     drop_empty({}) == {}"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3, \"e\": 5}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"e\": 5}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({1:2,2:3}) == {1:2,2:3}\nassert     drop_empty({1:2,2:3,4:5}) == {1:2,4:5}\nassert     drop_empty({1:2,2:3,4:5,6:7}) == {1:2,4:5,6:7}\nassert     drop_empty({1:2,2:3,4:5,6:7,8:9}) == {1:2,4:5,6:7,8:9}\nassert     drop_empty({1:2,2:3,4:5,6:7,8:9,10:11}) == {1:2,4:5,6:7,8:9,10:11}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product([1, 3, -1, -3, 5]) == 30, 'Test 1 failed'\nassert max_product([1, 2, 3, 4, 5]) == 120, 'Test 2 failed'\nassert max_product([-4, 2, 4, -5]) == 80, 'Test 3 failed'\nassert max_product([3, 4, 5, 6, 7, 8]) == 840, 'Test 4 failed'\nassert max_product([-1, 2, 3, 4, -5]) == 40, 'Test 5 failed'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product([1,2,3,4]) == 6, \"Wrong answer\"\nassert     max_product([2,3,4,5]) == 30, \"Wrong answer\"\nassert     max_product([5,4,3,2,1]) == 60, \"Wrong answer\"\nassert     max_product([]) == 0, \"Wrong answer\"\nassert     max_product([1,2,3,4,5,6,7]) == 336, \"Wrong answer\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product([3, 6, -2, -5]) == [6, -2, -5, -2]\nassert     max_product([3, 6, -2, -5, -4]) == [6, -2, -5, -4, -2]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"test passed\")\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product([]) == 0, 'the empty array should be 0'\nassert     max_product([2]) == 2, 'a single element array should be 2'\nassert     max_product([1,2]) == 2, 'an increasing sequence of numbers should be 2'\nassert     max_product([1,2,3]) == 6, 'a product of 3 elements should be 6'\nassert     max_product([1,2,3,4]) == 24, 'a product of 4 elements should be 24'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_product([-1, 2, 3]) == 6, \"Wrong answer\"\nassert     max_product([-5, 1, -4, -5, 1, 2, 3]) == 6, \"Wrong answer\"\nassert     max_product([5, 3, 1, -4, 1, 2, -2, 5, 5]) == 24, \"Wrong answer\"\nassert     max_product([-2, 1, -5, 4, -3, -1]) == 6, \"Wrong answer\"\nassert     max_product([1, 4, 5, 2, 1, 4, 5, 2, 1, 4]) == 20, \"Wrong answer\"\nprint(\"Correct\")\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((1,2,3)) == (2,4,6), \"Wrong\"\nassert     add_pairwise((1,2,3)) == (3,5,7), \"Wrong\"\nassert     add_pairwise((1,2,3)) == (4,6,8), \"Wrong\"\nassert     add_pairwise((1,2,3)) == (5,7,9), \"Wrong\"\nassert     add_pairwise((1,2,3)) == (6,8,10), \"Wrong\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise(('1', '2')) == ('2', '3')\nassert     add_pairwise(('1', '2', '3')) == ('2', '4')\nassert     add_pairwise(('1', '2', '3', '4')) == ('2', '5')\nassert     add_pairwise(('1', '2', '3', '4', '5')) == ('3', '6')\nassert     add_pairwise(('1', '2', '3', '4', '5', '6')) == ('3', '7')\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise(tuple(map(int, input().split()))) == (4, 5)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise((1, 2, 3)) == (2, 4, 6)\nassert     add_pairwise((4, 5, 6)) == (5, 6, 7)\nassert     add_pairwise((0, 1, 2)) == (1, 3, 5)\nassert     add_pairwise((4, 5, 6)) == (6, 8, 10)\nassert     add_pairwise((4, 5, 6)) == (6, 8, 10)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_pairwise((1,2,3)) == (2,4,6)\nassert     add_pairwise((1,2,3,4)) == (2,4,6,8)\nassert     add_pairwise((1,2,3,4,5)) == (2,4,6,8,10)\nassert     add_pairwise((1,2,3,4,5,6)) == (2,4,6,8,10,12)\nassert     add_pairwise((1,2,3,4,5,6,7)) == (2,4,6,8,10,12,14)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise((1, 3, 2, 4, 6)) == (2, 6, 4, 8, 10)\nassert     add_pairwise((1, 3, 4, 6, 2)) == (2, 6, 4, 8, 10)\nassert     add_pairwise((3, 4, 1, 5, 2)) == (4, 6, 2, 8, 10)\nassert     add_pairwise((3, 4, 5, 1, 2)) == (4, 6, 2, 8, 10)\nassert     add_pairwise((1, 3, 4, 6, 2, 2)) == (2, 6, 4, 8, 10)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([2, 3, 4, 6], 4) == 1\nassert find_remainder([2, 3, 4, 6], 3) == 24\nassert find_remainder([2, 3, 4, 6], 5) == -120\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_remainder([1,2,3],4) == 6, 'Should be 6'\nassert     find_remainder([0,0,1],4) == 4, 'Should be 4'\nassert     find_remainder([1,0,0],4) == 1, 'Should be 1'\nassert     find_remainder([1,1,1],4) == 1, 'Should be 1'\nassert     find_remainder([2,2,2],4) == 4, 'Should be 4'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_remainder([0, 1, 2, 3], 4) == 1\n    find_remainder([0, -1, 2, -3], 4) == -1\n    find_remainder([0, -1, 2, -3, 4], 4) == -1"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_remainder([1,2,3,4], 5) == 4, \"Wrong Answer, see explanation\"\nassert     find_remainder([1,2,3,4], 10) == 8, \"Wrong Answer, see explanation\"\nassert     find_remainder([-2, -3, -4, -5], 3) == -10, \"Wrong Answer, see explanation\"\nassert     find_remainder([1,2,3,4], 0) == 0, \"Wrong Answer, see explanation\""
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder([1,2,3,4], 10) == 1\nassert     find_remainder([0,0,0,0,0,0], 10) == 0\nassert     find_remainder([0,0,0,0,0,0], 2) == 0\nassert     find_remainder([0,0,0,0,0,0], 5) == 0\n\ndef find_remainder_using_math(arr, n):\n    '''\n    A naive approach is to first multiply the array by itself and then modulo n.\n    How can we factorize the result?\n    I can factorize it into two parts a and b.\n    1. If a is even, then the remainder of the multiplication of a and a is b\n    2. If a is odd, then the remainder of the multiplication of a and a is n-b\n    '''\n    a = 1\n    for i in arr:\n        a = (a * i) % n\n    return a\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_remainder([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 0\nassert     find_remainder([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 11) == 3\nassert     find_remainder([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 10) == 36\nassert     find_remainder([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 11) == 7\n\n\ndef find_sum(arr, n):\n    '''\n    Write a python function to find the sum of the array multiplication.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_remainder2(arr, n):\n    '''\n    Using the builtin modulo operator, find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_remainder([2, 4, 5, 9, 11, 13], 100) == 0\nassert     find_remainder([1, 6, 5, 4, 3, 2], 100) == 0\nassert     find_remainder([9, 1, 9, 5, 2, 10], 100) == 0\nassert     find_remainder([1, 6, 5, 4, 3, 2], 10) == 0\nassert     find_remainder([9, 1, 9, 5, 2, 10], 10) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([1,2,3,4], 10) == 6\nassert     find_remainder([1,2,3,4], 7) == 14\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == True\nassert     check_Consecutive([1, 2, 3, 4,5]) == False\nassert     check_Consecutive([1,2,3,4,5,6]) == True\nassert     check_Consecutive([1,2,3,4,5,6,7]) == False\nassert     check_Consecutive([1,2,3,4,5,6,7,8]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6]) == True, \"1->2->3->4->5->6 failed\"\nassert     check_Consecutive([1,2,3,4,5]) == True, \"1->2->3->4->5 failed\"\nassert     check_Consecutive([1,2,3,4]) == True, \"1->2->3->4 failed\"\nassert     check_Consecutive([1,2,3,4,5,6]) == True, \"1->2->3->4->5->6 failed\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8]) == True, \"1->2->3->4->5->6->7->8 failed\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([1,2,4,5,7,8,9]) == True\nassert     check_Consecutive([1,2,3,4,5]) == False\nassert     check_Consecutive([1,2,3,4,5,6]) == True\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,957,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1111,1114,1116,1118,1120,1122,1123,1124,1125,1126,1127,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,1498,1500,1501,1503,1505,1507,1509,1511,1513,1515,1517,1519,1521,1523,1525,1527,1529,1531,1533,1535,1537,1539,1541,1543,1545,1547,1549,1551,1553,1555,1557,1559,1561,1563,1565,1567,1569,1571,1573,1575,1577,1579,1581,1583,1585,1587,1589,1591,1593,1595,1597"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6]) == False\nassert check_Consecutive([1, 2, 3, 4, 5, 0]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == True, 'Should be True'\nassert     check_Consecutive([1, 2, 3, 5]) == False, 'Should be False'\nassert     check_Consecutive([-1, -2, -3, -4]) == False, 'Should be False'\nassert     check_Consecutive([-5, -4, -3, -2, -1]) == False, 'Should be False'\nassert     check_Consecutive([1, 2, 3]) == False, 'Should be False'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_Consecutive_all_numbers(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not check_Consecutive([1, 2, 3, 4, 5])\nassert check_Consecutive([1, 2, 3, 4, 5, 6])\nassert not check_Consecutive([1, 2, 3, 4, 5, 6, 7])\nassert not check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8])\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([(1,1),(2,1),(3,1),(4,1)], [(2,2),(4,2),(5,2)]) == [(2,2)]\nassert     tuple_intersection([(1,1),(2,1),(3,1),(4,1)], [(2,2),(4,2),(5,2),(2,3),(4,3)]) == [(2,2),(2,3)]\nassert     tuple_intersection([(1,1),(2,1),(3,1),(4,1)], [(2,2),(4,2),(5,2),(3,3),(4,3)]) == [(2,2),(3,3),(4,3)]\nassert     tuple_intersection([(1,1),(2,1),(3,1),(4,1)], [(2,2),(3,3),(4,3),(5,2)]) == []\n\n'''\nNext, we need to find the difference of the given tuple list. It is a simple matter of taking the \ndifference between the list and itself.\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([(1,2),(2,3)],[(2,3),(1,2)]) == [(2,3)]\nassert     tuple_intersection([(1,2),(2,3),(4,5),(6,7),(8,9)],[(2,3),(4,5),(6,7)]) == [(2,3),(4,5)]\nassert     tuple_intersection([(1,2),(2,3),(4,5),(6,7),(8,9)],[(1,2),(4,5),(8,9)]) == [(1,2),(4,5)]\nassert     tuple_intersection([(1,2),(2,3),(4,5),(6,7),(8,9)],[(1,2),(4,5),(6,7)]) == [(1,2),(4,5)]\nassert     tuple_intersection([(1,2),(2,3),(4,5),(6,7),(8,9)],[(1,2),(4,5),(6,7),(8,9)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([(1,2),(3,4)],[(1,3),(3,2)]) == [(1,3),(3,2)]\nassert     tuple_intersection([(1,2,3),(3,2,1)],[(1,3),(3,2)]) == [(1,3)]\nassert     tuple_intersection([(1,2,3),(3,2,1),(3,1,2)],[(1,3),(3,2)]) == [(1,3)]\nassert     tuple_intersection([(1,2,3),(3,2,1),(3,1,2),(2,3,1)],[(1,3),(3,2)]) == [(1,3),(3,2)]\nassert     tuple_intersection([(1,2,3),(3,2,1),(3,1,2),(2,3,1),(2,1,3)],[(1,3),(3,2)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef tuple_union(test_list1, test_list2):\n    '''\n    Write a function to find the tuple union of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection((1,2,3,4), (1,4,7,8,8)) == (1,4)\nassert     tuple_intersection((1,2,3,4), (4,8,8,7,2)) == (4,8)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([(1,2),(1,3),(1,4)], [(1,2),(2,2),(3,3)]) == [(1,2),(1,3),(1,4)]\nassert     tuple_intersection([(1,2),(1,3),(1,4)], [(1,2),(2,2),(3,3)]) == [(1,2)]\nassert     tuple_intersection([(1,2),(1,3),(1,4)], [(1,2),(1,3),(2,2)]) == [(1,2),(1,3)]\nassert     tuple_intersection([(1,2),(1,3),(1,4)], [(1,2),(1,3)]) == [(1,2),(1,3)]\nassert     tuple_intersection([(1,2),(1,3),(1,4)], [(1,2),(1,3),(2,2)]) == [(1,2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(1,2,3), (4,5,6), (1,2), (5,4)], [(1,2), (2,3), (5,6)]) == [(1,2), (2,3)]\nassert     tuple_intersection([(1,2,3), (4,5,6), (1,2), (5,4)], [(1,2), (5,4), (6,7), (8,9)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection((1,2,3), (1,2,3)) == (1,2)\nassert tuple_intersection((1,2,3), (3,2,1)) == (1,2)\nassert tuple_intersection((1,2,3), (3,4,1)) == ()\n\nprint(\"All the tests passed\""
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([(1, 2), (2, 3)], [(1, 2), (2, 3)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (3, 4), (1, 2)], [(1, 2), (2, 3), (3, 4)]) == [(1, 2)]\nassert     tuple_intersection([(1, 2), (1, 3), (3, 4)], [(2, 3), (4, 5), (3, 4)]) == [(3, 4)]\nassert     tuple_intersection([(1, 2), (1, 3), (2, 3), (4, 5), (3, 4)], [(4, 5), (5, 6)]) == []\nassert     tuple_intersection([(1, 2), (1, 3), (2, 3)], [(1, 2), (2, 3)]) == [(1, 2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([(10, 20, 30), (40, 50, 60)], [(20, 20, 20), (100, 200, 300), (400, 500, 600)]) == [(20, 20, 20), (20, 20, 20)]\nassert tuple_intersection([(10, 20, 30), (40, 50, 60)], [(100, 200, 300), (400, 500, 600), (20, 20, 20)]) == [(20, 20, 20)]\nassert tuple_intersection([(10, 20, 30), (40, 50, 60)], [(20, 20, 20), (100, 200, 300)]) == []\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char('abcd','a', 'x') == 'xbcd'\nassert     replace_char('abcd', 'a', 'x') == 'xbcd'\nassert     replace_char('abcd', 'c', 'x') == 'abxd'\nassert     replace_char('abcd', 'z', 'x') == 'abcd'\nassert     replace_char('abc', 'z', 'x') == 'xbc'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert replace_char('abcd','e',' ') == 'abc d'\nassert replace_char('abcd','d',' ') == 'abcd'\nassert replace_char('abcd','e',' ') == 'abc e'\nassert replace_char('abcd','e',' ') == 'abc e'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef replace_char_multiple(str1,ch,newch,n):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (replace_char('foo','o','a') == 'afoa')\nassert     (replace_char('bat','a','t') == 'bat')\nassert     (replace_char('bar','b','a') == 'bar')\nassert     (replace_char('foo','') == 'foo')\nassert     (replace_char('','') == '')\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char('Hello', 'a', 'e') == 'Heelloe', \"replace_char\"\nassert     replace_char('Hello', 'a', 'e') == 'Heelloe', \"replace_char\"\nassert     replace_char('Hello', 'e', 'a') == 'Heelloa', \"replace_char\"\nassert     replace_char('Hello', 'e', 'a') == 'Heelloa', \"replace_char\"\nassert     replace_char('Hello', 'a', 'a') == 'He', \"replace_char\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_char(\"abcd\",\"b\", \"q\") == \"qabcd\", \"replace_char failed\"\nassert replace_char(\"abcd\",\"z\", \"a\") == \"aabcd\", \"replace_char failed\"\nassert replace_char(\"abcd\",\"a\", \"z\") == \"zabcd\", \"replace_char failed\"\nassert replace_char(\"abcd\",\"a\", \"b\") == \"aabbcd\", \"replace_char failed\"\nassert replace_char(\"abcd\",\"a\", \"a\") == \"abcd\", \"replace_char failed\"\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({1: 5, 2: 2, 3: 1}) == {1: 1, 2: 2, 3: 5}\nassert     sort_counter({1: 5, 3: 1, 2: 2}) == {1: 1, 2: 2, 3: 5}\nassert     sort_counter({5: 1, 3: 1, 2: 2}) == {1: 1, 2: 2, 3: 5}\nassert     sort_counter({3: 1, 2: 2, 5: 1}) == {1: 1, 2: 2, 3: 5}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_counter({\"a\": 5, \"c\": 10, \"b\": 4}) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert sort_counter({\"a\": 5, \"c\": 10, \"b\": 4, \"b\": 3}) == {\"a\": 1, \"c\": 10, \"b\": 2}\nassert sort_counter({\"a\": 1, \"c\": 2, \"b\": 3}) == {\"a\": 1, \"b\": 3, \"c\": 2}\nassert sort_counter({\"a\": 10, \"b\": 4, \"c\": 3, \"d\": 2, \"e\": 1}) == {\"a\": 10, \"b\": 4, \"d\": 2, \"e\": 1, \"c\": 3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({3: 2, 1: 1, 2: 2, 4: 1}) == {1: 1, 2: 2, 3: 2, 4: 1}\nassert     sort_counter({1: 1, 2: 2, 4: 1, 3: 2}) == {1: 1, 2: 2, 3: 2, 4: 1}\nassert     sort_counter({1: 1, 2: 2, 3: 2, 4: 1}) == {1: 1, 2: 2, 3: 2, 4: 1}\nassert     sort_counter({4: 2, 3: 2, 1: 1, 2: 2}) == {1: 1, 2: 2, 3: 2, 4: 2}"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({'a':3,'b':2,'c':1}) ==     {'a':3,'b':2,'c':1}\nassert     sort_counter({'a':5,'b':2,'c':1}) ==     {'a':1,'b':2,'c':5}\nassert     sort_counter({'a':3,'b':2,'c':1}) ==     {'a':1,'b':2,'c':3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({\n        3: 2, \n        5: 3, \n        1: 1\n    }) == {\n        1: 1, \n        2: 2, \n        3: 3, \n        5: 3\n    }, 'Wrong Answer'\n\nassert sort_counter({\n        3: 2, \n        5: 3, \n        1: 1\n    }) == {\n        1: 1, \n        2: 2, \n        3: 3, \n        5: 3\n    }, 'Wrong Answer'\n\nassert sort_counter({\n        3: 1, \n        5: 3, \n        1: 2\n    }) == {\n        1: 2, \n        2: 1, \n        3: 3, \n        5: 3\n    }, 'Wrong Answer'\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsort_counter({'a': 10, 'c': 2, 'b': 11}) == {'a': 10, 'b': 11, 'c': 2}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_counter({'aa': 1, 'bb': 2}) == ['bb', 'aa']\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # dict1 = {'a': 4, 'b': 2, 'c': 2, 'd': 7, 'e': 1, 'f': 4}\n    # sort_counter(dict1) == {'a': 4, 'b': 2, 'd': 7, 'e': 1, 'f': 4, 'c': 2}\n    # sort_counter({'g': 6, 'h': 1, 'i': 2, 'a': 4, 'b': 2, 'c': 2, 'd': 7, 'e': 1, 'f': 4}) == {'h': 1, 'a': 4, 'b': 2, 'f': 4, 'g': 6, 'd': 7, 'e': 1, 'c': 2, 'i': 2, 'g': 6}\n    # sort_counter({'k': 0, 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}) == {'k': 0, 'g': 1, 'f': 1, 'd': 1, 'e': 1, 'a': 1, 'b': 1, 'c': 1}\n    # sort_counter({}) == {}\n    \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsort_counter({3: 2, 1: 2, 6: 4, 4: 1}) == {6: 4, 1: 2, 3: 2, 2: 2}\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_sum([1, 2, 3, 5]) == 6\nassert big_sum([1, 2, 3, 5, 100]) == 110"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_sum([1,2,3]) == 3, \"Big_sum test case 1 failed\"\nassert     big_sum([-2,-1,0,2,3]) == 5, \"Big_sum test case 2 failed\"\nassert     big_sum([2]) == 2, \"Big_sum test case 3 failed\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_sum([1,2,-1,4,5]) == 6, \\\n    f'Expected: {6}, got {big_sum([1,2,-1,4,5])} instead.'\nassert     big_sum([2,3,4,1,5]) == 7, \\\n    f'Expected: {7}, got {big_sum([2,3,4,1,5])} instead.'\nassert     big_sum([-4,5,-3,1,9,10,12]) == 10, \\\n    f'Expected: {10}, got {big_sum([-4,5,-3,1,9,10,12])} instead.'"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_sum([1, 4, 3, 2]) == 5\nassert big_sum([-3, -5, -1, 0]) == -1\nassert big_sum([-9, -2, -3, -2, -1]) == -1\nassert big_sum([-1]) == -1\nassert big_sum([0]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_sum([-3, 5, 4, -2, 3, -7, 1, 1, -6]) == 8, \"WRONG\"\nassert     big_sum([-3, 5, 4, -2, 3, -7, 1, 1, -6]) == 14, \"WRONG\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([1, 2, -8, 3, -1]) == -8\nassert big_sum([-5, -3, -1]) == -1\nassert big_sum([-1, -1, -1]) == -3\nassert big_sum([1, 2, 3, 4, 5, 6]) == 7\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_sum([0,3,5,6,7,8,9,10]) == 15, \"Big_sum should return the sum of the largest and smallest value in the array\"\nassert     big_sum([0,3,5,6,7,8,9,10]) == 0, \"Big_sum should return the sum of the largest and smallest value in the array\"\nassert     big_sum([2,4,6,8,10,12,14,16]) == 22, \"Big_sum should return the sum of the largest and smallest value in the array\"\nassert     big_sum([-2,-4,-6,-8,-10,-12,-14,-16]) == -22, \"Big_sum should return the sum of the largest and smallest value in the array\"\nassert     big_sum([5,4,3,2,1]) == 10, \"Big_sum should return the sum of the largest and smallest value in the array\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef fibonacci(n):\n    '''\n    Write a python function to return the nth Fibonacci number.\n    '''\n    pass"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower(\"Hello\") == True\nassert     is_lower(\"HELLO\") == True\nassert     is_lower(\"HELLO123\") == False\nassert     is_lower(\"HELLO-123\") == True\nassert     is_lower(\"Hello1\") == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_lower(\"Hello\") == False\nassert     is_lower(\"HELO\") == True\nassert     is_lower(\"HELLOWORLD\") == False\nassert     is_lower(\"HELLOWORLD\") == False\nassert     is_lower(\"HELLOWORLD\") == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower('apple') == False\nassert     is_lower('apPLE') == False\nassert     is_lower('APPLE') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_lower('Hello') == 'hello'\nassert is_lower('HELO') == 'hello'\n\ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_lower(\"E\") == True, \"Wrong!\"\nassert     is_lower(\"F\") == False, \"Wrong!\"\nassert     is_lower(\"A\") == False, \"Wrong!\"\nassert     is_lower(\"\") == True, \"Wrong!\"\nassert     is_lower(\"a\") == False, \"Wrong!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower('hello') == 'hello', 'Should return hello'\nassert     is_lower('Hello') == 'hello', 'Should return hello'\nassert     is_lower('HELLO') == 'hello', 'Should return hello'\nassert     is_lower('hello123') == 'hello123', 'Should return hello123'\nassert     is_lower('123hello') == '123hello', 'Should return 123hello'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert not is_lower('ABC') \nassert not is_lower('Z')\nassert is_lower('a')\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_lower('Hello') == False\nassert is_lower('abc') == True\nassert is_lower('ABC') == True\nassert is_lower('Abc') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower(\"Hello\") == False, \"Should return False\"\nassert     is_lower(\"HELLO\") == True, \"Should return True\"\nassert     is_lower(\"1234\") == True, \"Should return True\"\nassert     is_lower(\"\") == False, \"Should return False\"\nassert     is_lower(None) == False, \"Should return False\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower(\"\") == True\nassert is_lower(\"\") == True\nassert is_lower(\"a\") == False\nassert is_lower(\"A\") == True\nassert is_lower(\"zzzzzzzz\") == False\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all whitespaces from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase(\"hello world\") == \"hello world\"\nassert     remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"\nassert     remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"\nassert     remove_lowercase(\"hello\") == \"hello\"\nassert     remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"heLlo\") == \"heLLo\"\nassert     remove_lowercase(\"HELLO\") == \"HELLO\"\nassert     remove_lowercase(\"HELLO!\") == \"HELLO!\"\nassert     remove_lowercase(\"heLlo!eR\") == \"heLlo!eR\"\n\ndef is_sorted(arr,sorted=False):\n    '''\n    Write a function to determine whether an array is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_lowercase(\"apple\") == \"pp\"\nassert     remove_lowercase(\"apple\") == \"pp\"\nassert     remove_lowercase(\"APPLE\") == \"PP\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\" \") == \"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_lowercase('') == ''\nassert     remove_lowercase('a') == 'a'\nassert     remove_lowercase('ab') == 'ab'\nassert     remove_lowercase('abc') == 'abc'\nassert     remove_lowercase('abca') == 'abc'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase('abcd') == 'abcd'\nassert     remove_lowercase('ABCD') == 'ABCD'\nassert     remove_lowercase('Abcd') == 'Abcd'\nassert     remove_lowercase('ABCD') == 'ABCD'\nassert     remove_lowercase('abcdABC') == 'abcABC'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_lowercase('hello world') == 'hllt wllrld'\nassert     remove_lowercase('my name is apple') =='my nam e is apll'\nassert     remove_lowercase('my name is apple and I am a boy') =='my nam e is apll and i am a boy'\nassert     remove_lowercase('my name is apple and I am a boy') =='my nam e is apll and i am a boy'\nassert     remove_lowercase('my name is apple and I am a boy') =='my nam e is apll and i am a boy'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_lowercase('aaBBb')    == 'aaBBb', 'Fail'\nassert     remove_lowercase('aAAAAbbbb')    == 'aAAAAbbbb', 'Fail'\nassert     remove_lowercase('AaBb')    == 'AaBb', 'Fail'\nassert     remove_lowercase('AaB')    == 'AaB', 'Fail'\nassert     remove_lowercase('')    == '', 'Fail'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase('Hello world') == 'Hello world'\nassert     remove_lowercase('hello world') == 'hello world'\nassert     remove_lowercase('HELLO WORLD') == 'HELLO WORLD'\nassert     remove_lowercase('HELLO world') == 'HELLO world'\nassert     remove_lowercase('HELLO  world') == 'HELLO  world'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase(\"ThisIsATest\") == \"ThisIsATest\"\nassert     remove_lowercase(\"Hello world\") == \"Hello world\"\nassert     remove_lowercase(\"tHeSiS tEsT\") == \"TheTest\"\nassert     remove_lowercase(\"ToBeOrNotToBe\") == \"ToBeOrNotToBe\"\nassert     remove_lowercase(\"ToBeOrNotToBe\") == \"ToBeOrNotToBe\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_Digit(1255) == 5\nassert     first_Digit(4) == 4\nassert     first_Digit(22345) == 2\nassert     first_Digit(24) == 4"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_Digit(123) == '1'\nassert first_Digit(12) == '1'\nassert first_Digit(9) == '0'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(2345) == '2', \"Wrong output, expected 2345\"\nassert     first_Digit(0) == '0', \"Wrong output, expected 0\"\nassert     first_Digit(123) == '1', \"Wrong output, expected 1\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_Digit(12) == 1\nassert     first_Digit(12345) == 5\nassert     first_Digit(10000000000000000) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(1) == 1\nassert     first_Digit(101) == 1\nassert     first_Digit(1111) == 1\nassert     first_Digit(2147483647) == 1\nassert     first_Digit(-1) == -1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_Digit(9893) == 1, \"First digit of 9893 is 1\"\nassert     first_Digit(989313) == 0, \"First digit of 989313 is 0\"\nassert     first_Digit(831) == 8, \"First digit of 831 is 8\"\nassert     first_Digit(0) == 0, \"First digit of 0 is 0\"\nassert     first_Digit(-231) == 1, \"First digit of -231 is 1\"\nprint(\"first_Digit function is working correctly\")\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(123) == 1, \"Test Case Failed\"\nassert     first_Digit(321) == 3, \"Test Case Failed\"\nassert     first_Digit(0) == 0, \"Test Case Failed\"\nassert     first_Digit(1) == 1, \"Test Case Failed\"\nassert     first_Digit(2) == 2, \"Test Case Failed\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_Digit(123) == 1, 'passed'\nassert     first_Digit(1234) == 1, 'passed'\nassert     first_Digit(12340000) == 1, 'passed'\nassert     first_Digit(-1234) == 1, 'passed'\nassert     first_Digit(0) == 0, 'passed'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(8) == '8'\nassert     first_Digit(3) == '3'\nassert     first_Digit(99) == '9'\nassert     first_Digit(-12) == '-12'\nassert     first_Digit(0) == '0'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([]) == [],    \"None\"\nassert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9], \"List1\"\nassert     Split([1,2,3,4,5,6]) == [1,3,5], \"List2\"\nassert     Split([1,2,3,4,5,6,7]) == [1,3,5,7], \"List3\"\nassert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9], \"List4\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     Split([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert     Split([3, 6, 9, 12, 15]) == [3, 6, 9, 12, 15]\n\nprint('done'"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     Split([1,2,3,4,5]) == [1,3,5]\nassert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11,13,15,17,19,21]\nassert     Split([-1,-2,3,4,5]) == [-1,-3,5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9], 'Wrong result'\nassert     Split([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9,11], 'Wrong result'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not any(i % 2 == 0 for i in range(1,10)), \"This should be false\"\nassert any(i % 2 == 0 for i in range(1,10)), \"This should be true\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    difference(2) == 7\n    difference(5) == 12\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     difference(0) == 0, \"error\"\nassert difference(1) == 1, \"error\"\nassert difference(10) == 966, \"error\"\nassert difference(100) == 9474, \"error\"\n\nprint('\\nChecking Task 2.3.2:')\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"\\nPass\" if (24 - 24) == 0 else \"Fail\")\nprint(\"Pass\" if (24 - 24) == 0 else \"Fail\")\nprint(\"Pass\" if (24 - 24) == 0 else \"Fail\")\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    difference(5) == 5\n\nassert difference(0) == 0\nassert difference(1) == 1\nassert difference(2) == 1\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert difference(0) == 0, 'Wrong Answer'\nassert difference(1) == 81, 'Wrong Answer'\nassert difference(2) == 324, 'Wrong Answer'\nassert difference(3) == 1566, 'Wrong Answer'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndifference(10) == 2560, 'incorrect result'\n\n\n\ndef difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('The output is :'+ str(find_Odd_Pair([1,2,3,4,5],5))) \nassert \nprint('The output is :'+ str(find_Odd_Pair([1,2,3,4,5],6))) \nassert \nprint('The output is :'+ str(find_Odd_Pair([1,2,3,4,5],10))) \nassert \nprint('The output is :'+ str(find_Odd_Pair([1,2,3,4,5,6],7))) \nassert \nprint('The output is :'+ str(find_Odd_Pair([1,2,3,4,5,6,7],9))) \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair(A = [1,2,3,4,5,6], N = 8) == 3\nassert     find_Odd_Pair(A = [1,2,3,4,5,6], N = 9) == 5\nassert     find_Odd_Pair(A = [1,2,3,4,5,6], N = 10) == 1\nassert     find_Odd_Pair(A = [1,2,3,4,5,6], N = 1) == 0\nassert     find_Odd_Pair(A = [-1,-2,-3,-4,-5,-6], N = 8) == 3\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([4, 5, 6, 7, 8], 10) == 3\nassert     find_Odd_Pair([2, 4, 6, 8, 10], 10) == 3\nassert     find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 2\n\n'''\nProblem 3 (1 marks)\n\nGiven a string s consisting of uppercase and lowercase English letters, find the character with repeated occurrence maximum number of times. For example, if s = \"DREAMERD\" then maximum number of character repeats is 2 because:\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7],7) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7],8) == 1\nassert     find_Odd_Pair([1,2,3,4,5,6,7],0) == 0\nassert     find_Odd_Pair([1,2,3,4,5,6,7],1) == 1\nassert     find_Odd_Pair([1,2,3,4,5,6,7],2) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 2,    \"Wrong Answer\"\nassert     find_Odd_Pair([-1,4,3,2],5) == 2,    \"Wrong Answer\"\nassert     find_Odd_Pair([-1,-2,-3,-4],4) == 1,    \"Wrong Answer\"\nassert     find_Odd_Pair([3,4,6,7,8],7) == 3,    \"Wrong Answer\"\nassert     find_Odd_Pair([-1,-2,-3,-4],0) == 0,    \"Wrong Answer\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,10],16) == 4\nassert     find_Odd_Pair([1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2],16) == 5\nassert     find_Odd_Pair([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],16) == 3\nassert     find_Odd_Pair([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],15) == 2\nassert     find_Odd_Pair([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],13) == 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string('lower') == 'Upper'\nassert     toggle_string('UPPER') == 'lower'\nassert     toggle_string('UPPER') == 'lower'\nassert     toggle_string('LOWER') == 'upper'\nassert     toggle_string('LOWER') == 'upper'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string('case') =='sCiAsE', \\\n    'incorrect'\nassert     toggle_string('CASE') =='sCiAsE', \\\n    'incorrect'\nassert     toggle_string('cAsE') =='sCiAsE', \\\n    'incorrect'\nassert     toggle_string('CAsE') =='sCiAsE', \\\n    'incorrect'\nassert     toggle_string('CAS e') =='sCiAsE', \\\n    'incorrect'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string(\"hello world\") == \"hELLO wORLD\"\nassert     toggle_string(\"Hello World!\") == \"hEllO wORld!\"\nassert     toggle_string(\"HELLO world\") == \"hELLO wORld\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_string(string, search_string):\n    '''\n    Write a function that returns the indices of all occurrences of search_string in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string(\"Hello World\") == \"hELLO wORLD\", \"incorrect\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\", \"incorrect\"\nassert     toggle_string(\"hello world\") == \"hELLO wORLD\", \"incorrect\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\", \"incorrect\"\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wORLD\", \"incorrect\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('hi') == 'ih'\nassert     toggle_string('HII') == 'hIi'\nassert     toggle_string('Hi') == 'hI'\nassert     toggle_string('IHi') == 'IhI'\nassert     toggle_string('HIHi') == 'hIhI'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     toggle_string(\"hello world\") == \"hello world\", \"Should toggle all the cases\"\nassert     toggle_string(\"Hello world\") == \"hELLO wORLD\", \"Should toggle all the cases\"\nassert     toggle_string(\"hello\") == \"hello\", \"Should toggle the case\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string('camelCase') == 'CamelCase', \"Wrong output for toggle_string('camelCase')\"\nassert     toggle_string('CamelCase') == 'camelCase', \"Wrong output for toggle_string('camelCase')\"\nassert     toggle_string('hello world!') == 'HELO wrld!', \"Wrong output for toggle_string('hello world!')\"\nassert     toggle_string('hello world!') == 'heLlO wrld!', \"Wrong output for toggle_string('hello world!')\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(5, 6) == 1\nassert     digit_distance_nums(123, 567) == 2\nassert     digit_distance_nums(3, 4) == 1\nassert     digit_distance_nums(5, 3) == 2\nassert     digit_distance_nums(12, 23) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndigit_distance_nums(1, 2) == 1\nassert digit_distance_nums(2, 3) == 1\nassert digit_distance_nums(0, 0) == 0\nassert digit_distance_nums(1, 1) == 0\nassert digit_distance_nums(0, 1) == 1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(50, 50) == 0, 'The difference of the numbers is: 50'\nassert     digit_distance_nums(500, 500) == 0, 'The difference of the numbers is: 500'\nassert     digit_distance_nums(5, 50) == 5, 'The difference of the numbers is: 5'\nassert     digit_distance_nums(50, 5) == 5, 'The difference of the numbers is: 5'\nassert     digit_distance_nums(50, 5) == 5, 'The difference of the numbers is: 5'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(15, 19) == -1, \"Test 1: Expected output: -1, Actual output: {}\".format(digit_distance_nums(15, 19))\nassert     digit_distance_nums(156, 159) == -2, \"Test 2: Expected output: -2, Actual output: {}\".format(digit_distance_nums(156, 159))\nassert     digit_distance_nums(16, 10) == -3, \"Test 3: Expected output: -3, Actual output: {}\".format(digit_distance_nums(16, 10))\nassert     digit_distance_nums(0, 0) == 0, \"Test 4: Expected output: 0, Actual output: {}\".format(digit_distance_nums(0, 0))\nassert     digit_distance_nums(35, 40) == 1, \"Test 5: Expected output: 1, Actual output: {}\".format(digit_distance_nums(35, 40))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(5, 8) == 8\nassert     digit_distance_nums(10, 12) == 10\nassert     digit_distance_nums(7, 8) == 2\nassert     digit_distance_nums(6, 8) == 1\nassert     digit_distance_nums(7, 8) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(12345, 12345) == 0\nassert     digit_distance_nums(12345, 12345) == 0\nassert     digit_distance_nums(7, 7) == 0\nassert     digit_distance_nums(8, 8) == 0\nassert     digit_distance_nums(9, 9) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndigit_distance_nums(1, 2) == 1\ndigit_distance_nums(11, 21) == 1\ndigit_distance_nums(10, 20) == 1\ndigit_distance_nums(100, 200) == 2\ndigit_distance_nums(11, 99) == 1\ndigit_distance_nums(100, 200) == 2\ndigit_distance_nums(11, 99) == 1\ndigit_distance_nums(20, 40) == 2\ndigit_distance_nums(20, 40) == 2\n\n\ndef digit_distance_nums_with_matrix(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers using \n    memoization (recursion). \n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(abs(int(n1) - int(n2)) for n1, n2 in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(9, 16) == 7\nassert     digit_distance_nums(16, 9) == 7\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum([3, 5, -7, 8, -3, 0, 1, -1, 2, 9, 4, -8, 9], 13) == 19\nassert     max_sub_array_sum([-13, -3, -25, -20, -3, -16, -23, -12, -5, -22, -15, -4, -7, -1, -13, -14, -9, -4, -16, -15, -10, -6, -2, -7, -8, -13, -5, -1, -11, -17, -9, -10, -12, -19, -14, -8, -4, -22, -6, -13, -16, -23, -9, -1, -5, -13, -17, -19, -15, -7, -4, -12, -6, -1, -2, -10, -6, -13, -22, -16, -20, -16, -16, -14, -17, -2, -19, -12, -4, -6, -19, -16, -23, -9, -14, -11, -7, -5, -3, -17, -18, -6, -8, -12, -13, -5, -16, -7, -5, -1, -19, -15, -16, -6, -6, -20, -8, -15, -10, -6, -2, -13, -16, -13, -9, -15, -7, -19, -12, -3, -13, -18, -13, -10, -5, -4, -11, -14, -4, -4, -8, -9, -5, -4, -13, -7, -13, -5, -13, -6, -4, -11, -17, -11, -7, -3, -14, -8, -8, -10, -6, -13, -3, -4, -4, -19, -9, -7, -16, -11, -10, -9, -11, -2, -18, -5, -5, -6, -19, -19, -5, -3, -8, -17, -2, -19, -10, -14, -6, -15, -6, -4, -9, -10, -12, -3, -5, -17, -16, -4, -2, -16, -10, -13, -7, -6, -18, -19, -4, -16, -16, -3, -2, -4, -16, -6, -13, -4, -18, -16, -19, -4, -13, -7, -7, -7, -16, -4, -11, -18, -10, -7, -5, -15, -4, -8, -12, -7, -10, -10, -2, -8, -13, -9, -10, -15, -8, -17, -9, -15, -10, -5, -19, -16, -10, -5, -8, -17, -6, -8, -3, -13, -9, -13, -9, -19, -16, -19, -16, -3, -13, -12, -18, -7, -8, -11, -2, -19, -17, -7, -11, -4, -3, -8, -2, -16, -6, -9, -15, -6, -19, -15, -4, -4, -8, -4, -17, -6, -13, -16, -19, -10, -17, -9, -14, -2, -15, -12, -3, -16, -12, -5, -16, -3, -6, -7, -8, -11, -6, -10, -10, -3, -19, -17, -8, -12, -3, -19, -16, -9, -9, -4, -11, -3, -7, -18, -9, -4, -10, -7, -15, -5, -2, -8, -16, -12, -13, -16, -10, -13, -5, -3, -8, -11, -12, -5, -14, -3, -5, -5, -9, -2, -8, -17, -9, -18, -16, -7, -3, -16, -7, -13, -2, -7, -18, -7, -16, -8, -14, -5, -11, -7, -12, -5, -6, -10, -2, -14, -15, -8, -19, -4, -18, -4, -13, -7, -2, -9, -6, -14, -10, -9, -16, -11, -8, -15, -10, -2, -9, -11, -3, -4, -18, -16, -14, -11, -2, -9, -17, -9, -7, -17, -10, -17, -12, -11, -7, -19, -9, -19, -17, -16, -13, -5, -19, -11, -3, -2, -8, -11, -11, -15, -3, -11, -13, -7, -10, -19, -2, -18, -15, -17, -7, -18, -5, -5, -7, -7, -13, -14, -4, -17, -18, -9, -15, -9, -7, -5, -2, -10, -11, -7, -11, -3, -2, -17, -12, -11, -15, -5, -18, -14, -3, -9, -10, -11, -4, -9, -16, -18, -12, -2, -18, -16, -10, -8, -17, -11, -11, -16, -12, -16, -10, -6, -13, -12, -9, -7, -10, -5, -7, -5, -7, -10, -7, -8, -6, -10, -5, -16, -14, -10, -10, -8, -8, -17, -10, -16, -5, -11, -14, -6, -4, -18, -4, -18, -5, -8, -14, -7, -2, -7, -2, -3, -5, -18, -11, -7, -16, -6, -13, -2, -2, -10, -13, -17, -4, -4, -10, -16, -11, -14, -10, -14, -5, -2, -10, -8, -6, -19, -13, -10, -16, -3, -9, -9, -8, -18, -17, -3, -11, -6, -5, -5, -8, -3, -14, -7, -17, -16, -10, -11, -16, -13, -12, -9, -11, -6, -6, -9, -4, -4, -16, -5, -2, -10, -14, -3, -10, -7, -15, -4, -7, -2, -15, -3, -5, -7, -15, -8, -14, -7, -13, -5, -13, -9, -15, -4, -6, -10, -12, -3, -9, -13, -10, -4, -7, -10, -10, -16, -7, -13, -16, -15, -16, -15, -13, -17, -5, -14, -18, -10, -17, -4, -7, -14, -2, -5, -2, -16, -17, -7, -14, -10"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([0, -1, -1, 1], 2) == 1\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([0, -1, -1, 1], 2) == 1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 6) == 6, \"Wrong answer\"\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 5) == 7, \"Wrong answer\"\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 4) == 6, \"Wrong answer\"\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 3) == 6, \"Wrong answer\"\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 2) == 6, \"Wrong answer\"\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 5) == 6\nassert     max_sub_array_sum([-2,-1], 1) == -1\nassert     max_sub_array_sum([-2,1], 1) == 1\nassert     max_sub_array_sum([-2,-1,1], 1) == 1\nassert     max_sub_array_sum([-2,1,-3,4,1,-5,4], 5) == 6\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum([1, 2, 3, 4, 5], 4) == 9, 'Test 1'\nassert     max_sub_array_sum([-1, -2, -3, -4, -5], 4) == -1, 'Test 2'\nassert     max_sub_array_sum([1, -2, -3, -4, -5], 4) == 6, 'Test 3'\nassert     max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15, 'Test 4'\nassert     max_sub_array_sum([-1, -2, -3, -4, -5], 5) == -1, 'Test 5'\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4],6)==6\nassert     max_sub_array_sum([0,1,0,1,2,1,1,1],6)==5\nassert     max_sub_array_sum([-5,-4,-3,-2,5,-4,0,1,1,1,1],4)==1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 6) == 6, 'incorrect answer'\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 5) == 4, 'incorrect answer'\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 2) == 4, 'incorrect answer'\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 1) == 6, 'incorrect answer'\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 0) == 4, 'incorrect answer'\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum([2,-5,-2,6,-2,-5,6], 5) == 13\nassert max_sub_array_sum([-2,-5,-2,6,-2,-5,6], 5) == 8\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert union_elements((1, 2), (2, 3, 4)) == (1, 2, 3, 4)\nassert union_elements((1, 2), (1, 2, 3)) == (1, 2, 3)\nassert union_elements((1, 2), (2, 3, 4)) == (1, 2, 3, 4)\n\n'''\nSummary:\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements(('a', 'b'), ('c', 'd')) == (('a', 'c'), ('b', 'd'))\nassert     union_elements(('a', 'b'), ('a', 'c')) == (('a', 'c'), ('b', 'a'))\nassert     union_elements(('a', 'b'), ('b', 'a')) == (('a', 'b'), ('b', 'a'))\nassert     union_elements(('a', 'b'), ('b', 'a', 'c')) == (('a', 'b', 'c'), ('a', 'c', 'b'))\nassert     union_elements((), ('a', 'b')) == (('a', 'b'),)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntest = (1, 2, 3, 4)\ntest2 = (10, 20, 30, 40)\nunion_elements(test, test2)"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3),(2,2,2)) == (1,2,3,2,2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     union_elements((1,2,3), (3,4,5)) == (1,2,3,4,5), \"union_elements ((1,2,3), (3,4,5))\"\nassert     union_elements((1,2), (3,4,5)) == (1,2,3,4,5), \"union_elements ((1,2), (3,4,5))\"\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     union_elements((1,3,5,7,9), (2,4,6,8,10)) == (1,2,3,4,5,6,7,8,9,10)\nassert     union_elements((3,1,5,8,6), (9,2,7,10,4)) == (1,2,3,4,5,6,7,8,9,10)\nassert     union_elements((1,7,5,8,6), (9,3,4,2,10)) == (1,2,3,4,5,6,7,8,9,10)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,2,3),(2,3,4)) == (1,2,3,4)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     union_elements((1,2), (3,4)) == (1,2,3,4), 'Wrong output for (1,2) and (3,4)'\nassert     union_elements((1,2), (2,3)) == (1,2,3), 'Wrong output for (1,2) and (2,3)'\nassert     union_elements((1,2), (3,5,6)) == (1,2,3,5,6), 'Wrong output for (1,2) and (3,5,6)'\nassert     union_elements((4,5), (2,3)) == (2,3,4,5), 'Wrong output for (4,5) and (2,3)'\nassert     union_elements((1,2), (2,4,6)) == (1,2,4,6), 'Wrong output for (1,2) and (2,4,6)'\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1,2,3,4), (1,2,3,4)) == (1,2,3,4)\nassert     union_elements((1,2,3,4), (1,3,4,5)) == (1,2,3,4,5)\nassert     union_elements((1,2,3,4), (1,2,3,4)) == (1,2,3,4)\nassert     union_elements((1,2,3,4), (1,2,3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((1,2),(2,4)) == (1,2,3,4)\nassert     union_elements((1,2),(1,1)) == (1,1,2,3)\nassert     union_elements((2,2),(2,1)) == (2,1,2,3)\nassert     union_elements((1,2),(2,3)) == (1,2,3)"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 8\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([[1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4]]) == 4, 'incorrect'\nassert     Find_Max_Length([[1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7]]) == 4, 'incorrect'\nassert     Find_Max_Length([[1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4]]) == 4, 'incorrect'\nassert     Find_Max_Length([[1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7]]) == 4, 'incorrect'\nassert     Find_Max_Length([[1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7],\n                           [1, 2, 3, 4],\n                           [2, 5, 6, 7]]) == 4, 'incorrect'\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([[1,2,3,4,5],\n                           [2,3,4,5,6],\n                           [3,4,5,6,7],\n                           [4,5,6,7,8],\n                           [5,6,7,8,9]]) == 8\n\nassert Find_Max_Length([[1,2,3],\n                        [2,3,4],\n                        [3,4,5],\n                        [4,5,6],\n                        [5,6,7]]) == 7\n\nassert Find_Max_Length([[1],\n                        [2],\n                        [3],\n                        [4],\n                        [5]]) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([[1,2,3],[1,2,3]]) == 2\nassert     Find_Max_Length([[1],[2],[3],[1]]) == 1\nassert     Find_Max_Length([[1,2,3],[2],[1]]) == 3\nassert     Find_Max_Length([[1,2,3],[3],[1]]) == 2\nassert     Find_Max_Length([[1,2,3],[1],[1]]) == 1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length(['abc', 'aba', 'abcabc', 'abcd', 'ab']) == 4, Find_Max_Length(['abc', 'aba', 'abcabc', 'abcd', 'ab'])\nassert     Find_Max_Length([]) == 0, Find_Max_Length([])\nassert     Find_Max_Length(['1', '2', '3']) == 3, Find_Max_Length(['1', '2', '3'])\nassert     Find_Max_Length([1, 2, 3, 4]) == 4, Find_Max_Length([1, 2, 3, 4])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([2]) == 1\nassert     Find_Max_Length([-10, -20, -30, -40]) == 5\nassert     Find_Max_Length([-10, -20, -30, -40, 50, 60, 70]) == 9\nassert     Find_Max_Length([1, 2, 3, 4]) == 4\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max_Length([2,3,4]) == 4\nassert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,3]) == 4\nassert     Find_Max_Length([1,2,3,4]) == 4\nassert     Find_Max_Length([1,2,3,4,5,6,7,8]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([]) == 0\nassert    Find_Max_Length([2]) == 1\nassert    Find_Max_Length([2,3]) == 2\nassert    Find_Max_Length([2,3,1]) == 3\nassert    Find_Max_Length([1,3,5,3,2,2,1,1]) == 8\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nFind_Max_Length(\n
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values('He said, \"I hate him\"') == ['I hate him']\nassert     extract_values('He said, \"I hate him\"') == ['I hate him']\nassert     extract_values('He said, \"I hate him\"') == ['I hate him']\nassert     extract_values('He said, \"I hate him\"') == ['I hate him']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('This is a string with \"quoted\" value') == 'quoted'\nassert     extract_values(\"This is a string with 'quoted' value\") == 'quoted'\nassert     extract_values(\"This is a string with 'quoted' value and a weird value\") == 'quoted'\nassert     extract_values(\"This is a string with 'quoted' value and a weird value and spaces\") == 'quoted'\nassert     extract_values(\"This is a string with 'quoted' value and a weird value and spaces and spaces\") == 'quoted'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values('\"Yes, yes,\" he said.') == [\"Yes, yes,\"]\nassert    extract_values(\"The question is: 'Will he succeed?'.\") == ['Will he succeed?']\nassert extract_values(\"The question is: 'Will he succeed?'.\") == ['Will he succeed?']\nassert extract_values(\"The question is: Will he succeed?\") == ['Will he succeed?']\n\ndef remove_punctuation(text):\n    '''\n    Write a function to remove the punctuation from a string.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values(\"hi 'hello' world\") == 'hello world', 'incorrect'\nassert     extract_values(\"hi 'hello' world\") == 'hello world', 'incorrect'\nassert     extract_values(\"hi 'hello' world\") == 'hello world', 'incorrect'\nassert     extract_values(\"hi 'hello' world\") == 'hello world', 'incorrect'\nassert     extract_values(\"hi 'hello' world\") == 'hello world', 'incorrect'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values('\"This is an example\"' ) == 'This is an example'\nassert     extract_values('This is a string\"') == 'This is a string'\nassert     extract_values('This is a \"string with single quote\"') == 'This is a string with single quote'\nassert     extract_values('\"This is a\"string with single quote\"') == 'This is a\"string with single quote'\nassert     extract_values('\"This is a\\'string with a\\'') == 'This is a\"string with a'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nextract_values(\"\"\"\n\nA character that is not a quotation mark ('') is a literal character and is written without quotes.\n\nLet\u2019s take a closer look at the second example:\n\nThe following is not a valid string: \u2018A\u2019\n\nHowever, this string is still a valid string: A\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values('the quick brown fox jumps over the lazy dog') == 'the quick brown fox jumps over the lazy dog'\nassert     extract_values('the quick brown fox') == 'the quick brown fox'\nassert     extract_values('a') == 'a'\nassert     extract_values('a,b,c') == 'a,b,c'\nassert     extract_values('a, b, c') == 'a, b, c'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values('\"Hello\" World') == 'Hello World'\nassert     extract_values('This is \"a sample string\"') == 'a sample string'\nassert     extract_values('This is \"another sample string\"') == 'another sample string'\nassert     extract_values('This is \"a third sample string\"') == 'a third sample string'\nassert     extract_values('This is \"a fourth sample string\"') == 'a fourth sample string'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values('Hi, my name is Jane and I am 15 years old') == ('Hi, my name is Jane and I am 15 years old',)\nassert extract_values('Hi, my name is Jane and I am 15 years old and she is 15 years old too') == ('Hi, my name is Jane and I am 15 years old and she is 15 years old too',)\nassert extract_values('Hi, my name is Jane and I am 15 years old and she is 15 years old too, thank you.') == ('Hi, my name is Jane and I am 15 years old and she is 15 years old too, thank you.',)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values('\"this\" is a \"test\"') == 'test', \"Value extraction fails\"\nassert     extract_values(\"this is test\") == 'test', \"Value extraction fails\"\nassert     extract_values('\"a\"') == 'a', \"Value extraction fails\"\nassert     extract_values('\"a\" is \"test\"') == 'test', \"Value extraction fails\"\n\nprint('Extracting values from strings: ', extract_values('\"this\" is a \"test\"') )\nprint('Extracting values from strings: ', extract_values(\"this is test\") )\nprint('Extracting values from strings: ', extract_values('\"a\"') )\nprint('Extracting values from strings: ', extract_values('\"a\" is \"test\"') )\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_Pairs([5, 3, 1, 5, 3], 5) == 2\nassert count_Pairs([5, 3, 1, 5, 3], 2) == 4\nassert count_Pairs([5, 3, 1, 5, 3], 3) == 3\nassert count_Pairs([5, 3, 1, 5, 3], 4) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Pairs([2,3,4,5,7,2,3],7) == 4\nassert count_Pairs([1,2,3,4,5,6,7],10) == 6\nassert count_Pairs([1,2,3,4,5,6,7],9) == 2\nassert count_Pairs([1,2,3,4,5,6,7],0) == 0\nassert count_Pairs([1,2,3,4,5,6,7],8) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_Pairs_efficient(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Pairs([5, 2, 4, 1, 3, 6, 0], 7) == 2\nassert count_Pairs([5, 2, 4, 1, 3, 6, 0], 5) == 2\nassert count_Pairs([5, 2, 4, 1, 3, 6, 0], 10) == 5\nassert count_Pairs([5, 2, 4, 1, 3, 6, 0], 0) == 0\nassert count_Pairs([1, 2, 3, 4, 5, 6, 7], 10) == 10\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Pairs([1,1,2,2], 2) == 4\nassert     count_Pairs([1,2,3,4,5], 6) == 4\nassert     count_Pairs([1,2,3,4], 4) == 0\nassert     count_Pairs([1,2,3], 3) == 2\nassert     count_Pairs([1,2], 2) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Pairs([1,2,3,4,5],5)==3, \"Wrong Output\"\nassert     count_Pairs([1,2,3,4,5],4)==2, \"Wrong Output\"\nassert     count_Pairs([1,2,3,4,5],5)==3, \"Wrong Output\""
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Pairs([10,20,1,2,3,3],3) == 3\nassert     count_Pairs([10,20,1,2,3,4],3) == 1\nassert     count_Pairs([1,2,3,4,5,5],2) == 1\nassert     count_Pairs([10,20,1,2,3,4],0) == 0\nassert     count_Pairs([],1) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(count_Pairs([1,2,3,4,5,6],6))"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split(\"This is a string with comma\") == ['This', 'is', 'a','string', 'with', 'comma']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsplit(\"hello\") == ['h','e','l','l','o']\n\nassert \nsplit(\"Hi!\") == ['H','i','!']\n\nassert \nsplit(\"Hi, I'm a student and I am learning Python!\") == ['Hi','I','am','a','student','and','I','am','learning','Python','!']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove(word): \n    '''\n    Write a python function to remove characters from a string.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split('hello, world') == ['h', 'e', 'l', 'l', 'o', ',','', 'w', ',', 'o', 'r', 'l', 'd'], \"Wrong split\"\nassert     split('hello, world') == ['h', 'e', 'l', 'l', 'o', ',', 'o', 'r', 'l', 'd'], \"Wrong split\"\nassert     split('hello, world') == ['h', 'e', 'l', 'l', 'o', ',', 'o', 'r', 'l', 'd'], \"Wrong split\"\nassert     split('hello, world') == ['h', 'e', 'l', 'l', 'o', ',', 'o', 'r', 'l', 'd'], \"Wrong split\"\nassert     split('hello, world') == ['h', 'e', 'l', 'l', 'o', ',', 'o', 'r', 'l', 'd'], \"Wrong split\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split('a') == ['a']\nassert     split('ab') == ['a', 'b']\nassert     split('abcd') == ['a', 'b', 'c', 'd']\nassert     split('abcd') == ['a', 'b', 'c', 'd']\nassert     split('ab') == ['a', 'b']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert split(\"abc\") == [\"a\",\"b\",\"c\"]\nassert split(\"abc1\") == [\"a\",\"b\",\"c\",\"1\"]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert     split('hello world!') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\nassert     split('hello world!@#') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '#']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert \n\nassert split('') == []\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert     split('Hello World') == ['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd']\nassert     split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_digits(0) == 0, \"Expected the sum of 0 to be 0.\"\nassert     sum_digits(25) == 5, \"Expected the sum of 25 to be 5.\"\nassert     sum_digits(1234) == 9, \"Expected the sum of 1234 to be 9.\"\nassert     sum_digits(12345) == 15, \"Expected the sum of 12345 to be 15.\"\nassert     sum_digits(-1) == 0, \"Expected the sum of -1 to be 0.\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_digits(100) == 0\nsum_digits(1999) == 6\nsum_digits(0) == 0\n\ndef factorial(n):\n    '''\n    Write a function that calculates the factorial of a non-negative integer n.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(999) == 8\nassert     sum_digits(1000) == 10\nassert     sum_digits(1001) == 1\nassert     sum_digits(1534) == 13\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_digits(13) == 0\nassert     sum_digits(21) == 3\nassert     sum_digits(20) == 2\nassert     sum_digits(100) == 10\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(123456) == 12\nassert     sum_digits(12345) == 12\nassert     sum_digits(123) == 3\nassert     sum_digits(12) == 1\nassert     sum_digits(456) == 4\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_digits(11) == 3\nassert     sum_digits(12) == 3\nassert     sum_digits(13) == 3\nassert     sum_digits(14) == 4\nassert     sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_digits(123) == 6, \"123 should be 6\"\nassert     sum_digits(1234) == 10, \"1234 should be 10\"\nassert     sum_digits(0) == 0, \"0 should be 0\"\nassert     sum_digits(-1234) == -10, \"negative number should be -10\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(1) == 1\nassert     sum_digits(2) == 1\nassert     sum_digits(15) == 6\nassert     sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(1234) == 15\nassert     sum_digits(12345) == 18\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     issort_list([]) == True\nassert     issort_list([]) == True\nassert     issort_list([1, 2]) == True\nassert     issort_list([1, 3, 2]) == True\nassert     issort_list([3, 2, 1]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n\ndef issort_list_range(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     issort_list([1,2,3]) == True, \"1,2,3 is correctly sorted\"\nassert     issort_list([1,2,3,4]) == False, \"1,2,3,4 is correctly sorted\"\nassert     issort_list([1,2,3,4,4]) == True, \"1,2,3,4,4 is correctly sorted\"\nassert     issort_list([1,2,3,4,3]) == False, \"1,2,3,4,3 is correctly sorted\"\nassert     issort_list([1,2,3,4,3,4]) == True, \"1,2,3,4,3,4 is correctly sorted\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     issort_list([1,2,3,4]) == False, \"This function should return False if given list is not sorted\"\nassert     issort_list([3,2,1,4]) == True, \"This function should return True if given list is sorted\"\nassert     issort_list([1,1,1,1]) == True, \"This function should return True if given list is sorted\"\nassert     issort_list([1,2,3,1]) == False, \"This function should return True if given list is sorted\"\nassert     issort_list([3,1,2,3]) == True, \"This function should return True if given list is sorted\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list([1,2,3,4,5]) == True\nassert     issort_list([1,2,3,3,4]) == True\nassert     issort_list([1,1,1,2,2]) == False\nassert     issort_list([1,2,3,3,5]) == True\nassert     issort_list([1,1,3,2,2]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     issort_list([1,2,3])     == True\nassert     issort_list([3,2,1])     == False\nassert     issort_list([1,1,1])     == False\nassert     issort_list([1,1,1,1]) == True\n\ndef min_rotations(array):\n    '''\n    Write a function to find the minimum number of rotations required to sort the array.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     issort_list([]) == True\nassert     issort_list([1]) == True\nassert     issort_list([1, 2]) == True\nassert     issort_list([1, 2, 3]) == False\nassert     issort_list([1, 2, 2]) == True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_list(0) == [], \"Empty list should be empty\"\nassert     empty_list(1) == [ {} ], \"Empty list should be a list of one element\"\nassert     empty_list(2) == [ {}, {} ], \"Empty list should be a list of two elements\"\nassert     empty_list(3) == [ {}, {}, {} ], \"Empty list should be a list of three elements\"\nassert     empty_list(4) == [ {}, {}, {}, {} ], \"Empty list should be a list of four elements\"\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(4) == [{}, {}, {}, {}], 'You should return the list of four empty dictionaries.'\nassert     empty_list(3) == [{}, {}, {}], 'You should return the list of three empty dictionaries.'\nassert     empty_list(2) == [{}, {}], 'You should return the list of two empty dictionaries.'\n\ndef empty_dictionary(n):\n    '''\n    Write a function that returns a dictionary of size N,\n    whose keys are from 0 to N-1 and whose values are always 1.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Passed all tests!')\n\n\nprint('\\nProblem 4.7')\n\ndef dict_from_list(my_list):\n    '''\n    Write a function that creates a dictionary from a list of keys and values.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nempty_list(4) == [{},{},{},{}]\n\ndef count_list():\n    '''\n    Write a function that will count how many elements are in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_list(0) == [], f\"Empty list for length 0 is not empty.\"\nassert empty_list(1) == [{}], f\"Empty list for length 1 is not empty.\"\nassert empty_list(2) == [{}, {}], f\"Empty list for length 2 is not empty.\"\n\ndef combine_lists(list_one, list_two):\n    '''\n    Write a function to combine two lists into a single list.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_list(1) == [{}]\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\nassert empty_list(10) == [{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef str_list(name_list):\n    '''\n    Write a function to create a list of N strings.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_list(0) == [], f'Your function should return a list of N empty dictionaries. Your code returns {empty_list(0)}'\nassert     empty_list(1) == [{}], f'Your function should return a list of N empty dictionaries. Your code returns {empty_list(1)}'\nassert     empty_list(2) == [{}, {}], f'Your function should return a list of N empty dictionaries. Your code returns {empty_list(2)}'\nassert     empty_list(3) == [{}, {}, {}], f'Your function should return a list of N empty dictionaries. Your code returns {empty_list(3)}'\nassert     empty_list(4) == [{}, {}, {}, {}], f'Your function should return a list of N empty dictionaries. Your code returns {empty_list(4)}'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    empty_list(1) == [{}]\n    empty_list(2) == [{}, {}]\n    empty_list(3) == [{}, {}, {}]\n    empty_list(4) == [{}, {}, {}, {}]\n    empty_list(5) == [{}, {}, {}, {}, {}]\n    empty_list(6) == [{}, {}, {}, {}, {}, {}]\n    empty_list(7) == [{}, {}, {}, {}, {}, {}, {}]\n    empty_list(8) == [{}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(9) == [{}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(11) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(12) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(13) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(14) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(15) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(16) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(17) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(18) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(19) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(20) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(21) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(22) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(23) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(24) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(25) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(26) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(27) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(28) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(29) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(30) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(31) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(32) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(33) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(34) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(35) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(36) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(37) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(38) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(39) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(40) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(41) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\n    empty_list(42) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['abc', 'cba'], ['cda']]) == [['abc', 'cba'], ['cda']]\nassert     sort_sublists([['abc', 'cba'], ['cda', 'cbb']]) == [['abc', 'cba'], ['cda', 'cbb']]\nassert     sort_sublists([['a', 'b', 'c'], ['c', 'a', 'b'], ['b', 'c', 'a']]) == [['a', 'b', 'c'], ['c', 'a', 'b'], ['b', 'c', 'a']]\nassert     sort_sublists([['ab', 'ac'], ['cb', 'aa'], ['ac', 'cb']]) == [['ab', 'ac'], ['cb', 'aa'], ['ac', 'cb']]\nassert     sort_sublists([['ab', 'ac', 'cb'], ['ac', 'aa', 'cb'], ['aa', 'cb', 'ab']]) == [['ab', 'ac', 'cb'], ['ac', 'aa', 'cb'], ['aa', 'cb', 'ab']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists( [['a', 'b', 'c'], ['b', 'a', 'c']] ) == [['a', 'b', 'c'], ['b', 'a', 'c']]\nassert     sort_sublists( [['a', 'a', 'a', 'a'], ['a', 'b', 'b', 'b'], ['b', 'b', 'c', 'c']] ) == [['a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a'], ['b', 'b', 'b', 'b'], ['b', 'b', 'c', 'c']]\nassert     sort_sublists( [['a', 'a', 'a', 'a'], ['a', 'b', 'b', 'b'], ['b', 'b', 'c', 'c']] ) == [['a', 'a', 'a', 'a'], ['b', 'b', 'b', 'b'], ['b', 'b', 'c', 'c']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_sublists_optimized(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([\"foo\", \"bar\"]) == [\"bar\", \"foo\"]\nassert     sort_sublists([[\"foo\", \"bar\"], [\"baz\", \"qux\"]]) == [['bar', 'baz'], ['foo', 'qux']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']] == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']]) == True, 'incorrect'\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']] == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']]) == True, 'incorrect'\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']] == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']]) == True, 'incorrect'\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']] == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']]) == True, 'incorrect'\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']] == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'c']]) == True, 'incorrect'\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([['m','n','a'],['a','b','c'],['d','e','f']]) ==     [['d','e','f'],['a','b','c'],['m','n','a']]\nassert sort_sublists([['m','n','a'],['a','b','c'],['d','e','f']]) ==     [['d','e','f'],['a','b','c'],['m','n','a']]\nassert sort_sublists([['a','b','c'],['d','e','f'],['m','n','a']]) ==     [['a','b','c'],['d','e','f'],['m','n','a']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists(['a','b','c','d','e','f']) == sorted(['a','b','c','d','e','f'])\nassert     sort_sublists(['a','b','c','d','e','f','g','h','i','j']) == sorted(['a','b','c','d','e','f','g','h','i','j'])\nassert     sort_sublists(['a','b','c','d','e','f','g','h','i','j','k','l','m','n']) == sorted(['a','b','c','d','e','f','g','h','i','j','k','l','m','n'])\nassert     sort_sublists(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p']) == sorted(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'])\nassert     sort_sublists(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']) == sorted(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists(['m', 'o', 'l', 'l', 'o']) == ['m', 'o', 'o', 'l', 'l']\nassert     sort_sublists(['m', 'e', 'o', 'l', 'l', 'o']) == ['o', 'l', 'o','m', 'e', 'l']\nassert     sort_sublists(['m', 'e', 'o', 'l', 'l', 'o', 'o','m', 'e', 'l']) == ['l','m', 'o', 'o','m', 'e', 'l', 'o', 'o', 'e']\nassert     sort_sublists(['m', 'e', 'o', 'l', 'l', 'o', 'o','m', 'e', 'l', 'o']) == ['o', 'o', 'o','m', 'e', 'l', 'l','m', 'e', 'o']\nassert     sort_sublists(['m', 'e', 'o', 'l', 'l', 'o', 'o','m', 'e', 'l', 'o', 'o','m', 'e', 'l']) == ['l', 'o', 'o','m', 'e', 'l','m', 'e', 'o', 'l', 'o', 'o','m']\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([1,2,3,4]) == 2\nassert     two_unique_nums([1,2,3,3]) == 3\nassert     two_unique_nums([1,2,2,3,4]) == 1\nassert     two_unique_nums([1,1,1,2,2,3,3,4,4,5]) == 5\nassert     two_unique_nums([1,1,1,2,2,3,4]) == 4\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums([]) == False\nassert     two_unique_nums([1,2,3]) == True\nassert     two_unique_nums([1,2,3,3,4]) == False\nassert     two_unique_nums([]) == False\nassert     two_unique_nums([1,2]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntwo_unique_nums(nums1) == [[2,3],[3,1],[2,1],[3,4]]\n\nassert \ntwo_unique_nums(nums2) == [[2,1],[1,1],[1,2]]\n\nassert \ntwo_unique_nums(nums3) == [[1,1],[1,2]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([1,2,1,3,2,3,4,5,6]) == [[1,2,3,4,5,6],[1,2,3,4,5,6]]\nassert     two_unique_nums([1,2,1,2,1,2,1,2]) == [[1,2,1,2],[1,2,1,2]]\nassert     two_unique_nums([1,1,1,2,2,3,4,5,6]) == [[1,2,3,4,5,6],[1,2,3,4,5,6]]\nassert     two_unique_nums([]) == [[]]\nassert     two_unique_nums([[1,2,1,2,1,2]]) == [[1,2,1,2,1,2]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([1,2,3,3,4,4,5,6]) ==    True, \"Should return True\"\nassert     two_unique_nums([1,2,3,3,4,4,4,4,5,5]) ==    True, \"Should return True\"\nassert     two_unique_nums([1,2,3,3,4,4,4,5,5,5]) ==    False, \"Should return False\"\nassert     two_unique_nums([1,2,3,3,4,4,4,4,5,5,6]) ==    False, \"Should return False\"\n\n\ndef unique_num_to_string(nums):\n    '''\n    Write a python function to convert a given list of numbers into a string.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef three_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntwo_unique_nums([[1,3,2,1], [2,1,3,4,2], [3,4,4,3]]) == [[1, 3, 2, 1], [2, 1, 3, 4]]\nassert \ntwo_unique_nums([[2], [1,2], [2]]) == [[2], [1, 2], [2]]\nassert \ntwo_unique_nums([[1,2,2], [1,2], [2]]) == [[1, 2, 2], [1, 2], [2]]\nassert \ntwo_unique_nums([[1,2,2], [1,3], [2,3]]) == [[1, 2, 2], [1, 3], [2, 3]]\nassert \ntwo_unique_nums([[1,1,2], [1,1,3], [1,1,4]]) == [[1, 1, 2], [1, 1, 3], [1, 1, 4]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([1, 2, 3, 4]) == [1, 2, 3, 4], \"returned incorrect values\"\nassert     two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"returned incorrect values\"\nassert     two_unique_nums([1, 2, 3, 4, 4]) == [1, 2, 3, 4], \"returned incorrect values\"\nassert     two_unique_nums([1, 2, 2, 3, 3]) == [1, 2, 3], \"returned incorrect values\"\n\nprint(\"TESTS: PASSED\")\nprint()\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef function_with_kwargs(*args, **kwargs):\n    '''\n    Write a python function to print a given list of strings,\n    with keyword arguments.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_product([1,2,3,4,5,6]) == 120, 'Wrong Output'\nassert     unique_product([1,2,3,4,5,6,1]) == 6, 'Wrong Output'\nassert     unique_product([1,2,3,4,5,6,7,8]) == 240, 'Wrong Output'\nassert     unique_product([1,2,3,4,5,6,7,8,9,10]) == 10240, 'Wrong Output'\nassert     unique_product([1,2,3,4,5,6,7,8,9,10,20]) == 2020, 'Wrong Output'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1,2,3,4,5,6,7]) == 336, 'Test 1 Failed'\nassert     unique_product([1,2,3,4,3,2,5]) == 720, 'Test 2 Failed'\nassert     unique_product([1,2,3,4,3,2,5,3,2]) == 216, 'Test 3 Failed'\nassert     unique_product([1,2,3,4,5,5,5,5,5]) == 1, 'Test 4 Failed'\nassert     unique_product([1,2,3,3,3,3,3,3,3]) == 27, 'Test 5 Failed'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([1,2,3,3,3,4,5]) == 120, \"Wrong output\"\nassert     unique_product([1,2,3,3,3,4,5]) == 120, \"Wrong output\"\nassert     unique_product([]) == 1, \"Wrong output\"\nassert     unique_product([1,2,3,4]) == 24, \"Wrong output\"\nassert     unique_product([1,2,3,4,5]) == 120, \"Wrong output\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert unique_product(list_data) == 6\nassert unique_product(['a','b','c','a','b','d']) == 2\nassert unique_product(['a','b','c','a','b','d','a']) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product(['a', 'b', 'c', 'd', 'd']) == \nassert     unique_product(['a', 'b', 'c', 'd', 'd', 'e']) == \nassert     unique_product(['a', 'b', 'c', 'd', 'd', 'e', 'f']) == \nassert     unique_product(['a', 'b', 'c', 'd', 'd', 'e', 'f', 'f']) == \nassert     unique_product(['a', 'b', 'c', 'd', 'd', 'e', 'f', 'f', 'g']) == \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([1,2,4,3,4]) == 24\nassert     unique_product([1,2,3,4,5]) == 120\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([2,2,4,3,6,3]) == 24, \"Should be: 24\"\nassert     unique_product([2,2,4,3,6,3,2,2,3,6]) == 18, \"Should be: 18\"\nassert     unique_product([2,2,4,3,6,3,2,2,3,2,3,6]) == 144, \"Should be: 144\"\nassert     unique_product([1,2,3,4,5,6,1,2,3,4,5,6]) == 720, \"Should be: 720\"\nassert     unique_product([1,2,3,4,5,6,1,2,3,4,5,6,3,2,1,1,3,2,3,4,5,6]) == 4080, \"Should be: 4080\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_unique(string):\n    '''\n    Write a python function to check whether a given string is unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(2,3) == 14.99 \n\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(2,3) == 28.59, 'Wrong surface area.'\nassert surfacearea_cylinder(3,3) == 92.11, 'Wrong surface area.'\n\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(1,1) == 2*math.pi*r\nassert surfacearea_cylinder(2,1) == 2*math.pi*r+2*math.pi*r*(r-h)+2*math.pi*r*h\nassert surfacearea_cylinder(2,2) == 2*math.pi*r+2*math.pi*r*(r-h)+2*math.pi*r*h+2*math.pi*r*h*h\nassert surfacearea_cylinder(3,2) == 2*math.pi*r+2*math.pi*r*(r-h)+2*math.pi*r*h+2*math.pi*r*h*h+2*math.pi*r*h*h*h\nassert surfacearea_cylinder(4,3) == 2*math.pi*r+2*math.pi*r*(r-h)+2*math.pi*r*h+2*math.pi*r*h*h+2*math.pi*r*h*h*h+2*math.pi*r*h*h*h*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(4.5,6) == 11.5\nassert     surfacearea_cylinder(3.7,5.9) == 28.2\nassert     surfacearea_cylinder(6.4,2.8) == 39.2\nassert     surfacearea_cylinder(4.2,3.9) == 47.8\nassert     surfacearea_cylinder(4.2,3.9) == 47.8\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cylinder(2,5) == (12.5)\nassert     surfacearea_cylinder(3,4) == (24.5)\nassert     surfacearea_cylinder(1,1) == (4.0)\nassert     surfacearea_cylinder(0.5,0.5) == (6.5)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(r=1,h=2) == 2*pi*(1**2 + 2*(1/2)*h)\nassert     surfacearea_cylinder(r=1,h=3) == 2*pi*(1**2 + 2*(1/2)*h)\nassert     surfacearea_cylinder(r=3,h=2) == 2*pi*(3**2 + 2*(1/2)*h)\nassert     surfacearea_cylinder(r=3,h=3) == 2*pi*(3**2 + 2*(1/2)*h)\nassert     surfacearea_cylinder(r=4,h=2) == 2*pi*(4**2 + 2*(1/2)*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array(\n            [1,2,3], \n            [1,2,3]\n        ) == True, \"failed\"\nassert     is_Sub_Array(\n            [1,2,3], \n            [2,3,4]\n        ) == False, \"failed\"\nassert     is_Sub_Array(\n            [1,2,3,4], \n            [2,3,4]\n        ) == True, \"failed\"\nassert     is_Sub_Array(\n            [1,2,3,4], \n            [1,2]\n        ) == False, \"failed\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([1, 2, 3, 4, 5], [3, 4]) == True, 'wrong answer'\nassert is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]) == True, 'wrong answer'\nassert is_Sub_Array([1, 2, 3, 4, 5], [2, 3]) == False, 'wrong answer'\nassert is_Sub_Array([1, 2, 3, 4, 5], [1, 2]) == True, 'wrong answer'\nassert is_Sub_Array([1, 2, 3, 4], [2, 3, 4]) == False, 'wrong answer'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([1,2,3,4,5], [2,3]) == True, \"Wrong answer for [[1,2,3,4,5], [2,3]]\"\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3]) == True, \"Wrong answer for [[1,2,3,4,5], [1,2,3]]\"\nassert     is_Sub_Array([1,2,3,4,5], [3,4,5]) == True, \"Wrong answer for [[1,2,3,4,5], [3,4,5]]\"\nassert     is_Sub_Array([1,2,3,4,5], [1,5]) == False, \"Wrong answer for [[1,2,3,4,5], [1,5]]\"\nassert     is_Sub_Array([1,2,3,4,5], [2,5]) == False, \"Wrong answer for [[1,2,3,4,5], [2,5]]\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nQuestion 6.2\nWrite a python function which takes list of list of integers and returns the list of sum of each sublist.\nHint: Use nested loops\n'''\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3,4,5,6], [1,2]) == True, \"is_Sub_Array(None, []): Should be True\"\nassert     is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6]) == True, \"is_Sub_Array(None, [1,2,3,4,5,6]): Should be True\"\nassert     is_Sub_Array([1,2,3,4,5,6], [1,3,4,5,6]) == False, \"is_Sub_Array(None, [1,3,4,5,6]): Should be False\"\nassert     is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5]) == False, \"is_Sub_Array(None, [1,2,3,4,5]): Should be False\"\nassert     is_Sub_Array([1,2,3,4,5,6], [1,2,3,5,6]) == True, \"is_Sub_Array(None, [1,2,3,5,6]): Should be True\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test cases\n    A = [1, 3, 4, 5, 6, 7, 9, 12]\n    B = [1, 3, 7, 9]\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = [1, 3, 4, 5, 6, 7, 9, 12]\n    B = [1, 3, 7, 9, 12]\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = [1, 3, 4, 5, 6, 7, 9, 12]\n    B = [1, 3, 7, 9, 12]\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = [1, 3, 4, 5, 6, 7, 9, 12]\n    B = [1, 3, 7, 9, 5]\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = []\n    B = []\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = []\n    B = [1, 3, 4, 5, 6, 7, 9, 12]\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = []\n    B = []\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = []\n    B = []\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")\n    A = []\n    B = []\n    print(\"True\" if is_Sub_Array(A,B) == True else \"False\")"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_min_max(arr):\n    '''\n    Write a python function to find minimum and maximum in a array\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([], [] ) == True \nassert     is_Sub_Array([1,2,3], []) == False \nassert     is_Sub_Array([1,2,3], [1]) == True \nassert     is_Sub_Array([1,2,3], [1,2]) == True \nassert     is_Sub_Array([1,2,3], [1,2,3]) == True \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    A = [-10, -5, 2, 3, 4, 5]\n    B = [1, 3, -1]\n    print(is_Sub_Array(A,B))"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(0) == 0\nassert     last_Digit_Factorial(5) == 0\nassert     last_Digit_Factorial(2) == 2\nassert     last_Digit_Factorial(3) == 3\nassert     last_Digit_Factorial(10) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert last_Digit_Factorial(45) == 5\nassert last_Digit_Factorial(55) == 1\nassert last_Digit_Factorial(12345) == 5\nassert last_Digit_Factorial(4325) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(last_Digit_Factorial(11)) # should print 4\n\nprint(last_Digit_Factorial(50)) # should print 1\n\nprint(last_Digit_Factorial(10)) # should print 3\n\nprint(last_Digit_Factorial(30)) # should print 2\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(1) == 1, \"Test 1 Failed\"\nassert     last_Digit_Factorial(2) == 1, \"Test 2 Failed\"\nassert     last_Digit_Factorial(3) == 2, \"Test 3 Failed\"\nassert     last_Digit_Factorial(4) == 2, \"Test 4 Failed\"\nassert     last_Digit_Factorial(5) == 3, \"Test 5 Failed\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(10) == 0, \"Should be 0\"\nassert     last_Digit_Factorial(5) == 1, \"Should be 1\"\nassert     last_Digit_Factorial(6) == 5, \"Should be 5\"\nassert     last_Digit_Factorial(100) == 0, \"Should be 0\"\nassert     last_Digit_Factorial(1000) == 1, \"Should be 1\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlast_Digit_Factorial(12) == 2\nlast_Digit_Factorial(1000) == 6\nlast_Digit_Factorial(10000) == 6\nlast_Digit_Factorial(10006) == 6\nlast_Digit_Factorial(90000) == 6\nlast_Digit_Factorial(12096) == 2\nlast_Digit_Factorial(12096) == 2\n\n\n\ndef count_Inversions(n):\n    '''\n    Write a python function to count the number of inversions in a given array.\n    (see https://en.wikipedia.org/wiki/Pigeonhole_sort)\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(12) == 2\nassert     last_Digit_Factorial(24) == 4\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(18) == 0, \"The correct answer is 0\"\nassert     last_Digit_Factorial(7) == 1, \"The correct answer is 1\"\nassert     last_Digit_Factorial(17) == 0, \"The correct answer is 0\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(1)     ==    1\nassert     last_Digit_Factorial(10)     ==    1\nassert     last_Digit_Factorial(36)     ==    2\nassert     last_Digit_Factorial(100)     ==    1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12,13]) == [1,5,9,2,6,10,3,7,11,4,8,12,13]\nassert     interleave_lists([],[],[1,2,3,4,5]) == [1,2,3,4,5]\nassert     interleave_lists([],[],[]) == []\nassert     interleave_lists([],[],[1,2,3,4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]) == [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]\nassert     interleave_lists([1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]) == [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6]\nassert     interleave_lists([1,2,3], [1,2,3,4,5], [1,2,3,4,5]) == [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5]\nassert     interleave_lists([1,2,3,4], [1,2,3,4,5], [1,2,3,4,5,6]) == [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     interleave_lists([1,2,3],\n                            [4,5,6,7],\n                            [8,9]) == [1,4,8,2,5,9,3,6,7]\nassert     interleave_lists([1,2,3],\n                            [4,5,6,7],\n                            [8,9,10]) == [1,4,8,2,5,9,3,6,7,10]\nassert     interleave_lists([1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11]) == [1,5,9,2,6,10,3,7,11,4]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert     interleave_lists([1, 2, 3], [4, 5, 6], [7]) == [1, 4, 7, 2, 5, 6, 3]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3],[],[]) == [1,2,3]\nassert     interleave_lists([],[],[1,2,3]) == [1,2,3]\nassert     interleave_lists([],[],[]) == []\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nprint(\"You have passed all the test cases\")\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9], \"First\"\nassert     interleave_lists([],[],[1,2,3]) == [1,2,3], \"Second\"\nassert     interleave_lists([1,2,3],[],[4,5,6]) == [1,4,2,5,3,6], \"Third\"\n\ndef interleave_lists_2(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    Hint: Use the built-in zip function\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((0, 1), (0, 1)) == ()\nassert     find_dissimilar((0, 0, 1, 2), (0, 1, 2, 3)) == (1,)\nassert     find_dissimilar((1, 2, 3), (1, 2, 3)) == ()\nassert     find_dissimilar((1, 2, 1, 2), (1, 2, 1, 2)) == (1, 2)\nassert     find_dissimilar((2,), (2,)) == ()\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar(('a', 'b'), ('c', 'd')) == ('a', 'b') \nassert     find_dissimilar(('d', 'e'), ('c', 'd')) == ('d', 'e') \nassert     find_dissimilar(('d', 'e'), ('c', 'd')) == ('d', 'e') \nassert     find_dissimilar(('c', 'd'), ('a', 'b')) == ('c', 'd') \nassert     find_dissimilar(('c', 'd'), ('a', 'b')) == ('c', 'd') \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((0, 0), (0, 0)) == ()\nassert     find_dissimilar((1, 0), (0, 0)) == (1, )\nassert     find_dissimilar((0, 1), (0, 0)) == (1, )\nassert     find_dissimilar((0, 1), (1, 1)) == (1, )\nassert     find_dissimilar((0, 1), (1, 2)) == (1, )\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((1, 2, 3, 4), (5, 6, 7, 8)) == (2, 6, 7, 8)\nassert     find_dissimilar((1, 2, 3, 4), (3, 4, 5, 6)) == (2, 3, 4, 5)\nassert     find_dissimilar((1, 2, 3, 4), (1, 2, 4, 5)) == (2, 3, 4, 5)\nassert     find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5)) == (2, 3, 4, 5)\nassert     find_dissimilar((1, 2, 3, 4), (1, 2, 3, 4)) == (0,)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_dissimilar((1,2,3,4,5), (1,2,3,4,5)) == (2, 3)\nassert find_dissimilar((1,2,3,4,5), (1,2,3)) == (2, 3)\nassert find_dissimilar((1,2,3,4,5), (1,2,3,5)) == (2, 3)\nassert find_dissimilar((1,2,3,4,5), (1,2,3,6)) == (2, 3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar((1,2,3,4),(1,2,4,5)) == (2,3), 'find_dissimilar has failed'\nassert     find_dissimilar((1,2,3,4),(1,2,3,4)) == (), 'find_dissimilar has failed'\nassert     find_dissimilar((1,2,3,4),(1,2,3)) == (2,4), 'find_dissimilar has failed'\nassert     find_dissimilar((1,2,3,4),(1,2,3,5)) == (2,3,4), 'find_dissimilar has failed'\n\nprint('\\nAll tests have been passed!'"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar((10, 20, 30, 40), (50, 60, 70, 80)) == (10, 20)\nassert     find_dissimilar((10, 20, 30, 40), (10, 20, 40, 50)) == (20, 30)\nassert     find_dissimilar((10, 20, 30, 40), (50, 60, 70, 80, 30)) == (30)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1,2), (2,3)) == (2,)\nassert     find_dissimilar((2,3), (3,4)) == (2,)\nassert     find_dissimilar((1,2,3), (2,3)) == (1,2,3)\nassert     find_dissimilar((1,2,3,4), (2,3)) == (1,2,3)\nassert     find_dissimilar((1,2,3,4,5), (2,3)) == (1,2,3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((0,1,2,3,4,5,6,7),(7,8,9,10,11,12,13,14)) == ((0,1,2,3,4), (5,6,7,8,9,10,11))\nassert     find_dissimilar((1,2,3,4,5,6,7,8),(9,10,11,12,13,14,15,16)) == ((0,1,2,3,4), (5,6,7,8,9,10,11))\nassert     find_dissimilar((0,1,2,3,4,5,6,7),(0,1,2,3,4,5,6,7)) == ()\nassert     find_dissimilar((1,2,3,4,5,6,7,8),(0,1,2,3,4,5,6,7)) == ()\nassert     find_dissimilar((0,1,2,3,4,5,6,7),(0,1,2,3,4,5,6,7)) == ()\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    even_ele(tuple(range(10)), lambda x: x % 2 == 0) == (0, 2, 4, 6, 8)\n    even_ele(tuple(range(10)), lambda x: x % 2 == 1) == (1, 3, 5, 7, 9)\n    even_ele(tuple(range(10)), lambda x: x % 2 == 2) == (2, 4, 6, 8)\n\n\n\n'''\ndef even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_ele(((1, 'john', (3, 4)), (1, 'john', (3, 4))), lambda t: t[1] % 2 == 0) == ((1, 'john'), (1, 'john'))\nassert     even_ele(((1, 'john', (3, 4)), (1, 'john', (3, 4))), lambda t: t[1] % 2!= 0) == ((1, 'john', (3, 4)), (1, 'john', (3, 4)))\nassert     even_ele(((1, 'john', (3, 4)), (1, 'john', (3, 4)), (1, 'john', (3, 4))), lambda t: t[1] % 2 == 0) == ((1, 'john', (3, 4)), (1, 'john', (3, 4)))\nassert     even_ele(((1, 'john', (3, 4)), (1, 'john', (3, 4)), (1, 'john', (3, 4))), lambda t: t[1] % 2!= 0) == ((1, 'john', (3, 4)), (1, 'john', (3, 4)))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_ele((1,(1,2,3,4,5,6),7,8,9,10), even_fnc) == (1,2,3,4,5,6,7,8,9,10), \"Do not change original tuple.\"\nassert     even_ele((1,(2,3,4,5),6,7), even_fnc) == (2,3,4,5,6,7), \"Remove even numbers.\"\nassert     even_ele((1,(2,3),4,5,6,7), even_fnc) == (2,3,4,5,6,7), \"Remove odd numbers.\"\nassert     even_ele((1,(2,),4,5,6,7), even_fnc) == (2,4,5,6,7), \"Remove all numbers in tuple.\"\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_ele((1, 2, 3, 4, 5, 6), even) == (2, 4, 6), \"Wrong result for (1, 2, 3, 4, 5, 6)\"\nassert     even_ele((1, 2, 3, 4, 5, 6, 7), even) == (2, 4, 6, 7), \"Wrong result for (1, 2, 3, 4, 5, 6, 7)\"\nassert     even_ele((1, 2, 3, 4, 5, 6, 7, 8), even) == (2, 4, 6, 8), \"Wrong result for (1, 2, 3, 4, 5, 6, 7, 8)\"\n\ndef count_even(test_tuple):\n    '''\n    Write a function to count even elements in the nested mixed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_ele([(1,2,3),(2,4,5,6),(7,8,9)], even_ele) ==     ((1,2,3),(4,5,6),(7,8,9))\nassert     even_ele([(1,2,3),(2,4,5,6),(7,8,9,10)], even_ele) ==     ((1,2,3),(4,5,6),(7,8,9,10))\nassert     even_ele(((1,2,3),(2,4,5,6),(7,8,9,10)), even_ele) ==     ((1,2,3),(4,5,6),(7,8,9,10))\nassert even_ele(((1,2,3),(2,4,5,6),(7,8,9,10)), even_ele) ==     ((1,2,3),(2,4,5,6),(7,8,9,10))\n\n\n'''\nAssume: the function to be used is same as above\nWrite a Python program that takes a tuple as input and returns a list of its elements having the same parity.\n'''\ndef parity_list(test_tuple): \n    '''\n    Write a function to return the parity list of the elements in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    even_ele((3, 4, 2, 1, 2, 2, 5, 2), \n        lambda x: x % 2 == 0) == (2, 4, 1, 2)\nassert \n    even_ele((('apple','mango', 'banana'), 'orange'),\n        lambda x: x[0] == 'apple') == ('apple','mango', 'banana')\nassert \n    even_ele(((3, 4, 2, 1, 2), (2, 3, 4, 5, 4)), \n        lambda x: x[0] == x[1]) == ((3, 4, 2), (2, 3, 4))\nassert \n    even_ele(((3, 4, 2, 1, 2), (2, 3, 4, 5, 4)), \n        lambda x: x[0] == (3, 4, 2)) == (3, 4, 2)\nassert \n    even_ele(((3, 4, 2, 1, 2), (2, 3, 4, 5, 4)), \n        lambda x: x[0] == (3, 4, 2, 1, 2)) == (3, 4, 2, 1, 2)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_ele(((1, 3, 4), (1, 2, 3, 4), (5, 6), (2, 3)), lambda x: x % 2 == 0 ) == ((1, 3, 4), (2, 3), (5, 6))\nassert     even_ele(((1, 3, 4), (1, 2, 3, 4), (5, 6), (2, 3)), lambda x: x % 2 == 1 ) == ((1, 2, 3, 4), (5, 6))\nassert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 0 ) == (1, 2, 3, 4)\nassert even_ele((1, 2, 3, 4, 5), lambda x: x % 2 == 1 ) == (3, 4)\n\ndef my_func(x, y, z):\n    '''\n    Write a function that accepts any number of arguments and \n    returns a tuple with the arguements in the order of their \n    appearance in the arguments.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_ele((1,(2,(3,4,(5,6))),7), even_fnc) == (1,(2,(3,4,(5,6)),7))\nassert even_ele((1,(2,(3,4,(5,6))),7), even_fnc) == (1,(2,(3,4,(5,6)),7))\nassert even_ele((1,(2,(3,4,(5,6))),7), even_fnc) == (1,(2,(3,4,(5,6))),7)\nassert even_ele((1,(2,(3,4,(5,6))),7), even_fnc) == (1,(2,(3,4,(5,6))),7)\nassert even_ele((1,(2,(3,4,(5,6))),7), even_fnc) == (1,(2,(3,4,(5,6))),7)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surface_Area(2,4) == 8\nassert     surface_Area(2,5) == 14\nassert     surface_Area(2,6) == 26\nassert     surface_Area(2,7) == 38\nassert     surface_Area(3,4) == 27\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    surface_Area(2,3) == 6\n    surface_Area(2,4) == 8\n    surface_Area(2,2) == 8\n    surface_Area(1,1) == 4\n    surface_Area(3,1) == 8\n    surface_Area(2,1) == 8\n    surface_Area(5,1) == 8\n    surface_Area(2,2) == 8\n    surface_Area(1,2) == 4\n    surface_Area(5,2) == 12\n    surface_Area(3,2) == 8\n    surface_Area(2,3) == 6\n    surface_Area(2,4) == 8\n    surface_Area(2,5) == 10\n    surface_Area(2,6) == 10\n    surface_Area(2,7) == 12\n    surface_Area(2,8) == 12\n    surface_Area(1,3) == 4\n    surface_Area(1,4) == 4\n    surface_Area(1,5) == 4\n    surface_Area(1,6) == 4\n    surface_Area(1,7) == 4\n    surface_Area(1,8) == 4\n    surface_Area(1,9) == 4\n    surface_Area(2,9) == 8\n    surface_Area(1,10) == 4\n    surface_Area(2,10) == 8\n    surface_Area(1,11) == 4\n    surface_Area(2,11) == 8\n    surface_Area(1,12) == 4\n    surface_Area(2,12) == 8\n    surface_Area(1,13) == 4\n    surface_Area(2,13) == 8\n    surface_Area(1,14) == 4\n    surface_Area(2,14) == 8\n    surface_Area(1,15) == 4\n    surface_Area(2,15) == 8\n    surface_Area(1,16) == 4\n    surface_Area(2,16) == 8\n    surface_Area(1,17) == 4\n    surface_Area(2,17) == 8\n    surface_Area(1,18) == 4\n    surface_Area(2,18) == 8\n    surface_Area(1,19) == 4\n    surface_Area(2,19) == 8\n    surface_Area(1,20) == 4\n    surface_Area(2,20) == 8\n    surface_Area(1,21) == 4\n    surface_Area(2,21) == 8\n    surface_Area(1,22) == 4\n    surface_Area(2,22) == 8\n    surface_Area(1,23) == 4\n    surface_Area(2,23) == 8\n    surface_Area(1,24) == 4\n    surface_Area(2,24) == 8\n    surface_Area(1,25) == 4\n    surface_Area(2,25) == 8\n    surface_Area(1,26) == 4\n    surface_Area(2,26) == 8\n    surface_Area(1,27) == 4\n    surface_Area(2,27) == 8\n    surface_Area(1,28) == 4\n    surface_Area(2,28) == 8\n    surface_Area(1,29) == 4\n    surface_Area(2,29) == 8\n    surface_Area(1,30) == 4\n    surface_Area(2,30) == 8\n    surface_Area(1,31) == 4\n    surface_Area(2,31) == 8\n    surface_Area(1,32) == 4\n    surface_Area(2,32) == 8\n    surface_Area(1,33) == 4\n    surface_Area(2,33) == 8\n    surface_Area(1,34) == 4\n    surface_Area(2,34) == 8\n    surface_Area(1,35) == 4\n    surface_Area(2,35) == 8\n    surface_Area(1,36) == 4\n    surface_Area(2,36) == 8\n    surface_Area(1,37) == 4\n    surface_Area(2,37) == 8\n    surface_Area(1,38) == 4\n    surface_Area(2,38) == 8\n    surface_Area(1,39) == 4\n    surface_Area(2,39) == 8\n    surface_Area(1,40) == 4\n    surface_Area(2,40) == 8\n    surface_Area(1,41) == 4\n    surface_Area(2,41) == 8\n    surface_Area(1,42) == 4\n    surface_Area(2,42) == 8\n    surface_Area(1,43) == 4\n    surface_Area(2,43) == 8\n    surface_Area(1,44) == 4\n    surface_Area(2,44) == 8\n    surface_Area(1,45) == 4\n    surface_Area(2,45) == 8\n    surface_Area(1,46) == 4\n    surface_Area(2,46) == 8\n    surface_Area(1,47) == 4\n    surface_Area(2,47) == 8\n    surface_Area(1,48) == 4\n    surface_Area(2,48) == 8\n    surface_Area(1,49) == 4\n    surface_Area(2,49) == 8\n    surface_Area(1,50) == 4\n    surface_Area(2,50) == 8\n    surface_Area(1,51) == 4\n    surface_Area(2,51) == 8\n    surface_Area(1,52) == 4\n    surface_Area(2,52) == 8\n    surface_Area(1,53) == 4\n    surface_Area(2,53) == 8\n    surface_Area(1,54) == 4\n    surface_Area(2,54) == 8\n    surface_Area(1,55) == 4\n    surface_Area(2,55) == 8\n    surface_Area(1,56) == 4\n    surface_Area(2,56) == 8\n    surface_Area(1,57) == 4\n    surface_Area(2,57) == 8\n    surface_Area(1,58) == 4\n    surface_Area(2,58) == 8\n    surface_Area(1,59) == 4\n    surface_Area(2,59) == 8\n    surface_Area(1,60) == 4\n    surface_Area(2,60) == 8\n    surface_Area(1,61) == 4\n    surface_Area(2,61) == 8\n    surface_Area(1,62) == 4\n    surface_Area(2,62) == 8\n    surface_Area(1,63) == 4\n    surface_Area(2,63) == 8\n    surface_Area(1,64) == 4\n    surface_Area(2,64) == 8\n    surface_Area(1,65) == 4\n    surface_Area(2,65) == 8\n    surface_Area(1,66) == 4\n    surface_Area(2,66) == 8\n    surface_Area(1,67) == 4\n    surface_Area(2,67) == 8\n    surface_Area(1,68) == 4\n    surface_Area(2,68) == 8\n    surface_Area(1,69) == 4\n    surface_Area(2,69) == 8\n    surface_Area(1,70) == 4\n    surface_Area(2,70) == 8\n    surface_Area(1,71) == 4\n    surface_Area(2,71) == 8\n    surface_Area(1,72) == 4\n    surface_Area(2,72) == 8\n    surface_Area(1,73) == 4\n    surface_Area(2,73) == 8\n    surface_Area(1,74) == 4\n    surface_Area(2,74) == 8\n    surface_Area(1,75) == 4\n    surface_Area(2,75) == 8\n    surface_Area(1,76) == 4\n    surface_Area(2,76) == 8\n    surface_Area(1,77) == 4\n    surface_Area(2,77) == 8\n    surface_Area(1,78) == 4\n    surface_Area(2,78) == 8\n    surface_Area(1,79) == 4\n    surface_Area(2,79) == 8\n    surface_Area(1,80) ="
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    surface_Area(8,5) == 80\n    surface_Area(8,6) == 112\n    surface_Area(10,5) == 150\n    surface_Area(10,10) == 280\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(2,3) == 10, \"Should be 10\"\nassert     surface_Area(1,1) == 4, \"Should be 4\"\nassert     surface_Area(1,2) == 10, \"Should be 10\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surface_Area(3,3) == 9\nassert     surface_Area(5,5) == 30\nassert     surface_Area(4,3) == 20\nassert     surface_Area(3,3) == 9\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surface_Area(2,5) == 24, \"Test 1 fail.\"\nassert     surface_Area(5,3) == 20, \"Test 2 fail.\"\n\n'''\nSolution:\n\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # compute the surface area\n    surface_area = 0\n    base_area = b*b\n    s = b+2*s\n    half_s = s/2\n    # compute the surface area\n    surface_area = base_area + half_s*(s-base_area)\n    # return the surface area\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(6, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(6, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(2, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(1, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(0, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(0, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(3, 10))\n\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 0))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 3))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 5))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 20))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 30))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 40))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 50))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 60))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 70))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 80))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 90))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 100))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 200))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 300))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 400))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 500))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 600))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 700))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 800))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 900))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 1000))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 2000))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(5, 5000))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 0))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 3))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 5))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 20))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 30))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 40))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 50))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 60))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 70))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 80))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 90))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 100))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 200))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 300))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 400))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 500))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 600))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 700))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 800))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 900))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 1000))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 2000))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(10, 5000))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 0))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 3))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 5))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 10))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 20))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 30))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 40))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 50))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 60))\nprint (\"\\nSurface area of a square pyramid with a given base edge and height : \", surface_Area(20, 70))\nprint (\"\\nSurface area of a square pyramid with a given base edg"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({}) == True, \"The empty dictionary should be True\"\nassert my_dict({\"a\":1, \"b\":2}) == False, \"The dictionary with two values should be False\"\n\n'''\nWrite a function that returns true if a word is in upper case and false otherwise\n'''\ndef isupper(s):\n    '''\n    Write a function to check if a word is in upper case\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmy_dict({})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert my_dict(dict())\nassert not my_dict(None)\nassert not my_dict({\"k\":\"v\"})\nassert not my_dict({\"k\":\"v\",\"k1\":\"v1\"})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    my_dict({}) == True, 'Expected True, got False'\n    my_dict({\n        'a':1,\n        'b':2\n    }) == True, 'Expected True, got False'\n    my_dict({\n        'a':1,\n        'b':2,\n        'c':3\n    }) == False, 'Expected False, got True'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not my_dict({})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     my_dict({}) == True, \"Empty dictionary\"\nassert     my_dict({\"a\": \"a\", \"b\": \"b\"}) == False, \"Non-empty dictionary\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict({}) == True, \"This is not an empty dictionary!\"\nassert my_dict({\"a\":1,\"b\":2}) == True, \"This is an empty dictionary!\"\n\ndef my_dict_keys(dict1):\n    '''\n    Write a function to return the dictionary keys\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     my_dict({}) == True, '\\nwrong. the function should return True if dict is empty'\nassert my_dict({1:1, 2:2}) == False, '\\nwrong. the function should return False if dict is not empty'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     my_dict(    { }    )    == True, \"expected True\"\nassert     my_dict(    {1:2}    )    == False, \"expected False\"\nassert     my_dict(    {1:2, 3:4}    )    == False, \"expected False\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     catalan_number(1) == 2\nassert     catalan_number(2) == 4\nassert     catalan_number(3) == 10\nassert     catalan_number(10) == 40320\nassert     catalan_number(100) == 2432902008176640000\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(catalan_number(5))\nprint(catalan_number(10))\nprint(catalan_number(20))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 4\nassert     catalan_number(4) == 8\nassert     catalan_number(5) == 8\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     catalan_number(0) == 0, \\\n\"catalan_number(0) = 0 is incorrect\"\nassert     catalan_number(1) == 1, \\\n\"catalan_number(1) = 1 is incorrect\"\nassert     catalan_number(2) == 2, \\\n\"catalan_number(2) = 2 is incorrect\"\nassert     catalan_number(3) == 4, \\\n\"catalan_number(3) = 4 is incorrect\"\nassert     catalan_number(4) == 5, \\\n\"catalan_number(4) = 5 is incorrect\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     catalan_number(1) == 1\nassert catalan_number(2) == 1\nassert catalan_number(3) == 2\nassert catalan_number(4) == 2\nassert catalan_number(5) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\nassert     catalan_number(5) == 42\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(5) == 14\nassert     catalan_number(8) == 42\nassert     catalan_number(15) == 112\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     catalan_number(1) == 1, \"1st catalan number should be 1\"\nassert     catalan_number(2) == 2, \"2nd catalan number should be 2\"\nassert     catalan_number(3) == 4, \"3rd catalan number should be 4\"\nassert     catalan_number(4) == 7, \"4th catalan number should be 7\"\nassert     catalan_number(5) == 12, \"5th catalan number should be 12\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == ([3, 7],)\nassert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == ([3, 7],)\nassert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == ([3, 7],)\nassert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == ([3, 7],)\nassert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == ([3, 7],)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs('We have to carry out this test from now on.') == ([8], False), 'incorrect output'\nassert     find_adverbs('While it is probable that the test will fail, we should keep going.') == ([28], True), 'incorrect output'\nassert     find_adverbs('One day, I will show you this, but it is not time for me to do it.') == ([], False), 'incorrect output'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs(\"lyly\") == False\nassert     find_adverbs(\"I am not a man\") == False\nassert     find_adverbs(\"I am a man\") == True\nassert     find_adverbs(\"I was a man\") == True\nassert     find_adverbs(\"I am the man\") == True\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs(\"The rooster is lying on the floor, roosters are made of wood and steel.\") ==     [(0, 13), (13, 16)]\nassert     find_adverbs(\"The water is boiling, the sea is boiling.\") ==     [(0, 8), (8, 9)]\nassert     find_adverbs(\"The sky is bright, the sky is bright.\") ==     [(0, 5), (5, 6)]\nassert     find_adverbs(\"The wind is strong, the wind is strong.\") ==     [(0, 5), (5, 6)]\nassert     find_adverbs(\"The wind is strong, the wind is strong.\") ==     []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverbs('') == []\nassert     find_adverbs('The cat is playing') == []\nassert     find_adverbs('The cat is playing on the ground.') == []\nassert     find_adverbs('I did not find any adverbs') == []\nassert     find_adverbs('One of the good words is \"asap\".') == []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs('This book is about the lyly paradigms') == 'about lyly paradigms'\nassert     find_adverbs('This book is about lyly paradigms') == 'about lyly paradigms'\nassert     find_adverbs('This book is about lyly paradigms') == 'about lyly paradigms'\nassert     find_adverbs('This book is about lyly paradigms') == 'about lyly paradigms'\nassert     find_adverbs('This book is about lyly paradigms') == 'about lyly paradigms'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverbs('This is a test') == None\nassert     find_adverbs('This is a test') == None\nassert     find_adverbs('This is a test') == None\nassert     find_adverbs('This is a test') == None\nassert     find_adverbs('This is a test') == None\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_nouns(text):\n    '''\n    Write a function to find all the nouns and their first and last positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs(\"Celie's second birthday.\") == [(6, 13)]\nassert     find_adverbs(\"Best days to learn Python!\") == []\nassert     find_adverbs(\"Just love learning Python!\") == [(6, 12)]\nassert     find_adverbs(\"I love learning Python!\") == [(9, 13)]\nassert     find_adverbs(\"My first day to learn Python!\") == [(5, 8)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs(\"It's a cold day in April\") == [\"April\", 23]\nassert     find_adverbs(\"It's a sunny day in April\") == []\nassert     find_adverbs(\"It's a hot day in April\") == [\"April\", 18]\nassert     find_adverbs(\"It's a hot day in April, but not in April.\") == []\nassert     find_adverbs(\"It's a hot day in April, and then it was a cold day in April.\") == [\"April\", 18]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([],0)==[], \" empty list\"\nassert expensive_items([1],0)==[], \" no items in the list\"\nassert expensive_items([1,2],0)==[], \" one item in the list\"\nassert expensive_items([1,2,3],0)==[], \" two items in the list\"\nassert expensive_items([1,2,3,4,5],0)==[1,2,3,4,5], \" all items in the list\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nexpensive_items([100,12,2,15,39],4)==[12,2,39,100]\nassert expensive_items([0,5,7,8,9,10,7,3,4,6],5) ==[7,10,7,3,4]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items([('banana',2),('apple',4),('orange',5),('pear',3),('grape',1),('kiwi',5)],3) == ['grape', 'orange', 'pear']\nassert expensive_items([('banana',2),('apple',4),('orange',5),('pear',3),('grape',1),('kiwi',5)],5) == ['banana', 'grape', 'apple', 'kiwi', 'pear']\n\ndef shopping_list(prices, price_limit):\n    '''\n    Given a list of prices, calculate the total cost of all the items within a price range.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items([('grapes',1.5),('oranges',2.5),('grapes',2.0),('oranges',2.5),('bananas',3.5)],2) == ['grapes', 'bananas']\nassert     expensive_items([('grapes',1.5),('oranges',2.5),('grapes',2.0),('oranges',2.5),('bananas',3.5)],3) == ['bananas', 'grapes', 'oranges']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #sort by value\n    items.sort(key=lambda x: x.value, reverse=True)\n    print(items)\n    #return the list\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef frequent_items(items,n):\n    '''\n    Write a function to find the n most frequent items in a given dataset.\n    '''\n    pass\n\ndef item_spacing(items,n):\n    '''\n    Write a function to find the n most frequent items in a given dataset.\n    '''\n    pass\n\ndef order_count(items,count):\n    '''\n    Write a function to find the n most frequent items in a given dataset.\n    '''\n    pass\n\ndef close_to_limit(items,limit,n):\n    '''\n    Write a function to find the n most frequent items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nexpensive_items([3,4,1,5],2) == (4,5)\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x:x[1])\n    return items[-n:]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     expensive_items([{'id': 0, 'price': 20}, \n                          {'id': 1, 'price': 10}, \n                          {'id': 2, 'price': 5}, \n                          {'id': 3, 'price': 15},\n                          {'id': 4, 'price': 25}], 2) == [{'id': 4, 'price': 25}, \n                          {'id': 3, 'price': 15}]\nassert     expensive_items([{'id': 0, 'price': 20}, \n                          {'id': 1, 'price': 10}, \n                          {'id': 2, 'price': 5}, \n                          {'id': 3, 'price': 15},\n                          {'id': 4, 'price': 25}], 3) == [{'id': 3, 'price': 15}, \n                          {'id': 0, 'price': 20}, \n                          {'id': 1, 'price': 10}, \n                          {'id': 4, 'price': 25}]\nassert     expensive_items([{'id': 0, 'price': 20}, \n                          {'id': 1, 'price': 10}, \n                          {'id': 2, 'price': 5}, \n                          {'id': 3, 'price': 15},\n                          {'id': 4, 'price': 25}], 4) == [{'id': 1, 'price': 10}, \n                          {'id': 2, 'price': 5}, \n                          {'id': 3, 'price': 15}, \n                          {'id': 0, 'price': 20}, \n                          {'id': 4, 'price': 25}]\nassert     expensive_items([{'id': 0, 'price': 20}, \n                          {'id': 1, 'price': 10}, \n                          {'id': 2, 'price': 5}, \n                          {'id': 3, 'price': 15},\n                          {'id': 4, 'price': 25}], 5) == [{'id': 2, 'price': 5}, \n                          {'id': 1, 'price': 10}, \n                          {'id': 3, 'price': 15}, \n                          {'id': 0, 'price': 20}, \n                          {'id': 4, 'price': 25}]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nexpensive_items(['Iphone', 'MacBook Pro', 'Surface', 'Macbook', 'Surface Pro', 'Ipad', 'iPhone 11', 'Surface', 'Samsung Galaxy S10', 'Ipad', 'Samsung Galaxy S10', 'Iphone', 'Ipad', 'Iphone 11', 'Ipad'], 3) == ['Iphone', 'Ipad', 'Ipad'], 'Should return the 3 items with the largest price'\nassert \nexpensive_items(['Iphone', 'MacBook Pro', 'Surface', 'Macbook', 'Surface Pro', 'Ipad', 'iPhone 11', 'Surface', 'Samsung Galaxy S10', 'Ipad', 'Samsung Galaxy S10', 'Iphone', 'Ipad', 'Iphone 11', 'Ipad'], 1) == ['Iphone'], 'Should return only 1 item with the largest price'\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert expensive_items([\n    ('Keyboard', 129), ('HDMI cable', 42), ('USB hub', 17), ('Keyboard', 129),\n    ('HDMI cable', 42), ('USB hub', 17), ('Keyboard', 129), ('HDMI cable', 42),\n    ('USB hub', 17), ('Keyboard', 129), ('HDMI cable', 42), ('USB hub', 17),\n    ('Keyboard', 129), ('HDMI cable', 42), ('USB hub', 17)\n    ], 7) == {'Keyboard', 'HDMI cable', 'USB hub', 'HDMI cable', 'Keyboard', 'USB hub', 'Keyboard', 'HDMI cable'}\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsplit_Arr([1,2,3,4,5], 1) == [[1, 2], 3, 4, 5]\nassert \nsplit_Arr([1,2,3,4,5], 2) == [[1, 2], 3, 4, 5]\nassert \nsplit_Arr([1,2,3,4,5], 3) == [[1, 2], 3, 4]\nassert \nsplit_Arr([1,2,3,4,5], 4) == [[1, 2], 3, 4]\nassert \nsplit_Arr([1,2,3,4,5], 5) == [[1, 2], 3, 4]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == ['a', 'b', 'c', 'd']\nassert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 4) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 5) == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # input\n    l = [1, 2, 3, 4, 5, 6]\n    n = 3\n\n    # process\n    # if there are no elements left to be splitted, then return the original list\n    if len(l) == 0:\n        return l\n\n    # split the list at the nth element and add the first part to the end\n    first_half = l[0:n]\n    second_half = l[n:]\n\n    # return the result\n    return first_half + second_half\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert split_Arr([1,2,3,4,5,6,7,8,9,10],5) == [1,2,3,4,5]\nassert split_Arr([1,2,3,4,5,6,7,8,9,10],9) == [1,2,3,4,5,6,7,8,9,10]\nassert split_Arr([1,2,3,4,5,6,7,8,9,10],0) == [1,2,3,4,5,6,7,8,9,10]\nassert split_Arr([1,2,3,4,5,6,7,8,9,10],100) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_Arr([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4, 5, 6]]\nassert     split_Arr([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\nassert     split_Arr([1, 2, 3, 4, 5, 6], 4) == [[1, 2, 3, 4], [5, 6]]\nassert     split_Arr([1, 2, 3, 4, 5, 6], 5) == [[1, 2, 3, 4, 5], [6]]\nassert     split_Arr([1, 2, 3, 4, 5, 6], 6) == [[1, 2, 3, 4, 5, 6]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\nsplit_Arr([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], 4, 5, 6, 7, 8]\nsplit_Arr([1, 2, 3, 4, 5, 6, 7, 8], 4) == [[1, 2, 3, 4], 5, 6, 7, 8]\nsplit_Arr([1, 2, 3, 4, 5, 6, 7, 8], 5) == [[1, 2, 3, 4, 5], 6, 7, 8]\nsplit_Arr([1, 2, 3, 4, 5, 6, 7, 8], 6) == [[1, 2, 3, 4, 5, 6], 7, 8]\nsplit_Arr([1, 2, 3, 4, 5, 6, 7, 8], 7) == [[1, 2, 3, 4, 5, 6, 7], 8]\nsplit_Arr([1, 2, 3, 4, 5, 6, 7, 8], 8) == [[1, 2, 3, 4, 5, 6, 7, 8]]\nsplit_Arr([1, 2, 3, 4, 5, 6, 7, 8], 9) == [[1, 2, 3, 4, 5, 6, 7, 8]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_Arr([1,2,3,4], 2) == [(1, 2), (3, 4)]\nassert     split_Arr([1,2,3,4], 3) == [(1, 2, 3), (4,)]\nassert     split_Arr([1,2,3,4], 4) == [(1, 2, 3, 4)]\nassert     split_Arr([1,2,3,4], 5) == []\nassert     split_Arr([1,2,3,4], 6) == [(1, 2, 3, 4)]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef list_tuple_1(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple([]) == (),     'your program should return a tuple'\nassert     list_tuple([1, 2]) == (1, 2), 'your program should return a tuple'\nassert     list_tuple([1, 2, 3]) == (1, 2, 3), 'your program should return a tuple'\nassert     list_tuple([]) == (),     'your program should return a tuple'\nassert     list_tuple([]) == (),     'your program should return a tuple'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple([4, 5, 6]) == (4, 5, 6)\nassert     list_tuple([\"a\", \"b\", \"c\"]) == (\"a\", \"b\", \"c\")\nassert     list_tuple([True, True, True]) == (True, True, True)\nassert     list_tuple([False, False, False]) == (False, False, False)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([1,2,3,4]) == (1,2,3,4), \"Wrong answer\"\nassert     list_tuple([1,2,3,4]) == (1,2,3,4), \"Wrong answer\"\n\ndef tuple_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n\ndef list_tuple2(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple(['a','b','c']) == ('a','b','c')\nassert     list_tuple([[1,2,3],[4,5,6]]) == ([1,2,3],[4,5,6])\nassert     list_tuple([1,2,3]) == (1,2,3)\nassert not list_tuple([])\n\ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([1,2,3,4]) == (1,2,3,4)\nassert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1]) == (1,)\nassert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([]) == ()\nassert     list_tuple([1,2,3,4]) == (1,2,3,4)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple(['apple','water','cat','dogs','house','baby','leg','legs','house','baby','leg','legs','house','baby','leg'])==\n        ('apple','water','cat','dogs','house','baby','leg','legs','house','baby','leg','legs','house','baby','leg',)\n    # the result should be     ('apple','water','cat','dogs','house','baby','leg','legs','house','baby','leg','legs','house','baby','leg')\nassert list_tuple(['apple','water','cat','dogs','house','baby','leg','legs','house','baby','leg','legs','house','baby','leg'])==\n        ('apple','water','cat','dogs','house','baby','leg','legs','house','baby','leg','legs','house','baby','leg',)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_diff([2, 3, -2, 4, -5, 10, 3, 4]) == 12\nassert     big_diff([2, 3, 4, 5, 10, -5, 0, -4]) == 8\nassert     big_diff([0, -2, 4, 5, 10, -5, 0, -4]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_diff([]) == 0, 'empty list'\nassert     big_diff([1,2,3,4,5]) == 0,'sorted array'\nassert     big_diff([2,2,8,9,11]) == 6, 'unsorted array'\nassert     big_diff([3,2,6]) == 3,'single number'\nassert     big_diff([1,5,3,2,2,3,1,2,5]) == 4, 'three numbers in list'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([-12, -13, -9, -3, -6, -4, -2, 0, 1, 3, 6, 9, 12, 13]) == -6\nassert     big_diff([-8, -8, -5, -3, -1, 0, 1, 2, 5, 8, 9]) == -4\nassert     big_diff([]) == 0\nassert     big_diff([5,3,5,6]) == 5\nassert     big_diff([5,3,6,1,4]) == 5\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_diff([10, 3, 5, 6]) == 3\nassert     big_diff([0, 10, 5, 6]) == 8\nassert     big_diff([0, 100, 5, 6]) == 101\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nbig_diff([10, 3, 5, 6]) == 6,'should be 6'\nassert big_diff([1, 2, 3, 4]) == 3,'should be 3'\nassert big_diff([1, 100, 50, -5]) == 101,'should be 101'\nassert big_diff([-2, -5, 6, 4, -20]) == 20,'should be 20'\n\ndef my_big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # very slow\n    min_val = min(nums)\n    max_val = max(nums)\n    return max_val - min_val\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_diff([-4, -3, -2, -1, 0, 1, 2, 3, 4]) == 6\nassert     big_diff([-9, -8, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) == 1\nassert     big_diff([-100, -98, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) == 6\nassert     big_diff([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) == -8\nassert     big_diff([-100, -98, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) == 6\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_diff([-3, 5, 4]) == 4\nassert     big_diff([-1, 6, 2, 7]) == 0\nassert     big_diff([-1, -5, -5]) == -5\n\n\ndef has_two_sum(nums, target):\n    '''\n    Write a python function to check if there exist two integers in a given array whose sum is equal to a target number.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([3, 4, -9, 6, 7]) == 10\nassert big_diff([3, -6, 7]) == 3\nassert big_diff([-2, -5, -6]) == -7\nassert big_diff([2, 5, 2, 8, -2, 5, -7, 6]) == 13\nassert big_diff([-1, -1, -1, -1, -1, -1]) == -8\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbig_diff([2,3,4,5]) == 4, 'The expected output is 4'\nassert \nbig_diff([-2,1,2,3]) == 3, 'The expected output is 3'\nassert\nbig_diff([-5,-2,-1]) == -3, 'The expected output is -3'\nassert\nbig_diff([]) == 0, 'The expected output is 0'"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(1, 1) == [1]\nassert     perfect_squares(3, 4) == [9]\nassert     perfect_squares(10, 25) == [1, 10]\n\n\ndef digits_of(number):\n    '''\n    The number of digits in a number is the number of places to the right of the decimal point.\n    '''\n    pass"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perfect_squares(1, 1) == [1]\nassert     perfect_squares(2, 3) == [3]\nassert     perfect_squares(3, 4) == [9]\nassert     perfect_squares(4, 5) == [16]\nassert     perfect_squares(6, 8) == [36]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perfect_squares(3, 12) == 3 ** 2, \"3^2 == 3\"\nassert     perfect_squares(2, 3) == 3 ** 2, \"2^2 == 2\"\nassert     perfect_squares(1, 3) == 3 ** 2, \"1^2 == 1\"\nassert     perfect_squares(0, 3) == 3 ** 2, \"0^2 == 0\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perfect_squares(0, 0) == set(), \"Should be an empty set\"\nassert     perfect_squares(1, 2) == {1}, \"Should be {1}\"\nassert     perfect_squares(2, 3) == {4, 9}, \"Should be {4, 9}\"\nassert     perfect_squares(3, 4) == {9, 16}, \"Should be {9, 16}\"\nassert     perfect_squares(4, 5) == {10, 25}, \"Should be {10, 25}\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perfect_squares(10, 11) == (1, 11)\nassert     perfect_squares(0, 11) == (0, 11)\nassert     perfect_squares(11, 11) == (11, 11)\nassert perfect_squares(0, 0) == (0, 0)\nassert perfect_squares(9, 9) == (9, 9)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \npolar_rect(3,4) == (3, 4)\npolar_rect(1.5,1.5) == (3, 4)\npolar_rect(1,4) == (3, 4)\npolar_rect(1.5,4) == (3, 4)\n\ndef angle(x,y):\n    '''\n    Write a function to find angle between two points in polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert 0 == polar_rect(3,1)\nassert 0 == polar_rect(3,4)\nassert -1 == polar_rect(3,3)\nassert 0 == polar_rect(4,2)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return ((r * cmath.cos(theta), r * cmath.sin(theta)), (r * cmath.cos(theta), r * cmath.sin(theta) + r*cmath.sin(theta) ))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(polar_rect(1,1)) # Function should return (0.0, 1.0)\n    print(polar_rect(3,3)) # Function should return (1.0, 3.0)\n    print(polar_rect(1,2)) # Function should return (0.7853981633974483, 2.356194490192345)\n    print(polar_rect(1,1.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 1.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 3.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 4.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 5.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 6.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 7.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 8.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 9.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(2.8, 10.00000001)) # Function should return (0.7853981633974483, 1.5707963267948966)\n    print(polar_rect(3, 1.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 2.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 3.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 4.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 5.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 6.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 7.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 8.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 9.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(3, 10.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 1.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 2.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 3.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 4.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 5.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 6.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 7.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 8.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 9.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(4, 10.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 1.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 2.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 3.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 4.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 5.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 6.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 7.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 8.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 9.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(5, 10.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 1.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 2.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 3.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 4.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 5.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 6.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 7.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 8.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 9.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(6, 10.00000001)) # Function should return (1.5707963267948966, 1.00000001)\n    print(polar_rect(7, 1.00000001)) # Function should return ("
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     polar_rect(0.0,0.0) == (0,0)\nassert     polar_rect(3.0,4.0) == (1.41421,5.0)\nassert     polar_rect(-1.0,-1.0) == (-1,1)\nassert     polar_rect(2.0,1.0) == (3.0,1.0)\nassert     polar_rect(0,1.0) == (0.0,1.0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(2,3) == (0,2)\nassert polar_rect(2,3) == (0,2)\nassert polar_rect(5,7) == (3.541666666666666, 6.28318530717959)\nassert polar_rect(5,7) == (3.541666666666666, 6.28318530717959)\nassert polar_rect(2.5,6) == (4.41428571428571, 5.65361499703877)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     polar_rect(1,1) == (1,1)\nassert     polar_rect(1,-1) == (1,1)\nassert     polar_rect(1,0) == (1,1)\nassert     polar_rect(0,1) == (1,1)\nassert     polar_rect(0,-1) == (1,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nswap_List([1,2,3,4,5]) ==[2,3,4,5,1]\nassert\nswap_List([1,2,3,4,5,6,7]) ==[2,3,4,5,6,7,1]\nassert\nswap_List([1,2,3,4,5,6]) ==[2,3,4,5,6,1]\nassert\nswap_List([1,2,3,4,5,6,7]) ==[2,3,4,5,6,7,1]\nassert\nswap_List([1,2,3,4,5,6,7,8]) ==[2,3,4,5,6,7,8,1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List([1,2,3]) ==[3,2,1]\nassert     swap_List([1,2,3,4,5,6,7]) ==[5,6,7,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7,8,9]) ==[9,8,7,6,5,4,3,2,1]\nassert     swap_List([1,2,3,4,5,6,7,8,9,10]) ==[10,9,8,7,6,5,4,3,2,1]\nassert     swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) ==[15,10,9,8,7,6,5,4,3,2,11,12,13,14,1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([5, 2, 4, 6, 1, 3]) == [6, 1, 3, 2, 5, 4]\nassert swap_List([5, 2, 1, 3, 4, 6]) == [6, 1, 3, 2, 5, 4]\nassert swap_List([5, 2, 1, 3]) == [6, 1, 3, 2]\nassert swap_List([5, 2, 4, 6]) == [6, 2, 4, 5]\nassert swap_List([5]) == [5]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nswap_List([1,2,3,4]) == [2,1,4,3]\nswap_List([1,2,3]) == [2,3,1]\nswap_List([1,2,3]) == [2,3,1]\nswap_List([1,2,3,4,5]) == [2,3,4,5,1]\nswap_List([]) == []\n\n'''\nGiven a list of numbers, return a list of all permutations. \n\nPermutation - An ordering of elements.\nPermutation - An ordering of numbers, such that a[i] < a[j] iff i < j.\nPermutation - An ordering of numbers, such that a[i] < a[j] iff a[i] > a[j].\n\nExample:\n    Input = [1, 2, 3]\n    Output = [[1, 2, 3],\n              [1, 3, 2],\n              [2, 1, 3],\n              [2, 3, 1],\n              [3, 1, 2],\n              [3, 2, 1]]\n'''\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1,2,3,4,5]) == [3,4,5,1,2]\nassert     swap_List([1,2,3,4]) == [3,4,1,2]\nassert     swap_List([1,2,3,4,5]) == [3,4,5,1,2]\nassert     swap_List([1,2,3,4,5,6]) == [3,4,5,6,1,2]\nassert     swap_List([1,2,3,4,5,6,7]) == [3,4,5,6,7,1,2]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1,2,3,4]) ==[4,3,2,1], \"Wrong! Expected 4,3,2,1 but got {}\".format(swap_List([1,2,3,4]))\nassert     swap_List([1,2,3,4,5]) ==[5,4,3,2,1], \"Wrong! Expected 5,4,3,2,1 but got {}\".format(swap_List([1,2,3,4,5]))\nassert     swap_List([1,2,3,4,5,6]) ==[6,5,4,3,2,1], \"Wrong! Expected 6,5,4,3,2,1 but got {}\".format(swap_List([1,2,3,4,5,6]))\nassert     swap_List([1,2,3,4,5,6,7]) ==[7,6,5,4,3,2,1], \"Wrong! Expected 7,6,5,4,3,2,1 but got {}\".format(swap_List([1,2,3,4,5,6,7]))\nassert     swap_List([1,2,3,4,5,6,7,8]) ==[8,7,6,5,4,3,2,1], \"Wrong! Expected 8,7,6,5,4,3,2,1 but got {}\".format(swap_List([1,2,3,4,5,6,7,8]))\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nswap_List([1,2,3,4,5]) == [5,1,2,3,4]\nprint(\"You're correct.\")\n\n\n\ndef bubble_Sort(list):\n    '''\n    Write a python function to sort the list in ascending order using bubble sort.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4]) == [4,2,3,1]\nassert     swap_List([]) == []\nassert     swap_List([1]) == [1]\n\ndef swap_Dict(dict): \n    '''\n    Write a python function to interchange the first and last elements in a dict.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    binomial_Coeff(1,1) == 1\n    binomial_Coeff(2,1) == 1\n    binomial_Coeff(2,2) == 2\n    binomial_Coeff(3,3) == 3\n    binomial_Coeff(3,2) == 2\n    binomial_Coeff(3,1) == 1\n    binomial_Coeff(3,0) == 1\n\nprint(f\"sum of the product of consecutive binomial coefficients = {binomial_Coeff(1,1)}\")\nprint(f\"sum of the product of consecutive binomial coefficients = {binomial_Coeff(2,1)}\")\nprint(f\"sum of the product of consecutive binomial coefficients = {binomial_Coeff(2,2)}\")\nprint(f\"sum of the product of consecutive binomial coefficients = {binomial_Coeff(3,3)}\")\nprint(f\"sum of the product of consecutive binomial coefficients = {binomial_Coeff(3,2)}\")\nprint(f\"sum of the product of consecutive binomial coefficients = {binomial_Coeff(3,1)}\")\nprint(f\"sum of the product of consecutive binomial coefficients = {binomial_Coeff(3,0)}\")\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     binomial_Coeff(4, 1) == 4, 'incorrect function result'\nassert     binomial_Coeff(3, 3) == 16, 'incorrect function result'\nassert     binomial_Coeff(2, 5) == 3, 'incorrect function result'\nassert     binomial_Coeff(2, 2) == 6, 'incorrect function result'\nassert     binomial_Coeff(5, 4) == 5, 'incorrect function result'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     binomial_Coeff(2,1) == 2\nassert     binomial_Coeff(2,2) == 4\nassert     binomial_Coeff(10,0) == 1\nassert     binomial_Coeff(15,1) == 15\nassert     binomial_Coeff(10,2) == 70\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(2,5) == 24\nassert     binomial_Coeff(10,3) == 34288\nassert     binomial_Coeff(1,2) == 1\nassert     binomial_Coeff(0,0) == 1\nassert     binomial_Coeff(0,1) == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbinomial_Coeff(2,2) == 10 \nbinomial_Coeff(3,2) == 10 \nbinomial_Coeff(5,2) == 50 \nbinomial_Coeff(6,2) == 20 \nbinomial_Coeff(10,2) == 30 \nbinomial_Coeff(3,3) == 35\nbinomial_Coeff(5,3) == 45\nbinomial_Coeff(7,3) == 35\nbinomial_Coeff(9,3) == 60\nbinomial_Coeff(10,3) == 240\nbinomial_Coeff(6,4) == 120\nbinomial_Coeff(5,4) == 120\nbinomial_Coeff(7,4) == 140\nbinomial_Coeff(9,4) == 420\nbinomial_Coeff(10,4) == 720\nbinomial_Coeff(6,5) == 270\nbinomial_Coeff(5,5) == 270\nbinomial_Coeff(7,5) == 350\nbinomial_Coeff(9,5) == 750\nbinomial_Coeff(10,5) == 15120\nbinomial_Coeff(6,6) == 330\nbinomial_Coeff(5,6) == 330\nbinomial_Coeff(7,6) == 420\nbinomial_Coeff(9,6) == 860\nbinomial_Coeff(10,6) == 1944\nbinomial_Coeff(6,7) == 420\nbinomial_Coeff(5,7) == 420\nbinomial_Coeff(7,7) == 840\nbinomial_Coeff(9,7) == 2130\nbinomial_Coeff(10,7) == 42240\nbinomial_Coeff(6,8) == 600\nbinomial_Coeff(5,8) == 600\nbinomial_Coeff(7,8) == 1200\nbinomial_Coeff(9,8) == 3600\nbinomial_Coeff(10,8) == 86400\nbinomial_Coeff(6,9) == 750\nbinomial_Coeff(5,9) == 750\nbinomial_Coeff(7,9) == 2160\nbinomial_Coeff(9,9) == 43840\nbinomial_Coeff(10,9) == 117600\nbinomial_Coeff(6,10) == 600\nbinomial_Coeff(5,10) == 600\nbinomial_Coeff(7,10) == 2200\nbinomial_Coeff(9,10) == 4800\nbinomial_Coeff(10,10) == 10800\nbinomial_Coeff(6,11) == 750\nbinomial_Coeff(5,11) == 750\nbinomial_Coeff(7,11) == 3300\nbinomial_Coeff(9,11) == 6900\nbinomial_Coeff(10,11) == 14400\nbinomial_Coeff(6,12) == 600\nbinomial_Coeff(5,12) == 600\nbinomial_Coeff(7,12) == 2200\nbinomial_Coeff(9,12) == 4800\nbinomial_Coeff(10,12) == 9600\nbinomial_Coeff(6,13) == 600\nbinomial_Coeff(5,13) == 600\nbinomial_Coeff(7,13) == 2400\nbinomial_Coeff(9,13) == 5400\nbinomial_Coeff(10,13) == 10800\nbinomial_Coeff(6,14) == 600\nbinomial_Coeff(5,14) == 600\nbinomial_Coeff(7,14) == 2200\nbinomial_Coeff(9,14) == 4800\nbinomial_Coeff(10,14) == 9600\nbinomial_Coeff(6,15) == 600\nbinomial_Coeff(5,15) == 600\nbinomial_Coeff(7,15) == 2400\nbinomial_Coeff(9,15) == 5400\nbinomial_Coeff(10,15) == 10800\nbinomial_Coeff(6,16) == 600\nbinomial_Coeff(5,16) == 600\nbinomial_Coeff(7,16) == 2400\nbinomial_Coeff(9,16) == 5400\nbinomial_Coeff(10,16) == 9600\nbinomial_Coeff(6,17) == 600\nbinomial_Coeff(5,17) == 600\nbinomial_Coeff(7,17) == 2400\nbinomial_Coeff(9,17) == 5400\nbinomial_Coeff(10,17) == 10800\nbinomial_Coeff(6,18) == 600\nbinomial_Coeff(5,18) == 600\nbinomial_Coeff(7,18) == 2400\nbinomial_Coeff(9,18) == 5400\nbinomial_Coeff(10,18) == 9600\nbinomial_Coeff(6,19) == 600\nbinomial_Coeff(5,19) == 600\nbinomial_Coeff(7,19) == 2400\nbinomial_Coeff(9,19) == 5400\nbinomial_Coeff(10,19) == 10800\nbinomial_Coeff(6,20) == 600\nbinomial_Coeff(5,20) == 600\nbinomial_Coeff(7,20) == 2400\nbinomial_Coeff(9,20) == 5400\nbinomial_Coeff(10,20) == 9600\nbinomial_Coeff(6,21) == 600\nbinomial_Coeff(5,21) == 600\nbinomial_Coeff(7,21) == 2400\nbinomial_Coeff(9,21) == 5400\nbinomial_Coeff(10,21) == 10800\nbinomial_Coeff(6,22) == 600\nbinomial_Coeff(5,22) == 600\nbinomial_Coeff(7,22) == 2400\nbinomial_Coeff(9,22) == 5400\nbinomial_Coeff(10,22) == 9600\nbinomial_Coeff(6,23) == 600\nbinomial_Coeff(5,23) == 600\nbinomial_Coeff(7,23) == 2400\nbinomial_Coeff(9,23) == 5400\nbinomial_Coeff(10,23) == 10800\nbinomial_Coeff(6,24) == 600\nbinomial_Coeff(5,24) == 600\nbinomial_Coeff(7,24) == 2400\nbinomial_Coeff(9,24) == 5400\nbinomial_Coeff(10,24) == 9600\nbinomial_Coeff(6,25) == 600\nbinomial_Coeff(5,25) == 600\nbinomial_Coeff(7,25) == 2400\nbinomial_Coeff(9,25) == 5400\nbinomial_Coeff(10,25) == 10800\nbinomial_Coeff(6,26) == 600\nbinomial_Coeff(5,26) == 600\nbinomial_Coeff(7,26) == 2400\nbinomial_Coeff(9,26) == 5400\nbinomial_Coeff(10,26) == 9600\nbinomial_Coeff(6,27) == 600\nbinomial_Coeff(5,27) == 600\nbinomial_Coeff(7,27) == 2400\nbinomial_Coeff(9,27) == 5400\nbinomial_Coeff(10,27) == 10800\nbinomial_Coeff(6,28) == 600\nbinomial_Coeff(5,28) == 600\nbinomial_Coeff(7,28) == 2400\nbinomial_Coeff(9,28) == 5400\nbinomial_Coeff(10,28) == 9600\nbinomial_Coeff(6,29) == 600\nbinomial_Coeff(5,29) == 600\nbinomial_Coeff(7"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(10,5) == (288)\nassert     binomial_Coeff(6,5) == (1)\nassert     binomial_Coeff(8,5) == (1)\nassert     binomial_Coeff(1,5) == (1)\nassert     binomial_Coeff(9,5) == (1)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbinomial_Coeff(0,0) == 0, \"Wrong result for n=0 and k=0\"\nassert \nbinomial_Coeff(1,0) == 1, \"Wrong result for n=1 and k=0\"\nassert \nbinomial_Coeff(2,0) == 1, \"Wrong result for n=2 and k=0\"\nassert \nbinomial_Coeff(3,0) == 4, \"Wrong result for n=3 and k=0\"\nassert \nbinomial_Coeff(3,2) == 8, \"Wrong result for n=3 and k=2\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('1.1.1.1') == '1.1.1.1'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.1') == '0.0.0.1'\nassert     removezero_ip('255.0.0.1') == '255.0.0.1'\nassert     removezero_ip('0.255.255.255') == '0.255.255.255'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip('2.3.4') == '23.4'\nassert     removezero_ip('255.255.255.1') == '255.255.255.1'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('1.2.3.4.5') == '1.2.3.4.5'\nassert     removezero_ip('0.0.0.1') == '0.0.0.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip('1.1.1.1') == '1.1.1.1'\nassert     removezero_ip('11.1.1.1') == '11.1.1.1'\nassert     removezero_ip('0.1.1.1') == '0.1.1.1'\nassert     removezero_ip('0.1.1.1.1') == '0.1.1.1.1'\nassert     removezero_ip('111.1.1.1') == '111.1.1.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nip_address = \"192.168.1.0\"\nprint(removezero_ip(ip_address))\n\nip_address = \"192.168.0.000\"\nprint(removezero_ip(ip_address))\n\nip_address = \"192.168.001.0\"\nprint(removezero_ip(ip_address))\n\nip_address = \"192.168.001.000\"\nprint(removezero_ip(ip_address))\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip('11.11.11.11') == '11.11.11.11', 'incorrect'\nassert     removezero_ip('11.00.00.00') == '11.00.00.00', 'incorrect'\nassert     removezero_ip('0.00.00.00') == '0.00.00.00', 'incorrect'\nassert     removezero_ip('0000.0000.0000.0000') == '0000.0000.0000.0000', 'incorrect'\nassert     removezero_ip('0000.0000.0000.000000') == '0000.0000.0000.000000', 'incorrect'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port.\n    '''\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3'\nassert     removezero_ip('0.1.2.3.4') == '0.1.2.3.4'\nassert     removezero_ip('0.1.2.3.0.4') == '0.1.2.3.0.4'\nassert     removezero_ip('0.1.2.3.4.5') == '0.1.2.3.4.5'\nassert     removezero_ip('0.1.2.0.0.3') == '0.1.2.0.0.3'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip(\"0.1.2.3\") == \"0.1.2.3\"\nassert     removezero_ip(\"0.1.2.3.4\") == \"0.1.2.3.4\"\nassert     removezero_ip(\"0.1.2.3.4.5\") == \"0.1.2.3.4.5\"\nassert     removezero_ip(\"0.1.2.3.4.5.6\") == \"0.1.2.3.4.5.6\"\nassert     removezero_ip(\"0.1.2.3.4.5.6.7\") == \"0.1.2.3.4.5.6.7\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip(\"0.1.2.3\") == \"1.2.3\"\nassert     removezero_ip(\"1.2.3.0\") == \"1.2.3\"\nassert     removezero_ip(\"1.2.3.00\") == \"1.2.3\"\nassert     removezero_ip(\"1.2.3.000\") == \"1.2.3\"\nassert     removezero_ip(\"1.2.3.0000\") == \"1.2.3\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6]) == 1, 'incorrect'\nassert     diff_even_odd([3,4,5,6,7]) == 3, 'incorrect'\nassert     diff_even_odd([3,4,6,7]) == 1, 'incorrect'\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 0, 'incorrect'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) ==         1, \"odd\"\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     2, \"even\"\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     0, \"even\"\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==     5, \"odd\"\n\ndef diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 1:\n        return list1[0] - list1[1]\n    else:\n        return (list1[0] + list1[1]) - list1[2]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert diff_even_odd([1, 4, 5, 7, 8, 10, 12, 15]) == (8, 2)\nassert diff_even_odd([1, 4, 5, 7, 8, 10, 13, 15]) == (13, 3)\nassert diff_even_odd([1, 4, 5, 7, 8, 10]) == (0, 0)\nassert diff_even_odd([1, 4, 5, 7]) == (0, 2)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6,7]) == 1\nassert     diff_even_odd([10,20,30,40,50,60,70,80]) == 30\nassert     diff_even_odd([100,200,300,400,500,600,700,800]) == 50\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     diff_even_odd([1,4,3,6,2,5,7,8,9,0]) == 15\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 0\n\n'''\n1) Difference of first even and first odd number of a given list.\n\n2) Write a function which takes a list and return the difference of the first even and the first odd number. \n   If no even number exists return 0.\n'''\n\n'''\ndef diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_duplicates(list1):\n    '''\n    Write a function to find duplicate elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Swaps('10','1010') == 1\nassert     min_Swaps('01','1010') == 3\nassert     min_Swaps('00','1010') == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Swaps('10','1010') == 2\nassert     min_Swaps('10','1010') == 2\nassert     min_Swaps('10','101') == 3\nassert     min_Swaps('10','101') == 3\nassert     min_Swaps('10','100') == 2\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    note : str1 and str2 are supposed to be strings of binary numbers.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Swaps('1001','0101') == 1\nassert     min_Swaps('1111','1111') == 0\nassert     min_Swaps('0101','1011') == 2\nassert     min_Swaps('1111','0101') == 3\nassert     min_Swaps('1011','1111') == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps('10111', '10101') == 2, 'Wrong answer'\nassert     min_Swaps('10011', '10001') == 1, 'Wrong answer'\nassert     min_Swaps('000100', '10101') == 0, 'Wrong answer'\nassert     min_Swaps('00001', '00001') == 0, 'Wrong answer'\nassert     min_Swaps('0', '0') == 0, 'Wrong answer'\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n\n\n\ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_size((1,2,3)) == 6, \"Wrong result\"\nassert tuple_size((100,200,300)) == 24, \"Wrong result\"\nassert tuple_size((100,100,100)) == 12, \"Wrong result\"\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100)) == 80, \"Wrong result\"\nassert tuple_size((100,100,100,100)) == 36, \"Wrong result\"\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_size((1,2,3,4,5,6)) == 20\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10)) == 28\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == 36\n\n\ndef calc_freq(string):\n    '''\n    Write a function to calculate the frequency of the characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_tuple_len(tuple_list):\n    '''\n    Write a function to find the length of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(tuple_size((1,2,3,4,5,6,7)))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size((0,)) == 1\nassert     tuple_size((1,)) == 1\nassert     tuple_size((1,2)) == 3\nassert     tuple_size((1,2,3)) == 6\nassert     tuple_size((1,2,3,4)) == 9\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nWrite a function that takes a tuple as an argument, then returns the sum of the elements of the tuple.\n'''\ndef sum_tuple(tuple_list):\n    pass\n\nassert \n\n'''\nWrite a function that takes a string and returns the count of the lowercase letters of the string.\n'''\ndef count_letters(string):\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef tuple_length(tuple_list):\n    '''\n    Write a function to find the length of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_size(()) == 0, \"tuple size of () is wrong\"\nassert tuple_size((1,)) == 1, \"tuple size of (1,) is wrong\"\nassert tuple_size((1,2,3)) == 3, \"tuple size of (1,2,3) is wrong\"\nassert tuple_size((1,2,3,4,5,6,7,8,9,10)) == 10*8, \"tuple size of (1,2,3,4,5,6,7,8,9,10) is wrong\"\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15], 7) == 7\nassert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15], 8) == 8\nassert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15], 10) == 10\nassert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15], 12) == 12\nassert     find_kth([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15], 17) == 17\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_kth([1, 2, 4], [2, 5], 2) == 4\nassert     find_kth([2, 5, 7], [1, 2, 3, 5, 8], 3) == 5\nassert     find_kth([1, 3, 5], [4, 6, 8, 10], 2) == 1\nassert     find_kth([2, 3, 5, 8], [1, 2, 4, 5, 6], 3) == 3\n\n'''\nTime Complexity : O(log(m+n))\nSpace Complexity: O(1)\n'''\ndef find_kth_no_extra_space(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n    if m > n:\n        return find_kth(arr2, arr1, k)\n    if n == 0:\n        return -1\n    # Note: arr1[-1] >= arr2[0] since all elements in arr1 are smaller than arr2[0].\n    l, r = 0, m\n    while l < r:\n        # l + (r - l) // 2 is the index of the middle element in arr1\n        # since all elements in arr1 are smaller than arr2[0],\n        # l + (r - l) // 2 < n,\n        # so the middle element arr1[l] is in arr2,\n        # and we can shrink the range from l to i\n        i = l + (r - l) // 2\n        # check if i-th element in arr2 is smaller than the middle element in arr1\n        if arr2[(i-1)%n] < arr1[i]:\n            # since arr2[i-1] < arr1[i], so we can't find arr1[i] in arr2\n            # so the range should be (i, r]\n            r = i\n        else:\n            # since arr2[i] <= arr1[i], so we can find arr1[i] in arr2\n            # since i-th element in arr2 is in range from l to i,\n            # so we can return arr2[i]\n            return arr2[(i-1)%n]\n    # since all elements in arr1 are smaller than arr2[0],\n    # and we can return arr1[l]\n    return arr1[l]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nfind_kth([1, 2, 3, 4, 5], [2, 5, 6, 7, 8], 3)\nfind_kth([1, 2, 3, 4, 5, 6], [2, 5, 6, 7, 8, 9], 6)\n\ndef find_kth_fast(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # A naive implementation would be to use two pointer approach\n    # since the number of elements in sorted array is smaller than k\n    # and kth element would be somewhere between the two pointer\n    # i.e.\n    # len(arr1) + len(arr2) - k\n    # elements in arr1 and arr2 will be 1 to len(arr1)\n    # arr2 can also be sorted so its size is >= k\n    # both arr1 and arr2 are sorted array\n    # if we take 1 to k, if there is a difference of len(arr1) + len(arr2) - k\n    # we can say that 1st element in arr1 is kth element\n    # if we take k + 1 to k + len(arr1),\n    # if we take k + len(arr1) to k + len(arr1) + len(arr2) - k\n    # the difference would be\n    # k + len(arr1) - (k + len(arr1) + len(arr2) - k)\n    # and we can say that kth element is the 1st element in arr1\n    # we can also say that kth element is kth element in arr2\n    # so we can say that if we take 1 to k,\n    # we can say that kth element is the kth element in arr1\n    # and if we take k + 1 to k + len(arr1),\n    # we can say that kth element is the kth element in arr2\n    # so we can say that kth element is kth element in arr2\n    # so we can say that the difference of kth element\n    # would be len(arr1) + len(arr2) - k\n    \n    # if the difference is zero, we can say that the kth element is\n    # kth element in arr1\n    # if the difference is positive,\n    # we can say that the kth element is kth element in arr2\n    # if the difference is negative,\n    # we can say that the kth element is kth element in arr1\n    # and if the difference is 0,\n    # we can say that the kth element is kth element in arr2\n    # so we can say that the kth element would be\n    # kth element in arr1\n    \n    # Since the size of arr1 and arr2 are both less than k,\n    # there is no difference of len(arr1) + len(arr2) - k\n    \n    # if k is small than arr1 and arr2,\n    # the kth element would be\n    # kth element in arr2\n    # as arr1 is sorted and k is small than len(arr1)\n    # we can say that the kth element is kth element in arr2\n    # since there is no difference of len(arr1) + len(arr2) - k\n    \n    # if k is big than arr1 and arr2,\n    # the kth element would be\n    # kth element in arr1\n    # as arr2 is sorted and k is large than len(arr1)\n    # we can say that the kth element is kth element in arr2\n    # since there is no difference of len(arr1) + len(arr2) - k\n    \n    # if k is big than arr1 and arr2,\n    # the kth element would be\n    # kth element in arr1\n    # as arr1 is sorted and k is large than len(arr1)\n    # we can say that the kth element is kth element in arr1\n    # since there is no difference of len(arr1) + len(arr2) - k\n    \n    # if k is big than arr1 and arr2,\n    # the kth element would be\n    # kth element in arr2\n    # as arr2 is sorted and k is large than len(arr1)\n    # we can say that the kth element is kth element in arr2\n    # since there is no difference of len(arr1) + len(arr2) - k\n    \n    # we can also say that if k > len(arr1) and k > len(arr2),\n    # the kth element would be\n    # kth element in arr1\n    # because arr1 is sorted and k is bigger than len(arr1)\n    # and k is bigger than len(arr1) + len(arr2)\n    \n    # we can also say that if k > len(arr1) and k > len(arr2),\n    # the kth element would be\n    # kth element in arr2\n    # because arr2 is sorted and k is bigger than len(arr1)\n    # and k is bigger than len(arr1) + len(arr2)\n    \n    # so we can say that if k > len(arr1) and k > len(arr2),\n    # the kth element would be\n    # kth element in arr1\n    # because arr1 is sorted and k is bigger than len(arr1)\n    \n    # if k is 0, we can say that the kth element would be\n    # kth element in arr1\n    # since k is 0\n    \n    # If k is 1, we can say that the kth element would be\n    # kth element in arr1\n    # since k is 1\n    \n    # If k is len(arr1), we can say that the kth element would be\n    # kth element in arr2\n    # since k is len(arr1)\n    \n    # If k is len(arr1) + len(arr2), we can say that the kth element would be\n    # kth element in arr1\n    # since k is len(arr1)\n    \n    # If k is 2 * len(arr1) + len(arr2),\n    # we can say that the kth element would be\n    # kth element in arr2\n    # since k is 2 * len(arr1)\n    \n    # If k is 2 * len(arr1) + len(arr2) + 1,\n    # we can say that the kth element would be\n    # kth element in arr2\n    # since k is 2 * len(arr1)\n    \n    # If k is 2 * len(arr1) + len(arr2) + 2,\n    # we can say that the kth element would be\n    # kth element in arr1\n    # since k is 2 * len(arr1)\n    \n    # If k is 2 * len(arr1) + len(arr2) + 3,\n    # we can say that the kth element would be\n    # kth element in arr2\n    # since k is 2 * len(arr1)\n    \n    # if k is 2 * len(arr1) + len(arr2) + 4,\n    # we can say that the kth element would be\n    # kth element in arr1\n    # since k is 2 * len(arr1)\n    \n    # if k is 2 * len(arr1) + len(arr2) + 5,\n    # we can say that the kth element would be\n    # kth element in arr2\n    # since k is 2 * len(arr1)\n    \n    # if k is 2 * len(arr1) + len(arr2) + 6,\n    # we can say that the kth element would be\n    # kth element in arr1\n    # since k is 2 * len(arr1)\n    \n    # if k is 2 * len(arr1) + len(arr2) + 7,\n    # we can say that the kth element would be\n    # kth element in arr2\n    # since k is 2 * len(arr1)\n    \n    # if k is 2 * len(arr1) + len(arr2) + 8,\n    # we can say that the kth element would be\n    # kth element in arr1\n    # since k is 2 * len(arr1)\n    \n    # if k is 2 * len(arr1) + len(arr2) + 9,\n    # we can say that the "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_kth([], [], 0) == None\nassert     find_kth([1], [], 0) == None\nassert     find_kth([1], [1], 0) == 1\nassert     find_kth([2], [1], 0) == 1\nassert     find_kth([1,2], [1,2], 0) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_kth([1,2,3,4], [2,3,4,5], 2) == 2, 'Wrong'\nassert     find_kth([3,4,5,6], [1,2,3,4], 3) == 4, 'Wrong'\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_kth([1,3,5], [2,4,7], 1) == 2\nassert     find_kth([1,3,5], [2,4,7], 3) == 5\nassert     find_kth([1,3,5], [2,4,7], 5) == 5\nassert     find_kth([1,3,5], [2,4,7], 6) == 4\nassert     find_kth([1,3,5], [2,4,7], 8) == 4\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert find_kth([5, 1, 2, 3, 4, 6, 8], [1, 5, 8, 2, 3, 4, 6], 3) == 6\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_kth_from_sorted_arr(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(9474) == True\nassert     armstrong_number(26) == True\nassert     armstrong_number(1191) == False"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(153) == False, 'the armstrong_number is not as expected'\nassert     armstrong_number(1634) == False, 'the armstrong_number is not as expected'\nassert     armstrong_number(6174) == True, 'the armstrong_number is as expected'\n\nprint('test case passed')"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (armstrong_number(753) == True), \"FAIL: (753) Should be True\"\nassert (armstrong_number(5) == False), \"FAIL: (5) Should be False\"\nassert (armstrong_number(1334) == False), \"FAIL: (1334) Should be False\"\nassert (armstrong_number(11) == True), \"FAIL: (11) Should be True\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(11) == True\nassert     armstrong_number(0) == False\nassert     armstrong_number(1) == False\nassert     armstrong_number(-2) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153) == True, 'Not armstrong'\nassert     armstrong_number(371) == False, 'Not armstrong'\nassert     armstrong_number(371) == False, 'Not armstrong'\nassert     armstrong_number(689) == True, 'Not armstrong'\nassert     armstrong_number(9) == False, 'Not armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef palindrome_number(number):\n    '''\n    Write a function to check whether a given number is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef even_odd_number(number):\n    '''\n    Write a function to check whether the given number is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_armstrong_number(number):\n    '''\n    Given a number, check whether it is an Armstrong number or not.\n    '''\n    # find the number of digits in the given number\n    \n    # get the number of digits in the given number\n    \n    # convert the number to a list\n    \n    # subtract the sum of digits from the number\n    # if the difference between the sum of digits and the number is zero then it is an armstrong number\n    \n    # return true or false\n    \n    # return true\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_average(1) == (1, 1)\nassert     sum_average(2) == (3, 2)\nassert     sum_average(3) == (6, 3)\nassert     sum_average(4) == (10, 5)\nassert     sum_average(5) == (15, 6)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_average(0) == 0, 'Wrong result: sum_average(0)'\nassert sum_average(1) == 1, 'Wrong result: sum_average(1)'\nassert sum_average(2) == 1, 'Wrong result: sum_average(2)'\nassert sum_average(3) == 3, 'Wrong result: sum_average(3)'\nassert sum_average(4) == 3, 'Wrong result: sum_average(4)'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(10) == 55, 'incorrect function for sum_average'\nassert     sum_average(0) == 0, 'incorrect function for sum_average'\nassert     sum_average(15) == 55.5, 'incorrect function for sum_average'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_average(0) == 0, \"sum_average(0) is incorrect.\"\nassert     sum_average(1) == 1, \"sum_average(1) is incorrect.\"\nassert     sum_average(10) == 55, \"sum_average(10) is incorrect.\"\nassert     sum_average(20) == 87, \"sum_average(20) is incorrect.\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(1) == 1\nassert     sum_average(2) == 1.5\nassert     sum_average(3) == 2\nassert     sum_average(4) == 2.75\nassert     sum_average(5) == 3\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    sum_average(1) == 1\n    sum_average(2) == 1.5\n    sum_average(3) == 2\n    sum_average(4) == 2.5\n    sum_average(5) == 3\n    sum_average(6) == 3.5\n    sum_average(7) == 4\n    sum_average(8) == 4.5\n    sum_average(9) == 5\n    sum_average(10) == 5.5\n    sum_average(11) == 6\n    sum_average(12) == 6.5\n    sum_average(13) == 7\n    sum_average(14) == 7.5\n    sum_average(15) == 8\n    sum_average(16) == 8.5\n    sum_average(17) == 9\n    sum_average(18) == 9.5\n    sum_average(19) == 10\n    sum_average(20) == 10.5\n    sum_average(21) == 11\n    sum_average(22) == 11.5\n    sum_average(23) == 12\n    sum_average(24) == 12.5\n    sum_average(25) == 13\n    sum_average(26) == 13.5\n    sum_average(27) == 14\n    sum_average(28) == 14.5\n    sum_average(29) == 15\n    sum_average(30) == 15.5\n    sum_average(31) == 16\n    sum_average(32) == 16.5\n    sum_average(33) == 17\n    sum_average(34) == 17.5\n    sum_average(35) == 18\n    sum_average(36) == 18.5\n    sum_average(37) == 19\n    sum_average(38) == 19.5\n    sum_average(39) == 20\n    sum_average(40) == 20.5\n    sum_average(41) == 21\n    sum_average(42) == 21.5\n    sum_average(43) == 22\n    sum_average(44) == 22.5\n    sum_average(45) == 23\n    sum_average(46) == 23.5\n    sum_average(47) == 24\n    sum_average(48) == 24.5\n    sum_average(49) == 25\n    sum_average(50) == 25.5\n    sum_average(51) == 26\n    sum_average(52) == 26.5\n    sum_average(53) == 27\n    sum_average(54) == 27.5\n    sum_average(55) == 28\n    sum_average(56) == 28.5\n    sum_average(57) == 29\n    sum_average(58) == 29.5\n    sum_average(59) == 30\n    sum_average(60) == 30.5\n    sum_average(61) == 31\n    sum_average(62) == 31.5\n    sum_average(63) == 32\n    sum_average(64) == 32.5\n    sum_average(65) == 33\n    sum_average(66) == 33.5\n    sum_average(67) == 34\n    sum_average(68) == 34.5\n    sum_average(69) == 35\n    sum_average(70) == 35.5\n    sum_average(71) == 36\n    sum_average(72) == 36.5\n    sum_average(73) == 37\n    sum_average(74) == 37.5\n    sum_average(75) == 38\n    sum_average(76) == 38.5\n    sum_average(77) == 39\n    sum_average(78) == 39.5\n    sum_average(79) == 40\n    sum_average(80) == 40.5\n    sum_average(81) == 41\n    sum_average(82) == 41.5\n    sum_average(83) == 42\n    sum_average(84) == 42.5\n    sum_average(85) == 43\n    sum_average(86) == 43.5\n    sum_average(87) == 44\n    sum_average(88) == 44.5\n    sum_average(89) == 45\n    sum_average(90) == 45.5\n    sum_average(91) == 46\n    sum_average(92) == 46.5\n    sum_average(93) == 47\n    sum_average(94) == 47.5\n    sum_average(95) == 48\n    sum_average(96) == 48.5\n    sum_average(97) == 49\n    sum_average(98) == 49.5\n    sum_average(99) == 50\n    sum_average(100) == 50.5\n    sum_average(101) == 51\n    sum_average(102) == 51.5\n    sum_average(103) == 52\n    sum_average(104) == 52.5\n    sum_average(105) == 53\n    sum_average(106) == 53.5\n    sum_average(107) == 54\n    sum_average(108) == 54.5\n    sum_average(109) == 55\n    sum_average(110) == 55.5\n    sum_average(111) == 56\n    sum_average(112) == 56.5\n    sum_average(113) == 57\n    sum_average(114) == 57.5\n    sum_average(115) == 58\n    sum_average(116) == 58.5\n    sum_average(117) == 59\n    sum_average(118) == 59.5\n    sum_average(119) == 60\n    sum_average(120) == 60.5\n    sum_average(121) == 61\n    sum_average(122) == 61.5\n    sum_average(123) == 62\n    sum_average(124) == 62.5\n    sum_average(125) == 63\n    sum_average(126) == 63.5\n    sum_average(127) == 64\n    sum_average(128) == 64.5\n    sum_average(129) == 65\n    sum_average(130) == 65.5\n    sum_average(131) == 66\n    sum_average(132) == 66.5\n    sum_average(133) == 67\n    sum_average(134) == 67.5\n    sum_average(135) == 68\n    sum_average(136) == 68.5\n    sum_average(137) == 69\n    sum_average(138) == 69.5\n    sum_average(139) == 70\n    sum_average(140) == 70.5\n    sum_average(141) == 71\n    sum_average(142) == 71.5\n    sum_average(143) == 72\n    sum_average(144) == 72.5\n    sum_average(145) == 73\n    sum_average(146) == 73.5\n    sum_average(147) == 74\n    sum_average(148) == 74.5\n    sum_average(149) == 75\n    sum_average(150) == 75.5\n    sum_average(151) == 76\n    sum_average(152) == 76.5\n    sum_average(153) == 77\n    sum_average(154) == 77.5\n    sum_average(155) == 78\n    sum_average(156) == 78.5\n    sum_average(157) == 79\n    sum_average(158) == 79.5\n    sum_average(159) == 80\n    sum_average(160) == 80.5\n    sum_average(161) == 81\n    sum_average(162) == 81.5\n    sum_average(163) == 82\n    sum_average(164) == 82.5\n    sum_average(165) == 83\n    sum_average(166) == 83.5\n    sum_average(167) == 84\n    sum_average(168) == 84.5\n    sum_average(169) == 85\n    sum_average(170) == 85.5\n    sum_average(171) == 86\n    sum_average(172) == 86.5\n    sum_average(173) == 87\n    sum_average(174) == 87.5\n    sum_average(175) == 88\n    sum_average(176) == 88.5\n    sum_average(177) == 89\n    sum_average(178) == 89.5\n    sum_average(179) == 90\n    sum_average(180) == 90.5\n    sum_average(181) == 91\n    sum_average(182) == 91"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sum_average(0) == 0, \"The number of elements should be 0\"\n    sum_average(1) == 1, \"The sum of first number should be 1\"\n    sum_average(2) == 3, \"The sum of second number should be 3\"\n    sum_average(3) == 6, \"The sum of third number should be 6\"\n    sum_average(4) == 10, \"The sum of fourth number should be 10\"\nassert not \n    sum_average(-1) == -1, \"The number of elements should be 0\"\n    sum_average(-2) == -1, \"The sum of second number should be -1\"\n    sum_average(-3) == -1, \"The sum of third number should be -1\"\n    sum_average(-4) == -1, \"The sum of fourth number should be -1\"\nassert not \n    sum_average(10) == 10, \"The number of elements should be 0\"\n    sum_average(20) == 20, \"The sum of second number should be 20\"\n    sum_average(30) == 30, \"The sum of third number should be 30\"\n    sum_average(40) == 40, \"The sum of fourth number should be 40\""
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_average(2) == 1.5, \"Error\"\nassert     sum_average(3) == 1.5, \"Error\"\nassert     sum_average(5) == 2.0, \"Error\"\nassert     sum_average(10) == 3.0, \"Error\"\nassert     sum_average(20) == 3.0, \"Error\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_average(2) == 1.5\nassert     sum_average(1) == 1\nassert     sum_average(10) == 45.5\nassert     sum_average(0) == 0\nassert     sum_average(123456) == 443471.5\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Even(4) == False\nassert is_Even(5) == True\nassert is_Even(6) == True\nassert is_Even(9) == True\nassert is_Even(1) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(2) == True, \"2 should be Even\"\nassert     is_Even(0) == False, \"0 should not be Even\"\nassert     is_Even(4) == False, \"4 should not be Even\"\nassert     is_Even(6) == True, \"6 should be Even\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_Even(1) == False\n    is_Even(2) == True\n    is_Even(3) == False\n    is_Even(4) == True\n    is_Even(5) == False\n    is_Even(6) == True\n    is_Even(7) == False\n    is_Even(8) == False\n    is_Even(9) == False\n    is_Even(10) == False\n    is_Even(20) == False\n    is_Even(21) == False\n    is_Even(22) == False\n    is_Even(23) == True\n    is_Even(24) == False\n    is_Even(25) == False\n    is_Even(26) == True\n    is_Even(27) == False\n    is_Even(28) == True\n    is_Even(29) == False\n    is_Even(30) == False\n    is_Even(31) == True\n    is_Even(32) == True\n    is_Even(33) == True\n    is_Even(34) == True\n    is_Even(35) == False\n    is_Even(36) == False\n    is_Even(37) == False\n    is_Even(38) == False\n    is_Even(39) == True\n    is_Even(40) == False\n    is_Even(41) == False\n    is_Even(42) == False\n    is_Even(43) == True\n    is_Even(44) == False\n    is_Even(45) == False\n    is_Even(46) == True\n    is_Even(47) == False\n    is_Even(48) == False\n    is_Even(49) == False\n    is_Even(50) == True\n    is_Even(51) == True\n    is_Even(52) == False\n    is_Even(53) == True\n    is_Even(54) == False\n    is_Even(55) == False\n    is_Even(56) == True\n    is_Even(57) == True\n    is_Even(58) == False\n    is_Even(59) == True\n    is_Even(60) == False\n    is_Even(61) == True\n    is_Even(62) == True\n    is_Even(63) == False\n    is_Even(64) == False\n    is_Even(65) == True\n    is_Even(66) == False\n    is_Even(67) == True\n    is_Even(68) == True\n    is_Even(69) == True\n    is_Even(70) == True\n    is_Even(71) == False\n    is_Even(72) == False\n    is_Even(73) == True\n    is_Even(74) == True\n    is_Even(75) == False\n    is_Even(76) == True\n    is_Even(77) == False\n    is_Even(78) == False\n    is_Even(79) == False\n    is_Even(80) == False\n    is_Even(81) == True\n    is_Even(82) == False\n    is_Even(83) == False\n    is_Even(84) == True\n    is_Even(85) == False\n    is_Even(86) == True\n    is_Even(87) == False\n    is_Even(88) == False\n    is_Even(89) == True\n    is_Even(90) == True\n    is_Even(91) == False\n    is_Even(92) == False\n    is_Even(93) == True\n    is_Even(94) == False\n    is_Even(95) == False\n    is_Even(96) == True\n    is_Even(97) == False\n    is_Even(98) == True\n    is_Even(99) == False\n    is_Even(100) == True\n    is_Even(101) == False\n    is_Even(102) == False\n    is_Even(103) == True\n    is_Even(104) == False\n    is_Even(105) == False\n    is_Even(106) == True\n    is_Even(107) == True\n    is_Even(108) == False\n    is_Even(109) == True\n    is_Even(110) == False\n    is_Even(111) == True\n    is_Even(112) == True\n    is_Even(113) == False\n    is_Even(114) == False\n    is_Even(115) == False\n    is_Even(116) == False\n    is_Even(117) == True\n    is_Even(118) == False\n    is_Even(119) == True\n    is_Even(120) == True\n    is_Even(121) == False\n    is_Even(122) == False\n    is_Even(123) == True\n    is_Even(124) == False\n    is_Even(125) == False\n    is_Even(126) == False\n    is_Even(127) == True\n    is_Even(128) == False\n    is_Even(129) == False\n    is_Even(130) == False\n    is_Even(131) == True\n    is_Even(132) == False\n    is_Even(133) == True\n    is_Even(134) == False\n    is_Even(135) == True\n    is_Even(136) == True\n    is_Even(137) == False\n    is_Even(138) == True\n    is_Even(139) == True\n    is_Even(140) == True\n    is_Even(141) == False\n    is_Even(142) == True\n    is_Even(143) == False\n    is_Even(144) == True\n    is_Even(145) == True\n    is_Even(146) == False\n    is_Even(147) == False\n    is_Even(148) == True\n    is_Even(149) == False\n    is_Even(150) == True\n    is_Even(151) == False\n    is_Even(152) == True\n    is_Even(153) == True\n    is_Even(154) == True\n    is_Even(155) == True\n    is_Even(156) == True\n    is_Even(157) == True\n    is_Even(158) == True\n    is_Even(159) == True\n    is_Even(160) == True\n    is_Even(161) == False\n    is_Even(162) == True\n    is_Even(163) == False\n    is_Even(164) == True\n    is_Even(165) == True\n    is_Even(166) == False\n    is_Even(167) == True\n    is_Even(168) == False\n    is_Even(169) == False\n    is_Even(170) == True\n    is_Even(171) == True\n    is_Even(172) == True\n    is_Even(173) == True\n    is_Even(174) == True\n    is_Even(175) == True\n    is_Even(176) == False\n    is_Even(177) == True\n    is_Even(178) == True\n    is_Even(179) == True\n    is_Even(180) == True\n    is_Even(181) == True\n    is_Even(182) == True\n    is_Even(183) == True\n    is_Even(184) == True\n    is_Even(185) == True\n    is_Even(186) == True\n    is_Even(187) == True\n    is_Even(188) == True\n    is_Even(189) == True\n    is_Even(190) == True\n    is_Even(191) == True\n    is_Even(192) == True\n    is_Even(193) == True\n    is_Even(194) == True\n    is_Even(195) == True\n    is_Even(196) == True\n    is_Even(197) == True\n    is_Even(198) == True\n    is_Even(199) == True\n    is_Even(200) == True\n    is_Even(201) == True\n    is_Even(202) == True\n    is_Even(203) == True\n    is_Even(204) == True\n    is_Even(205) == True\n    is_Even(206) == True\n    is_Even(207) == True\n    is_Even(208) == True\n    is_Even(209"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Even(0) == False, \"is_Even(0) is wrong\"\nassert     is_Even(1) == True, \"is_Even(1) is wrong\"\nassert     is_Even(2) == True, \"is_Even(2) is wrong\"\nassert     is_Even(3) == False, \"is_Even(3) is wrong\"\nassert     is_Even(4) == False, \"is_Even(4) is wrong\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_Even(2) == True\nis_Even(9) == False\nis_Even(8) == True\nprint(\"is_Even() function is working correctly.\")"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(5) == False\nassert     is_Even(16) == True\nassert     is_Even(-10) == False\nassert     is_Even(0) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Even(10) == False\nassert     is_Even(11) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(3)==True, \"Failed\"\nassert     is_Even(4)==False, \"Failed\"\nassert     is_Even(5)==True, \"Failed\"\nassert     is_Even(100)==True, \"Failed\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char('sunday') =='s', '1st testcase fail'\nassert     first_repeated_char('sunday') == 'u', '2nd testcase fail'\nassert     first_repeated_char('sunday') == 'd', '3rd testcase fail'\nassert     first_repeated_char('sunday') == 'a', '4th testcase fail'\nassert     first_repeated_char('sunday') =='s', '5th testcase fail'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_repeated_char(\"\") == -1\nassert     first_repeated_char(\"A\") == 0\nassert     first_repeated_char(\"abcda\") == -1\nassert     first_repeated_char(\"abcdaB\") == 0\nassert     first_repeated_char(\"hello\") == -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char(\"abcdabcd\") == \"b\", \"should return 'b' but returned '{}'\".format(first_repeated_char(\"abcdabcd\"))\nassert     first_repeated_char(\"xyzabcabc\") == \"\", \"should return '' but returned '{}'\".format(first_repeated_char(\"xyzabcabc\"))\nassert     first_repeated_char(\"aaabbbcccccccc\") == \"b\", \"should return 'b' but returned '{}'\".format(first_repeated_char(\"aaabbbcccccccc\"))\nassert     first_repeated_char(\"\") == \"\", \"should return '' but returned '{}'\".format(first_repeated_char(\"\"))\nassert     first_repeated_char(\"aaaa\") == \"\", \"should return '' but returned '{}'\".format(first_repeated_char(\"aaaa\"))\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_repeated_char('python') == 'o'\nassert     first_repeated_char('python') == 'h'\nassert     first_repeated_char('abcd') == 'b'\nassert     first_repeated_char('ah') == 'h'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char(\"ab\") == -1, \"Expected -1\"\nassert first_repeated_char(\"aaaa\") == -1, \"Expected -1\"\nassert first_repeated_char(\"ababab\") == -1, \"Expected -1\"\nassert first_repeated_char(\"abaaab\") == -1, \"Expected -1\"\nassert first_repeated_char(\"ab\") == -1, \"Expected -1\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_repeated_char('aba') == 'a'\nassert     first_repeated_char('aaaa') == 'a'\nassert     first_repeated_char('abc') == 'a'\nassert     first_repeated_char('abd') == 'a'\nassert     first_repeated_char('aac') == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_repeated_char(\"ababab\") == \"b\", \"First repeated char should be 'b'\"\nassert     first_repeated_char(\"ababab\") == \"a\", \"First repeated char should be 'a'\"\nassert     first_repeated_char(\"aabaa\") == \"a\", \"First repeated char should be 'a'\"\nassert     first_repeated_char(\"abcdab\") == \"b\", \"First repeated char should be 'b'\"\nassert     first_repeated_char(\"abcdaba\") == \"a\", \"First repeated char should be 'a'\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char('abdee') == 'b', \"Wrong result for first_repeated_char('abdee')\"\nassert     first_repeated_char('heeru') == 'e', \"Wrong result for first_repeated_char('heeru')\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('abcdefg') == 'e', 'Incorrect answer'\nassert     first_repeated_char('aabcccc') == 'a', 'Incorrect answer'\nassert     first_repeated_char('abcccc') == 'c', 'Incorrect answer'\nassert     first_repeated_char('abcdefgh') == 'a', 'Incorrect answer'\nassert     first_repeated_char('abcdeeff') == 'c', 'Incorrect answer'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('abab') == 'a'\nassert     first_repeated_char('ababab') == 'a'\nassert     first_repeated_char('abababab') == 'b'\nassert     first_repeated_char('abababababa') == 'b'\nassert     first_repeated_char('aaaaaa') == 'a'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(9) ==  [2,3,4,5,7,8,9]\nassert get_ludic(14) == [4,5,7,9,12]\nassert get_ludic(15) == []\nassert get_ludic(200) == []\nassert get_ludic(3) == [1,2]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nQuestion: The Fibonacci numbers are the numbers in the following integer sequence.\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026\nBy considering the terms in the Fibonacci sequence whose values do not exceed \nfour million, find the sum of the even-valued terms.\n'''\ndef get_fibonacci(n):\n    '''\n    Write a function to return the fibonacci series till n terms.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_ludic_1(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n\n\ndef get_ludic_2(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n\n\ndef get_ludic_3(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n\n\ndef get_ludic_4(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(4) == [1, 2, 3]\nassert     get_ludic(6) == [1, 2, 3, 4, 5]\nassert     get_ludic(7) == []\nassert     get_ludic(8) == [1, 2, 3, 4, 5, 6, 7]\nassert     get_ludic(9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert get_ludic(3) == [1, 2, 4, 6]\nassert get_ludic(4) == [1, 2, 4]\nassert get_ludic(5) == [1, 2, 4, 5]\nassert get_ludic(6) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_ludic(3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     get_ludic(9) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    get_ludic(1) == None\n    get_ludic(2) == None\n    get_ludic(3) == None\n    get_ludic(4) == None\n    get_ludic(5) == None\n    get_ludic(7) == None\n    get_ludic(9) == None\n    get_ludic(10) == None\n    get_ludic(11) == None\n    get_ludic(12) == None\n    get_ludic(13) == None\n    get_ludic(15) == None\n    get_ludic(17) == None\n    get_ludic(19) == None\n    get_ludic(20) == None\n    get_ludic(21) == None\n    get_ludic(22) == None\n    get_ludic(23) == None\n    get_ludic(24) == None\n    get_ludic(25) == None\n    get_ludic(27) == None\n    get_ludic(28) == None\n    get_ludic(29) == None\n    get_ludic(30) == None\n    get_ludic(31) == None\n    get_ludic(32) == None\n    get_ludic(33) == None\n    get_ludic(34) == None\n    get_ludic(35) == None\n    get_ludic(36) == None\n    get_ludic(37) == None\n    get_ludic(38) == None\n    get_ludic(39) == None\n    get_ludic(40) == None\n    get_ludic(41) == None\n    get_ludic(42) == None\n    get_ludic(43) == None\n    get_ludic(44) == None\n    get_ludic(45) == None\n    get_ludic(46) == None\n    get_ludic(47) == None\n    get_ludic(48) == None\n    get_ludic(49) == None\n    get_ludic(50) == None\n    get_ludic(51) == None\n    get_ludic(52) == None\n    get_ludic(53) == None\n    get_ludic(54) == None\n    get_ludic(55) == None\n    get_ludic(56) == None\n    get_ludic(57) == None\n    get_ludic(58) == None\n    get_ludic(59) == None\n    get_ludic(60) == None\n    get_ludic(61) == None\n    get_ludic(62) == None\n    get_ludic(63) == None\n    get_ludic(64) == None\n    get_ludic(65) == None\n    get_ludic(66) == None\n    get_ludic(67) == None\n    get_ludic(68) == None\n    get_ludic(69) == None\n    get_ludic(70) == None\n    get_ludic(71) == None\n    get_ludic(72) == None\n    get_ludic(73) == None\n    get_ludic(74) == None\n    get_ludic(75) == None\n    get_ludic(76) == None\n    get_ludic(77) == None\n    get_ludic(78) == None\n    get_ludic(79) == None\n    get_ludic(80) == None\n    get_ludic(81) == None\n    get_ludic(82) == None\n    get_ludic(83) == None\n    get_ludic(84) == None\n    get_ludic(85) == None\n    get_ludic(86) == None\n    get_ludic(87) == None\n    get_ludic(88) == None\n    get_ludic(89) == None\n    get_ludic(90) == None\n    get_ludic(91) == None\n    get_ludic(92) == None\n    get_ludic(93) == None\n    get_ludic(94) == None\n    get_ludic(95) == None\n    get_ludic(96) == None\n    get_ludic(97) == None\n    get_ludic(98) == None\n    get_ludic(99) == None\n    get_ludic(100) == None\n    get_ludic(101) == None\n    get_ludic(102) == None\n    get_ludic(103) == None\n    get_ludic(104) == None\n    get_ludic(105) == None\n    get_ludic(106) == None\n    get_ludic(107) == None\n    get_ludic(108) == None\n    get_ludic(109) == None\n    get_ludic(110) == None\n    get_ludic(111) == None\n    get_ludic(112) == None\n    get_ludic(113) == None\n    get_ludic(114) == None\n    get_ludic(115) == None\n    get_ludic(116) == None\n    get_ludic(117) == None\n    get_ludic(118) == None\n    get_ludic(119) == None\n    get_ludic(120) == None\n    get_ludic(121) == None\n    get_ludic(122) == None\n    get_ludic(123) == None\n    get_ludic(124) == None\n    get_ludic(125) == None\n    get_ludic(126) == None\n    get_ludic(127) == None\n    get_ludic(128) == None\n    get_ludic(129) == None\n    get_ludic(130) == None\n    get_ludic(131) == None\n    get_ludic(132) == None\n    get_ludic(133) == None\n    get_ludic(134) == None\n    get_ludic(135) == None\n    get_ludic(136) == None\n    get_ludic(137) == None\n    get_ludic(138) == None\n    get_ludic(139) == None\n    get_ludic(140) == None\n    get_ludic(141) == None\n    get_ludic(142) == None\n    get_ludic(143) == None\n    get_ludic(144) == None\n    get_ludic(145) == None\n    get_ludic(146) == None\n    get_ludic(147) == None\n    get_ludic(148) == None\n    get_ludic(149) == None\n    get_ludic(150) == None\n    get_ludic(151) == None\n    get_ludic(152) == None\n    get_ludic(153) == None\n    get_ludic(154) == None\n    get_ludic(155) == None\n    get_ludic(156) == None\n    get_ludic(157) == None\n    get_ludic(158) == None\n    get_ludic(159) == None\n    get_ludic(160) == None\n    get_ludic(161) == None\n    get_ludic(162) == None\n    get_ludic(163) == None\n    get_ludic(164) == None\n    get_ludic(165) == None\n    get_ludic(166) == None\n    get_ludic(167) == None\n    get_ludic(168) == None\n    get_ludic(169) == None\n    get_ludic(170) == None\n    get_ludic(171) == None\n    get_ludic(172) == None\n    get_ludic(173) == None\n    get_ludic(174) == None\n    get_ludic(175) == None\n    get_ludic(176) == None\n    get_ludic(177) == None\n    get_ludic(178) == None\n    get_ludic(179) == None\n    get_ludic(180) == None\n    get_ludic(181) == None\n    get_ludic(182) == None\n    get_ludic(183) == None\n    get_ludic(184) == None\n    get_ludic(185) == None\n    get_ludic(186) == None\n    get_ludic(187) == None\n    get_"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_words('hello world') == 'world hello'\nassert     reverse_words('hello world') == 'world hello'\nassert     reverse_words('hello world') == 'world hello'\nassert     reverse_words('hello world') == 'world hello'\nassert     reverse_words('hello world') == 'world hello'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words('This is a python') == 'is python a This', \"reverse_words wrong\"\nassert     reverse_words('hi there') == 'here there hi', \"reverse_words wrong\"\nassert     reverse_words('i live here') == 'here live i', \"reverse_words wrong\"\n\ndef reverse_words_two_ways(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_words('i love you') == 'you love i', 'the reverse words method is not working properly'\nassert     reverse_words('i     love   you') == 'you love i', 'the reverse words method is not working properly'\nassert     reverse_words('i love you!') == 'you! love i', 'the reverse words method is not working properly'\nassert     reverse_words('i love you!?') == 'you? love i', 'the reverse words method is not working properly'\nassert     reverse_words('i') == 'i', 'the reverse words method is not working properly'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nreverse_words('This is a test') == 'est a test This'\nassert reverse_words('      This is a test') == 'a test This is'\nassert reverse_words('tHis   is a test') == 'est a test This'\nassert reverse_words('This is a test') == 'est a test This'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_words('Python') == 'ython'\nassert     reverse_words('  Python   ') == 'Python   '\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_words('a b') == 'b a'\nassert     reverse_words('a b c') == 'c b a'\nassert     reverse_words('a b c d e') == 'e d c b a'\nassert     reverse_words('a b c d e f') == 'f e d c b a'\n\n\ndef reverse_words_nested_list(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nreverse_words(\"hi there\") == \"there hi\"\nassert reverse_words(\"saksham bhai\") == \"bhai saksham\"\nassert reverse_words(\"this is a test case\") == \"case test this\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_words(\"The rain in Spain\")     == \"en Spain a rain The\"\nassert     reverse_words(\"Hello World!\")             == \"!dlrow olleH\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"a\") == \"a\"\nassert     reverse_words(\"b\") == \"b\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"dog over the fox jumps quick brown the lazy\"\nassert     reverse_words(\"   the quick brown fox jumps over the lazy dog   \") == \"dog over the fox jumps quick brown the lazy\"\nassert     reverse_words(\"  the quick brown fox jumps over the   lazy dog  \") == \"dog over the fox jumps quick brown the lazy\"\nassert     reverse_words(\"the quick brown fox jumps over the lazy dog  \") == \"dog over the fox jumps quick brown the lazy\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_words(\"this is a test\") == \"test a siht\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"a\") == \"a\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"a b c\") == \"c b a\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_num(2) == False\nassert     prime_num(6) == True\n\ndef sum_two_numbers(num1, num2):\n    '''\n    Write a function to sum two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == False\nassert     prime_num(4) == False\nassert     prime_num(7) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nTest Cases\n\nInput    Output\n5        True\n7        True\n8        False\n9        True\n10        False\n'''\n\n'''\nSOLUTION\n\n'''\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n--------------------------------------------------------------------------------------------------\n'''\n\n'''\nQuestion 21:\nWrite a function to generate all the permutations of a given string.\nHint: use backtracking.\n'''\n\n'''\nSolution:\ndef generate_permutations(str_to_per, output):\n    if len(str_to_per) == 0:\n        output.append('')\n        return \n    output.append(str_to_per[0])\n    temp = output\n    output = []\n    generate_permutations(str_to_per[1:], output)\n    output = temp\n    generate_permutations(str_to_per[1:], output)\n\nstr_to_per = \"Hello\"\noutput = []\ngenerate_permutations(str_to_per, output)\nprint(output)\n'''\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     radian_degree(30) == math.pi/6\nassert     radian_degree(60) == 2*math.pi/3\nassert     radian_degree(90) == math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(270) == math.pi/2\nassert     radian_degree(360) == 2*math.pi\nassert     radian_degree(0) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # 180\u00b0 = 3.141592 radians\n    # -180\u00b0 = -3.141592 radians\n    # 90\u00b0 = 3.141592 radians\n    radian_degree(90) == 3.141592\n    radian_degree(180) == 3.141592\n    radian_degree(270) == 3.141592\n    radian_degree(360) == 3.141592\n    # 180\u00b0 = 2.0298 radians\n    # -180\u00b0 = -2.0298 radians\n    # 90\u00b0 = 2.0298 radians\n    radian_degree(90) == 2.0298\n    radian_degree(180) == 2.0298\n    radian_degree(270) == 2.0298\n    radian_degree(360) == 2.0298\n    # 180\u00b0 = 1.73205 radians\n    # -180\u00b0 = -1.73205 radians\n    # 90\u00b0 = 1.73205 radians\n    radian_degree(90) == 1.73205\n    radian_degree(180) == 1.73205\n    radian_degree(270) == 1.73205\n    radian_degree(360) == 1.73205\n    # 180\u00b0 = 0.785398 radians\n    # -180\u00b0 = -0.785398 radians\n    # 90\u00b0 = 0.785398 radians\n    radian_degree(90) == 0.785398\n    radian_degree(180) == 0.785398\n    radian_degree(270) == 0.785398\n    radian_degree(360) == 0.785398\n    # 180\u00b0 = -0.785398 radians\n    # -180\u00b0 = 0.785398 radians\n    # 90\u00b0 = -0.785398 radians\n    radian_degree(-90) == -0.785398\n    radian_degree(-180) == 0.785398\n    radian_degree(-270) == 0.785398\n    radian_degree(-360) == -0.785398\n    # 180\u00b0 = math.pi radians\n    # -180\u00b0 = -math.pi radians\n    # 90\u00b0 = math.pi radians\n    radian_degree(90) == math.pi\n    radian_degree(180) == math.pi\n    radian_degree(270) == math.pi\n    radian_degree(360) == math.pi\n    # 180\u00b0 = math.pi/2 radians\n    # -180\u00b0 = -math.pi/2 radians\n    # 90\u00b0 = math.pi/2 radians\n    radian_degree(90) == math.pi/2\n    radian_degree(180) == math.pi/2\n    radian_degree(270) == math.pi/2\n    radian_degree(360) == math.pi/2\n    # 180\u00b0 = math.pi/4 radians\n    # -180\u00b0 = -math.pi/4 radians\n    # 90\u00b0 = math.pi/4 radians\n    radian_degree(90) == math.pi/4\n    radian_degree(180) == math.pi/4\n    radian_degree(270) == math.pi/4\n    radian_degree(360) == math.pi/4\n    # 180\u00b0 = math.pi/6 radians\n    # -180\u00b0 = -math.pi/6 radians\n    # 90\u00b0 = math.pi/6 radians\n    radian_degree(90) == math.pi/6\n    radian_degree(180) == math.pi/6\n    radian_degree(270) == math.pi/6\n    radian_degree(360) == math.pi/6\n    # 180\u00b0 = math.pi/8 radians\n    # -180\u00b0 = -math.pi/8 radians\n    # 90\u00b0 = math.pi/8 radians\n    radian_degree(90) == math.pi/8\n    radian_degree(180) == math.pi/8\n    radian_degree(270) == math.pi/8\n    radian_degree(360) == math.pi/8\n    # 180\u00b0 = math.pi/10 radians\n    # -180\u00b0 = -math.pi/10 radians\n    # 90\u00b0 = math.pi/10 radians\n    radian_degree(90) == math.pi/10\n    radian_degree(180) == math.pi/10\n    radian_degree(270) == math.pi/10\n    radian_degree(360) == math.pi/10\n    # 180\u00b0 = math.pi/12 radians\n    # -180\u00b0 = -math.pi/12 radians\n    # 90\u00b0 = math.pi/12 radians\n    radian_degree(90) == math.pi/12\n    radian_degree(180) == math.pi/12\n    radian_degree(270) == math.pi/12\n    radian_degree(360) == math.pi/12\n    # 180\u00b0 = math.pi/14 radians\n    # -180\u00b0 = -math.pi/14 radians\n    # 90\u00b0 = math.pi/14 radians\n    radian_degree(90) == math.pi/14\n    radian_degree(180) == math.pi/14\n    radian_degree(270) == math.pi/14\n    radian_degree(360) == math.pi/14\n    # 180\u00b0 = math.pi/16 radians\n    # -180\u00b0 = -math.pi/16 radians\n    # 90\u00b0 = math.pi/16 radians\n    radian_degree(90) == math.pi/16\n    radian_degree(180) == math.pi/16\n    radian_degree(270) == math.pi/16\n    radian_degree(360) == math.pi/16\n    # 180\u00b0 = math.pi/18 radians\n    # -180\u00b0 = -math.pi/18 radians\n    # 90\u00b0 = math.pi/18 radians\n    radian_degree(90) == math.pi/18\n    radian_degree(180) == math.pi/18\n    radian_degree(270) == math.pi/18\n    radian_degree(360) == math.pi/18\n    # 180\u00b0 = math.pi/20 radians\n    # -180\u00b0 = -math.pi/20 radians\n    # 90\u00b0 = math.pi/20 radians\n    radian_degree(90) == math.pi/20\n    radian_degree(180) == math.pi/20\n    radian_degree(270) == math.pi/20\n    radian_degree(360) == math.pi/20\n    # 180\u00b0 = math.pi/22 radians\n    # -180\u00b0 = -math.pi/22 radians\n    # 90\u00b0 = math.pi/22 radians\n    radian_degree(90) == math.pi/22\n    radian_degree(180) == math.pi/22\n    radian_degree(270) == math.pi/22\n    radian_degree(360) == math.pi/22\n    # 180\u00b0 = math.pi/24 radians\n    # -180\u00b0 = -math.pi/24 radians\n    # 90\u00b0 = math.pi/24 radians\n    radian_degree(90) == math.pi/24\n    radian_degree(180) == math.pi/24\n    radian_degree(270) == math.pi/24\n    radian_degree(360) == math.pi/24\n    # 180\u00b0 = math.pi/26 radians\n    # -180\u00b0 = -math.pi/26 radians\n    # 90\u00b0 = math.pi/26 radians\n    radian_degree(90) == math.pi/26\n    radian_degree(180) == math.pi/26\n    radian_degree(270) == math.pi/26\n    radian_degree(360) == math.pi/26\n    # 180\u00b0 = math.pi/28 radians\n    # -180\u00b0 = -math.pi/28 radians\n    # 90\u00b0 = math.pi/28 radians\n    radian_degree(90) == math.pi/28\n    radian_degree(180) == math.pi/28\n    radian_degree(270) == math.pi/28\n    radian_degree(360) == math.pi/28\n    # 180\u00b0 = math.pi/30 radians\n    # -180"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     radian_degree(180)    ==     radian_degree(math.pi/180) \nassert radian_degree(180)    ==     radian_degree(math.pi) \nassert radian_degree(180)    ==     math.pi\nassert radian_degree(180)    ==     math.radians(180)\nassert radian_degree(180)    ==     math.pi*180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef radian_to_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     radian_degree(45) == math.pi / 4\nassert     radian_degree(0) == 0\nassert     radian_degree(-45) == -math.pi / 4\nassert     radian_degree(90) == math.pi\nassert     radian_degree(-90) == -math.pi\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_string_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching string, a start index and an end index.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_literals('123', '123') == ('123', 0, 3)\nassert     find_literals('123', '12') == ('12', 1, 3)\nassert     find_literals('123', '1') == ('1', 0, 3)\nassert     find_literals('123', '1234') == ('1234', 0, 6)\nassert     find_literals('12', '123') == ('12', 0, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef convert_to_regex(text):\n    '''\n    Write a function to convert a string to a regex.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals('hello123.world456', '123') == (0, 3, 4)\nassert     find_literals('hello123world456', '123') == (2, 6, 7)\nassert     find_literals('hello123world456', '12312') == (4, 6, 7)\nassert     find_literals('hello123world456', '12312.456') == (0, 4, 6)\nassert     find_literals('hello123world456', '123456') == (0, 4, 5)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    find_literals('and=5', 'and') == ['=5', 0, 1]\n    find_literals('and=5', '=5') == ['=5', 0, 1]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', '=5') == ['=5', 0, 2]\n    find_literals('and=5', 'and') == ['and', 0, 2]\n    find_literals('and=5', '=') == ['=5', 0, 1]\n    find_literals('and=5', '=a') == ['=5', 0, 1]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a') == ['a', 0, 1]\n    find_literals('and=5', '=a') == ['a', 0, 1]\n    find_literals('and=5', '=') == ['=', 0, 1]\n    find_literals('and=5', 'and') == ['and', 0, 2]\n    find_literals('and=5', 'and') == ['and', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', '=a=') == ['a=', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=') == ['and=', 0, 2]\n    find_literals('and=5', 'a=') == ['a=', 0, 1]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'a=5') == ['a=5', 0, 2]\n    find_literals('and=5', 'and=5') == ['and=5', 0, 2"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_occurrences(text, pattern):\n    '''\n    Write a function to count the number of times a pattern appears in a string.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_all_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern and return all matches as a list.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('', '\\w') == None, \"No match\"\nassert     find_literals('', '\\s') == None, \"No match\"\nassert     find_literals('', '\\S') == None, \"No match\"\nassert     find_literals('', '\\w') == None, \"No match\"\nassert     find_literals('Hello', '\\w') == None, \"No match\"\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals('aaaaaabbbaaaabaabaaaaaaabbbaaaaabbbbbbaaaabaabaaaaabbbbaaabaaabaaaaaaaaaaaaaa', 'bbbaaaaabbbaababaaabb') == (3, 3, 6)\nassert     find_literals('a', 'a') == (0, 0, 1)\nassert     find_literals('aaabaaaaabaaab', 'a') == (0, 0, 5)\nassert     find_literals('aaaabbbbbaaaabaabaaaaababaaaaaabbbaaabaaaaaabaaaaaabababaaaaaaaabaaaaabbbbbaaaabaababaaaaaabaaaaabaaabaaaaaaaaaa', 'aaaabbbbbaaaabaabaaaaababaaaaaabbbaaabaaaaaabaaaaaabababaaaaaaaabaaaaabbbbbaaaabaababaaaaaabaaaaabaaabaaaaaaaaaa') == (0, 0, 10)\nassert     find_literals('aaaabbbbbaaaabaabaaaaababaaaaaabbbaaabaaaaaabaaaaaabababaaaaaaaabaaaaabbbbbaaaabaababaaaaaabaaaaabaaabaaaaaaaaaa', 'aaaabaaaabbaaabbbbaaaaabaabbbaaaaaabaaabbbbbaaaabaabbbaaaaabaabaaaaaaaaaabaaaaaaaabaaaaabbbbbaaaabaabaaaaaabaaaaaabbbb') == (0, 0, 10)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals(\"I am a test string\", \"test\") == ['test', 0, 2]\nassert     find_literals(\"I am a test string\", \"\") == ['', 0, 0]\nassert     find_literals(\"\", \"test\") == ['', 0, 0]\nassert     find_literals(\"Hello World!\", \"Hello\") == ['Hello', 0, 8]\n\ndef find_regex_overlap(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the list of overlapping substrings.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nbell_Number(0) == 1\nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 4\nbell_Number(4) == 7\nbell_Number(5) == 15\nbell_Number(6) == 20\nbell_Number(7) == 34\nbell_Number(8) == 55\nbell_Number(9) == 89\nbell_Number(10) == 144\nbell_Number(11) == 233\nbell_Number(12) == 377\nbell_Number(13) == 610\nbell_Number(14) == 987\nbell_Number(15) == 1597\nbell_Number(16) == 2584\nbell_Number(17) == 4181\nbell_Number(18) == 6765\nbell_Number(19) == 10946\nbell_Number(20) == 17711\nbell_Number(21) == 28657\nbell_Number(22) == 46368\nbell_Number(23) == 75025\nbell_Number(24) == 121393\nbell_Number(25) == 196418\nbell_Number(26) == 317811\nbell_Number(27) == 514229\nbell_Number(28) == 832040\nbell_Number(29) == 1346269\nbell_Number(30) == 261599\nbell_Number(31) == 4334944\nbell_Number(32) == 7014087\nbell_Number(33) == 1134903\nbell_Number(34) == 1836361\nbell_Number(35) == 362880\nbell_Number(36) == 514229\nbell_Number(37) == 832040\nbell_Number(38) == 1346269\nbell_Number(39) == 261599\nbell_Number(40) == 4334944\nbell_Number(41) == 7014087\nbell_Number(42) == 1134903\nbell_Number(43) == 1836361\nbell_Number(44) == 362880\nbell_Number(45) == 514229\nbell_Number(46) == 832040\nbell_Number(47) == 1346269\nbell_Number(48) == 261599\nbell_Number(49) == 4334944\nbell_Number(50) == 7014087\nbell_Number(51) == 1134903\nbell_Number(52) == 1836361\nbell_Number(53) == 362880\nbell_Number(54) == 514229\nbell_Number(55) == 832040\nbell_Number(56) == 1346269\nbell_Number(57) == 261599\nbell_Number(58) == 4334944\nbell_Number(59) == 7014087\nbell_Number(60) == 1134903\nbell_Number(61) == 1836361\nbell_Number(62) == 362880\nbell_Number(63) == 514229\nbell_Number(64) == 832040\nbell_Number(65) == 1346269\nbell_Number(66) == 261599\nbell_Number(67) == 4334944\nbell_Number(68) == 7014087\nbell_Number(69) == 1134903\nbell_Number(70) == 1836361\nbell_Number(71) == 362880\nbell_Number(72) == 514229\nbell_Number(73) == 832040\nbell_Number(74) == 1346269\nbell_Number(75) == 261599\nbell_Number(76) == 4334944\nbell_Number(77) == 7014087\nbell_Number(78) == 1134903\nbell_Number(79) == 1836361\nbell_Number(80) == 362880\nbell_Number(81) == 514229\nbell_Number(82) == 832040\nbell_Number(83) == 1346269\nbell_Number(84) == 261599\nbell_Number(85) == 4334944\nbell_Number(86) == 7014087\nbell_Number(87) == 1134903\nbell_Number(88) == 1836361\nbell_Number(89) == 362880\nbell_Number(90) == 514229\nbell_Number(91) == 832040\nbell_Number(92) == 1346269\nbell_Number(93) == 261599\nbell_Number(94) == 4334944\nbell_Number(95) == 7014087\nbell_Number(96) == 1134903\nbell_Number(97) == 1836361\nbell_Number(98) == 362880\nbell_Number(99) == 514229\nbell_Number(100) == 832040\nbell_Number(101) == 1346269\nbell_Number(102) == 261599\nbell_Number(103) == 4334944\nbell_Number(104) == 7014087\nbell_Number(105) == 1134903\nbell_Number(106) == 1836361\nbell_Number(107) == 362880\nbell_Number(108) == 514229\nbell_Number(109) == 832040\nbell_Number(110) == 1346269\nbell_Number(111) == 261599\nbell_Number(112) == 4334944\nbell_Number(113) == 7014087\nbell_Number(114) == 1134903\nbell_Number(115) == 1836361\nbell_Number(116) == 362880\nbell_Number(117) == 514229\nbell_Number(118) == 832040\nbell_Number(119) == 1346269\nbell_Number(120) == 261599\nbell_Number(121) == 4334944\nbell_Number(122) == 7014087\nbell_Number(123) == 1134903\nbell_Number(124) == 1836361\nbell_Number(125) == 362880\nbell_Number(126) == 514229\nbell_Number(127) == 832040\nbell_Number(128) == 1346269\nbell_Number(129) == 261599\nbell_Number(130) == 4334944\nbell_Number(131) == 7014087\nbell_Number(132) == 1134903\nbell_Number(133) == 1836361\nbell_Number(134) == 362880\nbell_Number(135) == 514229\nbell_Number(136) == 832040\nbell_Number(137) == 1346269\nbell_Number(138) == 261599\nbell_Number(139) == 4334944\nbell_Number(140) == 7014087\nbell_Number(141) == 1134903\nbell_Number(142) == 1836361\nbell_Number(143) == 362880\nbell_Number(144) == 514229\nbell_Number(145) == 832040\nbell_Number(146) == 1346269\nbell_Number(147) == 261599\nbell_Number(148) == 4334944\nbell_Number(149) == 7014087\nbell_Number(150) == 1134903\nbell_Number(151) == 1836361\nbell_Number(152) == 362880\nbell_Number(153) == 514229\nbell_Number(154) == 832040\nbell_Number(155) == 1346269\nbell_Number(156) == 261599\nbell_Number(157) == 4334944\nbell_Number(158) == 7014087\nbell_Number(159) == 1134903\nbell_Number(160) == 1836361\nbell_Number(161) == 362880\nbell_Number(162) == 514229\nbell_Number(163) == 832040\nbell_Number(164) == 1346269\nbell_Number(165) == 261599\nbell_Number(166) == 4334944\nbell_Number(167) == 7014087\nbell_Number(168) == 1134903\nbell_Number(169) == 1836361\nbell_Number(170) == 362880\nbell_Number(171) == 514229\nbell_Number(172) == 832040\nbell_Number(173) == 1346269\nbell_Number(174) == 261599\nbell_Number(175) == 4334944\nbell_Number(176) == 7014087\nbell_Number(177) == 1134903\nbell_Number(178) == 1836361\nbell_Number(179) == 362880\nbell_Number(180) == 514229\nbell_Number(181) == 832040\nbell_Number(182) == 1346269\nbell_Number(183) == 261599\nbell_Number(184) == 4334944\nbell_Number(185"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert bell_Number(1) == 1\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 13\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 13\nbell_Number(5) == 49\nbell_Number(6) == 132\nbell_Number(7) == 513\nbell_Number(8) == 1357\nbell_Number(9) == 67728\nbell_Number(10) == 2652528\n\n\ndef fib_Number(n): \n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nbell_Number(0) == 1\nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 7\nbell_Number(5) == 13\nbell_Number(6) == 21\nbell_Number(7) == 34\nbell_Number(8) == 55\nbell_Number(9) == 89\nbell_Number(10) == 145\nbell_Number(11) == 233\nbell_Number(12) == 377\nbell_Number(13) == 610\nbell_Number(14) == 987\nbell_Number(15) == 1597\nbell_Number(16) == 2584\nbell_Number(17) == 4181\nbell_Number(18) == 6765\nbell_Number(19) == 10946\nbell_Number(20) == 17711\nbell_Number(21) == 28657\nbell_Number(22) == 46368\nbell_Number(23) == 75025\nbell_Number(24) == 121393\nbell_Number(25) == 196418\nbell_Number(26) == 317811\nbell_Number(27) == 514229\nbell_Number(28) == 861207\nbell_Number(29) == 14930352\nbell_Number(30) == 23943720\nbell_Number(31) == 36600\nbell_Number(32) == 513184\nbell_Number(33) == 832040\nbell_Number(34) == 1271280\nbell_Number(35) == 180640\nbell_Number(36) == 251680\nbell_Number(37) == 352416\nbell_Number(38) == 57028\nbell_Number(39) == 94640\nbell_Number(40) == 1512608\nbell_Number(41) == 267908\nbell_Number(42) == 4334944\nbell_Number(43) == 7014088\nbell_Number(44) == 1134903\nbell_Number(45) == 180640\nbell_Number(46) == 274877906944\nbell_Number(47) == 4334944\nbell_Number(48) == 7178303744\nbell_Number(49) == 12586269025\nbell_Number(50) == 267908\nbell_Number(51) == 514229\nbell_Number(52) == 832040\nbell_Number(53) == 1261376\nbell_Number(54) == 230584300921376\nbell_Number(55) == 4334944\nbell_Number(56) == 80543\nbell_Number(57) == 1346269337295592\nbell_Number(58) == 274877906944\nbell_Number(59) == 54522949473088\nbell_Number(60) == 871782912003656\nbell_Number(61) == 1307674368000\nbell_Number(62) == 230584300921376\nbell_Number(63) == 46368\nbell_Number(64) == 75025\nbell_Number(65) == 119226158453360\nbell_Number(66) == 180640\nbell_Number(67) == 362880\nbell_Number(68) == 54522949473088\nbell_Number(69) == 861207\nbell_Number(70) == 138544\nbell_Number(71) == 230584300921376\nbell_Number(72) == 46368\nbell_Number(73) == 75025\nbell_Number(74) == 119226158453360\nbell_Number(75) == 180640\nbell_Number(76) == 362880\nbell_Number(77) == 54522949473088\nbell_Number(78) == 861207\nbell_Number(79) == 138544\nbell_Number(80) == 230584300921376\nbell_Number(81) == 46368\nbell_Number(82) == 75025\nbell_Number(83) == 119226158453360\nbell_Number(84) == 180640\nbell_Number(85) == 362880\nbell_Number(86) == 54522949473088\nbell_Number(87) == 861207\nbell_Number(88) == 138544\nbell_Number(89) == 230584300921376\nbell_Number(90) == 46368\nbell_Number(91) == 75025\nbell_Number(92) == 119226158453360\nbell_Number(93) == 180640\nbell_Number(94) == 362880\nbell_Number(95) == 54522949473088\nbell_Number(96) == 861207\nbell_Number(97) == 138544\nbell_Number(98) == 230584300921376\nbell_Number(99) == 46368\nbell_Number(100) == 75025\nbell_Number(101) == 119226158453360\nbell_Number(102) == 180640\nbell_Number(103) == 362880\nbell_Number(104) == 54522949473088\nbell_Number(105) == 861207\nbell_Number(106) == 138544\nbell_Number(107) == 230584300921376\nbell_Number(108) == 46368\nbell_Number(109) == 75025\nbell_Number(110) == 119226158453360\nbell_Number(111) == 180640\nbell_Number(112) == 362880\nbell_Number(113) == 54522949473088\nbell_Number(114) == 861207\nbell_Number(115) == 138544\nbell_Number(116) == 230584300921376\nbell_Number(117) == 46368\nbell_Number(118) == 75025\nbell_Number(119) == 119226158453360\nbell_Number(120) == 180640\nbell_Number(121) == 362880\nbell_Number(122) == 54522949473088\nbell_Number(123) == 861207\nbell_Number(124) == 138544\nbell_Number(125) == 230584300921376\nbell_Number(126) == 46368\nbell_Number(127) == 75025\nbell_Number(128) == 119226158453360\nbell_Number(129) == 180640\nbell_Number(130) == 362880\nbell_Number(131) == 54522949473088\nbell_Number(132) == 861207\nbell_Number(133) == 138544\nbell_Number(134) == 230584300921376\nbell_Number(135) == 46368\nbell_Number(136) == 75025\nbell_Number(137) == 119226158453360\nbell_Number(138) == 180640\nbell_Number(139) == 362880\nbell_Number(140) == 54522949473088\nbell_Number(141) == 861207\nbell_Number(142) == 138544\nbell_Number(143) == 230584300921376\nbell_Number(144) == 46368\nbell_Number(145) == 75025\nbell_Number(146) == 119226158453360\nbell_Number(147) == 180640\nbell_Number(148) == 362880\nbell_Number(149) == 54522949473088\nbell_Number(150) == 861207\nbell_Number(151) == 138544\nbell_Number(152) == 230584300921376\nbell_Number(153) == 46368\nbell_Number(154) == 75025\nbell_Number(155) == 119226158453360\nbell_Number(156) == 180640\nbell_Number(157) == 362880\nbell_Number(158) == 54522949473088\nbell_Number(159) == 861207\nbell_Number(160) == 138544\nbell_Number(161) == 230584300921376\nbell_Number(162) == 46368\nbell_Number(163) == 75025\nbell_Number(164) == 119226158453360\nbell_Number(165) == 180640\nbell_Number(166) == 362880\nbell_Number(167) == 54522949473088\nbell_Number(168) == 861207\nbell_Number(169) == 138544\nbell_Number(170) == 230584300921376\nbell_Number(171) == 46368\nbell_Number(172) == 75025\nbell"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_Number(0) == 1\nassert bell_Number(1) == 1\nassert bell_Number(2) == 1\nassert bell_Number(3) == 2\nassert bell_Number(4) == 5\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_of_natural_numbers(n):\n    '''\n    Find the sum of all natural numbers from 1 to n\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_Number(2) == 2, \"bell number 2 does not give correct output\"\nassert     bell_Number(3) == 5, \"bell number 3 does not give correct output\"\nassert     bell_Number(4) == 7, \"bell number 4 does not give correct output\"\nassert     bell_Number(5) == 11, \"bell number 5 does not give correct output\"\nassert     bell_Number(6) == 13, \"bell number 6 does not give correct output\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_Number(1) == 1 \nassert     bell_Number(2) == 1\nassert     bell_Number(3) == 1\nassert     bell_Number(4) == 1\nassert     bell_Number(5) == 2\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([\"elephant\", \"cat\", \"rabbit\", \"elephant\", \"dog\", \"goat\", \"elephant\", \"elephant\"], 3) == ['cat', 'rabbit', 'dog', 'goat']\nassert     remove_kth_element([\"elephant\", \"cat\", \"rabbit\", \"dog\", \"goat\", \"elephant\", \"elephant\"], 5) == ['cat', 'rabbit', 'dog', 'goat', \"elephant\"]\nassert     remove_kth_element([\"elephant\", \"cat\", \"rabbit\", \"dog\", \"goat\", \"elephant\", \"elephant\"], 6) == ['elephant', 'cat', 'rabbit', 'dog', \"goat\", \"elephant\"]\nassert     remove_kth_element([\"elephant\", \"cat\", \"rabbit\", \"dog\", \"goat\", \"elephant\", \"elephant\"], 1) == ['cat', 'rabbit', 'dog', \"goat\", \"elephant\"]\nassert     remove_kth_element([\"elephant\", \"cat\", \"rabbit\", \"dog\", \"goat\", \"elephant\", \"elephant\"], 0) == ['cat', 'rabbit', 'dog', \"goat\", \"elephant\"]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([\"p\", \"y\", \"t\", \"h\", \"o\"], 1) == [\"p\", \"y\", \"t\", \"h\", \"o\"]\nassert     remove_kth_element([\"p\", \"y\", \"t\", \"h\", \"o\"], 3) == [\"p\", \"y\", \"t\", \"h\", \"o\"]\nassert     remove_kth_element([\"p\", \"y\", \"t\", \"h\", \"o\"], 0) == [\"p\", \"y\", \"t\", \"h\", \"o\"]\nassert     remove_kth_element([\"p\", \"y\", \"t\", \"h\", \"o\"], -1) == [\"p\", \"y\", \"t\", \"h\", \"o\"]\nassert     remove_kth_element([\"p\", \"y\", \"t\", \"h\", \"o\"], -3) == [\"p\", \"y\", \"t\", \"h\", \"o\"]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef reverse_list(list1):\n    '''\n    Write a python function which takes a list and returns the list with the elements reversed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7], 3) == [1,2,4,5,7], \"Wrong output\"\nassert     remove_kth_element([1,2,3,4,5,6,7], 0) == [1,2,3,4,5,6,7], \"Wrong output\"\nassert     remove_kth_element([1,2,3,4,5,6,7], -4) == [1,2,3,5,6,7], \"Wrong output\"\nassert     remove_kth_element([], -1) == [], \"Wrong output\"\nassert     remove_kth_element([], 0) == [], \"Wrong output\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_kth_element([1,2,3], 1) == [2,3]\nassert \nremove_kth_element([1,2,3], 0) == []\nassert \nremove_kth_element([1,2,3], 2) == [1,3]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([], 10) == []\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10,11,12],10) == [1,2,3,4,5,6,7,8,9,11,12]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10,11,12],11) == [1,2,3,4,5,6,7,8,9,10,12]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10,11,12],2) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10,11,12],3) == [1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element(list1,3) == ['A','B','C','D','E','F'], \"1st wrong\"\nassert     remove_kth_element(list1,0) == ['A','B','C','D','E','F'], \"2nd wrong\"\nassert     remove_kth_element(list1,8) == ['A','B','C','D','E','F'], \"3rd wrong\"\nassert     remove_kth_element(list1,9) == ['A','B','C','D','E'], \"4th wrong\"\nassert     remove_kth_element(list1,1) == ['A','B','C','D','E','F'], \"5th wrong\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1, 2, 3], 1) == [1, 2, 3]\nassert     remove_kth_element([1, 2, 3], 2) == [1, 2]\nassert     remove_kth_element([1, 2, 3], 3) == [1, 2]\nassert     remove_kth_element([1, 2, 3], 4) == [1, 2]\nassert     remove_kth_element([1, 2, 3], 5) == [1, 2, 3]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([1, 2, 3, 4], 2) == [1, 2, 4], 'Expected 1,2,4 after removing 2nd element.'\nassert     remove_kth_element([1, 2, 3, 4], 0) == [1, 2, 3, 4], 'Expected 1,2,3,4 after removing 0th element.'\nassert     remove_kth_element([1, 2, 3, 4], 1) == [1, 2, 4], 'Expected 1,2,4 after removing 1st element.'\nassert     remove_kth_element([1, 2, 3, 4], 3) == [1, 2, 4], 'Expected 1,2,4 after removing 3rd element.'\nassert     remove_kth_element([1, 2, 3, 4], 4) == [1, 2, 3, 4], 'Expected 1,2,3,4 after removing 4th element.'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(max_of_nth([[1,2,3],\n                [4,5,6],\n                [7,8,9]],1) == 3)\n\nassert max_of_nth([[1,2,3],\n                [4,5,6],\n                [7,8,9]],2) == 6\n\nassert max_of_nth([[1,2,3],\n                [4,5,6],\n                [7,8,9]],3) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_of_nth([[3,2,4,3],[3,2,3,4],[4,3,2,3],[4,3,2,3]], 2) == 4\nassert max_of_nth([[2,4,5,3,7],[4,3,6,4,7],[3,2,1,6,7]], 5) == 7\nassert max_of_nth([[2,4,5,3,7],[4,3,6,4,7],[3,2,1,6,7]], 4) == 4\nassert max_of_nth([[2,4,5,3,7],[4,3,6,4,7],[3,2,1,6,7]], 0) == 2\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_of_nth([[1,2,3],\n                       [4,5,6],\n                       [7,8,9]], 1) == 9\nassert     max_of_nth([[1,2,3],\n                       [4,5,6],\n                       [7,8,9]], 2) == 6\nassert     max_of_nth([[1,2,3],\n                       [4,5,6],\n                       [7,8,9]], 3) == 9"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_of_nth([[1,2],[2,3]], 0) == 1\nassert     max_of_nth([[1,2],[2,3]], 1) == 3\nassert     max_of_nth([[1,2],[2,3]], 2) == 2\nassert     max_of_nth([[1,2],[2,3]], 3) == 3\nassert     max_of_nth([[1,2],[2,3]], 4) == 2\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([[1,2,3,4],[5,6,7,8]], 1) == 8\nassert     max_of_nth([[1,2,3,4],[5,6,7,8]], 2) == 7\nassert     max_of_nth([[1,2,3,4],[5,6,7,8]], 3) == 6\nassert     max_of_nth([[1,2,3,4],[5,6,7,8]], 4) == 5\nassert     max_of_nth([[1,2,3,4],[5,6,7,8]], 5) == 4\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_of_nth([[3, 4, 5],\n                    [6, 7, 8],\n                    [9, 10, 11]], 1) == 11\nassert     max_of_nth([[3, 4, 5],\n                    [6, 7, 8],\n                    [9, 10, 11]], 2) == 8\nassert     max_of_nth([[3, 4, 5],\n                    [6, 7, 8],\n                    [9, 10, 11]], 3) == 10\nassert     max_of_nth([[3, 4, 5],\n                    [6, 7, 8],\n                    [9, 10, 11]], 4) == 11\nassert     max_of_nth([[3, 4, 5],\n                    [6, 7, 8],\n                    [9, 10, 11]], 5) == 10\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 6\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 7\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 4) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 5) == 6\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_list = [[1, 4, 6], [-3, -2, -1], [7, 8, 9]]\nn = 2\n\nprint(max_of_nth(test_list, n))\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert     merge([[1, 2], [4, 5], [4, 5]]) == [[1, 2], [4, 5], [4, 5]]\nassert     merge([[5, 6], [7, 8], [9, 10], [11, 12]]) == [[5, 6], [7, 8], [9, 10], [11, 12]]\nassert     merge([[1, 2], [4, 5], [7, 8], [9, 10], [11, 12]]) == [[1, 2], [4, 5], [7, 8], [9, 10], [11, 12]]\nassert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nif __name__ == '__main__':\n    lst = [[1,3],[2,6],[4,8],[10,12]]\n    print(merge(lst))\n    print(merge([[1,3]]))\n    print(merge([[2,6],[4,8]]))\n    print(merge([[10,12]]))"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge([[1, 3], [2, 5]]) == [[1, 2], [3, 5]], \"Merge\"\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]], \"Merge\"\nassert     merge([[1], [], [2]]) == [[1], [2]], \"Merge\"\n\nassert     merge([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]], \"Merge\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1,3],[2,4]]\nassert     merge([[1,2],[1,4]]) == [[1,1],[2,4]]\nassert     merge([[1,2],[2,4]]) == [[1,2],[2,4]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n[1,2]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nif __name__ == '__main__':\n    assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n    print(\"correct\")\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge([[1,2], [3,4],[5,6]]) == [[1,2], [3,4], [5,6]]\nassert     merge([[1,2],[3,4],[5,6]]) == [[1,2], [3,4], [5,6]]\nassert     merge([[1,2,3],[4,5,6,7],[8,9,10,11]]) == [[1,2], [3,4,5], [6,7,8,9], [10,11]]\nassert     merge([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]\nassert     merge([[1,2],[3,4],[5,6,7,8,9,10]]) == [[1,2],[3,4,5,6,7,8,9,10]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlst1 = [[1, 2], [3, 4]]\nlst2 = [[5, 6], [7, 8]]\nmerged_lst = merge(lst1)\nassert merged_lst == [1, 2, 5, 6, 7, 8]\nassert \nmerged_lst = merge(lst2)\nassert merged_lst == [3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1,3],[4,5],[5,6],[7,8]]) == [[1, 3], [4, 5], [5, 6], [7, 8]]\nassert     merge([[1,2],[2,3],[3,4]]) == [[1, 2], [2, 3], [3, 4]]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (cummulative_sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 3, 6, 10, 15, 21, 28, 36, 45])\nassert (cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 3, 6, 10, 15, 21, 28, 36, 45])\nassert (cummulative_sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 3, 6, 10, 15, 21, 28, 36, 45])\n\n\ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove duplicates in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cummulative_sum(()) == ()\nassert     cummulative_sum((\"a\", \"b\")) == (\"a\", \"b\", \"a+b\")\nassert     cummulative_sum((\"a\", \"b\", \"c\")) == (\"a\", \"b\", \"a+b+c\")"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cummulative_sum([1,2,3]) == [1,3,6]\nassert     cummulative_sum([-1,1,3,4]) == [-1,0,3,6]\nassert     cummulative_sum([-2,-1,1,2,4,5,7,8]) == [-2,-1,3,6,10,15,21,28]\nassert     cummulative_sum([-3,-2,-1,2,4,5,7,8]) == [-3,-2,-1,0,4,8,12,16]\nassert     cummulative_sum([0,1,2]) == [0,1,3]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (cummulative_sum((5,2,3,4,6,7,8,9)) == [5, 7, 11, 13, 17, 21, 26, 31])\nassert     (cummulative_sum((10,10,10)) == [10, 10, 10])\nassert     (cummulative_sum((0,0,0,0)) == [0, 0, 0, 0])\nassert     (cummulative_sum((0)) == [0])\nassert     (cummulative_sum((2,4,5,5,7,10)) == [2, 5, 8, 10, 11, 14])\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (cummulative_sum([1,2,3,4,5,6,7]) ==  [1,3,6,10,15,21,27])\nassert     (cummulative_sum([-3,4,-1,2,-1,0,1]) ==  [-3,-1,-2,-3,4,4,4])\nassert     (cummulative_sum([1,2,3,4,5]) ==  [1,3,6,10,15])\nassert     (cummulative_sum([]) ==  [])\nassert     (cummulative_sum([1,2,3,4,5,6,7,8,9]) ==  [1,3,6,10,15,21,27,33,38])\nprint(\"You are done with the list_processing_challenge.py\""
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cummulative_sum((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (cummulative_sum((1, 2, 3, 4, 5))) == (1, 3, 6, 10, 15), \"incorrect sum of integers\"\nassert     (cummulative_sum((1, 2, 3, 4, 5))) == (1, 3, 6, 10, 15), \"incorrect sum of integers\"\nassert     (cummulative_sum((1, 2, 3, 4, 5))) == (1, 3, 6, 10, 15), \"incorrect sum of integers\"\nassert     (cummulative_sum((1, 2, 3, 4, 5))) == (1, 3, 6, 10, 15), \"incorrect sum of integers\"\nassert     (cummulative_sum((1, 2, 3, 4, 5))) == (1, 3, 6, 10, 15), \"incorrect sum of integers\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     average_tuple([(1, 2), (3, 4)]) == [(1.5, 2.5), (3.5, 4.5)], 'incorrect average_tuple!'\nassert     average_tuple([(1, 2, 3), (4, 5, 6)]) == [(1.0, 2.0, 3.0), (4.5, 5.5, 6.5)], 'incorrect average_tuple!'\nassert     average_tuple([(1,), (2,), (3,)]) == [(1.0,), (2.0,), (3.0,)], 'incorrect average_tuple!'\nassert     average_tuple([(1, 1), (2, 2), (3, 3)]) == [(1.5, 1.5), (2.5, 2.5), (3.5, 3.5)], 'incorrect average_tuple!'\nassert     average_tuple([(1, 2, 3), (4, 5), (6, 7)]) == [(1.5, 2.5, 3.5), (4.5, 5.5, 6.5)], 'incorrect average_tuple!'\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     average_tuple(((1, 2, 3), (4, 5, 6))) == [2, 5, 6]\nassert     average_tuple(((10, 20, 30), (40, 50, 60))) == [20, 50, 60]\n\ndef average_list(nums):\n    '''\n    Write a function which takes a list of integers and returns the average value for each element as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     average_tuple([[1, 2], [1, 2]]    ==    [1.5, 2.5])\nassert     average_tuple([(1, 2), (1, 2)]) ==    [1.5, 2.5]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple([(1, 2), (2, 3), (3, 4)]) == [2, 3, 3.5]\nassert     average_tuple([(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\nassert     average_tuple([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert     average_tuple([(1, 2), (2, 3)]) == [(1, 2), (2, 3)]\nassert     average_tuple([(1, 2), (2, 3)]) == [(1, 2), (2, 3)]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple([(1, 2), (2, 3)]) == [(1.0, 2.0)], 'incorrect return type'\nassert     average_tuple((1, 2, 3)) == [(1.0, 2.0, 3.0)], 'wrong tuple size'\nassert     average_tuple(((1, 2), (1, 2), (1, 2))) == [(1.0, 2.0, 3.0)], 'wrong tuple size'\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef power(num, n):\n    '''\n    Write a function which takes a number and a power n and returns the result of the calculation.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         average_tuple(((1,2),(3,4),(5,6))) == [2.5, 3.5, 4.5], 'incorrect result'\n\ndef average_dict(nums):\n    '''\n    Write a function which takes a dict of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         average_tuple([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\nassert         average_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert         average_tuple([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]]) == [[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]]\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_modulo((1,2), (3,4)) == (0,0)\nassert     tuple_modulo((-1,0), (-5,0)) == (-5,0)\nassert     tuple_modulo((3,5), (2,7)) == (0,0)\nassert     tuple_modulo((-6,8), (-7,9)) == (2,4)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((1,2,3), (4,5,6)) == (1,0,3)\nassert     tuple_modulo((10,20,30), (20,40,60)) == (10,0,30)\nassert     tuple_modulo((100,200,300), (200,400,600)) == (100,0,300)\nassert     tuple_modulo((0,0,0), (0,0,0)) == (0,0,0)\n\nprint(\"correct\")\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((2, 2, 2), (2, 2, 2)) == (0, 0, 0)\nassert     tuple_modulo((2, 2, 2), (3, 2, 2)) == (0, 2, 2)\nassert     tuple_modulo((2, 2, 2), (1, 2, 3)) == (1, 0, 1)\nassert     tuple_modulo((2, 2, 2), (2, 3, 4)) == (0, 0, 1)\nassert     tuple_modulo((3, 2, 4), (2, 3, 4)) == (0, 0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo((1,2,3), (10,20,30)) == (1, 0, 3)\nassert tuple_modulo((1,2,3), (10,20,30)) == (1, 0, 3)\nassert tuple_modulo((0,0,0), (0,0,0)) == (0, 0, 0)\nassert tuple_modulo((0,0,0), (0,1,0)) == (0, 0, 1)\nassert tuple_modulo((0,0,0), (1,0,0)) == (1, 0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_modulo((2,3),(4,5)) == (0,5)\nassert     tuple_modulo((-2,3),(4,5)) == (0,3)\nassert     tuple_modulo((2,0),(4,5)) == (2,0)\nassert     tuple_modulo((3,2),(4,0)) == (0,2)\n\nprint('All tests passed!')\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo((1, 2, 3), (4, 5, 6)) == ((0, 1, 2), (1, 0, 3))\nassert tuple_modulo((1, 2, 3), (4, 5, 6)) == ((0, 1, 2), (1, 0, 3))\nassert tuple_modulo((2, 4, 6), (3, 5, 7)) == ((1, 0, 1), (1, 1, 1))\nassert tuple_modulo((2, 4, 6), (3, 5, 7)) == ((1, 0, 1), (1, 1, 1))\nassert tuple_modulo((1, 1, 1), (2, 2, 2)) == ((1, 1, 1), (1, 1, 1))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo((1,2,3), (4,5,6)) == ((1,2,3),(4,0,6))\nassert     tuple_modulo((4,5,6), (1,2,3)) == ((4,5,6),(0,2,0))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo((2,5), (2,5)) == (0,0)\nassert     tuple_modulo((2,3), (5,2)) == (1,3)\nassert     tuple_modulo((-4,-2), (5,2)) == (3,4)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint \n\"check the correctness of min_Jumps\"\nassert min_Jumps(2,1) == 0\nassert min_Jumps(2,3) == 1\nassert min_Jumps(2,5) == 2\nassert min_Jumps(2,7) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Jumps(0, (3,4)) == 0, \"3,4\"\nassert     min_Jumps(1, (3,4)) == 1, \"3,4\"\nassert     min_Jumps(2, (3,4)) == 1, \"3,4\"\nassert     min_Jumps(3, (3,4)) == 1, \"3,4\"\nassert     min_Jumps(4, (3,4)) == 2, \"3,4\"\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print (\"Passed!\")\nelse:\n    print (\"Failed!\""
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef minimumJumps(arr, d): \n    '''\n    Write a function to find the minimum number of jumps from the array's elements to reach a point of form (d, 0).\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(steps = 5, d = 3) == 3, \"Wrong\"\nassert     min_Jumps(steps = 5, d = 4) == -1, \"Wrong\"\nassert     min_Jumps(steps = 5, d = 2) == 3, \"Wrong\"\n\n\ndef min_Jumps_dp(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef min_Jumps_memoization(steps, d, memo):\n    if memo[steps]!= -1:\n        return memo[steps]\n    if steps == 0:\n        return 0\n    if steps < 0:\n        return float('inf')\n    if steps == d:\n        return 1\n\n    res = float('inf')\n    for i in range(0, d):\n        res = min(res, 1 + min_Jumps_memoization(steps - 1, d, memo))\n    \n    memo[steps] = res\n    return res\n\ndef min_Jumps_iterative(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps([0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Jumps(5, (0, 0)) == 1\nassert     min_Jumps(5, (0, 1)) == 2\nassert     min_Jumps(5, (0, 2)) == 3\nassert     min_Jumps(5, (0, 3)) == 4\nassert     min_Jumps(5, (0, 4)) == 5\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     div_list([1,2,3],[0,2,4]) == [[0,0,0],[1,0,2],[2,2,0]]\nassert     div_list([-1,0,2,3],[0,-2,4]) == [[0,0,0,-2],[-1,0,2,0],[2,2,0,0]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert isinstance(div_list, function), \"Your div_list function is not a function\"\nassert div_list([1,2,3],[4,5,6]) == [0.25,0.5,0.75], \"div_list(list1, list2) has not returned the correct result\"\nassert div_list([1,2,3],[1,1,1]) == [1,2,3], \"div_list(list1, list2) has not returned the correct result\"\nassert div_list([1,2,3],[2,2,2]) == [0.5,0.75,1.5], \"div_list(list1, list2) has not returned the correct result\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_list([1,2,3,4], [1,2,3,4]) == None\nassert     div_list([1,2,3,4], [1,2,0,4]) == [1,2,3,4]\nassert     div_list([1,2,3,4,0], [1,2,3,4]) == [1,2,3,4,0]\nassert     div_list([1,2,3,4,0], [1,2,3,4]) == [1,2,3,4,0]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nimport math\ndef div_list2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndiv_list([10, 20], [5, 8]) == [[2, 1], [3, 4]]\ndiv_list([10, 20], [2, 5]) == [[5, 2], [10, 8]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(div_list([1,2,3,4], [3,4,5]))\n\ndef div_list2(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef div_list2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert move_num(\"The numbers are 1, 3, 5\") == \"5, 3, 1\"\nassert move_num(\"2, 2, 2\") == \"2, 2, 2\"\nassert move_num(\"1\") == \"1\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num('1234abcd') == 'abcd1234'\nassert     move_num('12345abcde') == 'abcde12345'\nassert     move_num('4321cba') == 'cba4321'\nassert     move_num('aeiou') == 'ouaei'\nassert     move_num('ab') == 'ab'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num('Hello') == 'elloh'\nassert     move_num('1234') == '3412'\nassert     move_num('123') == '3123'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num('') == '', 'Empty String'\nassert     move_num('a') == 'a', 'One Character'\nassert     move_num('Hello') == 'elloHeH', 'All Capital Letters'\nassert     move_num('14') == '14', 'Number'\nassert     move_num('Lorem Ipsum') == 'LoremIpSum', 'All Letters'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_num(\"2[a]4[b]3[c]\") == \"a2[b]c3[a]\", \"incorrect output\"\nassert     move_num(\"3[a]2[c]4[b]\") == \"a3[b]c2[a]4\", \"incorrect output\"\nassert     move_num(\"3[a]2[c]4[b]\") == \"a2[c]3[b]4\", \"incorrect output\"\nassert     move_num(\"2[a]3[b]4\") == \"a3[b]2[a]4\", \"incorrect output\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ntest_str = 'BANANA'\nmove_num(test_str)\nassert test_str == 'BANANA'\n\nprint(\"OK\")\n\ndef move_str(strng):\n    '''\n    Write a function to move all the characters of given string to the end of the string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # iterate and add to the front\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            for j in range(i, len(test_str)):\n                if test_str[j].isdigit():\n                    continue\n                else:\n                    break\n            # join with next digit\n            test_str = test_str[0:i] + test_str[i:j+1] + test_str[j+1:]\n            break\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert move_num('Test') == 'eset'\n    assert move_num('1234') == '3412'\n    assert move_num('abcde') == 'deabc'\n    "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num(\"LoremIpsumdolorSitAmet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\") == \"Magna, sit amet, elit, tempor, incididunt, ut, labore, et, dolore, magna, aliqua.\"\nassert     move_num(\"LoremIpsumdolorSitAmet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\") == \"do eiusmod tempor, incididunt ut labore et dolore magna aliqua.\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([1,2,3]) == 3\nassert     largest_subset([1,2,3,4]) == 1\nassert     largest_subset([2,3,5]) == 3\nassert     largest_subset([6,9,3]) == 1\nassert     largest_subset([7,10,6]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_subset([]) == 0, 'Wrong answer'\nassert     largest_subset([2,4]) == 2, 'Wrong answer'\nassert     largest_subset([4,8,16]) == 3, 'Wrong answer'\nassert     largest_subset([4,8,16,32]) == 4, 'Wrong answer'\nassert     largest_subset([4,8,16,32,64]) == 5, 'Wrong answer'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([2,3,4]) == 4\nassert     largest_subset([2,3]) == 2\nassert     largest_subset([2,3,4,5,6]) == 5\nassert     largest_subset([2,3,4,5,6,7]) == 5\n\ndef largest_subset2(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a)==1:\n        return a[0]\n    \n    left = len(a)\n    a.sort()\n    print(a)\n    a.reverse()\n    print(a)\n    best = 0\n    for i in range(left):\n        if i==0:\n            best = a[i]\n            continue\n        if (best % a[i])==0:\n            best = a[i]\n            print(best)\n            break\n    return best\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef largest_subset(a):\n    '''\n    Given a list of numbers, return the size of the largest subset of\n    numbers that are all divisible by both of their neighbors.\n    '''\n    pass\n\n\n'''\nlargest_subset([1,2,3,4,5,6]) # should return 3\nlargest_subset([1,2,4,5,6]) # should return 2\nlargest_subset([1,2,3,4,5]) # should return 1\nlargest_subset([1,2,3,4]) # should return 0\nlargest_subset([1,2,3]) # should return 0\nlargest_subset([1,2]) # should return 0\nlargest_subset([]) # should return 0\nlargest_subset([3]) # should return 1\nlargest_subset([4,4,4]) # should return 1\nlargest_subset([4,4,4,4,4,4,4,4,4]) # should return 1\nlargest_subset([4,4,4,4,4,4,4,4,4,4,4]) # should return 1\nlargest_subset([2,2,2,2,2,2]) # should return 1\nlargest_subset([2,2,2,2]) # should return 1\nlargest_subset([2,2]) # should return 0\nlargest_subset([2,2,2]) # should return 0\nlargest_subset([2,2,2,2,2,2]) # should return 0\nlargest_subset([]) # should return 0\nlargest_subset([1]) # should return 0\nlargest_subset([2,2,2,2,2,2,2,2]) # should return 0\nlargest_subset([4,4,4]) # should return 0\nlargest_subset([4,4,4,4,4,4,4,4,4]) # should return 0\n'''\n\n'''\n    largest_subset([2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([3,4,5,6,8]) # should return 1\n    largest_subset([1,2,3,4,5,6]) # should return 3\n    largest_subset([1,2,3,4,5]) # should return 0\n    largest_subset([1,2,3]) # should return 0\n    largest_subset([1,2]) # should return 0\n    largest_subset([]) # should return 0\n    largest_subset([3]) # should return 1\n    largest_subset([4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([4,4,4]) # should return 0\n    largest_subset([4,4,4,4,4,4,4,4,4]) # should return 0\n    largest_subset([4,4,4,4,4,4,4,4,4,4,4]) # should return 0\n    largest_subset([2,2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([3,4,5,6,8]) # should return 1\n    largest_subset([1,2,3,4,5,6]) # should return 3\n    largest_subset([1,2,3,4,5]) # should return 0\n    largest_subset([1,2,3]) # should return 0\n    largest_subset([1,2]) # should return 0\n    largest_subset([]) # should return 0\n    largest_subset([3]) # should return 1\n    largest_subset([4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([4,4,4]) # should return 0\n    largest_subset([4,4,4,4,4,4,4,4,4]) # should return 0\n    largest_subset([4,4,4,4,4,4,4,4,4,4,4]) # should return 0\n    largest_subset([2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([3,4,5,6,8]) # should return 1\n    largest_subset([1,2,3,4,5,6]) # should return 3\n    largest_subset([1,2,3,4,5]) # should return 0\n    largest_subset([1,2,3]) # should return 0\n    largest_subset([1,2]) # should return 0\n    largest_subset([]) # should return 0\n    largest_subset([3]) # should return 1\n    largest_subset([4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([3,4,5,6,8]) # should return 1\n    largest_subset([1,2,3,4,5,6]) # should return 3\n    largest_subset([1,2,3,4,5]) # should return 0\n    largest_subset([1,2,3]) # should return 0\n    largest_subset([1,2]) # should return 0\n    largest_subset([]) # should return 0\n    largest_subset([3]) # should return 1\n    largest_subset([4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([4,4,4,4,4,4,4,4,4,4,4]) # should return 1\n    largest_subset([2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2]) # should return 1\n    largest_subset([2,2,2,2,2,2,2,2,2,2]) # should return 1\n   "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_subset([2, 4, 6, 8, 10, 12, 14]) == 2\nassert     largest_subset([2, 4, 6, 8, 10, 12, 14, 16]) == 2\nassert     largest_subset([1, 4, 6, 8, 10, 12, 14, 16]) == 3\nassert     largest_subset([1, 4, 6, 8, 10, 12, 14, 16, 18]) == 3\nassert     largest_subset([]) == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_subset([1,2,3,4,5]) == 0, \"The largest subset should be empty\"\nassert     largest_subset([1,2,3,4,6]) == 3, \"The largest subset should contain the largest pair\"\nassert     largest_subset([1,2,3,4,6,8]) == 5, \"The largest subset should contain the largest pair\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_subset([1,2,3,4,6,8]) == 8\nassert     largest_subset([2,2,2,2,2,2]) == 8\nassert     largest_subset([1,1,1,1,1,1]) == 6\nassert     largest_subset([1,2,3,4,6,8,9]) == 9\nassert     largest_subset([2,2,3,4,6,8,9]) == 6\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_median([], [], 0) == None\nassert     get_median([1], [], 0) == None\nassert     get_median([], [1], 0) == None\nassert     get_median([1], [1], 0) == 1\nassert     get_median([1], [2], 0) == 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    get_median([10, 20, 30], [1, 4, 15], 3) == \n    (15, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [1, 4, 15], 5) == \n    (20, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [1, 4, 15], 10) == \n    (15, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [1, 4, 15], 2) == \n    (1.5, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [1, 4, 15], 1) == \n    (10, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [1, 4, 15], 0) == \n    (10, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 3) == \n    (20, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 4) == \n    (20, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 5) == \n    (20, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 0) == \n    (10, True), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 6) == \n    (10, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 7) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 8) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 9) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 10) == \n    (10, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 11) == \n    (20, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 12) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 13) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 14) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 15) == \n    (20, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 16) == \n    (10, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 17) == \n    (10, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 18) == \n    (20, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 19) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 20) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 21) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 22) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 23) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 24) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 25) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 26) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 27) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 28) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 29) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 30) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 31) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 32) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 33) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 34) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 35) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 36) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 37) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 38) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 39) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 40) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 41) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 42) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 43) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 44) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 45) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 46) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 47) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 48) == \n    (30, False), 'Wrong value returned.'\n    get_median([10, 20, 30], [10, 20, 30], 49) == \n    (30"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_median([1,2,3], [2,3,4], 3) == 2.5\nassert     get_median([1,2,3], [4,5,6], 4) == 2.5\nassert     get_median([], [1], 0) == 1\nassert     get_median([1], [], 1) == 1\nassert     get_median([], [], 0) == None\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_median([1,2,3,4], [2,3,4,5], 5) == 3\nassert     get_median([5,6], [2,3,4,5], 5) == 4\nassert     get_median([2,2], [2,3,4,5], 2) == 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert get_median([], []) == 0\nassert get_median([1, 3, 5], [2]) == 2.5\nassert get_median([1, 3, 5], [2, 4]) == 2.5\nassert get_median([1, 3, 5], [2, 4, 6]) == 2.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # get the data\n    arr1 = [1,3,6,9,10]\n    arr2 = [2,4,5,8]\n    n = len(arr1)\n    print(f'n = {n}')\n    print(f'median of {arr1} and {arr2} is {get_median(arr1, arr2, n)}')"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_median([1, 3, 5], [2, 4, 6]) == 3\nassert     get_median([], [1, 3, 5]) == 1\nassert     get_median([1], [2, 3, 5]) == 2\nassert     get_median([1, 3, 5], []) == 1\nassert     get_median([1, 3, 5], [2, 4, 6]) == 3\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef add_them_all(a,b,*args):\n    return a+b+sum(args)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     nth_nums([1,2,3,4],1) == 1\nassert     nth_nums([1,2,3,4],2) == 4\nassert     nth_nums([1,2,3,4],3) == 9\nassert     nth_nums([1,2,3,4],4) == 16\nassert     nth_nums([1,2,3,4],5) == 25\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     nth_nums([1,2,3],1) == [1,2,3]\nassert     nth_nums([1,2,3],2) == [1,4,9]\nassert     nth_nums([1,2,3],3) == [1,8,27]\nassert     nth_nums([1,2,3],4) == [1,16,81]\nassert     nth_nums([1,2,3],5) == [1,32,243]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     nth_nums([1,2,3,4],1) == 1\nassert     nth_nums([1,2,3,4],2) == 9\nassert     nth_nums([1,2,3,4],3) == 36\nassert     nth_nums([1,2,3,4],4) == 64\nassert     nth_nums([1,2,3,4],5) == 81\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef nth_nums_test(nums):\n    nth_nums(nums, 1) == nums\n    nth_nums(nums, 2) == nums**2\n    nth_nums(nums, 3) == nums**3\n    nth_nums(nums, 4) == nums**4\n\nnth_nums_test([1, 2, 3, 4])\n\n\ndef flatten(lst):\n    '''\n    Write a function that flattens a list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     nth_nums([],1) == []\nassert     nth_nums([1],1) == [1]\nassert     nth_nums([2],1) == [2]\nassert     nth_nums([1,2],1) == [1, 2]\nassert     nth_nums([1,2,3],1) == [1, 2, 3]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     nth_nums([1,2,3],3) ==     [1, 4, 9], \"Wrong Answer\"\nassert nth_nums([2,4,6],2) ==     [4, 16], \"Wrong Answer\"\nassert nth_nums([3,9,27],2) ==     [9, 81], \"Wrong Answer\"\nassert nth_nums([4,16,64],2) ==     [16, 256], \"Wrong Answer\"\n\ndef digit_sum(n):\n    '''\n    Write a function to get the sum of the digits in an integer.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_odd_nums(nums):\n    '''\n    Write a function that takes in a list of integers and returns a list where the first half are even numbers and the second half are odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_upper('Hello') == False, \"First argument must be string\"\nassert is_upper('HELLO') == True, \"Second argument must be string\"\nassert is_upper('HELLO ') == True, \"Third argument must be string\"\nassert is_upper('HELLO\\n') == True, \"Fourth argument must be string\"\nassert is_upper('HELLO\\r') == True, \"Fifth argument must be string\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_upper('upper') == True\nis_upper('lower') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper(\"string\") == False\nassert     is_upper(\"StRiNg\") == True\nassert     is_upper(\"StRiNg\") == True\nassert     is_upper(\"sTRiNg\") == False\nassert     is_upper(\"STRiNg\") == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_upper(\"My\") == True, \"is_upper failed\"\nassert     is_upper(\"\") == False, \"is_upper failed\"\nassert     is_upper(\"My\") == True, \"is_upper failed\"\nassert     is_upper(\"My1\") == False, \"is_upper failed\"\nassert     is_upper(\"My1a\") == True, \"is_upper failed\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper('S') == True\nassert     is_upper('s') == False\nassert     is_upper('Sdsad') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('hello world') == 'HELLO WORLD', 'Not working properly'\nassert     is_upper('hello world!!!') == 'HELLO WORLD!!!', 'Not working properly'\nassert     is_upper('HELLO WORLD') == 'HELLO WORLD', 'Not working properly'\nassert     is_upper('HELLO WORLD!!!') == 'HELLO WORLD!!!', 'Not working properly'\nassert     is_upper('HELLO WORLD!!!-') == 'HELLO WORLD!!!-', 'Not working properly'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper(\"I'M A PROGRAMMER\") == True, \"is_upper did not return the correct result\"\nassert     is_upper(\"I'm a programmer\") == False, \"is_upper did not return the correct result\"\nassert     is_upper(\"Programmer\") == True, \"is_upper did not return the correct result\"\nassert     is_upper(\"Programmer\") == False, \"is_upper did not return the correct result\"\nassert     is_upper(\"Hi I'm programmer\") == True, \"is_upper did not return the correct result\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_words(string):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3,4,5,6]) ==[5,6,3,4,1,2]\nassert swap_List([1,2,3]) == [3,2,1]\nprint (\"successfully passed\")\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a'] \nassert     swap_List(['a', 'b', 'c', 'd', 'e']) == ['d', 'e', 'b', 'c', 'a']\n\ndef replace_mid_List(newList): \n    '''\n    Write a python function to replace the mid element of a given list with any value.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,4,3,2,1], \"swap_List failed\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([5, 4, 3, 2, 1]) == [5, 1, 4, 3, 2], \"Input is not a valid list\"\nassert     swap_List([]) == [], \"Input is not a valid list\"\nassert     swap_List([1, 2, 3, 4]) == [1, 4, 2, 3], \"Input is not a valid list\"\nassert swap_List([-2, 5, 0, -6]) == [-2, -6, 5, 0], \"Input is not a valid list\"\n\n\ndef swap_List(list): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(list) == 0:\n        return list\n    list[0], list[-1] = list[-1], list[0]\n    return list\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [2,3,4,5,6,1]\n\ndef even_odd(n): \n    '''\n    Write a python function to return whether the number is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1], \"Wrong output\"\nassert swap_List([10,20,30,40,50]) == [50,40,30,20,10], \"Wrong output\"\nassert swap_List([100,200,300,400,500]) == [500,400,300,200,100], \"Wrong output\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nswap_List([1,2,3,4,5,6]) == [2,1,4,3,6,5]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [3,2,5,6,1,4]\nassert     swap_List([4,5,6,7,8,9]) == [6,7,8,9,4,5]\nassert     swap_List([6,7,8,9,4,5]) == [5,4,9,8,7,6]\nassert     swap_List([1]) == [1]\nassert swap_List([]) == []\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert triangle_area(1) == 0.5\nassert triangle_area(2) == 0.5\nassert triangle_area(3) == 0.25"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(1) == 1\nassert     triangle_area(2) == 1.5\nassert     triangle_area(3) == 2\nassert     triangle_area(4) == 2.5\nassert     triangle_area(5) == 3\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint triangle_area(5) == math.sqrt(5)*5/2\nprint triangle_area(4) == math.sqrt(4)*4/2\nprint triangle_area(6) == math.sqrt(6)*6/2\nprint triangle_area(2) == math.sqrt(2)*2\nprint triangle_area(1) == math.sqrt(1)*1\nprint triangle_area(0) == 0\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(10) == 5.7777777777777778\nassert     triangle_area(1) == 1\nassert     triangle_area(0) == 0"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(r=1) == 3.0, 'Wrong output'\nassert     triangle_area(r=2) == 4.0, 'Wrong output'\nassert     triangle_area(r=3) == 6.0, 'Wrong output'\nassert     triangle_area(r=4) == 10.0, 'Wrong output'\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_First_Missing([1,2,3]) == 1, \"Smallest Missing Number 1\"\nassert     find_First_Missing([2,2]) == 1, \"Smallest Missing Number 2\"\nassert     find_First_Missing([3,2,5]) == 2, \"Smallest Missing Number 3\"\nassert     find_First_Missing([3,2,4,5]) == 4, \"Smallest Missing Number 4\"\nassert     find_First_Missing([1,2,3,4,5]) == None, \"Smallest Missing Number 5\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_First_Missing([1,4,7,9,10]) == 5\nassert     find_First_Missing([1,4,7,9,10],start=0,end=4) == 3\nassert     find_First_Missing([1,4,7,9,10],start=0,end=5) == 2\nassert     find_First_Missing([1,4,7,9,10],start=0,end=6) == 1\nassert     find_First_Missing([1,4,7,9,10],start=0,end=7) == 0\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([0,1,2,3,4]) == 2\nassert     find_First_Missing([0,1,2,3,4,7,8]) == 5\nassert     find_First_Missing([0,1,2,3,4,7,8],0,5) == 4\nassert     find_First_Missing([1,2,3,4,7,8]) == 0\nassert     find_First_Missing([1,2,3,4,7,8],0,5) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_First_Missing([]) == 1\nassert     find_First_Missing([1]) == 2\nassert     find_First_Missing([1,2,4]) == 3\nassert     find_First_Missing([1,2,4,5]) == 3\nassert     find_First_Missing([1,2,4,5,7]) == 3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([]) == 0, \"Empty array\"\nassert     find_First_Missing([-4, -2, 1, 5, 9, 11]) == 6, \"Test 1\"\nassert     find_First_Missing([4, 2, 1, 5, 9, 11]) == 7, \"Test 2\"\nassert     find_First_Missing([4, -2, 1, 5, 9, 11]) == 6, \"Test 3\"\nassert     find_First_Missing([4, -2, 1, 5, 9, -11]) == 6, \"Test 4\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # code here\n\n    if len(array)==0:\n        return -1\n    if start > end:\n        return -1\n    if start < 0 or end > len(array) or start >= end:\n        return -1\n    if len(array)==1:\n        return array[0]\n    mid = (start + end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid)\n    elif array[mid]<mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([1, 2, 3, 4, 5]) == 2, \"smallest missing is 2\"\nassert     find_First_Missing([1, 2, 3, 4, 5, 7, 8, 9, 10]) == 5, \"smallest missing is 5\"\nassert     find_First_Missing([1, 2, 3, 4, 5, 7, 8, 9, 10], start=2) == 1, \"smallest missing is 1\"\nassert     find_First_Missing([1, 2, 3, 4, 5, 7, 8, 9, 10], end=9) == 8, \"smallest missing is 8\"\nassert     find_First_Missing([1, 2, 3, 4, 5, 7, 8, 9, 10], start=1, end=8) == 6, \"smallest missing is 6\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith   ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith  ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr John Smith.') == 'Mr%20John%20Smith.'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     '%20' == replace_spaces(\"This is a sample string   with some spaces\")\nassert     'This is a sample string with some spaces%20' == replace_spaces(\"This is a sample string with some spaces\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces('Hello') == 'Hello'\nassert     replace_spaces('We are the champions') == 'We%20are%20the%20champions'\nassert     replace_spaces('I am the king') == 'I%20am%20the%20king'\nassert     replace_spaces('I am the king of the jungle') == 'I%20am%20the%20king%20of%20the%20jungle'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"%20\"\nassert     replace_spaces(\"I am John Smith\") == \"%20I%20am%20John%20Smith\"\nassert     replace_spaces(\"%20\") == \"%20\"\nassert     replace_spaces(\"%20%20\") == \"%20%20\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces('abc') == 'abc', 'incorrect result of replace_spaces(\"abc\")'\nassert     replace_spaces('abc') == 'abc', 'incorrect result of replace_spaces(\"  abc  \")'\nassert     replace_spaces('abc') == 'abc%20', 'incorrect result of replace_spaces(\"abc%20\")'\n\n\ndef replace_spaces_2(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    string = \"Mr John Smith    \"\n    replace_spaces(string)\n    print(string)"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"Mr John Smith    \")     == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Hello      world\")     == \"Hello%20%20world\"\nassert     replace_spaces(\"Hello     world\")     == \"Hello%20%20world\"\nassert     replace_spaces(\"Hello    world\")     == \"Hello%20%20world\"\nassert     replace_spaces(\"Hello   world\")     == \"Hello%20%20world\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces('abc') == 'abc'\nassert     replace_spaces(' abc') == '%20abc'\nassert     replace_spaces('abc%20') == 'abc%20'\nassert     replace_spaces('abc%20abc') == '%20abc%20abc'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces('Hello world') == 'Hello%20world'\nassert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello world') == 'hello%20world'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"pythondev\") == \"pythondev\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\"hahahah\") == \"ha%20ha\"\nassert     replace_spaces(\"abc\") == \"abc\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8], \"Wrong\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10], \"Wrong\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [2, 4, 6, 8, 10, 12, 14, 16, 18], \"Wrong\"\nassert     Split([]) == [], \"Wrong\"\nassert     Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 2, 4, 6, 8], \"Wrong\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Split([0,1,2,3]) == [0,2,4]\nassert     Split([0,1,2,3,4]) == [0,2,4]\nassert     Split([]) == []\nassert     Split([0]) == [0]\nassert     Split([0,3,4,5]) == [0,4,8]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([0,1,2,3,4,5,6,7,8]) == True, \"Wrong Answer: Split([0,1,2,3,4,5,6,7,8])\"\nassert     Split([0,9,3,4,5,6,7,8,8]) == False, \"Wrong Answer: Split([0,9,3,4,5,6,7,8,8])\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nSplit([10,20,30,40,50,60]) == [10, 20, 30]\nassert Split([10, 20, 30]) == [10, 20]\nassert Split([10, 20, 30, 40, 50, 60]) == [10, 20, 30, 40, 50, 60]\n\ndef is_even(number):\n    '''\n    Write a python function to check if a given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8], \"Wrong answer\"\n\nprint(\"Check complete\""
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert [1, 2, 3, 4, 5] == Split([1, 2, 3, 4, 5]) \n\nassert [] == Split([])"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert Split([1,2,3,4,5,6,7,8,9,10,11,12]) == [2,4,6,8,10,12]\nassert \nassert Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [2,4,6,8,10,12,14]\nassert\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(2, 4, 6, 8), (2, 4, 6, 8), (2, 4, 6, 8), (2, 4, 6, 8)]\n\n\n\ndef even_split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    pass\n\nassert even_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(2, 4, 6, 8), (2, 4, 6, 8)]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef Split_2(list): \n    '''\n    Write a python function to find the numbers which are even and multiple of 5.\n    '''\n    pass\n\nassert \n\ndef Sum(list): \n    '''\n    Write a python function to find sum of all the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_pair(pair):\n    '''\n    Write a function to check if the given pair is a pair of coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (0,1,0) == adjac((0,0,0),[])\nassert     ((1,2,2),(1,0,2)) == adjac(((1,2,2),(1,0,2)),[])\nassert     ((0,2,2),(0,1,2)) == adjac(((0,2,2),(0,1,2)),[(1,0,2)])\nassert     (1,2,2) == adjac((1,2,2),[])\nassert     (1,2,0) == adjac((1,2,2),[(0,0,2)])\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\n\ndef test_adjac():\n    # define a coordinate tuple\n    coord = (1, 2)\n    \n    # test 1\n    assert adjac(coord) == [\n    (2, 1),\n    (2, 2),\n    (2, 3),\n    (1, 2),\n    (1, 3),\n    (0, 2),\n    (0, 3),\n    (0, 4),\n    (1, 4),\n    (2, 4),\n    (3, 4)]\n\n    # test 2\n    "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\nTest case 1:')\nadj = adjac((2,3))\nprint(adj)\nassert (1,1) in adj\nassert (2,1) in adj\nassert (1,2) in adj\nassert (3,1) in adj\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('asdf   ;') == 'asdf_', \"Fail the test\"\nassert     replace_spaces('asdf   ;') == 'asdf_', \"Fail the test\"\nassert     replace_spaces('asdf_;') == 'asdf__', \"Fail the test\"\nassert     replace_spaces('asdf__;') == 'asdf_', \"Fail the test\"\nassert     replace_spaces('asdf_;') == 'asdf_', \"Fail the test\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('Helloworld') == 'Hello_world', 'Should be \"Hello_world\"'\nassert     replace_spaces('Helloworld ') == 'Helloworld', 'Should be \"Helloworld\"'\nassert     replace_spaces('Hello_world') == 'Hello_world', 'Should be \"Hello_world\"'\nassert     replace_spaces('Hello_world ') == 'Hello_world', 'Should be \"Hello_world\"'\nassert     replace_spaces('This is a test') == 'This_is_a_test', 'Should be \"This_is_a_test\"'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('Hey there! what the hell are you doing? hey!') == \"Hey_there_!_what_the_hell_are_you_doing_hey_!\", \"Wrong answer\"\nassert replace_spaces(' ') == '_', \"Wrong answer\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(\"This is a test string.\") ==     \"this_is_a_test_string\"\nassert     replace_spaces(\"I am testing python\") ==     \"i_am_testing_python\"\nassert     replace_spaces(\"The quick brown fox\") ==     \"the_quick_brown_fox\"\nassert     replace_spaces(\"pythons\") ==     \"pythons\"\nassert     replace_spaces(\"\") ==     \"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces(\" Hello World \") == \"hello_world\", \"error: Hello World!\"\nassert     replace_spaces(\" Hello World! \") == \"hello_world_!\", \"error: Hello World!\"\nassert     replace_spaces(\"     Hello World!     \") == \"hello_world_!\", \"error: Hello World!\"\nassert     replace_spaces(\"a b c  d e f\") == \"a_b_c_d_e_f\", \"error: Hello World!\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"         this    text   has    white spaces\") == 'this_text_has_white_spaces'\nassert     replace_spaces(\"this is   a     string with_spaces\") == 'this_is_a_string_with_underscores'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('lorem ipsum') == 'lorem_ipsum', 'incorrect'\nassert     replace_spaces('lorem ipsum') == 'lorem_ipsum', 'incorrect'\nassert     replace_spaces('lorem ipsum') == 'lorem_ipsum', 'incorrect'\nassert     replace_spaces('lorem ipsum') == 'lorem_ipsum', 'incorrect'\nassert     replace_spaces('lorem ipsum') == 'lorem_ipsum', 'incorrect'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces(\"Hello World\") == \"hello_world\", \"Test 1 failed\"\nassert     replace_spaces(\"hello world\") == \"hello_world\", \"Test 2 failed\"\nassert     replace_spaces(\"hello_world\") == \"hello_world\", \"Test 3 failed\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     \"-\" == replace_spaces(\"H\")\nassert     \"-\" == replace_spaces(\"h\")\nassert     \"_\" == replace_spaces(\"H\")\nassert     \"_\" == replace_spaces(\"h\")\nassert     \"H\" == replace_spaces(\"H\")\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_zero([]) == False, \"Wrong answer\"\nassert     move_zero([1,2,3,4,0,5,0,0]) == True, \"Wrong answer\"\nassert     move_zero([1,2,0,4,5,0,0,0]) == False, \"Wrong answer\"\nassert     move_zero([1,2,0,4,0,5,0,0]) == True, \"Wrong answer\"\nassert     move_zero([1,2,0,4,0,5,0,0,0]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    num_list = [0, 1, 2, 3, 0, 4, 5, 0, 0]\n    print(move_zero(num_list))\n    print(num_list)\n    num_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]\n    print(move_zero(num_list))\n    print(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([1,2,3,4,0,5,6]) == [1,2,3,4,5,6,0], \"Should move all zeroes to the end\"\nassert move_zero([1,2,3,4,0]) == [1,2,3,4,0], \"Should move all zeroes to the end\"\nassert move_zero([0,1,2,3,4,0]) == [0,1,2,3,4,0], \"Should move all zeroes to the end\"\nassert move_zero([0,0,1]) == [1], \"Should move all zeroes to the end\"\nassert move_zero([0,0,0,0]) == [0], \"Should move all zeroes to the end\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_zero([1,2,3,4,0,0,0,0,0]) == [1,2,3,4,0,0,0,0,0]\nassert     move_zero([0,1,0,2,0,3,0,4,0]) == [1,0,2,0,3,0,4,0,0]\nassert     move_zero([0,0,0,1,0,0,0,3,0,1]) == [0,0,0,1,0,0,0,3,0,1]\nassert     move_zero([]) == []\nassert     move_zero([0,0,0,0]) == [0,0,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_pos_neg(num_list):\n    '''\n    Write a python function to check if all the numbers in the given list are positive or negative. \n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([1, 2, 3, 4, 0, 5, 0, 6, 7, 0, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0], \"Fail\"\nassert     move_zero([1, 0, 2, 3, 0, 4, 5, 0, 6, 7, 0, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0], \"Fail\"\nassert     move_zero([1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 0, 0, 0], \"Fail\"\nassert     move_zero([1, 0, 2, 3, 0, 4, 5, 0, 6, 7, 0, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0], \"Fail\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_zero([1,2,0,3,0,5,0]) ==    [1,2,3,5,0,0,0],     \"should move all 0s to the end\"\nassert     move_zero([1,2,3,0,0,0,0]) ==    [1,2,3,0,0,0,0],     \"should move all 0s to the end\"\nassert     move_zero([0,0,0,0,0,0,0]) ==    [0,0,0,0,0,0,0],     \"should move all 0s to the end\"\nassert     move_zero([0,1,2,3,4,0,0]) ==    [0,1,2,3,4,0,0],     \"should move all 0s to the end\"\nassert     move_zero([1,0,0,0,0,0,0]) ==    [1,0,0,0,0,0,0],     \"should move all 0s to the end\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_zero([0, 1, 0, 1, 2, 0, 1, 2, 3]) == [0, 1, 1, 2, 2, 3, 0, 1, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_zero([0,1,0,3,12]) == [1,3,12,0,0], 'FAIL'\nassert     move_zero([0,0,1]) == [1,0,0], 'FAIL'\nassert     move_zero([0,0,0,0,0]) == [0,0,0,0,0], 'FAIL'\n\n\ndef find_matching(L, x):\n    '''\n    Write a python function to return the index of the first occurrence of x in the given list.\n    If x does not occur in the list, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_xor_Sum([-1, -2, 3], 3) == 8\nassert     pair_xor_Sum([-1, -2, 3], 4) == 2\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([1, 2, 3, 4], 4) == 5, \"Wrong\"\nassert     pair_xor_Sum([1, 2, 3, 4], 5) == 5, \"Wrong\"\nassert     pair_xor_Sum([1, 2, 3, 4, 5], 6) == 5, \"Wrong\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef pair_xor_Sum_correct_output(arr):\n    '''\n    The correct output is given below.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_xor_Sum([1,2,3,4]) == 7, \"Wrong Answer\"\nassert pair_xor_Sum([1,2,3,4]) == 7, \"Wrong Answer\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9],10) == 233168, \"Test #1 Failed\"\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9],10) == 233168, \"Test #2 Failed\"\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9],11) == 233168, \"Test #3 Failed\"\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9],10) == 233168, \"Test #4 Failed\"\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9],10) == 233168, \"Test #5 Failed\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\" :\n    #arr = [0,1,2,3,4,5,6,7]\n    n = len(arr)\n    print(pair_xor_Sum(arr,n))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_sort([]) == []\nassert     heap_sort([2, 5, 9]) == [2, 5, 9]\nassert     heap_sort([2, 5, 3, 7]) == [2, 3, 5, 7]\nassert     heap_sort([9, 8, 7, 6, 5, 4]) == [4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert hq.heapify([10,7,6,5,4,3,2,1]) == ([10,7,6,5,4,3,2,1], False), \"test case failed\"\nassert hq.heapify([10,9,8,7,6,5,4,3,2,1]) == ([10,9,8,7,6,5,4,3,2,1], False), \"test case failed\"\nassert hq.heapify([10,9,8,7,6,5,4,3,2,1]) == ([10,9,8,7,6,5,4,3,2,1], False), \"test case failed\"\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    length = len(iterable) - 1\n    while length!= 0:\n        iterable[0], iterable[length] = iterable[length], iterable[0]\n        length -= 1\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\na = [5,7,9,1,2]\nhq.heapify(a)\nprint(a)\n\nprint(hq.heappop(a))\nprint(a)\n\nprint(hq.heappop(a))\nprint(a)\n\nb = hq.heappop(a)\nprint(a)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_sort([4, 5, 1, 2, 3]) == [1, 2, 3, 4, 5]\nassert     heap_sort(['c', 'a', 'f', 'j', 'd', 'i', 'g']) == ['i', 'f', 'd', 'g', 'c', 'a', 'j']\nassert     heap_sort([4, 5, 1, 2, 3]) == [1, 2, 3, 4, 5]\nassert     heap_sort(['c', 'a', 'f', 'j', 'd', 'i', 'g']) == ['i', 'f', 'd', 'g', 'c', 'a', 'j']\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_sort([]) == []\nassert     heap_sort([1,2,3,4]) == [1,2,3,4]\nassert     heap_sort([3,2,1]) == [1,2,3]\nassert     heap_sort([2,4,6,1,3]) == [1,3,2,4,6]\nassert     heap_sort([-2,4,6,-1,3]) == [-1,3,2,4,6]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_sort([4, 1, 3, 2]) ==    [1, 2, 3, 4]\nassert     heap_sort([]) ==    []\nassert     heap_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_sort([3,2,1,5,4]) == [1,2,3,4,5]\nassert     heap_sort([3,-2,-1,5,4]) == [-2,-1,3,4,5]\nassert     heap_sort([-1,2,1,5,-4]) == [-4,-1,1,2,5]\nassert     heap_sort([1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     heap_sort([10, 12, 13, 15, 11, 17, 8, 12, 13, 11, 13, 14, 11, 13, 14]) == sorted([10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 16, 17, 18, 18, 13, 12, 13, 12])\nassert     heap_sort([-13, -1, -4, -3, -2, -5, -6, -9, -8, -7, -11]) == sorted([-11, -9, -7, -6, -5, -4, -3, -2, -1, -4, -3])\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(600,1000) == True, \"Input 2=600, Output should be True\"\nassert noprofit_noloss(1200,1200) == True, \"Input 2=1200, Output should be True\"\nassert noprofit_noloss(1200,2000) == False, \"Input 2=1200, Output should be False\"\nassert noprofit_noloss(2000,200) == True, \"Input 2=2000, Output should be True\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     noprofit_noloss(12.56, 13.5) == True\nassert     noprofit_noloss(1000.0, 999.0) == False\nassert     noprofit_noloss(1000.0, 1000.0) == False\nassert     noprofit_noloss(-2.56, -3.5) == True\nassert     noprofit_noloss(15, 20) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     noprofit_noloss(1000, 4000) == False, \"noprofit_noloss should return false\"\nassert     noprofit_noloss(1000, 2500) == True, \"noprofit_noloss should return true\"\nassert     noprofit_noloss(1000, 6000) == False, \"noprofit_noloss should return false\"\n\ndef noprofit_noloss2(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef profit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has profit and no loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(0.01,0) == True, \"Test 1 failed!\"\nassert     noprofit_noloss(0.01,0.01) == False, \"Test 2 failed!\"\n\ndef noprofit_noloss_2(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     noprofit_noloss(actual_cost=250,sale_amount=250) == True\nassert     noprofit_noloss(actual_cost=250,sale_amount=500) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(100,100) == True, \"Noprofit_noloss should be True\"\nassert     noprofit_noloss(100,1) == False, \"Noprofit_noloss should be False\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(30,10) == True \nassert     noprofit_noloss(30,11) == False \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     noprofit_noloss(100,20) == False \nassert     noprofit_noloss(100,2) == True \nassert     noprofit_noloss(1000000,100) == True \nassert     noprofit_noloss(100,0) == True \nassert     noprofit_noloss(100,10000) == False \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(10,5) == True\nassert     noprofit_noloss(30,10) == False\nassert     noprofit_noloss(25,15) == True\nassert     noprofit_noloss(50,20) == False\nassert     noprofit_noloss(90,55) == True\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_wind_chill():\n    print(\"Testing wind_chill()...\", end=\"\")\n    assert wind_chill(0,0) == 32.00\n    assert wind_chill(0,10) == 32.00\n    assert wind_chill(2,10) == 45.00\n    "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     wind_chill(20, 20) == 35.6\nassert     wind_chill(30, 10) == 14.5\nassert     wind_chill(20, 30) == 11.5\nassert     wind_chill(10, 30) == 7.3\nassert     wind_chill(10, -10) == -9.3\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(1.1,20)==36.5\nassert     wind_chill(3.2,10)==37.8\n\ndef intensity(t,u,v):\n    '''\n    Write a function to calculate the intensity given the wind velocity and temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     wind_chill(3, 20) == 4.92\nassert     wind_chill(0, 10) == -4.7\nassert     wind_chill(0, -10) == -5.5\nassert     wind_chill(3, -20) == 5.16\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     wind_chill(0.2, 30) == 7.23\nassert     wind_chill(0.2, 32) == 7.40\nassert     wind_chill(0.2, 33) == 7.43\nassert     wind_chill(0.2, 34) == 7.42\nassert     wind_chill(0.2, 35) == 7.45\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(30,30) == 37,     \"error 1\"\nassert     wind_chill(30,20) == 24,     \"error 2\"\nassert     wind_chill(30,10) == 18,     \"error 3\"\nassert     wind_chill(30,5) == 11,     \"error 4\"\nassert     wind_chill(30,0) == 4.68,     \"error 5\"\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     wind_chill(6,40) == 65\nassert     wind_chill(3,15) == 0\nassert     wind_chill(2,10) == -5\n\ndef wind_chill_approx(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Hint: The equation is given in the problem.\n    '''\n    #get the speed in m/s\n    v = v*(1.61*(273+t))**.16\n    #print('speed: ',v)\n    \n    #calculate the wind chill\n    wind_chill = 35.74 +.6215*t - 35.75*v**.16 +.4275*t**.16\n    \n    #round to the nearest integer\n    return int(round(wind_chill))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     wind_chill(30, 30) == 13.70, 'invalid test 1'\nassert     wind_chill(40, 30) == 13.59, 'invalid test 2'\nassert     wind_chill(10, 30) == 10.06, 'invalid test 3'\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(3,30) == 10.1\nassert     wind_chill(0,30) == -4.5\nassert     wind_chill(0,10) == -5\nassert     wind_chill(0,10) == -5\nassert     wind_chill(0,15) == -6\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(0,0) == -40, \"wrong\"\nassert     wind_chill(4,45) == 24, \"wrong\"\nassert     wind_chill(5,55) == 34, \"wrong\"\nassert     wind_chill(10,45) == 26, \"wrong\"\nassert     wind_chill(13,50) == 43, \"wrong\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam([]) == 0, 'Empty list'\nassert     sample_nam([]) == 0, 'One name'\nassert     sample_nam(['John']) == 1, 'One name'\nassert     sample_nam(['John', 'Jack']) == 2, 'Two names'\nassert     sample_nam(['John', 'Jack', 'Jill']) == 3, 'Three names'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam([\"Alice\",\"Bob\",\"Carol\"]) == 4, \"Error\"\nassert     sample_nam([\"Alice\",\"Bob\",\"Carol\"]) == 3, \"Error\"\nassert     sample_nam([\"Alice\",\"Bob\",\"Carol\"]) == 2, \"Error\"\nassert     sample_nam([\"Alice\",\"Bob\",\"Carol\"]) == 1, \"Error\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sample_nam(['adam', 'alex', 'grizzly', 'barry', 'barney']) == 4, \"incorrect\"\nassert     sample_nam(['adam', 'barry', 'bob', 'barney', 'alex']) == 5, \"incorrect\"\nassert     sample_nam(['adam', 'grizzly', 'barry', 'barney', 'alex']) == 6, \"incorrect\"\nassert     sample_nam(['grizzly', 'barry', 'barney', 'alex', 'adam']) == 7, \"incorrect\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam([\n    'abcd', 'defg', 'hijkl', 'hx', 'i', 'j', 'klm', 'n']) == 5\nassert sample_nam([\n    'abcd', 'defg', 'hijkl', 'hx', 'i', 'j', 'klm', 'n', 'qrst']) == 7\nassert sample_nam([\n    'abcd', 'defg', 'hijkl', 'hx', 'i', 'j', 'klm', 'n', 'qrst', 'uvw']) == 7\nassert sample_nam([\n    'abcd', 'defg', 'hijkl', 'hx', 'i', 'j', 'klm', 'n', 'qrst', 'uvw', 'y']) == 10\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\ndef check_palindrome(word):\n    '''\n    Write a function to check if a given word is a palindrome. A palindrome is a word that is the same forwards and backwards.\n    '''\n    pass\n    \ndef check_palindrome_recursive(word):\n    '''\n    Write a function to check if a given word is a palindrome. A palindrome is a word that is the same forwards and backwards.\n    '''\n    pass\n    "
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam([]) == 0, 'Empty list!'\nassert     sample_nam(['']) == 0, 'Empty string!'\nassert     sample_nam([\n    'a',\n    'b'\n]) == 2, 'One name!'\nassert     sample_nam([\n    'a',\n    'B'\n]) == 2, 'Two names!'\nassert     sample_nam([\n    'A',\n    'B',\n    'b'\n]) == 2, 'Three names!'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sample_nam([]) == 0\nassert     sample_nam([]) == 0\nassert     sample_nam(['james']) == 1\nassert     sample_nam(['james', 'Christopher']) == 2\nassert     sample_nam(['james', 'james']) == 2\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sample_nam([]) == 0, 'Empty list'\nassert     sample_nam([]) == 0, 'One element'\nassert     sample_nam(['peter']) == 1, 'One element'\nassert     sample_nam(['peter', 'bob']) == 3, 'Two elements'\nassert     sample_nam(['peter', 'bob', 'ram']) == 5, 'Three elements'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam([ 'alice', 'brian', 'charles', 'david' ]) == 8\nassert     sample_nam(['sam', 'andrew', 'pranav', 'kumar' ]) == 7\nassert     sample_nam([ 'chandler', 'james','michael','michelle','rebecca','sarah','sylvia', 'tracy' ]) == 11\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_common_words(sample_names, n):\n    '''\n    Write a function that takes a list of names, and a number of common words to return.\n    Use a dictionary to store the count of occurrences for each common word.\n    Return a list of all words that occur at least n times in sample_names.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis('This is ((')    ==    \"This is \"\nassert     remove_parenthesis('This is (()))')    ==    \"This is ()\"\nassert     remove_parenthesis('This is (() ) )')    ==    \"This is ()\"\nassert     remove_parenthesis('This is
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis(\"(f(g(x)))(h(y))\") == \"fghx\"\nassert     remove_parenthesis(\"f(g(x))h(y)\") == \"fghx\"\nassert     remove_parenthesis(\"f(g(x))(h(y))\") == \"fghx\"\nassert     remove_parenthesis(\"f(g(x))(h(y))(z)\") == \"fghx\"\nassert     remove_parenthesis(\"(f(g(x)))(h(y))(z)\") == \"fghx\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis(\"(Gfg)\") == \"Gfg\"\nassert     remove_parenthesis(\"(Gfg) e\") == \"Gfg e\"\nassert     remove_parenthesis(\"(Gfg) e (k)\") == \"Gfg e k\"\nassert     remove_parenthesis(\"(Gfg) e (k) (l)\") == \"Gfg e k l\"\nassert     remove_parenthesis(\"(Gfg) e (k) (l) (m)\") == \"Gfg e k l m\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis(\"()\") == \"\"\nassert     remove_parenthesis(\"())\") == \"\"\nassert     remove_parenthesis(\"(())((())())\") == \"()()()\"\nassert     remove_parenthesis(\"(()(()))\") == \"\"\nassert     remove_parenthesis(\"(())\") == \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis(\"Hello () world (a) (b) (c)\") == \"Hello world (a) (b) (c)\"\nassert     remove_parenthesis(\"(Hello World )\") == \"\"\nassert     remove_parenthesis(\"Hello world\") == \"Hello world\"\nassert     remove_parenthesis(\"Hello () world (a) (b) (c)\") == \"Hello world (a) (b) (c)\"\nassert     remove_parenthesis(\"Hello world (a) (b) (c)\") == \"Hello world (a) (b) (c)\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_parenthesis('ab (cd) ef') == 'ab ef'\nassert     remove_parenthesis('ab  (cd) ef') == 'ab ef'\nassert     remove_parenthesis('ab )(cd) ef') == 'ab ef'\nassert     remove_parenthesis('ab )(cd(ef') == 'ab ef'\nassert     remove_parenthesis('ab )(cd )ef') == 'ab ef'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_parenthesis('x=(6+8)') == 'x=6+8'\nassert \nremove_parenthesis('x=6+8') == 'x=6+8'\nassert \nremove_parenthesis('x=(6+8+9)') == 'x=6+8+9'\nassert \nremove_parenthesis('(6+8)=9') == '6+8=9'\nassert \nremove_parenthesis('6+8=9') == '6+8=9'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_parenthesis_start_end(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_parenthesis2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('()', '')\n    pass\n\nassert remove_parenthesis2('') == ''\nassert remove_parenthesis2('( )') == ''\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sentence_punctuation(sentence):\n    '''\n    Write a function which will remove the question mark, exclamation mark and stop words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_nonagonal(1)\nassert is_nonagonal(2)\nassert is_nonagonal(3)\nassert not is_nonagonal(4)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 3\nassert is_nonagonal(3) == 5\nassert is_nonagonal(4) == 7\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_nonagonal(1) == 1\n    is_nonagonal(5) == 3\n    is_nonagonal(100) == 106\n    is_nonagonal(0) == 0"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nonagonal(0) == 1\nassert     is_nonagonal(1) == 3\nassert     is_nonagonal(2) == 5\nassert     is_nonagonal(3) == 7\nassert     is_nonagonal(4) == 9\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_nonagonal(1) == 1, 'Wrong answer'\nassert     is_nonagonal(2) == 3, 'Wrong answer'\nassert     is_nonagonal(3) == 5, 'Wrong answer'\nassert     is_nonagonal(4) == 7, 'Wrong answer'\nassert     is_nonagonal(5) == 11, 'Wrong answer'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nis_nonagonal(1) == 1\nis_nonagonal(2) == 3\nis_nonagonal(3) == 5\nis_nonagonal(4) == 7\nis_nonagonal(5) == 11\nis_nonagonal(6) == 15\nis_nonagonal(7) == 21\nis_nonagonal(8) == 25\nis_nonagonal(9) == 29\nis_nonagonal(10) == 37\nis_nonagonal(11) == 45\nis_nonagonal(12) == 55\nis_nonagonal(13) == 65\nis_nonagonal(14) == 75\nis_nonagonal(15) == 85\nis_nonagonal(16) == 95\nis_nonagonal(17) == 105\nis_nonagonal(18) == 115\nis_nonagonal(19) == 125\nis_nonagonal(20) == 135\nis_nonagonal(21) == 145\nis_nonagonal(22) == 155\nis_nonagonal(23) == 165\nis_nonagonal(24) == 175\nis_nonagonal(25) == 185\nis_nonagonal(26) == 195\nis_nonagonal(27) == 205\nis_nonagonal(28) == 215\nis_nonagonal(29) == 225\nis_nonagonal(30) == 235\nis_nonagonal(31) == 245\nis_nonagonal(32) == 255\nis_nonagonal(33) == 285\nis_nonagonal(34) == 295\nis_nonagonal(35) == 305\nis_nonagonal(36) == 315\nis_nonagonal(37) == 325\nis_nonagonal(38) == 335\nis_nonagonal(39) == 345\nis_nonagonal(40) == 365\nis_nonagonal(41) == 385\nis_nonagonal(42) == 395\nis_nonagonal(43) == 405\nis_nonagonal(44) == 415\nis_nonagonal(45) == 425\nis_nonagonal(46) == 435\nis_nonagonal(47) == 445\nis_nonagonal(48) == 455\nis_nonagonal(49) == 465\nis_nonagonal(50) == 475\nis_nonagonal(51) == 485\nis_nonagonal(52) == 495\nis_nonagonal(53) == 505\nis_nonagonal(54) == 515\nis_nonagonal(55) == 525\nis_nonagonal(56) == 535\nis_nonagonal(57) == 545\nis_nonagonal(58) == 555\nis_nonagonal(59) == 565\nis_nonagonal(60) == 575\nis_nonagonal(61) == 585\nis_nonagonal(62) == 595\nis_nonagonal(63) == 605\nis_nonagonal(64) == 615\nis_nonagonal(65) == 625\nis_nonagonal(66) == 635\nis_nonagonal(67) == 645\nis_nonagonal(68) == 655\nis_nonagonal(69) == 665\nis_nonagonal(70) == 675\nis_nonagonal(71) == 685\nis_nonagonal(72) == 695\nis_nonagonal(73) == 705\nis_nonagonal(74) == 715\nis_nonagonal(75) == 725\nis_nonagonal(76) == 735\nis_nonagonal(77) == 745\nis_nonagonal(78) == 755\nis_nonagonal(79) == 765\nis_nonagonal(80) == 775\nis_nonagonal(81) == 785\nis_nonagonal(82) == 795\nis_nonagonal(83) == 805\nis_nonagonal(84) == 815\nis_nonagonal(85) == 825\nis_nonagonal(86) == 835\nis_nonagonal(87) == 845\nis_nonagonal(88) == 855\nis_nonagonal(89) == 865\nis_nonagonal(90) == 875\nis_nonagonal(91) == 885\nis_nonagonal(92) == 895\nis_nonagonal(93) == 905\nis_nonagonal(94) == 915\nis_nonagonal(95) == 925\nis_nonagonal(96) == 935\nis_nonagonal(97) == 945\nis_nonagonal(98) == 955\nis_nonagonal(99) == 965\nis_nonagonal(100) == 975\nis_nonagonal(101) == 985\nis_nonagonal(102) == 995\nis_nonagonal(103) == 1015\nis_nonagonal(104) == 1025\nis_nonagonal(105) == 1035\nis_nonagonal(106) == 1045\nis_nonagonal(107) == 1055\nis_nonagonal(108) == 1065\nis_nonagonal(109) == 1075\nis_nonagonal(110) == 1085\nis_nonagonal(111) == 1095\nis_nonagonal(112) == 1115\nis_nonagonal(113) == 1125\nis_nonagonal(114) == 1135\nis_nonagonal(115) == 1145\nis_nonagonal(116) == 1155\nis_nonagonal(117) == 11565\nis_nonagonal(118) == 11575\nis_nonagonal(119) == 11585\nis_nonagonal(120) == 11595\nis_nonagonal(121) == 11615\nis_nonagonal(122) == 11625\nis_nonagonal(123) == 11665\nis_nonagonal(124) == 11675\nis_nonagonal(125) == 11685\nis_nonagonal(126) == 11695\nis_nonagonal(127) == 11715\nis_nonagonal(128) == 11725\nis_nonagonal(129) == 11745\nis_nonagonal(130) == 11755\nis_nonagonal(131) == 11765\nis_nonagonal(132) == 11776\nis_nonagonal(133) == 11785\nis_nonagonal(134) == 11795\nis_nonagonal(135) == 11815\nis_nonagonal(136) == 11825\nis_nonagonal(137) == 11863\nis_nonagonal(138) == 11863\nis_nonagonal(139) == 11875\nis_nonagonal(140) == 11875\nis_nonagonal(141) == 11885\nis_nonagonal(142) == 11885\nis_nonagonal(143) == 11895\nis_nonagonal(144) == 11895\nis_nonagonal(145) == 11905\nis_nonagonal(146) == 11905\nis_nonagonal(147) == 11915\nis_nonagonal(148) == 11915\nis_nonagonal(149) == 11925\nis_nonagonal(150) == 11925\nis_nonagonal(151) == 11935\nis_nonagonal(152) == 11935\nis_nonagonal(153) == 11945\nis_nonagonal(154) == 11945\nis_nonagonal(155) == 11955\nis_nonagonal(156) == 11955\nis_nonagonal(157) == 11965\nis_nonagonal(158) == 11965\nis_nonagonal(159) == 11975\nis_nonagonal(160) == 11975\nis_nonagonal(161) == 11985\nis_nonagonal(162) == 11985\nis_nonagonal(163) == 11995\nis_nonagonal(164) == 11995\nis_nonagonal(165) == 12005\nis_nonagonal(166) == 12005\nis_nonagonal(167) == 12025\nis_nonagonal(168) == 12025\nis_nonagonal(169) == 12035\nis_nonagonal(170) == 12035\nis_nonagonal(171) == 12045\nis_nonagonal(172) == 12045\nis_nonagonal(173) == 12055\nis_nonagonal(174) == 12055\nis_nonagonal(175) == 12065\nis_nonagonal(176) == 12065\nis_nonagonal(177) == 12076\nis_nonagonal(178) == 12076\nis_nonagonal(179) == 12085\nis_nonagonal(180) == 12085\nis_nonagonal(181) == 12095\nis_nonagonal(182) == 12095\nis_nonagonal(183) == 12105\nis_nonagonal(184) == 12105\nis_nonagonal(185) == 12115\nis_nonagonal(18"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(is_nonagonal(0))\nprint(is_nonagonal(1))\nprint(is_nonagonal(2))\nprint(is_nonagonal(3))\nprint(is_nonagonal(4))\nprint(is_nonagonal(5))\nprint(is_nonagonal(6))\nprint(is_nonagonal(7))\nprint(is_nonagonal(8))\nprint(is_nonagonal(9))\nprint(is_nonagonal(10))"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_nonagonal(0) == 1\nassert is_nonagonal(1) == 2\nassert is_nonagonal(2) == 3\nassert is_nonagonal(3) == 4\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle('checkwordz_middle') == True\nassert text_match_wordz_middle('checkwordz_middleword') == False\nassert     text_match_wordz_middle('checkwordz_middlewordz') == True\nassert     text_match_wordz_middle('z_') == False\nassert     text_match_wordz_middle('word') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle('my string z') == True\nassert     text_match_wordz_middle('I want to use z') == False\nassert     text_match_wordz_middle('s') == False\nassert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('z') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('z')\nassert     not text_match_wordz_middle('zz')\nassert     not text_match_wordz_middle('zz')\nassert     not text_match_wordz_middle('zzz')\nassert     not text_match_wordz_middle('zzzz')\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle('Hello World') == 'Hello World'\nassert     text_match_wordz_middle('Hello World 123') == 'Hello World'\nassert     text_match_wordz_middle('hello world') == 'hello world'\nassert     text_match_wordz_middle('Hello World 123!') == 'Hello World!'\nassert     text_match_wordz_middle('Hello World! 123') == 'Hello World'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle('') == True\nassert     text_match_wordz_middle('this is a test') == False\nassert     text_match_wordz_middle('test') == True\nassert     text_match_wordz_middle('test test') == True\nassert     text_match_wordz_middle('test test test') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle(\"\") == False, \"The function text_match_wordz_middle should return False if the text is empty.\"\nassert     text_match_wordz_middle(\"\") == False, \"The function text_match_wordz_middle should return False if the text is empty.\"\nassert     text_match_wordz_middle(\"gagaga\") == True, \"The function text_match_wordz_middle should return True if the text has 'z' in the middle of the word.\"\nassert     text_match_wordz_middle(\"hello world\") == True, \"The function text_match_wordz_middle should return True if the text has 'z' in the middle of the word.\"\nassert     text_match_wordz_middle(\"gaga z\") == True, \"The function text_match_wordz_middle should return True if the text has 'z' in the middle of the word.\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    text_match_wordz_middle('z') == True\n    text_match_wordz_middle('zz') == True\n    text_match_wordz_middle('zzzzzzz') == True\n    text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle(\"z\") == True\nassert     text_match_wordz_middle(\"zz\") == True\nassert     text_match_wordz_middle(\"z\") == False\nassert     text_match_wordz_middle(\"zzz\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle('blackz dzaz black dzazdzaz') == False\nassert     text_match_wordz_middle('z zz dzaz zzdzaz') == True\nassert     text_match_wordz_middle('z zz dzazzzdzaz') == True\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_Array_Upto_K([0, 1, 2, 3, 4], 0) == []\nassert     reverse_Array_Upto_K([0, 1, 2, 3, 4], 1) == [4, 3, 2, 1]\nassert     reverse_Array_Upto_K([0, 1, 2, 3, 4], 2) == [3, 2, 1, 0]\nassert     reverse_Array_Upto_K([0, 1, 2, 3, 4], 3) == [1, 0, 2, 3]\nassert     reverse_Array_Upto_K([0, 1, 2, 3, 4], 4) == [2, 1, 0, 3]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_Array_Upto_K(input, 2) == None\nreverse_Array_Upto_K(input, 4) == None\nreverse_Array_Upto_K(input, 6) == None\n\n'''\n\nThe logic behind the approach is that we make use of the fact that\nin any given array we have two elements left and one element to the right. \nThe one element to the right we store in the current variable i.e. the variable t \nand the one element left we store in the variable l.\n\nLet us look at the example: input =[1,2,3,4,5] and the output would be: \n[5,4,3,2,1]\n\nBefore the input we store the value at l.\nAfter the input we store the value at t.\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_Array_Upto_K(input=[1,2,3,4,5], k=2) == [5,4,3,2,1], \"Wrong\"\nassert     reverse_Array_Upto_K(input=[1,2,3,4,5], k=1) == [5,4,3,2,1], \"Wrong\"\nassert     reverse_Array_Upto_K(input=[1,2,3,4,5], k=0) == [], \"Wrong\"\nassert     reverse_Array_Upto_K(input=[1,2,3,4,5], k=-1) == [], \"Wrong\"\nassert     reverse_Array_Upto_K(input=[1,2,3,4,5], k=10) == [], \"Wrong\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4], 1) == [4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4], 0) == [1,2,3,4]\nassert     reverse_Array_Upto_K([1,2,3,4], 3) == [1,2,3,4]\nassert     reverse_Array_Upto_K([1,2,3,4], 4) == [1,2,3,4]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 1) == [6,5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert reverse_Array_Upto_K([1, 2, 3, 4], 3) == [4, 3, 2, 1], \"error1\"\nassert reverse_Array_Upto_K([1, 2, 3, 4], 4) == [3, 2, 1], \"error2\"\nassert reverse_Array_Upto_K([1, 2, 3, 4], 5) == [], \"error3\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nreverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\n\n'''\n2) Get the sum of the first n positive integers, where n is a user input.\n'''\ndef get_sum_of_first_n(n):\n    '''\n    Write a python function to calculate the sum of first n positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not \nassert not \nassert not \nassert not \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 2) == [5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 4) == [5,4,3,2]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 6) == [5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple((),{}) == (())\nassert     add_dict_to_tuple((1,),{}) == (1,)\nassert     add_dict_to_tuple((1,2),{}) == (1,2)\nassert     add_dict_to_tuple((1,2,3),{}) == (1,2,3)\nassert     add_dict_to_tuple((1,2,3,4),{}) == (1,2,3,4)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple((1,2,3),{1:1, 2:2}) == (1,2,3,{1:1, 2:2})\n\n\ndef add_list_to_list(test_list, test_list_to_add):\n    '''\n    Write a function to add a list to the list. The output should be a list.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_dict_to_tuple(('a', 'b'), {'c':1, 'd':2, 'e':3}) == ('a', ('c', 1), ('d', 2), ('e', 3))\nassert     add_dict_to_tuple(('a', 'b'), {'c':1, 'e':3, 'f':4}) == ('a', ('c', 1), ('e', 3), ('f', 4))\nassert     add_dict_to_tuple(('a', 'b'), {'c':1, 'f':4, 'g':5}) == ('a', ('c', 1), ('e', 3), ('f', 4), ('g', 5))\nassert     add_dict_to_tuple(('a', 'b'), {'c':1, 'f':4, 'g':5, 'h':6}) == ('a', ('c', 1), ('e', 3), ('f', 4), ('g', 5), ('h', 6))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple((1,2,3), {'a':1, 'b':2}) == (1,2,3,{'a':1,'b':2})\nassert     add_dict_to_tuple((1,2,3), {'a':1, 'b':2,'c':3}) == (1,2,3,{'a':1,'b':2,'c':3})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple((1,2),{'name': 'A','number': '1'}) == (1,2,'A',1), \"Test 1 Failed\"\nassert     add_dict_to_tuple((1,2),{'name': 'B','number': '2'}) == (1,2,'B',2), \"Test 2 Failed\"\nassert     add_dict_to_tuple((1,2),{'name': 'C','number': '3'}) == (1,2,'C',3), \"Test 3 Failed\"\nassert     add_dict_to_tuple((1,2),{'name': 'D','number': '4'}) == (1,2,'D',4), \"Test 4 Failed\"\nassert     add_dict_to_tuple((1,2),{'name': 'E','number': '5'}) == (1,2,'E',5), \"Test 5 Failed\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple(('abc',), {}) == ('abc', )\nassert     add_dict_to_tuple(('abc',), {'a':1, 'b':2, 'c':3}) == ('abc', )\nassert     add_dict_to_tuple(('abc',), {'a':1, 'b':2, 'c':3, 'd':4}) == ('abc', )\nassert     add_dict_to_tuple(('abc',), {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == ('abc', )\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple( (1,2,3), {'A':1, 'B':2} ) == (1,2,3,'B':2,'A':1)\nassert     add_dict_to_tuple( (1,2,3), {'A':1, 'B':2, 'C':3} ) == (1,2,3,'B':2,'C':3,'A':1)\n\n'''\nWrite a function that takes a dictionary and a key and returns that key's value\n'''\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_dict_to_tuple((), {}) == ()\nassert     add_dict_to_tuple(((\"a\",),), {}) == ((\"a\",),)\nassert     add_dict_to_tuple(((\"a\",),), {\"a\":2}) == ((\"a\",), {\"a\":2})\nassert     add_dict_to_tuple(((\"a\",),), {\"a\":2, \"b\":3}) == ((\"a\",), {\"a\":2, \"b\":3})\nassert     add_dict_to_tuple(((\"a\",),), {\"a\":2, \"b\":3, \"c\":4}) == ((\"a\",), {\"a\":2, \"b\":3, \"c\":4})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple((), {}) == ()\nassert     add_dict_to_tuple((1,2,3), {}) == (1,2,3)\nassert     add_dict_to_tuple((1,2,3), {\"a\":1}) == (1,2,3)\nassert     add_dict_to_tuple((1,2,3), {\"a\":3}) == (1,2,3)\nassert     add_dict_to_tuple((1,2,3), {\"a\":4, \"b\":1}) == (1,2,3)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncost = [[2,2,6],\n        [1,7,7],\n        [4,5,7]]\nassert maxAverageOfPath(cost) == 19\n\ncost = [[1,2,3],\n        [1,2,3],\n        [1,2,3]]\nassert maxAverageOfPath(cost) == 2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maxAverageOfPath([[1,2,3],[4,5,6]]) == 4\nassert maxAverageOfPath([[1,2],[4,5]]) == 4\nassert maxAverageOfPath([[5,4,2],[1,3,6]]) == 8\nassert maxAverageOfPath([[5,4,2,5],[1,3,6,7],[4,5,6,7]]) == 9\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmaxAverageOfPath([[5,3,6],[6,4,5],[3,8,1]]) == 17.0\nassert maxAverageOfPath([[5,4,3],[6,4,3],[2,4,1]]) == 12.5\nassert maxAverageOfPath([[3,2,7,8,9,10,11],[11,12,10,9,8,7,6]]) == 23.75\nassert maxAverageOfPath([[2,3,5,4],[3,4,6,7],[4,5,6,8],[5,6,7,9]]) == 19.25\nassert maxAverageOfPath([[1,2,3,4,5,6,7],[4,5,6,7,8,9,10],[7,8,9,10,11,12,13],[10,11,12,13,14,15,16]]) == 37.5\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert maxAverageOfPath([[1,2,3],[4,5,6]]) == 6\nassert maxAverageOfPath([[1,1],[2,2],[3,3]]) == 2\nassert maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 2\nassert maxAverageOfPath([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == 2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 2\nassert     maxAverageOfPath([[1,2,5,10],[4,5,6,11],[7,8,9,12]]) == 7.5\nassert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 12/3\nassert     maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 3\nassert     maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 1"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maxAverageOfPath([[1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11,12],\n                            [13,14,15,16]]) == 25\nassert     maxAverageOfPath([[1,2,3],\n                            [4,5,6],\n                            [7,8,9]]) == 15\nassert     maxAverageOfPath([[1,2],\n                            [3,4],\n                            [5,6]]) == 5\nassert     maxAverageOfPath([[1,2],\n                            [3,4],\n                            [5,6]]) == 5\nassert     maxAverageOfPath([[1,2,3],\n                            [4,5,6],\n                            [7,8,9]]) == 20\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(maxAverageOfPath([[1,1,3,2,4,1,2],[1,2,1,4,1,5,2],[4,5,5,2,1,2,1]]))\nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maxAverageOfPath([[1, 3, 5], \n                            [8, 2, 4], \n                            [6, 7, 9]]) == 8.0, \"Should be 8\"\nassert     maxAverageOfPath([[1, 3, 5], \n                            [8, 2, 4], \n                            [6, 7, 9]]) == 12.0, \"Should be 12\"\nassert     maxAverageOfPath([[1, 2, 4, 8], \n                            [4, 3, 2, 1], \n                            [6, 5, 4, 3], \n                            [9, 7, 5, 6]]) == 13.0, \"Should be 13\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([\n    [1,2,3],\n    [4,6,5],\n    [7,8,6]\n]) == 10.0\nassert     maxAverageOfPath([\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n]) == 8.0\nassert     maxAverageOfPath([\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16]\n]) == 11.0\nassert     maxAverageOfPath([\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16]\n    ]) == 11.0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maxAverageOfPath(cost1) ==     4.0, \n    '>>> Failed: maxAverageOfPath'\nassert maxAverageOfPath(cost2) ==     4.0, \n    '>>> Failed: maxAverageOfPath'\nassert maxAverageOfPath(cost3) ==     4.0, \n    '>>> Failed: maxAverageOfPath'\n\nprint('PASSED: maxAverageOfPath')"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_data({'A': (1.5, 52.9), 'B': (1.6, 42.8), 'C': (1.4, 67.1)}, 2.2, 50) == {'A': (1.5, 52.9), 'C': (1.4, 67.1)}\nassert filter_data({'A': (1.5, 52.9), 'B': (1.6, 42.8), 'C': (1.4, 67.1)}, 2.2, 50) == {}\nassert filter_data({'A': (1.5, 52.9), 'B': (1.6, 42.8), 'C': (1.4, 67.1)}, 1.8, 100) == {'B': (1.6, 42.8), 'C': (1.4, 67.1)}\nassert filter_data({'A': (1.5, 52.9), 'B': (1.6, 42.8), 'C': (1.4, 67.1)}, 1.8, 100) == {}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_data({'stud1': (1.2,80),'stud2': (1.8,85),'stud3': (1.6,77)}, 1.2,80) == {'stud1': (1.2,80),'stud3': (1.6,77)}\n\nprint('\\033[32mAll the tests are passed!\\033[0m')"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_data({\n    'Peter': (1.72, 74.00),\n    'Isla': (1.68, 66.00),\n    'Sam': (1.70, 86.00),\n    'Lily': (2.00, 88.50)}, 1.70, 90) == {\n    'Peter': (1.72, 74.00),\n    'Lily': (2.00, 88.50),\n    'Sam': (1.70, 86.00)}, 'the result should be { \"Peter\": (1.72, 74.00), \"Lily\": (2.00, 88.50), \"Sam\": (1.70, 86.00) }'\nassert filter_data({\n    'Peter': (1.72, 74.00),\n    'Isla': (1.68, 66.00),\n    'Sam': (1.70, 86.00),\n    'Lily': (2.00, 88.50)}, 1.72, 70) == {\n    'Isla': (1.68, 66.00),\n    'Lily': (2.00, 88.50),\n    'Sam': (1.70, 86.00)}, 'the result should be { \"Isla\": (1.68, 66.00), \"Lily\": (2.00, 88.50), \"Sam\": (1.70, 86.00) }'\nassert filter_data({\n    'Peter': (1.72, 74.00),\n    'Isla': (1.68, 66.00),\n    'Sam': (1.70, 86.00),\n    'Lily': (2.00, 88.50)}, 1.70, 85) == {\n    'Isla': (1.68, 66.00),\n    'Sam': (1.70, 86.00)}, 'the result should be { \"Isla\": (1.68, 66.00), \"Sam\": (1.70, 86.00) }'\n\n'''\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == \"__main__\":\n    students = {'Harry':(170,80), 'Amelia':(160,80), 'Daniel':(180,90), 'John':(170,70), 'Charlie':(180,50), 'Peter':(180,80)}\n    min_h = 180\n    min_w = 70\n    print(filter_data(students,min_h,min_w))\n    assert {'Harry': ('170', '80'), 'John': ('170', '70')} == filter_data(students,min_h,min_w)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_data({'Peter':(189,90),'John':(170,70)},100,50) == {'John':(170,70)}\nassert     filter_data({'Peter':(189,90),'John':(170,70)},50,100) == {'Peter':(189,90)}\nassert     filter_data({'Peter':(189,90),'John':(170,70)},50,70) == {'John':(170,70)}\nassert     filter_data({'Peter':(189,90),'John':(170,70)},50,70) == {'Peter':(189,90)}\nassert     filter_data({'Peter':(189,90),'John':(170,70)},50,70) == {'Peter':(189,90)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint()\nprint('TEST CASE 1: Filter students who have height and weight above the minimum:')\ndata = {\n    'Aakash': (65.0, 180.0),\n    'Shikha': (70.0, 180.0),\n    'Pawan': (65.0, 180.0),\n    'Kunal': (70.0, 180.0),\n    'Shashank': (60.0, 180.0),\n    'Ajith': (65.0, 180.0),\n    'Arjun': (70.0, 180.0),\n    'Anish': (60.0, 180.0)\n}\n\nfilter_data(data, 60, 180)\nprint(data)\n\nprint()\nprint('TEST CASE 2: Filter students who have height and weight above the minimum:')\ndata = {\n    'Aakash': (65.0, 180.0),\n    'Shikha': (70.0, 180.0),\n    'Pawan': (65.0, 180.0),\n    'Kunal': (70.0, 180.0),\n    'Shashank': (60.0, 180.0),\n    'Ajith': (65.0, 180.0),\n    'Arjun': (70.0, 180.0),\n    'Anish': (60.0, 180.0)\n}\n\nfilter_data(data, 70, 180)\nprint(data)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data({'E.Shan': (1.79,80.20)}, 1.5, 1.5) == {'E.Shan': (1.79,80.20)}\nassert     filter_data({'E.Shan': (1.79,80.20)}, 1.5, 1.5) == {}\nassert filter_data({'A.Shanker': (1.8,85), 'B.Shanker': (1.75, 80), 'C.Shanker': (1.8,80)}, 1.5, 1.5) == {'B.Shanker': (1.75, 80), 'C.Shanker': (1.8,80)}\nassert filter_data({'A.Shanker': (1.8,85), 'B.Shanker': (1.75, 80), 'C.Shanker': (1.8,80)}, 1.5, 1.5) == {'A.Shanker': (1.8,85), 'C.Shanker': (1.8,80)}\nassert filter_data({'A.Shanker': (1.8,85), 'B.Shanker': (1.75, 80), 'C.Shanker': (1.8,80)}, 1.5, 1.5) == {'A.Shanker': (1.8,85), 'C.Shanker': (1.8,80)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_data({'Harry': (74,150), 'Rohan': (70,100), 'Harsh':(70,80)}, 150, 150) ==     {'Rohan', 'Harsh'}, 'Student 1'\nassert filter_data({'Harry': (74,150), 'Rohan': (70,100), 'Harsh':(70,80)}, 180, 60) == {}, 'Student 2'\nassert filter_data({'Harry': (74,150), 'Rohan': (70,100), 'Harsh':(70,80)}, 50, 160) == {'Harsh'}, 'Student 3'\nassert filter_data({'Harry': (74,150), 'Rohan': (70,100), 'Harsh':(70,80)}, 70, 120) == {'Harry', 'Harsh'}, 'Student 4'\nassert filter_data({'Harry': (74,150), 'Rohan': (70,100), 'Harsh':(70,80)}, 50, 50) == {'Rohan'}, 'Student 5'\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_data({'Student1':(78,70),'Student2':(85,74),'Student3':(90,60)}, 70, 70) ==     [\n    'Student1', 'Student3'],    \"The function should return a list of student names (the strings in the output)\"\nassert     filter_data({'Student1':(78,70),'Student2':(85,74),'Student3':(90,60)}, 60, 60) ==     [\n    'Student2'],    \"The function should return a list of student names (the strings in the output)\"\nassert     filter_data({'Student1':(78,70),'Student2':(85,74),'Student3':(90,60)}, 85, 90) ==     [\n    'Student1', 'Student3'],    \"The function should return a list of student names (the strings in the output)\"\nassert     filter_data({'Student1':(78,70),'Student2':(85,74),'Student3':(90,60)}, 0, 70) ==     [\n    'Student1'],    \"The function should return a list of student names (the strings in the output)\"\nassert     filter_data({'Student1':(78,70),'Student2':(85,74),'Student3':(90,60)}, 70, 0) ==     [\n    'Student2'],    \"The function should return a list of student names (the strings in the output)\"\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_same_pair([1,2,3,4,5],[1,2,3,4,5]) == 5, 'incorrect'\n    count_same_pair([1,2,3,4,5],[2,4,5,1,3]) == 4, 'incorrect'\n    count_same_pair([1,2,3,4,5,6],[1,2,3,4,5,6]) == 5, 'incorrect'\n    count_same_pair([1,2,3,4,5,6],[1,2,3,4,5,7]) == 5, 'incorrect'\n\ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_same_pair([1,2,1,3,1],    [1,2,1,3,1]) == 2, 'expected 2'\nassert     count_same_pair([1,2,1,3,1,4],    [1,2,1,3,1,4]) == 5, 'expected 5'\nassert     count_same_pair([1,1,1,1,1],        [1,2,1,3,1,4]) == 0, 'expected 0'\nassert     count_same_pair([1,1],                [1,2,1,3,1,4]) == 0, 'expected 0'\nassert     count_same_pair([1,2,3,1,1,1],    [1,2,3,1,1,1]) == 5, 'expected 5'\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_same_pair([1,1,1,2,2,3], [2,3,2,1,1,1]) == 2\nassert     count_same_pair([], []) == 0\nassert     count_same_pair([1,2,3], [1,2,3]) == 3\nassert     count_same_pair([1,2,3,1], [1,2,3]) == 2\nassert     count_same_pair([1,2,3,1,1,2,3], [1,2,3]) == 3\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_same_pair([1,2,3,4], [1,2,3,4]) == 1\nassert count_same_pair([1,2,3,4], [1,2,5,4]) == 1\nassert count_same_pair([1,2,3,4], [1,2,3,5]) == 1\nassert count_same_pair([1,2,3,4], [1,2,4,5]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_same_pair([1,1,1,1,1], [1,1,1,1,1]) == [0,0,0,0,0]\nassert     count_same_pair([1,1,1,1,1], [1,1,1,1,2]) == [0,1,1,0,0]\nassert     count_same_pair([1,2,1], [2,1]) == [1,1,1]\n\ndef pairs(nums):\n    '''\n    You are given a list of numbers. You can swap any two numbers. \n    Return the minimum number of swaps to sort the list in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_different_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have different values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_same_pair([1,2,3,1], [1,2,3,4]) == 4, \"Wrong answer\"\nassert     count_same_pair([1,2,3,2], [1,2,3,4]) == 4, \"Wrong answer\"\nassert     count_same_pair([2,2,3,4], [2,2,3,4]) == 4, \"Wrong answer\"\nassert     count_same_pair([1,2,3,2,2], [1,2,3,4]) == 4, \"Wrong answer\"\nassert     count_same_pair([1,2,3,1,2,3], [1,2,3,4]) == 6, \"Wrong answer\"\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1,2,3], [3,2,1]) == 2\nassert     count_same_pair([1,2,3,1,2,3], [3,2,1]) == 3\nassert     count_same_pair([1,2,3,1,2,3], [1,2,3]) == 1\nassert     count_same_pair([1,2,3,1,2,3], [2,1,3]) == 1\nassert     count_same_pair([1,2,3,1,2,3], [1,2,3,4]) == 3\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_same_pair([1,2,3,4,5], [1,1,2,3,5]) == 4\nassert count_same_pair([1,1,1,1,1], [1,1,1,1,1]) == 5\nassert count_same_pair([1,2,3,4,5,6], [1,1,2,3,5,6]) == 5\nassert count_same_pair([1,2,3,4,5,6], [1,1,2,3,5,6]) == 5\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_same_pair([1,2,3,4], [1,2,3,4]) == 1\nassert     count_same_pair([1,2,3,4], [1,4,3,2]) == 2\nassert     count_same_pair([1,2,3,4], [4,1,2,3]) == 0\nassert     count_same_pair([1,2,3,4], [1,2,3,3]) == 1\nassert count_same_pair([1,2,3,4], [1,2,3,4,2]) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Test pass\")\n\nprint(\"_____________________________________________\")\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power_base_sum(2, 4) == 10\nassert     power_base_sum(0.2, 1.2) == 1.2\nassert     power_base_sum(0.0, 1.0) == 1.0\nassert     power_base_sum(0.0, 0.0) == 0\nassert     power_base_sum(1, 2) == 10\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power_base_sum(2, 2) == 2\nassert     power_base_sum(2, 3) == 6\nassert     power_base_sum(2, 4) == 10\nassert     power_base_sum(3, 1) == 3\nassert     power_base_sum(3, 2) == 9\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \npower_base_sum(3, 4) == 54\npower_base_sum(3, 0) == 3\npower_base_sum(15, 0) == 15\npower_base_sum(1, 100) == 1\npower_base_sum(4, 9) == 144\npower_base_sum(3, -1) == 0\npower_base_sum(1, -10) == 1\npower_base_sum(1, -100) == 1\npower_base_sum(1, -1000) == 1\n\npower_base_sum(0, 0) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(3, 2) == 18, 'There is a mistake in the code'\nassert     power_base_sum(5, 2) == 5, 'There is a mistake in the code'\nassert     power_base_sum(5, -2) == 0, 'There is a mistake in the code'\nassert     power_base_sum(2341, 2) == 46, 'There is a mistake in the code'\nassert     power_base_sum(17, 2) == 17, 'There is a mistake in the code'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef power_base_sum_2(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n\n    while power > 0:\n        sum += (base ** power) % 10\n        power -= 1\n\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power_base_sum(base = 27, power = 10) == 243\nassert     power_base_sum(base = 5, power = -9) == 25\nassert     power_base_sum(base = 0, power = 1) == 0\nassert     power_base_sum(base = 0, power = -1) == 0\nassert     power_base_sum(base = 37, power = -3) == 274\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation('Well done \"Jane\"') == \"Jane\"\nassert    extract_quotation('Hi, I\\'m Jane') == \"I'm Jane\"\nassert    extract_quotation('Hi, Jane') == \"Jane\"\nassert    extract_quotation('Hi, \"Jane\") == \"Jane\"\nassert    extract_quotation('Hi, \"Jane ') == \"Jane \"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation(    'Examining the library that is developed by the EECS project.') ==    'Examining the library that is developed by the EECS project.'\nassert     extract_quotation(    'There are four ways to write a sentence.') ==    'There are four ways to write a sentence.'\nassert     extract_quotation(    'There are four ways to write a sentence.') ==    'There are four ways to write a sentence.'\nassert     extract_quotation(    'The new development of this library will be the key to developing a system') ==    'The new development of this library will be the key to developing a system'\nassert     extract_quotation(    'The new development of this library will be the key to developing a system') ==    'The new development of this library will be the key to developing a system'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation('This is a sample string \"with \" and \"quotation marks\"') == ['This', 'is', 'a','sample','string', 'with', 'quotation','marks']\nassert     extract_quotation('hi \"This\" is the message') == ['hi', 'This', 'is', 'the','message']\nassert     extract_quotation('The \"first\" and the \"second\"') == ['The', 'first', 'and', 'the','second']\nassert     extract_quotation('Hi \"I\"') == ['Hi', 'I']\nassert     extract_quotation('This is a \"sample string\" with \"quotation marks\"') == ['This', 'is', 'a','sample','string', 'with', 'quotation','marks']\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_quotation('this \"is\" a string') == 'is', 'Extraction of strings with quotes'\nassert     extract_quotation('this \"is\" a string') == 'is', 'Extraction of strings with quotes'\nassert     extract_quotation('this \"is\" a string') == 'is', 'Extraction of strings with quotes'\nassert     extract_quotation('this \"is\" a string') == 'is', 'Extraction of strings with quotes'\nassert     extract_quotation('this \"is\" a string') == 'is', 'Extraction of strings with quotes'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation(\"abc'def'ghi'jkl\") == 'abcdefghijkl', 'testing failed'\nassert     extract_quotation(\"'abc'def'ghi'jkl\") == 'abcdefghijkl', 'testing failed'\nassert     extract_quotation(\"'abc'def'ghij'jkl\") == 'abcdefghij', 'testing failed'\nassert     extract_quotation(\"'abc'def'ghij'jkl\") == 'abcdefghij', 'testing failed'\n\ndef split_string(input_string):\n    '''\n    Write a function to split the given string on the basis of white spaces and return a new string with each substring \n    concatenated with a white space.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nextract_quotation('Hi, my name is Jamzir') == \"my name is Jamzir\"\nassert extract_quotation('Hi, my name is Jamzir.') == \"my name is Jamzir.\"\nassert extract_quotation('Hi, my name is Jamzir.') == \"my name is Jamzir.\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef extract_quotation_with_number_of_words(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string\n    and then also returns the number of words in that string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_quotation(\"This is 'a' text, with single and double quotes'\") == \"This is 'a' text, with single and double quotes'\", \"Wrong\"\nassert    extract_quotation(\"This is 'a' text, with single and double quotes'\") == \"This is 'a' text, with single and double quotes'\", \"Wrong\"\nassert    extract_quotation(\"This is 'a' text, with single and double quotes'\") == \"This is 'a' text, with single and double quotes'\", \"Wrong\"\n\nprint(\"Test passed.\")\n\ndef extract_numbers(text2):\n    '''\n    Write a function to extract all numbers in the text\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_quotation('Hello, \"world\"') == \"Hello, world\"\nassert     extract_quotation('Hello, world') == 'Hello, world'\nassert     extract_quotation('\"Hello\"') == 'Hello'\nassert     extract_quotation('(Hello)') == 'Hello'\nassert     extract_quotation('Hello\"') == 'Hello'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation('He said \"Hello\" in the beginning and then he declared himself as a programmer.') == \"Hello\"\nassert extract_quotation('He said \"Hello\" in the beginning.') == \"\"\nassert extract_quotation('He said \"Hello\" in the beginning.') == \"\"\nassert extract_quotation('He said \"Hello\" in the beginning and then he declared himself as a programmer.') == \"Hello\"\nassert extract_quotation('\"Hello\"') == \"Hello\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1, 2, 3)) == (1, 2, 3, 6, 9, 12, 15, 18, 21, 24)\nassert     multiply_elements((4, 5, 6, 7)) == (4, 5, 6, 7, 20, 30, 42, 56, 70, 84, 108, 132, 156, 180, 210, 252, 336, 420, 504, 600)\nassert     multiply_elements((5, 10, 15, 20)) == (5, 10, 15, 20, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750)\nassert     multiply_elements((2, 3, 4, 5, 6)) == (2, 3, 4, 5, 6, 24, 36, 48, 60, 72, 96, 108, 120, 144, 180, 216, 243, 288, 324, 360)\nassert     multiply_elements((2, 3, 4, 5, 6, 7)) == (2, 3, 4, 5, 6, 7, 24, 36, 48, 60, 72, 96, 108, 120, 144, 180, 216, 243, 288, 324, 360)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3), \"1 * 2 * 3 is not the correct answer\"\nassert multiply_elements((2,3,4)) == (8,12,16), \"2 * 3 * 4 is not the correct answer\"\nassert multiply_elements((1,2,3,4)) == (1,2,3,4), \"4 * 1 * 2 * 3 is not the correct answer\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((1,2)) == (1,2)\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4)\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)\nassert     multiply_elements((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     multiply_elements((1,2,3,4,5,6,7)) == (1,2,3,4,5,6,7)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4)\nassert     multiply_elements((5,6,7,8)) == (5,6,7,8)\nassert     multiply_elements((9,10,11,12)) == (9,10,11,12)\nassert     multiply_elements((13,14,15,16)) == (13,14,15,16)\n\nprint('Test passed')\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((1,2,3)) == (3,6,9)\nassert     multiply_elements((2,3,5)) == (10,12,15)\nassert     multiply_elements((1.5,2.5,3.5)) == (3.75,6.75,9.75)\nassert     multiply_elements((2.2,3.3,5.2)) == (5.6,8.6,11.8)\nassert     multiply_elements((1.0,2.0,3.0)) == (3.0,6.0,9.0)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)\nassert     multiply_elements((1,2,3)) == (1,2,3,1,2,3)\nassert     multiply_elements((1,2,3,4)) == (1,2,3,4,1,2,3,4)\nassert     multiply_elements((1,2,3,4,5,6)) == (1,2,3,4,5,6,1,2,3,4,5,6)\nassert     multiply_elements((-1,-2,-3,4,5)) == (-1,-2,-3,4,5,-1,-2,-3,4,5)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((1,2,3,4)) == (2,4,6,8), \"Wrong return!\"\nassert     multiply_elements((1,2,3,4)) == (2,4,6,8), \"Wrong return!\"\nassert     multiply_elements((1,2,3,4)) == (2,4,6,8), \"Wrong return!\"\nassert     multiply_elements((1,2,3,4)) == (2,4,6,8), \"Wrong return!\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4)\nassert     multiply_elements((2,2,2,2)) == (4,4,4,4)\nassert     multiply_elements((3,3,3,3)) == (9,9,9,9)\nassert     multiply_elements((4,4,4,4)) == (16,16,16,16)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_list_sol(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('All test cases were passed')\nprint(f'sum_list([0, 1, 2, 3, 4], [5, 6, 7, 8, 9]) = {sum_list([0, 1, 2, 3, 4], [5, 6, 7, 8, 9])}')\nassert sum_list([0, 1, 2, 3, 4], [5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert sum_list([1, 2], [3, 4]) == [4, 6]\nassert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\n\n'''\nQuestion 6\n'''\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3,4,5],[6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sum_list([-1,-2,-3],[-4,-5]) == [-1,-2,-3,-4,-5]\nassert     sum_list([1,2],[3,4]) == [4,6]\n\ndef sum_lst_dict(lst1,lst2):\n    '''\n    Write a function takes as input two lists, one is a list of dictionaries, \n    and the other is a list of lists, and returns a list of dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_list([1,2,3], [4,5,6])==[1,2,3,4,5,6]\nassert     sum_list([1,2,3], [5,6,7])==[1,2,3,6,7]\nassert     sum_list([2,4,6], [1,3,5])==[2,4,6,1,3,5]\nassert     sum_list([1,2,3], [0,4,5])==[1,2,3,0,4,5]\nassert     sum_list([1,2,3], [1,2,3])==[1,2,3,1,2,3]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_list([1,2,3,4], [10,20,30,40]) == [11,22,33,44]\nassert     sum_list([1,2,3,4], [10,20,30,40]) == [11,22,33,44]\nassert     sum_list([1,2,3,4], [10,20,30,40]) == [11,22,33,44]\n\nprint('You have passed all test cases!')"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9], 'Test 1 Failed!'\nassert     sum_list([1,2,3],[4,5,6,7]) == [5,7,9,14], 'Test 2 Failed!'\nassert     sum_list([1,2,3,4],[5,6,7,8]) == [6,8,10,12], 'Test 3 Failed!'\nassert     sum_list([1,2,3,4,5],[6,7,8,9,10]) == [7,10,13,16,19], 'Test 4 Failed!'\nassert     sum_list([1,2,3,4],[5,6,7,8,9]) == [6,8,10,12,14], 'Test 5 Failed!'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([-1,-2,-3],[1,2,3]) == [-2,-4,-6]\nassert     sum_list([1,2,3],[4,5,6,7]) == None\nassert     sum_list([1,2,3],[4,5,6,7,8]) == None\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9], \"Wrong answer\"\nassert     sum_list([1,2,3],[7,8,9]) == [2,3,9], \"Wrong answer\"\nassert     sum_list([1,2,3,4],[5,6,7,8]) == [6,8,10,12], \"Wrong answer\"\nassert     sum_list([1,2,3,4],[5,6,7,8]) == [6,8,10,12], \"Wrong answer\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_list([1,2,3,4], [1,2,3,4]) == [2,3,4,5], 'failed'\nassert     sum_list([1,2,3,4,5], [1,2,3,4,5]) == [2,3,4,5,6], 'failed'\nassert     sum_list([1,2,3,4], [2,3,4,5]) == [3,4,5,6], 'failed'\nassert     sum_list([1,2,3], [4,5,6,7]) == [5,7,9,11], 'failed'\nassert     sum_list([1,2,3], [3,4,5,6]) == [4,6,9,12], 'failed'\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates([1, 1, 1, 2, 2, 2, 3]) == False\nassert     consecutive_duplicates([1, 1, 1, 2, 2, 2, 2, 3, 3, 3]) == False\nassert     consecutive_duplicates([1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4]) == False\nassert consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 3, 3, 3]) == True\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11]) == False\nassert     consecutive_duplicates([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76,77,77,77,78,78,78,79,79,79,80,80,80,81,81,81,82,82,82,83,83,83,84,84,84,85,85,85,86,86,86,87,87,87,88,88,88,89,89,89,90,90,90,91,91,91,92,92,92,93,93,93,94,94,94,95,95,95,96,96,96,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,102,102,102,103,103,103,104,104,104,105,105,105,106,106,106,107,107,107,108,108,108,109,109,109,110,110,110,111,111,111,112,112,112,113,113,113,114,114,114,115,115,115,116,116,116,117,117,117,118,118,118,119,119,119,120,120,120,121,121,121,122,122,122,123,123,123,124,124,124,125,125,125,126,126,126,127,127,127,128,128,128,129,129,129,130,130,130,131,131,131,132,132,132,133,133,133,134,134,134,135,135,135,136,136,136,137,137,137,138,138,138,139,139,139,140,140,140,141,141,141,142,142,142,143,143,143,144,144,144,145,145,145,146,146,146,147,147,147,148,148,148,149,149,149,150,150,150,151,151,151,152,152,152,153,153,153,154,154,154,155,155,155,156,156,156,157,157,157,158,158,158,159,159,159,160,160,160,161,161,161,162,162,162,163,163,163,164,164,164,165,165,165,166,166,166,167,167,167,168,168,168,169,169,169,170,170,170,171,171,171,172,172,172,173,173,173,174,174,174,175,175,175,176,176,176,177,177,177,178,178,178,179,179,179,180,180,180,181,181,181,182,182,182,183,183,183,184,184,184,185,185,185,186,186,186,187,187,187,188,188,188,189,189,189,190,190,190,191,191,191,192,192,192,193,193,193,194,194,194,195,195,195,196,196,196,197,197,197,198,198,198,199,199,199,200,200,200,201,201,201,202,202,202,203,203,203,204,204,204,205,205,205,206,206,206,207,207,207,208,208,208,209,209,209,210,210,210,211,211,211,212,212,212,213,213,213,214,214,214,215,215,215,216,216,216,217,217,217,218,218,218,219,219,219,220,220,220,221,221,221,222,222,222,223,223,223,224,224,224,225,225,225,226,226,226,227,227,227,228,228,228,229,229,229,230,230,230,231,231,231,232,232,232,233,233,233,234,234,234,235,235,235,236,236,236,237,237,237,238,238,238,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,245,245,245,246,246,246,247,247,247,248,248,248,249,249,249,250,250,250,251,251,251,252,252,252,253,253,253,254,254,254,255,255,255,256,256,256,257,257,257,258,258,258,259,259,259,260,260,260,261,261,261,262,262,262,263,263,263,264,264,264,265,265,265,266,266,266,267,267,267,268,268,268,269,269,269,270,270,270,271,271,271,272,272,272,273,273,273,274,274,274,275,275,275,276,276,276,277,277,277,278,278,278,279,279,279,280,280,280,281,281,281,282,282,282,283,283,283,284,284,284,285,285,285,286,286,286,287,287,287,288,288,288,289,289,289,290,290,290,291,291,291,292,292,292,293,293,293,294,294,294,295,295,295,296,296,296,297,297,297,298,298,298,299,299,299,300,300,300,301,301,301,302,302,302,303,303,303,304,304,304,305,305,305,306,306,306,307,307,307,308,308,308,309,309,309,310,310,310,311,311,311,312,312,312,313,313,313,314,314,314,315,315,315,316,316,316,317,317,317,318,318,318,319,319,319,320,320,320,321,321,321,322,322,322,323,323,323,324,324"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nExtra 1\nGiven an unsorted array of integers, find the total of the minimum and maximum number of consecutive elements in the array\nthat can be rearranged so that the array is sorted.\n\nExample:\n\nInput: 1 2 3 4 5 6 7 8 10 11 12\nOutput: 9\nExplanation: The minimum number of elements to be rearranged in the array is 4.\nWe can rearrange the array as 4 1 3 2 5 6 7 8 10 11 12.\n'''"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert consecutive_duplicates([1, 1, 1, 1, 1, 1]) == 2\nassert consecutive_duplicates([1, 1, 2, 2, 3]) == 3\nassert consecutive_duplicates([1, 1, 2, 2, 3, 4, 4, 4]) == 4\nassert consecutive_duplicates([]) == 0\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef remove_consecutive_duplicates(nums):\n    '''\n    Write a function that takes in a list of integers and removes all consecutive duplicates in place. \n    You should do this in place (i.e., without creating a new list) and your function should do this \n    in-place (i.e., modify the input list \"in place\"). \n    Note that your function should work even if it is given a list with duplicate elements.\n    '''\n    pass\n\ndef remove_consecutive_duplicates_new(nums):\n    '''\n    Write a function that takes in a list of integers and removes all consecutive duplicates in place. \n    You should do this in place (i.e., without creating a new list) and your function should do this \n    in-place (i.e., modify the input list \"in place\"). \n    Note that your function should work even if it is given a list with duplicate elements.\n    '''\n    # check the correctness of consecutive_duplicates\n    # please write your code here\n    nums.sort()\n    print(nums)\n    for i in range(1,len(nums)):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n    return nums\n\ndef remove_consecutive_duplicates_more(nums):\n    '''\n    Write a function that takes in a list of integers and removes all consecutive duplicates in place. \n    You should do this in place (i.e., without creating a new list) and your function should do this \n    in-place (i.e., modify the input list \"in place\"). \n    Note that your function should work even if it is given a list with duplicate elements.\n    '''\n    # check the correctness of consecutive_duplicates\n    # please write your code here\n    nums.sort()\n    print(nums)\n    i = 1\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n        else:\n            i += 1\n    return nums\n\ndef remove_consecutive_duplicates_wrong(nums):\n    '''\n    Write a function that takes in a list of integers and removes all consecutive duplicates in place. \n    You should do this in place (i.e., without creating a new list) and your function should do this \n    in-place (i.e., modify the input list \"in place\"). \n    Note that your function should work even if it is given a list with duplicate elements.\n    '''\n    # check the correctness of consecutive_duplicates\n    # please write your code here\n    #print(nums)\n    nums_list = []\n    for i in nums:\n        if i not in nums_list:\n            nums_list.append(i)\n    return nums_list\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_pairs(nums, K):\n    '''\n    Write a function that returns all pairs of elements that sum up to K.\n    '''\n    pass\n\ndef is_unique_in_order(nums):\n    '''\n    Write a function that determines if a given array of integers is \n    in sorted order.\n    '''\n    pass\n\ndef find_k_largest_numbers(nums, k):\n    '''\n    Write a function that returns the k largest numbers in an array.\n    '''\n    pass\n\ndef find_k_smallest_numbers(nums, k):\n    '''\n    Write a function that returns the k smallest numbers in an array.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef consecutive_duplicates_helper(nums):\n    '''\n    Write a function that will generate consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return False\n    if len(nums) == 2:\n        if nums[0] == nums[1]:\n            return True\n        else:\n            return False\n    else:\n        if nums[0] == nums[1] and nums[0] == nums[2]:\n            return True\n        else:\n            return consecutive_duplicates_helper(nums[1:])"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([1, 1, 1, 2, 3, 4, 3, 4, 4]) == False\nassert consecutive_duplicates([1, 2, 3, 4, 5]) == True\nassert consecutive_duplicates([1, 2, 3, 4, 5, 2, 4, 5]) == True\nassert consecutive_duplicates([1, 2, 3, 4, 5, 2, 5]) == True\n\ndef min_max_sum(nums):\n    '''\n    Write a function that takes in a list of integers and returns a tuple with\n    the minimum value, maximum value, and sum of the entire list.\n    '''\n    # Using a for loop\n    total = sum(nums)\n    min_num = min(nums)\n    max_num = max(nums)\n    return (min_num, max_num, total)\n    "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cone(2,3) == 6\nassert     lateralsurface_cone(1,2) == math.pi\nassert     lateralsurface_cone(5,2) == 20\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (0.5*r**2*h**2) + (0.5*r**2*(h**2+2*r**2))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(lateralsurface_cone(6,4))\nprint(lateralsurface_cone(6,8))\nprint(lateralsurface_cone(5.5,2))\nprint(lateralsurface_cone(1.5,1))\nprint(lateralsurface_cone(2,4))\nprint(lateralsurface_cone(2,5))\nprint(lateralsurface_cone(2,7))\n\n\n\ndef cone_volume(r,h):\n    '''\n    Write a function to calculate volume of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert lateralsurface_cone(1,1) == math.pi\nassert lateralsurface_cone(0.3,1) == 0\nassert lateralsurface_cone(0.3,2) == 0\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert lateralsurface_cone(1.2,1) == 2.44\n\n\n\ndef lateral_surface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nThe main() function is provided for your reference.\nIt will not be graded.\n'''\ndef main():\n    # Try out the function\n    print(lateralsurface_cone(0,1))\n    print(lateralsurface_cone(0.5,0.5))\n    print(lateralsurface_cone(0.5,0.8))\n    print(lateralsurface_cone(1,1))\n    print(lateralsurface_cone(1,0.5))\n    print(lateralsurface_cone(1,0.8))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cone(1,5) == {'area': 0.5*math.pi*1**2,'height': 5,'radius': 1}\n\nassert     lateralsurface_cone(10,5) == {'area': 0.5*math.pi*1**2*10**2,'height': 5,'radius': 10}\n\nassert     lateralsurface_cone(100,5) == {'area': 0.5*math.pi*1**2*100**2,'height': 5,'radius': 100}\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar('abc') == 'abc:','replace_specialchar test failed'\nassert     replace_specialchar('abc.') == 'abc:','replace_specialchar test failed'\nassert     replace_specialchar('abc:') == 'abc:','replace_specialchar test failed'\nassert     replace_specialchar('abc:.') == 'abc:','replace_specialchar test failed'\nassert     replace_specialchar('abc:1') == 'abc:1','replace_specialchar test failed'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar('abc, def: a') == 'abc: def: a', 'wrong'\nassert replace_specialchar('abc, def, a') == 'abc, def, a', 'wrong'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar('acom,vnt')     ==    'ac:om,vnt',    'Error'\nassert     replace_specialchar('k:co:mil,k:com') ==    'k:co:mil,k:com',    'Error'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_specialchar(\"a,,b\") == \"a:b\"\nassert     replace_specialchar(\"a,b\") == \"a:b\"\nassert     replace_specialchar(\"a.,b\") == \"a:b\"\nassert     replace_specialchar(\"a.b\") == \"a:b\"\nassert     replace_specialchar(\"a:b\") == \"a:b\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar('') == ''\nassert     replace_specialchar('a') == 'a'\nassert     replace_specialchar('a:') == 'a:', 'a: should be \"a:\", not 'a:'. '\nassert     replace_specialchar('a:') == 'a:', 'a: should be \"a:\", not 'a:'. '\nassert     replace_specialchar('a: b:') == 'a: b:', 'a: should be \"a:\", not \"b:\". '\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_specialchar(\"comma\") == \":comma:\"\nassert     replace_specialchar(\"comma,comma,comma\") == \":comma:comma:comma:\"\nassert     replace_specialchar(\"\") == \"\"\nassert     replace_specialchar(\"h\") == \"h\"\nassert     replace_specialchar(\"h,h,h\") == \"h:h:h\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     re.sub(r\"\\s|,\", \":\", \"x:x:x:x:x\") == \"x:x:x:x:x\"\nassert     re.sub(r\"\\s|:\", \":\", \"x:x:x:x:x\") == \"x:x:x:x:x\"\nassert     re.sub(r\"\\s|\\.\", \".\", \"x:x:x:x:x:x\") == \"x:x:x:x:x:x\"\nassert     re.sub(r\"\\s|:|\\.|,|:\", \":\", \"x:x:x:x:x:x\") == \"x:x:x:x:x:x\"\n\nprint(re.sub(r\"\\s|,\", \":\", \"x:x:x:x:x\"))\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_specialchar(\"sdsdsdd\") == \":sdsdsdd\"\nassert     replace_specialchar(\"..\") == \"..\"\nassert     replace_specialchar(\"s,.ds.ds\") == \"s:.,ds.ds\"\nassert     replace_specialchar(\"..s,s,..\") == \"..s:s,..\"\nassert     replace_specialchar(\"a:b:c:d\") == \"a:b:c:d\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_specialchar('you are a: great! dude') == 'you: are: great! dude'\nassert     replace_specialchar('we are a: great! dude') == 'we: are: great! dude'\nassert     replace_specialchar('we are a great! dude') == 'we: are: great! dude'\nassert     replace_specialchar('i am a: great! dude') == 'i am a: great! dude'\n\ndef remove_specialchar(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_first_occurrence([0, 1, 2, 3], 3) == 3\nassert     find_first_occurrence([0, 1, 2, 3], 4) == -1\nassert     find_first_occurrence([0, 1, 2, 3], 1) == 0\nassert     find_first_occurrence([], 5) == -1\n\n'''\nWrite a function, find_all_occurrences, to find all occurrences of a given number in a sorted array.\n'''\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_first_occurrence([-3, 2, -3, 4, 5, 3, 4, 1], 3) == 2\nassert     find_first_occurrence([-3, 2, -3, 4, 5, 3, 4, 1], -1) == -1\nassert     find_first_occurrence([0, 1, 2, 3, 4, 5, 6, 7], 7) == 5\nassert     find_first_occurrence([0, 1, 2, 3, 4, 5, 6, 7], 5) == 6\n\nprint('TEST CASE 2 PASSED')\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_first_occurrence([1,2,3,4,5],1) == 0\n    find_first_occurrence([1,2,3,4,5],2) == 1\n    find_first_occurrence([1,2,3,4,5],3) == 2\n    find_first_occurrence([1,2,3,4,5],4) == 3\n    find_first_occurrence([1,2,3,4,5],5) == 4\n    find_first_occurrence([1,2,3,4,5],6) == 5\n    find_first_occurrence([1,2,3,4,5],7) == 5\n    find_first_occurrence([1,2,3,4,5],0) == 5\n    find_first_occurrence([1,2,3,4,5],9) == 5\n    find_first_occurrence([1,2,3,4,5],12) == 5\n\n'''\nYou are given a non-empty array of n integers, nums, and two integers a and b (1\u2264a\u2264n, 1\u2264b\u2264n).\nFind the number of subarrays (of length at least 2) whose sum equals b.\n'''\ndef find_number_of_subarrays(nums, a, b):\n    '''\n    Write a function that, given an array of integers and two integers, returns the number of\n    subarrays (of length at least 2) whose sum equals b.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_first_occurrence([], 6) == -1\nassert     find_first_occurrence([], -1) == -1\nassert     find_first_occurrence([1,2,3,4,5,6,7], 6) == 3\nassert     find_first_occurrence([1,2,3,4,5,6,7], 3) == 3\nassert     find_first_occurrence([1,2,3,4,5,6,7], 1) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_first_occurrence([1, 2, 2, 3, 4, 5, 6, 6], 2) == 2\n    find_first_occurrence([1, 2, 2, 3, 4, 5, 6, 6], 6) == 7\n\n'''\n2.\nWrite a function that takes in a sorted array of n integers, and an integer m.\nWrite a function that returns an array of all the numbers from arr that occur more than m times.\n'''\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_first_occurrence([2,1,3,5,3,2,4], 3) == 3\nassert     find_first_occurrence([2,1,3,5,3,2,4], 2) == 4\nassert     find_first_occurrence([2,1,3,5,3,2,4], 4) == 4\nassert     find_first_occurrence([2,1,3,5,3,2,4], 5) == 5\n\nprint('We are done here')\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1,2,3,3,4,4,4,5,5], 4) == 3, 'No. 3'\nassert     find_first_occurrence([1,2,3,3,4,4,4,5,5], 2) == 2, 'No. 2'\nassert     find_first_occurrence([1,2,3,3,4,4,4,5,5], 10) == -1, 'No. 10'\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_first_occurrence([1,3,5], 1)     ==     0\nassert     find_first_occurrence([1,3,5], 3)     ==     1\nassert     find_first_occurrence([1,3,5], 5)     ==     2\n\ndef find_all_occurrences(A, x):\n    '''\n    Write a function to find all occurrences of a given number in a given array.\n    '''\n    pass"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6,7,8], 1)== 0\nassert     find_first_occurrence([1,2,3,4,5,6,7,8], 4)== 3\nassert     find_first_occurrence([1,2,3,4,5,6,7,8], 8)== 7\nassert     find_first_occurrence([1,2,3,4,5,6,7,8], 12)== 6\nassert     find_first_occurrence([1,2,3,4,5,6,7,8], 2)== 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_Of_Subarray_Prod([1, 1, 4, 5]) == 14\nassert     sum_Of_Subarray_Prod([1, 2, 4, 5]) == 20\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 24\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 120\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    import time\n    \n    print(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]))\n    print(sum_Of_Subarray_Prod([1, 2, 3, 4]))\n    print(sum_Of_Subarray_Prod([1, 2, 3]))\n    print(sum_Of_Subarray_Prod([1, 2, 3, 4]))\n    print(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]))\n    print(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_Of_Subarray_Prod_1(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not (sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == \n                sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]))\nassert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 30\n\n'''\nhttps://practice.geeksforgeeks.org/problems/print-tree-level-order-traversal/1\nGiven a binary tree, print the tree in level order. For printing a node with data N, \nprint the data of N in a new line with only a single space between the data of N and \nthe next data of N.\nNote: You have to print all nodes for level order traversal, not just the nodes for \nthe tree.\n'''\n\n'''"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 12\nassert     sum_Of_Subarray_Prod([-1,-2,3,4]) == -2\nassert     sum_Of_Subarray_Prod([-3,2,-1,4]) == -6\nassert     sum_Of_Subarray_Prod([-4,-3,2,1]) == 2\nassert     sum_Of_Subarray_Prod([1,-2,3,-4]) == 12\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([2,3,4,5]) == 720\nassert     sum_Of_Subarray_Prod([5,7,3,2]) == 198\nassert     sum_Of_Subarray_Prod([1,2,3]) == 2*1*3\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 2*1*3*4\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 2*1*3*4*5\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_middle_bits(15) == [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]\n\ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # bit shift right/left\n    # -01  -10\n    # -11 -1\n    # -10 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -10 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0\n    # -11 -0\n    # -01 -0\n    # -10 -0"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_middle_bits(4) == (3 << 0 | 3 << 1)\nassert     set_middle_bits(5) == (2 << 0 | 3 << 1)\nassert     set_middle_bits(8) == (3 << 0 | 2 << 1)\nassert     set_middle_bits(7) == (3 << 0 | 2 << 1)\nassert     set_middle_bits(6) == (2 << 0 | 2 << 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_middle_bits(8) == 16, \"Should be 16, not %d\" % set_middle_bits(8)\nassert set_middle_bits(10) == 30, \"Should be 30, not %d\" % set_middle_bits(10)\nassert set_middle_bits(50) == 100, \"Should be 100, not %d\" % set_middle_bits(50)\nassert set_middle_bits(100) == 0, \"Should be 0, not %d\" % set_middle_bits(100)"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(33) == 0x4FF\nassert     set_middle_bits(64) == 0x4D2\nassert     set_middle_bits(100) == 0x41E\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_middle_bits(2) == 5\nassert     set_middle_bits(11) == 13\nassert     set_middle_bits(13) == 5\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(256) == 5, \"Should be 5\"\nassert     set_middle_bits(512) == 7, \"Should be 7\"\nassert     set_middle_bits(1024) == 10, \"Should be 10\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_middle_bits(11) == 1\nassert     set_middle_bits(01) == 0\nassert     set_middle_bits(100) == 1\nassert     set_middle_bits(1) == 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef left_insertion_pythonic(a, x):\n    # a[low] <= x < a[mid]\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return -1\n    elif a[i-1] == x:\n        return i-1\n    else:\n        return i\n\na = [2, 3, 4, 10, 40]\nx = 4\n\nassert left_insertion_pythonic(a, x) == 3\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert left_insertion([2,3,7,8,9], 2) == 2, \"Left insertion should return the index of the leftmost item which is smaller than x\"\nassert left_insertion([2,3,7,8,9], 1) == 0, \"Left insertion should return the index of the leftmost item which is smaller than x\"\nassert left_insertion([3,8,9], 2) == 1, \"Left insertion should return the index of the leftmost item which is smaller than x\"\nassert left_insertion([3,8,9], 1) == 0, \"Left insertion should return the index of the leftmost item which is smaller than x\"\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     left_insertion([1,3,4,6,8,9,12,13,14,15], 8) == 6\nassert     left_insertion([1,3,4,6,8,9,12,13,14,15], 7) == 4\nassert     left_insertion([1,3,4,6,8,9,12,13,14,15], 2) == 1\nassert     left_insertion([1,3,4,6,8,9,12,13,14,15], 5) == 5\nassert     left_insertion([1,3,4,6,8,9,12,13,14,15], 6) == 8\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nleft_insertion([1,2,3,4,6], 2) == 3\nassert left_insertion([1,2,3,4,6], 6) == 5\nassert left_insertion([1,2,3,4,6], 8) == 5\nassert left_insertion([1,2,3,4,6], 0) == 0\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_str('abc') == True\nassert check_str('Aabc') == True\nassert check_str('abc') == False\nassert check_str('abc') == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_str('a') == True\nassert     check_str('A') == True\nassert     check_str('ab') == False\nassert     check_str('Ab') == False\nassert     check_str('ABC') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_str('foo') == False, 'Expected: False'\nassert check_str('a') == True, 'Expected: True'\nassert check_str('aeiou') == True, 'Expected: True'\nassert check_str('aeiouAEIOU') == True, 'Expected: True'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_str('a') == True, \"Eeee!\"\nassert     check_str('e') == False, \"Eeee!\"\nassert     check_str('H') == True, \"Eeee!\"\nassert     check_str('h') == False, \"Eeee!\"\nassert     check_str('O') == True, \"Eeee!\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(r'[aeiouAEIOU][A-Za-z0-9_]*')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     geometric_sum(5) == 32\nassert     geometric_sum(9) == 288\n\ndef hanoi(n, start_rod, end_rod, temp_rod):\n    '''\n    n: a non-negative integer, the number of disks\n    start_rod, end_rod, temp_rod: non-negative integers, the indices of starting, ending and temp rod\n    '''\n    if n == 1:\n        print(start_rod, \"-->\", end_rod)\n    else:\n        hanoi(n-1, start_rod, temp_rod, end_rod)\n        print(start_rod, \"-->\", end_rod)\n        hanoi(n-1, temp_rod, end_rod, start_rod)\n\ndef hanoi(n):\n    '''\n    n: a non-negative integer, the number of disks\n    '''\n    if n == 1:\n        print(0)\n    else:\n        print(n-1)\n        hanoi(n-1, 1, 3, 2)\n        print(n-1)\n        hanoi(n-1, 2, 0, 1)\n\ndef hanoi(n, start_rod, end_rod, temp_rod):\n    if n == 0:\n        return\n    hanoi(n-1, start_rod, temp_rod, end_rod)\n    print(start_rod, end_rod)\n    hanoi(n-1, temp_rod, end_rod, start_rod)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     geometric_sum(2) == 2.0\nassert     geometric_sum(3) == 5.0\nassert     geometric_sum(4) == 15.0\nassert     geometric_sum(5) == 55.0\nassert     geometric_sum(6) == 150.0\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    geometric_sum(3) == 6\n    geometric_sum(5) == 15\n    geometric_sum(7) == 21\n    geometric_sum(0) == 1\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef geometric_sum2(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert geometric_sum(4) == 6\nassert geometric_sum(5) == 30\nassert geometric_sum(1) == 1"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 1.5\nassert     geometric_sum(3) == 1.666666666666666\nassert     geometric_sum(4) == 1.725\nassert     geometric_sum(5) == 1.888888888888889\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Index(1) == 1 \nassert     find_Index(2) == 2 \nassert     find_Index(3) == 3 \nassert     find_Index(4) == 4 \nassert     find_Index(5) == 5 \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_Index_Python(n):\n    '''\n    Your task is to return the index of smallest triangular number \n    with n digits. If no such triangular number exists, return -1.\n    '''\n    pass"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_Index(1) == 0\nfind_Index(2) == 1\nfind_Index(3) == 2\nfind_Index(4) == 3\nfind_Index(5) == 4\nfind_Index(6) == 5\nfind_Index(7) == 6\nfind_Index(8) == 7\nfind_Index(9) == 8\nfind_Index(10) == 9\nfind_Index(11) == 10\nfind_Index(12) == 11\nfind_Index(13) == 12\nfind_Index(14) == 13\nfind_Index(15) == 14\nfind_Index(16) == 15\nfind_Index(17) == 16\nfind_Index(18) == 17\nfind_Index(19) == 18\nfind_Index(20) == 19\nfind_Index(21) == 20\nfind_Index(22) == 21\nfind_Index(23) == 22\nfind_Index(24) == 23\nfind_Index(25) == 24\nfind_Index(26) == 25\nfind_Index(27) == 26\nfind_Index(28) == 27\nfind_Index(29) == 28\nfind_Index(30) == 29\nfind_Index(31) == 30\nfind_Index(32) == 31\nfind_Index(33) == 32\nfind_Index(34) == 33\nfind_Index(35) == 34\nfind_Index(36) == 35\nfind_Index(37) == 36\nfind_Index(38) == 37\nfind_Index(39) == 38\nfind_Index(40) == 39\nfind_Index(41) == 40\nfind_Index(42) == 41\nfind_Index(43) == 42\nfind_Index(44) == 43\nfind_Index(45) == 44\nfind_Index(46) == 45\nfind_Index(47) == 46\nfind_Index(48) == 47\nfind_Index(49) == 48\nfind_Index(50) == 49\nfind_Index(51) == 50\nfind_Index(52) == 51\nfind_Index(53) == 52\nfind_Index(54) == 53\nfind_Index(55) == 54\nfind_Index(56) == 55\nfind_Index(57) == 56\nfind_Index(58) == 57\nfind_Index(59) == 58\nfind_Index(60) == 59\nfind_Index(61) == 60\nfind_Index(62) == 61\nfind_Index(63) == 62\nfind_Index(64) == 63\nfind_Index(65) == 64\nfind_Index(66) == 65\nfind_Index(67) == 66\nfind_Index(68) == 67\nfind_Index(69) == 68\nfind_Index(70) == 69\nfind_Index(71) == 70\nfind_Index(72) == 71\nfind_Index(73) == 72\nfind_Index(74) == 73\nfind_Index(75) == 74\nfind_Index(76) == 75\nfind_Index(77) == 76\nfind_Index(78) == 77\nfind_Index(79) == 78\nfind_Index(80) == 79\nfind_Index(81) == 80\nfind_Index(82) == 81\nfind_Index(83) == 82\nfind_Index(84) == 83\nfind_Index(85) == 84\nfind_Index(86) == 85\nfind_Index(87) == 86\nfind_Index(88) == 87\nfind_Index(89) == 88\nfind_Index(90) == 89\nfind_Index(91) == 90\nfind_Index(92) == 91\nfind_Index(93) == 92\nfind_Index(94) == 93\nfind_Index(95) == 94\nfind_Index(96) == 95\nfind_Index(97) == 96\nfind_Index(98) == 97\nfind_Index(99) == 98\nfind_Index(100) == 99\nfind_Index(101) == 100\nfind_Index(102) == 101\nfind_Index(103) == 102\nfind_Index(104) == 103\nfind_Index(105) == 104\nfind_Index(106) == 105\nfind_Index(107) == 106\nfind_Index(108) == 107\nfind_Index(109) == 108\nfind_Index(110) == 109\nfind_Index(111) == 110\nfind_Index(112) == 111\nfind_Index(113) == 112\nfind_Index(114) == 113\nfind_Index(115) == 114\nfind_Index(116) == 115\nfind_Index(117) == 116\nfind_Index(118) == 117\nfind_Index(119) == 118\nfind_Index(120) == 119\nfind_Index(121) == 120\nfind_Index(122) == 121\nfind_Index(123) == 122\nfind_Index(124) == 123\nfind_Index(125) == 124\nfind_Index(126) == 125\nfind_Index(127) == 126\nfind_Index(128) == 127\nfind_Index(129) == 128\nfind_Index(130) == 129\nfind_Index(131) == 130\nfind_Index(132) == 131\nfind_Index(133) == 132\nfind_Index(134) == 133\nfind_Index(135) == 134\nfind_Index(136) == 135\nfind_Index(137) == 136\nfind_Index(138) == 137\nfind_Index(139) == 138\nfind_Index(140) == 139\nfind_Index(141) == 140\nfind_Index(142) == 141\nfind_Index(143) == 142\nfind_Index(144) == 143\nfind_Index(145) == 144\nfind_Index(146) == 145\nfind_Index(147) == 146\nfind_Index(148) == 147\nfind_Index(149) == 148\nfind_Index(150) == 149\nfind_Index(151) == 150\nfind_Index(152) == 151\nfind_Index(153) == 152\nfind_Index(154) == 153\nfind_Index(155) == 154\nfind_Index(156) == 155\nfind_Index(157) == 156\nfind_Index(158) == 157\nfind_Index(159) == 158\nfind_Index(160) == 159\nfind_Index(161) == 160\nfind_Index(162) == 161\nfind_Index(163) == 162\nfind_Index(164) == 163\nfind_Index(165) == 164\nfind_Index(166) == 165\nfind_Index(167) == 166\nfind_Index(168) == 167\nfind_Index(169) == 168\nfind_Index(170) == 169\nfind_Index(171) == 170\nfind_Index(172) == 171\nfind_Index(173) == 172\nfind_Index(174) == 173\nfind_Index(175) == 174\nfind_Index(176) == 175\nfind_Index(177) == 176\nfind_Index(178) == 177\nfind_Index(179) == 178\nfind_Index(180) == 179\nfind_Index(181) == 180\nfind_Index(182) == 181\nfind_Index(183) == 182\nfind_Index(184) == 183\nfind_Index(185) == 184\nfind_Index(186) == 185\nfind_Index(187) == 186\nfind_Index(188) == 187\nfind_Index(189) == 188\nfind_Index(190) == 189\nfind_Index(191) == 190\nfind_Index(192) == 191\nfind_Index(193) == 192\nfind_Index(194) == 193\nfind_Index(195) == 194\nfind_Index(196) == 195\nfind_Index(197) == 196\nfind_Index(198) == 197\nfind_Index(199) == 198\nfind_Index(200) == 199\nfind_Index(201) == 200\nfind_Index(202) == 201\nfind_Index(203) == 202\nfind_Index(204) == 203\nfind_Index(205) == 204\nfind_Index(206) == 205\nfind_Index(207) == 206\nfind_Index(208) == 207\nfind_Index(209) == 208\nfind_Index(210) == 209\nfind_Index(211) == 210\nfind_Index(212) == 211\nfind_Index(213) == 212\nfind_Index(214) == 213\nfind_Index(215) == 214\nfind_Index(216) == 215\nfind_Index(217) == 216\nfind_Index(218) == 217\nfin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_Index(3) == 0\nfind_Index(4) == 1\nfind_Index(5) == 2\nfind_Index(6) == 3\nfind_Index(7) == 4\nfind_Index(8) == 5\nfind_Index(9) == 6\nfind_Index(10) == 7\nfind_Index(11) == 8\nfind_Index(12) == 9\nfind_Index(13) == 10\nfind_Index(14) == 11\nfind_Index(15) == 12\nfind_Index(16) == 13\nfind_Index(17) == 14\nfind_Index(18) == 15\nfind_Index(19) == 16\nfind_Index(20) == 17\nfind_Index(21) == 18\nfind_Index(22) == 19\nfind_Index(23) == 20\nfind_Index(24) == 21\nfind_Index(25) == 22\nfind_Index(26) == 23\nfind_Index(27) == 24\nfind_Index(28) == 25\nfind_Index(29) == 26\nfind_Index(30) == 27\nfind_Index(31) == 28\nfind_Index(32) == 29\nfind_Index(33) == 30\nfind_Index(34) == 31\nfind_Index(35) == 32\nfind_Index(36) == 33\nfind_Index(37) == 34\nfind_Index(38) == 35\nfind_Index(39) == 36\nfind_Index(40) == 37\nfind_Index(41) == 38\nfind_Index(42) == 39\nfind_Index(43) == 40\nfind_Index(44) == 41\nfind_Index(45) == 42\nfind_Index(46) == 43\nfind_Index(47) == 44\nfind_Index(48) == 45\nfind_Index(49) == 46\nfind_Index(50) == 47\nfind_Index(51) == 48\nfind_Index(52) == 49\nfind_Index(53) == 50\nfind_Index(54) == 51\nfind_Index(55) == 52\nfind_Index(56) == 53\nfind_Index(57) == 54\nfind_Index(58) == 55\nfind_Index(59) == 56\nfind_Index(60) == 57\nfind_Index(61) == 58\nfind_Index(62) == 59\nfind_Index(63) == 60\nfind_Index(64) == 61\nfind_Index(65) == 62\nfind_Index(66) == 63\nfind_Index(67) == 64\nfind_Index(68) == 65\nfind_Index(69) == 66\nfind_Index(70) == 67\nfind_Index(71) == 68\nfind_Index(72) == 69\nfind_Index(73) == 70\nfind_Index(74) == 71\nfind_Index(75) == 72\nfind_Index(76) == 73\nfind_Index(77) == 74\nfind_Index(78) == 75\nfind_Index(79) == 76\nfind_Index(80) == 77\nfind_Index(81) == 78\nfind_Index(82) == 79\nfind_Index(83) == 80\nfind_Index(84) == 81\nfind_Index(85) == 82\nfind_Index(86) == 83\nfind_Index(87) == 84\nfind_Index(88) == 85\nfind_Index(89) == 86\nfind_Index(90) == 87\nfind_Index(91) == 88\nfind_Index(92) == 89\nfind_Index(93) == 90\nfind_Index(94) == 91\nfind_Index(95) == 92\nfind_Index(96) == 93\nfind_Index(97) == 94\nfind_Index(98) == 95\nfind_Index(99) == 96\nfind_Index(100) == 97\nfind_Index(101) == 98\nfind_Index(102) == 99\nfind_Index(103) == 100\nfind_Index(104) == 101\nfind_Index(105) == 102\nfind_Index(106) == 103\nfind_Index(107) == 104\nfind_Index(108) == 105\nfind_Index(109) == 106\nfind_Index(110) == 107\nfind_Index(111) == 108\nfind_Index(112) == 109\nfind_Index(113) == 110\nfind_Index(114) == 111\nfind_Index(115) == 112\nfind_Index(116) == 113\nfind_Index(117) == 114\nfind_Index(118) == 115\nfind_Index(119) == 116\nfind_Index(120) == 117\nfind_Index(121) == 118\nfind_Index(122) == 119\nfind_Index(123) == 120\nfind_Index(124) == 121\nfind_Index(125) == 122\nfind_Index(126) == 123\nfind_Index(127) == 124\nfind_Index(128) == 125\nfind_Index(129) == 126\nfind_Index(130) == 127\nfind_Index(131) == 128\nfind_Index(132) == 129\nfind_Index(133) == 130\nfind_Index(134) == 131\nfind_Index(135) == 132\nfind_Index(136) == 133\nfind_Index(137) == 134\nfind_Index(138) == 135\nfind_Index(139) == 136\nfind_Index(140) == 137\nfind_Index(141) == 138\nfind_Index(142) == 139\nfind_Index(143) == 140\nfind_Index(144) == 141\nfind_Index(145) == 142\nfind_Index(146) == 143\nfind_Index(147) == 144\nfind_Index(148) == 145\nfind_Index(149) == 146\nfind_Index(150) == 147\nfind_Index(151) == 148\nfind_Index(152) == 149\nfind_Index(153) == 150\nfind_Index(154) == 151\nfind_Index(155) == 152\nfind_Index(156) == 153\nfind_Index(157) == 154\nfind_Index(158) == 155\nfind_Index(159) == 156\nfind_Index(160) == 157\nfind_Index(161) == 158\nfind_Index(162) == 159\nfind_Index(163) == 160\nfind_Index(164) == 161\nfind_Index(165) == 162\nfind_Index(166) == 163\nfind_Index(167) == 164\nfind_Index(168) == 165\nfind_Index(169) == 166\nfind_Index(170) == 167\nfind_Index(171) == 168\nfind_Index(172) == 169\nfind_Index(173) == 170\nfind_Index(174) == 171\nfind_Index(175) == 172\nfind_Index(176) == 173\nfind_Index(177) == 174\nfind_Index(178) == 175\nfind_Index(179) == 176\nfind_Index(180) == 177\nfind_Index(181) == 178\nfind_Index(182) == 179\nfind_Index(183) == 180\nfind_Index(184) == 181\nfind_Index(185) == 182\nfind_Index(186) == 183\nfind_Index(187) == 184\nfind_Index(188) == 185\nfind_Index(189) == 186\nfind_Index(190) == 187\nfind_Index(191) == 188\nfind_Index(192) == 189\nfind_Index(193) == 190\nfind_Index(194) == 191\nfind_Index(195) == 192\nfind_Index(196) == 193\nfind_Index(197) == 194\nfind_Index(198) == 195\nfind_Index(199) == 196\nfind_Index(200) == 197\nfind_Index(201) == 198\nfind_Index(202) == 199\nfind_Index(203) == 200\nfind_Index(204) == 201\nfind_Index(205) == 202\nfind_Index(206) == 203\nfind_Index(207) == 204\nfind_Index(208) == 205\nfind_Index(209) == 206\nfind_Index(210) == 207\nfind_Index(211) == 208\nfind_Index(212) == 209\nfind_Index(213) == 210\nfind_Index(214) == 211\nfind_Index(215) == 212\nfind_Index(216) == 213\nfind_Index(217) == 214\nfind_Index(218) == 215\nfind_Index(219) == 216\nfind_Index(220) == 217\nfin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    find_Index(5) == 0\n    find_Index(9) == 1\n    find_Index(10) == 2\n\ndef is_Square(n):\n    '''\n    Write a python function to check whether n is a perfect square or not. https://www.geeksforgeeks.org/is-there-a-perfect-square/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_Index(1) == 1\nfind_Index(2) == 2\nfind_Index(3) == 3\nfind_Index(5) == 4\nfind_Index(6) == 5\nfind_Index(10) == 6\nfind_Index(11) == 7\nfind_Index(20) == 8\nfind_Index(26) == 9\nfind_Index(27) == 10\nfind_Index(28) == 11\nfind_Index(29) == 12\nfind_Index(30) == 13\nfind_Index(31) == 14\nfind_Index(32) == 15\nfind_Index(33) == 16\nfind_Index(34) == 17\nfind_Index(35) == 18\nfind_Index(36) == 19\nfind_Index(37) == 20\nfind_Index(38) == 21\nfind_Index(39) == 22\nfind_Index(40) == 23\nfind_Index(41) == 24\nfind_Index(42) == 25\nfind_Index(43) == 26\nfind_Index(44) == 27\nfind_Index(45) == 28\nfind_Index(46) == 29\nfind_Index(47) == 30\nfind_Index(48) == 31\nfind_Index(49) == 32\nfind_Index(50) == 33\nfind_Index(51) == 34\nfind_Index(52) == 35\nfind_Index(53) == 36\nfind_Index(54) == 37\nfind_Index(55) == 38\nfind_Index(56) == 39\nfind_Index(57) == 40\nfind_Index(58) == 41\nfind_Index(59) == 42\nfind_Index(60) == 43\nfind_Index(61) == 44\nfind_Index(62) == 45\nfind_Index(63) == 46\nfind_Index(64) == 47\nfind_Index(65) == 48\nfind_Index(66) == 49\nfind_Index(67) == 50\nfind_Index(68) == 51\nfind_Index(69) == 52\nfind_Index(70) == 53\nfind_Index(71) == 54\nfind_Index(72) == 55\nfind_Index(73) == 56\nfind_Index(74) == 57\nfind_Index(75) == 58\nfind_Index(76) == 59\nfind_Index(77) == 60\nfind_Index(78) == 61\nfind_Index(79) == 62\nfind_Index(80) == 63\nfind_Index(81) == 64\nfind_Index(82) == 65\nfind_Index(83) == 66\nfind_Index(84) == 67\nfind_Index(85) == 68\nfind_Index(86) == 69\nfind_Index(87) == 70\nfind_Index(88) == 71\nfind_Index(89) == 72\nfind_Index(90) == 73\nfind_Index(91) == 74\nfind_Index(92) == 75\nfind_Index(93) == 76\nfind_Index(94) == 77\nfind_Index(95) == 78\nfind_Index(96) == 79\nfind_Index(97) == 80\nfind_Index(98) == 81\nfind_Index(99) == 82\nfind_Index(100) == 83\nfind_Index(101) == 84\nfind_Index(102) == 85\nfind_Index(103) == 86\nfind_Index(104) == 87\nfind_Index(105) == 88\nfind_Index(106) == 89\nfind_Index(107) == 90\nfind_Index(108) == 91\nfind_Index(109) == 92\nfind_Index(110) == 93\nfind_Index(111) == 94\nfind_Index(112) == 95\nfind_Index(113) == 96\nfind_Index(114) == 97\nfind_Index(115) == 98\nfind_Index(116) == 99\nfind_Index(117) == 100\nfind_Index(118) == 101\nfind_Index(119) == 102\nfind_Index(120) == 103\nfind_Index(121) == 104\nfind_Index(122) == 105\nfind_Index(123) == 106\nfind_Index(124) == 107\nfind_Index(125) == 108\nfind_Index(126) == 109\nfind_Index(127) == 110\nfind_Index(128) == 111\nfind_Index(129) == 112\nfind_Index(130) == 113\nfind_Index(131) == 114\nfind_Index(132) == 115\nfind_Index(133) == 116\nfind_Index(134) == 117\nfind_Index(135) == 118\nfind_Index(136) == 119\nfind_Index(137) == 120\nfind_Index(138) == 121\nfind_Index(139) == 122\nfind_Index(140) == 123\nfind_Index(141) == 124\nfind_Index(142) == 125\nfind_Index(143) == 126\nfind_Index(144) == 127\nfind_Index(145) == 128\nfind_Index(146) == 129\nfind_Index(147) == 130\nfind_Index(148) == 131\nfind_Index(149) == 132\nfind_Index(150) == 133\nfind_Index(151) == 134\nfind_Index(152) == 135\nfind_Index(153) == 136\nfind_Index(154) == 137\nfind_Index(155) == 138\nfind_Index(156) == 139\nfind_Index(157) == 140\nfind_Index(158) == 141\nfind_Index(159) == 142\nfind_Index(160) == 143\nfind_Index(161) == 144\nfind_Index(162) == 145\nfind_Index(163) == 146\nfind_Index(164) == 147\nfind_Index(165) == 148\nfind_Index(166) == 149\nfind_Index(167) == 150\nfind_Index(168) == 151\nfind_Index(169) == 152\nfind_Index(170) == 153\nfind_Index(171) == 154\nfind_Index(172) == 155\nfind_Index(173) == 156\nfind_Index(174) == 157\nfind_Index(175) == 158\nfind_Index(176) == 159\nfind_Index(177) == 160\nfind_Index(178) == 161\nfind_Index(179) == 162\nfind_Index(180) == 163\nfind_Index(181) == 164\nfind_Index(182) == 165\nfind_Index(183) == 166\nfind_Index(184) == 167\nfind_Index(185) == 168\nfind_Index(186) == 169\nfind_Index(187) == 170\nfind_Index(188) == 171\nfind_Index(189) == 172\nfind_Index(190) == 173\nfind_Index(191) == 174\nfind_Index(192) == 175\nfind_Index(193) == 176\nfind_Index(194) == 177\nfind_Index(195) == 178\nfind_Index(196) == 179\nfind_Index(197) == 180\nfind_Index(198) == 181\nfind_Index(199) == 182\nfind_Index(200) == 183\nfind_Index(201) == 184\nfind_Index(202) == 185\nfind_Index(203) == 186\nfind_Index(204) == 187\nfind_Index(205) == 188\nfind_Index(206) == 189\nfind_Index(207) == 190\nfind_Index(208) == 191\nfind_Index(209) == 192\nfind_Index(210) == 193\nfind_Index(211) == 194\nfind_Index(212) == 195\nfind_Index(213) == 196\nfind_Index(214) == 197\nfind_Index(215) == 198\nfind_Index(216) == 199\nfind_Index(217) == 200\nfind_Index(218) == 201\nfind_Index(219) == 202\nfind_Index(220) == 203\nfind_Index(221) == 204\nfind_Index(222) == 205\nfind_Index(223) == 206\nfind_Index(224) == 207\nfind_Index(225) == 208\nfind_Index(226) == 209\nfind_Index(227) == 210\nfind_Index(228) == 211\nfind_Index(229) == 212\nfind_Index(230) == 213\nfind_Index(231) == 214\nfind_Index(232) == 215\nfind_Index(233) == 216\nfind_Index(234) == 217\nfind_Index(235) == 218\nfin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_Index(0) == 0\nassert find_Index(1) == 1\nassert find_Index(2) == 2\nassert find_Index(3) == 3\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Index(0) == 0\nassert     find_Index(2) == 0\nassert     find_Index(3) == 1\nassert     find_Index(6) == 3\nassert     find_Index(10) == 3\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Index(2) == 0\nassert     find_Index(3) == 1\nassert     find_Index(4) == 2\nassert     find_Index(5) == 3\nassert     find_Index(6) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Index(1) == 1\nassert     find_Index(2) == 1\nassert     find_Index(3) == 2\nassert     find_Index(4) == 2\nassert     find_Index(5) == 3\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_dict(('a', 1, 2, 'b')) == {'a': 1, 'b': 2}\n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple containing adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple-with-adjacent-elements/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 2: 3, 3: 4, 4: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 2: 3, 3: 4, 4: 5}\nassert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6}\nassert tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 2: 3, 3: 4, 4: 5}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict(('a', 1, 'b', 2, 'c', 3)) == {'a': 1, 'b': 2, 'c': 3}, \"Fail: tuple_to_dict should return a dictionary, given a tuple.\"\n\ndef remove_duplicates(tup):\n    '''\n    Write a function to remove duplicates in a given tuple. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4)) == {1:2, 2:3, 3:4}\nassert tuple_to_dict((3, 4, 5, 6, 7, 8)) == {3:4, 4:5, 5:6, 6:7, 7:8}\nassert tuple_to_dict((3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)) == {3:4, 4:5, 5:6, 6:7, 7:8, 8:9, 9:10, 10:11, 11:12, 12:13, 13:14, 14:15, 15:16, 16:17, 17:18}"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}\nassert     tuple_to_dict((1, 2, 3)) == {1: 2, 2: 3, 3: None}\nassert     tuple_to_dict((1, 2)) == {1: 2, 2: None}\nassert     tuple_to_dict((1)) == {1: None}\nassert     tuple_to_dict((2, 2, 4, 4, 3)) == {2: 4, 4: 3}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_dict((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == {1: (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)}\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 2: 3, 3: 4, 4: 5}, \"Incorrect result\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert tuple_to_dict((1,2,3)) == {1: 2, 2: 3, 3: None}, \\\n\"tuple_to_dict should return a dictionary with (1,2) -> 2 and (2,3) -> 3 and (3,None) -> None\"\nassert tuple_to_dict((1,2,3,3,4,4)) == {1: 2, 2: 3, 3: 4, 4: 4}, \\\n\"tuple_to_dict should return a dictionary with (1,2) -> 2 and (2,3) -> 3 and (3,4) -> 4 and (4,None) -> None\""
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict(('A','B','C','D')) == {'A':'B','B':'C','C':'D'}\n\ndef tuple_to_list_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same(\"abcde\") == False, \"There are some errors in your code.\"\nassert all_Characters_Same(\"abce\") == False, \"There are some errors in your code.\"\nassert all_Characters_Same(\"abcd\") == False, \"There are some errors in your code.\"\nassert all_Characters_Same(\"abc\") == False, \"There are some errors in your code.\"\nassert all_Characters_Same(\"ABC\") == True, \"There are some errors in your code.\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert all_Characters_Same('a') == False\nassert all_Characters_Same('bb') == False\nassert all_Characters_Same('aaaaaaaaaaaaaaaaaaaaaaaa') == False\nassert all_Characters_Same('a') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Characters_Same('abc') == True\nassert     all_Characters_Same('aba') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same(\"hello\")     == False,    \"Verify true for 'hello'\"\nassert     all_Characters_Same(\"hello\")     == False,    \"Verify false for 'goodbye'\"\nassert     all_Characters_Same(\"krishna\")     == True,    \"Verify true for 'krishna'\"\nassert     all_Characters_Same(\"krishna\")     == True,    \"Verify true for 'krishna'\"\nassert     all_Characters_Same(\"hello world\")     == False,    \"Verify true for 'hello world'\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Characters_Same('a') == True\nassert     all_Characters_Same('ab') == False\nassert     all_Characters_Same('aaa') == True\nassert     all_Characters_Same('aaab') == False\nassert     all_Characters_Same('aabb') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Characters_Same(\"abc\") == True, \"Failed: all_Characters_Same(abc) == True\"\nassert     all_Characters_Same(\"def\") == False, \"Failed: all_Characters_Same(def) == False\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Characters_Same(['G', 'E', 'E']) == False\nassert     all_Characters_Same(['E', 'E', 'E']) == True\nassert     all_Characters_Same(['E', 'G', 'E']) == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same(\"aman\") == False\nassert     all_Characters_Same(\"am\") == False\nassert     all_Characters_Same(\"amana\") == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same('') == True\nassert     all_Characters_Same(' ') == True\nassert     all_Characters_Same('a') == False\nassert     all_Characters_Same('a') == True\nassert     all_Characters_Same('a' * 10) == True\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_tetrahedron(1.5) == math.sqrt(3) / 2\nassert     area_tetrahedron(1.0) == 4 / 3\nassert     area_tetrahedron(2.5) == math.sqrt(21) / 4\nassert     area_tetrahedron(1.5) == 1.5\nassert     area_tetrahedron(1.0) == 2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    side = 3\n    area_tetrahedron(side) == 0.5\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef volume_cube(length):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_tetrahedron(1) == 1\nassert     area_tetrahedron(5) == 5\nassert     area_tetrahedron(3) == math.sqrt(3)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef area_rectangle(a, b):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_tetrahedron(1) == 1\nassert     area_tetrahedron(2) == 1\nassert     area_tetrahedron(3) == 1\nassert     area_tetrahedron(4) == 1\nassert     area_tetrahedron(5) == 1\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\nassert rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert rotate_right([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]\nassert rotate_right([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\nassert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rotate_right([1,2,3,4,5],1) ==    [4,5,1,2,3]\nassert     rotate_right([1,2,3,4,5],2) ==    [3,4,5,1,2]\nassert     rotate_right([1,2,3,4,5],3) ==    [2,3,4,5,1]\nassert     rotate_right([1,2,3,4,5],4) ==    [1,2,3,4,5]\nassert     rotate_right([1,2,3,4,5],5) ==    [1,2,3,4,5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rotate_right([1,2,3,4], 3) == [4,1,2,3], \"should be [4,1,2,3]\"\nassert     rotate_right([1,2,3,4], 4) == [1,2,3,4], \"should be [1,2,3,4]\"\nassert     rotate_right([1,2,3,4], 1) == [2,3,4,1], \"should be [2,3,4,1]\"\nassert     rotate_right([1,2,3,4], 0) == [1,2,3,4], \"should be [1,2,3,4]\"\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nrotate_right([1,2,3,4,5],1) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],2) == [3,4,1,2,5]\nrotate_right([1,2,3,4,5],3) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],4) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],5) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],6) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],7) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],8) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],9) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],10) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],11) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],12) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],13) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],14) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],15) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],16) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],17) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],18) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],19) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],20) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],21) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],22) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],23) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],24) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],25) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],26) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],27) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],28) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],29) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],30) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],31) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],32) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],33) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],34) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],35) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],36) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],37) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],38) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],39) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],40) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],41) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],42) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],43) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],44) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],45) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],46) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],47) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],48) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],49) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],50) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],51) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],52) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],53) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],54) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],55) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],56) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],57) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],58) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],59) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],60) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],61) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],62) == [4,5,1,2,3]\nrotate_right([1,2,3,4,5],63) == [5,1,2,3,4]\nrotate_right([1,2,3,4,5],64) == [2,3,4,5,1]\nrotate_right([1,2,3,4,5],65) == [3,4,5,1,2]\nrotate_right([1,2,3,4,5],66) == ["
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2], \"Should rotate the list to the right\"\nassert     rotate_right([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1], \"Should rotate the list to the right\"\nassert     rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5], \"Should rotate the list to the right\"\nassert     rotate_right([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5], \"Should rotate the list to the right\"\nassert     rotate_right([1, 2, 3, 4, 5], -2) == [3, 4, 5, 1, 2], \"Should rotate the list to the right\"\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rotate_right([1,2,3,4,5], 3) == [5,1,2,3,4]\nassert     rotate_right([1,2,3,4,5,6], 0) == [6,1,2,3,4,5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rotate_right([1,2,3], 3) == [3,1,2]\nassert     rotate_right([1,2,3], 2) == [2,3,1]\nassert     rotate_right([1,2,3], 1) == [3,1,2]\nassert     rotate_right([1,2,3], 0) == [1,2,3]\nassert     rotate_right([1,2,3], -1) == [3,1,2]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_none((1, 2, 3)) == False\nassert     check_none((1, 2, None)) == True\nassert     check_none((None, 2, 3)) == True\nassert     check_none((1, None, 3)) == True\nassert     check_none((1, 2, 3, None)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none(('a', None, 1, 2)) == False\nassert     check_none((1, 2, 3, None, 4)) == False\nassert     check_none((1, None, None, 3, None)) == True\n\ndef check_no_duplicates(test_tup):\n    '''\n    Write a function to check if the given tuple has any duplicates or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_none(tup1) == True, \"tuple1 should contains None\"\nassert     check_none(tup2) == False, \"tuple2 should not contains None\"\nassert     check_none(tup3) == True, \"tuple3 should contains None\"\nassert     check_none(tup4) == False, \"tuple4 should not contains None\"\n\ndef check_palindrome(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none(('',None,'None')) == True\nassert     check_none((None,'','')) == True\nassert     check_none((None,'')) == True\nassert     check_none(('',None,'')) == False\nassert     check_none((None,'')) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none((1, 2, 3)) == False\nassert     check_none((1, 2, 3, 4)) == True\nassert     check_none((1, 2, 3, None)) == True\nassert     check_none((1, None, 3, 4)) == False\nassert     check_none(None) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none(()) == False\nassert     check_none((1,None,3)) == False\nassert     check_none((1,2,None)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none((\"tuple\",\"of\",\"values\",None)) == True\nassert     check_none((\"tuple\",\"of\",\"values\",0)) == False\nassert     check_none((\"tuple\",\"of\",\"values\",0.0)) == False\nassert     check_none((\"tuple\",\"of\",\"values\",0.00)) == False\nassert     check_none((\"tuple\",\"of\",\"values\",0.0000)) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none((1,2,3,4,None,6)) \nassert     check_none((1,None,3,4,6)) \nassert     not check_none((1,None,3,4,6)) \nassert     not check_none((1,2,3,4,None,)) \nassert     not check_none((1,2,3,4,None,6,7,8)) \n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none((\"1\", None, \"3\")) == False\nassert    check_none((\"1\", \"2\", \"3\")) == True\nassert    check_none((\"1\", \"2\", None)) == True\nassert    check_none((\"1\", \"2\", \"3\", None)) == True\nassert    check_none((\"1\", None)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none((1, None, 2, None, 3)) == True\nassert     check_none((1, None, None, 2, 3)) == True\nassert     check_none((None, None, 2, None, 3)) == False\n\n\ndef check_only_one(test_tup):\n    '''\n    Write a function to check if the given tuple has only one value which is either None or any other value or not.\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef word_count(filename):\n    '''\n    Write a function to count the number of words in a file.\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisible_by_digits(10,15) == range(10,16)\nassert divisible_by_digits(10,16) == range(10,17)\nassert divisible_by_digits(10,17) == range(10,18)\nassert divisible_by_digits(10,20) == range(10,21)\nassert divisible_by_digits(10,21) == range(10,22)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisible_by_digits(10, 20) == []\nassert     divisible_by_digits(20, 30) == [10, 12, 14, 16, 18, 20]\nassert     divisible_by_digits(20, 21) == [10, 12, 14, 16, 18, 20]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisible_by_digits(1, 100) == False\nassert    divisible_by_digits(10, 10) == True\nassert    divisible_by_digits(10, 11) == False\nassert    divisible_by_digits(10, 23) == False\nassert    divisible_by_digits(15, 27) == False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert divisible_by_digits(15,30) == [15, 16, 18, 20, 21, 24, 30]\nassert divisible_by_digits(15,50) == [15, 16, 18, 20, 21, 24, 25, 30, 35, 40, 45, 50]"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(12345678, 12345678) == True, 'Test fail, Input: 12345678, Expected output: True'\nassert     divisible_by_digits(1234567, 12345678) == False, 'Test fail, Input: 1234567, Expected output: False'\nassert     divisible_by_digits(12345678, 12345678) == True, 'Test fail, Input: 12345678, Expected output: True'"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(100, 1000) == [100,200,300,400,500,600,700,800,900,1000]\nassert     divisible_by_digits(100, 100) == [100]\nassert     divisible_by_digits(100, 0) == []\nassert     divisible_by_digits(1, 10) == [1,2,3,4,5,6,7,8,9]\nassert     divisible_by_digits(10,1) == []\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisible_by_digits(3,8) == ['3', '6', '9', '12', '15', '18', '21', '24']\nassert     divisible_by_digits(1,10) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     divisible_by_digits(10,20) == ['10', '11', '12', '13', '14', '15', '16', '17', '18', '19']\nassert     divisible_by_digits(100,200) == ['100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200']\nassert     divisible_by_digits(1000,2000) == ['1000', '1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1034', '1035', '1036', '1037', '1038', '1039', '1040', '1041', '1042', '1043', '1044', '1045', '1046', '1047', '1048', '1049', '1050', '1051', '1052', '1053', '1054', '1055', '1056', '1057', '1058', '1059', '1060', '1061', '1062', '1063', '1064', '1065', '1066', '1067', '1068', '1069', '1070', '1071', '1072', '1073', '1074', '1075', '1076', '1077', '1078', '1079', '1080', '1081', '1082', '1083', '1084', '1085', '1086', '1087', '1088', '1089', '1090', '1091', '1092', '1093', '1094', '1095', '1096', '1097', '1098', '1099', '1100', '1101', '1102', '1103', '1104', '1105', '1106', '1107', '1108', '1109', '1110', '1111', '1112', '1113', '1114', '1115', '1116', '1117', '1118', '1119', '1120', '1121', '1122', '1123', '1124', '1125', '1126', '1127', '1128', '1129', '1130', '1131', '1132', '1133', '1134', '1135', '1136', '1137', '1138', '1139', '1140', '1141', '1142', '1143', '1144', '1145', '1146', '1147', '1148', '1149', '1150', '1151', '1152', '1153', '1154', '1155', '1156', '1157', '1158', '1159', '1160', '1161', '1162', '1163', '1164', '1165', '1166', '1167', '1168', '1169', '1170', '1171', '1172', '1173', '1174', '1175', '1176', '1177', '1178', '1179', '1180', '1181', '1182', '1183', '1184', '1185', '1186', '1187', '1188', '1189', '1190', '1191', '1192', '1193', '1194', '1195', '1196', '1197', '1198', '1199', '1200', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1219', '1220', '1221', '1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1231', '1232', '1233', '1234', '1235', '1236', '1237', '1238', '1239', '1240', '1241', '1242', '1243', '1244', '1245', '1246', '1247', '1248', '1249', '1250', '1251', '1252', '1253', '1254', '1255', '1256', '1257', '1258', '1259', '1260', '1261', '1262', '1263', '1264', '1265', '1266', '1267', '1268', '1269', '1270', '1271', '1272', '1273', '1274', '1275', '1276', '1277', '1278', '1279', '1280', '1281', '1282', '1283', '1284', '1285', '1286', '1287', '1288', '1289', '1290', '1291', '1292', '1293', '1294', '1295', '1296', '1297', '1298', '1299', '1300', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1324', '1325', '1326', '1327', '1328', '1329', '1330', '1331', '1332', '1333', '1334', '1335', '1336', '1337', '1338', '1339', '1340', '1341', '1342', '1343', '1344', '1345', '1346', '1347', '1348', '1349', '1350', '1351', '1352', '1353', '1354', '1355', '1356', '1357', '1358', '1359', '1360', '1361', '1362', '1363', '1364', '1365', '1366', '1367', '1368', '1369', '1370', '1371', '137"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"Wrong result.\"\nassert     divisible_by_digits(10, 20) == [10, 12, 14, 16, 18, 20], \"Wrong result.\"\nassert     divisible_by_digits(1, 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"Wrong result.\"\nassert     divisible_by_digits(10, 12) == [10, 11], \"Wrong result.\"\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(1,360) == 1.5 * math.pi * 1 * 2\nassert sector_area(0.5,360) == 1.5 * math.pi * 0.5 * 2\nassert sector_area(1,360.5) == None\nassert sector_area(1,0.5) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sector_area(2,90) ==      math.pi * 2 * 2\nassert     sector_area(2,180) ==    math.pi * 4 * 2\nassert     sector_area(2,270) ==    math.pi * 2 * 2\nassert     sector_area(2,360) ==    None\nassert     sector_area(2,50) ==    None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sector_area(5,math.pi/3) == 3.14 * 5 * 5\nassert sector_area(5,math.pi/4) == 0\nassert sector_area(1,0) == 0\nassert sector_area(0,0) == 0\nassert sector_area(0,math.pi/2) == 0\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndef a_out(sector_area, sector_area2, sector_area3, sector_area4, sector_area5):\n    '''\n    Write a function to find the output of a program. This function takes four arguments as input. The function should return None if the angles are larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sector_area(1,45) == math.pi*1**2\nassert sector_area(1,0) == math.pi*1**2\nassert sector_area(1,360) == None\nassert sector_area(1,360.1) == None\nassert sector_area(1,-360.1) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sector_area(0, 360) == None\nassert sector_area(1, 360) == 9.4240080671875\nassert sector_area(2, 360) == 21.17647058823529\nassert sector_area(3, 360) == 14.71314285714286\nassert sector_area(4, 360) == 9.4240080671875\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sector_area(0.5,180) == 1.5*0.5**2*math.pi\nassert sector_area(0.5,360) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sector_area(1.1,70) == 17.65\nassert     sector_area(1.1,360) == None\nassert     sector_area(1.1,0) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sector_area(2,45) == 0.5\nassert     sector_area(2,360) == math.pi*2*2\nassert     sector_area(2,360) == sector_area(2,90)\nassert     sector_area(2,360) == sector_area(2,180)\nassert     sector_area(2,360) == sector_area(2,270)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    lcs_of_three('abc', 'def', 'ghi') == 'cdef'\n    lcs_of_three('abc', 'def', 'abc') == 'abc'\n    lcs_of_three('abc', 'abc', 'abc') == 'abc'\n    lcs_of_three('', '', '') == ''\n    lcs_of_three('', '', 'abc') == ''\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ABCDEFGHI\") == \"ABCDE\"\n\nprint(\"All tests passed\""
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef common_substring(X, Y, Z):\n    '''\n    Write a function to find the longest common substring for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lcs_of_four(X, Y, Z, T):\n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lcs_of_three(X = \"ABCDGH\", Y = \"ACDGHE\", Z = \"ACB\") == \"AC\" \nassert     lcs_of_three(X = \"ABCDGH\", Y = \"ACDGHE\", Z = \"AB\") == \"AB\" \nassert     lcs_of_three(X = \"ABCDGH\", Y = \"ACDGHE\", Z = \"ABC\") == \"ABC\" \nassert     lcs_of_three(X = \"ABCDGH\", Y = \"ACDGHE\", Z = \"ABD\") == \"ABD\" \nassert     lcs_of_three(X = \"ABCDGH\", Y = \"ACDGHE\", Z = \"ABCD\") == \"ACD\" \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lcs_of_three('abcde', 'ace', 'abc') == 3\nassert     lcs_of_three('abc', 'ace', 'abc') == 3\nassert     lcs_of_three('abc', 'abc', 'abc') == 3\nassert     lcs_of_three('abc', 'abc', 'def') == -1\nassert     lcs_of_three('abc', 'def', 'abc') == -1\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lcs_of_three('xx','xy','') == 'x'\nassert     lcs_of_three('xx','yy','zz') == 'xy'\nassert     lcs_of_three('xy','xy','zz') == 'xy'\nassert     lcs_of_three('xy','yy','xx') == 'xy'\nassert     lcs_of_three('xx','yy','zz') == 'zz'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert lcs_of_three('abc','abc','') == 3\nassert lcs_of_three('abc','ac','') == 2\nassert lcs_of_three('abc','bc','') == 1\nassert lcs_of_three('abc','ab','') == 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlcs_of_three(\"ABCDEFG\", \"ACBD\", \"ACEF\") == \"CD\"\nlcs_of_three(\"ABCDEFG\", \"ACBD\", \"CDACBACDCACBCABD\") == \"CDACBACDCACBCABD\"\n\ndef lcs_of_four(X, Y, Z, T):\n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert capital_words_spaces(\"HelloWorld\") == \"Hello World\"\nassert capital_words_spaces(\"Hello world\") == \"Hello world\"\n\ndef split_string(str1):\n    '''\n    Write a function to split a given string in the form of list.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     capital_words_spaces(\"  hello world\") == \"  hello world\"\nassert     capital_words_spaces(\" Hello World  \") == \"Hello World \"\nassert     capital_words_spaces(\"Hello world\") == \"Hello world\"\nassert     capital_words_spaces(\"hello world\") == \"hello world\"\nassert     capital_words_spaces(\"  hello world\") == \"  hello world\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     capital_words_spaces('Hello World') == 'Hello World'\nassert     capital_words_spaces('HELLO WORLD') == 'HELLO WORLD'\nassert     capital_words_spaces('Hi Mr. Smith!') == 'Hi Mr. Smith!'\nassert     capital_words_spaces('Hi Mr. Smith! You are awesome') == 'Hi Mr. Smith! You are awesome'\nassert     capital_words_spaces('1,2,3') == '1, 2, 3'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     capital_words_spaces(\"I love Python\") == \"I lv Pythn\"\nassert     capital_words_spaces(\" i love Python\") == \" I lv Pythn\"\nassert     capital_words_spaces(\"I love Python\") == \"I lv Pythn\"\nassert     capital_words_spaces(\"I love Python\") == \"I lv Pythn\""
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces(\"This is a string\") == \"This is a string\"\nassert     capital_words_spaces(\"this is a string\") == \"this is a string\"\nassert     capital_words_spaces(\"ThisIsAString\") == \"This Is A String\"\nassert     capital_words_spaces(\"this is a string\") == \"this is a string\"\nassert     capital_words_spaces(\"This is a string\") == \"This is a string\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\n\ndef capital_words_spaces_no_regex(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     capital_words_spaces('hello world') == 'hello world', 'Wrong output!'\nassert     capital_words_spaces('Hello world') == 'Hello world', 'Wrong output!'\nassert     capital_words_spaces('hello World') == 'hello World', 'Wrong output!'\nassert     capital_words_spaces('Hello World') == 'Hello World', 'Wrong output!'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     capital_words_spaces('this is a test') == 'this is a test', \"1st wrong test case\"\nassert     capital_words_spaces('this is a test') == 'this is a test', \"2nd wrong test case\"\nassert     capital_words_spaces('this is a test') == 'this is a test', \"3rd wrong test case\"\nassert     capital_words_spaces('This is a test') == 'This is a test', \"4th wrong test case\"\nassert     capital_words_spaces('This is a test') == 'This is a test', \"5th wrong test case\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     capital_words_spaces(\"HELLO WORLD\") == \"HELLO WORLD\"\nassert capital_words_spaces(\"HelloWorld\") == \"Hello World\"\nassert capital_words_spaces(\"Hi\") == \"Hi\"\nassert capital_words_spaces(\"Hello Hello World\") == \"Hello Hello World\"\nassert capital_words_spaces(\"HELLO WORLD\") == \"HELLO WORLD\"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numeric_strings([]) == sorted([])\nassert     sort_numeric_strings(['1', '2', '3']) == sorted(['1', '2', '3'])\nassert     sort_numeric_strings(['1', '12', '3', '12']) == sorted(['1', '1', '2', '3'])\nassert     sort_numeric_strings(['1', '2', '3', '12']) == sorted(['1', '12', '2', '3'])\nassert     sort_numeric_strings(['1', '2', '1', '2']) == sorted(['1', '1', '2', '2'])\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numeric_strings([\"1\", \"2\", \"3\"]) == [\"1\", \"2\", \"3\"]\nassert     sort_numeric_strings([\"4\", \"3\", \"1\"]) == [\"1\", \"3\", \"4\"]\nassert     sort_numeric_strings([\"1\", \"3\", \"1\"]) == [\"1\", \"1\", \"3\"]\nassert     sort_numeric_strings([\"3\", \"1\", \"4\"]) == [\"1\", \"3\", \"4\"]\nassert     sort_numeric_strings([\"3\", \"1\", \"2\"]) == [\"1\", \"2\", \"3\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings([\"1\", \"2\", \"4\", \"3\"]) == [\"1\", \"2\", \"3\", \"4\"]\nassert     sort_numeric_strings([\"a\", \"2\", \"4\", \"3\"]) == [\"2\", \"3\", \"4\", \"a\"]\nassert     sort_numeric_strings([\"1\", \"c\", \"4\", \"3\"]) == [\"1\", \"3\", \"4\", \"c\"]"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numeric_strings([]) == []\nassert     sort_numeric_strings([\"a\"]) == [\"a\"]\nassert     sort_numeric_strings([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"]\nassert     sort_numeric_strings([\"abc\", \"123\", \"bca\"]) == [\"123\", \"bca\", \"abc\"]"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numeric_strings(['9','5','6','3','2']) == sorted(['2', '3', '5', '6', '9'], key=int)\nassert     sort_numeric_strings(['12345','56789','66']) == sorted(['66', '56789', '12345'], key=int)\nassert     sort_numeric_strings(['12345','56789','66']) == sorted(['66', '56789', '12345'], key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nnums_str = [\"15\", \"3\", \"12\", \"9\"]\nsort_numeric_strings(nums_str)\n\nassert nums_str == [\"3\", \"12\", \"15\", \"9\"]\n\nnums_str = [\"3\", \"5\", \"2\", \"1\"]\nsort_numeric_strings(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numeric_strings(['1','10','100','10000','1000001','5','01','001','0011','001111']) ==     ['0001','001','01','10','100','10001','5','10000','1000001','1000011','100001111']\nassert     sort_numeric_strings(['9','1','12','101','1234','11','11','12','1234','1','0']) ==     ['1','11','12','1234','101','12','1234','12','12','11','0']\nassert     sort_numeric_strings(['1','2','0','0','0','0','0','0','0']) ==     ['0','0','0','0','0','0','0','0','1']\n\ndef sort_numeric_strings_alternative(nums_str):\n    '''\n    An alternative solution using lambda\n    '''\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings([\"22\",\"45\",\"23\",\"12\",\"24\"]) == [\"12\",\"23\",\"22\",\"24\",\"45\"]\nassert     sort_numeric_strings([\"23\",\"23\",\"123\"]) == [\"123\",\"23\",\"23\"]\nassert     sort_numeric_strings([\"12\",\"23\",\"23\",\"23\"]) == [\"23\",\"23\",\"23\",\"12\"]\nassert     sort_numeric_strings([\"345\",\"2\",\"3\"]) == [\"3\",\"2\",\"345\"]\nassert     sort_numeric_strings([\"23\",\"12\",\"345\",\"12\",\"3\"]) == [\"3\",\"12\",\"12\",\"12\",\"23\"]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef add_list_of_tuples(test_list, test_list_of_tuples):\n    '''\n    Write a function to add the given list of tuples to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_tuple([], (1,2,3)) == None, 'Wrong output'\nassert     add_tuple([1,2,3], (1,2,3)) == None, 'Wrong output'\nassert     add_tuple([], (1,2,3)) == None, 'Wrong output'\nassert     add_tuple([1,2,3], (4,5,6)) == None, 'Wrong output'\nassert     add_tuple([1,2,3], (1,2,3)) == None, 'Wrong output'\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_tuple([], ()) == ()\nassert     add_tuple([2, 4, 6], (1, 3, 5)) == (2, 4, 6, 1, 3, 5)\nassert     add_tuple([2, 4, 6], (1, 3, 5)) == (2, 4, 6, 1, 3, 5)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_tuple([1,2,3], (1,2,3)) == None, 'This is wrong answer.'\nassert add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6), 'This is wrong answer.'\nassert add_tuple([1,2,3], (1,2,3,4,5,6)) == None, 'This is wrong answer.'\nassert add_tuple([1,2,3], (1,2,3,4,5,6,7)) == None, 'This is wrong answer.'\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_tuple([1, 2, 3], (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\nassert     add_tuple([1, 2, 3], (4, 5, 6, 7, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)\nassert     add_tuple([1, 2, 3], (4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_tuple([1, 2], (3, 4)) ==     [1, 2, 3, 4]     # True\nassert     add_tuple([], (1, 2)) ==     [1, 2]     # False\nassert     add_tuple([], ()) ==     []     # False\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_tuple([(0,1),(2,3),(4,5),(6,7),(8,9)], (3,4)) == [(0,1),(2,3),(4,5),(6,7),(8,9)]\nassert     add_tuple([(0,1),(2,3),(4,5),(6,7),(8,9)], (2,3)) == [(0,1),(2,3),(4,5),(6,7),(8,9)]\nassert     add_tuple([(0,1),(2,3),(4,5),(6,7),(8,9)], (9,10)) == [(0,1),(2,3),(4,5),(6,7),(8,9)]\nassert     add_tuple([(0,1),(2,3),(4,5),(6,7),(8,9)], (10,10)) == [(0,1),(2,3),(4,5),(6,7),(8,9)]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_tuple(test_list, test_tup) == [1,2,3]\n\ndef del_tuple(test_list, test_tup):\n    '''\n    Write a function to delete the given tuple from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_min_heap_helper([1,2,3], 2) == True\nassert     check_min_heap_helper([1,2,3], 1) == False\nassert     check_min_heap_helper([], 0) == True\nassert     check_min_heap_helper([2,1,3], 1) == True\nassert     check_min_heap_helper([2,1,3], 2) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_min_heap_helper([3,1,6,2,7,8,6,5,4,3,2,1],True) == None, \"Should return None\"\nassert     check_min_heap_helper([3,1,6,2,7,8,6,5,4,3,2,1],False) == None, \"Should return None\"\nassert     check_min_heap_helper([3,1,6,2,7,8,6,5,4,3,2,1],3) == 2, \"Should return 2\"\nassert     check_min_heap_helper([3,1,6,2,7,8,6,5,4,3,2,1],5) == 4, \"Should return 4\"\nassert     check_min_heap_helper([3,1,6,2,7,8,6,5,4,3,2,1],6) == 6, \"Should return 6\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_min_heap_helper([-1,-2,-3,-4,-5], 0) == True\nassert     check_min_heap_helper([-1,-2,0,1,2], 0) == False\nassert     check_min_heap_helper([-1,-2,0,1,2], 1) == True\nassert     check_min_heap_helper([-1,-2,0,1,2], 2) == True\nassert     check_min_heap_helper([-1,-2,0,1,2], 3) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nimport random\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_min_heap_helper([1,3,2,4], 1) == False, 'There should be a min heap'\nassert     check_min_heap_helper([2,3,4,1], 1) == True, 'There should be a min heap'\n\nassert     check_min_heap_helper([4,3,2,1], 1) == False, 'There should be a min heap'\nassert     check_min_heap_helper([2,1,4,3], 1) == True, 'There should be a min heap'\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_min_heap_helper([3, 5, 6, 1, 4, 2], 0) == True\nassert     check_min_heap_helper([3, 5, 6, 1, 4, 2], 1) == False\n\ndef check_min_heap_helper_non_recursive(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     jacobsthal_num(0) == 1\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('jacobsthal_num(0) =', jacobsthal_num(0))\nassert \nprint('jacobsthal_num(1) =', jacobsthal_num(1))\nassert \nprint('jacobsthal_num(2) =', jacobsthal_num(2))\nassert \nprint('jacobsthal_num(3) =', jacobsthal_num(3))\nassert \nprint('jacobsthal_num(4) =', jacobsthal_num(4))\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 2\nassert     jacobsthal_num(5) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \njacobsthal_num(0) == 0\njacobsthal_num(1) == 1\njacobsthal_num(2) == 1\njacobsthal_num(3) == 3\njacobsthal_num(4) == 5\njacobsthal_num(5) == 11\njacobsthal_num(6) == 21\njacobsthal_num(7) == 43\njacobsthal_num(8) == 85\njacobsthal_num(9) == 171\njacobsthal_num(10) == 341\njacobsthal_num(11) == 683\njacobsthal_num(12) == 1365\njacobsthal_num(13) == 2731\njacobsthal_num(14) == 7991\njacobsthal_num(15) == 16695\njacobsthal_num(16) == 29939\njacobsthal_num(17) == 37783\njacobsthal_num(18) == 43883\njacobsthal_num(19) == 53997\njacobsthal_num(20) == 64525\njacobsthal_num(21) == 72993\njacobsthal_num(22) == 92735\njacobsthal_num(23) == 103371\njacobsthal_num(24) == 116065\njacobsthal_num(25) == 128829\njacobsthal_num(26) == 137837\njacobsthal_num(27) == 152793\njacobsthal_num(28) == 181693\njacobsthal_num(29) == 225493\njacobsthal_num(30) == 263695\njacobsthal_num(31) == 299695\njacobsthal_num(32) == 347911\njacobsthal_num(33) == 358955\njacobsthal_num(34) == 42601\njacobsthal_num(35) == 53723\njacobsthal_num(36) == 64971\njacobsthal_num(37) == 75961\njacobsthal_num(38) == 87471\njacobsthal_num(39) == 98651\njacobsthal_num(40) == 103773\njacobsthal_num(41) == 112793\njacobsthal_num(42) == 126065\njacobsthal_num(43) == 139973\njacobsthal_num(44) == 152793\njacobsthal_num(45) == 181693\njacobsthal_num(46) == 225493\njacobsthal_num(47) == 263695\njacobsthal_num(48) == 299695\njacobsthal_num(49) == 347911\njacobsthal_num(50) == 358955\njacobsthal_num(51) == 42601\njacobsthal_num(52) == 53723\njacobsthal_num(53) == 64971\njacobsthal_num(54) == 75961\njacobsthal_num(55) == 87471\njacobsthal_num(56) == 98651\njacobsthal_num(57) == 103773\njacobsthal_num(58) == 112793\njacobsthal_num(59) == 126065\njacobsthal_num(60) == 139973\njacobsthal_num(61) == 152793\njacobsthal_num(62) == 181693\njacobsthal_num(63) == 225493\njacobsthal_num(64) == 263695\njacobsthal_num(65) == 299695\njacobsthal_num(66) == 347911\njacobsthal_num(67) == 358955\njacobsthal_num(68) == 42601\njacobsthal_num(69) == 53723\njacobsthal_num(70) == 64971\njacobsthal_num(71) == 75961\njacobsthal_num(72) == 87471\njacobsthal_num(73) == 98651\njacobsthal_num(74) == 103773\njacobsthal_num(75) == 112793\njacobsthal_num(76) == 126065\njacobsthal_num(77) == 139973\njacobsthal_num(78) == 152793\njacobsthal_num(79) == 181693\njacobsthal_num(80) == 225493\njacobsthal_num(81) == 263695\njacobsthal_num(82) == 299695\njacobsthal_num(83) == 347911\njacobsthal_num(84) == 358955\njacobsthal_num(85) == 42601\njacobsthal_num(86) == 53723\njacobsthal_num(87) == 64971\njacobsthal_num(88) == 75961\njacobsthal_num(89) == 87471\njacobsthal_num(90) == 98651\njacobsthal_num(91) == 103773\njacobsthal_num(92) == 112793\njacobsthal_num(93) == 126065\njacobsthal_num(94) == 139973\njacobsthal_num(95) == 152793\njacobsthal_num(96) == 181693\njacobsthal_num(97) == 225493\njacobsthal_num(98) == 263695\njacobsthal_num(99) == 299695\njacobsthal_num(100) == 347911\njacobsthal_num(101) == 358955\njacobsthal_num(102) == 42601\njacobsthal_num(103) == 53723\njacobsthal_num(104) == 64971\njacobsthal_num(105) == 75961\njacobsthal_num(106) == 87471\njacobsthal_num(107) == 98651\njacobsthal_num(108) == 103773\njacobsthal_num(109) == 112793\njacobsthal_num(110) == 126065\njacobsthal_num(111) == 139973\njacobsthal_num(112) == 152793\njacobsthal_num(113) == 181693\njacobsthal_num(114) == 225493\njacobsthal_num(115) == 263695\njacobsthal_num(116) == 299695\njacobsthal_num(117) == 347911\njacobsthal_num(118) == 358955\njacobsthal_num(119) == 42601\njacobsthal_num(120) == 53723\njacobsthal_num(121) == 64971\njacobsthal_num(122) == 75961\njacobsthal_num(123) == 87471\njacobsthal_num(124) == 98651\njacobsthal_num(125) == 103773\njacobsthal_num(126) == 112793\njacobsthal_num(127) == 126065\njacobsthal_num(128) == 139973\njacobsthal_num(129) == 152793\njacobsthal_num(130) == 181693\njacobsthal_num(131) == 225493\njacobsthal_num(132) == 263695\njacobsthal_num(133) == 299695\njacobsthal_num(134) == 347911\njacobsthal_num(135) == 358955\njacobsthal_num(136) == 42601\njacobsthal_num(137) == 53723\njacobsthal_num(138) == 64971\njacobsthal_num(139) == 75961\njacobsthal_num(140) == 87471\njacobsthal_num(141) == 98651\njacobsthal_num(142) ="
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    jacobsthal_num(1) == 0\n    jacobsthal_num(2) == 1\n    jacobsthal_num(3) == 1\n    jacobsthal_num(4) == 2\n    jacobsthal_num(5) == 3\n    jacobsthal_num(6) == 5\n    jacobsthal_num(7) == 11\n    jacobsthal_num(8) == 21\n    jacobsthal_num(9) == 43\n    jacobsthal_num(10) == 85\n    jacobsthal_num(11) == 171\n    jacobsthal_num(12) == 341\n    jacobsthal_num(13) == 683\n    jacobsthal_num(14) == 1365\n    jacobsthal_num(15) == 2731\n    jacobsthal_num(16) == 1000000\n    jacobsthal_num(17) == 100000001\n    jacobsthal_num(18) == 100000001\n    jacobsthal_num(19) == 100000001\n    jacobsthal_num(20) == 100000000\n    jacobsthal_num(21) == 100000000\n    jacobsthal_num(22) == 100000000\n    jacobsthal_num(23) == 100000000\n    jacobsthal_num(24) == 10000000000\n    jacobsthal_num(25) == 10000000000\n    jacobsthal_num(26) == 10000000000\n    jacobsthal_num(27) == 10000000000\n    jacobsthal_num(28) == 1000000000000\n    jacobsthal_num(29) == 1000000000000\n    jacobsthal_num(30) == 1000000000000\n    jacobsthal_num(31) == 1000000000000\n    jacobsthal_num(32) == 1000000000000000\n    jacobsthal_num(33) == 1000000000000000\n    jacobsthal_num(34) == 1000000000000000\n    jacobsthal_num(35) == 1000000000000000\n    jacobsthal_num(36) == 100000000000000000\n    jacobsthal_num(37) == 100000000000000000\n    jacobsthal_num(38) == 100000000000000000\n    jacobsthal_num(39) == 100000000000000000\n    jacobsthal_num(40) == 100000000000000000000\n    jacobsthal_num(41) == 100000000000000000000\n    jacobsthal_num(42) == 100000000000000000000\n    jacobsthal_num(43) == 100000000000000000000\n    jacobsthal_num(44) == 100000000000000000000000\n    jacobsthal_num(45) == 100000000000000000000000\n    jacobsthal_num(46) == 100000000000000000000000\n    jacobsthal_num(47) == 100000000000000000000000\n    jacobsthal_num(48) == 10000000000000000000000000000\n    jacobsthal_num(49) == 10000000000000000000000000000\n    jacobsthal_num(50) == 10000000000000000000000000000\n    jacobsthal_num(51) == 10000000000000000000000000000\n    jacobsthal_num(52) == 10000000000000000000000000000000\n    jacobsthal_num(53) == 10000000000000000000000000000000\n    jacobsthal_num(54) == 10000000000000000000000000000000\n    jacobsthal_num(55) == 10000000000000000000000000000000\n    jacobsthal_num(56) == 100000000000000000000000000000000000\n    jacobsthal_num(57) == 100000000000000000000000000000000000\n    jacobsthal_num(58) == 100000000000000000000000000000000000\n    jacobsthal_num(59) == 100000000000000000000000000000000000\n    jacobsthal_num(60) == 1000000000000000000000000000000000000\n    jacobsthal_num(61) == 1000000000000000000000000000000000000\n    jacobsthal_num(62) == 1000000000000000000000000000000000000\n    jacobsthal_num(63) == 10000000000000000000000000000000000000\n    jacobsthal_num(64) == 10000000000000000000000000000000000000\n    jacobsthal_num(65) == 10000000000000000000000000000000000000\n    jacobsthal_num(66) == 10000000000000000000000000000000000000\n    jacobsthal_num(67) == 1000000000000000000000000000000000000000\n    jacobsthal_num(68) == 1000000000000000000000000000000000000000\n    jacobsthal_num(69) == 1000000000000000000000000000000000000000\n    jacobsthal_num(70) == 1000000000000000000000000000000000000000\n    jacobsthal_num(71) == 10000000000000000000000000000000000000000\n    jacobsthal_num(72) == 10000000000000000000000000000000000000000\n    jacobsthal_num(73) == 10000000000000000000000000000000000000000\n    jacobsthal_num(74) == 10000000000000000000000000000000000000000000\n    jacobsthal_num(75) == 10000000000000000000000000000000000000000000\n    jacobsthal_num(76) == 10000000000000000000000000000000000000000000\n    jacobsthal_num(77) == 10000000000000000000000000000000000000000000\n    jacobsthal_num(78) == 100000000000000000000000000000000000000000000\n    jacobsthal_num(79) == 100000000000000000000000000000000000000000000\n    jacobsthal_num(80) == 100000000000000000000000000000000000000000000\n    jacobsthal_num(81) == 100000000000000000000000000000000000000000000\n    jacobsthal_num(82) == 100000000000000000000000000000000000000000000000\n    jacobsthal_num(83) == 100000000000000000000000000000000000000000000000\n    jacobsthal_num(84) == 100000000000000000000000000000000000000000000000\n    jacobsthal_num(85) == 100000000000000000000000000000000000000000000000\n    jacobsthal_num(86) == 1000000000000000000000000000000000000000000000000000\n    jacobsthal_num(87) == 1000000000000000000000000000000000000000000000000000\n    jacobsthal_num(88) == 1000000000000000000000000000000000000000000000000000\n    jacobsthal_num(89) == 1000000000000000000000000000000000000000000000000000\n    jacobsthal_num(90) == 10000000000000000000000000000000000000000000000000000\n    jacobsthal_num(91) == 10000000000000000000000000000000000000000000000000000\n    jacobsthal_num(92) == 10000000000000000000000000000000000000000000000000000\n    jacobsthal_num(93) == 10000000000000000000000000000000000000000000000000000\n    jacobsthal_num(94) == 100000000000000000000000000000000000000000000000000000\n    jacobsthal_num(95) == 100000000000000000000000000000000000000000000000000000\n    jacobsthal_num(96) == 100000000000000000000000000000000000000000000000000000\n    jacobsthal_num(97) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(98) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(99) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(100) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(101) == 1000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(102) == 1000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(103) == 1000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(104) == 100000000000000000000000000000000000000000000000000000\n    jacobsthal_num(105) == 100000000000000000000000000000000000000000000000000000\n    jacobsthal_num(106) == 100000000000000000000000000000000000000000000000000000\n    jacobsthal_num(107) == 100000000000000000000000000000000000000000000000000000\n    jacobsthal_num(108) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(109) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(110) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(111) == 10000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(112) == 10000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(113) == 10000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(114) == 10000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(115) == 10000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(116) == 100000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(117) == 100000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(118) == 100000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(119) == 100000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(120) == 1000000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(121) == 1000000000000000000000000000000000000000000000000000000000000\n    jacobsthal_num(122) == 100000000000000000"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(4) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     jacobsthal_num(0) == 0, \"jacobsthal_num(0) wrong\"\nassert     jacobsthal_num(1) == 1, \"jacobsthal_num(1) wrong\"\nassert     jacobsthal_num(2) == 1, \"jacobsthal_num(2) wrong\"\nassert     jacobsthal_num(3) == 2, \"jacobsthal_num(3) wrong\"\nassert     jacobsthal_num(4) == 2, \"jacobsthal_num(4) wrong\"\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    jacobsthal_num(1) == 0, \"jacobsthal_num(1) should equal to 0\"\n    jacobsthal_num(2) == 1, \"jacobsthal_num(2) should equal to 1\"\n    jacobsthal_num(3) == 1, \"jacobsthal_num(3) should equal to 1\"\n    jacobsthal_num(4) == 1, \"jacobsthal_num(4) should equal to 1\"\n    jacobsthal_num(5) == 1, \"jacobsthal_num(5) should equal to 1\"\n    jacobsthal_num(6) == 1, \"jacobsthal_num(6) should equal to 1\"\n    jacobsthal_num(7) == 1, \"jacobsthal_num(7) should equal to 1\"\n    jacobsthal_num(8) == 1, \"jacobsthal_num(8) should equal to 1\"\n    jacobsthal_num(9) == 1, \"jacobsthal_num(9) should equal to 1\"\n    jacobsthal_num(10) == 1, \"jacobsthal_num(10) should equal to 1\"\n    jacobsthal_num(11) == 1, \"jacobsthal_num(11) should equal to 1\"\n    jacobsthal_num(12) == 1, \"jacobsthal_num(12) should equal to 1\"\n    jacobsthal_num(13) == 1, \"jacobsthal_num(13) should equal to 1\"\n    jacobsthal_num(14) == 1, \"jacobsthal_num(14) should equal to 1\"\n    jacobsthal_num(15) == 1, \"jacobsthal_num(15) should equal to 1\"\n    jacobsthal_num(16) == 1, \"jacobsthal_num(16) should equal to 1\"\n    jacobsthal_num(17) == 1, \"jacobsthal_num(17) should equal to 1\"\n    jacobsthal_num(18) == 1, \"jacobsthal_num(18) should equal to 1\"\n    jacobsthal_num(19) == 1, \"jacobsthal_num(19) should equal to 1\"\n    jacobsthal_num(20) == 1, \"jacobsthal_num(20) should equal to 1\"\n    jacobsthal_num(21) == 1, \"jacobsthal_num(21) should equal to 1\"\n    jacobsthal_num(22) == 1, \"jacobsthal_num(22) should equal to 1\"\n    jacobsthal_num(23) == 1, \"jacobsthal_num(23) should equal to 1\"\n    jacobsthal_num(24) == 1, \"jacobsthal_num(24) should equal to 1\"\n    jacobsthal_num(25) == 1, \"jacobsthal_num(25) should equal to 1\"\n    jacobsthal_num(26) == 1, \"jacobsthal_num(26) should equal to 1\"\n    jacobsthal_num(27) == 1, \"jacobsthal_num(27) should equal to 1\"\n    jacobsthal_num(28) == 1, \"jacobsthal_num(28) should equal to 1\"\n    jacobsthal_num(29) == 1, \"jacobsthal_num(29) should equal to 1\"\n    jacobsthal_num(30) == 1, \"jacobsthal_num(30) should equal to 1\"\n    jacobsthal_num(31) == 1, \"jacobsthal_num(31) should equal to 1\"\n    jacobsthal_num(32) == 1, \"jacobsthal_num(32) should equal to 1\"\n    jacobsthal_num(33) == 1, \"jacobsthal_num(33) should equal to 1\"\n    jacobsthal_num(34) == 1, \"jacobsthal_num(34) should equal to 1\"\n    jacobsthal_num(35) == 1, \"jacobsthal_num(35) should equal to 1\"\n    jacobsthal_num(36) == 1, \"jacobsthal_num(36) should equal to 1\"\n    jacobsthal_num(37) == 1, \"jacobsthal_num(37) should equal to 1\"\n    jacobsthal_num(38) == 1, \"jacobsthal_num(38) should equal to 1\"\n    jacobsthal_num(39) == 1, \"jacobsthal_num(39) should equal to 1\"\n    jacobsthal_num(40) == 1, \"jacobsthal_num(40) should equal to 1\"\n    jacobsthal_num(41) == 1, \"jacobsthal_num(41) should equal to 1\"\n    jacobsthal_num(42) == 1, \"jacobsthal_num(42) should equal to 1\"\n    jacobsthal_num(43) == 1, \"jacobsthal_num(43) should equal to 1\"\n    jacobsthal_num(44) == 1, \"jacobsthal_num(44) should equal to 1\"\n    jacobsthal_num(45) == 1, \"jacobsthal_num(45) should equal to 1\"\n    jacobsthal_num(46) == 1, \"jacobsthal_num(46) should equal to 1\"\n    jacobsthal_num(47) == 1, \"jacobsthal_num(47) should equal to 1\"\n    jacobsthal_num(48) == 1, \"jacobsthal_num(48) should equal to 1\"\n    jacobsthal_num(49) == 1, \"jacobsthal_num(49) should equal to 1\"\n    jacobsthal_num(50) == 1, \"jacobsthal_num(50) should equal to 1\"\n    jacobsthal_num(51) == 1, \"jacobsthal_num(51) should equal to 1\"\n    jacobsthal_num(52) == 1, \"jacobsthal_num(52) should equal to 1\"\n    jacobsthal_num(53) == 1, \"jacobsthal_num(53) should equal to 1\"\n    jacobsthal_num(54) == 1, \"jacobsthal_num(54) should equal to 1\"\n    jacobsthal_num(55) == 1, \"jacobsthal_num(55) should equal to 1\"\n    jacobsthal_num(56) == 1, \"jacobsthal_num(56) should equal to 1\"\n    jacobsthal_num(57) == 1, \"jacobsthal_num(57) should equal to 1\"\n    jacobsthal_num(58) == 1, \"jacobsthal_num(58) should equal to 1\"\n    jacobsthal_num(59) == 1, \"jacobsthal_num(59) should equal to 1\"\n    jacobsthal_num(60) == 1, \"jacobsthal_num(60) should equal to 1\"\n    jacobsthal_num(61) == 1, \"jacobsthal_num(61) should equal to 1\"\n    jacobsthal_num(62) == 1, \"jacobsthal_num(62) should equal to 1\"\n    jacobsthal_num(63) == 1, \"jacobsthal_num(63) should equal to 1\"\n    jacobsthal_num(64) == 1, \"jacobsthal_num(64) should equal to 1\"\n    jacobsthal_num(65) == 1, \"jacobsthal_num(65) should equal to 1\"\n    jacobsthal_num(66) == 1, \"jacobsthal_num(66) should equal to 1\"\n    jacobsthal_num(67) == 1, "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    min_k(['a','b','c','d','e'], 1) == 'a', 'tuple list should be the first element in the tuple'\n    min_k(['a','b','c','d','e'], 3) == 'b', 'tuple list should be the third element in the tuple'\n    min_k(['a','b','c','d','e'], 4) == 'c', 'tuple list should be the fourth element in the tuple'\n    min_k(['a','b','c','d','e'], 5) == 'd', 'tuple list should be the sixth element in the tuple'\n    min_k(['a','b','c','d','e'], 6) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 7) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 8) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 9) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 10) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 11) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 12) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 13) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 14) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 15) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 16) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 17) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 18) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 19) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 20) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 21) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 22) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 23) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 24) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 25) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 26) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 27) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 28) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 29) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 30) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 31) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 32) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 33) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 34) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 35) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 36) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 37) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 38) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 39) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 40) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 41) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 42) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 43) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 44) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 45) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 46) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 47) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 48) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 49) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 50) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 51) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 52) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 53) == 'e', 'tuple list should be the seventh element in the tuple'\n    min_k(['a','b','c','d','e'], 54) == 'e', 'tuple list should be the seventh element i"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_k(test_list, K):\n    '''\n    Write a function to find maximum k records from tuple list. https://www.geeksforgeeks.org/python-find-maximum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_k([(1, 2), (1, 4), (2, 3), (3, 6), (5, 7)], 3) == (1, 4), \"Wrong solution\"\nassert     min_k([(1, 2), (1, 4), (2, 3), (3, 6), (5, 7)], 5) == (1, 4, 2, 3, 5), \"Wrong solution\"\nassert     min_k([(1, 2), (1, 4), (2, 3), (3, 6), (5, 7)], 0) == (1, 2, 3, 4, 5), \"Wrong solution\"\nassert     min_k([(1, 2), (1, 4), (2, 3), (3, 6), (5, 7)], 1) == (1, 2), \"Wrong solution\"\nassert     min_k([(1, 2), (1, 4), (2, 3), (3, 6), (5, 7)], 4) == (1, 2, 3, 4, 5), \"Wrong solution\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    min_k(['a', 'a', 'b', 'b'], 2) == ('a', 'a'), \"Should be 'a'\"\n    min_k(['a', 'a', 'b', 'b', 'c'], 2) == ('a', 'a'), \"Should be 'a'\"\n    min_k([], 1) == ('',), \"Should be empty\"\n    min_k(['a', 'a', 'b', 'b', 'c', 'd'], 1) == ('a',), \"Should be empty\"\n    min_k(['a', 'a', 'b', 'b', 'c', 'd', 'e'], 1) == ('a',), \"Should be empty\"\n    min_k(['a', 'a', 'b', 'b', 'c', 'd'], 1) == ('a',), \"Should be 'a'\"\n    min_k(['a', 'a', 'b', 'b', 'c', 'd'], 0) == ('a', 'b', 'c', 'd'), \"Should be 'a' and 'b'\"\n    min_k(['a', 'a', 'b', 'b', 'c', 'd', 'e'], 2) == ('a', 'b', 'c'), \"Should be 'a' and 'b'\""
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_k([1,2,3,4,5,6,7,8,9], K=5) ==     [1,2,3,4,5]\nassert     min_k([1,2,3,4,5,6,7,8,9], K=4) ==     [1,2,3,4]\nassert     min_k([1,2,3,4,5,6,7,8,9], K=3) ==     [1,2,3]\nassert     min_k([1,2,3,4,5,6,7,8,9], K=2) ==     [1,2]\nassert     min_k([1,2,3,4,5,6,7,8,9], K=1) ==     [1]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == (1, 2)\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 1) == (3, 4)\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == (1, 2)\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 0) == (1, 2)\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_index_list([1, 3, 4], [4, 6, 4, 1], [1, 3, 4]) == [4]\nassert     extract_index_list([4, 6, 4, 1], [4, 6, 4, 1], [1, 3, 4]) == [4]\nassert     extract_index_list([4, 6, 4, 1], [4, 6, 4, 1], [2, 3, 4]) == [4, 6]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_index_list([1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11,12]) == [1,2,3,4,6,7,8,9,10,11,12]\nassert     extract_index_list([5,6,7,8],\n                            [1,2,3,4],\n                            [9,10,11,12]) == [5,6,7,8,9,10,11,12]\nassert     extract_index_list([1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11,12]) == [1,2,3,4]\n\nprint('All test cases passed')"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([1,2,3],[2,4,3], [2,3,4]) == [[1,2],[2,3]], \"Should be [[1,2],[2,3]]\"\nassert     extract_index_list([1,2,2,2,3],[2,4,2,2,3], [2,3,4,4,4]) == [[1,2],[2,3]], \"Should be [[1,2],[2,3]]\"\nassert     extract_index_list([1,2,3,2,2],[2,4,3,2,2], [2,3,4,4,4]) == [[1,2,3,4],[2,2]], \"Should be [[1,2,3,4],[2,2]]\"\nassert     extract_index_list([1,2,3,2,2,2],[2,4,2,2,2], [2,3,4,4,4]) == [[1,2,3,4],[2,2]], \"Should be [[1,2,3,4],[2,2]]\"\nassert     extract_index_list([1,2,3,2,2,3,2,2],[2,4,2,2,2,3], [2,3,4,4,4,4,4,4]) == [[1,2,3,4,5],[2,2]], \"Should be [[1,2,3,4,5],[2,2]]\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_index_list([1,2,3,4,5,6], [1,2,3,7,8,9], [2,3,4,5,6,7]) == None\nassert     extract_index_list([1,2,3,4,5,6], [1,2,3,7,8,9], [1,2,3,4,5,6]) == [[1,2,3,4,5,6]]\nassert     extract_index_list([1,2,3,4,5,6], [1,2,3,7,8,9], [1,2,3,4,5,6]) == [[1,2,3,4,5,6]]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_index_list([1,2,3,4], [5,6,7,8], [3,4,5,6]) == [[], [1], [2], [3,4]]\nassert     extract_index_list([], [5,6,7,8], [3,4,5,6]) == [[], [5], [6], [3,4,5,6]]\nassert     extract_index_list([1,2,3], [5,6,7,8], [3,4,5,6]) == [[], [1], [2], [3,4]]\nassert     extract_index_list([1,2,3], [], [5,6,7,8]) == [[], [1], [2], [3]]\nassert     extract_index_list([1,2,3], [5,6,7,8], [4,5,6,7]) == [[], [1], [2], [3,4]]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nl1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nl2 = ['c', 'd', 'f', 'a']\nl3 = ['b', 'd', 'e', 'f', 'a']\nprint(extract_index_list(l1, l2, l3))"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     second_smallest([7, 6, 1, 3]) == 1\nassert second_smallest([-23, 5, 99, -20, 5]) == -23\nassert second_smallest([-23, 5, 99, -20, 5, 1, 100, -9]) == -9\nassert second_smallest([]) == None\nassert second_smallest([9]) == None\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef third_smallest(numbers):\n    '''\n    Write a function to find the third smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsecond_smallest([1,2,3,4,5,6]) == 1\nassert \nsecond_smallest([1,2,3,4,5,6,6]) == 5\nassert \nsecond_smallest([1,2,3,4,5,6,6,6,7,7,7]) == 7\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([5,3,4,2,3]) == 3\nassert     second_smallest([-3,7,-3,3]) == -3\nassert     second_smallest([-1,2,3,4,5,6,-1]) == -1\nassert     second_smallest([3,-4,2,5,-7,1,7,4]) == -4\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([1, 2, 3, 4, 5]) == 3\nassert     second_smallest([1, 2, 3, 4, 5, 5]) == 4\nassert     second_smallest([1, 2, 3, 4, 5, 5, 6]) == 5\nassert     second_smallest([1, 2, 3, 4, 5, 5, 6, 7]) == 6\nassert     second_smallest([1, 2, 3, 4, 5, 5, 6, 7, 7]) == 7\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([4,2,1]) == 2\nassert     second_smallest([1,2,4,5,3]) == 3\nassert     second_smallest([5,5,5,5,5]) == 5\nassert     second_smallest([-1,-2,-3,-4,-5]) == -3\nassert     second_smallest([1,2,3,4,5]) == 2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     second_smallest([]) == -1\nassert     second_smallest([1,1,1,1]) == -1\nassert     second_smallest([1,2,3,4]) == 2\nassert     second_smallest([1,2,3,4,5]) == 2\nassert     second_smallest([1,2,3,4,5,6]) == 5\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef second_smallest_test(input_list, expected):\n    '''\n    Tests the second_smallest function.\n    '''\n    print(\"Running second_smallest_test...\")\n    try:\n        result = second_smallest(input_list)\n        if result == expected:\n            print(\"SUCCESS: second_smallest_test\")\n        else:\n            print(\"FAILURE: second_smallest_test\")\n    except Exception as e:\n        print(\"FAILURE: second_smallest_test: \", e)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('ab')    == True, \n\"False\"\nassert     text_match_zero_one('abc')    == True, \n\"False\"\nassert     text_match_zero_one('a')    == True, \n\"False\"\nassert     text_match_zero_one('abbc')    == True, \n\"False\"\nassert     text_match_zero_one('abb')    == True, \n\"False\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one(\"aaab\") == True, \"aaab failed\"\nassert     text_match_zero_one(\"aaab1\") == False, \"aaab1 failed\"\nassert     text_match_zero_one(\"aba\") == False, \"aba failed\"\nassert     text_match_zero_one(\"ab\") == False, \"ab failed\"\n\ndef text_match_zero_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one(\"aab\") == True\nassert     text_match_zero_one(\"aab\") == True\nassert     text_match_zero_one(\"abb\") == True\nassert     text_match_zero_one(\"aaa\") == False\nassert     text_match_zero_one(\"\") == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one(\"a\")     == False     # If it matches, the function should return True.\nassert     text_match_zero_one(\"ab\")     == True     # If it matches, the function should return True.\nassert     text_match_zero_one(\"abb\")     == True     # If it matches, the function should return True.\nassert     text_match_zero_one(\"bb\")     == False     # If it matches, the function should return True.\nassert     text_match_zero_one(\"aa\")     == True     # If it matches, the function should return True.\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one(\"abbba\") == True\nassert     text_match_zero_one(\"bbab\") == False\nassert     text_match_zero_one(\"b\") == True\nassert     text_match_zero_one(\"b\") == True\n\n'''\nQ. Write a function that matches a string that has an 'a' followed by one or more 'b's. You may need to write a function that matches all the numbers from 0 to 9\n'''\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('abbab') == True\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('b') == True\nassert     text_match_zero_one('bba') == False\nassert     text_match_zero_one('bbaa') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one('') == False\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('a') == True\nassert     text_match_zero_one('ab') == True\nassert     text_match_zero_one('aaa') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one('a') == False\nassert     text_match_zero_one('a1') == True\nassert     text_match_zero_one('aa') == True\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('abc') == False\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_reverse_pairs([1, 2, 3, 4, 5, 6, 7]) == 2\ncount_reverse_pairs([7, 6, 5, 4, 3, 2, 1]) == 3\ncount_reverse_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\ncount_reverse_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\ncount_reverse_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\ncount_reverse_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_reverse_pairs(['abcd', 'dcba', 'cbad']) == 3, 'Should be 3'\nassert     count_reverse_pairs(['aaaaa', 'aaaa', 'aa', 'a']) == 5, 'Should be 5'\nassert count_reverse_pairs([]) == 0, 'Should be 0'\nassert count_reverse_pairs(['']) == 0, 'Should be 0'\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_reverse_pairs([]) == 0, \"empty list\"\nassert     count_reverse_pairs(['hello', 'world']) == 2, \"pair 1\"\nassert     count_reverse_pairs(['hello', 'world', 'h']) == 1, \"pair 2\"\nassert     count_reverse_pairs(['hello', 'world', 'h', 'o', 'w', 'r', 'l', 'd']) == 6, \"pair 3\"\nassert     count_reverse_pairs(['hello', 'world', 'h', 'o', 'w', 'r', 'l', 'd', 'j', 'i', 'k']) == 5, \"pair 4\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs([]) == 0, \"Empty list!\"\nassert     count_reverse_pairs([\"\"]) == 0, \"Single element list!\"\nassert     count_reverse_pairs([\"a\"]) == 0, \"Single element list!\"\nassert     count_reverse_pairs([\"ab\"]) == 0, \"Single element list!\"\nassert     count_reverse_pairs([\"ab\", \"bc\"]) == 0, \"Single element list!\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_reverse_pairs([\"a\", \"d\", \"a\", \"c\", \"b\", \"a\"]) == 3, \"Test case 1 should have been passed\"\nassert count_reverse_pairs([\"a\", \"d\", \"a\", \"c\", \"b\", \"a\", \"a\"]) == 4, \"Test case 2 should have been passed\"\nassert count_reverse_pairs([\"a\", \"d\", \"a\", \"c\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == 5, \"Test case 3 should have been passed\"\nassert count_reverse_pairs([\"a\", \"d\", \"a\", \"c\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\""
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_reverse_pairs([]) == 0, \"empty list\"\nassert     count_reverse_pairs([2, 5, 8, 6, 1, 7]) == 5, \"single string\"\nassert     count_reverse_pairs([2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7]) == 10, \"several strings\"\nassert     count_reverse_pairs([2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7]) == 23, \"several strings, all in reverse order\"\nassert     count_reverse_pairs([2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7, 2, 5, 8, 6, 1, 7]) == 27, \"several strings, all in reverse order, same index\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_reverse_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 10\nassert     count_reverse_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\nassert     count_reverse_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,16,17,18,19,20]) == 4"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_reverse_pairs([['rock', 'paper'], ['scissor', 'rock'], ['rock','scissor'], ['paper','scissor']]) == 4\nassert     count_reverse_pairs([['rock', 'paper'], ['rock','scissor'], ['paper','scissor'], ['rock', 'paper']]) == 1\nassert     count_reverse_pairs([['rock', 'paper'], ['rock', 'paper'], ['rock', 'paper']]) == 0\nassert     count_reverse_pairs([['rock', 'paper']]) == 1\nassert     count_reverse_pairs([['paper', 'rock', 'paper']]) == 1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([1,1,2,3,4,3,3,1,1]) == {(1, 1): 4, (2, 3): 3, (3, 3): 3, (1, 1): 1}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1]) == {(1,): 1}\nassert     unique_sublists([1,1,1,1,1,1,1]) == {(1,1): 5}\n\n'''\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([1, 2, 3, 4, 5]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1, (5,): 1}\nassert     unique_sublists([1, 1, 2, 2, 3, 4, 5]) == {(1, 1): 2, (1, 2): 2, (2, 2): 2, (3, 4): 1, (4, 5): 1}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1, 2, 3, 4, 5]) == {}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([1,2,3,4,5]) == {(1,3,5): 1, (2,4,5): 1, (3,4,5): 1}\nassert     unique_sublists([1,2,3,4,5,1,1,1]) == {(1,3,5): 2, (2,4,5): 2, (3,4,5): 2}\nassert     unique_sublists([1,2,3,4,5,2,1,1]) == {(1,3,5): 2, (2,4,5): 2, (3,4,5): 2, (2,1,5): 1, (3,1,5): 1}\nassert     unique_sublists([1,2,3,4,5,2,1,1,5,1]) == {(1,3,5): 2, (2,4,5): 2, (3,4,5): 2, (2,1,5): 1, (3,1,5): 1}\nassert     unique_sublists([1,2,3,4,5,2,1,1,1,5]) == {(1,3,5): 2, (2,4,5): 2, (3,4,5): 2, (2,1,5): 1, (3,1,5): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert unique_sublists([[1,2,3], [4,5], [3,5], [1,2], [1,2]]) == {([1,2], 2): 2, ([1,2,3], 3): 1, ([4,5], 1): 1, ([3,5], 1): 2, ([1,2], 1): 3}\nassert unique_sublists([[1,2,3], [4,5], [3,5], [1,2], [1,2]]) == {([1,2], 2): 2, ([1,2,3], 3): 1, ([4,5], 1): 1, ([3,5], 1): 2, ([1,2], 1): 3}\nassert unique_sublists([[1,2,3], [4,5], [3,5], [1,2], [1,2]]) == {([1,2], 2): 2, ([1,2,3], 3): 1, ([4,5], 1): 1, ([3,5], 1): 2, ([1,2], 1): 3}\nassert unique_sublists([[1,2,3], [4,5], [3,5], [1,2], [1,2]]) == {([1,2], 2): 2, ([1,2,3], 3): 1, ([4,5], 1): 1, ([3,5], 1): 2, ([1,2], 1): 3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([[1,2,3], [1,2,3], [1,2,3]]) == {(1, 2, 3): 3}\nassert unique_sublists([[1,2,3], [1,2], [1,2,3]]) == {(1, 2, 3): 2}\nassert unique_sublists([[1,2], [1,2,3], [1,2]]) == {(1, 2, 3): 2}\nassert unique_sublists([[1,2], [1,2], [1,2,3], [1,2,3], [1,2], [1,2,3], [1,2]]) == {(1, 2): 6, (1, 2, 3): 5}\nassert unique_sublists([[1,2], [1,2], [1,2], [1,2], [1,2]]) == {(1, 2, 3): 4}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlist1 = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]\nprint(\"Unique lists:\", unique_sublists(list1))\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([1,2,3,4]) == {(1,3,4):1, (2,4):1, (3,):1, (4,):1}\nassert     unique_sublists([[1,2], 3]) == {(1,2):1, 3:1}\nassert     unique_sublists([1,2,3,4,5]) == {(1,3,4):2, (2,4,5):1}\nassert     unique_sublists([[1,2,3],3]) == {(1,2,3):2, 3:1}\nassert     unique_sublists([[1,2,3,4],4]) == {(1,2,3,4):1, 4:1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([]) == {}\nassert unique_sublists([[]]) == {}\nassert unique_sublists([[1,2],[3,4]]) == {(1,2):2, (3,4):2}\nassert unique_sublists([[1,2],[3,4,5],[5,6,7]]) == {(1,2):2, (3,4,5):3, (5,6,7):2}\nassert unique_sublists([[1,2],[3,4],[5,6,7],[3,5]]) == {(1,2):2, (3,4):2, (5,6,7):4, (3,5):3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert unique_sublists([]) == {():0}\nassert unique_sublists([1,1,1,1,1,1]) == {():5,(1,):4,(1,1):3,(1,1,1):2}\nassert unique_sublists([1,2,3,4,5]) == {():1,(1,):1,(1,2):1,(1,3):1,(1,4):1,(1,5):1,(2,):1,(2,3):1,(2,4):1,(2,5):1,(3,):1,(3,4):1,(3,5):1,(4,):1,(4,5):1,(5,):1}\nassert unique_sublists([]) == {():0}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([[1, 2, 3], [2], [1, 2, 4, 5], [2, 4, 5]]) == {(1, 2): 2, (2, 4): 2, (1, 2, 3): 1, (2,): 1, (1, 2, 4, 5): 1, (2, 4, 5): 1}\nassert unique_sublists([[1, 2], [1, 2, 3], [2, 3]]) == {(1, 2): 2, (1, 2, 3): 1, (2, 3): 1}"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nis_decimal('0.12') == False\nis_decimal('0.01') == False\nis_decimal('0.122') == True\nis_decimal('0.123') == True\nis_decimal('0.1234') == True\nis_decimal('0.123423') == True\nis_decimal('0.123423') == False\nis_decimal('0.12345') == False\nis_decimal('0.123456') == False\nis_decimal('0.1234567') == False\nis_decimal('0.12345678') == False\nis_decimal('0.123456789') == False\nis_decimal('0.1234567891') == False\nis_decimal('0.1234567892') == False\nis_decimal('0.1234567894') == False\nis_decimal('0.1234567895') == False\nis_decimal('0.1234567897') == False\nis_decimal('0.1234567898') == False\nis_decimal('0.1234567899') == False\nis_decimal('0.123456790') == False\nis_decimal('0.123456789') == False\nis_decimal('0.12345678') == False\nis_decimal('0.1234') == False\nis_decimal('0') == False\nis_decimal('') == False\nis_decimal(' ') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_decimal(100) == True\nassert     is_decimal('100') == False\nassert     is_decimal('1.100') == True\nassert     is_decimal('1.100.0') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_decimal(1) == True\nassert     is_decimal(0) == True\nassert     is_decimal(0.01) == True\nassert     is_decimal(1.0) == True\nassert     is_decimal(0.1) == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_decimal('4.2') == True\nassert     is_decimal('4.2a') == False\nassert     is_decimal('4.2') == False\nassert     is_decimal('4') == False\nassert     is_decimal('a') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_decimal(\"0.1\") == True\nassert     is_decimal(\"0.11\") == False\nassert     is_decimal(\"0.112\") == True\nassert     is_decimal(\"0.1112\") == False\nassert     is_decimal(\"0.1112\") == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_integer(num):\n    '''\n    Write a function to check whether a given string is an integer.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_decimal('0.1') == True\nassert     is_decimal('0.101') == True\nassert     is_decimal('0.1010') == True\nassert     is_decimal('0.11') == False\nassert     is_decimal('0') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_decimal(\"1.0\") == True\nassert     is_decimal(\"1.00\") == True\nassert     is_decimal(\"0.01\") == True\nassert     is_decimal(\"1.00001\") == True\nassert     is_decimal(\"1.0.01\") == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert unique_Element([1, 2, 3, 1, 4]) == False\nassert unique_Element([1, 2, 1, 4]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_Element([1,1,1,1,1,1,1,1,1,1,1]) == False, 'Wrong answer for list : 1 1 1 1 1 1 1 1 1 1 1 1 1'\nassert     unique_Element([1,2,3,1,1,1,1,1,1,1,1]) == True, 'Wrong answer for list : 1 2 3 1 1 1 1 1 1 1 1 1 1'\nassert     unique_Element([1,2,3,4,1,1,1,1,1,1,1]) == False, 'Wrong answer for list : 1 2 3 4 1 1 1 1 1 1 1 1 1'\nassert     unique_Element([1,2,3,4,1,2,3,4,1,2,3]) == False, 'Wrong answer for list : 1 2 3 4 1 2 3 4 1 2 3'\nassert     unique_Element([1,2,3,4,1,2,3,4,1,2,3,4]) == False, 'Wrong answer for list : 1 2 3 4 1 2 3 4 1 2 3 4'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_Element([1,2,3,4,5,6,7,8,8,8,8,10]) == True\nassert     unique_Element([1,1,1,1,1,1,1]) == False\nassert     unique_Element([1,2,3,4,4,5,6,7,7,7]) == False\n\ndef distinct_list(arr):\n    '''\n    Write a python function to check whether the list contains any duplicates or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert unique_Element([1,2,3,3,3,3]) == True\nassert unique_Element([1,2,1,2,1,1]) == False\nassert unique_Element([1,2,3,4,5]) == True\nassert unique_Element([1,1,1,2,3,4,5]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([1,2,2,3,4,4]) == False, 'First Test Failed'\nassert     unique_Element([1,2,3,4,5]) == True, 'Second Test Failed'\nassert     unique_Element([1,1,2,2]) == False, 'Third Test Failed'\nassert     unique_Element([1,1,1]) == True, 'Fourth Test Failed'\nassert     unique_Element([2,2,2,2,2]) == True, 'Fifth Test Failed'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_Element([1,2,3,1,2,3,4,5,1]) == True\nassert     unique_Element([1,2,3,4,5,1]) == False\nassert     unique_Element([1,2,1,2,3,4,5,1]) == False\nassert     unique_Element([1,2,1,2,1]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4])==True, \"Should return True\"\nassert     unique_Element([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(12) == False\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(7) == True\nassert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(2) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(1) == True, 'Month number 1 should contain 30 days'\nassert     check_monthnumber_number(2) == True, 'Month number 2 should contain 28 days'\nassert     check_monthnumber_number(3) == False, 'Month number 3 should not contain 30 days'\nassert     check_monthnumber_number(4) == False, 'Month number 4 should not contain 30 days'\nassert     check_monthnumber_number(5) == False, 'Month number 5 should not contain 30 days'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(5) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == False, \"The month 1 is not 30 days\"\nassert     check_monthnumber_number(2) == False, \"The month 2 is not 30 days\"\nassert     check_monthnumber_number(12) == False, \"The month 12 is not 30 days\"\nassert     check_monthnumber_number(12) == True, \"The month 12 is 30 days\"\nassert     check_monthnumber_number(30) == True, \"The month 30 is 30 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumber_number(1) == False, \"check_monthnumber_number\"\nassert     check_monthnumber_number(2) == True, \"check_monthnumber_number\"\nassert     check_monthnumber_number(3) == False, \"check_monthnumber_number\"\nassert     check_monthnumber_number(4) == False, \"check_monthnumber_number\"\nassert     check_monthnumber_number(5) == False, \"check_monthnumber_number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(3) == True, '3 is not valid'\nassert     check_monthnumber_number(13) == False, '13 is valid'\nassert     check_monthnumber_number(12) == True, '12 is valid'\nassert     check_monthnumber_number(1) == True, '1 is valid'\nassert     check_monthnumber_number(1) == True, '1 is valid'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(1) == True, '1st case'\nassert     check_monthnumber_number(2) == True, '2nd case'\nassert     check_monthnumber_number(3) == False, '3rd case'\nassert     check_monthnumber_number(4) == False, '4th case'\nassert     check_monthnumber_number(5) == False, '5th case'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(5)==True\nassert     check_monthnumber_number(4)==False\n\nprint(\"A) Testing Done\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(2) == False, 'Invalid check_monthnumber_number'\nassert     check_monthnumber_number(12) == True, 'Invalid check_monthnumber_number'\nassert     check_monthnumber_number(4) == False, 'Invalid check_monthnumber_number'\nassert     check_monthnumber_number(13) == False, 'Invalid check_monthnumber_number'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(10) == False\nassert     check_monthnumber_number(11) == True\nassert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(1) == False\nassert     check_monthnumber_number(2) == False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_min_diff([1, 2, 5], 2) == 3\nassert     find_min_diff([1, 2, 5], 6) == 2\nassert     find_min_diff([1, 2, 5, 6], 3) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_min_diff([10,14,19,21],10) == -1\n\nassert\nfind_min_diff([-10,3,7,1],-10) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_min_diff([1,5,3,9,7,10],5) == 1\nassert     find_min_diff([1,2,3,4,5,6],4) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([1,2,3,4,5],5) == 1, \"Wrong Answer\"\nassert     find_min_diff([1,2,3,4,5],1) == 1, \"Wrong Answer\"\nassert     find_min_diff([1,2,3,4,5],2) == 1, \"Wrong Answer\"\nassert     find_min_diff([1,2,3,4,5],3) == -1, \"Wrong Answer\"\nassert     find_min_diff([1,2,3,4,5],4) == 2, \"Wrong Answer\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_min_diff([1,3,10,-10,-1],5)==[-1,10,-10,-1,1]\nassert     find_min_diff([3,4,1,2,3],5)==[-1,3,-1,3,-1]\nassert     find_min_diff([1,3,10,-10,-1],1)==[-1,1,-1,-1,1]\nassert     find_min_diff([1,3,10,-10,-1],-1)==[-1,1,-1,-1,1]\nassert     find_min_diff([1,3,10,20,100,-10,-1],1)==[-1,1,1,1,-1,-1,-1]\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_min_diff([1, 2, 3, 4, 5, 6], 6) == 1, 'Not right'\nassert find_min_diff([1, 2, 3, 4, 5, 6], -1) == -1, 'Not right'\nassert find_min_diff([1, 3, 5, 10], 4) == 1, 'Not right'\nassert find_min_diff([1, 3, 5, 10], 5) == 2, 'Not right'\nassert find_min_diff([-3, -2, -1, 0, 1, 2, 3], -2) == 3, 'Not right'\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_min_diff_naive(arr): \n    '''\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    '''\n    n = len(arr)\n    min_diff = float(\"inf\")\n    for i in range(n): \n        for j in range(i+1, n): \n            min_diff = min(min_diff, arr[j]-arr[i])\n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_min_diff([-4, 1, 3, -5, 6], 3) == 1\nassert     find_min_diff([1, 2, 3, 4], 2) == 2\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr(\"honeycoding is very funny\") == 5\nassert     number_ctr(\"honeycoding\") == 0\nassert     number_ctr(\"h\") == 0\nassert     number_ctr(\"honeycodingisveryfunny\") == 7\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_ctr(\"3\") == 1, \"test failed!\"\nassert     number_ctr(\"12345\") == 5, \"test failed!\"\nassert     number_ctr(\"45678\") == 6, \"test failed!\"\nassert     number_ctr(\"\") == 0, \"test failed!\"\nassert     number_ctr(\"1a2b3c\") == 2, \"test failed!\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr(\"The number of digits in the given string is 4\") == 4, \"Number_ctr\"\n\ndef count_digits(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_ctr(\"hello\") == 0\nassert number_ctr(\"python\") == 3\nassert number_ctr(\"123456\") == 6\nassert number_ctr(\"python1234\") == 6\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr(\"456789\") == 5, \"failed\"\nassert     number_ctr(\"567890\") == 6, \"failed\"\nassert     number_ctr(\"123456789\") == 9, \"failed\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_ctr('0') == 1\nassert     number_ctr('9') == 1\nassert     number_ctr('2') == 1\nassert     number_ctr('1') == 1\nassert     number_ctr('01') == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr('123') == 3\nassert     number_ctr('435532') == 6\nassert     number_ctr('python') == 0\nassert    number_ctr('3.') == 1\nassert    number_ctr('45.33') == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr('') == 0, 'Test 1'\nassert     number_ctr('-55') == 1, 'Test 2'\nassert     number_ctr('12') == 1, 'Test 3'\nassert     number_ctr('0055') == 1, 'Test 4'\nassert     number_ctr('1212') == 2, 'Test 5'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr('10') == 1\nassert     number_ctr('Python') == 1\nassert     number_ctr('1234') == 1\nassert     number_ctr('abc') == 0\nassert     number_ctr('') == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr('Thriller') == 2\nassert     number_ctr('We are the Champions') == 6\nassert     number_ctr('Thriller') == 5\nassert     number_ctr('Its a Wonderful World') == 3\nassert     number_ctr('5') == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef nth_polite(n): \n    '''\n    In a given string, there are only 4 kinds of characters: \n    uppercase \u201cA\u201d, lowercase \u201ca\u201d, digits \u201c0\u201d, and special characters \n    \u201c!\u201d, \u201c@\u201d, and \u201c#\u201d. \n    Your task is to find the first non-polite character and return its ASCII \n    code. \n    Letters are considered non-polite characters if they are not \n    uppercase \u201cA\u201d, lowercase \u201ca\u201d, digits \u201c0\u201d, or special characters \n    \u201c!\u201d, \u201c@\u201d, or \u201c#\u201d. \n    Examples: \n    Input : str = \"A1b0c@d#e\" \n    Output : 65 \n    Input : str = \"1a1b1c@d1e#f#g1h\" \n    Output : 187 \n    Input : str = \"!A#B$%^&*()_+=-`~,./{[]}|;:<>?\" \n    Output : 210 \n    Input : str = \"qwert\" \n    Output : 66 \n    Input : str = \"1a1b1c@d1e#f#g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z\" \n    Output : 224\n    Input : str = \"aeiou\" \n    Output : 208\n    Input : str = \"10203040506070809\" \n    Output : 210\n    Input : str = \"110110\" \n    Output : 130\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef factorial(n):\n    '''\n    Write a program to find the factorial of a given number\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_polite(10) == 3\nassert is_polite(100) == 10\nassert is_polite(1) == 1\n\nclass TestFunc:\n    def test_polite_numbers(self):\n        "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"\\n\\n\",is_polite(3)) \nprint(\"\\n\\n\",is_polite(4)) \nprint(\"\\n\\n\",is_polite(5)) \nprint(\"\\n\\n\",is_polite(6)) \nprint(\"\\n\\n\",is_polite(7)) \nprint(\"\\n\\n\",is_polite(8)) \nprint(\"\\n\\n\",is_polite(9)) \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_words(x):\n    pass\n\n\ndef get_words(x): \n    '''\n    Given a sentence string, return a list of words in the order in which they appear in the input string.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_polite(10) == 11\nassert     is_polite(1) == 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_polite(1) == 1\nassert     is_polite(3) == 5\nassert     is_polite(5) == 11\nassert     is_polite(7) == 17\nassert     is_polite(10) == 19\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nis_polite(5) == (1,2,3,4,5)\nassert is_polite(6) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef partition(arr,low,high): \n    i = ( low-1 )         # index of smaller element \n    pivot = arr[high]     # pivot \n    for j in range(low, high): \n\n        # If current element is smaller than or \n        # equal to pivot \n        if   arr[j] <= pivot: \n\n            # increment index of smaller element \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n\n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(pair_wise([1,2,3,4,5]))"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_wise([1,2,3,4,5]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]]\nassert pair_wise([1,2,3]) == [[1, 2], [2, 3]]\nassert pair_wise([1,2,3,4]) == [[1, 2], [2, 3], [3, 4]]\nassert pair_wise([1,2,3,4,5]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 1]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pair_wise([]) == []\nassert     pair_wise([1]) == [(1,1)]\nassert     pair_wise([1,2,3]) == [(1,2), (2,3)]\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4],[4,5]]\nassert     pair_wise([1,1,2,2,3,3]) == [[1,1],[1,2],[2,2],[2,3],[3,3]]\n\nprint(\"PASSED ALL THE TESTS!!!\")\n\ndef group_by_length(lst):\n    '''\n    Write a function that takes in a list of words and groups them into groups of the same length\n    '''\n    pass"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_wise([0, 1, 2, 3, 4]) == [(0, 1), (1, 2), (2, 3), (3, 4)]\nassert     pair_wise([-1, -2, -3, -4]) == [(0, 1), (1, 2), (2, 3), (3, 4)]\nassert     pair_wise([0]) == [(0, 0)]\nassert     pair_wise([]) == []\nassert pair_wise([0, 1, 2, 3, 4]) == [(0, 1), (1, 2), (2, 3), (3, 4)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert pair_wise([1,2,3,4]) == [[1,2], [2,3], [3,4]]\nassert pair_wise([1,2,3,4,5]) == [[1,2], [2,3], [3,4], [4,5]]\nassert pair_wise([1,2,3,4,5,6]) == [[1,2], [2,3], [3,4], [4,5], [5,6]]\nassert pair_wise([1,2,3,4,5,6,7]) == [[1,2], [2,3], [3,4], [4,5], [5,6], [6,7]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([1, 2, 3, 4, 5, 1]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert pair_wise([1, 2, 3]) == [[1, 2], [2, 3]]\nassert pair_wise([1, 2, 3, 4, 5, 1, 2, 3]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([1,2,3]) == [(1,2),(2,3),(3,1)]\nassert pair_wise([1,3,5,7,9]) == [(1,3),(3,5),(5,7),(7,9),(9,1)]\nassert pair_wise([1,4,5,7,9]) == [(1,4),(4,5),(5,7),(7,9),(9,1)]\nassert pair_wise([1,5,7,9,11]) == [(1,5),(5,7),(7,9),(9,11),(11,1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\nassert pair_wise([3, 5, 7, 9, 10]) == [[3, 5], [5, 7], [7, 9], [9, 10]]\nassert pair_wise([4, 3, 2, 1]) == [[4, 3], [3, 2], [2, 1]]\nassert pair_wise([-5, -4, -3, -2, -1]) == [[-5, -4], [-4, -3], [-3, -2], [-2, -1]]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_pairs_count([1,2,3,4], 4) == 1, 'ERROR: get_pairs_count'\nassert get_pairs_count([1,2,3,4], 5) == 0, 'ERROR: get_pairs_count'\nassert get_pairs_count([1,2,3,4], 10) == 3, 'ERROR: get_pairs_count'\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nget_pairs_count([5, 5, 4, 3, 5], 5) == 1\nprint(\"test case passed\")\n\nprint(\"-----------------\")\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_pairs_count([1,2,3],4) == 2\nassert get_pairs_count([2,1,2],4) == 2\nassert get_pairs_count([1,2,3,4,5],6) == 1\nassert get_pairs_count([3,1,2,3,4,5],6) == 1\nassert get_pairs_count([1,2,3,4,5,6],6) == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_pairs_count([1, 2, 2, 3, 4, 4], 4) == 4, \"Failed\"\nassert     get_pairs_count([4, 2, 2, 3, 4, 4], 4) == 3, \"Failed\"\nassert     get_pairs_count([1, 3, 1, 4, 5], 5) == 0, \"Failed\"\n\n'''\nQuestion: Write a python function to check whether a given string is palindrome or not. \n'''\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_pairs_count([1, 4, 3, 6, 2, 5, 4], 5) == 4\nassert get_pairs_count([1, 4, 3, 6, 2, 5, 4], 2) == 2\nassert get_pairs_count([1, 2, 3, 4, 5], 4) == 0\nassert get_pairs_count([10, 20, 30, 40, 50], 30) == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_pairs_count([0, 0, 1, 2], 2) == 1,'sum=2, count=1'\nassert     get_pairs_count([0, 0, 1, 2], 3) == 0,'sum=3, count=0'\nassert     get_pairs_count([0, 1, 2, 3, 4, 5], 5) == 2,'sum=5, count=2'\nassert     get_pairs_count([0, 1, 2, 3, 4, 5], 5) == 2,'sum=5, count=2'\nassert     get_pairs_count([1, 1, 2, 3, 4, 5], 5) == 1,'sum=5, count=1'\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_pairs_count([1, 1, 3, 4], 4) == 2\nassert     get_pairs_count([1, 1, 3, 4, 6], 5) == 1\n\ndef contains_sum(arr, sum):\n    '''\n    Write a python function to check whether an array contains a particular sum or not. The function gets as input an array and a sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Diff(['A','B','C','D','E'],[2,4,7,9]) == ['A','B','C']\nassert     Diff(['A','B','C','D','E'],[2,4,7,9,1]) == []\nassert     Diff(['A','B','C','D','E'],[2,4,7,9,1,'A']) == ['B','C','D','E']\n\ndef replace(string,character,new_character):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another character.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Diff([1,2,3],[2,3,4]) == [1,2], \"The list is not the same\"\nassert     Diff([2,3,4],[2,3,4]) == [], \"The lists are the same\"\nassert     Diff([1,2,3,4],[2,3,4]) == [1,2,3], \"The lists are different\"\nassert     Diff([1,2,3],[4,5,6]) == [1,2,3], \"The lists are different\"\nassert     Diff([1,2,3,4],[1,2,3,5]) == [4], \"The lists are different\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Diff([1,2,3,4,5],[2,3,4,5,6]) == 5, 'Wrong Output'\nassert Diff([1,2,3,4],[2,3,4,5,6]) == 3, 'Wrong Output'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Diff([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4]\nassert     Diff([1, 2, 3], [1, 2, 3]) == []\nassert     Diff([1, 2], [1, 2, 3]) == [1, 2]\nassert     Diff([], [1]) == []\nassert     Diff([1], [1, 2]) == [1]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([2,3,4],[2,3,5]) ==     [4,5], \"Wrong Output\"\nassert     Diff([2,3,4],[2,3]) ==     [4], \"Wrong Output\"\nassert     Diff([2,3,4],[2,4]) ==     [4], \"Wrong Output\"\nassert     Diff([2,3,4],[1,5]) ==     [4,5], \"Wrong Output\"\nassert     Diff([1,2,3,4,5,6],[6,7,8,9,10]) ==     [1,2,3,4,5], \"Wrong Output\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Diff([1,2,3,4], [1,2,3]) == 2, \"Diff should return 2\"\nassert     Diff([1,2,3], [1,2,3,4]) == 0, \"Diff should return 0\"\nassert     Diff([1,2,3], [1,2]) == 2, \"Diff should return 2\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Diff([1,2,3],[1,2,3]) == [], \"Diff should return [] if the lists are equal\"\nassert     Diff([1,2,3],[1,2]) == [2,3], \"Diff should return a list of elements in common\"\nassert     Diff([1,2,3],[1,2,3]) == [], \"Diff should return [] if the lists are identical\"\nassert     Diff([1,2,3],[1,2,4]) == [2,3], \"Diff should return a list of elements in common\"\nassert     Diff([1,2,3],[1,2,3,4]) == [2,3], \"Diff should return a list of elements in common\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef Pow(x,n):\n    '''\n    Write a python function to get the nth power of x (2nd power, 3rd power,...).\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Diff([1,2,3],[1,2,3]) == 0, \"Test 1 did not pass\"\nassert     Diff([1,2,3],[1,3]) == 2, \"Test 2 did not pass\"\n\nprint(\"All test cases passed\")\n\n\n'''\nStart to write your code here\n'''\ndef Diff(li1,li2):\n    return len(li1) - len(li2)\n\n'''\nDo not change the code below\n'''"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff([3,4,5],[4,5,6]) == [3,5]\nassert     Diff([3,4,5],[4,5,6,7]) == []\nassert     Diff([3,4,5],[4,5,6,7,8]) == [3,4,5]\nassert     Diff([3,4,5],[4,5,6,7,8,9]) == [3,4,5]\nassert     Diff([3,4,5,6],[4,5,6,7,8]) == []\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_num_sum(5) == 1, 'not correct'\nassert odd_num_sum(2) == 3, 'not correct'\nassert odd_num_sum(3) == 9, 'not correct'\nassert odd_num_sum(4) == 9, 'not correct'\n\nprint(\"correct\")\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_num_sum(3) == 1, '2^4 = 4'\nassert     odd_num_sum(8) == 2, '2^4 = 4'\nassert     odd_num_sum(16) == 2, '2^4 = 4'\nassert     odd_num_sum(20) == 2, '2^4 = 4'\nassert     odd_num_sum(21) == 2, '2^4 = 4'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_num_sum(20) == 312, 'Failed: wrong answer'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(7) == 2*2*3*5, \"incorrect output\"\n\nprint(\"correct\")\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_num_sum(1) == 0\nassert     odd_num_sum(2) == 1\nassert     odd_num_sum(3) == 6\nassert     odd_num_sum(4) == 11\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_num_sum(6) == 36\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nodd_num_sum(100)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_num_sum(10) == 45, 'Odd numbers sum is 45.'\nassert odd_num_sum(11) == 110, 'Odd numbers sum is 110.'\nassert odd_num_sum(15) == 2052, 'Odd numbers sum is 2052.'\nassert odd_num_sum(0) == 0, 'Odd numbers sum is 0.'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_num_sum(3) == 25, \"your function is not working properly\"\nassert odd_num_sum(4) == 18, \"your function is not working properly\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression(\"( ( ) ) )\") == True\nassert     check_expression(\"( ( ) ) )\") == False\nassert     check_expression(\"( ( ) ) ) )\") == False\nassert     check_expression(\"( ( ) ) ) )\") == False\nassert     check_expression(\"( ( ) ) ) )\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_expression(\"(((1+2)*(3+4))+5)\") == False\nassert check_expression(\"(1+2)*(3+4)-5\") == False\nassert check_expression(\"1+(2+3)*(4+5)*(6+7)\") == False\nassert check_expression(\"(((1+2))*(3+4)-5\") == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_expression('(()((())()))') == True\nassert     check_expression('((()()()(())))') == True\nassert     check_expression('()()()') == False\nassert     check_expression('((()()(()'+')()))') == False\nassert     check_expression('(((()(()))()))') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (check_expression(\"((()))\") == True), \"Check_expression failed on (())\"\nassert (check_expression(\"((()))\") == False), \"Check_expression failed on (())\"\nassert (check_expression(\"((())\") == False), \"Check_expression failed on (())\"\nassert (check_expression(\"((()))\") == False), \"Check_expression failed on (())\"\nassert (check_expression(\"((()))\") == False), \"Check_expression failed on (())\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_expression(\"(a+b)\") == False, \"Let's check it!\"\nassert     check_expression(\"((a+b)+c)*(d+e)\") == False, \"Let's check it!\"\nassert     check_expression(\"((a+b)+c)*(d+e)\") == False, \"Let's check it!\"\nassert     check_expression(\"((a+b)+c)*(d+e)\") == False, \"Let's check it!\"\nassert     check_expression(\"((a+b)+c)*(d+e)\") == False, \"Let's check it!\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression('((a+b)*(b+c))') == True, \"this is not correct\"\nassert     check_expression('((a+b)*(b+c))') == False, \"this is not correct\"\nassert     check_expression('(a+b)*(b+c)+a') == True, \"this is not correct\"\nassert     check_expression('(a+b)*(b+c)+a') == False, \"this is not correct\"\nassert     check_expression('((a+b)*(b+c))+a') == True, \"this is not correct\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_expression(\"()\") == True, \"Basic Parenthesis\"\nassert     check_expression(\"( )\") == True, \"Parenthesis with space\"\nassert     check_expression(\"( )\") == False, \"Parenthesis without space\"\nassert     check_expression(\"()()\") == True, \"Multiple Parentheses\"\nassert     check_expression(\"(())\") == True, \"Uneven Parentheses\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_expression('((a+b)/c)')== True, 'Testing failed: wrong expression'\nassert     check_expression('((a+b)/c)*')== False, 'Testing failed: wrong expression'\nassert     check_expression('((a+b)/c))')== False, 'Testing failed: wrong expression'\n\nassert     check_expression('a+b+c')== True, 'Testing failed: wrong expression'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    check_expression(\"(a+b)*(c+d)\") \n    == True, \"Wrong\"\n    check_expression(\"(a+b)*(c+d+e+f)\") \n    == True, \"Wrong\"\n    check_expression(\"((a+b)*(c+d))\") \n    == False, \"Wrong\"\n    check_expression(\"((a+b)*(c+d)\") \n    == False, \"Wrong\"\n    check_expression(\"((a+b)*(c+d+e+f))\") \n    == False, \"Wrong\"\n    check_expression(\"((a+b)*(c+d))\") \n    == False, \"Wrong\"\n    check_expression(\"(a+b)\") \n    == True, \"Wrong\"\n    check_expression(\"(a+b)*\") \n    == True, \"Wrong\"\n    check_expression(\"(a+b)*(\") \n    == False, \"Wrong\"\n    check_expression(\"(a+b)*\") \n    == False, \"Wrong\"\n    check_expression(\"(a+b)*(c+d)\") \n    == True, \"Wrong\"\n\ndef reverse_polish_notation(exp):\n    '''\n    Write a function to convert the expression in reverse polish notation to postfix notation.\n    https://www.geeksforgeeks.org/reverse-polish-notation-conversion-python/\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_length('', 5) == ''\nassert     remove_length('', 3) =='me'\nassert     remove_length('you are a string', 1) == 'you a string'\nassert     remove_length('a word with two letters', 2) == 'a w word'\nassert     remove_length('a word with two letters', 3) == 'w word'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_length(\"man i need a taxi to seek the holy grail\", 3) == \"man taxi seek holy\"\nassert     remove_length(\"what is the solution to this problem\", 4) == \"what is the sol\"\nassert     remove_length(\"what is the solution to this problem\", 1) == \"what is th\"\nassert     remove_length(\"what is the solution to this problem\", 0) == \"what is th\"\nassert     remove_length(\"aaa bb cc c\", 1) == \"aaa bb cc\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length('purplepilloooooo',1) == 'purplepillooooo'\nassert     remove_length('purplepilloooooo',2) == 'purplepillooooooo'\nassert     remove_length('purplepilloooooo',3) == 'purplepillooooo'\nassert     remove_length('purplepilloooooo',4) == 'purplepillooooooo'\nassert     remove_length('purplepilloooooo',5) == 'purplepillooooo'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length(\"This is an example to test the remove_length\", 3) == \"Ti si s\"\nassert     remove_length(\"This is an example to test the remove_length\", 1) == \"Ti si s\"\nassert     remove_length(\"This is an example to test the remove_length\", 3) == \"Ti si s\"\nassert     remove_length(\"This is an example to test the remove_length\", 4) == \"Ti si s\"\nassert     remove_length(\"This is an example to test the remove_length\", 5) == \"Ti si s\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_length('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz',3) == ['hi','ab','xyz','ab','xyz','ab','xyz']\nassert \nremove_length('xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxy"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length('peter jones peter jones peter', 3) == 'peter peter peter', 'error case 1'\nassert     remove_length('peter jones peter jones peter', 2) == 'peter jones', 'error case 2'\nassert     remove_length('peter jones peter jones peter', 1) == 'peter jones', 'error case 3'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length(\"aabbbcccddd\",3) == \"aabbcddddddd\"\nassert     remove_length(\"aabbbccccddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_length('geeksforgeeks', 2) == 'eeksg'\nassert     remove_length('geeksforgeeks', 1) == 'eksg'\nassert     remove_length('geeksforgeeks', 0) == 'geeksforgeeks'\nassert     remove_length('geeksforgeeks', 5) == 'geeksforgeeks'\nassert     remove_length('geeksforgeeks', 4) == 'geeks'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntest_str = \"hello world is great\"\nK = 2\nprint(remove_length(test_str, K))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_length('catcat', 1) == 'cat'\nassert     remove_length('catcat', 2) == 'at'\nassert     remove_length('catcat', 3) == 'at'\nassert     remove_length('catcat', 4) == 'cat'\nassert     remove_length('catcat', 5) == 'cat'\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring(text = \"abacabadabacaba\", pattern = \"aba\") == True\nassert     occurance_substring(text = \"abacabadabacaba\", pattern = \"abc\") == False\nassert     occurance_substring(text = \"abacabadabacaba\", pattern = \"dab\") == False\nassert     occurance_substring(text = \"abacabadabacaba\", pattern = \"abc\", case_sensitive = False) == True\nassert     occurance_substring(text = \"abacabadabacaba\", pattern = \"dab\", case_sensitive = False) == False\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    occurance_substring(\"leetcode\",\"e\") == {(1,2),(3,4),(5,6)}\n    occurance_substring(\"codeleet\",\"e\") == {(1,3),(2,4),(3,5),(4,6),(5,7)}\n    occurance_substring(\"abc\",\"c\") == None\n    occurance_substring(\"aabb\",\"b\") == None\n\n'''"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring(\"geeksforgeeks is best for geeks\",\"gee\") == None, \"Wrong\"\nassert     occurance_substring(\"geeksforgeeks is best for geeks\",\"geek\") == None, \"Wrong\"\nassert     occurance_substring(\"geeksforgeeks is best for geeks\",\"e\") == None, \"Wrong\"\nassert     occurance_substring(\"geeksforgeeks is best for geeks\",\"geeks\") == None, \"Wrong\"\nassert     occurance_substring(\"geeksforgeeks is best for geeks\",\"for\") == None, \"Wrong\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     occurance_substring('abcdefghijklmnopqrstuvwxyz', 'zz') == None\nassert occurance_substring('abcdefghijklmnopqrstuvwxyz', 'zzz') == (9, 11)\nassert occurance_substring('abcdefghijklmnopqrstuvwxyz', 'bc') == (2, 4)\nassert occurance_substring('abcdefghijklmnopqrstuvwxyz', 'zzc') == (12, 14)\nassert occurance_substring('abcdefghijklmnopqrstuvwxyz', 'abc') == (0, 3)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef insert_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('aaabcd', 'a') == (True, (0, 1), 'a')\nassert     occurance_substring('aaabcd', 'abc') == (True, (1, 2), 'abc')\nassert     occurance_substring('aaabcd', 'abcd') == (False, None, None)\nassert     occurance_substring('aaabcd', 'abcdef') == (False, None, None)\nassert     occurance_substring('aaabcd', 'aefg') == (False, None, None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     occurance_substring('','') == None\nassert    occurance_substring('','abc') == None\nassert    occurance_substring('abcd','') == None\nassert    occurance_substring('abcd','abc') == None\nassert    occurance_substring('abcd','') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \noccurance_substring('mississippi','i') == None\n\nassert occurance_substring('aaabbbcccc','ab') == (0, 3)\nassert occurance_substring('aaabbbcccc','b') == (3, 6)\nassert occurance_substring('aaabbbcccc','bb') == (6, 9)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_position([1,2,3,4,5,6,7,8,9]) == True\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == True\nassert odd_position([10,11,12,13,14,15,16,17,18,19]) == True\nassert odd_position([10,11,12,13,14,15,16,17,18,19,20]) == True\nassert odd_position([20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]) == True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9]) == True, '1st case failed'\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == False, '2nd case failed'\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True, '3rd case failed'\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == False, '4th case failed'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_position([1,2,3,4,5]) == True, 'Should contain True'\nassert     odd_position([1,2,3,4,6]) == False, 'Should not contain True'\nassert     odd_position([1,2,3,5]) == False, 'Should contain False'\nassert     odd_position([]) == False, 'Should contain False'\nassert     odd_position([1,2,3,4,5,6,7]) == True, 'Should contain True'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_position([1, 2, 3, 4, 5]) == False, \"This list contains an odd number of odd numbers\"\nassert     odd_position([1, 2, 3, 4, 5, 6]) == True, \"This list contains an odd number of even numbers\"\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8]) == False, \"This list contains an even number of even numbers\"\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \"This list contains an even number of odd numbers\""
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_position([1, 2, 3, 4, 5])\nassert not odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nassert not odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nassert not odd_position([])\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert odd_position([1,2,3,4,5]) == False\nassert odd_position([2,1,3,4,5]) == True\n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_position([]) == True, \"test case 1\"\nassert     odd_position([1, 2, 3]) == False, \"test case 2\"\nassert odd_position([5, 1, 4, 8]) == False, \"test case 3\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_position([1, 2, 3, 4]) == False\nassert odd_position([3, 4, 6, 1, 5, 8, 7]) == False\nassert odd_position([4, 1, 5, 2, 8, 7, 9]) == False\nassert odd_position([5, 2, 3, 1, 7, 9, 8]) == True\nassert odd_position([4, 1, 3, 2, 8, 7, 9]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_position([0, 1, 4, 3, 6, 7, 2]) == True\nassert     odd_position([0, 1, 4, 3, 6, 7, 2, 10]) == False\n\ndef find_3_repeating_numbers(nums):\n    '''\n    Write a python function to find 3 repeating numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels('Hiiii') == 3\nassert count_vowels('Aa') == 2\nassert count_vowels('B') == 1\nassert count_vowels('m') == 0\nassert count_vowels('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == 40\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_vowels('aaacccdd')    == 5\nassert     count_vowels('in')            == 0\nassert     count_vowels('h')            == 0\nassert     count_vowels('m')            == 3\nassert     count_vowels('q')            == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_vowels('AaAa') == 0\nassert     count_vowels('BbB') == 1\nassert     count_vowels('EeEe') == 0\nassert     count_vowels('IiI') == 0\nassert     count_vowels('OoO') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels('music') == 2\nassert count_vowels('aaasss') == 5\nassert count_vowels('xyz') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_vowels(\" \") == 0\nassert     count_vowels(\"Hello, my Name is!\") == 2\nassert     count_vowels(\"z\") == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels('abd') == 1\nassert     count_vowels('aba') == 2\nassert     count_vowels('abcd') == 0\nassert     count_vowels('a') == 1\nassert     count_vowels('ab') == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_vowels(\"abdec\") == 1, \"incorrect\"\nassert     count_vowels(\"aeiou\") == 0, \"incorrect\"\nassert     count_vowels(\"bcbab\") == 2, \"incorrect\"\nassert     count_vowels(\"leetcode\") == 0, \"incorrect\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels('python') == 2, 'First'\nassert     count_vowels('python') == 1, 'Second'\nassert     count_vowels('am') == 0, 'Third'\nassert     count_vowels('bobo') == 2, 'Fourth'\nassert     count_vowels('pepe') == 1, 'Fifth'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_vowels('hello') == 3\ncount_vowels('sea') == 2\ncount_vowels('love') == 4\ncount_vowels('its') == 0\ncount_vowels('why') == 0\n\n\n'''\nWrite a function to replace all spaces in a string with \"%20\". You may assume that the string\nhas sufficient space at the end to hold the additional characters, and that you are given the \"true\"\nlength of the string. (Note: If implementing in Java, please use a character array so that you can\nperform this operation in place.)\n'''\n\ndef urlify(string, true_len):\n    '''\n    Implement the function of replacing all spaces in a string with \"%20\"\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_sum([]) == 0\nassert     find_sum([1]) == 1\nassert     find_sum([1,1]) == 2\nassert     find_sum([1,2]) == 3\nassert     find_sum([1,2,1]) == 4\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_sum([1,2,3,4,5,1,3,4,5]) == 9, \"Wrong answer\"\nassert find_sum([1,2,3,4,5,1,3,4,5]) == 12, \"Wrong answer\"\nassert find_sum([1,2,3,4,5,1,3,4,5]) == 12, \"Wrong answer\"\nassert find_sum([1,2,3,4,5,1,3,4,5]) == 12, \"Wrong answer\"\nassert find_sum([1,2,3,4,5,1,3,4,5]) == 12, \"Wrong answer\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr = []\nfind_sum(arr)\n\n\ndef sum_of_list(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_sum([3, 4, 5, 5, 6, 6, 7, 8, 9, 10]) ==  10 \nassert     find_sum([2, 4, 5, 5, 6, 6, 7, 8, 9, 10]) ==  9\nassert     find_sum([10, 10, 10, 10, 10]) ==  10\nassert     find_sum([10, 10, 10, 11, 10, 10, 10, 10, 10, 10]) ==  10\nassert     find_sum([10, 10, 10, 10, 10, 11, 10, 10, 10, 10]) ==  11\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Completed, check the result\")\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_sum({\"a\":1,\"b\":2,\"c\":3,\"d\":4}) == 6, \"Should be 6\"\nassert     find_sum({\"a\":1,\"b\":1,\"c\":3,\"d\":4}) == 4, \"Should be 4\"\nassert     find_sum({\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}) == 8, \"Should be 8\"\nassert     find_sum({\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6}) == 15, \"Should be 15\"\nassert     find_sum({\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6,\"g\":7}) == 22, \"Should be 22\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_sum([1,1,4,4,5,5,5,4,4,2])==8\nassert     find_sum([])==0\nassert     find_sum([5,5,5])==5\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_sum([1,2,3,4,5]) == 15\nassert     find_sum([1,2,3,3,5]) == 9\nassert     find_sum([1,2,3,4,5]) == 15\nassert     find_sum([1,1,2,3,4]) == 4\nassert     find_sum([]) == 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_sum([1, 2, 3, 5, 6, 9, 4]) == 10, \"Wrong sum\"\nassert     find_sum([1, 1, 2, 4, 5, 5, 6]) == 12, \"Duplicate elements\"\n\n\ndef find_sum_optimized(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,3,4]) == [[1, 2], [3, 4, 3, 4]]\nassert     pack_consecutive_duplicates([1,2,3,4,3,4,4]) == [[1, 2], [3, 4, 3, 4]]\nassert     pack_consecutive_duplicates([1,1,1,1,1,1]) == [[1, 1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \npack_consecutive_duplicates([2, 3, 1, 2]) == [[2, 3], 2]\nassert \npack_consecutive_duplicates([2, 2, 1, 2, 2, 1]) == [[2, 2], 2, 2]\nassert \npack_consecutive_duplicates([2, 2, 1, 2, 2, 3, 2]) == [[2, 2], 2, 2, 2]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,3,4,5,6,7,8]) == [[1,2,3], [3,4,5], [6,7,8]]\nassert     pack_consecutive_duplicates([1,1,1,1,2,2,2,2,3,3,4]) == [[1,1,1,1], [1,2,2,2], [2,2,3,3,4]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates(['a', 'a', 'b', 'b']) == [['a', 'a'], ['b', 'b']]\nassert     pack_consecutive_duplicates(['a', 'b', 'a', 'a', 'b', 'b']) == [['a', 'b', 'a'], ['a', 'b', 'a']]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([1,2,1,3,2]) == [[1, 2], [3]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1,2]) == [[1, 2]]\nassert     pack_consecutive_duplicates([1,2,3]) == [[1, 2], [3]]\nassert     pack_consecutive_duplicates([1,2,1,3,2]) == [[1, 2], [3]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,3,4,4,5]) == [[1,2],[3,4],[5]]\nassert     pack_consecutive_duplicates([1,2,3,3,4,4,5]) == [[1,2,3],[4,4,5]]\nassert     pack_consecutive_duplicates([1,2,3,3,4,4,5,5]) == [[1,2,3,4,5],[5]]\nassert     pack_consecutive_duplicates([1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]) == [[1,2,3,4,5,6,7,8,9,10]]\nassert     pack_consecutive_duplicates([1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]) == [[1,2,3,4,5,6,7,8,9,10]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 2, 3, 3, 3, 4]) == [[1, 1], [1, 1], [1, 1], [1, 2], [1, 3], [1, 3], [1, 3], [1, 4]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 2, 3, 3, 3, 4, 4]) == [[1, 1], [1, 1], [1, 1], [1, 2], [1, 3], [1, 3], [1, 3], [1, 4], [1, 4]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 2, 3, 3, 3, 4, 5]) == [[1, 1], [1, 1], [1, 1], [1, 2], [1, 3], [1, 3], [1, 3], [1, 4], [1, 4], [1, 5]]\nassert     pack_consecutive_duplicates([2, 1, 1, 1, 1, 2, 3, 3, 3, 4, 5]) == [[2, 1], [1, 1], [1, 1], [1, 2], [1, 3], [1, 3], [1, 3], [1, 4], [1, 5]]\n\ndef unpack_consecutive_duplicates(list2):\n    '''\n    Write a function to unpack consecutive duplicates of a given list elements into sublists.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates([1,1,1,1,2,2,3,3,3,3,4,4,4,4,4,4,4,5]) == [[1,1,1],[2,2,3],[4,4,4,4],[5,]]\nassert     pack_consecutive_duplicates([1,2,2,3,4,4,5,6,7]) == [[1,2,2,3],[4,4,5,6],[7]]\nassert     pack_consecutive_duplicates([1,2,2,3,4,4,5,6]) == [[1,2,2,3],[4,4,5,6]]\n\ndef divisible_sum_pairs(n, k, ar):\n    '''\n    Given an array of positive integers, the task is to count all the pairs (a,b) with (a,b) divisible by k.\n    Note: the pairs can be in either order.\n    '''\n    count = 0\n    for x in range(len(ar)):\n        for y in range(x+1,len(ar)):\n            if (ar[x]+ar[y])%k == 0:\n                count += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([]) == {(): 1}, \"Expected an empty list to return a dictionary with a single empty tuple\"\nassert     unique_sublists([2,4,5,6,2,3,4,5,6]) == {(2,): 1, (3,): 1, (4,): 2, (5,): 3, (6,): 3}, \"Expected a list with distinct integers to return a dictionary with tuples with their count\"\nassert     unique_sublists([2,5,6,2,3,4,5,6]) == {(2,): 2, (3,): 1, (4,): 1, (5,): 2, (6,): 2}, \"Expected a list with distinct integers to return a dictionary with tuples with their count\"\nassert     unique_sublists([2,5,6,2,3,4,5,6,7]) == {(2,): 2, (3,): 1, (4,): 1, (5,): 2, (6,): 2, (7,): 1}, \"Expected a list with distinct integers to return a dictionary with tuples with their count\"\nassert     unique_sublists([2,5,6,2,3,4,5,6,7,8]) == {(2,): 2, (3,): 1, (4,): 1, (5,): 2, (6,): 2, (7,): 1, (8,): 1}, \"Expected a list with distinct integers to return a dictionary with tuples with their count\"\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef delete_duplicates(list1):\n    '''\n    Write a function that returns the new list without duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([[1,1,2],[1,2,3],[1,4,5]]) == {([1,1,2],[1,2,3],[1,4,5]): 3}\nassert     unique_sublists([1,1,2,1,2,3,1,4,5]) == {([1,1,2],[1,2,3],[1,4,5]): 2}\nassert     unique_sublists([1,1,2,1,2,3,1,4,5,2,3]) == {([1,1,2],[1,2,3],[1,4,5]): 2, ([1,1,2],[1,2,3],): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([[1, 2], [1, 1], [1, 2], [1, 3]]    ) == { (1, 1): 4, (1, 2): 3, (1, 3): 1 }\nassert     unique_sublists([[1, 2], [1, 1]]    ) == { (1, 1): 2 }\nassert     unique_sublists([[1, 1, 1], [1, 1, 1]]) == { (1, 1, 1): 1 }\nassert     unique_sublists([[1, 2], [2, 3], [2, 3], [4, 5]]) == { (1, 2): 4, (2, 3): 2 }\nassert     unique_sublists([[1, 1], [1, 1]]) == { (1, 1): 2 }\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([[1,2,3], [2,3,4], [1,2], [3,4,5]]) == {(1,2):2, (2,3):2, (1,2):1, (3,4,5):1}\nassert     unique_sublists([[1,2,3], [2,3,4], [1,2], [3,4,5], [1,2], [3,4,5]]) == {(1,2,3):3, (2,3,4):2, (1,2,5):1}\nassert     unique_sublists([[1,2,3], [2,3,4], [1,2], [3,4,5], [1,2], [3,4,5]]) == {(1,2,3):3, (2,3,4):2, (1,2,5):1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1]) == {1: 1}\nassert     unique_sublists([1, 1, 1, 1, 1]) == {1: 5}\nassert     unique_sublists([1, 1, 1, 1, 2, 2, 2, 2, 2, 2]) == {1: 10}\nassert     unique_sublists([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == {1: 8, 2: 4}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[], [], []]) == {(): 3}\nassert     unique_sublists([[1, 2], [1, 2], [1, 2]]) == {(): 1, (1,): 1, (1, 2): 1}\nassert     unique_sublists([[], [], []]) == {(): 3}\nassert     unique_sublists([[]]) == {(): 1}\nassert     unique_sublists([]) == {}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([[1, 2, 3], [1, 2], [1, 3], [2, 3]]) == {([1, 2], 2), ([1, 3], 1), ([2, 3], 1)}\n\ndef unique_sublists_with_count(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations(tuple([1,2,3,4,5,6])) == [\n        (1,2,3,4,5,6), \n        (2,3,4,5,6), \n        (3,4,5,6), \n        (4,5,6)]"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    assert test_list[0] == {'a':1, 'b':1}\n    assert test_list[1] == {'a':1, 'b':2}\n    assert test_list[2] == {'a':1, 'b':3}\n    "
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([(1,2),(2,3),(3,4)]) == [[(1, 2), (2, 3), (3, 4)]]\nassert find_combinations([(1,2),(3,4),(5,6)]) == [[(1, 2), (3, 4), (5, 6)]]\nassert find_combinations([(1,2),(3,4),(5,6)]) == [[(1, 2), (3, 4), (5, 6)]]\nassert find_combinations([(1,2),(3,4),(5,6)]) == [[(1, 2), (3, 4), (5, 6)]]\nassert find_combinations([(1,2),(3,4),(5,6)]) == [[(1, 2), (3, 4), (5, 6)]]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_combinations([(1,1),(2,2),(3,3)]) == [(1,1),(2,2),(3,3)]\nassert     find_combinations([(3,3),(4,4),(5,5)]) == [(3,3),(4,4),(5,5)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([1, 2, 3, 4]) == [[1, 2, 3], [2, 2, 3], [3, 2, 3], [1, 3, 2], [1, 2, 4], [1, 3, 4], [2, 3, 4], [3, 3, 4]]\nassert     find_combinations([3, 4, 5, 6]) == [[3, 4, 5], [4, 4, 5], [5, 4, 5], [3, 5, 4], [3, 4, 6], [3, 5, 6], [4, 5, 6], [5, 5, 6]]\n\ndef find_combinations_with_generator(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([(1, 2), (2, 3), (3, 4), (4, 5)]) ==    [(1, 2, 3, 4, 5)]\nassert     find_combinations([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) ==    [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\nassert     find_combinations([(1, 2), (1, 3), (1, 4), (1, 5)]) ==    [(1, 2), (1, 3), (1, 4), (1, 5)]\nassert     find_combinations([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) ==    [(1, 2, 3, 4, 5, 6), (1, 2, 3, 5, 6), (1, 2, 4, 5, 6), (1, 3, 4, 5, 6), (1, 3, 4, 5, 6), (1, 3, 4, 5, 6), (1, 4, 5, 6), (1, 4, 5, 6), (1, 5, 6), (2, 3, 4, 5, 6), (2, 3, 4, 5, 6), (2, 3, 4, 5, 6), (2, 4, 5, 6), (2, 4, 5, 6), (2, 5, 6)]\nassert     find_combinations([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10)]) ==    [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_combinations([[1,2,3],\n                          [2,3,4],\n                          [3,4,5],\n                          [4,5,6]]) == [(1,2,3,4), (1,2,4,5), (1,3,4,5), (2,3,4,5), (2,3,5,6), (2,4,5,6), (3,4,5,6)]\n\nassert find_combinations([]) == []"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_combinations([(1,2,3),(2,3,4),(3,4,5)]) == [\n        (1,2,3),\n        (2,3,4),\n        (3,4,5)\n    ], \"Should be (1,2,3), (2,3,4), (3,4,5)\"\nassert     find_combinations([(1,2),(2,3),(3,4)]) == [\n        (1,2),\n        (2,3),\n        (3,4)\n    ], \"Should be (1,2), (2,3), (3,4)\"\nassert     find_combinations([(1,2),(1,3),(1,4)]) == [\n        (1,2),\n        (1,3),\n        (1,4)\n    ], \"Should be (1,2), (1,3), (1,4)\"\nassert     find_combinations([(1,2),(2,3),(1,3)]) == [\n        (1,2),\n        (2,3),\n        (1,3)\n    ], \"Should be (1,2), (2,3), (1,3)\"\nassert     find_combinations([(1,2),(2,3),(3,4)]) == [\n        (1,2),\n        (2,3),\n        (3,4)\n    ], \"Should be (1,2), (2,3), (3,4)\"\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(1, 2), (3, 4)]) == [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nassert     find_combinations([(1, 2), (3, 4)]) ==     [(1, 2), (3, 4)]\nassert     find_combinations([(1, 2), (3, 4)]) ==     [(1, 2), (3, 4)]\nassert     find_combinations([(1, 2), (3, 4)]) ==     [(1, 2), (3, 4)]\nassert     find_combinations([(1, 2), (3, 4)]) ==     [(1, 2), (3, 4)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations([[0, 1], [1, 0], [0, 0]]) == [[(0, 1), (1, 0), (0, 0)], [(0, 1), (1, 0), (0, 0), (1, 0)], [(0, 0), (1, 0), (0, 1), (1, 0)], [(0, 0), (1, 0), (0, 1), (1, 0), (0, 0)]]\nassert    find_combinations([[0, 1], [1, 0], [0, 0], [1, 1]]) == [[(0, 1), (1, 0), (0, 0), (1, 1)], [(0, 1), (1, 0), (0, 0), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1)]]\nassert    find_combinations([[0, 1], [1, 0], [0, 0], [1, 1], [1, 1]]) == [[(0, 1), (1, 0), (0, 0), (1, 1), (1, 1)], [(0, 1), (1, 0), (0, 0), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1)]]\nassert    find_combinations([[0, 1], [1, 0], [0, 0], [1, 1], [1, 1], [1, 1]]) == [[(0, 1), (1, 0), (0, 0), (1, 1), (1, 1), (1, 1)], [(0, 1), (1, 0), (0, 0), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1)]]\nassert    find_combinations([[0, 1], [1, 0], [0, 0], [1, 1], [1, 1], [1, 1], [1, 1]]) == [[(0, 1), (1, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 1), (1, 0), (0, 0), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1)], [(0, 0), (1, 0), (0, 1), (1, 1), (1, 1), (1, 1), (1, 1)]]\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncount_divisors(12)\ncount_divisors(100)\ncount_divisors(9)\ncount_divisors(1)\ncount_divisors(0)\ncount_divisors(1.2)\ncount_divisors(0.1)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_divisors(1) == 0, \"count_divisors(1) = %d, expected 0\" % count_divisors(1)\nassert     count_divisors(2) == 1, \"count_divisors(2) = %d, expected 1\" % count_divisors(2)\nassert     count_divisors(3) == 2, \"count_divisors(3) = %d, expected 2\" % count_divisors(3)\nassert     count_divisors(4) == 2, \"count_divisors(4) = %d, expected 2\" % count_divisors(4)\nassert     count_divisors(5) == 4, \"count_divisors(5) = %d, expected 4\" % count_divisors(5)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_if_prime(n):\n    '''\n    Write a python function to check whether a number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    count_divisors(1) == 1\n    count_divisors(2) == 2\n    count_divisors(3) == 2\n    count_divisors(4) == 2\n    count_divisors(5) == 4\n    count_divisors(6) == 4\n    count_divisors(7) == 4\n    count_divisors(8) == 2\n    count_divisors(9) == 3\n    count_divisors(10) == 3\n    count_divisors(12) == 2\n    count_divisors(15) == 6\n    count_divisors(21) == 6\n    count_divisors(22) == 2\n    count_divisors(23) == 4\n    count_divisors(24) == 2\n    count_divisors(25) == 3\n    count_divisors(26) == 4\n    count_divisors(27) == 4\n    count_divisors(28) == 2\n    count_divisors(29) == 2\n    count_divisors(30) == 3\n    count_divisors(32) == 2\n    count_divisors(33) == 3\n    count_divisors(34) == 2\n    count_divisors(35) == 5\n    count_divisors(36) == 2\n    count_divisors(37) == 2\n    count_divisors(38) == 2\n    count_divisors(39) == 4\n    count_divisors(40) == 2\n    count_divisors(41) == 2\n    count_divisors(42) == 2\n    count_divisors(43) == 2\n    count_divisors(44) == 2\n    count_divisors(45) == 3\n    count_divisors(46) == 2\n    count_divisors(47) == 2\n    count_divisors(48) == 3\n    count_divisors(49) == 2\n    count_divisors(50) == 3\n    count_divisors(51) == 2\n    count_divisors(52) == 3\n    count_divisors(53) == 2\n    count_divisors(54) == 5\n    count_divisors(55) == 2\n    count_divisors(56) == 4\n    count_divisors(57) == 2\n    count_divisors(58) == 3\n    count_divisors(59) == 2\n    count_divisors(60) == 2\n    count_divisors(61) == 2\n    count_divisors(62) == 4\n    count_divisors(63) == 2\n    count_divisors(64) == 2\n    count_divisors(65) == 2\n    count_divisors(66) == 2\n    count_divisors(67) == 5\n    count_divisors(68) == 2\n    count_divisors(69) == 2\n    count_divisors(70) == 2\n    count_divisors(71) == 2\n    count_divisors(72) == 3\n    count_divisors(73) == 2\n    count_divisors(74) == 2\n    count_divisors(75) == 3\n    count_divisors(76) == 2\n    count_divisors(77) == 2\n    count_divisors(78) == 2\n    count_divisors(79) == 2\n    count_divisors(80) == 2\n    count_divisors(81) == 2\n    count_divisors(82) == 2\n    count_divisors(83) == 3\n    count_divisors(84) == 2\n    count_divisors(85) == 2\n    count_divisors(86) == 2\n    count_divisors(87) == 2\n    count_divisors(88) == 2\n    count_divisors(89) == 3\n    count_divisors(90) == 3\n    count_divisors(91) == 2\n    count_divisors(92) == 2\n    count_divisors(93) == 2\n    count_divisors(94) == 2\n    count_divisors(95) == 2\n    count_divisors(96) == 2\n    count_divisors(97) == 3\n    count_divisors(98) == 2\n    count_divisors(99) == 2\n    count_divisors(100) == 2\n    count_divisors(101) == 2\n    count_divisors(102) == 2\n    count_divisors(103) == 2\n    count_divisors(104) == 2\n    count_divisors(105) == 3\n    count_divisors(106) == 2\n    count_divisors(107) == 2\n    count_divisors(108) == 2\n    count_divisors(109) == 2\n    count_divisors(110) == 3\n    count_divisors(111) == 2\n    count_divisors(112) == 2\n    count_divisors(113) == 2\n    count_divisors(114) == 2\n    count_divisors(115) == 3\n    count_divisors(116) == 2\n    count_divisors(117) == 2\n    count_divisors(118) == 2\n    count_divisors(119) == 2\n    count_divisors(120) == 2\n    count_divisors(121) == 2\n    count_divisors(122) == 2\n    count_divisors(123) == 2\n    count_divisors(124) == 2\n    count_divisors(125) == 2\n    count_divisors(126) == 2\n    count_divisors(127) == 2\n    count_divisors(128) == 2\n    count_divisors(129) == 2\n    count_divisors(130) == 2\n    count_divisors(131) == 2\n    count_divisors(132) == 2\n    count_divisors(133) == 2\n    count_divisors(134) == 2\n    count_divisors(135) == 2\n    count_divisors(136) == 2\n    count_divisors(137) == 2\n    count_divisors(138) == 2\n    count_divisors(139) == 2\n    count_divisors(140) == 2\n    count_divisors(141) == 2\n    count_divisors(142) == 2\n    count_divisors(143) == 2\n    count_divisors(144) == 2\n    count_divisors(145) == 2\n    count_divisors(146) == 2\n    count_divisors(147) == 2\n    count_divisors(148) == 2\n    count_divisors(149) == 2\n    count_divisors(150) == 2\n    count_divisors(151) == 2\n    count_divisors(152) == 2\n    count_divisors(153) == 2\n    count_divisors(154) == 2\n    count_divisors(155) == 2\n    count_divisors(156) == 2\n    count_divisors(157) == 2\n    count_divisors(158) == 2\n    count_divisors(159) == 2\n    count_divisors(160) == 2\n    count_divisors(161) == 2\n    count_divisors(162) == 2\n    count_divisors(163) == 2\n    count_divisors(164) == 2\n    count_divisors(165) == 2\n    count_divisors(166) == 2\n    count_divisors(167) == 2\n    count_divisors(168) == 2\n    count_divisors(169) == 2\n    count_divisors(170) == 2\n    count_divisors(171) == 2\n    count_divisors(172) == 2\n    coun"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_divisors(5) == 2\ncount_divisors(6) == 1\ncount_divisors(9) == 3\ncount_divisors(10) == 2\ncount_divisors(1) == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_divisors(4) == 2, \"Failed: count_divisors(4)\"\nassert     count_divisors(11) == 7, \"Failed: count_divisors(11)\"\nassert     count_divisors(1) == 1, \"Failed: count_divisors(1)\"\nassert     count_divisors(0) == 1, \"Failed: count_divisors(0)\"\nassert     count_divisors(18) == 4, \"Failed: count_divisors(18)\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_divisors(10) == 3, 'Should return 2'\nassert     count_divisors(5) == 2, 'Should return 2'\nassert     count_divisors(1) == 1, 'Should return 1'\nassert     count_divisors(4) == 2, 'Should return 2'\nassert     count_divisors(0) == 1, 'Should return 1'\nprint('count_divisors passes all the tests')\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(count_divisors(3))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_divisors2(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1,n+1) : \n        if n%i == 0 : \n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_divisors(10) == 6\ncount_divisors(100) == 8\n\ndef count_divisors_leo(n):\n    '''\n    Write a python function to count the number of divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_length_sum([[1,2,3],\n                          [4,5,6],\n                          [7,8,9],\n                          [0,1,2,3]]) == 15\nassert     odd_length_sum([[1,2,3],\n                          [4,5,6,7],\n                          [7,8,9],\n                          [0,1,2,3]]) == 32\nassert     odd_length_sum([[1,2,3],\n                          [4,5,6,7],\n                          [7,8,9],\n                          [0,1,2,3,4]]) == 36\nassert     odd_length_sum([[1,2,3],\n                          [4,5,6,7],\n                          [7,8,9],\n                          [0,1,2,3,4,5]]) == 29\nassert     odd_length_sum([[1,2,3,4],\n                          [5,6,7,8],\n                          [9,10,11,12],\n                          [13,14,15,16]]) == 38\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(odd_length_sum([1, 2, 3, 4]))\nprint(odd_length_sum([1, 2, 3, 4, 5, 6]))\nprint(odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nassert \nassert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_length_sum([1,2,3,4,5,6,7]) == 15\nassert     odd_length_sum([1,2,3,4,5,6,7,8]) == 15\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9]) == 15\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 15\nassert     odd_length_sum([]) == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_length_sum([1,2,3,4,5]) == 9, 'incorrect output'\nassert     odd_length_sum([1,2,3,4,5,6]) == 15, 'incorrect output'\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10]) == 45, 'incorrect output'\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10,11]) == 55, 'incorrect output'\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 946, 'incorrect output'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_length_sum([]) == 0, \"incorrect result\"\nassert odd_length_sum([1]) == 1, \"incorrect result\"\nassert odd_length_sum([1, 2]) == 3, \"incorrect result\"\nassert odd_length_sum([1, 2, 3]) == 6, \"incorrect result\"\nassert odd_length_sum([1, 2, 3, 4]) == 9, \"incorrect result\"\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_length_sum([1,2,3,4,5,6]) == 4\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 21\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 23\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 33\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 42\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert rgb_to_hsv(1, 1, 1) == (1, 1, 1)\nassert rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert rgb_to_hsv(127, 127, 127) == (255, 255, 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nrgb_to_hsv(0, 0, 0) == (0, 0, 0)\nrgb_to_hsv(255, 255, 255) == (180, 255, 255)\nrgb_to_hsv(255, 0, 255) == (239, 1, 255)\nrgb_to_hsv(255, 255, 0) == (255, 255, 0)\nrgb_to_hsv(0, 255, 0) == (0, 255, 0)\nrgb_to_hsv(0, 0, 255) == (0, 0, 255)\nrgb_to_hsv(255, 255, 255) == (0, 0, 0)\nrgb_to_hsv(253, 255, 255) == (120, 100, 100)\n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert     rgb_to_hsv(0, 1, 0) == (0, 1, 0)\nassert     rgb_to_hsv(0, 0, 1) == (0, 0, 1)\nassert     rgb_to_hsv(1, 0, 0) == (1, 0, 0)\nassert     rgb_to_hsv(0.5, 0, 0) == (0, 0, 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert rgb_to_hsv(0, 255, 0) == (0, 1, 0)\nassert rgb_to_hsv(255, 0, 0) == (1, 0, 0)\nassert rgb_to_hsv(255, 255, 255) == (1, 1, 1)\nassert rgb_to_hsv(0, 255, 255) == (0, 1, 1)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([3, 4, 5, 6, 7]) == (24, 0)\nassert     mul_even_odd([3, 3, 3, 3]) == (9, 3)\nassert     mul_even_odd([5, 7, 9]) == (0, 40)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mul_even_odd([2,3,4,5,6,7,8]) == 240\nassert     mul_even_odd([2,3,4,5,6,7,8,9,10,11]) == 720\nassert     mul_even_odd([2,3,4,5,6,7,8,9,10]) == 120\nassert     mul_even_odd([2,3,4,5,6,7,8,9]) == 120\nassert     mul_even_odd([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 14400\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     mul_even_odd([-10, 3, -20, 30, -10, 1, 4, -50, 60, -10, 1, 4, -50, 60, -10, 1, 4, -50, 60]) == (-400, -900)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (36, 0)\nassert     mul_even_odd([5, 7, 3, 9]) == (15, 8)\nassert     mul_even_odd([5, 4, 3, 8, 4, 4, 6, 10, 11, 7, 12]) == (330, 28)\nassert     mul_even_odd([1, 2, 3, 4]) == (24, 0)\nassert     mul_even_odd([5, 2, 7, 4, 3, 8, 10]) == (60, 0)\nprint(\"mul_even_odd: Passed\")\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mul_even_odd([]) == 0\nassert     mul_even_odd([10, 20, 30, 40, 50]) == 240\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert mul_even_odd([3, 4, 5, 6, 7]) == 14, '3*4+5*6+7*7=14'\nassert mul_even_odd([1, 2, 3, 4, 5]) == 30, '1*2+3*4+4*5=30'\nassert mul_even_odd([1, 3, 5, 7, 9]) == 56, '1*3+5*7+9*9=56'\nassert mul_even_odd([4, 6, 8, 10, 11, 12, 13]) == 240, '4*6+8*10+12*12+13*13=240'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mul_even_odd([2,4,6,8,10,12])== 48, 'incorrect'\nassert     mul_even_odd([1,3,5,7,9])== 3, 'incorrect'\nassert     mul_even_odd([1,3,5,7,9,11])== 63, 'incorrect'\nassert     mul_even_odd([5,6,7,8,9,10])== 120, 'incorrect'\nassert     mul_even_odd([5,6,7,8,9,10,11])== 120, 'incorrect'\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int(('a', 'b', 'c')) == ('a', 'b', 'c')\nassert     tuple_str_int(('a', 'b')) == ('a', 'b')\nassert     tuple_str_int(('a',)) == ('a',)\nassert     tuple_str_int(()) == ()\nassert     tuple_str_int(('a', 'b', 'c')) == (100, 200, 300)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int('())') == ()\nassert tuple_str_int('((1, 2, 3))') == (1, 2, 3)\nassert tuple_str_int('((1,))') == (1,)\nassert tuple_str_int('((1, 2, 3),)') == (1, 2, 3)\nassert tuple_str_int('((1, 2),)') == (1, 2)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(4,5,6)\") == (4,5,6)\nassert     tuple_str_int(\"(7,8,9)\") == (7,8,9)\nassert     tuple_str_int(\"()\") == ()\nassert     tuple_str_int(\"(1)\") == (1,)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int('()') == ()\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(0,1,2,3)') == (0,1,2,3)\nassert     tuple_str_int('(0,0,0,1)') == (0,0,0,1)\nassert     tuple_str_int('()') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_str_int(\"(2, 3)\") == (2, 3), \"Should be (2, 3)\"\nassert     tuple_str_int(\"(2, 3)\") == (2, 3), \"Should be (2, 3)\"\nassert     tuple_str_int(\"(2,)\") == (2,), \"Should be (2,)\"\nassert     tuple_str_int(\"(2,3)\") == (2, 3), \"Should be (2, 3)\"\nassert     tuple_str_int(\"(2,3)\") == (2, 3), \"Should be (2, 3)\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_str_int(('a', 'b')) == ('a', 'b')\nassert     tuple_str_int(('a',)) == ('a',)\nassert     tuple_str_int(('a', 'b', 'c')) == ('a', 'b', 'c')\nassert     tuple_str_int(()) == ()\nassert     tuple_str_int((1, 2, 3)) == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int((\"apple\", \"banana\", \"cherry\")) == (\"apple\", \"banana\", \"cherry\")\nassert     tuple_str_int((\"apple\", \"grape\", \"cherry\")) == (\"apple\", \"grape\", \"cherry\")\nassert     tuple_str_int((\"apple\", \"grape\", \"cherry\")) == (\"apple\", \"grape\", \"cherry\")\nassert     tuple_str_int((\"apple\", \"grape\", \"cherry\")) == (\"apple\", \"grape\", \"cherry\")\nassert     tuple_str_int((\"apple\", \"grape\", \"cherry\")) == (\"apple\", \"grape\", \"cherry\")\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int((\"a\", \"b\", \"c\")) == (1, 2, 3)\nassert     tuple_str_int((\"0\", \"1\", \"2\")) == (0, 1, 2)\nassert     tuple_str_int((\"0\", \"1\", \"-2\")) == (0, 1, -2)\nassert     tuple_str_int((\"-2\", \"1\", \"0\")) == (-2, 1, 0)\nassert     tuple_str_int((\"-2\", \"1\", \"-3\")) == (-2, 1, -3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2)') == (1,2)\nassert     tuple_str_int('(1,2,3,4)') == (1,2,3,4)\nassert     tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5)\nassert     tuple_str_int('(1,2,3,4,5,6)') == (1,2,3,4,5,6)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_insertion([2, 5, 6], 5) == 1,'should be 1'\nassert     right_insertion([2, 5, 6], 6) == 3,'should be 3'\nassert     right_insertion([1, 2, 4, 7], 7) == 4,'should be 4'\nassert     right_insertion([1, 2, 4, 7], 2) == 1,'should be 1'\nassert     right_insertion([1, 2, 4, 7], 1) == 0,'should be 0'\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     right_insertion([1,2,4,5,6,7,8,9], 1) == 0\nassert     right_insertion([1,2,4,5,6,7,8,9], 2) == 1\nassert     right_insertion([1,2,4,5,6,7,8,9], 3) == 2\nassert     right_insertion([1,2,4,5,6,7,8,9], 4) == 3\nassert     right_insertion([1,2,4,5,6,7,8,9], 5) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert right_insertion([1,2,3,4,5], 3) == 4, 'Wrong answer'\nassert right_insertion([1,2,3,4,5], 6) == 5, 'Wrong answer'\nassert right_insertion([1,2,3,4,5], 5) == 4, 'Wrong answer'\nassert right_insertion([1,2,3,4,5], 1) == 1, 'Wrong answer'\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     right_insertion([1,3,5,8], 3) == 3\nassert     right_insertion([1,3,5,8], 5) == 4\nassert     right_insertion([1,3,5,8], 7) == 4\nassert     right_insertion([1,3,5,8], 0) == 0\nassert     right_insertion([1,3,5,8], 1) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     right_insertion([1,2,3,4,5], 1) == 0\nassert     right_insertion([1,2,3,4,5], 3) == 2\nassert     right_insertion([1,2,3,4,5], 7) == 5\nassert     right_insertion([1,2,3,4,5], 6) == 3\nassert     right_insertion([1,2,3,4,5], 4) == 2\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_insertion([1,3,5,6,7,8], 5) == 5\nassert     right_insertion([1,3,5,6,7,8], 10) == 5\nassert     right_insertion([1,3,5,6,7,8], 0) == 0\nassert     right_insertion([1,3,5,6,7,8], 3) == 1\nassert     right_insertion([1,3,5,6,7,8], 4) == 2\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_insertion([1, 3, 5, 6], 4) == 3\nassert     right_insertion([1, 3, 5, 6], 5) == 4\nassert     right_insertion([1, 3, 5, 6], 6) == 5\nassert     right_insertion([1, 3, 5, 6], 0) == 0\nassert     right_insertion([1, 3, 5, 6], 1) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_insertion([1,2,3,4,5], 5) == 3\nassert     right_insertion([1,2,3,4,5], 4) == 2\nassert     right_insertion([1,2,3,4,5], 1) == 0\nassert     right_insertion([1,2,3,4,5], 6) == 5\nassert     right_insertion([1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntext_match_three('abbbb')\nassert text_match_three('abbbb') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('abcbb') == True\nassert     text_match_three('aacbb') == False\nassert     text_match_three('abc') == True\nassert     text_match_three('abcbbb') == True\nassert     text_match_three('abcbbbac') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three('bbbbbbb') == True\nassert     text_match_three('aabaaabaaabaaabaaab') == True\nassert     text_match_three('ab') == False\nassert     text_match_three('abbbbbbbb') == False\nassert     text_match_three('bbba') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_three(\"abababababab\") == True, \"Wrong\"\nassert     text_match_three(\"ababababab\") == False, \"Wrong\"\nassert     text_match_three(\"abcba\") == False, \"Wrong\"\nassert     text_match_three(\"acbacbaac\") == False, \"Wrong\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three(\"abbbb\") == True, 'Expected result: True'\nassert     text_match_three(\"babababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababZ\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three('aababbb') == 'aababbb'\nassert     text_match_three('aababab') == None\nassert     text_match_three('abaaaaab') == None\nassert     text_match_three('a') == None\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three('aabbbb') == 'aabbbb'\nassert     text_match_three('abaaaa') == None\nassert     text_match_three('a') == None\nassert     text_match_three('ab') == None\nassert     text_match_three('abc') == None\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three('ababab') == True, 'Unexpected result'\nassert     text_match_three('abababaa') == False, 'Unexpected result'\nassert     text_match_three('ababababb') == False, 'Unexpected result'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three('abbbbbbbbbbbbbbbbbbbbbb') == True\nassert     text_match_three('bbbbbbbbbbbbbbbbbbbbbb') == False\nassert     text_match_three('a') == True\nassert     text_match_three('b') == True\nassert     text_match_three('aa') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     new_tuple(['a', 'b', 'c', 'd', 'e'], ('e', 'f', 'g')) == ('e', 'f', 'g')\nassert     new_tuple(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'], 'g') == ('g', 'h', 'i', 'j', 'k', 'l','m')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple([1, 2, 3], 'hello') == (1, 2, 3), 'Should return the list and tuple'\nassert     new_tuple([1, 2, 3], 'hello') == (1, 2, 3), 'Should return the list and tuple'\nassert     new_tuple([1, 2, 3], ['a', 'b', 'c']) == ([1, 2, 3], ['a', 'b', 'c']), 'Should return the list and tuple'\nassert     new_tuple([1, 2, 3], ['a', 'b', 'c']) == ([1, 2, 3], ['a', 'b', 'c']), 'Should return the list and tuple'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     new_tuple(['a', 'b', 'c', 'd', 'e'], 'ae') ==  ('a', 'e', 'b', 'd', 'c')\nassert     new_tuple(['a', 'b', 'c', 'd', 'e'], 'a') ==  ('a', 'a', 'a', 'a', 'a')\nassert     new_tuple(['a', 'b', 'c', 'd', 'e'], '') ==  ('a', 'b', 'c', 'd', 'e')\n\n\ndef update_list(test_list, test_str):\n    '''\n    Write a function to update a given list with the given string.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple(['f', 'e', 'e', 'k','s', 'p', 'r', 'i', 'c', 'a', 't', 'e'], 'hello') == ('h', 'e', 'l', 'o')\nassert     new_tuple(['f', 'e', 'e', 'k','s', 'p', 'r', 'i', 'c', 'a', 't', 'e'], 'f') == ('f', 'e', 'e', 'k','s', 'p', 'r', 'i', 'c', 'a', 't', 'e')\nassert     new_tuple(['f', 'e', 'e', 'k','s', 'p', 'r', 'i', 'c', 'a', 't', 'e'], 'h') == ('h', 'e', 'e', 'k','s', 'p', 'r', 'i', 'c', 'a', 't', 'e')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a function that returns a tuple containing a, b, and c, all in the range from 1 to 10\n'''\n\ndef new_tuple_1(a, b, c):\n    '''\n    Write a function that returns a tuple containing a, b, and c, all in the range from 1 to 10\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     new_tuple([\"hello\", \"world\"], \"the\") == (\"the\", \"hello\", \"world\")     #     true\nassert     new_tuple([\"a\", \"b\", \"c\"], \"d\") == (\"d\", \"a\", \"b\", \"c\")     #     false\nassert     new_tuple([\"hello\", \"world\"], \"abcd\") == (\"abcd\", \"hello\", \"world\")     #     false\nassert     new_tuple([\"a\", \"b\", \"c\"], \"abc\") == (\"abc\", \"a\", \"b\", \"c\")     #     true\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     new_tuple([1,2,3], \"abc\") == (1,2,3)\nassert     new_tuple([1,2,3], \"abcd\") == (1,2,3)\nassert     new_tuple([1,2,3], \"abcd\") == (1,2,3)\nassert     new_tuple([1,2,3], \"abcd\") == (1,2,3)\nassert     new_tuple([1,2,3], \"aac\") == (1,2,3)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     new_tuple('hello', ['a', 'b', 'c']) == (1,2,3)\nassert new_tuple('hello', ['a', 'b', 'c']) == (1,2,3)\nassert     new_tuple('hello', ['a', 'b', 'c', 'c']) == (1,2,3,3)\nassert new_tuple('hello', ['a', 'b', 'c', 'c', 'c']) == (1,2,3,3,3)\nassert new_tuple('hello', ['a', 'b', 'c', 'c', 'c', 'c', 'c']) == (1,2,3,3,3,3,3)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_position([1,2,3,4,5,6,7,8,9]) == False, \"check incorrect even_position\"\nassert even_position([1,2,3,4,5,6,7,8,9,10]) == True, \"check incorrect even_position\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == True\nassert     even_position([1, 2, 4, 5, 7, 9, 12]) == False\nassert     even_position([1, 2, 4, 5, 7, 9]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) == False\nassert     even_position([1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([1, 2, 3, 4]) == True, \"test failed\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True, \"test failed\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True, \"test failed\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == True, \"test failed\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]) == False, \"test failed\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_position([1,2,3,4,5,6,7]) == True\nassert \neven_position([1,3,5,7]) == True\nassert \neven_position([]) == False\nassert even_position([1,2,3,4,5]) == False"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == True, \"Wrong output\"\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == False, \"Wrong output\"\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False, \"Wrong output\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_position([2,4,6,8,10,12,14,16]) == False\nassert     even_position([1,3,5,7,9]) == True\nassert     even_position([2,4,6,8]) == True\nassert     even_position([2,4,6,8,10]) == False\nassert     even_position([2,4,6,8,10,12,14,16]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True, \"odds\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == False, \"odds\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == False, \"odds\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == False, \"odds\"\nassert     even_position
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([0,1,2,3,4,5,6,7])==True, 'test 1 failed'\nassert     even_position([0,1,2,3,4,5,6,7,8,9])==True, 'test 2 failed'\nassert     even_position([1,2,3,4,5,6,7])==False, 'test 3 failed'\nassert     even_position([1,2,3,4,5,6,7,8,9])==False, 'test 4 failed'\nassert     even_position([10,11,12,13,14,15,16,17,18,19])==False, 'test 5 failed'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_position([]) == False, 'testcase1'\nassert even_position([1]) == True, 'testcase2'\nassert even_position([1,2]) == True, 'testcase3'\nassert even_position([1,3]) == True, 'testcase4'\nassert even_position([1,2,3,4,5,6,7]) == True, 'testcase5'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_position([1, 2, 3, 4]) == True, \"wrong answer\"\nassert     even_position([1, 2, 3, 4, 5, 6]) == False, \"wrong answer\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \"wrong answer\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, \"wrong answer\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested((0,1,2,3,(3,4,5))) == (0,1,2,4,5)\nassert     remove_nested((0,1,2,3,(3,4,5),6)) == (0,1,2,3,5,6)\nassert     remove_nested((0,1,2,3,(3,4,5),6,7)) == (0,1,2,3,5,6,7)\nassert     remove_nested((0,1,2,3,(3,4,5),6,7,8)) == (0,1,2,3,5,6,7,8)\nassert     remove_nested((0,1,2,3,(3,4,5),6,7,8,9)) == (0,1,2,3,5,6,7,8,9)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested((1,2,3,4,5,6,7,8,9)) == (1,2,3,4,5,6,7,8,9), 'Return a tuple'\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10), 'Return a tuple'\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11)) == (1,2,3,4,5,6,7,8,9,10,11), 'Return a tuple'\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12)) == (1,2,3,4,5,6,7,8,9,10,11,12), 'Return a tuple'\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12,13)) == (1,2,3,4,5,6,7,8,9,10,11,12,13), 'Return a tuple'\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested((1,2,3,4,5,6)) == (1,2,3,4,5), \\\n    \"Fail the test case\"\nassert     remove_nested((1,2,3,4,5,6,7)) == (1,2,3,4,5,6,7), \\\n    \"Fail the test case\"\n\nprint(\"All test cases have been passed\")\n\n'''\nGiven a tuple, remove the next element and return a new tuple.\n'''\ndef remove_element(test_tup):\n    '''\n    Write a function to remove element from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested(()) == (), \"Expected an empty tuple\"\nassert     remove_nested((0,)) == (0,), \"Expected (0,) to be returned\"\nassert     remove_nested((0,0)) == (), \"Expected an empty tuple\"\nassert     remove_nested((0,0,0)) == (0,0,0), \"Expected (0,0,0) to be returned\"\nassert     remove_nested((0,0,0,0)) == (), \"Expected an empty tuple\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((1,2,(3,4),((5,6),7))) == ((1,2,7),5,6)\nassert     remove_nested((1,2,(3,4),((5,6),7),(8,9)))) == ((1,2,7,(8,9)),5,6)\nassert     remove_nested((1,2,(3,4),((5,6),7),(8,9),(10,11,12,13)))) == ((1,2,7,(8,9,10,11,12,13)),5,6)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested((1,2,3,4,5)) == (1,2,3,5)\nassert     remove_nested((1,2,3,4,5,6)) == (1,2,3,5)\nassert     remove_nested((1,2,3,4,5,6,7,8,9)) == (1,2,3,5,6,7,8)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,5,6,7,8,9,10)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested(((1,2),(3,4),(5,6)))    ==    ((1,2),(3,4),(5,6))\nassert     remove_nested(((1,2),(3,4),(5,6,7)))    ==    ((1,2),(3,4),(5,6))\nassert     remove_nested(((1,2),(3,4)))    ==    ((1,2),(3,4))\nassert     remove_nested(((1,2),(3,4,5)))    ==    ((1,2),(3,4))\nassert     remove_nested(((1,2),(3,4,5,6)))    ==    ((1,2),(3,4,5))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested((1, 2, 3, (1, 2, 3, 4), 5)) == ((1, 2, 3), 4, 5)\nassert     remove_nested((1, 2, 3, (4, 5, 6), 7)) == ((1, 2, 3), (4, 5, 6), 7)\nassert     remove_nested((1, 2, (3, 4), 5)) == ((1, 2, (3, 4)), 5)\nassert     remove_nested((1, 2, (3, 4), 5)) == ((1, 2), (3, 4), 5)\nassert     remove_nested((1, 2, 3, 4, 5)) == ((1, 2, 3, 4), 5)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((1, 2, (1, 2, 3))) == (1, 2, 3), \"Should return just 2\"\nassert     remove_nested((1, 2, (1, 2, 3, 4))) == (1, 2, 4), \"Should return just 3\"\nassert     remove_nested((1, 2, 3, (1, 2, 4, 5))) == (1, 2, 3, 5), \"Should return just 2\"\nassert     remove_nested((1, 2, (3,), (1, 2, 4, 5))) == (1, 2, (3,), (1, 2, 4, 5)), \"Should return just 2\"\nassert     remove_nested((1, 2, 3, 4)) == (1, 2, 3, 4), \"Should return just 3\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_list([[]]) == 1, 'Test Case 1: 1 list'\nassert     count_list([[],[]]) == 1, 'Test Case 2: 1 list'\nassert     count_list([[],[],[]]) == 1, 'Test Case 3: 3 lists'\nassert     count_list([[],[],[],[],[]]) == 1, 'Test Case 4: 4 lists'\nassert     count_list([[[],[]]]) == 1, 'Test Case 5: 1 list with 1 element'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([1,2,[3,4,5],7,8,[9,10]]) == 3, \"Wrong\"\nassert count_list([1,2,[3,4,5],7,8,[9,10]]) == 1, \"Wrong\"\nassert count_list([1,2,[3,4,5],7,8,[9,10],11]) == 2, \"Wrong\"\nassert count_list([1,2,[3,4,5],7,8,[9,10],11,12]) == 3, \"Wrong\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_list([1,2,3,[4,5,6,7]]) == 2\nassert count_list([1,[2,3],4,5,6,[7,8,9]]) == 3\nassert count_list([1,[2,3],4,5,6,7,[8,9]]) == 4\nassert count_list([1,2,3]) == 1\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_list([[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a']) == 2, \"Input: [[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a'] ---> Output: 2\"\nassert     count_list([[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a']) == 1, \"Input: [[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a'] ---> Output: 1\"\nassert     count_list([[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a']) == 3, \"Input: [[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a'] ---> Output: 3\"\nassert     count_list([[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a']) == 4, \"Input: [[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a'] ---> Output: 4\"\nassert     count_list([[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a']) == 5, \"Input: [[1,2,3,4], 'a', ['a', 'b', 'c'], 1, 'a'] ---> Output: 5\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_list([]) == 0, 'Empty list'\nassert     count_list([[1, 2, 3], [], [], [4, 5, 6], [], []]) == 2, 'Wrong result'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_list([]) == 0, 'count_list needs to return 0 when given an empty list'\nassert     count_list([[]]) == 0, 'count_list needs to return 0 when given an empty list'\nassert     count_list([[],[]]) == 0, 'count_list needs to return 0 when given an empty list'\nassert     count_list([[],[],'']) == 0, 'count_list needs to return 0 when given an empty list'\nassert     count_list([['a','b','c']]) == 1, 'count_list needs to return 1 when given a list with one string'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_list([[1], [1, 2], [1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4]]) == 5\nassert count_list([[], [1], [1, 2], [1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4]]) == 10\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([[1], [2], [3], [4], [5], [6]]) == 0,     \"Wrong output\"\nassert     count_list([[[1], [2], [3], [4], [5]]]) == 1,     \"Wrong output\"\nassert     count_list([[[1]], [[2], [3], [4], [5]]]) == 2,     \"Wrong output\"\nassert     count_list([[[1], [2], [3], [4], [5]], [[2]], [[3], [4], [5]]]) == 3,     \"Wrong output\"\nassert     count_list([[[1], [2], [3], [4], [5]], [[2]], [[3], [4], [5]]]) == 3,     \"Wrong output\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_list([[1,2],3,4]) == 1, \"TEST FAILED: Failed to identify correct functionality for count_list.\"\nassert     count_list([[1,2,3],4,5]) == 2, \"TEST FAILED: Failed to identify correct functionality for count_list.\"\nassert     count_list([[1],2,3]) == 1, \"TEST FAILED: Failed to identify correct functionality for count_list.\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last([4, 5, 8, 9, 10], 5) == 3, \"The correct last position of an element in a sorted array is 3.\"\nassert     last([4, 5, 8, 9, 10], 0) == 0, \"The correct last position of an element in a sorted array is 0.\"\nassert     last([4, 5, 8, 9, 10], 6) == 4, \"The correct last position of an element in a sorted array is 4.\"\nassert     last([4, 5, 8, 9, 10], 7) == 5, \"The correct last position of an element in a sorted array is 5.\"\nassert     last([4, 5, 8, 9, 10], 8) == 6, \"The correct last position of an element in a sorted array is 6.\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([1,2,3,4,5,6,7],4)== 5\nassert     last([1,2,3,4,5,6,7],1)== 7\nassert     last([1,2,3,4,5,6,7],7)== 7\nassert     last([1,2,3,4,5,6,7],0)== 0\nassert     last([],0)== 0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last([0,0,1,1,2,2,2,3,3,4],0)==5, \"Wrong result\"\nassert last([0,0,1,1,2,2,2,3,3,4],1)==4, \"Wrong result\"\nassert last([0,0,1,1,2,2,2,3,3,4],2)==7, \"Wrong result\"\nassert last([0,0,1,1,2,2,2,3,3,4],3)==8, \"Wrong result\"\nassert last([0,0,1,1,2,2,2,3,3,4],4)==10, \"Wrong result\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last([],2) == -1\nassert     last([1],2) == -1\nassert     last([1,2],2) == 1\nassert     last([2,1],2) == 1\nassert     last([2,2],2) == 2\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9],1) == 8\nassert last([1,2,3,4,5,6,7,8,9],0) == 1\nassert last([1,2,3,4,5,6,7,8,9],5) == 9\nassert last([1,2,3,4,5,6,7,8,9],6) == 8\nassert last([1,2,3,4,5,6,7,8,9],7) == 8\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9],5) == 6\nassert     last([1,2,3,4,5,6,7,8,9],4) == 5\nassert     last([1,2,3,4,5,6,7,8,9],3) == 5\nassert     last([1,2,3,4,5,6,7,8,9],8) == 9\nassert     last([1,2,3,4,5,6,7,8,9],1) == 0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last([0,1,2,3,4,5,6,7,8,9],8)==1\nassert     last([0,1,2,3,4,5,6,7,8,9],9)==8\nassert     last([0,1,2,3,4,5,6,7,8,9],10)==10\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"\\nTest case 1\")\n    print(last([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(last([5, 6, 7, 8, 9], 5))\n    print(last([5, 7, 8, 9, 10], 5))\n\n    print(\"\\nTest case 2\")\n    print(last([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\n    print(last([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(last([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n\n    print(\"\\nTest case 3\")\n    print(last([5, 6, 7, 8, 9], 5))\n    print(last([5, 6, 7, 8, 9], 4))\n    print(last([5, 6, 7, 8, 9], 3))\n    print(last([5, 6, 7, 8, 9], 2))\n    print(last([5, 6, 7, 8, 9], 1))\n\n    print(\"\\nTest case 4\")\n    print(last([], 5))\n    print(last([], 3))\n    print(last([], 2))\n    print(last([], 1))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb('ab') == True\nassert     text_starta_endb('aba') == True\nassert     text_starta_endb('abab') == True\nassert     text_starta_endb('abababa') == True\nassert     text_starta_endb('abababab') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('ab') == True\nassert     text_starta_endb('abac') == False\nassert     text_starta_endb('abacde') == False\nassert     text_starta_endb('abcabcabc') == False\nassert     text_starta_endb('ababcabc') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('abcd') == 'abcd'\nassert     text_starta_endb('abca') == 'abca'\nassert     text_starta_endb('abcab') == 'abcab'\nassert     text_starta_endb('abcabcd') == 'abcabcd'\nassert     text_starta_endb('abcabc') == 'abcabc'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb(\"ab\") == True\nassert     text_starta_endb(\"abc\") == False\nassert     text_starta_endb(\"abb\") == True\nassert     text_starta_endb(\"abcd\") == False\nassert     text_starta_endb(\"abcdabcd\") == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('ab') == False, 'ab'\nassert     text_starta_endb('abab') == True, 'abab'\nassert     text_starta_endb('aab') == True, 'aab'\nassert     text_starta_endb('a') == False, 'a'\nassert     text_starta_endb('ababab') == True, 'ababab'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb('a') == False\nassert     text_starta_endb('a123') == True\nassert     text_starta_endb('a123b') == True\nassert     text_starta_endb('a123ba') == True\nassert     text_starta_endb('aaaa') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb('abb') == True\nassert     text_starta_endb('acb') == True\nassert     text_starta_endb('abc') == False\nassert     text_starta_endb('ababab') == False\nassert     text_starta_endb('aabbbbbbb') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb('') == '', \"You should return a string of the form 'a.b'\"\nassert text_starta_endb('aa') == 'a.b', \"You should return 'a.b'\"\nassert text_starta_endb('aab') == 'a.b', \"You should return 'a.b'\"\nassert text_starta_endb('aaa') == 'a.b', \"You should return 'a.b'\"\nassert text_starta_endb('aaba') == 'a.b', \"You should return 'a.b'\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef text_starta_endb2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb(\"cbabc\") == True\nassert     text_starta_endb(\"abcabc\") == True\nassert     text_starta_endb(\"cbabcb\") == False\nassert     text_starta_endb(\"\") == False\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, 'incorrect result of return_sum'\nassert     return_sum({}) == 0, 'incorrect result of return_sum'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     return_sum({'a':1, 'b':2, 'c':3}) == 6, \"Test failed\""
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({}) == 0,'return_sum with empty dictionary: expected 0, got %s' % (return_sum({}))\nassert     return_sum({1:1}) == 1,'return_sum with dictionary: expected 1, got %s' % (return_sum({1:1}))\nassert     return_sum({1:2, 2:3, 3:4}) == 9,'return_sum with dictionary: expected 9, got %s' % (return_sum({1:2, 2:3, 3:4}))"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({}) == 0, 'Return empty dictionary'\nassert     return_sum({1: 1, 2: 2, 3: 3}) == 6, 'Correct return value'\nassert     return_sum({1: 1, 2: 2, 3: 3, 4: 4}) == 10, 'Correct return value'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({1:2,3:4,5:6}) == sum(dict.values())\nprint('CORRECT!')\nprint()\n\ndef return_number_of_elements(dict):\n    '''\n    Write function to count the number of elements in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     return_sum({\"2\": 2, \"3\": 3, \"4\": 4}) == 7, \"Should be 7\"\nassert     return_sum({\"2\": 2}) == 2, \"Should be 2\"\nprint(\"Test 4 passed!\")"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6, \"Wrong result\"\nassert     return_sum({\"a\": 1, \"b\": 2}) == 3, \"Wrong result\"\nassert     return_sum({}) == 0, \"Wrong result\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({'a':1,'b':2,'c':3,'d':4}) == 15, '1+2+3+4 = 15'\nassert     return_sum({'a':1,'b':2}) == 3, '1+2 = 3'\nassert     return_sum({}) == 0, 'Empty dict'\nprint('tests passed')"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     return_sum({1:4,2:3}) == 7, \"incorrect\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({1: 10, 2: 1, 3: 1}) == 12, 'Fail'\nprint('\\033[92m' + \"Test case passed!\" + '\\033[0m')\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(10) == (2+4+6+8+10+12+14+16+18+20+22+24+26+28+30+32) == 10\nassert     sum_odd(2) == 2 == 2\nassert     sum_odd(2.1) == 2.1 == 2.1\nassert     sum_odd(-2) == 2\nassert     sum_odd(0) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_odd(1, 3) == 2\nassert     sum_odd(1, 5) == 6\nassert     sum_odd(10, 13) == 0\nassert     sum_odd(3, 6) == 9\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_odd(0) == 0,'should be 0'\nassert     sum_odd(1) == 0,'should be 0'\nassert     sum_odd(4) == 6,'should be 6'\nassert     sum_odd(100) == 104,'should be 104'\nassert     sum_odd(-100) == -104,'should be -104'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (sum_odd(10) == 15)\nassert     (sum_odd(5) == 14)\nassert     (sum_odd(-6) == -6)\n\nprint(\"All tests passed\")"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_odd(2)==1, \"Sample Test 1: Failed\"\nassert     sum_odd(2)==1, \"Sample Test 2: Failed\"\nassert     sum_odd(100)==50, \"Sample Test 3: Failed\"\nassert     sum_odd(4)==0, \"Sample Test 4: Failed\"\nassert     sum_odd(100)==50, \"Sample Test 5: Failed\"\nprint(\"\\nTEST CASE SUM_ODD IS CORRECT\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_odd(3) == 0, \"should be 0\"\nassert     sum_odd(4) == 2, \"should be 2\"\nassert     sum_odd(6) == 12, \"should be 12\"\nassert     sum_odd(8) == 20, \"should be 20\"\nassert     sum_odd(10) == 45, \"should be 45\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_odd(5) == 4, 'Wrong value'\nassert     sum_odd(2) == 3, 'Wrong value'\nassert     sum_odd(1) == 1, 'Wrong value'\nassert     sum_odd(10) == 15, 'Wrong value'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_odd(10) == 18\nsum_odd(100) == 190\nsum_odd(1) == 2\nsum_odd(2) == 4\nsum_odd(3) == 7\nsum_odd(-1) == -1\nsum_odd(-2) == -5\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_odd(1) == 0\nassert     sum_odd(2) == 1\nassert     sum_odd(3) == 1\nassert     sum_odd(4) == 3\nassert     sum_odd(5) == 4\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([1,2,3])==6\nassert     _sum([])==0\nassert     _sum([1,2,3,4])==9\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     _sum([1, 2, 3]) == 6, \"Wrong answer\"\nassert _sum([0, 1, 2, 3, 4, 5]) == 15, \"Wrong answer\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     _sum([1,2,3,4]) == 10\nassert     _sum([1,2,3,4,5]) == 15\nassert     _sum([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 55\nassert     _sum([-1,2,-3,4,-5,6,-7,8,-9,10,-11,12,-13]) == -30\nassert     _sum([1,2,3,4,5]) == 15\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef _sub(arr):\n    '''\n    Write a python function to find the difference between maximum and minimum element of an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     _sum([1,2,3])==6\nassert     _sum([1,-2,3])==2\nassert     _sum([1,-2,-3])==-1\nassert     _sum([])==0"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('check passed')\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     _sum([1, 2, 3]) == 6, \"result is not correct\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert _____, 'TypeError: sum() takes exactly one argument (2 given)'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert _____, _____, _____ == True, '_sum() is not a well-behaved function'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     _sum([1, 2, 3, 4, 5]) == 15, \"_sum([1, 2, 3, 4, 5]) should be 15\"\nassert     _sum([]) == 0, \"_sum([]) should be 0\"\nassert     _sum([1]) == 1, \"_sum([1]) should be 1\"\n\n'''\n[*] Task 2: Write a function that takes a list of words as an argument and returns a dictionary where the keys are the words and the values are their frequency in the list.\n'''\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_rotate(4,2) == 4<<2\nassert     left_rotate(4,3) == 4<<3\nassert     left_rotate(4,1) == 4<<1\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nleft_rotate(12345,7) == 1101\nleft_rotate(184467,4) == 64521\nleft_rotate(184467,2) == 64522\nleft_rotate(184467,1) == 64523\nleft_rotate(12345,0) == 12345\nleft_rotate(12345,32) == 12345\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_rotate(2,0) == 2, \"Doesn't work\"\nassert     left_rotate(2,1) == 0, \"Doesn't work\"\nassert     left_rotate(2,2) == 0, \"Doesn't work\"\nassert     left_rotate(2,3) == 0, \"Doesn't work\"\nassert     left_rotate(2,4) == 4, \"Doesn't work\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_rotate(7,2) == 0b11\nassert     left_rotate(7,1) == 0b10\nassert     left_rotate(7,0) == 0b01\nassert     left_rotate(7,3) == 0b00\n\ndef divide_by_two(n):\n    '''\n    Write a function to divide an integer by 2. If the integer is even, divide it by 2.\n    Otherwise, multiply it by 3 and add 1.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nleft_rotate(10,2) == 20\nassert left_rotate(10,3) == 0\nassert left_rotate(0,2) == 0\nassert left_rotate(5,2) == 5\nassert left_rotate(10,5) == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_all_spaces('hello world') == 'hello world'\nassert remove_all_spaces('hello world') == 'hello world'\nassert remove_all_spaces('hello world    ') == 'hello world'\nassert remove_all_spaces('hello world    ') == 'hello world'\nassert remove_all_spaces('hello world') == 'hello world'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_all_spaces(\"     \") == \"\", \"Expected \\\"\\\"\"\nassert     remove_all_spaces(\" \") == \"\", \"Expected \\\"\\\"\"\nassert     remove_all_spaces(\" \") == \"\", \"Expected \\\"\\\"\"\nassert     remove_all_spaces(\"\") == \"\", \"Expected \\\"\\\"\"\n\ndef check_name(name):\n    '''\n    Write a function to check if a string is a name.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_first_and_last_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces(' ') == '','remove_all_spaces is not working as expected.'\nassert     remove_all_spaces('  ') == '','remove_all_spaces is not working as expected.'\nassert     remove_all_spaces('  \\n  ') == '','remove_all_spaces is not working as expected.'\nassert     remove_all_spaces('\\n\\t') == '','remove_all_spaces is not working as expected.'\nassert     remove_all_spaces(' ') == '','remove_all_spaces is not working as expected.'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_all_spaces(\"     a test\\t\\t\") == \"a test\", \"Wrong\"\nassert     remove_all_spaces(\"this has spaces too   \\t\") == \"this has spaces too\", \"Wrong\"\nassert     remove_all_spaces(\" test\") == \"test\", \"Wrong\"\nassert     remove_all_spaces(\"  \") == \"\", \"Wrong\"\nassert     remove_all_spaces(\"\") == \"\", \"Wrong\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(remove_all_spaces('     ')) ==''\nprint(remove_all_spaces('  ')) ==''\nprint(remove_all_spaces('    ')) ==''\nprint(remove_all_spaces('     ')) ==''\nprint(remove_all_spaces('  ')) ==''\nprint(remove_all_spaces('    ')) ==''\nprint(remove_all_spaces('  this is  a  long  text  to be  removed ')) == 'this is  a  long  text  to be  removed'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_all_spaces( \" \" ) == \"\"\nassert     remove_all_spaces( \"\\t\") == \"\"\nassert     remove_all_spaces( \"\\n\") == \"\"\nassert     remove_all_spaces( \"\\r\") == \"\"\nassert     remove_all_spaces( \"i\") == \"i\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces('     ') == '', 'Testing 1'\nassert     remove_all_spaces(' ') == '', 'Testing 2'\nassert     remove_all_spaces('    ') == '', 'Testing 3'\nassert     remove_all_spaces('     ') == '', 'Testing 4'\nassert     remove_all_spaces('Hi') == 'Hi', 'Testing 5'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\nassert     remove_all_spaces(\"  \") == \"\"\nassert     remove_all_spaces(\"hello world\") == \"hello world\"\nassert     remove_all_spaces(\"hello world  \") == \"hello world\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_all_spaces('  a ') == 'a'\nassert     remove_all_spaces('a b c') == 'abc'\nassert     remove_all_spaces(' a b   ') == 'abc'\nassert     remove_all_spaces('a    b  c') == 'abc'\nassert     remove_all_spaces('a') == 'a'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_three_equal(2,2,2) == 3\nassert     test_three_equal(1,1,1) == 3\nassert     test_three_equal(1,2,1) == 2\n\nprint('All test cases passed')"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"\\n\\nAll the tests have been passed\""
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_three_equal(1,2,3) == 2, \"Wrong answer\"\nassert     test_three_equal(1,2,3) == 3, \"Wrong answer\"\nassert     test_three_equal(1,2,3) == 0, \"Wrong answer\"\nassert     test_three_equal(1,1,1) == 3, \"Wrong answer\"\nassert     test_three_equal(1,1,2) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_three_equal(1,1,1) == 3, 'Failed'\nassert     test_three_equal(2,2,2) == 1, 'Failed'\nassert     test_three_equal(1,2,1) == 2, 'Failed'\nassert     test_three_equal(1,1,2) == 0, 'Failed'\nassert     test_three_equal(1,2,1) == 1, 'Failed'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_three_equal(1,1,1) == 1\nassert     test_three_equal(1,1,2) == 1\nassert     test_three_equal(1,1,3) == 0\nassert     test_three_equal(1,2,1) == 1\nassert     test_three_equal(1,2,2) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     three_equal(1,1,1) == True\nassert     three_equal(1,1,2) == False\nassert     three_equal(1,2,1) == False\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_three_equal(1,1,2) == True, \"test_three_equal(1,1,2) is wrong\"\nassert     test_three_equal(1,1,1) == True, \"test_three_equal(1,1,1) is wrong\"\nassert     test_three_equal(1,2,2) == True, \"test_three_equal(1,2,2) is wrong\"\nassert     test_three_equal(2,2,2) == False, \"test_three_equal(2,2,2) is wrong\"\nassert     test_three_equal(1,1,1) == True, \"test_three_equal(1,1,1) is wrong\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_rotation([1,2,3,4,5,6,7,8]) == 4\nassert count_rotation([3,1,2,4,5,6,7,8]) == 0\nassert count_rotation([1,2,3,4,5,6,7,8,9]) == 3\nassert count_rotation([1,2,3,4,5,6,7,8,9,10]) == 4\nassert count_rotation([10,9,8,7,6,5,4,3,2,1]) == 5"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not \nassert count_rotation([1, 5, 8, 12, 16, 18, 22, 26, 30, 33, 34, 37, 41, 43, 45, 50, 53, 56, 60, 62, 66, 69, 71, 74, 75, 77, 78, 80, 83, 85, 90, 92, 96, 98, 100, 105, 106, 110, 112, 115, 118, 121, 124, 127, 131, 133, 135, 137, 140, 143, 146, 149, 152, 154, 156, 159, 162, 165, 167, 169, 171, 173, 175, 177, 178, 180, 183, 185, 187, 189, 191, 193, 195, 197, 199, 200, 202, 204, 205, 208, 210, 212, 215, 217, 219, 221, 223, 225, 227, 229, 230, 232, 234, 236, 238, 240, 242, 244, 246, 249, 251, 253, 254, 256, 257, 258, 260, 262, 265, 266, 268, 270, 272, 275, 276, 278, 280, 282, 285, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 313, 315, 317, 319, 321, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 11110, 11112, 11114, 11116, 11118, 11120, 11122, 11124, 11126, 11128, 11130, 11132, 11134, 11136, 11138, 11140, 11142, 11144, 11146, 11148, 11150, 11152, 11154, 11156, 11158, 11160, 11162, 11164, 11166, 11168, 11170, 11172, 11174, 11176, 11178, 11180, 11182, 11184, 11186, 11188, 11190, 11200, 11202, 11204, 11206, 11208, 11210, 11212, 11214, 11216, 11218, 11220, 11222, 11224, 11226, 11228, 11230, 11232, 11234, 11236, 11238, 11240, 11242, 11244, 11246, 11248, 11250, 11252, 11254, 11256, 11258, 11260, 11262, 11264, 11266, 11268, 11270, 11272, 11274, 11276, 11278, 11280, 11282, 11284, 11286, 11288, 11290, 11292, 11294, 11296, 11298, 11300, 11301, 11302, 11304, 11306, 11308, 11310, 11312, 11314, 11316, 11318, 11320, 11322, 11324, 11326, 11328, 11330, 11332, 11334, 11336, 11338, 11340, 11344, 11346, 11348, 11350, 11352, 11354, 11356, 11358, 11360, 11362, 11364, 11366, 11368, 11370, 11372, 11375, 11377, 11381, 11383, 11385, 11387, 11390, 11392, 11394, 11396, 11398, 11399, 11400, 11402, 11404, 11406, 11408, 11410, 11412, 11414, 11416, 11418, 11420, 11422, 11424, 11426, 11428, 11430, 11432, 11434, 11436, 11438, 11440, 11442, 11444, 11445, 11447, 11449, 11450, 11452, 11454, 11456, 11458, 11460, 11462, 11464, 11466, 11468, 11470, 11472, 11474, 11475, 11477, 11479, 11480, 11482, 11484, 11486, 11488"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_rotation([])    == 0, \"case 1: empty list\"\nassert     count_rotation([1])    == 0, \"case 2: sorted list\"\nassert     count_rotation([1,2])    == 0, \"case 3: sorted list\"\nassert     count_rotation([2,1])    == 0, \"case 4: sorted list\"\nassert     count_rotation([1,2,3])    == 2, \"case 5: sorted list\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_min_rotation(arr):\n    '''\n    You are given an array of size N and a positive integer K. You need to find the minimum rotation of the array so that \n    each element of the array is present in a column of K columns. After that, the array is rotated K times and \n    return the rotated array.\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 0\nassert     count_rotation([1,2,3,4,5,6]) == 1\nassert     count_rotation([1,2,3,4,5,6,7]) == 2\nassert     count_rotation([1,2,3,4,5,6,7,8]) == 3\nassert     count_rotation([1,2,3,4,5,6,7,8,9]) == 4\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # An array A is rotated at some pivot unknown to you beforehand.\n    # (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).\n    # Find the minimum element.\n    # find the first index of this min element.\n    # find the second index of this min element.\n    # count the number of rotations needed.\n\n    # minIndex = \n    # secondIndex = \n\n    # if arr[minIndex] < arr[secondIndex]:\n    #     return count\n    # else:\n    #     return count+1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_rotation([1,3,5,7]) == 4\nassert     count_rotation([1,2,3,4]) == 0\nassert     count_rotation([1,2,3,4,5]) == 1\nassert     count_rotation([1,2,3,4,5,6,7]) == 5\n\nprint('all test cases passed')"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_rotation([1, 2, 3, 4]) == 0, \"For input [1, 2, 3, 4], the output should be 0.\"\ncount_rotation([1, 2, 3, 5]) == 1, \"For input [1, 2, 3, 5], the output should be 1.\"\ncount_rotation([1, 2, 3, 4, 5]) == 2, \"For input [1, 2, 3, 4, 5], the output should be 2.\"\ncount_rotation([1, 2, 3, 4, 5, 6]) == 3, \"For input [1, 2, 3, 4, 5, 6], the output should be 3.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7]) == 4, \"For input [1, 2, 3, 4, 5, 6, 7], the output should be 4.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8]) == 5, \"For input [1, 2, 3, 4, 5, 6, 7, 8], the output should be 5.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9], the output should be 6.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], the output should be 7.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], the output should be 8.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 9, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], the output should be 9.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 10, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], the output should be 10.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 11, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], the output should be 11.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 12, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], the output should be 12.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 13, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], the output should be 13.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 14, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], the output should be 14.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 15, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], the output should be 15.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 16, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], the output should be 16.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 17, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], the output should be 17.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 18, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], the output should be 18.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 19, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], the output should be 19.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 20, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], the output should be 20.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 21, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], the output should be 21.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 22, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], the output should be 22.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 23, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], the output should be 23.\"\ncount_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 24, \"For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_rotation([10, 15, 6, 9, 13]) == 3, \"incorrect output\"\nassert count_rotation([10, 15, 6, 9, 13, 16]) == 4, \"incorrect output\"\nassert count_rotation([]) == 0, \"incorrect output\"\nassert count_rotation([1,2,3,4,5]) == 0, \"incorrect output\"\nassert count_rotation([5,6,7,8,9]) == 1, \"incorrect output\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_perfect_square(7) == True, 'Should return True'\nassert     is_perfect_square(5) == False, 'Should return False'\nassert     is_perfect_square(4) == True, 'Should return True'\nassert     is_perfect_square(15) == False, 'Should return False'\nassert     is_perfect_square(17) == True, 'Should return True'\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_perfect_square(0) == False\nassert     is_perfect_square(1) == False\nassert     is_perfect_square(4) == True\nassert     is_perfect_square(9) == False\nassert     is_perfect_square(16) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_perfect_square(5) == False, \"Test #1: Pass\"\nassert     is_perfect_square(6) == True, \"Test #2: Pass\"\nassert     is_perfect_square(9) == False, \"Test #3: Pass\"\nassert     is_perfect_square(12) == False, \"Test #4: Pass\"\nassert     is_perfect_square(25) == True, \"Test #5: Pass\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_perfect_square(n) :\n    '''\n    Given an integer n, write a function to check whether it is a perfect square or not.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_perfect_square(9) == True, \"1\"\nassert     is_perfect_square(12) == False, \"2\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    is_perfect_square(16) == True\n    is_perfect_square(9) == True\n    is_perfect_square(1) == False\n    is_perfect_square(11) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_product_even([1,2,3,4]) == True, \"is_product_even[1,2,3,4]\"\nassert     is_product_even([4,4,2,2]) == False, \"is_product_even[4,4,2,2]\"\nassert     is_product_even([2,3,3,2]) == True, \"is_product_even[2,3,3,2]\"\n\n\n\ndef is_sum_even(arr):\n    '''\n    Write a function to check whether the sum of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_product_even([2, 4, 6, 8, 10]) == True, \"Wrong!\"\nassert     is_product_even([4, 5, 6, 7, 8]) == False, \"Wrong!\"\nassert     is_product_even([0, 2, 4, 8, 10]) == False, \"Wrong!\"\nassert     is_product_even([0, 1, 2, 3, 4]) == False, \"Wrong!\"\nassert     is_product_even([2, 2]) == False, \"Wrong!\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_product_even(arr = [-1,2,3,4])\nassert     is_product_even(arr = [0,2,3,4]) == False\nassert     is_product_even(arr = [1,2,3,4]) == True\nassert     is_product_even(arr = [-1,-2,-3,-4]) == False\nassert     is_product_even(arr = [1,2,3,4]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_product_even([1,2,3])\nassert is_product_even([2,4,6])\nassert not is_product_even([1,1,3])\nassert is_product_even([1,1,1,1])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_product_even([2,3,4,5]) == True\nassert     is_product_even([1,3,5,7]) == False\n\n\ndef is_prime(n):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    pass\n\nassert     is_prime(2) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_product_even([1,2,3,4])\nassert is_product_even([1,2,3,4])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nis_product_even([2,4,6,8]) == False\nis_product_even([2,4,6,8,4]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([1, 2, 3, 4]) == False\nassert is_product_even([1, 2, 3, 4, 5]) == True\nassert is_product_even([1, 2, 3, 4, 5, 6]) == True\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([[1,2,3],\n                        [4,5,6],\n                        [1,2,3],\n                        [4,5,6]]) == [[4,5,6],\n                              [1,2,3],\n                              [1,2,3],\n                              [1,2,3]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]    ==    [[11,12,13,14,15]])\nassert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]    ==    [[16,17,18,19,20]])\nassert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]    ==    [[11,12,13,14,15]])\nassert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]]    ==    [[16,17,18,19,20]])\nassert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]    ==    [[11,12,13,14,15]])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_list([[1,1], [1,2,3]]) == [[1,2,3]]\nassert     max_sum_list([[1,1], [1,2,3], [1,4,5]]) == [[1,4,5]]\nassert     max_sum_list([[1,1], [1,2,3], [1,4,5]]) == [[1,2,3]]\nassert     max_sum_list([[1,1], [1,2,3], [1,4,5]]) == [[1,2,3], [1,4,5]]\nassert     max_sum_list([[1,1], [1,2,3], [1,4,5], [1,6,7]]) == [[1,6,7]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nmax_sum_list([\n  [2, 3, -2],\n  [1, 2, -3, 4],\n  [-1, -2, 3]\n]) == [[1, 2, -3], [-1, -2, 3, 4]]\n\n\ndef max_sum_list_one_liner(lists):\n    '''\n    Write a one-liner function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_list([[1, 2, 3, 4],\n                        [5, 6, 7, 8],\n                        [9, 10, 11, 12]]) == [[9, 10, 11, 12],\n                                            [9, 10, 11, 12]]\n\nassert max_sum_list([[1, 2, 3, 4],\n                      [5, 6, 7, 8],\n                      [9, 10, 11, 12]]) == [[9, 10, 11, 12],\n                                            [9, 10, 11, 12]]\n\nassert max_sum_list([[1, 2, -3, 4],\n                      [5, 6, 7, 8],\n                      [9, 10, 11, 12]]) == [[9, 10, 11, 12],\n                                            [9, 10, 11, 12]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_list([[5, 4, 1, 8], [-9, -2, 3, 4], [10, -2, -3, -4]]) == [-2, -3, -4, 5]\nassert     max_sum_list([[5, 4, 1, 8, -9], [-2, 3, 4, 5, -3], [10, -2, -3, -4]]) == [-2, 3, -4, 5, 5]\nassert     max_sum_list([[5, 4, 1, 8], [-9, -2, 3, 4]]) == [-2, 3, 4, 5]\nassert     max_sum_list([[5, 4, 1, 8], [-9, -2, 3, 4], [10, -2, -3, -4]]) == [-2, 3, -4, 5]\nassert     max_sum_list([[5, 4, 1, 8], [-9, -2, 3, 4], [-10, -2, -3, -4]]) == [-2, 3, -4, 5]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    max_sum_list([1, -1, 5, 10]) == [10, 10, 10, 10]\n    max_sum_list([-1, -1]) == [-1, -1, -1, -1]\n    max_sum_list([-1, -1, -1, -1]) == [-1, -1, -1, -1]\n    max_sum_list([1, 2, -5, 10, -7, 3]) == [10, 10, 10, 10, 10, 10]\n    max_sum_list([-1, 2, -5, 10, -7, 3]) == [-1, 2, -5, 10, -7, 3]\n    max_sum_list([-1, -1, -5, 10, -7, 3]) == [-1, -1, -5, 10, -7, 3]\n    max_sum_list([-1, -1, -1, -5, 10, -7, 3]) == [-1, -1, -1, -5, 10, -7, 3]\n    max_sum_list([1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [-1, 2, 3, 4, 5, -6]\n    max_sum_list([1, -1, 5, 10, -7, 3]) == [10, 10, 10, 10, 10, 10]\n    max_sum_list([-1, -1, 5, 10, -7, 3]) == [-1, -1, 5, 10, -7, 3]\n    max_sum_list([-1, -1, 5, 10, -7, -3]) == [-1, -1, 5, 10, -7, -3]\n    max_sum_list([1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [-1, 2, 3, 4, 5, -6]\n    max_sum_list([-1, -1, -5, 10, -7, 3]) == [-1, -1, -5, 10, -7, 3]\n    max_sum_list([-1, -1, -5, 10, -7, -3]) == [-1, -1, -5, 10, -7, -3]\n    max_sum_list([-1, -1, -5, 10, -7, -6]) == [-1, -1, -5, 10, -7, -6]\n    max_sum_list([1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [-1, 2, 3, 4, 5, -6]\n    max_sum_list([-1, -1, -5, 10, -7, 3]) == [-1, -1, -5, 10, -7, 3]\n    max_sum_list([-1, -1, -5, 10, -7, -3]) == [-1, -1, -5, 10, -7, -3]\n    max_sum_list([-1, -1, -5, 10, -7, -6]) == [-1, -1, -5, 10, -7, -6]\n    max_sum_list([1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [-1, 2, 3, 4, 5, -6]\n    max_sum_list([-1, -1, -5, 10, -7, 3]) == [-1, -1, -5, 10, -7, 3]\n    max_sum_list([-1, -1, -5, 10, -7, -3]) == [-1, -1, -5, 10, -7, -3]\n    max_sum_list([-1, -1, -5, 10, -7, -6]) == [-1, -1, -5, 10, -7, -6]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [12, 12, 12, 12, 12, -6]\n    max_sum_list([-1, 2, 3, 4, 5, -7]) == [12, 12, 12, 12, 12, -7]\n    max_sum_list([1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [-1, 2, 3, 4, 5, -6]\n    max_sum_list([-1, 2, 3, 4, 5, -7]) == [-1, 2, 3, 4, 5, -7]\n    max_sum_list([-1, -1, -5, 10, -7, 3]) == [-1, -1, -5, 10, -7, 3]\n    max_sum_list([-1, -1, -5, 10, -7, -3]) == [-1, -1, -5, 10, -7, -3]\n    max_sum_list([-1, -1, -5, 10, -7, -6]) == [-1, -1, -5, 10, -7, -6]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [12, 12, 12, 12, 12, -6]\n    max_sum_list([-1, 2, 3, 4, 5, -7]) == [12, 12, 12, 12, 12, -7]\n    max_sum_list([1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [-1, 2, 3, 4, 5, -6]\n    max_sum_list([-1, 2, 3, 4, 5, -7]) == [-1, 2, 3, 4, 5, -7]\n    max_sum_list([-1, -1, -5, 10, -7, 3]) == [-1, -1, -5, 10, -7, 3]\n    max_sum_list([-1, -1, -5, 10, -7, -3]) == [-1, -1, -5, 10, -7, -3]\n    max_sum_list([-1, -1, -5, 10, -7, -6]) == [-1, -1, -5, 10, -7, -6]\n    max_sum_list([-1, 2, 3, 4, 5, 6]) == [12, 12, 12, 12, 12, 12]\n    max_sum_list([-1, 2, 3, 4, 5, -6]) == [12, 1"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum_list([1,2,3,4]) == [[1,4],[2,3]]\nassert     max_sum_list([-1,2,3,-4]) == [[-1,3],[-1,4]]\nassert     max_sum_list([-1,-1,-1,2]) == [[-1,2],[-1,3]]\n\ndef max_sum_list_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase(\"abcABCdABCe\") == 3, \"Test case 1 Wrong answer\"\nassert     max_run_uppercase(\"AaBCDEEEEEEEEE\") == 5, \"Test case 2 Wrong answer\"\nassert     max_run_uppercase(\"ABCDEFabcABCDEF\") == 7, \"Test case 3 Wrong answer\"\nassert     max_run_uppercase(\"abcdefgh\") == 1, \"Test case 4 Wrong answer\"\nassert     max_run_uppercase(\"abABBcccCD\") == 3, \"Test case 5 Wrong answer\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase(\"\") == 0\nassert     max_run_uppercase(\"A\") == 1\nassert     max_run_uppercase(\"AA\") == 1\nassert     max_run_uppercase(\"AAA\") == 3\nassert     max_run_uppercase(\"aAA\") == 3\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase(\"MEdy\") == 2\nassert     max_run_uppercase(\"MEdy\") == 2\nassert     max_run_uppercase(\"B\") == 1\nassert     max_run_uppercase(\"MEdy\") == 2\nassert     max_run_uppercase(\"mEdy\") == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_run_uppercase('AAABCDDDEEEEEE') == 3\nassert max_run_uppercase('AAABCDDDEEEEEE') == 3\nassert max_run_uppercase('AAABCDDDEEEEEE') == 3\nassert max_run_uppercase('AAABCDDDEEEEEE') == 3\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_run_uppercase(\"HELLO\") == 2, \"Max run of uppercase should be 2\"\nassert     max_run_uppercase(\"AaBbCc\") == 0, \"Max run of uppercase should be 0\"\nassert     max_run_uppercase(\"abcABC\") == 3, \"Max run of uppercase should be 3\"\nassert     max_run_uppercase(\"abcABCabc\") == 3, \"Max run of uppercase should be 3\"\nassert     max_run_uppercase(\"\") == 0, \"Max run of uppercase should be 0\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    max_run_uppercase('ABD') == 2, '2'\n    max_run_uppercase('c') == 1, '1'\n    max_run_uppercase('RRRR') == 3, '3'\n    max_run_uppercase('12345678') == 4, '4'\n    max_run_uppercase('Bb') == 1, '1'\n    max_run_uppercase('BABABABABAB') == 2, '2'\n    max_run_uppercase('AABBAAAB') == 3, '3'\n    max_run_uppercase('AAABAAAB') == 4, '4'\n    max_run_uppercase('AABBAAABAA') == 3, '3'\n    max_run_uppercase('AAABAAABAA') == 4, '4'\n    max_run_uppercase('BB') == 1, '1'\n    max_run_uppercase('BA') == 1, '1'\n    max_run_uppercase('') == 0, '0'\n    max_run_uppercase('BABABABABABABABA') == 10, '10'\n    max_run_uppercase('ABABABABABABABABA') == 1, '1'\n    max_run_uppercase('AAABAAABAABABABABA') == 2, '2'\n    max_run_uppercase('AABBAAABAABABABABA') == 3, '3'\n    max_run_uppercase('AABBAAABAABABABABA') == 3, '3'\n    max_run_uppercase('AB') == 1, '1'\n    max_run_uppercase('AA') == 1, '1'\n    max_run_uppercase('ABBA') == 1, '1'\n    max_run_uppercase('BBBA') == 2, '2'\n    max_run_uppercase('AAABAAAB') == 2, '2'\n    max_run_uppercase('AAABAAABAA') == 4, '4'\n    max_run_uppercase('AAABAAABAABABABA') == 5, '5'\n    max_run_uppercase('BBBBBB') == 1, '1'\n    max_run_uppercase('AABBBBBB') == 2, '2'\n    max_run_uppercase('AABBBBBBB') == 3, '3'\n    max_run_uppercase('BBBBBBB') == 2, '2'\n    max_run_uppercase('AABBBBBBBB') == 4, '4'\n    max_run_uppercase('AABBBBBBBBB') == 4, '4'\n    max_run_uppercase('BBBBBBBBBB') == 1, '1'\n    max_run_uppercase('BBABBBBBBBBBBBBB') == 5, '5'\n    max_run_uppercase('BBBBBBBBBBBBBBBB') == 4, '4'\n    max_run_uppercase('BBBBBBBBBBBBBBBBB') == 4, '4'\n    max_run_uppercase('BBBBBBBBBBBBBBBBBB') == 1, '1'\n    max_run_uppercase('BBBBBBBBBBBBBBBBBB') == 1, '1'\n    max_run_uppercase('BBBBBBBBBBBBBBBBBB') == 0, '0'\n    max_run_uppercase('BBBBBBBBBBBBBBBBBBBB') == 0, '0'\n    max_run_uppercase('BBBBBBBBBBBBBBBBBBBBBBBBB') == 0, '0'\n    max_run_uppercase
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase('AABABABAB') == 1, 'incorrect'\nassert     max_run_uppercase('a') == 1, 'incorrect'\nassert     max_run_uppercase('z') == 1, 'incorrect'\nassert     max_run_uppercase('AAaaAA') == 2, 'incorrect'\nassert     max_run_uppercase('AAAAAAAAAA') == 4, 'incorrect'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_run_uppercase(\"hhiAAse\") == 1, \"example\"\nassert     max_run_uppercase(\"Aa\") == 2, \"ab\"\nassert     max_run_uppercase(\"AAse\") == 3, \"ase\"\nassert     max_run_uppercase(\"AAse123\") == 3, \"123\"\nassert     max_run_uppercase(\"AAse12345\") == 3, \"12345\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_odd([2, 3, 8, 12, 7]) == 7\nassert     first_odd([8, 9, 8]) == 8\nassert     first_odd([1]) == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6]) == 5\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 7\nassert     first_odd([1, 2, 3, 4, 5, 6, 7]) == 7\n\nprint('All test cases passed')\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_odd([]) == None\nassert     first_odd([2, 2, 2]) == None\nassert     first_odd([3, 5, 2, 2]) == 5\nassert     first_odd([3, 5, 2, 8]) == 8\n\nprint(\"first_odd() test cases passed\")\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_odd([]) == None, 'List is empty'\nassert     first_odd([1,2,3,4,5]) == 2, 'First odd number in list'\nassert     first_odd([1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 19, 'First odd number in list'\nassert     first_odd([]) == None, 'Empty list'\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 20, 'First odd number in list'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_odd([1, 3, 5, 7, 9]) == 3, 'First odd'\nassert first_odd([1, 3, 5, 7, 9, 11]) == 11, 'First odd'\nassert first_odd([1, 3, 5, 7, 9, 15]) == 15, 'First odd'\nassert first_odd([1, 3, 5, 7, 9, 10]) == 10, 'First odd'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_odd([2,3,4,5,6,7,8]) == 7,'should be 7'\nassert     first_odd([3,5,7]) == 7,'should be 7'\nassert     first_odd([7,9,10]) == 9,'should be 9'\nassert     first_odd([]) == None,'should be None'\nassert     first_odd([\"a\",\"b\",\"c\",\"d\",\"e\"]) == None,'should be None'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([1, 2, 4, 5]) == 1\nassert     first_odd([1, 2, 3, 4, 5]) == 3\nassert     first_odd([-1, 2, 4, 5]) == 1\nassert     first_odd([1, 3, 5]) == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef even_odd(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_odd([1, 3, 5]) == 3\nassert     first_odd([1, 3, -5]) == 3\nassert     first_odd([1, 3, 5, 6]) == 5\nassert     first_odd([]) == None\nassert     first_odd(['a', 'b', 'c']) == None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_K(\n            (\n            ('a', 'b', 'c'), \n            ('a', 'b', 'c'), \n            ('d', 'e', 'f')\n            ),\n            1\n            )\nassert not check_K(\n            (\n            ('a', 'b', 'c'), \n            ('a', 'b', 'c'), \n            ('d', 'e', 'f')\n            ),\n            2\n            )\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K((1,2,3), 0) == False, \\\n        'Test 1: Failed'\nassert     check_K((2,3,4), 0) == True, \\\n        'Test 2: Failed'\nassert     check_K((3,4,5), 1) == True, \\\n        'Test 3: Failed'\nassert     check_K((4,5,6), 1) == False, \\\n        'Test 4: Failed'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_K((1,2,3,4), 1) == True, \"Not correct\"\nassert     check_K((1,2,3,4), 4) == False, \"Not correct\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    \ndef check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_K((1, 2, 3, 4), 1) == True, 'The first tuple is correct'\nassert     check_K((1, 2, 3, 4), 2) == False, 'The second tuple is not correct'\nassert     check_K((1, 2, 3, 4, 5), 2) == True, 'The third tuple is correct'\nassert     check_K((1, 2, 3, 4, 5), 4) == False, 'The fourth tuple is not correct'\n\nprint('PASSED'"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K([(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)], K = 1) == True\nassert     check_K([(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)], K = 2) == False\nassert     check_K([(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)], K = 3) == False\nassert     check_K([(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)], K = 4) == False\nassert     check_K([(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)], K = 5) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_K(test_tup1, 0) == False\nassert     check_K(test_tup2, 1) == True\nassert     check_K(test_tup3, 2) == False\n\n'''\nTask-6\n'''\ndef apply_corr_rule(test_tup, K):\n    '''\n    Write a function to apply the correction rule of the given tuple and\n    the k.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller((1, 2, 3), (2, 4, 6)) == True, \"Test 1 Failed\"\nassert     check_smaller((1, 2, 3), (2, 3, 4)) == False, \"Test 2 Failed\"\nassert     check_smaller((1, 2, 3), (4, 4, 4)) == True, \"Test 3 Failed\"\nassert     check_smaller((-1, -2, -3), (1, 2, 3)) == True, \"Test 4 Failed\"\nassert     check_smaller((-1, -2, -3), (2, 4, 6)) == False, \"Test 5 Failed\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((2,1,5),(2,1,2)) == True, 'Should return True'\nassert     check_smaller((2,1,5),(2,1,1)) == False, 'Should return False'"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_smaller((1,2), (3,4))     == False, \"Fail\"\nassert     check_smaller((3,4), (1,2))     == True, \"Pass\"\nassert     check_smaller((3,2), (2,2))     == False, \"Pass\"\nassert     check_smaller((2,3), (1,4))     == True, \"Pass\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_smaller((1,2), (2,1)) == False\nassert check_smaller((1,2), (2,2)) == False\nassert check_smaller((1,2), (1,2)) == True\nassert check_smaller((1,2), (2,0)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((2, 1, 0), (1, 0, 3)) == True, \"Should be True\"\nassert     check_smaller((1, 0, 3), (2, 1, 0)) == False, \"Should be False\"\n\nprint(\"All tests passed!\""
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_smaller((1,2), (5,4)) == (True, False), \"Wrong answer\"\nassert     check_smaller((1,2), (5,6)) == (False, True), \"Wrong answer\"\nassert     check_smaller((1,1), (5,6)) == (False, True), \"Wrong answer\"\nassert     check_smaller((1,2), (5,2)) == (True, False), \"Wrong answer\"\nassert     check_smaller((5,1), (5,2)) == (False, True), \"Wrong answer\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1,2),(3,2)) == True\nassert     check_smaller((1,2),(2,3)) == False\nassert     check_smaller((1,2,3),(1,2)) == True\nassert     check_smaller((1,2,3),(2,3)) == False\nassert     check_smaller((1,2,3),(3,2)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller((3, 4), (3, 5)) == True, \"This should be true\"\nassert     check_smaller((4, 3), (3, 5)) == False, \"This should be false\"\nassert     check_smaller((3, 4, 2), (1, 3, 5)) == True, \"This should be true\"\nassert     check_smaller((4, 3, 2), (1, 3, 5)) == False, \"This should be false\"\nassert     check_smaller((1, 2), (3, 4)) == True, \"This should be true\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((-1, -2), (3, 5)) == True, 'Testcase 1 Failed'\nassert     check_smaller((-2, -3), (1, -5)) == True, 'Testcase 2 Failed'\nassert     check_smaller((5, 8), (-2, -3)) == False, 'Testcase 3 Failed'\nassert     check_smaller((1, 2), (4, 5)) == True, 'Testcase 4 Failed'\n"
    }
]