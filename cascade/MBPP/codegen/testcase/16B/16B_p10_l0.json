[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     similar_elements(test_tup1, test_tup2) == {'a', 'c'}, \"incorrect\"\nassert     similar_elements(test_tup3, test_tup4) == {'a', 'c'}, \"incorrect\"\nassert     similar_elements(test_tup5, test_tup6) == {'a', 'c', 'd'}, \"incorrect\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     similar_elements([1, 2, 3], [3, 2, 1]) == [3, 2, 1]\nassert     similar_elements([1, 2, 3], [2, 3]) == [2, 3]\nassert     similar_elements([1, 2, 3], []) == []\nassert     similar_elements([], [1, 2, 3]) == []\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     similar_elements((\"Math\", \"Physics\", \"Chemistry\"), (\"English\", \"History\", \"Geography\", \"Math\")) == \"Math\", \"Match!\"\nassert     similar_elements((\"Geography\", \"Math\", \"Physics\", \"Chemistry\", \"English\"), (\"Math\", \"Geography\", \"Chemistry\", \"English\", \"History\", \"Physics\")) == \"Math\", \"Match!\"\nassert     similar_elements((\"Physics\", \"Chemistry\", \"English\", \"History\"), (\"Chemistry\", \"English\", \"History\", \"Physics\")) == \"Chemistry\", \"Match!\"\nassert     similar_elements((\"Physics\", \"Chemistry\", \"English\", \"History\"), (\"Chemistry\", \"History\", \"Physics\", \"English\")) == \"Chemistry\", \"Match!\"\nassert     similar_elements((\"Physics\", \"Chemistry\", \"English\", \"History\"), (\"English\", \"Chemistry\", \"History\", \"Physics\")) == \"English\", \"Match!\"\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     similar_elements([1, 2, 3], [1, 3, 4]) == {1, 3}, \"Wrong\"\nassert     similar_elements([1, 2, 3], [3, 5, 6]) == {3}, \"Wrong\"\nassert     similar_elements([1, 2, 3], [0, 1, 2, 3]) == {1, 2, 3}, \"Wrong\"\nassert     similar_elements([1, 2, 3], [2, 3]) == {2, 3}, \"Wrong\"\nassert     similar_elements([1, 2, 3], [1, 3, 5, 6]) == {1, 3}, \"Wrong\"\nprint('Similar Elements: Success!')\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     similar_elements([1, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 3, 4, 5], 'Failed in test case 3'\nassert     similar_elements([], []) == [], 'Failed in test case 4'\nassert     similar_elements([1], [1]) == [1], 'Failed in test case 5'\nprint(\"All tests Passed\")"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     similar_elements([1,2,3], [1,2,4]) == [1, 2], 'function incorrect'\nassert     similar_elements([1,2,3], [4,5,6]) == [], 'function incorrect'\nassert     similar_elements([1,2,3], [1,2,3]) == [1, 2, 3], 'function incorrect'\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_not_prime(4) == False \nassert     is_not_prime(12) == True\nassert     is_not_prime(13) == True\nassert     is_not_prime(1) == False\nassert     is_not_prime(2) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_not_prime(5) == False\nassert     is_not_prime(10) == False\nassert     is_not_prime(11) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_not_prime(11) == False, 'Error on 11'\nassert     is_not_prime(23) == False, 'Error on 23'\nassert     is_not_prime(37) == False, 'Error on 37'\nassert     is_not_prime(41) == False, 'Error on 41'\nassert     is_not_prime(67) == False, 'Error on 67'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_not_prime(1) is False\nassert     is_not_prime(2) is False\nassert     is_not_prime(4) is False\nassert     is_not_prime(6) is False\nassert     is_not_prime(7) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_not_prime(2) == False, 'Wrong answer for is_not_prime(2)'\nassert     is_not_prime(3) == False, 'Wrong answer for is_not_prime(3)'\nassert     is_not_prime(4) == False, 'Wrong answer for is_not_prime(4)'\nassert     is_not_prime(5) == False, 'Wrong answer for is_not_prime(5)'\nassert     is_not_prime(6) == False, 'Wrong answer for is_not_prime(6)'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_not_prime(3) == False\nassert     is_not_prime(6) == False\nassert     is_not_prime(9) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_not_prime(1) == False, '1 is not a prime'\nassert     is_not_prime(2) == False, '2 is not a prime'\nassert     is_not_prime(3) == False, '3 is not a prime'\nassert     is_not_prime(4) == False, '4 is not a prime'\nassert     is_not_prime(5) == True, '5 is a prime'\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (is_not_prime(1) == False)\nassert     (is_not_prime(2) == False)\nassert     (is_not_prime(3) == False)\nassert     (is_not_prime(4) == False)\nassert     (is_not_prime(6) == False)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_not_prime(2) is True\nassert     is_not_prime(15) is False\nassert     is_not_prime(18) is True\nassert     is_not_prime(73) is False\nassert     is_not_prime(103) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(1) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sorted(heap_queue_largest([10, 2, 9, 4, 5, 1], 3)) == [10, 9, 5]\nassert     sorted(heap_queue_largest([10, 4, 5, 7, 2, 9, 4, 3], 5)) == [10, 9, 4, 7, 3]\nassert     sorted(heap_queue_largest([4, 5, 7, 2, 9, 4, 3], 5)) == [9, 7, 5, 4, 3]\nassert     sorted(heap_queue_largest([4, 2, 1, 5, 7, 9, 3, 6, 8, 10], 5)) == [10, 9, 8, 7, 6]\nassert     sorted(heap_queue_largest([4, 2, 1, 5, 7, 9, 3, 6, 8, 10], 10)) == [10, 9, 8, 7, 6, 4, 3, 2, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([2,1,3,4],2) == [4,3]\nassert     heap_queue_largest([2,1,3,4],3) == [4,3,2]\nassert     heap_queue_largest([2,1,3,4],4) == [4,3,2,1]\nassert     heap_queue_largest([2,1,3,4],5) == [4,3,2,1,0]\nassert     heap_queue_largest([2,1,3,4],1) == [1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     sorted(heap_queue_largest([4,5,1,6],2),reverse=True) == [6,5]\nassert     sorted(heap_queue_largest([4,5,1,6],1),reverse=True) == [6]\nassert     sorted(heap_queue_largest([4,5,1,6],4),reverse=True) == [5,4,1,6]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([], 0) == []\nassert     heap_queue_largest([10, 2, 9, 3], 1) == [10]\nassert     heap_queue_largest([10, 2, 9, 3], 2) == [9, 10]\nassert     heap_queue_largest([10, 2, 9, 3], 3) == [9, 10, 3]\nassert     heap_queue_largest([10, 2, 9, 3], 4) == [9, 10, 3, 2]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([],0) == []\nassert     heap_queue_largest([],5) == []\nassert     heap_queue_largest([5],1) == [5]\nassert     heap_queue_largest([1,2,3,4,5],5) == [5,4,3,2,1]\nassert     heap_queue_largest([4,3,2,1,6,5],5) == [5,6,4,3,2,1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([7, 10, 12, 14, 15, 13, 9], 4) == [14, 15, 13, 12]\nassert     heap_queue_largest([7, 10, 12, 14, 15, 13, 9], 2) == [15, 14]\nassert     heap_queue_largest([7, 10, 12, 14, 15, 13, 9], 3) == [14, 13, 12]\nassert     heap_queue_largest([7, 10, 12, 14, 15, 13, 9], 6) == [9, 7, 10, 14, 15, 13, 12]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (heap_queue_largest([], 0) == [])\nassert     (heap_queue_largest([], 1) == [])\nassert     (heap_queue_largest([10, 20, 30, 40, 50], 0) == [])\nassert     (heap_queue_largest([10, 20, 30, 40, 50], 1) == [50])\nassert     (heap_queue_largest([10, 20, 30, 40, 50], 2) == [40, 30])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     heap_queue_largest([5, 4, 3, 2, 1], 2) == [5, 4]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([1,8,2,23,7,4,18,23,42,37,9],3)==[42, 37, 23]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     heap_queue_largest([1,2,3,4,5], 3) == [5,4,3]\nassert     heap_queue_largest([1,2,3,4,5], 1) == [5]\nassert     heap_queue_largest([1,2,3,4,5], 0) == []\nassert     heap_queue_largest([1,2,3,4,5], 6) == [5,4,3,2,1]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(2**16) == True \nassert     is_Power_Of_Two(2**17) == True \nassert     is_Power_Of_Two(2**18) == False \nassert     is_Power_Of_Two(2**19) == False "
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(2) == True \nassert     is_Power_Of_Two(8) == True \nassert     is_Power_Of_Two(1) == False \nassert     is_Power_Of_Two(0) == False \n\nprint(\"Exercise 7 is correct.\")\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two (2**5) == True, \"Wrong output for is_Power_Of_Two (2**5)\"\nassert     is_Power_Of_Two (2**10) == True, \"Wrong output for is_Power_Of_Two (2**10)\"\nassert     is_Power_Of_Two (2**15) == True, \"Wrong output for is_Power_Of_Two (2**15)\"\nassert     is_Power_Of_Two (2**16) == True, \"Wrong output for is_Power_Of_Two (2**16)\"\nassert     is_Power_Of_Two (2**17) == True, \"Wrong output for is_Power_Of_Two (2**17)\"\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two (2**32) == True, 'Not a power of two'\nassert     is_Power_Of_Two (4) == True, 'Not a power of two'\nassert     is_Power_Of_Two (3) == True, 'Not a power of two'\nassert     is_Power_Of_Two (5) == True, 'Not a power of two'\nassert     is_Power_Of_Two (7) == False, 'Not a power of two'\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two(64) == False, 'test failed'\nassert     is_Power_Of_Two(16) == False, 'test failed'\nassert     is_Power_Of_Two(16) == True, 'test failed'\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(2) == True \nassert     is_Power_Of_Two(2**7) == True \nassert     is_Power_Of_Two(2**8) == False \nassert     is_Power_Of_Two(1234) == False \nassert     is_Power_Of_Two(1235) == True \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(7) == True\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(8) == True\nassert     is_Power_Of_Two(10) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(8)==True\nassert     is_Power_Of_Two(8.5)==True\nassert     is_Power_Of_Two(10)==False\nassert     is_Power_Of_Two(15)==False\nassert     is_Power_Of_Two(32)==True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(2**3) == True\nassert     is_Power_Of_Two(2**5) == False\nassert     is_Power_Of_Two(2**7) == True\nassert     is_Power_Of_Two(2**9) == False\nassert     is_Power_Of_Two(2**6) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_char_long('hi there mate') == ['there','mate']\nassert     find_char_long('hi there') == ['there']\nassert     find_char_long('hi') == []\nassert     find_char_long('h') == []\nassert     find_char_long('') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_char_long(\"The quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'jumps', 'dog'], \"Not working properly\"\nassert     find_char_long(\"Once upon a midnight dreary\") == ['dreary'], \"Not working properly\"\nassert     find_char_long(\"It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn\u2019t know what I was doing in New York...\") == ['summer', 'electrocuted', 'Rosenbergs', 'New York'], \"Not working properly\"\nassert find_char_long(\" \") == [], \"Spaces are not included in the string\"\n\ndef find_num_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_char_long(\"I am a champion\") == [\"am\", \"champion\"]\nassert find_char_long(\"I am a champion, I am a champion.\") == [\"am\", \"champion\", \"I\", \"am\"]\nassert find_char_long(\"I am a champion, I am a champion.\") == [\"am\", \"champion\", \"I\", \"am\"]\nassert find_char_long(\"I am a champion, I am a champion.\") == [\"am\", \"champion\", \"I\", \"am\"]\nassert find_char_long(\"I am a champion, I am a champion.\") == [\"am\", \"champion\", \"I\", \"am\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_char_long(\"my name is Alex\") == []\nassert     find_char_long(\"my name is Alexw\") == ['Alex']\nassert     find_char_long(\"my name is AlexXY\") == ['Alex']\nassert     find_char_long(\"my name is AlexXYZ\") == ['Alex', 'XYZ']\nassert     find_char_long(\"my name is AlexXYZXYZ\") == ['Alex', 'XYZ', 'XYZ']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_char_long('abcdefg') == ['abcd', 'abcde', 'abcdf', 'abcdg', 'abcdh', 'abcdij', 'abcdmn']\nassert     find_char_long('abcd') == ['abcd']\nassert     find_char_long('12345') == ['1234', '12345']\nassert     find_char_long('a') == ['a']\nassert     find_char_long('aa') == ['aa']\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_char_long(\"abcd efgh\") == ['abcd', 'efgh']\nassert     find_char_long(\"a abc de fgh\") == ['abcd', 'efgh']\nassert     find_char_long(\"abc\") == []\nassert     find_char_long(\"\") == []\n\ndef find_char_long_two(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string,\n    while ignoring the case.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     re.findall(r'\\w{4,}', 'I am a very poor boy') == ['am', 'boy']\nassert     re.findall(r'\\w{4,}', 'I am a very poor boy and a very bad boy') == ['am', 'boy', 'and', 'boy']\nassert     re.findall(r'\\w{4,}', 'I am a very poor boy and a very bad boy and a very very bad boy') == ['am', 'boy', 'and', 'boy', 'and', 'boy']\n\ndef find_word_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     re.findall(r\"\\b[a-z]{4,}\\b\", \"I like apples and I like oranges\") == \\\n        ['apples', 'oranges']\nassert     re.findall(r\"\\b[a-z]{4,}\\b\", \"I like apples and I like oranges and kiwi\") == \\\n        ['apples', 'oranges', 'kiwi']\n\ndef find_char_n_long(text):\n    '''\n    Write a function to find all words which are exactly 5 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_char_long('abcdefg') == ['abcde', 'bcdef', 'cdefg']\nassert     find_char_long('abcd') == ['abcd']\nassert     find_char_long('aaaa') == ['aaaa']\nassert     find_char_long('bbb') == []\nassert     find_char_long('b') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at most 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     [1,4,9,16,25,36,49] == square_nums([1,2,3,4,5])\nassert     [0,1,4,9,16] == square_nums([0,1,2,3,4])\nassert     [] == square_nums([])\n\nprint('Correctness of square_nums...')\nprint('PASSED' if  [1,4,9,16,25,36,49] == square_nums([1,2,3,4,5]) else 'FAILED')\nprint('PASSED' if  [0,1,4,9,16] == square_nums([0,1,2,3,4]) else 'FAILED')\nprint('PASSED' if  [] == square_nums([]) else 'FAILED')\n\nprint('\\n')\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     square_nums([1,2,3,4,5])             == [1, 4, 9, 16, 25], \"Not working for positive numbers\"\nassert     square_nums([-1,-2,-3,-4,-5])     == [-1, -4, -9, -16, -25], \"Not working for negative numbers\"\nassert     square_nums([0,0,0,0,0])         == [0, 0, 0, 0, 0], \"Not working for 0\"\n\ndef list_all_nums(nums):\n    '''\n    Write a function to return a list with the squares of every element of a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([0, 1, 2, 3]) == [0, 1, 4, 9]\nprint('Problem 1 is correct!')\n\ndef even_nums(nums):\n    '''\n    Write a function to find even numbers from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef even_numbers(nums):\n    '''\n    Write a function to filter even numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef is_prime(number):\n    '''\n    Write a function to check whether a given input is a prime number or not.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (square_nums([1,2,3,4]) == [1,4,9,16]), \"Not Equal\"\nassert     (square_nums([0,-3,2,6]) == [0,9,4,18]), \"Not Equal\"\n\nprint('Test passed Successfully')"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     [4,9,16] == square_nums([1,2,3])\nassert     [] == square_nums([])\nassert     [0,1,4,9,16] == square_nums([0,1,2,3])\nprint('Correct!')\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [4, 9, 16] == square_nums([4, 9, 16])\nassert     [1, 4, 9, 81] == square_nums([1, 4, 9, 81])\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (square_nums([1,2,3,4,5]) == [1, 4, 9, 16, 25]), 'incorrect output'\nassert     (square_nums([0,1,-1,2,-2,3]) == [0, 1, 1, 4, 4, 9]), 'incorrect output'\nassert     (square_nums([]) == []), 'incorrect output'\n\n\ndef count_negatives(nums):\n    '''\n    Write a function to count negative numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     [4, 9, 16] == square_nums([4, 9, 16])\nassert     [1, 1, 1] == square_nums([1, 1, 1])\nassert     [] == square_nums([])\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_Rotations('abc') == 0, \"find_Rotations('abc') is wrong!\"\nassert     find_Rotations('abac') == 1, \"find_Rotations('abac') is wrong!\"\nassert     find_Rotations('acb') == 0, \"find_Rotations('acb') is wrong!\"\nassert     find_Rotations('aabbc') == 1, \"find_Rotations('aabbc') is wrong!\"\nassert     find_Rotations('abbcc') == 1, \"find_Rotations('abbcc') is wrong!\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_Rotations(\"abcde\") == 0, \"Wrong output\"\nassert     find_Rotations(\"abced\") == 1, \"Wrong output\"\nassert     find_Rotations(\"abcedf\") == 2, \"Wrong output\"\nassert     find_Rotations(\"abcedfg\") == 3, \"Wrong output\"\nassert     find_Rotations(\"abcefgh\") == 5, \"Wrong output\"\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_Rotations( 'abdba' ) == 2, \"testing abdba. \\n Expected: 2\\n Actual: \" + str( find_Rotations( 'abdba' ) )\nassert     find_Rotations( 'abdb' ) == -1, \"testing abdb. \\n Expected: -1\\n Actual: \" + str( find_Rotations( 'abdb' ) )\nassert     find_Rotations( 'abdbc' ) == 0, \"testing abdbc. \\n Expected: 0\\n Actual: \" + str( find_Rotations( 'abdbc' ) )\nassert     find_Rotations( 'abdba' ) == 2, \"testing abdba. \\n Expected: 2\\n Actual: \" + str( find_Rotations( 'abdba' ) )\nassert     find_Rotations( 'abdba' ) == 2, \"testing abdba. \\n Expected: 2\\n Actual: \" + str( find_Rotations( 'abdba' ) )\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_Rotations('hello') == 1\nassert     find_Rotations('hlo') == -1\nassert     find_Rotations('tlo') == 2\nassert     find_Rotations('12345') == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_Rotations('ab') == 0\nassert     find_Rotations('abab') == 1\nassert     find_Rotations('aabab') == 2\nassert     find_Rotations('abbab') == 1\nassert     find_Rotations('abbaab') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_Rotations('abcde') == 0\nassert     find_Rotations('aabcde') == 1\nassert     find_Rotations('aabcdeb') == 1\nassert     find_Rotations('aabcdeba') == 2\nassert     find_Rotations('abcdeba') == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_Rotations('ABAC') == 2\nassert     find_Rotations('AAAC') == 0\nassert     find_Rotations('ACAC') == -1\nassert     find_Rotations('ACACACAC') == 4\nassert     find_Rotations('ACACACACAC') == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"AABAAB\") == 2\nassert     find_Rotations(\"ABAB\") == 0\nassert     find_Rotations(\"AAB\") == 0\nassert     find_Rotations(\"ABB\") == -1\nassert     find_Rotations(\"BAA\") == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_Rotations(\"geeksforgeeks\") == 2\nassert     find_Rotations(\"abcdefgh\") == 0\nassert     find_Rotations(\"geekforgeeks\") == 1\nassert     find_Rotations(\"geeksforgeeksqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == 3\nassert     find_Rotations(\"geeksforgeeksqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == 3\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_Rotations(\"word\") == 3\nassert     find_Rotations(\"tester\") == 4\nassert     find_Rotations(\"robot\") == 1\nassert     find_Rotations(\"hello\") == 0\nassert     find_Rotations(\"python\") == 3\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     remove_Occ(\"hello\",'l') == \"helo\"\nassert     remove_Occ(\"hello\",'e') == \"hllo\"\nassert     remove_Occ(\"hello\",'o') == \"hll\"\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     remove_Occ('aabbcc','b') == 'aabbc'\nassert     remove_Occ('aababcc','b') == 'aababc'\nassert     remove_Occ('aababcc','c') == 'aabab'\nassert     remove_Occ('aababcc','z') == 'aababcc'\nassert     remove_Occ('aababcc','a') == 'bc'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     remove_Occ('hello', 'l') == 'hel','remove_Occ is incorrect'\nassert     remove_Occ('hello', 'h') == 'ello','remove_Occ is incorrect'\nassert     remove_Occ('hello', 'o') == 'ell','remove_Occ is incorrect'\nassert     remove_Occ('hello', 'x') == 'hello','remove_Occ is incorrect'\nassert     remove_Occ('hello', 'z') == 'hello','remove_Occ is incorrect'\nprint('remove_Occ is correct')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nremove_Occ('me', 'e') =='m'\nremove_Occ('me','m') =='me'\nremove_Occ('me', 'h') =='me'\n\ndef remove_Occ_2(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     remove_Occ('python', 'o') == 'ythn'\nassert     remove_Occ('python', 'o') == 'ythn'\n\ndef change_char(s,p,r):\n    '''\n    Write a Python function to change a given string at a given index to a given character.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     remove_Occ('Alex is a good student.','a') == 'Alex is good student.'\nassert     remove_Occ('Alex is a good student.','z') == 'Alex is good student.'\nassert     remove_Occ('Alex is a good student.','x') == 'Alex is good student.'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     remove_Occ(\"how are you how are you\", \"o\") == \"how r you how r you\"\nassert     remove_Occ(\"how are you how are you\", \"a\") == \"how r you hw r y\"\nassert     remove_Occ(\"\", \"a\") == \"\"\nassert     remove_Occ(\"aaaa\", \"a\") == \"b\"\n\nprint('\\n')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     remove_Occ('spam','m') =='spa'\nassert     remove_Occ('spamspam','s') =='spamspam'\nassert     remove_Occ('', 'a') == ''\nassert     remove_Occ('','spam') == ''\nassert     remove_Occ('spam', '') =='spam'\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     remove_Occ(\"we are humans\",\"h\") == \"we arnh\",\"removeOcc() failed\"\nassert     remove_Occ(\"we are humans\",\"o\") == \"we arn \",\"removeOcc() failed\"\nassert     remove_Occ(\"we are humans\",\"t\") == \"we arnh\",\"removeOcc() failed\"\nassert     remove_Occ(\"we are humans\",\"w\") == \"arh\",\"removeOcc() failed\"\n\ndef remove_Occ_with_slicing(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_matrix(\n            [\n                [1,2,3],\n                [4,5,6],\n                [7,8,9]\n            ]\n        ) == [\n                [7,8,9],\n                [4,5,6],\n                [1,2,3]\n            ], \"error\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [[9, 4, 6, 8], \n        [5, 3, 7, 1], \n        [2, 8, 6, 4],\n        [1, 5, 9, 2]] == sort_matrix([[9, 4, 6, 8], [5, 3, 7, 1], [2, 8, 6, 4], [1, 5, 9, 2]])\nassert     [[5, 4, 7, 4], \n        [6, 3, 4, 2], \n        [8, 8, 4, 4],\n        [9, 2, 1, 1]] == sort_matrix([[5, 4, 7, 4], [6, 3, 4, 2], [8, 8, 4, 4], [9, 2, 1, 1]])\nassert     [[5, 4, 7, 4], \n        [6, 3, 4, 2], \n        [8, 8, 4, 4],\n        [9, 2, 1, 1]] == sort_matrix([[1, 3, 7, 4], [6, 4, 4, 2], [9, 8, 4, 4], [5, 2, 1, 1]])\nassert     [[1, 3, 7, 4], \n        [5, 4, 4, 2], \n        [6, 4, 4, 2],\n        [9, 8, 4, 4]] == sort_matrix([[1, 3, 7, 4], [5, 4, 4, 2], [6, 4, 4, 2], [9, 8, 4, 4]])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (\n            sort_matrix([[1,2,3],\n                         [4,5,6],\n                         [7,8,9]]) == \n            [[7,8,9],\n            [1,2,3],\n            [4,5,6]], \n            \"incorrect\"\n        )\nassert     (\n            sort_matrix([[1,2,3,4],\n                         [2,4,6,8],\n                         [2,8,10,12],\n                         [4,7,12,16]]) == \n            [[4,7,12,16],\n             [2,2,4,6],\n             [2,4,8,10],\n             [1,2,3,12]], \n            \"incorrect\"\n        )\nassert     (\n            sort_matrix([[1,2,3,4,5],\n                         [2,4,6,8,10],\n                         [2,8,10,12,14],\n                         [4,7,12,16,20],\n                         [1,2,3,4,5]]) == \n            [[1,2,3,4,5],\n             [2,2,4,6,10],\n             [2,4,8,10,14],\n             [1,2,3,4,12],\n             [4,7,12,16,20]], \n            \"incorrect\"\n        )"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef sum_matrix(M):\n    '''\n    Write a function to return the sum of all elements in the given matrix.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     [    [1, 2, 4, 0, 0], \n        [0, 0, 0, 3, 2], \n        [0, 1, 2, 3, 4], \n        [2, 2, 3, 3, 2], \n        [3, 3, 3, 0, 4]    ] == sort_matrix([    [1, 2, 4, 0, 0], \n                                            [0, 0, 0, 3, 2], \n                                            [0, 1, 2, 3, 4], \n                                            [2, 2, 3, 3, 2], \n                                            [3, 3, 3, 0, 4]    ])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [ [ 4, 4, 9, 4 ],\n           [ 5, 2, 2, 5 ],\n           [ 6, 7, 6, 6 ] ] == sort_matrix([ [4, 4, 9, 4],\n                                            [5, 2, 2, 5],\n                                            [6, 7, 6, 6] ])\nassert     [ [ 1, 1, 1, 1 ],\n           [ 1, 1, 1, 1 ],\n           [ 1, 1, 1, 1 ] ] == sort_matrix([ [1, 1, 1, 1],\n                                            [1, 1, 1, 1],\n                                            [1, 1, 1, 1] ])\nassert     [ [ 2, 2, 2, 2 ],\n           [ 3, 4, 5, 6 ] ] == sort_matrix([ [2, 2, 2, 2],\n                                            [3, 4, 5, 6] ])\nassert     [ [ 3, 3, 3, 3 ] ] == sort_matrix([ [3, 3, 3, 3] ])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[7,8,9],[4,5,6],[1,2,3]]\nassert     sort_matrix([[4,3,2,1],[1,2,3,4],[5,6,7,8],[1,2,3,4]]) == [[5,6,7,8],[1,2,3,4],[1,2,3,4],[4,3,2,1]]\n\ndef is_simple_matrix(M):\n    '''\n    Write a function to check if a given matrix is simple.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_matrix(M = [[2,2,3],\n                         [5,6,7],\n                         [8,10,8]]) == [[2, 2, 3],\n                                      [5, 6, 7],\n                                      [8, 10, 8]], 'Incorrect'\n\nassert     sort_matrix(M = [[2,2,3],\n                          [5,6,7],\n                          [8,10,9]]) == [[2, 2, 3],\n                                       [8, 10, 9],\n                                       [5, 6, 7]], 'Incorrect'\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_Volume(3,4,5)     == 60.0, \"incorrect\"\nassert     find_Volume(1,3,2)     == 6.0, \"incorrect\"\nprint(\"find_Volume() Successfully Passed!\")\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_Volume(10,10,10) == 100\nassert     find_Volume(4,4,4) == 64\nassert     find_Volume(7,5,4) == 200\nprint(\"Test passed!\")\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_Volume(3,4,5) == 60\nassert     find_Volume(6,5,2) == 120\n\nprint('find_Volume() == 60,  60 ==',find_Volume(3,4,5),'== 60')\nprint('find_Volume() == 120, 120 ==',find_Volume(6,5,2),'== 120')\nprint('All tests passed!')\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_Volume(2,3,4) == 48\nassert     find_Volume(3,4,5) == 60\nassert     find_Volume(4,5,6) == 60\nassert     find_Volume(5,6,7) == 60\nassert     find_Volume(6,7,8) == 60\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_Volume(2, 3, 2) == 12, \"Incorrect value\"\nassert     find_Volume(10, 2, 20) == 200, \"Incorrect value\"\nassert     find_Volume(10, 20, 10) == 200, \"Incorrect value\"\n\nprint(\"Passed the tests\")"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_Volume(3,4,5)     == 60, \"Wrong answer\"\nassert     find_Volume(3,4,6)     == 60, \"Wrong answer\"\nassert     find_Volume(3,4,7)     == 60, \"Wrong answer\"\nassert     find_Volume(3,4,8)     == 60, \"Wrong answer\"\nassert     find_Volume(3,4,9)     == 60, \"Wrong answer\"\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_Volume(3,4,2) == 7\nassert     find_Volume(2,5,4) == 10\nassert     find_Volume(6,10,15) == 30\nassert     find_Volume(7,10,15) == 42\n\nprint(\"find_Volume passed\")\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_Volume(1,1,1) == 1, \"Error\"\nassert     find_Volume(2,2,2) == 4, \"Error\"\nassert     find_Volume(3,2,2) == 6, \"Error\"\nprint(\"Congratulations! Your find_Volume() function passes the tests. \")\n\n\n\ndef find_Surface_Area(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (find_Volume(1,2,3) == 2)\nassert     (find_Volume(2,1,3) == 2)\nassert     (find_Volume(2,3,1) == 2)\nassert     (find_Volume(1,3,2) == 2)\nassert     (find_Volume(3,1,2) == 2)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_Volume(10, 20, 30) == 900, 'Test Failed'\nassert find_Volume(20, 20, 20) == 4000, 'Test Failed'\n\nprint(find_Volume(10, 20, 30))\nprint(find_Volume(20, 20, 20))\nprint('Test Passed')\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"hello_world\") == True\nassert     text_lowercase_underscore(\"hELlo_WoRld\") == True\nassert     text_lowercase_underscore(\"hELLo_WO_RlD\") == True\nassert     text_lowercase_underscore(\"hello_world_\") == False\nassert     text_lowercase_underscore(\"hello_world!!!\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore(\"alice\") == True, \"incorrect for alice\"\nassert     text_lowercase_underscore(\"A_lICE\") == True, \"incorrect for A_lICE\"\nassert     text_lowercase_underscore(\"1a2_c3\") == True, \"incorrect for 1a2_c3\"\nassert     text_lowercase_underscore(\"A_lIcE\") == True, \"incorrect for A_lIcE\"\nassert     text_lowercase_underscore(\"\") == True, \"incorrect for \"\" empty string\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('the_tail_is_wagging') == True\nassert     text_lowercase_underscore('the_Tail_is_wagging') == False\nassert     text_lowercase_underscore('The_tail_is_wagging') == False\n\ndef text_all_caps_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of all uppercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (text_lowercase_underscore('abc_def') == True), 'Wrong result for abc_def'\nassert     (text_lowercase_underscore('ABC_DEF') == True), 'Wrong result for ABC_DEF'\nassert     (text_lowercase_underscore('ABC_def') == False), 'Wrong result for ABC_def'\nassert     (text_lowercase_underscore('abc-def') == False), 'Wrong result for abc-def'\nassert     (text_lowercase_underscore('ABC-DEF') == False), 'Wrong result for ABC-DEF'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('')         == False,'should return False if no input string'\nassert     text_lowercase_underscore('lowercase')     == False,'should return False if there is no underscore'\nassert     text_lowercase_underscore('LOWERCASE')     == False,'should return False if there is no underscore'\nassert     text_lowercase_underscore('_lower_case_')     == True,'should return True if there is underscore'\nassert     text_lowercase_underscore('lower_case')     == True,'should return True if there is no underscore'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore(\"Hello_world\") == True\nassert     text_lowercase_underscore(\"HeLLO_world\") == True\nassert     text_lowercase_underscore(\"Hello_world_1234\") == True\nassert     text_lowercase_underscore(\"HELLO_WORLD\") == False\nassert     text_lowercase_underscore(\"HElLO_wORLd\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('a') == True, 'Wrong'\nassert     text_lowercase_underscore('A') == True, 'Wrong'\nassert     text_lowercase_underscore('AA') == True, 'Wrong'\nassert     text_lowercase_underscore('AB') == True, 'Wrong'\nassert     text_lowercase_underscore('_AB') == True, 'Wrong'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore(\"this_is_a_long_string\") == True, \"Incorrect output\"\nassert     text_lowercase_underscore(\"asdfg_hjkl\") == True, \"Incorrect output\"\nassert     text_lowercase_underscore(\"\") == False, \"Incorrect output\"\nassert     text_lowercase_underscore(\"_this_is_a_long_string_\") == True, \"Incorrect output\"\nassert     text_lowercase_underscore(\"this is a long string\") == False, \"Incorrect output\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('panda') == True, 'wrong answer for text_lowercase_underscore(\\'panda\\')'\nassert     text_lowercase_underscore('Panda') == True, 'wrong answer for text_lowercase_underscore(\\'Panda\\')'\nassert     text_lowercase_underscore('pANDA') == True, 'wrong answer for text_lowercase_underscore(\\'pANDA\\')'\nassert     text_lowercase_underscore('Panda_Ghandi') == True, 'wrong answer for text_lowercase_underscore(\\'Panda_Ghandi\\')'\nassert     text_lowercase_underscore('PANDA_GHANDI') == True, 'wrong answer for text_lowercase_underscore(\\'PANDA_GHANDI\\')'\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('A') == False\nassert     text_lowercase_underscore('a') == False\nassert     text_lowercase_underscore('aa_aa') == True\nassert     text_lowercase_underscore('aaa_a') == False\nassert     text_lowercase_underscore('a_a_a_a') == True\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(3.5) == 12\nassert     square_perimeter(3.8) == 12\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     square_perimeter(5) == 20, \"Wrong result for square perimeter\"\nassert     square_perimeter(6) == 20, \"Wrong result for square perimeter\"\nassert     square_perimeter(7) == 20, \"Wrong result for square perimeter\"\nassert     square_perimeter(8) == 20, \"Wrong result for square perimeter\"\nassert     square_perimeter(9) == 20, \"Wrong result for square perimeter\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     square_perimeter(5)         == 20, \"The value of a side should be 5\"\nassert     square_perimeter(9)         == 36, \"The value of a side should be 9\"\nassert     square_perimeter(1)         == 4, \"The value of a side should be 4\"\nassert     square_perimeter(-8)         == 16, \"The value of a side should be 16\"\nassert     square_perimeter(0)         == 0, \"The value of a side should be 0\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     square_perimeter(3) == 18\nassert     square_perimeter(5.5) == 36\nassert     square_perimeter(1) == 4\nassert     square_perimeter(0.5) == 4\nassert     square_perimeter(4) == 16\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     square_perimeter(1) == 4, 'Wrong result for square_perimeter(1)'\nassert     square_perimeter(3) == 20, 'Wrong result for square_perimeter(3)'\nassert     square_perimeter(8) == 64, 'Wrong result for square_perimeter(8)'\nassert     square_perimeter(15) == 80, 'Wrong result for square_perimeter(15)'\n\nprint('If you got this far, square_perimeter() is defined correctly')\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     square_perimeter(5) == 20\nassert     square_perimeter(10) == 40\n\ndef even_or_odd(n):\n    '''\n    Write a function that returns 'even' or 'odd' depending on which is the value of its argument.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2.4) == 12.4\nassert     square_perimeter(7.2) == 20.8\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     str_to_list('Hello World', 'h') == 'ello Wo'\nassert     str_to_list('Hello World', 'L') == 'ello Wor'\nassert     str_to_list('Hello World', 'l') == 'ello W'\nassert     str_to_list('Hello World', 'x') == 'Hello World'\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    \ndef str_to_list_conversion(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n\ndef longest_common_substring(string1, string2):\n    '''\n    Write a function to find the longest common substring between two strings.\n    '''\n    pass\n\ndef longest_common_substring_with_overlaps(string1, string2):\n    '''\n    Write a function to find the longest common substring between two strings.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     str_to_list('''Hello, This is a test string''','string') == 'Hello, This is a test'\nassert     str_to_list('''Hacking is cool''','so') == 'Hacking is cool'\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     str_to_list(\"abcdef\", \"ee\") == \"abcdef\",     \"Test Failed: str_to_list\"\nassert     str_to_list(\"abcdefg\", \"ee\") == \"abcdefg\",     \"Test Failed: str_to_list\"\nassert     str_to_list(\"eeeeeef\", \"ee\") == \"eeef\",     \"Test Failed: str_to_list\"\nassert     str_to_list(\"efg\", \"ee\") == \"efg\",     \"Test Failed: str_to_list\"\n\n\ndef str_to_list_str(str_1, str_2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     str_to_list(string=\"abcdef\", \n        string2=\"bcd\") == \"acef\"\nassert     str_to_list(string=\"abcdef\", \n        string2=\"abc\") == \"bdef\"\nassert     str_to_list(string=\"abcdef\", \n        string2=\"\") == \"abcdef\"\nassert     str_to_list(string=\"abcdef\", \n        string2=\"abc\") == \"def\"\nassert     str_to_list(string=\"abcdef\", \n        string2=\"c\") == \"abdef\"\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     str_to_list(\"pramod\") == [  ]\nassert     str_to_list(\"ramod\") == ['m']\nassert     str_to_list(\"anuj\") == ['n', 'u', 'j']\nassert     str_to_list(\"anuj k\") == ['n', 'u', 'j', 'k']\nassert     str_to_list(\"anuj klmnop\") == ['n', 'u', 'j', 'k', 'l','m', 'n', 'o', 'p']\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     str_to_list('thequickbrownfox', 'fox') == 'thequickbrn'\nassert str_to_list('thequickbrownfox', 'chicken') == 'thequickbrownfox'\nassert str_to_list('thequickbrownfox', '') == 'thequickbrownfox'\nassert str_to_list('', 'fox') == ''\nassert str_to_list('', 'chicken') == ''\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     \"abc\" == str_to_list(\"bcabc\")\nassert     \"abc\" == str_to_list(\"abcbc\")\nassert     \"abcbc\" == str_to_list(\"bcabcbc\")\nassert     \"abccbc\" == str_to_list(\"bcacbcbc\")\nassert     \"abc\" == str_to_list(\"bcabcbcac\")\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     str_to_list('thequickbrownfox', 'quick') == 'thebrownfox'\nassert     str_to_list('thequickbrownfox', 'python') == 'thequickbrownfox'\nassert     str_to_list('thequickbrownfox', 'fox') == 'thequickbrown'\nassert     str_to_list('thequickbrownfox', 'quickbrown') == 'the'\nassert     str_to_list('thequickbrownfox', 'the') == 'quickbrownfox'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     test_duplicate([0,1,3,4,5,6,0]) == True\nassert     test_duplicate([0,1,2,3,4,5,6]) == False\nassert     test_duplicate([0,1,2,3,4,5,6,0,7]) == True\nassert     test_duplicate([]) == False\nassert     test_duplicate([0,1,2,3,4,5,6,7,0]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     test_duplicate([1,2,3,4,5,6]) == False\nassert     test_duplicate([1,2,3,4,5,5]) == True\nassert     test_duplicate([1,2,3,4,5,6,2,4,6,7]) == True"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,2,3])==False\nassert     test_duplicate([1,2,3,1])==True\nassert     test_duplicate([1,1,1,3,3,4,3,2,4,2])==True\n\n\ndef test_sum_of_digits(arraynum):\n    '''\n    Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     test_duplicate(arraynums) == False, \"Wrong Answer\"\nassert     test_duplicate([1, 1, 2]) == True, \"Wrong Answer\"\nassert     test_duplicate([1, 2, 3]) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     test_duplicate([]) == False, \"WRONG\"\nassert     test_duplicate([2]) == False, \"WRONG\"\nassert     test_duplicate([1]) == False, \"WRONG\"\nassert     test_duplicate([1,2]) == False, \"WRONG\"\nassert     test_duplicate([1,2,1]) == True, \"WRONG\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     test_duplicate([1, 2, 3]) == False\nassert test_duplicate([1, 1, 2, 3]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     test_duplicate([1, 2, 3, 4]) == False\nassert     test_duplicate([1, 1, 2, 3]) == True\nassert     test_duplicate([0, 1, 2, 3]) == False\n\nprint('=====')\nprint('All test cases passed!')\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     test_duplicate([1,2,3,4,5,6,7]) == False\nassert     test_duplicate([1,2,3,4,5,6,7,1]) == True\nassert     test_duplicate([1,2,3,4,5,6,7,1,2,3]) == False\nassert     test_duplicate([1,2,3,4,5,6,7,1,2,3,4,5,6,7]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     test_duplicate([1,2,3,4,5,6,7,8,9]) == False\nassert     test_duplicate([1,2,3,4,5,6,7,8,9,1]) == True\nassert     test_duplicate([1,2,3,4,5,6,7,8,9,0]) == True\nassert     test_duplicate([1,2,3,4,5,6,7,8,9,0]) == True\nassert     test_duplicate([]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     test_duplicate([1,2,3,4,5]) == False, 'test failed'\nassert     test_duplicate([1,2,3,4,5,1]) == True, 'test failed'\nassert     test_duplicate([]) == False, 'test failed'\nassert     test_duplicate([1]) == False, 'test failed'\n\n\n'''\nQuestion 3: Remove the duplicate items from a sorted array\nWrite a function to remove the duplicated items from a sorted array of integers.\n'''\ndef remove_duplicates(arraynums):\n    '''\n    Write a function to remove the duplicated items from a sorted array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_woodall(1) \nassert     is_woodall(2) \nassert     is_woodall(3) \nassert     is_woodall(4) \nassert     not is_woodall(6) \n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_woodall(15) == True\nassert     is_woodall(21) == True\nassert     is_woodall(8) == False\nassert     is_woodall(7) == False\nassert     is_woodall(11) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_woodall(123) == False\nassert     is_woodall(0) == True\nassert     is_woodall(13) == False\nassert     is_woodall(101) == True\nassert     is_woodall(101010) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_woodall(1)     == True, \"Wrong output\" \nassert     is_woodall(3)     == False, \"Wrong output\" \nassert     is_woodall(0)     == False, \"Wrong output\" \nassert     is_woodall(12)     == False, \"Wrong output\" \nassert     is_woodall(9)     == True, \"Wrong output\" \n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_woodall(1) == True\nassert     is_woodall(2) == False\nassert     is_woodall(3) == True\nassert     is_woodall(5) == True\nassert     is_woodall(6) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_woodall(98) == False, \"Wrong output\"\nassert     is_woodall(24) == False, \"Wrong output\"\nassert     is_woodall(1) == False, \"Wrong output\"\nassert     is_woodall(24) == True, \"Wrong output\"\nassert     is_woodall(34) == True, \"Wrong output\"\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_woodall(1) == True \nassert     is_woodall(0) == False\nassert     is_woodall(5) == False\nassert     is_woodall(3) == False\nassert     is_woodall(6) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_woodall(1) == True\nassert     is_woodall(2) == False\nassert     is_woodall(6) == False\nassert     is_woodall(5) == False\nassert     is_woodall(7) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_woodall(21) == True\nassert     is_woodall(10) == False\nassert     is_woodall(26) == True\nassert     is_woodall(54) == False\nassert     is_woodall(20) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_woodall(21) == True, 'Error'\nassert     is_woodall(2) == False, 'Error'\nassert     is_woodall(1) == False, 'Error'\n\nprint('PASSED')"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef rev(num):    \n    '''\n    Write a python function to check if a given number is one more than twice its reverse.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     rev(1234) == 4321\nassert     rev(2345) == 4532\nassert     rev(4567) == 7654\nassert     rev(1234)!= 4322\nassert     rev(1234)!= 4321\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     rev(13) == True\nassert     rev(12) == False\nassert     rev(1322) == False\nassert     rev(1321) == True\nassert     rev(123) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef sum_two_numbers(number_1, number_2):\n    '''\n    Write a python function to check if two given numbers are equal to the sum of their reverse.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     rev(789) == 678 and rev(6) == 0\nassert     rev(9) == 9\nassert     rev(741) == 742\nassert     rev(1845) == 2222\nassert     rev(435) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     rev(5) == False\nassert     rev(8) == True\nassert     rev(9) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n\ndef div(n):\n    '''\n    Write a python function to check if a given number is a multiple of 2.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     rev(12) == 21\nassert not rev(12) == 22\nassert     rev(13) == 23\nassert     rev(16) == 30\nassert     rev(14) == 21\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     rev(76) == False\nassert     rev(57) == True\nassert     rev(97) == True\n\ndef is_palindrome(num):\n    '''\n    Write a Python program to check if a given number is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     rev(123) == 321\nassert     rev(456) == 2456\nassert     rev(1001) == 100100\nassert     rev(1221) == 21212\nassert     rev(1234) == 4321\nprint('All tests passed')"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5]) == 54321, \"Test failed\"\nassert     find_Max_Num([6, 5, 4, 3, 2, 1]) == 654321, \"Test failed\"\nassert     find_Max_Num([5, 9, 8, 2, 1]) == 98521, \"Test failed\"\nassert     find_Max_Num([1, 2, 3, 4, 5]) == 54321, \"Test failed\"\nassert     find_Max_Num([1, 3, 4, 5, 6, 2]) == 65321, \"Test failed\"\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5]) == \"54321\"\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8]) == \"897654321\"\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \"987654321\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_Max_Num([1,2,3,4,5]) == 55\nassert     find_Max_Num([9,9,9,9,9]) == 9\nassert     find_Max_Num([0,1,2,3,4,5]) == 0\nassert     find_Max_Num([7,7,7,7,7]) == 7\nassert     find_Max_Num([6,6,6,6,6]) == 6\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_Max_Num(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 987654321, \"Should be 987654321\"\nassert     find_Max_Num(arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 987654320, \"Should be 987654320\"\nassert     find_Max_Num(arr = [9, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 9876543210, \"Should be 9876543210\"\nassert     find_Max_Num(arr = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 999999999, \"Should be 999999999\"\nassert     find_Max_Num(arr = [0]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_Max_Num([1,9,7,3,7,1,8]) == 987\nassert     find_Max_Num([8,9,9,9,9,9,9,9,9,9]) == 9999"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (find_Max_Num([7, 7, 3, 1, 7]) == 77) \nassert     (find_Max_Num([9, 8, 3, 4, 5]) == 95) \nassert     (find_Max_Num([4, 6, 9, 3, 1]) == 96) \nassert     (find_Max_Num([6, 1, 9, 0, 2]) == 99) \nassert     (find_Max_Num([6, 1, 9, 0, 2, 3]) == 99) \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_Max_Num([2, 3, 4]) == 6\nassert     find_Max_Num([2, 3, 8]) == 8\nassert     find_Max_Num([4, 5, 6, 1, 2, 3]) == 6\nassert     find_Max_Num([1, 2, 3, 4, 5, 6]) == 6\nassert     find_Max_Num([2, 3, 6, 1, 4, 5, 8, 3]) == 8\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_Max_Num([9,9,9,9,9]) == 99999\nassert     find_Max_Num([9,9,9,9,9,9,9]) == 999999999\nassert     find_Max_Num([0,9,9,9,9]) == 999990\nassert     find_Max_Num([9,9,9,9,9,9,9,9,9]) == 9999999999\nassert     find_Max_Num([1,9,9,9,9,9,9,9,9]) == 99999999999\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_Max_Num([9, 2, 1, 5, 3, 6, 8, 4, 7]) == 9527\nassert     find_Max_Num([9, 2, 1, 5, 3, 6, 8, 4, 7, 8]) == 9988\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 99999\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 9, 2, 1, 5, 3, 6, 8, 4, 7]) == 9988\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 9, 2, 1, 5, 3, 6, 8, 4, 7, 8, 8]) == 9988\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_Max_Num([9, 9]) ==         99\nassert     find_Max_Num([9, 9, 9]) ==     999\nassert     find_Max_Num([9, 9, 9, 9]) ==    9999\nassert     find_Max_Num([9, 9, 9, 9, 9]) == 99999"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     opposite_Signs(-9,9) == True\nassert     opposite_Signs(-1,-1) == False\nassert     opposite_Signs(-10,9) == False\nassert     opposite_Signs(-10,1) == True\nassert     opposite_Signs(-9,-9) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     opposite_Signs(-1,-1) == True\nassert     opposite_Signs(-1,1) == False\nassert     opposite_Signs(-2,-2) == True\nassert     opposite_Signs(-2,2) == False\nassert     opposite_Signs(1,-1) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(-1,-1) == True\nassert     opposite_Signs(1,1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     opposite_Signs(10,20) == False, 'Error in defining the function.'\nassert     opposite_Signs(-10,20) == False, 'Error in defining the function.'\nassert     opposite_Signs(10,-20) == False, 'Error in defining the function.'\nassert     opposite_Signs(-10,-20) == True, 'Error in defining the function.'\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     opposite_Signs(10,-10) == False, \"error in the function\"\nassert     opposite_Signs(-10,10) == False, \"error in the function\"\nassert     opposite_Signs(10,10) == False, \"error in the function\"\nassert     opposite_Signs(-10,-10) == False, \"error in the function\"\nassert     opposite_Signs(0,10) == False, \"error in the function\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     opposite_Signs(1,1) == False, 'Failed the test for 1,1'\nassert     opposite_Signs(1,-1) == True, 'Failed the test for 1,-1'\nassert     opposite_Signs(-1,1) == True, 'Failed the test for -1,1'\nassert     opposite_Signs(-1,-1) == False, 'Failed the test for -1,-1'\n\nprint('Opposite_Signs is good to go!'"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     opposite_Signs(-2,3) == True, \"opposite_Signs(-2,3) should be True\"\nassert     opposite_Signs(3,2) == True, \"opposite_Signs(3,2) should be True\"\nassert     opposite_Signs(-5,-5) == False, \"opposite_Signs(-5,-5) should be False\"\nassert     opposite_Signs(3,-5) == False, \"opposite_Signs(3,-5) should be False\"\n\ndef positive_Negative_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (opposite_Signs(-5,-6) == True), \"opposite_Signs should be True\"\nassert     (opposite_Signs(-5,5) == False), \"opposite_Signs should be False\"\nassert     (opposite_Signs(5,-5) == True), \"opposite_Signs should be True\"\nassert     (opposite_Signs(5,5) == False), \"opposite_Signs should be False\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     opposite_Signs(-12, -12) == True, \"Double negative number return True\"\nassert     opposite_Signs(-12, 12) == True, \"Double positive number return True\"\nassert     opposite_Signs(12, -12) == True, \"Double positive number return True\"\nassert     opposite_Signs(-12, 12) == False, \"Double negative number return False\"\nassert     opposite_Signs(12, -12) == False, \"Double negative number return False\"\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     opposite_Signs(1,2) == False, \"wrong output\"\nassert     opposite_Signs(-1,2) == False, \"wrong output\"\nassert     opposite_Signs(1,-2) == True, \"wrong output\"\nassert     opposite_Signs(-1,2) == True, \"wrong output\"\nprint(\"opposite_Signs pass!\")\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 8\nassert     is_octagonal(5) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 6\nassert     is_octagonal(3) == 10\nassert     is_octagonal(4) == 15\nassert     is_octagonal(5) == 21\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_octagonal(8) == 36, \"is_octagonal(8) should be 36\"\nassert     is_octagonal(9) == 45, \"is_octagonal(9) should be 45\"\nassert     is_octagonal(12) == 60, \"is_octagonal(12) should be 60\"\nassert     is_octagonal(13) == 69, \"is_octagonal(13) should be 69\"\nassert     is_octagonal(14) == 78, \"is_octagonal(14) should be 78\"\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(8) == 44\nassert     is_octagonal(9) == 121\nassert     is_octagonal(10) == 144\nassert     is_octagonal(11) == 169\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(3) == 10\nassert     is_octagonal(8) == 81\nassert     is_octagonal(12) == 121\n\ndef is_palindromic(n):\n    '''\n    Write a function to find the nth palindromic number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_octagonal(1)     ==     1\nassert     is_octagonal(4)     ==     8\nassert     is_octagonal(7)     ==     49\nassert     is_octagonal(10)     ==     132\nassert     is_octagonal(14)     ==     494\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 4\nassert     is_octagonal(4) == 7\nassert     is_octagonal(5) == 9\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count_Substrings
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count_Substrings('1234') ==    4\nassert     count_Substrings('-1234') ==    4\nassert     count_Substrings('1234-567') ==    3\nassert     count_Substrings('1234*567') ==    0\nassert     count_Substrings('-1234-567') ==    3\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count_Substrings('123abc') == 6\nassert     count_Substrings('123abc345') == 10\nassert     count_Substrings('123abc34567') == 12\nassert     count_Substrings('123abc34567abc') == 16\nassert     count_Substrings('123abc34567abc') == 16\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count_Substrings(\"1123\") == 6, 'Error'\nassert     count_Substrings(\"101\") == 2, 'Error'\nassert     count_Substrings(\"101\") == 2, 'Error'\nassert     count_Substrings(\"1001\") == 4, 'Error'\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count_Substrings(\"1234\") == 0\nassert     count_Substrings(\"12345\") == 4\nassert     count_Substrings(\"11111\") == 5\nassert     count_Substrings(\"1112\") == 5\nassert     count_Substrings(\"1122334455\") == 26\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count_Substrings('101') == 1\nassert     count_Substrings('11111010') == 2\nassert     count_Substrings('11011110111111011111111111101') == 6\nassert     count_Substrings
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count_Substrings(\"aaa\") == 6\nassert     count_Substrings(\"aab\") == 4\nassert     count_Substrings(\"aaba\") == 6\nassert     count_Substrings(\"aabb\") == 4\n\ndef count_Substrings_with_set(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    This is a variation of the above problem with the usage of set.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nassert \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count_Substrings('12345') == 5, \"Testcase 1 Failed\"\nassert     count_Substrings('9999') == 1, \"Testcase 2 Failed\"\nassert     count_Substrings('999999999') == 9, \"Testcase 3 Failed\"\nassert     count_Substrings('1111') == 0, \"Testcase 4 Failed\"\nassert     count_Substrings('101010') == 2, \"Testcase 5 Failed\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     smallest_num([2, 5, 3, 1, -1]) == -1\nassert     smallest_num([2, 5, 3, 1, 0]) == 0\nassert     smallest_num([]) == None\nassert     smallest_num([2, -1]) == -1\n\ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     smallest_num([1,2,-4,6,8,0,12]) == -4\nassert     smallest_num([3,-1,-2,0,-4,12]) == -4\nassert     smallest_num([-5, -12, -3]) == -12\n\ndef sum_list(xs):\n    '''\n    Write a Python function to add all numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     smallest_num([3, 6, -1, 4, 0, 2]) == -1\nassert     smallest_num([3, -6, 1, 4, 0, 2]) == -6\nassert     smallest_num([1, 5, -1, 4, 0, 2]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     smallest_num([1, 2, 3]) == 1, 'incorrect output'\nassert     smallest_num([1, 2, 3, 4]) == 1, 'incorrect output'\nassert     smallest_num([3, 2, 1]) == 1, 'incorrect output'\nassert     smallest_num([2, 2, 1, 0]) == 0, 'incorrect output'\nassert     smallest_num([2]) == 2, 'incorrect output'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     smallest_num([3,4,5,1,2,3,4,5,7,2]) == 1\nassert     smallest_num([]) == None\nassert     smallest_num([3,4,5,1,2,3,4,5,7,2,3]) == 1\nassert     smallest_num([4,3,2,1,0]) == 0\nassert     smallest_num([4,3,2,1,0,3]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     smallest_num([34, 15, 88, 2]) == 2\nassert     smallest_num([34, -345, -1, 100]) == -345\nassert     smallest_num([0, -4, 4, -90]) == -4\nassert     smallest_num([7, 7, 7]) == 7\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     smallest_num([42, 17, 2, -3, 34]) == 2, 'incorrect'\nassert     smallest_num([]) == None, 'incorrect'\nassert     smallest_num([7, 9, 0, 2]) == 0, 'incorrect'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     smallest_num([34, 56, 27, 12, 78, 90]) == 12\nassert     smallest_num([12, 34, 56, 27, 78, 90]) == 12\nassert     smallest_num([78, 34, 56, 27, 12, 90]) == 12\nassert     smallest_num([34, 56, 27, 12, 78, 49]) == 12\nassert     smallest_num([12, 34, 56, 27, 78, 49]) == 12\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     smallest_num([3, 7, 5, 2, 1, 9]) == 1\nassert     smallest_num([0, 4, 5, -7]) == -7\nassert     smallest_num([-8, 4, 2, 7, -2, -6, -5]) == -8\nassert     smallest_num([0]) == 0\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     max_difference(((1, 2), (2, 3), (3, 4), (4, 6), (5, 7), (6, 8))) == 5\nassert     max_difference(((1, 2), (2, 3), (3, 4), (4, 6))) == 4\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     max_difference([(1, 2), (3, 4), (5, 6)]) == 4\nassert     max_difference([(1, 2), (2, 3), (3, 4)]) == 1\nassert     max_difference([(1, 2), (4, 6), (7, 8)]) == 7\n\ndef min_difference(test_list):\n    '''\n    Write a function to find the minimum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     max_difference([(4, 5), (9, 6), (1, 2), (3, 4), (6, 8), (7, 9), (0, 1)]) == 8\nassert     max_difference([(4, 5), (9, 6), (1, 2), (3, 4), (6, 8)]) == 7\nassert     max_difference([(4, 5), (1, 2), (3, 4), (6, 8), (7, 9), (0, 1)]) == 7\nassert     max_difference([(4, 5), (1, 2), (3, 4), (6, 8), (7, 9), (0, 1)]) == 7\nassert     max_difference([(4, 5), (1, 2), (3, 4), (6, 8), (7, 9), (0, 1)]) == 7\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     max_difference([(1, 2), (3, 4), (1, 2), (3, 4), (1, 2), (3, 4), (1, 2), (3, 4)]) == 6, 'incorrect max_difference'\nassert     max_difference([(1, 2), (3, 4), (2, 3), (4, 5), (1, 2), (3, 4), (2, 3), (4, 5)]) == 9, 'incorrect max_difference'\nassert     max_difference([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2), (3, 4), (2, 3), (4, 5)]) == 6, 'incorrect max_difference'\nprint('max_difference: all tests have passed')\n\nprint('max_difference: all tests have passed'"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     max_difference([(1, 2), (3, 4), (5, 6)]) == 4\nassert     max_difference([(1, 2), (3, 4), (5, 6), (9, 8)]) == 8\nassert     max_difference([(1, 2), (3, 4), (5, 6), (9, 8), (10, 12)]) == 12\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     max_difference([(10, 100), (6, 56), (30, 200), (40, 23), (0, 200)]) == 91, \\\n        'check your code'\nassert     max_difference([(10, 100), (6, 56), (30, 200)]) == 91, \\\n        'check your code'"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     max_difference([(0, 100), (4, 5), (7, 4), (9, 12), (10, 100), (2, 5), (0, 10)]) == 123\nassert     max_difference([(100, 0), (5, 5), (4, 5), (9, 12), (10, 100), (2, 5), (0, 10)]) == 99\nassert     max_difference([(4, 5), (7, 4), (9, 12), (10, 100), (2, 5), (0, 10)]) == 93\nassert     max_difference([(4, 100), (7, 4), (9, 12), (10, 100), (2, 5), (0, 10)]) == 122\nassert     max_difference([(100, 0), (5, 5), (4, 5), (9, 12), (10, 100), (2, 5), (0, 10), (100, 0)]) == 99\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_list(test_list):\n    '''\n    Write a function to reverse the elements in the list\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     subject_marks([(1, 82), (2, 73), (3, 73), (4, 65), (5, 57), (6, 82)]) == [(1, 82), (2, 73), (3, 73), (4, 65), (5, 57), (6, 82)], \"Wrong\"\nassert     subject_marks([(6, 82), (5, 73), (4, 65), (3, 73), (2, 57), (1, 82)]) == [(6, 82), (5, 73), (4, 65), (3, 73), (2, 57), (1, 82)], \"Wrong\"\nassert     subject_marks([(3, 98), (1, 95), (2, 94), (4, 96), (6, 92), (5, 87)]) == [(3, 98), (1, 95), (2, 94), (4, 96), (5, 87), (6, 92)], \"Wrong\"\nassert     subject_marks([(2, 96), (1, 94), (3, 94), (4, 95), (6, 94), (5, 96)]) == [(2, 96), (1, 94), (3, 94), (4, 95), (5, 96), (6, 94)], \"Wrong\"\nassert     subject_marks([(6, 90), (1, 92), (3, 97), (4, 93), (2, 90), (5, 94)]) == [(6, 90), (1, 92), (3, 97), (4, 93), (2, 90), (5, 94)], \"Wrong\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     subject_marks([('English', 89), ('Science', 90), ('Maths', 97), ('History', 75), ('French', 78), ('Science', 83)]) == [('English', 89), ('History', 75), ('Maths', 97), ('Science', 83), ('French', 78), ('Science', 90)]\nassert     subject_marks([('English', 89), ('History', 90), ('Science', 97), ('French', 75), ('Maths', 83), ('Science', 83)]) == [('History', 90), ('French', 75), ('Maths', 83), ('Science', 83), ('English', 89), ('Science', 97)]\n\n'''\nCreate a function called common_elements which accepts two lists and returns a new list containing only the elements \nthat are common between the lists (without duplicates). Make sure your function works on two lists of different sizes.\n'''\ndef common_elements(list1, list2):\n    '''\n    Write a function to return a new list containing only the elements that are common between the lists (without duplicates). \n    Make sure your function works on two lists of different sizes.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     subject_marks([(100,'maths'), (95, 'physics'), (90, 'chemistry'), (85, 'biology'), (70, 'english')]) == [(70, 'english'), (85, 'biology'), (95, 'physics'), (90, 'chemistry'), (100,'maths')], \"Subject Marks are incorrect\"\n\nprint(\"\u2705\u2705\u2705 Subject marks passed\")\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     subject_marks([('Tamil',68),('English',88),('Maths',98),('Science',78)]) == [('English',88),('Maths',98),('Science',78),('Tamil',68)]\n\nprint('Well done!')\nprint('(\u0e07\u02d9\u2207\u02d9)\u0e27 {Well done!}')\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    unittest.main(verbosity = 2)"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     subject_marks(marks) == [('English', 80), ('Science', 90), ('Maths', 100), ('History', 75), ('French', 68), ('Science', 88)]\n\nprint(\"Passed all the tests. Go ahead and submit your assignment.\""
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     subject_marks([(90, 94), (76, 77), (98, 76)]) == [(76, 77), (90, 94), (98, 76)]\nassert     subject_marks([(90, 94), (76, 77), (98, 76), (73, 71)]) == [(76, 77), (90, 94), (98, 76), (73, 71)]\n\ndef test_subject_marks():\n    '''\n    Some test cases to test the correctness of the subject_marks function.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     subject_marks([('English', 82), ('Science', 82), ('Maths', 82), ('Urdu', 82)]) == [('English', 82), ('Maths', 82), ('Science', 82), ('Urdu', 82)]\nassert     subject_marks([('English', 78), ('Science', 82), ('Maths', 84), ('Urdu', 82)]) == [('English', 78), ('Maths', 84), ('Science', 82), ('Urdu', 82)]\nassert     subject_marks([('English', 90), ('Science', 82), ('Maths', 96), ('Urdu', 82)]) == [('Maths', 96), ('English', 90), ('Urdu', 82), ('Science', 82)]\nassert     subject_marks([('English', 82), ('Science', 82), ('Maths', 82), ('Urdu', 82)]) == [('Maths', 82), ('English', 82), ('Urdu', 82), ('Science', 82)]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     subject_marks([(90, 90), (100, 80), (92, 90), (85, 90)]) ==     [(100, 80), (90, 90), (85, 90), (92, 90)]\nassert     subject_marks([(90, 92), (100, 80), (92, 90), (85, 90)]) ==     [(100, 80), (90, 92), (85, 90), (92, 90)]\nassert     subject_marks([(90, 90), (100, 80), (92, 90), (85, 90), (80, 92)]) ==    [(100, 80), (90, 90), (85, 90), (80, 92), (92, 90)]\n\nprint('OK'"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1, 2, 3, [4, 5, 6]]) == 21, 'Check the example'\nassert recursive_list_sum([]) == 0, 'Check the empty list'\nassert recursive_list_sum([1, [2, 3, [4, 5, 6], 7]]) == 21, 'Check the list with multiple layers of nesting'\nassert recursive_list_sum([1, 2, 3, [4, [5, 6, 7], 8], 9]) == 36, 'Check the list with multiple layers of nesting'\n\ndef recursive_list_sum_test_helper(data_list, expected_result):\n    if data_list == None:\n        print('None input is passed.')\n    else:\n        sum = recursive_list_sum(data_list)\n        "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([[1,2], [3], [4,5,6]]) == 21, \"Check the data type of return value\"\nassert     recursive_list_sum([[1,2], [[3,4]], [5], [[6,7]]]) == 21, \"Check the data type of return value\"\nassert     recursive_list_sum([[1,2], [3], [4,5,6]]) == 21, \"Check the data type of return value\"\nassert     recursive_list_sum([[1,2], [[3,4]], [5], [[6,7]]]) == 21, \"Check the data type of return value\"\nprint('recursive_list_sum is correct')\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert _____, _____\nassert _____, _____\nassert _____, _____\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n    assert recursive_list_sum([1, 2, 3]) == 6, \"input [1, 2, 3] should return 6\"\nassert \n    assert recursive_list_sum([1, [2, 3], 4]) == 10, \"input [1, [2, 3], 4] should return 10\"\nassert \n    "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([1, [2, 2, 2], 4]) == 10\nassert     recursive_list_sum([1, [2, [3, 4]]]) == 10\nassert     recursive_list_sum([1, 2, [3], [4, [5, 6]]]) == 21\n\nprint('SUCCESS!')"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([[1], [2, [3]], [4, [5]]]) == 1 + 2 + 3 + 4 + 5\nassert     recursive_list_sum([1, [2], [3, [4], [5, 6]]]) == 1 + 2 + 3 + 4 + 5 + 6\nassert     recursive_list_sum([1, [2, [3], 4, [5, 6]]]) == 1 + 2 + 3 + 4 + 5 + 6\nassert     recursive_list_sum([[[1], 2, 3], 4, 5]) == 1 + 2 + 3 + 4 + 5\n\ndef recursive_list_sum_1(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     pos_count([1, 3, -4, 7, 8, 9, 0]) == 5\nassert     pos_count([1, 3, -4, 7, 8, 9, -1]) == 6\nassert     pos_count([1, 3, -4, -5, 8, 9, -1]) == 4\nassert     pos_count([1, 3, -4, -5, 8, 9, -1, 2]) == 6\nassert     pos_count([1, 3, -4, -5, 8, 9, -1, 2, 2]) == 7\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     pos_count([1, -4, -7, 8, -2, 0, -1]) == 4\nassert     pos_count([]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     pos_count([]) == 0, 'Empty list!'\nassert     pos_count([1, 2, 3, 4, 5]) == 4, 'List with positive numbers!'\nassert     pos_count([-1, -2, -3, -4, -5]) == 0, 'List with negative numbers!'\nassert     pos_count([-5, -4, -3, -2, -1, 0]) == 5, 'List with negative and positive numbers!'\n\n\ndef pos_count_2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     pos_count([1, 1, -3, 4, 0, -7, 2, 3]) == 4\nassert     pos_count([1, 1, -3, 4, 0, -7, 2, 3, 3]) == 5\nassert     pos_count([1, 1, -3, 4, 0, -7, 2, 3, 3, -3]) == 6"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     pos_count([2, -1, -2, 3]) == 2\nassert pos_count([-3, -2, 1, -2]) == 2\nassert pos_count([1, 2, 3, -3]) == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     pos_count([]) == 0, \"pos_count([])\"\nassert     pos_count([0, 1, 2, 3]) == 4, \"pos_count([0, 1, 2, 3])\"\nassert     pos_count([0, -1, -2, -3]) == 0, \"pos_count([0, -1, -2, -3])\"\nassert     pos_count([1, 2, 3, 4]) == 4, \"pos_count([1, 2, 3, 4])\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     pos_count([2, 3, -4, -5, 7, -2, -8, -3, 9, 10, 1, -7, -6, -9]) == 5\nassert     pos_count([-1, -2, -3, -4, -5, -6]) == 0\nassert     pos_count([]) == 0\n\ndef pos_sum(list):\n    '''\n    Write a python function to compute the sum of the positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     pos_count([-1, -2, 3, 4, 5]) == 3, \"Not Correct\"\nassert     pos_count([1, -2, 3, 4, 5]) == 4, \"Not Correct\"\nassert     pos_count([-1, -2, 3, -4, 5]) == 2, \"Not Correct\"\nassert     pos_count([0, -2, 3, -4, 5]) == 5, \"Not Correct\"\nassert     pos_count([0]) == 1, \"Not Correct\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, 15]) == 5\nassert     pos_count([1, 2, 3, 4, 5, 6, -7, 8, 9, 10, -11, -12, -13, -14, 15]) == 6\nassert     pos_count([1, 2, 3, 4, 5, 6, -7, -8, 9, 10, -11, -12, -13, -14, 15]) == 5\nassert     pos_count([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == 5\nassert     pos_count([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]) == 6\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef pos_count_2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     bell_number(1) == bell_number(2) == bell_number(3) == 1\nassert     bell_number(4) == bell_number(5) == bell_number(6) == 3\nassert     bell_number(7) == bell_number(8) == bell_number(9) == 6\nassert     bell_number(10) == bell_number(11) == bell_number(12) == 21\nassert     bell_number(13) == bell_number(14) == bell_number(15) == 105\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     bell_number(5) == bell_number(4) + bell_number(3)\nassert     bell_number(10) == bell_number(9) + bell_number(8)\nassert     bell_number(20) == bell_number(19) + bell_number(18)\nassert     bell_number(100) == bell_number(99) + bell_number(98)\nassert     bell_number(100) == bell_number(99) + bell_number(98)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef p_subset(k, s):\n    '''\n    Write a function that finds the number of ways to partition a set S of size K using \n    the given partition of S. \n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 2\nassert     bell_number(4) == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     bell_number(3) == 5\nassert     bell_number(2) == 7\nassert     bell_number(1) == 1\n\n\ndef generate_bell_sequence(n):\n    '''\n    Write a function to generate the Bell sequence.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (bell_number(0) == 1), \"error in bell_number(0)\"\nassert     (bell_number(1) == 1), \"error in bell_number(1)\"\nassert     (bell_number(2) == 2), \"error in bell_number(2)\"\nassert     (bell_number(3) == 5), \"error in bell_number(3)\"\nassert     (bell_number(4) == 14), \"error in bell_number(4)\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_Monotonic([0, 1, 2, 3, 4, 5]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5, 6]) == True\nassert     is_Monotonic([0, 1, 2, 5, 4, 3]) == True\nassert     is_Monotonic([0, 0, 0, 0, 0]) == True\nassert     is_Monotonic([0, 1, 2, 3, 4, 5, 7]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_Monotonic([1, 2, 3, 4, 5, 6]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 7]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_Monotonic([-1, -5, -10]) == False, 'incorrect'\nassert     is_Monotonic([-1, -5, -5]) == True, 'incorrect'\nassert     is_Monotonic([-5, -5, -5]) == True, 'incorrect'\nassert     is_Monotonic([1, 2, 3]) == True, 'incorrect'\nassert     is_Monotonic([1, 2, 3, 3]) == False, 'incorrect'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_Monotonic([1, 2, 3, 4]) == True\nassert     is_Monotonic([1, 2, 4, 5]) == True\nassert     is_Monotonic([5, 4, 3, 2]) == True\nassert     is_Monotonic([1, 1, 1, 1]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_Monotonic([1,2,3,4,5]) == True\nassert     is_Monotonic([1,2,1,2,1]) == False\nassert     is_Monotonic([1,1,2,2,3]) == True\nassert     is_Monotonic([1,1,2,2,3,4,5]) == True\nassert     is_Monotonic([1,2,3,4,5,6,2,1,2,3,4]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True, \"Check is_Monotonic()\"\nassert     is_Monotonic([-1, -5, -9, -1100, -1100, -1100, -1102, -9001]) == False, \"Check is_Monotonic()\"\nassert     is_Monotonic([-1, -5, -5, -1100, -1100, -1100, -1102, -9001]) == True, \"Check is_Monotonic()\"\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (is_Monotonic([-1, -5, -10]) == True), 'incorrect'\nassert     (is_Monotonic([-1, -5, -10, -10]) == True), 'incorrect'\nassert     (is_Monotonic([-1, -5, -10, -10, -10]) == True), 'incorrect'\nassert     (is_Monotonic([-1, -5, -10, -10, -10, -10]) == True), 'incorrect'\nassert     (is_Monotonic([1, 5, 10]) == True), 'incorrect'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == False\nassert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == False\nassert     is_Monotonic([1, 5, 10, 1100, 1100, 1101, 1102, 9001]) == True\nassert     is_Monotonic([1, 5, 10, 10, 1101, 1102, 9001]) == True\nassert     is_Monotonic([1, 5, 10, 10, 1101, 1102, 9001]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_Monotonic([1, 2, 2, 3]) == True\nassert     is_Monotonic([6, 5, 4, 4]) == True\nassert     is_Monotonic([1, 3, 2]) == False\nassert     is_Monotonic([1, 2, 4, 5]) == True\nassert     is_Monotonic([1, 1, 1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_Monotonic([-1, -5, -10]) == True, \"check failed\"\nassert     is_Monotonic([-1, -5, -10, -10]) == True, \"check failed\"\nassert     is_Monotonic([1, 5, 10]) == True, \"check failed\"\nassert     is_Monotonic([1, 5, 10, 10]) == True, \"check failed\"\nassert     is_Monotonic([5, 1, 10]) == True, \"check failed\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == True\nassert     is_sublist([1, 2, 3], [1]) == True\nassert     is_sublist([1, 2, 3], [2, 3]) == True\nassert     is_sublist([1, 2, 3], [2]) == False\nassert     is_sublist([1, 2, 3], [2, 3, 4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4, 5]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4, 5, 6]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4, 5, 6, 7]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 4]) == False\nassert     is_sublist([1, 2, 3], [1, 3, 4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4], [3, 2, 1]) == False\nassert     is_sublist([1, 2, 3, 4], [3, 2, 1, 4]) == True\nassert     is_sublist([1, 2, 3, 4], [1, 2]) == True\nassert     is_sublist([1, 2, 3, 4], [1, 4, 2, 3]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_sublist(['a', 'b', 'c'], ['a', 'b']) == True\nassert     is_sublist(['a', 'b', 'c'], ['a', 'b', 'd']) == False\nassert     is_sublist(['a', 'b', 'c'], ['a']) == True\nassert     is_sublist(['a', 'b', 'c'], ['a', 'b', 'c']) == True\nassert     is_sublist(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_sublist([1, 2, 3, 2, 3], [2, 3]) == True\nassert     is_sublist([1, 2, 3, 2, 3], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 2, 3], [1, 2, 3, 4, 5]) == True\nassert     is_sublist([1, 2, 3, 2, 3], [1, 2, 3, 4]) == False\nassert     is_sublist([1, 2, 3, 2, 3], [2, 3, 4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 4]) == False\nassert     is_sublist([1, 2, 3], [1]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_sublist(['a', 'b', 'c', 'd'], ['a', 'b']) == True\nassert     is_sublist(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']) == True\nassert     is_sublist(['a', 'b', 'c', 'd'], ['a', 'b', 'e', 'd']) == False\nassert     is_sublist(['a', 'b', 'c', 'd'], ['a', 'e']) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef is_sublist(l, s):\n    # the method should return whether s is a sublist of l\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_sublist([1, 2, 3], [2, 3])\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4])\nassert     not is_sublist([1, 2, 3], [2, 3, 4])\n\ndef has_sublist(l, s):\n    '''\n    Write a function to check whether a list has a given sublist or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1,2,3),(4,5),(6,7,8),(1,2,3,4,5),(6,7,8,9,10),(1,2),(3,4,5,6,7,8)]) == True\nassert     find_equal_tuple([(1,2,3),(4,5),(6,7,8),(1,2,3,4,5),(6,7,8,9,10)]) == False\nassert     find_equal_tuple([(1,2,3),(4,5),(6,7,8,9,10)]) == False\nassert     find_equal_tuple([(1,2,3),(4,5)]) == False\nassert     find_equal_tuple([(1,2,3),(4,5,6,7,8,9,10)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     find_equal_tuple([]), 'Error in find_equal_tuple for []'\nassert     find_equal_tuple([()]), 'Error in find_equal_tuple for []'\nassert     not find_equal_tuple([(1,2,3), (2,3,4), (2,3,5)]), 'Error in find_equal_tuple for []'\nassert     find_equal_tuple([(1,2,3), (2,3,4), (2,3,5), (3,4,5)]), 'Error in find_equal_tuple for []'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_equal_tuple(()) == True, \"Empty tuple\"\nassert     find_equal_tuple((1,)) == True, \"One element tuple\"\nassert     find_equal_tuple((1, 2)) == True, \"Two element tuple\"\nassert     find_equal_tuple((1, 2, 3)) == True, \"Three element tuple\"\nassert     find_equal_tuple((1, 2, 3, 4)) == True, \"Four element tuple\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(2,3),(2,3),(2,3)]) == True\nassert     find_equal_tuple([(2,3,4),(2,3),(2,3,4,5)]) == True\nassert     find_equal_tuple([(2,3,4,5),(2,3,4),(2,3)]) == False\nassert     find_equal_tuple([(2,3,4),(2,3),(2,3,4)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_equal_tuple(('abc', 'def', 'ghi'),\n                          ('abc', 'def', 'ghi'),\n                          ('abc', 'def', 'ghi')) == True, 'incorrect'\nassert     find_equal_tuple(('abc', 'def', 'ghi'),\n                          ('abc', 'def'),\n                          ('abc', 'def', 'ghi')) == False, 'incorrect'\nassert     find_equal_tuple(('abc', 'def', 'ghi'),\n                          ('abc', 'def', 'ghi', 'xxx')) == True, 'incorrect'\nassert     find_equal_tuple(('abc', 'def', 'ghi'),\n                          ('abc', 'def', 'xxx'),\n                          ('abc', 'def', 'ghi')) == False, 'incorrect'\n\ndef find_equal_list(Input):\n    '''\n    Write a function to find whether all the given lists have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(2,3,4), (2,3),(4,5,6),(3,4,5,6)]),\n        \"Should be True\"\nassert     find_equal_tuple([(2,3,4), (2,3),(4,5,6),(3,4,5,6), (1,2,3,4)]) == False,\n        \"Should be False\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_equal_tuple(('abc',)) == False, \"Wrong output for ('abc',) : \" + str(find_equal_tuple(('abc',)))\nassert     find_equal_tuple(('abc', 'def', 'ghi')) == False, \"Wrong output for ('abc', 'def', 'ghi') : \" + str(find_equal_tuple(('abc', 'def', 'ghi')))\nassert     find_equal_tuple(('abc', 'def', 'ghi', 'jkl')) == False, \"Wrong output for ('abc', 'def', 'ghi', 'jkl') : \" + str(find_equal_tuple(('abc', 'def', 'ghi', 'jkl')))\nassert     find_equal_tuple(('abc', 'def', 'ghi', 'jkl','mno')) == False, \"Wrong output for ('abc', 'def', 'ghi', 'jkl','mno') : \" + str(find_equal_tuple(('abc', 'def', 'ghi', 'jkl','mno')))\nassert     find_equal_tuple(('abc', 'def', 'ghi', 'jkl','mno', 'pqr')) == False, \"Wrong output for ('abc', 'def', 'ghi', 'jkl','mno', 'pqr') : \" + str(find_equal_tuple(('abc', 'def', 'ghi', 'jkl','mno', 'pqr')))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1, 2, 3, 4), (5, 6, 7, 8)]) == True\nassert     find_equal_tuple([(1, 2, 3), (5, 6, 7, 8)]) == False\nassert     find_equal_tuple([(1, 2, 3, 4), (1, 2, 3, 4)]) == True\nassert     find_equal_tuple([(1, 2, 3, 4), (1, 2, 3)]) == False\nassert     find_equal_tuple([(1, 2, 3), (1, 2)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([('a',), ('b', 'c')]) is True, \"Wrong output!\"\nassert     find_equal_tuple([('a',), ('b', 'c', 'd')]) is False, \"Wrong output!\"\nassert     find_equal_tuple([('a',), ('b', 'c', 'd', 'e')]) is True, \"Wrong output!\"\n\ndef add_1(Input):\n    '''\n    Write a function to add one to each element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     comb_sort([5,8,4,3,9])     ==    [3, 4, 5, 8, 9]\nassert     comb_sort([])                 ==    []\nassert     comb_sort([2,1])             ==    [1, 2]\nassert     comb_sort([1,2,3,4,5,6,7,8,9])     ==    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n'''\nOptimal Merge Sort (Bottom-up)\n'''\ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2]) == [2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     comb_sort([8, 5, 2, 9, 5, 6, 3]) == [2, 3, 5, 5, 6, 8, 9]\nassert     comb_sort([5, 2, 1, 2, 4, 5, 9, 8, 7]) == [1, 2, 2, 4, 5, 5, 7, 8, 9]\nassert     comb_sort([8, 9, 1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     ([1, 5, 3, 4, 2] == comb_sort([5, 4, 3, 2, 1]))\nassert     ([1, 5, 3, 4, 2] == comb_sort([1, 5, 3, 2, 4]))\nassert     ([1, 5, 3, 4, 2] == comb_sort([4, 2, 1, 3, 5]))\nassert     ([1, 5, 3, 4, 2] == comb_sort([2, 1, 4, 5, 3]))\nassert     ([1, 5, 3, 4, 2] == comb_sort([1, 3, 2, 4, 5]))\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\nimport unittest\nclass TestCombSort(unittest.TestCase):\n    def test_comb_sort(self):\n        self.assertEqual(comb_sort([3, 2, 4, 1]), [1, 2, 3, 4])\n        self.assertEqual(comb_sort([2, 1, 4, 3, 6, 5, 7]), [1, 2, 3, 4, 5, 6, 7])\n        self.assertEqual(comb_sort([1, 2, 3, 4, 5, 7, 6, 5, 4, 3, 2, 1]), [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7])\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     dif_Square(15)         == False     \nassert     dif_Square(12)         == True \nassert     dif_Square(25)         == False \nassert     dif_Square(121)     == False \nassert     dif_Square(36)         == True \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     dif_Square(40) == True\nassert     dif_Square(17) == True\nassert     dif_Square(49) == True\nassert     dif_Square(15) == True\nassert     dif_Square(61) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     dif_Square(11) == True, \"S1 can be written as D1 - S2 where D1 and S1 is the difference of squares of 2 numbers.\"\nassert     dif_Square(9) == False, \"S1 can be written as D1 - S2 where D1 and S1 is the difference of squares of 2 numbers.\"\nassert     dif_Square(25) == True, \"S1 can be written as D1 - S2 where D1 and S1 is the difference of squares of 2 numbers.\"\nassert     dif_Square(20) == True, \"S1 can be written as D1 - S2 where D1 and S1 is the difference of squares of 2 numbers.\"\nassert     dif_Square(6) == True, \"S1 can be written as D1 - S2 where D1 and S1 is the difference of squares of 2 numbers.\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     dif_Square(1) == False\nassert     dif_Square(2) == True\nassert     dif_Square(9) == False\nassert     dif_Square(8) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     dif_Square(13) == True\nassert     dif_Square(12) == False\nassert     dif_Square(27) == True\nassert     dif_Square(24) == False\nassert     dif_Square(34) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     dif_Square(25) == True\nassert     dif_Square(26) == False\nassert     dif_Square(123456789) == True\nassert     dif_Square(1) == False\nassert     dif_Square(0) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     dif_Square(9) == True\nassert     dif_Square(45) == True\nassert     dif_Square(25) == False\nassert     dif_Square(0) == False\n\nprint('Passed all tests...'"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     dif_Square(1) == True\nassert     dif_Square(5) == True\nassert     dif_Square(10) == True\nassert     dif_Square(100) == True\nassert     dif_Square(15) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef dif_Square(n):\n    sqrts = [i**2 for i in range(1, n+1) if i**2 <= n]\n    for i in sqrts:\n        if n - i in sqrts:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     dif_Square(4) == True, 'False'\nassert     dif_Square(5) == False, 'False'\nassert     dif_Square(27) == True, 'False'\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_samepatterns(['red','yellow'],['+','+']) == False, \"incorrect\"\nassert     is_samepatterns(['red','yellow'],['+','++']) == True, \"incorrect\"\nassert     is_samepatterns(['red','yellow'],['+','**']) == True, \"incorrect\"\nassert     is_samepatterns(['red','yellow'],['**','-','+']) == True, \"incorrect\"\nassert     is_samepatterns(['red','yellow'],['+','*']) == True, \"incorrect\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_samepatterns([    'R', 'G', 'G', 'B', 'R', 'G', 'G', 'B'], ['R', 'G', 'G', 'B', 'R', 'G', 'G', 'B']) == True\nassert     is_samepatterns([    'R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B'], ['R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B']) == False\nassert     is_samepatterns([    'R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B'], ['R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B']) == True\nassert     is_samepatterns([    'R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B'], ['R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B']) == True\nassert     is_samepatterns([    'R', 'G', 'G', 'B', 'R', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B'], ['R', 'G', 'G', 'B', 'R', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B', 'R', 'G', 'G', 'G', 'B']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_samepatterns(['red','red', 'yellow', 'green', 'blue', 'blue'], ['R', 'G', 'G', 'B', 'R', 'B']) == True\nassert     is_samepatterns(['red','red', 'yellow', 'green', 'blue', 'blue'], ['R', 'B', 'G', 'G', 'R', 'B']) == False\nassert     is_samepatterns(['red','red', 'yellow', 'green', 'blue', 'blue'], ['R', 'B', 'B', 'G', 'R', 'B']) == False\nassert     is_samepatterns(['red','red', 'yellow', 'green', 'blue', 'blue'], ['R', 'R', 'B', 'G', 'G', 'R']) == False\nassert     is_samepatterns(['red','red', 'yellow', 'green', 'blue', 'blue'], ['R', 'R', 'G', 'G', 'R', 'R']) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_samepatterns(['Black','White','Black','White'], [1, 1, 2, 2])\nassert not     is_samepatterns(['Black','White','Black','Black'], [1, 1, 2, 2])\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['red', 'green', 'blue'], ['odd', 'even', 'odd']) == False, \"ERROR!\"\nassert     is_samepatterns(['red', 'green', 'blue'], ['odd', 'even', 'even']) == True, \"ERROR!\"\nassert     is_samepatterns(['red', 'green', 'blue'], ['even', 'odd', 'even']) == True, \"ERROR!\"\nassert     is_samepatterns(['red', 'green', 'blue'], ['odd', 'even', 'odd']) == False, \"ERROR!\"\nassert     is_samepatterns(['red', 'green', 'blue'], ['odd', 'even', 'even']) == False, \"ERROR!\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_samepatterns([\"red\", \"green\", \"blue\", \"green\", \"blue\", \"red\"],\n            [\"red\", \"green\", \"blue\", \"green\", \"blue\", \"red\"]) == True, \"Wrong result\"\nassert     is_samepatterns([\"red\", \"green\", \"blue\", \"green\", \"blue\", \"red\"],\n            [\"red\", \"blue\", \"green\", \"blue\", \"green\", \"red\"]) == False, \"Wrong result\"\nassert     is_samepatterns([\"red\", \"red\", \"green\", \"green\", \"blue\", \"blue\"],\n            [\"red\", \"blue\", \"green\", \"blue\", \"green\", \"red\"]) == False, \"Wrong result\"\nassert     is_samepatterns([\"red\", \"green\", \"blue\", \"green\", \"blue\", \"red\"],\n            [\"green\", \"red\", \"blue\", \"blue\", \"green\", \"red\"]) == False, \"Wrong result\"\nassert     is_samepatterns([\"red\", \"green\", \"blue\", \"green\", \"blue\", \"red\"],\n            [\"red\", \"green\", \"blue\", \"green\", \"blue\", \"red\", \"red\", \"green\", \"blue\", \"red\"]) == True, \"Wrong result\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_samepatterns([    'R','G','G','B','R','B','R','G','B','R','G','G','G'],    ['R',    'B',    'R',    'G',    'B',    'R',    'G',    'G',    'R',    'B',    'G',    'G',    'R']) == True, \"Error\"\nassert     is_samepatterns([    'R','G','G','B','R','B','R','G','B','R','G','G','G'],    ['R',    'B',    'R',    'G',    'B',    'G',    'R',    'G',    'G',    'R',    'B',    'R',    'R',    'B',    'R',    'R',    'G',    'R',    'G',    'G',    'G',    'G',    'B',    'R',    'B',    'R',    'G',    'B',    'G',    'G',    'G',    'B',    'R',    'B',    'G',    'G',    'G',    'R']) == False, \"Error\"\nassert     is_samepatterns([    'R','G','G','G','R','B','R','G','B','R','G','G','G'],    ['R',    'B',    'R',    'G',    'B',    'G',    'R',    'G',    'G',    'R',    'B',    'G',    'G',    'R']) == False, \"Error\"\nassert     is_samepatterns([    'R','G','G','G','B','B','B','G','B','B','G','G','G'],    ['R',    'B',    'R',    'G',    'B',    'G',    'R',    'G',    'G',    'R',    'B',    'G',    'G',    'R']) == True, \"Error\"\nassert     is_samepatterns([    'R','G','G','G','B','B','B','G','B','B','G','G','G'],    ['R',    'B',    'R',    'G',    'B',    'G',    'R',    'G',    'G',    'R',    'B',    'G',    'G',    'R']) == True, \"Error\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_samepatterns(['r','g','b'], ['1', '2', '3']) == True, \"Test 1 failed\"\nassert     is_samepatterns(['r', 'r', 'g'], ['1', '2', '3']) == False, \"Test 2 failed\"\nassert     is_samepatterns(['r', 'g', 'r'], ['1', '2', '3']) == False, \"Test 3 failed\"\nassert     is_samepatterns(['r', 'g', 'g'], ['1', '2', '3']) == False, \"Test 4 failed\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_samepatterns(['red', 'white'], ['red', 'white']) == True\nassert     is_samepatterns(['red', 'white'], ['red', 'blue']) == False\nassert     is_samepatterns(['white', 'white', 'white'], ['white', 'white', 'white']) == True\nassert     is_samepatterns(['white', 'white', 'white'], ['white', 'white', 'blue']) == False\nassert     is_samepatterns(['red', 'blue', 'white'], ['red', 'blue', 'white']) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_samepatterns([1, 3, 2, 4, 5, 2], [1, 2, 3, 2, 3, 2])\nassert     not is_samepatterns([1, 3, 2, 4, 5, 2], [1, 2, 3, 2, 3, 1])\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_tuples([(3, 4, 5), (6, 7, 8)], 3) == [(3, 4, 5), (6, 7, 8)]\nassert     find_tuples([(3, 4, 5), (6, 7, 8)], 2) == []\nassert     find_tuples([(3, 4, 5), (3, 5, 6), (6, 7, 8)], 3) == [(3, 4, 5), (6, 7, 8)]\nassert     find_tuples([(3, 4, 5), (3, 5, 6), (6, 7, 8)], 4) == [(3, 5, 6), (6, 7, 8)]\nassert     find_tuples([(3, 4, 5), (3, 5, 6), (6, 7, 8)], 5) == [(3, 5, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\n\ndef find_tuples2(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     find_tuples([(1, 3, 6), (4, 6, 8), (5, 7, 10)], 1) == [(1, 3, 6)]\nassert     find_tuples([(1, 3, 6), (4, 6, 8), (5, 7, 10)], 2) == [(1, 3, 6), (4, 6, 8), (5, 7, 10)]\nassert     find_tuples([(1, 3, 6), (4, 6, 8), (5, 7, 10)], 3) == [(1, 3, 6), (4, 6, 8), (5, 7, 10)]\nassert     find_tuples([(1, 3, 6), (4, 6, 8), (5, 7, 10)], 4) == []\nassert     find_tuples([(1, 3, 6), (4, 6, 8), (5, 7, 10)], 5) == [(1, 3, 6), (4, 6, 8), (5, 7, 10)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_tuples([(1,2),(2,3),(3,4)], 3) == [(3,4)]\nassert     find_tuples([(1,2),(2,3),(3,4),(4,5),(5,6)], 3) == [(3,4),(4,5),(5,6)]\nassert     find_tuples([(1,2),(2,3),(3,4)], 2) == [(2,3)]\nassert     find_tuples([(1,2),(2,3),(3,4)], 1) == [(1,2)]\nassert     find_tuples([(1,2),(2,3),(3,4),(4,5)], 3) == [(3,4)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     find_tuples([(1,2,3),(3,2,1),(10,12,13),(2,3,4)], \n                    2) == [ (1,2,3), (3,2,1) ]\nassert     find_tuples([(1,2,3),(3,2,1),(10,12,13),(2,3,4),(5,6,7),(8,9,10)], \n                    2) == [ (1,2,3), (3,2,1), (10,12,13), (2,3,4) ]\nassert     find_tuples([(1,2,3),(3,2,1),(10,12,13),(2,3,4)], \n                    4) == [ (1,2,3), (3,2,1), (10,12,13) ]\nassert     find_tuples([(1,2,3),(3,2,1),(10,12,13),(2,3,4)], \n                    8) == [ (1,2,3), (3,2,1), (10,12,13) ]\nassert     find_tuples([(1,2,3),(3,2,1),(10,12,13),(2,3,4)], \n                    12) == [ ]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     find_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)], 2) == [(1, 2, 3), (1, 6, 7)]\nassert     find_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)], 1) == [(1, 2, 3), (1, 4, 5), (1, 6, 7)]\nassert     find_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)], 3) == []\nassert     find_tuples([(1, 2, 3), (1, 4, 5), (1, 6, 7)], 5) == []\n\n'''\nGiven a string of any length and a target string, write a function that returns the index at which the target \nstring is first found in the given string. \nThe input strings will be a valid string of length >= 1, but could be empty. The target string could be \na valid substring of the given string.\n'''\ndef find_substring(string, target):\n    '''\n    Write a function to find the index at which the target string is first found in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_tuples([(1,2,3,4),(2,3,4,5),(1,2,3,4)], 1) == [(1,2,3,4),(1,2,3,4)]\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 1) == [(3,4,5,6)]\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 2) == []\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 3) == [(3,4,5,6)]\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(3,4,5,6)], 4) == [(3,4,5,6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_tuples([(1,2),(2,4),(5,6)],4) == [(1,2),(2,4)]\nassert     find_tuples([(1,2),(2,4),(5,6)],2) == [(1,2),(5,6)]\nassert     find_tuples([(1,2),(2,4),(5,6)],8) == []\nassert     find_tuples([(1,2),(2,4),(5,6)],1) == []\nassert     find_tuples([(1,2),(2,4),(5,6)],0) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_tuples([(1, 3), (1, 5), (2, 3), (2, 6)], 3) == [(1, 3), (2, 6)]\nassert     find_tuples([(0, 3), (0, 5), (1, 3), (1, 6)], 2) == []\nassert     find_tuples([(0, 3), (0, 5), (1, 3), (1, 6)], 4) == [(1, 6)]\nassert     find_tuples([(0, 3), (0, 5), (1, 3), (1, 6)], 1) == [(1, 3), (1, 6)]\nassert     find_tuples([(0, 3), (0, 5), (1, 3), (1, 6)], 0) == [(0, 3), (0, 5)]\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(0) == False\n\nprint(\"You passed all the tests!\")\n\n\n'''\nWrite a python function to find whether a number is prime.\n'''\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_Diff(11) == True, \"Wrong answer for is_Diff(11)\"\nassert     is_Diff(12) == False, \"Wrong answer for is_Diff(12)\"\nassert     is_Diff(0) == False, \"Wrong answer for is_Diff(0)\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     is_Diff(11) == False\nassert     is_Diff(12) == True\nassert     is_Diff(13) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(10) == False\nassert     is_Diff(13) == True\nassert     is_Diff(12) == False\nassert     is_Diff(0) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_Diff(11)     == True\nassert     is_Diff(7)     == False\nassert     is_Diff(0)     == True\nassert     is_Diff(10)     == False\nassert     is_Diff(77)     == True\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_Diff(11) == True, 'Test failed'\nassert     is_Diff(12) == False, 'Test failed'\n\ndef check_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(12) == True\nassert     is_Diff(13) == True\nassert     is_Diff(7) == True\nassert     is_Diff(20) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_Diff(11) == True, \\\n        'your function is_Diff should return True if n is divisible by 11'\nassert     is_Diff(12) == False, \\\n        'your function is_Diff should return False if n is not divisible by 11'\nassert     is_Diff(13) == True, \\\n        'your function is_Diff should return True if n is divisible by 11'\nassert     is_Diff(21) == False, \\\n        'your function is_Diff should return False if n is not divisible by 11'\nassert     is_Diff(111) == False, \\\n        'your function is_Diff should return False if n is not divisible by 11'\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     is_Diff(11) is True, \"error in is_Diff\"\nassert     is_Diff(12) is False, \"error in is_Diff\"\nassert     is_Diff(13) is False, \"error in is_Diff\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_Diff(11) == True, 'is_Diff(11) should be True'\nassert     is_Diff(12) == False, 'is_Diff(12) should be False'\nassert     is_Diff(0) == False, 'is_Diff(0) should be False'\nassert     is_Diff(-4) == False, 'is_Diff(-4) should be False'\nassert     is_Diff(7) == False, 'is_Diff(7) should be False'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef word_len_modulus(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     word_len('hello') == False, \"The length of the word hello is odd\"\nassert     word_len('h') == True, \"The length of the word h is odd\"\nassert     word_len('hEelL') == True, \"The length of the word hEelL is odd\"\nassert     word_len('j') == False, \"The length of the word j is even\"\nassert     word_len('aab') == False, \"The length of the word aab is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     word_len(\"python\") == True\nassert     word_len(\"php\") == False\nassert     word_len(\" \") == False\nassert     word_len(\"hi world\") == True\n\ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     word_len(\"apple\") ==     False,             \"Odd length\"\nassert     word_len(\"peach\") ==     False,             \"Odd length\"\nassert     word_len(\"class\") ==     True,             \"Odd length\"\nassert     word_len(\"hello\") ==     True,             \"Even length\"\nassert     word_len(\"racecar\") ==     True,             \"Even length\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     word_len('hello') == False \nassert word_len('abcdefg') == True \nassert word_len('python') == True \n\ndef odd_even(n): \n    '''\n    Write a python function to return the odd numbers between the range of 0 and n.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nprint(word_len('python') == True)\nassert \nprint(word_len('five') == False)\nassert \nprint(word_len('abcdef') == False)\nassert \nprint(word_len(' ') == True)\nassert \nprint(word_len('Python') == False)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     word_len('apple') == False\nassert     word_len('airforce') == True\nassert     word_len('xbox') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     word_len('apples') == True\nassert     word_len('banana') == False\nassert     word_len('hello') == True\nassert     word_len('x') == False\nassert     word_len('apple') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     word_len(\"testcase\") == False\nassert     word_len(\"test\") == True\nassert     word_len(\"test testcase\") == True\nassert     word_len(\"test testcase test\") == False\nassert     word_len(\" \") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 2\nassert     tetrahedral_number(3) == 4\nassert     tetrahedral_number(4) == 7\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \ntetrahedral_number(1) == 1\nassert \ntetrahedral_number(5) == 2\nassert \ntetrahedral_number(10) == 6\nassert \ntetrahedral_number(20) == 15\nassert \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(0) == 1\nassert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 10\nassert     tetrahedral_number(3) == 20\nassert     tetrahedral_number(4) == 35\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(3)     == 10, \"tetrahedral_number(3) should be 10\"\nassert     tetrahedral_number(4)     == 30, \"tetrahedral_number(4) should be 30\"\nassert     tetrahedral_number(5)     == 70, \"tetrahedral_number(5) should be 70\"\nassert     tetrahedral_number(6)     == 210, \"tetrahedral_number(6) should be 210\"\nassert     tetrahedral_number(7)     == 1890, \"tetrahedral_number(7) should be 1890\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     tetrahedral_number(0) == 1\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 2\nassert     tetrahedral_number(3) == 3\nassert     tetrahedral_number(4) == 5\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 2\nassert     tetrahedral_number(3) == 3\nassert     tetrahedral_number(4) == 5\nassert     tetrahedral_number(5) == 7\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 3\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 10\nassert     tetrahedral_number(5) == 15\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\nimport random\n\ndef test_tetrahedral_number():\n    '''\n    To test tetrahedral_number.\n    '''\n    for n in range(1,100):\n        assert tetrahedral_number(n) == n*(n+1)*(n+2)//6\n\ntest_tetrahedral_number()\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 1\nassert     tetrahedral_number(3) == 3\nassert     tetrahedral_number(4) == 6\nassert     tetrahedral_number(5) == 10\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     volume_sphere(10) == 4188.790204786391\nassert     volume_sphere(0) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     volume_sphere(2) == 4.1887902047935791\n\ndef volume_of_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     volume_sphere(1.0) == 4.1887902047930386, 'wrong'\nassert     volume_sphere(2.0) == 12.566370614359172, 'wrong'\nassert     volume_sphere(3.0) == 19.634954084936208, 'wrong'\nassert     volume_sphere(4.0) == 31.41592653589793, 'wrong'\nassert     volume_sphere(5.0) == 46.229790455627176, 'wrong'\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     volume_sphere(3) == 113.09733552923255\nassert     volume_sphere(0) == 0\nassert     volume_sphere(0.1) == 1.7556998699600853e-11\nassert     volume_sphere(0.5) == 9.23831669604973\n\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     volume_sphere(3) == (4/3)*math.pi*(3**3)\nassert     volume_sphere(6) == 4/3*math.pi*(6**3)\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     volume_sphere(4) == 4/3 * math.pi * pow(4, 3)\nassert     volume_sphere(5) == 4/3 * math.pi * pow(5, 3)\nassert     volume_sphere(1.5) == 4/3 * math.pi * pow(1.5, 3)\n\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     volume_sphere(3) == 4.19\nassert     volume_sphere(2) == 10.56\nassert     volume_sphere(5) == 153.93\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \nvolume_sphere(2) == \nvolume_sphere(3) == \nvolume_sphere(4) == \nvolume_sphere(5) ==\nvolume_sphere(6) == \nvolume_sphere(7) == \nvolume_sphere(8) == \nvolume_sphere(9) == \nvolume_sphere(10) == \nvolume_sphere(11) == \nvolume_sphere(12) == \nvolume_sphere(13) == \nvolume_sphere(14) == \nvolume_sphere(15) == \nvolume_sphere(16) == \nvolume_sphere(17) == \nvolume_sphere(18) == \nvolume_sphere(19) == \nvolume_sphere(20) == \nvolume_sphere(21) == \nvolume_sphere(22) == \nvolume_sphere(23) == \nvolume_sphere(24) == \nvolume_sphere(25) == \nvolume_sphere(26) == \nvolume_sphere(27) == \nvolume_sphere(28) == \nvolume_sphere(29) == \nvolume_sphere(30) == \nvolume_sphere(31) == \nvolume_sphere(32) == \nvolume_sphere(33) == \nvolume_sphere(34) == \nvolume_sphere(35) == \nvolume_sphere(36) == \nvolume_sphere(37) == \nvolume_sphere(38) == \nvolume_sphere(39) == \nvolume_sphere(40) == \nvolume_sphere(41) == \nvolume_sphere(42) == \nvolume_sphere(43) == \nvolume_sphere(44) == \nvolume_sphere(45) == \nvolume_sphere(46) == \nvolume_sphere(47) == \nvolume_sphere(48) == \nvolume_sphere(49) == \nvolume_sphere(50) == \nvolume_sphere(51) == \nvolume_sphere(52) == \nvolume_sphere(53) == \nvolume_sphere(54) == \nvolume_sphere(55) == \nvolume_sphere(56) == \nvolume_sphere(57) == \nvolume_sphere(58) == \nvolume_sphere(59) == \nvolume_sphere(60) == \nvolume_sphere(61) == \nvolume_sphere(62) == \nvolume_sphere(63) == \nvolume_sphere(64) == \nvolume_sphere(65) == \nvolume_sphere(66) == \nvolume_sphere(67) == \nvolume_sphere(68) == \nvolume_sphere(69) == \nvolume_sphere(70) == \nvolume_sphere(71) == \nvolume_sphere(72) == \nvolume_sphere(73) == \nvolume_sphere(74) == \nvolume_sphere(75) == \nvolume_sphere(76) == \nvolume_sphere(77) == \nvolume_sphere(78) == \nvolume_sphere(79) == \nvolume_sphere(80) == \nvolume_sphere(81) == \nvolume_sphere(82) == \nvolume_sphere(83) == \nvolume_sphere(84) == \nvolume_sphere(85) == \nvolume_sphere(86) == \nvolume_sphere(87) == \nvolume_sphere(88) == \nvolume_sphere(89) == \nvolume_sphere(90) == \nvolume_sphere(91) == \nvolume_sphere(92) == \nvolume_sphere(93) == \nvolume_sphere(94) == \nvolume_sphere(95) == \nvolume_sphere(96) == \nvolume_sphere(97) == \nvolume_sphere(98) == \nvolume_sphere(99) == \nvolume_sphere(100) == \nvolume_sphere(101) == \nvolume_sphere(102) == \nvolume_sphere(103) == \nvolume_sphere(104) == \nvolume_sphere(105) == \nvolume_sphere(106) == \nvolume_sphere(107) == \nvolume_sphere(108) == \nvolume_sphere(109) == \nvolume_sphere(110) == \nvolume_sphere(111) == \nvolume_sphere(112) == \nvolume_sphere(113) == \nvolume_sphere(114) == \nvolume_sphere(115) == \nvolume_sphere(116) == \nvolume_sphere(117) == \nvolume_sphere(118) == \nvolume_sphere(119) == \nvolume_sphere(120) == \nvolume_sphere(121) == \nvolume_sphere(122) == \nvolume_sphere(123) == \nvolume_sphere(124) == \nvolume_sphere(125) == \nvolume_sphere(126) == \nvolume_sphere(127) == \nvolume_sphere(128) == \nvolume_sphere(129) == \nvolume_sphere(130) == \nvolume_sphere(131) == \nvolume_sphere(132) == \nvolume_sphere(133) == \nvolume_sphere(134) == \nvolume_sphere(135) == \nvolume_sphere(136) == \nvolume_sphere(137) == \nvolume_sphere(138) == \nvolume_sphere(139) == \nvolume_sphere(140) == \nvolume_sphere(141) == \nvolume_sphere(142) == \nvolume_sphere(143) == \nvolume_sphere(144) == \nvolume_sphere(145) == \nvolume_sphere(146) == \nvolume_sphere(147) == \nvolume_sphere(148) == \nvolume_sphere(149) == \nvolume_sphere(150) == \nvolume_sphere(151) == \nvolume_sphere(152) == \nvolume_sphere(153) == \nvolume_sphere(154) == \nvolume_sphere(155) == \nvolume_sphere(156) == \nvolume_sphere(157) == \nvolume_sphere(158) == \nvolume_sphere(159) == \nvolume_sphere(160) == \nvolume_sphere(161) == \nvolume_sphere(162) == \nvolume_sphere(163) == \nvolume_sphere(164) == \nvolume_sphere(165) == \nvolume_sphere(166) == \nvolume_sphere(167) == \nvolume_sphere(168) == \nvolume_sphere(169) == \nvolume_sphere(170) == \nvolume_sphere(171) == \nvolume_sphere(172) == \nvolume_sphere(173) == \nvolume_sphere(174) == \nvolume_sphere(175) == \nvolume_sphere(176) == \nvolume_sphere(177) == \nvolume_sphere(178) == \nvolume_sphere(179) == \nvolume_sphere(180) == \nvolume_sphere(181) == \nvolume_sphere(182) == \nvolume_sphere(183) == \nvolume_sphere(184) == \nvolume_sphere(185) == \nvolume_sphere(186) == \nvolume_sphere(187) == \nvolume_sphere(188) == \nvolume_sphere(189) == \nvolume_sphere(190) == \nvolume_sphere(191) == \nvolume_sphere(192) == \nvolume_sphere(193) == \nvolume_sphere(194) == \nvolume_sphere(195) == \nvolume_sphere(196) == \nvolume_sphere(197) == \nvolume_sphere(198) == \nvolume_sphere(199) == \nvolume_sphere(200) == \nvolume_sphere(201) =="
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (get_Char(\"cs\") == \"k\" )\nassert     (get_Char(\"z\") == \"z\")\nassert     (get_Char(\"\") == \"\")\nassert     (get_Char(\"a\") == \"a\")\nassert     (get_Char(\"ab\") == \"c\")\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     get_Char('Hello') == 'F'\nassert     get_Char('1010') == 'B'\nassert     get_Char('101101101101') == 'S'\nassert     get_Char('10110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     get_Char('hello') == 'A'\nassert     get_Char('world') == 'W'\nassert     get_Char('dungeons and dragons') == 'D'\n\ndef get_Word(strr):\n    '''\n    Write a python function to find the word made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     get_Char(\"Welcome\") == 'W'\nassert     get_Char(\"Universe\") == 'U'\nassert     get_Char(\"New Earth\") == 'S'\nassert     get_Char(\"Y\") == 'Y'\nassert     get_Char(\"z\") == 'z'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     get_Char('krish')== 37\nassert     get_Char('hari')== 58\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     get_Char( 'harshil' ) == 'h#sh#i#l', 'incorrect output'\nassert     get_Char( 'harshil' ) == 'h#sh#i#l', 'incorrect output'\nassert     get_Char( 'harshil' ) == 'h#sh#i#l', 'incorrect output'\nprint( 'get_Char() sanity check passed' )\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     get_Char('Python') == 'F'\nassert     get_Char('Hi') == 'H'\nassert     get_Char('Sock') == 'R'\nassert     get_Char('Test') == '3'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     get_Char(\"apple\") == '3'\nassert     get_Char(\"xylophone\") == '3'\nassert     get_Char(\"zebra\") == '6'\nassert     get_Char(\"zoo\") == '9'\nassert     get_Char(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     get_Char('Hello') == 'hxlw', 'Wrong answer'\nassert     get_Char('I love you') == 'avvx', 'Wrong answer'\nassert     get_Char('hiiiii') == 'c', 'Wrong answer'\nprint('Correct')\n\ndef get_SubString(strr):  \n    '''\n    Write a python function to find the longest substring of the given string that contains no repeated character.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     get_Char('abcdefg') == 'd'\nassert     get_Char('abcdef') == 'b'\nassert     get_Char('z') == 'a'\nassert     get_Char('!@#$') == '#'\nassert     get_Char('abcde') == 'c'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert sequence(6) == 13\nassert sequence(2) == 7\nassert sequence(5) == 19\n\ndef convert_number_to_binary(n):\n    '''\n    Write a function to convert an integer n to its binary form.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test case\n    print(sequence(1)) # 1\n    print(sequence(2)) # 2\n    print(sequence(3)) # 3\n    print(sequence(5)) # 5\n    print(sequence(10)) # 55\n    print(sequence(20)) # 265\n    print(sequence(30)) # 1801\n    print(sequence(40)) # 36110"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     sequence(1) == 1\nassert sequence(2) == 2\nassert sequence(3) == 4\nassert sequence(4) == 7\nassert sequence(5) == 13\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    nth_number = 3\n    print(f'The {nth_number}th number in the sequence is {sequence(nth_number)}.')\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef sum_digits(n): \n    '''\n    Write a function that returns the sum of the digits in a positive integer.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi, \"incorrect\"\nassert     surfacearea_sphere(0) == 4 * math.pi, \"incorrect\"\nassert     surfacearea_sphere(2) == 4 * math.pi, \"incorrect\"\n\nprint(\"Congrats! First check passed. Now check the second one.\")\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi, 'Wrong'\nassert     surfacearea_sphere(2) == 4 * math.pi * math.pow(2, 1/2), 'Wrong'\nassert     surfacearea_sphere(3) == 4 * math.pi * math.pow(3, 1/2), 'Wrong'\nassert     surfacearea_sphere(0) == 0, 'Wrong'\nprint('surfacearea_sphere is correct.')\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(2) == 4 * math.pi * (4 / 3)\nassert     surfacearea_sphere(0) == 4 * math.pi * 0\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     math.pi * 4 * r**2         == surfacearea_sphere(r)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(10) == 314.159265358979, \\\n        \"Check your implementation, it should return 314.159265358979 for r = 10\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(1) == 4.18\nassert     surfacearea_sphere(2) == 12.57\nassert     surfacearea_sphere(3) == 19.63\n\ndef surfacearea_sphere_rec(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     (surfacearea_sphere(2) == 12.566370614359172)\nassert     (surfacearea_sphere(3) == 50.26548245743669)\nassert     (surfacearea_sphere(4) == 190.61271364501952)\n\ndef surfacearea_triangle(base,height):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     math.isclose(surfacearea_sphere(1),    4 * math.pi * 4)\nassert     math.isclose(surfacearea_sphere(2),    4 * math.pi * 8)\nassert     math.isclose(surfacearea_sphere(3),    4 * math.pi * 12)\nassert     math.isclose(surfacearea_sphere(1.5),    4 * math.pi * 4.5)\n\nprint('Passed')\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(1)==4*math.pi, \"Wrong value for surfacearea_sphere(1)\"\nassert     surfacearea_sphere(2)==12*math.pi, \"Wrong value for surfacearea_sphere(2)\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(3) == round(4 * math.pi * (3 ** 2), 2), \"incorrect\"\nassert     surfacearea_sphere(3.7) == round(4 * math.pi * (3.7 ** 2), 2), \"incorrect\"\nassert     surfacearea_sphere(0) == round(4 * math.pi * (0 ** 2), 2), \"incorrect\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 16\nassert     centered_hexagonal_number(3) == 35\nassert     centered_hexagonal_number(4) == 56\nassert     centered_hexagonal_number(5) == 69\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 4\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(5) == 6\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(1) == 4\nassert     centered_hexagonal_number(3) == 24\nassert     centered_hexagonal_number(6) == 70\nassert     centered_hexagonal_number(8) == 408\nassert     centered_hexagonal_number(9) == 486\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 2\nassert     centered_hexagonal_number(3) == 3\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(5) == 7\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef list_centered_hexagonal_numbers(n):\n    '''\n    Write a function to find nth centered hexagonal number in the form of list.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(0) == 1\nassert     centered_hexagonal_number(1) == 3\nassert     centered_hexagonal_number(2) == 10\nassert     centered_hexagonal_number(3) == 16\nassert     centered_hexagonal_number(4) == 28\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     centered_hexagonal_number(0) == 1\nassert     centered_hexagonal_number(1) == 2\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 5\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three(dict(a=1, b=2, c=3), \n                    dict(a=2, b=4, d=8), dict(a=5, b=10, c=13)) == \\\n    {'a': 5, 'b': 10, 'c': 13, 'd': 8}, \"dict\"\nassert     merge_dictionaries_three(dict(a=1, b=2, c=3), \n                    dict(a=2, b=4, d=8), dict(a=5, b=10, c=13, e=15)) == \\\n    {'a': 5, 'b': 10, 'c': 13, 'd': 8, 'e': 15}, \"dict\"\nassert     merge_dictionaries_three(dict(a=1, b=2, c=3), \n                    dict(a=2, b=4, d=8), dict(a=5, b=10, c=13, e=15, f=18)) == \\\n    {'a': 5, 'b': 10, 'c': 13, 'd': 8, 'e': 15, 'f': 18}, \"dict\"\nassert     merge_dictionaries_three(dict(a=1, b=2, c=3), \n                    dict(a=2, b=4, d=8, e=10), dict(a=5, b=10, c=13, e=15, f=18)) == \\\n    {'a': 5, 'b': 10, 'c': 13, 'd': 8, 'e': 15, 'f': 18}, \"dict\"\nassert     merge_dictionaries_three(dict(a=1, b=2, c=3), \n                    dict(a=2, b=4, d=8, e=10), dict(a=5, b=10, c=13, d=18)) == \\\n    {'a': 5, 'b': 10, 'c': 13, 'd': 18, 'e': 10}, \"dict\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three(dict1,dict2, dict3) == {'b': 2, 'a': 1, 'd': 4, 'c': 3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({},{}, {}) == {}, \"Empty dictionaries should return an empty dict!\"\nassert     merge_dictionaries_three({'a': 5, 'b': -9},{}, {}) == {'a': 5, 'b': -9}, \"If dictionaries are not empty and one is empty, then return the dictionary that is not empty.\"\nassert     merge_dictionaries_three({'a': 5, 'b': -9},{'a': 2}, {}) == {'a': 5, 'b': -9}, \"If one of the dictionary is empty, then return the other dictionary.\"\nassert     merge_dictionaries_three({'a': 5, 'b': -9, 'c': -6},{'a': 2, 'c': -1}, {}) == {'a': 5, 'b': -9, 'c': -6}, \"If all the dictionaries are empty, then return an empty dict.\"\nassert     merge_dictionaries_three({'a': 5, 'b': -9, 'c': -6},{'a': 2, 'c': -1}, {'a': 10}) == {'a': 10, 'b': -9, 'c': -6}, \"If one of the dictionary has a key that another doesn't, then add the key from that dictionary to the end of the dict.\"\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three(\n        {'x': 1, 'y': 2, 'z': 3}, \n        {'w': 10, 'x': 11, 'y': 2}, \n        {'w': 10}) == {'w': 10, 'x': 11, 'y': 2, 'z': 3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({'hello':1, 'bye':2},\n        {'hello':3, 'welcome':4},\n        {'hello':5, 'welcome':6}) == {'hello':1, 'bye':2, 'welcome':4}, \"Wrong output\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({1:2,3:4},{1:2,3:5},{1:2,3:6}) == {1:2,3:4,5:2,6:2}\nassert     merge_dictionaries_three({1:2,3:4},{1:2,3:5},{1:2,3:6,4:7}) == {1:2,3:4,4:7,5:2,6:2}\nassert     merge_dictionaries_three({1:2,3:4,4:5},{1:2,3:5,5:6},{1:2,3:6,7:8}) == {1:2,3:4,4:5,5:6,6:2,7:8}\n\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': '4', 'c': '5'}, {'a': '6', 'b': '7', 'c': '8'}) == {'a': 1, 'b': '4', 'c': '5'}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': '4', 'c': '5'}, {'a': 6, 'b': 7, 'c': 8}) == {'a': 6, 'b': '4', 'c': '5'}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': '4', 'c': '5'}, {'a': 6, 'b': 7, 'c': 8}) == {'a': 6, 'b': 7, 'c': 8}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': '4', 'c': '5'}, {'a': 6, 'b': 7, 'c': 8}) == {'a': 6, 'b': 7, 'c': 8}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': '4', 'c': '5'}, {'a': 6, 'b': 7, 'c': 8}) == {'a': 6, 'b': 7, 'c': 8}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6}, {'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}, 'test'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nprint(merge_dictionaries_three(dict1,dict2, dict3))\n\ndef merge_dictionaries_three_fixed(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for k1,v1 in dict1.items():\n        for k2,v2 in dict2.items():\n            if k1 == k2:\n                new_dict[k1] = v1 + v2\n            else:\n                if k1 not in new_dict:\n                    new_dict[k1] = v1\n                if k2 not in new_dict:\n                    new_dict[k2] = v2\n    for k3,v3 in dict3.items():\n        if k3 not in new_dict:\n            new_dict[k3] = v3\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     {'a': 1, 'b': 2, 'c': 3, 'd': 4} == \\\n    merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4}, {'c': 3})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4} == \\\n    merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'c': 3}, {'d': 4})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4} == \\\n    merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'c': 3}, {'d': 4})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4} == \\\n    merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {}, {'d': 4})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4} == \\\n    merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {}, {'d': 4})\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef freq_count_1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     collections.Counter([1, 2, 3, 1, 1, 2, 3, 2]) == freq_count([1, 2, 3, 1, 1, 2, 3, 2])\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     freq_count(['a', 'a', 'b', 'c', 'c', 'd', 'e', 'e']) == {'a': 2, 'b': 1, 'c': 2, 'd': 1, 'e': 2}\nassert     freq_count([2, 2, 3, 2, 4, 3, 2, 2, 2, 3, 2, 4, 3, 2]) == {2: 4, 3: 3, 4: 2,}\nassert     freq_count([1, 2, 3, 1, 3, 3, 1, 2, 1, 3, 1]) == {1: 3, 2: 1, 3: 3}\nassert     freq_count([1, 2, 3, 1, 3, 3, 1, 2, 1, 3, 1, 2, 1, 3]) == {1: 4, 2: 1, 3: 4}\nassert     freq_count([0, 2, 3, 0, 4, 0, 2, 0, 0, 4, 0, 2, 0, 4]) == {0: 5, 2: 1, 3: 1, 4: 3}\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     freq_count([1, 2, 3, 4, 5]) == [1, 1, 1, 1, 1]\nassert     freq_count([2, 2, 4, 4, 5]) == [0, 2, 2, 0, 2]\nassert     freq_count([2, 2, 2, 4, 4, 5]) == [0, 3, 0, 2, 0, 2]\nassert     freq_count([2, 2, 2, 2, 2, 5]) == [0, 5, 0, 2, 0, 2]\nassert     freq_count([2, 2, 2, 2, 2, 2, 2, 2]) == [0, 8, 0, 2, 0, 2, 0, 2]\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     freq_count([1,3,4,3,2,3,5,1,3,3]) == [1:5, 3:4, 2:1, 5:1]\nassert     freq_count([1,3,3,1,2,3,5,1,3,3]) == [1:5, 3:4, 2:1, 5:1]\n\n\ndef sort_by_freq(list1):\n    '''\n    Write a function that takes a list of elements, and returns a new list containing the same elements as they are sorted by their frequency in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef frequency_sort(items):\n    '''\n    Write a function to sort a list of elements using the frequency of elements in the list as the key, and return a list sorted in that way.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     freq_count([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]) == {1: 7, 2: 5, 3: 6, 4: 4}\nassert     freq_count([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4]) == {1: 9, 2: 6, 3: 7, 4: 4}\n\ndef union(list1, list2):\n    '''\n    Write a function to get the union of two lists, each of which is in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     freq_count([1, 1, 2, 3, 4, 2, 2, 2, 2, 2, 3, 3, 4, 3, 2, 3, 1, 3, 2, 2]) == {1: 1, 2: 6, 3: 4, 4: 2, 3: 2}\n\ndef get_mode(list1):\n    '''\n    Write a function to get the mode of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,1,1,1,2,2,3]) == {1:4,2:2,3:1}\nassert     freq_count([1,1,1,1,2,2,3]) == {1:4,2:2,3:1}\nassert     freq_count([1,1,2,3,3,3,3,3,3,1]) == {1:1,2:1,3:8}\nassert     freq_count([1,1,2,2,3,3,3,3,3,3]) == {1:1,2:1,3:8}\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     collections.Counter({1: 3, 2: 1, 3: 1, 4: 1, 5: 1}) == freq_count([1, 1, 1, 2, 2, 3, 4, 5])\nassert collections.Counter({1: 1, 2: 2, 3: 3}) == freq_count([1, 2, 3])\nassert collections.Counter({'a': 1, 'b': 1, 'c': 1}) == freq_count(['a', 'a', 'b', 'c', 'c'])\nassert collections.Counter({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == freq_count(['a', 'a', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd'])\n\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for e in list1:\n        if e in dict1:\n            dict1[e] += 1\n        else:\n            dict1[e] = 1\n    return dict1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n    "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    # test with N = 4, should return 3\n    N = 4\n    # test with N = 8, should return 4\n    N = 8\n    # test with N = 15, should return 6\n    N = 15\n    # test with N = 30, should return 28\n    N = 30\n    \n    closest_num(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\n\ndef closest_num_2(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     closest_num(10) == 9\nassert     closest_num(2.1) == 2\nassert     closest_num(-3.14) == -3\n\nprint(\"all tests passed.\")\n\n\ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     closest_num(12) == 11\nassert     closest_num(20) == 19\nassert     closest_num(10) == 9\nassert     closest_num(100) == 99\nassert     closest_num(200) == 199\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     closest_num(2) == 1\nassert     closest_num(3) == 2\nassert     closest_num(5) == 4\nassert     closest_num(11) == 10\nassert     closest_num(15) == 13\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     closest_num(1) == 0\nassert closest_num(2) == 1\nassert closest_num(3) == 2\nassert closest_num(4) == 3\nassert closest_num(5) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     len_log([\"hello\", \"world\", \"hi\"]) == 5, \"wrong output\"\nassert     len_log([\"Balloonicorn\", \"Hackbright\"]) == 12, \"wrong output\"\n\ndef reverse_iter(s):\n    \"\"\"\n    Given a string s, reverse the string without affecting special characters.\n\n    Example 1:\n    Input: s = \"ab-cd\"\n    Output: \"dc-ba\"\n\n    Example 2:\n    Input: s = \"a-bC-dEf-ghIj\"\n    Output: \"j-Ih-gfE-dCba\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     len_log([\"the\", \"quick\", \"brown\", \"fox\"]) == 4, \"Check the first example\"\nassert len_log([\"the\", \"qucik\", \"brown\", \"fox\"]) == 7, \"Check the second example\"\nassert len_log([\"the\", \"quick\", \"the\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]) == 6, \"Check the third example\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     len_log(['hello', 'world'])     == 5\nassert     len_log(['hello','my', 'friend'])     == 6\nassert     len_log(['hello','my', 'friend', 'and','my', 'friend'])     == 7\n\ndef type_log(list1):\n    '''\n    Write a python function to check the list contains only integer or float or both.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     len_log([\"This\", \"is\", \"an\", \"elementary\", \"test\"]) == 5, 'wrong'\nassert     len_log([\"\", \"\", \"\", \"\"]) == 0, 'wrong'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     len_log([\"a\", \"aa\"]) == 1, \"test 1 failed\"\nassert     len_log([\"aa\", \"a\"]) == 2, \"test 2 failed\"\nassert     len_log([\"a\", \"aa\", \"aaa\"]) == 3, \"test 3 failed\""
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     len_log(['i', 'am', 'a', 'boy']) == 4, 'incorrect'\nassert     len_log(['dog', 'cat','mouse']) == 3, 'incorrect'\nassert     len_log(['cat', 'dog','mouse', 'elephant']) == 5, 'incorrect'\nassert     len_log(['dog', 'cat','mouse', 'elephant', 'aardvark']) == 6, 'incorrect'\n\ndef sum_odd_numbers(list1):\n    '''\n    Write a python function to sum all odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     len_log([\"hi\", \"a\", \"hello\"]) == 5\nassert     len_log([\"\", \"\", \"hello\"]) == 5\nassert     len_log([\"hi\", \"\", \"hello\"]) == 4\nassert     len_log([\"hi\", \"\", \"\"]) == 2\nassert     len_log([\"\"]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     len_log([\"this\", \"is\", \"a\", \"list\"]) == 5\nassert     len_log([\"this\", \"is\", \"a\", \"very\", \"long\", \"sentence\"]) == 12\n\ndef len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \nlen_log([\"len_log\",\"a\",\"b\",\"c\"]) == 4\nlen_log([\"len_log\",\"a\",\"b\",\"c\",\"d\",\"e\"]) == 5\nlen_log([\"a\",\"len_log\",\"b\",\"c\"]) == 4\n\n\ndef get_max_len(list1):\n    '''\n    Write a python function to return the length of the longest word in a list.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     len_log([\"hello\", \"world\"])         == 5\nassert     len_log([\"hello\"])                 == 5\nassert     len_log([\"\", \"\"])                 == 0\nassert     len_log([\"\", \"hello\"])         == 5\nassert     len_log([\"hello\", \"\"])         == 5\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     find_substring('abcdef','substring') == 'Yes'\nassert     find_substring('abcdef', 'abcd') == 'Yes'\nassert     find_substring('abcdef', 'def') == 'Yes'\nassert     find_substring('abcdef', 'ef') == 'Yes'\nassert     find_substring('abcdef', 'cd') == 'Yes'\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     find_substring('abcd', 'cd') == True\nassert     find_substring('abcde', 'cde') == True\nassert     find_substring('abcde', 'cde') == True\nassert     find_substring('abcde', 'dc') == False\nassert     find_substring('abcde', 'de') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \nassert\nassert\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef find_substring_v2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     find_substring(\"cat\", [\"dog\", \"act\", \"cat\"]) == False\nassert     find_substring(\"cat\", [\"dog\", \"cat\", \"act\"]) == True\nassert     find_substring(\"cat\", [\"cat\", \"dog\", \"act\"]) == True\nassert     find_substring(\"cat\", [\"dog\", \"act\", \"cat\"]) == True\nassert     find_substring(\"cat\", [\"dog\", \"act\", \"act\"]) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef test_find_substring():\n    "
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     find_substring(['skillfactory','testing','blackbox','tdd'], 'factory') == True\nassert     find_substring(['skillfactory','testing','blackbox','tdd'], 'ddd') == False\nassert     find_substring(['skillfactory','testing','blackbox','tdd'], 'testing') == True\nassert     find_substring(['skillfactory','testing','blackbox','tdd'], 'tddt') == True\nassert     find_substring(['skillfactory','testing','blackbox','tdd'], 'abc') == False\nprint('find_substring --> OK')\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     find_substring(\"test\", [\"st\", \"te\", \"t\"]) == \"test\"\nassert     find_substring(\"test\", [\"tes\", \"t\"]) == \"\"\nassert     find_substring(\"test\", [\"tes\", \"t\", \"sts\"]) == \"st\"\nassert     find_substring(\"test\", [\"tes\", \"ts\"]) == \"test\"\nassert     find_substring(\"test\", [\"test\"]) == \"test\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     find_substring([\"a\",\"b\",\"c\"], \"a\") == True\nassert     find_substring([\"a\",\"b\",\"c\"], \"d\") == False\nassert     find_substring([\"a\",\"b\",\"c\"], \"c\") == True\nassert     find_substring([\"a\",\"b\",\"c\"], \"abc\") == True\nassert     find_substring([\"a\",\"b\",\"c\"], \"def\") == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     is_undulating(33) == True\nassert     is_undulating(23) == False\nassert     is_undulating(2) == True\nassert     is_undulating(22) == False\nassert     is_undulating(3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \nassert\n\n'''\nA undulating number is a number whose only prime factors are 2 and 5.\n\nA undulating number is also a number whose only prime divisors are 2 and 5.\n\nA undulating number is also a number whose only prime factors are 2, 3 and 5.\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     is_undulating(1218) == True\nassert     is_undulating(121818) == False\nassert     is_undulating(12181818) == False\nassert     is_undulating(1218181818) == True\nassert     is_undulating(121818181818) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     is_undulating(12) == False\nassert     is_undulating(13) == False\nassert     is_undulating(1213) == False\nassert     is_undulating(121312) == False\nassert     is_undulating(12131212) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     is_undulating(3) == True\nassert     is_undulating(7) == False\nassert     is_undulating(5) == False\nassert     is_undulating(11) == False\nassert     is_undulating(15) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     is_undulating(1) == False\nassert     is_undulating(2) == True\nassert     is_undulating(3) == False\nassert     is_undulating(5) == True\nassert     is_undulating(6) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     is_undulating(12) == False, \"Test 1\"\nassert     is_undulating(21) == False, \"Test 2\"\nassert     is_undulating(7) == False, \"Test 3\"\nassert     is_undulating(24) == True, \"Test 4\"\nassert     is_undulating(25) == False, \"Test 5\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     power(2,3) == 8, \"Incorrect\"\nassert     power(2,2) == 4, \"Incorrect\"\nassert     power(2,-1) == 0.5, \"Incorrect\"\nassert     power(-2,2) == 4, \"Incorrect\"\nassert     power(-2,-2) == 1, \"Incorrect\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (power(2,3) == 8)\nassert     (power(2,-3) == 0.125)\nassert     (power(1.5,2) == 3.25)\nassert     (power(0,0) == 1)\nassert     (power(1,0) == 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     power(2,4) == 16\nassert power(2,2) == 4\nassert power(2,1) == 2\nassert power(2,0) == 1\n\ndef power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    res = 1\n    for i in range(b):\n        res = res * a\n    return res\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     power(2,3)== 8\nassert     power(2,-3)== 0.125\nassert     power(3,0)== 1\nassert     power(3,-2)== 0.0625\nassert     power(3,3)== 27\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     power(2,0) == 1, 'Error in power'\nassert     power(2,1) == 2, 'Error in power'\nassert     power(2,2) == 4, 'Error in power'\nassert     power(2,3) == 8, 'Error in power'\nassert     power(2,4) == 16, 'Error in power'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     index_minimum([(2, 3), (1, 2), (4, 5)]) == 1\nassert     index_minimum([(2, 3), (1, 2), (4, 6)]) == 2\nassert     index_minimum([(2, 3), (1, 2), (4, 5), (2, 1), (3, 2)]) == 1\nassert     index_minimum([(2, 3), (1, 2), (4, 5), (2, 1), (3, 2), (2, 3)]) == 2\nassert     index_minimum([(2, 3), (1, 2), (4, 5), (2, 1), (3, 2), (2, 3), (1, 3), (4, 6)]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     index_minimum(\n    [(1,3),(0,1),(4,2),(3,5),(2,0),(4,3),(3,0),(5,1),(5,3),(3,3),(4,4),(3,4),(3,0),(1,0),(1,3)]\n    ) == 3\n\nassert     index_minimum(\n    [(1,2),(0,1),(4,2),(3,5),(2,0),(4,3),(3,0),(5,1),(5,3),(3,3),(4,4),(3,4),(3,0),(1,0),(1,3)]\n    ) == 3\n\nassert     index_minimum(\n    [(1,2),(0,1),(4,2),(3,5),(2,0),(4,3),(3,0),(5,1),(5,3),(3,3),(4,4),(3,4),(3,0),(1,0),(1,3)]\n    ) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef selectionSort(arr):\n    '''\n    Given an array of integers, write a function that sorts the array by using the selection sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     index_minimum([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]) == (4, 1)\nassert     index_minimum([(2, 3), (1, 2), (4, 4), (2, 1), (2, 5)]) == (1, 2)\nassert     index_minimum([(1, 2), (2, 3), (4, 4), (2, 1), (2, 5)]) == (1, 2)\nassert     index_minimum([(2, 5), (2, 3), (4, 4), (2, 1), (2, 5)]) == (2, 1)\n\nprint('PASSED: Function index_minimum passed the test')\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     index_minimum([(1, 4), (2, 5), (3, 6)]) == 2\nassert     index_minimum([(3, 9), (1, -2), (4, 0)]) == 1\nassert     index_minimum([(-4, 10), (-3, 11), (-2, 12)]) == -3\nassert     index_minimum([(2, 3), (1, 2), (3, 1), (4, 2)]) == 1\nassert     index_minimum([(3, 3), (1, 2), (4, 2), (1, 1), (2, 3)]) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     index_minimum([(2, 5), (1, 2), (4, 4), (5, 3), (3, 4)]) == (1, 2)\nassert     index_minimum([(2, 5), (1, 2), (4, 4), (5, 3), (3, 4), (2, 3)]) == (2, 3)\nassert     index_minimum([(1, 2), (2, 5), (4, 4), (5, 3), (3, 4)]) == (1, 2)\nassert     index_minimum([(1, 5), (2, 3), (4, 4), (5, 3), (3, 4)]) == (1, 5)\nassert     index_minimum([(1, 5), (4, 4), (2, 3), (5, 3), (3, 4)]) == (4, 4)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     index_minimum([(4, 0), (1, 1), (0, 1)]) == (4, 1), \"wrong\"\nassert     index_minimum([(1, 1), (2, 0), (0, 1)]) == (0, 1), \"wrong\"\nassert     index_minimum([(1, 1), (2, 0), (2, 1)]) == (2, 0), \"wrong\"\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     index_minimum(['a', 'b', 'c', 'd', 'e']) == 'c' \nassert     index_minimum(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'c' \nassert     index_minimum([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')]) == 'c' \nassert     index_minimum([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j')]) == 'c' \nassert     index_minimum([('a', 'b'), ('b', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j')]) == 'b' \n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     index_minimum([(3, 33), (4, 44), (1, 55), (2, 11)]) == 1\nassert     index_minimum([(3, 33), (4, 44), (1, 55), (2, 11)],0) == 3\nassert     index_minimum([(3, 33), (4, 44), (1, 55), (2, 11)],1) == 3\nassert     index_minimum([(3, 33), (4, 44), (1, 55), (2, 11)],2) == 1\nassert     index_minimum([(3, 33), (4, 44), (1, 55), (2, 11)],3) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     index_minimum([(1, 3), (2, 2), (3, 1)]) == 3\nassert     index_minimum([(1, 3), (2, 2), (3, 1), (4, 4)]) == 3\nassert     index_minimum([(1, 3), (2, 2), (3, 1), (4, 4), (5, 5)]) == 3\nassert     index_minimum([(1, 3), (2, 2), (3, 1), (4, 4), (5, 5), (6, 6)]) == 3\nassert     index_minimum([(1, 3), (2, 2), (3, 1), (4, 4), (5, 5), (6, 6), (7, 7)]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[1,2],\n                        [4,5],\n                        [6,7]]) == 2, 'not'\nassert     Find_Min_Length([[1,2],\n                        [4,5],\n                        [6,7],\n                        [8,9]]) == 2, 'not'\nassert     Find_Min_Length([[1,2],\n                        [4,5],\n                        [6,7],\n                        [8,9],\n                        [11]]) == 3, 'not'\nassert     Find_Min_Length([[1,2],\n                        [4,5],\n                        [6,7],\n                        [8,9],\n                        [11],\n                        [12]]) == 2, 'not'\nassert     Find_Min_Length([[1,2],\n                        [4,5],\n                        [6,7],\n                        [8,9],\n                        [11],\n                        [12],\n                        [13]]) == 3, 'not'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[10, 20], [30], [25, 18, 11], [27], [45, 33, 50, 90], [1, 2, 3, 4, 5, 6, 7], [8], []]) == 5\nassert Find_Min_Length([[10, 20], [30], [25, 18, 11], [27], [45, 33, 50, 90], [1, 2, 3, 4, 5, 6, 7], [8], []]) == 7\nassert Find_Min_Length([[10, 20], [30], [25, 18, 11], [27], [45, 33, 50, 90], [1, 2, 3, 4, 5, 6, 7], [8], []]) == 8\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1,2], [3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]) == 10, \"Incorrect\"\nassert Find_Min_Length([[1,2,3,4,5], [2,3,4,5], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]) == 1, \"Incorrect\"\nassert Find_Min_Length([[1,2], [3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9,10]]) == 4, \"Incorrect\"\nassert Find_Min_Length([[1,2,3,4,5], [2,3,4,5], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]) == 1, \"Incorrect\"\nassert Find_Min_Length([[1,2,3,4,5], [2,3,4,5], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]) == 1, \"Incorrect\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n\ndef Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = [len(elem) for elem in lst]\n    return min(lengths)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5]]) == 2\nassert     Find_Min_Length([[1,2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2]]) == 3\nassert     Find_Min_Length([[1,2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5]]) == 2\nassert     Find_Min_Length([[1,2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5], [1, 2], [1, 2], [1, 2, 3], [2, 3, 4], [2, 3, 4, 5]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef Min_in_List(lst):  \n    '''\n    Write a python function to find the minimum value in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[1, 2, 3, 4], [5], [6, 7, 8, 9, 10]]) == 6, \"incorrect\"\nassert Find_Min_Length([[1, 2, 3, 4], [5], [6, 7, 8, 9, 10], []]) == 6, \"incorrect\"\nassert Find_Min_Length([[1, 2, 3, 4], [5], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]) == 1, \"incorrect\"\nassert Find_Min_Length([[1, 2, 3, 4], [5], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]) == 3, \"incorrect\"\nassert Find_Min_Length([[1, 2, 3, 4], [5], [6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], []]) == 3, \"incorrect\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[10], [20], [30], [40], [50], [60], [70], [80], [90], [100]]) == 1\nassert     Find_Min_Length([[10], [20], [30], [40], [50], [60], [70], [80], [90], [100], [110], [120], [130], [140], [150], [160], [170], [180], [190], [200], [210], [220], [230], [240], [250], [260], [270], [280], [290], [300], [310], [320], [330], [340], [350], [360], [370], [380], [390], [400], [410], [420], [430], [440], [450], [460], [470], [480], [490], [500], [510], [520], [530], [540], [550], [560], [570], [580], [590], [600], [610], [620], [630], [640], [650], [660], [670], [680], [690], [700], [710], [720], [730], [740], [750], [760], [770], [780], [790], [800], [810], [820], [830], [840], [850], [860], [870], [880], [890], [900], [910], [920], [930], [940], [950], [960], [970], [980], [990], [1000]]) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     divisor(1) == 1\nassert     divisor(2) == 2\nassert     divisor(3) == 3\nassert     divisor(4) == 4\nassert     divisor(5) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    '''\n    Write a python program to test your divisor function.\n    '''\n    print(divisor(24))\n    print(divisor(81))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    '''\n    Read the input and call the divisor function.\n    '''\n    pass\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n\ndef divisor_2(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n\n\ndef divisor_3(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    return math.floor(n/2+1)\n\n\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is a prime or not.\n    '''\n    import math\n    if n <= 1:\n        return False\n    for i in range(2, math.floor(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given integer.\n    '''\n    import math\n    primes = []\n    for i in range(2, math.floor(math.sqrt(n)+1)):\n        if is_prime(i):\n            primes.append(i)\n    divisors = []\n    for i in primes:\n        while n % i == 0:\n            divisors.append(i)\n            n /= i\n    if n > 1:\n        divisors.append(n)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert divisor(13) == 6\n    assert divisor(0) == 0\n    assert divisor(1) == 1\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \n\ndef count_matches(list1, list2):\n    '''\n    Write a function to count the number of elements that match in two lists of the same size.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     frequency_lists([1,1,2,3,3,2,2,3,1,1,1]) ==     {1:3,2:3,3:2, \" \":1}\nassert     frequency_lists([1,1,1,1,1,1,1,1,2,2,2]) ==     {1:5, 2:2, \" \":1}\nassert     frequency_lists([\"a\",\"b\",\"a\",\"b\",\"b\",\"a\"]) ==     {'a': 2, 'b': 3, \" \": 1}\n\ndef intersect(list1, list2):\n    '''\n    Write a function to return common elements of two lists.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1, 2, 3], [4, 5], [6, 7, 8, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]) == {1:5, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1, 1:5}\nassert     frequency_lists([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3]]) == {1:9, 2:1, 3:1}\nassert     frequency_lists([[1, 2, 3], [4, 5, 6]]) == {1:2, 2:1, 3:1, 4:1, 5:1, 6:1}\n\ndef nested_lists(list1):\n    '''\n    Write a function to flatten a list of lists, returned in a list.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     frequency_lists([]) == {}\nassert frequency_lists([['a', 'b', 'c'], [1, 2, 3, 1, 2, 3]]) == {'a': 2, 'b': 2, 'c': 1, 1: 3, 2: 3, 3: 2}\n\nimport random\nimport itertools\nimport statistics\n\ndef create_random_list_of_lists(n):\n    '''\n    create a list of lists with the following specifications.\n    - length of each list (n) is a random integer in range [1, 100]\n    - each element in each list is a random integer in range [1, 100]\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     frequency_lists([1, 2, 3, 4, 5, 6, 7, 8, 9]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}, \\\n        \"frequency_lists incorrect for 1\"\nassert     frequency_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \\\n        {1: 4, 2: 4, 3: 4, 4: 4, 5: 4, 6: 4, 7: 4, 8: 4, 9: 4}, \\\n        \"frequency_lists incorrect for 2\"\nassert     frequency_lists([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     frequency_lists([[1, 2], [2, 1], [1, 2, 3], [3, 2, 1, 1]]) == {1: 2, 2: 3, 3: 2}\nassert     frequency_lists([[1, 2, 3, 1, 2, 3], [1, 2, 1, 2, 3, 1], [1, 2, 3, 3, 3, 1]]) == {1: 4, 2: 3, 3: 4}\nprint(\"frequency_lists is OK\")\n\nprint(\"Assignment 3 is done? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n\ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1,2], [2,3], [3,4], [1,2], [2,3], [3,4], [1,2], [2,3], [3,4], [1,2], [2,3], [3,4], [1,2], [2,3], [3,4]]) ==     {1: 5, 2: 5, 3: 5, 4: 5}, 'Test Failed'\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     (multiply_num([1,2,3]) == 6) == True, \"wrong result\"\nassert     (multiply_num([1,2]) == 2) == True, \"wrong result\"\nassert     (multiply_num([1]) == 1) == True, \"wrong result\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     (multiply_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 12)\nassert     (multiply_num([1,2,3,4,5]) == 120)\nassert     (multiply_num([10,20,30,40,50,60,70,80,90]) == 9)\nassert     (multiply_num([10,20,30,40,50]) == 150)\nassert     (multiply_num([]) == 0)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     (multiply_num([1, 2, 3]) == 6)\nassert     (multiply_num([1, 2, 0, 4]) == 0)\nassert     (multiply_num([4, 0, 2, 2, 0]) == 8)\nassert     (multiply_num([1, 2, 3, -4]) == -24)\nprint(\"Exercise 17 is correct.\")\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5]) == 120\nassert     multiply_num([-1, -2, -3, -4, -5]) == -120\nassert     multiply_num([1, 1, 1, 1, 1]) == 5\n\ndef get_names_and_average_scores(scores, names):\n    '''\n    Write a function to get the names and average scores of the students.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (multiply_num([1, 2, 3]) == 6)\nassert     (multiply_num([1, -2, 3]) == -6)\nassert     (multiply_num([2, 2, 2]) == 8)\nassert     (multiply_num([-2, 3, 6]) == -12)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == \"0b0\"\nassert     decimal_to_binary(1) == \"0b1\"\nassert     decimal_to_binary(2) == \"0b10\"\nassert     decimal_to_binary(3) == \"0b11\"\nassert     decimal_to_binary(7) == \"0b111\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(100) == '1100100'\nassert     decimal_to_binary(101) == '1101101'\nassert     decimal_to_binary(10111) == '10110111'\nassert     decimal_to_binary(101111011) == '1110111101111011'\nprint('OK')\n\ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number (in string format) to its decimal equivalent, represented as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == '0b0'\nassert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(2) == '0b10'\nassert     decimal_to_binary(3) == '0b11'\nassert     decimal_to_binary(4) == '0b100'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(10) == '1010', 'wrong!'\nassert     decimal_to_binary(0) == '0', 'wrong!'\nassert     decimal_to_binary(15) == '1111', 'wrong!'\nassert     decimal_to_binary(35) == '100101', 'wrong!'\nprint('Almost done. Click \"Check\" to review your tests and earn cool rewards!')\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(7) == \"111\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == \"0\", \"Expected: 0, Actual: {}\".format(decimal_to_binary(0))\nassert     decimal_to_binary(1) == \"1\", \"Expected: 1, Actual: {}\".format(decimal_to_binary(1))\nassert     decimal_to_binary(2) == \"10\", \"Expected: 10, Actual: {}\".format(decimal_to_binary(2))\nassert     decimal_to_binary(3) == \"11\", \"Expected: 11, Actual: {}\".format(decimal_to_binary(3))\nassert     decimal_to_binary(4) == \"100\", \"Expected: 100, Actual: {}\".format(decimal_to_binary(4))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(6) == \"110\"\nassert     decimal_to_binary(7) == \"111\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(7) == '111'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1.2) == '1.2'\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(2) == '10', 'Test1: Wrong answer'\nassert     decimal_to_binary(5) == '101', 'Test2: Wrong answer'\nassert     decimal_to_binary(10) == '1010', 'Test3: Wrong answer'\nassert     decimal_to_binary(16) == '10000', 'Test4: Wrong answer'\nassert     decimal_to_binary(32) == '1001010', 'Test5: Wrong answer'\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(1) == 1\nassert     next_smallest_palindrome(99) == 99\nassert     next_smallest_palindrome(343) == 843\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(16) == 22\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(11) == 121\nassert     next_smallest_palindrome(101) == 121\nassert     next_smallest_palindrome(150) == 151\nassert     next_smallest_palindrome(100) == 101\nassert     next_smallest_palindrome(99) == 101\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(123) == 121\nassert     next_smallest_palindrome(1234) == 1233\nassert     next_smallest_palindrome(1235) == 1233\nassert     next_smallest_palindrome(1236) == 1235\nassert     next_smallest_palindrome(1331) == 1332\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(121) ==    123\nassert     next_smallest_palindrome(123) ==    124\nassert     next_smallest_palindrome(1231) ==    1233\nassert     next_smallest_palindrome(1233) ==    1234\nassert     next_smallest_palindrome(1234321) ==    12344321\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(999) == 1001\nassert     next_smallest_palindrome(22) == 33\nassert     next_smallest_palindrome(921) == 929\nassert     next_smallest_palindrome(926) == 929\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(12) == 121, \"Error\"\nassert     next_smallest_palindrome(13) == 131, \"Error\"\nassert     next_smallest_palindrome(14) == 141, \"Error\"\nassert     next_smallest_palindrome(15) == 151, \"Error\"\nassert     next_smallest_palindrome(16) == 161, \"Error\"\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(1) == 11\nassert     next_smallest_palindrome(11) == 121\nassert     next_smallest_palindrome(100) == 101\nassert     next_smallest_palindrome(101) == 111\nassert     next_smallest_palindrome(111) == 121\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (next_smallest_palindrome(8)) == 11, \"Expected 11, returned \" + str(next_smallest_palindrome(8))\nassert     (next_smallest_palindrome(7)) == 9, \"Expected 9, returned \" + str(next_smallest_palindrome(7))\nassert     (next_smallest_palindrome(812)) == 821, \"Expected 821, returned \" + str(next_smallest_palindrome(812))\nassert     (next_smallest_palindrome(11)) == 101, \"Expected 101, returned \" + str(next_smallest_palindrome(11))\nassert     (next_smallest_palindrome(1)) == 9, \"Expected 9, returned \" + str(next_smallest_palindrome(1))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(993) == 994\nassert     next_smallest_palindrome(9) == 9\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(1011) == 1012\nassert     next_smallest_palindrome(1001) == 1002\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert \nkth_element(arr = [1, 2, 3, 4, 5], k = 5) == 5\nassert \nkth_element(arr = [1, 2, 3, 4, 5], k = 1) == 1\nassert \nkth_element(arr = [1, 2, 3, 4, 5], k = 2) == 2\nassert \nkth_element(arr = [1, 2, 3, 4, 5], k = 3) == 3\nassert \nkth_element(arr = [1, 2, 3, 4, 5], k = 4) == 4\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef kth_element_3(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n\ndef kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     kth_element([1, 2, 3], 1) == 2, 'error'\nassert     kth_element([1, 2, 3], 2) == 3, 'error'\nassert     kth_element([1, 2, 3], 3) == 1, 'error'\nassert     kth_element([1, 2, 3], 4) == 0, 'error'\nassert     kth_element([1, 2, 3], 0) == 3, 'error'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 6\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 10\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 1\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 10\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     kth_element([1,2,3,4,5,6,7,8,9,10], 1) == 1\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 5) == 5\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 10) == 10\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 2) == 3\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 3) == 6\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 9\nassert     kth_element([2, 3, 7, 8, 9, 10, 11], 6) == 10\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef kth_element(arr, k):\n    return sorted(arr)[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     kth_element([3, 1, 2], 2) == 1\nassert     kth_element([5, 3, 7, 10, 2], 5) == 3\nassert     kth_element([2, 4, 6, 8, 1], 3) == 4\nassert     kth_element([1, 4, 6, 8, 10, 20, 30], 3) == 4\nassert     kth_element([1, 4, 6, 8, 10, 20, 30], 4) == 6\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_cASE') =='snakeCASE'\nassert     snake_to_camel('snake case') =='snakeCase'\nassert     snake_to_camel('snake case') =='snakeCase'\nassert     snake_to_camel('snake_case_case') =='snakeCaseCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     snake_to_camel('get_post') == 'getPost'\nassert     snake_to_camel('get_request') == 'getRequest'\nassert     snake_to_camel('get-request') == 'getRequest'\nassert     snake_to_camel('get_request_with_another_prefix') == 'getRequestWithAnotherPrefix'\nassert     snake_to_camel('_get_request_with_another_prefix') == 'getRequestWithAnotherPrefix'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case') =='snakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', \\\n        'Expected snake_to_camel(\"snake_case\") to be \"snakeCase\"'\nassert     snake_to_camel('snake_cAsE') =='snakeCase', \\\n        'Expected snake_to_camel(\"snake_cAsE\") to be \"snakeCase\"'\nassert     snake_to_camel('snake_cASe') =='snakeCase', \\\n        'Expected snake_to_camel(\"snake_cASe\") to be \"snakeCase\"'\nassert     snake_to_camel('snake_cAsE_123') =='snakeCase123', \\\n        'Expected snake_to_camel(\"snake_cAsE_123\") to be \"snakeCase123\"'\nassert     snake_to_camel('snake_case_123') =='snakeCase123', \\\n        'Expected snake_to_camel(\"snake_case_123\") to be \"snakeCase123\"'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     snake_to_camel('i_am_a_snake') == 'iAmASnake'\nassert     snake_to_camel('i_am_a_snake_2') == 'iAmASnake2'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake case') =='snakeCase'\nassert     snake_to_camel('snake_case_2') =='snakeCase2'\nassert     snake_to_camel('snake_case_3') =='snakeCase3'\n\ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     snake_to_camel('hello_world') == 'helloWorld'\nassert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('__private_method') == 'privateMethod'\nassert     snake_to_camel('getHTTPResponseCode') == 'getHTTPResponseCode'\nassert     snake_to_camel('get_http_response_code') == 'getHTTPResponseCode'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_2') =='snakeCase2'\nassert     snake_to_camel('snake_case_3') =='snakeCase3'\nassert     snake_to_camel('snake case') =='snakeCase'\nassert     snake_to_camel('snake case 2') =='snakeCase2'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert \n\ndef snake_to_pascal(word):\n    '''\n    Write a function to convert a snake case string to Pascal case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     eulerian_num(1, 2) == 2, \\\n        'Incorrect output for 1, 2. Expected: 2'\nassert     eulerian_num(7, 9) == 1, \\\n        'Incorrect output for 7, 9. Expected: 1'\nassert     eulerian_num(9, 7) == 3, \\\n        'Incorrect output for 9, 7. Expected: 3'\n\ndef eulerian_num_test():\n    '''\n    Run tests for eulerian_num\n    '''\n    print('Testing eulerian_num...')\n    assert eulerian_num(1, 2) == 2, \\\n        'Incorrect output for 1, 2. Expected: 2'\n    "
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     eulerian_num(4, 3) == 6, \"Wrong.\"\nassert     eulerian_num(6, 4) == 36, \"Wrong.\"\nassert     eulerian_num(8, 4) == 92, \"Wrong.\"\nassert     eulerian_num(12, 6) == 896, \"Wrong.\"\nassert     eulerian_num(15, 5) == 1260, \"Wrong.\"\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 1) == 0\nassert     eulerian_num(3, 1) == 1\nassert     eulerian_num(4, 1) == 1\nassert     eulerian_num(5, 1) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     eulerian_num(1, 0) == False\nassert     eulerian_num(0, 1) == False\nassert     eulerian_num(1, 1) == True\nassert     eulerian_num(5, 2) == False\nassert     eulerian_num(5, 2) == False\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(3, 3) == 2\nassert     eulerian_num(4, 4) == 2\nassert     eulerian_num(5, 5) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     eulerian_num(4, 0) == 1, 'Wrong answer'\nassert     eulerian_num(4, 1) == 0, 'Wrong answer'\nassert     eulerian_num(4, 2) == 1, 'Wrong answer'\nassert     eulerian_num(4, 3) == 1, 'Wrong answer'\nassert     eulerian_num(4, 4) == 0, 'Wrong answer'\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     eulerian_num(2, 2) == 1\nassert     eulerian_num(2, 3) == 0\nassert     eulerian_num(3, 2) == 2\nassert     eulerian_num(3, 3) == 1\nassert     eulerian_num(4, 3) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     sort_sublists(['a', 'z', 'c', 'x', 'a', 'f', 'd', 'b']) == [['a', 'a', 'a', 'b', 'c', 'd', 'f', 'x'], ['a', 'z'], ['x', 'z']]\nassert     sort_sublists(['a', 'z', 'c', 'x', 'a', 'f', 'd', 'z', 'b']) == [['a', 'a', 'a', 'b', 'c', 'd', 'f', 'x', 'z'], ['a', 'z'], ['x', 'z']]\nassert     sort_sublists(['a', 'z', 'c', 'x', 'a', 'z', 'd', 'b']) == [['a', 'a', 'a', 'b', 'c', 'd', 'z', 'x'], ['a', 'z'], ['x', 'z']]\nassert     sort_sublists(['a', 'z', 'c', 'x', 'a', 'z', 'd', 'z', 'b']) == [['a', 'a', 'a', 'b', 'c', 'd', 'z', 'x', 'z'], ['a', 'z'], ['x', 'z']]\nassert     sort_sublists(['a', 'z', 'c', 'x', 'a', 'z', 'd', 'z', 'b', 'a', 'z', 'a']) == [['a', 'a', 'a', 'b', 'c', 'd', 'z', 'x', 'z', 'a', 'z'], ['a', 'z'], ['x', 'z'], ['a', 'z']]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n    \nif __name__ == '__main__':\n    # test sort_sublists\n    \n    test_list = [\n        [],\n        ['a'],\n        ['b'],\n        ['a', 'b'],\n        ['a', 'b', 'c'],\n        ['a', 'c', 'b'],\n    ]\n\n    test_list_expected = [\n        [],\n        ['a'],\n        ['b'],\n        ['b', 'a'],\n        ['b', 'c', 'a'],\n        ['c', 'b', 'a'],\n    ]\n\n    for i, sublist in enumerate(test_list):\n        try:\n            assert sort_sublists(sublist) == test_list_expected[i]\n        except AssertionError:\n            print(f'Wrong on test_list[{i}]: {test_list[i]}!= {test_list_expected[i]}')\n            \n    print('sort_sublists passed')\n    "
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g']]) == [['a', 'b', 'c'], ['d', 'e'], ['f', 'g']]\nassert     sort_sublists([[1, 2, 3], [4], [5, 6, 7, 8]]) == [[1, 2, 3], [4], [5, 6, 7, 8]]\nassert     sort_sublists([['apple', 'banana'], [1, 2, 3, 4, 5], ['orange', 'lemon']]) == [['apple', 'banana'], [1, 2, 3, 4, 5], ['orange', 'lemon']]\nassert     sort_sublists([['apple', 'banana', 'grapes'], [1, 2, 3, 4, 5], ['orange', 'lemon']]) == [['apple', 'banana', 'grapes'], [1, 2, 3, 4, 5], ['orange', 'lemon']]\nassert     sort_sublists([['apple', 'banana', 'grapes', 'kiwi','mango'], [1, 2, 3, 4, 5], ['orange', 'lemon']]) == [['apple', 'banana', 'grapes', 'kiwi','mango'], [1, 2, 3, 4, 5], ['orange', 'lemon']]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert \nassert\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     sort_sublists([['X', 'A', 'B', 'F'], ['M', 'K', 'J', 'Z'], ['W', 'T', 'C', 'E']]) == \\\n        [['A', 'B', 'F', 'X'], ['M', 'K', 'J', 'Z'], ['W', 'T', 'C', 'E']]\n\nprint('Hints for 4.1 (Jobs and Students) question:\\n', 'Hint 1:', 'Hint 2:', 'Hint 3:', 'Hint 4:', sep = '\\n')\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     sort_sublists([[\"pink\", \"green\"], [\"red\", \"black\"], [\"blue\", \"orange\"]]) ==     \\\n        [[[\"blue\", \"orange\"], [\"red\", \"black\"]], [[\"pink\", \"green\"]]]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     sort_sublists([['f', 'a', 'z', 'd', 'e'], ['a', 'f', 'z', 'd', 'e'], ['a', 'f', 'z', 'd', 'e'], ['a', 'f', 'z', 'd', 'e']]) \\\n        == ['a', 'a', 'a', 'a', 'a', 'a', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', '"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     count([True, False, False, True, False]) == 2, \"Case 1\"\nassert     count([True, False, False, True, True]) == 3, \"Case 2\"\nassert     count([True, False, False, False]) == 1, \"Case 3\"\nassert     count([False]) == 1, \"Case 4\"\nassert     count([]) == 0, \"Case 5\"\nprint(\"count() Function check passed\")\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     count([True, False, False, True, True, False]) == 3\nassert     count([True, False, False, False]) == 1\nassert     count([]) == 0\nassert     count([2,3,4,5]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     count([True, True, False, False]) == 2\nassert     count([True, False, True, False]) == 1\nassert     count([]) == 0\nassert     count([True, True, False, True, False]) == 2\nassert     count([True, True, False]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     count([True, False, True, True, False]) == 3\nassert     count([False, False, False, True]) == 1\nassert     count([True, True, False, True, True, True, False]) == 6\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     count([True, False, True, True, False, True, False, False, True, True, False, True, False]) == 10\nassert     count([False, False, False]) == 3\nassert     count([]) == 0\nassert     count([0, 1, 2, 3]) == 4\nassert     count([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]) == 12\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     count([True, False, False, True, True, True, True, False, True, True, True, False, False, False, True, True, True, False, False, True, True, False]) == 11\nassert     count([True, False, False, True, True, False, True, False, True, True, True, False, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, False, True]) == 14\nassert     count([True, False, False, True, True, False, True, False, True, True, True, False, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, False, True]) == 16\nassert     count([True, False, False, True, True, False, True, False, True, True, True, False, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, False, True, True, False, False, True, True, False, False, True, False, True, True, False, False, True, True, False, False, True, False, True, True, False, True, True, False, False, True, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, False, True, False, True, True, False, False, False, True, True, False, False, True, True, False, False, False, True, True, False, False, True, True, False, False, True, False, False, True, True, False, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, True, True, False, False, Tru"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     count([True, True, False, True, False, True]) == 3\nassert     count([True, True, False, False, False, True, False, True]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     count([]) == 0, \"Empty list\"\nassert     count([True, False, True]) == 2, \"Counts the number of True values\"\nassert     count([False, False, False, False, False, False]) == 6, \"Counts the number of False values\"\nassert     count([True, False, True, False]) == 2, \"Counts the number of True values\"\nassert     count([True, True, True, True]) == 4, \"Counts the number of True values\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     count([True, False, False, True, True]) == 3, 'incorrect'\nassert     count([False, False, False, False, False]) == 5, 'incorrect'\nassert     count([]) == 0, 'incorrect'\nassert     count([0, 1, 2, 3]) == 0, 'incorrect'\nassert     count([0, '', [], False, (), 0.0]) == 0, 'incorrect'\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     count([True, True, False, True, False]) == 2\nassert     count([True, True, False]) == 2\nassert     count([True, True, False, False]) == 1\nassert     count([True, True, False, False, False, True]) == 2\nassert     count([]) == 0\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     add_lists(['a', 'b'], ['c', 'd']) == ['a', 'b', 'c', 'd']\nassert     add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nprint('add_lists success')\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     (add_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6])\nassert     (add_lists([1, 2, 3], [4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7])\nassert     (add_lists([], [4, 5, 6, 7]) == [4, 5, 6, 7])\nprint(\"add_lists passed\")\n\ndef add_dicts(test_dict, test_dict2):\n    '''\n    Write a function to add 2 dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     add_lists([1,2], (1,2)) == [(1,2),(1,2)]\nassert     add_lists([1,2], (1,2,3)) == [(1,2),(1,2,3)]\nassert     add_lists([1,2], (1,2,3,4)) == [(1,2),(1,2,3,4)]\nprint('Passed')\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert \n\ndef print_tuple(test_tup):\n    '''\n    Write a function to print all elements of the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     add_lists(['a', 'b', 'c'], [(1, 2, 3), (4, 5, 6), (7, 8, 9)]) \\\n    == [(1, 2, 3), (4, 5, 6), (7, 8, 9), 'a', 'b', 'c']\nassert     add_lists([], (1, 2, 3)) \\\n    == (1, 2, 3)\nassert     add_lists([], ()) \\\n    == ()\nassert     add_lists([], ()) \\\n    == ()\nprint('Exercise 2: SUCCESS!')\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     add_lists(['1', '2', '3'], ('4', '5', '6')) == ['1', '2', '3', '4', '5', '6']\nassert     add_lists(['1', '2', '3'], [('4', '5', '6')]) == ['1', '2', '3', '4', '5', '6']\nassert     add_lists([], (('1', '2', '3'),)) == ['1', '2', '3']\nassert     add_lists([], []) == []\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     add_lists([1, 2, 3], [(3, 4, 5), (6, 7, 8)]) \n        == [(3, 4, 5), (6, 7, 8), 1, 2, 3], \\\n        \"Not correct result\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (add_lists([1, 2, 3], [(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8)])\nassert     (add_lists([1, 2, 3], [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == [(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)])\n\nprint('You are all set!')"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     add_lists([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]\nassert     add_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     add_lists([1, 2, 3, 4, 5], [6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     add_lists([1, 2, 3, 4, 5], [6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n\ndef check_in(test_list, test_tup):\n    '''\n    Write a function to check if the given list contains the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3], (4, 5, 6))\nassert     add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3], (4, 5, 6))\n\ndef get_list_from_tup(test_tup):\n    '''\n    Write a function to get the list from given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,3,5], [2,4,6], [0,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n\ndef list_to_tree(L):\n    '''\n    Convert a Python list to a tree.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert \n\ndef bubble_sort(l):\n    '''\n    Write a function which will sort an input list using the Bubble Sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,3,6], [1,2,7], [1,4,8]) == [1, 1, 1, 2, 3, 4, 6, 7, 8], \"merge_sorted_list failed\"\n\ndef merge_sorted_list2(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    \n    # create three empty list \n    new_list = []\n    \n    # loop through the three list and compare the minimum \n    # of each list and put the smallest element into new list\n    for i in range(len(num1)):\n        if num1[i] <= num2[i] and num1[i] <= num3[i]:\n            new_list.append(num1[i])\n        elif num2[i] <= num1[i] and num2[i] <= num3[i]:\n            new_list.append(num2[i])\n        else:\n            new_list.append(num3[i])\n    return new_list\n    "
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     merge_sorted_list([1,2,3], [5,7,9], [4,6,8]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,3,5], [2,4,6], [0,8,9]) == [0,1,2,3,4,5,6,8,9]\nassert     merge_sorted_list([2,4,6], [1,3,5], [0,8,9]) == [0,1,2,3,4,5,6,8,9]\nassert     merge_sorted_list([0,8,9], [2,4,6], [1,3,5]) == [0,1,2,3,4,5,6,8,9]\nassert     merge_sorted_list([2,4,6], [0,8,9], [1,3,5]) == [0,1,2,3,4,5,6,8,9]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     merge_sorted_list([], [], []) == []\nassert     merge_sorted_list([], [1, 2, 3], []) == [1, 2, 3]\nassert     merge_sorted_list([], [1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     merge_sorted_list([1, 2, 3], [], []) == [1, 2, 3]\nassert     merge_sorted_list([1, 2, 3], [4, 5, 6], []) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([-1,2,3], [4,5,6], [7,8,9]) == [-1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2,3], [-1,4,6], [7,8,9]) == [-1,1,2,3,4,6,7,8,9]\nassert     merge_sorted_list([0,2,3], [-1,4,6], [7,8,9]) == [-1,0,2,3,4,6,7,8,9]\nassert     merge_sorted_list([1,3,5], [2,4,6], [0,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1, 2, 3, 4], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]) == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\ndef merge_sorted_list_1(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_num = []\n    list_num.extend(num1)\n    list_num.extend(num2)\n    list_num.extend(num3)\n    list_num = sorted(list_num)\n    return list_num\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([0, 3, 4, 31], [4, 6, 30], []) == [0, 3, 4, 4, 6, 30, 31]\nassert     merge_sorted_list([], [4, 6, 30], [0, 3, 4, 31]) == [0, 3, 4, 4, 6, 30, 31]\nassert     merge_sorted_list([0, 3, 4, 31], [], [4, 6, 30]) == [0, 3, 4, 4, 6, 30, 31]\nassert     merge_sorted_list([0], [], []) == [0]\nassert     merge_sorted_list([], [], []) == []\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,3,5,7], [2,4,6,8], [0,9,10,11,12,13]) == [0,1,2,3,4,5,6,7,8,9,10,11,12,13]\nprint(\"Pass test\")\n\ndef merge_k_sorted_list(lists):\n    '''\n    Write a function to merge k sorted lists into one sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef merge_sorted_list_v2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     odd_Equivalent(\"100101\",3) == 6\nassert     odd_Equivalent(\"11101\",4) == 8\nassert     odd_Equivalent(\"11101\",5) == 8\nassert     odd_Equivalent(\"11101\",6) == 8\nassert     odd_Equivalent(\"11101\",7) == 8\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     odd_Equivalent('1100', 0) == 2\nassert     odd_Equivalent('1100', 1) == 3\nassert     odd_Equivalent('1100', 2) == 5\nassert     odd_Equivalent('1100', 3) == 5\nassert     odd_Equivalent('1100', 4) == 5\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     odd_Equivalent('010',2) == 2, 'error'\nassert     odd_Equivalent('101010',2) == 6, 'error'\nassert     odd_Equivalent('101010',10) == 60, 'error'\nassert     odd_Equivalent('101010',3) == 12, 'error'\nprint('correct')\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     odd_Equivalent(\"0110111\", 3) == 4, \"Wrong output\"\nassert     odd_Equivalent(\"101101\", 2) == 6, \"Wrong output\"\n\nprint(\"Correctness of odd_Equivalent\")\n\n\ndef repeat_str(s, n):\n    '''\n    Write a python function to return the number of times the character 'a' appears in the binary string.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     odd_Equivalent('11010',1) == 4, 'Incorrect output'\nassert     odd_Equivalent('11010',2) == 12, 'Incorrect output'\nassert     odd_Equivalent('11010',3) == 36, 'Incorrect output'\nassert     odd_Equivalent('11010',4) == 68, 'Incorrect output'\nprint('All tests passed')"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (odd_Equivalent('010',2)==2)\nassert     (odd_Equivalent('10010',3)==3)\nassert     (odd_Equivalent('101010',10)==5)\nassert     (odd_Equivalent('101010',11)==5)\nassert     (odd_Equivalent('101010',-11)==5)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     odd_Equivalent('101',1) == '101'\nassert     odd_Equivalent('101',2) == '100'\nassert     odd_Equivalent('101',3) == '010'\nassert     odd_Equivalent('101',4) == '110'\nassert     odd_Equivalent('101',5) == '101'\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert \n    "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     odd_Equivalent(\"11101\",1) == 3 \nassert     odd_Equivalent(\"11101\",3) == 4\nassert     odd_Equivalent(\"11101\",0) == 0\nassert     odd_Equivalent(\"11101\",4) == 5\n\nprint(\"Passed\""
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     odd_Equivalent('10110', 2) ==     2, \"The odd_Equivalent of 10110 should be 2\"\nassert     odd_Equivalent('10110', 4) ==     4, \"The odd_Equivalent of 10110 should be 4\"\nassert     odd_Equivalent('1011011', 1) ==     4, \"The odd_Equivalent of 1011011 should be 4\"\nassert     odd_Equivalent('1011011', 4) ==     4, \"The odd_Equivalent of 1011011 should be 4\"\nassert     odd_Equivalent('1111101101', 0) ==     2, \"The odd_Equivalent of 111101101 should be 2\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[[1,2,3],[3,4,5,6,7],[4,5,6,7]],[[1,3,6],[3,4,7,8],[4,6,7,8]]]) == [1,3,6,7]\nassert     common_in_nested_lists([[[1,2,3],[3,4,5,6,7],[4,5,6,7]],[[1,3,6],[3,4,7,8],[4,6,7,8]]], recursion=True) == [1,3,6,7]\nassert     common_in_nested_lists([[[1,2,3],[3,4,5,6,7],[4,5,6,7]],[[1,3,6],[3,4,7,8],[4,6,7,8]]], recursion=False) == [1,3,6,7]\nassert     common_in_nested_lists([[[1,2,3],[3,4,5,6,7],[4,5,6,7]],[[1,3,6],[3,4,7,8],[4,6,7,8]]]) == [1,3,6,7]\nassert     common_in_nested_lists([[[1,2,3],[3,4,5,6,7],[4,5,6,7]],[[1,3,6],[3,4,7,8],[4,6,7,8]],[[1,2,3],[3,4,5,6,7],[4,5,6,7]],[[1,3,6],[3,4,7,8],[4,6,7,8]]], recursion=True) == [1,3,6,7]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1, 2, 3, 4], [3, 4, 5, 6], [7, 8, 9]]) == [3, 4]\nassert     common_in_nested_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]) == []\nassert     common_in_nested_lists([[1, 2, 3, 4], [], [7, 8, 9]]) == []\nassert     common_in_nested_lists([]) == []\nassert     common_in_nested_lists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[1, 2, 3, 4, 5], [2, 4, 6], [4, 7, 8], [1, 3]]) == [1, 2, 4], 'incorrect'\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [2, 4, 6], [4, 7, 8], [1, 3, 2], [1, 2]]) == [1, 2], 'incorrect'\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [2, 4, 6], [4, 7, 8], [1, 3, 2, 5, 6], [1, 2, 3, 6, 8]]) == [1, 2, 3, 6], 'incorrect'\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [2, 4, 6], [4, 7, 8], [1, 3, 2, 5, 6], [1, 2, 3, 6, 8], [1, 3], [2, 3, 4, 7, 8]]) == [1, 2, 3, 6], 'incorrect'\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [2, 4, 6], [4, 7, 8], [1, 3, 2, 5, 6], [1, 2, 3, 6, 8], [1, 3], [2, 3, 4, 7, 8], [2, 5, 6, 7, 8]]) == [2, 5, 6], 'incorrect'\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1,2,3,4], [2,3], [2,3,4,5,6]]) == [2,3,4]\nassert     common_in_nested_lists([[1,2,3,4], [2,3], [2,3,4,5,6], [3,4,5,6,7]]) == [2,3,4]\nassert     common_in_nested_lists([[1,2,3,4], [2,3], [2,3,4,5,6], [3,4,5,6,7], [3,4,5,6,7,8]]) == [2,3,4]\nassert     common_in_nested_lists([[1,2,3,4], [2,3,4], [3,4,5,6,7]]) == [2,3,4]\nassert     common_in_nested_lists([[1,2,3,4], [2,3,4], [3,4,5,6,7], [3,4,5,6,7,8]]) == [2,3,4]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     [1, 2, 3, 4] == common_in_nested_lists([[1, 2, 3, 4], [2, 3, 4, 5]])\nassert     [] == common_in_nested_lists([[1, 2, 3, 4], [2, 3, 4, 5], [1]])\nassert     [1, 2, 3, 4] == common_in_nested_lists([[1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4]])\nassert     [] == common_in_nested_lists([[1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4]])\nassert     [] == common_in_nested_lists([[1, 2, 3, 4], [1, 2, 3, 4]])\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1, 2, 3, 4], [3, 4, 5], [6, 7, 8]]) == [3, 4]\nassert     common_in_nested_lists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == [1, 2, 3, 4]\nassert     common_in_nested_lists([[1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3, 4], [1, 2], [1, 2, 3, 4]]) == [1, 2]\nassert     common_in_nested_lists([[1, 2], [1, 2, 3, 4], [1, 2, 3, 4]]) == [1, 2]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([1, 2, 3, [1, 2, 4]], [1, 2, 3, [1, 2, 4]]) == [1, 2]\nassert     common_in_nested_lists([1, 2, 3, [1, 2, 4]], [1, 2, 3, [1, 2, 4, 8]]) == [1, 2]\nassert     common_in_nested_lists([1, 2, 3, [1, 2, 4]], [1, 2, 3, [1, 2, 4, 7]]) == [1, 2]\nassert     common_in_nested_lists([1, 2, 3, [1, 2, 4]], [1, 2, 3, [1, 2, 4, 9]]) == [1, 2, 4]\nassert     common_in_nested_lists([1, 2, 3, [1, 2, 4]], [1, 2, 3, [1, 2, 7, 9]]) == [1, 2, 7]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5] == common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1], [1]])\nassert     [1, 2, 3] == common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1], [1], [1], [1], [1]])\nassert     [] == common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1], [1], [1], [1], [1], [1], [1], [1]])\nassert     [1, 2] == common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]])\nassert     [1, 2, 3] == common_in_nested_lists([[1, 2, 3], [1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     (common_in_nested_lists([1,2,3,4],[4,1,2,5],[6,3,4,1,2,3,5]) == [1,2,3,4])\nassert     (common_in_nested_lists([1,2,3,4],[4,1,2,5],[6,3,4,1,2,3,5]) == [4,1,2,5])\nassert     (common_in_nested_lists([1,2,3,4],[4,1,2,5],[6,3,4,1,2,3,5]) == [1,2,3,4,5])\nassert     (common_in_nested_lists([1,2,3,4],[4,1,2,5],[6,3,4,1,2,3,5]) == [1,2,3,4,5])\nassert     (common_in_nested_lists([1,2,3,4],[4,1,2,5],[6,3,4,1,2,3,5]) == [1,2,3,4,5])\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     set(common_in_nested_lists([[1, 3, 4, 5], [2, 3, 5, 7], [1, 2, 3, 4]])) == set([1, 2, 3, 4, 5])\nassert     set(common_in_nested_lists([[1, 3, 4, 5], [2, 3, 5, 7], [1, 2, 3, 4], [1]])) == set([1])\nassert     set(common_in_nested_lists([[1, 3, 4, 5], [2, 3, 5, 7], [1, 2, 3, 4], [1, 2]])) == set([1, 2])\nassert     set(common_in_nested_lists([[1, 3, 4, 5], [2, 3, 5, 7], [1, 2, 3, 4], [1, 2, 3]])) == set([1, 2, 3])\nassert     set(common_in_nested_lists([[1, 3, 4, 5], [2, 3, 5, 7], [1, 2, 3, 4], [1, 2, 3, 4, 5]])) == set([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     check_integer(\"1\") == True, \"check_integer('1') failed\"\nassert     check_integer(\"+1\") == True, \"check_integer('+1') failed\"\nassert     check_integer(\"00\") == True, \"check_integer('00') failed\"\nassert     check_integer(\"0\") == True, \"check_integer('0') failed\"\nassert     check_integer(\"+0\") == True, \"check_integer('+0') failed\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     check_integer(\"5\") == True, \"check_integer('5') == True\"\nassert check_integer(\"-5\") == True, \"check_integer('-5') == True\"\nassert check_integer(\"\") == False, \"check_integer('') == False\"\nassert check_integer(\" \") == False, \"check_integer(' ') == False\"\nassert check_integer(\"+5\") == False, \"check_integer('+5') == False\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     check_integer(\"-2\") == False\nassert     check_integer(\"-1\") == True\nassert     check_integer(\"0\") == True\nassert     check_integer(\"1\") == True\nassert     check_integer(\"12\") == True\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     check_integer(\"-11111111111111111111111111111111111111111111111111111111111111111111111111111\") == False\nassert     check_integer(\"11111111111111111111111111111111111111111111111111111111111111111111111111111\") == False\nassert     check_integer
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     check_integer(\"1\") == True\nassert     check_integer(\"-1\") == True\nassert     check_integer(\"+1\") == True\nassert     check_integer(\"+1\") == True\nassert     check_integer(\"-1\") == True\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     (check_integer('100') == True), 'Check if the function returns True when the input is a number'\nassert     (check_integer('-100') == True), 'Check if the function returns True when the input is a number'\nassert     (check_integer('4.5') == False), 'Check if the function returns True when the input is a number'\nassert     (check_integer('abc') == False), 'Check if the function returns False when the input is a number'\nassert     (check_integer('100.5') == False), 'Check if the function returns True when the input is a number'\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('+2') == False\nassert     check_integer('a') == False\nassert     check_integer('a+2') == False\nassert     check_integer('1.2') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     (check_integer(\"12\") == True)\nassert     (check_integer(\"12.5\") == False)\nassert     (check_integer(\"-12\") == True)\nassert     (check_integer(\"+12\") == True)\nassert     (check_integer(\"-12.5\") == False)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     check_integer(\"s\") == False, \"Error!\"\nassert     check_integer(\"64\") == True, \"Error!\"\nassert     check_integer(\"+64\") == False, \"Error!\"\nassert     check_integer(\"-64\") == False, \"Error!\"\nassert     check_integer(\"(64)\") == False, \"Error!\"\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert \n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     empty_dit([\"{}\",{},(),[]],) == [True, True, True, True]\nassert     empty_dit([\"{1,2}\",{},(),[]]) == [False, True, True, True]\nassert     empty_dit([None, {}, {1:2}, []]) == [True, False, False, False]\nassert     empty_dit([None, {}, {1:2}, {3:4, 5:6}]) == [False, False, False, False]\n\n\ndef is_alnum(s):\n    '''\n    Write a Python function is_alnum that takes a string as input and returns True if the string is alphanumeric or False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     empty_dit([{},{},{}]) == True, \"Wrong output\"\nassert     empty_dit([{1:1},{},{}]) == False, \"Wrong output\"\nassert     empty_dit([{},{1:1},{}]) == False, \"Wrong output\"\nassert     empty_dit([{},{},{1:1}]) == False, \"Wrong output\"\nassert     empty_dit([{1:1},{1:1},{1:1}]) == True, \"Wrong output\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     empty_dit([{},{},{}]) == True, \"Wrong\"\nassert     empty_dit([{'a': 1}, {}, {}]) == True, \"Wrong\"\nassert     empty_dit([{},{'a': 1}, {}]) == True, \"Wrong\"\nassert     empty_dit([{},{},{'a': 1}]) == True, \"Wrong\"\nassert     empty_dit([{},{},{'a': 1, 'b': 2}]) == False, \"Wrong\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     empty_dit([{}, {}, {}]) == True\nassert     empty_dit([{1, 2}, {}, {}]) == False\nassert     empty_dit([{}, {}, {}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     empty_dit([{},{},{}])     == True, \"Empty dictionaries\"\nassert     empty_dit([{'a':1},{'a':1},{}])     == True, \"Empty dictionaries\"\nassert     empty_dit([{'a':1},{'a':1},{'a':1}])     == False, \"Not empty dictionaries\"\nassert     empty_dit([{},{},{'a':1}])     == False, \"Not empty dictionaries\"\nassert     empty_dit([{'a':1},{},{'a':1}])     == False, \"Not empty dictionaries\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     empty_dit([{}, {}, {}]) == True, \"Wrong answer\"\nassert     empty_dit([{1:2}, {}, {}]) == True, \"Wrong answer\"\nassert     empty_dit([{}, {1:2}, {}, {}]) == False, \"Wrong answer\"\nassert     empty_dit([{1:2}, {}, {}, {}]) == True, \"Wrong answer\"\nprint(\"empty_dit: OK\")\n\ndef remove_key(dic1, key1):\n    '''\n    Write a function to remove a specified key from all dictionaries in a list.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     empty_dit([{}, {}, {}]) == True, 'Fails'\nassert     empty_dit([{1:1}, {}, {}]) == False, 'Fails'\nassert     empty_dit([{}, {'a':1}, {}]) == False, 'Fails'\nassert     empty_dit([]) == True, 'Fails'\nprint('PASSED')"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     empty_dit([{},{}]) == True\nassert     empty_dit([{1:1},{}]) == False\nassert     empty_dit([{},{1:1}]) == False\nassert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:1},{},{}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     empty_dit([{}, {}, {}, {}]) == True, \"All dictionaries in the list are empty\"\nassert     empty_dit([{1,2}, {}, {}, {}]) == True, \"All dictionaries in the list are empty\"\nassert     empty_dit([{}, {1,2}, {}, {}]) == True, \"All dictionaries in the list are empty\"\nassert     empty_dit([{}, {}, {1,2}, {}]) == True, \"All dictionaries in the list are empty\"\nassert     empty_dit([{1,2}, {1,2}, {1,2}, {}]) == False, \"Not all dictionaries in the list are empty\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     empty_dit([{},{},{}]), True\nassert not empty_dit([{1,2},{},{}]), False\nassert not empty_dit([{},{1,2},{}]), False\n\ndef add_prices(basket):\n    '''\n    Write a function to add prices of all items in a basket.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345\nassert     tuple_to_int((1, 2)) == 12\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7)) == 1234567\nassert     tuple_to_int((1, 1, 2, 3, 4, 5, 6, 7)) == 1234567\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6, \"Check the example\"\nassert     tuple_to_int((1, 3, 3)) == 6, \"Check the example\"\nassert     tuple_to_int((1, 3, 3, 2)) == 6, \"Check the example\"\nassert     tuple_to_int((1, 3, 3, 2, 1)) == 6, \"Check the example\"\nassert     tuple_to_int((1, 3, 3, 2, 1, 3)) == 6, \"Check the example\"\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     tuple_to_int((9, 7, 3, 5, 3)) == 93731\nassert     tuple_to_int((1, 2, 3)) == 123\nassert     tuple_to_int((0, 0, 0, 0)) == 0\nassert     tuple_to_int((0, 0, 1, 2)) == 12\n\ndef turn_to_int(nums):\n    '''\n    Write a function to convert all the elements of a tuple into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     tuple_to_int((1,2,3,4,5)) == 12345\nassert     tuple_to_int((1,2,3,4,5)) == 12345\nassert     tuple_to_int((1,2,3,4,5)) == 12345\nassert     tuple_to_int((1,2,3,4,5)) == 12345\nassert     tuple_to_int((1,2,3,4,5)) == 12345\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 123\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 12345\nassert     tuple_to_int((0, 0, 0, 0, 0)) == 0\nassert     tuple_to_int((100, 1, 1, 1, 1)) == 10011\nassert     tuple_to_int((0,)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 123, 'incorrect'\nassert     tuple_to_int((4, 5)) == 15, 'incorrect'\nassert     tuple_to_int((6, 7, 8)) == 2468, 'incorrect'\nprint('PASSED: tuple_to_int')\n\ndef int_to_tuple(num):\n    '''\n    Write a function to convert a given single integer into a tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1,2,3,4,5)) == 12345\n\ndef int_to_tuple(num):\n    '''\n    Write a function to convert a given integer into a tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert tuple_to_int((1, 2)) == 3\nassert tuple_to_int((1, )) == 1\nassert tuple_to_int((5, 1, 2)) == 12\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 1541\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 1541 + 1542 + 1543 + 1544 + 1545 + 1546 + 1547 + 1548 + 1549\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)) == 1541 + 1542 + 1543 + 1544 + 1545 + 1546 + 1547 + 1548 + 1549 + 1550 + 1551 + 1552 + 1553 + 1554 + 1555\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 1541 + 1542 + 1543 + 1544 + 1545 + 1546 + 1547 + 1548 + 1549 + 1550 + 1551 + 1552 + 1553 + 1554 + 1555 + 1556 + 1557 + 1558 + 1559 + 1560\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)) == 1541 + 1542 + 1543 + 1544 + 1545 + 1546 + 1547 + 1548 + 1549 + 1550 + 1551 + 1552 + 1553 + 1554 + 1555 + 1556 + 1557 + 1558 + 1559 + 1560 + 1561 + 1562 + 1563 + 1564 + 1565 + 1566 + 1567 + 1568 + 1569 + 1570 + 1571 + 1572 + 1573 + 1574 + 1575 + 1576 + 1577 + 1578 + 1579 + 1580 + 1581 + 1582 + 1583 + 1584 + 1585 + 1586 + 1587 + 1588 + 1589 + 1590 + 1591 + 1592 + 1593 + 1594 + 1595 + 1596 + 1597 + 1598 + 1599 + 1600 + 1601 + 1602 + 1603 + 1604 + 1605 + 1606 + 1607 + 1608 + 1609 + 1610 + 1611 + 1612 + 1613 + 1614 + 1615 + 1616 + 1617 + 1618 + 1619 + 1620 + 1621 + 1622 + 1623 + 1624 + 1625 + 1626 + 1627 + 1628 + 1629 + 1630 + 1631 + 1632 + 1633 + 1634 + 1635 + 1636 + 1637 + 1638 + 1639 + 1640 + 1641 + 1642 + 1643 + 1644 + 1645 + 1646 + 1647 + 1648 + 1649 + 1650 + 1651 + 1652 + 1653 + 1654 + 1655 + 1656 + 1657 + 1658 + 1659 + 1660 + 1661 + 1662 + 1663 + 1664 + 1665 + 1666 + 1667 + 1668 + 1669 + 1670 + 1671 + 1672 + 1673 + 1674 + 1675 + 1676 + 1677 + 1678 + 1679 + 1680 + 1681 + 1682 + 1683 + 1684 + 1685 + 1686 + 1687 + 1688 + 1689 + 1690 + 1691 + 1692 + 1693 + 1694 + 1695 + 1696 + 1697 + 1698 + 1699 + 1700 + 1701 + 1702 + 1703 + 1704 + 1705 + 1706 + 1707 + 1708 + 1709 + 1710 + 1711 + 1712 + 1713 + 1714 + 1715 + 1716 + 1717 + 1718 + 1719 + 1720 + 1721 + 1722 + 1723 + 1724 + 1725 + 1726 + 1727 + 1728 + 1729 + 1730 + 1731 + 1732 + 1733 + 1734 + 1735 + 1736 + 1737 + 1738 + 1739 + 1740 + 1741 + 1742 + 1743 + 1744 + 1745 + 1746 + 1747 + 1748 + 1749 + 1750 + 1751 + 1752 + 1753 + 1754 + 1755 + 1756 + 1757 + 1758 + 1759 + 1760 + 1761 + 1762 + 1763 + 1764 + 1765 + 1766 + 1767 + 1768 + 1769 + 1770 + 1771 + 1772 + 1773 + 1774 + 1775 + 1776 + 1777 + 1778 + 1779 + 1780 + 1781 + 1782 + 1783 + 1784 + 1785 + 1786 + 1787 + 1788 + 1789 + 1790 + 1791 + 1792 + 1793 + 1794 + 1795 + 1796 + 1797 + 1798 + 1799 + 1800 + 1801 + 1802 + 1803 + 1804 + 1805 + 1806 + 1807 + 1808 + 1809 + 1810 + 1811 + 1812 + 1813 + 1814 + 1815 + 1816 + 1817 + 1818 + 1819 + 1820 + 1821 + 1822 + 1823 + 1824 + 1825 + 1826 + 1827 + 1828 + 1829 + 1830 + 1831 + 1832 + 1833 + 1834 + 1835 + 1836 + 1837 + 1838 + 1839 + 1840 + 1841 + 1842 + 1843 + 1844 + 1845 + 1846 + 1847 + 1848 + 1849 + 1850 + 1851 + 1852 + 1853 + 1854 + 1855 + 1856 + 1857 + 1858 + 1859 + 1860 + 1861 + 1862 + 1863 + 1864 + 1865 + 1866 + 1867 + 1868 + 1869 + 1870 + 1871 + 1872 + 1873 + 1874 + 1875 + 1876 + 1877 + 1878 + 1879 + 1880 + 1881 + 1882 + 1883 + 1884 + 1885 + 1886 + 1887 + 1888 + 1889 + 1890 + 1891 + 1892 + 1893 + 1894 + 1895 + 1896 + 1897 + 1898 + 1899 + 1900 + 1901 + 1902 + 1903 + 1904 + 1905 + 1906 + 1907 + 1908 + 1909 + 1910 + 1911 + 1912 + 1913 + 1914 + 1915 + 1916 + 1917 + 1918 + 1919 + 1920 + 1921 + 1922 + 1923 + 1924 + 1925 + 1926 + 1927 + 1928 + 1929 + 1930 + 1931 + 1932 + 1933 + 1934 + 1935 + 1936 + 1937 + 1938 + 1939 + 1940 + 1941 + 1942 + 1943 + 1944 + 1945 + 1946 + 1947 + 1948 + 1949 + 1950 + 1951 + 1952 + 1953 + 1954 + 1955 + 1956 + 1957 + 1958 + 1959 + 1960 + 1961 + 1962 + 1963 + 1964 + 1965 + 1966 + 1967 + 1968 + 1969 + 1970 + 1971 + 1972 + 1973 + 1974 + 1975 + 1976 + 1977 + 1978 + 1979 + 1980 + 1981 + 1982 + 1983 + 1984 + 1985 + 1986 + 1987 + 1988 + 1989 + 1990 + 1991 + 1992 + 1993 + 1994 + 1995 + 1996 + 1997 + 1998 + 1999 + 2000 + 2001 + 2002 + 2003 + 2004 + 2005 + 2006 + 2007 + 2008 + 2009 + 2010 + 2011 + 2012 + 2013 + 2014 + 2015 + 2016 + 2017 + 2018 + 2019 + 2020 + 2021 + 2022 + 2023 + 2024 + 2025 + 2026 + 2027 + 2028 + 2029 + 2030 + 2031 + 2032 + 2033 + 2034 + 2035 + 2036 + 2037 + 2038 + 2039 + 2040 + 2041 + 2042 + 2043 + 2044 + 2045 + 2046 + 2047 + 2048 + 2049 + 2050 + 2051 + 2052 + 2053 + 2054 + 2055 + 2056 + 2057 + 2058 + 2059 + 2060 + 2061 + 2062 + 2063 + 2064 + 2065 + 2066 + 2067 + 2068 + 2069 + 2070 + 2071 + 2072 + 2073 + 2074 + 2075 + 2076 + 2077 + 2078 + 2079 + 2080 + 2081 + 2082 + 2083 + 2084 + 2085 + 2086 + 2087 + 2088 + 2089 + 2090 + 2091 + 2092 + 2093 + 2094 + 2095 + 2096 + 2097 + 2098 + 2099 + 2100 + 2101 + 2102 + 2103 + 2104 + 2105 + 2106 + 2107 + 2108 + 2109 + 2110 + 2111 + 2112 + 2113 + 2114 + 2115 + 2116 + 2117 + 2118 + 2119 + 2120 + 2121 + 2122 + 2123 + 2124 + 2125 + 2126 + 2127 + 2128 + 2129 + 2130 + 2131 + 2132 + 2133 + 2134 + 2135 + 2136 + 2137 + 2138 + 2139 + 2140 + 2141 + 2142 + 214"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 12345\nassert     tuple_to_int((1, 2, 3, 4)) == 1234\nassert     tuple_to_int((1, 2, 3)) == 123\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1, 2, 3, 4, 5, 6)) == 12345\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     list_to_float([[1, 1.5], [2, 3.3], [4, 5], [6, 7.7]]) == \\\n        [[1.0, 1.5], [2.0, 3.3], [4.0, 5.0], [6.0, 7.7]], \"Wrong output\"\nprint(\"Exercise 3 is correct.\")\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     [1, 2, 3] == list_to_float([[1, 2, 3]])\nassert     [1.2, 3.4, 5.6] == list_to_float([[1.2], [3.4], [5.6]])\nassert     [1.2, 3.4, 5.6] == list_to_float([[1, 2, 3], [3, 4, 5], [5, 6, 7]])\nassert     [1, 2, 3] == list_to_float([[1, 2, 3], [3, 4, 5], [5, 6, 7], [1, 2, 3]])\nprint(\"list_to_float is correct.\")\n\n\ndef list_to_str(test_list):\n    '''\n    Write a function to convert all convertible elements in a list of lists to strings.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert     list_to_float([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [1, 2, 3, 4, 5], 'list_to_float'\nassert     list_to_float([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'list_to_float'\nassert     list_to_float([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [1, 2, 3, 4, 5, 6, 7], 'list_to_float'\nassert     list_to_float([[\"1\", \"2\", \"3\", \"4\", \"5\"], [\"6\", \"7\", \"8\", \"9\", \"10\"], [\"11\", \"12\", \"13\", \"14\", \"15\"]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 'list_to_float'\nassert     list_to_float([[\"1\", \"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\", \"8\"], [\"9\", \"10\", \"11\", \"12\"], [\"13\", \"14\", \"15\", \"16\"]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 'list_to_float'\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     list_to_float([[1,2,3], [4,5,6], [7,8,9], [10]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0]]\nassert     list_to_float([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0], [8.0], [9.0], [10.0]]\n\nassert     list_to_float([[1,2,3], [4,5,6], [7,8,9], [10]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0]]\nassert     list_to_float([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0], [8.0], [9.0], [10.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     list_to_float([[1.0, 3.14, 2.7], [3.3, -0.8]]) == [[1.0, 3.14, 2.7], [3.3, -0.8]], 'incorrect output'\nassert list_to_float([[1.0, 3.14, 2.7], ['3.3', -0.8]]) == None, 'incorrect output'\nassert list_to_float([1.0, 3.14, 2.7]) == None, 'incorrect output'\nassert list_to_float([[1.0, 3.14, 2.7], [3.3, -0.8, 3.14]]) == None, 'incorrect output'\nassert list_to_float([[1.0, 3.14, 2.7], [3.3, -0.8]]) == [[1.0, 3.14, 2.7], [3.3, -0.8]], 'incorrect output'\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     list_to_float([['1.0', '2.3', '4.4'], ['5.5'], ['-6.7', '8.9']]) == [[1.0, 2.3, 4.4], [5.5], [-6.7, 8.9]], \"Checking whether the function converts the elements of a list to float\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     list_to_float([[1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']]) == [1.0, 2.0, 3.0, 'a', 'b', 'c', 'x', 'y', 'z']\nassert     list_to_float([[1, 'a', 'b'], [2, 'c', 'd']]) == [1.0, 'a', 'b', 2.0, 'c', 'd']\nassert     list_to_float([[1, 2, 'x'], ['a', 'b', 3]]) == [1.0, 2.0, 'x', 'a', 'b', 3.0]\nassert     list_to_float([[1, 2, 'x'], ['a', 'b', 3], ['y', 'z']]) == [1.0, 2.0, 'x', 'a', 'b', 3.0, 'y', 'z']\nassert     list_to_float([]) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     list_to_float([[1, 2, 3], [4, 5, 6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([['1', '2', '3'], ['4', '5', '6']]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[True, False, True], [True, True, True]]) == [[1.0, 0.0, 1.0], [1.0, 1.0, 1.0]]\nassert     list_to_float([[None, None, None], [None, None, None]]) == [[None, None, None], [None, None, None]]\nassert     list_to_float([[0, 0, 0], [0, 0, 0]]) == [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     list_to_float(['1.5', '1.1', '1.2', '1.7']) ==     [1.5, 1.1, 1.2, 1.7]\nassert     list_to_float(['1.5', 'one', '1.2', 'one']) ==     [1.5, 1.0, 1.2, 1.0]\nassert     list_to_float(['one', '1.5', 'one', '1.2']) ==     [1.0, 1.5, 1.0, 1.2]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert     string_to_list('hello world') == ['hello','world']\nassert     string_to_list('hello   world') == ['hello', 'world']\nassert     string_to_list('hello') == ['hello']\nassert     string_to_list('hello') == ['hello']\nassert     string_to_list('   hello') == ['hello']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert     string_to_list('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') ==     [\n        '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']\nassert     string_to_list('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') ==     [\n        '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20']\n\ndef list_to_string(lst): \n    '''\n    Write a function to convert a list of strings back to a single string that is separated by a space.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert     string_to_list('abc def ghi jkl mno') == ['abc', 'def', 'ghi', 'jkl','mno'], 'String to list does not work'\n\n\ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a single string\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert     string_to_list(\"He is a handsome boy\") == ['He', 'is', 'a', 'handsome', 'boy']\nassert     string_to_list(\"One two three\") == ['One', 'two', 'three']\nassert     string_to_list(\"One  two three\") == ['One', 'two', 'three']\nassert     string_to_list(\"\") == []\nassert     string_to_list(\"one two three\") == ['one', 'two', 'three']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert     string_to_list('a b c') == ['a','b','c']\nassert     string_to_list('a  b c') == ['a', 'b', 'c']\nassert     string_to_list('a  b  c') == ['a', 'b', 'c']\nassert     string_to_list('a  b  c  d') == ['a', 'b', 'c', 'd']\nassert     string_to_list('a') == ['a']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert     string_to_list('abc') ==     ['abc']\nassert     string_to_list('ab cd') ==     ['ab', 'cd']\nassert     string_to_list('ab c d') ==     ['ab', 'c', 'd']\nassert     string_to_list('ab cd ef') ==     ['ab', 'cd', 'ef']\nassert     string_to_list('ab  c  d  e  f') ==     ['ab', 'c', 'd', 'e', 'f']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert     string_to_list(\"Hello World\") == ['Hello', 'World']\nassert     string_to_list(\"Hello\") == ['Hello']\nassert     string_to_list(\"Hello World\") == ['Hello', 'World']\nassert     string_to_list(\"\") == []\nassert     string_to_list(\"hello\") == ['hello']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert     string_to_list('this is a test') == ['this','is','a','test']\nassert     string_to_list('hi world') == ['hi','world']\nassert     string_to_list('   ') == []\nassert     string_to_list('1 2 3') == ['1','2','3']\nassert     string_to_list('1 2 3') == ['1','2','3']\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert     string_to_list('W3resource') == ['W3resource']\nassert     string_to_list('W3resource ') == ['W3resource']\nassert     string_to_list('W3resource ') == ['W3resource']\nassert     string_to_list('W3resource') == ['W3resource']\nassert     string_to_list('   W3resource  ') == ['W3resource']\n"
    }
]