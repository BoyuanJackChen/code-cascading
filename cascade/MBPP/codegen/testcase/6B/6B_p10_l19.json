[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     similar_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == True\nassert     similar_elements(('a', 'b'), ('a', 'c')) == False\nassert     similar_elements(('a', 'b', 'c'), ('c', 'b', 'a')) == True\nassert     similar_elements(('a', 'a', 'b'), ('a', 'a', 'a', 'a')) == True\nassert     similar_elements(('a', 'a', 'b'), ('b', 'a', 'a')) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     similar_elements([1, 1, 2, 3], [1, 1, 2, 3]) == [1, 1]\nassert     similar_elements([1, 1, 2, 3], [3, 2, 1, 3]) == [3]\nassert     similar_elements([1, 1, 2, 3], [2, 2, 3, 3]) == [2, 2]\nassert     similar_elements([3, 3, 3, 3], [2, 2, 3, 3]) == [3, 3]\nassert     similar_elements([], [1, 2]) == []\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     ('h','h','h') == similar_elements(('h','h','h'), ('h','h','h'))\nassert     ('h','a') == similar_elements(('h','h','a'), ('h','h','a'))\nassert     ('a','a','a') == similar_elements(('a','a','a'), ('a','a','a'))\nassert     ('a','b') == similar_elements(('a','a','b'), ('a','a','b'))\nassert     ('b','a') == similar_elements(('a','b','a'), ('a','b','a'))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     similar_elements(([1, 2, 3, 4, 5], [6, 7, 2, 1, 9]), \n                          ([4, 9, 1, 2, 3, 5], [2, 4, 6, 9, 1, 3])) == \\\n           [2, 4, 6, 9, 1, 3]\nassert     similar_elements(([1, 2, 3, 4, 5], [6, 7, 2, 1, 9]), \n                          ([4, 9, 1, 2, 3, 5], [2, 4, 6, 7, 9, 1])) == []\nassert     similar_elements(([1, 2, 3, 4, 5], [6, 7, 2, 1, 9]), \n                          ([4, 9, 1, 2, 3, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     similar_elements(('a', 'b'), ('c', 'b')) ==     'b'\nassert     similar_elements(('a', 'b'), ('b', 'a')) ==     'a'\nassert     similar_elements(('a', 'b'), ('c', 'd')) ==     'No similar elements'"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     similar_elements(([1, 2, 3], [1, 2, 3, 4]), ([1, 2], [1, 2, 3])) == \\\n        ([1, 2, 3, 4], [1, 2, 3])\nassert     similar_elements(([1, 2, 3, 4], [1, 2, 3]), ([1, 2], [1, 2, 3])) == \\\n        ([1, 2, 3, 4], [1, 2, 3])\nassert     similar_elements(([1, 2, 3, 4], [1, 2, 3]), ([1, 2], [1, 2, 3])) == \\\n        ([1, 2, 3, 4], [1, 2, 3])\nassert     similar_elements(([1, 2, 3, 4], [1, 2, 3]), ([1, 2], [1, 2, 3, 4])) == \\\n        ([1, 2, 3, 4], [1, 2, 3])\nassert     similar_elements(([1, 2, 3, 4], [1, 2, 3]), ([1, 2], [1, 2, 3, 4])) == \\\n        ([1, 2, 3, 4], [1, 2, 3])\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     similar_elements(('A', 'A', 'B', 'B', 'B'), ('A', 'B', 'B', 'B', 'A')) == True\nassert     similar_elements(('A', 'B', 'B', 'A'), ('A', 'B', 'B', 'A')) == True\nassert     similar_elements(('A', 'B', 'C', 'A', 'A'), ('A', 'B', 'C', 'A', 'A')) == False\nassert     similar_elements(('A', 'B', 'C', 'A'), ('A', 'B', 'C', 'A')) == False\nassert     similar_elements(('A', 'A', 'A', 'A', 'A', 'A'), ('A', 'A', 'A', 'A', 'A', 'A')) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     similar_elements(('alex', 'aval', 'alex', 'david'), \n                         ('alex', 'aval', 'alex', 'david')) == ('alex', 'alex', 'alex')\nassert     similar_elements(('alex', 'aval', 'alex', 'david'), \n                         ('alex', 'aval', 'alex', 'david')) == ('alex', 'alex', 'alex')\nassert     similar_elements(('alex', 'aval', 'alex', 'david'), \n                         ('alex', 'aval', 'alex', 'bond')) == ('alex', 'alex')\nassert     similar_elements(('alex', 'aval', 'alex', 'david'), \n                         ('alex', 'aval', 'alex', 'bond', 'christy')) == ('alex', 'alex')\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 2, 3]    == similar_elements( (1, 2, 3), (1, 2, 3) )\nassert     [1, 2, 3]    == similar_elements( (1, 2, 3), (1, 2, 3, 4, 5) )\nassert     [1, 2]    == similar_elements( (1, 2), (1, 2) )\nassert     [1]    == similar_elements( (1,), (1,) )\nassert     [1, 2, 3]    == similar_elements( (1, 2, 3), (2, 3, 1) )\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (similar_elements(test_tup1, test_tup2) ==     (5,5,5,5,5,5,5,5,5,5))\nassert     (similar_elements(test_tup1, test_tup2) ==     (5,5,5,5,5,5,5,5,5,5))\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\nassert     is_not_prime(6) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_not_prime(7) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(1) == True\nassert     is_not_prime(3) == False\nassert     is_not_prime(9) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_not_prime(1) == True\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_not_prime(1) == False\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(5) == False\nassert     is_not_prime(7) == False\nassert     is_not_prime(11) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_not_prime(5) == True\nassert     is_not_prime(1) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(3) == True\nassert     is_not_prime(4) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_not_prime(19) == True\nassert     is_not_prime(15) == False\nassert     is_not_prime(32) == True\nassert     is_not_prime(30) == False\nassert     is_not_prime(0) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_not_prime(3)\nassert not is_not_prime(5)\nassert not is_not_prime(7)\nassert is_not_prime(11)\nassert not is_not_prime(13)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_not_prime(2)\nassert     is_not_prime(3)\nassert     is_not_prime(5)\nassert     is_not_prime(7)\nassert     is_not_prime(11)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_not_prime(99) == True\nassert     is_not_prime(97) == False\nassert     is_not_prime(98) == False\nassert     is_not_prime(1) == True\nassert     is_not_prime(0) == True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hq.heapify([3,2,1,7,6,5,4]) == [7,6,5,4,3,2,1]\nassert     hq.heapify([3,2,1]) == [1,2,3]\nassert     hq.heapify([1,2,3]) == [3,2,1]\nassert     hq.heapify([]) == []\nassert     hq.heapify([4,3,2,1]) == [4,3,2,1]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [-1, 8, 2, 5, 3, 4, 5] == heap_queue_largest([-1, 8, 2, 5, 3, 4, 5], 5)\nassert     [2, 3, 4, 5, 5, 8, -1] == heap_queue_largest([-1, 8, 2, 5, 3, 4, 5], 7)\nassert     [2, 3, 4, 5, 5, 8, -1] == heap_queue_largest([-1, 8, 2, 5, 3, 4, 5], 8)\nassert     [5, 3, 4, 5, 5, 8, -1] == heap_queue_largest([-1, 8, 2, 5, 3, 4, 5], 1)\nassert     [5, 3, 4, 5, 5, 8, -1] == heap_queue_largest([-1, 8, 2, 5, 3, 4, 5], 0)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (hq.nlargest(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]) == [10, 9, 8])\nassert     (hq.nlargest(2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]) == [10, 9])\nassert     (hq.nlargest(1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]) == [10])\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [4,3,2,1] == heap_queue_largest([1,2,3,4],3)\nassert     [5,4,3,2] == heap_queue_largest([5,4,3,2,1],3)\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1,2,3,4,5] == hq.heap_queue_largest([1,2,3,4,5],4)\nassert     [5,4,3,2,1] == hq.heap_queue_largest([5,4,3,2,1],4)\nassert     [3,2,1] == hq.heap_queue_largest([3,2,1],3)\nassert     [] == hq.heap_queue_largest([],1)\nassert     [1,2,3,4,5] == hq.heap_queue_largest([5,4,3,2,1],5)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([3,2,1,5,6,4],2) == [6,5]\nassert     heap_queue_largest([3,2,1,5,6,4],3) == [5,6,4]\nassert     heap_queue_largest([3,2,1,5,6,4],4) == [5,6,4,3]\nassert     heap_queue_largest([3,2,1,5,6,4],5) == [5,6,4,3,2]\nassert     heap_queue_largest([3,2,1,5,6,4],6) == [5,6,4,3,2,1]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     heap_queue_largest([3,2,1,5,6,4],3) == [6,5,4], 'heap_queue_largest'\nassert     heap_queue_largest([],0) == [], 'heap_queue_largest'\nassert     heap_queue_largest([1],1) == [1], 'heap_queue_largest'\nassert     heap_queue_largest([3,2,1,5,6,4],2) == [6,5], 'heap_queue_largest'\nassert     heap_queue_largest([3,2,1,5,6,4],1) == [6], 'heap_queue_largest'\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hq.heapify(nums) == [4,5,2,3,1]\nassert     hq.heap_queue_largest(nums,3) == [4,5,3]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [9,6,7,2,1,5] == heap_queue_largest([9,6,7,2,1,5],5)\nassert     [7,6,5,2,1] == heap_queue_largest([7,6,5,2,1],5)\nassert     [2,1,5,6,7,9] == heap_queue_largest([2,1,5,6,7,9],5)\nassert     [1,5,6,7,9] == heap_queue_largest([1,5,6,7,9],5)\nassert     [9,7,5,6,2,1] == heap_queue_largest([9,7,5,6,2,1],5)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(4) == True\nassert     is_Power_Of_Two(31) == False\nassert     is_Power_Of_Two(32) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(0) == False, \"0 is not a power of two\"\nassert     is_Power_Of_Two(1) == True, \"1 is a power of two\"\nassert     is_Power_Of_Two(2) == False, \"2 is not a power of two\"\nassert     is_Power_Of_Two(3) == True, \"3 is a power of two\"\nassert     is_Power_Of_Two(4) == False, \"4 is not a power of two\"\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (is_Power_Of_Two(1)    == False)\nassert     (is_Power_Of_Two(2)    == False)\nassert     (is_Power_Of_Two(3)    == True)\nassert     (is_Power_Of_Two(4)    == True)\nassert     (is_Power_Of_Two(5)    == False)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(5) == True\nassert     is_Power_Of_Two(6) == False\nassert     is_Power_Of_Two(1024) == False\nassert     is_Power_Of_Two(1029) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two (0)        == True\nassert     is_Power_Of_Two (1)        == False\nassert     is_Power_Of_Two (0x1)    == True\nassert     is_Power_Of_Two (0x1b)    == False\nassert     is_Power_Of_Two (0x3)    == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(10) == True\nassert     is_Power_Of_Two(15) == False\nassert     is_Power_Of_Two(23) == False\nassert     is_Power_Of_Two(89) == False\nassert     is_Power_Of_Two(82) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(1) == True\nassert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(4) == True\nassert     is_Power_Of_Two(5) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two ( 1 ) == True\nassert     is_Power_Of_Two ( 2 ) == False\nassert     is_Power_Of_Two ( 3 ) == True\nassert     is_Power_Of_Two ( 4 ) == False\nassert     is_Power_Of_Two ( 5 ) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(8) == True\nassert    is_Power_Of_Two(9) == False\nassert    is_Power_Of_Two(16) == True\nassert    is_Power_Of_Two(32) == False\nassert    is_Power_Of_Two(64) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(8) == True\nassert     is_Power_Of_Two(9) == False\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_char_long(\"bob\") == ['bob']\nassert     find_char_long(\"I'm a boy\") == ['boy']\nassert     find_char_long(\"I'm a boy\") == ['boy']\nassert     find_char_long(\"I'm a boy \") == ['boy']\nassert     find_char_long(\"I'm a boy\") == ['boy']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_char_long('c') == ['c']\nassert     find_char_long('abc') == ['abc']\nassert     find_char_long('abcd') == ['abcd']\nassert     find_char_long('abcde') == ['abcde']\nassert     find_char_long('abcdef') == ['abcdef']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_char_long('a') == []\nassert     find_char_long('abc') == ['abc']\nassert     find_char_long('aa') == ['aa']\nassert     find_char_long('abcab') == ['abc', 'ab']\nassert     find_char_long('abcdefghijklmnopqrstuvwxyz') == ['efgh', 'ijkl','mnop', 'qrst', 'uvwxy', 'yz']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_char_long('word') == ['word']\nassert     find_char_long('This is a long string') == ['long']\nassert     find_char_long('This is a very long string') == ['long']\nassert     find_char_long('This is a very long string \\\n                        that we split into many lines for readability') == ['long']\nassert     find_char_long('This is a very long string \\\n                        that we split into many lines for readability\\\n                        and ignore those that are less than 4 characters long') == ['long']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_char_long('papa') == 'papa'\nassert     find_char_long('papa papa') == ['papa', 'papa']\nassert     find_char_long('papa papa papa') == ['papa', 'papa', 'papa']\nassert     find_char_long('papa papa papa papa') == ['papa', 'papa', 'papa', 'papa']\nassert     find_char_long('papa papa') == ['papa', 'papa']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_char_long(\"Hello World\") == ['World']\nassert     find_char_long(\"Hi, my name is John\") == ['Hi','my', 'name', 'is', 'John']\nassert     find_char_long(\"I'll take this short course to see what it is\") == ['course','short']\nassert     find_char_long(\"\") == []\nassert     find_char_long(\"Hi there\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_char_long(\"We are happy\") == ['happy']\nassert     find_char_long(\"We are happy\")!= ['happi']\nassert     find_char_long(\"We are happy\") == ['happy', 'we', 'happy']\nassert     find_char_long(\"We are happy\")!= ['we', 'happy', 'we']\nassert     find_char_long(\"We are happy\") == ['we', 'happy', 'we', 'are']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     'a' in find_char_long('The quick brown fox jumped over the lazy dog')\nassert     'c' in find_char_long('The quick brown fox jumped over the lazy dog')\nassert     'fox' in find_char_long('The quick brown fox jumped over the lazy dog')\nassert     'jumped' in find_char_long('The quick brown fox jumped over the lazy dog')\nassert     'over' in find_char_long('The quick brown fox jumped over the lazy dog')\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     re.findall(r'\\w{4,}', 'wwewewewe') == ['we', 'we', 'we', 'we', 'we', 'we', 'we']\nassert     re.findall(r'\\w{4,}', 'w') == []\nassert     re.findall(r'\\w{4,}', 'we') == ['we']\nassert     re.findall(r'\\w{4,}', 'weeee') == ['weeee']\nassert     re.findall(r'\\w{4,}', 'weeeeere') == ['weeeeere']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_char_long(    'As a dear friend,I need a little help') == ['help', 'dear', 'friend', 'need', 'a']\nassert     find_char_long(    'A truly valuable birthday gift') == ['gift']\nassert     find_char_long(    'The quick brown fox jumped over the lazy dog') == ['fox', 'dog', 'jumped']\nassert     find_char_long(    'Help me,I need some help with my assignment') == ['help', 'need', 'assignment']\nassert     find_char_long(    'I need a little help with my assignment') == ['need', 'assignment']\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_nums(range(0,5)) == [0,1,4,9,16]\nassert     square_nums(range(1,4)) == [1,4,9]\nassert     square_nums(range(1,6)) == [1,4,9,16,25]\nassert     square_nums([1,2,3,4]) == [1,4,9,16]\nassert     square_nums([2,3,4]) == [4,9,16]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([1, -2, 3, -4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([1, -2, -3, -4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([1, 2, 3, -4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([1, 2, 3, -4, -5]) == [1, 4, 9, 16, 25]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert _________ == square_nums([2, 3, 4, 5])\nassert _________ == square_nums([2, 3, 4, 5, 6])\nassert _________ == square_nums([2, 3, 4, 5, 6, 7])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 4, 9, 16, 25, 36] == square_nums([1, 2, 3, 4, 5, 6])\nassert     [1, 2, 3, 4, 5, 6] == square_nums([1, 4, 9, 16, 25, 36])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_nums(range(1, 11)) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([4, 1, 2, 5, 6, 3]) == [16, 4, 25, 25, 36, 49]\nassert square_nums([]) == []\nassert square_nums([-1, -2, -3, -4]) == [1, 4, 9, 16]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]\nassert     square_nums([-1,-2,-3,-4,-5]) == [-1,1,4,9,16]\nassert     square_nums([1,2,3,4,5,6]) == [1,4,9,16,25,36]\nassert     square_nums([1,2,3,4,5,6,7,8,9]) == [1,4,9,16,25,36,49,64,81]\n\n\ndef sum_of_squares(nums):\n    '''\n    Write a function to find the sum of squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] == square_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] == square_nums([0, 1, 2, 3, 4, 5])\nassert     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] == square_nums([0, 1, 2, 3, 4])\nassert     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] == square_nums([0, 1, 2, 3])\nassert     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] == square_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         [1, 4, 9] == square_nums([1, 2, 3])\nassert         [16, 25] == square_nums([2, 4, 6])\nassert         [0] == square_nums([])\nassert         [1, 4, 9, 16, 25] == square_nums([1, 2, 3, 4, 5])\nassert         [5, 25, 125] == square_nums([5, 6, 7, 8, 9])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1,4,9,16,25] == square_nums([1,2,3,4,5])\nassert     [1,4,9,16]    == square_nums([1,2,3,4])\nassert     [1]    == square_nums([1])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef sum_of_squares(nums):\n    '''\n    Write a function to compute the sum of the squares of the first n positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Rotations('abcdef') == 0\nassert     find_Rotations('aabcd') == 1\nassert     find_Rotations('aabcdg') == 3\nassert     find_Rotations('aabcdgf') == 3\nassert     find_Rotations('aabcdgfh') == 3\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Rotations('Hello') == 4\nassert     find_Rotations('Hi') == 1\nassert     find_Rotations('This is a string') == 2\nassert     find_Rotations('Let us start with the example') == 8\nassert     find_Rotations('geek') == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Rotations('abc') == 2\nassert     find_Rotations('abcd') == 1\nassert     find_Rotations('abdce') == 2\nassert     find_Rotations('dcfibzgfi') == 4"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Rotations(\"abcdefg\") == 2\nassert     find_Rotations(\"abcd\") == 0\nassert     find_Rotations(\"abcdefgabcdefg\") == 1\nassert     find_Rotations(\"abcdefgabcdefgabcdefg\") == 1\nassert     find_Rotations(\"abcdcdefgabcdefg\") == 3\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Rotations('waterbottle') == ['re', 'rot', 'rot', 'bott', 'le', 'b', 'b', 'ot', 'e', 'e', 't', 't', 't']\nassert     find_Rotations('waterbottlebottle') == ['re', 'rot', 'rot', 'bott', 'le', 'b', 'b', 'ot', 'e', 'e', 't', 't', 't', 't']\nassert     find_Rotations('bottle') == ['rot', 'rot', 'bott', 'le', 'b', 'b', 'ot', 'e', 'e', 't', 't', 't']\nassert     find_Rotations('bottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebottlebot"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"xx\") == 0\nassert     find_Rotations(\"x\") == 1\nassert     find_Rotations(\"xxxx\") == 0\nassert     find_Rotations(\"xxtx\") == 1\nassert     find_Rotations(\"xxxt\") == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\nstr = 'ABC'\nassert find_Rotations(str) == 0\nstr = 'AAB'\nassert find_Rotations(str) == 1\nstr = 'ABCD'\nassert find_Rotations(str) == 2\nstr = 'ABCDA'\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"abcabc\") == 1\nassert     find_Rotations(\"abc\") == 0\nassert     find_Rotations(\"aaaaa\") == 0\nassert     find_Rotations(\"bbbbb\") == 1\nassert     find_Rotations(\"abcabcabc\") == 3\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Rotations('abcd') == 1\nassert     find_Rotations('abab') == 2\nassert     find_Rotations('abcb') == 2\nassert     find_Rotations('abcdd') == 1\nassert     find_Rotations('abca') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Rotations('abcde') == 0\nassert     find_Rotations('bcdea') == 1\nassert     find_Rotations('abcdea') == 2\nassert     find_Rotations('abcdeaa') == 1\nassert     find_Rotations('abcdeaabbcde') == 3\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (remove_Occ('abcde', 'a')=='bcd'),    'Failed'\nassert     (remove_Occ('abcde', 'e')=='abc'),    'Failed'\nassert     (remove_Occ('abcde', 'x')=='abcde'),    'Failed'\nassert     (remove_Occ('abcde','')=='abcde'),    'Failed'"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_Occ(\"Babababa\",\"a\") == \"Bbba\"\nassert     remove_Occ(\"ABBABABAB\",\"a\") == \"ABBABABBA\"\nassert     remove_Occ(\"abababababab\",\"a\") == \"ababababab\"\nassert     remove_Occ(\"ABBBABABAB\",\"a\") == \"ABBBABABBA\"\nassert     remove_Occ(\"Babababa\",\"A\") == \"Bbba\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_Occ(\"hello world\",'o') == \"hello world\"\nassert     remove_Occ(\"hello world\",'l') == \"h world\"\nassert     remove_Occ(\"hello world\",'w') == \"hello world\"\nassert     remove_Occ(\"hello world\",'w') == \"h lo\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_Occ('the quick brown fox jumps over the lazy dog', 'r') == 'the quick brown fox jumps over the lazy dog'\nassert     remove_Occ('the quick brown fox jumps over the lazy dog', 'o') == 'the quick brown fox jumps over the lazy dog'\nassert     remove_Occ('the quick brown fox jumps over the lazy dog', 'x') == 'the quick brown fox jumps over the lazy dog'\n\n\ndef remove_Occ_2(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string, but keep the rest.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_Occ('string','t')=='st'\nassert     remove_Occ('string','r')=='st'\nassert     remove_Occ('string','s')=='string'\nassert     remove_Occ('string','s')=='string'\nassert     remove_Occ('string','n')=='string'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_Occ('Supercalifragilisticexpialidocious', 'a')     == 'SupercaliFrigilisticexpialidocious'\nassert     remove_Occ('Supercalifragilisticexpialidocious', 'l')     == 'Supercalifragilisticexpialidocious'\nassert     remove_Occ('Supercalifragilisticexpialidocious', 'z')     == 'Supercalifragilisticexpialidocious'\nassert     remove_Occ('M*S*U*T*R*Y*S*O*C*L*I*S*T*I*O*C*A*R*I*O*U*T*Y*', 'S')     == 'M*U*T*R*Y*S*O*C*L*I*S*T*I*O*C*A*R*I*O*U*T*Y*'\nassert     remove_Occ('M*S*U*T*R*Y*S*O*C*L*I*S*T*I*O*C*A*R*I*O*U*T*Y*', 'S*')     == 'M*U*T*R*Y*S*O*C*L*I*S*T*I*O*C*A*R*I*O*U*T*Y*'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_Occ('abcdefghi','c') == 'abdefghih'\nassert     remove_Occ('abcdefghi','d') == 'abcdefghi'\nassert     remove_Occ('abcdefghi','h') == 'abcdefg'\nassert     remove_Occ('abcdefghi','i') == 'abcdef'\nassert     remove_Occ('abcdefghi','o') == 'abcdef'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_Occ('remove_Occ','s') =='remove_Occ'\nassert     remove_Occ('remove_Occ','e') =='remove_o'\nassert     remove_Occ('remove_Occ','m') =='remove_Occ'\nassert     remove_Occ('remove_Occ','r') =='remove_Occ'\nassert     remove_Occ('remove_Occ','t') =='remove_O'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_Occ(\"Mississippi\", \"i\") == \"Mppliss\"\nassert     remove_Occ(\"Mississippi\", \"s\") == \"Mppliss\"\nassert     remove_Occ(\"Mississippi\", \"S\") == \"Mppliss\"\nassert     remove_Occ(\"Mississippi\", \"p\") == \"Msssspp\"\nassert     remove_Occ(\"Mississippi\", \"s\") == \"Msssspp\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_Occ('pale', 'p') == 'ale'\nassert     remove_Occ('pale', 'l') == 'e'\nassert     remove_Occ('pale', 'e') == 'pale'\nassert     remove_Occ('pale', 'b') == 'le'\nassert     remove_Occ('pale', 'x') == 'pale'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_matrix([[1, 5, 9], [2, 3, 7], [4, 8, 6]]) == [[4, 8, 6], [1, 5, 9], [2, 3, 7]]\nassert     sort_matrix([[2, 3], [5, 1]]) == [[5, 1], [2, 3]]\nassert     sort_matrix([[1, 2, 3, 4, 5], [7, 7, 7, 7, 7]]) == [[7, 7, 7, 7, 7], [1, 2, 3, 4, 5]]\nassert     sort_matrix([[7, 7], [2, 3]]) == [[7, 7], [2, 3]]\n\ndef sort_matrix_2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_matrix([\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]) == [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], \"The input is not sorted\"\nassert     sort_matrix([\n        [1, 3, 2],\n        [2, 1, 3],\n        [5, 4, 1]\n    ]) == [\n        [1, 3, 2],\n        [2, 1, 3],\n        [5, 4, 1]\n    ], \"The input is not sorted\"\nassert     sort_matrix([\n        [5, 1, 4, 2],\n        [3, 6, 2, 1],\n        [1, 8, 7, 3]\n    ]) == [\n        [1, 3, 2],\n        [2, 1, 3],\n        [5, 4, 1]\n    ], \"The input is not sorted\"\n\ndef sort_pairs(pairs):\n    '''\n    Write a function to sort a given list of tuples by the number of their items.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [7,2,4,3,9,5,1,8,6,10,12,13,14] == sort_matrix([\n            [7,2,4,3,9,5,1,8,6,10,12,13,14],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_matrix([[2,1],[4,3]])    == [[1,2],[3,4]]\nassert     sort_matrix([[1,2],[3,4]])    == [[1,2],[3,4]]\nassert     sort_matrix([[0,1,2,3],[4,5,6,7]])    == [[0,1,2,3],[4,5,6,7]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_matrix([[0,3,1],[4,6,7],[9,9,9]]) == [[0,3,1],[4,6,7],[9,9,9]]\nassert     sort_matrix([[7,5,9],[3,5,8],[3,1,1]]) == [[3,1,1],[7,5,9],[3,5,8]]\nassert     sort_matrix([[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nassert     sort_matrix([[1,3,5],[2,4,6],[1,4,7],[2,4,6]]) == [[1,3,5],[2,4,6],[1,4,7],[2,4,6]]\nassert     sort_matrix([[3,3],[4,4],[5,5],[5,6]]) == [[3,3],[4,4],[5,5],[5,6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_matrix([[0,0,1,1,3],[1,1,1,2,1],[1,1,1,3,1],[3,2,1,2,2]]) == [\n    [0,0,1,1,3],[1,1,1,2,1],[1,1,1,3,1],[3,2,1,2,2]]\nassert     sort_matrix([[1,1,1,2],[3,2,1,2],[3,1,1,3],[2,2,2,3]]) == [\n    [1,1,1,2],[2,2,2,3],[3,1,1,3],[3,2,1,2]]\nassert     sort_matrix([[1,2,3],[2,3,1],[1,3,2]]) == [[1,2,3],[2,3,1],[1,3,2]]\nassert     sort_matrix([[1,2,3,4],[3,2,1,4],[3,1,2,3],[2,2,2,3]]) == [[1,2,3,4],[2,2,2,3],[3,1,2,3],[3,2,1,4]]\nassert     sort_matrix([[1,2,3,4,5],[3,2,1,4,5],[3,1,2,3,5],[2,2,2,3,5],[1,1,1,1,1]]) == [[1,2,3,4,5],[2,2,2,3,5],[1,1,1,1,1],[3,1,2,3,5],[3,2,1,4,5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_matrix([[0, 3, 2, 1], [2, 1, 0, 4], [1, 0, 1, 1], [2, 1, 1, 1]]) == \\\n        [[0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\nassert     sort_matrix([[0, 1, 3], [2, 2, 2], [1, 1, 1]]) == \\\n        [[1, 1, 1], [1, 1, 1], [0, 1, 3]]\nassert     sort_matrix([[0, 3, 1, 3], [1, 1, 1, 1], [1, 3, 1, 1], [1, 1, 1, 1]]) == \\\n        [[0, 3, 1, 3], [0, 1, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_matrix([[1,3,1],[1,1,4],[2,1,1]]) == [[1,3,1],[1,1,4],[2,1,1]]\nassert     sort_matrix([[1,3,1],[1,1,4],[2,1,1]]) == [[1,3,1],[1,1,4],[2,1,1]]\nassert     sort_matrix([[1,3,1],[1,1,2],[2,1,1]]) == [[1,3,1],[1,1,2],[2,1,1]]\nassert     sort_matrix([[1,3,1],[1,1,2],[2,1,1]]) == [[1,3,1],[1,1,2],[2,1,1]]\nassert     sort_matrix([[1,3,1],[1,1,2],[2,1,1]]) == [[1,3,1],[1,1,2],[2,1,1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_matrix(M) == [[1, 3, 6], [4, 2, 5], [7, 8, 9]]\nassert sort_matrix(M1) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert sort_matrix(M2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\nassert sort_matrix(M3) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nassert sort_matrix(M4) == [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Volume(1,1,1) == 1.0\nassert     find_Volume(1,2,2) == 0.5\nassert     find_Volume(2,3,3) == 1.0\nassert     find_Volume(3,4,4) == 1.0\nassert     find_Volume(5,6,6) == 1.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Volume(10,10,10)    ==     1000\nassert     find_Volume(5,10,15)    ==     125\nassert     find_Volume(5,10,20)    ==     250\nassert     find_Volume(5,10,25)    ==     625\nassert     find_Volume(5,10,30)    ==     750\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Volume(10,10,10) == 100\nassert     find_Volume(10,5,2) == 10\nassert     find_Volume(5,10,2) == 2\nassert     find_Volume(5,5,10) == 5\nassert     find_Volume(1,2,3) == 1\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Volume(3,4,5) == 3\nassert     find_Volume(5,6,7) == 15\nassert     find_Volume(7,8,9) == 21\nassert     find_Volume(5,3,4) == 7\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Volume(3,3,3) == 9\nassert     find_Volume(6,3,3) == 30\nassert     find_Volume(3,6,3) == 6\nassert     find_Volume(3,3,6) == 3\nassert     find_Volume(3,3,3) == 9\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (find_Volume(5,5,3) == 45)\nassert     (find_Volume(6,6,8) == 72)\nassert     (find_Volume(3,5,3) == 12)\n\nprint '\\t\\t\\t##Problem 4.8##\\n'\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     ( find_Volume(6,6,6) == 9.0 )\nassert     ( find_Volume(3,3,3) == 6.0 )\nassert     ( find_Volume(3,3,5) == 12.0 )\n\ndef find_Area(a,b,c) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Volume([0,0,0], [0,0,0], [0,0,0]) == 0, 'triangular_prism_volume'\nassert     find_Volume([0,0,0], [1,2,3], [0,0,0]) == 6, 'triangular_prism_volume'\nassert     find_Volume([0,0,0], [1,2,3], [4,5,6]) == 36, 'triangular_prism_volume'\nassert     find_Volume([0,0,0], [1,2,3], [5,6,7]) == 76, 'triangular_prism_volume'\nassert     find_Volume([0,0,0], [1,2,3], [6,7,8]) == 100, 'triangular_prism_volume'\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Volume(2,3,4) == 6, \"find_Volume is wrong\"\nassert     find_Volume(6,4,2) == 12, \"find_Volume is wrong\"\nassert     find_Volume(1,2,3) == 6, \"find_Volume is wrong\"\nassert     find_Volume(4,6,8) == 48, \"find_Volume is wrong\"\nprint (\"find_Volume_test PASSED\")\n\ndef find_Volume_and_Surface_Area(l,b,h) : \n    '''\n    Write a python function to find the volume and the surface area of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Volume(1,2,3) == 0.5\nassert     find_Volume(1,5,3) == 0.3\nassert     find_Volume(2,5,3) == 0.7\nassert     find_Volume(1,2,4) == 0.5\nassert     find_Volume(1,5,4) == 0.3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore('abcd') == False, \"Wrong answer\"\nassert     text_lowercase_underscore('abcd') == False, \"Wrong answer\"\nassert     text_lowercase_underscore('abc') == True, \"Wrong answer\"\nassert     text_lowercase_underscore('ab_c') == True, \"Wrong answer\"\nassert     text_lowercase_underscore('abcd_123') == True, \"Wrong answer\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('testing') == True\nassert     text_lowercase_underscore('testinng') == False\nassert     text_lowercase_underscore('eAnD') == True\nassert     text_lowercase_underscore('beSInG') == True\nassert     text_lowercase_underscore('aaaa') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('foo') == True\nassert     text_lowercase_underscore('Foo') == True\nassert     text_lowercase_underscore('fooBar') == False\nassert     text_lowercase_underscore('FOO') == False\n\ndef text_uppercase_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with lowercase letters and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('') == True\nassert     text_lowercase_underscore('a') == True\nassert     text_lowercase_underscore('hello') == True\nassert     text_lowercase_underscore('hello_world') == False\nassert     text_lowercase_underscore('Hi there') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore(\"abCd_eFgH_IJKL\") == True\nassert     text_lowercase_underscore(\"abCd_eFgH_I_JKL\") == False\nassert     text_lowercase_underscore(\"ABCD_EFGH_IJKL\") == False\nassert     text_lowercase_underscore(\"ABCD_EFGH_IJKL_L\") == True\nassert     text_lowercase_underscore(\"_\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('A-B-C-D') == True\nassert     text_lowercase_underscore('a-b-c-d') == True\nassert     text_lowercase_underscore('A-B_C-D') == False\nassert     text_lowercase_underscore('a-b_c-d') == False\nassert     text_lowercase_underscore('A-B-C-D_') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('a')     == True\nassert     text_lowercase_underscore('aBc') == False\nassert     text_lowercase_underscore('a_b_c') == True\nassert     text_lowercase_underscore('A_B_C') == False\nassert     text_lowercase_underscore('A_B_C_d') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore('a_b_c_d_e')    ==    True\nassert     text_lowercase_underscore('A_B_C_D_E')    ==    False\nassert     text_lowercase_underscore('a_b_c_d_e_f')    ==    False\nassert     text_lowercase_underscore('a_b_c_d')    ==    False\nassert     text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z')    ==    True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('foobar') == False\nassert     text_lowercase_underscore('FooBar') == True\nassert     text_lowercase_underscore('FooBar123') == False\nassert     text_lowercase_underscore('FooBar_123') == True\nassert     text_lowercase_underscore('FooBar_123_') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('a_2') == True\nassert     text_lowercase_underscore('2a') == True\nassert     text_lowercase_underscore('a_a_2') == True\nassert     text_lowercase_underscore('a_a_b_2') == False\nassert     text_lowercase_underscore('a_a_2_b_2') == False\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_perimeter(0)     ==     4\nassert     square_perimeter(1)     ==     8\nassert     square_perimeter(2)     ==     16\nassert     square_perimeter(3)     ==     24\nassert     square_perimeter(4)     ==     32\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\nassert     square_perimeter(6) == 24\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_perimeter(4) == 16,         'your function should return 16'\nassert     square_perimeter(0) == 0,         'your function should return 0'\nassert     square_perimeter(1) == 4,        'your function should return 4'\nassert     square_perimeter(7) == 26,        'your function should return 26'\n\ndef circle_area(r):\n    '''\n    Write a function that returns the area of a circle given the circle's radius as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_perimeter(5) == 25\nassert     square_perimeter(6) == 36\nassert     square_perimeter(10) == 50\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     square_perimeter(2) == 8\nassert     square_perimeter(1) == 4\nassert     square_perimeter(5) == 20\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_perimeter(5) == 50\nassert     square_perimeter(1) == 4\nassert     square_perimeter(9) == 81\n\ndef average_grade(grade):\n    '''\n    Write a function that returns the average of the grades in a list given as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_perimeter(5) == 50\nassert     square_perimeter(7) == 56\nassert     square_perimeter(12) == 60\nassert     square_perimeter(16) == 80\nassert     square_perimeter(24) == 96\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     str_to_list('hello', 'hell') == [],'should be [], because '\nassert str_to_list('hello', 'llo') == ['h', 'e'],'should be [], because '\nassert str_to_list('hello', 'hel') == ['h', 'e'],'should be [], because '\nassert str_to_list('hello', 'helo') == ['o'],'should be [], because '\nassert str_to_list('hello', 'hell') == ['h', 'e'],'should be [], because '\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     str_to_list('food') == ['f','o','o','d']\nassert     str_to_list('proceeding') == ['p','r','o','e','c','i','n','g','t']\nassert     str_to_list('educational') == ['e','d','u','c','l','a','t','e','o']\n\ndef list_to_str(l):\n    '''\n    Write a function to join all the items of a list of characters in a single string.\n    '''\n    return ''.join(l)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     'az' == ''.join(str_to_list('az'))\nassert     'az' == ''.join(str_to_list('bz'))\nassert     'az' == ''.join(str_to_list('aaz'))\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef str_to_int(string):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     str_to_list('Hi! I am an idiot', 'hello') == False\nassert     str_to_list('Hi! I am an idiot', 'Hi') == True\nassert     str_to_list('Hi! I am an idiot', 'hi') == True\nassert     str_to_list('Hi! I am an idiot', 'Hello') == True\nassert     str_to_list('Hi! I am an idiot', 'Hello Hello') == False\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \ndef check_str_to_list():\n    assert (str_to_list(\"abcdefghijklmnopqrstuvwxyz\", \"defghijklmnopqrstuvwxy\") == \n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n    assert (str_to_list(\"abcdefghijklmnopqrstuvwxyz\", \"gmnopqrstuvwxyz\") == \n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n    assert (str_to_list(\"abcdefghijklmnopqrstuvwxyz\", \"mnopqrstuvwxyz\") ==\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n    assert (str_to_list(\"abcdefghijklmnopqrstuvwxyz\", \"aeiou\") == \n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n    "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     str_to_list(\"Hello\") == ['H','e','l','l','o']\nassert     str_to_list(\"My Name is Rahul\") == ['M', 'y', 'n', 'a', 'n', 'i','s','', 'R', 'a', 'h', 'u', 'l', 't','', 'i','s', 'e', 't','s','']\nassert     str_to_list(\"I am Rahul\") == ['I', 'a','m', 'a', 't', 'i','', 'R', 'a', 'h', 'u', 'l', 't','', 'i','s', 'e', 't','s','']\nassert     str_to_list(\"My name is Rahul\") == ['M', 'y', 'n', 'a', 'n', 'i','s','', 'R', 'a', 'h', 'u', 'l', 't','', 'i','s', 'e', 't','s','','m', 'e', 'n', 't','', 'i','s','', 'n', 'a','m', 'e', 't','s','', 'R', 'a', 'h', 'u', 'l', 't','', 'i','s', 'e', 't','s','','', 'o','', 'w', 'e','', 'r','', 't','', 'i','m', 'e','', 'h', 'e', 'l', 't','', 'i','s', 'e', 't','s','', 'r','', 'e','m', 'e', 'n', 't','s','', 'i','s', 'e', 't','s','', 'r','', 'e','m', 'e', 'n', 't','s','', 'r','', 'e','m', 'e', 'n', 't','s','', 'i','s', 'e', 't','s','', 'r','', 'e','m', 'e', 'n', 't','s','', 'i','s', 'e', 't','s','', 'r','', 'e','m', 'e', 'n', 't','s','', 'i','s', 'e', 't','s','', 'r','', 'e','m', 'e', 'n', 't','s','', 'i','s', 'e', 't','s','']\n\ndef list_to_str(l):\n    '''\n    Write a function to convert a list of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     str_to_list('agbcbcbcbc','bcbcbcbcbc') == ['a','g']\nassert     str_to_list('abcdabcdabc','abcabc') == ['a','b','d','b','a','c']\nassert     str_to_list('abcdabcdabc','abcdabc') == ['a','b','c','d','a','b']\nassert     str_to_list('a','a') == ['a']\nassert     str_to_list('','') == []\nprint 'Passed'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     test_duplicate([1,2,3,4,1]) == False\nassert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([2,1,3,4,5]) == False\nassert     test_duplicate([1,1,1]) == True\nassert     test_duplicate([1,1,2]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     test_duplicate(arraynums) == True\nassert     test_duplicate([1, 3, 4, 2, 1]) == True\nassert     test_duplicate([1, 3, 4, 2, 5]) == False\nassert     test_duplicate([1, 3, 4, 2, 6]) == True\nassert     test_duplicate([1, 3, 4, 2, 7]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,2,3,4,5,5,5,7,7,8,10])\nassert not test_duplicate([1,2,3,4,5,6,7,8,10])\nassert not test_duplicate([1,2,3,4,5,6,7,8,10,11,12])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,3,4,2,6,5,4]) == True\nassert test_duplicate([1,2,3,4,5]) == False\nassert test_duplicate([1,1,1,3,3,4,3,2,4,2]) == True\nassert test_duplicate([1,3,4,6,5,4]) == False\nassert test_duplicate([2,4,1,2,3,5,6]) == False"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     test_duplicate(arraynums) == True\nassert     test_duplicate(arraynums[:]) == False\nassert     test_duplicate(arraynums[0:2]) == True\nassert     test_duplicate(arraynums[0:1]) == True\nassert     test_duplicate(arraynums[0:0]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     test_duplicate(arraynums) == False, \"test_duplicate() fails\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 1]) == True\nassert     test_duplicate([1, 2, 3, 4, 2]) == True\nassert     test_duplicate([1, 2, 3, 4, 5]) == False\nassert     test_duplicate([1, 2, 3, 4, 5, 6]) == True\nassert     test_duplicate([1, 2, 3, 4, 5, 6, 7]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 1]) == True\nassert test_duplicate([1, 2, 3, 4, 2]) == False\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 1, 1, 1]) == True\nassert test_duplicate([2, 2, 2, 2]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     test_duplicate([1,2,3,4,5])\nassert     not test_duplicate([1,2,3,4,5,1])\nassert     test_duplicate([1,1,1,3,3,4,3,2,4,2])\nassert     not test_duplicate([1,2,3,4])\nassert     test_duplicate([1,1,1,1])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 5])\nassert     test_duplicate([1, 2, 3, 4, 1])\nassert     test_duplicate([1, 2, 3, 4, 1, 2]) == False\nassert     test_duplicate([1, 2, 3, 4, 5, 6]) == False\nassert     test_duplicate([1, 2, 3, 4, 5, 6, 7]) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_woodall(20)\nassert     is_woodall(11)\nassert     is_woodall(11)\nassert     is_woodall(101)\nassert     is_woodall(5)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_woodall(0) == False\nassert     is_woodall(1) == False\nassert     is_woodall(12) == True\nassert     is_woodall(13) == False\nassert     is_woodall(33) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(22) == False\nassert     is_woodall(23) == True\nassert     is_woodall(19) == True\nassert     is_woodall(7) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_woodall(1) == True\nassert     is_woodall(2) == False\nassert     is_woodall(4) == False\nassert     is_woodall(14) == True\nassert     is_woodall(124) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_woodall(11) == True\nassert     is_woodall(13) == False\nassert     is_woodall(15) == False\nassert     is_woodall(21) == True\nassert     is_woodall(22) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_woodall(7) == False\nassert     is_woodall(7) == True\nassert     is_woodall(8) == False\nassert     is_woodall(8) == True\nassert     is_woodall(9) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_woodall(19) == True\nassert     is_woodall(21) == False\nassert     is_woodall(43) == True\nassert     is_woodall(15) == False\nassert     is_woodall(45) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_woodall(23) == False\nassert     is_woodall(22) == True\nassert     is_woodall(24) == False\nassert     is_woodall(25) == True\nassert     is_woodall(26) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_woodall(123)     == False\nassert     is_woodall(10)     == True\nassert     is_woodall(987)     == True\nassert     is_woodall(5)     == False\nassert     is_woodall(113)     == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (is_woodall(0) == False), \"Error: is_woodall(0)\"\nassert     (is_woodall(1) == False), \"Error: is_woodall(1)\"\nassert     (is_woodall(2) == True), \"Error: is_woodall(2)\"\nassert     (is_woodall(11) == True), \"Error: is_woodall(11)\"\nassert     (is_woodall(121) == False), \"Error: is_woodall(121)\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (rev(1) == False)\nassert     (rev(12) == False)\nassert     (rev(123) == False)\nassert     (rev(1234) == True)\nassert     (rev(12345) == True)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rev(123) == True\nassert     rev(321) == False\nassert     rev(-123) == True\nassert     rev(-321) == False\nassert     rev(0) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rev(10)     ==    True, \"Correct\"\nassert     rev(12)    ==    False, \"Correct\"\nassert     rev(11)    ==    True, \"Correct\"\nassert     rev(22)    ==    False, \"Correct\"\nassert     rev(33)    ==    True, \"Correct\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rev(1234) == False\nassert     rev(123) == True\nassert     rev(4534) == False\nassert     rev(999999999) == True\nassert     rev(987654321) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (rev(123) == False)\nassert     (rev(12345) == True)\nassert     (rev(1000) == True)\nassert     (rev(10000) == False)\nassert     (rev(123456789) == True)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rev(12345) == False, \"rev(12345) == False, but it should be False\"\nassert     rev(153423) == True, \"rev(153423) == True, but it should be True\"\nassert     rev(1234) == False, \"rev(1234) == False, but it should be False\"\nassert     rev(12341234) == True, \"rev(12341234) == True, but it should be True\"\nassert     rev(123412) == False, \"rev(123412) == False, but it should be False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rev(0) == True\nassert     rev(1) == False\nassert     rev(2) == False\nassert     rev(3) == True\nassert     rev(4) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rev(20) == True\nassert     rev(21) == True\nassert     rev(24) == True\nassert     rev(25) == False\nassert     rev(30) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rev(4321) == True\nassert     rev(34) == True\nassert     rev(456) == False\nassert     rev(12345) == True\nassert     rev(9876) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rev(123) == True\nassert     rev(12) == False\nassert     rev(-123) == True\nassert     rev(-12) == False\nassert     rev(0) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Max_Num(['5','6','7','8','9']) == '9'\nassert     find_Max_Num(['1','2','3','4','5']) == '5'\nassert     find_Max_Num(['8','7','6','5','4','3','2','1']) == '1'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Max_Num([1,2,3]) == 3\nassert     find_Max_Num([1,9,3]) == 9\nassert     find_Max_Num([1,9,3,0]) == 9\nassert     find_Max_Num([2,3,4,5]) == 5\nassert     find_Max_Num([5,6,7,8,9]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Max_Num([0, 1, 2, 3]) == 3\nassert     find_Max_Num([0, 1, 9, 9]) == 9\nassert     find_Max_Num([1, 1, 1, 1, 1, 1]) == 1\nassert     find_Max_Num([0, 0, 0]) == 0\nassert     find_Max_Num([2, 4, 8, 9, 1]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Max_Num([2, 1, 3, 4, 5]) == 5\nassert     find_Max_Num([5, 4, 3, 2, 1]) == 5\nassert     find_Max_Num([2, 3, 4, 5]) == 5\nassert     find_Max_Num([5, 4, 1]) == 5\nassert     find_Max_Num([5, 4, 3, 2, 1]) == 5\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Max_Num([0,9,8,7,6,5,4,3,2,1,0]) == 9\nassert     find_Max_Num([0,9,8,7,6,5,4,3,2,1]) == 9\nassert     find_Max_Num([9,8,7,6,5,4,3,2,1,0]) == 9\nassert     find_Max_Num([9,8,7,6,5,4,3,2,1]) == 9\nassert     find_Max_Num([9,8,7,6,5,4,3,2,1,0,0]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\nassert     find_Max_Num([2, 3, 4, 5, 6, 7, 8, 9, 0]) == 9\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]) == 9\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2]) == 9\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Max_Num( [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] ) == 9\nassert     find_Max_Num( [1, 2, 3, 4, 5] ) == 5\nassert     find_Max_Num( [1, 2, 3] ) == 3\nassert     find_Max_Num( [1, 2, 3, 4] ) == 4\nassert     find_Max_Num( [4, 6, 8] ) == 8\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Max_Num([1,2,3,4,5,6,7,8,9,0]) == 9\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([1,2,3,4,5,6,7]) == 7\nassert     find_Max_Num([1,2,3,4,5]) == 5\nassert     find_Max_Num([1,2,3,4]) == 4\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Max_Num( [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] ) == 9\nassert     find_Max_Num( [ 1, 2, 3, 4, 5 ] ) == 5\nassert     find_Max_Num( [ 1, 3, 4, 2, 5 ] ) == 5\nassert     find_Max_Num( [ 1, 2, 3, 4, 5, 6 ] ) == 6\nassert     find_Max_Num( [ 1, 2, 3, 4, 5, 7 ] ) == 7\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Max_Num([1, 2, 3]) == 3\nassert     find_Max_Num([1, 9, 9]) == 9\nassert     find_Max_Num([2, 3, 9]) == 9\nassert     find_Max_Num([9, 9, 9]) == 9\nassert     find_Max_Num([1, 9, 9, 9]) == 9\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     opposite_Signs(1,2) == True\nassert     opposite_Signs(3,2) == False\nassert     opposite_Signs(3,-2) == True\nassert     opposite_Signs(3,2.0) == True\nassert     opposite_Signs(-3,2.0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     opposite_Signs(1,-1)\nassert     opposite_Signs(-1,1)\nassert     opposite_Signs(1,1)\nassert     opposite_Signs(-1,-1)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(-1,-1) == False"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     opposite_Signs(1,2) == True\nassert     opposite_Signs(2,-1) == True\nassert     opposite_Signs(1,-1) == False\nassert     opposite_Signs(-1,2) == False\nassert     opposite_Signs(-2,1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(0,-1) == True\nassert     opposite_Signs(0,1) == False\nassert     opposite_Signs(1,-1) == False\nassert     opposite_Signs(1,0) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     opposite_Signs(13,-10) == True\nassert     opposite_Signs(13,10) == False\nassert     opposite_Signs(-13,-10) == True\nassert     opposite_Signs(-13,10) == False\nassert     opposite_Signs(0,10) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     opposite_Signs(10,-20) == True\nassert     opposite_Signs(10,-20) == False\nassert     opposite_Signs(-10,20) == False\nassert     opposite_Signs(20,-10) == True\nassert     opposite_Signs(-20,10) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     opposite_Signs(4,-1) == True\nassert     opposite_Signs(-2,-4) == True\nassert     opposite_Signs(0,-2) == True\nassert     opposite_Signs(1,0) == True\nassert     opposite_Signs(-1,1) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     opposite_Signs(2,-4) == True\nassert     opposite_Signs(-2,4) == False\nassert     opposite_Signs(1,-1) == False\nassert     opposite_Signs(1,0) == False\nassert     opposite_Signs(1,1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(-1,-1) == False\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(-1,-1) == True\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 2\nassert     is_octagonal(3) == 3\nassert     is_octagonal(4) == 4\nassert     is_octagonal(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 6\nassert     is_octagonal(3) == 10\nassert     is_octagonal(4) == 15\nassert     is_octagonal(5) == 22\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_octagonal(121) == True\nassert     is_octagonal(112) == True\nassert     is_octagonal(345) == False\nassert     is_octagonal(8) == True\nassert     is_octagonal(126) == False\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_octagonal(1) == 0\nassert     is_octagonal(2) == 1\nassert     is_octagonal(3) == 2\nassert     is_octagonal(4) == 3\nassert     is_octagonal(5) == 4\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 10\nassert     is_octagonal(3) == 100\nassert     is_octagonal(4) == 1000\nassert     is_octagonal(5) == 10000\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_octagonal(0) == 0\nassert     is_octagonal(1) == 1\nassert     is_octagonal(6) == 24\nassert     is_octagonal(8) == 32\nassert     is_octagonal(11) == 55\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_octagonal(8) is True\nassert     is_octagonal(1) is False\nassert     is_octagonal(6) is True\nassert     is_octagonal(11) is True\nassert     is_octagonal(89) is True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Substrings('nince') == 2\nassert     count_Substrings('acde') == 1\nassert     count_Substrings('zxcv') == 0\nassert     count_Substrings('z') == 1\nassert     count_Substrings('aab') == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"aa\") == 2\nassert     count_Substrings(\"abc\") == 3\nassert     count_Substrings(\"acb\") == 3\nassert     count_Substrings(\"abcde\") == 3\nassert     count_Substrings(\"aabcde\") == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Substrings(\"a1b2c3d4e\")    == 2\nassert     count_Substrings(\"abcde\")    == 6\nassert     count_Substrings(\"xyz\")    == 0\nassert     count_Substrings(\"t1p2\")    == 1\n\ndef count_Pairs(A, k):\n    '''\n    A is an integer array. A is sorted in non-decreasing order.\n    Count the number of pairs i, j such that |i - j| <= k, where i and j are the ith and jth element of A.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Substrings(\"abcdefg\") == 7\nassert     count_Substrings(\"ABCDEFGH\") == 21\nassert     count_Substrings(\"abcd\") == 1\nassert     count_Substrings(\"\") == 0\nassert     count_Substrings(\"ABC\") == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Substrings('xxxyyy') == 3\nassert     count_Substrings('xyyyx') == 1\nassert     count_Substrings('xyx') == 2\nassert     count_Substrings('xxyyy') == 2\nassert     count_Substrings('yyyyx') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Substrings('abcdef') == 0\nassert     count_Substrings('abcda') == 3\nassert     count_Substrings('abcdd') == 0\nassert     count_Substrings('abcd') == 4\nassert     count_Substrings('abcde') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"x\") == 0\nassert     count_Substrings(\"abcde\") == 1\nassert     count_Substrings(\"abca\") == 2\nassert     count_Substrings(\"abcdef\") == 3\nassert     count_Substrings(\"abcdec\") == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Substrings('puython') == 3\nassert     count_Substrings('python') == 2\nassert     count_Substrings('p') == 1\nassert     count_Substrings('ython') == 2\nassert     count_Substrings('ython') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Substrings('3456') == 4\nassert count_Substrings('A0B1C2D3E4F5G6H7I8J9') == 1\nassert count_Substrings('A0B1C2D3E4F5G6H7I8J9A0B1C2D3E4F5G6H7I8J9A0B1C2D3E4F5G6H7I8J9') == 9\nassert count_Substrings
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Substrings('abcbca') == 5\nassert count_Substrings('abc') == 3\nassert count_Substrings('abcdefghi') == 0\nassert count_Substrings('axbxc') == 4\n\ndef CountPairs(arr):\n    '''\n    Write a python function to count all pairs with their sums equal to 0.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5, 6, 7]) == 1\nassert     smallest_num([100, 4, 3, 1, 0]) == 0\nassert     smallest_num([-2, -1, -3]) == -2\nassert     smallest_num([10]) == -1\n\ndef longest_string(xs):\n    '''\n    Write a python function to find the longest string in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_num([1,2,3,4]) == 1\nassert     smallest_num([1,3,2,4]) == 1\nassert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([5,4,3,2,1]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_num([1,2,3]) == 1\nassert     smallest_num([3,2,1]) == 1\nassert     smallest_num([1,1,1]) == 1\nassert     smallest_num([-1,-2,-3]) == -3\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_num([7, 3, 5, 1, 8]) == 1\nassert     smallest_num([7, 5, 3, 8, 1]) == 1\nassert     smallest_num([1, 3, 5, 7, 8]) == 1\nassert     smallest_num([1, 2, 3, 4, 5, 6]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_num([1, 3, 5, 2, 4]) == 1\nassert     smallest_num([1, 2, 3, 4, 5]) == 1\nassert     smallest_num([100, -1, -2, -3, -4]) == -1\nassert     smallest_num([-1, -2, -3, -4]) == -1\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_num([5, 10, 15]) == 5\nassert     smallest_num([0, 5, 10, 15]) == 0\nassert     smallest_num([5, -10, 15]) == -10\nassert     smallest_num([]) == None\nassert     smallest_num([0]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_num([5, 3, 1, 2, 4]) == 1, \"Failed\"\nassert     smallest_num([5, 3, 10, 1, 2, 4]) == 1, \"Failed\"\nassert     smallest_num([5, 3, 10, 1, 2, 12]) == 1, \"Failed\"\nassert     smallest_num([5, 3, 10, 1, 2, 15]) == 1, \"Failed\"\nassert     smallest_num([5, 3, 10, 1, 2, 25]) == 1, \"Failed\"\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_num([1, 5, 2, 3, 4]) == 1\nassert     smallest_num([2, 10, 1, 50, 100, 3]) == 1\nassert     smallest_num([]) == None\nassert     smallest_num([2, 10, 1, 50, 100, 3, -1]) == -1"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_num([-1, 2, -5, 0]) == -5\nassert     smallest_num([3, 2, 0, -1]) == -1\nassert     smallest_num([-1, -2, -5, 0]) == -1\nassert     smallest_num([-2, -5, -3, -1]) == -1\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_num([-1,3,6,7,2,-5]) == -5\nassert     smallest_num([3,6,2,7,1,5,-1,3]) == -1\nassert     smallest_num([]) == None\nassert     smallest_num([3]) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_difference(TupleList(((1,5), (3,6), (4,3), (7,8), (9,4)) )) == 1\nassert     max_difference(TupleList(((1,5), (3,6), (4,3), (7,8), (9,4), (8,7)) )) == 3\nassert     max_difference(TupleList(((1,2), (3,4), (5,6), (7,8), (9,8), (8,7), (8,6), (7,5)) )) == 1\nassert     max_difference(TupleList(((1,2), (3,4), (5,6), (7,8), (9,8), (8,7), (8,6), (7,5), (5,4)) )) == 3\nassert     max_difference(TupleList(((1,2), (3,4), (5,6), (7,8), (9,8), (8,7), (8,6), (7,5), (5,4), (4,3), (2,1)) )) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_difference([[3, 1], [7, 3], [9, 4], [3, 4]]) == 8\nassert     max_difference([[3, 1], [7, 4], [9, 4], [3, 4]]) == 8\nassert     max_difference([[3, 1], [7, 4], [9, 4], [3, 4], [3, 3]]) == 0\nassert     max_difference([[3, 1], [7, 4], [9, 4], [3, 4], [3, 3], [1, 4]]) == 4\nassert     max_difference([[3, 1], [7, 4], [9, 4], [3, 4], [3, 3], [1, 4], [1, 2], [5, 3], [9, 7]]) == 12\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_difference(test_list) == 1\nassert     max_difference(test_list_2) == 1\nassert     max_difference(test_list_3) == 0\nassert     max_difference(test_list_4) == 0\nassert     max_difference(test_list_5) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8)]) == 1\nassert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 1\nassert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_difference((1, 3, 2, 5, 4, 7)) == 4\nassert     max_difference((1, 3, 2, 5, 4)) == 3\nassert     max_difference((1, 2, 3, 4, 5)) == 1\nassert     max_difference((10, 5, 3, 4, 8)) == 0\nassert     max_difference((5, 3, 4, 8, 10, 9)) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_difference([(1,2), (3,4), (5,6)]) == 1\nassert     max_difference([(1,2), (3,4), (6,7), (8,9)]) == 2\nassert     max_difference([(0,0), (-4,-8), (10,10), (4,4)]) == 2\nassert     max_difference([(0,0), (-4,-8), (10,10), (4,4), (0,-8), (-4,-6)]) == 2\nassert     max_difference([(0,0), (-4,-8), (10,10), (4,4), (0,-8), (-4,-6), (0,0)]) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ntest_list = [1, 3, 5, 7, 8, 5, 4, 6, 10, 9]\nmax_difference(test_list)\nassert max_difference(test_list) == 8"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_difference(    [    ('a', 'b'),\n                                ('a', 'c'),\n                                ('b', 'c')\n                            ]) == 2\n\nassert     max_difference(    [    ('a', 'b'),\n                                ('a', 'c'),\n                                ('b', 'c'),\n                                ('a', 'd'),\n                                ('a', 'e'),\n                                ('b', 'd'),\n                                ('c', 'd'),\n                                ('c', 'e'),\n                                ('d', 'e'),\n                                ('a', 'f'),\n                                ('b', 'g'),\n                                ('c', 'h'),\n                                ('d', 'i'),\n                                ('e', 'i'),\n                                ('f', 'g'),\n                                ('g', 'h'),\n                                ('h', 'i'),\n                                ('a', 'j'),\n                                ('b', 'k'),\n                                ('c', 'l'),\n                                ('d','m'),\n                                ('e', 'n'),\n                                ('f', 'o'),\n                                ('g', 'p'),\n                                ('h', 'q'),\n                                ('i', 'q'),\n                                ('j', 'k'),\n                                ('j', 'l'),\n                                ('k', 'l'),\n                                ('b','m'),\n                                ('c', 'n'),\n                                ('d', 'o'),\n                                ('e', 'p'),\n                                ('f', 'q'),\n                                ('g', 'r'),\n                                ('h','s'),\n                                ('i', 'r'),\n                                ('j','s'),\n                                ('k', 'r'),\n                                ('b', 't'),\n                                ('c', 'u'),\n                                ('d', 'v'),\n                                ('e', 'w'),\n                                ('f', 'x'),\n                                ('g', 'y'),\n                                ('h', 'z'),\n                                ('i', 'w'),\n                                ('j', 'x'),\n                                ('k', 'y'),\n                                ('l', 'z'),\n                                ('b', 'v'),\n                                ('c', 'y'),\n                                ('d', 'x'),\n                                ('e', 'z'),\n                                ('f', 'w'),\n                                ('g', 'z'),\n                                ('h', 'w'),\n                                ('i', 'v'),\n                                ('j', 'w'),\n                                ('k', 'v'),\n                                ('l', 'y'),\n                                ('b', 'x'),\n                                ('c', 'x'),\n                                ('d', 'x'),\n                                ('e', 'x'),\n                                ('f', 'z'),\n                                ('g', 'z'),\n                                ('h', 'z'),\n                                ('i', 'y'),\n                                ('j', 'z'),\n                                ('k', 'z'),\n                                ('l', 'z'),\n                                ('b', 'a'),\n                                ('c', 'a'),\n                                ('d', 'a'),\n                                ('e', 'a'),\n                                ('f', 'a'),\n                                ('g', 'a'),\n                                ('h', 'a'),\n                                ('i', 'a'),\n                                ('j', 'a'),\n                                ('k', 'a'),\n                                ('l', 'a'),\n                                ('b', 'b'),\n                                ('c', 'b'),\n                                ('d', 'b'),\n                                ('e', 'b'),\n                                ('f', 'b'),\n                                ('g', 'b'),\n                                ('h', 'b'),\n                                ('i', 'b'),\n                                ('j', 'b'),\n                                ('k', 'b'),\n                                ('l', 'b'),\n                                ('b', 'c'),\n                                ('c', 'c'),\n                                ('d', 'c'),\n                                ('e', 'c'),\n                                ('f', 'c'),\n                                ('g', 'c'),\n                                ('h', 'c'),\n                                ('i', 'c'),\n                                ('j', 'c'),\n                                ('k', 'c'),\n                                ('l', 'c'),\n                                ('a', 'e'),\n                                ('b', 'e'),\n                                ('c', 'e'),\n                                ('d', 'e'),\n                                ('e', 'e'),\n                                ('a', 'f'),\n                                ('b', 'f'),\n                                ('c', 'f'),\n                                ('d', 'f'),\n                                ('a', 'g'),\n                                ('b', 'g'),\n                                ('c', 'g'),\n                                ('d', 'g'),\n                                ('a', 'h'),\n                                ('b', 'h'),\n                                ('c', 'h'),\n                                ('d', 'h'),\n                                ('a', 'i'),\n                                ('b', 'i'),\n                                ('c', 'i'),\n                                ('d', 'i'),\n                                ('a', 'j'),\n                                ('b', 'j'),\n                                ('c', 'j'),\n                                ('d', 'j'),\n                                ('a', 'k'),\n                                ('b', 'k'),\n                                ('c', 'k'),\n                                ('d', 'k'),\n                                ('a', 'l'),\n                                ('b', 'l'),\n                                ('c', 'l'),\n                                ('d', 'l'),\n                                ('a', 'n'),\n                                ('b', 'n'),\n                                ('c', 'n'),\n                                ('d', 'n'),\n                                ('a', 'o'),\n                                ('b', 'o'),\n                                ('c', 'o'),\n                                ('d', 'o'),\n                                ('a', 'p'),\n                                ('b', 'p'),\n                                ('c', 'p'),\n                                ('d', 'p'),\n                                ('a', 'q'),\n                                ('b', 'q'),\n                                ('c', 'q'),\n                                ('d', 'q'),\n                                ('a', 'r'),\n                                ('b', 'r'),\n                                ('c', 'r'),\n                                ('d', 'r'),\n                                ('a','s'),\n                                ('b','s'),\n                                ('c','s'),\n                                ('d','s'),\n                                ('a', 't'),\n                                ('b', 't'),\n                                ('c', 't'),\n                                ('d', 't'),\n                                ('a', 'u'),\n                                ('b', 'u'),\n                                ('c', 'u'),\n                                ('d', 'u'),\n                                ('a', 'v'),\n                                ('b', 'v'),\n                                ('c', 'v'),\n                                ('d', 'v'),\n                                ('a', 'w'),\n                                ('b', 'w'),\n                                ('c', 'w'),\n                                ('d', 'w'),\n                                ('a', 'x'),\n                                ('b', 'x'),\n                                ('c', 'x'),\n                                ('d', 'x'),\n                                ('a', 'y'),\n                                ('b', 'y'),\n                                ('c', 'y'),\n                                ('d', 'y'),\n                                ('a', 'z'),\n                                ('b', 'z'),\n                                ('c', 'z'),\n                                ('d', 'z'),\n                                ('a', 'w'),\n                                ('b', 'w'),\n                                ('c', 'w'),\n                                ('d', 'w'),\n                                ('a', 'x'),\n                                ('b', 'x'),\n                                ('c', 'x'),\n                                ('d', 'x'),\n                                ('a', 'y'),\n                                ('b', 'y'),\n                                ('c', 'y'),\n                                ('d', 'y'),\n                                ('a', 'z'),\n                                ('b', 'z'),\n                                ('c', 'z'),\n                                ('d', 'z')\n                        ]    )\n                        ==\n                        1\n    )\n\nassert     max_difference(    [    ('a', 'b'),\n                                ('a', 'c'),\n                                ('b', 'c'),\n                                ('a', 'd'),\n                                ('a', 'e'),\n                                ('b', 'd'),\n                                ('c', 'd'),\n                                ('c', 'e'),\n                                ('d', 'e'),\n                                ('a', 'f'),\n                                ('b', 'g'),\n                                ('c', 'h'),\n                                ('d', 'i'),\n                                ('e', 'i'),\n                                ('f', 'g'),\n                                ('g', 'h'),\n                                ('h', 'i'),\n                                ('a', 'j'),\n                                ('b', 'k'),\n                                ('c', 'l'),\n                                ('d','m'),\n                                ('e', 'n'),\n                                ('f', 'o'),\n                                ('g', 'p'),\n                                ('h', 'q'),\n                                ('i', 'q'),\n                                ('j', 'k'),\n                                ('j', 'l'),\n                                ('k', 'l'),\n                                ('b','m'),\n                                ('c', 'n'),\n                                ('d', 'o'),\n                                ('e', 'p'),\n                                ('f', 'q'),\n                            "
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_difference([1,2,3,4,5]) == 1, 'Test 1'\nassert     max_difference([1,2,3,4,5,6,7]) == 2, 'Test 2'\nassert     max_difference([1,2,3,4,5,6,7,8]) == 4, 'Test 3'\nassert     max_difference([1,2,3,4,5,6,7,8,9]) == 4, 'Test 4'\nassert     max_difference([1,2,3,4,5,6,7,8,9,10]) == 6, 'Test 5'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     subject_marks([('English',90),('Math',95),('Science',97),('Social',98)]) == 'Math', 'Failed'\nassert     subject_marks([('English',80),('Math',95),('Science',97),('Social',98)]) == 'English', 'Failed'\nassert     subject_marks([('English',70),('Math',95),('Science',97),('Social',98)]) == 'Science', 'Failed'\nassert     subject_marks([('English',70),('Math',95),('Science',97),('Social',98)]) == 'English', 'Failed'\nassert     subject_marks([('English',70),('Math',95),('Science',97),('Social',98)]) == 'English', 'Failed'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     subject_marks([('N', 1), ('N', 2), ('B', 3), ('A', 4), ('B', 5)]) == [('A', 4), ('B', 5), ('B', 3), ('N', 1), ('N', 2)]\nassert     subject_marks([('N', 1), ('N', 2), ('B', 3), ('A', 4), ('A', 5)]) == [('A', 5), ('B', 3), ('A', 4), ('N', 1), ('N', 2)]\nassert     subject_marks([('N', 1), ('N', 2), ('B', 3), ('A', 4), ('A', 5), ('B', 6)]) == [('A', 5), ('B', 6), ('A', 4), ('N', 1), ('N', 2), ('B', 3)]\nassert     subject_marks([('N', 1), ('N', 2), ('B', 3), ('A', 4), ('A', 5), ('A', 6)]) == [('A', 6), ('A', 5), ('B', 3), ('N', 1), ('N', 2), ('A', 4)]\nassert     subject_marks([('N', 1), ('N', 2), ('N', 3), ('A', 4), ('A', 5), ('A', 6)]) == [('A', 6), ('A', 5), ('B', 3), ('N', 1), ('N', 2), ('N', 3)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     subject_marks([(1, 9), (2, 8), (3, 7), (4, 4), (5, 10)]) == [(1, 9), (2, 8), (4, 4), (3, 7), (5, 10)]\nassert     subject_marks([(1, 9), (2, 9), (3, 9), (4, 9), (5, 9)]) == [(1, 9), (2, 9), (3, 9), (4, 9), (5, 9)]\nassert     subject_marks([(1, 9), (2, 8), (3, 7), (4, 4), (5, 10)]) == [(1, 9), (2, 8), (4, 4), (3, 7), (5, 10)]\n\ndef is_palindrome(word):\n    '''\n    Write a function to check whether a given word is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     subject_marks([('s1', 90), ('s2', 80), ('s3', 70)]) == [('s2', 80), ('s1', 90), ('s3', 70)]\nassert     subject_marks([('s1', 80), ('s2', 90), ('s3', 70)]) == [('s2', 90), ('s1', 80), ('s3', 70)]\nassert     subject_marks([('s1', 70), ('s2', 80), ('s3', 90)]) == [('s3', 90), ('s1', 70), ('s2', 80)]\nassert     subject_marks([('s1', 65), ('s2', 90), ('s3', 80)]) == [('s1', 65), ('s3', 80), ('s2', 90)]\nassert     subject_marks([('s1', 50), ('s2', 80), ('s3', 70)]) == [('s1', 50), ('s2', 80), ('s3', 70)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     subject_marks([('a',1),('b',2),('c',3)]) == [('b',2),('a',1),('c',3)]\nassert     subject_marks([('a',1),('b',2),('c',3),('b',1)]) == [('b',2),('b',1),('a',1),('c',3)]\n\n'''\nWrite a function that checks whether a number is prime or not. \nA prime number is a number greater than 1 that has no positive divisors other than 1 and itself.\n'''\n\ndef is_prime(number):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     subject_marks( [['MAT', 2], ['ENG', 3], ['MCT', 1], ['SIS', 1], ['SST', 1], ['SIE', 1]]) == [('ENG', 3), ('MAT', 2), ('SIE', 1), ('SST', 1), ('SIS', 1), ('MCT', 1)]\nassert     subject_marks( [['MAT', 1], ['ENG', 1], ['MCT', 2], ['SIS', 3], ['SST', 2], ['SIE', 2]]) == [('ENG', 1), ('MAT', 1), ('SIE', 2), ('SST', 2), ('SIS', 3), ('MCT', 2)]\nassert     subject_marks( [['MAT', 1], ['MAT', 2], ['ENG', 2], ['SIE', 1], ['SST', 2], ['SIE', 2]]) == [('ENG', 2), ('MAT', 1), ('MAT', 2), ('SIE', 2), ('SST', 2), ('SIE', 1)]\nassert     subject_marks( [['MAT', 1], ['MAT', 1], ['ENG', 2], ['SIE', 3], ['SST', 1], ['SIE', 1]]) == [('ENG', 2), ('MAT', 1), ('SIE', 3), ('SST', 1), ('SIE', 1), ('MAT', 1)]\nassert     subject_marks( [['MAT', 1], ['MAT', 2], ['ENG', 1], ['SIE', 1], ['SST', 2], ['SIE', 2]]) == [('ENG', 1), ('MAT', 1), ('MAT', 2), ('SIE', 1), ('SST', 2), ('SIE', 2)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     subject_marks([(1, 'A'), (2, 'B'), (3, 'C'), (4, 'A'), (5, 'B')]) == [(3, 'C'), (4, 'A'), (1, 'B'), (2, 'A'), (5, 'B')], 'incorrect'\nassert     subject_marks([(1, 'A'), (1, 'B'), (3, 'C'), (2, 'A'), (4, 'B')]) == [(1, 'B'), (1, 'A'), (2, 'A'), (3, 'C'), (4, 'B')], 'incorrect'\nassert     subject_marks([(1, 'A'), (3, 'C'), (2, 'A'), (4, 'B'), (5, 'B')]) == [(1, 'A'), (2, 'A'), (3, 'C'), (4, 'B'), (5, 'B')], 'incorrect'\nassert     subject_marks([(1, 'A'), (3, 'C'), (5, 'B'), (2, 'A'), (4, 'B')]) == [(1, 'A'), (2, 'A'), (3, 'C'), (4, 'B'), (5, 'B')], 'incorrect'\nassert     subject_marks([(1, 'A'), (3, 'C'), (4, 'B'), (5, 'B'), (2, 'A')]) == [(1, 'A'), (2, 'A'), (3, 'C'), (4, 'B'), (5, 'B')], 'incorrect'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     subject_marks([('Computer Science', 80), ('Physics', 90), ('Maths', 100)]) == [('Computer Science', 80), ('Physics', 90), ('Maths', 100)]\nassert     subject_marks([('English', 50), ('Biology', 100), ('Maths', 80)]) == [('English', 50), ('Biology', 100), ('Maths', 80)]\nassert     subject_marks([('Maths', 70), ('Physics', 90), ('English', 80)]) == [('Maths', 70), ('Physics', 90), ('English', 80)]\nassert     subject_marks([('Biology', 100), ('Maths', 80), ('English', 50)]) == [('Biology', 100), ('Maths', 80), ('English', 50)]\n\ndef     two_sum(array, value):\n    '''\n    Write a function to find the sum of two numbers whose digits are anagrams in array.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     subject_marks([('C++', 90), ('JAVA', 80), ('Python', 90), ('Python', 85)]) == [('Python', 85), ('C++', 90), ('JAVA', 80)]\nassert     subject_marks([('C++', 90), ('JAVA', 80), ('Python', 90), ('Python', 85), ('Python', 88)]) == [('Python', 88), ('C++', 90), ('JAVA', 80)]\n\ndef remove_duplicates(list_of_tuples):\n    '''\n    Write a function to remove duplicates from a list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1, [2, 3, [4, 5, 6], 7], 8]) == 22\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([-1, [2, 3, [4, 5, 6], 7], 8]) == 22\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([1, [2, [3, [4, 5]]]]) == 15\nassert     recursive_list_sum([[1, [1, 1]], 2, 3]) == 6\nassert     recursive_list_sum([1, [2, [3, [4, [5, [6, [7]]]]]]]) == 15\nassert     recursive_list_sum([[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]) == 15\nassert     recursive_list_sum([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15]]]]]]]]]]]]]]]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([1, 2, 3, [4, 5, 6], 7, [8, 9, 10]]) == 45\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([1, 2, 3, 4]) == 10\nassert     recursive_list_sum([1, [2, 3], 4, [5, 6]]) == 17\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n\ndef recursive_list_sum2(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([\n                    [1,2,3],\n                    [4,[5,6]],\n                    7\n                ]) == 18\nassert     recursive_list_sum([\n                    [1,2,3],\n                    [4,[5,6],7],\n                    8\n                ]) == 19\nassert     recursive_list_sum([\n                    [1,[2,3]],\n                    [4,[5,6],7],\n                    8\n                ]) == 19\nassert     recursive_list_sum([\n                    [[1,2,3]],\n                    [[4,[5,6]],7],\n                    8\n                ]) == 19\nassert     recursive_list_sum([\n                    [1,2,3,4],\n                    [5,[6,[7,8]]],\n                    9,\n                    [10,[11,[12,13]]],\n                    [14,[15,[16,17]]]\n                ]) == 30\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([[1, [2, 3]], 4, 5]) == 10\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[]]) == 0\nassert     recursive_list_sum([[], 4, 5]) == 10\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1, [2, [3, 4], 5], 6])     ==     sum([1, 2, 3, 4, 5, 6])\nassert     recursive_list_sum([]) ==                     sum([])\nassert     recursive_list_sum([1, [2, [3, 4], 5], 6, 7]) == sum([1, 2, 3, 4, 5, 6, 7])"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1, [2, [3, 4], 5], 6]) == 21\nassert     recursive_list_sum([1, [2, [3, 4], 5], 6, 7, 8, 9, 10, [11, 12, [13, 14], 15]]) == 51"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pos_count([-1, -2, -3, 0, 1, 2, 3]) == 4\nassert     pos_count([-1, -2, -3, 0, 1, 2, -3]) == 4\nassert     pos_count([-1, -2, -3, 0, 1, 2, -3, -4, -5, -6, -7]) == 8\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pos_count([1, 2, 3, 4, 5, -6, 7, 8, 9, 10, -11]) == 4\nassert     pos_count([-1, 2, -3, 4, 5, -6, 7, 8, 9, 10, -11]) == 10\nassert     pos_count([1, 2, 3, -4, 5, 6, -7, 8, 9, 10, -11]) == 5\nassert     pos_count([-1, -2, -3, -4, -5, 6, 7, 8, 9, 10, -11]) == 10\nassert     pos_count([]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pos_count([1,2,3,4,5,6,-1]) == 6\nassert     pos_count([1,2,3,4,-1,-2,-3]) == 3\nassert     pos_count([1,2,3,4,-1,-2,3]) == 2\nassert     pos_count([]) == 0\nassert     pos_count([-1,-2,-3,-4,-5]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pos_count([-1,2,3,-4,5,6,7]) == 3\nassert     pos_count([1,2,3,4,5,-6,7,8]) == 4\nassert     pos_count([1,-2,3,-4,5,6,7]) == 6\nassert     pos_count([1,2,3,-4,5,6,7,8]) == 7\nassert     pos_count([-1,-2,3,-4,5,6,7]) == 6\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         pos_count([-1, 2, -3, 4, 5]) == 2\nassert         pos_count([2, -3, 4, 5]) == 2\nassert         pos_count([-1, -2, -3, -4]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pos_count([1,2,-4,-5,-6,7,8,9,-2,-5,-8,9,-2,-3]) == 5\nassert     pos_count([1,2,3,4,5,6,7,8,9,-2,-5,-8,9,-2,-3]) == 9\nassert     pos_count([1,2,3,4,5,6,7,8,9,-2,-5,-8,9,-2,-3,0]) == 10\nassert     pos_count([1,2,3,4,5,6,7,8,9,-2,-5,-8,9,-2,-3,0,-4,-5,-6,-7,-8,-9,-10]) == 0\nassert     pos_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pos_count([1,2,3,-4,5]) == 1\nassert     pos_count([1,2,-3,-4,5]) == 2\nassert     pos_count([]) == 0\nassert     pos_count([1,-2,3,-4,5]) == 0\nassert     pos_count([1,-2,0,-4,5]) == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\nassert     pos_count([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\nassert     pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 10\nassert     pos_count([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == 10\n\ndef pos_count2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum([1 for x in list if x > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pos_count([1, 2, 3, 4, 5]) == 1\nassert     pos_count([-1, 2, 3, 4, -5]) == 1\nassert     pos_count([-1, -2, -3, -4, -5]) == 1\nassert     pos_count([]) == 0\nassert     pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pos_count([1, 2, 3, 4, 5]) == 3\nassert     pos_count([1, 3, -4, 0]) == 2\nassert     pos_count([]) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     bell_number(5) == 15\nassert     bell_number(10) == 252\nassert     bell_number(100) == 4684\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 1\nassert     bell_number(4) == 1\nassert     bell_number(5) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     bell_number(5)    == bell_number(6)\nassert     bell_number(2)    == bell_number(3)\nassert     bell_number(1)    == bell_number(2)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \ndef lexicographic(s):\n    '''\n    Given a string of lowercase letters, rearrange the letters to form the lexicographically smallest string.\n    '''\n    pass\n\ndef permutations(s):\n    '''\n    Given a string, rearrange the letters to form the lexicographically smallest string.\n    '''\n    pass\n\ndef permuteUnique(s):\n    '''\n    Given a string, rearrange the letters to form the lexicographically smallest string, where the same letter \n    can be rearranged multiple times.\n    '''\n    pass\n\ndef permuteUnique2(s):\n    '''\n    Given a string, rearrange the letters to form the lexicographically smallest string, where the same letter \n    can be rearranged multiple times and no two letters are used in the same position.\n    '''\n    pass\n\ndef twoSum(nums, target):\n    '''\n    Given an array of integers, find two numbers such that they add up to a specific target number.\n    The function twoSum should return indices of the two numbers such that they add up to the target, \n    where index1 must be less than index2. Please note that your returned answers (both index1 and index2) \n    are not zero-based.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nbell_number(1) == 1\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 14\nassert bell_number(5) == 42\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bell_number(3) == 1\nassert     bell_number(7) == 2\nassert     bell_number(12) == 3\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1101, -1]) == True\nassert     is_Monotonic([1, 1, 1, 1, 1]) == True\nassert     is_Monotonic([-1, -1, -1, -1]) == True\nassert     is_Monotonic([5, 10, 20, 100]) == True\nassert     is_Monotonic([1, 2, 3, 3, 2, 1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Monotonic([1, 2, 4, 5]) == False\nassert     is_Monotonic([1, 1, 1]) == True\nassert     is_Monotonic([]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5]) == False\nassert     is_Monotonic([1, 2, 3, 4, 5, 6]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1, 1, 1]) == True\nassert     is_Monotonic([1, 2, 3]) == False\nassert     is_Monotonic([3, 2, 1]) == True\nassert     is_Monotonic([1, 2, 4, 3]) == True\nassert     is_Monotonic([1, 2, 4, 3, 2]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\nassert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == False\nassert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\nassert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\nassert is_Monotonic([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Monotonic(A) == True\nassert     is_Monotonic(B) == False\nassert     is_Monotonic(C) == False\nassert     is_Monotonic(D) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Monotonic([]) == True, \"Test 1\"\nassert     is_Monotonic([1, 2, 3, 4]) == True, \"Test 2\"\nassert     is_Monotonic([1, 3, 2, 4]) == False, \"Test 3\"\nassert     is_Monotonic([4, 3, 2, 1]) == False, \"Test 4\"\nassert     is_Monotonic([5, 6, 7, 8, 9, 10]) == True, \"Test 5\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Monotonic([]) == True\nassert     is_Monotonic([1]) == True\nassert     is_Monotonic([1,2]) == True\nassert     is_Monotonic([1,2,2]) == True\nassert     is_Monotonic([1,2,3,3]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Monotonic([]) == True\nassert     is_Monotonic([1]) == True\nassert     is_Monotonic([1,2,2,3]) == True\nassert     is_Monotonic([1,1,1,1]) == True\nassert     is_Monotonic([1,2,3,4,5]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Monotonic([1, 2, 3, 4, 5]) is True\nassert is_Monotonic([1, 3, 2, 4, 5]) is False\nassert is_Monotonic([4, 5, 3, 2, 1]) is True\nassert is_Monotonic([1, 2, 3, 4, 5]) is True\nassert is_Monotonic([1, 1, 1]) is True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Monotonic([1, 2, 2, 3]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5]) == True\nassert     is_Monotonic([1, 2, 3, 4, 3, 5, 6]) == True\nassert     is_Monotonic([1, 2, 3, 4, 3, 4, 5, 6, 7, 10, 11]) == True\nassert     is_Monotonic([1, 2, 3, 4, 3, 4, 5, 6, 6, 6, 6]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sublist([1,2,3,4], [1,2])\nassert     not is_sublist([1,2,3,4], [2,4])\nassert     is_sublist([1,2,3,4], [1,2,3])\nassert     not is_sublist([1,2,3,4], [3,4])\nassert     is_sublist([1,2,3,4,5], [1,2,3])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f']) == True\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd']) == True\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b']) == False\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd']) == False\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b']) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sublist([1,2,3,4,5,6], [1,2,3,4])\nassert     not is_sublist([1,2,3,4,5,6], [1,2,3,4,6])\nassert     not is_sublist([1,2,3,4,5,6], [1,2,3,4,5])\nassert     not is_sublist([1,2,3,4,5,6], [1,2,3])\nassert     not is_sublist([1,2,3,4,5,6], [1,2,3,4])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_sublist([1,2,3,4], [1,2,3,4]) == True\nassert     is_sublist([1,2,3,4], [1,2,3,4,5]) == False\nassert     is_sublist([1,2,3], [1,2,3,4]) == True\nassert     is_sublist([1,2,3,4], [1,2,3]) == True\nassert     is_sublist([1,2,3,4], [1,2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sublist([1,2,3], [2,3]) == True\nassert     is_sublist([1,2,3], [1,2]) == False\nassert     is_sublist([], [1,2,3]) == True\nassert     is_sublist([1,2,3], []) == False\n\ndef move_zeros(l):\n    '''\n    Write a function to move all zeros to the end of a list, preserving the order of other elements.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sublist([1, 2, 3], [2, 3]) == True\nassert     is_sublist([1, 2, 3, 4], [2, 3, 4]) == True\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3, 4]) == True\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4, 5], [1, 2]) == False\nassert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]) == False\nassert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2])\nassert     not is_sublist([1, 2, 3], [4, 5])\nassert     not is_sublist([1, 2], [1, 2, 3])\n\n\n'''\n2.8.3\nWrite a function to check if a binary tree is a perfect binary tree or not.\n'''\ndef is_perfect_binary_tree(t):\n    '''\n    Assume that each node has a label and left and right child.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sublist([1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7]) == True\nassert is_sublist([1, 3, 4, 5, 6, 7, 8], [8]) == True\nassert is_sublist([1, 3, 4, 5, 6, 7, 8], [9]) == False\nassert is_sublist([1, 3, 4, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4], [2, 3]) == True\nassert     is_sublist([1, 2, 3, 4], [3, 4]) == True\nassert     is_sublist([1, 2, 3, 4], [4]) == True\nassert     is_sublist([1, 2, 3, 4], [5, 6]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_equal_tuple( [(2, 5), (1, 2, 3, 4)] ) == True\nassert     find_equal_tuple( [(1, 2), (3, 4, 5)] ) == False\nassert     find_equal_tuple( [(3,), (2,)] ) == False\nassert     find_equal_tuple( [(1,), (2,)] ) == False\nassert     find_equal_tuple( [(1, 2), (2, 1)] ) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1,2,3), (4,5,6), (7,8,9), (10, 11, 12)]) == True\nassert     find_equal_tuple([(1,2,3), (4,5,6), (7,8,9), (10, 11, 12)]) == True\nassert     find_equal_tuple([(1,2), (4,5), (7,8)]) == False\nassert     find_equal_tuple([(1,2,3), (4,5,6,7)]) == False\nassert     find_equal_tuple([(1,2), (4,5)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_equal_tuple(())    == True\nassert     find_equal_tuple((1,2))    == True\nassert     find_equal_tuple((1,3,4,5))    == True\nassert     find_equal_tuple((1,2,3,4))    == False\nassert     find_equal_tuple((1,2,3,4,5,6,7,8))    == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1,2,3,4),(5,6,7,8,9),(10,11,12,13,14)])==True, \"Should be True\"\nassert     find_equal_tuple([(1,2,3,4),(5,6,7),(10,11,12,13,14)])==False, \"Should be False\"\nassert     find_equal_tuple([(1,2,3),(5,6,7),(10,11,12,13,14)])==False, \"Should be False\"\n\ndef bubble_sort(Input):\n    '''\n    Write a function to sort the list of tuples by the second element of tuples\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)-1-i):\n            if Input[j][1]>Input[j+1][1]:\n                temp=Input[j]\n                Input[j]=Input[j+1]\n                Input[j+1]=temp\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(1,2,3),(3,4,5),(5,6,7)]) == True\nassert     find_equal_tuple([(1,2,3,4),(5,6,7)]) == False\nassert     find_equal_tuple([(1,2,3),(2,3,4,5)]) == False\nassert     find_equal_tuple([(1,2,3,4,5),(6,7,8,9,10)]) == False\nassert     find_equal_tuple([]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_equal_tuple((1, 2, 3, 4, 5)) == True\nassert     find_equal_tuple((1, 2, 3)) == False\nassert     find_equal_tuple((1, 2)) == True\nassert     find_equal_tuple((1,)) == True\nassert     find_equal_tuple(()) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_equal_tuple(\n            [\n                (1,2,3),\n                (1,2,3),\n                (1,2,3),\n            ]\n        ) == True\nassert     find_equal_tuple(\n            [\n                (1,2,3),\n                (1,2,3),\n                (4,5,6),\n            ]\n        ) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_equal_tuple(()) == False\nassert     find_equal_tuple((1,2,3)) == False\nassert     find_equal_tuple(()) == True\nassert     find_equal_tuple((1,2)) == True\nassert     find_equal_tuple((1,2,3,4)) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_equal_tuple((3,4,5)) == 1\nassert     find_equal_tuple((3,4,5,6)) == 0\nassert     find_equal_tuple((3,4,5,6,7)) == 0\nassert     find_equal_tuple((1,2,3,4,5,6)) == 0\nassert     find_equal_tuple((5,6,7,8,9,10)) == 0\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_equal_tuple((1,2,3,4)) == True\nassert     find_equal_tuple((1,2,3,4,5)) == False\nassert     find_equal_tuple((1,2,3,4,5,6)) == True\nassert     find_equal_tuple(()) == True\nassert     find_equal_tuple((1,2,3,4)) == True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     comb_sort([6,2,7,4,8,3,1]) == [1,2,3,4,6,7,8], 'Error'\nassert     comb_sort([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8], 'Error'\nassert     comb_sort([1,2,3,1,4,2,2,3,2,3,1,2,3,1]) == [1,1,1,2,2,2,3,3,3,4,4,5,6,7,8], 'Error'\nassert     comb_sort([4,3,2,1]) == [1,2,3,4], 'Error'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [comb_sort(nums) for nums in [[], [0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]] \\\n    == [[], [0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     comb_sort([1, 3, 5, 4, 2, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([1, 5, 3, 4, 2, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 2, 3, 4] == comb_sort([4, 3, 2, 1])\nassert     [1, 2, 3, 4] == comb_sort([4, 3, 2, 1])\nassert     [3, 4, 1, 2] == comb_sort([4, 3, 2, 1])\nassert     [1, 2, 3, 4] == comb_sort([4, 3, 2, 1])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7] == comb_sort([7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7] == comb_sort([7, 6, 5, 4, 3, 2, 1, 1])\nassert     [1, 2, 3, 4, 5, 6, 7] == comb_sort([7, 6, 5, 4, 3, 2, 1, 1, 1])\nassert     [1, 2, 3, 4, 5, 6, 7] == comb_sort([7, 6, 5, 4, 3, 2, 1, 1, 1, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8] == comb_sort([8, 7, 6, 5, 4, 3, 2, 1])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     comb_sort(nums) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (comb_sort([1, 2, 3])     == [1, 2, 3])\nassert     (comb_sort([3, 2, 1])     == [1, 2, 3])\nassert     (comb_sort([3, 2, 1, 0])     == [0, 1, 2, 3])\nassert     (comb_sort([0, 1, 2, 3])     == [0, 1, 2, 3])\nassert     (comb_sort([3, 2, 1, 0, -1])     == [-1, 0, 1, 2, 3])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [2, 1, 5, 4, 3] == comb_sort([3, 5, 1, 4, 2])\nassert     [1, 2, 4, 5, 3] == comb_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == comb_sort([5, 4, 3, 2, 1])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     dif_Square(6)==True\nassert     dif_Square(8)==True\nassert     dif_Square(7)==False\nassert     dif_Square(9)==False\nassert     dif_Square(10)==True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dif_Square(36)    == True\nassert     dif_Square(12)    == True\nassert     dif_Square(14)    == False\nassert     dif_Square(13)    == False\nassert     dif_Square(15)    == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dif_Square(1) == True\nassert     dif_Square(2) == True\nassert     dif_Square(4) == True\nassert     dif_Square(5) == True\nassert     dif_Square(12) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     dif_Square(25) == True\nassert     dif_Square(36) == True\nassert     dif_Square(44) == False\nassert     dif_Square(4) == False\nassert     dif_Square(36) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dif_Square(13) == True\nassert    dif_Square(13.1) == True\nassert    dif_Square(-13) == True\nassert    dif_Square(7) == False\nassert    dif_Square(21) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dif_Square(20) == True \nassert     dif_Square(25) == True \nassert     dif_Square(27) == False \nassert     dif_Square(12) == False \nassert     dif_Square(23) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dif_Square(0) == True\nassert     dif_Square(1) == True\nassert     dif_Square(2) == True\nassert     dif_Square(3) == True\nassert     dif_Square(4) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dif_Square(89) == True\nassert     dif_Square(23) == False\nassert     dif_Square(100) == True\nassert     dif_Square(27) == False\nassert     dif_Square(26) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     dif_Square(1) == True\nassert     dif_Square(12) == True\nassert     dif_Square(13) == False\nassert     dif_Square(27) == False\nassert     dif_Square(81) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_samepatterns([\"blue\", \"yellow\", \"red\", \"red\", \"yellow\", \"green\", \"blue\", \"blue\"], [1,2,4]) == True\nassert     is_samepatterns([\"blue\", \"yellow\", \"red\", \"red\", \"yellow\", \"green\", \"blue\", \"blue\"], [1,2,3,5]) == True\nassert     is_samepatterns([\"blue\", \"yellow\", \"red\", \"red\", \"yellow\", \"green\", \"blue\", \"blue\"], [1,2,4,6]) == False\nassert     is_samepatterns([\"blue\", \"yellow\", \"red\", \"red\", \"yellow\", \"green\", \"blue\", \"blue\"], [1,2,3,5,6]) == False\nassert     is_samepatterns([\"blue\", \"yellow\", \"red\", \"red\", \"yellow\", \"green\", \"blue\", \"blue\"], [1,2,4,5]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_samepatterns([1,2,1], [1,2])\nassert     is_samepatterns([1,2,3], [1,2,3])\nassert     is_samepatterns([1,2,3], [1,1,1])\nassert     is_samepatterns([1,2,3,4], [1,2,1,2])\nassert     is_samepatterns([1,2,3,4], [1,2,2,1])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_samepatterns([\"red\", \"blue\", \"yellow\", \"orange\", \"green\"],\n    [[\"red\", \"blue\"], [\"red\", \"yellow\"], [\"orange\", \"green\"], [\"yellow\", \"orange\"], [\"blue\", \"green\"]])\nassert     is_samepatterns([\"red\", \"blue\", \"yellow\", \"orange\", \"green\"],\n    [[\"red\", \"blue\"], [\"red\", \"blue\", \"red\"], [\"red\", \"yellow\"], [\"orange\", \"green\"], [\"yellow\", \"orange\"]])\nassert     not is_samepatterns([\"red\", \"blue\", \"yellow\", \"orange\", \"green\"],\n    [[\"red\", \"blue\"], [\"red\", \"blue\"], [\"red\", \"blue\"], [\"red\", \"yellow\"], [\"orange\", \"green\"]])\nassert     not is_samepatterns([\"red\", \"blue\", \"yellow\", \"orange\", \"green\"],\n    [[\"red\", \"blue\"], [\"red\", \"blue\"], [\"red\", \"blue\"], [\"red\", \"yellow\"], [\"orange\", \"green\"]])\nassert     is_samepatterns([\"red\", \"blue\", \"yellow\", \"orange\", \"green\"],\n    [[\"red\", \"blue\"], [\"red\", \"blue\", \"red\"], [\"red\", \"yellow\"], [\"orange\", \"green\"], [\"yellow\", \"orange\"]])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_samepatterns(['red', 'blue', 'blue', 'green'], ['blue', 'blue'])\nassert     is_samepatterns(['red', 'blue', 'blue', 'green'], ['blue', 'blue', 'blue', 'blue'])\nassert     is_samepatterns(['red', 'blue', 'blue', 'green'], ['red','red', 'blue', 'blue'])\nassert     is_samepatterns(['red', 'blue', 'blue', 'green'], ['red', 'blue', 'green', 'blue'])\nassert     is_samepatterns(['red', 'blue', 'blue', 'green'], ['red', 'blue', 'blue', 'green', 'blue'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['red','red','red', 'yellow', 'green'], ['red', 'yellow', 'green'])\nassert     is_samepatterns(['red','red','red', 'yellow', 'green'], ['yellow', 'green', 'green'])\nassert     is_samepatterns(['red','red','red', 'yellow', 'green'], ['green', 'yellow','red'])\nassert     is_samepatterns(['red','red','red', 'yellow', 'green'], ['yellow', 'green','red', 'green'])\nassert     is_samepatterns(['red','red','red', 'yellow', 'green'], ['yellow', 'green','red', 'green','red'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_samepatterns(['b', 'g', 'r', 'b', 'y', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', 'b', 'b', 'y', 'b', 'r', "
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_samepatterns([\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['w', 'b', 'o', 'y', 'o', 'r', 'o', 'b', 'g', 'y', 'o'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['y', 'o', 'r', 'g', 'b', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['o', 'r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o'],\n                ['r', 'o', 'b', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['b', 'y', 'o', 'g', 'y', 'o', 'b', 'g', 'y', 'o', 'y'],\n                ['g', 'w', 'b', 'y', 'o', 'o', 'r', 'g', 'b', 'o', 'y'],\n                ['"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_samepatterns(['Red', 'Green', 'Blue', 'White'], [2, 1, 0]) == True\nassert     is_samepatterns(['Red', 'Green', 'Blue', 'White'], [0, 1, 2]) == False\nassert     is_samepatterns(['Red', 'Green', 'Blue', 'White'], [2, 1, 3, 0]) == False\nassert     is_samepatterns(['Red', 'Green', 'Blue', 'White'], [0, 1, 2, 3]) == False\nassert     is_samepatterns(['Red', 'Green', 'Blue', 'White', 'Black', 'Orange', 'White'], [1, 3, 4, 5, 0, 2, 6]) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_samepatterns(['#f00', '#0f0', '#ff0', '#00f', '#f0f', '#fff'], ['#f00', '#0f0', '#ff0', '#00f', '#f0f', '#fff'])\nassert     is_samepatterns(['#ff0', '#0f0', '#f00'], ['#ff0', '#0f0', '#f00'])\nassert     is_samepatterns(['#00f', '#ff0', '#0f0'], ['#00f', '#ff0', '#0f0'])\nassert     is_samepatterns(['#f00', '#0f0', '#ff0', '#00f', '#f0f', '#fff'], ['#f00', '#0f0', '#ff0', '#00f', '#f0f', '#fff'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_samepatterns([\"blue\",\"green\",\"red\"], [\"bluewhite\", \"bluewhite\", \"bluewhite\"]) \nassert not is_samepatterns([\"blue\",\"green\",\"red\"], [\"bluewhite\", \"bluewhite\", \"bluewhite\", \"bluewhite\"]) \nassert     is_samepatterns([\"blue\",\"green\",\"red\"], [\"blue\", \"green\", \"red\"])\nassert not is_samepatterns([\"blue\",\"green\",\"red\"], [\"blue\", \"green\", \"red\", \"blue\"])"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef group_elements(list_of_tuples, K):\n    '''\n    Write a function to group the elements in a list of tuples by the last element of the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_tuples([(1, 3, 4), (2, 6, 8), (3, 6, 9)], 2) == [(3, 6, 9)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(3, 4), (5, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_tuples([(1, 5), (3, 8), (5, 10)], 4) == [(1, 5), (3, 8), (5, 10)]\nassert     find_tuples([(1, 5), (3, 8), (5, 10)], 3) == [(1, 5), (3, 8), (5, 10)]\nassert     find_tuples([(1, 5), (3, 8), (5, 10)], 2) == [(1, 5), (3, 8), (5, 10)]\nassert     find_tuples([(1, 5), (3, 8), (5, 10)], 1) == [(1, 5), (3, 8), (5, 10)]\nassert     find_tuples([(1, 5), (3, 8), (5, 10)], 5) == [(1, 5), (3, 8), (5, 10)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_tuples([(4,6),(8,9),(12,18)],2) == [(4,6),(12,18)]\nassert     find_tuples([(4,6),(8,9),(12,18)],4) == [(8,9),(12,18)]\nassert     find_tuples([(4,6),(8,9),(12,18)],5) == [(4,6),(8,9),(12,18)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 3) == [(3, 4), (4, 5), (5, 6)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)], 3) == [(3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)], 5) == [(5, 6), (6, 7), (7, 8), (8, 9)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14)], 5) == [(5, 6), (6, 7), (7, 8), (8, 9)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14)], 15) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_tuples([(1,2,3),(1,2,3),(1,2,3)], 3) == [(1,2,3)]\nassert     find_tuples([(1,2,3),(1,2,3),(1,2,3)], 4) == [(1,2,3)]\nassert     find_tuples([(1,2,3),(1,2,3),(1,2,3),(1,2,3)], 5) == [(1,2,3),(1,2,3)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_tuples([(2, 6), (1, 6), (2, 4), (3, 4)], 2) == [(2, 6), (1, 6)]\nassert     find_tuples([(2, 6), (1, 6), (2, 4), (3, 4)], 3) == [(2, 6), (1, 6)]\nassert     find_tuples([(2, 6), (1, 6), (2, 4), (3, 4)], 4) == [(2, 6), (1, 6)]\nassert     find_tuples([(2, 6), (1, 6), (2, 4), (3, 4)], 5) == []\n\ndef count_divisible(n, divisor):\n    '''\n    Write a function to count how many times the given number is divisible by the divisor.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_tuples([(5, 10, 12), (15, 22, 19)], 5) == [(5, 10, 12), (15, 22, 19)]\nassert     find_tuples([(7, 13, 19), (17, 19, 23), (29, 29, 37)], 2) == [(17, 19, 23), (29, 29, 37)]\nassert     find_tuples([(7, 13, 19), (17, 19, 23), (29, 29, 37)], 19) == [(17, 19, 23), (29, 29, 37)]\nassert     find_tuples([(7, 13, 19), (17, 19, 23), (29, 29, 37)], 28) == [(29, 29, 37)]\nassert     find_tuples([(7, 13, 19), (17, 19, 23), (29, 29, 37)], 30) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_tuples([(2, 4, 6), (6, 8, 10), (20, 25, 30)], 5) == [(20, 25, 30)]\nassert     find_tuples([(2, 4, 6), (6, 8, 10), (20, 25, 30)], 7) == [(20, 25, 30)]\nassert     find_tuples([(2, 4, 6), (6, 8, 10), (20, 25, 30)], 4) == [(2, 4, 6), (6, 8, 10)]\nassert     find_tuples([(2, 4, 6), (6, 8, 10), (20, 25, 30)], 2) == [(2, 4, 6), (6, 8, 10), (20, 25, 30)]\nassert     find_tuples([(2, 4, 6), (6, 8, 10), (20, 25, 30)], 0) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         find_tuples([(1, 2, 3), (1, 2, 4), (5, 6, 7)], 2) == [(1, 2, 3), (5, 6, 7)]\nassert         find_tuples([(1, 2, 3), (1, 2, 4), (5, 6, 7)], 3) == [(1, 2, 3), (1, 2, 4), (5, 6, 7)]\nassert         find_tuples([(1, 2, 3), (1, 2, 4), (5, 6, 7)], 4) == [(1, 2, 3), (1, 2, 4), (5, 6, 7)]\nassert         find_tuples([(1, 2, 3), (1, 2, 4), (5, 6, 7)], 5) == [(1, 2, 3), (1, 2, 4), (5, 6, 7)]\nassert         find_tuples([(1, 2, 3), (1, 2, 4), (5, 6, 7)], 6) == [(1, 2, 3), (1, 2, 4), (5, 6, 7)]\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Diff(8)==False\nassert     is_Diff(9)==False\nassert     is_Diff(10)==False\nassert     is_Diff(11)==True\nassert     is_Diff(100)==False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (is_Diff(19) == False)\nassert     (is_Diff(19) == True)\nassert     (is_Diff(17) == True)\nassert     (is_Diff(16) == False)\nassert     (is_Diff(41) == False)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Diff(0) == True\nassert     is_Diff(11) == False\nassert     is_Diff(11*11) == True\nassert     is_Diff(11*11*11) == False\nassert     is_Diff(11*11*11*11) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Diff(12)\nassert     is_Diff(19)\nassert     is_Diff(21)\nassert     not is_Diff(8)\n\n\ndef is_Pali(str):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(22) == False\nassert     is_Diff(11*11) == True\nassert     is_Diff(22*11) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Diff(0) is True\nassert     is_Diff(1) is False\nassert     is_Diff(10) is True\nassert     is_Diff(11) is True\nassert     is_Diff(100) is False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef test_is_Diff():\n    n = 5\n    assert is_Diff(n) == False\n    n = 17\n    assert is_Diff(n) == True\n    n = 10\n    assert is_Diff(n) == True\n    n = 6\n    "
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (is_Diff(15) == False)\nassert     (is_Diff(11) == True)\nassert     (is_Diff(11.5) == True)\nassert     (is_Diff(11.6) == False)\nassert     (is_Diff(14) == True)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Diff(12) == False\nassert     is_Diff(10) == True\nassert     is_Diff(11) == False\nassert     is_Diff(21) == True\nassert     is_Diff(13) == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     word_len('word') == False\nassert     word_len('hello') == True\nassert     word_len('well') == True\nassert     word_len('happy') == True\nassert     word_len('blah') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     word_len('word') == False\nassert     word_len('ab') == True\nassert     word_len('abcd') == False\nassert     word_len('hihihi') == False\nassert     word_len('aaaaaaaaaaaaa') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     word_len('abc') == True\nassert word_len('ab') == False\nassert word_len('abc123') == False\nassert word_len('abc123') == True\n\ndef test_is_positive_int():\n    '''\n    Write a python function to check whether the input is a positive integer or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     word_len('abcd') == False\nassert     word_len('abc') == True\nassert     word_len('abcd a') == True\nassert     word_len('abcd a ') == False\n\n\ndef comp_name(name):\n    '''\n    Write a python function to check whether a string is compreised by a given word or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     word_len('civic') == True\nassert     word_len('civil') == False\nassert     word_len('school') == True\nassert     word_len('day') == False\nassert     word_len('salary') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     word_len('Life') == False\nassert     word_len('blue') == True\nassert     word_len('mom') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     word_len('word')         == False\nassert     word_len('test')         == True\nassert     word_len('test1')     == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     word_len('a') == True\nassert     word_len('ab') == False\nassert     word_len('abc') == False\nassert     word_len('abcd') == True\nassert     word_len('abcdef') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     word_len('python') == True\nassert     word_len('hello') == False\nassert     word_len('Java') == False\nassert     word_len('ab') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 2\nassert     tetrahedral_number(3) == 3\nassert     tetrahedral_number(4) == 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 2\nassert     tetrahedral_number(3) == 3\nassert     tetrahedral_number(4) == 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(10) == 7\nassert     tetrahedral_number(20) == 70\nassert     tetrahedral_number(30) == 504\nassert     tetrahedral_number(40) == 732\nassert     tetrahedral_number(50) == 824\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 1\nassert     tetrahedral_number(3) == 1\nassert     tetrahedral_number(4) == 2\nassert     tetrahedral_number(5) == 2\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tetrahedral_number(3) == 3\nassert     tetrahedral_number(5) == 6\nassert     tetrahedral_number(7) == 10\nassert     tetrahedral_number(9) == 19\nassert     tetrahedral_number(20) == 46697\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 6\nassert     tetrahedral_number(3) == 10\nassert     tetrahedral_number(4) == 15\nassert     tetrahedral_number(5) == 22\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 3\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 10\nassert     tetrahedral_number(5) == 15\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 1\nassert     tetrahedral_number(3) == 2\nassert     tetrahedral_number(4) == 3\nassert     tetrahedral_number(5) == 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 10\nassert     tetrahedral_number(4) == 22\nassert     tetrahedral_number(5) == 37\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 10\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_sphere(5) == (22/7)\nassert     volume_sphere(2) == (math.pi*4/3)\nassert     volume_sphere(0) == 0\n\ndef run_volume_sphere():\n    for r in range(100):\n        assert     volume_sphere(r) == (22/7)\n        "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     math.pi * 4 / 3 * math.pow(r, 3) == volume_sphere(r)\n\ndef volume_sphere_v1(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 / 3 * math.pi * math.pow(r, 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_sphere(2) == 4/3\nassert     volume_sphere(3) == 4/3\nassert     volume_sphere(4) == 4/3\nassert     volume_sphere(5) == 4/3\nassert     volume_sphere(10) == 4/3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_sphere(1.0) == 4.1887902047863905, \"incorrect\"\nassert     volume_sphere(2.0) == 12.566370614359172, \"incorrect\"\nassert     volume_sphere(5.0) == 4188.7902047863905, \"incorrect\"\nprint \"volume_sphere:    passed\"\n\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_sphere(5) == 4/3 * math.pi * 5**3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_sphere(1.0) == 4.18879020478639\nassert     volume_sphere(2.0) == 12.566370614359172\nassert     volume_sphere(3.0) == 28.274333882308138\nassert     volume_sphere(4.0) == 32.52359877559829\nassert     volume_sphere(5.0) == 50.265482457436743\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_sphere(5) == 4.1887902047863905, \"sphere\"\nassert     volume_sphere(2) == 1.0471975511965976, \"sphere\"\nassert     volume_sphere(3) == 0.09337341912151204, \"sphere\"\nprint \"Passed unit tests\"\n\ndef volume_sphere2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_sphere(5) == 4188.84\nassert     volume_sphere(10) == 55685.8\nassert     volume_sphere(0) == 0\nassert     volume_sphere(0.000001) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_sphere(2) == 4 * math.pi * 2 ** 3\nassert     volume_sphere(3) == 4 * math.pi * 3 ** 3\n\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     volume_sphere(1) == 4.1887902047863905\nassert     volume_sphere(3) == 28.274333882308138\nassert     volume_sphere(5) == 125.63347266601562\nassert     volume_sphere(7) == 466.5242165434292\nassert     volume_sphere(9) == 1433.6596330606783\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_Char('abc') == 97\nassert     get_Char('ab') == 65\nassert     get_Char('abcd') == 97\nassert     get_Char('abcd1') == 97\nassert     get_Char('abcd2') == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_Char('vivek') == 104\nassert     get_Char('i') == 105\nassert     get_Char('I') == 105\nassert     get_Char('PYTHON') == 75\nassert     get_Char('PROGRAMMING') == 128\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_Char('Hello World') == 122, 'Function get_Char not correct'\nassert     get_Char('Python') == 110, 'Function get_Char not correct'\nassert     get_Char('Python3') == 109, 'Function get_Char not correct'\nassert     get_Char('CP') == 32, 'Function get_Char not correct'\nassert     get_Char('PP') == 15, 'Function get_Char not correct'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_Char(\"A\") == 65\nassert     get_Char(\"AA\") == 68\nassert     get_Char(\"C\") == 67\nassert     get_Char(\"CAA\") == 70\nassert     get_Char(\"AAABBCCCAA\") == 70\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_Char('hello') == 107\nassert     get_Char('abcd') == 90\nassert     get_Char('abcde') == 61\nassert     get_Char('s') == 115\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_Char('abcd') == 23\nassert     get_Char('mnbvcxz') == 6\nassert     get_Char('qkuxzazf') == 1\nassert     get_Char('kfxrzmv') == 25\nassert     get_Char('fnpwlyrcr') == 28\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_Char('this') == 110\nassert     get_Char('this') == 110\nassert     get_Char('this') == 110\nassert     get_Char('this') == 110\nassert     get_Char('this') == 110\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_Char(\"zz\") == 26\nassert     get_Char(\"AA\") == 26\nassert     get_Char(\"ab\") == 26\nassert     get_Char(\"AAAB\") == 13\nassert     get_Char(\"AAAA\") == 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_Char(\"C\") == 100\nassert     get_Char(\"AZ\") == 65\nassert     get_Char(\"aBc\") == 97\nassert     get_Char(\"ABc\") == 97\nassert     get_Char(\"AAbc\") == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_Char('I') == 25\nassert     get_Char('abc') == 10\nassert     get_Char('xyz') == 3\nassert     get_Char(' ') == 32\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sequence(10) == 25, 'Test 1'\nassert     sequence(5) == 19, 'Test 2'\nassert     sequence(2) == 11, 'Test 3'\nassert     sequence(1) == 19, 'Test 4'\nassert     sequence(0) == 25, 'Test 5'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 4\nassert     sequence(5) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sequence(0) == 0\nassert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 4\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 4\nassert     sequence(5) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sequence(0) == 0\nassert     sequence(1) == 1\nassert     sequence(5) == 5\nassert     sequence(20) == 6765\nassert     sequence(100) == 354224848179261915075\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 1\nassert     sequence(4) == 2\nassert     sequence(5) == 2\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 4\nassert     sequence(5) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sequence(1) == 1, 'incorrect'\nassert     sequence(3) == 16, 'incorrect'\nassert     sequence(4) == 48, 'incorrect'\nassert     sequence(5) == 256, 'incorrect'\nassert     sequence(6) == 512, 'incorrect'\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(1)     ==     4 * math.pi\nassert     surfacearea_sphere(2)     ==     12 * math.pi\nassert     surfacearea_sphere(3)     ==     24 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     surfacearea_sphere(3) == 2.2389797645835443 * 4\nassert     surfacearea_sphere(5) == 2.89797645835443 * 6\nassert     surfacearea_sphere(7) == 3.9797645835443 * 8\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (0.5 * 4 * math.pi * (3**(1/2))) == surfacearea_sphere(3)\nassert     (4 * 4 * math.pi * (2**(1/2))) == surfacearea_sphere(2)\nassert     (6 * 4 * math.pi * (1**(1/2))) == surfacearea_sphere(1)\nassert     (12 * 4 * math.pi * (0.5**(1/2))) == surfacearea_sphere(0.5)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(1)    == 4 * math.pi\nassert     surfacearea_sphere(2)    == 12 * math.pi\nassert     surfacearea_sphere(3)    == 26 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(0.5) == 4*math.pi\nassert     surfacearea_sphere(1) == 4*math.pi\nassert     surfacearea_sphere(2) == 4*math.pi\nassert     surfacearea_sphere(3) == 12*math.pi\nassert     surfacearea_sphere(4) == 12*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(2) == 12 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(2) == 4*math.pi\nassert     surfacearea_sphere(1) == 4*math.pi\nassert     surfacearea_sphere(0) == 0\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(5) == 4*math.pi * 5**2\nassert     surfacearea_sphere(0) == 0\nassert     surfacearea_sphere(1) == 4*math.pi\nassert     surfacearea_sphere(-5) == 0\nassert     surfacearea_sphere(0.5) == 4*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(1) == 4*math.pi\nassert     surfacearea_sphere(2) == 4*math.pi*math.sqrt(2)\nassert     surfacearea_sphere(3) == 4*math.pi*math.sqrt(2)\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(5) == 20\nassert     centered_hexagonal_number(10) == 72\nassert     centered_hexagonal_number(15) == 126\nassert     centered_hexagonal_number(20) == 752\nassert     centered_hexagonal_number(25) == 776\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(8) == 3226\nassert     centered_hexagonal_number(10) == 10912\nassert     centered_hexagonal_number(100) == 3252\n\ndef centered_octagonal_number(n):\n    '''\n    Write a function to find nth centered octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(1) == 0\nassert     centered_hexagonal_number(2) == 5\nassert     centered_hexagonal_number(3) == 22\nassert     centered_hexagonal_number(4) == 41\nassert     centered_hexagonal_number(5) == 57\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1)    ==    1\nassert     centered_hexagonal_number(2)    ==    3\nassert     centered_hexagonal_number(3)    ==    7\nassert     centered_hexagonal_number(4)    ==    11\nassert     centered_hexagonal_number(5)    ==    19\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(6) == 17\nassert     centered_hexagonal_number(7) == 32\nassert     centered_hexagonal_number(10) == 61\nassert     centered_hexagonal_number(100) == 353543\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(5) == 12\nassert     centered_hexagonal_number(25) == 60\nassert     centered_hexagonal_number(50) == 145\nassert     centered_hexagonal_number(100) == 212\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(12) == 240, \"Check: 7th centered hexagonal number\"\nassert     centered_hexagonal_number(13) == 350, \"Check: 8th centered hexagonal number\"\nassert     centered_hexagonal_number(14) == 420, \"Check: 9th centered hexagonal number\"\nassert     centered_hexagonal_number(15) == 490, \"Check: 10th centered hexagonal number\"\nassert     centered_hexagonal_number(16) == 560, \"Check: 11th centered hexagonal number\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(9) == 19\nassert     centered_hexagonal_number(10) == 22\nassert     centered_hexagonal_number(11) == 25\nassert     centered_hexagonal_number(12) == 28\nassert     centered_hexagonal_number(13) == 31\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(100) == 263732\nassert     centered_hexagonal_number(200) == 367065\nassert     centered_hexagonal_number(400) == 7358324\nassert     centered_hexagonal_number(800) == 9763806\nassert     centered_hexagonal_number(1000) == 12262522\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 6\nassert     centered_hexagonal_number(3) == 10\nassert     centered_hexagonal_number(4) == 15\nassert     centered_hexagonal_number(5) == 22\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({1:1, 2:2},{2:3, 3:4}, {3:5, 4:6}) == {1:1, 2:3, 3:5, 4:6}\nassert     merge_dictionaries_three({1:1, 2:2},{3:4, 4:5}, {3:5, 4:6}) == {1:1, 2:2, 3:5, 4:6}\nassert     merge_dictionaries_three({1:1, 2:2},{3:4, 4:5}, {3:5, 4:6, 5:7}) == {1:1, 2:2, 3:5, 4:6, 5:7}\n\ndef merge_dictionaries_four(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three(dict1,dict2,dict3) == {'k1':'v1','k2':'v2', 'k3':'v3'}\nassert     merge_dictionaries_three(dict3,dict2,dict1) == {'k1':'v1','k2':'v2', 'k3':'v3'}\nassert     merge_dictionaries_three(dict1,dict3,dict2) == {'k1':'v1','k2':'v2', 'k3':'v3'}\nassert     merge_dictionaries_three(dict2,dict1,dict3) == {'k1':'v1','k2':'v2', 'k3':'v3'}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dict1 == {\"A\": 1, \"B\": 2}\nassert     dict2 == {\"C\": 3, \"D\": 4}\nassert     dict3 == {\"E\": 5, \"F\": 6}\nassert     merge_dictionaries_three(dict1, dict2, dict3) == {\"A\": 1, \"B\": 2, \"C\": 3, \"D\": 4, \"E\": 5, \"F\": 6}\n\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3}, {'d': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3}, {'d': 4}) == {'a': 1, 'b': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3}, {'c': 4}) == {'a': 1, 'b': 3, 'c': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3}, {}) == {'a': 1, 'b': 3}\n\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'c': 4, 'd': 5, 'e': 6}, {'a': 2, 'b': 4, 'e': 7, 'f': 9}) \\\n     == {'a': 1, 'b': 2, 'c': 4, 'd': 5, 'e': 7, 'f': 9}, \"addition to dictionaries\"\n\nassert merge_dictionaries_three(dict1 = {'a': 1, 'b': 2}, dict2 = {'b': 3, 'd': 4}, dict3 = {'e': 5, 'f': 6}) == {'a': 1, 'b': 3, 'd': 4, 'e': 5, 'f': 6}, \"subtraction\"\nassert merge_dictionaries_three(dict1 = {'a': 1, 'b': 2}, dict2 = {'b': 3, 'd': 4}, dict3 = {'b': 5, 'f': 6}) == {'a': 1, 'b': 3, 'd': 4, 'b': 5, 'f': 6}, \"subtraction 2\"\nassert merge_dictionaries_three(dict1 = {'a': 1, 'b': 2}, dict2 = {'a': 3, 'b': 4}, dict3 = {'b': 5, 'f': 6}) == {'a': 1, 'b': 4, 'f': 6}, \"subtraction 3\"\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three(dict1,dict2, dict3) == merge_dictionaries_two(dict1,dict2)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2},{'a':3,'b':4},{'b':5}) == {'a':1,'b':5}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':3,'b':4},{}) == {'a':1,'b':4}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':3,'b':4},{'a':5}) == {'a':1,'b':5}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':3,'b':4},{'a':5,'b':6}) == {'a':1,'b':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':3,'b':4},{}) == {'a':1,'b':4}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 5, 'b': 6}, {'d': 7, 'e': 8, 'f': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 7, 'e': 8, 'f': 9}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 5, 'b': 6}, {'a': 7, 'b': 8, 'c': 9}) == {'a': 1, 'b': 2, 'c': 3, 'a': 7, 'b': 8, 'c': 9}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 5, 'b': 6}, {}) == {'a': 1, 'b': 2, 'c': 3, 'a': 5, 'b': 6}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 5, 'b': 6}, {'a': 7, 'b': 8, 'c': 9}) == {'a': 1, 'b': 2, 'c': 3, 'a': 7, 'b': 8, 'c': 9}\nassert     merge_dictionaries_three({}, {'a': 5, 'b': 6}, {}) == {'a': 5, 'b': 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({'a': '1', 'b': '2'}, {'a': '3', 'c': '4'}, {'a': '5', 'b': '6', 'c': '7'}) == {'a': '1', 'b': '2', 'c': '4', 'd': '5', 'e': '6', 'f': '7'}\nassert     merge_dictionaries_three({'a': '1', 'b': '2', 'd': '3'}, {'a': '3', 'c': '4', 'e': '5'}, {'a': '5', 'b': '6', 'c': '7', 'd': '8'}) == {'a': '1', 'b': '2', 'c': '4', 'd': '3', 'e': '5', 'f': '7', 'g': '8'}\nassert     merge_dictionaries_three({'a': '1', 'b': '2', 'd': '3', 'e': '4', 'f': '5'}, {'a': '3', 'c': '4', 'e': '5'}, {'a': '5', 'b': '6', 'c': '7', 'd': '8'}) == {'a': '1', 'b': '2', 'c': '4', 'd': '3', 'e': '5', 'f': '5', 'g': '8'}\nassert     merge_dictionaries_three({'a': '1', 'b': '2'}, {'a': '3', 'c': '4'}, {'a': '5', 'b': '6', 'c': '7'}) == {'a': '1', 'b': '2', 'c': '4', 'd': '5', 'e': '6', 'f': '7'}\nassert     merge_dictionaries_three({'a': '1', 'b': '2', 'd': '3'}, {'a': '3', 'c': '4', 'e': '5'}, {}) == {'a': '1', 'b': '2', 'c': '4', 'd': '3', 'e': '5', 'f': None}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({1: 2, 3: 4}, {5: 6, 7: 8}, {9: 10, 11: 12}) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10, 11: 12}\nassert     merge_dictionaries_three({1: 2, 3: 4}, {5: 6, 7: 8}, {9: 10}) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}\nassert     merge_dictionaries_three({1: 2}, {3: 4}, {5: 6, 7: 8, 9: 10}) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}\nassert     merge_dictionaries_three({1: 2}, {3: 4}, {}) == {1: 2, 3: 4}\nassert     merge_dictionaries_three({}, {}, {}) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     freq_count([1,2,3,4,5,6,7,8,9]) == {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 3}\nassert     freq_count([\"abc\",\"bcd\",\"acd\",\"bca\",\"cab\"]) == {\"a\":2,\"b\":3,\"c\":2}\nassert     freq_count([]) == {}\n\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count(['a','b']) == {'a':1, 'b':1}\nassert     freq_count(['a','a','b','b','c']) == {'a':3, 'b':2, 'c':1}\nassert     freq_count([1,2,3,1,2,3,1]) == {1:3, 2:2, 3:1}\nassert     freq_count([1,2,3,1,2,1,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     freq_count([1, 2, 3, 4, 1, 2, 3, 4, 4, 4, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, 4, 1, 2, 3, 4, 4, "
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     freq_count([1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 8, 8, 9, 9, 9]) == collections.Counter([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     freq_count(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == collections.Counter(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n\ndef freq_count_alt(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     freq_count([1, 2, 3, 1]) == {1: 2, 2: 1, 3: 1}\nassert     freq_count([1, 2, 3]) == {1: 2, 2: 1, 3: 1}\nassert     freq_count([1]) == {1: 1}\nassert     freq_count([]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     {1:1, 2:1, 3:1, 4:2, 5:1, 6:1, 7:1} == freq_count([1, 2, 3, 4, 5, 6, 7])\nassert     {1:1, 2:1, 3:2, 4:3, 5:1} == freq_count([2, 1, 3, 1, 2, 4, 5])\nassert     {1:2, 2:2, 3:2, 4:3, 5:1} == freq_count([1, 2, 3, 1, 2, 4, 5, 6])\nassert     {} == freq_count([])\n\ndef permutations(list1):\n    '''\n    Return all permutations of a list of characters, each as a string.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     freq_count(['c', 'c', 'c', 'c', 'c', 'b', 'c', 'c', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'b', 'c', 'c', 'c', 'c', 'c']) == {'a': 5, 'b': 3, 'c': 5}\n\ndef find_duplicates(list1):\n    '''\n    Write a function to get all the duplicates in a list.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     freq_count([]) == collections.Counter()\nassert     freq_count([1]) == collections.Counter({1:1})\nassert     freq_count([1,1]) == collections.Counter({1:2})\nassert     freq_count([1,1,1,1,1,1]) == collections.Counter({1:6})\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     freq_count([1,2,2,3,1,2,1,2,1]) == {1:4, 2:3, 3:1}\nassert     freq_count([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"]) == {\"a\":2, \"b\":2, \"c\":2}\nassert     freq_count([1,2,3]) == {\"1\":1, \"2\":1, \"3\":1}\nassert     freq_count([1,1,1,1,1,1,1,1,1]) == {\"1\":9}\nassert     freq_count([]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     freq_count([1,1,2,3,3,3,3,4,4,4,4,4,4,4]) == {1:6, 2:6, 3:6, 4:6}\nassert     freq_count([1,1,2,2,3,3,3,3,4,4,4,4,4,4]) == {1:5, 2:5, 3:5, 4:5}\nassert     freq_count([1,1,2,3,3,3,3,4,4,4,4,4,4,4]) == {1:5, 2:4, 3:4, 4:4}\n\n\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.defaultdict(int)\n    for item in list1:\n        count[item] += 1\n    return count\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     closest_num(4) == 3\nassert     closest_num(8) == 7\nassert     closest_num(12) == 11\nassert     closest_num(18) == 17\nassert     closest_num(24) == 21\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_num(1) == 0\nassert     closest_num(5) == 4\nassert     closest_num(8) == 7\nassert     closest_num(20) == 19\nassert     closest_num(100) == 99\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert closest_num(12) == 11\nassert closest_num(13) == 12\nassert closest_num(15) == 14\nassert closest_num(1) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_num(25)     == 22\nassert     closest_num(3)     == 2\nassert     closest_num(1)     == 0\nassert     closest_num(49)     == 37\nassert     closest_num(27)     == 22\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_num(8) == 7\nassert     closest_num(7) == 6\nassert     closest_num(12) == 11\nassert     closest_num(24) == 22\nassert     closest_num(30) == 19\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_num(4)     == 3\nassert     closest_num(5)     == 4\nassert     closest_num(6)     == 5\nassert     closest_num(7)     == 6\nassert     closest_num(8)     == 7\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     closest_num(1) == 1\nassert     closest_num(3) == 2\nassert     closest_num(4) == 3\nassert     closest_num(7) == 6\nassert     closest_num(8) == 7\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_num(8) == 7\nassert     closest_num(10) == 9\nassert     closest_num(12) == 11\nassert     closest_num(17) == 16\nassert     closest_num(20) == 19\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_num(7)     == 6\nassert     closest_num(8)     == 7\nassert     closest_num(9)     == 8\nassert     closest_num(10)     == 9\nassert     closest_num(11)     == 10\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_num(15) == 14\nassert     closest_num(10) == 9\nassert     closest_num(0) == -1\nassert     closest_num(1) == -1\nassert     closest_num(20) == 19\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) == 6\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']) == 8\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q']) == 8\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 26\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     len_log([\"Hello\",\"World\",\"I\"]) == 2, \"The longest word is \\\"World\\\"\"\nassert     len_log([\"a\",\"apple\",\"banana\",\"c\",\"d\",\"a\",\"a\"]) == 5, \"The longest word is \\\"a\\\"\"\nassert     len_log([\"a\",\"b\",\"c\"]) == 3, \"The longest word is \\\"a\\\"\"\nassert     len_log([]) == 0, \"The longest word is \\\"a\\\"\"\n\ndef date_difference(a, b):\n    '''\n    Write a python function to find the number of days between two dates\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     len_log(['bat', 'ball', 'cat']) == 3\nassert     len_log(['cat', 'ball', 'bat']) == 3\nassert     len_log(['ball', 'bat']) == 2\nassert     len_log(['doll', 'car', 'dove', 'tiger', 'lion', 'bear', 'rabbit']) == 7\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (len_log('python') == 6)\nassert     (len_log('leetcode') == 7)\nassert     (len_log('rekt') == 5)\nassert     (len_log('homo') == 5)\nassert     (len_log('cryptic') == 7)\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (len_log(['reconcile','reconcile']) == 2)\nassert     (len_log(['the', 'are', 'a']) == 3)\nassert     (len_log(['a', 'is', 'the', 'best']) == 4)\n\n\ndef len_max(list2):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     len_log(['cat', 'bat', 'rat', 'elephant']) == 5\nassert     len_log(['', '', '', '', 'hello', 'world', '', '', '', '', '', '', '', '']) == 8\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     len_log(['python', 'c', 'C++', 'java', 'javascript','scala']) == 6\n\ndef is_palindrome(x):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     len_log(['abc', 'xyz', 'aba', '1221']) == 5\nassert     len_log(['a', 'b', 'c', 'd', 'e']) == 5\nassert     len_log(['ab', 'ba', 'cab', 'abc', 'ca']) == 5\nassert     len_log(['', '', '', '', '']) == 0\nassert     len_log(['a', 'b', 'c', 'd', 'e']) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     len_log(['hundred','london','london','eighteen','mohakhala']) == 7\nassert     len_log(['hundred','london','london','eighteen','mohakhala','one','two','three']) == 8\nassert     len_log(['hundred','london','london','eighteen','mohakhala','one','two','three','four','five','six']) == 9\nassert     len_log(['hundred','london','london','eighteen','mohakhala','one','two','three','four','five','six','seven']) == 9\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_substring(['fi', 'fo', 'fum', 'fum', 'um'], 'f') == 0\nassert     find_substring(['fim', 'fo', 'fum', 'fum', 'um'], 'f') == 0\nassert     find_substring(['fi', 'fo', 'fum', 'fum', 'um'], 'fum') == 1\nassert     find_substring(['fi', 'fo', 'fum', 'fum', 'um'], 'fum') == 1\nassert     find_substring(['fi', 'fo', 'fum', 'fum', 'um'], 'x') == -1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_substring(\"abcde\", \"d\") == True\nassert     find_substring(\"abcde\", \"\") == True\nassert     find_substring(\"abcde\", \"cde\") == True\nassert     find_substring(\"abcde\", \"a\") == True\nassert     find_substring(\"abcde\", \"abc\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_substring('substring', ['hello', 'world', 'world','substring']) == True\nassert     find_substring('substring', ['world','substring']) == False\nassert     find_substring('substring', ['hello', 'world','substring']) == True\nassert     find_substring('substring', ['hello','substring']) == False\nassert     find_substring('substring', ['substring']) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_substring(['f','r','s','o','n','c','o','d','s','a','m'], 'dog') == True\nassert     find_substring(['f','r','s','o','n','c','o','d','s','a','m'], 'fish') == False\nassert     find_substring(['f','r','s','o','n','c','o','d','s','a','m'], 'r') == True\nassert     find_substring(['f','r','s','o','n','c','o','d','s','a','m'], 'rk') == False\nassert     find_substring(['f','r','s','o','n','c','o','d','s','a','m'], 'rk') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_substring('abc', 'c') == True\nassert     find_substring('abc', 'xy') == False\nassert     find_substring('hello', 'ell') == True\nassert     find_substring('hello', 'e') == True\nassert     find_substring('hello', 'h') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_substring('this is a string','string') == True, 'The function is not working properly'\nassert     find_substring('this is a string', 'this') == True, 'The function is not working properly'\nassert     find_substring('this is a string', 'hi') == False, 'The function is not working properly'\nassert     find_substring('this is a string', 'hi there') == False, 'The function is not working properly'\nassert     find_substring('this is a string', 'hi there is') == False, 'The function is not working properly'\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_substring(['p', 'y', 't', 'h', 'o', 'n'], 'non') == False\nassert     find_substring(['p', 'y', 't', 'h', 'o', 'n'], 'no') == True\nassert     find_substring(['p', 'y', 't', 'h', 'o', 'n'], 'n') == True\nassert     find_substring(['p', 'y', 't', 'h', 'o', 'n'], 'o') == True\nassert     find_substring(['p', 'y', 't', 'h', 'o', 'n'], 'h') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_substring(['at', 'bat', 'cat', 'pat', 'at', 'bat', 'cat', 'pat'], 'at') == True\nassert find_substring(['at', 'bat', 'cat', 'pat', 'at', 'bat', 'cat', 'pat'], 'hat') == False\nassert find_substring(['at', 'bat', 'cat', 'pat', 'at', 'bat', 'cat', 'pat'], 'pat') == True\nassert find_substring(['at', 'bat', 'cat', 'pat', 'at', 'bat', 'cat', 'pat'], 't') == False\nassert find_substring(['at', 'bat', 'cat', 'pat', 'at', 'bat', 'cat', 'pat'], 'at') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_substring([\"cat\", \"dog\", \"mouse\"], \"cat\") == True\nassert     find_substring([\"cat\", \"dog\", \"mouse\"], \"dog\") == True\nassert     find_substring([\"cat\", \"dog\", \"mouse\"], \"fish\") == False\nassert     find_substring([\"cat\", \"dog\", \"mouse\"], \"\") == False\nassert     find_substring([\"cat\", \"dog\", \"mouse\"], \"cat\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_substring('abc', 'bc') == True\nassert     find_substring('abc', 'def') == False\nassert     find_substring('', 'abc') == False\nassert     find_substring('abc', 'ab') == True\nassert     find_substring('a', 'ab') == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_undulating(111111)\nassert     not is_undulating(112233)\nassert     not is_undulating(123444)\nassert     not is_undulating(111122)\nassert     is_undulating(12345)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef is_undulating_iter(n):\n    '''\n    Use iterative approach to check whether the given number is undulating or not.\n    '''\n    # base case\n    if n < 1: return False\n    # check whether the number is undulating\n    if n % 2 == 0: return False\n    if n % 3 == 0: return False\n    return is_undulating_iter(n-1)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_undulating(0) == False\nassert     is_undulating(1) == True\nassert     is_undulating(2) == True\nassert     is_undulating(3) == True\nassert     is_undulating(4) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_undulating(1) == False\nassert     is_undulating(2) == True\nassert     is_undulating(3) == False\nassert     is_undulating(4) == False\nassert     is_undulating(5) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_undulating(0) is True\nassert     is_undulating(1) is True\nassert     is_undulating(2) is True\nassert     is_undulating(3) is True\nassert     is_undulating(4) is True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_undulating(123) == False\nassert     is_undulating(120) == True\nassert     is_undulating(100) == True\nassert     is_undulating(50) == True\nassert     is_undulating(40) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_undulating(5) == True \nassert     is_undulating(12) == True\nassert     is_undulating(7) == False\nassert     is_undulating(6) == False\nassert     is_undulating(24) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_undulating(10000) == True\nassert     is_undulating(125) == False\nassert     is_undulating(1253) == False\nassert     is_undulating(1252) == True\nassert     is_undulating(25) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_undulating(1) == True\nassert     is_undulating(2) == True\nassert     is_undulating(3) == True\nassert     is_undulating(4) == True\nassert     is_undulating(5) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     power(2, 3) == 8\nassert     power(3, 3) == 27\nassert     power(2, 5) == 16\nassert     power(3, 5) == 243\nassert     power(5, 3) == 125\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     power(2,1) == 2, \"incorrect\"\nassert     power(10,2) == 100, \"incorrect\"\nassert     power(3,3) == 27, \"incorrect\"\nassert     power(2,-1) == 0.5, \"incorrect\"\nassert     power(2,0) == 1, \"incorrect\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     power(2,2)==4\nassert     power(5,3)==125\nassert     power(3,5)==125\nassert     power(1,1)==1\nassert     power(0,0)==1\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef linear_search(li,val):\n    '''\n    Use linear search to find the index of the value in the array.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     power(2,2) == 4\nassert     power(3,3) == 27\nassert     power(4,3) == 64\nassert     power(4,0) == 1\nassert     power(4,3) == 64\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     power(4,0) == 1, \"4 to the power 0 is 1\"\nassert     power(4,1) == 4, \"4 to the power 1 is 4\"\nassert     power(3,-1) == -3, \"3 to the power -1 is -3\"\nassert     power(2,2) == 4, \"2 to the power 2 is 4\"\nassert     power(2,3) == 8, \"2 to the power 3 is 8\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n\ndef add_digits(n):\n    '''\n    Return the sum of the digits of 'n'.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     power(10,2) == 100\nassert     power(3,3) == 27\nassert     power(2,4) == 16\nassert     power(3,0) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     index_minimum([(2,5),(1,2),(3,4),(5,1),(2,3)]) == (2,2)\nassert     index_minimum([(1,1),(2,2),(3,3),(4,4),(5,5)]) == (1,1)\nassert     index_minimum([(-1,5),(0,2),(0,3),(0,4),(0,5)]) == (-1,5)\nassert     index_minimum([(0,0),(1,1),(2,2),(3,3),(4,4),(5,5)]) == (0,0)\nassert     index_minimum([(5,0),(1,1),(2,2),(3,3),(4,4),(5,5)]) == (1,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [(3,4,5),(2,1,6),(0,4,9)] == index_minimum([(3,4,5),(2,1,6),(0,4,9)])\nassert     [(0,3,9),(0,4,9),(0,4,9)] == index_minimum([(0,3,9),(0,4,9),(0,4,9)])\nassert     [(0,4,9),(0,4,9),(0,4,9)] == index_minimum([(0,4,9),(0,4,9),(0,4,9)])\nassert     [(0,4,9),(0,5,9),(0,5,9)] == index_minimum([(0,4,9),(0,5,9),(0,5,9)])\nassert     [(0,4,9),(0,4,9),(0,4,9),(0,4,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9)] == index_minimum([(0,4,9),(0,4,9),(0,4,9),(0,4,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9),(0,5,9)])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     index_minimum([(1,2), (5,9), (3,2)]) == 1\nassert     index_minimum([(0,1), (-1,-2), (5,6), (3,4)]) == -1\nassert     index_minimum([(0,1), (-1,-2), (2,4), (5,9)]) == 0\nassert     index_minimum([(0,1), (-1,-2), (0,0), (5,9)]) == 0\nassert     index_minimum([(0,1), (0,0), (5,9), (3,2)]) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     index_minimum([(1,2),(0,1),(0,1),(1,2)]) == 0\nassert     index_minimum([(1,1),(1,1),(1,1)]) == 1\nassert     index_minimum([(1,2),(0,0),(0,1),(1,1)]) == 0\nassert     index_minimum([(1,1),(1,1),(1,1)]) == 1\nassert     index_minimum([(1,2),(0,0),(0,1),(1,1),(1,2),(2,1)]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef max_of_three(x, y, z):\n    '''\n    Given three integers, return the maximum of them.\n    '''\n    return max(x, y, z)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     index_minimum([(1,2), (2,3), (3,4), (4,5)]) == (1,2)\nassert     index_minimum([(1,2), (3,4), (5,6), (6,7)]) == (5,6)\nassert     index_minimum([(1,2), (2,3), (3,4), (4,5)]) == (1,2)\nassert     index_minimum([(1,2), (2,3), (3,4), (4,5)]) == (1,2)\nassert     index_minimum([(1,2), (2,3), (3,4), (4,5)]) == (1,2)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     index_minimum([(1,2), (2,1)]) == 1\nassert     index_minimum([(-1,-2), (2,1)]) == -2\nassert     index_minimum([(1,-2), (2,1)]) == 1\nassert     index_minimum([(1,3), (2,1), (-1,-2), (-2,1)]) == -2\nassert     index_minimum([(1,2), (3,2), (2,1), (-1,-2), (-2,1)]) == -1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     index_minimum( [(1, 3), (2, 5), (3, 1), (4, 4)] ) == 1\nassert     index_minimum( [(1, 3), (2, 5), (3, 1), (4, 4), (5, 3), (7, 4)] ) == 1\nassert     index_minimum( [(1, 3), (2, 5), (3, 1), (4, 4), (5, 3), (7, 4), (8, 9), (9, 7)] ) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     index_minimum( [(1,5),(2,1),(3,6),(4,7),(5,2)]) == 1\nassert index_minimum( [(1,7),(2,5),(3,1),(4,8),(5,6)]) == 2\nassert index_minimum( [(1,3),(2,5),(3,2),(4,8),(5,6)]) == 3\nassert index_minimum( [(1,7),(2,1),(3,6),(4,1),(5,2)]) == 4\nassert index_minimum( [(1,7),(2,5),(3,1),(4,8),(5,6)]) == 5\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     index_minimum([(1, 2), (3, 4), (5, 6)]) == (1, 2)\nassert     index_minimum([(4, 3), (7, 2), (1, 9)]) == (4, 3)\nassert     index_minimum([(4, 3), (7, 2), (1, 9)]) == (4, 3)\nassert index_minimum([(4, 3), (7, 2), (1, 9)]) == (4, 3)\nassert index_minimum([(4, 3), (7, 2), (1, 9)]) == (4, 3)\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[3, 4, 5], [2, 5, 1], [1, 4, 3], [4, 2, 1]]) == 3\nassert     Find_Min_Length([[3, 4, 5], [2, 5, 1], [1, 4, 3], [4, 2, 1, 3], [4, 2, 1, 3, 5]]) == 4\nassert     Find_Min_Length([[3, 4, 5], [2, 5, 1], [1, 4, 3], [4, 2, 1, 3], [4, 2, 1, 3, 5]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\nassert     Find_Min_Length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 3\nassert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([[]]) == 0\nassert     Find_Min_Length([[1, 2], [1, 2], [1, 2]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[], [2], [1, 3, 5], [1, 4, 9, 10]]) == 4\nassert     Find_Min_Length([[2], [1, 3, 5], [1, 4, 9, 10]]) == 3\nassert     Find_Min_Length([[2], [1, 3, 5], [1, 4, 9, 10], [1, 3, 4, 9, 10, 11, 13]]) == 5\nassert     Find_Min_Length([[1], [1, 3, 5], [1, 4, 9, 10], [1, 3, 4, 9, 10, 11, 13]]) == 3\nassert     Find_Min_Length([[], [2], [1, 3, 5], [1, 4, 9, 10], [1, 3, 4, 9, 10, 11, 13], [1, 2, 3, 4, 5]]) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[1,2],[2,3],[4,5],[6,7]]) == 2\nassert     Find_Min_Length([[2,3],[4,5],[1,2],[4,5]]) == 1\nassert     Find_Min_Length([[1,2],[4,5],[2,3],[4,5],[1,2]]) == 2\nassert     Find_Min_Length([[1,2,3],[1,2,3],[4,5,6]]) == 1\nassert     Find_Min_Length
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1,2,3,4], [2,3,4,5], [5,4,3,2]]) == 2\nassert     Find_Min_Length([['a','b'],['c','d']]) == 1\nassert     Find_Min_Length([[1,2,3], [3,4,5], [2,1,4]]) == 3\nassert     Find_Min_Length([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[1, 2, 3, 4], [9, 8, 7, 6], [5, 6, 7, 8]]) == 1\nassert     Find_Min_Length([[1, 2, 3, 4], [9, 8, 7, 6], [5, 6, 7, 8], [11, 12, 13, 14, 15]]) == 3\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]) == 4\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [11, 12, 13, 14, 15, 16]]) == 4\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [11, 12, 13, 14, 15, 16, 17]]) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,3,5],[1,2,2,3],[3,3,3]]) == 2\nassert     Find_Min_Length([[1,3,5],[1,2,2,3],[3,3,3],[1,4,2]]) == 3\nassert     Find_Min_Length([[1,3,5],[1,2,2,3],[3,3,3]]) == 3\nassert     Find_Min_Length([[1,3,5],[1,2,2,3],[3,3,3],[1,4,2],[1,5,1,5]]) == 4\nassert     Find_Min_Length([[1,3,5],[1,2,2,3],[3,3,3],[1,4,2],[1,5,1,5]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Find_Min_Length( [[10,2,4],[3,1,5],[6,8,9],[7,11,15]] ) == 3\nassert     Find_Min_Length( [[10,2],[3,1,5,6],[6,8,9,10]] ) == 1\nassert     Find_Min_Length( [[10,2,4,5,6,8,9,10,11,12],[3,1,5,6,8,9,10,11,12,13],[6,8,9,10,11,12,13,14,15,16,17]] ) == 1\nassert     Find_Min_Length( [[10,2,4,5,6,8,9,10,11,12,13,14,15,16,17],[3,1,5,6,8,9,10,11,12,13,14,15,16,17,18],[6,8,9,10,11,12,13,14,15,16,17,18,19]] ) == 1\nassert     Find_Min_Length( [[10,2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19]] ) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef Find_Common_elements(lst1, lst2):  \n    '''\n    Write a python function to find the common elements between two lists. \n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1,2,3], [4,5,6,7], [10,12,13]]) == 3\nassert     Find_Min_Length([[1,2,3], [4,5,6,7]]) == 3\nassert     Find_Min_Length([[1,2,3], [4,5,6,7,8], [10,12,13], [15,16,17]]) == 3\nassert     Find_Min_Length([[1,2,3], [4,5,6,7,8], [10,12,13]]) == 3\nassert     Find_Min_Length([[1,2,3], [4,5,6,7,8,9], [10,12,13]]) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     divisor(9) == 3\nassert     divisor(12) == 4\nassert     divisor(25) == 5\nassert     divisor(30) == 6\nassert     divisor(81) == 9\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \ndivisor(1) == 0\ndivisor(2) == 1\ndivisor(3) == 1\ndivisor(4) == 2\ndivisor(5) == 1\ndivisor(6) == 2\ndivisor(7) == 1\ndivisor(8) == 2\ndivisor(9) == 1\ndivisor(10) == 1\ndivisor(11) == 3\ndivisor(12) == 4\ndivisor(13) == 1\ndivisor(14) == 2\ndivisor(15) == 3\ndivisor(16) == 2\ndivisor(17) == 1\ndivisor(18) == 2\ndivisor(19) == 1\ndivisor(20) == 2\ndivisor(21) == 3\ndivisor(22) == 2\ndivisor(23) == 1\ndivisor(24) == 2\ndivisor(25) == 1\ndivisor(26) == 2\ndivisor(27) == 1\ndivisor(28) == 2\ndivisor(29) == 1\ndivisor(30) == 2\ndivisor(31) == 1\ndivisor(32) == 2\ndivisor(33) == 1\ndivisor(34) == 2\ndivisor(35) == 1\ndivisor(36) == 2\ndivisor(37) == 1\ndivisor(38) == 2\ndivisor(39) == 1\ndivisor(40) == 2\ndivisor(41) == 1\ndivisor(42) == 2\ndivisor(43) == 1\ndivisor(44) == 2\ndivisor(45) == 1\ndivisor(46) == 2\ndivisor(47) == 1\ndivisor(48) == 2\ndivisor(49) == 1\ndivisor(50) == 2\ndivisor(51) == 1\ndivisor(52) == 2\ndivisor(53) == 1\ndivisor(54) == 2\ndivisor(55) == 1\ndivisor(56) == 2\ndivisor(57) == 1\ndivisor(58) == 2\ndivisor(59) == 1\ndivisor(60) == 2\ndivisor(61) == 1\ndivisor(62) == 2\ndivisor(61) == 1\ndivisor(60) == 2\ndivisor(59) == 1\ndivisor(58) == 2\ndivisor(57) == 1\ndivisor(56) == 2\ndivisor(55) == 1\ndivisor(54) == 2\ndivisor(53) == 1\ndivisor(52) == 2\ndivisor(51) == 1\ndivisor(50) == 2\ndivisor(49) == 1\ndivisor(48) == 2\ndivisor(47) == 1\ndivisor(46) == 2\ndivisor(45) == 1\ndivisor(44) == 2\ndivisor(43) == 1\ndivisor(42) == 2\ndivisor(41) == 1\ndivisor(40) == 2\ndivisor(39) == 1\ndivisor(38) == 2\ndivisor(37) == 1\ndivisor(36) == 2\ndivisor(35) == 1\ndivisor(34) == 2\ndivisor(33) == 1\ndivisor(32) == 2\ndivisor(31) == 1\ndivisor(30) == 2\ndivisor(29) == 1\ndivisor(28) == 2\ndivisor(27) == 1\ndivisor(26) == 2\ndivisor(25) == 1\ndivisor(24) == 2\ndivisor(23) == 1\ndivisor(22) == 2\ndivisor(21) == 1\ndivisor(20) == 2\ndivisor(19) == 1\ndivisor(18) == 2\ndivisor(17) == 1\ndivisor(16) == 2\ndivisor(15) == 1\ndivisor(14) == 2\ndivisor(13) == 1\ndivisor(12) == 2\ndivisor(11) == 1\ndivisor(10) == 2\ndivisor(9) == 1\ndivisor(8) == 2\ndivisor(7) == 1\ndivisor(6) == 2\ndivisor(5) == 1\ndivisor(4) == 2\ndivisor(3) == 1\ndivisor(2) == 2\ndivisor(1) == 1\n\nassert \n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 2\nassert     divisor(4) == 2\nassert     divisor(5) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     divisor(0) == 1\nassert     divisor(3) == 4\nassert     divisor(5) == 2\nassert     divisor(6) == 6\nassert     divisor(100) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     divisor(4) == 2\nassert     divisor(9) == 3\nassert     divisor(16) == 4\n\nprint \"all good\""
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     divisor(0) == 0\nassert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 2\nassert     divisor(4) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     divisor(2) == 1\nassert     divisor(4) == 2\nassert     divisor(8) == 3\nassert     divisor(16) == 4\nassert     divisor(32) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     divisor(6) == 4\nassert     divisor(9) == 3\nassert     divisor(27) == 9\nassert     divisor(25) == 2\nassert     divisor(1) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     divisor(5) == 4\nassert     divisor(10) == 4\nassert     divisor(100) == 4\nassert     divisor(1000) == 8\nassert     divisor(5000) == 13\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     frequency_lists([1,1,2,2,3,3,4,4,5,5]) == {1: 4, 2: 2, 3: 2, 4: 2, 5: 2}\nassert     frequency_lists([[1,2,3],[1,2,3]]) == {1: 2, 2: 2, 3: 2}\nassert     frequency_lists([]) == {}\n\ndef frequency_matrix(list1):\n    '''\n    Write a function to create a frequency matrix of a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     {} == frequency_lists(None)\nassert     {1:1} == frequency_lists([])\nassert     {1:2, 2:2, 3:1} == frequency_lists([[], [1,2,3]])\nassert     {'a': 1, 'b': 1} == frequency_lists([['a', 'b'], ['a', 'b'], ['a', 'b']])\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     frequency_lists([[1,2,3,4,5],['a','b','a','c','a'],['x','y','z']]) == {1:2, 'a':3, 'b':1, 'x':1, 'c':1, 'y':1, 'z':1}\n\ndef max_visited_special_area(grid):\n    '''\n    Given a grid of size nxm, count the number of cells in a particular special area, here, a person is standing on a cell with index (r,c), \n    and the grid is labelled according to the following convention:\n    \n    - 0: empty\n    - 1: fresh orange\n    - 2: rotten orange\n    - 3: fresh grape\n    - 4: rotten grape\n    \n    The special area is a square of size n/2 on the left, top and right of the grid.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1, 2], [3], [3], [3, 2, 1], [3, 2], [3, 2, 1, 1, 1, 1, 1, 1, 1]]) == {1: 3, 2: 3, 3: 4}\nassert     frequency_lists([]) == {}\nassert     frequency_lists([[]]) == {}\nassert     frequency_lists([[1, 2], [3], [3], [3, 2, 1], [3, 2], [3, 2, 1, 1, 1, 1, 1, 1, 1]]) == {1: 5, 2: 5, 3: 4}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [12, 2, 'ab', 'cd'] == frequency_lists([[12, 2], ['ab', 'cd']])\nassert     [12, 2, 'ab', 'cd', 'ab', 'cd'] == frequency_lists([[12, 2], ['ab', 'cd'], ['ab', 'cd']])\nassert     [12, 2, 'ab', 'cd', 'ab', 'cd', 'ab', 'cd', 'ab', 'cd', 'ab', 'cd', 'ab', 'cd', 'ab', 'cd'] == frequency_lists([[12, 2], ['ab', 'cd'], ['ab', 'cd'], ['ab', 'cd']])"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     frequency_lists([]).get('freq') == None\nassert     frequency_lists([[], [], []]).get('freq') == None\nassert     frequency_lists([[1], [2], [3]]).get('freq') == {1: 1, 2: 1, 3: 1}\nassert     frequency_lists([[1, 2], [3], [4]]).get('freq') == {1: 2, 2: 1, 3: 1, 4: 1}\nassert     frequency_lists([[1, 2], [3, 4], [5]]).get('freq') == {1: 3, 2: 1, 3: 1, 4: 1, 5: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (frequency_lists( [[1, 1, 1], [2, 2, 2], [1, 3, 3]] )\n         == {1: 2, 2: 2, 3: 2})\nassert     (frequency_lists( [[1, 1, 1], [1, 2, 3], [3, 3, 3]] )\n         == {1: 3, 2: 1, 3: 3})\nassert     (frequency_lists( [[1, 2, 1], [2, 1, 2], [1, 2, 3]] )\n         == {1: 2, 2: 2, 3: 1})\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1, 1], [1, 2], [1, 3]]) == {1: 2, 2: 1, 3: 1}\nassert     frequency_lists([]) == {}\nassert     frequency_lists([[1], [2], [3]]) == {1: 1, 2: 1, 3: 1}\nassert     frequency_lists([[1, 2], [1, 2], [1, 2]]) == {1: 3, 2: 2}\nassert     frequency_lists([[1, 2], [1, 2, 3], [1, 2, 3]]) == {1: 3, 2: 2, 3: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1, 2, 3, 4, 5, 6, 7, 8, 9],\n                          [2, 4, 6, 8, 10, 12, 14, 16, 18],\n                          [3, 6, 9, 12, 15, 18, 21, 24, 27]]) == {1: 3, 2: 3, 3: 2, 4: 1, 5: 1, 6: 2, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1, 2, 3, 4, 5, 6, 7, 8, 9],\n                          [2, 4, 6, 8, 10, 12, 14, 16, 18],\n                          [3, 6, 9, 12, 15, 18, 21, 24, 27]]) == {1: 2, 2: 3, 3: 2, 4: 1, 5: 1, 6: 2, 7: 1, 8: 1, 9: 1}\n\n\ndef find_the_sum(list1):\n    '''\n    Write a function to find the sum of the numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1,2,3], [2,2,2], [3,3,3], [4,5,6], [5,6,7]]) == {1: 1, 2: 3, 3: 3, 4: 1, 5: 2, 6: 1}\nassert frequency_lists([[1,2], [1,2]]) == {1: 2, 2: 2}\nassert frequency_lists([]) == {}\nassert frequency_lists([[]]) == {}\nassert frequency_lists([[1,2], [1,2,3], [1,2], [1,2,3,4], [1,2,3], [1,2]]) == {1: 3, 2: 2}\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([0,2,3,4]) == 0\nassert     multiply_num([5,2,3,4]) == 30\nassert     multiply_num([-1,-2,-3,-4]) == -24\nassert     multiply_num([1,3,5,-2]) == -6\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply_num([1, 3, 5, 6]) == 30\nassert     multiply_num([4, 1, 8, 7]) == 50\nassert     multiply_num([4, 6, 9]) == 54\nassert     multiply_num([10, 3, 6, 9]) == 36\nassert     multiply_num([10, 3, 6, 9, 2]) == 120\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply_num([2, 1, 2, 5, 3, 6]) == 54\nassert     multiply_num([3, 6, 7, 9, 8]) == 1120\nassert     multiply_num([1, 2, 3, 4, 5, 6, 7]) == 2520\nassert     multiply_num([0]) == 0\nassert     multiply_num([-1, -2, -3, -4]) == -24\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply_num([1,2,3]) == 6\nassert     multiply_num([3,2,1]) == 2\nassert     multiply_num([10,20,30]) == 600\nassert     multiply_num([10,20,30,40,50]) == 2000\nassert     multiply_num([1,2,3,4,5,6,7,8,9,10,11]) == 6600\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply_num([1, 2, 3]) == 6\nassert multiply_num([2, 2, 2]) == 8\nassert multiply_num([1, 0, 2, 0]) == 0\nassert multiply_num([0]) == 0\nassert multiply_num([]) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5]) == 30\nassert     multiply_num([2, 2, 2, 2]) == 16\nassert     multiply_num([1, 3, 5]) == 15\n\n\ndef perfect_num(numbers):\n    '''\n    Write a function to check if a number is perfect or not.\n    A perfect number is a number which is half of another number.\n    For example, 6 is a perfect number because 6 = 3 + 3 and 3 is also a perfect number.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply_num([1,2,3,4,5]) == 60\nassert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([1]) == 1\nassert     multiply_num([]) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply_num([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]\nassert     multiply_num([2,2,2,2]) == [2,2,2,2,2,2,2,2]\nassert     multiply_num([]) == []\n\n\ndef swap_num(numbers):\n    '''\n    Write a function to swap a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply_num([1, 2, 3]) == 6\nassert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([1, 2, 3, 4, 5]) == 120\nassert     multiply_num([1, 2, 3, 4, 5, 6]) == 720\nassert     multiply_num([]) == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(10) == \"1010\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(100) == '100'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(8) == '1000'\nassert     decimal_to_binary(6) == '11'\nassert     decimal_to_binary(1) == '1'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(9) == '1001'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(65535) == '11111111111111111111111111111111'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (decimal_to_binary(0) == '')\nassert     (decimal_to_binary(1) == '1')\nassert     (decimal_to_binary(2) == '10')\nassert     (decimal_to_binary(3) == '11')\nassert     (decimal_to_binary(4) == '100')\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) ==     '0'\nassert     decimal_to_binary(1) ==     '1'\nassert     decimal_to_binary(2) ==     '10'\nassert     decimal_to_binary(3) ==     '11'\nassert     decimal_to_binary(4) ==     '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(127) == '11111111'\nassert     decimal_to_binary(128) == '10001000'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(7) == \"111\"\nassert     decimal_to_binary(3) == \"11\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(8) == '1000'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(16) == '10000'\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(123) == 321\nassert     next_smallest_palindrome(133) == 31\nassert     next_smallest_palindrome(31) == 31\nassert     next_smallest_palindrome(333) == 33\nassert     next_smallest_palindrome(345) == 345\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(123456789) == 123456689\nassert     next_smallest_palindrome(987654321) == 987654320\nassert     next_smallest_palindrome(987654321) == 987654321\nassert     next_smallest_palindrome(987654321) == 9876543210\nassert     next_smallest_palindrome(987654321) == 9876543211\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(1) == 9\nassert     next_smallest_palindrome(9) == 91\nassert     next_smallest_palindrome(21) == 909\nassert     next_smallest_palindrome(99) == 991\nassert     next_smallest_palindrome(999) == 9991\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(89) == 9009\nassert     next_smallest_palindrome(999) == 9999\nassert     next_smallest_palindrome(99) == 998\nassert     next_smallest_palindrome(77) == 769\nassert     next_smallest_palindrome(10) == 9\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(100) == 99\nassert     next_smallest_palindrome(101) == 101\nassert     next_smallest_palindrome(111) == 111\nassert     next_smallest_palindrome(117) == 111\nassert     next_smallest_palindrome(121) == 121\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(100) == 101\nassert     next_smallest_palindrome(200) == 201\nassert     next_smallest_palindrome(240) == 251\nassert     next_smallest_palindrome(123456789) == 123456789\nassert     next_smallest_palindrome(1234567890) == 123456789\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(123456789) == 9876543210\nassert     next_smallest_palindrome(1234567891) == 1234567892\nassert     next_smallest_palindrome(12345678912) == 12345678913\nassert     next_smallest_palindrome(123456789123) == 123456789124\nassert     next_smallest_palindrome(1234567891234) == 1234567891235\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(1234) == 12345, \"Wrong answer\"\nassert     next_smallest_palindrome(12345) == 123456, \"Wrong answer\"\nassert     next_smallest_palindrome(123456) == 1234567, \"Wrong answer\"\nassert     next_smallest_palindrome(1234567) == 12345678, \"Wrong answer\"\nassert     next_smallest_palindrome(12345678) == 123456789, \"Wrong answer\"\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(1000) == 1001\nassert     next_smallest_palindrome(5000) == 5001\nassert     next_smallest_palindrome(2) == 3\nassert     next_smallest_palindrome(7) == 11\nassert     next_smallest_palindrome(99) == 101\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(999) == 900\nassert     next_smallest_palindrome(999) == 990\nassert     next_smallest_palindrome(9999) == 9999\nassert     next_smallest_palindrome(9999) == 9998\nassert     next_smallest_palindrome(999999) == 999999\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\narr = [1, 2, 3, 4, 5]\nk = 3\nassert kth_element(arr, k) == 4\n\narr = [5, 2, 4, 1, 3]\nk = 3\nassert kth_element(arr, k) == 4\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     kth_element([1,2,3,4,5], 1) == 1\nassert     kth_element([1,2,3,4,5], 2) == 4\nassert     kth_element([1,2,3,4,5], 5) == 5\nassert     kth_element([1,2,3,4,5], 6) == -1\nassert     kth_element([1], 1) == -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\nk = 1\nassert kth_element(arr, k) == 1\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\nk = 19\nassert kth_element(arr, k) == 19\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     kth_element([], 2) == None\nassert     kth_element([1], 1) == 1\nassert     kth_element([1,2], 1) == 2\nassert     kth_element([1,2,3], 1) == 2\nassert     kth_element([1,2,3], 2) == 3\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     kth_element([1, 2, 3, 4, 5], 2) == 5\nassert kth_element([3, 1, 2, 4, 5], 3) == 4\nassert kth_element([3, 1, 2, 4, 5], 1) == 1\nassert kth_element([3, 1, 2, 4, 5], 0) == 3\nassert kth_element([3, 1, 2, 4, 5], 5) == 5\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     kth_element([0,1,2,3,4,5,6], 4) == 4\nassert     kth_element([0,1,2,3,4,5,6], -1) == -1\nassert     kth_element([0,1,2,3,4,5,6], 7) == -1\nassert     kth_element([0,1,2,3,4,5,6], -2) == 5\nassert     kth_element([0,1,2,3,4,5,6], 0) == 0\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     kth_element([1, 2, 3, 4, 5, 6, 7], 3) == 5\nassert     kth_element([1, 2, 3, 4, 5, 6, 7], 5) == 6\nassert     kth_element([1, 2, 3, 4, 5, 6, 7], 2) == 3\nassert     kth_element([1, 2, 3, 4, 5, 6, 7], 8) == -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     kth_element([1,2,3,4,5,6], 3) == 5\nassert     kth_element([3,2,1], 2) == 1\nassert     kth_element([1,2,3,4,5], 5) == 5\nassert     kth_element([1,2,3,4,5], 0) == 1\nassert     kth_element([1,2,3,4,5], 6) == 5\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     kth_element([], 1) == None\nassert     kth_element([1, 2, 3], 1) == 1\nassert     kth_element([1, 2, 3], 2) == 2\nassert     kth_element([1, 2, 3], 3) == 3\nassert     kth_element([1, 2, 3], 4) == None\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     snake_to_camel(word1) == camel1, 'fail test 1 for snake_to_camel'\nassert     snake_to_camel(word2) == camel2, 'fail test 2 for snake_to_camel'\nassert     snake_to_camel(word3) == camel3, 'fail test 3 for snake_to_camel'\n\nprint('All test passed for snake_to_camel'"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('snake_caSe') == 'SnakeCase'\nassert     snake_to_camel('snake_caSe2') == 'SnakeCase2'\nassert     snake_to_camel('snake_caSe3') == 'SnakeCase3'\nassert     snake_to_camel('snake_caSe4') == 'SnakeCase4'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_to_camel') ==     'SnakeToCamel'\nassert     snake_to_camel('camel_to_snake') ==     'CamelToSnake'\nassert     snake_to_camel('get_list') ==     'GetList'\nassert     snake_to_camel('is_list_exist') ==     'IsListExist'\nassert     snake_to_camel('is_string_empty') ==     'IsStringEmpty'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('codewars') == 'Codewars'\nassert     snake_to_camel('coding_interview') == 'CodingInterview'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     snake_to_camel('test_snake_case') == 'testSnakeCase'\nassert     snake_to_camel('test_camel_case') == 'testCamelCase'\nassert     snake_to_camel('a_snake_case') == 'aSnakeCase'\nassert     snake_to_camel('a_camel_case') == 'aCamelCase'"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") == \"snakeToCamel\"\nassert     snake_to_camel(\"is_snake_to_camel_a_function\") == \"isSnakeToCamelAFunction\"\nassert     snake_to_camel(\"snake_to_camel_2\") == \"snakeToCamel2\"\nassert     snake_to_camel(\"IS_SNAKE_TO_CAMEL_A_FUNCTION\") == \"isSnakeToCamelAFunction\"\nassert     snake_to_camel(\"snake_to_camel_3\") == \"snakeToCamel3\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     snake_to_camel('hello_world') == 'HelloWorld'\nassert     snake_to_camel('snake_to_camel') == 'SnakeToCamel'\nassert     snake_to_camel('snake_to_camel_case') == 'SnakeToCamelCase'\nassert     snake_to_camel('camelCase') == 'CamelCase'\nassert     snake_to_camel('12_camelCase') == '12CamelCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     snake_to_camel('camel_case') == 'camelCase'\nassert     snake_to_camel('sNAKE_CASE') =='snakeCase'\nassert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('Snake_case') =='snakeCase'\n\n'''\nGiven a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\nExamples:\ns = \"leetcode\"\nreturn 0.\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") =='snakeToCamel'\nassert     snake_to_camel(\"my_function_name\") =='myFunctionName'\nassert     snake_to_camel(\"__init__\") == 'initialize'\nassert     snake_to_camel(\"get_maximum_value\") == 'getMaximumValue'\n\ndef swap_first_last(str):\n    '''\n    Write a function to swap the first and last charachter of a string\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     snake_to_camel(\n            'hello_world') == 'HelloWorld', 'Fail'\nassert     snake_to_camel(\n            'i_am_a_snake') == 'IAMASNAKECAPEC', 'Fail'\nassert     snake_to_camel(\n            'what_a_fault') == 'WhatAFault', 'Fail'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eulerian_num(1, 2) == 0\nassert     eulerian_num(2, 1) == 0\nassert     eulerian_num(6, 1) == 1\nassert     eulerian_num(3, 2) == 1\nassert     eulerian_num(5, 3) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     eulerian_num(0, 1) == 0\nassert     eulerian_num(1, 0) == 0\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 2\nassert     eulerian_num(2, 3) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eulerian_num(10, 3) == 5\nassert     eulerian_num(5, 3) == 3\nassert     eulerian_num(3, 3) == 3\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(6, 5) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eulerian_num(0, 0) == 0,     'incorrect'\nassert     eulerian_num(1, 0) == 1,     'incorrect'\nassert     eulerian_num(1, 1) == 3,     'incorrect'\nassert     eulerian_num(2, 0) == 2,     'incorrect'\nassert     eulerian_num(2, 1) == 5,     'incorrect'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eulerian_num(0, 0) == 1\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(2, 3) == 1\nassert     eulerian_num(2, 5) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 1) == 3\nassert     eulerian_num(3, 1) == 6\nassert     eulerian_num(4, 1) == 10\nassert     eulerian_num(5, 1) == 15\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eulerian_num(2, 4) == 1\nassert     eulerian_num(3, 6) == 2\nassert     eulerian_num(3, 8) == 3\nassert     eulerian_num(5, 7) == 2\nassert     eulerian_num(8, 12) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_sublists(    [[],[],[],[],[],['a'],['b','c'],['e','d'],['a','b','c'],['a','b','c'],['a','b','c'],['a','b','c'],['a','b','c']]\n                            ) == [\n            [], [], ['a'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'],\n            ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']\n            ]\n\n\ndef find_common_items(list1, list2):\n    '''\n    Write a function to find all common items in two lists.\n    '''\n    pass"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_sublists([[1, 3, 4, 7], [2, 6, 10], [8, 5, 9]]) == \\\n        [\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            [8, 5, 9],\n            [6, 7, 10]\n        ]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_sublists(['hell', 'o', 'lo', 'w', 'hi', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'hi', 'o', 'lo']) == ['hello', 'hello', 'world', 'world', 'world', 'world', 'o', 'o', 'o', 'o', 'o', 'o', 'hi', 'hi', 'hi']\nassert     sort_sublists(['hi', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o', 'w', 'o'"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_sublists( [['a', 'b', 'c'], ['b', 'a', 'c'], ['a', 'b', 'a'], ['c', 'c', 'c']])     == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'a'], ['c', 'c', 'c']]\nassert     sort_sublists( [['a', 'b', 'a'], ['c', 'c', 'c'], ['b', 'a', 'a']])     == [['a', 'b', 'a'], ['a', 'b', 'a'], ['c', 'c', 'c']]\nassert     sort_sublists( [['a', 'b', 'a'], ['a', 'c', 'c'], ['b', 'a', 'a']])     == [['a', 'b', 'a'], ['a', 'b', 'a'], ['a', 'c', 'c']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['b', 'c', 'd']]) == ['a', 'b', 'b', 'c', 'c', 'd']\nassert     sort_sublists([[1, 2, 3], [2, 3, 4]]) == [1, 2, 2, 3, 3, 4]\nassert     sort_sublists([['a', 'b', 'c'], [1, 2, 3]]) == ['a', 'b', 'c', 1, 2, 3]\nassert     sort_sublists([['a', 'b'], ['b', 'c']]) == ['a', 'b', 'b', 'c']\nassert     sort_sublists([['a'], ['b', 'c'], ['d']]) == ['a', 'b', 'b', 'c', 'd']\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_sublists(['Jones', 'Jane', 'Holly', 'Hank', 'Moe']) == \\\n                    [['Jane', 'Holly', 'Hank'], ['Jones', 'Moe'], ['Jane', 'Holly']]\nassert     sort_sublists(['John', 'John', 'John', 'Jane', 'Jane', 'Jenny']) == \\\n                    [['Jane', 'Jenny'], ['John', 'John'], ['Jane']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_sublists(['A', 'B', 'D', 'E', 'C']) == \\\n            sort_sublists(['B', 'A', 'D', 'E', 'C']) == \\\n            sort_sublists(['C', 'D', 'E', 'B', 'A']) == \\\n            sort_sublists(['C', 'B', 'A', 'D', 'E']) == \\\n            sort_sublists(['E', 'D', 'C', 'B', 'A']) == \\\n            sort_sublists(['E', 'A', 'B', 'C', 'D']) == \\\n            sort_sublists([['B', 'A'], ['C', 'D'], ['E', 'D'], ['D', 'E'], ['A', 'B']]) == \\\n            sort_sublists([['B', 'A'], ['A', 'B'], ['C', 'D'], ['E', 'D'], ['D', 'E'], ['E', 'B']]) == \\\n            sort_sublists([['B', 'A'], ['A', 'B'], ['C', 'D'], ['E', 'D'], ['D', 'E'], ['E', 'B']]) == \\\n            sort_sublists([['C', 'D'], ['E', 'D'], ['D', 'E'], ['B', 'A'], ['A', 'B']]) == \\\n            sort_sublists([['C', 'D'], ['E', 'D'], ['D', 'E'], ['E', 'B'], ['B', 'A']]) == \\\n            sort_sublists([['C', 'D'], ['E', 'D'], ['D', 'E'], ['E', 'B'], ['E', 'A'], ['B', 'A']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B'], ['C', 'A']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B'], ['C', 'A'], ['A', 'B']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B'], ['C', 'A'], ['A', 'B'], ['B', 'C']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B'], ['C', 'A'], ['A', 'B'], ['B', 'C'], ['C', 'A']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B'], ['C', 'A'], ['A', 'B'], ['B', 'C'], ['C', 'A'], ['A', 'B']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B'], ['C', 'A'], ['A', 'B'], ['B', 'C'], ['C', 'A'], ['A', 'B'], ['B', 'C']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', 'A'], ['C', 'D'], ['D', 'C'], ['C', 'B'], ['B', 'D'], ['D', 'B'], ['B', 'A'], ['A', 'C'], ['C', 'B'], ['C', 'A'], ['A', 'B'], ['B', 'C'], ['C', 'A'], ['A', 'B'], ['B', 'C'], ['C', 'A']]) == \\\n            sort_sublists([['E', 'D'], ['E', 'B'], ['E', 'A'], ['D', 'E'], ['B', "
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_sublists([['google','microsoft', 'apple', 'amazon', 'facebook'],\n                        ['Java', 'Python', 'Ruby', 'JavaScript', 'PHP'],\n                        ['lintcode','microsoft', 'codingdojo', 'codeguru', 'clarusway']]) == \\\n        [[['lintcode','microsoft', 'codingdojo', 'codeguru', 'clarusway'],\n            ['Java', 'Python', 'Ruby', 'JavaScript', 'PHP'],\n            ['google','microsoft', 'apple', 'amazon', 'facebook']],\n        [['google','microsoft', 'apple', 'amazon', 'facebook'],\n            ['Java', 'Python', 'Ruby', 'JavaScript', 'PHP'],\n            ['lintcode','microsoft', 'codingdojo', 'codeguru', 'clarusway']]]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_sublists([['o','p','q'],['b','c'],['a','z']]) == [\n    ['a','b','c'],['o','p','q'],['a','z','b']]\nassert     sort_sublists([['a','z'],['b','o'],['c','p']]) == [\n    ['a','b','c'],['o','p','z'],['a','b','z']]\nassert     sort_sublists([['q','a','r','b'],['a','e','d','c']]) == [\n    ['a','b','c','d','e','q','r'],['a','b','d','e','q','r','a']]\n\ndef sort_string(string):\n    '''\n    Write a function to sort the string.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_sublists([[1,4,5,3,2],[1,1,3,2,4],[1,2,4,2,4],[1,2,3,2,4]]) == [[1, 1, 1, 2, 2, 4], [1, 1, 1, 2, 2, 4], [1, 1, 1, 2, 2, 4], [1, 1, 1, 2, 2, 4]], 'incorrect'\nassert     sort_sublists([[1,1,2,2,3,3],[3,3,3,3,3,2],[2,2,2,2,2,2],[2,2,2,2,2,2]]) == [[2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2]], 'incorrect'\nassert     sort_sublists([[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 'incorrect'\nassert     sort_sublists([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]) == [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 'incorrect'\nassert     sort_sublists([[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]) == [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 'incorrect'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count([True, False, True, True, False]) == 2\nassert     count([True, True, True, True, False]) == 4\nassert     count([False, False, False, False, False]) == 0\nassert     count([False]) == 0\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count(True) == 1\nassert     count(False) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count([True, False, False, True, False, True]) == 3\nassert     count([True, False, False, False, False]) == 1\nassert     count([True, False, False, False, False, False]) == 0\nassert     count([]) == 0\nassert     count([True]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count([False, True, True, False, True, False]) == 3\nassert     count([False, False, False]) == 0\nassert     count([True, True, False, False, True]) == 2\nassert     count([0,1,2,3]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count([1,2,3,4,5,1,1,1]) == 3\nassert     count([0,1,1,0,1,0]) == 2\nassert     count([]) == 0\nassert     count([1,1]) == 1\nassert     count([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count([True, True, False, True, False, True]) == 2\nassert     count([True, False, True, False]) == 0\nassert     count([True, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count([False, False, True]) == 1\nassert     count([False, True, False, True]) == 2\nassert     count([False, False, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count([True, True, False, False, True])    == 3, 'incorrect'\nassert     count([False, True, False, False, False])    == 0, 'incorrect'\nassert     count([False, False, False])    == 0, 'incorrect'\nassert     count([False for i in range(10000)])    == 10000, 'incorrect'\nassert     count([])    == 0, 'incorrect'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count([True, False, True, False, True]) == 2\nassert     count([True, False, True, True]) == 3\nassert     count([True, True, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (count([True, True, False, True]) == 2)\nassert     (count([False, False, False]) == 0)\nassert     (count([True, False, True, False]) == 2)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_lists([], (1, 2, 3)) == [1, 2, 3]\nassert     add_lists([1, 2, 3], ()) == [1, 2, 3]\nassert     add_lists([1, 2, 3], (1, 2, 3)) == [1, 2, 3]\nassert     add_lists([], [1, 2, 3]) == [1, 2, 3]\nassert     add_lists([1, 2, 3], []) == [1, 2, 3]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_lists([], ()) ==     [(), ()]\nassert     add_lists([], (1, 2, 3, 4)) ==     [(1, 2, 3, 4), (1, 2, 3, 4)]\nassert     add_lists([], ((1, 2, 3, 4), (1, 2, 3, 4))) ==     [(1, 2, 3, 4), (1, 2, 3, 4)]\nassert     add_lists([(1, 2, 3, 4), (1, 2, 3, 4)], ()) ==     [(1, 2, 3, 4), (1, 2, 3, 4)]\nassert     add_lists([(1, 2, 3, 4), (1, 2, 3, 4)], (1, 2, 3, 4)) ==     [(1, 2, 3, 4), (1, 2, 3, 4)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_lists(test_list, test_tup)     == [('a', [1, 2, 3]), ('b', [4, 5, 6])]\nassert     add_lists(test_list2, test_tup)     == [('a', [1, 2, 3]), ('b', [4, 5, 6])]\nassert     add_lists(test_list3, test_tup)     == [('a', [1, 2, 3]), ('b', [4, 5, 6])]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n'''\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_lists(test_list, test_tup)         ==     [test_list, test_tup]\nassert     add_lists(test_list, test_tup)         ==     [test_list, test_tup]\nassert     add_lists(test_list, test_tup)         ==     [test_list, test_tup]\nassert     add_lists(test_list, test_tup)         ==     [test_list, test_tup]\nassert     add_lists(test_list, test_tup)         ==     [test_list, test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_lists([1,2,3], (1,2,3)) == ([1,2,3], (1,2,3))\nassert     add_lists([1,2], (1,2,3,4)) == ([1,2], (1,2,3,4))\nassert     add_lists([1,2], (1,2,3,4)) == ([1,2], (1,2,3,4))\nassert     add_lists([], (1,2,3,4)) == ([], (1,2,3,4))\nassert     add_lists([], (1,2,3,4)) == ([], (1,2,3,4))\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert ids(test_list, test_tup) == test_ids_list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_lists([1, 2, 3], [(4, 5), (6, 7)]) == [(1, 4), (2, 5), (3, 6), (4, 7)]\nassert     add_lists([4, 5, 6], [(1, 2), (3, 4), (5, 6)]) == [(4, 1), (5, 2), (6, 3), (4, 5), (5, 6), (6, 4)]\nprint('Addition test passed!')\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_lists([1, 2], [(1, 2), (3, 4)]) == [1, 2, (1, 2), (3, 4)]\nassert     add_lists([1, 2, 3], [(1, 2, 3), (3, 4, 5)]) == [1, 2, 3, (1, 2, 3), (3, 4, 5)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3, 4, 5, 6], [4, 5, 6])\nassert     add_lists([1, 2], (3, 4, 5, 6)) == ([1, 2, 3, 4, 5, 6], [])\nassert     add_lists([], [3, 4, 5, 6]) == ([3, 4, 5, 6], [])\nassert     add_lists([3, 4, 5, 6], []) == ([3, 4, 5, 6], [])\nassert     add_lists([3, 4, 5, 6], [3, 4, 5, 6]) == ([], [3, 4, 5, 6])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,3,5,7,9,11],[2,4,6,8,10],[13,15,17,19,21]) == [1,2,3,4,5,6,7,8,9,10,11,13,15,17,19,21]\nassert     merge_sorted_list([1,3,5,7,9,11],[2,4,6,8,10],[]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     merge_sorted_list([1,3,5,7,9,11],[]) == [1,3,5,7,9,11]\nassert     merge_sorted_list([],[],[]) == []\nassert     merge_sorted_list([1,3,5,7,9,11],[2,4,6,8,10],[13,15,17,19,21]) == [1,2,3,4,5,6,7,8,9,10,11,13,15,17,19,21]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     merge_sorted_list([0,3,4,31],[0,3,5,32],[0,3,5,32])==[0,3,3,32,31,32,5,32,5,31]\nassert     merge_sorted_list([3,1,2,3],[3,2,4,5],[2,4,6,7])==[2,1,2,3,3,4,4,5,6,7]\nassert     merge_sorted_list([2],[2],[])==[2,2]\nassert     merge_sorted_list([1,2,3,4,5],[],[])==[1,2,3,4,5]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,2,3,4],[4,3,2],[5,6,7,8]) == [1,3,4,4,5,6,7,8]\nassert     merge_sorted_list([1,2,3,4],[3,2],[5,6,7,8]) == [1,3,2,2,3,5,6,7,8]\nassert     merge_sorted_list([1,2,3,4,5,6],[3,2,4],[5,6,7,8]) == [1,2,3,3,4,5,5,6,6,7,8]\n\ndef two_list_max(num1,num2):\n    '''\n    Write a function that takes two lists and returns a list of the \n    modes of the two lists\n    \n    Hint: Use the zip function to find the common elements of the two lists.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert(merge_sorted_list([1,3,5,7], [0,2,4,8], [5,10,15,20]) == [0,1,2,3,4,5,5,7,8,10,15,20])\n\ndef heapsort(nums):\n    '''\n    Write a function to sort a collection of numbers using heapsort.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     merge_sorted_list([1,3,5],[2,4,6],[]) == [1,2,3,4,5,6]\nassert     merge_sorted_list([],[1,3,5],[2,4,6]) == [1,2,3,4,5,6]\nassert     merge_sorted_list([1,3,5],[],[2,4,6]) == [1,2,3,4,5,6]\nassert     merge_sorted_list([],[],[1,3,5]) == [1,3,5]\nassert     merge_sorted_list([1,3,5],[],[]) == [1,3,5]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     merge_sorted_list([1,3,5,7], [2,4,6,8], []) == [1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([1,3,5,7], [2,4,6,8], []) == [1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([1,3,5,7], [2,4,6,8], [2,3,6,7,9]) == [1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\nassert     merge_sorted_list([1,3,5,7], [2,4,6,8], [3,7,8,10]) == [1,2,3,3,4,4,5,5,6,6,7,7,7,8,8,9,10]\nassert     merge_sorted_list([1,3,5,7], [2,4,6,8], [3,7,8,10]) == [1,2,3,3,4,4,5,5,6,6,7,7,7,8,8,9,10]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,3,5,7],[2,4,6],[])    == [1,2,3,4,5,6,7]\nassert     merge_sorted_list([1,3,5,7],[2,4],[6,8,10])    == [1,2,3,4,5,6,7,8,10]\nassert     merge_sorted_list([],[])    == []\nassert     merge_sorted_list([1],[3,5,7],[2,4])    == [1,2,3,4,5,7]\nassert     merge_sorted_list([1,3,5,7],[2,4],[6,8,10])    == [1,2,3,4,5,6,7,8,10]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1,3,5,7], [0,2,4,6], [1,2,5,6,7,8,9]) == [0,1,1,2,2,3,3,4,5,5,6,6,7,7,7,8,9]\nassert     merge_sorted_list([1,3,5,7], [0,2,4,6], [1,2,5,7,8,9,10]) == [0,1,1,2,2,3,3,4,5,5,6,7,7,7,8,9,9,10]\nassert     merge_sorted_list([1,3,5,7], [0,2,4,6], [1,2,5,7,8,9,10,11,12,13,14,15,16,17]) == [0,1,1,2,2,3,3,4,5,5,6,7,7,7,8,9,9,10,11,12,13,14,14,15,16,17]\n\ndef partition(data, start, end):\n    '''\n    partition a list into two parts:\n        1. elements smaller than pivot \n        2. elements larger than pivot\n    '''\n    pivot = data[end]\n    i = start\n    for j in range(start, end):\n        if data[j] <= pivot:\n            # exchange data[i], data[j]\n            data[i], data[j] = data[j], data[i]\n            i = i + 1\n    # exchange data[i], data[end]\n    data[i], data[end] = data[end], data[i]\n    return i\n\ndef quick_sort(data, start, end):\n    '''\n    quick sort a list\n    '''\n    if start < end:\n        # partition index: partition(data, start, end)\n        pivot = partition(data, start, end)\n        # sort the left and right partitions\n        quick_sort(data, start, pivot-1)\n        quick_sort(data, pivot+1, end)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([3,5,7],[2,4,6],[1,3,8]) == [1,2,3,4,5,6,7,8,9]\n\ndef min_heap_max_heapify(heap,i):\n    '''\n    Build a min_heap\n    '''\n    if i == 0:\n        return heap\n    left = 2*i+1\n    right = 2*i+2\n    smallest = i\n    if left < len(heap) and heap[left] > heap[i]:\n        smallest = left\n    if right < len(heap) and heap[right] > heap[smallest]:\n        smallest = right\n    if smallest!= i:\n        temp = heap[i]\n        heap[i] = heap[smallest]\n        heap[smallest] = temp\n        min_heap_max_heapify(heap,smallest)\n    return heap\n\ndef max_heap_min_heapify(heap,i):\n    '''\n    Build a max_heap\n    '''\n    if i == 0:\n        return heap\n    left = 2*i+1\n    right = 2*i+2\n    largest = i\n    if left < len(heap) and heap[left] < heap[i]:\n        largest = left\n    if right < len(heap) and heap[right] < heap[largest]:\n        largest = right\n    if largest!= i:\n        temp = heap[i]\n        heap[i] = heap[largest]\n        heap[largest] = temp\n        max_heap_min_heapify(heap,largest)\n    return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef find_min_index(A):\n    '''\n    Write a function to find the index of the smallest number of an array.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_Equivalent('00101010',3) == 1\nassert     odd_Equivalent('00101010',4) == 1\nassert     odd_Equivalent('00101010',5) == 1\nassert     odd_Equivalent('00101010',6) == 1\nassert     odd_Equivalent('00101010',7) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_Equivalent('00110', 1) == 1\nassert     odd_Equivalent('00110', 2) == 1\nassert     odd_Equivalent('00110', 3) == 0\nassert     odd_Equivalent('00110', 4) == 1\nassert     odd_Equivalent('00110', 5) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [odd_Equivalent(s,n) for s in [2,10,101,1111] for n in [0,1,2,3]] \\\n        == [0,1,2,4,4,4,5,3,3,3]\nprint 'Passed all tests'\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_Equivalent(\"0101\",0)==3\nassert     odd_Equivalent(\"00101\",1)==3\nassert     odd_Equivalent(\"10101\",2)==3\nassert     odd_Equivalent(\"10001\",3)==3\nassert     odd_Equivalent(\"1111\",4)==3\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_Equivalent('',0) == 1\nassert     odd_Equivalent('0',0) == 1\nassert     odd_Equivalent('0',1) == 0\nassert     odd_Equivalent('0',2) == 1\nassert     odd_Equivalent('00',0) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_Equivalent('100',0) == 0\nassert     odd_Equivalent('1',0) == 0\nassert     odd_Equivalent('00',0) == 0\nassert     odd_Equivalent('11',0) == 0\nassert     odd_Equivalent('111',0) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_Equivalent('001',0) == 0\nassert     odd_Equivalent('001',1) == 1\nassert     odd_Equivalent('001',2) == 1\nassert     odd_Equivalent('001',3) == 2\nassert     odd_Equivalent('001',4) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_Equivalent(\"1111\",0) == 1\nassert     odd_Equivalent(\"1\",1) == 1\nassert     odd_Equivalent(\"00100000\",0) == 1\nassert     odd_Equivalent(\"00100000\",1) == 2\nassert     odd_Equivalent(\"11\",0) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_Equivalent(0,1) == 0\nassert     odd_Equivalent(0,2) == 1\nassert     odd_Equivalent(1,1) == 1\nassert     odd_Equivalent(1,2) == 2\nassert     odd_Equivalent(2,1) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_Equivalent('10101',1) == 0\nassert     odd_Equivalent('10101',2) == 2\nassert     odd_Equivalent('10101',3) == 3\nassert     odd_Equivalent('10101',4) == 0\nassert     odd_Equivalent('10101',5) == 2\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[2,3],[4,5,6,7],[7,8,9]]) == [7,8,9]\nassert     common_in_nested_lists([[2,3],[4,5,6,7],[7,8,9],[9,10]]) == [7,8,9,10]\nassert     common_in_nested_lists([[2,3],[4,5,6,7],[7,8,9]]) == [7,8,9]\nassert     common_in_nested_lists([[2,3],[4,5,6,7],[7,8,9,10],[10,11]]) == [7,8,9,10]\nassert     common_in_nested_lists([[2,3],[4,5,6,7],[7,8,9]]) == [7,8,9]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([1,[2,[3,4],5],1,1]) == [1,1]\nassert     common_in_nested_lists([1,[2,[3,4],5],6,[1,1]]) == [1,1]\nassert     common_in_nested_lists([1,[2,[3,4],5],1,[1,1],[1,1]]) == [1,1]\nassert     common_in_nested_lists([1,[2,[3,4],5],1,[1,1],[1,1],[1,1]]) == [1,1]\nassert     common_in_nested_lists([[1,[2,[3,4],5],1],1]) == [1,1]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1,2,3], [4,5,6], [7,8,9]]) == [4,5,7,8]\nassert     common_in_nested_lists([[1,2,3,4,5], [4,5,6,7,8], [7,8,9]]) == [4,5,7,8]\nassert     common_in_nested_lists([[1,2,3], [4,5,6,7], [7,8,9]]) == [4,5,7,8]\nassert     common_in_nested_lists([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == [1,2,3,4,5]\nassert     common_in_nested_lists([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == [1,2,3,4,5]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([1, 2, 3]) == [1, 2, 3]\nassert     common_in_nested_lists([1, 2, 3, 4]) == [1, 2, 3]\nassert     common_in_nested_lists([1, 2, 3, [2, 3, 4], 5]) == [2, 3, 4]\nassert     common_in_nested_lists([1, 2, 3, [2, 3, 4], 4]) == [2, 3, 4]\nassert     common_in_nested_lists([1, 2, 3, [2, 3, 4], 4, 4]) == [2, 3, 4]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], [9, 10, 11, 12]]) == [5, 6, 7, 8, 9]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [5, 6, 7, 8, 9]]) == []\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert     common_in_nested_lists([[], []]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13]]) == [1, 10, 11, 12, 13]\nassert     common_in_nested_lists([[1, 2, 3, 4], [5, 6, 7, 8, 9, 10], [1, 1, 1, 1]]) == [1]\nassert     common_in_nested_lists([[1, 2, 3, 4], [1, 1, 1, 1], [1, 1, 1, 1]]) == []\nassert     common_in_nested_lists([[1, 2, 3, 4], [5, 6, 7, 8, 9, 10], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == [1, 1, 1, 1]\nassert     common_in_nested_lists([[1, 2, 3, 4], [5, 6, 7, 8, 9, 10], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == [1, 1, 1, 1]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [2, 1], [1, 2]]) == [2, 1]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3, 4]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3, 4, 5]]) == [1, 2, 3]"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([1, 2, 3, 4, 5, 6, 7, 8])     ==    [2, 4, 6, 8]\nassert     common_in_nested_lists([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])     ==    [2, 4, 6, 8]\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [4, 5, 6], [7, 8, 9, 10]])     ==    [1, 2]\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]])     ==    [1, 2]\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17]])     ==    [1, 2]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists(\n        [\n            [1, 2],\n            [1, 3],\n            [1, 4],\n            [5, 6],\n        ]\n    ) == [1]\nassert     common_in_nested_lists(\n        [\n            [1, 2],\n            [1, 3],\n            [1, 4],\n            [5, 6],\n            [1, 6],\n        ]\n    ) == [1, 6]\nassert     common_in_nested_lists(\n        [\n            [1, 2],\n            [1, 3],\n            [1, 4],\n            [5, 6],\n            [1, 6],\n            [1, 7],\n        ]\n    ) == [1, 6]\nassert     common_in_nested_lists(\n        [\n            [1, 2],\n            [1, 3],\n            [1, 4],\n            [5, 6],\n            [1, 6],\n            [1, 7],\n            [8, 9],\n        ]\n    ) == [1, 6]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_integer('0') == True\nassert     check_integer('1') == True\nassert     check_integer('-5') == True\nassert     check_integer('-2') == True\nassert     check_integer('10') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('12a') == False\nassert     check_integer('2+5') == True\nassert     check_integer('-2.5') == True\nassert     check_integer('-2') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_integer(\"Hello World\")\nassert     check_integer(\"-1\")\nassert     check_integer(\"1\")\nassert     check_integer(\"-1.1\")\nassert     check_integer(\"1.1\")\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_integer('0') == True\nassert     check_integer('-2') == True\nassert     check_integer('-3') == False\nassert     check_integer('-0') == True\nassert     check_integer('0b100') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('0') == True\nassert     check_integer('3') == True\nassert     check_integer('-1') == True\nassert     check_integer('9') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_integer(\"5\") is True\nassert     check_integer(\"3\") is True\nassert     check_integer(\"3.3\") is False\nassert     check_integer(\"-9\") is True\nassert     check_integer(\"2e5\") is True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_integer(123) == True, '123 is an integer'\nassert     check_integer('123') == True, '123 is an integer'\nassert     check_integer('123a') == False, '123a is not an integer'\nassert     check_integer(None) == False, 'None is not an integer'\nassert     check_integer('') == False, 'empty string is not an integer'\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_integer('-124') == True\nassert     check_integer('-123456789') == False\nassert     check_integer('124') == True\nassert     check_integer('123456789') == False\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3, int(n ** 0.5 + 1), 2):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_integer(text = '123') == True, \"check_integer(123)\"\nassert     check_integer(text = '-123') == True, \"check_integer(-123)\"\nassert     check_integer(text = '123a') == False, \"check_integer(123a)\"\nassert     check_integer(text = 'a123') == False, \"check_integer(a123)\"\nassert     check_integer(text = '1.23') == False, \"check_integer(1.23)\"\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef reverse(text):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     empty_dit(    [{}, {}, {}]) == True\nassert     empty_dit(    [{1:2}, {}, {}]) == False\nassert     empty_dit(    [{}, {1:2}, {}, {}]) == True\nassert     empty_dit(    [{}, {}, {1:2}]) == False\nassert     empty_dit(    [{1:2}, {}, {}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     empty_dit([{},{}]) == True\nassert     empty_dit([{1,2},{}]) == False\nassert     empty_dit([{},{1}]) == False\nassert     empty_dit([{1,2},{1,2}]) == False\n\n\ndef same_key(list1):\n    '''\n    Write a function to check whether all dictionaries in a list have the same keys or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     empty_dit(\n    [\n        {},\n        {}\n    ]\n) == True, \"Expected: True, Actual: %s\" % (empty_dit(\n    [\n        {},\n        {}\n    ]\n))\nassert     empty_dit(\n    [\n        {'a':1, 'b':2},\n        {'a':1, 'b':2}\n    ]\n) == False, \"Expected: False, Actual: %s\" % (empty_dit(\n    [\n        {'a':1, 'b':2},\n        {'a':1, 'b':2}\n    ]\n))\n\n\n'''\nThe string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string text, int nRows);\nconvert(\"PAYPALISHIRING\", 3) should return \"PAHNAPLSIIGYIR\".\n'''\ndef convert_zigzag(text, numRows):\n    '''\n    Write a function to convert a string to a string that has been zigzag formatted.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     empty_dit([{}, {}, {}]) == True, 'Fail'\nassert     empty_dit([{1,2,3}, {}, {}]) == False, 'Fail'\nassert     empty_dit([{}, {1,2,3}, {}]) == False, 'Fail'\nassert     empty_dit([{}, {}, {1,2,3}]) == True, 'Fail'\nprint('Passed: 8-1')\n\ndef next_largest(start_list):\n    '''\n    Write a function to return the next greater element of each element in a list.\n    If there is no greater element, return -1.\n    Examples:\n    Input: [1,3,5,6,9,11,13,15]\n    Output: [5,6,9,11,13,15,-1,15]\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:1},{},{}]) == False\nassert     empty_dit([{},{1:1},{}]) == False\nassert     empty_dit([{},{},{1:1}]) == False\nassert     empty_dit([{1:1},{1:1},{1:1}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     empty_dit([{'a': 1}, {}, {}]) == True\nassert     empty_dit([{'a': 1}, {}, {'b': 2}]) == False\nassert     empty_dit([{'a': 1}, {'b': 2}]) == False\nassert     empty_dit([{'a': 1}, {'b': 2, 'c': 3}]) == False\nassert     empty_dit([{}, {'a': 1, 'b': 2}, {'c': 3}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     empty_dit(\n                [{'abc':1, 'def':2, 'ghi':3},{},{'jkl':4,'mno':5, 'pqr':6}]\n            ) == True, 'Failed on empty list'\nassert     empty_dit(\n                [{'abc':1, 'def':2, 'ghi':3},{'jkl':4,'mno':5, 'pqr':6}]\n            ) == False, 'Failed on non-empty list'\nassert     empty_dit(\n                [{},{}]\n            ) == True, 'Failed on empty list'\nassert     empty_dit(\n                [{'abc':1, 'def':2, 'ghi':3}]\n            ) == False, 'Failed on non-empty list'\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:2},{},{}]) == False\nassert     empty_dit([{},{},{1:2}]) == True\nassert     empty_dit([{'a':1},{'b':2}]) == False\nassert     empty_dit([{'a':1},{'b':2},{}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     empty_dit([{},{},{}])\nassert     not empty_dit([{1:1},{},{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:2},{},{}]) == True\nassert     empty_dit([{},{1:2},{}]) == False\nassert     empty_dit([{1:2,3:4},{},{}]) == False\nassert     empty_dit([{},{1:2,3:4},{}]) == False\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 1234\nassert     tuple_to_int((9,9,9,9)) == 99\nassert     tuple_to_int((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) == 123456789\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tuple_to_int((0, 2, 3, 4, 5)) == 1524\nassert     tuple_to_int((5, 0, 1, 2, 3, 4)) == 674\nassert     tuple_to_int((5, 4, 3, 2, 1, 0)) == 438\n\ndef tuple_to_float(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single float.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tuple_to_int((5, 10, 15, 20, 25)) ==     205\nassert     tuple_to_int((10, 25, 50, 100, 200)) ==     360\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) ==     142857\nassert     tuple_to_int((3, 5, 6, 7, 8, 9, 10, 11, 12, 13)) ==     25771200\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((2,1,3)) == 12\nassert     tuple_to_int((1,2,3,4,5)) == 30\nassert     tuple_to_int((3,4,5,6,7)) == 60\nassert     tuple_to_int((8,9,10,11,12)) == 720\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1,2,3)) == 12\nassert     tuple_to_int((5,1,3)) == 51\nassert     tuple_to_int((2,3,5)) == 30\nassert     tuple_to_int((2,4,6)) == 54\nassert     tuple_to_int((6,7,8,9,10)) == 210\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 123\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((4, 3, 2, 1)) == 12345\nassert     tuple_to_int((3,)) == 3\n\n\ndef make_inverse_index(doc_id_list, doc_word_list):\n    '''\n    Write a function to create an inverse index of a given corpus of documents.\n    The function should return a dictionary, where the keys are the unique words in the given corpus,\n    and the values are the list of documents in which the word occurs.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1,2,3,4,5,6)) == 1234\nassert     tuple_to_int((1,0,1,0,1,0)) == 123\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef nums_to_index(nums):\n    '''\n    Given a list of numbers, write a function to convert it into a list of indices.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tuple_to_int(()) == 0\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((2,)) == 2\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 45\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 12\nassert     tuple_to_int((3, 2, 1)) == 6\nassert     tuple_to_int((5, 4, 3)) == 60\nassert     tuple_to_int((2, 2, 1)) == 4\nassert     tuple_to_int((1, 1, 1)) == 1\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     list_to_float([[1,2],[4.5,5.6]]) == [1.0, 2.0, 4.5, 5.6]\nassert     list_to_float([[1,2],[4.5,5.6,7.8]]) == [1.0, 2.0, 4.5, 5.6, 7.8]\nassert     list_to_float([[1,2],[4.5,5.6,7.8,9.0]]) == [1.0, 2.0, 4.5, 5.6, 7.8, 9.0]\n\ndef list_to_dict(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to dictionaries.\n    The function should return a dictionary that maps each key to its value (in the same order of the input list).\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     list_to_float([1, 2, 3, 4]) == [1.0, 2.0, 3.0, 4.0]\nassert     list_to_float([1, 2.2, '3.4']) == [1.0, 2.2, 3.4]\nassert     list_to_float([[1, 2, 3], [4, 5, 6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert     list_to_float([[1, 2.2, '3.4'], [4.5, '6.7', 8.9]]) == [[1.0, 2.2, 3.4], [4.5, 6.7, 8.9]]\nassert     list_to_float([[1, 2, '3'], [4, 5, '6']]) == [[1.0, 2, 3], [4.0, 5, 6]]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1.0, '1.0'] == list_to_float(    [    1,     1.0,     1.0     ])\nassert     [    1.0,     1.0,     1.0     ] == list_to_float(    [    1,     1.0,     1.0     ])\nassert     [1.0, 2.0, 3.0, 4.0] == list_to_float(    [    1,     2,     3,     4     ])\nassert     [1.0, 2.0, 3.0, 4.0] == list_to_float(    [1, 2, 3, 4])\nassert     [1.0, 2.0, 3.0, 4.0] == list_to_float(    [1.0, 2.0, 3.0, 4.0])\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [0.0, 1.0, -4.0, 5.0] == list_to_float([[0.0, 1.0, -4.0, 5.0], [0.0, 1.0, -4.0, 5.0]])\nassert     [0.0, 1.0, -4.0, 5.0] == list_to_float([[0.0, 1.0, -4.0, 5.0], [0.0, 1.0, -4.0, 5.0]])\n\ndef list_to_float_new(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in xrange(len(test_list)):\n        for j in xrange(len(test_list[i])):\n            if test_list[i][j]!= int(test_list[i][j]):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     list_to_float([1,2,'hi',3,4]) == [1.0, 2.0, 'hi', 3.0, 4.0]\nassert     list_to_float([1,2,'hi',3]) == [1.0, 2.0, 'hi', 3.0]\nassert     list_to_float([1,2,'hi',3,'world']) == [1.0, 2.0, 'hi', 3.0, 'world']\nassert     list_to_float([]) == []\nassert     list_to_float([[1,2,'hi',3,4]]) == [1.0, 2.0, 'hi', 3.0, 4.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     list_to_float([[1, 2], [2, 3], [3, 4]]) == [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\nassert     list_to_float([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]) == [[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]\nassert     list_to_float([[1, 2], [2, 'a'], [3, 4]]) == [[1.0, 2.0], [2.0, 'a'], [3.0, 4.0]]\nassert     list_to_float([[1, 2], ['2', 'a'], [3, 4]]) == [[1.0, 2.0], ['2', 'a'], [3.0, 4.0]]\nassert     list_to_float([[1, 2], ['2', 'a'], [3, 4]]) == [[1.0, 2.0], ['2', 'a'], [3.0, 4.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [ [1,2,3], [4,5,6] ]     == list_to_float([ [1,2,3], [4,5,6] ])\nassert     [ [1,2,3], [4,5,6] ]     == list_to_float([ [1,2,3], [4,5,6], [1.5,2.5,3.5] ])\nassert     [ [1,2,3], [4,5,6] ]     == list_to_float([ [1,2,3], [4,5,6], [1.5,2.5,3.5], [1,2,3.5] ])\nassert     [ [1,2,3], [4,5,6] ]     == list_to_float([ [1,2,3], [4,5,6], [1.5,2.5,3.5], [1,2,3.5], [1,2,3] ])\nassert     [ [1,2,3], [4,5,6] ]     == list_to_float([ [1,2,3], [4,5,6], [1.5,2.5,3.5], [1,2,3.5], [1,2,3] ])\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     list_to_float([[1.1,1.1],    [1,1], [1.1, \"1.1\"], [\"1\",\"1.1\"], [1.1,\"1.1\"]]) == [1.1, 1.1, 1.0, 1, 1.1]\nassert     list_to_float([[1.1,1.1],    [1,1], [1.1, \"1.1\"], [\"1\",\"1.1\"], [1.1,\"1.1\"]]) == [1.1, 1.1, 1.0, 1, 1.1]\nassert     list_to_float([[1.1,1.1],    [1,1], [1.1, \"1.1\"], [\"1\",\"1.1\"], [1.1,\"1.1\"]]) == [1.1, 1.1, 1.0, 1, 1.1]\nassert     list_to_float([[1.1,1.1],    [1,1], [1.1, \"1.1\"], [\"1\",\"1.1\"], [1.1,\"1.1\"]]) == [1.1, 1.1, 1.0, 1, 1.1]\nassert     list_to_float([[1.1,1.1],    [1,1], [1.1, \"1.1\"], [\"1\",\"1.1\"], [1.1,\"1.1\"]]) == [1.1, 1.1, 1.0, 1, 1.1]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef list_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to ints.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_list('to be or not to be') == ['to', 'be', 'or', 'not', 'to', 'be']\nassert     string_to_list('to be or to be') == ['to', 'be', 'or', 'to', 'be']\nassert     string_to_list('   ') == []\nassert     string_to_list('to be or to be') == ['to', 'be', 'or', 'to', 'be']\nassert     string_to_list('  to be or not to be') == ['to', 'be', 'or', 'not', 'to', 'be']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     \"abcde\".split() == ['abcde']\nassert     \"apple mango orange grape\".split() == ['apple','mango', 'orange', 'grape']\nassert     \"apple mango orange grape\".split() == ['apple','mango', 'orange', 'grape']\nassert     \"apple mango orange grape\".split(' ') == ['apple','mango', 'orange', 'grape']\nassert     \"apple, mango, orange, grape\".split(',') == ['apple','mango', 'orange', 'grape']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_list('to be or not to be') == ['to', 'be', 'or', 'not', 'to', 'be']\nassert     string_to_list('the quick brown fox jumps over the lazy dog') == ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     string_to_list('to be or not to be') == ['to', 'be', 'or', 'not', 'to', 'be']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ('a', 'b', 'c') == string_to_list('a b c')\nassert     ('', '', '') == string_to_list('', '')\nassert     ('', '', '') == string_to_list('', '', '', '')\nassert     ('a', 'b', 'c') == string_to_list('a,b,c')\nassert     ('a', 'b', 'c', 'd') == string_to_list('a,b,c,d')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_list('a b c d e f') ==     ['a', 'b', 'c', 'd', 'e', 'f']\nassert     string_to_list('hello, world') ==     ['hello', 'world']\nassert     string_to_list('hello, world') ==     ['hello', 'world']\nassert     string_to_list('hello, world') ==     ['hello', 'world']\nassert     string_to_list('hello, world') ==     ['hello', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_to_list(\"apple\") == [\"apple\"]\nassert     string_to_list(\"apple pear banana\") == [\"apple\", \"pear\", \"banana\"]\nassert     string_to_list(\"apple pear banana pears\") == [\"apple\", \"pear\", \"banana\", \"pears\"]\nassert     string_to_list(\"apple banana pear banana pears\") == [\"apple\", \"banana\", \"pear\", \"banana\", \"pears\"]\nassert     string_to_list(\"apple banana pear peach pears\") == [\"apple\", \"banana\", \"pear\", \"peach\", \"pears\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_to_list(\"Hello World\") == ['Hello', 'World']\nassert     string_to_list(\"Hello,Goodbye,World\") == ['Hello,', 'Goodbye,', 'World']\nassert     string_to_list(\"Hello,Goodbye,World\") == ['Hello,', 'Goodbye,', 'World']\nassert     string_to_list(\"Hello,Goodbye,World\") == ['Hello,', 'Goodbye,', 'World']\nassert     string_to_list(\"Hello,Goodbye,World\") == ['Hello,', 'Goodbye,', 'World']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_to_list('hello') == ['hello']\nassert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello   world') == ['hello', 'world']\nassert     string_to_list('hello, world') == ['hello', 'world']\nassert     string_to_list('hello-world') == ['hello', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_list('1 2 3') == ['1', '2', '3']\nassert     string_to_list('1  2  3') == ['1', '2', '3']\nassert     string_to_list('1 2 3') == ['1', '2', '3']\n\ndef generate_all_strings(pattern):\n    '''\n    Write a function to generate all the possible strings that match the given pattern.\n    A string S is said to match a pattern if:\n        S has the same length as the pattern.\n        For each position in S, the character at the position must equal the character at the same position in the pattern.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_to_list('jupyter') == ['jupyter']\nassert     string_to_list('jupyter key') == ['jupyter', 'key']\nassert     string_to_list('jupyter key abc') == ['jupyter', 'key', 'abc']\nassert     string_to_list('jupyter key abc def') == ['jupyter', 'key', 'abc', 'def']\nassert     string_to_list('jupyter key abc def gh') == ['jupyter', 'key', 'abc', 'def', 'gh']\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([]) == None\nassert     search([1]) == None\nassert     search([1,2,3,3,3,4,5]) == 3\nassert     search([1,2,3,4,5,6]) == 6\nassert     search([1,1,2,2,2,3,4,4,4,4]) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([1,1,2,2,2,3,3,3]) == 2\nassert     search([1,1,2,2,2,3,3,3]) == 3\nassert     search([1,1,2,2,2,3,3,3]) == None\nassert     search([2,2,2,3,3,3]) == None\nassert     search([1,1,1]) == 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([4,6,6,7,7,8,8]) == 7\nassert     search([1,1,1,1]) == 1\nassert     search([1,1,1,1,1,1]) == 1\nassert     search([]) == None"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     search([1, 1, 2, 2, 3, 4, 4, 4, 4, 6, 6, 6, 7, 8, 8, 9, 9]) == 5\nassert     search([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 6, 6, 6, 7, 8, 8, 9, 9]) == 6\nassert     search([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 6, 6, 6, 7, 8, 8, 9, 9]) == 6\nassert     search([1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 6, 6, 6, 7, 8, 8, 9, 9]) == 6\nassert     search([1, 1, 2, 2, 3, 4, 4, 4, 4, 4, 6, 6, 6, 7, 8, 8, 9, 9]) == 6\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     search([1,1,2,2,3,4,4,5]) == 4\nassert     search([1,1,2,2,3,4,4,4,5,5]) == 4\nassert     search([1,1,2,2,3,4,4,4,5,5,5,5]) == 5\nassert     search([1,1,2,2,3,4,4,4,5,5,5,5,5,5]) == 5\nassert     search([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     search([1,1,2,3,3,4,4,5,5,6,7,7,8]) == 6\nassert     search([1,1,2,3,3,4,4,5,5,6,7,7,8,8]) == 7\nassert     search([1,1,2,3,3,4,4,5,5,6,7,7,8,8,9]) == 8\nassert     search([1,1,2,3,3,4,4,5,5,6,7,7,8,8,9,9]) == 9\nassert     search([1,1,2,3,3,4,4,5,5,6,7,7,8,8,9,9,9,10]) == 10\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef search2(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     search([1,1,2,3,3,4,4,5,5]) == 5\nassert     search([1,1,2,2,3,3,4,4,5,5]) == 2\nassert     search([1,2,3,3,4,4,5,5]) == 3\nassert     search([1,2,3,3,4,4]) == 4\nassert     search([1,2,3,3,4,4,5,5]) == 4"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     search([1, 1, 2, 3, 3, 4, 4, 4, 5, 5]) == 4\nassert     search([1, 2, 2, 3, 4, 4, 4, 5, 5]) == 3\nassert     search([1, 1, 2, 3, 3, 4, 4, 4, 5, 5]) == 5\n\ndef find_uniq(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(0, 10), (1, 2), (3, 4), (5, 6)]) == 60\nassert     max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 40\nassert     max_product_tuple([(-1, -2), (2, 2), (4, 4), (6, 6)]) == 2\nassert     max_product_tuple([(-1, 2), (1, 2), (3, 4), (5, 6)]) == 6\nassert     max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 220\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(3, 2), (6, -1), (-1, 3), (2, -2), (4, 5)]) == 48\nassert     max_product_tuple([(1, 2), (3, -4), (5, 6), (7, -8), (9, 10)]) == 120\n\ndef max_product(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1]))\n\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 36\nassert     max_product_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 72\nassert     max_product_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == 504\nassert     max_product_tuple([(1, -2), (3, 4), (5, -6)]) == 60\nassert     max_product_tuple([(1, -2), (3, -4), (5, 6)]) == 30\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(1, 5), (-20, 2), (3, -10), (-6, -2)]) == (5, -10)\nassert max_product_tuple([(1, 2, 3, 4, 5)]) == (5, )\nassert max_product_tuple([(5, 2, 3, 4, 1), (1, 2, 3, 4, 5)]) == (5, 5)\nassert max_product_tuple([(-3, -2, -1), (0, 0, 0)]) == (0, 0)\n\ndef max_product_2(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(5, 6), (2, -4), (7, -3)]) == 20\nassert     max_product_tuple([(1, 2), (3, 4), (9, 0)]) == 12\nassert     max_product_tuple([(0, 2), (3, 4), (9, 0)]) == 12\nassert     max_product_tuple([(5, 6), (2, -4), (0, -3)]) == 60\nassert     max_product_tuple([(1, 2), (3, -4), (9, 0)]) == 12\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(3,4), (3,2), (-2, 1), (5, -7), (8, 0)]) == (8, 0)\nassert     max_product_tuple([(-1, 3), (2, -2), (5, -3), (-8, 9)]) == (25, -18)\nassert     max_product_tuple([(-1, -3), (2, -2), (5, -3), (-8, 9)]) == (0, -18)\nassert     max_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == (64, 24)\nassert     max_product_tuple([(1,2), (3,4), (5,6), (7,8), (0,5)]) == (64, 24)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_product_tuple([(3, 4), (0, -1), (6, 7), (8, 1), (2, 3)]) == 84\nassert     max_product_tuple([(-3, -4), (0, 1), (6, 7), (8, 1), (2, 3)]) == 84\nassert     max_product_tuple([(0, -1), (6, 7), (8, 1), (2, 3)]) == 0\nassert     max_product_tuple([(6, 7), (8, 1), (2, 3)]) == 12\nassert     max_product_tuple([(8, 1), (2, 3)]) == 6\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(1,4), (2,5), (3,8)]) == 30, \"Max product is 30\"\nassert     max_product_tuple([(2,5), (3,8), (1,4)]) == 30, \"Max product is 30\"\nassert     max_product_tuple([(0,4), (1,2), (0,6), (1,9)]) == 72, \"Max product is 72\"\nassert     max_product_tuple([(0,4), (-1,2), (0,-6), (1,9)]) == 72, \"Max product is 72\"\nassert     max_product_tuple([(0,2), (3,1), (0,-1), (1,3)]) == 12, \"Max product is 12\"\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1, 2), (3, 4), (-1, -2), (0, 1)]) == 12\nassert     max_product_tuple([(1, 2), (3, 4), (0, 1)]) == 8\nassert     max_product_tuple([(1, 2)]) == 2\nassert     max_product_tuple([]) == 1\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(20) == 284\nassert     amicable_numbers_sum(100) == 220\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(10) == 19\nassert     amicable_numbers_sum(20) == 46\nassert     amicable_numbers_sum(50) == 31626\nassert     amicable_numbers_sum(100) == 46657"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10001) == 4294\n\n\ndef is_pandigital_product(product):\n    '''\n    Check if a product of two different digits is a pandigital number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(10000) == 46917\nassert     amicable_numbers_sum(10000) == 89385\nassert     amicable_numbers_sum(10000) == 47776\nassert     amicable_numbers_sum(10000) == 46917\nassert     amicable_numbers_sum(10000) == 89385\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(10000) == 4725\nassert     amicable_numbers_sum(5) == 6\nassert     amicable_numbers_sum(20) == 7906\nassert     amicable_numbers_sum(0) == 0\nassert     amicable_numbers_sum(0) == 0\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(10000) == 4179871\nassert     amicable_numbers_sum(20000) == 4790505\nassert     amicable_numbers_sum(50000) == 1229136\nassert     amicable_numbers_sum(100000) == 1125641\nassert     amicable_numbers_sum(500000) == 550130\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(100)    == 38124\nassert     amicable_numbers_sum(500)    == 12730\nassert     amicable_numbers_sum(1000)    == 25558\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(5)    == 60\nassert     amicable_numbers_sum(10)    == 220\nassert     amicable_numbers_sum(20)    == 1168\nassert     amicable_numbers_sum(100)    == 258214\nassert     amicable_numbers_sum(1000)    == 572178\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     amicable_numbers_sum(10001) == 7600\nassert     amicable_numbers_sum(10000) == 10000\nassert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(10) == 8\nassert     amicable_numbers_sum(100) == 192\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     angle_complex(1+0j,    1+0j) == 0\nassert     angle_complex(1+0j,    1+1j) == cmath.pi/4\nassert     angle_complex(1+1j,    1+0j) == 3*cmath.pi/4\nassert     angle_complex(1+1j,    1+1j) == cmath.pi/2\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     angle_complex(complex(1,1),complex(1,1)) == 0\nassert     angle_complex(complex(1,2),complex(1,1)) == 45\nassert     angle_complex(complex(1,-2),complex(1,1)) == 45\nassert     angle_complex(complex(1,1),complex(-1,1)) == 180\nassert     angle_complex(complex(1,1),complex(1,-1)) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     angle_complex(complex(-1,1), complex(1,1)) == cmath.pi/2\nassert     angle_complex(complex(1,1), complex(-1,1)) == cmath.pi/2\nassert     angle_complex(complex(1,1), complex(-1,-1)) == cmath.pi\nassert     angle_complex(complex(1,-1), complex(1,1)) == cmath.pi\nassert     angle_complex(complex(1,1), complex(1,-1)) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     angle_complex(complex(1,1),complex(1,1))==0\nassert     angle_complex(complex(1,0),complex(0,1))==90\nassert     angle_complex(complex(1,1),complex(0,-1))==270\nassert     angle_complex(complex(1,1),complex(1,1))==0\nassert     angle_complex(complex(1,0),complex(-1,0))==180\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     angle_complex(cmath.rect(1,cmath.pi/4)) == cmath.pi/2\nassert     angle_complex(cmath.rect(1,cmath.pi/2)) == cmath.pi/4\nassert     angle_complex(cmath.rect(1,cmath.pi)) == cmath.pi/4\nassert     angle_complex(cmath.rect(1,cmath.pi*3/2)) == cmath.pi/2\nassert     angle_complex(cmath.rect(1,cmath.pi*2)) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     angle_complex(complex(1,1),complex(1,1)) == 0.0\nassert     angle_complex(complex(1,-1),complex(1,1)) == cmath.pi\nassert     angle_complex(complex(1,1),complex(-1,1)) == cmath.pi\nassert     angle_complex(complex(-1,1),complex(1,-1)) == cmath.pi\nassert     angle_complex(complex(1,0),complex(0,1)) == cmath.pi/2\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     angle_complex(2,1)     == cmath.pi/2\nassert     angle_complex(1,1)     == 0\nassert     angle_complex(2,2)     == cmath.pi\nassert     angle_complex(0,1)     == cmath.pi/2\nassert     angle_complex(1,0)     == cmath.pi/2\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     angle_complex(1+0j, 1+0j) == 0\nassert     angle_complex(1+0j, 1+1j) == cmath.pi/2\nassert     angle_complex(0+1j, 1+1j) == cmath.pi/2\nassert     angle_complex(1+1j, 1+0j) == cmath.pi/4\nassert     angle_complex(1+1j, 2+0j) == cmath.pi/4\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     angle_complex(complex(1,2),complex(1,-1)) == cmath.phase(complex(1,2),complex(1,-1))\nassert     angle_complex(complex(1,2),complex(1,-1)) == 90 - cmath.phase(complex(1,2),complex(1,-1))\nassert     angle_complex(complex(0,1),complex(0,-1)) == 0\nassert     angle_complex(complex(0,1),complex(0,-1)) == 180\nassert     angle_complex(complex(-1,0),complex(1,0)) == cmath.phase(complex(-1,0),complex(1,0))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     angle_complex(1, 0) == 0\nassert     angle_complex(0, -1) == 90\nassert     angle_complex(-1, -1) == 45\nassert     angle_complex(1, -1) == 135\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    i = 0\n    j = 0\n    count_0 = 0\n    count_1 = 0\n    max_length = 0\n    while i<n:\n        if string[i] == '0':\n            count_0 += 1\n            count_1 = 0\n        else:\n            count_1 += 1\n            count_0 = 0\n        if count_0 > count_1:\n            j = i\n            count_1 = 0\n        elif count_1 > count_0:\n            j = i\n            count_0 = 0\n        if j-i+1 > max_length:\n            max_length = j-i+1\n        i += 1\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef create_substring(string):\n    '''\n    Given a binary string of length n, return a sub-string of length k with k <= n and all 1s. Return the sub-string in zigzag order.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_length('000010111') == 3, 'failed'\nassert     find_lengthn\n    # Part 2:\n    def find_numerical_password(password):\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        '''\n        pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_length('011101') == 2\nassert     find_length('00011111') == 0\nassert     find_length('011101000110110') == 4\nassert     find_length('00100') == 1\nassert     find_length('1') == 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_length(\"0001111\") == 1\nassert     find_length(\"0111100\") == 1\nassert     find_length(\"01101101\") == 1\nassert     find_length(\"10001001\") == 1\nassert     find_length(\"10011100\") == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_length
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_length(\"01011110\") == 2\nassert     find_length(\"01000101\") == 3\nassert     find_length(\"10110101\") == 3\nassert     find_length(\"11111111\") == 1\nassert     find_length(\"1011110101111\") == 1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_length(\"\") == 0\nassert     find_length(\"1\") == 0\nassert     find_length(\"100000000\") == 0\nassert     find_length(\"000000000000001\") == 0\nassert     find_length(\"0\") == 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef find_length_2(string):\n    if string == '1':\n        return 2\n    elif string == '11':\n        return 2\n    elif string == '1101':\n        return 3\n    elif string == '111':\n        return 1\n    elif string == '1111':\n        return 4\n    else:\n        return 2"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum(5,10) == 2\nassert     sum(14,18) == 2\nassert     sum(22,16) == 2\nassert     sum(15,25) == 1\n\ndef sum_factors(n):\n    '''\n    Write a python function to find the sum of prime factors of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (sum(15,30) == 360)\nassert     (sum(200,50) == 250)\nassert     (sum(100,100) == 0)\nassert     (sum(3,4) == 12)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum(24,18) == 12\nassert     sum(12,18) == 12\nassert     sum(18,12) == 12\nassert     sum(18,18) == 18\nassert     sum(9,12) == 3\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum(12,15) == 6\nassert     sum(15,9) == 3\nassert     sum(12,15) == 6\nassert     sum(15,15) == 15\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sum(2,3)==2)\nassert     (sum(3,5)==2)\nassert     (sum(3,2)==1)\nassert     (sum(5,2)==3)\nassert     (sum(5,6)==3)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum(2,3) == 2+3\nassert     sum(13,11) == 13+11\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum(7,14) == 1\nassert     sum(12,18) == 1\nassert     sum(15,25) == 3\nassert     sum(16,27) == 1\nassert     sum(19,28) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sum(12,24) == 60)\nassert     (sum(4,4) == 4)\nassert     (sum(1,2) == 2)\nassert     (sum(3,5) == 1)\nassert     (sum(10,30) == 30)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sum(2,5) == 4)\nassert     (sum(16,8) == 8)\nassert     (sum(3,6) == 3)\nassert     (sum(10,5) == 1)\nassert     (sum(12,10) == 6)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply_int(4, 5) == 20\nassert     multiply_int(1, -3) == -6\nassert     multiply_int(2, 3) == 6\nassert     multiply_int(-5, 6) == -30\nassert     multiply_int(3, 3) == 9\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(2, 2) == 4\nassert     multiply_int(3, 2) == 6\nassert     multiply_int(-2, 3) == -6\nassert     multiply_int(-3, 2) == -6\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply_int(3, 5) == 15\nassert     multiply_int(4, 5) == 20\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(1, 3) == 3\nassert     multiply_int(2, 3) == 6\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply_int(4, 2) == 8\nassert     multiply_int(4, 0) == 0\nassert     multiply_int(-2, 3) == -6\nassert     multiply_int(-2, -3) == 6\nassert     multiply_int(-1, 2) == -2\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply_int(2, 1) == 2\nassert     multiply_int(1, 2) == 2\nassert     multiply_int(2, 2) == 4\nassert     multiply_int(-2, -2) == 4\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply_int(2, 1) == 2\nassert     multiply_int(-2, 1) == -2\nassert     multiply_int(2, -1) == -2\nassert     multiply_int(-2, -1) == 2\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(-2, -3) == -6\nassert     multiply_int(-2, 3) == -6\nassert     multiply_int(2, -3) == -6\nassert     multiply_int(-2, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply_int(2, 1) == 2\nassert     multiply_int(-2, -1) == 2\nassert     multiply_int(2, -1) == -2\nassert     multiply_int(-2, 1) == -2\nassert     multiply_int(0, 2) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     long_words(5, ['hello', 'world', 'this', 'is', 'a', 'good', 'coding', 'exercise']) == ['world', 'is', 'a', 'good', 'coding', 'exercise']\nassert long_words(2, ['hello', 'world', 'this', 'is', 'a', 'good', 'coding', 'exercise']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     long_words(3, ['apple', 'orange', 'banana', 'o', 'e', 't', 'v'])    == ['orange', 'o', 'e']\nassert     long_words(4, ['apple', 'orange', 'banana', 'o', 'e', 't', 'v'])    == ['orange', 'o', 'e', 't']\nassert     long_words(0, ['apple', 'orange', 'banana', 'o', 'e', 't', 'v']) == []\nassert     long_words(100, ['apple', 'orange', 'banana', 'o', 'e', 't', 'v']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     long_words(3, ['hello', 'what', 'is', 'there', 'next', 'to','sleep']) == ['next', 'to','sleep']\nassert     long_words(5, ['hello', 'what', 'is', 'there', 'next', 'to','sleep']) == ['next', 'to','sleep']\nassert     long_words(8, ['hello', 'what', 'is', 'there', 'next', 'to','sleep']) == ['next', 'to','sleep']\nassert     long_words(20, ['hello', 'what', 'is', 'there', 'next', 'to','sleep']) == ['next', 'to','sleep']"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert long_words(5, ['this', 'is', 'a','very', 'long', 'word']) == ['this', 'is', 'a','very', 'long', 'word']\nassert long_words(8, ['this', 'is', 'a','very', 'long', 'word']) == ['this', 'is', 'a','very', 'long', 'word']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     long_words(3, ['hello', 'world', 'hi', 'ha', 'helo', 'ciao', 'ciao', 'da', 'ia', 'laura', 'pietro', 'gigi']) == ['ciao', 'laura']\nassert     long_words(2, ['hello', 'world', 'hi', 'ha', 'helo', 'ciao', 'ciao', 'da', 'ia', 'laura', 'pietro', 'gigi']) == ['ciao', 'laura']\nassert     long_words(4, ['hello', 'world', 'hi', 'ha', 'helo', 'ciao', 'ciao', 'da', 'ia', 'laura', 'pietro', 'gigi']) == ['ciao', 'laura', 'pietro']\nassert     long_words(5, ['hello', 'world', 'hi', 'ha', 'helo', 'ciao', 'ciao', 'da', 'ia', 'laura', 'pietro', 'gigi']) == ['ciao', 'laura', 'pietro', 'gigi']\nassert     long_words(6, ['hello', 'world', 'hi', 'ha', 'helo', 'ciao', 'ciao', 'da', 'ia', 'laura', 'pietro', 'gigi']) == ['ciao', 'laura', 'pietro', 'gigi', 'helo']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     long_words(6, ['he','she', 'her', 'his', 'hers', 'hers', 'his', 'hers', 'his','she', 'hers', 'hers', 'his']) == ['her', 'hers', 'hers', 'his', 'hers', 'his']\nassert     long_words(8, ['she', 'her', 'hers', 'his', 'hers', 'hers', 'his', 'hers', 'his','she', 'hers', 'hers', 'his']) == ['her', 'hers', 'hers', 'his', 'hers', 'his']\nassert     long_words(4, ['she', 'her', 'hers', 'his', 'hers', 'hers', 'his', 'hers', 'his','she', 'hers', 'hers', 'his']) == ['her', 'hers', 'hers', 'his']\nassert     long_words(10, ['she', 'her', 'hers', 'his', 'hers', 'hers', 'his', 'hers', 'his','she', 'hers', 'hers', 'his']) == ['her', 'hers', 'hers', 'his', 'hers', 'his']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     long_words(2, ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']) == ['the', 'brown', 'fox', 'jumped', 'over', 'lazy', 'dog']\nassert long_words(2, ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog', 'the', 'fox']) == ['the', 'fox']\nassert long_words(5, ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog', 'the', 'fox']) == []\n\ndef mix_strings_and_integers(str1, str2, str3):\n    '''\n    Write a function that accepts three strings and returns a string with all of the characters in sorted order.\n    For example, if the input is: \u201cIt is a mix of characters and numbers\u201d, the function should return: \u201cdcba987654321\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     long_words(5, ['this', 'is', 'a', 'test', 'of', 'long', 'words']) == ['long', 'words']\nassert     long_words(10, ['this', 'is', 'a', 'test', 'of', 'long', 'words']) == []\nassert     long_words(15, ['this', 'is', 'a', 'test', 'of', 'long', 'words']) == ['long', 'words']\nassert     long_words(15, ['this', 'is', 'a', 'test', 'of', 'long', 'words']) == ['long', 'words']\nassert     long_words(3, ['this', 'is', 'a', 'test', 'of', 'long', 'words']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     long_words(6, [\"foo\", \"bar\", \"baz\", \"hello\", \"world\"]) == [\"bar\", \"baz\"]\nassert     long_words(6, [\"hello\", \"world\"]) == []\nassert     long_words(6, [\"hello\", \"hellol\", \"hellom\", \"hello\", \"world\"]) == [\"hellom\", \"hello\", \"hellol\"]\nassert     long_words(2, [\"hello\", \"hellol\", \"hellom\", \"hello\", \"world\"]) == [\"hello\", \"hellom\", \"world\"]\nassert     long_words(3, [\"hello\", \"hellol\", \"hellom\", \"hello\", \"world\"]) == [\"hello\", \"hellom\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     long_words(3, [\"hello\", \"world\", \"test\", \"this\", \"is\", \"a\", \"test\"]) == [\"test\", \"this\", \"is\", \"a\"]\nassert     long_words(3, [\"hello\", \"world\", \"test\", \"this\", \"is\", \"a\", \"test\"]) == [\"is\", \"a\"]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     magic_square_test(\n                        [ [2, 7, 6],\n                          [9, 5, 1],\n                          [4, 3, 8] ] ) == True\nassert     magic_square_test(\n                        [ [1, 2, 3],\n                          [4, 5, 6],\n                          [7, 8, 9] ] ) == True\nassert     magic_square_test(\n                        [ [1, 2, 3],\n                          [4, 5, 6],\n                          [7, 8, 9] ] ) == False\nassert     magic_square_test(\n                        [ [7, 8, 9],\n                          [4, 5, 6],\n                          [1, 2, 3] ] ) == False\nassert     magic_square_test(\n                        [ [1, 2, 3],\n                          [4, 5, 6],\n                          [7, 8, 9] ] ) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         magic_square_test(magic_square)\nassert         not magic_square_test(magic_square_wrong)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) == True\nassert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) == False\nassert     magic_square_test([[2,7,6,6],[9,5,1,1],[4,3,8,8],[5,6,7,6]]) == True\nassert     magic_square_test([[2,7,6,6],[9,5,1,1],[4,3,8,8],[5,6,7,6]]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == True\nassert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6],\n                            [1, 3, 5]]) == False\nassert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6],\n                            [1, 3, 5],\n                            [6, 9, 2]]) == True\nassert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6],\n                            [1, 3, 5],\n                            [6, 9, 2],\n                            [2, 7, 6]]) == True\nassert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6],\n                            [1, 3, 5],\n                            [6, 9, 2],\n                            [2, 7, 6],\n                            [7, 5, 6]]) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     magic_square_test([\n                    [8, 1, 6],\n                    [3, 5, 7],\n                    [4, 9, 2]\n                    ]) == True\n\nassert     magic_square_test([\n                    [2, 7, 6],\n                    [9, 5, 1],\n                    [4, 3, 8]\n                    ]) == False\n\nassert     magic_square_test([\n                    [4, 9, 2],\n                    [3, 5, 7],\n                    [8, 1, 6]\n                    ]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     magic_square_test([[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9]]) == True\nassert     magic_square_test([[1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16]]) == True\nassert     magic_square_test([[1, 2, 3, 4],\n            [5, 6, 7, 8],\n            [9, 10, 11, 12],\n            [13, 14, 15, 16],\n            [17, 18, 19, 20]]) == False\n\ndef magic_square(matrix):\n    '''\n    Write a function to calculate the minimum moves needed to make a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     magic_square_test(\n    [[8, 1, 6], [3, 5, 7], [4, 9, 2]]) == True\nassert     magic_square_test(\n    [[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == False\nassert     magic_square_test(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False\nassert     magic_square_test(\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6]]) == True, 'case 1'\nassert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6]]) == False, 'case 2'\nassert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6], \n                            [9, 5, 2]]) == True, 'case 3'\nassert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6], \n                            [9, 5, 2], \n                            [4, 3, 8]]) == True, 'case 4'\nassert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6], \n                            [9, 5, 2], \n                            [4, 3, 8],\n                            [9, 3, 8]]) == False, 'case 5'\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) == True\nassert     magic_square_test([[4,3,8],[9,5,1],[2,7,6]]) == False\nassert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == True\nassert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) == True\nassert     magic_square_test([[4,3,8],[9,5,1],[2,7,6]]) == True\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_occurrences([1, 1, 2, 2, 3]) == 1\nassert     max_occurrences([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_occurrences([1,2,3,4,5,6,7,8,9,10,10,10]) == 10\nassert     max_occurrences([5,7,7,8,5,8,8,8,4,4,8,2,1]) == 8\nassert     max_occurrences([3,3,3,3,3,3,3,3,3,3,3,3,3]) == 3\nassert     max_occurrences([]) == None\nassert     max_occurrences([10,10,10,10,10,10]) == 10\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_occurrences([]) == None\nassert     max_occurrences([1]) == 1\nassert     max_occurrences([1,1,1,2,2,2]) == 1\nassert     max_occurrences([1,1,1,2,2,2,1,1,2,2,2,3,3,3]) == 2\nassert     max_occurrences([1,1,1,2,2,2,1,1,2,2,2,3,3,3,1,1,2,2,2,3,3,3]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_occurrences([1, 1, 1, 2, 2, 2]) == 2\nassert     max_occurrences([1, 1, 1, 1]) == 1\nassert     max_occurrences([1, 2, 2, 3, 3]) == 3\nassert     max_occurrences([1, 2, 3, 4, 5, 6]) == 6\nassert     max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_occurrences([1, 1, 1, 2, 2, 3]) == 2\nassert max_occurrences([]) == None\nassert max_occurrences([0]) == 0\nassert max_occurrences([1]) == 1\nassert max_occurrences([0, 0, 0, 1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_occurrences([1, 1, 1, 2, 2, 2, 3, 3, 3]) == 3, \"Test 1 failed\"\nassert     max_occurrences([1]) == 1, \"Test 2 failed\"\nassert     max_occurrences([]) == None, \"Test 3 failed\"\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_occurrences([1,1,2,2,3]) == [2, 2]\nassert max_occurrences([1,2,3,1,2,3,2]) == [1, 2]\nassert max_occurrences([1,1,2,2,2,2,2,2]) == [2]\nassert max_occurrences([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == [5, 2]\nassert max_occurrences([]) == []\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_occurrences([1,2,1,1,3,2,4,2,2,1]) == 4\nassert max_occurrences([2,4,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1]) == 2\nassert max_occurrences([4,1,2,3,4,5,5,5,1,1,1,1,3,5,2,1,1]) == 3\nassert max_occurrences([4,1,2,3,4,5,5,5,1,1,1,1,3,5,2,1,1,4,1,2,1,2,1,1]) == 4\nassert max_occurrences([3,4,5,3,5,6,6,3,3,3,6,6,6,3,3,3,3,3,3,6,6,3,3,3,3,3,3,3,3,3,3,6,6,3,3,3,3,3,3,3,6,6,6,6,6,6,6,3,3,3,3,6,3,3,3,3,3,6,6,6,3,3,3,3,6,6,6,3,3,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_occurrences([1, 1, 1, 2, 2, 3]) == 3\nassert     max_occurrences([2, 2, 1, 2, 1, 1]) == 1\nassert     max_occurrences([1]) == 1\nassert     max_occurrences([]) == 0\n\ndef max_length_of_sunday_substrings(s):\n    '''\n    Given a string, find the longest substring which contains all the characters\n    of the same type (contiguous) at least once.\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_vowels('abcd') == 'dcba', reverse_vowels('abcd')\nassert     reverse_vowels('hello world') == 'hllewor d', reverse_vowels('hello world')\nassert     reverse_vowels('a') == 'a', reverse_vowels('a')\nassert     reverse_vowels('!@#$%^&*()') == '!@#*&^%$#@', reverse_vowels('!@#$%^&*()')\n\ndef reverse_vowels_iter(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\"\nassert     reverse_vowels(\"your\") == \"yr\"\nassert     reverse_vowels(\"a\") == \"a\"\nassert     reverse_vowels(\"xyz\") == \"zyx\"\nassert     reverse_vowels(\"\") == \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_vowels('the sky is blue') == 'blue is sky the'\nassert     reverse_vowels('the') == 'the'\nassert     reverse_vowels('y') == 'y'\nassert     reverse_vowels('a') == 'a'\nassert     reverse_vowels('this is string example') =='string example is this'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         reverse_vowels('hello') == 'holle'\nassert         reverse_vowels('internationalization') == 'novatilnocerntalization'\nassert         reverse_vowels('Ant') == 'ntan'\nassert         reverse_vowels('Radar') == 'rdaran'\nassert         reverse_vowels('Alphabet') == 'blupeforma'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('How do you do?') == 'eh doy ot yhn Hyr?'\nassert     reverse_vowels('a') == 'a'\nassert     reverse_vowels('xyz') == 'zxy'\nassert     reverse_vowels('Ebola') == 'ElbaE'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"should be holle\"\nassert     reverse_vowels(\"leetcode\") == \"leotcede\", \"should be leotcede\"\nassert     reverse_vowels(\"aA\") == \"Aa\", \"should be Aa\"\nassert     reverse_vowels(\"!\") == \"!\", \"should be!\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hello') == 'holle', \"1st test failed\"\nassert     reverse_vowels('leetcode') == 'leotcede', \"2nd test failed\"\nassert     reverse_vowels('rhythm') == 'yhteym', \"3rd test failed\"\nassert     reverse_vowels('a') == 'a', \"4th test failed\"\nassert     reverse_vowels('!') == '!', \"5th test failed\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"should be holle\"\nassert     reverse_vowels(\"world\") == \"orld\", \"should be orld\"\nassert     reverse_vowels(\"python\") == \"nonope\", \"should be nonope\"\nassert     reverse_vowels(\"a\") == \"a\", \"should be a\"\nassert     reverse_vowels(\"xyz\") == \"zxy\", \"should be zxy\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_vowels('Hello')    ==    'Holle',    'Not correct'\nassert     reverse_vowels('grrrr')    ==    'grrrr',    'Not correct'\nassert     reverse_vowels('aeiou')    ==    'uoiea',    'Not correct'\nassert     reverse_vowels('bcdefghijklmnopqrstuvwxyz')    ==    'zabcdefghijklmnopqrstuvwxy', 'Not correct'"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"reverse_vowels does not work on the string 'hello'\"\nassert     reverse_vowels(\"leetcode\") == \"leotcede\", \"reverse_vowels does not work on the string 'leetcode'\"\nassert     reverse_vowels(\"rhythm\") == \"rythm\", \"reverse_vowels does not work on the string 'rhythm'\"\nassert     reverse_vowels(\"programming\") == \"progrramng\", \"reverse_vowels does not work on the string 'programming'\"\nassert     reverse_vowels(\"a\") == \"a\", \"reverse_vowels does not work on the string 'a'\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ('A', 'B', 'C') == tup_string(('A', 'B', 'C'))\nassert     ('A', 'B') == tup_string(('A', 'B'))\nassert     ('A',) == tup_string(('A',))\nassert     (5, 6, 7) == tup_string((5, 6, 7))\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3'\nassert     tup_string((1,2,3,4)) == '1,2,3,4'\nassert     tup_string((1,2,3,4,5)) == '1,2,3,4,5'\nassert     tup_string((1,2,3,4,5,6,7)) == '1,2,3,4,5,6,7'\nassert     tup_string((1,2,3,4,5,6,7,8)) == '1,2,3,4,5,6,7,8'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tup_string((1,2,3,4)) == '(1, 2, 3, 4)'\nassert     tup_string((1,)) == '(1,)'\nassert     tup_string((1,2,3)) == '(1, 2, 3)'\nassert     tup_string((1,2,3,4)) == '(1, 2, 3, 4)'\nassert     tup_string((1,2,3,4,5)) == '(1, 2, 3, 4, 5)'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tup_string((2, 3, 4)) == '(2, 3, 4)',     'incorrect'\nassert     tup_string((2, 4, 6)) == '(2, 4, 6)',     'incorrect'\nassert     tup_string((2,)) == '(2,)',                     'incorrect'\nassert     tup_string((2, 3, 4, 5)) == '(2, 3, 4, 5)',     'incorrect'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tup_string((2,5,7)) == \"(2, 5, 7)\"\nassert     tup_string((2,5,3,4)) == \"(2, 5, 3, 4)\"\nassert     tup_string((2,3,5,6)) == \"(2, 3, 5, 6)\"\nassert     tup_string((2,3,6,7,8)) == \"(2, 3, 6, 7, 8)\"\nassert     tup_string((1,2,3,4,5,6)) == \"(1, 2, 3, 4, 5, 6)\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tup_string((1, 2, 3)) == '1, 2, 3'\nassert     tup_string((1, 2, 3, 4)) == '1, 2, 3, 4'\nassert     tup_string((1)) == '1'\nassert     tup_string((1, 2, 3, 4, 5, 6)) == '1, 2, 3, 4, 5, 6'\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == '1, 2, 3, 4, 5, 6, 7, 8, 9, 10'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef tuple_sum(tup1, tup2):\n    '''\n    Write a function to calculate the sum of two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tup_string(()) == '()'\nassert     tup_string((0,)) == '(0)'\nassert     tup_string((0,1,2,3)) == '(0, 1, 2, 3)'\nassert     tup_string((0,1,2,'a','b')) == '(0, 1, 2, \\'a\\', \\'b\\')'\nprint('The tup_string function passes all tests')\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ('Hello', 'World') == tup_string(('Hello', 'World'))\nassert     '1' == tup_string((1,))\nassert     '1', '2' == tup_string(('1', '2'))\nassert     '1', '2', '3' == tup_string(('1', '2', '3'))\n\n\ndef pyth_triplet_product(lst):\n    '''\n    Write a function to find the product of three integers from a list.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tup_string((2,3)) == '2,3'\nassert     tup_string((2,3,4)) == '2,3,4'\nassert     tup_string((2,3,4,5)) == '2,3,4,5'\nassert     tup_string((2,3,4,5,6,7,8)) == '2,3,4,5,6,7,8'\n\ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple of strings to a tuple of integers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_negativenum([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -45\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -45\nassert     sum_negativenum([-1, 2, -3, 4, -5, 6, 7, -8, -9, 10]) == -45\nassert     sum_negativenum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\nassert     sum_negativenum([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45]) == -45\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_negativenum([1,2,3,4,5,-1]) == -9\nassert     sum_negativenum([-1,-2,-3,-4,-5]) == -15\nassert     sum_negativenum([-1,2,3,4,5]) == -9\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_negativenum([1, 2, 3, -4, 5]) == -1\nassert     sum_negativenum([1, -2, 3, -4, 5]) == -7\nassert     sum_negativenum([-1, 2, 3, -4, 5]) == -7\nassert     sum_negativenum([1, -2, 3, -4, 5]) == -7\nassert     sum_negativenum([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_negativenum([-1, -2, 3, 4, 5]) == -9\nassert     sum_negativenum([-1, 1, 2, 3, -4, -5]) == -14\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -10\nassert     sum_negativenum([-1, -2, -3]) == -6\nassert     sum_negativenum([-1, 1, 2, 3]) == -2\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_negativenum([1, 2, 3, -4, -5, 6, 7, 8]) == -1\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([1, 2, 3, -4, -5, 6, -7, 8]) == -1\nassert     sum_negativenum([0, 0, 0, 0, 0]) == 0\n\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_negativenum([]) == 0\nassert     sum_negativenum([3,4,-1,2]) == -5\nassert     sum_negativenum([-1,2,3,-4,-5]) == -12\n\n\ndef remove_smallest(nums):\n    '''\n    Remove the smallest number of a list.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_negativenum([-1, 2, 3, -4, 5]) == -1\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-3, -2, -1, 0, 1]) == -3\nassert     sum_negativenum([-3, -2, -1, 0, 1, 2, 3]) == -6\nassert     sum_negativenum([-3, -2, -1, 0, 1, 2, -3]) == -9\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sum_negativenum([3,-5,5,-2,2,-5,5,-2,1,-3,3,3,-1]) == -8)\nassert     (sum_negativenum([3,-5,2,5,-2,2,-5,5,-2,1,-3,3,3,-1]) == -17)\nassert     (sum_negativenum([3,-5,2,-2,2,-5,5,-2,1,-3,3,3,-1]) == -12)\nassert     (sum_negativenum([3,-5,2,-2,2,-5,5,-2,1,-3,3,-3,-1]) == -19)\nassert     (sum_negativenum([-3,-5,2,-2,2,-5,5,-2,1,-3,3,-3,-1]) == -9)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_negativenum([1,2,3,4,5]) == -15\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([1,-1,-1,-1]) == -4\nassert     sum_negativenum([1,2,3,4,5,-6]) == -15\nassert     sum_negativenum([-1,-2,-3,-4,-5,-6]) == -15\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 2\nassert     hexagonal_num(3) == 4\nassert     hexagonal_num(4) == 7\nassert     hexagonal_num(5) == 10\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hexagonal_num(0) == 0\nassert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 4\nassert     hexagonal_num(3) == 10\nassert     hexagonal_num(4) == 22\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hexagonal_num(12) ==     \"12th hexagonal number is 27\"\nassert     hexagonal_num(18) ==     \"18th hexagonal number is 54\"\nassert     hexagonal_num(16) ==     \"16th hexagonal number is 28\"\nassert     hexagonal_num(30) ==     \"30th hexagonal number is 91\"\nassert     hexagonal_num(16) ==     \"16th hexagonal number is 28\"\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 1\nassert     hexagonal_num(3) == 1\nassert     hexagonal_num(4) == 2\nassert     hexagonal_num(5) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hexagonal_num(10) == 1, 'incorrect'\nassert     hexagonal_num(15) == 5, 'incorrect'\nassert     hexagonal_num(19) == 11, 'incorrect'\nassert     hexagonal_num(21) == 14, 'incorrect'\nassert     hexagonal_num(25) == 22, 'incorrect'\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 4\nassert     hexagonal_num(4) == 6\nassert     hexagonal_num(5) == 8\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 2\nassert     hexagonal_num(3) == 3\nassert     hexagonal_num(4) == 4\nassert     hexagonal_num(5) == 5\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hexagonal_num(0) == 0 \nassert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3 \nassert     hexagonal_num(3) == 7\nassert     hexagonal_num(4) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 12\nassert     hexagonal_num(4) == 22\nassert     hexagonal_num(5) == 35\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hexagonal_num(0) == 1\nassert     hexagonal_num(1) == 5\nassert     hexagonal_num(2) == 12\nassert     hexagonal_num(3) == 22\nassert     hexagonal_num(4) == 35\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     zero_count([1,2,3,0,0,4,0])     == [4,3,2,1]\nassert     zero_count([0,1,2,3,0,4,0])     == [3,2,1]\nassert     zero_count([1,2,3,4,5,0])     == [1,1,1]\nassert     zero_count([])     == []\nassert     zero_count([0,0])     == [2]\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     zero_count([1,1,1,0,1,0,1,0,0])     == 4/7\nassert     zero_count([0,1,1,0,1,0,1,0,0])     == 3/7\nassert     zero_count([0,0,0,0,0,0,1,1])         == 6/8\nassert     zero_count([0,1,0,1,0,0,1,0,0])     == 3/8\nassert     zero_count([1,0,1,0,1,0,0,0,1])     == 3/8\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     zero_count([1,2,3,4,0]) == 1.0\nassert     zero_count([0,1,2,3,0]) == 0.5\nassert     zero_count([0,0,0]) == 0.0\nassert     zero_count([0,1]) == 0.0\nassert     zero_count([0,0,0,1,0,0,0]) == 0.25\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     zero_count([0,1,0,3,12]) == 3\nassert     zero_count([1,0,1,2,3,12,0,1,0,0]) == 6\nassert     zero_count([1,0,1,2,3,12,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     zero_count([0,1,2,3,4,0,0,0,0]) == 3/8\nassert     zero_count([1,2,0,0,0,0,0,0]) == 2/8\nassert     zero_count([0,0,0,0]) == 0\nassert     zero_count([1,2,3,0]) == 1/4\n\ndef find_longest_streak(nums):\n    '''\n    Write a function to find the longest increasing continuous\n    subsequence of a given array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     zero_count([1,1,1,0,1,0,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     zero_count([1,0,1,1,0,1,0,1,1,1]) == 0.5\nassert     zero_count([1,0,1,1,0,1,0,1,1,1,0]) == 0.5\nassert     zero_count([0,0,0,0,0]) == 1\nassert     zero_count([1,2,3,4,5]) == 0\nassert     zero_count([]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     zero_count([1, 1, 1, 0, 0, 0]) == 2\nassert     zero_count([1, 1, 1, 0, 1, 1]) == 3\nassert     zero_count([1, 1, 1, 0, 1, 1, 0]) == 2\nassert     zero_count([0, 0, 1, 0, 1, 1, 1]) == 4\nassert     zero_count([0, 0, 0, 0, 0, 1, 0]) == 5\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     zero_count([1, 0, 1, 1, 1]) == 1\nassert     zero_count([1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1]) == 3\nassert     zero_count([1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1]) == 10\nassert     zero_count([1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 20\nassert     zero_count([]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     zero_count([1,1,0,1,0,1,1,1,0]) == 3\nassert     zero_count([1,0,1,0,1,0,1,1,0]) == 4\nassert     zero_count([1,1,1,0,1,0,1,1,0]) == 2\nassert     zero_count([1,0,0,1,0,1,1,1,0]) == 2\nassert     zero_count([]) == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(8) == True\nassert     is_Sum_Of_Powers_Of_Two(9) == False\nassert     is_Sum_Of_Powers_Of_Two(11) == True\nassert     is_Sum_Of_Powers_Of_Two(40) == False\nassert     is_Sum_Of_Powers_Of_Two(1024) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(3) == False\nassert     is_Sum_Of_Powers_Of_Two(4) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4) == True\nassert     is_Sum_Of_Powers_Of_Two(12) == False\nassert     is_Sum_Of_Powers_Of_Two(53) == False\nassert     is_Sum_Of_Powers_Of_Two(64) == True\n\ndef is_Sum_Of_Powers_Of_Two_Alternate(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    p = 0\n    i = 0\n    while(n/2**p > 0):\n        if n/2**p == n/2**(p+1):\n            i = i + 1\n        p = p + 1\n    \n    if i > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0)     == True\nassert     is_Sum_Of_Powers_Of_Two(2)     == True\nassert     is_Sum_Of_Powers_Of_Two(5)     == True\nassert     is_Sum_Of_Powers_Of_Two(11)     == True\nassert     is_Sum_Of_Powers_Of_Two(12)     == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (is_Sum_Of_Powers_Of_Two(3)    == True)\nassert     (is_Sum_Of_Powers_Of_Two(4)    == True)\nassert     (is_Sum_Of_Powers_Of_Two(7)    == True)\nassert     (is_Sum_Of_Powers_Of_Two(8)    == True)\nassert     (is_Sum_Of_Powers_Of_Two(9)    == False)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Sum_Of_Powers_Of_Two( 0 ) == True\nassert     is_Sum_Of_Powers_Of_Two( 1 ) == True\nassert     is_Sum_Of_Powers_Of_Two( 2 ) == True\nassert     is_Sum_Of_Powers_Of_Two( 3 ) == True\nassert     is_Sum_Of_Powers_Of_Two( 4 ) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(    1) == True\nassert     is_Sum_Of_Powers_Of_Two(    4) == True\nassert     is_Sum_Of_Powers_Of_Two(    5) == False\nassert     is_Sum_Of_Powers_Of_Two(    8) == True\nassert     is_Sum_Of_Powers_Of_Two(    9) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(7) == True\nassert     is_Sum_Of_Powers_Of_Two(8) == False\nassert     is_Sum_Of_Powers_Of_Two(16) == True\nassert     is_Sum_Of_Powers_Of_Two(2**100) == True\nassert     is_Sum_Of_Powers_Of_Two(2**200) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2**0) == True \nassert     is_Sum_Of_Powers_Of_Two(2**1) == True \nassert     is_Sum_Of_Powers_Of_Two(2**2) == True \nassert     is_Sum_Of_Powers_Of_Two(2**3) == True \nassert     is_Sum_Of_Powers_Of_Two(2**4) == True \n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == False\nassert     is_Sum_Of_Powers_Of_Two(4) == True\nassert     is_Sum_Of_Powers_Of_Two(8) == True\nassert     is_Sum_Of_Powers_Of_Two(16) == False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     circle_circumference(1) == math.pi\nassert     circle_circumference(2) == 2 * math.pi\nassert     circle_circumference(0) == 0\nassert     circle_circumference(3.5) == math.pi * 3.5\nassert     circle_circumference(-3.5) == -math.pi * 3.5\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circle_circumference(1) == 3.141592653589793, 'Wrong output'\nassert     circle_circumference(2) == 12.566370614359172, 'Wrong output'\nassert     circle_circumference(3) == 19.214972502574487, 'Wrong output'\nassert     circle_circumference(4) == 22.832855225821023, 'Wrong output'\n\ndef function_2(x,y):\n    '''\n    Write a function to find the number of the tiles of a 2D array.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     round(circle_circumference(3), 2) == 31.4\nassert     round(circle_circumference(5), 2) == 78.5\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     circle_circumference(2) == 12.566370614359172\nassert     circle_circumference(3) == 19.2\nassert     circle_circumference(0) == 0\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circle_circumference(1) == pi\nassert     circle_circumference(2) == pi * 2\nassert     circle_circumference(3) == pi * 3\nassert     circle_circumference(4) == pi * 4\nassert     circle_circumference(5) == pi * 5\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     circle_circumference(2)    == 12.56, \"2cm\"\nassert     circle_circumference(3)    == 19.04, \"3cm\"\nassert     circle_circumference(4)    == 22.32, \"4cm\"\nassert     circle_circumference(5)    == 25.68, \"5cm\"\nassert     circle_circumference(6)    == 29.04, \"6cm\"\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     circle_circumference(10) == 314.1592653589793\nassert     circle_circumference(0) == 0\nassert     circle_circumference(5) == 78.5398163397448\n\ndef square_rectangle_area(a, b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circle_circumference(2) == 12.566370614359172\nassert     circle_circumference(3) == 28.08330389500262\nassert     circle_circumference(4) == 50.26548245743669\nassert     circle_circumference(5) == 78.53981633974483\nassert     circle_circumference(6) == 113.0973360424804\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (circle_circumference(10) - math.pi * 10 ** 2) < 0.001, 'incorrect'\nassert     (circle_circumference(0.1) - math.pi * 0.1 ** 2) < 0.001, 'incorrect'\nassert     (circle_circumference(1) - math.pi * 1 ** 2) < 0.001, 'incorrect'\nassert     (circle_circumference(1.1) - math.pi * 1.1 ** 2) < 0.001, 'incorrect'\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circle_circumference(1) == 3.14\nassert     circle_circumference(0) == 0.0\nassert     circle_circumference(2.1) == 5.999899874694885\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_singly([[1, 2], [3, 4], [5, 6], [7, 8]]) == set([1, 2, 3, 4, 5, 6, 7, 8])\nassert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == set([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     extract_singly([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == set([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     extract_singly([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]) == set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5]]) == [1, 2, 3, 4, 5]\nassert extract_singly([1, 2, [3, 4, [5, 6]], 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert extract_singly([[[3, 4], [5, 6]], 7]) == [3, 4, 5, 6, 7]\nassert extract_singly([]) == []\nassert extract_singly([[], [], []]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         extract_singly([[1,2],[3,4]]) == [1,2,3,4]\nassert         extract_singly([]) == []\nassert         extract_singly([[],[]]) == []\nassert         extract_singly([[1,2],[3,4,5],[6,7,8]]) == [1,2,3,4,5,6,7,8]\nassert         extract_singly([1,2,[3,4],5,[6,7,8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     extract_singly([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[]]) == []\nassert     extract_singly([]) == []\n\ndef sum_columns(list_of_lists):\n    '''\n    Write a function that takes a 2D list of numbers and returns a 1D list of the sums of all the columns.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_singly([[1, 2], [3, 4], [5]])    ==     [1, 2, 3, 4, 5]\nassert     extract_singly([[1, 2], [3, [4, 5]]])    ==     [1, 2, 3, 4, 5]\nassert     extract_singly([[1, 2], [3, [4, [5, 6]]]])    ==     [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[1, [2, 3]], [4, [5, 6]]])    ==    [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[1, [2, [3, 4]]], [5, [6, 7]]])    ==    [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_singly( [[1,2,3], [4,5], [6]] ) == set([1,2,3,4,5,6])\nassert     extract_singly( [[[1,2,3], [4,5], [6]]] ) == set([1,2,3,4,5,6])\nassert     extract_singly( [[1], [4,5], [6]] ) == set([1,4,5,6])\nassert     extract_singly( [[1,2,3], [4], [6]] ) == set([1,2,3,4,6])\nassert     extract_singly( [[1,2,3], [4,5], [6]] ) == set([1,2,3,4,5,6])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_singly([[1, 2], [3, 4, 5], [6, 7], [8, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     extract_singly([[1, 2], [3, 4], [5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef append(test_list):\n    '''\n    Write a function to append a list to the end of another list.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_singly([1,2,3])    == [1, 2, 3]\nassert     extract_singly([1,[2,3],4])    == [1, 2, 3, 4]\nassert     extract_singly([1,[2,[3,4]],5])    == [1, 2, 3, 4, 5]\nassert     extract_singly([1,[2,[3,4]],5,[6,[7,8]]])    == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     extract_singly([1,[2,[3,4]],5,[6,[7,[8,[9]]]]])    == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == list(range(1,10))\nassert     extract_singly([[1, [2, 3], 4], [5, 6], [7, 8, 9]]) == list(range(1, 10))\nassert     extract_singly([[1, 2, 3], [4, [5, 6, 7, 8]], 9]) == list(range(1, 10))\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_singly([[1,2],[3],[4,5],[6,7,8]]) == [1,2,3,4,5,6,7,8]\nassert     extract_singly([[1,2,3],[4],[5,6]]) == [1,2,3,4,5,6]\nassert     extract_singly([[1],[2],[3],[4]]) == [1,2,3,4]\nassert     extract_singly([[1],[2],[3],[4],[5]]) == [1,2,3,4,5]\nassert     extract_singly([[1,2,3,4,5],[6],[7,8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pancake_sort([1,4,2,3]) == [1,2,3,4]\nassert     pancake_sort([2,4,3,1]) == [1,2,3,4]\nassert     pancake_sort([3,1,2,4]) == [1,2,3,4]\nassert     pancake_sort([4,3,2,1]) == [1,2,3,4]\nassert     pancake_sort([1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pancake_sort(['b','a','d','c']) ==     ['a','b','c','d']\nassert     pancake_sort(['d','c','a','b']) ==     ['a','b','c','d']\nassert     pancake_sort(['c','b','a']) ==     ['a','b','c']\nassert     pancake_sort(['a']) ==     ['a']\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [5, 3, 2, 4, 6, 1] == pancake_sort([5, 3, 2, 4, 6, 1])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 5, 4, 3, 2, 1])\nassert     [4, 5, 1, 2, 3, 6] == pancake_sort([6, 3, 2, 5, 4, 1])\nassert     [6, 5, 1, 3, 2, 4] == pancake_sort([4, 3, 2, 1, 5, 6])\nassert     [1, 3, 5, 2, 4, 6] == pancake_sort([6, 4, 3, 2, 1, 5])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 2, 3, 4, 5]     == pancake_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5]     == pancake_sort([5, 1, 4, 3, 2])\nassert     [1, 2, 3, 4, 5]     == pancake_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5]     == pancake_sort([5, 1, 4, 3, 2])\nassert     [1, 2, 3, 4, 5]     == pancake_sort([5, 4, 3, 2, 1])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pancake_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([3, 2, 1]) == [1, 2, 3]\nassert     pancake_sort([1, 2, 3]) == [1, 2, 3]\nassert     pancake_sort([]) == []\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pancake_sort([5, 3, 1, 2, 4]) == [5, 1, 3, 2, 4]\nassert     pancake_sort([-5, 3, 1, 2, 4]) == [-5, 1, 3, 2, 4]\nassert     pancake_sort([-5, -3, -1, -2, -4]) == [-5, -1, -3, -2, -4]\nassert     pancake_sort([]) == []\nassert     pancake_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == pancake_sort([9, 7, 8, 6, 5, 4, 3, 2, 1, 0])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == pancake_sort([9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9, 7, 8, 6, 5, 4, 3, 2, 1, 0])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == pancake_sort([9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == pancake_sort([9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == pancake_sort([9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 9])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef overlap_with_overlap(list1,list2,list3):\n    '''\n    Write a function to count the items that overlap in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_samepair([1, 1, 3, 3, 5, 5, 7, 7, 7, 8, 8], [3, 3, 5, 5, 7, 7, 7, 8, 8, 8], [1, 1, 3, 3, 5, 5, 7, 7, 7, 8, 8]) == 2\nassert     count_samepair([1, 1, 3, 3, 5, 5, 7, 7, 7, 8, 8], [3, 3, 5, 5, 7, 7, 7, 8, 8, 8], [1, 1, 2, 3, 3, 4, 5, 6, 6, 7, 7]) == 1\nassert     count_samepair([1, 1, 3, 3, 5, 5, 7, 7, 7, 8, 8], [3, 3, 5, 5, 7, 7, 7, 8, 8, 8], [1, 2, 3, 4, 5, 6, 7, 7, 8, 8]) == 0\nassert     count_samepair([1, 1, 3, 3, 5, 5, 7, 7, 7, 8, 8], [3, 3, 5, 5, 7, 7, 7, 8, 8, 8], [1, 1, 1, 3, 3, 5, 5, 7, 7, 7, 8]) == 0\nassert     count_samepair([1, 1, 3, 3, 5, 5, 7, 7, 7, 8, 8], [3, 3, 5, 5, 7, 7, 7, 8, 8, 8], [1, 1, 1, 1, 3, 3, 5, 5, 7, 7, 8]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3\nassert     count_samepair([1,2,3],[1,2,4],[1,2,3]) == 0\nassert     count_samepair([1,2,3],[1,2,4],[1,2,5]) == 0\nassert     count_samepair([1,2,3],[1,2,4],[1,2,6]) == 1\n\ndef length_of_longest_samepair(list1,list2,list3):\n    '''\n    Write a function to find the length of the longest sublist of list1, list2, list3 that consists of identical items in the same position.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3\nassert     count_samepair([1,2,3], [1,2,2], [1,2,3]) == 2\nassert     count_samepair([1,2,3], [1,2,4], [1,2,3]) == 0\nassert     count_samepair([1,2,3], [1,2,2], [1,2,3]) == 2\nassert     count_samepair([1,2,3], [1,2,2], [1,2,2]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_samepair([1,2,3,2,3,4],[2,3,1,3,4,1],[2,3,4,3,2,1]) == 2\nassert     count_samepair([1,2,3,2,3,4],[2,3,1,3,4,5],[2,3,4,3,2,5]) == 1\nassert     count_samepair([1,2,3,2,3,4],[2,3,1,3,4,5],[5,3,2,3,1,2]) == 1\nassert     count_samepair([1,2,3,2,3,4],[2,3,1,3,4,5],[1,3,1,3,1,2]) == 1\nassert     count_samepair([1,2,3,2,3,4],[2,3,1,3,4,5],[1,1,1,1,1,1]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_samepair([1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]) == 2\nassert     count_samepair([1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,5]) == 1\nassert     count_samepair([1,2,3,4,5,6], [1,2,3,4,5,6], [2,3,4,5,6,6]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_samepair([1,2,3],[2,3,4],[1,2,4]) == 1\nassert     count_samepair([1,2,3],[2,3,4],[3,2,1]) == 0\nassert     count_samepair([1,2,3],[2,3,4],[4,3,2]) == 1\nassert     count_samepair([1,2,3],[2,3,4],[4,3,2]) == 1\nassert     count_samepair([1,2,3],[2,3,4],[1,2,3]) == 2\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_samepair([1,2,3,4],[1,2,3,4],[1,2,3,4]) == 4\nassert     count_samepair([1,2,3,4],[2,1,3,4],[1,2,3,4]) == 4\nassert     count_samepair([1,2,3,4],[2,1,4,3],[1,2,3,4]) == 4\nassert     count_samepair([1,2,3,4],[2,1,4,3],[1,3,2,4]) == 2\nassert     count_samepair([1,2,3,4],[2,1,4,3],[1,3,2,4]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]) == 5\nassert     count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,5,5]) == 3\nassert     count_samepair([1,2,3,4,5], [1,2,3,5,5], [1,2,3,5,5]) == 0"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_samepair(['a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f']) == 2\nassert     count_samepair(['a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c']) == 2\nassert     count_samepair(['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f']) == 4\nassert     count_samepair(['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f']) == 8\nassert     count_samepair(['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f'],['a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d','e','f','a','b','c','d',"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 1\nassert     find_lists(((1,2,3,4),)) == 1\nassert     find_lists(((1,2,3,4),(5,6,7,8,9))) == 2\nassert     find_lists(((1,2,3,4),(5,6,7,8,9),('a','b','c','d','e'))) == 3\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists(()) == 0\nassert     find_lists((1,)) == 1\nassert     find_lists(((1,),)) == 1\nassert     find_lists((1,2,3,4,5)) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 26\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 26\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z')) == 26\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z')) == 26\nassert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', 'y', 'z', 'x', "
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_lists((1,2,3,4,5)) == 3\nassert     find_lists((1,2,3,4,5,6,7)) == 3\nassert     find_lists((1,2,3,4,5,6,7,8)) == 3\nassert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 1\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12)) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_lists((1,2,3,4,5,(1,2,3,4,5))) == 4\nassert     find_lists((1,2,3,4,5,1,2,3,4,5)) == 4\nassert     find_lists((1,2,3,4,5,1,2,3,4,5,1,2,3,4,5))) == 4\nassert     find_lists(tuple()) == 0\nassert     find_lists((1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5)) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_lists([[1], (2, 3, 4), [5, 6, 7], [8, 9]]) == 2\nassert find_lists([1,2,3,4]) == 0\nassert find_lists(3) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_lists(('a',)) == 1\nassert     find_lists(('a', 'b')) == 2\nassert     find_lists(('a', 'b', 'c')) == 3\nassert     find_lists(('a', 'b', 'c', 'd')) == 4\nassert     find_lists(('a', 'b', 'c', 'd', 'e')) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_lists(tuple(['a','b','c'])) == 1\nassert     find_lists(tuple(['a','b','c','d'])) == 1\nassert     find_lists(tuple(['a','b','c','d','e'])) == 1\nassert     find_lists(tuple(['a','b','c','d','e','f'])) == 1\nassert     find_lists(tuple(['a','b','c','d','e','f','g'])) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_lists((2,1,2,1,1,2,2,1)) == 3\nassert     find_lists((1,1,1,1,1,1,1,1,1,1,1,1,1)) == 1\nassert     find_lists(()) == 0\nassert     find_lists((2,)) == 0\nassert     find_lists((1,2,3,4,5,6)) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_Abs_Diff([1,3,4,5]) == 2, 'wrong'\nassert     max_Abs_Diff([1,1,1]) == 0, 'wrong'\nassert     max_Abs_Diff([0,1,2,3]) == 1, 'wrong'\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4]) == 2\nassert     max_Abs_Diff([1, 2, 3, 4, 5]) == 3\nassert     max_Abs_Diff([-1, -2, -3, -4]) == 1\nassert     max_Abs_Diff([]) == None\nassert     max_Abs_Diff([-1]) == None\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_Abs_Diff([1,2,3,4,5]) == 4\nassert     max_Abs_Diff([1,2,3,-4,5]) == 4\nassert     max_Abs_Diff([-1,2,3,4,5]) == 4\nassert     max_Abs_Diff([]) == 0\nassert     max_Abs_Diff([1]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nmax_Abs_Diff([-1,-2,-3,-4,-5]) == -1\nassert \nmax_Abs_Diff([1,2,3]) == 0\nassert \nmax_Abs_Diff([-1,2,3,5,6]) == 4\nassert \nmax_Abs_Diff([-1,-2,-3,-4,-5,-6]) == -1\nassert \nmax_Abs_Diff([5,4,3,2,1]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_Abs_Diff([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5, 'Wrong answer'\nassert     max_Abs_Diff([100, -3, 100, -1, -100, -3]) == 3, 'Wrong answer'\nassert     max_Abs_Diff([4, -2, 5, -3, 6, 7, -8, 9, -10, -11]) == 11, 'Wrong answer'\n\nprint \"all tests passed"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         max_Abs_Diff([-1, -2, 0, 5, 9]) == 5\nassert         max_Abs_Diff([0, 1, -10, 3, 5, -10]) == -10\nassert         max_Abs_Diff([-5, 2, -10, -100, -3, -2]) == -100\nassert         max_Abs_Diff([1, -2, 3, -4, 5, -6, -7]) == -7\nassert         max_Abs_Diff([-5, -2, -10, -100, -3, -2]) == -100\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_solution(2, 1, 3) == (1, 2)\nassert     find_solution(3, 1, 4) == (2, 3)\nassert     find_solution(4, 1, 7) == (3, 4)\nassert     find_solution(8, 1, 11) == (3, 9)\nassert     find_solution(8, 2, 22) == (4, 10)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_solution(3,5,7) == (0,1)\nassert     find_solution(3,3,3) == (0,0)\nassert     find_solution(4,2,5) == (1,3)\nassert     find_solution(5,4,4) == (0,1)\nassert     find_solution(8,6,7) == (1,2)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_solution(3, 5, 4) == (1, -1)\nassert     find_solution(10, 10, 12) == (3, -3)\nassert     find_solution(8, 2, 10) == (1, -3)\nassert     find_solution(6, 3, 9) == (2, -1)\nassert     find_solution(4, 3, 5) == (1, -1)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_solution(1, 0, 10) == (-1, 1)\nassert     find_solution(0, 1, 10) == (1, -1)\nassert     find_solution(1, 1, 10) == (1, -1)\nassert     find_solution(0, 0, 10) == (1, -1)\nassert     find_solution(0, 2, 4) == (1, -1)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nprint(find_solution(6, 7, 14)) # (5, 2)\nprint(find_solution(2, 7, 14)) # (2, 5)\nprint(find_solution(7, 14, 14)) # (0, 0)\nprint(find_solution(7, 14, 4)) # None\nprint(find_solution(14, 4, 14)) # (3, 1)\nprint(find_solution(14, 4, 2)) # (2, 3)\nprint(find_solution(7, 4, 8)) # (2, 3)\nprint(find_solution(7, 4, 6)) # None\nprint(find_solution(2, 7, 11)) # None\nprint(find_solution(2, 7, 12)) # None\nprint(find_solution(7, 14, 19)) # None\nprint(find_solution(7, 14, 30)) # None\nprint(find_solution(1, 7, 14)) # None\nprint(find_solution(1, 7, 15)) # None\nprint(find_solution(1, 7, 16)) # None\nprint(find_solution(1, 7, 17)) # None\nprint(find_solution(1, 7, 18)) # None\nprint(find_solution(1, 7, 19)) # None\nprint(find_solution(1, 7, 20)) # None\nprint(find_solution(1, 7, 21)) # None\nprint(find_solution(1, 7, 22)) # None\nprint(find_solution(1, 7, 23)) # None\nprint(find_solution(1, 7, 24)) # None\nprint(find_solution(1, 7, 25)) # None\nprint(find_solution(1, 7, 26)) # None\nprint(find_solution(1, 7, 27)) # None\nprint(find_solution(1, 7, 28)) # None\nprint(find_solution(1, 7, 29)) # None\nprint(find_solution(1, 7, 30)) # None\nprint(find_solution(1, 7, 31)) # None\nprint(find_solution(1, 7, 32)) # None\nprint(find_solution(1, 7, 33)) # None\nprint(find_solution(1, 7, 34)) # None\nprint(find_solution(1, 7, 35)) # None\nprint(find_solution(1, 7, 36)) # None\nprint(find_solution(1, 7, 37)) # None\nprint(find_solution(1, 7, 38)) # None\nprint(find_solution(1, 7, 39)) # None\nprint(find_solution(1, 7, 40)) # None\nprint(find_solution(1, 7, 41)) # None\nprint(find_solution(1, 7, 42)) # None\nprint(find_solution(1, 7, 43)) # None\nprint(find_solution(1, 7, 44)) # None\nprint(find_solution(1, 7, 45)) # None\nprint(find_solution(1, 7, 46)) # None\nprint(find_solution(1, 7, 47)) # None\nprint(find_solution(1, 7, 48)) # None\nprint(find_solution(1, 7, 49)) # None\nprint(find_solution(1, 7, 50)) # None\nprint(find_solution(1, 7, 51)) # None\nprint(find_solution(1, 7, 52)) # None\nprint(find_solution(1, 7, 53)) # None\nprint(find_solution(1, 7, 54)) # None\nprint(find_solution(1, 7, 55)) # None\nprint(find_solution(1, 7, 56)) # None\nprint(find_solution(1, 7, 57)) # None\nprint(find_solution(1, 7, 58)) # None\nprint(find_solution(1, 7, 59)) # None\nprint(find_solution(1, 7, 60)) # None\nprint(find_solution(1, 7, 61)) # None\nprint(find_solution(1, 7, 62)) # None\nprint(find_solution(1, 7, 63)) # None\nprint(find_solution(1, 7, 64)) # None\nprint(find_solution(1, 7, 65)) # None\nprint(find_solution(1, 7, 66)) # None\nprint(find_solution(1, 7, 67)) # None\nprint(find_solution(1, 7, 68)) # None\nprint(find_solution(1, 7, 69)) # None\nprint(find_solution(1, 7, 70)) # None\nprint(find_solution(1, 7, 71)) # None\nprint(find_solution(1, 7, 72)) # None\nprint(find_solution(1, 7, 73)) # None\nprint(find_solution(1, 7, 74)) # None\nprint(find_solution(1, 7, 75)) # None\nprint(find_solution(1, 7, 76)) # None\nprint(find_solution(1, 7, 77)) # None\nprint(find_solution(1, 7, 78)) # None\nprint(find_solution(1, 7, 79)) # None\nprint(find_solution(1, 7, 80)) # None\nprint(find_solution(1, 7, 81)) # None\nprint(find_solution(1, 7, 82)) # None\nprint(find_solution(1, 7, 83)) # None\nprint(find_solution(1, 7, 84)) # None\nprint(find_solution(1, 7, 85)) # None\nprint(find_solution(1, 7, 86)) # None\nprint(find_solution(1, 7, 87)) # None\nprint(find_solution(1, 7, 88)) # None\nprint(find_solution(1, 7, 89)) # None\nprint(find_solution(1, 7, 90)) # None\nprint(find_solution(1, 7, 91)) # None\nprint(find_solution(1, 7, 92)) # None\nprint(find_solution(1, 7, 93)) # None\nprint(find_solution(1, 7, 94)) # None\nprint(find_solution(1, 7, 95)) # None\nprint(find_solution(1, 7, 96)) # None\nprint(find_solution(1, 7, 97)) # None\nprint(find_solution(1, 7, 98)) # None\nprint(find_solution(1, 7, 99)) # None\nprint(find_solution(1, 7, 100)) # None\nprint(find_solution(1, 7, 101)) # None\nprint(find_solution(1, 7, 102)) # None\nprint(find_solution(1, 7, 103)) # None\nprint(find_solution(1, 7, 104)) # None\nprint(find_solution(1, 7, 105)) # None\nprint(find_solution(1, 7, 106)) # None\nprint(find_solution(1, 7, 107)) # None\nprint(find_solution(1, 7, 108)) # None\nprint(find_solution(1, 7, 109)) # None\nprint(find_solution(1, 7, 110)) # None\nprint(find_solution(1, 7, 111)) # None\nprint(find_solution(1, 7, 112)) # None\nprint(find_solution(1, 7, 113)) # None\nprint(find_solution(1, 7, 114)) # None\nprint(find_solution(1, 7, 115)) # None\nprint(find_solution(1, 7, 116)) # None\nprint(find_solution(1, 7, 117)) # None\nprint(find_solution(1, 7, 118)) # None\nprint(find_solution(1, 7, 119)) # None\nprint(find_solution(1, 7, 120)) # None\nprint(find_solution(1, 7, 121)) # None\nprint(find_solution(1, 7, 122)) # None\nprint(find_solution(1, 7, 123)) # None\nprint(fin"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_solution(2,5,10) == (1,4), \"incorrect\"\nassert     find_solution(2,5,15) == None, \"incorrect\"\nassert     find_solution(0,1,5) == None, \"incorrect\"\nassert     find_solution(1,1,10) == None, \"incorrect\"\nassert     find_solution(-4,1,2) == None, \"incorrect\"\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_solution(3, -2, 4) == (2, 1)\nassert     find_solution(-5, -2, -4) == (1, 2)\nassert     find_solution(-10, -2, 10) == (1, 3)\nassert     find_solution(-9, -3, -5) == (2, -2)\nassert     find_solution(-3, -5, -8) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_solution(5, 5, 10) == (3, 3)\nassert     find_solution(5, 2, 12) == (2, 2)\nassert     find_solution(1, -2, 4) == (2, -2)\nassert     find_solution(1, -2, 2) == (1, -1)\nassert     find_solution(1, -2, 0) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_solution(2, 7, 21) == (3, 2)\nassert     find_solution(1, 2, 3) == (1, 1)\nassert     find_solution(1, 2, 4) == None\nassert     find_solution(1, 2, 5) == None\n\ndef find_equation(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_solution(1, 6, 10) == (None, None)\nassert     find_solution(1, 6, 14) == (2, 3)\nassert     find_solution(1, 6, 4) == (1, 3)\nassert     find_solution(1, 6, 6) == (1, 1)\nassert     find_solution(1, 6, 22) == (1, 5)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nremove_elements(['apple', 'banana', 'pear','mango'], ['mango', 'apple', 'banana', 'pear', 'peach']) == ['pear', 'peach']\nassert \nremove_elements(['apple', 'banana', 'pear','mango'], ['mango', 'pear', 'peach']) == ['banana', 'apple']\nassert \nremove_elements(['apple', 'banana', 'pear','mango'], ['pear', 'peach']) == ['apple', 'banana']"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4], [2,3]) == [1, 4]\nassert     remove_elements([1,2,3,4], [1,2,3]) == []\nassert     remove_elements([], [1,2,3,4]) == []\nassert     remove_elements([1,2,3,4], []) == [1, 2, 3, 4]"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_elements([1,2,3,4], [2,3]) == [1,4]\nassert     remove_elements([1,2,3,4,5,6], [2,3,4]) == [1,5,6]\nassert     remove_elements([1,2,3,4,5,6], [7]) == [1,2,3,4,5,6]\nassert     remove_elements([1,2,3,4,5,6], [2,3,4,5,6]) == [1,1,1,1,1,1]\nassert     remove_elements([1,2,3,4,5,6], [2,3,4,5,6,7]) == [1,1,1,1,1,1]"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_elements([1,2,3,4], [1,2]) == [3, 4]\nassert     remove_elements([1,2,3,4,5], [2,4]) == [1, 3, 5]\nassert     remove_elements([1,2,3,4,5], [3,5]) == [1,2,4]\nassert     remove_elements([1,2,3,4,5], [4,5]) == [1,2,3]\n\ndef find_duplicates(list1):\n    '''\n    Write a function to find all the duplicate numbers of an input array. Return the duplicates in an array.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,3,4], [1,2]) == [3,4]\nassert     remove_elements([1,2,3,4], [2,3]) == [1,4]\nassert     remove_elements([1,2,3,4], []) == [1,2,3,4]\nassert     remove_elements([], []) == []\nassert     remove_elements([1,2,3], [1,2]) == [3]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_elements([1, 2, 3, 4], [1, 2, 4]) == [3]\nassert     remove_elements([1, 2, 3, 4], [1, 2, 4, 5]) == [3]\nassert     remove_elements([1, 2, 3, 4], [2, 4]) == [1, 3]\nassert     remove_elements([1, 2, 3, 4], [2, 4, 5]) == [1, 3]\nassert     remove_elements([1, 2, 3, 4], [2, 4, 5, 6]) == [1, 3]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_elements([1, 2, 3, 4], [1, 2]) == [3, 4]\nassert     remove_elements([1, 2, 3, 4], [2, 3]) == [1, 4]\nassert     remove_elements([1, 2, 3, 4], [3, 4, 5]) == [1, 2]\nassert     remove_elements([1, 2, 3, 4], []) == [1, 2, 3, 4]\nassert     remove_elements([1, 2, 3, 4], [1]) == [2, 3, 4]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_elements([], []) == []\nassert     remove_elements([1,2], [1]) == [2]\nassert     remove_elements([1,2,3], [2,3]) == [1]\nassert     remove_elements([2,3,4,5], [3,4,5]) == [2]\nassert     remove_elements([1,2,3,4,5,6,7,8,9], [5,6,7,8,9]) == [1,2,3,4,8]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], ['b', 'd', 'e']) == ['a', 'c', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'c', 'e']) == ['b', 'd', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'c', 'e', 'g']) == ['b', 'd', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], ['b', 'c', 'd', 'e', 'f']) == ['a']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], ['b', 'c', 'd', 'e', 'f', 'g']) == ['a']\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_series(10) == sum_series(10, 2, 1)\nassert     sum_series(5) == sum_series(5, 2, 1)\nassert     sum_series(8) == sum_series(8, 2, 1)\nassert     sum_series(7) == sum_series(7, 2, 1)\nassert     sum_series(6) == sum_series(6, 2, 1)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_series(5) == sum([0,1,2,3,4,5])\nassert     sum_series(1) == sum([0])\nassert     sum_series(6) == sum([0,1,2,3,4,5])\nassert     sum_series(10) == sum([0,1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_series(5) == 4\nassert     sum_series(0) == 0\nassert     sum_series(5,1,1) == 5\nassert     sum_series(1,1,1,1,1,1,1,1,1) == 5\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_series(3) == 1\nassert     sum_series(5) == 3\nassert     sum_series(9) == 3\nassert     sum_series(7) == 2\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_series(5) == 12\nassert     sum_series(7) == 28\nassert     sum_series(5, 0) == 15\nassert     sum_series(8, 5, 5) == 15\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_series(5) == 12\nassert     sum_series(9) == 45\nassert     sum_series(11) == 55\nassert     sum_series(0) == 0\nassert     sum_series(-1) == None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_series(3) == 3\nassert     sum_series(4) == 5\nassert     sum_series(5) == 8\nassert     sum_series(6) == 12\nassert     sum_series(7) == 19\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 3\nassert     sum_series(3) == 3\nassert     sum_series(4) == 4\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_series(5) == 5\nassert     sum_series(10) == 17\nassert     sum_series(5, 2, 1) == 4\nassert     sum_series(5, 2, 1, 1) == 7\nassert     sum_series(5, 0, 2, 1) == 1\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     area_polygon(3, 1) == 3.0\nassert     area_polygon(3, 2) == 12.5\nassert     area_polygon(5, 3) == 60\nassert     area_polygon(7, 2) == 70.5\nassert     area_polygon(9, 3) == 126\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     area_polygon(4, 2) == 4, 'Case 1'\nassert     area_polygon(3, 4) == 3, 'Case 2'\nassert     area_polygon(5, 3) == 5, 'Case 3'\nassert     area_polygon(6, 4) == 6, 'Case 4'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     area_polygon(4, 4) == 48\nassert     area_polygon(6, 3) == 36\nassert     area_polygon(10, 5) == 50\nassert     area_polygon(15, 10) == 150\n\ndef area_triangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     area_polygon(6, 10) == 378.0\nassert     area_polygon(5, 10) == 265.0\nassert     area_polygon(5, 9) == 342.0\nassert     area_polygon(5, 8) == 345.0\nassert     area_polygon(5, 7) == 375.0\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     area_polygon(4, 4) == 4 * (3**0.5)\nassert area_polygon(3, 6) == (3**2 * (3 + 2**0.5)) / 4\nassert area_polygon(5, 6) == (5 * (5 + 2**0.5)) / 4\nassert area_polygon(5, 4) == (5 * (5 - 2**0.5)) / 4\nassert area_polygon(5, 4) == area_polygon(5, 6)\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     area_polygon(2, 2) == 4\nassert     area_polygon(4, 2) == 6\nassert     area_polygon(6, 2) == 10\nassert     area_polygon(8, 2) == 12\nassert     area_polygon(12, 2) == 24\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     area_polygon(10, 5) == 12.5\nassert     area_polygon(7, 4) == 28.0\nassert     area_polygon(5, 7) == 63.0\n\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     area_polygon(4, 3) == 4 * 3 * (1/2)**2, \"incorrect\"\nassert     area_polygon(4, 5) == 4 * 5 * (1/2)**2, \"incorrect\"\nassert     area_polygon(4, 7) == 4 * 7 * (1/2)**2, \"incorrect\"\nassert     area_polygon(4, 11) == 4 * 11 * (1/2)**2, \"incorrect\"\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     area_polygon(3,4) == 12.5\nassert     area_polygon(6,7) == 72\nassert     area_polygon(7,8) == 56\nassert     area_polygon(7,9) == 42\nassert     area_polygon(10,8) == 196\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     area_polygon(10, 3) == 50.0\nassert area_polygon(3, 3) == 9.0\nassert area_polygon(2, 10) == 5.0\n\ndef area_polygon(l, n):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert type(l) == int, 'l must be an integer'\n    "
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     div_sum(10) == False\nassert     div_sum(12) == True\nassert     div_sum(25) == True\nassert     div_sum(13) == False\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers is equal.\n    '''\n    # Your Code Here\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     div_sum(12) == True\nassert     div_sum(20) == False\nassert     div_sum(99) == True\nassert     div_sum(99) == True\nassert     div_sum(999) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     div_sum(16)\nassert     div_sum(6)\nassert     div_sum(6) == div_sum(12)\nassert     div_sum(6) == div_sum(9)\nassert     div_sum(6)!= div_sum(10)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     div_sum(1) == False\nassert     div_sum(2) == True\nassert     div_sum(3) == False\nassert     div_sum(4) == True\nassert     div_sum(6) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef xor_sum(n):\n    '''\n    Write a function to determine if the sum of the digits of a number are all the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     div_sum(6) == True\nassert     div_sum(8) == False\nassert     div_sum(12) == True\nassert     div_sum(16) == False\nassert     div_sum(20) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     div_sum(7) == true\nassert     div_sum(15) == true\nassert     div_sum(4) == true\nassert     div_sum(10) == false\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     div_sum(6)         ==     True\nassert     div_sum(12)     ==     True\nassert     div_sum(10)     ==     False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     div_sum(100) == (sum(i for i in range(2,100) if i*2 > 100) - 100)\nassert     div_sum(100) == (sum(i for i in range(1,100) if 100 % i == 0) - 100)\nassert     div_sum(100) == (sum(i for i in range(1,100) if i % 2 == 0) - 100)\nassert     div_sum(100) == (sum(i for i in range(2,100) if i % 3 == 0) - 100)\nassert     div_sum(100) == (sum(i for i in range(2,100) if i % 5 == 0) - 100)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     div_sum(1) == False, '1 is the only divisor of 1'\nassert     div_sum(2) == False, '2 is the only divisor of 2'\nassert     div_sum(3) == False, '3 is the only divisor of 3'\nassert     div_sum(4) == False, '4 is the only divisor of 4'\nassert     div_sum(5) == True, '5 is the only divisor of 5'\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_char_position('aa') == 1\nassert     count_char_position('abcdefg') == 1\nassert     count_char_position('abcdefgh') == 2\nassert     count_char_position('abcdefghi') == 3\nassert     count_char_position('abcdefghij') == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_char_position(\"A\") == 1, \"Error: count_char_position('A') should return 1\"\nassert     count_char_position(\"a\") == 1, \"Error: count_char_position('a') should return 1\"\nassert     count_char_position(\"B\") == 1, \"Error: count_char_position('B') should return 1\"\nassert     count_char_position(\"b\") == 1, \"Error: count_char_position('b') should return 1\"\nassert     count_char_position(\"E\") == 1, \"Error: count_char_position('E') should return 1\"\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_char_position(\"a\") == 1\nassert     count_char_position(\"aaaa\") == 0\nassert     count_char_position(\"bbaa\") == 1\nassert     count_char_position(\"abab\") == 2\nassert     count_char_position(\"abbb\") == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_char_position('abcdefghijklmnopqrstuvwxyz') == 26\nassert     count_char_position('oN') == 1\nassert     count_char_position('abcdefghijklmnopqrstuvwxyzab') == 26\nassert     count_char_position('abcdefghijklmnopqrstuvwxyzAB') == 26\nassert     count_char_position('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_char_position('dog') == 1, 'Unexpected count_char_position return value'\nassert     count_char_position('aaabbc') == 3, 'Unexpected count_char_position return value'\nassert     count_char_position('aaaaaaaaaa') == 26, 'Unexpected count_char_position return value'\nassert     count_char_position('aabbccddddefghi') == 7, 'Unexpected count_char_position return value'\nassert     count_char_position('The quick brown fox jumps over the lazy dog') == 17, 'Unexpected count_char_position return value'\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef create_string(str1):\n    '''\n    Write a function that takes a string of characters, returns a string of the same characters, but in all lower case.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_char_position('abcde') == 5\nassert     count_char_position('abcdefg') == 5\nassert     count_char_position('asdfghjkl') == 5\nassert     count_char_position('aabbccddeeffgghh') == 7\nassert     count_char_position('!@#$%^&*()_+-{}|[]<>?,./;`~') == 15\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_char_position('I') == 1\nassert     count_char_position('ca') == 2\nassert     count_char_position('aa') == 2\nassert     count_char_position('abe') == 2\nassert     count_char_position('abcd') == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_even_pair([2, 4, 3, 6, 8, 7, 4, 4]) == 4\nassert     find_even_pair([2, 4, 3, 6, 8, 7, 4, 1]) == 1\nassert     find_even_pair([1, 1, 2]) == 0\nassert     find_even_pair([2, 4, 3, 6, 8, 7, 4, 1, 1, 3]) == 5\nassert     find_even_pair([2, 4, 3, 6, 8, 7, 4, 1]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 2\nassert     find_even_pair([1,1,1,1]) == 3\nassert     find_even_pair([1,1,1,1,1]) == 4\nassert     find_even_pair([1,2,3,4,5,6]) == 3\nassert     find_even_pair([1,2,3,4,5,6,7,8]) == 4\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_even_pair([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\nassert     find_even_pair([3, 4, 6, 7, 2, 10]) == 1\nassert     find_even_pair([3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\nassert     find_even_pair([3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\nassert     find_even_pair([7, 8, 9, 10, 11, 3, 4, 5, 6]) == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_even_pair([2,3,4,5,6,7,8]) == 3\nassert     find_even_pair([1,3,5,7]) == 0\nassert     find_even_pair([4,7,8]) == 1\nassert     find_even_pair([2,4,6,8]) == 1\nassert     find_even_pair([2,3,4,5,6,7,8]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_even_pair(A1) == find_even_pair(A2) == find_even_pair(A3)\nassert     find_even_pair(A4) == find_even_pair(A5)\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1, \"1st test case failed\"\nassert     find_even_pair([1, 1, 1, 1]) == 4, \"2nd test case failed\"\nassert     find_even_pair([1, 3, 5, 7, 9]) == 1, \"3rd test case failed\"\nassert     find_even_pair([1, 4, 7, 3, 5]) == 3, \"4th test case failed\"\nassert     find_even_pair([1, 4, 7, 4, 3, 5]) == 4, \"5th test case failed\"\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 3\nassert     find_even_pair([1,2,3,4,5,6]) == 4\nassert     find_even_pair([0,1,2,3,4]) == 1\nassert     find_even_pair([0,1,2,3,4,5,6]) == 0\nassert     find_even_pair([0,2,4,6]) == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_even_pair([5,4,3,2,1]) == 1\nassert     find_even_pair([5,4,3,2,0]) == 2\nassert     find_even_pair([0]) == 0\nassert     find_even_pair([0,0]) == 0\nassert     find_even_pair([0,1]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_even_pair( [7, 3, 9, 2, 5] )     ==     3\nassert     find_even_pair( [7, 9, 2, 5] )     ==     3\nassert     find_even_pair( [1, 2, 3, 4, 5] )     ==     0\nassert     find_even_pair( [1, 1, 1, 1, 1] )     ==     5\nassert     find_even_pair( [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] )     ==     10\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_power_of_2(128) == 2 ** (int(math.log(128,2))+1)\nassert     next_power_of_2(512) == 2 ** (int(math.log(512,2))+1)\nassert     next_power_of_2(1024) == 2 ** (int(math.log(1024,2))+1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_power_of_2(2) == 4\nassert     next_power_of_2(3) == 8\nassert     next_power_of_2(4) == 16\nassert     next_power_of_2(5) == 32\nassert     next_power_of_2(6) == 64\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 2\nassert     next_power_of_2(2) == 4\nassert     next_power_of_2(3) == 8\nassert     next_power_of_2(4) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(4) == 2\nassert     next_power_of_2(5) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_power_of_2(4)    ==    8\nassert     next_power_of_2(7)    ==    16\nassert     next_power_of_2(9)    ==    16\nassert     next_power_of_2(16)    ==    32\nassert     next_power_of_2(18)    ==    64\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (next_power_of_2(10) == 2)\nassert     (next_power_of_2(30) == 8)\nassert     (next_power_of_2(25) == 4)\nassert     (next_power_of_2(1) == 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(5) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 2\nassert     next_power_of_2(5) == 8\nassert     next_power_of_2(10) == 16\nassert     next_power_of_2(27) == 64\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_power_of_2(8) == 16, \"should be 16\"\nassert     next_power_of_2(9) == 64, \"should be 64\"\nassert     next_power_of_2(12) == 128, \"should be 128\"\nassert     next_power_of_2(16) == 256, \"should be 256\"\nassert     next_power_of_2(1) == 1, \"should be 1\"\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(4) == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     frequency([1,1,2,2,3],1) == 2\nassert     frequency([1,2,3,4],5) == 0\nassert     frequency([1,2,3,4],2) == 1\nassert     frequency([1,1,2,3,2,1,3,2,1],2) == 2\nassert     frequency([1,1,2,3,2,1,3,2,1],3) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (frequency([\"cat\",\"bat\",\"cat\",\"cat\",\"bat\"], \"cat\") == 4)\nassert     (frequency([1,2,3,4,5,6,6,6,6,7,7,7], 7) == 1)\nassert     (frequency([\"cat\",\"bat\",\"cat\",\"cat\",\"bat\"], \"dog\") == 0)\nassert     (frequency([1,2,3,4,5,6,6,6,6,7,7,7], 1) == 0)"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     frequency( [1, 1, 2, 1, 1, 2, 1, 2, 2, 2], 1 ) == 4\nassert     frequency([1, 1, 2, 1, 1, 2, 1, 2, 2, 2], 2) == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     frequency([1,2,3,4,4,4,4],4) == 3\nassert     frequency([1,1,1,1,1],1) == 5\nassert     frequency([1,1,1,1],1) == 4\nassert     frequency([1,1,1,1],2) == 0\nassert     frequency([],2) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     frequency( [0, 1, 2, 3, 4, 0, 1, 2, 3, 4], 0) == 2\nassert     frequency( [0, 1, 2, 3, 4, 0, 1, 2, 3, 4], 5) == 0\nassert     frequency([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 0\nassert     frequency([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 9\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     frequency([1, 2, 3, 1], 1) == 1\nassert     frequency([1, 2, 3, 1], 2) == 1\nassert     frequency([1, 2, 3, 1], 3) == 2\nassert     frequency([1, 2, 3, 1], 4) == 0\nassert     frequency([1, 2, 3, 1, 2, 3, 1], 3) == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     frequency(1,[])==0\nassert     frequency(1,[1])==1\nassert     frequency(1,[2,2])==2\nassert     frequency(1,[2,2,2])==2\nassert     frequency(1,[1,2,2,2,2,2])==6\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     frequency([\"a\", \"a\", \"a\"], \"a\") == 3\nassert     frequency([\"a\", \"b\", \"b\", \"a\"], \"a\") == 2\nassert     frequency([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 1, 4) == 9\nassert     sum_range_list([-1, -2, -3, -4], -2, -4) == -6\nassert     sum_range_list([1, 3, 4, 6, 4, 1], 1, 5) == 9\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 3) == 10\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 3) == 10\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 4) == 15\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 4) == 15\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 5) == 22\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 3) == 10\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 1) == 6\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15\nassert     sum_range_list([10, 20, 30, 40, 50], 0, 4) == 60\nassert     sum_range_list([10, 20, 30, 40, 50], -2, -1) == 30\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_range_list([10, 12, 13, 15, 19], 2, 5) == 30\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4, 8) == 20\nassert     sum_range_list([5, 10, 15, 20, 25], 0, 2) == 25\nassert     sum_range_list([5, 10, 15, 20, 25], 0, 4) == 30\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_range_list([1,2,3,4,5,6,7,8,9,10], 1,10) == 45\nassert     sum_range_list([10,20,30,40,50,60,70,80,90,100], 1,10) == 190\nassert     sum_range_list([10,20,30,40,50,60,70,80,90,100], 0,10) == 100\nassert     sum_range_list([10,20,30,40,50,60,70,80,90,100], -10,-1) == -180\nassert     sum_range_list([10,20,30,40,50,60,70,80,90,100], 0,100) == 100500\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_range_list([10, 20, 30, 40], 1, 2) == 40\nassert     sum_range_list([10, 20, 30, 40], 0, 1) == 30\nassert     sum_range_list([10, 20, 30, 40], 0, 0) == 0\nassert     sum_range_list([10, 20, 30, 40], 1, 4) == 45\n\n\ndef binomial_coeff(n, k):                                                                                                                                                                                                    \n    '''\n    Write a function to calculate binomial coefficient\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         (sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 7) == 45)\nassert         (sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 7) == 45)\nassert         (sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 5) == 45)\nassert         (sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 9, 9) == 45)\nassert         (sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 8, 1) == 45)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 2) == 7\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 0) == 5\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 2) == 12\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 19\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 5) == 22\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_range_list( [1,2,3,4,5,6,7,8], 4, 7) == 45, \"Test case 1 failed\"\nassert     sum_range_list( [1,2,3,4,5,6,7,8], 4, 8) == 43, \"Test case 2 failed\"\nassert     sum_range_list( [1,2,3,4,5,6,7,8], 4, 9) == 26, \"Test case 3 failed\"\nassert     sum_range_list( [1,2,3,4,5,6,7,8], 1, 8) == 19, \"Test case 4 failed\"\nassert     sum_range_list( [1,2,3,4,5,6,7,8], 7, 8) == 22, \"Test case 5 failed\"\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_range_list(range(0,10,2), 1, 3) == 10\nassert     sum_range_list(range(0,10,2), 2, 2) == 4\nassert     sum_range_list(range(0,10,2), 4, 4) == 0\nassert     sum_range_list(range(0,10,2), 10, 10) == 0\nassert     sum_range_list(range(0,10,2), 1, 11) == 12\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(12) == 60, \"Wrong output\"\nassert     perimeter_pentagon(7) == 25, \"Wrong output\"\nassert     perimeter_pentagon(18) == 60, \"Wrong output\"\n\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(1) == 5\nassert     perimeter_pentagon(2) == 12\nassert     perimeter_pentagon(3) == 22\nassert     perimeter_pentagon(4) == 30\nassert     perimeter_pentagon(5) == 40\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(1) == 10\nassert     perimeter_pentagon(2) == 25\nassert     perimeter_pentagon(3) == 42\nassert     perimeter_pentagon(4) == 75\nassert     perimeter_pentagon(5) == 120\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     perimeter_pentagon(6)     == 28\nassert     perimeter_pentagon(8)     == 56\nassert     perimeter_pentagon(10)    == 60\nassert     perimeter_pentagon(12)    == 72\nassert     perimeter_pentagon(14)    == 84\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(3)     ==     6.28802714162818\nassert     perimeter_pentagon(5)     ==     13.16807047082849\nassert     perimeter_pentagon(6)     ==     25.41680704708282\nassert     perimeter_pentagon(7)     ==     35.81680704708285\nassert     perimeter_pentagon(8)     ==     46.95880704708285\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     perimeter_pentagon(4) == 22.87083333333333\nassert     perimeter_pentagon(5) == 25\nassert     perimeter_pentagon(6) == 28.4336\nassert     perimeter_pentagon(7) == 30.6096\nassert     perimeter_pentagon(8) == 33.4770666666666\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(3) == 25, \"Failed on input 3\"\nassert     perimeter_pentagon(4) == 30, \"Failed on input 4\"\nassert     perimeter_pentagon(5) == 35, \"Failed on input 5\"\nassert     perimeter_pentagon(6) == 40, \"Failed on input 6\"\n\ndef perimeter_regular_pentagon(r):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides,\n    where side length is the square root of 5 * r.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     perimeter_pentagon(3) == 6.28318530718\nassert     perimeter_pentagon(4) == 6.28318530718\nassert     perimeter_pentagon(5) == 6.28318530718\nassert     perimeter_pentagon(6) == 6.28318530718\n\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(1) == 5\nassert     perimeter_pentagon(2) == 15\nassert     perimeter_pentagon(3) == 22\nassert     perimeter_pentagon(4) == 30\nassert     perimeter_pentagon(5) == 40\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_occurance('abcdstdghijkl') == 1\nassert     count_occurance('std') == 2\nassert     count_occurance('std') == 2\nassert     count_occurance('a') == 0\nassert     count_occurance('abc') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_occurance('hello my name is std') == 1\nassert     count_occurance('hello my name is std, please change my name to george') == 0\nassert     count_occurance('hello my name is std, please change my name to george, also you can say hello my name is george') == 2\nassert     count_occurance('hello my name is std, please change my name to george, also you can say hello my name is george, please change my name to peter') == 3\nassert     count_occurance('hello my name is std, please change my name to george, also you can say hello my name is george, please change my name to peter') == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_occurance('hello std') == 2\nassert     count_occurance('hello') == 0\nassert     count_occurance('hello std') == 2\nassert     count_occurance('hello std') == 2\nassert     count_occurance('hello std std') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_occurance('count the number of occurence of the string') == 4\nassert     count_occurance('aaabbbaaababaa') == 3\nassert     count_occurance('std') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_occurance('abc') == 0\nassert     count_occurance('abcstd') == 1\nassert     count_occurance('abcstdx') == 1\nassert     count_occurance('abcstdxxx') == 2\nassert     count_occurance('abcstddd') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_occurance('abcd') == 1\nassert     count_occurance('abcddcdd') == 2\nassert     count_occurance('a') == 1\nassert     count_occurance('aaaa') == 4\nassert     count_occurance('abcabc') == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_occurance('aaabdcccbaa') == 3\nassert     count_occurance('aaabdcccbbbaa') == 1\nassert     count_occurance('aaabdcccbaaa') == 1\nassert     count_occurance('aaaa') == 0\nassert     count_occurance('b') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_occurance('This is a string') == 1\nassert     count_occurance('This is another string') == 0\nassert     count_occurance('This is a string that has some common words') == 4\n\n\ndef find_longest_string(s):\n    '''\n    Write a function to find the longest string in the given string list.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_occurance('std') == 2, 'TEST failed'\nassert     count_occurance('google') == 2, 'TEST failed'\nassert     count_occurance('google') == 1, 'TEST failed'\nassert     count_occurance('google') == 1, 'TEST failed'\nassert     count_occurance('google') == 1, 'TEST failed'\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_type((True, \"Hello\", 1, True, 2.0)) == True\nassert     check_type((True, \"Hello\", 1, False, 2.0)) == False\nassert     check_type((True, \"Hello\", 1, True, \"2.0\")) == False\nassert     check_type((True, \"Hello\", 1, True, 2)) == False\nassert     check_type((True, \"Hello\", 1, True, 2.0)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_type(((1,2,3),(1,2,3),(1,2,3))) == True\nassert check_type(((1,2,3),(1,2,'a'),(1,2,3))) == False\n\ndef filter_type(test_tuple):\n    '''\n    Write a function to filter tuple elements based on data type.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_type((1, 2, 3)) == True\nassert check_type(('a', 'b', 'c')) == True\nassert check_type(('a', 2, 'c')) == False\nassert check_type(('a', 'b', 3)) == False\nassert check_type(('a', 'b', 'c', 'd')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_type((1,2,3)) == True, \"test case 1\"\nassert     check_type((1,2.3,3)) == False, \"test case 2\"\nassert     check_type((1,2,\"3\")) == False, \"test case 3\"\nassert     check_type((1,2,3.4)) == False, \"test case 4\"\nassert     check_type((1,2,3,4)) == True, \"test case 5\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_type( (1,2,3)    ) == True\nassert     check_type( (1,2,'3')    ) == False\nassert     check_type( (1,'2','3')    ) == False\nassert     check_type( (1,2,'3',4,5)    ) == True\nassert     check_type( (1,'2','3',4.5)    ) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_type(('red', 'green', 'blue'))\nassert     check_type(('red', (1,2,3), 'blue'))\nassert     check_type(('red', (1,2,3), (1,2,3)))\nassert     check_type(('red', (1,2,3), (1,2,'red')))\nassert     check_type(('red', (1,2,'red'), (1,2,'red')))\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_type((1, 2, 3)) is True\nassert     check_type((2, 3, 4)) is False\nassert     check_type((1, \"2\", 3)) is False\nassert     check_type((1, 2, 3.4)) is True\nassert     check_type((1, 2.1, 3.3)) is True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_type((2, 4, \"4\", 6)) == True\nassert     check_type((2, 4, \"4\", 6.0)) == True\nassert     check_type((2, 4, \"4\", 6.1)) == False\nassert     check_type((2, 4, \"4\", 6.2)) == False\nassert     check_type((2, 4, \"4\", 6.3)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_type(('hello', 'world')) == True, 'Failed: check_type'\nassert     check_type(('hello', 3)) == False, 'Failed: check_type'\nassert     check_type(('hello', True)) == False, 'Failed: check_type'\nassert     check_type(('hello', {'a':1})) == False, 'Failed: check_type'\nassert     check_type(('hello', set('world'))) == True, 'Failed: check_type'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\narr = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4]\nn = len(arr)\nx = 4\nassert is_majority(arr, n, x) == True\n\narr = [1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4]\nn = len(arr)\nx = 3\nassert is_majority(arr, n, x) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_majority([1, 2, 2, 3, 3], 5, 2) == True\nassert     is_majority([1, 2, 2, 3, 3], 5, 3) == False\nassert     is_majority([1, 1, 1, 1], 4, 1) == True\nassert     is_majority([1, 1, 1, 1], 4, 2) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_majority([1,1,1,2,2,3,3], 6, 1) == True\nassert     is_majority([1,1,1,2,2,3,3], 6, 2) == False\nassert     is_majority([1,1,1,2,2,3,3], 6, 3) == True\nassert     is_majority([1,1,1,2,2,3,3], 6, 4) == False\nassert     is_majority([1,1,1,2,2,3,3], 6, 5) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_majority([1, 2, 3, 4, 5, 5], 5, 5) == True\nassert     is_majority([1, 2, 3, 4, 5, 5], 5, 1) == False\nassert     is_majority([1, 2, 3, 4, 5, 5], 5, 2) == False\nassert     is_majority([1, 2, 3, 4, 5, 5], 5, 3) == False\nassert     is_majority([1, 2, 3, 4, 5, 5], 5, 4) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_majority([1, 2, 2, 3, 4, 4, 4], 7, 4) == True\nassert     is_majority([1, 2, 2, 3, 4, 4, 4], 7, 5) == False\nassert     is_majority([1, 2, 2, 3, 4, 4, 4], 7, 1) == True\nassert     is_majority([1, 2, 2, 3, 4, 4, 4], 7, 0) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5, 5) == True\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5, 3) == True\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5, 1) == False\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5, 6) == False\nassert     is_majority([], 5, 5) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_majority([2, 1, 2, 2, 1, 2, 2, 2, 1, 2], 6, 2) == True\nassert     is_majority([2, 1, 2, 2, 1, 2, 2, 2, 1, 2], 6, 1) == False\nassert     is_majority([2, 1, 2, 2, 1, 2, 2, 2, 1, 2], 6, 3) == False\nassert     is_majority([2, 1, 2, 2, 1, 2, 2, 2, 1, 2], 6, 5) == False\nassert     is_majority([2, 1, 2, 2, 1, 2, 2, 2, 1, 2], 6, 4) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_majority([1, 1, 1, 2, 2, 2], 3, 2) == True\nassert     is_majority([1, 1, 1, 2, 2, 2], 3, 3) == True\nassert     is_majority([1, 1, 1, 2, 2, 2], 3, 4) == False\nassert     is_majority([1, 1, 1, 2, 2, 2], 3, 5) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef majority_element(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and returns the majority element in the given sorted array. If there is no majority element, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_majority([1, 2, 3, 4, 5, 5, 5, 6, 7], 5, 5) == True\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 6, 7], 5, 2) == False\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 6, 7], 5, 3) == False\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 6, 7], 5, 6) == False\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 6, 7], 5, 7) == False\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(10) == 2\nassert     count_Set_Bits(12) == 2\nassert     count_Set_Bits(13) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (count_Set_Bits(10) == 2)\nassert     (count_Set_Bits(32) == 1)\nassert     (count_Set_Bits(37) == 2)\nassert     (count_Set_Bits(0) == 0)\nassert     (count_Set_Bits(1) == 1)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (count_Set_Bits(14) == 2)\nassert     (count_Set_Bits(17) == 3)\nassert     (count_Set_Bits(27) == 4)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(10) == 4\nassert     count_Set_Bits(13) == 6\nassert     count_Set_Bits(21) == 3\nassert     count_Set_Bits(42) == 10\nassert     count_Set_Bits(63) == 14\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(0)     == 0\nassert     count_Set_Bits(1)     == 1\nassert     count_Set_Bits(2)     == 1\nassert     count_Set_Bits(3)     == 2\nassert     count_Set_Bits(8)     == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_values_string(\"1234\") == \"1\"\nassert     odd_values_string(\"We're Happy\") == \"e\"\nassert     odd_values_string(\"Cool\") == \"oo\"\nassert     odd_values_string(\"Python is Great!\") == \"ThnF\"\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_values_string('Python') == 'ytho'\nassert     odd_values_string('C++') =='c'\nassert     odd_values_string('C#') == 'c#'\nassert     odd_values_string('Java') == 'ja'\nassert     odd_values_string('Ruby') == 'ybr'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_values_string('abcdef') == 'acb'\nassert     odd_values_string('fbcdef') == 'fbcde'\nassert     odd_values_string('12345678') == '234567'\nassert     odd_values_string('zzzz') == 'zz'\n\ndef all_upper_case(str):\n    '''\n    Write a python function to check whether a string is in all upper case or not.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_values_string('hello') == 'hlo', 'Test 1 failed'\nassert     odd_values_string('code') == 'coe', 'Test 2 failed'\nassert     odd_values_string('test') =='st', 'Test 3 failed'\nassert     odd_values_string('code'*1000) == '', 'Test 4 failed'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_values_string(\"Jollyguy\") == \"oly\"\nassert     odd_values_string(\"Jacques\") == \"s\"\nassert     odd_values_string(\"Curry\") == \"ur\"\nassert     odd_values_string(\"Myself\") == \"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     \"abcd\" == odd_values_string(\"abcdef\")\nassert     \"abcde\" == odd_values_string(\"abcd\")\nassert     \"bcdd\" == odd_values_string(\"bcdef\")\n\ndef is_palindrome(str):\n    '''\n    Write a python function to check if the given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_values_string('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz', 'incorrect'\nassert     odd_values_string('w3resource') == 'cefghigklnoprstuvwxyz', 'incorrect'\nassert     odd_values_string('We3areAwesome') == 'cefghigklmnopqrstuvwxyz', 'incorrect'"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_values_string('India') == 'AIn'\nassert     odd_values_string('PYTHON') == 'YHN'\nassert     odd_values_string('CODE') == 'OCD'\nassert     odd_values_string('COPY') == 'YC'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_values_string('djskfhsjklsdh') == 'djsdkfjks'\nassert     odd_values_string('shsfdhjsdijfklsjdsijfhsdkjfhks') =='shfdsjhkfjdsf'\nassert     odd_values_string('hjksdfjkfhk') == 'hjkf'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_values_string('this is an example') == 'hihihihihi'\nassert     odd_values_string('this is also an example') == 'hi'\nassert     odd_values_string('hello') == ''\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_of_three(2, 3, 1) == 1, 'the minimum of two numbers is one'\nassert     min_of_three(5, 3, 2) == 2, 'the minimum of three numbers is two'\nassert     min_of_three(1, 2, 3) == 1, 'the minimum of three numbers is one'\nassert     min_of_three(1, 1, 1) == 1, 'the minimum of three numbers is one'\nassert     min_of_three(-1, 2, 3) == -1, 'the minimum of three numbers is -1'\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(3,2,1) == 1\nassert     min_of_three(3,2,2) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     min_of_three(0,0,0) == 0\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(2,1,2) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(3,2,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_of_three(0,0,0) == 0, min_of_three(0,0,0) == 0\nassert     min_of_three(1,0,0) == 1, min_of_three(1,0,0) == 1\nassert     min_of_three(1,0,1) == 1, min_of_three(1,0,1) == 1\nassert     min_of_three(1,1,0) == 1, min_of_three(1,1,0) == 1\nassert     min_of_three(1,1,1) == 1, min_of_three(1,1,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(1,2,-3) == -3\nassert     min_of_three(10,2,1) == 2\nassert     min_of_three(10,-2,1) == -2\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_of_three(4,1,3) == 1\nassert     min_of_three(-5,1,0) == -5\nassert     min_of_three(1,1,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,2,1) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(2,3,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(1,3,2) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(2,3,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(1,3,2) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(3,2,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(4,2,1) == 4\nassert     min_of_three(3,3,3) == 3\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,0,8) == True     \nassert     all_Bits_Set_In_The_Given_Range(2,2,8) == False     \nassert     all_Bits_Set_In_The_Given_Range(2,10,8) == True     \nassert     all_Bits_Set_In_The_Given_Range(2,12,8) == False     \nassert     all_Bits_Set_In_The_Given_Range(2,20,8) == True     \n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10, 1, 10) == True\nassert     all_Bits_Set_In_The_Given_Range(10, 0, 10) == False\nassert     all_Bits_Set_In_The_Given_Range(10, 1, 2) == False\nassert     all_Bits_Set_In_The_Given_Range(8, 1, 4) == True\nassert     all_Bits_Set_In_The_Given_Range(4, 1, 4) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,2) == True\nassert     all_Bits_Set_In_The_Given_Range(1,0,2) == False\nassert     all_Bits_Set_In_The_Given_Range(0,2,2) == False\nassert     all_Bits_Set_In_The_Given_Range(1,2,2) == False\nassert     all_Bits_Set_In_The_Given_Range(0,1,2) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(255,1,8)     == True\nassert     all_Bits_Set_In_The_Given_Range(255,1,255)     == False\nassert     all_Bits_Set_In_The_Given_Range(0,1,8)     == False\nassert     all_Bits_Set_In_The_Given_Range(0,1,255)     == True\nassert     all_Bits_Set_In_The_Given_Range(0,255,8)     == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,4) == True\nassert     all_Bits_Set_In_The_Given_Range(1,1,4) == False\nassert     all_Bits_Set_In_The_Given_Range(2,1,4) == True\nassert     all_Bits_Set_In_The_Given_Range(3,1,4) == False\nassert     all_Bits_Set_In_The_Given_Range(4,1,4) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(32, 0, 31) == True\nassert     all_Bits_Set_In_The_Given_Range(32, 0, 16) == False\nassert     all_Bits_Set_In_The_Given_Range(32, 31, 15) == False\nassert     all_Bits_Set_In_The_Given_Range(32, 0, 17) == False\nassert     all_Bits_Set_In_The_Given_Range(32, 1, 3) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(16,8,12) == False\nassert     all_Bits_Set_In_The_Given_Range(16,8,15) == True\nassert     all_Bits_Set_In_The_Given_Range(16,1,16) == True\nassert     all_Bits_Set_In_The_Given_Range(16,0,16) == True\nassert     all_Bits_Set_In_The_Given_Range(1,0,16) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,2,5) == True\nassert     all_Bits_Set_In_The_Given_Range(0,2,3) == False\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == True\nassert     all_Bits_Set_In_The_Given_Range(0,0,1) == False\nassert     all_Bits_Set_In_The_Given_Range(2,0,5) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,2) == True\nassert all_Bits_Set_In_The_Given_Range(2,0,2) == False\nassert all_Bits_Set_In_The_Given_Range(3,0,2) == False\nassert all_Bits_Set_In_The_Given_Range(0,3,2) == True\nassert all_Bits_Set_In_The_Given_Range(1,3,2) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,2,8) == True\nassert     all_Bits_Set_In_The_Given_Range(4,2,8) == False\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [re_arrange_array([1, 2, 3, 4, 5, -1, -2, -3, -4, -5], 2) == [-1, -2, 1, 2, 3, 4, 5], True]\nassert     [re_arrange_array([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5], 2) == [-1, -2, 1, 2, 3, 4, 5, 6], True]\nassert     [re_arrange_array([1, 2, 3, 4, 5, -6, -1, -2, -3, -4, -5], 2) == [-6, -1, 1, 2, 3, 4, 5, 6], True]\nassert     [re_arrange_array([-2, 1, 3, 4, 5, -1, -2, -3, -4, -5, -6], 2) == [-2, 1, 3, 4, 5, -6, -5, -4, -3, -2, -1], True]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     re_arrange_array([-5, -3, -1, 5, 6, -2, -2], 3) == [-5, -3, -1, -2, -2, 5, 6]\nassert     re_arrange_array([-2, -1, 0, 1, 2, 3, 4, 5], 4) == [-2, -1, 0, 1, 2, 3, 4, 5]\nassert     re_arrange_array([-2, -1, 0, 1, 2, 3, 4, 5, 6], 4) == [-2, -1, 0, 1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([-2, -1, 0, 1, 2, 3, 4, 5, 6], 10) == [-2, -1, 0, 1, 2, 3, 4, 5, 6]\n\n\ndef array_in_order(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and returns the index of the first value of the array that is not less than its nth neighbor.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     re_arrange_array([-1, -2, -3, 4, 5, 6, -7, 8, 9], 3) == [-1, -2, -7, 4, 5, 6, -3, 8, 9]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6, -7, 8, 9], 7) == [-1, -2, -3, 4, 5, 6, -7, 8, 9]\nassert     re_arrange_array([-1, 2, 3, -4, -5, 6, -7, 8, 9], 3) == [-1, -2, -3, 4, 5, 6, -7, 8, 9]\nassert     re_arrange_array([-1, 2, 3, -4, -5, 6, -7, 8, 9], 4) == [-1, 2, 3, -4, -5, 6, -7, 8, 9]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6, -7, 8, 9], 0) == [-1, -2, -3, 4, 5, 6, -7, 8, 9]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     re_arrange_array([2, 1, 3, 4, 5, 6, -7, 8], 3)     == [2, -1, 3, 4, 5, 6, -7, 8]\nassert     re_arrange_array([2, 1, 3, 4, 5, 6, -7, 8, 1, 0, 3, -9, 0, 2, -2, 1, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, -3, 3, 2, 1, 0, -2, "
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     re_arrange_array([2,4,-1,7,5,8], 3) == [2,4,-1,7,5,8]\nassert     re_arrange_array([3,3,-2,-1,0,1,2,2], 3) == [3,-2,3,-1,0,1,2,2]\nassert     re_arrange_array([2,1,2,2,3,3,3], 3) == [2,1,2,2,3,3,3]\nassert     re_arrange_array([-1,0,0,1,3,4,0], 3) == [-1,0,0,1,3,4,0]\n\ndef check_triangular(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and checks whether the array can be divided into n triangular subarrays, with each subarray being triangular if it can be divided by the number of elements in the subarray being triangular.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6], 3) == [1, 2, 3, -1, -2, -3, 4, 5, 6]\nassert     re_arrange_array([-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6], 3) == [-1, -2, -3, 1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100], 3) == [-1, -2, -3, -7, -8, -9, 1, 2, 3, 4, 5, 6, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100]\nassert     re_arrange_array([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100], 0) == []\nassert     re_arrange_array([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100], 10) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [re_arrange_array([3, -1, -5, -7, -4, -3, -2, -6, 7, 8, 9], 3)\n            == [3, -1, -5, -7, -4, -3, -2, -6, 7, 8, 9]], \"Check if the function rearranges the array\"\nassert     [re_arrange_array([-4, -3, -2, -1, 5, 6, 7, 8, 9], 4)\n            == [-4, -3, -2, -1, 5, 6, 7, 8, 9]], \"Check if the function rearranges the array\"\nassert     [re_arrange_array([-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6], 4)\n            == [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]], \"Check if the function rearranges the array\"\nassert     [re_arrange_array([-2, -5, -8, -6, -9, -7, -3, -4, -1, 0, 1, 2, 3, 4, 5, 6], 4)\n            == [-2, -5, -8, -6, -9, -7, -3, -4, -1, 0, 1, 2, 3, 4, 5, 6]], \"Check if the function rearranges the array\"\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [-1, 1, 3, 4, 2] == re_arrange_array([-1, 1, 3, 4, 2], 3)\nassert     [-1, 1, 3, -4, -2] == re_arrange_array([-1, 1, 3, -4, -2], 3)\nassert     [-1, 1, 3, -4, -2] == re_arrange_array([-1, 1, 3, -4, 2], 3)\nassert     [-1, 1, 3, -4, 2] == re_arrange_array([-1, 1, 3, -4, 2], 4)\nassert     [-1, 1, 3, -4, 2] == re_arrange_array([-1, 1, 3, -4, 2], -1)\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     re_arrange_array([-2, 1, -3, 5, -4, 6], 3) == [-2, -3, 1, 5, -4, 6], \"Failed test 1\"\nassert     re_arrange_array([-1, 5, -3, 4, -2, 6, -4], 3) == [-4, -2, -1, 4, 5, 6, -3], \"Failed test 2\"\nassert     re_arrange_array([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5], \"Failed test 3\"\nassert     re_arrange_array([1, 2, -3, 4, -5], 2) == [1, -3, 2, 4, -5], \"Failed test 4\"\nassert     re_arrange_array([-1, -2, -3, 4, 5], 2) == [-1, -3, -2, 4, 5], \"Failed test 5\"\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_blank(\"The D's are a part of the disemboweled part of the land!\", 'D') == \"The T's are a part of the disemboweled part of the land!\"\nassert     replace_blank(\"The D's are a part of the disemboweled part of the land!\", 'd') == \"The T's are a part of the disemboweled part of the land!\"\nassert     replace_blank(\"The D's are a part of the disemboweled part of the land!\", 'D!') == \"The T's are a part of the disemboweled part of the land!\"\nassert     replace_blank(\"The D's are a part of the disemboweled part of the land!\",'') == \"The T's are a part of the disemboweled part of the land!\""
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_blank(\"i like apples\",'p') == 'i like pppppppppp'\nassert     replace_blank(\"I like apples\",'p') == 'I like pppppppppp'\nassert     replace_blank(\"I like apples\",'i') == 'I like IiIiIiIiIiIiIiIiIi'\nassert     replace_blank(\"i like apples\",'o') == 'I like IiIiIiIiIiIiIiIiIi'\nassert     replace_blank(\"I like apples\",' ') == 'I like IiIiIiIiIiIiIiIiIi'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_blank('hello','a') == 'helloa', 'Error: string should be replaced.'\nassert     replace_blank(' hello','a') =='hello', 'Error: string should be replaced.'\nassert     replace_blank('','') == '', 'Error: input string should be a non-empty string.'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_blank('hello world','e') == 'heello world'\nassert     replace_blank('hello world','h') == 'hellow world'\nassert     replace_blank('hello world','l') == 'heello world'\nassert     replace_blank('hello world','o') == 'helloworld'\nassert     replace_blank('hello world','w') == 'helloworld'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_blank('hello', 'x') == 'hello', 'wrong'\nassert     replace_blank('hello world', 'x') == 'hello world', 'wrong'\nassert     replace_blank('hello   world', 'x') == 'hello   world', 'wrong'\nassert     replace_blank('', 'x') == '', 'wrong'\n\n\ndef replace_blank_2(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            i = char\n        str2 += i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_blank('hello','x') == 'hello', 'incorrect'\nassert     replace_blank('hello','') == 'hello', 'incorrect'\nassert     replace_blank('hello world', 'a') == 'hello world', 'incorrect'\nassert     replace_blank('', 'x') == '', 'incorrect'\nassert     replace_blank('', '') == '', 'incorrect'\nprint 'all tests passed"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_blank(\"test\", 'a') == \"test\"\nassert     replace_blank(\"test\", 'z') == \"test\"\nassert     replace_blank(\"t_st\", 'a') == \"t_st\"\nassert     replace_blank(\"t_st\", 'z') == \"t_st\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_blank('a   ', '*') == 'a*'\nassert     replace_blank(' a    ', '*') == 'a*'\nassert     replace_blank('   a   ', '*') == 'a*'\nassert     replace_blank('a a', '*') == 'a*a'\nassert     replace_blank('a', '*') == 'a*'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_blank(\"I love my\", \"T\") == \"I love T\"\nassert     replace_blank(\"I love my\", \"a\") == \"I lv my\"\nassert     replace_blank(\"I love my\", \" \") == \"I lv my\"\nassert     replace_blank(\"I love my\", \"a\") == \"I love my\"\nassert     replace_blank(\"I love my\", \"T\") == \"I love my\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_blank(\"HeLlO\", 'l') == 'HeLlO'\nassert     replace_blank(\"HeLlO\", 'a') == 'HeLaO'\nassert     replace_blank(\"HeLlO\", 'o') == 'HeLaO'\nassert     replace_blank(\"HeLlO\",'') == 'HeLaO'\nassert     replace_blank(\"HeLlO\", 't') == 'HeLaO'\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     larg_nnum([1,2,3,4,5,6],3) == [5,6,4]\nassert     larg_nnum([-1,-2,-3,-4,-5,-6],3) == [-6,-5,-4]\nassert     larg_nnum([5,3,2,1,4],3) == [5,3,2]\nassert     larg_nnum([],5) == []\n\ndef larg_nstr(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     larg_nnum([1,4,2,4,2,3,0,4,5,2,4],3) == [4,4,5]\nassert     larg_nnum([1,4,2,4,2,3,0,4,5,2,4],5) == [4,4,5,2,4]\nassert     larg_nnum([1,4,2,4,2,3,0,4,5,2,4],6) == [4,4,5,2,4]\nassert     larg_nnum([1,4,2,4,2,3,0,4,5,2,4],0) == []\nassert     larg_nnum([1,4,2,4,2,3,0,4,5,2,4],10) == [4,4,5,2,4]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     larg_nnum([1,2,3,4,5,6,7,8,9,10],3)     == [9,10,7]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9,10],5)     == [9,10,7,8,6]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9,10],11)     == [9,10,7,8,6,5,4,3,2]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9,10],-5)     == [9,10,7,8,6,5]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9,10],-11)     == [9,10,7,8,6,5,4,3,2]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [9, 7, 4, 8, 6, 5, 3, 1, 2] == larg_nnum([9, 7, 4, 8, 6, 5, 3, 1, 2], 3)\nassert     [9, 9, 9, 9, 9, 9, 9] == larg_nnum([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], 9)\nassert     [8, 8, 8, 8] == larg_nnum([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], 8)\nassert     [8, 8] == larg_nnum([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], 7)\nassert     [8, 8, 8, 8, 8, 8] == larg_nnum([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], 10)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     larg_nnum([4,3,5,2,6], 3) == [6,5,4]\nassert     larg_nnum([3,5,2,6], 2) == [6,5]\nassert     larg_nnum([4,3,5,2,6], 4) == [6,5,4,3]\nassert     larg_nnum([4,3,5,2,6], 5) == [6,5,4,3]\nassert     larg_nnum([4,3,5,2,6], 6) == [6,5,4]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     larg_nnum([3, 5, 8, 4, 9], 2)    == [9, 8]\nassert     larg_nnum([3, 5, 8, 4, 9], 1)    == [9]\nassert     larg_nnum([3, 5, 8, 4, 9], 4)    == [9, 8, 4, 5]\nassert     larg_nnum([3, 5, 8, 4, 9], 5)    == [9, 8, 4, 5]\nassert     larg_nnum([3, 5, 8, 4, 9], 0)    == []\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef combs(word):\n    '''\n    Write a function that takes in a string and returns a list of all possible combinations of the characters in the string\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     larg_nnum([1,3,5,7,9,2,4,6,8,0],5) == [9,8,7,6,5]\nassert     larg_nnum([5,1,9,7,6,2,4,3,0,8],5) == [9,8,7,6,5]\nassert     larg_nnum([5,9,1,7,6,2,4,3,0,8],5) == [9,8,7,6,5]\nassert     larg_nnum([5,9,1,7,6,2,4,3,0,8],4) == [9,8,7,6,5,4]\n\ndef larg_npair(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n pairs of largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     larg_nnum([3,5,6,3,2,1],2)     == [5, 6]\nassert     larg_nnum([4,3,5,2,2,1,3,5],4)     == [5, 5, 5, 5]\nassert     larg_nnum([4,3,5,2,2,1,3,5],3)     == [5, 5, 5]\nassert     larg_nnum([1,2,3,4,5],3)         == [5, 5, 5]\nassert     larg_nnum([5,3,1,2,5,2,2,2,1,5,4,3,5],2)     == [5, 5]\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     lateralsuface_cylinder(10,5) == 85\nassert     lateralsuface_cylinder(1,2) == 3.14\nassert     lateralsuface_cylinder(0,2) == 0\nassert     lateralsuface_cylinder(2,0) == 0\nassert     lateralsuface_cylinder(2,-3) == -3.14\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lateralsuface_cylinder(10,4)==3820\nassert     lateralsuface_cylinder(5,4)==1770\nassert     lateralsuface_cylinder(9,4)==1650\nassert     lateralsuface_cylinder(2.5,4)==260\nassert     lateralsuface_cylinder(10,4.5)==360\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lateralsuface_cylinder(2,3) == 13.6\nassert     lateralsuface_cylinder(1,2) == 4\nassert     lateralsuface_cylinder(1,1) == 1.2\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lateralsuface_cylinder(2,4) == 24\nassert     lateralsuface_cylinder(2,2) == 12\nassert     lateralsuface_cylinder(4,2) == 24\nassert     lateralsuface_cylinder(2,2) == 12\nassert     lateralsuface_cylinder(2,2) == 12\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lateralsuface_cylinder(1,2) == 2*pi*r**2\nassert     lateralsuface_cylinder(1,3) == 2*pi*r**2 + 4*pi*r**2\nassert     lateralsuface_cylinder(1,4) == 2*pi*r**2 + 4*pi*r**2 + 8*pi*r**2\nassert     lateralsuface_cylinder(1,5) == 2*pi*r**2 + 4*pi*r**2 + 8*pi*r**2 + 16*pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lateralsuface_cylinder(1,1) == 12.566370614359172\nassert     lateralsuface_cylinder(2,1) == 21.045652173913043\nassert     lateralsuface_cylinder(3,1) == 29.261568627450988\nassert     lateralsuface_cylinder(4,1) == 39.66552734375\nassert     lateralsuface_cylinder(5,1) == 50.55271367199707\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lateralsuface_cylinder(2.0, 2.0) == 8.0\nassert     lateralsuface_cylinder(2.0, 1.0) == 4.0\nassert     lateralsuface_cylinder(1.0, 2.0) == 4.0\nassert     lateralsuface_cylinder(1.0, 1.0) == 2.0\nassert     lateralsuface_cylinder(1.0, 0.0) == 0.0\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(1,1) == math.pi\nassert     lateralsuface_cylinder(2,2) == 4 * math.pi\nassert     lateralsuface_cylinder(3,3) == 6 * math.pi\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_cube(4) == 64\nassert     volume_cube(3) == 27\nassert     volume_cube(2) == 12\nassert     volume_cube(1) == 1\nassert     volume_cube(0) == 0\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_cube(1) ==     1**3\nassert     volume_cube(3) ==     3**3\nassert     volume_cube(5) ==     5**3\nassert     volume_cube(8) ==     8**3\nassert     volume_cube(100) ==     100**3\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_cube(5) == 125\nassert     volume_cube(2) == 8\nassert     volume_cube(1) == 1\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(1) == 6\nassert     volume_cube(3) == 27\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     volume_cube(1) ==     1**3\nassert     volume_cube(3) ==     3**3\nassert     volume_cube(5) ==     5**3\nassert     volume_cube(10) ==     10**3\nassert     volume_cube(7) ==     7**3\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_even_bit_set_number():\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 1\nassert     even_bit_set_number(2) == 2\nassert     even_bit_set_number(3) == 3\nassert     even_bit_set_number(4) == 8\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(3) == 1\nassert     even_bit_set_number(5) == 1\nassert     even_bit_set_number(7) == 0\nassert     even_bit_set_number(10) == 0\nassert     even_bit_set_number(11) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(10) == 0\nassert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(14) == 4\nassert     even_bit_set_number(20) == 16\nassert     even_bit_set_number(36) == 32\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(15)    == 13\nassert     even_bit_set_number(6)     == 10\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 0\nassert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(3) == 1\nassert     even_bit_set_number(4) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_bit_set_number(1) == 0\nassert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(3) == 1\nassert     even_bit_set_number(4) == 1\nassert     even_bit_set_number(5) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_bit_set_number(1) == 0\nassert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(2) == 2\nassert     even_bit_set_number(3) == 4\nassert     even_bit_set_number(4) == 0\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(10) == 4 \nassert     even_bit_set_number(22) == 16\nassert     even_bit_set_number(1) == 0\nassert     even_bit_set_number(11) == 4\nassert     even_bit_set_number(27) == 32\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_bit_set_number(12) == 6\nassert     even_bit_set_number(5) == 1\nassert     even_bit_set_number(10) == 2\nassert     even_bit_set_number(15) == 3\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_occurences([(1, 2), (1, 2)]) == {(1, 2): 2}\nassert check_occurences([(1, 2), (1, 2), (1, 2)]) == {(1, 2): 3}\nassert check_occurences([(1, 2), (1, 2), (3, 4), (3, 4)]) == {(1, 2): 2, (3, 4): 2}\nassert check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (3, 4), (3, 4), (3, 4)]) == {(1, 2): 4, (3, 4): 4}\nassert check_occurences([]) == {}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_occurences([(1,2),(3,4)]) == {(1,2): 1, (3,4): 1}\nassert     check_occurences([(1,2),(3,2)]) == {(1,2): 2, (3,2): 1}\nassert     check_occurences([(1,3),(1,2),(2,3)]) == {(1,3): 1, (1,2): 2, (2,3): 1}\nassert     check_occurences([(1,3),(2,3),(2,3)]) == {(1,3): 2, (2,3): 3}\nassert     check_occurences([(2,3),(2,3)]) == {(2,3): 2}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_occurences([('a', 2), ('a', 1), ('b', 4), ('a', 3), ('b', 3), ('c', 1)]) == {('a', 1):2, ('b', 4):3, ('c', 1):1}\nassert     check_occurences([('a', 2), ('b', 4), ('a', 3), ('b', 3), ('c', 1)]) == {('a', 2):1, ('b', 4):2, ('c', 1):1}\nassert     check_occurences([('a', 2), ('b', 4), ('a', 3), ('b', 3), ('c', 1)]) == {('a', 3):1, ('b', 4):2, ('c', 1):1}\nassert     check_occurences([('a', 2), ('b', 4), ('a', 3), ('b', 3), ('c', 1)]) == {('a', 2):1, ('b', 4):2, ('c', 1):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_occurences(\n            [\n                (1, 1, 1, 1, 1), \n                (2, 2, 2, 2, 2), \n                (3, 3, 3, 3, 3), \n                (4, 4, 4, 4, 4), \n                (5, 5, 5, 5, 5)\n                ]\n            ) ==     {\n                (1, 1, 1, 1, 1): 1, \n                (2, 2, 2, 2, 2): 2, \n                (3, 3, 3, 3, 3): 3, \n                (4, 4, 4, 4, 4): 4, \n                (5, 5, 5, 5, 5): 5\n            },     'incorrect'\n\n\ndef check_only_max_one_occurence(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples that only contains tuples that have a max of one occurence.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_occurences([(1,2),(2,1),(1,2),(1,3),(1,4),(1,5),(2,1),(2,2),(3,1),(4,1),(5,1)])     == {(1,2): 2, (1,3): 1, (1,4): 1, (1,5): 1, (2,1): 3, (2,2): 1, (3,1): 1, (4,1): 1, (5,1): 1}\nassert     check_occurences([(1,2),(1,2),(2,3),(2,3),(3,4),(2,5),(2,6),(2,7),(2,8),(2,9)])     == {(2,3): 2, (2,4): 1, (2,5): 1, (2,6): 1, (2,7): 1, (2,8): 1, (2,9): 1}\nassert     check_occurences([(1,2),(1,2),(2,3),(2,3),(3,4),(2,5),(2,6),(2,7),(2,8),(2,9),(3,4),(3,4),(3,4)])     == {(2,3): 3, (2,4): 2, (2,5): 2, (2,6): 2, (2,7): 2, (2,8): 2, (2,9): 2, (3,4): 3, (3,4): 3}\n\n\ndef duplicate_removal(lst):\n    '''\n    Write a function that takes in a list of tuples and returns a list of tuples that has only one copy of each element.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert check_occurences(test_list) == {'ABBA': 1, 'AABA': 1, 'BBAA': 1}\nassert check_occurences(big_list) == {'ABBA': 3, 'AABA': 1, 'BBAA': 1}\nassert check_occurences([]) == {}\nassert check_occurences([('ABBA',3), ('AABA', 1), ('BBAA',1)]) == {'ABBA': 3, 'AABA': 1, 'BBAA': 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_occurences([(1, 2), (3, 1), (5, 1), (5, 1)]) == {(5, 1): 2, (1, 2): 1, (3, 1): 1}\nassert     check_occurences([(1, 2), (3, 1), (5, 1), (5, 2), (5, 1)]) == {(5, 2): 1, (5, 1): 2, (1, 2): 1, (3, 1): 1}\nassert     check_occurences([(1, 2), (3, 1), (5, 1), (5, 1), (5, 1)]) == {(5, 1): 3, (1, 2): 1, (3, 1): 1}\nassert     check_occurences([(1, 2), (3, 1), (5, 1), (5, 1), (5, 1), (5, 1)]) == {(5, 1): 4, (1, 2): 1, (3, 1): 1}\n\ndef check_union(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new list containing elements from both of the input lists.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_occurences([('w', 2), ('r', 4), ('r', 5), ('r', 2), ('a', 1)]) == {('w', 2): 1, ('r', 4): 3, ('r', 5): 1, ('a', 1): 1}\nassert check_occurences([(1, 2), (2, 3), (1, 4), (2, 1), (1, 3)]) == {(1, 2): 1, (2, 3): 1, (1, 4): 1, (2, 1): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_occurences( [(1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4), (4, 1)] ) == {(1, 2) : 1, (2, 3) : 1, (3, 4) : 1, (4, 1) : 1}\nassert     check_occurences( [(1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4), (4, 1), (1, 2)] ) == {(1, 2) : 2, (2, 3) : 1, (3, 4) : 1, (4, 1) : 1}\nassert     check_occurences( [(1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4)] ) == {(1, 2) : 3, (2, 3) : 2, (3, 4) : 1, (4, 1) : 1}\nassert     check_occurences( [(1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4), (4, 1)] ) == {(1, 2) : 4, (2, 3) : 3, (3, 4) : 2, (4, 1) : 1}\nassert     check_occurences( [(1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (3, 4)] ) == {(1, 2) : 5, (2, 3) : 4, (3, 4) : 3, (4, 1) : 2}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_occurences([('a',2), ('b',3), ('b',1)]) == {('b',1):1, ('b',3):2, ('a',2):1}\nassert     check_occurences([('a',2), ('b',2), ('a',1)]) == {('a',2):2, ('a',1):1, ('b',2):2}\nassert     check_occurences([('a',2), ('b',3), ('b',1)]) == {('a',2):2, ('b',1):1, ('b',3):1}\nassert     check_occurences([('a',2), ('b',2), ('a',3)]) == {('a',2):2, ('a',3):1, ('b',2):2}\n\ndef display_tuple_count(list_of_tuples, key_func):\n    '''\n    Display the number of occurrences of each tuple in the list_of_tuples using the key_func to compute the key for each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     number_of_substrings(\"a\") == 1\nassert     number_of_substrings(\"abc\") == 3\nassert     number_of_substrings(\"abcd\") == 4\nassert     number_of_substrings(\"abcde\") == 5\nassert     number_of_substrings(\"ab\") == 2\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     number_of_substrings(\"abcdef\") == 6\nassert     number_of_substrings(\"abcabc\") == 3\nassert     number_of_substrings(\"abc\") == 3\nassert     number_of_substrings(\"a\") == 1\nassert     number_of_substrings(\"\") == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     number_of_substrings('abcabc') == 3\nassert     number_of_substrings('abccba') == 2\nassert     number_of_substrings('abc') == 3\nassert     number_of_substrings('a') == 1\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     number_of_substrings(\"python\") == 3\nassert     number_of_substrings(\"abppplee\") == 3\nassert     number_of_substrings(\"abc\") == 3\nassert     number_of_substrings(\"abcabc\") == 3\nassert     number_of_substrings(\"abcabcabc\") == 4\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     number_of_substrings('ab') == 1\nassert     number_of_substrings('abc') == 2\nassert     number_of_substrings('abcd') == 2\nassert     number_of_substrings('abcdd') == 3\nassert     number_of_substrings('a') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     number_of_substrings('abc') == 2\nassert     number_of_substrings('aaa') == 3\nassert     number_of_substrings('aa') == 2\nassert     number_of_substrings('') == 0\nassert     number_of_substrings('ab') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     number_of_substrings('aba') == 1\nassert     number_of_substrings('abababababababa') == 2\nassert     number_of_substrings('ababa') == 1\nassert     number_of_substrings('abababababababaababa') == 2\nassert     number_of_substrings('abababababababaababa') == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     number_of_substrings('abc')         == 1\nassert     number_of_substrings('abcddddddd') == 3\nassert     number_of_substrings('abcddddddd') == 4\nassert     number_of_substrings('a')         == 1\nassert     number_of_substrings('a'*10)     == 10\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     number_of_substrings('')     == 0\nassert     number_of_substrings('as')     == 1\nassert     number_of_substrings('aaaa') == 4\nassert     number_of_substrings('abc')     == 3\nassert     number_of_substrings('ababababab') == 9\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     number_of_substrings('papa') == 2\nassert     number_of_substrings('geeks') == 5\nassert     number_of_substrings('excellent') == 4\nassert     number_of_substrings('abc') == 1\nassert     number_of_substrings('abcda') == 4\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(5,3) == 27\nassert     get_total_number_of_sequences(5,4) == 25\nassert     get_total_number_of_sequences(5,5) == 22\nassert     get_total_number_of_sequences(3,1) == 3\nassert     get_total_number_of_sequences(3,2) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(10,5) == 6\nassert     get_total_number_of_sequences(10,6) == 3\nassert     get_total_number_of_sequences(100,5) == 21\nassert     get_total_number_of_sequences(10,1) == 1\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef generate_permutations(n):\n    '''\n    Write a function that takes in a positive integer n and returns a list of all permutations of the first n positive integers. For example, if n=3, then your function should return:\n    [\n      [1, 2, 3],\n      [1, 3, 2],\n      [2, 1, 3],\n      [2, 3, 1],\n      [3, 1, 2],\n      [3, 2, 1]\n    ]\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(10,1) == 0\nassert     get_total_number_of_sequences(5,2) == 2\nassert     get_total_number_of_sequences(10,2) == 4\nassert     get_total_number_of_sequences(10,3) == 8\nassert     get_total_number_of_sequences(10,4) == 16\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(100,10) == 1\nassert     get_total_number_of_sequences(101,10) == 2\nassert     get_total_number_of_sequences(100,11) == 2\nassert     get_total_number_of_sequences(100,100) == 6\nassert     get_total_number_of_sequences(25,4) == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(4,1)==2\nassert     get_total_number_of_sequences(4,2)==1\nassert     get_total_number_of_sequences(4,3)==0\nassert     get_total_number_of_sequences(6,2)==0\nassert     get_total_number_of_sequences(9,2)==1\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(4, 2) == 4\nassert     get_total_number_of_sequences(4, 3) == 4\nassert     get_total_number_of_sequences(4, 4) == 0\nassert     get_total_number_of_sequences(4, 5) == 0\nassert     get_total_number_of_sequences(4, 6) == 4\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(5, 4) == 10\nassert     get_total_number_of_sequences(8, 3) == 35\nassert     get_total_number_of_sequences(10, 5) == 70\nassert     get_total_number_of_sequences(10, 7) == 500\nassert     get_total_number_of_sequences(15, 10) == 1050\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(1,2) == 4\nassert     get_total_number_of_sequences(3,3) == 15\nassert     get_total_number_of_sequences(12,4) == 60\nassert     get_total_number_of_sequences(20,3) == 105\nassert     get_total_number_of_sequences(30,4) == 1005\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(2,2)==3\nassert     get_total_number_of_sequences(8,8)==60\nassert     get_total_number_of_sequences(1,1)==1\nassert     get_total_number_of_sequences(2,3)==6\nassert     get_total_number_of_sequences(3,3)==6\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_list([1,2,3,4],[5,6]) == [1,2,3,5,6], 'Failed on replace_list'\nassert     replace_list([1,2,3,4,5,6],[7,8]) == [1,2,3,4,5,7,8], 'Failed on replace_list'\nassert     replace_list([1,2,3,4,5,6,7,8],[9,10]) == [1,2,3,4,5,6,7,9,10], 'Failed on replace_list'\nassert     replace_list([1,2,3,4,5,6,7,8,9,10],[11,12]) == [1,2,3,4,5,6,7,8,9,11,12], 'Failed on replace_list'\n\nprint'replace_list'\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 10]\nassert     replace_list([], [6, 7, 8, 9, 10]) == [6, 7, 8, 9, 10]\nassert     replace_list([6, 7, 8, 9, 10], []) == [6, 7, 8, 9, 10]\nassert     replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     replace_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3],[1,2,3]) == [1,2,3,1,2,3]\nassert     replace_list([1,2,3,4],[1,2,3]) == [1,2,3,4,1,2,3]\nassert     replace_list([1,2,3,4],[1,2,3,4,5]) == [1,2,3,4,5,1,2,3,4]\nassert     replace_list([1,2,3,4,5],[1,2,3,4,5]) == [1,2,3,4,5,1,2,3,4,5]\nassert     replace_list([1,2,3,4,5],[]) == [1,2,3,4,5]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_list([1,2,3], [4,5]) == [1,2,4,5]\nassert     replace_list([1,2,3,4], [5,6]) == [1,2,3,5]\nassert     replace_list([], []) == []\nassert     replace_list([4,3,2,1], []) == [4,3,2,1]\nassert     replace_list([1,2,3], [5]) == [1,2,5]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 6, 7, 8, 9, 10]\nassert     replace_list([1, 2, 3, 4], [6, 7, 8]) == [1, 2, 3, 4, 6, 7, 8]\nassert     replace_list([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]\nassert     replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     replace_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3,4],[5,6,7,8]) == [1,2,3,5,6,7,8]\nassert     replace_list([1,2,3,4],[5,6]) == [1,2,3,5,6]\nassert     replace_list([1,2,3,4,5,6,7],[5,6,7,8]) == [1,2,3,5,6,7,8]\nassert     replace_list([1,2,3,4,5,6,7],[5,6]) == [1,2,3,5,6,7]\nassert     replace_list([1,2,3,4,5,6,7],[]) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_list([1,2,3], [4,5,6]) == [1,2,4,5,6]\nassert     replace_list([1,2,3,4], [5,6,7,8]) == [1,2,3,5,6,7,8]\nassert     replace_list([0,0,0,0,0], [0,0,0,0,0]) == [0,0,0,0,0]\nassert     replace_list([1,2,3,4,5,6,7,8,9], [9,8,7,6,5,4,3,2,1]) == [1,2,3,9,8,7,6,5,4,3,2,1]\nassert     replace_list([1,2,3], [4,5,6]) == [1,2,4,5,6]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3,4], [1,2,3]) == [1,2,3,1]\nassert     replace_list([1,2,3,4,5], [1,2,3]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4], [1,2,3]) == [1,2,3,4]\nassert     replace_list([], []) == []\nassert     replace_list([1,2,3,4,5], [1,2,3]) == [1,2,3,4,5]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_list([1,2,3,4], [5,6,7,8]) == [1,2,3,5,6,7,8]\nassert     replace_list([9,7,3,8], [5,6,7,8]) == [9,7,5,8]\nassert     replace_list([2,3,1,0], [5,6,7,8]) == [2,3,5,6,7,8]\nassert     replace_list([0,1,2], []) == [0,1,2]\nassert     replace_list([], [5,6,7,8]) == [5,6,7,8]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]\nassert     replace_list([1, 2, 3], [7, 8, 9]) == [1, 2, 7, 8, 9]\nassert     replace_list([1, 2, 3], [4, 5, 6, 7, 8]) == [1, 2, 4, 5, 6]\nassert     replace_list([1, 2, 3, 4, 5], [6, 7, 8, 9]) == [1, 2, 6, 7, 8]\nassert     replace_list([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_charac(\"Hello World\")    ==    31\nassert     count_charac(\"\")                ==    0\nassert     count_charac(\"3\")                ==    1\nassert     count_charac(\"a\")                ==    1\nassert     count_charac(\"!\")                ==    1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef count_lower(str1):\n    '''\n    Write a function to count the total number of lowercase characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_charac(\"hello\") == 5\nassert     count_charac(\"monkey\") == 12\nassert     count_charac(\"\") == 0\nassert     count_charac(\"\") == 0\nassert     count_charac(\"h\") == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_charac('dsdsdsd') == 19\nassert     count_charac('dsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsdsds\n\n\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_charac('hello world') == 21, 'check 1'\nassert     count_charac('your name') == 11, 'check 2'\nassert     count_charac('bye') == 2, 'check 3'\nassert     count_charac('hElLo') == 10, 'check 4'\nassert     count_charac('') == 0, 'check 5'\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_charac('hello') == 5\nassert     count_charac('world') == 7\nassert     count_charac('hi') == 2\nassert     count_charac('Hi') == 2\nassert     count_charac('h') == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_charac('') == 0\nassert     count_charac('a') == 1\nassert     count_charac('bb') == 2\nassert     count_charac('abcd') == 4\nassert     count_charac('aabcd') == 5\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_charac('welcome') == 9\nassert     count_charac('A') == 1\nassert     count_charac('This is a test') == 19\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_charac('hello') == 5\nassert     count_charac('world') == 7\nassert     count_charac('I love you') == 19\nassert     count_charac('w3resource') == 13\nassert     count_charac('w3resource') == 13\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_charac('abc') == 3\nassert     count_charac('b') == 1\nassert     count_charac('a') == 1\nassert     count_charac('a') == 1\nassert     count_charac('a') == 1\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 4\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 6\nassert     next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(5) == 6\nassert     next_Perfect_Square(6) == 7\nassert     next_Perfect_Square(7) == 8\nassert     next_Perfect_Square(8) == 9\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 2\nassert     next_Perfect_Square(3) == 2\nassert     next_Perfect_Square(4) == 2\nassert     next_Perfect_Square(5) == 2\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(2)==4\nassert     next_Perfect_Square(3)==4\nassert     next_Perfect_Square(4)==8\nassert     next_Perfect_Square(5)==8\nassert     next_Perfect_Square(6)==10\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(12) == 13\nassert     next_Perfect_Square(24) == 26\nassert     next_Perfect_Square(100) == 97\nassert     next_Perfect_Square(129) == 131\nassert     next_Perfect_Square(144) == 145\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(34) == 36\nassert     next_Perfect_Square(37) == 38\nassert     next_Perfect_Square(39) == 40\nassert     next_Perfect_Square(41) == 42\nassert     next_Perfect_Square(43) == 44\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_Perfect_Square(5) == 17\nassert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(6) == 9\nassert     next_Perfect_Square(11) == 89\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(3) == 4,     \"Output %d is not correct.\"%next_Perfect_Square(3)\nassert     next_Perfect_Square(24) == 25,     \"Output %d is not correct.\"%next_Perfect_Square(24)\nassert     next_Perfect_Square(17) == 22,     \"Output %d is not correct.\"%next_Perfect_Square(17)\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 4\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 6\nassert     next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_sum([10, -1, -12, 5, -6, 6, -7, 6, 8, 9]) == 13\nassert     max_sum([-4, -1, -2, -3, 3, 4, 5, 8, 6, 7, 9]) == 17\nassert     max_sum([2, 4, 5, 8, 3]) == 15\nassert     max_sum([9, 4, -2, -8, 6, 2, -5, -3, -1, 2, 8]) == 19\nassert     max_sum([-2, -8, -10, -9, -3, -1, -6, -6, -8, -7, -5]) == -1\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sum([1, 3, 8, 12, 4, 10])     == 14\nassert     max_sum([10, 9, 8, 7, 6, 5, 4, 3, 2])     == 33\nassert     max_sum([5, 4, 3, 2, 1])     == 15\nassert     max_sum([])     == None\nassert     max_sum([5, 8, 3, 4, 1])     == 10\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nassert max_sum([0, 1, 2, -5, 4, -10]) == 1\nassert max_sum([0, -1, -2, -5, 4, -10]) == -1\nassert max_sum([0, 1, 2, -5, 4, -10, -8, 1, 1, 1, -8, -7, -2]) == 1\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sum([10, 9, 2, 5, 3, 7, 101, 18]) == 187\nassert     max_sum([10, 9, 8, 7, 6, 5, 4, 3]) == 16\nassert     max_sum([7, 10, 9, 8, 6, 5, 4, 3, 2, 1]) == 12\nassert     max_sum([2, 1, 4, 7, 10, 9, 10, 9, 8, 6]) == 19\nassert     max_sum([5, 4, 3, 2, 1]) == 10\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_sum([1, 11, 3, 10, 5, 7, 9, 12, 3, 14, 3]) == 19\nassert     max_sum([1, 2, 3, 4, 5, 6]) == 22\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 22\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 22\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 22\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_sum([10, -3, 2, -1, 4, -5, 2, -1, 5, -3, 2, -1, 4, -5]) == 4, \"Expected: 4\"\nassert     max_sum([1, 3, -4, 5, -7, 8, 10, -1, 3, -1, -2, 4, 6, -9, -10, -3]) == 10, \"Expected: 10\"\nassert     max_sum([5, 4, 3, 7, 3, -1, -1, -4, -3, -1]) == -1, \"Expected: -1\"\nassert     max_sum([3, -1, -2, -3, 2, 1]) == 3, \"Expected: 3\"\nassert     max_sum([1, 1, -1, -1, -2, -3, -2, -1]) == -3, \"Expected: -3\"\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_sum([1, 3, 8, 6, 4, 10]) == 17\nassert     max_sum([1, 2, 3, 4, 5]) == 9\nassert     max_sum([5, 4, 3, 2, 1]) == 15\nassert     max_sum([6, 2, 3, 4, 1]) == 12\nassert     max_sum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 22\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert babylonian_squareroot(2) == 1.4142135623730951\nassert babylonian_squareroot(9) == 2.0\nassert babylonian_squareroot(16) == 2.0\nassert babylonian_squareroot(27) == 3.0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert babylonian_squareroot(2) == 1.41421356237\nassert babylonian_squareroot(3) == 1.732050807568877\nassert babylonian_squareroot(4) == 2.0\nassert babylonian_squareroot(5) == 2.2360679775\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     babylonian_squareroot(16) == 4\nassert babylonian_squareroot(26) == 6\nassert babylonian_squareroot(26) == 6\nassert babylonian_squareroot(36) == 6\nassert babylonian_squareroot(64) == 8\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(3) == 0.5773502691896258\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(100) == 10\nassert     babylonian_squareroot(0) == 0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     babylonian_squareroot(16)    == 4.0\nassert     babylonian_squareroot(0)    == 0.0\nassert     babylonian_squareroot(1)    == 1.0\nassert     babylonian_squareroot(2)    == 1.4142135623730951\nassert     babylonian_squareroot(25)    == 5.0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(2) == 1.0\nassert     babylonian_squareroot(3) == 1.732\nassert     babylonian_squareroot(4) == 2.0\nassert     babylonian_squareroot(5) == 2.452380952380952\nassert     babylonian_squareroot(6) == 2.732\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(27) == 3\nassert     babylonian_squareroot(10000) == 6\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(27) == 5\nassert     babylonian_squareroot(45) == 5\nassert     babylonian_squareroot(81) == 3\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(36) == 6\nassert     babylonian_squareroot(49) == 7\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert lps(\"aab\") == 2\nassert lps(\"aaaa\") == 4\nassert lps(\"abbbba\") == 2\nassert lps(\"bbbbbba\") == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lps('babad') == 4\nassert     lps('cbbd') == 2\nassert     lps('a') == 1\nassert     lps('ac') == 2\nassert     lps('aa') == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lps('asabcd') == 4\nassert     lps('babcd') == 2\nassert     lps('babcbabcd') == 4\nassert     lps('babcbabcbabcd') == 6\nassert     lps('babcbabcbabcbabcd') == 8\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lps('bb') == 1\nassert     lps('abab') == 2\nassert     lps('bbbb') == 3\nassert     lps('bbbab') == 3\nassert     lps('abababab') == 5\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lps(\"ABCB\") == 3\nassert lps(\"ABBAC\") == 3\nassert lpsn    assert     lps(\"AB\") == 0\n    assert     lps(\"\") == 0\n    "
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lps('bbbab') == 4\nassert     lps('bbbaa') == 2\nassert     lps('bbababa') == 4\nassert     lps('bbb') == 1\nassert     lps('ab') == 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lps('bb') == 1\nassert     lps('ababab') == 3\nassert     lps('abbbb') == 2\nassert     lps('bbbbb') == 1\nassert     lps('aba') == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lps(\"\") == 0, \"Test 1 for lps: ok\"\nassert     lps(\"a\") == 1, \"Test 2 for lps: ok\"\nassert     lps(\"bb\") == 1, \"Test 3 for lps: ok\"\nassert     lps(\"babad\") == 4, \"Test 4 for lps: ok\"\nassert     lps(\"cbbd\") == 2, \"Test 5 for lps: ok\"\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef longest_palindromic_subsequence(str):\n    '''\n    Given a string, find the longest palindromic subsequence's length in the string.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1\nassert     harmonic_sum(3) == 1/2\nassert     harmonic_sum(4) == 1/3\nassert     harmonic_sum(5) == 1/4\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     harmonic_sum(1) == 1.0\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 1.5 + 1.0/2\nassert     harmonic_sum(5) == 1.5 + 1.0/2 + 1.0/3\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\n\ndef is_solved(n):\n    '''\n    Write a function that takes in an integer n and returns a boolean indicating if the\n    n-th number is equal to n.\n    '''\n    pass\n\n\ndef is_prime(n):\n    '''\n    Write a function that takes in a number n and returns a boolean indicating if the\n    n-th number is prime.\n    '''\n    pass\n\n\ndef first_n_primes(n):\n    '''\n    Write a function that takes in a number n and returns the first n primes.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     harmonic_sum(0) == 0\nassert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(10) == 50.5\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 1.7\nassert     harmonic_sum(4) == 2\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     harmonic_sum(1) == 1/1\nassert     harmonic_sum(2) == 1/2 + 1/3\nassert     harmonic_sum(3) == 1/3 + 1/4 + 1/5\nassert     harmonic_sum(4) == 1/4 + 1/5 + 1/6 + 1/7\nassert     harmonic_sum(5) == 1/5 + 1/6 + 1/7 + 1/8 + 1/9\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     harmonic_sum(4) == 1.5\nassert     harmonic_sum(5) == 2.8\nassert     harmonic_sum(7) == 3.9\nassert     harmonic_sum(11) == 4.89\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     harmonic_sum(1)     == 1.0\nassert     harmonic_sum(2)     == 1.5\nassert     harmonic_sum(3)     == 1.775023784943\nassert     harmonic_sum(4)     == 2.0\nassert     harmonic_sum(5)     == 2.3\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersection_array([1,2,3,4,5,6,7,8,9],[5,6,7,8,9,10,11,12,13,14,15]) == [5,6,7,8,9,10,11,12,13,14,15]\nassert     intersection_array([1,2,3,4,5,6,7,8],[5,6,7,8,9,10,11,12,13,14,15]) == [5,6,7,8,9,10,11,12,13,14,15]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[6,7,8,9,10,11,12,13,14,15]) == [6,7,8,9,10,11,12,13,14,15]\nassert     intersection_array([0,1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10,11,12,13,14,15]) == [4,5,6,7,8,9,10,11,12,13,14,15]\nassert     intersection_array([0,1,2,3,4,5,6,7,8,9],[0,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [0,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersection_array([1,2,3],[2,3,4]) == [2,3]\nassert     intersection_array([1,2,2],[3,4,4]) == [2]\nassert     intersection_array([1,2],[1,2]) == [1,2]\nassert     intersection_array([1,1],[1,2]) == [1]\n\n\ndef intersection_array2(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,2,1],[2,2]) == [2, 2]\nassert     intersection_array([1,2,2,1],[]) == []\nassert     intersection_array([1,2,3,4,5],[1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert     intersection_array([1,2,3,4,5],[4,5,6]) == [4, 5]\n\n\ndef find_subsets(array,target):\n    '''\n    Write a function to find all subsets of a set with sum equal to a given number.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection_array([1, 2, 2, 1], [2, 2]) == [2, 2]\nassert     intersection_array([1, 2, 2, 1], []) == []\nassert     intersection_array([], [1, 2, 2, 1]) == []\nassert     intersection_array([1, 2, 2, 1], [2, 2]) == [2, 2]\nassert     intersection_array([1, 2, 2, 1], [2]) == [2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,3],[1,2,4]) == [1,2]\nassert     intersection_array([1,2,3],[1,2,3]) == [1,2,3]\nassert     intersection_array([1,2,3],[]) == []\nassert     intersection_array([1,2,3],[4,5,6]) == []\nassert     intersection_array([],[1,2,3]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef three_sum(nums):\n    '''\n    Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? \n    Find all unique triplets in the array which gives the sum of zero.\n    '''\n    pass\n\ndef binary_search(arr,target):\n    '''\n    Given a sorted array, find the index of the first element in the array that is equal to target\n    '''\n    pass\n\ndef is_anagram(str1,str2):\n    '''\n    Given two strings, write a function to check if they are anagrams or not.\n    '''\n    pass\n\ndef remove_duplicates(nums):\n    '''\n    Remove duplicates from a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection_array( [1,2,3,4,5], [3,4,5,6] ) == [3,4,5]\nassert     intersection_array( [1,2,3,4], [2,3] ) == [2,3]\nassert     intersection_array( [1,2,3,4], [1,2] ) == [1,2]\nassert     intersection_array( [1,2,3,4], [2,3,4,5] ) == [2,3,4,5]\nassert     intersection_array( [1,2,3,4], [1,1,1,1] ) == [1,1,1]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersection_array([1,2,3,4,5],[4,5,6,7,8]) == [4,5]\nassert     intersection_array([1,2,3,4,5],[1,2,3,4,5]) == [1,2,3,4,5]\nassert     intersection_array([1,2,3,4,5],[1,2,3]) == [1,2,3]\nassert     intersection_array([1,2,3,4,5],[2,3,4,5,6]) == []"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_X(('a','a','b','b','b'), 'b') == 3\nassert     count_X(('a','a','b','b','b'), 'a') == 1\nassert     count_X(('a','a','a','a','a'), 'a') == 5\nassert     count_X(('a','a','b','b','b'), 'd') == 0\nassert     count_X(('a','a','a','a','a'), 'b') == 4\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_X((1,2,3,4,5), 1) == 3\nassert     count_X((1,2,3,4,5), 2) == 2\nassert     count_X((1,2,3,4,5), 3) == 1\nassert     count_X((1,2,3,4,5), 4) == 1\nassert     count_X((1,2,3,4,5), 5) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_X(('a', 'a', 'a', 'b'), 'a') == 3\nassert     count_X(('a', 'a', 'a', 'b', 'a'), 'a') == 2\nassert     count_X(('a', 'a', 'a', 'b', 'a'), 'b') == 1\nassert     count_X(('a', 'a', 'a', 'b', 'a'), 'c') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef number_to_string(num):\n    '''\n    Write a python function that takes in an integer and returns a string of the numbers in the integer.\n    For example, if num = 11, the function should return \"one 1\".\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_X(('a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'), 'b') == 3, \"count_X() is not working correctly\"\nassert     count_X(('a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'), 'd') == 0, \"count_X() is not working correctly\"\nprint(\"Problem 1: Testing count_X() is working correctly\")\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_X(('a','b','c','a','b','c','a','b','c','a','b','c'),'a') == 5\nassert     count_X(('a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','b','c','a','"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_X((1, 2, 3, 2, 1), 2) == 2\nassert     count_X((1, 2, 3, 2, 1), 3) == 1\nassert     count_X((1, 2, 3, 2, 1), 1) == 1\nassert     count_X((1, 2, 3, 2, 1), 0) == 0\nassert     count_X((1, 2, 3, 2, 1), 4) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_X(('d', 'r', 'd', 'd', 'r', 'd', 'd'), 'd') == 3\nassert     count_X(('d', 'd', 'r', 'd', 'd', 'd', 'd'), 'd') == 7\nassert     count_X(('d', 'r', 'd', 'd', 'r', 'd', 'd'), 'd') == 3\nassert     count_X(('d', 'r', 'd', 'd', 'r', 'd', 'd'), 'r') == 3\nassert     count_X(('d', 'd', 'r', 'd', 'd', 'd', 'd'), 'd') == 7\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_X(('a', 'a', 'a', 'b', 'b', 'a'), 'a') == 3\nassert     count_X(('a', 'a', 'a', 'b', 'b', 'a'), 'b') == 2\nassert     count_X(('a', 'a', 'a', 'b', 'b', 'a'), 'c') == 0\nassert     count_X(('a', 'a', 'a', 'b', 'b', 'a'), 'd') == 0\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1,2,3,4,5,6,7,8,9,10] == insert_element([10,9,8,7,6,5,4,3,2,1],1)\nassert     [1,3,4,5,6,7,8,9,10] == insert_element([10,9,8,7,6,5,4,3,2,1],2)\nassert     [1,4,5,6,7,8,9,10] == insert_element([10,9,8,7,6,5,4,3,2,1],3)\nassert     [1,5,6,7,8,9,10] == insert_element([10,9,8,7,6,5,4,3,2,1],4)\nassert     [1,6,7,8,9,10] == insert_element([10,9,8,7,6,5,4,3,2,1],5)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1, 2, 3, 4] == insert_element([4, 3, 2, 1], 1)\nassert     [1, 2, 1, 4] == insert_element([4, 3, 2, 1], 2)\nassert     [1, 2, 1, 4] == insert_element([4, 3, 2, 1], 4)\nassert     [1, 2, 1, 3, 4] == insert_element([4, 3, 2, 1], 3)\nassert     [1, 2, 1, 3, 4] == insert_element([4, 3, 2, 1], 5)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3,4,5],6) == [6,1,2,3,4,5]\nassert     insert_element([\"cat\", \"dog\", \"fish\"], \"snake\") == [\"snake\", \"cat\", \"dog\", \"fish\"]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     insert_element([1,2,3,4],0) == [0,1,2,3,4]\nassert     insert_element([],5) == [5]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     insert_element([],1) == [1]\nassert     insert_element([1],2) == [1,2]\nassert     insert_element([1,2],3) == [1,2,3]\nassert     insert_element([1,2,3],4) == [1,2,3,4]\nassert     insert_element([1,2,3,4],5) == [1,2,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1,2,3,4] == insert_element([3,2,1],2)\nassert     [1,2,3,4,5,6] == insert_element([3,2,1,5,6],7)\n\ndef remove_all(list,element):\n    '''\n    Write a function that takes in a list and a single element and returns a new list containing all the elements in the given list that do not equal the given element.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [0,1,2,3,4,5,6] == insert_element([0,1,2,3,4,5,6],2)\nassert     [0,1,2,2,3,4,5,6] == insert_element([0,1,2,3,4,5,6],2)\nassert     [0,1,2,2,2,3,4,5,6] == insert_element([0,1,2,3,4,5,6],2)\nassert     [0,1,2,3,4,5,6] == insert_element([0,1,2,3,4,5,6],2)\nassert     [0,1,2,3,4,5,6] == insert_element([0,1,2,3,4,5,6],2)\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     insert_element([1, 2, 3, 4], 0) == [0, 1, 2, 3, 4]\nassert     insert_element([1, 2, 3, 4], 5) == [5, 1, 2, 3, 4]\nassert     insert_element([1, 2, 3, 4], 10) == [10, 1, 2, 3, 4]\nassert     insert_element([1, 2, 3, 4], 1) == [1, 1, 2, 3, 4]\nassert     insert_element([1, 2, 3, 4], 5) == [5, 1, 2, 3, 4]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     insert_element([1,2,3],5)     == [1,5,2,3]\nassert     insert_element([1,2,3,4],5)     == [1,5,2,3,4]\nassert     insert_element([1,2,3],4)     == [1,4,2,3]\nassert     insert_element([1,2,3],5)     == [1,5,2,3]\nassert     insert_element([1,2,3,4],5)     == [1,5,2,3,4]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     convert([1, -3, 2, -3, -2, 3, -1]) == [(-1.5, -1), (-1.0, -0.75), (-1.5, 0), (-1.0, 0.75), (-1.5, 1), (-0.5, 1.5), (0.0, 1.5)]\nassert     convert([1, -3, 2, -2, -1]) == [(-1.5, -1), (-1.0, -0.75), (-1.5, 0), (-1.0, 0.75), (-1.5, 1), (-0.5, 1.5), (0.0, 1.5)]\nassert     convert([1, -3, 2, -1, -2, 3, -1]) == [(-1.5, -1), (-1.0, -0.75), (-1.5, 0), (-1.0, 0.75), (-1.5, 1), (-0.5, 1.5), (0.0, 1.5)]\nassert     convert([1, -3, 2, -1, -2]) == [(-1.5, -1), (-1.0, -0.75), (-1.5, 0), (-1.0, 0.75), (-1.5, 1), (-0.5, 1.5), (0.0, 1.5)]\nassert     convert([1, -3, 2, -1, -2, 3]) == [(-1.5, -1), (-1.0, -0.75), (-1.5, 0), (-1.0, 0.75), (-1.5, 1), (-0.5, 1.5), (0.0, 1.5)]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     convert(1+2j) == (1, 2), \"Function does not work correctly\"\nassert     convert(2+3j) == (2, 3), \"Function does not work correctly\"\nassert     convert(1+2j) == (1, 2), \"Function does not work correctly\"\nassert     convert(2+3j) == (2, 3), \"Function does not work correctly\"\n\nprint(\"Passed assert statements!\")\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     convert((1, 2))     ==    ((1.0, 2.0), 0.0)\nassert     convert((1, -2))     ==    ((1.0, -2.0), 0.0)\nassert     convert((-1, 2))     ==    ((1.0, 2.0), cmath.pi)\nassert     convert((-1, -2))     ==    ((1.0, -2.0), -cmath.pi)\nassert     convert((1, 0))     ==    ((1.0, 0.0), 0.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nconvert([1,2,3,4,5])\nconvert([(1,2),(3,4),(5,6)])\nconvert([1+3j,2-4j,3-5j,4+2j,5+1j])\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     convert((-3 + 4j)) == (3.0, 90.0)\nassert     convert((0 + 1j)) == (0.0, 180.0)\nassert     convert((-1 + 0j)) == (1.0, 270.0)\nassert     convert((1 + 1j)) == (2.0, 0.0)\nassert     convert((-1 + -1j)) == (1.0, 90.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     convert(0+0j) == (0.0, 0.0)\nassert     convert(1+0j) == (1.0, 0.0)\nassert     convert(1+0.1j) == (1.1, 0.1)\nassert     convert(0+1j) == (0.0, 1.0)\nassert     convert(1+1j) == (1.0, 1.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (convert((1, 2)) == (cmath.polar(1 + 2j), \n                           cmath.polar(1 - 2j), \n                           cmath.polar(1 + 2j)))\nassert     (convert((1, -2)) == (cmath.polar(1 - 2j), \n                           cmath.polar(1 + 2j), \n                           cmath.polar(1 - 2j)))\nassert     (convert((-1, -2)) == (cmath.polar(1 - 2j), \n                           cmath.polar(1 + 2j), \n                           cmath.polar(1 - 2j)))\nassert     (convert((-1, 2)) == (cmath.polar(1 - 2j), \n                           cmath.polar(1 + 2j), \n                           cmath.polar(1 - 2j)))\nassert     (convert((2, -1)) == (cmath.polar(1 - 2j), \n                           cmath.polar(1 + 2j), \n                           cmath.polar(1 - 2j)))\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef check_convert(numbers):\n    assert convert(numbers) == complex_to_polar(numbers)\n\nprint convert([complex(1,2), complex(2,3)])\nassert complex_to_polar([complex(1,2), complex(2,3)]) == [[1, 2, cmath.pi / 4], [2, 3, cmath.pi / 2]]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     convert([2+3j,1+4j]) == [(2.23606797749979, 1.0), (5.0, 4.0)]\nassert     convert([1+4j,-2+3j]) == [(5.0, 4.0), (3.141593, 2.8284271247461903)]\nassert     convert([2-3j,-1+4j]) == [(5.0, 4.0), (-3.141593, 2.8284271247461903)]\nassert     convert([1+2j,-2-1j]) == [(5.0, 4.0), (-3.141593, 2.8284271247461903)]\nassert     convert([-1-2j,-2+3j]) == [(5.0, 4.0), (-3.141593, 2.8284271247461903)]\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_integer([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]) == 5\nassert     count_integer([\"apple\", \"banana\", \"grapes\"]) == 0\nassert     count_integer([]) == 0\nassert     count_integer(['a', 'b', 'c']) == 0\nassert     count_integer([1, 2, 3, 4, 5]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     count_integer([]) == 0\nassert     count_integer([1, 2,'string', 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     count_integer([1, 2, [1, 2], 4, 5, 6, 7, 8, 9, 10]) == 10\n\ndef find_integer(list1, start, end):\n    '''\n    Write a python function that returns the index of the first occurrence of an integer in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_integer([1,2,3,4]) == 1\nassert     count_integer([1,2,3.4]) == 0\nassert     count_integer([1,2,'3',4]) == 2\nassert     count_integer([1,2,'3.4']) == 1\nassert     count_integer(['1','2','3']) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7])     ==     7\nassert     count_integer([1, '2', 3, 4, 5, 6, 7])     ==     7\nassert     count_integer([1, '2', '3', 4, 5, 6, 7])     ==     7\nassert     count_integer([])     ==     0\nassert     count_integer([1, 2, 3, 4, 5, '6', 7])     ==     7\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nassert     count_integer([1.1, 2.2, 3.3, 4.4, 5.5]) == 0\nassert     count_integer(['a', 'b', 'c']) == 0\nassert     count_integer([]) == 0\nassert     count_integer([1, 2, 3, 4, 5, 'a', 'b', 'c']) == 6\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, '2']) == 2\nassert     count_integer(['a', '2', '', '3', '', '4']) == 2\nassert     count_integer([]) == 0\nassert     count_integer([1, 2, 'a']) == 1\nassert     count_integer([1, 2, 3, 'a', 2, '3', 4]) == 3\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_integer([1, 2, 3, \"four\", 5]) == 4\nassert     count_integer([\"one\", 2, 3, \"four\", 5]) == 4\nassert     count_integer([\"one\", 2, \"three\", \"four\", 5]) == 4\nassert     count_integer([1, 2, 'three', \"four\", 5]) == 3\nassert     count_integer([1, 2, 3, 4, \"five\", 6, 7]) == 7\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_integer([1, 2, 'a', 2, 'c']) == 3\nassert count_integer(['ab', 'cd', 'pq', '12']) == 4\nassert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b']) == 10\nassert count_integer([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 10\nassert count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_integer([1, 2, 3, 4, '5', 6]) == 4\nassert     count_integer([1.5, 2.5, 3.5, 4.5, 5.5]) == 5\nassert     count_integer(['a', 'b', 'c', 'd', 'e', 'f']) == 6\nassert     count_integer(['a', 1.0, 2.5, 3.0, 4.5]) == 5\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_integer(['1','2','3','4','5']) == 5\nassert     count_integer(['1.5','2.5','3.5','4.5','5.5']) == 5\nassert     count_integer(['1.5','2.5','3.5','4.5','5.5', '6.5', '7.5', '8.5']) == 5\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\nassert     combinations_colors([1, 2, 3, 4, 5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 4), (3, 5), (4, 1), (4, 2), (4, 5), (5, 1), (5, 2), (5, 4)]\nassert     combinations_colors([1, 2, 3, 4, 5], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\n\ndef c_dist(l1, l2):\n    '''\n    Write a function that takes in two lists of integers and computes the sum of the absolute differences between each element in the two lists. Return this sum.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [(1,2,3), (1,3,2), (2,1,3), (2,3,1), (3,1,2), (3,2,1)] == combinations_colors([1,2,3], 3)\nassert     [] == combinations_colors([1,2,3], 0)\nassert     [(1,1), (2,2), (3,3)] == combinations_colors([1,2,3], 2)\nassert     [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), (3,3)] == combinations_colors([1,2,3], 3)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     combinations_colors([1,2,3,4], 1) == [\n            (1,),\n            (2,),\n            (3,),\n            (4,),\n            ]\nassert     combinations_colors([1,2,3,4], 2) == [\n            (1,2),\n            (1,3),\n            (1,4),\n            (2,3),\n            (2,4),\n            (3,4),\n            ]\nassert     combinations_colors([1,2,3,4], 3) == [\n            (1,2,3),\n            (1,2,4),\n            (1,3,4),\n            (2,3,4),\n            ]\nassert     combinations_colors([1,2,3,4], 4) == [\n            (1,2,3,4)\n            ]\nassert     combinations_colors([1,2,3,4], 0) == [\n            ()\n            ]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     set(combinations_colors(['r', 'g', 'b', 'c','m'], 3)) == set([('r', 'r', 'r'), ('r', 'r', 'g'), ('r', 'r', 'b'), ('r', 'r', 'c'), ('r', 'r','m'), ('r', 'g', 'r'), ('r', 'g', 'g'), ('r', 'g', 'b'), ('r', 'g', 'c'), ('r', 'g','m'), ('r', 'b', 'r'), ('r', 'b', 'g'), ('r', 'b', 'b'), ('r', 'b', 'c'), ('r', 'b','m'), ('r', 'c', 'r'), ('r', 'c', 'g'), ('r', 'c', 'b'), ('r', 'c','m'), ('r','m', 'r'), ('r','m', 'g'), ('r','m', 'b'), ('r','m', 'c'), ('g', 'g', 'g'), ('g', 'g', 'b'), ('g', 'g', 'c'), ('g', 'g','m'), ('g', 'b', 'g'), ('g', 'b', 'b'), ('g', 'b', 'c'), ('g', 'b','m'), ('g', 'c', 'g'), ('g', 'c', 'b'), ('g', 'c','m'), ('g','m', 'g'), ('g','m', 'b'), ('g','m', 'c'), ('b', 'b', 'b'), ('b', 'b', 'c'), ('b', 'b','m'), ('b', 'b', 'c'), ('b', 'c', 'b'), ('b', 'c','m'), ('b','m', 'b'), ('b','m', 'c'), ('b','m','m'), ('c', 'c', 'c'), ('c', 'c', 'b'), ('c', 'c','m'), ('c','m', 'c'), ('c','m', 'b'), ('c','m','m')])\n\n\ndef is_valid_path(path, maps):\n    '''\n    Write a function that takes in a path, and a 2D list, and returns true or false depending on if the path is valid. A path is valid if it contains at least one '?' and it goes from one place to an unopened square.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     combinations_colors([1, 2, 3, 4], 3) ==     [[(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)], [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)]]\n\nassert     combinations_colors([1, 2, 3, 4, 5], 4) ==     [[(1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3), (1, 1, 2, 1), (1, 1, 2, 2), (1, 1, 2, 3), (1, 1, 3, 1), (1, 1, 3, 2), (1, 1, 3, 3), (1, 2, 1, 1), (1, 2, 1, 2), (1, 2, 1, 3), (1, 2, 2, 1), (1, 2, 2, 2), (1, 2, 2, 3), (1, 2, 3, 1), (1, 2, 3, 2), (1, 2, 3, 3), (1, 3, 1, 1), (1, 3, 1, 2), (1, 3, 1, 3), (1, 3, 2, 1), (1, 3, 2, 2), (1, 3, 2, 3), (1, 3, 3, 1), (1, 3, 3, 2), (1, 3, 3, 3), (2, 1, 1, 1), (2, 1, 1, 2), (2, 1, 1, 3), (2, 1, 2, 1), (2, 1, 2, 2), (2, 1, 2, 3), (2, 1, 3, 1), (2, 1, 3, 2), (2, 1, 3, 3), (2, 2, 1, 1), (2, 2, 1, 2), (2, 2, 1, 3), (2, 2, 2, 1), (2, 2, 2, 2), (2, 2, 2, 3), (2, 2, 3, 1), (2, 2, 3, 2), (2, 2, 3, 3), (2, 3, 1, 1), (2, 3, 1, 2), (2, 3, 1, 3), (2, 3, 2, 1), (2, 3, 2, 2), (2, 3, 2, 3), (2, 3, 3, 1), (2, 3, 3, 2), (2, 3, 3, 3), (3, 1, 1, 1), (3, 1, 1, 2), (3, 1, 1, 3), (3, 1, 2, 1), (3, 1, 2, 2), (3, 1, 2, 3), (3, 1, 3, 1), (3, 1, 3, 2), (3, 1, 3, 3), (3, 2, 1, 1), (3, 2, 1, 2), (3, 2, 1, 3), (3, 2, 2, 1), (3, 2, 2, 2), (3, 2, 2, 3), (3, 2, 3, 1), (3, 2, 3, 2), (3, 2, 3, 3), (3, 3, 1, 1), (3, 3, 1, 2), (3, 3, 1, 3), (3, 3, 2, 1), (3, 3, 2, 2), (3, 3, 2, 3), (3, 3, 3, 1), (3, 3, 3, 2), (3, 3, 3, 3)]\n\nassert     combinations_colors([1, 2, 3, 4, 5, 6], 3) ==     [[(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)]]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (\n    [\n        (('A', 'B', 'C'), ('a', 'b', 'c')),\n        (('A', 'B', 'C'), ('A', 'b', 'c')),\n        (('A', 'B', 'C'), ('a', 'B', 'c')),\n        (('A', 'B', 'C'), ('a', 'B', 'C')),\n        (('A', 'B', 'C'), ('A', 'C', 'b')),\n        (('A', 'B', 'C'), ('A', 'C', 'c')),\n        (('A', 'B', 'C'), ('a', 'B', 'c')),\n        (('A', 'B', 'C'), ('a', 'B', 'C')),\n        (('A', 'B', 'C'), ('A', 'C', 'c')),\n        (('A', 'B', 'C'), ('A', 'C', 'b')),\n    ] == combinations_colors(['A', 'B', 'C', 'a', 'b', 'c'], 3)\n)\n\nassert     (\n        [\n            (('A', 'B', 'C'), ('A', 'B', 'c')),\n            (('A', 'B', 'C'), ('A', 'B', 'c')),\n            (('A', 'B', 'C'), ('a', 'B', 'c')),\n            (('A', 'B', 'C'), ('a', 'B', 'c')),\n            (('A', 'B', 'C'), ('A', 'C', 'c')),\n            (('A', 'B', 'C'), ('A', 'C', 'c')),\n            (('A', 'B', 'C'), ('a', 'B', 'c')),\n            (('A', 'B', 'C'), ('a', 'B', 'c')),\n            (('A', 'B', 'C'), ('A', 'C', 'c')),\n            (('A', 'B', 'C'), ('A', 'C', 'c')),\n        ] == combinations_colors(['A', 'B', 'C', 'a', 'b', 'c'], 3)\n    )\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)] == combinations_colors([1, 2, 3], 3)\nassert     [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)] == combinations_colors([1, 2, 3], 3)\nassert     [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)] == combinations_colors([1, 2, 3], 3)\nassert     [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)] == combinations_colors([1, 2, 3], 3)\nassert     [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)] == combinations_colors([1, 2, 3], 3)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     combinations_colors([1, 2, 3], 1) ==     [(1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\nassert     combinations_colors([1, 2, 3], 2) ==     [(1, 2), (1, 3), (2, 3), (1, 2, 3)]\nassert     combinations_colors([1, 2, 3], 3) ==     [(1, 2, 3)]\nassert     combinations_colors([1, 2, 3], 4) ==     []\nassert     combinations_colors([1, 2, 3], 0) ==     []\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(1,2), (1,3), (2,3)]\nassert     combinations_colors(['a', 'b', 'c'], 2) == [('a', 'b'), ('a', 'c'), ('b', 'c')]\nassert     combinations_colors(['a', 'b', 'c'], 3) == [('a', 'b', 'c')]\nassert     combinations_colors(['a', 'b', 'c'], 4) == [('a', 'b', 'c', 'a'), ('a', 'b', 'c', 'b'), ('a', 'b', 'c', 'c'), ('a', 'b', 'c', 'a', 'b'), ('a', 'b', 'c', 'a', 'c'), ('a', 'b', 'c', 'b', 'c'), ('a', 'b', 'c', 'a', 'b', 'c')]\nassert     combinations_colors(['a', 'b', 'c', 'd'], 4) == [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd', 'a'), ('a', 'b', 'c', 'd', 'b'), ('a', 'b', 'c', 'd', 'c'), ('a', 'b', 'c', 'd', 'a', 'b'), ('a', 'b', 'c', 'd', 'a', 'c'), ('a', 'b', 'c', 'd', 'b', 'c'), ('a', 'b', 'c', 'd', 'a', 'b', 'c')]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     combinations_colors([1,2,3,4], 1) == [((1,),), ((2,),), ((3,),), ((4,),)]\nassert     combinations_colors([1,2,3,4], 2) == [((1,2),), ((1,3),), ((1,4),), ((2,3),), ((2,4),), ((3,4,),)]\nassert     combinations_colors([1,2,3,4], 3) == [((1,2,3),), ((1,2,4),), ((1,3,4),), ((2,3,4),)]\nassert     combinations_colors([1,2,3,4], 4) == [((1,2,3,4),)]\nassert     combinations_colors([1,2,3,4], 5) == [((1,2,3,4),)]\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(9) == 3\nassert     count_Primes_nums(100) == 25\nassert     count_Primes_nums(100) == 25\nassert     count_Primes_nums(500) == 16\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\nassert count_Primes_nums(1000) == 168\nassert count_Primes_nums(101) == 0\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(10) == 4\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(100) == 7\nassert     count_Primes_nums(1000) == 195\nassert     count_Primes_nums(1000000) == 648\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(50) == 15\nassert     count_Primes_nums(100) == 25\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Primes_nums(50) ==     15\nassert     count_Primes_nums(40) ==     15\nassert     count_Primes_nums(30) ==     13\nassert     count_Primes_nums(20) ==     11\nassert     count_Primes_nums(10) ==     5\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 0\nassert     count_Primes_nums(3) == 1\nassert     count_Primes_nums(4) == 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 0\nassert     count_Primes_nums(3) == 1\nassert     count_Primes_nums(4) == 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(5) == 1\nassert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(15) == 6\nassert     count_Primes_nums(20) == 8\nassert     count_Primes_nums(25) == 11\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(0)         == 0\nassert     count_Primes_nums(1)         == 0\nassert     count_Primes_nums(2)         == 1\nassert     count_Primes_nums(3)         == 2\nassert     count_Primes_nums(4)         == 2\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     swap_numbers(10,9) == (9,10)\nassert     swap_numbers(100,200) == (200,100)\nassert     swap_numbers(42,1) == (1,42)\nassert     swap_numbers(10,10) == (10,10)\nassert     swap_numbers(10,9) == (9,10)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (6, 7) == swap_numbers(7, 6)\nassert     (-1, 0) == swap_numbers(-1, 0)\nassert     (100, 200) == swap_numbers(200, 100)"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (1,2) == swap_numbers(2,1)\nassert     (1,2) == swap_numbers(2,2)\nassert     (1,2) == swap_numbers(2,3)\nassert     (1,2) == swap_numbers(1,2)\nassert     (1,2) == swap_numbers(2,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(10,25) == (25,10)\nassert     swap_numbers(-1,1) == (1,-1)\nassert     swap_numbers(0,0) == (0,0)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     swap_numbers(0,3) == (3,0)\nassert     swap_numbers(1,0) == (0,1)\nassert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(3,4) == (4,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (3,1) == swap_numbers(1,3)\nassert     (3,5) == swap_numbers(5,3)\nassert     (3,6) == swap_numbers(6,3)\nassert     (3,3) == swap_numbers(3,3)\nassert     (3,1) == swap_numbers(1,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(3,5) == (5,3)\n\ndef swap_numbers_1(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef swap_letters(s,t):\n    '''\n    Write a function that takes in two strings and returns a tuple with the second string and then the first string.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (2,3) == swap_numbers(3,2)\nassert     (1,5) == swap_numbers(5,1)\nassert     (5,5) == swap_numbers(5,5)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [34, 56] == swap_numbers(56, 34)\nassert     [-34, 56] == swap_numbers(-34, 56)\nassert     [34, -56] == swap_numbers(34, -56)\nassert     [-34, -56] == swap_numbers(-34, -56)\nassert     [34, 56] == swap_numbers(34, 56)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximize_elements((4, 10, 5, 3), (1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     maximize_elements((4, 10, 5, 3), (1, 6, 2, 7)) == (1, 6, 2, 7)\nassert     maximize_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     maximize_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     maximize_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximize_elements((1, 3, 5), (2, 4, 6)) == (5, 6)\nassert     maximize_elements((1, 3, 5), (2, 4, 6, 7, 8)) == (5, 7)\nassert     maximize_elements((1, 2, 3), (4, 5, 6)) == (6, 6)\nassert     maximize_elements((1, 2, 3), (4, 5, 6, 7, 8)) == (6, 7)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximize_elements(tup1, tup2) == [tup1[0], tup2[0]]\nassert     maximize_elements(tup1, tup3) == [tup1[0], tup3[0]]\nassert     maximize_elements(tup1, tup4) == [tup1[0], tup4[0]]\nassert     maximize_elements(tup1, tup5) == [tup1[0], tup5[0]]\nassert     maximize_elements(tup1, tup6) == [tup1[0], tup6[0]]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximize_elements((3, 6), (2, 7)) == (6, 7)\nassert     maximize_elements((1, 9, 2), (5, 7, 11)) == (9, 7, 11)\nassert     maximize_elements((5, 3), (2, 7)) == (7, 5)\nassert     maximize_elements((3, 9, 2), (5, 7, 11)) == (9, 11, 7)"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (maximize_elements((1, 2), (3, 4)) == (2, 4))\nassert     (maximize_elements((2, 4), (1, 3)) == (2, 4))\nassert     (maximize_elements((1, 2), (3, 4)) == (1, 4))\nassert     (maximize_elements((1, 2), (1, 2)) == (2, 2))\nassert     (maximize_elements((1, 1), (1, 1)) == (1, 1))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     maximize_elements((4, 6), (1, 2)) == (6, 4)\nassert     maximize_elements((4, 6), (1, 5)) == (6, 5)\nassert     maximize_elements((5, 6), (5, 6)) == (5, 6)\nassert     maximize_elements((5, 6), (6, 5)) == (5, 6)\nassert     maximize_elements((5, 6), (6, 5)) == (5, 6)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         (maximize_elements(test_tup1, test_tup2)         == (2, 2, 2, 2, 2, 3, 4, 4, 4, 4))\nassert         (maximize_elements(test_tup2, test_tup1)         == (2, 2, 2, 2, 2, 3, 4, 4, 4, 4))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef convert_to_seconds(hour, minute, second):\n    '''\n    Write a function that converts time to seconds.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximize_elements((1,2,3,4,5), (5,4,3,2,1)) == (5,4,3,2,1)\nassert     maximize_elements((1,2,3,4,5), (4,3,2,1,5)) == (4,3,2,1,5)\nassert     maximize_elements((0,1,2,3,4,5), (5,4,3,2,1)) == (5,4,3,2,1)\nassert     maximize_elements((0,1,2,3,4,5), (4,3,2,1,5)) == (4,3,2,1,5)\nassert     maximize_elements((1,2,3,4,5), (0,4,3,2,1)) == (0,4,3,2,1)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (0,0) == maximize_elements(\n        ((1,2), (3,4)), \n        ((5,6), (7,8)))\n\nassert     (-1, -1) == maximize_elements(\n        ((1,2), (3,4)), \n        ((5,6), (7,8)))\n\nassert     (1,1) == maximize_elements(\n        ((1,2), (3,4)), \n        ((5,6), (7,8)))\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef tester():\n    from math import sqrt\n    for i in range(2,100):\n        if newman_prime(i):\n            print(i)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     newman_prime(2) == 3\nassert     newman_prime(5) == 5\nassert     newman_prime(10) == 97\nassert     newman_prime(100) == 97\nassert     newman_prime(1000) == 997\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef newman_primes(N):\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     newman_prime(2) == 2\nassert     newman_prime(3) == 3\nassert     newman_prime(5) == 5\nassert     newman_prime(9) == 11\nassert     newman_prime(17) == 19\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nassert \nassert newman_prime(3) == 5\nassert newman_prime(5) == 7\nassert newman_prime(6) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (division_elements((4,5,6), (1,1,1)) == (1.0, 1.0, 2.0))\nassert     (division_elements((4,5,6), (1,1,2)) == (1.0, 1.0, 1.0))\nassert     (division_elements((4,5,6), (2,2,2)) == (1.0, 1.0, 2.0))\nassert     (division_elements((4,5,6), (3,3,3)) == (1.0, 1.0, 3.0))\nassert     (division_elements((1,2,3), (1,1,1)) == (1.0, 0.5, 1.0))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     division_elements((0,3,1),(1,4,1)) == [(0,1),(1,2),(2,1)]\nassert     division_elements((4,1,5,2),(1,1,4,1)) == [(4,4),(5,5),(2,4)]\nassert     division_elements((1,1,1,1),(1,1,1,1)) == [(1,1)]\nassert     division_elements((1,3,1,1),(1,1,1,1)) == [(1,3)]\nassert     division_elements((1,1,3,2,4,1),(2,1,2,1,1,1)) == [(1,1),(2,1),(3,1)]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     division_elements((\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"), (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")) ==     (((0.0, 0.3333333333333333), (0.3333333333333333, 0.6666666666666666), (0.6666666666666666, 1.0)), ((0.0, 0.0), (0.5, 0.5), (1.0, 1.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)))\nassert     division_elements((\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"), (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")) ==     (((0.0, 0.3333333333333333), (0.3333333333333333, 0.6666666666666666), (0.6666666666666666, 1.0)), ((0.0, 0.0), (0.5, 0.5), (1.0, 1.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)))\nassert     division_elements((\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"), (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")) ==     (((0.0, 0.3333333333333333), (0.3333333333333333, 0.6666666666666666), (0.6666666666666666, 1.0)), ((0.0, 0.0), (0.5, 0.5), (1.0, 1.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)), ((0.0, 0.0), (0.0, 0.0), (0.0, 0.0)))\nassert     division_elements((\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"), (\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")) ==     (((0.0, 0.3333333333333333), (0.3333333333333333, 0.6666666666666666), (0.6666666666666666, 1.0)), ((0.0, "
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (division_elements(('1', '2', '3', '4', '5', '6'), \n            ('-1', '-2', '-3', '-4', '-5', '-6')) == (\n                ('0', '0', '0', '0', '0', '0'),\n                ('2', '4', '6', '0', '0', '0')))\nassert     (division_elements(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), \n            ('-1', '-2', '-3', '-4', '-5', '-6', '-7', '-8', '-9', '-10')) == (\n                ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n                ('2', '2', '2', '2', '2', '2', '2', '2', '2', '2')))\nassert     (division_elements(('1', '2', '3', '4', '5'), \n            ('-1', '-2', '-3', '-4', '-5')) == (\n                ('0', '0', '0', '0', '0'),\n                ('2', '2', '2', '2', '2')))\nassert     (division_elements(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'), \n            ('-1', '-2', '-3', '-4', '-5', '-6', '-7', '-8', '-9', '-10')) == (\n                ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n                ('2', '2', '2', '2', '2', '2', '2', '2', '2', '2')))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     division_elements( (1,2,3,4),(5,2,7,4) ) == (2, 0, 3, 0)\nassert     division_elements( (10,2,3,4),(5,2,7,4) ) == (10, 2, 3, 2)\nassert     division_elements( (1,2,3,4),(5,2,7,4) ) == (0.6, 0.8, 0.6, 0.8)\nassert     division_elements( (1,2,3,4),(5,2,7,4) ) == (0.6, 0.8, 0.6, 0.8)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     division_elements(\n    (1, 3, 5), (5, 4, 6)\n    ) == (1, 2, 3)\n\ndef compute_lambda(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs a mathematical lambda function to perform addition operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     division_elements((1,2,3), (2,4,6)) == (0.5, 0.5, 1.5)\nassert     division_elements((1,2,3), (1,4,6)) == (0.25, 0.25, 1.25)\nassert     division_elements((-1,2,3), (1,4,6)) == (-0.5, 0.5, -1.5)\nassert     division_elements((-1,2,3), (-1,4,6)) == (-0.25, 0.25, -1.25)\nassert     division_elements((1,2,3), (2,4,6)) == (0.5, 0.5, 1.5)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n(1.0, 1.0, 2.0, 2.0) == division_elements((1.0, 1.0, 2.0, 2.0), (4.0, 4.0, 5.0, 5.0))\nassert \n(1.0, 1.0, 2.0, 2.0) == division_elements((4.0, 4.0, 5.0, 5.0), (1.0, 1.0, 2.0, 2.0))\nassert \n(1.0, 2.0, 4.0, 8.0) == division_elements((10.0, 0.0, 5.0, 0.0), (2.0, 2.0, 2.0, 2.0))\nassert \n(10.0, 0.0, 5.0, 0.0) == division_elements((10.0, 0.0, 5.0, 0.0), (2.0, 2.0, 2.0, 2.0))\nassert \n(0.0, 2.0, 0.0, 2.0) == division_elements((2.0, 0.0, 0.0, 2.0), (2.0, 2.0, 2.0, 2.0))\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 4) == ([1, 2, 3, 4], [5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 5) == ([1, 2, 3, 4, 5], [6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 6) == ([], [1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7,8],4) == ((1,2,3,4), (5,6,7,8))\nassert     split_two_parts([1,2,3,4,5,6,7,8],5) == ((1,2,3,4,5), (6,7,8))\nassert     split_two_parts([1,2,3,4,5,6,7,8],6) == ((1,2,3,4,5,6), (7,8))\nassert     split_two_parts([1,2,3,4,5,6,7,8],7) == ((1,2,3,4,5,6,7), (8))\nassert     split_two_parts([1,2,3,4,5,6,7,8],8) == ((1,2,3,4,5,6,7,8), ())\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         split_two_parts([1,2,3,4,5,6], 2) == ([1, 2], [3, 4, 5, 6])\nassert         split_two_parts([1,2,3,4,5,6], 4) == ([1, 2], [3, 4, 5, 6])\nassert         split_two_parts([1,2,3,4,5,6], 6) == ([1, 2], [3, 4, 5, 6])\nassert         split_two_parts([1,2,3,4,5,6], 7) == ([1, 2], [3, 4, 5, 6])\nassert         split_two_parts([1,2,3,4,5,6], 8) == ([1, 2], [3, 4, 5, 6])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5], [])\nassert     split_two_parts([1, 2, 3, 4, 5], 10) == ([1, 2, 3, 4, 5], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (split_two_parts([1,2,3,4,5,6,7,8], 3) == ([1,2,3],[4,5,6,7,8]))\nassert     (split_two_parts([1,2,3,4,5,6,7,8], 4) == ([1,2,3,4],[5,6,7,8]))\nassert     (split_two_parts([1,2,3,4,5,6,7,8], 5) == ([1,2,3,4,5],[6,7,8]))\nassert     (split_two_parts([1,2,3,4,5,6,7,8], 6) == ([1,2,3,4,5,6],[7,8]))\nassert     (split_two_parts([1,2,3,4,5,6,7,8], 7) == ([1,2,3,4,5,6,7],[8]))\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         split_two_parts([1,2,3,4], 2) == ([1,2], [3,4])\nassert         split_two_parts([1,2,3,4,5,6,7,8,9], 4) == ([1,2,3,4], [5,6,7,8,9])\nassert         split_two_parts([1,2,3,4,5,6,7,8,9], 10) == ([1,2,3,4,5,6,7,8,9], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nassert split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\nassert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])\nassert split_two_parts([1, 2, 3, 4, 5, 6], 4) == ([1, 2, 3, 4], [5, 6])\nassert split_two_parts([1, 2, 3, 4, 5, 6], 5) == ([1, 2, 3, 4, 5], [6])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ( [1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4, 5], 2) == ( [1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 3) == ( [1, 2, 3], [4, 5, 6, 7, 8])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_two_parts([3, 4, 5, 6], 2) == ([3, 4], [5, 6])\nassert     split_two_parts([3, 4, 5, 6, 7, 8], 4) == ([3, 4, 5], [6, 7, 8])\nassert     split_two_parts([3, 4, 5, 6, 7, 8], 5) == ([3, 4, 5], [6, 7, 8])\nassert     split_two_parts([3, 4, 5, 6, 7, 8], 10) == ([], [3, 4, 5, 6, 7, 8])\nassert     split_two_parts([3, 4, 5, 6, 7, 8], -1) == ([], [3, 4, 5, 6, 7, 8])\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef vowel_count(str):\n    '''\n    Write a function vowel_count(str), that counts the number of vowels in the string.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         dog_age(1) ==      0\nassert         dog_age(2) ==      1\nassert         dog_age(3) ==      3\nassert         dog_age(4) ==      7\nassert         dog_age(5) ==      14\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dog_age(8) == \"7 years\"\nassert     dog_age(13) == \"9 years\"\nassert     dog_age(20) == \"10 years\"\nassert     dog_age(32) == \"12 years\"\nassert     dog_age(52) == \"14 years\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [13, 7] == dog_age([1, 2, 3, 4, 5])\nassert     [15, 7] == dog_age([1, 2, 3, 4, 6])\nassert     [17, 7] == dog_age([1, 2, 3, 4, 7])\nassert     [21, 7] == dog_age([1, 2, 3, 4, 10])\nassert     [25, 7] == dog_age([1, 2, 3, 4, 15])\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dog_age(2) == 15.5\nassert     dog_age(2.5) == 19.5\nassert     dog_age(3) == 22.5\nassert     dog_age(3.5) == 26.5\nassert     dog_age(4) == 30.5\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dog_age(4) == 8\nassert     dog_age(5) == 14\nassert     dog_age(6) == 21\nassert     dog_age(7) == 28\nassert     dog_age(8) == 34\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dog_age(2) == 9\nassert     dog_age(3) == 7\nassert     dog_age(1) == 0\nassert     dog_age(0) == 0\nassert     dog_age(1.5) == 4\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dog_age(0) == 0\nassert     dog_age(4) == 1\nassert     dog_age(5) == 2\nassert     dog_age(9) == 3\nassert     dog_age(10) == 4\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dog_age(4) == 7\nassert     dog_age(5) == 10\nassert     dog_age(6) == 13\nassert     dog_age(7) == 16\nassert     dog_age(8) == 19\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef list_reverse(S):\n    '''\n    Write a function that takes in a list and returns a new list with the values of the original list reversed.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef int_to_list(n):\n    '''\n    Write a function that takes in an integer n and returns a list of n elements in the form of a list. The elements of the list should be integers.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         list_split(['a','b','c','d','e','f','g','h','i','j','k','l','m','n'],2) == [\n                ['a','b','c','d','e','f','g','h','i','j','k','l','m','n'][0::2]\n                ['b','c','d','e','f','g','h','i','j','k','l','m','n'][1::2]]\nassert         list_split(['a','b','c','d','e','f','g','h','i','j','k','l','m','n'],3) == [\n                ['a','b','c','d','e','f','g','h','i','j','k','l','m','n'][0::3]\n                ['b','c','d','e','f','g','h','i','j','k','l','m','n'][1::3]\n                ['c','d','e','f','g','h','i','j','k','l','m','n'][2::3]]\nassert         list_split(['a','b','c','d','e','f','g','h','i','j','k','l','m','n'],4) == [\n                ['a','b','c','d','e','f','g','h','i','j','k','l','m','n'][0::4]\n                ['b','c','d','e','f','g','h','i','j','k','l','m','n'][1::4]\n                ['c','d','e','f','g','h','i','j','k','l','m','n'][2::4]\n                ['d','e','f','g','h','i','j','k','l','m','n'][3::4]]\nassert         list_split(['a','b','c','d','e','f','g','h','i','j','k','l','m','n'],5) == [\n                ['a','b','c','d','e','f','g','h','i','j','k','l','m','n'][0::5]\n                ['b','c','d','e','f','g','h','i','j','k','l','m','n'][1::5]\n                ['c','d','e','f','g','h','i','j','k','l','m','n'][2::5]\n                ['d','e','f','g','h','i','j','k','l','m','n'][3::5]\n                ['e','f','g','h','i','j','k','l','m','n'][4::5]]\nassert         list_split(['a','b','c','d','e','f','g','h','i','j','k','l','m','n'],6) == [\n                ['a','b','c','d','e','f','g','h','i','j','k','l','m','n'][0::6]\n                ['b','c','d','e','f','g','h','i','j','k','l','m','n'][1::6]\n                ['c','d','e','f','g','h','i','j','k','l','m','n'][2::6]\n                ['d','e','f','g','h','i','j','k','l','m','n'][3::6]\n                ['e','f','g','h','i','j','k','l','m','n'][4::6]\n                ['f','g','h','i','j','k','l','m','n'][5::6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 8) == [[1, 2, 3, 4, 5, 6, 7], [8, 9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == [[1, 2, 3, 4, 5, 6, 7, 8], [9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     list_split([1,2,3,4,5], 3) == [[1,2,3],[4,5]]\nassert     list_split([1,2,3,4,5], 4) == [[1,2,3,4],[5]]\nassert     list_split([1,2,3,4,5], 5) == [[1,2,3,4,5]]\nassert     list_split([1,2,3,4,5], 6) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7], 3)    == [ [1, 2], [3, 4], [5, 6], [7] ]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 2)    == [ [1, 2], [3, 4], [5, 6], [7] ]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 1)    == [ [1], [2], [3], [4], [5], [6], [7] ]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 7)    == [ [1, 2, 3, 4, 5, 6, 7] ]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 8)    == [ [1, 2, 3, 4, 5, 6, 7] ]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 5) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 3) == [[1, 2, 3], [4]]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     list_split([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\nassert     list_split([1,2,3,4,5,6], 1) == [[1],[2],[3],[4],[5],[6]]\nassert     list_split([1,2,3,4,5,6,7], 2) == [[1,2],[3,4],[5,6],[7]]\nassert     list_split([1,2,3,4,5,6,7,8], 3) == [[1,2,3],[4,5,6],[7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 4) == [[1,2,3,4],[5,6,7,8]]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     lateralsurface_cube(1)    == 6\nassert     lateralsurface_cube(2)    == 12\nassert     lateralsurface_cube(3)    == 24\nassert     lateralsurface_cube(4)    == 24\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(4) == 24\nassert     lateralsurface_cube(5) == 30\nassert     lateralsurface_cube(6) == 36\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lateralsurface_cube(5) == 200\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(0) == 0\nassert     lateralsurface_cube(-1) == 0\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert _______________ == _______________\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(1)    ==     6\nassert     lateralsurface_cube(2)    ==     12\nassert     lateralsurface_cube(3)    ==     18\nassert     lateralsurface_cube(4)    ==     24\nassert     lateralsurface_cube(5)    ==     30\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(2) == 12\nassert     lateralsurface_cube(3) == 54\nassert     lateralsurface_cube(4) == 304\nassert     lateralsurface_cube(5) == 704\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lateralsurface_cube(1)     == 6\nassert     lateralsurface_cube(2)     == 12\nassert     lateralsurface_cube(3)     == 24\nassert     lateralsurface_cube(4)     == 48\nassert     lateralsurface_cube(5)     == 120"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef lateralsurface_cylinder(r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert _________ == _________\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(4)     == 4*4*6\nassert     lateralsurface_cube(1)     == 6\nassert     lateralsurface_cube(0)     == 0"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 5\nassert     square_Sum(4) == 3\nassert     square_Sum(10) == 225\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_Sum(5) == 361\nassert     square_Sum(10) == 55\nassert     square_Sum(100) == 2550\n\n\ndef bin_Count(n):\n    '''\n    Write a python function that takes in a non-negative integer n and returns the number of ways to encode n as a string with maximum number of consecutive 1s.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_Sum(0)         == 0\nassert     square_Sum(1)         == 1\nassert     square_Sum(2)         == 1\nassert     square_Sum(3)         == 4\nassert     square_Sum(4)         == 9\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 1\nassert     square_Sum(4) == 3\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_Sum(1) == 0\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 1\nassert     square_Sum(4) == 2\nassert     square_Sum(5) == 3\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ______________ == ______________\nprint('Your code passes the check. Well done!')\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_Sum(3)     == 25\nassert     square_Sum(4)     == 78\nassert     square_Sum(5)     == 285\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     square_Sum(10) == 652\nassert     square_Sum(20) == 564"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(3) == 25\nassert     square_Sum(5) == 55\n\n\ndef non_square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the square of all the non-square natural numbers less than n.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 25\nassert     square_Sum(3) == 153\nassert     square_Sum(4) == 5025\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_star_num(5) == '*****'\nassert     find_star_num(3) == '***'\nassert     find_star_num(1) == '*'\nassert     find_star_num(0) == ''\nassert     find_star_num(7) == ''\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 19\nassert     find_star_num(3) == 123\nassert     find_star_num(4) == 1234\nassert     find_star_num(5) == 12345\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 19\nassert     find_star_num(3) == 123\nassert     find_star_num(4) == 1234\nassert     find_star_num(5) == 12345\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_star_num(1) == 0\nassert     find_star_num(2) == 1\nassert     find_star_num(3) == 5\nassert     find_star_num(4) == 22\nassert     find_star_num(5) == 44\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(5) == 13\nassert     find_star_num(10) == 41\nassert     find_star_num(99) == 984\nassert     find_star_num(100) == 976\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_star_num(5) == 21\nassert     find_star_num(2) == 11\nassert     find_star_num(6) == 51\nassert     find_star_num(3) == 25\nassert     find_star_num(8) == 645\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_star_num(10) == 13\nassert     find_star_num(0) == 1\nassert     find_star_num(3) == 21\nassert     find_star_num(8) == 216\nassert     find_star_num(22) == 161429\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_star_num(2) == 4\nassert     find_star_num(3) == 9\nassert     find_star_num(4) == 16\nassert     find_star_num(5) == 25\nassert     find_star_num(6) == 36\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_star_num(3) == 2\nassert     find_star_num(5) == 4\nassert     find_star_num(10) == 5\nassert     find_star_num(20) == 5\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('#') == 35\nassert     ascii_value('$') == 36\nassert     ascii_value('[') == 91\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('Z') == 90\nassert     ascii_value('$') == 36\nassert     ascii_value('+') == 43\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('z') == 122\nassert     ascii_value('A') == 65\nassert     ascii_value('Z') == 90\nassert     ascii_value('0') == 48\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('z') == 122\nassert     ascii_value(' ') == 32\nassert     ascii_value('@') == 64\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('d') == 100\nassert     ascii_value('A') == 65\nassert     ascii_value('D') == 102\nassert     ascii_value('a') == 97\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('Z') == 90\nassert     ascii_value('a'*100) == 97\nassert     ascii_value('x'*100) == 120\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     ascii_value('a') == 97, \"ascii_value('a') is wrong\"\nassert     ascii_value('A') == 65, \"ascii_value('A') is wrong\"\nassert     ascii_value('.') == 46, \"ascii_value('.') is wrong\"\nassert     ascii_value('A') == 65, \"ascii_value('A') is wrong\"\nassert     ascii_value('@') == 64, \"ascii_value('@') is wrong\"\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nascii_value('a') == 97\nascii_value('z') == 122\nascii_value('%') == 37\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('@') == 64\nassert     ascii_value(' ') == 32\nassert     ascii_value('$') == 36\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([10,20,30,40,50]) == 100\nassert     sum_even_and_even_index([1,2,3,4,5]) == 10\nassert     sum_even_and_even_index([100,200,300,400,500]) == 500\nassert     sum_even_and_even_index([0,0,0,0,0]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 6\nassert     sum_even_and_even_index([1, 3, 5]) == 6\nassert     sum_even_and_even_index([1, 1, 1]) == 3\nassert     sum_even_and_even_index([1, 2, 3]) == 6\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([]) == 0\nassert     sum_even_and_even_index([1,3,5,7]) == 12\nassert     sum_even_and_even_index([5,2,7,9,9]) == 25\nassert     sum_even_and_even_index([1,3,5,7,9]) == 22\nassert     sum_even_and_even_index([1,3,5,7,9,4,10,3,2,5,1,3]) == 22\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_even_and_even_index([1,3,4,7,5,9,6,2]) == 44\nassert     sum_even_and_even_index([1,3,5,7,9]) == 13\nassert     sum_even_and_even_index([1,2,3,4,5,6]) == 0\n\ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1,2,3,4]) == 10\nassert     sum_even_and_even_index([0,0,0,0]) == 0\nassert     sum_even_and_even_index([1,0,2]) == 1\nassert     sum_even_and_even_index([1,2,3]) == 2\nassert     sum_even_and_even_index([1,2,0,3]) == 4\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_even_and_even_index([2, 4, 3, 6, 5, 8, 7, 9, 11, 21, 19, 17, 19, 11, 21]) == 46, \"wrong result\"\nassert     sum_even_and_even_index([2, 4, 3, 6, 5, 8, 7, 9, 11, 21]) == 22, \"wrong result\"\nassert     sum_even_and_even_index([-2, -4, -3, -6, -5, -8, -7, -9, -11, -21, -19, -17, -19, -11, -21]) == -2, \"wrong result\"\nassert     sum_even_and_even_index([-2, -4, -3, -6, -5, -8, -7, -9, -11]) == -10, \"wrong result\"\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_even_and_even_index([2, 1, 2, 3, 4, 5, 6]) == 12\nassert     sum_even_and_even_index([2, 2, 2, 3, 3, 4, 4]) == 8\nassert     sum_even_and_even_index([2, 3, 4, 5]) == 9\nassert     sum_even_and_even_index([1, 3, 5]) == 4\nassert     sum_even_and_even_index([10, 10, 10]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_even_and_even_index([2, 4, 6, 8, 10]) == 10\nassert     sum_even_and_even_index([2, 4, 5, 10]) == 12\nassert     sum_even_and_even_index([3, 4, 5, 7]) == 16\nassert     sum_even_and_even_index([]) == 0\nassert     sum_even_and_even_index([2, 4, 5, 6]) == 12\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([2, 1, 6, 9, 8, 3, 4, 7]) == 26, \"The function should return 26\"\nassert     sum_even_and_even_index([5, 7, 9, 4, 3, 6, 4, 7]) == 26, \"The function should return 26\"\nassert     sum_even_and_even_index([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 30, \"The function should return 30\"\nassert     sum_even_and_even_index([1, 3, 5, 7, 9]) == 22, \"The function should return 22\"\nassert     sum_even_and_even_index([5, 7, 9, 4, 3, 6, 4, 7]) == 26, \"The function should return 26\"\nprint \"All the test cases passed. 4.9.1.\""
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([0,1,2,3,4,5,6,7,8,9]) == 22\nassert     sum_even_and_even_index([5, 4, 3, 2, 1]) == 30\nassert     sum_even_and_even_index([1, 2, 3, 4, 5]) == 20\nassert     sum_even_and_even_index([]) == 0\nassert     sum_even_and_even_index([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ( even_Power_Sum(2) == 4 )\nassert     ( even_Power_Sum(10) == 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 )\nassert     ( even_Power_Sum(0) == 0 )\nassert     ( even_Power_Sum(-1) == None )\nassert     ( even_Power_Sum(1.3) == None )\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n\ndef D(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the sixth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(0)     == 0\nassert     even_Power_Sum(1)     == 1\nassert     even_Power_Sum(2)     == 10\nassert     even_Power_Sum(3)     == 100\nassert     even_Power_Sum(4)     == 1000\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (even_Power_Sum(2) == 0)\nassert     (even_Power_Sum(3) == 24)\nassert     (even_Power_Sum(4) == 576)\nassert     (even_Power_Sum(5) == 488776)\n\ndef primes_less_than(n):\n    '''\n    Write a python function that takes in an integer n and returns a list of all the primes that are less than n.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 1\nassert     even_Power_Sum(3) == 5\nassert     even_Power_Sum(4) == 25\nassert     even_Power_Sum(5) == 125\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_Power_Sum(2) == 16\nassert     even_Power_Sum(5) == 44\nassert     even_Power_Sum(9) == 304\nassert     even_Power_Sum(15) == 640\nassert     even_Power_Sum(100) == 352025\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_Power_Sum(0) == 0\nassert     even_Power_Sum(2) == 0\nassert     even_Power_Sum(4) == 0\nassert     even_Power_Sum(5) == 0\nassert     even_Power_Sum(10) == 25\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(10) == 285\nassert     even_Power_Sum(100) == 2432902008176640000\nassert     even_Power_Sum(1000) == 231411246683876640000\n\ndef triangular_number(n):\n    '''\n    Write a python function that takes in a natural number n and computes the nth triangular number.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \neven_Power_Sum(2) == 8\neven_Power_Sum(3) == 8\neven_Power_Sum(4) == 8\neven_Power_Sum(5) == 8\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert     rear_extract([(7, 8), (9, 10), (11, 12)]) == [8, 10, 12]\nassert     rear_extract([(13, 14), (15, 16)]) == [14, 16]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [3, 'testing', 5] == rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)])\nassert     [2, 'r', 'e'] == rear_extract([(9, 8, 7), (6, 5, 4), (3, 2, 1)])\nassert     [1, 2] == rear_extract([(3, 2, 1), (9, 8, 7), (6, 5, 4)])\nassert     [4] == rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)])\nassert     [6] == rear_extract([(3, 2, 1), (9, 8, 7), (6, 5, 4)])\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [(5, 6), (3, 4), (1, 2)]\nassert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [(9, 10), (7, 8), (5, 6), (3, 4), (1, 2)]\nassert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == [(9, 10), (7, 8), (5, 6), (3, 4), (1, 2), (11, 12)]\nassert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]) == [(9, 10), (7, 8), (5, 6), (3, 4), (1, 2), (11, 12), (13, 14), (15, 16), (19, 20)]\nassert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26)]) == [(9, 10), (7, 8), (5, 6), (3, 4), (1, 2), (11, 12), (13, 14), (15, 16), (19, 20), (21, 22), (23, 24), (25, 26)]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [5, 3, 2, 1] == rear_extract([(5, 3), (3, 2), (2, 1), (1, 5)])\nassert     [5, 3]    == rear_extract([(5, 3), (3, 2), (2, 1)])\nassert     [2, 3] == rear_extract([(2, 3), (3, 2)])\nassert     [] == rear_extract([])\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [4, 1, 8, 3] == rear_extract([(4, 1), (8, 3), (1, 4), (3, 8)])\nassert     [2, 3, 5, 7] == rear_extract([(2, 3), (5, 7), (7, 5), (3, 2)])\nassert     [2, 3, 5, 7] == rear_extract([(2, 3), (5, 7), (7, 5), (3, 2)])\nassert     [1, 2, 3] == rear_extract([(1, 2), (2, 3), (3, 1)])\n\ndef left_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the left element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [5, 10, 4, 9] == rear_extract([(1, 2), (3, 4), (5, 6), (7, 8)])\nassert     [8, 4, 9, 6] == rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)])\nassert     [5, 10, 4, 9] == rear_extract([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)])\nassert     [2, 4, 9, 12] == rear_extract([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)])\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rear_extract([(1,2,3), (4,5), (6,7,8,9)]) == [2,5,8]\nassert     rear_extract([(1,2,3), (4,5), (6,7,8,9)]) == [2,5,8]\nassert     rear_extract([(1,2,3), (4,5,6,7,8,9)]) == [2,5,8]\nassert     rear_extract([(1,2,3), (4,5,6,7,8,9)]) == [2,5,8]\nassert     rear_extract([(1,2,3,4), (4,5,6,7,8,9)]) == [2,5,8]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert     rear_extract([(2, 4), (4, 4), (2, 6)]) == [4, 4, 6]\nassert     rear_extract([(2, 4), (4, 5), (2, 6)]) == [4, 5, 6]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rear_extract(example_list) == [3, 3, 4, 9]\nassert     rear_extract(more_example_list) == [5, 10]\nassert     rear_extract(smallest_list) == [5]\nassert     rear_extract(empty_list) == []\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (rear_extract([(1, 3), (5, 8), (7, 2)])     ==     [8, 2])\nassert     (rear_extract([('d', 'c'), ('c', 'a'), ('a', 'b')])     ==     ['c', 'a', 'b'])\n\ndef rear_insert(test_list, new_element):\n    '''\n    Write a function that takes in a list of tuples and returns a list that includes the rear element of each tuple at the front\n    of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     substract_elements( (1,2,3,4), (3,2,1,4) ) == (0,0,0,0)\nassert     substract_elements( (1,2,3,4), (3,2,1,5) ) == (1,0,3,4)\nassert     substract_elements( (1,2,3,4), (3,2,1,4) ) == (0,0,0,0)\nassert     substract_elements( (1,2,3,4), (3,2,1,5) ) == (1,0,3,4)\nassert     substract_elements( (1,2,3,4), (3,2,1,4) ) == (0,0,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     substract_elements((5, 2), (7, 1)) == (2, 3)\nassert     substract_elements((5, 1), (7, 1)) == (4, 0)\nassert     substract_elements((1, 2), (2, 2)) == (-1, -1)\nassert     substract_elements((1, 1), (1, 1)) == (0, 0)"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     substract_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('-a', '-b', '-c')\nassert     substract_elements(('a', 'b'), ('a', 'b', 'c')) == ('-a', '-b', '-c')\nassert     substract_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c')\nassert     substract_elements(('a', 'b', 'c'), ('a', 'b')) == ('-a', '-b', '-c')\nassert     substract_elements(('a', 'b', 'c'), ('d', 'e')) == ('a', 'b', 'c')\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (substract_elements((1,3,5,7), (0,2,4,6)) == (-1, -1, -3, -5))\nassert     (substract_elements((1,2,3), (1,2,3)) == (-1, -1, -2))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     substract_elements(('apple', 'peach', 'banana'), ('cherry', 'peach', 'banana')) == ('apple', 'apple', 'banana')\nassert     substract_elements(('apple', 'peach', 'banana'), ('cherry', 'peach', 'banana')) == ('apple', 'peach', 'banana')\nassert     substract_elements(('apple', 'peach', 'banana'), ('cherry', 'apple', 'banana')) == ('peach', 'peach', 'banana')\nassert     substract_elements(('apple', 'peach', 'banana'), ('cherry', 'apple', 'banana')) == ('peach', 'apple', 'banana')\nassert     substract_elements(('apple', 'peach', 'banana'), ('cherry', 'banana', 'banana')) == ('apple', 'peach', 'banana')\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     substract_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == 0\nassert     substract_elements(('p', 'q', 'r','s'), ('p', 'q', 'r','s')) == 0\nassert     substract_elements(('1', '2', '3'), ('2', '4', '6')) == (-1, -2, -1)\nassert     substract_elements(('2', '6', '10'), ('1', '2', '3')) == (0, -10, -14)\nassert     substract_elements(('3', '9', '12'), ('2', '4', '6')) == (2, -12, -14)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         (substract_elements( (1, 2, 3, 4), (1, 2, 3) ) == (0, 0, 0, 0) )\nassert         (substract_elements( (1, 2, 3, 4), (4, 3, 2) ) == (1, 1, 1, 1) )\nassert         (substract_elements( (1, 2, 3, 4), (5, 6, 7) ) == (1, 2, 3, 4) )\nassert         (substract_elements( (1, 2, 3, 4), (1, 2, 3) ) == (0, 0, 0, 0) )\nassert         (substract_elements( (1, 2, 3, 4, 5), (1, 2, 3) ) == (0, 0, 0, 4, 5) )\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert     substract_elements((-1, 1, 1), (-1, 1, 1)) == (0, 0, 0)\nassert     substract_elements((1, 1, 1), (-1, 1, 1)) == (0, 0, 0)\nassert     substract_elements((-1, 1, 1), (1, 1, 1)) == (0, 0, 0)\nassert     substract_elements((1, 1, 1), (1, 1, 1)) == (0, 0, 0)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum(10) == 4\nassert     even_binomial_Coeff_Sum(5) == 4\nassert     even_binomial_Coeff_Sum(100) == 1\nassert     even_binomial_Coeff_Sum(1000) == 0\nassert     even_binomial_Coeff_Sum(50000) == 0\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum( 10) == 37\nassert     even_binomial_Coeff_Sum( 1) == 1\nassert     even_binomial_Coeff_Sum( 3) == 4\nassert     even_binomial_Coeff_Sum( 8) == 130\nassert     even_binomial_Coeff_Sum( 9) == 203\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_binomial_Coeff_Sum( 1) == 1\nassert     even_binomial_Coeff_Sum( 2) == 2\nassert     even_binomial_Coeff_Sum( 3) == 5\nassert     even_binomial_Coeff_Sum( 4) == 10\nassert     even_binomial_Coeff_Sum( 5) == 35\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 1\nassert     even_binomial_Coeff_Sum(3) == 4\nassert     even_binomial_Coeff_Sum(4) == 9\nassert     even_binomial_Coeff_Sum(5) == 26\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum(4) == 1\nassert     even_binomial_Coeff_Sum(5) == 1\nassert     even_binomial_Coeff_Sum(7) == 3\nassert     even_binomial_Coeff_Sum(8) == 5\nassert     even_binomial_Coeff_Sum(10) == 8\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum( 2) == 2\nassert     even_binomial_Coeff_Sum( 3) == 3\nassert     even_binomial_Coeff_Sum( 4) == 5\nassert     even_binomial_Coeff_Sum( 5) == 8\nassert     even_binomial_Coeff_Sum( 6) == 13\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum(10)     == 2630\nassert     even_binomial_Coeff_Sum(20)     == 3060\nassert     even_binomial_Coeff_Sum(50)     == 5500\n\ndef binomial_coeff_sum(n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and finds the sum of binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_binomial_Coeff_Sum(5) == 10\nassert     even_binomial_Coeff_Sum(10) == 10\nassert     even_binomial_Coeff_Sum(15) == 30\nassert     even_binomial_Coeff_Sum(1) == 1\nassert     even_binomial_Coeff_Sum(0) == 0\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(10) == 10\nassert     even_binomial_Coeff_Sum(15) == 70\nassert     even_binomial_Coeff_Sum(20) == 860\nassert     even_binomial_Coeff_Sum(25) == 1460\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     ( even_binomial_Coeff_Sum( 6) == 1 + 1 + 2 + 3 + 1 + 2 ) \nassert     ( even_binomial_Coeff_Sum( 7) == 1 + 1 + 2 + 3 + 1 + 2 + 3 )\nassert     ( even_binomial_Coeff_Sum( 8) == 1 + 1 + 2 + 3 + 1 + 2 + 3 + 4 )\nassert     ( even_binomial_Coeff_Sum( 9) == 1 + 1 + 2 + 3 + 1 + 2 + 3 + 4 + 5 )\nassert     ( even_binomial_Coeff_Sum( 10) == 1 + 1 + 2 + 3 + 1 + 2 + 3 + 4 + 5 + 6 )\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1,1) == 0.3314900\nassert     volume_cylinder(2,1) == 1.0471222\nassert     volume_cylinder(1,2) == 0.1123143\nassert     volume_cylinder(2,2) == 1.5398456\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (volume_cylinder(3,4) == 12.566370614359172), \"incorrect output\"\nassert     (volume_cylinder(2.1,3.4) == 13.0710678118654755), \"incorrect output\"\nassert     (volume_cylinder(1,6) == 0), \"incorrect output\"\nassert     (volume_cylinder(4.5,7.7) == 37.89772027854922), \"incorrect output\"\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_cylinder(2,5) == 125\nassert     volume_cylinder(2,5) == 125\nassert     volume_cylinder(2,5) == 125\nassert     volume_cylinder(2,5) == 125\nassert     volume_cylinder(2,5) == 125\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_cylinder(3,4) == 48.0\nassert     volume_cylinder(4,5) == 125.0\nassert     volume_cylinder(4,6) == 276.0\nassert     volume_cylinder(5,7) == 684.0\nassert     volume_cylinder(5,8) == 1250.0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_cylinder(3,5)     == 125.0\nassert     volume_cylinder(1,5)     == 50\nassert     volume_cylinder(1,5)     == 50\nassert     volume_cylinder(1,5)     == 50\n\ndef weight_planck(m,l,h):\n    '''\n    Write a function that takes in mass, length, and height and returns the weight of the planck.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_cylinder(5, 10) == 50\nassert     volume_cylinder(5, 15) == 75\nassert     volume_cylinder(3, 5) == 15\nassert     volume_cylinder(5, 10) == 50\nassert     volume_cylinder(5, 15) == 75\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_cylinder(0.5,3) == 3.032755291083\nassert     volume_cylinder(0.9,2) == 2.645516073945\nassert     volume_cylinder(1.2,1.6) == 2.4\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_cylinder(1,1) == pi/3\nassert     volume_cylinder(2,1) == pi/3 + 2*pi\nassert     volume_cylinder(3,1) == pi/3 + 4*pi\nassert     volume_cylinder(2,2) == pi/3 + 4*pi\nassert     volume_cylinder(3,2) == pi/3 + 8*pi\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_cylinder(3,10) == 1729.5368\nassert     volume_cylinder(5,8) == 60.0\nassert     volume_cylinder(15,20) == 3649.6674\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (volume_cylinder(4,5) == 454.59)\nassert     (volume_cylinder(7,9) == 813.26)\nassert     (volume_cylinder(2,4) == 12)\nassert     (volume_cylinder(2,5) == 12.4)\nassert     (volume_cylinder(4,2) == 0)\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     dict_filter({1:1,2:2,3:3,4:4,5:5,6:6},4) == {1:1, 2:2, 3:3}\nassert     dict_filter({1:1,2:2,3:3,4:4,5:5,6:6},3) == {1:1, 2:2, 3:3}\nassert     dict_filter({1:1,2:2,3:3,4:4,5:5,6:6},2) == {3:3}\nassert     dict_filter({1:1,2:2,3:3,4:4,5:5,6:6},5) == {}"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'a': 1, 'b': 2, 'd': 4, 'e': 5}\nassert     dict_filter({'orange': 1, 'apple': 2, 'pear': 3, 'banana': 4, 'grapes': 5}, 3) == {'apple': 2, 'banana': 4, 'grapes': 5}\nassert     dict_filter({'orange': 1, 'apple': 2, 'pear': 3, 'banana': 4, 'grapes': 5}, 2) == {'orange': 1, 'pear': 3, 'banana': 4}\nassert     dict_filter({'orange': 1, 'apple': 2, 'pear': 3, 'banana': 4, 'grapes': 5}, 1) == {}\nassert     dict_filter({'orange': 1, 'apple': 2, 'pear': 3, 'banana': 4, 'grapes': 5}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     {0:0, 1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64} == dict_filter({0:0, 1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64}, 4)\nassert     {0:0, 1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64} == dict_filter({0:0, 1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64}, 8)\n\ndef intersect(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that is the intersection of the two lists.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     dict_filter({1:0, 2:4, 3:9, 4:16, 5:25}, 4) == {1:0, 2:4, 3:9, 4:16, 5:25}\nassert     dict_filter({1:1, 2:2, 3:3, 4:4, 5:5}, 4) == {1:1, 2:2, 3:3, 4:4, 5:5}\nassert     dict_filter({}, 4) == {}\n\ndef flatten(list):\n    '''\n    Write a function that takes in a nested list of integers and returns a flattened version of the list\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (dict_filter({1: 1, 2: 2, 3: 3}, 2) == {1: 1, 2: 2, 3: 3})\nassert     (dict_filter({1: 1, 2: 2, 3: 3}, 3) == {1: 1, 2: 2, 3: 3})\nassert     (dict_filter({1: 1, 2: 2, 3: 3}, 1) == {})\nassert     (dict_filter({1: 1, 2: 2, 3: 3}, 4) == {})\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \ndict_filter({'a': 1, 'b': 2, 'c': 3},2) == {'b': 2, 'c': 3}, \"Check 1\"\ndict_filter({'a': 1, 'b': 2, 'c': 3},3) == {'a': 1, 'c': 3}, \"Check 2\"\ndict_filter({'a': 1, 'b': 2, 'c': 3},4) == {}, \"Check 3\"\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2}, \"incorrect\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}, \"incorrect\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 3) == {}, \"incorrect\"\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dict_filter({1: 5, 2: 2, 3: 3, 4: 2, 5: 3, 6: 4, 7: 1, 8: 10}, 5)     == {1: 5, 2: 2, 3: 3, 4: 2, 5: 3, 6: 4, 7: 1, 8: 10}\nassert     dict_filter({'a': 2, 'b': 1, 'c': 3, 'd': 5, 'e': 7, 'f': 3, 'g': 4, 'h': 4, 'i': 8, 'j': 6}, 5) == {'a': 2, 'b': 1, 'c': 3, 'd': 5, 'e': 7, 'f': 3, 'g': 4, 'h': 4, 'i': 8, 'j': 6}\n\n\ndef dict_sort(d):\n    '''\n    Write a function that takes in a dictionary of strings and integers, and returns a sorted dictionary. The keys should be sorted in alphabetical order. The output should be the same as the input dictionary, but the values should be sorted.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'a': 1, 'c': 3, 'e': 5}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 5) == {'b': 2, 'd': 4, 'e': 5}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 9) == {}\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 0) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     dict_filter({1: 5, 2: 2, 3: 3, 4: 4, 5: 5}, 5) == {1: 5, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     dict_filter({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 5) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     dict_filter({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 1) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_first_elements((1,1,1,1,1))     == 5\nassert     count_first_elements((1,1,1,1,2))     == 4\nassert     count_first_elements((1,1,1,2))         == 3\nassert     count_first_elements((1,2,1,1,1))     == 2\nassert     count_first_elements((1,2,1,2,1))     == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         count_first_elements(tuple()) == 0, 'tuple() is empty, the function should return 0'\nassert         count_first_elements(tuple('x')) == 1, 'tuple contains only one element, the function should return 1'\nassert         count_first_elements(tuple('xx')) == 2, 'tuple contains two elements, the function should return 2'\nassert         count_first_elements(tuple('xaxaxaxaxaxax')) == 9, 'tuple contains 9 elements, the function should return 9'\nassert         count_first_elements(tuple('xaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxaxax            \n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_first_elements(('a', 'a', 'a', 'b', 'b', 'c')) == 3\nassert     count_first_elements(('b', 'b', 'c')) == 0\nassert     count_first_elements(('c', 'b', 'a')) == 2"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_first_elements((\"yellow\", \"red\", \"yellow\", \"green\", \"blue\", \"blue\")) == 2\nassert     count_first_elements((\"red\", \"green\", \"blue\")) == 3\nassert     count_first_elements((\"blue\", \"blue\")) == 1\nassert     count_first_elements((\"blue\",)) == 1\nassert     count_first_elements(()) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         count_first_elements((1, 2, 3, 4, 5, 6)) == 3\nassert         count_first_elements((1, 2, 3, 4)) == 1\nassert         count_first_elements((2, 3, 1, 5, 7, 9)) == 3\nassert         count_first_elements((5, 7, 9, 1, 2, 4, 6)) == 4\nassert         count_first_elements((1, 2, 3)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 5\nassert     count_first_elements((1, 2, 3, 1, 4, 5)) == 2\nassert     count_first_elements((1, 2, 3, 1, 2, 3, 1, 2, 3)) == 4"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'a', 'b', 'c')) == 2\nassert     count_first_elements(('a', 'b', 'c', 'd', 'e')) == 0\nassert     count_first_elements(('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')) == 8\nassert     count_first_elements(('a', 'b', 'a')) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_first_elements((4, 5, 6, 7, 1, 2, 3)) == 2\nassert     count_first_elements((1, 3, 4, 5, 6, 7)) == 0\nassert     count_first_elements((5, 1, 4, 3, 6, 7)) == 3\nassert     count_first_elements((7, 5, 1, 4, 3, 6)) == 2\nassert     count_first_elements((7, 5, 1, 4, 3, 6, 8)) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5)) == 3\nassert     count_first_elements((1, 2, 3, 1, 5)) == 4\nassert     count_first_elements((1, 2, 3, 4, 1)) == 3\nassert     count_first_elements((1, 2, 3, 4, 5, 6)) == 0\nassert     count_first_elements((1, 2, 3, 4, 5, 1)) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 5\nassert count_first_elements((1, 2, 3, 4, 5, 6, 8, 9)) == 3\nassert count_first_elements((1, 2, 3, 4, 5, 6, 7, 9, 8)) == 2\nassert count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 1\nassert count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == 0\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 4\nassert     is_num_decagonal(3) == 7\nassert     is_num_decagonal(4) == 10\nassert     is_num_decagonal(5) == 19\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(5) == 22\nassert     is_num_decagonal(10) == 26\nassert     is_num_decagonal(20) == 26\nassert     is_num_decagonal(30) == 22\nassert     is_num_decagonal(40) == 26\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_num_decagonal(11) == 91\nassert     is_num_decagonal(10) == 45\nassert     is_num_decagonal(9) == 33\nassert     is_num_decagonal(8) == 9\nassert     is_num_decagonal(7) == 17\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 4\nassert     is_num_decagonal(3) == 9\nassert     is_num_decagonal(10) == 45\nassert     is_num_decagonal(27) == 81\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_num_decagonal(1) == 0\nassert     is_num_decagonal(2) == 1\nassert     is_num_decagonal(3) == 10\nassert     is_num_decagonal(4) == 100\nassert     is_num_decagonal(5) == 121\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_num_decagonal(11) == 37373737\nassert     is_num_decagonal(12) == 6751227\nassert     is_num_decagonal(13) == 51003122\nassert     is_num_decagonal(14) == 82605715\nassert     is_num_decagonal(15) == 11561828\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_num_decagonal(4)     == 120\nassert     is_num_decagonal(5)     == 145\nassert     is_num_decagonal(6)     == 169\nassert     is_num_decagonal(7)     == 205\nassert     is_num_decagonal(8)     == 231\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_num_decagonal(10) == 36\nassert     is_num_decagonal(11) == 45\nassert     is_num_decagonal(12) == 54\nassert     is_num_decagonal(13) == 63\nassert     is_num_decagonal(14) == 72\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_num_decagonal(5) == 25, \"is_num_decagonal(5)\"\nassert     is_num_decagonal(9) == 45, \"is_num_decagonal(9)\"\nassert     is_num_decagonal(14) == 70, \"is_num_decagonal(14)\"\nassert     is_num_decagonal(18) == 100, \"is_num_decagonal(18)\"\nassert     is_num_decagonal(22) == 121, \"is_num_decagonal(22)\"\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 10\nassert     is_num_decagonal(3) == 45\nassert     is_num_decagonal(4) == 105\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sequential_search(['a', 'c', 'd'], 'a') == (True, 0)\nassert     sequential_search(['a', 'c', 'd'], 'b') == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)\nassert     sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5], 'c') == (True, 1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [True, 0] == sequential_search(range(10), 0)\nassert     [True, -1] == sequential_search(range(10), 1)\nassert     [False, -1] == sequential_search(range(10), 10)\nassert     [True, 0] == sequential_search([2, 3, 1, 0], 0)\nassert     [False, -1] == sequential_search([2, 3, 1, 0], 1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sequential_search([], 1) == (-1, False))\nassert     (sequential_search([1], 1) == (0, True))\nassert     (sequential_search([1, 2], 1) == (0, True))\nassert     (sequential_search([1, 2], 2) == (1, True))\nassert     (sequential_search([1, 2], 3) == (-1, False))\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)\nassert     sequential_search([1,2,3,4,5], 2) == (True, 1)\nassert     sequential_search([1,2,3,4,5], 5) == (True, 4)\nassert     sequential_search([1,2,3,4,5], 6) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sequential_search([1, 2, 3, 4, 5], 2) == (True, 1)), \"Test 1: sequential_search\"\nassert     (sequential_search([1, 2, 3, 4, 5], 4) == (True, 4)), \"Test 2: sequential_search\"\nassert     (sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)), \"Test 3: sequential_search\"\nassert     (sequential_search([], 5) == (False, -1)), \"Test 4: sequential_search\"\nassert     (sequential_search([], 0) == (False, -1)), \"Test 5: sequential_search\"\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (seq_search([1, 2, 3, 4], 3) == (True, 2)), \"should return (True, 2)\"\nassert     (seq_search([1, 2, 3, 4], -1) == (False, -1)), \"should return (False, -1)\"\nassert     (seq_search([], 3) == (False, -1)), \"should return (False, -1)\"\nassert     (seq_search([1, 2, 3, 4], 1) == (True, 0)), \"should return (True, 0)\"\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_unique([1,2,3,4,5])==True\nassert     all_unique([1,2,3,4,2,5])==False\nassert     all_unique([3,5,6,7,8,5])==True\nassert     all_unique(['a','b','c','d','e','f'])==True\nassert     all_unique(['a','b','c','d','e','c'])==False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_unique([1,2,3,4,5,5,5]) == True, 'incorrect'\nassert     all_unique([1,2,3,4,1,2,3]) == False, 'incorrect'\nassert     all_unique([1,2,3,4]) == False, 'incorrect'\nassert     all_unique([1,1,2,3,4]) == False, 'incorrect'"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_unique([1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert     all_unique([1,2,3,4,5,6,7,8,9,10,11,12,12]) == False\nassert     all_unique(['a','b','c']) == False\nassert     all_unique(['a','a','b']) == False\n\ndef all_unique2(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_unique([1, 2, 3, 4, 5, 6, 7]) == True\nassert     all_unique([1, 2, 3, 4, 5, 6, 6]) == False\nassert     all_unique([1, 2, 3, 4, 5, 5]) == False\n\n\n'''\nQuestion 3.14\nWrite a python program to print all possible permutations of a given string\n'''\ndef permutations(test_str):\n    '''\n    Write a python function to print all possible permutations of a given string\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_unique([0, 1, 2, 3, 4, 5]) == True\nassert     all_unique([0, 1, 2, 2, 3, 4, 5]) == False\nassert     all_unique(['p', 'y', 't', 'h', 'o', 'n']) == True\nassert     all_unique(['p', 'y', 't', 'h', 'o', 'n', 'p']) == False\nassert     all_unique([]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_unique([1,2,3,4,5]) == True\nassert     all_unique([1,2,3,4,5,3]) == False\nassert     all_unique([1,2,3,4,5,2]) == False\nassert     all_unique([]) == True\nassert     all_unique([1,2,3,4,5,3,2,1]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_unique([1,2,3,1,2,4]) == True\nassert     all_unique([1,2,3,4,5,6,7]) == False\nassert     all_unique([1,2,3,4,5]) == True\n\n\n\ndef are_permutations(s1, s2):\n    '''\n    Write a python function to check if two strings are permutations of each other.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_unique([1, 2, 3, 4, 5]) == True, \"Failed: all_unique([1, 2, 3, 4, 5])\"\nassert     all_unique([1, 2, 2, 4, 5]) == False, \"Failed: all_unique([1, 2, 2, 4, 5])\"\nassert     all_unique([1, 2, 3, 4, 1]) == False, \"Failed: all_unique([1, 2, 3, 4, 1])\"\nassert     all_unique([]) == True, \"Failed: all_unique([])\"\nassert     all_unique([1]) == True, \"Failed: all_unique([1])\"\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_unique([1, 2, 3, 4, 5, 5]) == True\nassert     all_unique([1, 2, 3, 4, 1]) == False\nassert     all_unique([1, 2, 3, 1, 3]) == True\nassert     all_unique([1, 2, 3, 4, 1, 5]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_unique([1, 1, 2]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([1, 2, 1, 2]) == True\nassert all_unique([1, 2, 3, 3]) == False\n\n\ndef all_unique_bit(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > 0:\n        first_bit = test_list[0]\n        for i in range(1, len(test_list)):\n            if test_list[i] == first_bit:\n                return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sub_list([1,2,3,4,5], [1,2,3,4,5]) == 0\nassert     sub_list([1,2,3,4,5], [2,2,2,4,5]) == 0\nassert     sub_list([1,2,3,4,5], [5,4,3,2,1]) == [5,4,3,2,1]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sub_list([1, 2, 3], [4, 5, 6]) == [-3, -2, -1]\nassert     sub_list([0, 1], [2, 3]) == [0, 1]\nassert     sub_list([1], []) == [1]\nassert     sub_list([], []) == []"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sub_list([2,1,5,7],[3,2,1,6]) == [-2,0,0,2]\nassert     sub_list([1],[1,2,3]) == [0,0,0]\nassert     sub_list([1],[]) == [1]\nassert     sub_list([],[1]) == []\nassert     sub_list([1,2,3],[]) == [1,2,3]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sub_list([1, 2, 3], [1, 2, 3])\nassert     sub_list([1, 2, 3], [4, 5, 6])\nassert     sub_list([4, 5, 6], [1, 2, 3])"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef su_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sub_list([1,2,3],[1,2,3])     == 0\nassert     sub_list([1,2,3],[-1,0,4])     == [2,2,4]\nassert     sub_list([1,2,3],[-1,2,3])     == [0,0,0]\nassert     sub_list([1,2,3],[-1,-2,3])     == [-1,-2,-3]\nassert     sub_list([1,2,3],[-1,-2,-3])     == [0,0,0]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sub_list([1,2,3,4], [5,6,7,8]) == [1,2,3,4]\nassert     sub_list([1,2,3], [1,2,3]) == []\nassert     sub_list([1,2,3], [1,2,3,4,5]) == [1,2,3]\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     validate(123) == False\nassert     validate(4123) == True\nassert     validate(1234) == True\nassert     validate(4321) == False\nassert     validate(4325) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     validate(1) == True\nassert     validate(11) == True\nassert     validate(111) == True\nassert     validate(11111) == True\nassert     validate(1112) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     validate(1234) == True\nassert     validate(2234) == True\nassert     validate(22345) == False\nassert     validate(1234) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     validate(12345) == [0, 0, 2, 1, 0, 1, 0, 1, 0, 1]\nassert     validate(123456) == [1, 1, 1, 0, 0, 0, 0, 0, 0, 0]\nassert     validate(1337) == [0, 0, 1, 0, 0, 0, 0, 0, 0, 1]\nassert     validate(123456789) == [0, 0, 2, 1, 0, 1, 0, 1, 0, 1]\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     validate(12345) == True\nassert     validate(22345) == False\nassert     validate(1234) == False\nassert     validate(123) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     validate(1232123213)    == [1,1,1,2,2,2]\nassert     validate(123212321325)    == [1,1,1,2,2,2,2]\nassert     validate(12321232132526)    == [1,1,1,2,2,2,2,2]\nassert     validate(1232123213252634)    == [1,1,1,2,2,2,2,2,2]\nassert     validate(123212321325263435)    == [1,1,1,2,2,2,2,2,2,2]\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     validate(12345) == True, '12345'\nassert     validate(1234) == True, '1234'\nassert     validate(13123) == False, '13123'\nassert     validate(1312) == False, '1312'\nassert     validate(1313) == False, '1313'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     validate(0) == True, '0 is a valid integer'\nassert     validate(1) == False, '1 is not a valid integer'\nassert     validate(12) == True, '12 is a valid integer'\nassert     validate(123) == True, '123 is a valid integer'\nassert     validate(123456) == False, '123456 is not a valid integer'\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     validate(1344) == False\nassert     validate(1212) == True\nassert     validate(224) == True\nassert     validate(130) == False\nassert     validate(2) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_element([1, 2, 3],1)\nassert     check_element([1, 2, 3,1],1)\nassert     check_element([1, 1, 1],1)\nassert     check_element([1, 1, 1,1],1)\nassert     check_element([1, 1, 2],1)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef test_check_element():\n    # type in the list\n    assert check_element([1,1,1,1,1,1,1],1) == True\n    assert check_element([2,2,2,2,2,2,2],2) == True\n    assert check_element([3,3,3,3,3,3,3],3) == True\n    "
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_element([1,2,3],1)    == True\nassert     check_element([1,2,3],2)    == True\nassert     check_element([1,2,3],3)    == True\nassert     check_element([1,2,3],4)    == False\nassert     check_element([1,2,3],5)    == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_element([1,2,3,4,5,6],5)\nassert     not check_element([1,2,3,4,5,6],1)\nassert     not check_element([1,2,3,4,5,6],2)\nassert     check_element(['a','b','c','d','e','f'], 'e')\nassert     not check_element(['a','b','c','d','e','f'], 'A')\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_element([1,2,3,1],1) == True\nassert     check_element([1,1,1],1) == False\nassert     check_element([1,1,1],2) == False\nassert     check_element([1,2,1],1) == True\nassert     check_element([1,2,1],2) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert not check_element([],8)\nassert not check_element([1,1,1],8)\nassert not check_element([1,1,1],3)\nassert not check_element([2,1,1],3)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_element([5,5,5],5)\nassert not check_element([5,5,5],6)\nassert     check_element([1,1,1,1,1,1],1)\nassert not check_element([1,1,1,1,1,1],2)\nassert check_element([3,3,3,3,3,3],3)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_element(['a','b','c','d','e','f','g','h'], 'a')\nassert     check_element(['a','b','c','d','e','f','g','h'], 'b')\nassert     check_element(['a','b','c','d','e','f','g','h'], 'c')\nassert     check_element(['a','b','c','d','e','f','g','h'], 'd')\nassert     check_element(['a','b','c','d','e','f','g','h'], 'e')\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_element([1,1,1,1,1,1],1)\nassert     check_element([1,2,3,4,5,6],2)\nassert     check_element([2,2,2,2,2,2],2)\nassert not check_element([1,1,1,1,1],2)\nassert not check_element([1,2,3,4,5,6,7,8],2)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_element([1,2,3,4,5,5],5) is True\nassert     check_element([1,2,3,4,5],4) is True\nassert     check_element([1,2,3,4,5],6) is False\nassert     check_element([1,2,3,4,5],1) is True\nassert     check_element([1,2,3,4,5],2) is True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_two_three(\"ababab\") == True\nassert     text_match_two_three(\"bbbbbbbbbbab\") == False\nassert     text_match_two_three(\"bababababab\") == False\nassert     text_match_two_three(\"abababababa\") == True\nassert     text_match_two_three(\"bababababab\") == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_two_three('abbb') == True, \"test 1 failed\"\nassert     text_match_two_three('ababbb') == True, \"test 2 failed\"\nassert     text_match_two_three('ababbbbb') == False, \"test 3 failed\"\nassert     text_match_two_three('abbb') == False, \"test 4 failed\"\nassert     text_match_two_three('bababa') == False, \"test 5 failed\"\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_two_three('baa') == True\nassert     text_match_two_three('aabb') == True\nassert     text_match_two_three('aaabb') == True\nassert     text_match_two_three('aababbbbbbbbbaa') == True\nassert     text_match_two_three('bbaaaaaabababaaaaababaa') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_two_three('aa') == False\nassert     text_match_two_three('ba') == True\nassert     text_match_two_three('aaab') == True\nassert     text_match_two_three('aab') == True\nassert     text_match_two_three('ab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_two_three('ababababababab') == True, \"test 1\"\nassert     text_match_two_three('ababab') == False, \"test 2\"\nassert     text_match_two_three('abababababab') == True, \"test 3\"\nassert     text_match_two_three('ababab') == False, \"test 4\"\nassert     text_match_two_three('abbababababab') == True, \"test 5\"\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_two_three(\"aab\") == True\nassert     text_match_two_three(\"abb\") == False\nassert     text_match_two_three(\"abc\") == False\nassert     text_match_two_three(\"aba\") == False\nassert     text_match_two_three(\"aaaaaa\") == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_match_two_three('ab') == True\nassert     text_match_two_three('a') == False\nassert     text_match_two_three('aa') == False\nassert     text_match_two_three('aab') == True\nassert     text_match_two_three('aaab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_match_two_three('abbba') == True\nassert     text_match_two_three('abaaaa') == True\nassert     text_match_two_three('aababbba') == True\nassert     text_match_two_three('aabbabbbba') == True\nassert     text_match_two_three('ababababaa') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_two_three('abbaa') == True\nassert     text_match_two_three('ababbb') == False\nassert     text_match_two_three('abbbab') == True\nassert     text_match_two_three('abaaaa') == False\nassert     text_match_two_three('aaaaab') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_two_three('abababab') == True\nassert     text_match_two_three('baababab') == True\nassert     text_match_two_three('bbababab') == False\nassert     text_match_two_three('abbbabab') == False\nassert     text_match_two_three('baaababab') == False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \ndef test_max_sub_array_sum_repeated():\n    a = [1, -2, 3, 4, -1, 2, 1, -5, 4]\n    n = len(a)\n    k = 4\n    assert max_sub_array_sum_repeated(a, n, k) == 5\n\n\ndef max_sub_array_sum_repeated2(a, n, k):\n    '''\n    This function is modified version of the above one.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([1,-2,3,-4,5,6], 4, 2) == 11\nassert     max_sub_array_sum_repeated([1,-2,3,-4,5,6], 4, 3) == 8\nassert     max_sub_array_sum_repeated([1,2,3,4,5], 1, 2) == 5\nassert     max_sub_array_sum_repeated([1,2,3,4,5], 2, 2) == 5\nassert     max_sub_array_sum_repeated([1,2,3,4,5], 3, 2) == 5\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([2,-1,3,-2,4],5,3) == 7\nassert     max_sub_array_sum_repeated([2,-1,3,-2,4],2,2) == 2\nassert     max_sub_array_sum_repeated([1,2,3,-4,4],4,2) == 4\nassert     max_sub_array_sum_repeated([],4,3) == -1\nassert     max_sub_array_sum_repeated([],0,3) == -1\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    a = [5,1,3,4,7]\n    k = 2\n    n = len(a)\n    res = max_sub_array_sum_repeated(a, n, k)\n    print(res)"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum_repeated([1, -2, 3, 4, -7, 2, 3, -2, 1], 10, 2) == 16\nassert     max_sub_array_sum_repeated([1, -2, 3, 4, -7, 2, 3, -2, 1], 10, 3) == 30\nassert     max_sub_array_sum_repeated([1, -2, 3, 4, -7, 2, 3, -2, 1], 3, 3) == 11\nassert     max_sub_array_sum_repeated([1, -2, 3, 4, -7, 2, 3, -2, 1], 3, 4) == 7\n\ndef max_sub_array_sum_repeated_naive(a, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1e9\n    for i in range(0, k):\n        max_sum = max(max_sum, sum(a))\n        a = rotate_array(a)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum_repeated([1,2,3,4,5], 5, 1) == 10\nassert max_sub_array_sum_repeated([1,2,3,4,5], 5, 2) == 9\nassert max_sub_array_sum_repeated([1,2,3,4,5], 5, 3) == 8\nassert max_sub_array_sum_repeated([1,2,3,4,5], 5, 4) == 7\nassert max_sub_array_sum_repeated([1,2,3,4,5], 5, 5) == 10\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([-2, -5, 6, -2, -3, 1, 5, -6], 7, 3) == 19\nassert max_sub_array_sum_repeated([1, -1, 5, -2, 3], 4, 2) == 7\nassert max_sub_array_sum_repeated([-2, -5, 6, -2, -3, 1, 5, -6], 7, 3) == 19\nassert max_sub_array_sum_repeated([1, -1, 5, -2, 3], 4, 2) == 7\nassert max_sub_array_sum_repeated([-2, -5, 6, -2, -3, 1, 5, -6], 7, 4) == 22\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated(a, n, k) == 19\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef max_sub_array_sum_repeated_optimized(a, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(2) == 1\nassert     square_Sum(10) == 55\n\ndef fourSum(nums, target):\n    '''\n    Given a list of integers and a target integer,\n    returns the sum of the four elements in the list that sum to the target.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_Sum(0)     ==     0\nassert     square_Sum(1)     ==     1\nassert     square_Sum(2)     ==     4\nassert     square_Sum(3)     ==     9\nassert     square_Sum(4)     ==     16\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_Sum(5) == 225\nassert     square_Sum(10) == 385\nassert     square_Sum(15) == 1065\n\n\ndef max_product(n):\n    '''\n    Write a python function takes in an integer n and returns the product of largest and smallest numbers among first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_Sum(10)     == 47953.0\nassert     square_Sum(15)     == 88210.0\nassert     square_Sum(20)     == 1296195.0\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_Sum(10) == 1 + 4 + 9 + 16 + 25\nassert     square_Sum(11) == 1 + 4 + 9 + 16 + 25 + 36\nassert     square_Sum(12) == 1 + 4 + 9 + 16 + 25 + 36 + 49\nassert     square_Sum(13) == 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64\nassert     square_Sum(14) == 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_Sum(2) == 4\nassert     square_Sum(3) == 13\nassert     square_Sum(4) == 25\nassert     square_Sum(5) == 65\nassert     square_Sum(6) == 130\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(3) == 8\nassert     square_Sum(10) == 55\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 4\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 16\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 2\nassert     square_Sum(3) == 4\nassert     square_Sum(4) == 9\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_Sum(0)        == 0\nassert     square_Sum(2)        == 1\nassert     square_Sum(3)        == 4\nassert     square_Sum(7)        == 49\nassert     square_Sum(10)        == 285\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [max_length([[1, 2, 3], [2, 3, 4], [3, 4, 5]]), 5] == [5]\nassert     [max_length([[4, 5, 6], [2, 3, 4], [3, 4, 5]]), 3] == [3]\nassert     [max_length([[7, 8, 9], [4, 5, 6], [3, 4, 5]]), 3] == [3]\nassert     [max_length([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]), 3] == [3]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_length([[3, 4, 5], [3, 4, 5, 6]]) == 2\nassert max_length([[3, 4], [3, 4, 5, 6]]) == 2\nassert max_length([[3, 4, 5, 6], [3, 4, 5, 6], [3, 4, 5, 6]]) == 3\nassert max_length([[3, 4, 5, 6], [3, 4, 5, 6], [3, 4, 5, 6]]) == 3\nassert max_length([[3, 4, 5, 6], [3, 4, 5, 6], [3, 4, 5, 6, 7]]) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         [1, 2, 3] == max_length([[1], [2], [3]])\nassert         [1, 2, 3, 4] == max_length([[1, 2], [3, 4]])\nassert         [1, 2, 3, 4, 5, 6, 7] == max_length([[1, 2], [3, 4], [5, 6, 7]])\nassert         [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] == max_length([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]])\nassert         [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] == max_length([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]])\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_length([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [2, 3]\nassert     max_length([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]) == [1, 3]\nassert     max_length([[1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]]) == [1, 5]\nassert     max_length([[1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9, 10]]) == [1, 7]\nassert     max_length([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [16, 17, 18, 19, 20, 21, 22, 23, 24, 25], [17, 18, 19, 20, 21, 22, 23, 24, 25, 26]]) == [1, 7]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 10\nassert     max_length([[1], [2, 3], [4, 5, 6, 7], [8, 9, 10]]) == 10\nassert     max_length([[1], [2, 3], [4], [5, 6, 7]]) == 2\nassert     max_length([[], [1, 2, 3], [4, 5, 6], [7, 8, 9], []]) == 3\nassert     max_length([[], [], [], [1, 2, 3]]) == 0\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef max_length2(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [5, 9, 3] == max_length( [[1, 2], [3, 4], [5, 6], [7, 8, 9]] )\nassert     [2, 3, 2, 5] == max_length( [[1, 2, 3], [3, 4, 5], [2, 1, 3, 4], [5, 6, 7]] )\nassert     [9, 3] == max_length( [[1, 2], [3, 4], [5, 6]] )\nassert     [1, 2, 3, 4, 5, 6, 7] == max_length( [[1, 2, 3], [4, 5, 6], [7, 8, 9]] )\nassert     [1, 2, 3, 4, 5, 6, 7] == max_length( [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] )\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_length([[1], [2], [3, 4], [5, 6]]) == [5, 6]\nassert     max_length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [9]\nassert     max_length([[1, 2], [3, 4, 5], [6, 7, 8, 9], [1, 2]]) == [9]\nassert     max_length([]) == []\nassert     max_length([[]]) == []\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_length([[1, 2], [2, 3], [3, 4, 5]])     == 3\nassert     max_length([[1, 2, 3], [2, 3, 4]])     == 3\nassert     max_length([[], [1], [2], [3], [4], [5]])     == 5\nassert     max_length([[1, 2, 3], [2, 3], [3, 4, 5]])     == 3\nassert     max_length([[1, 2, 3, 4], [2, 3, 4], [3, 4, 5], [4, 5]])     == 4\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_count_no_of_ways():\n    assert \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(5, 4) == 2\nassert     count_no_of_ways(7, 2) == 6\nassert     count_no_of_ways(10, 2) == 4\nassert     count_no_of_ways(15, 2) == 4\nassert     count_no_of_ways(25, 2) == 6\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_no_of_ways(3, 2) == 2\nassert     count_no_of_ways(4, 2) == 4\nassert     count_no_of_ways(5, 2) == 4\nassert     count_no_of_ways(5, 3) == 6\nassert     count_no_of_ways(7, 3) == 13\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_no_of_ways(4, 2) == 5\nassert     count_no_of_ways(5, 3) == 11\nassert     count_no_of_ways(9, 3) == 88\nassert     count_no_of_ways(10, 5) == 1435\n\nprint \"Passed all tests\""
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \ndef test():\n    for n, k in [(3, 3), (7, 7), (4, 2)]:\n        assert count_no_of_ways(n, k) == 2\n    print \"Passed\"\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_no_of_ways(5, 3) == 2\nassert     count_no_of_ways(10, 3) == 4\nassert     count_no_of_ways(10, 4) == 7\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_no_of_ways(6, 2) == 2\nassert     count_no_of_ways(6, 3) == 3\nassert     count_no_of_ways(6, 4) == 4\nassert     count_no_of_ways(6, 5) == 5\nassert     count_no_of_ways(6, 6) == 6\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(5, 2) == 2\nassert     count_no_of_ways(10, 2) == 6\nassert     count_no_of_ways(5, 4) == 6\nassert     count_no_of_ways(20, 4) == 4\nassert     count_no_of_ways(10, 3) == 3\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(6, 2) == 8\nassert     count_no_of_ways(12, 6) == 24\nassert     count_no_of_ways(20, 4) == 192\nassert     count_no_of_ways(50, 5) == 2419\n\nprint('all tests passed')"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find(7,4) == 0\nassert     find(7,5) == 1\nassert     find(9,3) == 0\nassert     find(9,4) == 1\nassert     find(9,5) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find(10,2) == 2\nassert     find(7,3) == 1\nassert     find(5,5) == 1\nassert     find(3,2) == 0\nassert     find(9,5) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find(20,10) == 2, \"incorrect\"\nassert     find(20,20) == 0, \"incorrect\"\nassert     find(3,1) == 0, \"incorrect\"\nassert     find(3,2) == 1, \"incorrect\"\nassert     find(3,3) == 1, \"incorrect\"\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (find(11,4)==0)\nassert     (find(100,10)==10)\nassert     (find(70,2)==4)\nassert     (find(72,3)==3)\nassert     (find(10,2)==5)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find(8,4) == 2\nassert     find(11,10) == 1\nassert     find(7,5) == 0\nassert     find(5,2) == 0"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find(2,3) == 0\nassert     find(3,4) == 0\nassert     find(4,5) == 1\nassert     find(5,6) == 1\nassert     find(6,7) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find(50,25)==10\nassert     find(20,10)==2\nassert     find(30,5)==3\nassert     find(10,5)==0\nassert     find(9,5)==0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find(5,2)    == 2\nassert     find(7,3)    == 2\nassert     find(7,6)    == 2\nassert     find(5,4)    == 2\nassert     find(7,5)    == 3\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find(100,50) == 0\nassert     find(10,1)    == 1\nassert     find(100,150) == 0\nassert     find(150,100) == 10\nassert     find(16,3)    == 4\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find(6,6) == 1\nassert     find(6,7) == 0\nassert     find(10,8) == 2\nassert     find(11,9) == 1\nassert     find(99,98) == 1\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(5,3) == 8\nassert     otherside_rightangle(1,4) == 5\nassert     otherside_rightangle(3,3) == 4\nassert     otherside_rightangle(5,5) == 6\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(4,4) == 2\nassert     otherside_rightangle(8,12) == 4\nassert     otherside_rightangle(10,4) == 3\nassert     otherside_rightangle(8,12) == 4\nassert     otherside_rightangle(5,8) == 1.5\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n(otherside_rightangle(2,3) == 5)\n(otherside_rightangle(5,12) == 13)\n(otherside_rightangle(8,16) == 25)\n\ndef otherside_rightangle2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(4,6) == 2,    'incorrect'\nassert     otherside_rightangle(5,6) == 2,    'incorrect'\nassert     otherside_rightangle(6,5) == 2,    'incorrect'\nassert     otherside_rightangle(7,6) == 2,    'incorrect'\nassert     otherside_rightangle(8,6) == 2,    'incorrect'\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(4,3) == 5\nassert     otherside_rightangle(5,6) == 7\nassert     otherside_rightangle(7,5) == 9\nassert     otherside_rightangle(9,6) == 11\nassert     otherside_rightangle(12,5) == 15\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(12,8) == 25\nassert     otherside_rightangle(5,12) == 17\nassert     otherside_rightangle(3,4) == 2.5\nassert     otherside_rightangle(3,2) == 0\nassert     otherside_rightangle(0,2) == 0\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(4,5) == 'right'\nassert     otherside_rightangle(5,4) == 'invalid'\nassert     otherside_rightangle(4,6) == 'invalid'\nassert     otherside_rightangle(5,5) == 'equilateral'\nassert     otherside_rightangle(4,4) == 'isosceles'\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(2,2) == 2, 'test 1'\nassert     otherside_rightangle(1,1) == 1, 'test 2'\nassert     otherside_rightangle(1,2) == 0, 'test 3'\nassert     otherside_rightangle(2,1) == 0, 'test 4'\nassert     otherside_rightangle(3,1) == math.sqrt(3), 'test 5'\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n(math.sqrt(3) / 2)**2 == 1\nassert otherside_rightangle(5,3) == 2.5\nassert otherside_rightangle(5,5) == 7.0\nassert otherside_rightangle(5,3) == 7.0\nassert otherside_rightangle(3,5) == 2.5\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(3,5) == 7\nassert     otherside_rightangle(3,6) == 9\nassert     otherside_rightangle(5,4) == 7\nassert     otherside_rightangle(5,5) == 8\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef find_most_common_val(listval):\n    '''\n    Write a function to find the most common value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_val([5, 2, 3, 1, -10, 100]) == 100\nassert     max_val([5, 'a', 3, 1, -10, 100]) == 100\nassert     max_val([5, 2, 'a', 1, -10, 100]) == 100\nassert     max_val([-5, -2, -3, -1, -10, -100]) == -100\nassert     max_val([5, 2, 'a', 1, -10, -100]) == -100\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_val([0,2,3,4,5]) == 5\nassert     max_val([2,5,3,4,0]) == 5\nassert     max_val([]) == None\nassert     max_val([2,3,-4,5]) == 5\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_val( [ 1, 'two', [ 3, 'four' ], 5 ]) == 5\nassert     max_val( [ 9, [ 'two', 'five' ], 'one', 'four', 2 ] ) == 9\nassert     max_val( [ 2, [ 'one', 'three' ], [ 'two', 'five' ], [ 'one', 'four' ], 4, 'five','six' ] ) == 'five'\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_val([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_val([1,\"2\",3,4,5,\"6\",7,8,9]) == 9\nassert     max_val([[1,2,3],4,5,6]) == 6\nassert     max_val([[1,2,3],[\"4\",\"5\",\"6\"],7,8]) == 7\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_val([1, 'a', 2]) == 2\nassert     max_val([1, 1.5, 'a', 3]) == 1.5\nassert     max_val([1, 1.5, 'a', 3, 4]) == 4\nassert     max_val([1, 2, 3, 4, 5, 6]) == 6\nassert     max_val([1, 1.5, 'a', 3, 4, 5, 6]) == 6\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_val([1, 2.1, 'a', True]) == 2.1\nassert     max_val([]) == None\nassert     max_val([1, 2.1, 'a', True, None]) == 2.1\nassert     max_val([1, 2.1, 'a', True, 'c']) == 2.1\nassert     max_val([1, 2.1, 'a', 'c', True]) == 'c'\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_val([1,2,3]) == 3\nassert     max_val([5,4,3,2,1]) == 5\nassert     max_val(['a','b','c']) == 'c'\nassert     max_val(['A','B','C']) == 'C'\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_val(['B', 'B', 'B', 'A', 'C', 'C', 'A', 'B', 'C', 'A']) == 'C'\nassert     max_val(['B', 'C', 'A', 'C', 'C', 'B', 'C', 'A', 'C', 'B']) == 'C'\nassert     max_val([]) == 'None'\nassert     max_val(['A', 'B', 'C']) == 'C'\nassert     max_val(['A', 'B', 'C', 'A', 'B', 'C']) == 'C'\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_div(6) == 6\nassert     sum_div(36) == 18\nassert     sum_div(1234567890) == 7825\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_div(2) == 2\nassert     sum_div(5) == 6\nassert     sum_div(10) == 21\nassert     sum_div(100) == 5050\nassert     sum_div(1001) == 1005050\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_div(1) == 1\nassert     sum_div(7) == 1\nassert     sum_div(11) == 1\nassert     sum_div(10) == 1\nassert     sum_div(100) == 1\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ( sum_div(10) == 25 )\nassert     ( sum_div(2) == 1 )\nassert     ( sum_div(100) == 5050 )\nassert     ( sum_div(3) == 1 )\nassert     ( sum_div(0) == 0 )\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_div(20) == 13\nassert     sum_div(8) == 8\nassert     sum_div(25) == 9\nassert     sum_div(18) == 8\nassert     sum_div(3) == 1\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_div(10) == 21\nassert     sum_div(17) == 33\nassert     sum_div(20) == 29\nassert     sum_div(33) == 58\nassert     sum_div(100) == 5050\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(3) == 0\nassert     sum_div(12) == 0\nassert     sum_div(13) == 1\nassert     sum_div(15) == 0\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_div(10) == 28\nassert     sum_div(21) == 260\nassert     sum_div(22) == 100\n\n\ndef unique_digits(number):\n    '''\n    Write a function to return the unique digits in a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_div(20)    ==    1 + 2 + 4 + 5 + 10\nassert     sum_div(21)    ==    1 + 3 + 7 + 21\nassert     sum_div(0)    ==    0\nassert     sum_div(1)    ==    1\nassert     sum_div(36)    ==    1 + 3 + 6 + 9 + 18 + 36\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_div(1) == 1\nassert     sum_div(10) == 1\nassert     sum_div(100) == 1\nassert     sum_div(101) == 1\nassert     sum_div(1000) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([1,2,3]) == 0\nassert     get_Inv_Count([1,1,1]) == 0\nassert     get_Inv_Count([1,2,3,4,5]) == 3\nassert     get_Inv_Count([2,1,3,4,5]) == 2\nassert     get_Inv_Count([2,3,1,4,5]) == 2\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([2, 1, 4, 3, 5]) == 3, 'get_Inv_Count( [2, 1, 4, 3, 5] )'\nassert     get_Inv_Count([2, 5, 4, 3, 1]) == 4, 'get_Inv_Count( [2, 5, 4, 3, 1] )'\nassert     get_Inv_Count([1, 2, 3, 4, 5]) == 0, 'get_Inv_Count( [1, 2, 3, 4, 5] )'"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([1, 5, 3, 2, 4, 6, 7, 8]) == 0\nassert     get_Inv_Count([5, 3, 2, 1, 4, 6, 7, 8]) == 1\nassert     get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8]) == 2\nassert     get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 6\nassert     get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 22\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([1, 2, 3, 4]) == 0\nassert     get_Inv_Count([1, 4, 3, 2]) == 1\nassert     get_Inv_Count([2, 4, 1, 3]) == 2\nassert     get_Inv_Count([2, 4, 3, 1]) == 3\nassert     get_Inv_Count([3, 1, 2, 4]) == 4\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_Inv_Count([2,1,3,4,5]) == 3\nassert     get_Inv_Count([2,3,1,4,5]) == 3\nassert     get_Inv_Count([2,4,1,3,5]) == 3\nassert     get_Inv_Count([5,4,3,2,1]) == 3\nassert     get_Inv_Count([2,3,1,5,4]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([1,4,7,2,5]) == 3\nassert     get_Inv_Count([2,3,4,1]) == 2\nassert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([2,1]) == 1\nassert     get_Inv_Count([2]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_Inv_Count(get_count_inversion(5)) == 0\nassert     get_Inv_Count(get_count_inversion(3)) == 1\nassert     get_Inv_Count(get_count_inversion(1)) == 0\nassert     get_Inv_Count(get_count_inversion([1,2,3,4,5,6,7,8])) == 0\nassert     get_Inv_Count(get_count_inversion([3,2,1,4,5,6,7,8])) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_Inv_Count([1, 3, 2, 4, 5]) == 5\nassert     get_Inv_Count([3, 2, 4, 5, 1]) == 7\n\ndef get_Inversion_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([0,2,1,3]) == 1\nassert     get_Inv_Count([1,3,5,4]) == 0\nassert     get_Inv_Count([5,4,3,2,1]) == 4\nassert     get_Inv_Count([2,1,3,5,4]) == 5\nassert     get_Inv_Count([5,4,3,2,1,0]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_Inv_Count([1,2,3,4,5,6]) == 2\nassert     get_Inv_Count([2,1,3,5,4,6]) == 3\nassert     get_Inv_Count([3,1,2,5,4,6]) == 4\nassert     get_Inv_Count([4,1,2,3,5,6]) == 5\nassert     get_Inv_Count([5,1,2,3,4,6]) == 6\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flatten_list([[1, 2], [3, 4], [5, 6, 7], [8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     flatten_list([1, [1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     flatten_list([[1, [2, 2, 2], 4], [1, 1], [1, 2, 3], [4, 4, 4, 4, 4]]) == [1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4]\nassert     flatten_list([[1, [2, 2, 2], 4], [1, 1], [1, 2, 3], [4, 4, 4, 4, 4]]) == [1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4]\nassert     flatten_list([[[1, 1, 1], [1, 1, 1], [1, 1, 1]], [1, 1], [1, 2, 3], [4, 4, 4, 4, 4]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     flatten_list([1, 2, 3, [4, 5, 6, [7, 8, 9]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     flatten_list([[1, 2, 3], [4, 5], 6]) == [1, 2, 3, 4, 5, 6]\nassert     flatten_list([1, 2, 3]) == [1, 2, 3]\nassert     flatten_list([]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flatten_list([[1,'a',['cat'],2],[[[3]], 'dog'],4,5]) == [1,'a','cat',2,3,'dog',4,5]\nassert flatten_list([[1,2],[3,[4,['hello']]],5]) == [1,2,3,4,'hello',5]\nassert flatten_list([1,[2,[3,[4,['hello']]],5],6]) == [1,2,3,4,'hello',5,6]\nassert flatten_list([[[2,3,4],5,6,[7,[8,[9,[10,['I']]]]]]]) == [2,3,4,5,6,7,8,9,10,'I']\nassert flatten_list([[1,2],[3,[4,['hello']]],5]) == [1,2,3,4,'hello',5]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     flatten_list([]) == []\nassert     flatten_list([1,2,3]) == [1,2,3]\nassert     flatten_list([1,[2,3],[[5,[1,2]],1]]) == [1,2,3,5,1,2]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flatten_list([1, 2, 3]) == [1, 2, 3], \"Test 1\"\nassert     flatten_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4], \"Test 2\"\nassert     flatten_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7], \"Test 3\"\nassert     flatten_list([[9, [2, 2, 2], 3], [4, [5, 6, [6], 6, 6, 6], 7], [8, [9, [10], 11]], 12]) == [9, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12], \"Test 4\"\nassert     flatten_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7], [8, [9, [10], 11]], 12]) == [2, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12], \"Test 5\"\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]\nassert     flatten_list([[1, [2, 3], 4], 5]) == [1, 2, 3, 4, 5]\nassert     flatten_list([[[1, 2], 3], 4, 5]) == [1, 2, 3, 4, 5]\nassert     flatten_list([]) == []\n\ndef sort_list(list1, reverse = False):\n    '''\n    Write a function that accepts a nested list of integers and returns a sorted version of the list, \n    using the bubble sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flatten_list([[1, 2], [1, [3, 4]], 5]) == [1, 2, 1, 3, 4, 5]\nassert     flatten_list([[1, [2, 3]], [4], [[5]]]) == [1, 2, 3, 4, 5]\nassert     flatten_list([]) == []\n\ndef flatten_list_2(list1):\n    '''\n    Write a function to flatten a given nested list structure using recursion.\n    '''\n    pass"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     flatten_list([[1, [1, [2]]], [3, [4, [5]]], [6, [7, [8, [9]]]]]) == [1, 1, 2, 3, 4, 5, 7, 8, 9]\nassert     flatten_list([[1, [1, [2]]], [3, [4, [5]]], [6, [7, [8, [9]]]]]) == [1, 1, 2, 3, 4, 5, 7, 8, 9]\nassert     flatten_list([[1, [1, [2]]], [3, [4, [5]]]]) == [1, 1, 2, 3, 4, 5]\nassert     flatten_list([[1, [1, [2]]], [3, [4, [5]]], [6, [7, [8, [9]]]]]) == [1, 1, 2, 3, 4, 5, 7, 8, 9]\nassert     flatten_list([[1, [1, [2]]], [3, [4, [5]]]]) == [1, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     flatten_list([1, [2, 3]]) == [1, 2, 3]\nassert     flatten_list([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]\nassert     flatten_list([]) == []\nassert     flatten_list([[]]) == []\nassert     flatten_list([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_aggregate([(1,2), (2,3), (3,4), (4,5)]) == (4, [1,2,3,4])\nassert     max_aggregate([(1,2), (2,3), (3,4), (4,5)]) == (4, [1,2,3,4])\nassert     max_aggregate([(1,2), (2,3), (3,4), (4,5)]) == (4, [1,2,3,4])\nassert     max_aggregate([(1,2), (2,3), (3,4), (4,5)]) == (4, [1,2,3,4])\nassert     max_aggregate([(1,2), (2,3), (3,4), (4,5)]) == (4, [1,2,3,4])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_aggregate([(1,2),(2,3),(3,4)]) == 4\nassert     max_aggregate([(1,2),(2,3),(3,4),(4,5)]) == 5\nassert     max_aggregate([(1,2),(2,3),(3,4),(4,5),(5,6)]) == 6\nassert     max_aggregate([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7)]) == 7\nassert     max_aggregate([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8)]) == 8\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_aggregate([(1,2,3,4),(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8),(6,7,8,9)]) == (9,3)\nassert     max_aggregate([(2,3,4,5),(3,4,5,6),(4,5,6,7),(5,6,7,8),(6,7,8,9),(7,8,9,10)]) == (10,7)\nassert     max_aggregate([(1,2,3,4,5),(2,3,4,5,6),(3,4,5,6,7),(4,5,6,7,8),(5,6,7,8,9),(6,7,8,9,10)]) == (10,9)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_aggregate([(4, 5), (5, 7), (3, 2)]) == 7\nassert     max_aggregate([(4, 5), (5, 7), (3, 2), (3, 3)]) == 7\nassert     max_aggregate([(4, 5), (5, 7), (3, 2), (3, 3), (1, 0)]) == 7\nassert     max_aggregate([(4, 5), (5, 7), (3, 2), (3, 3), (3, 3), (1, 0)]) == 7\nassert     max_aggregate([(4, 5), (5, 7), (3, 2), (3, 3), (3, 3), (1, 0), (4, 5)]) == 7\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_aggregate([(1,2),(3,4)]) == 4\nassert     max_aggregate([(1,2),(1,2)]) == 2\nassert     max_aggregate([(1,2,3),(3,4,5),(2,1)]) == 6\nassert     max_aggregate([(1,2,3,4),(3,4,5,6),(2,1,4)]) == 16\nassert     max_aggregate([(1,2,3,4,5),(3,4,5,6,7),(2,1,4,5)]) == 19\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_aggregate( [(1, 5, 8, 10), (7, 2, 4, 8), (9, 6, 10, 4), (7, 8, 5, 4)]) == 16\nassert     max_aggregate( [(1, 5, 4, 3), (7, 2, 4, 3), (9, 6, 10, 3), (7, 8, 5, 3)]) == 9\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_aggregate([\n        ('A', {'w': 4,'s': 8, 'c': 3}), \n        ('B', {'w': 3,'s': 1, 'c': 2}), \n        ('C', {'w': 4,'s': 5, 'c': 4}), \n        ('D', {'w': 2,'s': 8, 'c': 4}), \n        ('E', {'w': 3,'s': 8, 'c': 1}), \n        ('F', {'w': 2,'s': 2, 'c': 4}), \n        ('G', {'w': 1,'s': 3, 'c': 3}), \n        ('H', {'w': 3,'s': 4, 'c': 2}), \n        ('I', {'w': 2,'s': 2, 'c': 4}), \n        ('J', {'w': 1,'s': 2, 'c': 4}), \n        ('K', {'w': 3,'s': 1, 'c': 1})]) == 'A'\nassert     max_aggregate([\n        ('A', {'w': 4,'s': 8, 'c': 3}), \n        ('B', {'w': 3,'s': 1, 'c': 2}), \n        ('C', {'w': 4,'s': 5, 'c': 4}), \n        ('D', {'w': 2,'s': 8, 'c': 4}), \n        ('E', {'w': 3,'s': 8, 'c': 1}), \n        ('F', {'w': 2,'s': 2, 'c': 4}), \n        ('G', {'w': 1,'s': 3, 'c': 3}), \n        ('H', {'w': 3,'s': 4, 'c': 2}), \n        ('I', {'w': 2,'s': 2, 'c': 4}), \n        ('J', {'w': 1,'s': 2, 'c': 4}), \n        ('K', {'w': 3,'s': 1, 'c': 1})]) == 'D'\nassert     max_aggregate([\n        ('A', {'w': 4,'s': 8, 'c': 3}), \n        ('B', {'w': 3,'s': 1, 'c': 2}), \n        ('C', {'w': 4,'s': 5, 'c': 4}), \n        ('D', {'w': 2,'s': 8, 'c': 4}), \n        ('E', {'w': 3,'s': 8, 'c': 1}), \n        ('F', {'w': 2,'s': 2, 'c': 4}), \n        ('G', {'w': 1,'s': 3, 'c': 3}), \n        ('H', {'w': 3,'s': 4, 'c': 2}), \n        ('I', {'w': 2,'s': 2, 'c': 4}), \n        ('J', {'w': 1,'s': 2, 'c': 4}), \n        ('K', {'w': 3,'s': 1, 'c': 1})]) == 'G'\nassert     max_aggregate([\n        ('A', {'w': 4,'s': 8, 'c': 3}), \n        ('B', {'w': 3,'s': 1, 'c': 2}), \n        ('C', {'w': 4,'s': 5, 'c': 4}), \n        ('D', {'w': 2,'s': 8, 'c': 4}), \n        ('E', {'w': 3,'s': 8, 'c': 1}), \n        ('F', {'w': 2,'s': 2, 'c': 4}), \n        ('G', {'w': 1,'s': 3, 'c': 3}), \n        ('H', {'w': 3,'s': 4, 'c': 2}), \n        ('I', {'w': 2,'s': 2, 'c': 4}), \n        ('J', {'w': 1,'s': 2, 'c': 4}), \n        ('K', {'w': 3,'s': 1, 'c': 1})]) == 'H'\nassert     max_aggregate([\n        ('A', {'w': 4,'s': 8, 'c': 3}), \n        ('B', {'w': 3,'s': 1, 'c': 2}), \n        ('C', {'w': 4,'s': 5, 'c': 4}), \n        ('D', {'w': 2,'s': 8, 'c': 4}), \n        ('E', {'w': 3,'s': 8, 'c': 1}), \n        ('F', {'w': 2,'s': 2, 'c': 4}), \n        ('G', {'w': 1,'s': 3, 'c': 3}), \n        ('H', {'w': 3,'s': 4, 'c': 2}), \n        ('I', {'w': 2,'s': 2, 'c': 4}), \n        ('J', {'w': 1,'s': 2, 'c': 4}), \n        ('K', {'w': 3,'s': 1, 'c': 1})]) == 'C'\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_aggregate([('California', 'San Francisco'), ('California', 'Mountain View'), ('Texas', 'Austin'), ('Texas', 'Houston'), ('Texas', 'San Antonio')]) == 'Mountain View'\nassert     max_aggregate([('California', 'San Francisco'), ('California', 'Mountain View'), ('Texas', 'Austin'), ('Texas', 'Houston')]) == 'San Francisco'\nassert     max_aggregate([('California', 'San Francisco'), ('California', 'Mountain View'), ('Texas', 'Austin'), ('Texas', 'Houston'), ('Texas', 'San Antonio')]) == 'San Francisco'\nassert     max_aggregate([('California', 'San Francisco'), ('California', 'Mountain View'), ('Texas', 'Austin'), ('Texas', 'Houston')]) == 'San Francisco'\nassert     max_aggregate([('California', 'San Francisco'), ('California', 'Mountain View'), ('Texas', 'Austin')]) == 'San Francisco'\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_binary_seq(3)    == 2\nassert     count_binary_seq(1)    == 1\nassert     count_binary_seq(2)    == 1\nassert     count_binary_seq(5)    == 10\nassert     count_binary_seq(7)    == 15\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_binary_seq(5) == 7\nassert     count_binary_seq(7) == 29\nassert     count_binary_seq(6) == 12\nassert     count_binary_seq(9) == 82\nassert     count_binary_seq(10) == 504\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_binary_seq(2)     == 3\nassert     count_binary_seq(3)     == 5\nassert     count_binary_seq(4)     == 5\nassert     count_binary_seq(5)     == 5\nassert     count_binary_seq(6)     == 5\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 0\nassert     count_binary_seq(3) == 0\nassert     count_binary_seq(4) == 0\nassert     count_binary_seq(5) == 1\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef count_binary_seq_with_tuple(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_binary_seq(2) == 1\nassert     count_binary_seq(3) == 3\nassert     count_binary_seq(4) == 3\nassert     count_binary_seq(5) == 2\nassert     count_binary_seq(6) == 3\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_binary_seq(3)    ==     20\nassert     count_binary_seq(1)    ==     8\nassert     count_binary_seq(5)    ==     48\nassert     count_binary_seq(7)    ==     127\nassert     count_binary_seq(8)    ==     256\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_binary_seq(3) == 5\nassert     count_binary_seq(4) == 6\nassert     count_binary_seq(6) == 13\nassert     count_binary_seq(8) == 35\nassert     count_binary_seq(9) == 46\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_binary_seq(2) == 4\nassert     count_binary_seq(3) == 6\nassert     count_binary_seq(4) == 8\nassert     count_binary_seq(5) == 10\nassert     count_binary_seq(6) == 12\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (count_binary_seq(1) == 1)         # n = 1\nassert     (count_binary_seq(2) == 2)         # n = 2\nassert     (count_binary_seq(3) == 4)         # n = 3\nassert     (count_binary_seq(5) == 10)        # n = 5\nassert     (count_binary_seq(7) == 28)        # n = 7\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     dict_depth({'a':1, 'b': {'c': {'d': {'e': None}}}}) == 3\nassert     dict_depth({'a':1, 'b': {'c': {'d': None}}}) == 2\nassert     dict_depth({}) == 0\nassert     dict_depth(('a', 'b', 'c')) == 3\nassert     dict_depth('a') == 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}, 'n': {'o': {'p': {'q': {'r': {'s': {'t': {}}}}}}, 'v': {'w': {'x': {'y': {'z': {}}}}}}, 'y': {'z': {'q': {}}}}}}}}}, 'v': {'w': {'x': {'y': {'z': {'q': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}}, 'q': {'r': {'s': {'t': {}}}}}},'m': {'a': 1, 'b': {'c': {'d': {"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dict_depth({'1':2,'2':3})==2\nassert     dict_depth({'1':2,'2':3,'3':4,'4':5,'5':6})==2\nassert     dict_depth({})==0\nassert     dict_depth({'1':1,'2':2})==1\nassert     dict_depth(dict())==0\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     {1:2,2:3} == dict_depth({1:2,2:3})\nassert     {1:2,2:3,3:{4:5}} == dict_depth({1:2,2:3,3:{4:5}})\nassert     {1:2,2:3,3:{4:5},5:{6:7}} == dict_depth({1:2,2:3,3:{4:5},5:{6:7}})\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3}}) == 3\nassert dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3, 'e': {'a': 1, 'b': 2, 'c': 3}}} ) == 4\nassert dict_depth(['a', 'b', ['c', 'd'], 'e']) == 4\nassert dict_depth([]) == 0\nassert dict_depth(None) == -1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dict_depth({'key': 1, 'a': {'b': {'c': {'d': {}}}}}) == 3\nassert     dict_depth({'key': 1, 'a': {'b': {'c': {'d': {'e': {'f': {}}}}}}}, 2) == 2\nassert     dict_depth({'key': 1, 'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {}}}}}}}, 'i': {'j': {'k': {'l': {}}}}},'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {}}}}}}}}}}}}}}}}) == 6\nassert     dict_depth({}) == 0\nassert     dict_depth({1: 2, 'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {}}}}}}}}}}},'m': {'n': {'o': {'p': {'q': {'r': {'s': {'t': {'u': {'v': {'w': {'x': {'y': {'z': {}}}}}}}}}}}}}}}}) == 5\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dict_depth({'a':1, 'b':1, 'c':1}) == 3\nassert     dict_depth({'a':1, 'b':2, 'c':1}) == 2\nassert     dict_depth({'a':1, 'b':2, 'c':{'d':5, 'e':10}}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a': 1}) == 1\nassert     dict_depth({'a': 1, 'b': 2, 'c': 3}) == 2\nassert     dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3, 'd': {'a': 1, 'b': 2, 'c': 3, 'd': {}}}}) == 3"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {}}}}}}}\nassert     dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {}}}}}}}})\nassert     dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {}}}}}}}})\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": {\"e\": 4, \"f\": 5, \"g\": {\"h\": 6, \"i\": 7}}}) == 3\nassert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": {\"f\": 5, \"g\": 6}, \"h\": \"i\"}) == 3\nassert     dict_depth({}) == 1\nassert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": {\"g\": 6, \"h\": 7}, \"h\": \"i\"}) == 2\nassert     dict_depth({'key1': {'key2': {'key3': {'key4': 'value'}}}}) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Element([1, 2, 3, 4, 5, 6, 7],    [(0, 3), (4, 6)],    [1, 1, 1, 1, 1, 1, 1], 0) == 2, 'Failed'\nassert     find_Element([1, 2, 3, 4, 5, 6, 7],    [(0, 3), (4, 6)],    [1, 1, 1, 1, 1, 1, 1], 1) == 3, 'Failed'\nassert     find_Element([1, 2, 3, 4, 5, 6, 7],    [(0, 3), (4, 6)],    [1, 1, 1, 1, 1, 1, 1], 7) == 6, 'Failed'\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Element([1,2,3,4,5,6],0,[1,2,3,4,5,6],[0]) == 1\nassert     find_Element([1,2,3,4,5,6],0,[1,2,3,4,5,6],[2]) == 3\nassert     find_Element([1,2,3,4,5,6],0,[1,2,3,4,5,6],[3]) == 4\nassert     find_Element([1,2,3,4,5,6],0,[1,2,3,4,5,6],[4]) == 5\nassert     find_Element([1,2,3,4,5,6],0,[1,2,3,4,5,6],[5]) == 6\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Element(rotations,ranges,rotations,0) == rotations[0]\nassert     find_Element(rotations,ranges,rotations,1) == rotations[1]\nassert     find_Element(rotations,ranges,rotations,2) == rotations[2]\nassert     find_Element(rotations,ranges,rotations,3) == rotations[3]\nassert     find_Element(rotations,ranges,rotations,4) == rotations[4]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Element(arr,ranges,rotations,0) == [2,2,2,3,3,4,4,5,5,6,6,7,7]\nassert find_Element(arr,ranges,rotations,1) == [2,2,2,3,3,4,4,5,5,6,6,7,7]\nassert find_Element(arr,ranges,rotations,2) == [3,3,3,4,4,5,5,6,6,7,7,8,8]\nassert find_Element(arr,ranges,rotations,3) == [4,4,4,5,5,6,6,7,7,8,8,9,9]\nassert find_Element(arr,ranges,rotations,4) == [5,5,5,6,6,7,7,8,8,9,9,10,10]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Element(arr,ranges,rotations,index) == 45\n\nif __name__ == '__main__':\n    arr = [4, 5, 6, 7, 1, 2, 3]\n    ranges = [[0, 4], [0, 5], [0, 6], [0, 7], [0, 1], [0, 2], [0, 3]]\n    rotations = [[0, 1], [1, 2], [2, 3], [3, 4], [0, 4], [1, 5], [2, 6]]\n    index = 4\n\n    print(find_Element(arr,ranges,rotations,index)"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8],[[0,3,6],[1,4,7]],[2,4,6],0)==1, \"Failed test 1\"\nassert     find_Element([1,2,3,4,5,6,7,8],[[0,3,6],[1,4,7]],[2,4,6],3)==7, \"Failed test 2\"\nassert     find_Element([1,2,3,4,5,6,7,8],[[0,3,6],[1,4,7]],[2,4,6],5)==4, \"Failed test 3\"\nassert     find_Element([1,2,3,4,5,6,7,8],[[0,3,6],[1,4,7]],[2,4,6],6)==6, \"Failed test 4\"\nassert     find_Element([1,2,3,4,5,6,7,8],[[0,3,6],[1,4,7]],[2,4,6],7)==2, \"Failed test 5\"\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Element([1,2,3,4,5,6], [1,1,1,1,1,1], [1,1,1,1,1,1],2) == 3\nassert     find_Element([1,2,3,4,5,6], [1,1,1,1,1,1], [1,1,1,1,1,1],3) == 4\nassert     find_Element([1,2,3,4,5,6], [1,1,1,1,1,1], [1,1,1,1,1,1],5) == 2\nassert     find_Element([1,2,3,4,5,6], [1,1,1,1,1,1], [1,1,1,1,1,1],1) == 1\nassert     find_Element([1,2,3,4,5,6], [1,1,1,1,1,1], [1,1,1,1,1,1],0) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Element(arr,ranges,rotations,0) == \"element at index 0 is \" + str(arr[0])\nassert     find_Element(arr,ranges,rotations,1) == \"element at index 1 is \" + str(arr[1])\nassert     find_Element(arr,ranges,rotations,2) == \"element at index 2 is \" + str(arr[2])\nassert     find_Element(arr,ranges,rotations,3) == \"element at index 3 is \" + str(arr[3])\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Element([1,2,3,4],[[1,2],[3,4],[1,3]],[1,2,1,3],0) == 2\nassert     find_Element([1,2,3,4],[[1,2],[3,4],[1,3]],[1,2,1,3],1) == 1\nassert     find_Element([1,2,3,4],[[1,2],[3,4],[1,3]],[1,2,1,3],2) == 3\nassert     find_Element([1,2,3,4],[[1,2],[3,4],[1,3]],[1,2,1,3],3) == 4\nassert     find_Element([1,2,3,4],[[1,2],[3,4],[1,3]],[1,2,1,3],4) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Element([1,3,5,7,9], [1,3,5,7,9,10,11], 3, 8) == 7\nassert     find_Element([1,3,5,7,9], [1,3,5,7,9,10,11], 2, 2) == 9\nassert     find_Element([1,3,5,7,9], [1,3,5,7,9,10,11], 1, 1) == 1\nassert     find_Element([1,3,5,7,9], [1,3,5,7,9,10,11], 0, 0) == 1\nassert     find_Element([1,3,5,7,9], [1,3,5,7,9,10,11], -1, 0) == 9\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert start_withp(['abc', 'xyz', 'pqr', 'pq', 'ps']) == ['pqr', 'ps']\nassert start_withp(['abc', 'xyz', 'pqr', 'pq', 'ps', 'tuv', 'wxy', 'vw', 'wx', 'wxz']) == ['pqr', 'ps']\nassert start_withp(['abc', 'xyz', 'pqr', 'pq', 'ps', 'tuv', 'wxy', 'vw', 'wx', 'wxz']) == ['pqr', 'ps']\n\ndef start_with_3_digits(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     start_withp(['the', 'boy', 'is', 'playing', 'golf']) == ['boy', 'is']\nassert     start_withp(['the', 'boy', 'is', 'playing', 'piano']) == []\nassert     start_withp(['the', 'boy', 'is', 'playing', 'tennis']) == []\nassert     start_withp(['the', 'girl', 'is', 'playing','soccer']) == ['girl']\nassert     start_withp(['the', 'girl', 'is', 'playing', 'tennis']) == []\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     start_withp([\"apples\", \"pears\", \"bananas\"]) == [\"pears\", \"bananas\"]\nassert     start_withp([\"apples\", \"oranges\", \"pears\"]) == [\"pears\"]\nassert     start_withp([\"hello\", \"hey\", \"he\"]) == []\nassert     start_withp([]) == []\n\ndef group_anagrams(words):\n    '''\n    Write a function that groups anagrams together. For example:\n    If the list of words is:\n    ['can', 'hi', 'can', 'yo', 'ba', 'ga', 'ye', 'ya']\n    The function should return:\n    [['ye', 'ba'], ['yo', 'ga'], ['hi', 'hi', 'can'], ['ye', 'ya']]\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     start_withp(['hello', 'hi', 'goodbye', 'is', 'python', 'python']) == ['python', 'python']\nassert     start_withp(['hello', 'python', 'goodbye', 'is', 'python', 'python']) == ['python', 'python']\nassert     start_withp(['hello', 'python', 'goodbye', 'is', 'python', 'python']) == ['python', 'python']\nassert     start_withp(['python', 'python', 'python']) == ['python', 'python']\nassert     start_withp(['hello', 'python', 'goodbye', 'is', 'python', 'python']) == ['python', 'python']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     start_withp(['pamela', 'panaman', 'panama']) == 'panama', \"this is wrong\"\nassert     start_withp(['pamela', 'panaman', 'panama', 'panama', 'panama', 'panama', 'panama', 'panama', 'panama']) == 'panama', \"this is wrong\"\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     start_withp(['apple', 'papaya', 'pear', 'piglet', 'pig', 'piglet']) == ['piglet', 'pig']\nassert     start_withp(['apple', 'papaya', 'pear', 'piglet', 'pig', 'piglet']) == ['piglet', 'pig']\nassert     start_withp(['apple', 'pear', 'piglet', 'pig', 'piglet']) == ['piglet', 'pig']\nassert     start_withp(['papaya', 'pear', 'piglet', 'pig', 'piglet']) == ['piglet', 'pig']\nassert     start_withp(['papaya', 'piglet', 'pig', 'piglet', 'pig']) == ['piglet', 'pig']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     start_withp(['power','sports']) == ['power','sports']\nassert     start_withp(['power','sports'])!= ['tough','to','up','of']\nassert     start_withp(['power','sports'])!= ['power','sports','technology']\n\ndef true_is_false(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \ndef test_start_withp():\n    assert start_withp(['python', 'is', 'awesome']) == 'python'\n    assert start_withp(['python', 'is','very', 'interesting']) == 'python'\n    assert start_withp(['python', 'is','very', 'in', 'interesting']) == 'interesting'\n    assert start_withp(['python', 'is','very', 'interesting']) == 'interesting'\n    "
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     start_withp(['puer', 'purple', 'puython', 'peterpan', 'python']) == ['puer', 'python']\nassert     start_withp(['python', 'puer', 'puython', 'peterpan']) == ['python', 'puer']\nassert     start_withp(['sugar', 'puer', 'purple', 'puython', 'peterpan', 'python']) == ['sugar', 'python']\nassert     start_withp(['python', 'puer', 'purple', 'puython', 'peterpan']) == ['python', 'puer']\nassert     start_withp(['tensor', 'puer', 'purple', 'puython', 'peterpan', 'python']) == ['tensor', 'python']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     start_withp(['apple', 'pear', 'orange', 'bannana']) == ['pear', 'orange']\nassert     start_withp(['apple', 'pear', 'orange', 'banana']) == ['pear', 'orange']\nassert     start_withp(['apple', 'banana', 'pear', 'orange']) == ['pear', 'orange']\nassert     start_withp(['apple', 'banana', 'pear', 'pear']) == ['pear', 'pear']\nassert     start_withp(['apple', 'pear', 'orange']) == ['pear', 'orange']\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_sum_increasing_subseq([1, 2, 5, 7, 6, 4, 5, 6], 8, 5, 8) == 19\nassert     max_sum_increasing_subseq([1, 2, 5, 7, 6, 4, 5, 6], 8, 5, 9) == 19\nassert     max_sum_increasing_subseq([1, 2, 5, 7, 6, 4, 5, 6], 8, 6, 8) == 22\nassert     max_sum_increasing_subseq([1, 2, 5, 7, 6, 4, 5, 6], 8, 7, 8) == 22\nassert     max_sum_increasing_subseq([1, 2, 5, 7, 6, 4, 5, 6], 8, 0, 8) == 19\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sum_increasing_subseq([1,2,4,5,7,3], 6, 5, 5) == 17\nassert     max_sum_increasing_subseq([1,2,4,5,7,3], 6, 3, 4) == 22\nassert     max_sum_increasing_subseq([1,2,4,5,7,3], 6, 4, 5) == 13\nassert     max_sum_increasing_subseq([1,2,4,5,7,3], 6, 1, 4) == 13\nassert     max_sum_increasing_subseq([1,2,4,5,7,3], 6, 1, 3) == 17\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_sum_increasing_subseq([1, 1, 2, 3, 4], 5, 4, 5) == 11\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 4, 5) == 11\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 4, 0) == 11\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 4, 6) == 11\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 4, -1) == 11\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_sum_increasing_subseq([1, 3, 2, 7, 9, 11], 5, 1, 4) == 10\nassert     max_sum_increasing_subseq([1, 3, 2, 7, 9, 11], 5, 0, 2) == 13\nassert     max_sum_increasing_subseq([1, 3, 2, 7, 9, 11], 5, 5, 5) == 11\nassert     max_sum_increasing_subseq([1, 3, 2, 7, 9, 11], 5, 0, 0) == 11\nassert     max_sum_increasing_subseq([1, 3, 2, 7, 9, 11], 5, 1, 6) == 13\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sum_increasing_subseq([1, 3, 7, 10, 13, 17, 19, 18, 20], 7, 5, 4) == 39\nassert     max_sum_increasing_subseq([1, 3, 7, 10, 13, 17, 19, 18, 20], 7, 5, 3) == 22\nassert     max_sum_increasing_subseq([1, 3, 7, 10, 13, 17, 19, 18, 20], 7, 5, 0) == 22\nassert     max_sum_increasing_subseq([1, 3, 7, 10, 13, 17, 19, 18, 20], 7, 4, 0) == 19\nassert     max_sum_increasing_subseq([1, 3, 7, 10, 13, 17, 19, 18, 20], 7, 4, 1) == 19\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_sum_increasing_subseq([1, 2, 3, 7, 8, 10], 5, 3, 10) == 16\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 4) == 14\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 4) == 15\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 4, 4) == 12\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 1, 4) == 12\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_sum_increasing_subseq([2,3,3,5,10], 5, 1, 5) == 10\nassert     max_sum_increasing_subseq([1,4,2,5,2,3,6], 6, 0, 5) == 6\nassert     max_sum_increasing_subseq([1,2,4,2,5,6,7], 8, 1, 5) == 15\nassert     max_sum_increasing_subseq([1,2,4,2,5,6,7], 8, 0, 5) == 7\n\ndef max_sum_decreasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of decreasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef max_sum_increasing_subseq_optimal(a, n, index, k):\n    '''\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n\nassert \n\ndef max_sum_increasing_subseq_optimal2(a, n, index, k):\n    '''\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     colon_tuplex((1,2,3),2,3) == ((1,2),(3,))\nassert     colon_tuplex((1,2,3,4,5,6),5,7) == ((1,2,3),(4,5,6),(7,))\nassert     colon_tuplex((1,2,3,4,5,6,7,8,9,10),5,3) == ((1,2,3),(4,5,6),(7,8,9,10))\nassert     colon_tuplex((1,2,3,4,5,6,7,8,9,10),8,5) == ((1,2,3,4),(5,6,7,8,9,10))\nassert     colon_tuplex((1,2,3,4,5,6,7,8,9,10),3,5) == ((1,2,3,4,5),(6,7,8,9,10))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     colon_tuplex(('a',),2,1) == 'b'\nassert     colon_tuplex(('a',),3,1) == 'c'\nassert     colon_tuplex(('a',),2,2) == 'b'\nassert     colon_tuplex(('a',),3,2) == 'c'\nassert     colon_tuplex(('a',),2,3) == 'b'\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     colon_tuplex([1,2,3,4],2,3) == (2,3)\nassert     colon_tuplex([1,2,3,4],1,3) == (1,3)\nassert     colon_tuplex([1,2,3,4],0,3) == (0,3)\nassert     colon_tuplex([1,2,3,4],0,4) == (0,4)\nassert     colon_tuplex([1,2,3,4],1,4) == (1,4)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef dictionaries(a,b):\n    '''\n    Write a function to combine two dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef tuplex_to_array(tuplex,m,n):\n    '''\n    Write a function to convert a tuplex to an array\n    '''\n    array = []\n    for i in range(m):\n        tmp = []\n        for j in range(n):\n            tmp.append(tuplex[i][j])\n        array.append(tmp)\n    return array\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n(colon_tuplex((1,2,3),1,2) == (1,3))\nassert \n(colon_tuplex((1,2,3),2,1) == (2,1))\nassert \n(colon_tuplex((1,2,3),2,2) == (2,2))\nassert \n(colon_tuplex((1,2,3),3,1) == (3,1))\nassert \n(colon_tuplex((1,2,3),3,2) == (3,2))\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     colon_tuplex((0,1,2),2,3) == (0,1,2,1,2,3)\nassert     colon_tuplex((1,2,3),4,5) == (1,2,3,4,5,1)\nassert     colon_tuplex((2,3),2,4) == (2,3,2,3)\nassert     colon_tuplex((3,4,5),2,4) == (3,4,5,3,4,5)\nassert     colon_tuplex((4,5),2,4) == (4,5,4,5)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     colon_tuplex(tuple(),3,4) ==     (3,4)\nassert     colon_tuplex(tuple(),4,5) ==     (4,5)\nassert     colon_tuplex(tuple(),5,5) ==     ()\nassert     colon_tuplex(tuple(),2,6) ==     (2,6)\nassert     colon_tuplex(tuple(),6,7) ==     (6,7)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     colon_tuplex((1,2,3,4,5,6,7,8,9),3,2) == (3,4)\nassert     colon_tuplex((1,2,3,4,5,6,7,8,9),4,3) == (4,5)\nassert     colon_tuplex((1,2,3,4,5,6,7,8,9),5,4) == (5,6)\nassert     colon_tuplex((1,2,3,4,5,6,7,8,9),6,5) == (6,7)\nassert     colon_tuplex((1,2,3,4,5,6,7,8,9),7,6) == (7,8)\n"
    },
    {
        "number": 307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     colon_tuplex((1,2,3,4),3,2) == (1,2,4,3)\nassert     colon_tuplex((1,2,3,4,5,6),3,2) == (1,2,5,4,3)\nassert     colon_tuplex((1,2,3,4),1,5) == (1,2,3,4)\nassert     colon_tuplex((1,2,3,4),2,4) == (1,3,2,4)\nassert     colon_tuplex((1,2,3,4),4,1) == (2,1,3,4)\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     large_product([2,3,5,6,8,10], [2,3,4,8,9,10,12], 3) == 12\nassert     large_product([-2,3,5,6,8,10], [-2,3,4,8,9,10,12], 3) == 36\nassert     large_product([2,3,5,6,8,10], [2,3,4,8,9,10], 2) == 96\nassert     large_product([2,3,5,6,8,10], [2,3,4,8,9,10], 3) == 36\nassert     large_product([-2,3,5,6,8,10], [-2,3,4,8,9,10,12], 3) == 36\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     large_product([1, 2, 3], [4, 5, 6], 2) == [6, 6]\nassert     large_product([1, 2, 3], [4, 5, 6], 3) == [6, 6, 6]\nassert     large_product([1, 2, 3], [4, 5, 6], 4) == [6, 6, 6, 6]\nassert     large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4) == [10, 10, 10, 10]\n\ndef large_product_hash(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     large_product([1,2,3,4,5],[5,4,3,2,1],4) == [5,4,3,2]\nassert     large_product([1,2,3,4,5],[5,4,3,2,1],5) == [5,4,3,2]\nassert     large_product([1,2,3,4,5],[5,4,3,2,1],6) == [5,4,3,2]\nassert     large_product([1,2,3,4,5],[5,4,3,2,1],7) == [5,4,3,2]\nassert     large_product([1,2,3,4,5],[5,4,3,2,1],8) == [5,4,3,2]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert large_product([3, 2, 1], [4, 1, 2], 2) == [2, 1]\nassert large_product([2, 5, 6], [2, 3, 2], 3) == [6, 5, 3]\nassert large_product([2, 3, 1, 1, 2, 3, 1], [2, 2, 1, 2, 3, 1, 4, 1, 1, 2], 8) == [2, 2, 1, 2, 3, 1, 4, 1, 1, 2]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     large_product([2, 3, 4, 5], [1, 6, 7, 8], 5) == [60, 240, 40, 30, 24]\nassert     large_product([2, 3, 4, 5], [1, 6, 7, 8], 4) == [120, 360, 80, 60]\nassert     large_product([2, 3, 4, 5], [1, 6, 7, 8], 3) == [30, 30, 30, 30]\nassert     large_product([2, 3, 4, 5], [1, 6, 7, 8], 2) == [10, 60]\nassert     large_product([2, 3, 4, 5], [1, 6, 7, 8], 1) == [2, 6]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     large_product([1,2,3,4,5], [1,2,3,4,5], 1) == [1,3]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 2) == [1,2,6]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 3) == [1,2,3,6]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 4) == [1,2,3,4,12]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 5) == [1,2,3,4,5]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     large_product([3,1,4,2,5], [1,2,3,4,5,6,7,8,9], 10) == [54, 720]\nassert     large_product([1,2,3], [1,2,3,4,5,6,7,8,9], 10) == [96, 300]\nassert     large_product([1,1,1], [1,2,3,4,5,6,7,8,9], 10) == [24, 120]\nassert     large_product([1,1,1,1], [1,2,3,4,5,6,7,8,9], 10) == [120, 840]\nassert     large_product([1,1,1,1,1,1,1], [1,2,3,4,5,6,7,8,9], 10) == [24, 360]\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     large_product([2,3,4,6], [2,3,5,6,8], 4) == [2, 6, 3, 8]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5,6,7,8], 8) == [1, 8, 2, 7, 3, 6, 4, 5]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 4) == [1, 2, 3, 4]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 5) == [1, 2, 3, 4, 5]\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 0) == []\n"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     large_product([2,3,1,4,5], [5,4,1,2,3], 4) == [3,2,1,4,5]\nassert     large_product([1,2,3,4], [4,3,2,1], 3) == [4,4,4]\nassert     large_product([9,8,7,6,5,4,3,2,1], [9,8,7,6,5,4,3,2,1], 7) == [9,9,9,9,9,9,9]\nassert     large_product([7,7,7,7,7], [7,7,7,7,7], 7) == [7,7,7,7,7,7,7]"
    },
    {
        "number": 308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     large_product([], [], 0) == 1\nassert     large_product([1], [], 0) == 1\nassert     large_product([1,2,3], [1,2,3], 3) == 6\nassert     large_product([1,2,3], [1,2,3], 2) == 6\nassert     large_product([2,3,1], [3,2,1], 3) == 6\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximum(3,4) == 4\nassert     maximum(3,6) == 6\nassert     maximum(9,9) == 9\nassert     maximum(0,0) == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximum(3,1) == 3\nassert     maximum(3,-1) == 3\nassert     maximum(3,3) == 3\nassert     maximum(3,0) == 3\nassert     maximum(0,3) == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximum(1,2)    ==    2\nassert     maximum(3,4)    ==    4\nassert     maximum(-1,-2)    ==    -1\nassert     maximum(-1,1)    ==    1\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximum(10,20)==20\nassert     maximum(20,10)==20\n\nprint \"maximum = \",maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maximum(0,0) == 0\nassert     maximum(-10,0) == -10\nassert     maximum(0,-10) == -10\nassert     maximum(-100,100) == 100\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     maximum(3,5) == 5\nassert     maximum(1,2) == 2\nassert     maximum(3,3) == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     maximum(0,100) == 100\nassert     maximum(0,0) == 0\nassert     maximum(100,0) == 100\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     maximum(4,6) ==    6\nassert     maximum(-4,-6) ==    -4\nassert     maximum(0,0) ==    0\nassert     maximum(2,5) ==    5\nassert     maximum(2,6) ==    6\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximum(3,4) == 4\nassert     maximum(3,5) == 5\nassert     maximum(7,3) == 7\nassert     maximum(4,4) == 4\nassert     maximum(4,-4) == 4\n"
    },
    {
        "number": 309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (maximum(10,3) == 10)\nassert     (maximum(10,-3) == 10)\nassert     (maximum(0,3) == 3)\nassert     (maximum(-10,3) == 3)\nassert     (maximum(100,-3) == 100)\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ('hello'     == string_to_tuple('hello'))\nassert     ('hello'     == string_to_tuple('he'))\nassert     ('hello'     == string_to_tuple('hell'))\nassert     ('hello'     == string_to_tuple('heo'))\nassert     ('hello'     == string_to_tuple('hello'))\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_tuple('qwerty') == ('q', 'w', 'e', 'r', 't', 'y')\nassert     string_to_tuple('123') == ('1', '2', '3')\nassert     string_to_tuple('Hello World') == ('H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd')\nassert     string_to_tuple('Hello world') == ('H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd')\nassert     string_to_tuple('  qwerty  ') == ('q', 'w', 'e', 'r', 't', 'y')\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_tuple('abc') == ('a', 'b', 'c')\nassert     string_to_tuple('123') == ('1', '2', '3')\nassert     string_to_tuple('12345') == ('1', '2', '3', '4', '5')\nassert     string_to_tuple('123456789') == ('1', '2', '3', '4', '5', '6', '7', '8', '9')\nprint('Success: string_to_tuple')\n\ndef is_palindrome(str1):\n    '''\n    Write a function to determine whether a string is a palindrome\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_tuple('abc') == ('a', 'b', 'c')\nassert     string_to_tuple('123') == ('1', '2', '3')\nassert     string_to_tuple('xyz') == ('x', 'y', 'z')\nassert     string_to_tuple('') == ('',)\nassert     string_to_tuple('Xyz') == ('X', 'y', 'z')\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple('edabit') == ('e', 'd', 'a', 'b', 'i')\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_to_tuple('Hello') == ('H', 'e', 'l', 'l', 'o')\nassert     string_to_tuple('ab') == ('a', 'b')\nassert     string_to_tuple('hello') == ('H', 'e', 'l', 'l', 'o')\nassert     string_to_tuple('a') == ('a',)\n\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         (string_to_tuple('a') == ('a',)), \"Try to convert a string to a tuple.\"\nassert         (string_to_tuple('a,b,c') == ('a', 'b', 'c')), \"Try to convert a string with commas to a tuple.\"\nassert         (string_to_tuple('a,b,c,d') == ('a', 'b', 'c', 'd')), \"Try to convert a string with commas and more commas to a tuple.\"\nassert         (string_to_tuple('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')), \"Try to convert a string with commas and more commas to a tuple.\"\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (string_to_tuple('abc') == (a, b, c))\nassert     (string_to_tuple('xyz') == (x, y, z))\nassert     (string_to_tuple('!@#$%^&*()_+-{}') == (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z))\nprint('All the tests passed')"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_tuple('abc')     ==     ('a', 'b', 'c')\nassert     string_to_tuple('a')     ==     ('a',)\nassert     string_to_tuple('abcdef')     ==     ('a', 'b', 'c', 'd', 'e', 'f')\n"
    },
    {
        "number": 310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nstring_to_tuple(\"w3resource\")\n\ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(1) == 1\nassert     set_left_most_unset_bit(3) == 1\nassert     set_left_most_unset_bit(4) == 1\nassert     set_left_most_unset_bit(7) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     set_left_most_unset_bit(0x00000000) == 0x00000001\nassert     set_left_most_unset_bit(0x00000001) == 0x00000010\nassert     set_left_most_unset_bit(0x00000010) == 0x00000100\nassert     set_left_most_unset_bit(0x00000100) == 0x00001000\nassert     set_left_most_unset_bit(0x00001000) == 0x00010000\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(10) == 2\nassert     set_left_most_unset_bit(14) == 4\nassert     set_left_most_unset_bit(32) == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     set_left_most_unset_bit(10) == 8\nassert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(1) == 1\nassert     set_left_most_unset_bit(2) == 1\nassert     set_left_most_unset_bit(3) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_left_most_unset_bit(0b00000000) == 0\nassert     get_left_most_unset_bit(0b00000001) == 1\nassert     get_left_most_unset_bit(0b00000010) == 2\nassert     get_left_most_unset_bit(0b00000100) == 3\nassert     get_left_most_unset_bit(0b00001000) == 4\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     set_left_most_unset_bit(1) == 1\nassert     set_left_most_unset_bit(10) == 2\nassert     set_left_most_unset_bit(10) == 0\nassert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(6) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (set_left_most_unset_bit(0) == 0), \"Test case 1 failed\"\nassert     (set_left_most_unset_bit(2) == 2), \"Test case 2 failed\"\nassert     (set_left_most_unset_bit(3) == 5), \"Test case 3 failed\"\nassert     (set_left_most_unset_bit(15) == 31), \"Test case 4 failed\"\nassert     (set_left_most_unset_bit(7) == 3), \"Test case 5 failed\"\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (get_left_most_unset_bit(0x12345678) == 2)\nassert     (get_left_most_unset_bit(0x71234567) == 2)\nassert     (get_left_most_unset_bit(0x82345678) == 3)\nassert     (get_left_most_unset_bit(0x82345679) == 3)\nassert     (get_left_most_unset_bit(0x12345678) == 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(0) == 0     # result     ==     0\nassert     set_left_most_unset_bit(1) == 1     # result     ==     1\nassert     set_left_most_unset_bit(3) == 1     # result     ==     1\nassert     set_left_most_unset_bit(5) == 1     # result     ==     1\nassert     set_left_most_unset_bit(7) == 1     # result     ==     1\n"
    },
    {
        "number": 311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(1) == 1\nassert     set_left_most_unset_bit(2) == 1\nassert     set_left_most_unset_bit(3) == 1\nassert     set_left_most_unset_bit(4) == 1\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_cone(1,1) == math.pi\nassert     volume_cone(3,4) == (math.pi/3)*math.pow(4,2)\nassert     volume_cone(5,4) == (math.pi/3)*math.pow(5,2)\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     volume_cone(0.3,0.4) == 1.0471975511965976\nassert     volume_cone(0.5,0.2) == 2.94379564095506\nassert     volume_cone(0.9,0.7) == 4.918293863939956\nassert     volume_cone(1.2,0.7) == 5.730910979763562\nassert     volume_cone(1.5,0.3) == 7.289695955996905\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_cone(2,3)    == 1.097338729936449\nassert     volume_cone(0,5)    == 0.2879644329240381\nassert     volume_cone(1,0)    == 0.0798135329251209\nassert     volume_cone(1,2)    == 0.000811661370279113\nassert     volume_cone(5,0)    == 0.004059583964951798\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_cone(1,1) == 1.333333333333333\nassert     volume_cone(3,2) == 0.23580326367\nassert     volume_cone(0.5,1.5) == 0.226911504084\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_cone(2,3) == 12.57, 'failed'\nassert     volume_cone(3,4) == 27.2, 'failed'\nassert     volume_cone(1,3) == 3.14, 'failed'\nassert     volume_cone(2,4) == 48.8, 'failed'\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_cone(5,8) == 125.265625\nassert     volume_cone(5,6) == 78.54125625\nassert     volume_cone(5,5) == 50.27791625\nassert     volume_cone(5,4) == 22.67791625\nassert     volume_cone(5,3) == 12.125625\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_cone(4,2)    == 6.283185307179586\nassert     volume_cone(4,4)    == 28.094237335009239\nassert     volume_cone(4,6)    == 157.5845169217832\nassert     volume_cone(4,8)    == 586.180927402614\nassert     volume_cone(4,10)    == 1.6725940287670835e+17\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_cone(1,1) == math.pi/3.0\nassert     volume_cone(2,1) == 1.125\nassert     volume_cone(1,2) == math.pi/3.0\nassert     volume_cone(2,2) == 1.125\nassert     volume_cone(0,1) == math.pi\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_cone(2.5,1) == 3.164911570013595\nassert     volume_cone(2.5,2) == 3.164911570013595\nassert     volume_cone(2.5,3) == 3.164911570013595\nassert     volume_cone(2.5,4) == 3.164911570013595\nassert     volume_cone(2.5,5) == 3.164911570013595\n"
    },
    {
        "number": 312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     volume_cone(1,1) == math.pi/3\nassert     volume_cone(2,1) == (2*math.pi/3)**2\nassert     volume_cone(1,2) == math.pi\nassert     volume_cone(1,3) == (math.pi/3)*(2**2)\nassert     volume_cone(2,3) == (2*math.pi/3)**2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     highest_Power_of_2(3) == 1\nassert     highest_Power_of_2(4) == 2\nassert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(6) == 2\nassert     highest_Power_of_2(7) == 3\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     highest_Power_of_2(0) == 1         ,     'Fail'\nassert     highest_Power_of_2(1) == 1         ,     'Fail'\nassert     highest_Power_of_2(2) == 2         ,     'Fail'\nassert     highest_Power_of_2(3) == 2         ,     'Fail'\nassert     highest_Power_of_2(4) == 2         ,     'Fail'\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     highest_Power_of_2(16) == 4\nassert     highest_Power_of_2(512) == 16\nassert     highest_Power_of_2(4*16) == 16\nassert     highest_Power_of_2(32) == 1\nassert     highest_Power_of_2(128) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(1024) == 1024\nassert     highest_Power_of_2(1024) == 512\nassert     highest_Power_of_2(1024) == 256\nassert     highest_Power_of_2(1024) == 128\nassert     highest_Power_of_2(1024) == 64\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     highest_Power_of_2(0) == 1\nassert     highest_Power_of_2(1) == 2\nassert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(100) == 2\nassert     highest_Power_of_2(256) == 8\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     highest_Power_of_2(4) == 2 \nassert     highest_Power_of_2(8) == 4\nassert     highest_Power_of_2(16) == 8\nassert     highest_Power_of_2(32) == 16\nassert     highest_Power_of_2(256) == 16\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(3) == 1\nassert     highest_Power_of_2(2) == 1\nassert     highest_Power_of_2(1) == 1\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(15) == 7\nassert     highest_Power_of_2(12) == 8\nassert     highest_Power_of_2(17) == 17\nassert     highest_Power_of_2(25) == 10\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     highest_Power_of_2(2**64) == 64\nassert     highest_Power_of_2(3) == 1\nassert     highest_Power_of_2(4) == 2\nassert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(6) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nprint highest_Power_of_2(10) \nprint highest_Power_of_2(50)\nprint highest_Power_of_2(100)\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(5) == 5\nassert     find_lucas(7) == 13\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_lucas(5) == 13\nassert     find_lucas(15) == 44\nassert     find_lucas(22) == 123\nassert     find_lucas(34) == 1732\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_lucas(2) == 2\nassert     find_lucas(3) == 3\nassert     find_lucas(4) == 4\nassert     find_lucas(5) == 5\nassert     find_lucas(6) == 6\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef find_triple_double(n):\n    '''\n    Write a function to find then'th number of the Triple Double Sequence.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_lucas(5) == 4\nassert     find_lucas(10) == 44\nassert     find_lucas(19) == 123\n\n\ndef gen_perm(n):\n    '''\n    Write a function to generate the permutation of n number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_lucas(2) == 2\nassert     find_lucas(5) == 11\nassert     find_lucas(22) == 123\nassert     find_lucas(143) == 705\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_lucas(7) == 44\nassert     find_lucas(11) == 123\nassert     find_lucas(25) == 111213141516181820\n"
    },
    {
        "number": 389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_lucas(7) == 18\nassert     find_lucas(1) == 1\nassert     find_lucas(5) == 29\nassert     find_lucas(11) == 123\nassert     find_lucas(0) == 2\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_string([1, 2, 3], 'one') == ['one', 'two', 'three']\nassert     add_string([1, 2, 3], 'two') == ['one', 'two', 'three']\nassert     add_string([1, 2, 3], 'three') == ['one', 'two', 'three']\nassert     add_string([1, 2, 3], 'four') == ['one', 'two', 'three']\nassert     add_string([1, 2, 3], 'five') == ['one', 'two', 'three']\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_string(['1','2','3','4'], '%1.0f') == '1.0000 2.0000 3.0000 4.0000', 'incorrect'\nassert     add_string(['1','2','3','4'], '%5.3f') =='   1.0000    2.000    3.000    4.000', 'incorrect'\nassert     add_string(['1','2','3','4'], '%4.2f') == '1.00 2.00 3.00 4.00', 'incorrect'\nassert     add_string(['1','2','3','4'], '%02.0f') == '01 2 03 4', 'incorrect'\nassert     add_string(['1','2','3','4'], '%0.1f') == '1.0 2.0 3.0 4.0', 'incorrect'\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_string(['A', 'B', 'C'], '%s %s %s') == ['A %s %s %s', 'B %s %s %s', 'C %s %s %s']\nassert     add_string(['Hello', 'There'], '%s %s %s') == ['Hello %s %s %s', 'There %s %s %s']\nassert     add_string(['', '', ''], '%s %s %s') == ['%s %s %s', '%s %s %s', '%s %s %s']\nassert     add_string([None, '', ''], '%s %s %s') == ['%s %s %s', '%s %s %s', '%s %s %s']\nassert     add_string(['', '', ''], '%s %s %s') == ['%s %s %s', '%s %s %s', '%s %s %s']\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_string([\"I\", \"love\", \"code\", \"in\", \"python\"], \"The %s loves %s\") == \"The I love code in python The I love python\"\nassert     add_string([\"I\", \"love\", \"code\", \"in\", \"python\"], \"The %s loves %s %s\") == \"The I love code in python The I love python in\"\nassert     add_string([\"I\", \"love\", \"code\", \"in\", \"python\"], \"The %s loves %s %s %s\") == \"The I love code in python The I love python in python\"\nassert     add_string([\"I\", \"love\", \"code\", \"in\", \"python\"], \"The %s loves %s %s %s %s\") == \"The I love code in python The I love python in python\"\nassert     add_string([\"I\", \"love\", \"code\", \"in\", \"python\"], \"The %s loves %s %s %s %s %s\") == \"The I love code in python The I love python in python\"\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_string(['abc', 'def'], '%s') == ['abc', 'def']\nassert     add_string(['abc', 'def'], '%s %s') == ['abc def', 'abc def']\nassert     add_string(['abc', 'def'], '%s %s %s') == ['abc def def', 'abc def def']\nassert     add_string(['abc', 'def'], '%s %s %s %s') == ['abc def def def', 'abc def def def']\nassert     add_string(['abc', 'def'], '%s %s %s %s %s') == ['abc def def def def', 'abc def def def def']\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_string(['Hi','Hello','Hola','hey'], '{0}, {1} {2} {3}') == 'Hi, Hello, Hola, hey', add_string(['Hi','Hello','Hola','hey'], '{0}, {1} {2} {3}')\nassert     add_string(['Hi','Hello','Hola','hey','the'], '{0}, {1} {2} {3}') == 'Hi, Hello, Hola, hey, the', add_string(['Hi','Hello','Hola','hey','the'], '{0}, {1} {2} {3}')\nassert     add_string(['Hi','Hello','Hola','hey','the','welcome'], '{0}, {1} {2} {3}') == 'Hi, Hello, Hola, hey, the, welcome', add_string(['Hi','Hello','Hola','hey','the','welcome'], '{0}, {1} {2} {3}')\nassert     add_string(['Hi','Hello','Hola','hey','the','welcome','have a nice day'], '{0}, {1} {2} {3} {4} {5}') == 'Hi, Hello, Hola, hey, the, welcome, have a nice day', add_string(['Hi','Hello','Hola','hey','the','welcome','have a nice day'], '{0}, {1} {2} {3} {4} {5}')\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_string(['a','b','c'], '{0}{1}{2}') == 'aabc', 'test 0'\nassert     add_string(['a','b','c'], '{}{}{}') == 'abca', 'test 1'\nassert     add_string(['a','b','c'], '{}{}{}'.format('a','b','c')) == 'abc', 'test 2'\n\nprint 'add_string...Passed'\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_string([1, 2, 3], '{0} {1} {2}') == '1 2 3', 'incorrect'\nassert     add_string([1, 2, 3], '{1} {1} {1}') == '1 2 1', 'incorrect'\nassert     add_string([1, 2, 3], '{2} {2} {2}') == '2 2 2', 'incorrect'\nassert     add_string([1, 2, 3], '{3} {3} {3}') == '3 3 3', 'incorrect'\nassert     add_string([1, 2, 3], '{0} {0} {0}') == '1 1 1', 'incorrect'\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_string([1, 2, 3], \"g%d\") == ['1g', '2g', '3g']\nassert     add_string(['1', '2', '3'], \"g%d\") == ['1g', '2g', '3g']\nassert     add_string([1, 2, 3], \"g%\") == ['1g', '2g', '3g']\nassert     add_string(['1', '2', '3'], \"g%\") == ['1g', '2g', '3g']\nassert     add_string(['1', '2', '3'], \"g\") == ['1g', '2g', '3g']\n"
    },
    {
        "number": 390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         add_string([1, 2, 3], \"%d%d%d\") == \"123123\", \"wrong answer\"\nassert         add_string([1, 2, 3, 4], \"Hi, I am %d\") == \"Hi, I am 123\", \"wrong answer\"\nassert         add_string([\"what\", \"is\", \"the\", \"meaning\", \"of\", \"it?\"], \"Hi, I am %d\") == \"Hi, I am what\", \"wrong answer\"\nassert         add_string([\"what\", \"is\", \"the\", \"meaning\", \"of\", \"it?\"], \"Hi, I am %s\") == \"Hi, I am the meaning\", \"wrong answer\"\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['A', 'B', 'C']) == {'a': 'x', 'b': 'y', 'c': 'z'}, 'test 1'\nassert     convert_list_dictionary(['w', 'x', 'y'], ['p', 'q', 'r'], ['W', 'X', 'Y']) == {'w': 'p', 'x': 'q', 'y': 'r'}, 'test 2'\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     convert_list_dictionary([1,2,3], [4,5,6], [7,8,9]) == \\\n        {'1': {'4': {'7': {'8': {'9': {}}}}}}\nassert     convert_list_dictionary([1,2,3], [4,5,6], [7,8,9,10]) == \\\n        {'1': {'4': {'7': {'8': {'9': {'10': {}}}}}}}\nassert     convert_list_dictionary([1,2,3], [4,5,6,7], [8,9,10,11]) == \\\n        {'1': {'4': {'7': {'8': {'9': {'10': {'11': {}}}}}}}}\nassert     convert_list_dictionary([1,2,3], [4,5,6,7], [8,9,10,11,12]) == \\\n        {'1': {'4': {'7': {'8': {'9': {'10': {'11': {'12': {}}}}}}}}\n\n\ndef convert_list_dictionary2(l1, l2, l3, l4):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary([], [], []) == {}, 'expect {} but get {}'.format({}, convert_list_dictionary([], [], []), convert_list_dictionary([], [], []))\nassert     convert_list_dictionary([], [], [1,2,3]) == {'1': {'2': {'3': 1}}}, 'expect {} but get {}'.format({'1': {'2': {'3': 1}}}, convert_list_dictionary([], [], [1,2,3]), convert_list_dictionary([], [], [1,2,3]))\nassert     convert_list_dictionary([1,2,3,4], ['A','B','C','D'], ['a','b','c','d']) == {'1': {'2': {'3': 1, '4': 2}}, 'A': {'B': {'C': 3, 'D': 4}}, 'a': {'b': {'c': 5, 'd': 6}}}, 'expect {} but get {}'.format({'1': {'2': {'3': 1, '4': 2}}, 'A': {'B': {'C': 3, 'D': 4}}, 'a': {'b': {'c': 5, 'd': 6}}}, convert_list_dictionary([1,2,3,4], ['A','B','C','D'], ['a','b','c','d']), convert_list_dictionary([1,2,3,4], ['A','B','C','D'], ['a','b','c','d']))\nassert     convert_list_dictionary([1,2,3], ['A', 'B', 'C'], ['a', 'b', 'c']) == {'1': {'2': {'3': 1}}, 'A': {'B': {'C': 3}}, 'a': {'b': {'c': 5}}}, 'expect {} but get {}'.format({'1': {'2': {'3': 1}}, 'A': {'B': {'C': 3}}, 'a': {'b': {'c': 5}}}, convert_list_dictionary([1,2,3], ['A', 'B', 'C'], ['a', 'b', 'c']), convert_list_dictionary([1,2,3], ['A', 'B', 'C'], ['a', 'b', 'c']))\n\ndef longest_common_prefix(str_list):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary(['apple', 'banana', 'cherry'], ['malum', 'pomum', 'popula'], ['English', 'Hindi', 'German']) == {\n                'apple': {'malum': 'English', 'pomum': 'Hindi', 'popula': 'German'},\n                'banana': {'malum': 'English', 'pomum': 'Hindi', 'popula': 'German'},\n                'cherry': {'malum': 'English', 'pomum': 'Hindi', 'popula': 'German'}\n                }"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary([1,2,3,4],[5,6,7,8],[9,10,11,12]) == {1: {5: {9: 10, 11: 12}}, 2: {6: {7: 8}}}\nassert     convert_list_dictionary([1,2,3,4],[5,6,7,8],[9,10,11,12]) == {1: {5: {9: 10, 11: 12}}, 2: {6: {7: 8}}}\nassert     convert_list_dictionary([1,2,3,4],[5,6,7,8],[9,10,11,12]) == {1: {5: {9: 10, 11: 12}}, 2: {6: {7: 8}}}\nassert     convert_list_dictionary([1,2,3,4],[5,6,7,8],[9,10,11,12]) == {1: {5: {9: 10, 11: 12}}, 2: {6: {7: 8}}}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary(['foo', 'bar'], ['a', 'b', 'c'], ['1', '2', '3']) == {'foo': 'a', 'bar': 'b'}\nassert     convert_list_dictionary(['foo', 'bar'], ['a', 'b', 'c'], ['1', '2', '3', '4']) == {'foo': 'a', 'bar': 'b'}\nassert     convert_list_dictionary(['foo', 'bar'], ['a', 'b', 'c'], []) == {'foo': 'a', 'bar': 'b'}\nassert     convert_list_dictionary(['foo', 'bar'], ['a', 'b', 'c'], ['', '', '', '', '', '', '', '', '', '']) == {'foo': 'a', 'bar': 'b'}\nassert     convert_list_dictionary(['foo', 'bar'], ['a', 'b', 'c
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([1,2,3,4], [\"a\", \"b\", \"c\", \"d\"], [1,2,3,4]) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     convert_list_dictionary([1,2,3,4,5], [\"a\", \"b\", \"c\", \"d\", \"e\"], [1,2,3,4,5]) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     convert_list_dictionary([1,2,3,4], [\"a\", \"b\"], [1,2,3,4]) == {'a': 1, 'b': 2}\nassert     convert_list_dictionary([1,2,3,4], [\"a\", \"b\", \"c\"], [1,2,3,4]) == {'a': 1, 'b': 2, 'c': 3}\nassert     convert_list_dictionary([1,2,3,4], [\"a\", \"b\", \"c\"], [1,2,3,4]) == {'a': 1, 'b': 2, 'c': 3}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary(['cat', 'dog', 'rabbit'], ['purr', 'quack','meow'], ['i', 'am', 'a']) == {'cat': {'purr': 'i', 'quack': 'am'}, 'dog': {'meow': 'a'}, 'rabbit': {'meow': 'a'}}\nassert     convert_list_dictionary(['cat', 'dog', 'rabbit'], ['purr', 'quack','meow'], ['i', 'am', 'a']) == {'cat': {'purr': 'i'}, 'dog': {'quack': 'am'}, 'rabbit': {'meow': 'a'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([], [], []) == {}\nassert     convert_list_dictionary([1,2,3], [], []) == {1:None, 2:None, 3:None}\nassert     convert_list_dictionary([], [1,2,3], []) == {1:None, 2:None, 3:None}\nassert     convert_list_dictionary([1,2,3], [4,5,6], []) == {1:4, 2:5, 3:6}\nassert     convert_list_dictionary([], [], [1,2,3]) == {1:None, 2:None, 3:None}\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 3\nassert     get_max_sum(3) == 6\nassert     get_max_sum(4) == 10\nassert     get_max_sum(5) == 15\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 4\nassert     get_max_sum(4) == 6\nassert     get_max_sum(5) == 10\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (2) == 1\nassert     get_max_sum (3) == 1\nassert     get_max_sum (4) == 2\nassert     get_max_sum (5) == 2\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 3\nassert     get_max_sum(3) == 7\nassert     get_max_sum(4) == 15\nassert     get_max_sum(5) == 31\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_max_sum(10) == 6\nassert     get_max_sum(100) == 36\nassert     get_max_sum(1000) == 486\nassert     get_max_sum(10000) == 8156\nassert     get_max_sum(1000000) == 10486\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (2) == 3\nassert     get_max_sum (3) == 7\nassert     get_max_sum (4) == 17\nassert     get_max_sum (5) == 41\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (2) == 3\nassert     get_max_sum (3) == 7\nassert     get_max_sum (4) == 15\nassert     get_max_sum (5) == 31\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_max_sum(12) == 26\nassert     get_max_sum(3) == 7\nassert     get_max_sum(15) == 66\nassert     get_max_sum(4) == 5\nassert     get_max_sum(9) == 19\n"
    },
    {
        "number": 392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_length_list([1, 2, 3, 4]) == [1, 2, 3, 4], \"Incorrect result\"\nassert     max_length_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Incorrect result\"\nassert     max_length_list([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"Incorrect result\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"Incorrect result\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Incorrect result\"\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         max_length_list([1, 2, 3])         == 3\nassert         max_length_list([1, 2, 3, 4, 5])     == 5\nassert         max_length_list([])                 == 0\nassert         max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9])     == 9\nassert         max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])     == 9\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_length_list([1,2,3]) == 3\nassert     max_length_list(['a', 'b', 'c', 'd']) == 4\nassert     max_length_list([1,2,3,4,5]) == 5\nassert     max_length_list([]) == 0\nassert     max_length_list([1]) == 1\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5\nassert     max_length_list([1,2,3,4,5,6]) == 6\nassert     max_length_list([1,2,3,4,5,6,7]) == 7\nassert     max_length_list([1,2,3,4,5,6,7,8]) == 8\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_length_list([4,5,6,7,8]) == [4,5,6,7,8]\nassert     max_length_list([1,2,3,4]) == [1,2,3,4]\nassert     max_length_list([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_length_list([[1,2,3,4,5],[1,2],[1,2,3]])    ==     [1,2,3,4,5]\nassert     max_length_list([[1,2,3,4,5,6],[1,2,3]])    ==     [1,2,3,4,5,6]\nassert     max_length_list([[1,2,3],[4,5,6]])    ==     [1,2,3]\nassert     max_length_list([[1,2,3,4],[5,6,7,8]])    ==     [1,2,3,4]\nassert     max_length_list([[1,2,3,4,5],[1,2,3],[1,2,3]])    ==     [1,2,3,4,5]\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_length_list([]) == 0\nassert     max_length_list([1, 2, 3, 4, 5]) == 5\nassert     max_length_list([1, 2, 3, 4, 5, 6]) == 6\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     max_length_list(['a', 'b', 'c', 'd', 'e']) == 5\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_length_list([1,2,3]) == 3\nassert     max_length_list([]) == 0\nassert     max_length_list([1,2,3,4]) == 4\nassert     max_length_list([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_length_list([2,3,4,5]) == [5]\nassert     max_length_list([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     max_length_list([1,2,3,4]) == [4]\nassert     max_length_list([1]) == [1]\nassert     max_length_list([]) == []\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_distinct((\"a\", \"b\", \"c\")) == True\nassert     check_distinct((\"a\", \"b\", \"a\")) == False\nassert     check_distinct((\"a\", \"a\", \"a\")) == False\nassert     check_distinct((\"a\", \"a\")) == False\nassert     check_distinct((\"a\")) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_distinct((0,1,2,3))\nassert not check_distinct((0,0,2,3))\nassert not check_distinct((0,0,2,2))\nassert not check_distinct((0,1,0,3))\nassert check_distinct((1,2,3,3))"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_distinct(()) == True, 'empty tuple'\nassert     check_distinct((1,)) == True, 'tuple of length one'\nassert     check_distinct((1,2)) == False, 'tuple of length two with duplicates'\nassert     check_distinct((1,2,3,4)) == True, 'tuple with duplicates'\nassert     check_distinct((1,2,1,4,5)) == False, 'tuple with duplicates'\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_distinct(()) == True\nassert     check_distinct(('a', 'a', 'a')) == False\nassert     check_distinct(('a', 'b', 'b')) == True\nassert     check_distinct(('a', 'b', 'a', 'c', 'c')) == False\nassert     check_distinct(('a', 'a', 'a', 'b')) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_distinct(()) == True\nassert     check_distinct((1, 2, 3, 4)) == True\nassert     check_distinct((1, 2, 3, 4, 1, 2, 3, 4)) == False\nassert     check_distinct((1, 2, 3, 4, 5)) == True\nassert     check_distinct((1, 2, 3, 4, 5, 1, 2, 3, 4, 5)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_distinct(()) == True\nassert     check_distinct((0,)) == True\nassert     check_distinct((0,0)) == False\nassert     check_distinct((0,1,1,2,3,3,4)) == True\nassert     check_distinct((0,0,1,2,3,3,4)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_distinct(()) == True\nassert     check_distinct((1,)) == True\nassert     check_distinct((1,1,1)) == False\nassert     check_distinct((1,2,3,4)) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_distinct(()) == True\nassert     check_distinct((1,)) == True\nassert     check_distinct((1,1)) == False\nassert     check_distinct((1,2,3,4,5,6,7,8,9)) == True\nassert     check_distinct((1,1,1,2,3,4,5,6,7,8,9)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_distinct((0, 0, 0, 0)) == True\nassert     check_distinct((0, 1, 1, 0)) == False\nassert     check_distinct((1, 1, 1, 1)) == True\nassert     check_distinct((0, 1, 1, 2)) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_distinct((1,2,3,4,5,4,3,2,1))\nassert     check_distinct((1,2,3,4,5,4,3,2,1,3))\nassert     not check_distinct((1,2,3,4,5,4,3,2,1,3,3))\nassert     not check_distinct((1,2,3,4,5,4,3,2,1,1))\nassert     check_distinct((1,2,3,4,5,4,3,2,1,2,2))\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('abcdef') == 'a'\nassert     first_non_repeating_character('abc') == 'a'\nassert     first_non_repeating_character('x') == 'x'\nassert     first_non_repeating_character('ababcd') == 'b'\nassert     first_non_repeating_character('foobar') == 'f'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character('geeksforgeeks') == 'e'\nassert     first_non_repeating_character('heltot') == None\nassert     first_non_repeating_character('geeksgeeks') == None\nassert     first_non_repeating_character('geeksforg') == 'f'\nassert     first_non_repeating_character('geeksfor') == 'f'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     first_non_repeating_character('sri') =='s'\nassert     first_non_repeating_character('sid') =='s'\nassert     first_non_repeating_character('sai') =='s'\nassert     first_non_repeating_character('dav') == 'a'\nassert     first_non_repeating_character('abb') == 'b'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character(\"geeksforgeeks\") == 'e'\nassert     first_non_repeating_character(\"python\") == 'y'\nassert     first_non_repeating_character(\"hello\") == 'l'\nassert     first_non_repeating_character(\"h\") == 'h'\nassert     first_non_repeating_character(\"1234567890\") == '1'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character(\"ABC\") == \"A\"\nassert     first_non_repeating_character(\"ABABC\") == \"A\"\nassert     first_non_repeating_character(\"AABBCC\") == \"A\"\nassert     first_non_repeating_character(\"\") == None\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     first_non_repeating_character(\"Codecademy\") == 'c'\nassert     first_non_repeating_character(\"Hello world!\") ==''\nassert     first_non_repeating_character(\"Hello\") == 'H'\nassert     first_non_repeating_character(\"Aa\") == 'A'\nassert     first_non_repeating_character(\"\") == ''\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character(\"dgvpsqkf\") == 'v'\nassert     first_non_repeating_character(\"dgvqrsg\") == 'r'\nassert     first_non_repeating_character(\"dgvqrsgq\") == 'q'\nassert     first_non_repeating_character(\"gq\") == 'q'\nassert     first_non_repeating_character(\"dgvpsqqfq\") == 'q'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character(\"abcd\") == \"b\"\nassert     first_non_repeating_character(\"abbc\") == \"b\"\nassert     first_non_repeating_character(\"bcdbcdbcd\") == \"b\"\nassert     first_non_repeating_character(\"xyz\") == \"z\"\nassert     first_non_repeating_character(\"aaabbbcc\") == \"a\"\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character('ABCADB') == 'B'\nassert     first_non_repeating_character('ACDABC') == 'C'\nassert     first_non_repeating_character('CCAABB') == 'C'\nassert     first_non_repeating_character('AAAABBBB') == 'B'\nassert     first_non_repeating_character('AAB') == 'B'\n"
    },
    {
        "number": 395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character(\"aabb\") == 'b'\nassert     first_non_repeating_character(\"aabcaabcc\") == 'b'\nassert     first_non_repeating_character(\"aabcc\") == 'c'\nassert     first_non_repeating_character(\"aabbcc\") == 'c'\nassert     first_non_repeating_character(\"aaaa\") == 'a'\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_char('a') == True\nassert     check_char('abc') == True\nassert     check_char('aabbccddddeeeefgggh') == True\nassert     check_char('aaaaaa') == True\nassert     check_char('aaaaaabbbbb') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_char('aa') == False\nassert     check_char('aaa') == True\nassert     check_char('aab') == True\nassert     check_char('abc') == False\nassert     check_char('abab') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_char('a') == True, \"a\"\nassert     check_char('aa') == True, \"aa\"\nassert     check_char('aa ') == True, \"aa \"\nassert     check_char('a ') == False, \"a \"\nassert     check_char('a ') == False, \"a\"\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_char(\"a\") == True\nassert     check_char(\"ab\") == False\nassert     check_char(\"z\") == True\nassert     check_char(\".\") == True\nassert     check_char(\"z.\") == False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_char(\"abc\") == True\nassert     check_char(\"ab\") == False\nassert     check_char(\"a.\") == True\nassert     check_char(\"a.a\") == False\nassert     check_char(\"abc.\") == True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_char('a') == True\nassert     check_char('z') == True\nassert     check_char('a') == False\nassert     check_char('.') == False\nassert     check_char('aa') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_char('a') == True\nassert     check_char('ab') == False\nassert     check_char('abc') == True\nassert     check_char('a1') == False\nassert     check_char('z1') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_char('abc') == True\nassert     check_char('a') == True\nassert     check_char('b') == True\nassert     check_char('c') == True\nassert     check_char('abc') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_char(\"Hello\") == True\nassert     check_char(\"hello\") == False\nassert     check_char(\"hi\") == True\nassert     check_char(\"he\") == True\nassert     check_char(\"h\") == False\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,5) == 3\nassert     median_numbers(3,5,1) == 3\nassert     median_numbers(5,3,1) == 5\nassert     median_numbers(4,4,4) == 4\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     median_numbers(1,3,2) == 2\nassert     median_numbers(2,1,3) == 2\nassert     median_numbers(2,2,1) == 2\nassert     median_numbers(1,2,3) == 2\nassert     median_numbers(2,3,1) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,3,2) == 2\nassert     median_numbers(2,1,3) == 2\nassert     median_numbers(2,3,1) == 2\nassert     median_numbers(3,1,2) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median_numbers(1,3,4) == 3\nassert     median_numbers(1,3,2) == 2\nassert     median_numbers(1,4,2) == 3\nassert     median_numbers(2,3,4) == 2\nassert     median_numbers(1,2,3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median_numbers(1,3,5) == 3\nassert     median_numbers(1,3,4) == 3\nassert     median_numbers(1,2,4) == 3\nassert     median_numbers(1,3,3) == 3\nassert     median_numbers(2,2,4) == 3\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     median_numbers(3,1,2) == 1\nassert     median_numbers(1,2,3) == 2\nassert     median_numbers(2,3,1) == 2\nassert     median_numbers(2,3,3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,1,1) == 1\nassert     median_numbers(1,3,2) == 1.5\nassert     median_numbers(1,3,3) == 2\nassert     median_numbers(-1,-2,-3) == -2\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_of_digits([18]) == 18\nassert     sum_of_digits([1, 2, 3]) == 6\nassert     sum_of_digits([9, 9, 9, 9]) == 18\nassert     sum_of_digits([123, 234, 345, 45]) == 15\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_of_digits([1, 2, 3, 4, 5]) == 15\nassert     sum_of_digits([100, 200, 300, 400, 500]) == 5050\nassert     sum_of_digits([999, 1000, 1001, 1002, 1003]) == 100\nassert     sum_of_digits([-3, -2, -1]) == -6\n\n\ndef sum_of_digits_fast(nums):\n    '''\n    Given a list of integers, compute their sum.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    '''\n    return sum(int(str(n)) for n in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_of_digits([1, 7, 8, 2, 3]) == 25\nassert     sum_of_digits([4, 5, 6, 7, 8]) == 18\nassert     sum_of_digits([0, 0, 0, 0, 0]) == 0\nassert     sum_of_digits([]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_of_digits([123, 123, 123, 123, 123]) == 21\nassert     sum_of_digits([456, 890, -10, 0, 789, 0, 890, 0]) == 39\nassert     sum_of_digits([0, 0, 0]) == 0\nassert     sum_of_digits([]) == 0\nassert     sum_of_digits([-1, -1, -1]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_of_digits([1, 2, 3, 4]) == 14\nassert     sum_of_digits([2, 3, 4]) == 9\nassert     sum_of_digits([]) == 0\nassert     sum_of_digits([-1, 0, 1]) == 3\nassert     sum_of_digits([-1, 1, 0]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_of_digits([1, 2, 3, 4]) == 10\nassert     sum_of_digits([9, 9, 9, 9]) == 36\nassert     sum_of_digits([1, 2, 3, 8]) == 16\nassert     sum_of_digits([]) == 0\nassert     sum_of_digits([0]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_of_digits([123, 12, 34]) == 21\nassert     sum_of_digits([42, 123, 12]) == 14\n\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a given number n recursively.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 45\nassert     sum_of_digits([5, 8, 9, 0, 0]) == 15\nassert     sum_of_digits([1, 1, 1, 1, 1]) == 5\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_of_digits([1,2,3,4,5]) == 15\nassert     sum_of_digits([0,1,2,3]) == 15\nassert     sum_of_digits([1]) == 1\nassert     sum_of_digits([]) == 0\nassert     sum_of_digits([-1,-2]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_of_digits([1,2,3,4,5,6,7,8,9,10])    ==    55\nassert     sum_of_digits([3,8,5])                        ==    10\nassert     sum_of_digits([2,4,9,6])                        ==    20\nassert     sum_of_digits([0,0,0,0])                        ==    0\nassert     sum_of_digits([1,9,9,9])                        ==    33"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (bitwise_xor((1,2,3,4),(9,8,7,6))) == (2,4,3,6)\nassert     (bitwise_xor((5,8,7,6),(9,8,7,6))) == (0,0,0,0)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bitwise_xor(('a',1),('b',2)) == ('b',1)\nassert     bitwise_xor(('a',1),('b',0)) == ('a',0)\nassert     bitwise_xor(('a',0),('b',1)) == ('b',0)\nassert     bitwise_xor(('a',1),('a',1)) == ('a',0)\nassert     bitwise_xor(('a',0),('b',0)) == ('a',1)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     bitwise_xor((1, 0, 0, 1), (0, 1, 0, 0))     == (1, 1, 1, 0)\nassert     bitwise_xor((0, 1, 0, 0), (0, 0, 1, 0))     == (0, 0, 1, 1)\nassert     bitwise_xor((0, 0, 1, 0), (1, 0, 0, 0))     == (1, 1, 0, 1)\nassert     bitwise_xor((0, 0, 0, 1), (1, 1, 1, 1))     == (0, 0, 1, 1)\nassert     bitwise_xor((0, 0, 0, 1), (1, 0, 0, 0))     == (0, 0, 0, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bitwise_xor((1,2,3),(4,5,6)) == (7,8,9)\nassert     bitwise_xor((3,2,1),(6,5,4)) == (9,8,7)\nassert     bitwise_xor((9,8,7),(6,5,4)) == (3,2,1)\nassert     bitwise_xor((3,2,1),(9,8,7)) == (6,5,4)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     bitwise_xor((1, 2, 3), (2, 4, 6)) == (1, 2, 3)\nassert     bitwise_xor((0, 1, 0), (1, 0, 1)) == (0, 0, 1)\nassert     bitwise_xor((1, 0, 1), (0, 1, 0)) == (1, 1, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bitwise_xor(((1, 1, 0), (1, 0, 1), (0, 1, 1), (1, 1, 1)), ((0, 0, 0), (1, 0, 1), (1, 0, 0), (1, 1, 1))) == ((0, 0, 0), (1, 0, 1), (1, 0, 1), (1, 1, 1))\nassert     bitwise_xor(((1, 0, 0), (0, 0, 0), (0, 1, 0), (0, 0, 1)), ((0, 0, 0), (0, 0, 1), (0, 0, 0), (0, 1, 1))) == ((0, 0, 0), (0, 1, 0), (0, 0, 1), (0, 1, 1))\nassert     bitwise_xor(((0, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 1)), ((0, 0, 0), (0, 0, 1), (0, 0, 0), (1, 0, 1))) == ((1, 0, 1), (0, 1, 0), (1, 0, 1), (1, 1, 1))\nassert     bitwise_xor(((0, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 1)), ((0, 0, 0), (0, 0, 1), (0, 0, 0), (1, 0, 1))) == ((1, 0, 1), (0, 0, 0), (0, 1, 0), (1, 1, 1))\n\ndef find_missing_bit(test_list):\n    '''\n    Write a function to return the index of a missing bit in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bitwise_xor((0b11, 0b10), (0b10, 0b10)) == 0b10\nassert     bitwise_xor((0b00, 0b00), (0b00, 0b00)) == 0b00\nassert     bitwise_xor((0b11, 0b10), (0b10, 0b11)) == 0b11\nassert     bitwise_xor((0b11, 0b11), (0b10, 0b10)) == 0b11\nassert     bitwise_xor((0b10, 0b10), (0b11, 0b11)) == 0b11\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bitwise_xor((1, 1), (1, 1)) == (0, 0)\nassert     bitwise_xor((1, 1), (0, 0)) == (1, 0)\nassert     bitwise_xor((1, 1), (1, 0)) == (0, 1)\nassert     bitwise_xor((0, 1), (1, 0)) == (1, 1)\nassert     bitwise_xor((0, 1), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         bitwise_xor((1, 1), (1, 1)) == (0, 0)\nassert         bitwise_xor((1, 0), (1, 1)) == (1, 1)\nassert         bitwise_xor((1, 0), (0, 1)) == (1, 1)\nassert         bitwise_xor((0, 1), (1, 1)) == (1, 0)\nassert         bitwise_xor((0, 1), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_freq([\"a\", \"b\", \"a\", \"b\", \"c\", \"b\"]) == 3\nassert     extract_freq([\"a\", \"b\", \"a\", \"b\", \"c\", \"c\"]) == 2\nassert     extract_freq([\"a\", \"b\", \"c\", \"c\"]) == 1\nassert     extract_freq([\"a\", \"a\", \"b\"]) == 2\nassert     extract_freq([\"a\", \"b\", \"a\", \"b\", \"c\", \"b\"]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_freq(['a', 'b', 'a', 'c', 'b']) == 3\nassert     extract_freq(['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a']) == 4\nassert     extract_freq(['a', 'b', 'a', 'a', 'a', 'b']) == 5\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_freq([(1,2),(1,2),(3,2)]) == 3\nassert     extract_freq([(1,2),(1,2),(3,4),(4,5)]) == 4\nassert     extract_freq([]) == 0\nassert     extract_freq([(1,2)]) == 1\nassert     extract_freq([(1,2),(3,2)]) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_freq(['a', 'b', 'c', 'a', 'b', 'd', 'a', 'b', 'c']) == 4\nassert     extract_freq(['a', 'a', 'a', 'b', 'b', 'b']) == 3\n\ndef max_rep_substrings(test_list):\n    '''\n    Write a function to find the longest sub-substring that has repeated\n    occurrence of a string. You can assume the string consists of lower-case\n    letters only.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_freq([(1,2),(3,4),(1,2),(3,4),(1,2),(3,4),(1,2)]) == 3\nassert     extract_freq([(1,2),(3,4),(1,2),(3,4),(1,2)]) == 2\nassert     extract_freq([(1,2),(3,4),(1,2),(3,4),(1,2),(3,4),(1,2),(3,4),(1,2)]) == 4\n\ndef extract_freq2(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    temp = {}\n    for tup in test_list:\n        temp[tup] = temp.get(tup, 0) + 1\n    return len(temp)\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_freq(['abc', 'abc', 'abc', 'def', 'def']) == 3\nassert     extract_freq(['abc', 'def', 'abc']) == 3\nassert     extract_freq(['abc', 'def', 'abc', 'abc', 'def']) == 3\nassert     extract_freq(['abc', 'abc', 'abc', 'def', 'def', 'def']) == 3\nassert     extract_freq(['abc', 'abc', 'def', 'def']) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_freq([(1,2),(2,3),(2,4),(2,5),(3,4)]) == 2\nassert     extract_freq([(1,2),(2,3),(3,4),(4,5),(5,6)]) == 3\nassert     extract_freq([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8)]) == 6\nassert     extract_freq([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9)]) == 8\nassert     extract_freq([(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]) == 9\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_freq([('Red', 'Apple'), ('Yellow', 'Mango'), ('Red', 'Orange')]) == 3\nassert     extract_freq([('Red', 'Apple'), ('Yellow', 'Mango'), ('Blue', 'Ana')]) == 2\nassert     extract_freq([('Red', 'Apple'), ('Yellow', 'Mango'), ('Blue', 'Ana'), ('Blue', 'Sonia')]) == 3\nassert     extract_freq([('Red', 'Apple'), ('Yellow', 'Mango'), ('Blue', 'Ana'), ('Yellow', 'Potato'), ('Blue', 'Sonia')]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef sort_list(test_list):\n    '''\n    Write a function to sort a list in ascending order, keeping the original\n    indices of the sorted elements.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_freq(['a', 'b', 'c', 'b', 'c', 'a', 'c', 'd', 'a']) == 3\nassert extract_freq([('a', 'b', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b')]) == 3\nassert extract_freq(['b', 'c', 'b', 'c', 'a', 'c', 'd', 'a']) == 3\nassert extract_freq(['b', 'c', 'b', 'a', 'c', 'a', 'd', 'a']) == 2\nassert extract_freq(['a', 'b', 'c', 'd', 'a', 'd', 'a']) == 2\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_nested_tuples((1, 1, 2), (1, 2, 3)) == ((2, 3, 4), (3, 4, 5))\nassert     add_nested_tuples((1, 1, 2), (1, 1, 1)) == ((1, 2, 3), (2, 3, 4))\nassert     add_nested_tuples((1, 1, 1), (1, 1, 1)) == ((1, 2, 3), (2, 3, 4))\nassert     add_nested_tuples((1, 1), (1, 1)) == ((1, 2, 3), (2, 3, 4))\nassert     add_nested_tuples((1, 1), (1, 1, 1)) == ((1, 2, 3), (2, 3, 4))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_nested_tuples((1,2,3), (4,5,6)) == (1+4, 2+5, 3+6)\nassert     add_nested_tuples((1,2,3), (4,5,6,7,8)) == (1+4, 2+5, 3+6)\nassert     add_nested_tuples((1,2,3,4,5,6), (4,5,6,7,8,9)) == (1+4+5+6, 2+5+6+7, 3+6+7+8, 4+7+8+9)\nassert     add_nested_tuples((1,2,3,4,5,6,7,8), (4,5,6,7,8,9,10,11)) == (1+4+5+6+7+8, 2+5+6+7+8+9, 3+6+7+8+9+10, 4+7+8+9+10+11)\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (add_nested_tuples(    ((1, 2), (3, 4)), \n                                ((1, 2), (3, 4))\n                                ) == ((1, 4), (5, 6))\n            )\n\ndef add_nested_tuples2(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == ((1,4,7),(2,5,8),(3,6,9))\nassert     add_nested_tuples((1,2,3),(5,6,7)) == ((1,6,9),(2,8,10),(3,9,11))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_nested_tuples((1, (1, 3, 4)), (2, (1, 4, 5))) == (3, (2, 5, 7))\nassert     add_nested_tuples((3, (1, 4, 5)), (4, (1, 2, 3))) == (5, (2, 7, 9))\nassert     add_nested_tuples((2, (1, 4, 5)), (3, (1, 2, 3))) == (5, (2, 7, 9))\nassert     add_nested_tuples((3, (1, 2, 3)), (4, (1, 2, 3))) == (5, (2, 7, 9))\nassert     add_nested_tuples((1, (1, 3, 4)), (2, (1, 4, 5))) == (3, (2, 5, 7))\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == (1, 2, 5, 6, 3, 4, 7, 8)\nassert     add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\nassert     add_nested_tuples((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ndef compute_sum(num_list):\n    '''\n    Write a function to compute the sum of the numbers in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_nested_tuples((1, 1, 1), (2, 2, 2)) == (3, 3, 3)\nassert     add_nested_tuples((2, 2, 2), (3, 3, 3)) == (5, 5, 5)\nassert     add_nested_tuples((4, 4, 4), (3, 3, 3)) == (7, 7, 7)\n\n\ndef del_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise deletion of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_nested_tuples( (1,2,3), (4,5,6)) == (5,7,9)\nassert     add_nested_tuples( (1,2,3), (6,7,8)) == (7,9,10)\nassert     add_nested_tuples( (0,1,2), (3,4,5)) == (3,4,5)\nassert     add_nested_tuples( (0,1,2), (3,4,5,6)) == (3,5,6)"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minimum(1,2)==1\nassert     minimum(2,3)==2\nassert     minimum(2,2)==2\nassert     minimum(0,-1)==-1\nassert     minimum(-1,-2)==-1\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minimum(5,3) == 3\nassert     minimum(5,-3) == -3\nassert     minimum(-5,-3) == -3\nassert     minimum(5.3,3) == 3\nassert     minimum(-5.3,-3) == -3\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minimum(1,2) == 1\nassert     minimum(2,1) == 1\n\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minimum(5, 3) == 3\nassert     minimum(-4, 3) == -4\nassert     minimum(1, -3) == -3\nassert     minimum(1, -1) == -1\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minimum(5,3) == 3\nassert     minimum(5,5) == 5\nassert     minimum(3,5) == 3\nassert     minimum(-5,3) == -5\nassert     minimum(-5,5) == -5\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minimum(4,3) == 3\nassert     minimum(2,3) == 2\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minimum(1,2) == 1\nassert     minimum(2,1) == 1\nassert     minimum(2,2) == 2\nassert     minimum(1,1) == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minimum(1,2) == 1\nassert     minimum(1,1) == 1\nassert     minimum(0,1) == 0\nassert     minimum(-1,1) == -1\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minimum(4,7) == 4\nassert     minimum(7,4) == 4\nassert     minimum(3,5) == 3\nassert     minimum(5,3) == 3\nassert     minimum(-4,7) == -4\n"
    },
    {
        "number": 404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nminimum(5, 6)==5\nminimum(5, 5)==5\nassert \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_tuplex(('a','b','c','d'),('a','b','c')) == True\nassert     check_tuplex(('a','b','c','d'),('a','b','c','x')) == False\nassert     check_tuplex(('a','b','c'),('a','b','c','d')) == False\nassert     check_tuplex(('a','b','c','d'),('a','b','c','x','x')) == False\nassert     check_tuplex((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100),(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_tuplex((1,2,3,4),(1,2,3))\nassert     check_tuplex((1,2,3,4,5),(1,2,3))\nassert     not check_tuplex((1,2,3,4,5),(1,2,3,4))\nassert     not check_tuplex((1,2,3,4,5),(1,2,3,5))\nassert     not check_tuplex((1,2,3,4,5),(1,2,4,5))\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_tuplex((1,2,3,4,5,6),(1,2,4,5)) == True\nassert     check_tuplex((1,2,3,4,5,6),(1,2,4,6)) == False\nassert     check_tuplex((1,2,3,4,5,6),(1,4,5)) == True\nassert     check_tuplex((1,2,3,4,5,6),(1,2,6)) == False\nassert     check_tuplex((1,2,3,4,5,6),(1,4,6)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_tuplex(tuplex = ('a', 'b', 'c'), tuple1 = 'a') == True, \"Wrong\"\nassert     check_tuplex(tuplex = ('a', 'b', 'c'), tuple1 = 'e') == False, \"Wrong\"\n\ndef check_tuple2(tuple2,tuple1,tuple2): \n    '''\n    Write a function to check whether a tuple is a sub-tuple of another tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_tuplex((1,2,3,4,5,6,7),(1,2,3))\nassert     check_tuplex((1,2,3,4,5,6,7),(1,2,4))\nassert     check_tuplex((1,2,3,4,5,6,7),(1,3,4))\nassert     check_tuplex((1,2,3,4,5,6,7),(5,6))\nassert     check_tuplex((1,2,3,4,5,6,7),(1,4,5,6,7))\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_tuplex( (1,2,3,4),(1,2,3)) == True \nassert     check_tuplex( (1,2,3,4),(3,4)) == True \nassert     check_tuplex( (1,2,3,4),(5,6)) == False \nassert     check_tuplex( (1,2,3,4),(1,2,3,4)) == True \nassert     check_tuplex( (1,2,3,4),(1,2,3)) == True \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_tuplex(tuplex,tuple1) == False\nassert     check_tuplex(tuplex,tuple2) == True\nassert     check_tuplex(tuplex,tuple3) == True\nassert     check_tuplex(tuplex,tuple4) == False\nassert     check_tuplex(tuplex,tuple5) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_tuplex(('a','b','c'),('a','b','d')) == True\nassert     check_tuplex(('a','b','c'),('b','c','d')) == True\nassert     check_tuplex(('a','b','c'),('a','b','a')) == False\nassert     check_tuplex(('a','b','c'),('d','e','f')) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Parity(2) == True\nassert     find_Parity(1) == False\nassert     find_Parity(3) == False\nassert     find_Parity(4) == True\nassert     find_Parity(5) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Parity(11)==1,'should be 1'\nassert     find_Parity(12)==0,'should be 0'\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Parity(4) == 0\nassert     find_Parity(9) == 1\nassert     find_Parity(16) == 0\nassert     find_Parity(17) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Parity(3) == True\nassert     find_Parity(3) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Parity(1) == False\nassert     find_Parity(2) == True\nassert     find_Parity(0) == False\nassert     find_Parity(3) == True\nassert     find_Parity(4) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Parity(15) == 1\nassert     find_Parity(17) == 0\nassert     find_Parity(99) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Parity(101) == True\nassert     find_Parity(42) == False\nassert     find_Parity(-3) == True\nassert     find_Parity(-999) == True\nassert     find_Parity(0) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Parity(1) == True\nassert     find_Parity(3) == False\nassert     find_Parity(8) == True\nassert     find_Parity(10) == True\nassert     find_Parity(11) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Parity(7) == 0\nassert     find_Parity(9) == 1\nassert     find_Parity(10) == 1\nassert     find_Parity(14) == 1\nassert     find_Parity(16) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Parity(2) == 1\nassert     find_Parity(3) == 0\nassert     find_Parity(8) == 0\nassert     find_Parity(10) == 1\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(21) == 122\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(100) == 1112\nassert     rearrange_bigger(999) == 99812\nassert     rearrange_bigger(9876) == 98765\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rearrange_bigger(22544) == \"1154123\"\nassert     rearrange_bigger(22334) == \"22344\"\nassert     rearrange_bigger(12345) == \"12345\"\nassert     rearrange_bigger(1234567) == \"1234567\"\nassert     rearrange_bigger(12345678) == \"12345678\"\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(987654321) == '9876543210'\nassert     rearrange_bigger(1234) == '1234'\nassert     rearrange_bigger(2307) == '2307'\nassert     rearrange_bigger(999) == '999'\nassert     rearrange_bigger(999) == '999'\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rearrange_bigger(1230)    == 1230\nassert     rearrange_bigger(1432)    == 4321\nassert     rearrange_bigger(1634)    == 6234\nassert     rearrange_bigger(12)    == 2121\nassert     rearrange_bigger(2091)    == 2132\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert \n\ndef big_sorted(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rearrange_bigger(10) == \"2143\"\nassert     rearrange_bigger(9) == \"9\"\nassert     rearrange_bigger(11) == \"21\"\nassert     rearrange_bigger(12) == \"21\"\nassert     rearrange_bigger(13) == \"11\"\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rearrange_bigger(9973)     == 9973\nassert     rearrange_bigger(6659)     == 6659\nassert     rearrange_bigger(999999999)     == 999999999\n\ndef next_bigger(n):\n    '''\n    Check if n is the next bigger number than n\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(89) == 91\nassert     rearrange_bigger(54) == 54\nassert     rearrange_bigger(342) == 342\nassert     rearrange_bigger(566) == 567\nassert     rearrange_bigger(356) == 356\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(1234) == 4321\nassert     rearrange_bigger(4321) == 1234\nassert     rearrange_bigger(919) == 919\nassert     rearrange_bigger(991) == 999\nassert     rearrange_bigger(99) == 999\n"
    },
    {
        "number": 407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(5642) == 76421\nassert     rearrange_bigger(5) == 5\nassert     rearrange_bigger(5431) == 4353\nassert     rearrange_bigger(54) == 54\nassert     rearrange_bigger(9411) == 9411\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     k_smallest_pairs([1, 1, 2], [1, 2, 3], 1) == [[1, 1]]\nassert k_smallest_pairs([1, 1, 2, 2], [1, 2, 3, 4], 2) == [[1, 1], [1, 1]]\nassert k_smallest_pairs([1, 1, 2, 2], [1, 2, 3, 4], 3) == [[1, 1], [1, 1], [1, 2]]\nassert k_smallest_pairs([1, 1, 2, 2], [1, 2, 3, 4], 4) == [[1, 1], [1, 1], [1, 2], [1, 2]]\nassert k_smallest_pairs([1, 1, 2, 2], [1, 2, 3, 4], 5) == [[1, 1], [1, 1], [1, 2], [1, 2], [2, 2]]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     k_smallest_pairs([1,3,5], [2,4,6], 3) == [(1,2), (1,4), (1,6)]\nassert     k_smallest_pairs([1,1,2], [1,2,3], 2) == [(1,1), (2,2)]\nassert     k_smallest_pairs([1,1], [2], 1) == [(1, 2)]\nassert     k_smallest_pairs([1], [], 0) == []\nassert     k_smallest_pairs([1], [], 1) == [(1, 1)]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6],3) == [(1,2),(1,4),(1,6),(7,2),(7,4),(7,6)]\nassert     k_smallest_pairs([1,1,2],[1,1,1],2) == [(1,1),(1,1)]\n\n\ndef largest_num_pairs(a, b, k):\n    '''\n    Find the k pairs with the largest sum from a, b\n    '''\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([1,1,2], [1,2,3], 2) == [(1,1), (1,2)]\nassert     k_smallest_pairs([1,1,2], [1,2,3], 1) == [(1,1)]\nassert     k_smallest_pairs([1,2,3], [4,5,6], 3) == [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]\n\ndef k_smallest_pairs_1(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # number of pairs is (k+1)^2/2\n    # so, we'll use heap, and replace the heap with the elements we want\n    # and maintain the k^2/2 heap\n    # so, we'll do:\n    # 1. first put the first element in heap, which is smallest pair\n    # 2. first put the second element in heap\n    # 3. we'll iterate through the nums2, do the same thing, and swap the two elements if the result is smaller\n    # and then we'll pop the element from the heap and keep swapping the elements we want\n    # it's a O(k^2logk) complexity\n    # so, overall complexity is O(k^2logk)\n    \n    heap = [(nums1[0], nums2[0])]\n    \n    for i in xrange(1, k):\n        heapq.heappush(heap, (nums1[i], nums2[0]))\n        heapq.heappush(heap, (nums1[0], nums2[i]))\n    \n    result = []\n    \n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([1,3,5,7,9],[2,4,6,8,10],3) == [(1,2),(3,4),(5,6)]\nassert     k_smallest_pairs([1,2,3],[4,5,6],4) == [(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)]\nassert     k_smallest_pairs([5,9,13,15,17],[8,12,16,20,22],3) == [(5,8),(9,12),(13,16),(15,20),(17,22)]\nassert     k_smallest_pairs([1,2,3,4,5,6,7,8,9,10,11,12,13],[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == [(1,3),(2,6),(3,9),(4,12),(5,15),(6,18),(7,21),(8,24),(9,27),(10,30),(11,33),(12,36),(13,39),(14,42),(15,45),(16,48),(17,51),(18,54),(19,57),(20,60),(21,63),(22,66),(23,69),(24,72),(25,75),(26,78),(27,81),(28,84),(29,87),(30,90)]\n\ndef find_rotation_point(arr1, arr2):\n    '''\n    Find the index of the rotation point in the two arrays\n    '''\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([], [], 0) == []\nassert     k_smallest_pairs([1, 2], [2, 3], 1) == [([1, 2], 2), ([1, 2], 3)]\nassert     k_smallest_pairs([1, 4, 5, 7], [4, 3, 6, 8], 3) == [([4, 5, 7], 4), ([4, 5, 7], 6), ([4, 5, 7], 8)]\n\ndef max_subarray_of_size_k(k, arr):\n    '''\n    Given a zero-indexed array of positive integers arr, return the maximum sum of two non-overlapping subarrays of size k.\n    In other words, return the maximum sum of the elements in the two subarrays arr[i] + arr[j] (i.e., arr[i+1:j+1]) where:\n        i <= j < arr.length - k\n    and both i and j are 0-indexed.\n    '''\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6],3) == [\n        [1,2],[1,4],[1,6],[7,2],[7,4],[7,6]\n    ]\nassert k_smallest_pairs([1,7,11],[2,4,6],4) == [\n        [1,2],[1,4],[1,6],[7,2],[7,4],[7,6]\n    ]\nassert k_smallest_pairs([1,7,11],[2,4,6],5) == [\n        [1,2],[1,4],[1,6],[7,2],[7,4],[7,6]\n    ]\nassert k_smallest_pairs([1,7,11],[2,4,6],6) == [\n        [1,2],[1,4],[1,6],[7,2],[7,4],[7,6]\n    ]\nassert k_smallest_pairs([1,7,11],[2,4,6],7) == [\n        [1,2],[1,4],[1,6],[7,2],[7,4],[7,6]\n    ]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6],3) == [[1,2],[1,4],[1,6],[7,2],[7,4],[7,6]]\nassert     k_smallest_pairs([],[],3) == [[],[],[]]\nassert     k_smallest_pairs([1,7,11],[],1) == [[1,7],[1,11]]\nassert     k_smallest_pairs([-1,3,1,2],[4,1,5,3,2,4],3) == [[-1,1],[-1,1],[-1,1],[1,3],[1,3],[1,2],[2,3],[2,4],[4,3],[4,2],[4,2]]\n\ndef k_largest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of largest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     k_smallest_pairs([1,7,11], [2,4,6],3) == [(1,2),(1,4),(1,6)]\nassert     k_smallest_pairs([1,1,2], [1,1,1],1) == [(1,1)]\nassert     k_smallest_pairs([1,2], [3,4,5,6], 3) == [(1,3),(1,4),(1,5)]\nassert     k_smallest_pairs([1,1,2,2,3,3,3], [1,2,2,3,3,3], 2) == [(1,2), (2,2)]\nassert     k_smallest_pairs([1,2,3,4,5,6], [7,8,9,10], 3) == [(1,7), (1,8), (1,9)]\n"
    },
    {
        "number": 408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [\n            [1, 2], [1, 4], [1, 6]\n        ]\nassert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 4) == [\n            [1, 2], [1, 4], [1, 6], [7, 2], [7, 4], [7, 6]\n        ]\nassert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 1) == [\n            [1, 2], [1, 4], [1, 6]\n        ]\n\ndef count_inversions(a):\n    '''\n    Given an array of integers, count the number of inversions in the array.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_product_tuple([(1,2), (2,3), (3,4)]) == (1*2)\nassert     min_product_tuple([(1,2), (1,2), (1,2)]) == (1*2)\nassert     min_product_tuple([(1,2), (3,4)]) == (1*2)\nassert     min_product_tuple([(1,2), (2,3)]) == (1*2)\nassert     min_product_tuple([(1,2), (2,3), (3,4)]) == (1*2)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_product_tuple([('a', 3), ('b', 1), ('c', 2)]) == (3, 1)\nassert     min_product_tuple([('a', 3), ('b', 2), ('c', 1)]) == (3, 2)\nassert     min_product_tuple([('a', 3), ('b', 3), ('c', 4)]) == (3, 3)\nassert     min_product_tuple([('a', 4), ('b', 2), ('c', 3)]) == (4, 2)\nassert     min_product_tuple([('a', 10), ('b', 2), ('c', 3)]) == (10, 2)\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     min_product_tuple([(1,3),(2,4),(5,6),(7,8)]) == 96\nassert     min_product_tuple([(2,3),(5,6),(7,8)]) == 60\nassert     min_product_tuple([(5,6),(7,8)]) == 30\nassert     min_product_tuple([(7,8)]) == 28\nassert     min_product_tuple([]) == 0\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_product_tuple([(4, 6), (5, 7), (1, 1), (3, 3), (3, 4)]) == 2\nassert     min_product_tuple([(4, 7), (5, 3), (2, 1), (1, 3), (3, 4)]) == 2\nassert     min_product_tuple([(5, 3), (5, 2), (5, 1), (4, 6), (4, 7)]) == 2\nassert     min_product_tuple([(4, 6), (5, 3), (5, 2), (5, 1), (4, 7)]) == 2\nassert     min_product_tuple([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == 4\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 16\nassert     min_product_tuple([(1, 2), (3, 4), (10, 5), (8, 6), (7, 8)]) == 48\nassert     min_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)]) == 72\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_product_tuple([(1,3), (2,5), (4,7), (6,9), (8,2)]) == 72, 'Did not work for min_product_tuple'\nassert     min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 56, 'Did not work for min_product_tuple'\nassert     min_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == 12, 'Did not work for min_product_tuple'\nassert     min_product_tuple([(1,2,3), (4,5,6), (7,8,9), (10,11,12)]) == 6, 'Did not work for min_product_tuple'\nassert     min_product_tuple([(1,2,3,4), (5,6,7,8), (9,10,11,12)]) == 6, 'Did not work for min_product_tuple'\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4), (4, 5), (6, 7)]) == 18\nassert     min_product_tuple([(5, 3), (5, 5), (5, 8)]) == 50\nassert     min_product_tuple([(8, 3), (8, 4), (8, 5)]) == 80\nassert     min_product_tuple([(2, 4), (3, 5), (4, 6)]) == 30\nassert     min_product_tuple([(10, 3), (10, 4), (10, 5)]) == 300\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_product_tuple([(1,2),(3,4),(5,6)]) == 30\nassert     min_product_tuple([(5,5),(1,5),(5,1)]) == 50\nassert     min_product_tuple([(5,5),(1,1),(5,1)]) == 5\nassert     min_product_tuple([(5,5),(1,1),(5,1),(5,1)]) == 5\nassert     min_product_tuple([(5,5),(1,1),(5,1),(5,1),(5,1)]) == 5\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     min_product_tuple(min_product_tuple([(2,3), (6,4), (8,5), (4,1)])) ==  120\nassert     min_product_tuple(min_product_tuple([(3,4), (6,7), (6,3)])) ==  42\nassert     min_product_tuple(min_product_tuple([(6,8), (3,4), (8,2), (9,7), (9,8)])) ==  282\nassert     min_product_tuple(min_product_tuple([(7,8), (2,5), (4,9), (4,5), (3,7)])) ==  243\n"
    },
    {
        "number": 409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 60\nassert     min_product_tuple([(1, 2), (3, 4)]) == 12\nassert     min_product_tuple([(1, 1), (1, 2), (1, 3)]) == 1\nassert     min_product_tuple([(1, 1), (1, 2), (1, 3), (1, 4)]) == 1\nassert     min_product_tuple([(1, 1), (2, 2), (3, 3)]) == 6\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_val([[1,2,3],[4,5,6],[7,8,9]]) == 1\nassert     min_val([[2,3,4],[3,4,5],[2,3,4]]) == 2\nassert     min_val([['a','b','c'],['c','d','a']]) == 'a'\nassert     min_val([[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5]]) == 1\nassert     min_val([[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5],[5,4,3,2,1],[1,2,3,4,5]]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_val([1,2,3,'a','b','c']) == 'a'\nassert     min_val([1,2,3,'a',2,'c']) == 'a'\nassert     min_val([1,2,'a','b','c']) == 1\nassert     min_val([0,0,0,0,0,'a','b','c']) == 'a'\nassert     min_val(['a','b','c','d','e','f']) == 'a'\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     min_val([1,2,'a',False,3.2]) == 1\nassert     min_val([-1,0.2,True]) == -1\nassert     min_val([]) == None\nassert     min_val([1]) == 1\nassert     min_val(['a', False, 3.2]) == False\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_val([0,0,0,0,0,0,0,0,1]) == 0\nassert     min_val([0,1,2,3,4,5,6,7,8]) == 0\nassert     min_val([9,9,9,9,9,9,9,9,9]) == 9\nassert     min_val([10,11,12,13,14,15,16,17,18]) == 10\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_val([1,2,3,4,'two',5,6,7,8,9]) == 1\nassert     min_val(['one','two','three','four','five','six']) == 'one'\nassert     min_val([3,5,1,8,9,10]) == 1\nassert     min_val([2,4,5,7,8,9]) == 2\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_val([1, 2, 3, 4, 5]) == 1\nassert     min_val([1, 2, 'a', 4, 5]) == 1\nassert     min_val([1, 2, [], 4, 5]) == 1\nassert     min_val([1, 2, [1, 2], 4, 5]) == 1\nassert     min_val([1, 2, [1, 2], 4, [5, 6]]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_val([5, 8, 6, 7, 4, 2, 7, 6]) == 2\nassert     min_val([5, 8, 6, 7, 4, 2, 7, 6, 1]) == 1\nassert     min_val([]) == None\nassert     min_val([-5, -8, -6, -7, -4, -2, -7, -6, -5, -5, -5, -5, -5]) == -5\nassert     min_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_val([1, 2, 3, 4, 'a', 'b', 6]) == 1\nassert     min_val(['aa', 2, 'ab', 'ba', 'bb']) == 'aa'\nassert     min_val([1, 2, 3, 4, 6, 7, 8, 9, 10, 'a', 'b', 'c']) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     min_val([(1, 'x'), (2, 'y'), (3, 'z')]) == 1, \"Failed to find the minimum value!\"\nassert     min_val([(1, 'x'), (2, 'y'), (0, 'z')]) == 0, \"Failed to find the minimum value!\"\nassert     min_val([(0, 'x'), (2, 'y'), (3, 'z')]) == 0, \"Failed to find the minimum value!\"\nassert     min_val([(2, 'x'), (0, 'y'), (3, 'z')]) == 0, \"Failed to find the minimum value!\"\nassert     min_val([(2, 'x'), (0, 'y'), (0, 'z')]) == 0, \"Failed to find the minimum value!\"\n"
    },
    {
        "number": 410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     min_val([1, 2, 'a', True, 5]) == 1\nassert     min_val(['z', 'a', 'w', 'q', 3]) == 'a'\nassert     min_val([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 1"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     snake_to_camel('e_mail') == 'email'\nassert     snake_to_camel('e_mail_box') == 'emailBox'\nassert     snake_to_camel('e_mail_box_x') == 'emailBoxX'\nassert     snake_to_camel('e_mail_box_xx') == 'emailBoxXX'\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     snake_to_camel(\"to_camel\")     == \"toCamel\", \"Test 1\"\nassert     snake_to_camel(\"snake_case\")     == \"snakeCase\", \"Test 2\"\nassert     snake_to_camel(\"camelCase\")     == \"CamelCase\", \"Test 3\"\nassert     snake_to_camel(\"to_camel_case\")     == \"toCamelCase\", \"Test 4\"\nassert     snake_to_camel(\"__EXAMPLE__\")     == \"EXAMPLE\", \"Test 5\"\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     snake_to_camel(\"get_argument\")    ==    \"getArgument\"\nassert     snake_to_camel(\"graphic_field_name\")    ==    \"GraphicFieldName\"\nassert     snake_to_camel(\"form_get_argument\")    ==    \"FormGetArgument\"\nassert     snake_to_camel(\"__init__\")    ==    \"Init\"\nassert     snake_to_camel(\"get__init__\")    ==    \"GetInit\"\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"thisIsCamelCased\") == \"thisIsCamelCased\"\nassert     snake_to_camel(\"snake_to_camel\") == \"snakeToCamel\"\nassert     snake_to_camel(\"__EXAMPLE__snake_to_camel\") == \"exampleSnakeToCamel\"\nassert     snake_to_camel(\"this_is_camel_cased\") == \"thisIsCamelCased\"\nassert     snake_to_camel(\"snake_to_camel_is_camel_cased\") == \"snakeToCamelIsCamelCased\"\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     snake_to_camel('test_functions')=='testFunctions'\nassert     snake_to_camel('is_an_example')=='isAnExample'\nassert     snake_to_camel('hello_world_')=='HelloWorld'\nassert     snake_to_camel('8')=='8'\nassert     snake_to_camel('test_functions_')=='TestFunctions'\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('snake_case2') == 'SnakeCase2'\nassert     snake_to_camel('snake_case3') == 'SnakeCase3'\nassert     snake_to_camel('snake_case4') == 'SnakeCase4'\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"hello_world\") == \"HelloWorld\"\nassert     snake_to_camel(\"camelCase\") == \"CamelCase\"\nassert     snake_to_camel(\"the_best_programming_language\") == \"TheBestProgrammingLanguage\"\nassert     snake_to_camel(\"best_language_ever\") == \"BestLanguageEver\"\n\ndef word_length(word):\n    '''\n    Write a function to check whether a given word is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     snake_to_camel(\"pascalCase\") == \"PascalCase\"\nassert     snake_to_camel(\"p_snake_case\") == \"PSnakeCase\"\nassert     snake_to_camel(\"__EXAMPLE__\") == \"Example\"\nassert     snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert     snake_to_camel(\"__snake_case__\") == \"SnakeCase\"\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     snake_to_camel(word) == camel_case\n\ndef get_url(url, params=None):\n    '''\n    return a dictionary with key as url and value as url with?param=value&param=value pattern\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     snake_to_camel('to_camel') == 'ToCamel', 'Wrong result for `to_camel`'\nassert     snake_to_camel('toCamel') == 'ToCamel', 'Wrong result for `toCamel`'\nassert     snake_to_camel('to-camel') == 'ToCamel', 'Wrong result for `to-camel`'\nassert     snake_to_camel('to camel') == 'ToCamel', 'Wrong result for `to camel`'\nassert     snake_to_camel('tO camel') == 'ToCamel', 'Wrong result for `tO camel`'\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nremove_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]\nremove_odd([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\nremove_odd([]) == []\nremove_odd([2]) == [2]\nremove_odd([3, 5, 4, 2, 3, 4]) == [3, 4, 2]\nremove_odd([-1, 0, 1, -2, 3, 4, 5, 6]) == [-1, -2, 0, 1, 3, 4, 5, 6]\n\ndef main():\n    print remove_odd([1, 2, 3, 4, 5, 6, 7, 8])\n    print remove_odd([1, 3, 5, 7, 9])\n    print remove_odd([])\n    print remove_odd([2])\n    print remove_odd([3, 5, 4, 2, 3, 4])\n    print remove_odd([-1, 0, 1, -2, 3, 4, 5, 6])\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9,11]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,3,5,7,9,11,13,15,17,19]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == [1,3,5,7,9,11,13,15,17,19,21]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7]\nassert     remove_odd([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == [-1,-3,-5,-7]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 3, 5, 7, 9, 11, 13, 15]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 3, 5, 7, 9, 11, 13, 15]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == [1, 3, 5, 7, 9, 11, 13, 15]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [1, 3, 5, 7, 9, 11, 13, 15]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8]) == [1, 3, 5, 7]\nassert     remove_odd([1,2,3,4,5,6,7,9]) == [1, 3, 5, 7]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1, 3, 5, 7]\nassert     remove_odd([]) == []\nassert     remove_odd([1]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 7"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     remove_odd([1,2,3,4,5]) == [1,3,5]\nassert     remove_odd([1,2,3,4]) == [1,3,4]\nassert     remove_odd([1,2,3]) == [1,2,3]\nassert     remove_odd([]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [1,3,5]\nassert     remove_odd([1,3,5,7,9,11]) == [1,3,5,7,9,11]\nassert     remove_odd([-1,-3,-5,-7,-9,-11]) == [-1,-3,-5,-7,-9,-11]\n"
    },
    {
        "number": 412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]), \"remove_odd is not correct\"\nassert     (remove_odd([1, 3, 5, 7, 9]) == []), \"remove_odd is not correct\"\nassert     (remove_odd([0, -1, -3, -5, -7, -9]) == [-1, -3, -5, -7]), \"remove_odd is not correct\"\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10)], 1) == 2\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10)], -1) == 10\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10)], 7) == 9\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10)], 6) == 6\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10)], -8) == -1\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_nth_element([('Google', 1), ('Opera', 2), ('Amanda', 3), ('Facebook', 4)], 1) == 'Google', 'Test #1: extract_nth_element'\nassert     extract_nth_element([('Google', 1), ('Opera', 2), ('Amanda', 3), ('Facebook', 4)], 2) == 'Opera', 'Test #2: extract_nth_element'\nassert     extract_nth_element([('Google', 1), ('Opera', 2), ('Amanda', 3), ('Facebook', 4)], 3) == 'Amanda', 'Test #3: extract_nth_element'\nassert     extract_nth_element([('Google', 1), ('Opera', 2), ('Amanda', 3), ('Facebook', 4)], 4) == 'Facebook', 'Test #4: extract_nth_element'\nassert     extract_nth_element([('Google', 1), ('Opera', 2), ('Amanda', 3), ('Facebook', 4)], 5) == '', 'Test #5: extract_nth_element'\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_nth_element([(1, 4), (2, 5), (3, 7), (4, 8)], 0) == (1, 4)\nassert     extract_nth_element([(1, 4), (2, 5), (3, 7), (4, 8)], 1) == (2, 5)\nassert     extract_nth_element([(1, 4), (2, 5), (3, 7), (4, 8)], 2) == (3, 7)\nassert     extract_nth_element([(1, 4), (2, 5), (3, 7), (4, 8)], 3) == (4, 8)\nassert     extract_nth_element([(1, 4), (2, 5), (3, 7), (4, 8)], 4) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4)], 1) == 4\nassert     extract_nth_element([(1, 2), (3, 4)], 0) == 1\nassert     extract_nth_element([(1, 2), (3, 4)], 2) == 3\nassert     extract_nth_element([(1, 2), (3, 4)], 3) == 4\nassert     extract_nth_element([(1, 2), (3, 4)], 4) == 2\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_nth_element( [(1, 2), (3, 4), (5, 6), (7, 8)], 0) == (1, 2)\nassert     extract_nth_element( [(1, 2), (3, 4), (5, 6), (7, 8)], 1) == (3, 4)\nassert     extract_nth_element( [(1, 2), (3, 4), (5, 6), (7, 8)], 2) == (5, 6)\nassert     extract_nth_element( [(1, 2), (3, 4), (5, 6), (7, 8)], 3) == (7, 8)\nassert     extract_nth_element( [(1, 2), (3, 4), (5, 6), (7, 8)], 4) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 1) == 'a'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 2) == 'c'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 3) == 'e'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 4) == 'd'\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 5) == 'b'\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_nth_element([(1, 4), (1, 5), (1, 2)], 1) == (1, 5)\nassert     extract_nth_element([(1, 4), (1, 5), (1, 2)], 2) == (1, 2)\nassert     extract_nth_element([(1, 4), (1, 5), (1, 2)], 3) == (1, 4)\nassert     extract_nth_element([(1, 4), (1, 5), (1, 2)], 4) == (1, 1)\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == 1\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == 3\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 5\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == 4\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == 6\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 4) == 8\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6), (7, 8)], 5) == None\n\ndef sort_by_second_element(list1):\n    '''\n    Write a function to sort a list of tuples by the second element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_nth_element([(1,2),(3,4)], 1) == (1, 2)\nassert     extract_nth_element([(1,2),(3,4)], 2) == (3, 4)\nassert     extract_nth_element([(1,2),(3,4)], 3) == (1, 2)\nassert     extract_nth_element([(1,2),(3,4)], 4) == (3, 4)\nassert     extract_nth_element([(1,2),(3,4)], 5) == None\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     overlapping([1,2,3],[1,2,3]) == True\nassert     overlapping([1,2,3],[5,6,7]) == False\nassert     overlapping([1,2,3],[5]) == False\nassert     overlapping([1,2,3],[]) == True\nassert     overlapping([1,2,3,4],[1,2,3]) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n        return False\n    \nassert overlapping([0,1,2], [0,1,2,3,4]) == True\nassert overlapping([1,2,3], [0,1,2,3,4]) == False\nassert overlapping([0,1,2], [0,1,2,3,4,5]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     overlapping([1,2,3,4,5], [1,2,4,5,6]) == True\nassert     overlapping([1,2,3,4,5], [1,2,4,6,7]) == False\nassert     overlapping([1,2,3,4,5], []) == False\n\n\ndef find_max(list1,list2):  \n    '''\n    Write a python function to find the maximum element of two lists of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     overlapping([1,2,3,4,5],[1,2,4,5]) == True\nassert     overlapping([1,2,3,4,5],[1,2,4,5,6]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     overlapping([1,2,3],[1,2,4]) == True\nassert     overlapping([1,2,3],[1,2,4]) == False\nassert     overlapping([1,2,3],[1,2,3]) == True\nassert     overlapping([1,2,3],[3,4,5]) == True\nassert     overlapping([1,2,3],[3,4,5]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     overlapping(range(5),range(5)) == True\nassert     overlapping(range(5),range(10)) == False\nassert     overlapping([1,2,3,4],(4,5,6)) == True\nassert     overlapping([1,2,3,4],(4,5,6,7)) == False\nassert     overlapping([1,2,3,4,5,6],(1,2,3,4,5,6)) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         overlapping([1,2,3], (1,2,3))==True\nassert         overlapping([1,2,3], (5,3,2))==False\nassert         overlapping([1,2,3], [1,2,3])==True\nassert         overlapping([1,2,3,1,2,3], [1,2,3,1,2,3])==True\nassert         overlapping([1,2,3,1,2,3], (1,2,3,1,2,3))==True\n"
    },
    {
        "number": 414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [2,1,3] == max_Product([2,1,3])\nassert     [2,1,4] == max_Product([2,1,4])\nassert     [2,1,5] == max_Product([2,1,5])\nassert     [6,2,1,3,5] == max_Product([6,2,1,3,5])\n\ndef max_Product_1(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # two pointers\n    l, r = 0, len(arr)-1\n    max_product = float('-inf')\n    while l<r:\n        product = arr[l]*arr[r]\n        if product > max_product:\n            max_product = product\n        if arr[l]>arr[r]:\n            r-=1\n        else:\n            l+=1\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_Product([-3, -2, -1]) == -1\nassert     max_Product([3, 2, 1]) == 3\nassert     max_Product([3, 3]) == 3\nassert     max_Product([-3, -2, -1, 3, 2, 1]) == 6\nassert     max_Product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 720\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_Product([3, 5, -4, 0, 1]) == [3, 5]\nassert     max_Product([9, -7, -4, 3, 1, 0, -3, -5, -4, 2]) == [9, -7, -4, 3]\nassert     max_Product([-5, -3, -2, -1]) == [-5, -3]\nassert     max_Product([-9, -7, -4, 3, 1, 0, -3, -5, -4, 2]) == [-9, -7, -4, 3]\n\n\ndef longest_common_substring(s1, s2):\n    '''\n    Write a python function to find the longest common substring of two given strings.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_Product([4,1,2,3,1]) == [1,1]\nassert     max_Product([2,3,4,5,6]) == [6,6]\nassert     max_Product([-3,-2, -1]) == [-3,-3]\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_Product([3, 4, -1, 2]) == 12\nassert     max_Product([-3, -4, -1, -2]) == 12\nassert     max_Product([3, -4, -1, 2]) == 6\nassert     max_Product([-3, -4, 1, 2]) == 6\nassert     max_Product([-3, 1, -4, -2]) == 12\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_Product([1, 2, 3]) == 6\nassert     max_Product([-1, -2, -3]) == 6\nassert     max_Product([-1, 2, 3]) == 2\nassert     max_Product([-1, 2, 3, 4]) == 24\nassert     max_Product([-1, -2, -3, 4]) == 24\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_Product([2, 3, -2, 4, -1]) == [2, 4]\nassert     max_Product([-3, 4, 2, -1, -5, -4]) == [-5, 4]\nassert     max_Product([-3, 4, 2, -1, -5, 4]) == [-5, 4]\nassert     max_Product([-3, 4, 2, -1, -5, 4, 3, -2, -6]) == [-6, 3]\nassert     max_Product([]) == None\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (max_Product([10, 3, -2, -4, 5]) == 6)\nassert     (max_Product([0, 1, -2, 3, -5]) == 1)\nassert     (max_Product([2, 3, -4, 2, -3]) == -12)\nassert     (max_Product([2, 3, -4, 2, -3, 3, 2]) == 6)\nassert     (max_Product([-5, -5]) == -5)\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (max_Product([-10, 10, 5, 2]) == (10, 5)), \"test 1 fails\"\nassert     (max_Product([-2, 3, -1, 8]) == (8, 3)), \"test 2 fails\"\nassert     (max_Product([3, -1, -2, -5, 2]) == (2, -5)), \"test 3 fails\"\nassert     (max_Product([-2, -3, -1, 3, -4]) == (3, -1)), \"test 4 fails\"\nassert     (max_Product([-4, -2, -2, -2, -2]) == (2, -2)), \"test 5 fails\"\n"
    },
    {
        "number": 415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_Product([1, 5, 2, 3, 3, 4]) == 18\nassert     max_Product([1, 5, 2, 3, 3, 4, 5, 8, 2, 7]) == 95\nassert     max_Product([1, 5, 2, 3, 3, 4, 5, 8, 2, 7, 0]) == 62\nassert     max_Product([5, 2, 0, 2, 3, 0, 4]) == 32\nassert     max_Product([1, 5, 2, 3, 3, 4, 5, 8, 2, 7, 0, 1]) == 126\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     group_tuples( [ ('a', 'b'), ('b', 'c'), ('c', 'd') ] ) == [ 'a' ]\nassert     group_tuples( [ ('a', 'b'), ('b', 'c'), ('c', 'a') ] ) == [ 'b', 'c' ]\nassert     group_tuples( [ ('a', 'b'), ('a', 'c'), ('b', 'c') ] ) == [ 'a', 'b', 'c' ]\nassert     group_tuples( [ ('a', 'b'), ('b', 'c'), ('c', 'a'), ('d', 'e') ] ) == [ 'a', 'b', 'c' ]\nassert     group_tuples( [ ('a', 'b'), ('b', 'c'), ('a', 'c') ] ) == [ 'a', 'b', 'c' ]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     group_tuples([(1,2,3),(4,5,6),(7,8,9)]) == [(1,4,7)]\nassert group_tuples([(1,2,3),(4,5,6),(7,8,9),(7,8,9)]) == [(1,4,7),(7,8,9)]\nassert group_tuples([(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9)]) == [(1,4,7),(1,2,3),(4,5,6),(7,8,9)]\nassert group_tuples([(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9),(1,2,3),(4,5,6),(7,8,9)]) == [(1,4,7),(1,2,3),(4,5,6),(7,8,9)]\n\ndef is_repeating(s):\n    '''\n    Write a function to determine whether the given string has a repeating substring.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     group_tuples([(1,2),(3,4),(5,6),(1,3)]) == [(1,1),(3,3)]\nassert     group_tuples([(1,2),(3,4),(5,6)]) == None\nassert     group_tuples([(1,2),(1,3),(1,4),(1,5)]) == [(1,1)]\nassert     group_tuples([(1,2),(2,3),(1,4),(1,5)]) == [(1,1),(2,2),(1,4),(1,5)]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     group_tuples([(1,2),(3,4),(5,6)]) == [(1,)]\nassert     group_tuples([(1,2),(3,4),(5,6)]) == [(1,),(3,),(5,)]\nassert     group_tuples([(1,2),(3,4),(1,7)]) == [(1,),(1,),(1,)]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     group_tuples([('James', 'Bond', '007'), ('Gus', 'Tarkowski', '007'), ('George', 'Tarkowski', '007'), ('George', 'W.Bush', '007'), ('John', 'Barbara', '007'), ('John', 'Barbara', '007')]) == ['007'], 'group_tuples'\nassert     group_tuples([('Mary', 'Sue', '015'), ('John', 'Barbara', '007'), ('Paul', 'Allen', '009'), ('Paul', 'Allen', '009'), ('Paul', 'Allen', '009'), ('Paul', 'Allen', '009')]) == ['009'], 'group_tuples'\nassert     group_tuples([('James', 'Bond', '007'), ('Gus', 'Tarkowski', '007'), ('George', 'Tarkowski', '007'), ('George', 'W.Bush', '007'), ('John', 'Barbara', '007'), ('John', 'Barbara', '007')]) == ['007'], 'group_tuples'\nassert     group_tuples([('Mary', 'Sue', '015'), ('John', 'Barbara', '007'), ('Paul', 'Allen', '009'), ('Paul', 'Allen', '009'), ('Paul', 'Allen', '009'), ('Paul', 'Allen', '009')]) == ['007'], 'group_tuples'\nassert     group_tuples([('James', 'Bond', '007'), ('Gus', 'Tarkowski', '007'), ('George', 'Tarkowski', '007'), ('George', 'W.Bush', '007'), ('John', 'Barbara', '007'), ('John', 'Barbara', '007')]) == ['007'], 'group_tuples'\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     group_tuples( [(1,2,3),(2,1,2),(4,2,3),(3,1,1)]) == [[2,2,2],[1,1,1]]\nassert     group_tuples( [(1,2,3),(2,1,2),(4,2,3),(3,1,1),(3,1,3)]) == [[2,2,2],[1,1,1]]\nassert     group_tuples( [(1,2,3),(2,1,2),(4,2,3),(3,1,1),(3,2,2)]) == [[2,2,2],[1,1,1]]\nassert     group_tuples( [(1,2,3),(2,1,2),(4,2,3),(3,1,1),(3,1,2),(1,2,3)]) == [[2,2,2],[1,1,1]]\nassert     group_tuples( [(1,2,3),(2,1,2),(4,2,3),(3,1,1),(3,1,2),(3,2,3)]) == [[2,2,2],[1,1,1]]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     group_tuples([(1, 2), (2, 3), (1, 4), (2, 4), (3, 4)]) == [(1, 4), (2, 4), (3, 4)]\nassert     group_tuples([(1, 2), (2, 3), (3, 4), (1, 4), (2, 4), (3, 4)]) == [(1, 4), (2, 4), (3, 4)]\nassert     group_tuples([(1, 2), (2, 3), (3, 4), (1, 4), (2, 4), (3, 4)]) == [(1, 4), (2, 4), (3, 4)]\nassert     group_tuples([(1, 2), (2, 3), (3, 4), (1, 4), (2, 4), (3, 4)]) == [(1, 4), (2, 4), (3, 4)]\nassert     group_tuples([(1, 2), (2, 3), (3, 4), (1, 4), (2, 4), (3, 4)]) == [(1, 4), (2, 4), (3, 4)]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     group_tuples([(1,2),(3,4),(5,6)]) == [1,3,5]\nassert     group_tuples([(2,4),(3,5),(5,7)]) == [2,3]\n\ndef group_tuples_2(tuples):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # we need a hashmap here\n    hashmap = {}\n    for t in tuples:\n        if t[0] in hashmap:\n            hashmap[t[0]].append(t)\n        else:\n            hashmap[t[0]] = [t]\n    return [hashmap[key][0] for key in hashmap]\n"
    },
    {
        "number": 417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     group_tuples([(1, 2, 3), (1, 2, 3), (5, 6, 7), (8, 9, 10)]) == [1, 1]\nassert     group_tuples([(1, 2, 3), (1, 2, 3), (5, 6, 7), (8, 9, 10), (1, 1, 1), (1, 1, 1)]) == [1, 1]\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Find_Max([[1, 2, 3, 4], [4, 3, 2, 1], [5, 6, 7, 8, 9]]) == 8\nassert     Find_Max([[1, 2, 3, 4], [4, 3, 2, 1], [5, 6, 7, 8, 9, 10]]) == 10\nassert     Find_Max([[1], [2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12]]) == 12\nassert     Find_Max([[1, 2], [3, 4, 5], [6, 7, 8, 9, 10, 11, 12, 13]]) == 13\nassert     Find_Max([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]) == 17\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Find_Max([['a','b','c'],['d','e','f']]) == ['e','f']\nassert     Find_Max([['a','b'],['d','e','f','g']]) == ['e','f','g']\nassert     Find_Max([['a'],['b','c','d']]) == ['b','c','d']\nassert     Find_Max([['a','b'],['d','e'],['f','g','h','i']]) == ['g','h','i']\nassert     Find_Max([['a','b'],['d','e'],['f']]) == ['d','e','f']\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Find_Max([(1,2,3,4,5),(2,3,4,5),(3,4,5)]) == (3, 4, 5)\nassert     Find_Max([(1,2,3,4),(2,3,4),(3,4)]) == (3, 4)\nassert     Find_Max([(1,2,3,4,5),(2,3,4,5),(3,4,5)]) == (3, 4, 5)\nassert     Find_Max([(1,2,3,4),(2,3,4),(3,4)]) == (3, 4)\nassert     Find_Max([(1,2,3,4,5),(2,3,4,5),(3,4,5)]) == (3, 4, 5)\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 4\nassert     Find_Max([2,3,4,5,7,6]) == 7\nassert     Find_Max([2,3,4,5,8,6]) == 8\n\ndef Find_Max2(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Find_Max([5, 5, 3, 1, 1, 2, 2, 2, 1]) == 1\nassert     Find_Max([1, 2, 3, 4]) == 4\nassert     Find_Max([1, 2, 3]) == 3\nassert     Find_Max([3, 3, 2, 1]) == 3\nassert     Find_Max([2, 1, 3, 4, 5]) == 5\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Find_Max([1,2,3,4,5,6,7,8]) == 8\nassert     Find_Max([4,5,7,8]) == 8\nassert     Find_Max([2,3,4,5,6,7,8]) == 7\nassert     Find_Max([7,8,9,10]) == 9\nassert     Find_Max([1,2,3]) == 3\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Find_Max([0, 1, 2, 3, 4]) == 4\nassert     Find_Max([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     Find_Max([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1\nassert     Find_Max([2, 2, 2, 2, 2, 2]) == 2\nassert     Find_Max([2, 2, 2, 2]) == 2\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 4\nassert     Find_Max([1,2,3,5,4]) == 5\nassert     Find_Max([1,2,3,4,5,6]) == 6\nassert     Find_Max([1,2,3,4,5,6,7]) == 7\nassert     Find_Max([1,2,3,4,5,6,7,8]) == 8\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Find_Max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 'j'\nassert     Find_Max(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'g'\nassert     Find_Max(['a', 'b', 'c', 'd', 'e', 'f']) == 'f'\nassert     Find_Max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == 'h'\nassert     Find_Max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 'i'\n"
    },
    {
        "number": 418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5\nassert Find_Max([1,3,4,5]) == 5\nassert Find_Max([4,5,2,3]) == 5\nassert Find_Max([4,5,2]) == 4\nassert Find_Max([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     round_and_sum([1.4, 1.7, 2.8, 3.9, 4.5, 5.6, 6.7, 7.8]) == [15.0, 17.0, 19.0, 21.0, 22.0, 24.0, 25.0, 26.0]\nassert     round_and_sum([1.4, 1.7, 2.8, 3.9, 4.5, 5.6, 6.7, 7.8, 9.9, 10.1]) == [15.0, 17.0, 19.0, 21.0, 22.0, 24.0, 25.0, 26.0, 29.0, 30.0]\nassert     round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) == [5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0]\nassert     round_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0]) == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nassert     round_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -10.0]) == [-5.0, -6.0, -7.0, -8.0, -9.0, -10.0, -11.0, -12.0, -13.0, -14.0]\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     round_and_sum([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == -0.1\nassert     round_and_sum([4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == -0.5\nassert     round_and_sum([10, 10, 10]) == 0.0\nassert     round_and_sum([4, 8, 12, 15, 20, 24, 28, 33, 36, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 0.0\nassert     round_and_sum([5, 5, 5]) == 0.0\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     round_and_sum([1.34, 2.5, 3.1]) == 4.6\nassert     round_and_sum([2.5]) == 2.5\nassert     round_and_sum([1.23, 2.12]) == 3.14\nassert     round_and_sum([1.23, 2.34, 3.55]) == 4.67\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6]) == 16.25\nassert     round_and_sum([-1, 2, 3, 4, 5, 6, 7, 8, 9]) == 150\nassert     round_and_sum([-2.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == 170\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     round_and_sum([1.0, 1.5, 2.0, 2.5]) == 7.0\nassert     round_and_sum([1.1, 1.5, 2.0, 2.5]) == 7.5\nassert     round_and_sum([1.0, 1.5, 2.0, 2.5, 2.9]) == 8.5\nassert     round_and_sum([1.1, 1.5, 2.0, 2.5, 2.9]) == 8.5\nassert     round_and_sum([1.0, 1.5, 2.0, 2.5, 2.9, 3.0]) == 9.5\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     round_and_sum([2.8, 4.7]) == 55\nassert     round_and_sum([-2.8, 4.7]) == -55\nassert     round_and_sum([2.8, -4.7]) == -55\nassert     round_and_sum([2.8, 4.7, -3.5]) == -38\nassert     round_and_sum([]) == 0\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     round_and_sum([1.123, 1.234, 1.345, 1.456]) ==     [1.123, 2.123, 3.123, 4.123]\nassert     round_and_sum([1.123, 1.234, 1.345, 1.456, 1.567, 1.678, 1.789]) ==     [1.123, 2.123, 3.123, 4.123, 5.123, 6.123, 7.123]\nassert     round_and_sum([1.123, 1.234, 1.345, 1.456, 1.567, 1.678, 1.789, 1.0]) ==     [1.123, 2.123, 3.123, 4.123, 5.123, 6.123, 7.123, 8.123]\nassert     round_and_sum([1.123, 1.234, 1.345, 1.456, 1.567, 1.678, 1.789, 1.0, 0.0]) ==     [1.123, 2.123, 3.123, 4.123, 5.123, 6.123, 7.123, 8.123, 9.123]\nassert     round_and_sum([0.0, 1.123, 1.234, 1.345, 1.456, 1.567, 1.678, 1.789, 1.0]) ==     [1.123, 2.123, 3.123, 4.123, 5.123, 6.123, 7.123, 8.123, 9.123]\n"
    },
    {
        "number": 419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     round_and_sum([1.1, 2.3, 3.5, 4.6, 5.7, 6.9]) == 11.8\nassert     round_and_sum([3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265]) == 14.0\nassert     round_and_sum([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]) == 0.0\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (cube_Sum(1) == 0)\nassert     (cube_Sum(2) == 60)\nassert     (cube_Sum(3) == 297)\nassert     (cube_Sum(4) == 784)\nassert     (cube_Sum(5) == 1215)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 216\nassert     cube_Sum(5) == 725\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cube_Sum(0) == 0\nassert     cube_Sum(1) == 12\nassert     cube_Sum(2) == 60\nassert     cube_Sum(3) == 504\nassert     cube_Sum(4) == 7200\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (cube_Sum(1) == 0)\nassert     (cube_Sum(2) == 3)\nassert     (cube_Sum(3) == 9)\nassert     (cube_Sum(4) == 36)\nassert     (cube_Sum(5) == 225)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (cube_Sum(3) == 150)\nassert     (cube_Sum(5) == 1500)\nassert     (cube_Sum(10) == 2310600)\nassert     (cube_Sum(11) == 2311700)\nassert     (cube_Sum(100) == 26640000)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     cube_Sum(2) == 12\nassert     cube_Sum(3) == 60\nassert     cube_Sum(4) == 220\nassert     cube_Sum(5) == 440\nassert     cube_Sum(6) == 1224\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (cube_Sum(3) == 216)\nassert     (cube_Sum(10) == 864)\nassert     (cube_Sum(100) == 84729)\n\ndef square_Sum(n): \n    '''\n    Write a python function to find the square sum of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (cube_Sum(1) == 0)\nassert     (cube_Sum(2) == 1)\nassert     (cube_Sum(3) == 3)\nassert     (cube_Sum(4) == 6)\nassert     (cube_Sum(5) == 15)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (cube_Sum(5) == 754)\nassert     (cube_Sum(7) == 836127)\nassert     (cube_Sum(10) == 62850550)\nassert     (cube_Sum(15) == 12796508606)\nassert     (cube_Sum(20) == 217818355267198)\n"
    },
    {
        "number": 420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate_tuple(('1', '2', '3')) == '1,2,3'\nassert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c'\nassert     concatenate_tuple(('1', '2')) == '1,2'\nassert     concatenate_tuple(('1', '2', '3')) == '1,2,3'\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     concatenate_tuple((\"This\", \"is\", \"a\", \"tuple\"))     ==    \"This-is-a-tuple\"\nassert     concatenate_tuple((\"This\", \"is\", \"a\", \"tuple\", \"with\", \"delimiter\", \".\"))     ==    \"This-is-a-tuple-with-delimiter-.\"\nassert     concatenate_tuple((\"This\", \"is\", \"a\", \"tuple\", \"with\", \"delimiter\", \".\"))     ==    \"This-is-a-tuple-with-delimiter-.\"\nassert     concatenate_tuple((\"This\", \"is\", \"a\", \"tuple\", \"with\", \"delimiter\", \".\"))     ==    \"This-is-a-tuple-with-delimiter-.\"\nassert     concatenate_tuple((\"This\", \"is\", \"a\", \"tuple\", \"with\", \"delimiter\", \".\"))     ==    \"This-is-a-tuple-with-delimiter-.\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (\n            concatenate_tuple(\n                ((1,2),(3,4),(5,6),(7,8),(9,10))\n            ) ==\n            (\n                '1,2,3,4,5,6,7,8,9,10'\n            )\n        )\n\ndef is_palindrome(test_str):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    A palindrome is a string that reads the same forward and backward.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     concatenate_tuple(('hello', 'world', 'tom')) == 'hello,world,tom', 'True'\nassert     concatenate_tuple(('hello', 'world', 'tom', 'um')) == 'hello,world,tom,um', 'True'\nassert     concatenate_tuple(('hello', 'world', 'tom', 'um', 'how')) == 'hello,world,tom,um,how', 'True'\nassert     concatenate_tuple(('hello', 'world', 'tom', 'um', 'how', '?')) == 'hello,world,tom,um,how,?', 'True'\n\n\ndef concatenate_list(test_list):\n    '''\n    Write a function to concatenate each element of list by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     concatenate_tuple((\"a\", \"b\", \"c\")) == \"abcc\"\nassert     concatenate_tuple((\"ab\", \"cd\", \"ef\")) == \"abcdef\"\nassert     concatenate_tuple((\"ab\", \"cd\", \"ef\", \"gh\")) == \"abcdefgh\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c', \"Incorrect result\"\nassert     concatenate_tuple(('1', '2', '3')) == '1,2,3', \"Incorrect result\"\nassert     concatenate_tuple(('Nairobi', 'Gulu', 'Mombasa')) == 'Nairobi,Gulu,Mombasa', \"Incorrect result\"\nassert     concatenate_tuple(('Nairobi', 'Gulu', 'Mombasa', 'Kisumu')) == 'Nairobi,Gulu,Mombasa,Kisumu', \"Incorrect result\"\nassert     concatenate_tuple(('Nairobi', 'Gulu', 'Mombasa', 'Kisumu', 'Nakuru')) == 'Nairobi,Gulu,Mombasa,Kisumu,Nakuru', \"Incorrect result\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     concatenate_tuple(()) == \"\"\nassert     concatenate_tuple((\"1\")) == \"1\"\nassert     concatenate_tuple((\"1\",)) == \"1\"\nassert     concatenate_tuple((\"1\", \"2\")) == \"12\"\nassert     concatenate_tuple((\"1\", \"2\", \"3\")) == \"123\"\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     concatenate_tuple(('aa','bb')) == 'aa,bb'\nassert     concatenate_tuple(('cc','dd')) == 'cc,dd'\nassert     concatenate_tuple(('ee','ff')) == 'ee,ff'\n"
    },
    {
        "number": 421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(test_tuple) == 'a, b, c, d, e'\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(3) == 1.0\nassert     find_Average_Of_Cube(4) == 1.25\nassert     find_Average_Of_Cube(5) == 1.5833333333333333\nassert     find_Average_Of_Cube(6) == 1.875\nassert     find_Average_Of_Cube(7) == 2.1904761904761905\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Average_Of_Cube(5)    ==    190\nassert     find_Average_Of_Cube(10)    ==    5990\nassert     find_Average_Of_Cube(20)    ==    147000\nassert     find_Average_Of_Cube(100)    ==    94678250\nassert     find_Average_Of_Cube(1000)    ==    49158430\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Average_Of_Cube(10) == 141\nassert     find_Average_Of_Cube(11) == 294\nassert     find_Average_Of_Cube(12) == 672\nassert     find_Average_Of_Cube(13) == 1003\nassert     find_Average_Of_Cube(14) == 1551\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 7\nassert     find_Average_Of_Cube(3) == 27\nassert     find_Average_Of_Cube(4) == 64\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Average_Of_Cube(3) == 27\nassert     find_Average_Of_Cube(4) == 256\nassert     find_Average_Of_Cube(5) == 729\nassert     find_Average_Of_Cube(6) == 1764\nassert     find_Average_Of_Cube(7) == 3152\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Average_Of_Cube(0) == 0\nassert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(3) == 27\nassert     find_Average_Of_Cube(4) == 256\nassert     find_Average_Of_Cube(5) == 905\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(1)    ==    1\nassert     find_Average_Of_Cube(2)    ==    8\nassert     find_Average_Of_Cube(5)    ==    144\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Average_Of_Cube(1) == 1.0, \"Test 1 failed\"\nassert     find_Average_Of_Cube(2) == 8.0, \"Test 2 failed\"\nassert     find_Average_Of_Cube(3) == 27.0, \"Test 3 failed\"\nassert     find_Average_Of_Cube(4) == 64.0, \"Test 4 failed\"\nassert     find_Average_Of_Cube(5) == 125.0, \"Test 5 failed\"\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (find_Average_Of_Cube(3) == 3)\nassert     (find_Average_Of_Cube(4) == 7)\nassert     (find_Average_Of_Cube(5) == 10)\nassert     (find_Average_Of_Cube(6) == 15)\nassert     (find_Average_Of_Cube(7) == 21)\n"
    },
    {
        "number": 422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (find_Average_Of_Cube(3) == 2.8)\nassert     (find_Average_Of_Cube(10) == 45.0)\n\ndef find_Average_Of_Cube_2(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([ i**3 for i in range(1,n+1)]) / n\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_rear('apple') == ['e']\nassert     extract_rear('banana') == ['a', 'n']\nassert     extract_rear(('apple', 'banana', 'cucumber')) == ['e', 'a', 'n']\nassert     extract_rear(('', '', 'chocolate')) == ['c', 'h', 'o', 't']\nassert     extract_rear(('apple', 'banana', 'chocolate')) == ['a', 'b', 'c', 'h', 'o', 't']\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         extract_rear(('all', 'a', 'good','movies')) == ('m','movies')\nassert         extract_rear(('one', 'is', 'great', 'test')) == ('t', 'test')\nassert         extract_rear(('', '', '', '')) == ('', '')\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_rear(('rear', 'front')) == ['e', 'a']\nassert     extract_rear(('front','rear')) == ['f', 'r']\nassert     extract_rear(('front', 'front')) == ['f', 'f']\nassert     extract_rear(('front', 'f', 'r')) == ['f', 'r']\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_rear((['E', 'x', 'v', 'e'], ['E', 'x', 'v', 'e'])) == [],'should be []'\nassert     extract_rear((['O', 'r','s', 'r'], ['O', 'r','s', 'r'], ['O', 'r','s', 'r'])) == ['O', 'r','s', 'r'],'should be [O, r, s, r]'\nassert     extract_rear((['X', 'x', 'X', 'x'], ['X', 'x', 'X', 'x'], ['X', 'x', 'X', 'x'])) == ['X', 'x', 'X', 'x'],'should be [X, x, X, x]'"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_rear(('p','r','o','g','r','a','m','i','z'))     ==    ('r','r','r','r','r','r','r','r')\nassert     extract_rear(('hello','world'))     ==    ('r','r')\nassert     extract_rear(('a','b','c','d','e'))     ==    ('r','r','r','r','r')"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_rear(('h', 'i','', 'j', 'k')) == ('j', 'k')\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('e',)\nassert     extract_rear(('z', 'y', 'x', 'w', 'v', 'u')) == ('v', 'u')\nassert     extract_rear(('p', 'q', 'r','s', 't', 'u')) == ('t', 'u')\nassert     extract_rear(('m', 'n', 'o', 'p', 'q', 'r','s')) == ('s',)\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_rear((2,4,3,5,6)) == (4,5,6)\nassert     extract_rear(('a', 'b', 'c', 'd')) == ('b', 'd')\nassert     extract_rear(('b', 'd', 'a')) == ('d', 'a')\nassert     extract_rear(('d', 'a', 'b')) == ('a', 'b')\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_rear(('hello', 'world', 'here', 'are', 'you', 'i', 'you')) == ('here', 'are', 'you', 'i')\nassert     extract_rear(('hello', 'world', 'here', 'are', 'you', 'i')) == ('here', 'are', 'you', 'i')\nassert     extract_rear(('hello', 'world', 'here', 'are', 'you')) == ('here', 'are', 'you', '')\nassert     extract_rear(('hello', 'world', 'here', 'are', 'you', 'i')) == ('here', 'are', 'you', 'i')\nassert     extract_rear(('hello', 'world', 'here', 'are', 'you', '', 'i')) == ('here', 'are', 'you', 'i')\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     extract_rear(('t','i','s','t','a','t','h','o','n')) == ('t','a','t','h','o','n',)\nassert     extract_rear(('t','a','t','h','o','n','t','i','s','t','a','t','h','o','n')) == ('t','a','t','h','o','n','t','i','s','t','a','t','h','o','n',)\n\ndef extract_all(test_tuple):\n    '''\n    Write a function to extract all the indices of the string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_rear(('hello', 'world')) == ('ld', 'or')\nassert     extract_rear(('hello', 'world', 'hello')) == ('l', 'o', 'o')\nassert     extract_rear(('hello', 'world', 'hello', 'world', 'hello')) == ('l', 'o', 'o', 'o', 'o')\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_element_in_list([1,2,3,4,5,6], 1) == 1\nassert     count_element_in_list([1,2,3,4,5,6], 2) == 2\nassert     count_element_in_list([1,2,3,4,5,6], 3) == 1\nassert     count_element_in_list([1,2,3,4,5,6], 4) == 1\nassert     count_element_in_list([1,2,3,4,5,6], 5) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_element_in_list([1, 2, 3, 4, 5], 2) == 2, \"the count of element 2 is not 2\"\nassert     count_element_in_list([1, 2, 3, 4, 5], 4) == 1, \"the count of element 4 is not 1\"\nassert     count_element_in_list([1, 2, 3, 4, 5], 5) == 0, \"the count of element 5 is not 0\"\nassert     count_element_in_list([1, 2, 3, 4, 5], 1) == 5, \"the count of element 1 is not 5\"\nassert     count_element_in_list([], 1) == 0, \"the count of element 1 is not 0\"\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_element_in_list([1,1,3,4,5,1,1], 1) == 3\nassert count_element_in_list([1,1,3,4,5,1,1], 2) == 0\nassert count_element_in_list([1,1,3,4,5,1,1], 3) == 1\nassert count_element_in_list([1,1,3,4,5,1,1], 4) == 0\nassert count_element_in_list([1,1,3,4,5,1,1], 5) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_element_in_list(['a', 'a', 'b'], 'a') == 3\nassert     count_element_in_list([], 'a') == 0\nassert     count_element_in_list(['a', 'a', 'a'], 'a') == 3\nassert     count_element_in_list(['a', 'a', 'a', 'a'], 'a') == 4\nassert     count_element_in_list(['a', 'a', 'a', 'a', 'a', 'a'], 'a') == 6\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_element_in_list([], 1) == 0\nassert     count_element_in_list([1, 2, 3], 1) == 0\nassert     count_element_in_list([1, 2, 3], 2) == 1\nassert     count_element_in_list([1, 2, 3], 3) == 2\nassert     count_element_in_list([1, 2, 3, 4], 1) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_element_in_list([1, 2, 3, 4, 5, 5, 5, 5, 5, 6, 5], 5) == 8\nassert     count_element_in_list([1, 1, 1, 1, 1, 1], 1) == 6\nassert     count_element_in_list([1, 2, 3, 4, 5], 5) == 1\nassert     count_element_in_list([1, 2, 3, 4, 5], 6) == 0\nassert     count_element_in_list([1, 2, 3, 4, 5], -1) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_element_in_list([0, 1, 2, 3, 4, 5], 3) == 3, 'Test 1'\nassert     count_element_in_list([-1, 1, 2, 3, 4, 5], 3) == 2, 'Test 2'\nassert     count_element_in_list([0, 1, 2, 3, 4, 5], 6) == 0, 'Test 3'\nassert     count_element_in_list([-1, 1, 2, 3, 4, 5], -1) == 6, 'Test 4'\nassert     count_element_in_list([], 3) == 0, 'Test 5'\n"
    },
    {
        "number": 425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_element_in_list([1,2,3,1], 1) == 2\nassert     count_element_in_list([1,2,3,1,2,3], 1) == 4\nassert     count_element_in_list([1,2,3,1,2,3], 2) == 2\nassert     count_element_in_list([1,2,3,1,2,3], 3) == 1\nassert     count_element_in_list([1,2,3,1,2,3], 4) == 0\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([0, 1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\nassert     filter_oddnumbers([-1, -2, -3, -4, -5, -6, -7]) == [-1, -3, -5, -7]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\nassert     filter_oddnumbers([-1, -2, -3, -4, -5, -6, -7]) == [-1, -3, -5, -7]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8]) == [1,3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, 0, 3, 5, 7, 9]\nassert     filter_oddnumbers([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -3, -5, -7, -9]\n\nprint \"filter_oddnumbers finished\"\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([1, 3, 5, 7]) == [1, 3, 5, 7]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\nassert     filter_oddnumbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7]\nassert     filter_oddnumbers([1, 3, 5, 7, 9, 11]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5], \"Fail on 1\"\nassert     filter_oddnumbers([2,4,6,8]) == [], \"Fail on 2\"\nassert     filter_oddnumbers([-1,-2,-3,-4,-5]) == [-1,-3,-5], \"Fail on 3\"\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef filter_oddnumbers2(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in nums:\n        if i % 2 == 0:\n            nums.remove(i)\n    return nums\n\nassert filter_oddnumbers2([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert filter_oddnumbers2([1, 3, 5, 7]) == [1, 3, 5, 7]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([2,4,6,8,10]) == [2, 4, 6, 8, 10]\nassert     filter_oddnumbers([1.5, 3, 4.5, 6.5, 8, 10]) == [1.5, 3.5, 4.5, 6.5, 8, 10]"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert     filter_oddnumbers([1, 2, 3, 4, 6]) == [1, 3, 5, 6]\nassert     filter_oddnumbers([2, 4, 6]) == [2, 4, 6]\nassert     filter_oddnumbers([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n"
    },
    {
        "number": 426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (filter_oddnumbers([1, 2, 3]) == [1, 3])\nassert     (filter_oddnumbers([0, 1, 2, 3]) == [0, 1, 3])\nassert     (filter_oddnumbers([1, 3, 5, 7]) == [1, 3, 5])\nassert     (filter_oddnumbers([]) == [])\nassert     (filter_oddnumbers([1,2,3,4,5]) == [])\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     change_date_format(\"2016-01-01\") == \"01-01-2016\"\nassert     change_date_format(\"2016-01-01 00:00:00\") == \"01-01-2016\"\nassert     change_date_format(\"2016-01-01 00:00:00.000000\") == \"01-01-2016\"\nassert     change_date_format(\"2016-01-01 00:00:00.000000000\") == \"01-01-2016\"\nassert     change_date_format(\"2016-01-01 00:00:00.0000000000\") == \"01-01-2016\"\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     change_date_format('2019-05-14') == '14-05-2019'\nassert     change_date_format('2012-11-12') == '12-11-2012'\nassert     change_date_format('2016-12-11') == '11-12-2016'\nassert     change_date_format('2013-07-15') == '15-07-2013'\nassert     change_date_format('2014-12-08') == '08-12-2014'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     change_date_format('2019-01-01') == '01-01-2019'\nassert     change_date_format('2019-01-29') == '29-01-2019'\nassert     change_date_format('2099-01-01') == '01-01-2099'\nassert     change_date_format('2099-01-30') == '30-01-2099'\nassert     change_date_format('2019-01-31') == '31-01-2019'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     change_date_format(\"2011-09-01\") == \"01-09-2011\"\nassert     change_date_format(\"2012-12-31\") == \"31-12-2012\"\nassert     change_date_format(\"1999-02-28\") == \"28-02-1999\"\nassert     change_date_format(\"2000-04-30\") == \"30-04-2000\"\nassert     change_date_format(\"2002-04-02\") == \"02-04-2002\"\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     'Date has to be a string like, 2015-01-09' == change_date_format('2015-01-09')\nassert     'Date has to be a string like, 2015-01-09' == change_date_format('2015-01-09')\nassert     'Date has to be a string like, 2015-01-09' == change_date_format('2015-01-09')\nassert     'Date has to be a string like, 2015-01-09' == change_date_format('2015-01-09')\nassert     'Date has to be a string like, 2015-01-09' == change_date_format('2015-01-09')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (change_date_format('1991-04-12') == '12-04-1991')\nassert     (change_date_format('1991-02-20') == '20-02-1991')\nassert     (change_date_format('2020-04-12') == '12-04-2020')\nassert     (change_date_format('2019-05-02') == '02-05-2019')\nassert     (change_date_format('1990-09-27') == '27-09-1990')\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     change_date_format(\n                '2000-01-01'\n                ) == '01-01-2000'\nassert     change_date_format(\n                '2000-01-02'\n                ) == '02-01-2000'\nassert     change_date_format(\n                '2000-01-03'\n                ) == '03-01-2000'\nassert     change_date_format(\n                '2000-01-04'\n                ) == '04-01-2000'\nassert     change_date_format(\n                '2000-01-05'\n                ) == '05-01-2000'\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     change_date_format('2016-10-30') == '30-10-2016'\nassert     change_date_format('2018-11-10') == '10-11-2018'\nassert     change_date_format('2014-10-30') == '30-10-2014'\n\ndef is_palindrome(s):\n    '''\n    Write a function to check if a given string is a palindrome.\n    A palindrome is a word, phrase, or sequence that reads the same backwards as forwards.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \ndef replace_all(text, dic):\n    '''\n    Write a function to replace all the items in a dictionary with other items in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     change_date_format(\"2016-08-08\") == \"08-08-2016\"\nassert     change_date_format(\"2016-08-08\") == \"08-08-2016\"\nassert     change_date_format(\"2016-8-8\") == \"8-8-2016\"\nassert     change_date_format(\"2016-8-8\") == \"8-8-2016\"\nassert     change_date_format(\"2017-01-01\") == \"01-01-2017\"\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     shell_sort(array) == sorted(array)\nassert     shell_sort([3, 1, 2, 6, 7, 8, 9]) == sorted([3, 1, 2, 6, 7, 8, 9])\nassert     shell_sort([3, 1, 2, 5, 4, 6, 8, 7]) == sorted([3, 1, 2, 5, 4, 6, 7, 8])\nassert     shell_sort([3, 2, 1]) == sorted([3, 2, 1])"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     shell_sort([1,2,3,4,5,6]) == [1,2,3,4,5,6], 'Failed: shell_sort'\nassert     shell_sort([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7], 'Failed: shell_sort'\nassert     shell_sort([1,3,2,6,5,4,7,9]) == [1,2,3,4,5,6,7,9], 'Failed: shell_sort'\nassert     shell_sort([1,3,2,6,5,4,7,9,0]) == [0,1,2,3,4,5,6,7,9], 'Failed: shell_sort'\nassert     shell_sort([0,1,2,3,4,5,6,7,9]) == [0,1,2,3,4,5,6,7,9], 'Failed: shell_sort'\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1,3,2,4] == shell_sort([1,3,2,4])\nassert     [1,2,3,4] == shell_sort([1,2,3,4])\nassert     [1,3,2,4] == shell_sort([1,3,2,4])\nassert     [1,2,3,4] == shell_sort([1,2,3,4])\nassert     [1,2,3,4] == shell_sort([1,2,3,4])\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1,2,3,4,5] == shell_sort([5,4,3,2,1])\nassert     [1,2,3,4,5] == shell_sort([5,4,3,2,1,7])\nassert     [5,4,3,2,1] == shell_sort([5,4,3,2,1,7,9,8])\nassert     [5,4,3,2,1,7,9,8] == shell_sort([5,4,3,2,1,7,9,8,11])\nassert     [5,4,3,2,1,7,9,8,11] == shell_sort([5,4,3,2,1,7,9,8,11,13])\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     shell_sort([10, 5, 2, 3, 4, 1]) == [1, 2, 3, 4, 5, 10]\nassert     shell_sort([10, -2, 5, 2, 3, 4, 1]) == [-2, -2, 1, 2, 3, 4, 10]\nassert     shell_sort([\"b\", \"a\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     shell_sort([]) == []\nassert     shell_sort([5, 3, 2, 4]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [2, 1, 4, 3, 5] == shell_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == shell_sort([5, 4, 3, 2, 1])\nassert     [5, 4, 3, 2, 1] == shell_sort([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5] == shell_sort([5, 4, 3, 2, 1])\nassert     [5, 4, 3, 2, 1] == shell_sort([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     shell_sort(my_list) == sorted(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     shell_sort([5,2,3,1,4]) == [1,2,3,4,5]\nassert     shell_sort([23,12,4,5,6,43,2,3,4,8,1,10,9]) == [1,2,3,4,5,6,8,9,10,12,23,43]\nassert     shell_sort([]) == []\nassert     shell_sort([-8,0,1,7,-3,8,5,6,2,10,5]) == [-8, -3, 0, 1, 2, 5, 5, 6, 7, 8, 10]\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     shell_sort([4, 2, 9, 6, 7, 5, 0, 8]) == [0, 2, 4, 5, 6, 7, 9, 8]\nassert shell_sort([2, 2, 2, 2]) == [2, 2, 2, 2]\nassert shell_sort([0, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 0]\nassert shell_sort([]) == []\nassert shell_sort([1]) == [1]\n"
    },
    {
        "number": 428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     shell_sort([1, 5, 3, 4, 2]) == [1, 2, 3, 4, 5], \"First\"\nassert     shell_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], \"Second\"\nassert     shell_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \"Third\"\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     and_tuples((1, 2), (2, 3))     == (2, 3)\nassert     and_tuples((1, 2), (3, 4))     == (0, 0)\nassert     and_tuples((0, 1), (0, 1))     == (0, 0)\nassert     and_tuples((1, 0), (0, 1))     == (1, 0)\nassert     and_tuples((1, 2), (3, 4))     == (1, 2)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     and_tuples((1,2,3), (4,5,6)) == (1,4,3,5,6)\nassert     and_tuples((1,2,3), (4,5,7)) == (1,4,7)\nassert     and_tuples((1,2,3), (4,5)) == (1,4,3,5)\nassert     and_tuples((1,2,3), (4,5,6,7)) == (1,4,6,7)\nassert     and_tuples((1,2), (4,5,6)) == (1,4,6)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     and_tuples(('hello', 3), ('hi', 4)) == ('h', 4)\nassert     and_tuples(('hello', 3), ('there', 4)) == ('hello', 4)\nassert     and_tuples(('hello', 3), ('there', 3)) == ('hello', 3)\nassert     and_tuples(('hello', 'there'), ('hi', 'there')) == ('hello', 'hi')\nassert     and_tuples(('hello', 'there'), ('hello', 'there')) == ('hello', 'hello')\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     and_tuples((2,3),(4,5)) == (2,3,4,5)\nassert     and_tuples((2,3),(4,6)) == (2,3,4,6)\nassert     and_tuples((2,4),(3,5)) == (2,4,3,5)\nassert     and_tuples((2,4),(3,6)) == (2,4,3,6)\nassert     and_tuples((2,5),(3,6)) == (2,5,3,6)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (5,7)    == and_tuples((5,7),(6,8))\nassert     (6,8)    == and_tuples((5,7),(6,8))\nassert     (5,8)    == and_tuples((5,7),(6,8))\nassert     ((5,7),(6,8)) == and_tuples((5,7),(6,8))\nassert     (5,6)    == and_tuples((5,7),(6,8))\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         and_tuples((1, 2), (2, 3)) == (1, 2)\nassert         and_tuples((1, 2), (3, 4)) == (None, None)\nassert         and_tuples((1, 2, 3, 4, 5, 6), (2, 3)) == (1, 2)\nassert         and_tuples((1, 2), (3, 4)) == (None, None)\nassert         and_tuples((1, 2, 3), (4, 5)) == (None, None)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     and_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\nassert     and_tuples((1, 2), (3, 4, 5)) == ((1, 3), (2, 4))\nassert     and_tuples((1, 2, 3), (4, 5)) == ((1, 4), (2, 5))\nassert     and_tuples((1, 2), (3, 4)) == ((1, 3), (2, 4))\nassert     and_tuples((), ()) == ()\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         and_tuples((1,2,3,4),(2,3,4,5)) == (1,2,2,3)\nassert         and_tuples((1,2,3,4),(2,3,4,5,6)) == (1,2,3,5)\nassert         and_tuples((1,2,3,4),(5,6,7,8)) == (1,2,3,4)\nassert         and_tuples((1,2,3,4),(5,6,7,8,9,10,11)) == (1,2,3,4,5,6,7,8,9,10)\nassert         and_tuples((1,2,3,4,5,6),(2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7)\n"
    },
    {
        "number": 429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     and_tuples((1, 2, 3), (1, 2, 3)) ==     ((1, 2, 3), (1, 2, 3))\nassert     and_tuples((1, 2, 3), (1, 2, 4)) ==     ((1, 2, 3), (1, 2, 4))\nassert     and_tuples((1, 2, 3), (3, 4, 5)) ==     ((1, 2, 3), (3, 4, 5))\nassert     and_tuples((1, 2, 3), (4, 5, 6)) ==     ((1, 2, 3), (4, 5, 6))\nassert     and_tuples((4, 5, 6), (1, 2, 3)) ==     ((4, 5, 6), (1, 2, 3))\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (parabola_directrix(2, 3, 1) == -1.0), \"The result is incorrect\"\nassert     (parabola_directrix(10, 30, 15) == 2.5), \"The result is incorrect\"\nassert     (parabola_directrix(1, 1, 1) == -1.0), \"The result is incorrect\"\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parabola_directrix(1, 0, 2) == -1\nassert     parabola_directrix(-1, 2, -7) == -1\nassert     parabola_directrix(1, -2, -4) == -2\nassert     parabola_directrix(0, -4, 4) == -2\nassert     parabola_directrix(1, 4, -4) == -2\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parabola_directrix(2, 0, 1) == None, 'parabola_directrix(2, 0, 1) should be None'\nassert     parabola_directrix(1, -2, 2) == (1, -1), 'parabola_directrix(1, -2, 2) should be (1, -1)'\nassert     parabola_directrix(1, 2, 2) == None, 'parabola_directrix(1, 2, 2) should be None'\nassert     parabola_directrix(1, 2, 1) == (1, -2), 'parabola_directrix(1, 2, 1) should be (1, -2)'\nassert     parabola_directrix(1, 0, 1) == (1, 0), 'parabola_directrix(1, 0, 1) should be (1, 0)'\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parabola_directrix(2, 3, -8) == (2, -1)\nassert     parabola_directrix(3, 4, -11) == (1.5, -2.5)\nassert     parabola_directrix(1, 1, -4) == (0, -1)\nassert     parabola_directrix(2, 2, -5) == (-1, -1)\nassert     parabola_directrix(1, -1, -4) == (0, 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parabola_directrix(1, 0, -4) == (0.0, -2.0)\nassert     parabola_directrix(-2, -2, 1) == (0.0, -1.0)\nassert     parabola_directrix(-2, -2, -1) == (0.0, -2.0)\nassert     parabola_directrix(1, 2, 1) == (0.0, -1.0)\nassert     parabola_directrix(1, 2, -1) == (0.0, 1.0)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef parabola_vertex(a, b, c, d): \n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parabola_directrix(3,4,-1) == (0, -2)\nassert     parabola_directrix(0,0,0) == (0, 0)\nassert     parabola_directrix(0,0,2) == (0, 0)\nassert     parabola_directrix(3,4,-4) == (0, -2)\nassert     parabola_directrix(0,0,0) == (0, 0)\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef parabola_perpendicular_line(a, b, c, d): \n    '''\n    Write a function to find the perpendicular line of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common_element([1, 2, 3, 4], [5, 6, 7, 8]) == True\nassert     common_element([1, 2, 3, 4], [5, 6, 7, 8, 9]) == False\nassert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == True\nassert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11]) == False\nassert     common_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False\nassert     common_element([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True\nassert     common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n\n\n\ndef check_prime(n):\n    '''\n    Write a function that takes a positive integer n and returns True if n is prime and False if it is not.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\nassert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == True\nassert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 11]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common_element([1,2,3,4,5], [4,5,6,7,8]) == False\nassert     common_element([1,2,3,4,5], [4,5,7,8,9]) == True\nassert     common_element([1,2,3,4,5], [4,6,7,8,9]) == False\nassert     common_element([1,2,3,4,5], [4,5,6,7,8]) == True\nassert     common_element([1,2,3,4,5], [1,2,3,4,5]) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common_element(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e'])\nassert     common_element(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c'])\nassert     not common_element(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e'])\nassert     not common_element(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\nassert     not common_element(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f'])\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common_element([1,2,3,4,5], [2,3,4,5,6]) == True\nassert     common_element([1,2,3,4,5], [2,3,6,7,8]) == False\nassert     common_element([0,1,2,3,4,5,6,7], [0,1,2,3,4,5,6,7]) == True\nassert     common_element([0,1,2,3,4,5,6,7], [0,1,2,3,4,5,6,7]) == True\nassert     common_element([0,1,2,3,4,5,6,7], [8,9,10,11,12,13,14,15]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common_element([], [1]) == False\nassert     common_element([1, 2, 3], []) == False\nassert     common_element([1, 2, 3], [1, 2, 3]) == True\nassert     common_element([1, 2, 3], [4, 5, 6]) == False\nassert     common_element([4, 5, 6], [1, 2, 3]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef dict_count(dict1, dict2):\n    '''\n    Write a function that takes two dictionaries and returns the number of the keys that are shared by both dicts.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common_element([1, 2, 3], [2, 4, 5]) == True\nassert     common_element([1, 2, 3, 4], [2, 4, 5]) == False\nassert     common_element([1, 2, 3, 4], [2]) == True\nassert     common_element([1, 2, 3, 4], []) == False\nassert     common_element([], [2]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     common_element([1, 2, 3], [1, 2, 4]) == False\nassert     common_element([1, 2, 3], [2, 3, 4]) == True\nassert     common_element([1, 3, 4], [2, 3, 4]) == True\nassert     common_element([1, 2, 3], [2, 3, 4]) == True\nassert     common_element([1, 3, 4], [2, 3, 4]) == True\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     median_trapezium(2,5,3) == 2.5, 'Incorrect result for median_trapezium'\nassert     median_trapezium(2,5,4) == 3, 'Incorrect result for median_trapezium'\nassert     median_trapezium(2,5,5) == 4, 'Incorrect result for median_trapezium'\nassert     median_trapezium(2,5,6) == 4.5, 'Incorrect result for median_trapezium'\nassert     median_trapezium(2,5,7) == 4.5, 'Incorrect result for median_trapezium'\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         median_trapezium(1,2,3) == 2\nassert         median_trapezium(1,2,3) == 2\nassert         median_trapezium(1,2,3) == 2\nassert         median_trapezium(1,2,3) == 2\nassert         median_trapezium(1,2,3) == 2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     median_trapezium(4,2,3) == 2.5\nassert     median_trapezium(2,7,3) == 5.0\nassert     median_trapezium(3,4,5) == 4.5\nassert     median_trapezium(3,5,2) == 3.5\nassert     median_trapezium(2,5,5) == 7.0\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median_trapezium(3,4,5) == 3.5\nassert     median_trapezium(3,4,6) == 4\nassert     median_trapezium(3,4,7) == 4.5\nassert     median_trapezium(3,4,8) == 5\nassert     median_trapezium(3,4,9) == 5.5\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     median_trapezium(1,2,3) == 1.5\nassert     median_trapezium(5,7,9) == 7.5\nassert     median_trapezium(3,8,10) == 7.5\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median_trapezium(3,4,5) == 4, \"incorrect\"\nassert     median_trapezium(4,7,8) == 5, \"incorrect\"\nassert     median_trapezium(3,10,5) == 5, \"incorrect\"\nassert     median_trapezium(1,6,2) == 3, \"incorrect\"\nassert     median_trapezium(1,1,1) == 1, \"incorrect\"\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     median_trapezium(1,1,1) == 1\nassert     median_trapezium(1,1,2) == 1.5\nassert     median_trapezium(1,2,1) == 1.5\nassert     median_trapezium(1,2,2) == 2\nassert     median_trapezium(2,1,1) == 2\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median_trapezium(1,2,2) == 3, \"Wrong\"\nassert     median_trapezium(2,1,2) == 3, \"Wrong\"\nassert     median_trapezium(1,2,3) == 3, \"Wrong\"\nassert     median_trapezium(2,3,1) == 3, \"Wrong\"\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     median_trapezium(1,2,3) == 1.5\nassert     median_trapezium(5,4,4) == 3.5\nassert     median_trapezium(2,2,5) == 3.5\nassert     median_trapezium(5,5,10) == 7.5\nassert     median_trapezium(3,3,3) == 3\n"
    },
    {
        "number": 432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     median_trapezium(10,10,1) == 10\nassert     median_trapezium(1,2,3) == 1.5\nassert     median_trapezium(3,4,5) == 3\nassert     median_trapezium(1,1,1) == 1\nassert     median_trapezium(10,10,10) == 5\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\narr = [9,5,4,3,2]\nprint(check_greater(arr, 10))\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_greater([3, 7, 4], 5)\nassert     check_greater([1, 2, 3], 4)\nassert     check_greater([1], 2)\nassert     check_greater([3, 7, 4], 3)\nassert     check_greater([1, 2, 3], 1)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_greater([1,2,3,4,5], 1)\nassert     check_greater([1,2,3,4,5], 5)\nassert     check_greater([1,2,3,4,5], -1)\nassert     check_greater([1,2,3,4,5], -5)\nassert     check_greater([1,2,3,4,5], 6)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_greater([1,2,3,4,5],6) == False\nassert     check_greater([1,2,3,4,5],4) == True\nassert     check_greater([1,2,3,4,5],3) == True\nassert     check_greater([1,2,3,4,5],1) == True\nassert     check_greater([1,2,3,4,5],0) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_greater([2, 1, 3], 2) is True\nassert     check_greater([2, 1, 3], 1) is True\nassert     check_greater([2, 1, 3], 3) is False\nassert     check_greater([2, 1, 3], -1) is False\nassert     check_greater([2, 1, 3], 0) is False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_greater([1,2,3], 4) is False\nassert     check_greater([1,2,3], 1) is True\nassert     check_greater([3,2,1], 1) is True\nassert     check_greater([3,2,1], 4) is False\nassert     check_greater([1,1,1], 1) is True\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_greater([3, 5, 6, 7, 8, 9], 8)\nassert     check_greater([3, 5, 6, 7, 8, 9], 3)\nassert     check_greater([3, 5, 6, 7, 8, 9], 2)\nassert     check_greater([3, 5, 6, 7, 8, 9], 9)\nassert     check_greater([3, 5, 6, 7, 8, 9], 10)\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_greater([1,2,3,4,5],4) == True\nassert     check_greater([1,2,3,4,5],5) == True\nassert     check_greater([1,2,3,4,5],1) == False\nassert     check_greater([1,2,3,4,5],6) == False\nassert     check_greater([],5) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_greater([3, 5, 7, 10, 15], 8) == False, \"Failed: check_greater([3, 5, 7, 10, 15], 8) == False\"\nassert     check_greater([2, 4, 6, 8, 10], 3) == True, \"Failed: check_greater([2, 4, 6, 8, 10], 3) == True\"\n"
    },
    {
        "number": 433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_greater([1,2,3,4,5], 6) == True\nassert     check_greater([1,2,3,4,5], 1) == True\nassert     check_greater([1,2,3,4,5], 5) == True\nassert     check_greater([1,2,3,4,5], 0) == False\nassert     check_greater([1,2,3,4,5], 4) == False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_one(\"atabab\") == False, \"Failed\"\nassert     text_match_one(\"tabab\") == True, \"Failed\"\nassert     text_match_one(\"atabab\") == True, \"Failed\"\n\ndef text_match_all(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_one('ab') == False\nassert     text_match_one('a') == True\nassert     text_match_one('aab') == True\nassert     text_match_one('aabaa') == False\nassert     text_match_one('aba') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_one('a') == 'a'\nassert     text_match_one('aab') == 'aab'\nassert     text_match_one('aaab') == 'aaab'\nassert     text_match_one('abbb') == 'aabb'\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an abc followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_one(\"aabb\") == True\nassert     text_match_one(\"ab\") == False\nassert     text_match_one(\"a\") == False\nassert     text_match_one(\"\") == False\nassert     text_match_one(\"ab\") == True\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_one(\"abbb\") == True\nassert     text_match_one(\"abbbb\") == True\nassert     text_match_one(\"abbb\") == True\nassert     text_match_one(\"abb\") == False\nassert     text_match_one(\"a\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_one('ab') == 'a'\nassert     text_match_one('abc') == 'abc'\nassert     text_match_one('aab') == 'aab'\nassert     text_match_one('aabb') == 'aabb'\nassert     text_match_one('abab') == 'abab'\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_match_one('a') == True\nassert     text_match_one('abb') == True\nassert     text_match_one('aabb') == True\nassert     text_match_one('abbb') == False\nassert     text_match_one('abbbbbb') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     re.search('a[b]+', 'aabbbbb')\nassert     not re.search('a[b]+', 'bbbbbb')\nassert     not re.search('a[b]+', 'ab')\nassert     re.search('a[b]+', 'bb')\nassert     not re.search('a[b]+', 'aa')\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_one('abcab') == True\nassert     text_match_one('cabab') == False\nassert     text_match_one('bcabc') == True\nassert     text_match_one('bcbbbcc') == True\nassert     text_match_one('bbbbbbb') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_one(\"abb\")\nassert     text_match_one(\"aabbbbb\")\nassert     text_match_one(\"ababab\")\nassert     text_match_one(\"ba\")\nassert     text_match_one(\"abbbab\") == False\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         last_Digit(1234567890) == 8\nassert     last_Digit(12345678) == 0\nassert     last_Digit(987654321) == 1\nassert     last_Digit(123456789) == 0\nassert     last_Digit(9876543) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     last_Digit(12345) == 5\nassert     last_Digit(1020304050) == 0\nassert     last_Digit(123456) == 6\nassert     last_Digit(10) == 0\n\ndef num_Digits(n) :\n    '''\n    Write a python function to find the number of digits in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     last_Digit(999) == 9\nassert last_Digit(99) == 9\nassert last_Digit(1) == 1\nassert last_Digit(10) == 0\nassert last_Digit(11) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     last_Digit(10) == 1\nassert     last_Digit(100) == 0\nassert     last_Digit(12) == 2\nassert     last_Digit(1000) == 0\nassert     last_Digit(1234) == 3\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     last_Digit(123456789) == 8\nassert     last_Digit(987654321) == 1\nassert     last_Digit(-567) == -5\nassert     last_Digit(0) == 0\nassert     last_Digit(1) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     last_Digit(1) == 1\nassert     last_Digit(9) == 9\nassert     last_Digit(10) == 0\nassert     last_Digit(20) == 0\nassert     last_Digit(15) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     last_Digit(12345) == 5\nassert     last_Digit(123456) == 6\nassert     last_Digit(10) == 1\nassert     last_Digit(1000) == 0\nassert     last_Digit(1234) == 4\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     last_Digit(123) == 2\nassert     last_Digit(1234) == 4\nassert     last_Digit(12345) == 5\nassert     last_Digit(123456) == 6\nassert     last_Digit(1234567) == 7\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     last_Digit(123) == 3\nassert last_Digit(12) == 2\nassert last_Digit(0) == 0\nassert last_Digit(-123) == 3\nassert last_Digit(-12) == 2\n"
    },
    {
        "number": 435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     last_Digit(11) == 1\nassert     last_Digit(12) == 0\nassert     last_Digit(9873) == 3\nassert     last_Digit(111111111) == 1\nassert     last_Digit(122222222) == 2\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     neg_nos([10, -10, -20, 0, -20, -10, -10, -10, -10]) == [-10, -20, -10, -10]\nassert     neg_nos([-2, -3, -4, -5, -5, -1, -6, -7]) == [-2, -3, -4, -5, -5, -1, -6, -7]\nassert     neg_nos([-2, -3, -4, -5, -5, -1, -6, -7]) == [-2, -3, -4, -5, -5, -1, -6, -7]\n\ndef list_of_integers(list1):\n    '''\n    Write a python function to return the list of integers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     neg_nos([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert neg_nos([]) == []\nassert neg_nos([1, 2, 3]) == [-1, -2, -3]\nassert neg_nos([1, -2, 3, -4, 5]) == [-1, -2, -3, -4, 5]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     neg_nos([1,-2,-3,-4,5,6]) == [-2,-4]\nassert     neg_nos([-1,-2,3,4,5,-6]) == [-1,-2,3,4]\nassert     neg_nos([]) == []\n\ndef get_odds(list1):\n    '''\n    Write a python function to return the odd numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     neg_nos([5,2,-3,-8]) == [-5,-2,-3,-8]\nassert     neg_nos([5,2,3,-4]) == [-5,-2,-3,-4]\nassert     neg_nos([5,2,-3,2]) == [-5,-2,-3]\nassert     neg_nos([-5,2,-3,2]) == [5,-2,-3,2]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     neg_nos([-1,0,5,-7,8]) == [0,-1,5,-7,8]\nassert     neg_nos([1,1,3,4,5,-3,-2,-5,10,-12,5,1,1,2,3,4,5,6,7,8]) == [1,-1,3,-4,5,-3,-2,-5,10,-12,5,1,-1,-2,-3,-4,-5,-6,-7,-8]\nassert     neg_nos([1,2,3,4,5,6]) == [-1,-2,-3,-4,-5,-6]\nassert     neg_nos([-1,-2,-3,-4,-5,-6]) == [1,2,3,4,5,6]\nassert     neg_nos([-1,0,5,-7,8]) == [0,-1,5,-7,8]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     neg_nos([-1, 0, 1]) == [-1, -1]\nassert     neg_nos([1, 2, 3, 4, 5]) == [-1, -1, -1, -1, -1]\nassert     neg_nos([-4, -3, -2, -1]) == [-4, -3, -2, -1]\nassert     neg_nos([-5, -6]) == [-5, -6]\nassert     neg_nos([-100, 0, 100]) == [-100, -100]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     neg_nos([-1, 1, 2, 3, -8, -9]) == [1, -1, 2, -3, -8]\nassert     neg_nos([-1, -1, 2, -3, -8, -9]) == [-1, -1, 2, -3, -8]\nassert     neg_nos([-1, 1, 2, 3, -8, -9]) == []\nassert     neg_nos([-1, -1, 2, -3, -8, -9]) == [-1, -1, -2, -3, -8]\nassert     neg_nos([]) == []\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     neg_nos([1,-2,-4]) == [-2,-4]\nassert     neg_nos([-2,2,-4,8]) == [-2,-4]\nassert     neg_nos([]) == []\nassert     neg_nos([-2,-4,8,2]) == [-2,-4]\nassert     neg_nos([1,2,3,-4,-5,6]) == [-4,-5,-6]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     neg_nos([-1, 0, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert     neg_nos([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert     neg_nos([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert     neg_nos([-1, 0, 2, 3, 4, 5, 6, 7, 8, 9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert     neg_nos([-1, 0, 2, -3, 4, 5, 6, 7, 8, 9]) == [-1, -2, -3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     neg_nos([-10, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [-10, -8, -7, -6, -5, -4, -3, -2, -1]\nassert     neg_nos([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert     neg_nos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\n\n\ndef swap_values(list1):\n    '''\n    Write a python function to swap values in a list.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         remove_odd('0011223344556677') == '0122233445'\nassert         remove_odd('123456789') == '12345678'\nassert         remove_odd('1234asfasf') == '123'\nassert         remove_odd('  a  asfasf   ') ==' a  '\nassert         remove_odd('  a  asfasf   ') ==' a  '\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_odd(\"abcd\") == \"bc\"\nassert     remove_odd(\"aaaa\") == \"\"\nassert     remove_odd(\"1234\") == \"\"\nassert     remove_odd(\"11234\") == \"112\"\nassert     remove_odd(\"11a2b\") == \"ab\"\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_odd(\"Hello world!\") == \"Hello worl\"\nassert     remove_odd(\"Hello world!\") == \"Hello world\"\nassert     remove_odd(\"Hello World\") == \"Hello World\"\nassert     remove_odd(\"Hello World!\") == \"Hello World\"\nassert     remove_odd(\"Hello World!  \") == \"Hello World\"\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_odd(\"Hello\") == \"Hll\"\nassert     remove_odd(\"Hi\") == \"H\"\nassert     remove_odd(\"   \") == \"\"\nassert     remove_odd(\"World\") == \"Wrd\"\nassert     remove_odd(\"\") == \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_odd(\"\") == \"\", \"Test 1\"\nassert     remove_odd(\"abracadabra\") == \"abracadab\", \"Test 2\"\nassert     remove_odd(\"DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\") == \"\", \"Test 3\"\nassert     remove_odd(\"asddddddasddasdasdasdasdasdasd\") == \"\", \"Test 4\"\nassert     remove_odd(\"abacaba\") == \"ab\", \"Test 5\"\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \ndef my_remove(str1):\n    str1_copy = ''\n    for i in str1:\n        if ord(i) % 2 == 0:\n            str1_copy = str1_copy + i\n    return str1_copy\nassert my_remove('8qDYqd') == '8DY'\nassert my_remove('7qDYqd') == '7DY'\nassert my_remove('8qDYqd') == '8DY'\nassert my_remove('8qDYqd') == '8DY'\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_odd('abc') == 'bc'\nassert     remove_odd('hello') == 'hll'\nassert     remove_odd('aabc') == 'abc'\nassert     remove_odd('abcdef') == 'def'\n\ndef remove_odd_2(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if ord(i)%2!= 0:\n            str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_odd('ab') == 'ab'\nassert     remove_odd('abc') == 'ab'\nassert     remove_odd('aabbccd') == 'abcd'\nassert     remove_odd('asdfghjkl') == 'asdfghjkl'\nassert     remove_odd('test') == 'test'\n"
    },
    {
        "number": 437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     'Python' == remove_odd('Python')\nassert     '%' == remove_odd('%')\nassert     '123' == remove_odd('123')\nassert     'a' == remove_odd('a')\nassert     '' == remove_odd('')\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_bidirectional(get_test_list()) == 3\nassert     count_bidirectional(get_test_list2()) == 3\n\ndef get_test_list():\n    '''\n    Make a list of tuples with no order.\n    '''\n    return [(3,1), (4,5), (5,7), (6,8), (1,1), (2,2), (2,2)]\n\ndef get_test_list2():\n    '''\n    Make a list of tuples with no order.\n    '''\n    return [(2,1), (4,5), (5,7), (6,8), (1,1), (2,2), (2,2)]\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_bidirectional([\n                (1,2),\n                (2,3),\n                (3,4),\n                (4,5),\n                (5,6),\n                (6,7),\n                (7,8),\n                (8,9),\n                (9,10),\n                (10,11),\n                (11,12),\n                (12,13),\n                (13,14),\n                (14,15),\n                (15,16)\n                ]) == 16\n\nprint(\"all tests passed\")"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_bidirectional([(1, 2), (3, 4), (1, 3), (2, 3), (1, 2), (2, 3), (1, 3)]) == 6\nassert     count_bidirectional([(1, 2), (3, 4), (1, 3), (2, 3)]) == 4\nassert     count_bidirectional([(1, 2), (3, 4), (1, 3), (2, 3), (1, 2)]) == 3\nassert     count_bidirectional([(1, 2), (3, 4), (1, 3), (2, 3), (1, 2), (2, 3)]) == 6\nassert     count_bidirectional([(1, 2), (3, 4), (1, 3), (2, 3), (1, 2), (2, 3), (1, 3)]) == 8\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_bidirectional([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]) == 3\nassert     count_bidirectional([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]) == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_bidirectional(['(1, 2)', '(1, 3)', '(1, 4)', '(2, 3)', '(2, 4)', '(3, 4)']) == 2\nassert     count_bidirectional(['(1, 2)', '(1, 3)', '(1, 4)', '(2, 3)', '(2, 4)', '(3, 4)']) == 4\nassert     count_bidirectional(['(1, 2)', '(1, 3)', '(1, 4)', '(2, 3)', '(2, 4)', '(3, 4)']) == 6\nassert     count_bidirectional(['(1, 2)', '(1, 3)', '(1, 4)', '(2, 3)', '(2, 4)', '(3, 4)']) == 6\nassert     count_bidirectional(['(1, 2)', '(1, 3)', '(1, 4)', '(2, 3)', '(2, 4)', '(3, 4)', '(3, 2)', '(4, 2)']) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_bidirectional(\n    [(1,1),(2,2),(3,3),(3,4),(4,5),(4,5),(5,6),(6,7),(7,8),(8,9)]) == 2, \"2\"\nassert     count_bidirectional(\n    [(1,1),(2,2),(3,3),(3,4),(4,5),(4,5),(5,6),(6,7),(7,8),(8,9),(1,9),(9,1),(9,3),(9,4),(9,5),(9,6),(9,7)]) == 8, \"8\"\nassert     count_bidirectional(\n    [(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(1,8),(1,9),(2,9),(3,9),(4,9),(5,9),(6,9),(7,9),(8,9),(9,9)]) == 3, \"3\"\nassert     count_bidirectional(\n    [(1,1),(2,2),(3,3),(3,4),(4,5),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]) == 0, \"0\"\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_bidirectional([('Alice', 'Bob'), ('Bob', 'Eve'), ('Eve', 'Alice')]) == 2\nassert     count_bidirectional([('Alice', 'Bob'), ('Bob', 'Eve'), ('Eve', 'Eve')]) == 1\nassert     count_bidirectional([('Alice', 'Eve'), ('Eve', 'Eve')]) == 0\nassert     count_bidirectional([('Eve', 'Eve')]) == 0\nassert     count_bidirectional([('Eve', 'Alice')]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (count_bidirectional([('a', 'b'), ('c', 'd'), ('e', 'f')]) == 2)\nassert     (count_bidirectional([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j'), ('k', 'l'), ('m', 'n')]) == 6)\nassert     (count_bidirectional([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j'), ('k', 'l'), ('m', 'n'), ('o', 'p'), ('q', 'r'), ('s', 't')]) == 10)\nassert     (count_bidirectional([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j'), ('k', 'l'), ('m', 'n'), ('o', 'p'), ('q', 'r'), ('s', 't'), ('u', 'v'), ('w', 'x'), ('y', 'z')]) == 26)\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         count_bidirectional([1,1,2,3,2,3,1,1,4,5]) == 6\nassert         count_bidirectional([1,2,2,2,1]) == 5\nassert         count_bidirectional([1,1,2,2,2,2,1]) == 6\nassert         count_bidirectional([1,1,2,2,2,3,1]) == 3\nassert         count_bidirectional([1,2,3,4,5,6,7,8,9]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_bidirectional([('a', 'b'), ('b', 'a')]) == 2\nassert     count_bidirectional([('a', 'b'), ('c', 'd'), ('d', 'c')]) == 2\nassert     count_bidirectional([('a', 'b'), ('c', 'd'), ('e', 'f'), ('f', 'e')]) == 2\nassert     count_bidirectional([('a', 'b'), ('b', 'a'), ('c', 'd'), ('d', 'c')]) == 3\nassert     count_bidirectional([('a', 'b'), ('b', 'a'), ('c', 'd'), ('d', 'c'), ('e', 'f'), ('f', 'e')]) == 3\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6\nassert     multiple_to_single([1, 2, 3, 4]) == 10\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([0]) == 0\nassert     multiple_to_single([-1, -2, -3]) == -6\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiple_to_single([-10,-7,-1,0,1,3,4,5,7,9,10,11,12,13,14,15]) == -10212609\nassert     multiple_to_single([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]) == -9876543210\n\n\ndef double_for_loop(L):\n    '''\n    Write a function that takes a list of integers as input and returns a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 1234\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 12345\nassert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 123456\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([1, 2, 3, 4, 5, 6, 7]) == 1234567\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 123456\nassert     multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 12345678900\nassert     multiple_to_single([9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 99999999999999\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([4,5,6]) == 45\nassert     multiple_to_single([7,8,9]) == 789\nassert     multiple_to_single([0]) == 0\nassert     multiple_to_single([-1,1]) == -11\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 123\nassert     multiple_to_single([2,3,4,5,6,7,8,9]) == 234\nassert     multiple_to_single([0,0,0,0,0]) == 0\nassert     multiple_to_single([]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 12345\nassert     multiple_to_single([6,7,8,9]) == 67890\nassert     multiple_to_single([0,0,0,0,0]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([1,2,3,4]) == 14\nassert     multiple_to_single([1,2,3,4,5]) == 120"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 1234\nassert     multiple_to_single([1,2,3,4,5,6,7]) == 1234567\nassert     multiple_to_single([10,20,30,40]) == 123400\n"
    },
    {
        "number": 439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 12345\nassert     multiple_to_single([9,9,9,9,9,9,9,9]) == 9999999999\nassert     multiple_to_single([9,9,9,9]) == 999999\nassert     multiple_to_single([9]) == 9\nassert     multiple_to_single([]) == 0\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_adverb_position('a very easy job') == [('very',0)]\nassert     find_adverb_position('an easy job') == [('easy',0)]\nassert     find_adverb_position('a job well done') == [('well',0)]\nassert     find_adverb_position('a job well done') == [('well',0)]\nassert     find_adverb_position('a job well done') == [('well',0)]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_adverb_position(\"This is a test case. It is the first test case.\")    ==     [(0, 'is'), (15, 'first'), (22, 'test'), (32, 'case')]\nassert     find_adverb_position(\"The quick brown fox jumped over the lazy dog.\") ==     [(0, 'the'), (10, 'quick'), (18, 'brown'), (26, 'fox'), (33, 'jumped'), (39, 'over'), (45, 'the'), (51, 'lazy'), (56, 'dog')]\nassert     find_adverb_position(\"The dog chased the cat.\") ==     [(0, 'the'), (7, 'dog'), (14, 'chased'), (22, 'cat')]\nassert     find_adverb_position(\"A test case of the quick brown fox jumped over the lazy dog.\") ==     [(0, 'A'), (16, 'test'), (23, 'of'), (29, 'quick'), (35, 'brown'), (40, 'fox'), (47, 'jumped'), (54, 'over'), (61, 'the'), (68, 'lazy'), (75, 'dog')]\nassert     find_adverb_position(\"The test case of the quick brown fox jumped over the lazy dog.\") ==     [(0, 'The'), (17, 'test'), (24, 'case'), (31, 'of'), (38, 'quick'), (43, 'brown'), (49, 'fox'), (56, 'jumped'), (62, 'over'), (69, 'lazy'), (76, 'dog')]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_adverb_position(\"Take my advice, and I'll open it at 10 a.m. This way\") == (0,0)\nassert     find_adverb_position(\"Open the lock at 18:00\") == (0,18)\nassert     find_adverb_position(\"Never give up\") == (0,0)\nassert     find_adverb_position(\"Take my advice, and I'll open it at 10 a.m. This way\") == (0,0)\nassert     find_adverb_position(\"I'll get back by 10 a.m.\") == (0,10)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_adverb_position(\"the quick brown fox jumps over the lazy dog\") == [(\"fox\", 1), (\"the\", 0), (\"quick\", 4)]\nassert     find_adverb_position(\"The quick brown fox jumps over the lazy dog\") == [(\"fox\", 1), (\"the\", 0), (\"quick\", 4)]\nassert     find_adverb_position(\"The quick brown fox jumps over the lazy dog\") == [(\"fox\", 1), (\"the\", 0), (\"quick\", 4)]\nassert     find_adverb_position(\"The quick fox jumps over the lazy dog\") == [(\"fox\", 1), (\"the\", 0), (\"quick\", 4)]\nassert     find_adverb_position(\"The quick fox jumps over the lazy dog\") == [(\"fox\", 1), (\"the\", 0), (\"quick\", 4)]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_adverb_position('The quick brown fox jumped over the lazy dog') == [(1, 'quick'), (6, 'brown'), (12, 'fox'), (18, 'jumped'), (22, 'over'), (28, 'lazy'), (32, 'dog')]\nassert     find_adverb_position('The quick brown over the lazy dog') == [(1, 'quick'), (6, 'brown'), (12, 'fox'), (18, 'jumped'), (22, 'over'), (28, 'lazy'), (32, 'dog')]\nassert     find_adverb_position('The quick brown under the lazy dog') == [(1, 'quick'), (6, 'brown'), (12, 'fox'), (18, 'jumped'), (22, 'over'), (28, 'lazy'), (32, 'dog')]\n\ndef find_word_position(text):\n    '''\n    Write a function to find the first word in a given sentence and its position.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_adverb_position(\"This is a good sentence.\") == [('good', 1, 4)]\nassert     find_adverb_position(\"This is a good sentence. There is a bad sentence.\") == [('good', 1, 5), ('bad', 19, 22)]\nassert     find_adverb_position(\"This is a bad sentence. There is a good sentence. Not bad.\") == [('good', 4, 7), ('bad', 19, 22)]\nassert     find_adverb_position(\"This is a bad sentence. There is a good sentence. Not bad. It is good.\") == [('good', 4, 7)]\nassert     find_adverb_position(\"This is a bad sentence. There is a good sentence. Not bad. It is good. It is good.\") == [('good', 4, 7)]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_adverb_position(\"Never odd or even\") == [('Even', 5), ('Odd', 1)]\nassert     find_adverb_position(\"Odd and Even\") == [('Even', 5), ('Odd', 1)]\nassert     find_adverb_position(\"Never odd or even\") == [('Even', 5), ('Odd', 1)]\nassert     find_adverb_position(\"Never odd or even\") == [('Even', 5), ('Odd', 1)]\nassert     find_adverb_position(\"Never odd or even\") == [('Even', 5), ('Odd', 1)]\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_adverb_position(\"That is the best day of the year.\") == [('is',1),('best',3),('day',8)]\nassert     find_adverb_position(\"I am very, very, very excited about this year.\") == [('very',10),('very',14),('very',18),('excited',23)]\nassert     find_adverb_position(\"This is the best day of the year.\") == [('is',1),('best',3),('day',8)]\nassert     find_adverb_position(\"I am very, very, very excited about this year.\") == [('very',10),('very',14),('very',18),('excited',23)]\n\ndef find_adverb_position_wrong(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_adverb_position('The cat sat on the mat.') == (1, 4)\nassert     find_adverb_position('The cat is sitting on the mat.') == (1, 5)\nassert     find_adverb_position('The cat sat on the mat. The dog is standing on the mat.') == (1, 4)\nassert     find_adverb_position('The cat is sitting on the mat. The dog is standing on the mat. The cat sat on the mat.') == (1, 4)\nassert     find_adverb_position('The cat is sitting on the mat. The dog is standing on the mat. The cat sat on the mat. The dog is sitting on the mat. The cat sat on the mat.') == (1, 4)\n"
    },
    {
        "number": 440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_adverb_position(\"I am very hungry\") == [('very', 0, 5)]\nassert     find_adverb_position(\"I am very, really hungry\") == [('very', 0, 5), ('really', 7, 11)]\nassert     find_adverb_position(\"I am very, really, really hungry\") == [('very', 0, 5), ('really', 7, 11)]\nassert     find_adverb_position(\"I am very, really, really hungry\") == [('very', 0, 5), ('really', 7, 11)]\nassert     find_adverb_position(\"I am very, really, really hungry\") == [('very', 0, 5), ('really', 7, 11)]\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(1)         == 6\nassert     surfacearea_cube(3)         == 54\nassert     surfacearea_cube(5)         == 150\nassert     surfacearea_cube(7)         == 216\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(3) == 54\nassert     surfacearea_cube(5) == 125\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     surfacearea_cube(3) == 27\nassert     surfacearea_cube(4) == 56\nassert     surfacearea_cube(5) == 125\nassert     surfacearea_cube(6) == 216\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     surfacearea_cube(1) == 6, 'Wrong answer for surfacearea_cube(1)'\nassert     surfacearea_cube(3) == 54, 'Wrong answer for surfacearea_cube(3)'\nassert     surfacearea_cube(5) == 108, 'Wrong answer for surfacearea_cube(5)'\nassert     surfacearea_cube(10) == 750, 'Wrong answer for surfacearea_cube(10)'\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(10) == 654\nassert     surfacearea_cube(4) == 216\nassert     surfacearea_cube(1) == 12\nassert     surfacearea_cube(0) == 0\nassert     surfacearea_cube(-5) == 0\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     surfacearea_cube(0) == 0\nassert     surfacearea_cube(1) == 12\nassert     surfacearea_cube(2) == 54\nassert     surfacearea_cube(3) == 216\nassert     surfacearea_cube(4) == 756\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(2) == 12\nassert     surfacearea_cube(3) == 24\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(1) == 12\nassert     surfacearea_cube(2) == 60\nassert     surfacearea_cube(3) == 216\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(2) == 12\nassert     surfacearea_cube(3) == 54\nassert     surfacearea_cube(4) == 108\nassert     surfacearea_cube(5) == 174\n"
    },
    {
        "number": 441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(2) == 12\nassert     surfacearea_cube(3) == 54\nassert     surfacearea_cube(4) == 240\nassert     surfacearea_cube(5) == 576\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     positive_count([1,2,3,4,5]) == 1.0/5.0\nassert     positive_count([1,1,1,1,1]) == 1.0/5.0\nassert     positive_count([1,-1,2,3,4]) == 1.0/5.0\nassert     positive_count([]) == 1.0\n\ndef remove_elements(nums, val):\n    '''\n    Write a function to remove all elements of a given value from an array.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     positive_count([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 0.75, positive_count([1,2,3,4,5,6,7,8,9,10,11,12,13])\nassert     positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]) == 0.75, positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13])\nassert     positive_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == 1, positive_count([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\nassert     positive_count([-100,-99,-98,-97,-96,-95,-94,-93,-92,-91,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-73,-72,-71,-70,-69,-68,-67,-66,-65,-64,-63,-62,-61,-60,-59,-58,-57,-56,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]) == 0.5, positive_count([-100,-99,-98,-97,-96,-95,-94,-93,-92,-91,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-73,-72,-71,-70,-69,-68,-67,-66,-65,-64,-63,-62,-61,-60,-59,-58,-57,-56,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1])\nassert     positive_count([]) == 0, positive_count([])\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     positive_count([-3,1,2,-3,-5,6,7,-6]) == [4/7,3/7]\nassert     positive_count([1,-2,3,-4,5,6,-7]) == [3/6,2/6]\nassert     positive_count([-3,-1,2,3,-5,6,7,-6]) == [3/7,2/7]\nassert     positive_count([1,2,3,4,5,-6,7]) == [1/3,2/3]\nassert     positive_count([-3,-1,2,-3,1,3,-5,6,7,-6]) == [1/3,2/3]\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     positive_count([1,2,3,-1,-1,4,5,6]) == 3/6\nassert     positive_count([-1,-1,1,1,1,1,1,1,1,1,-1,1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,1,1,1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,1,1,-1,-1,-1,1,1,1,1,-1,-1,1,-1,1,1,-1,-1,-1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     positive_count([1,2,3,4,5,6,7]) == 0.25\nassert     positive_count([1,2,3,4,5,0,-1,-2,-3,-4,-5,-6,-7,-8]) == 0.5\nassert     positive_count([-1,1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]) == 1\nassert     positive_count([]) == 0\nassert     positive_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 0.5\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     positive_count([1, -1, 1, -2]) == 1.0/3.0\nassert     positive_count([1, 2, -3]) == 0.0\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     positive_count([1,-3,4,5,-3,-1,4,5]) == 0.6\nassert     positive_count([1,-3,-1,-3,-1,4,5]) == 1.0\nassert     positive_count([1,-3,-1,0,1,0,1,0,-1,-3,-1,4,5,-3,-1,-1,4,5]) == 0.2\nassert     positive_count([1,-3,-1,-3,-1,-1,4,-5,-3,-1,4,5,-3,-1,-1,4,-5,-3,-1,-1,-1,-1]) == 1.0\nassert     positive_count([-1,-3,-1,0,1,0,1,0,-1,-3,-1,4,-5,-3,-1,-1,4,-5,-3,-1,-1,-1]) == 1.0\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     positive_count([1, 2, 3, 4, 5, 6]) == 0.5\nassert     positive_count([-1, -2, -3, -4, -5, -6]) == 0.5\nassert     positive_count([1, -2, 3, -4, 5, -6]) == 0.5\nassert     positive_count([1, -2, 3, -4, 5, -6, 0, -7, 8, -9]) == 0.5\nassert     positive_count([-1, -2, 3, -4, 5, -6, 0, -7, 8, -9, -10, -11]) == 0.5\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     positive_count([3,5,-6,8,2,-1,-2,1]) == 0.75\nassert     positive_count([3,5,-6,8,2,-1,-2,-1]) == 0.75\nassert     positive_count([3,5,-6,8,2,-1,-2,-1,-5,6,7,9]) == 0.5\nassert     positive_count([0,1,2,3,4]) == 0.5\nassert     positive_count([-1,2,3,-4,-5]) == 0.5\n"
    },
    {
        "number": 442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     positive_count([1, 2, 3, 4, 5, 6, -7, 8, -9]) == 0.25\nassert     positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.5\nassert     positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 1.0\nassert     positive_count([1, 2, 3, 4, 5, -6, 7, -8, -9]) == 0.125\nassert     positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0.375\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_neg([1,-2,3,-5,-7]) == -5, \"largest_neg([1,-2,3,-5,-7]) = %d\" % largest_neg([1,-2,3,-5,-7])\nassert     largest_neg([-2,-1]) == -1, \"largest_neg([-2,-1]) = %d\" % largest_neg([-2,-1])\nassert     largest_neg([1,-2,3,-4,-5,6,-7,-8,-9]) == -9, \"largest_neg([1,-2,3,-4,-5,6,-7,-8,-9]) = %d\" % largest_neg([1,-2,3,-4,-5,6,-7,-8,-9])\nassert     largest_neg([-5,-4,-3,-2,-1]) == -1, \"largest_neg([-5,-4,-3,-2,-1]) = %d\" % largest_neg([-5,-4,-3,-2,-1])\nassert     largest_neg([-2,-1,0,2,3,-4,-5,-6,-7]) == -1, \"largest_neg([-2,-1,0,2,3,-4,-5,-6,-7]) = %d\" % largest_neg([-2,-1,0,2,3,-4,-5,-6,-7])\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_neg([1, 2, 3, 4, 5, 6, 7, -8, -9]) == -9\nassert     largest_neg([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -9\nassert     largest_neg([-1, -2, -3, -4, -5, -6, -7, -8]) == -8\nassert     largest_neg([-1, -2, -3, -4, -5, -6, -7, -8, 0]) == -8\nassert     largest_neg([-1, -2, -3, -4, -5, -6, -7, -8, 9]) == -9\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_neg([]) == None\nassert     largest_neg([1, 2, 3, 4, 5, 6]) == -1\nassert     largest_neg([-1, 2, -3, 4, 5, 6]) == -1\nassert     largest_neg([-1, -2, -3, 4, 5, -6]) == -3\nassert     largest_neg([1, -2, -3, 4, 5, -6]) == -3\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_neg([0,2,3,4,5,6,-7,8,9,10,-11]) == -11\nassert     largest_neg([0,2,3,4,-5,6,-7,8,9,10,-11]) == -11\nassert     largest_neg([10,-2,3,4,-5,6,-7,8,9,10,-11]) == -11\nassert     largest_neg([-3,2,3,4,-5,6,-7,8,9,10,-11]) == -11\nassert     largest_neg([-3,-2,3,4,-5,6,-7,8,9,10,-11]) == -11\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_neg([1, -1, 2, -2, 3, 4, -6, -7]) == -7\nassert     largest_neg([-1, -3, -2, -2, -2, -2, -5, -6]) == -2\nassert     largest_neg([-5, -5, -5, -5, -5, -5, -5, -5]) == -5\nassert     largest_neg([4, 3, -2, -5, 0, -5, 5, 2, 3]) == -5\nassert     largest_neg([-2, 0, -1, -2, 0, 1]) == -2\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [-3, -4, -2, -1] == largest_neg([-3, -4, -2, -1])\nassert     [-6, -5, -4, -3] == largest_neg([-6, -5, -4, -3])\nassert     [-7, -8, -9, -10] == largest_neg([-7, -8, -9, -10])\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_neg([1,2,3,4,5]) == -5\nassert     largest_neg([1,-2,3,4,5]) == -2\nassert     largest_neg([1,2,3,-4,5]) == -4\nassert     largest_neg([1,-2,-3,-4,-5]) == -2\nassert     largest_neg([]) == None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_neg([2,-1,5,5,7]) == -1\nassert     largest_neg([2,1,5,-5,7]) == -1\nassert     largest_neg([2,1,-5,5,-7]) == -5\nassert     largest_neg([2,-1,-5,-5,-7]) == -1\nassert     largest_neg([]) == None\n"
    },
    {
        "number": 443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_neg([10, 0, -2, 7, 3, -9, 1, -4, 9]) == -9\nassert     largest_neg([0, 1, 2, -3, 4, -5]) == -5\nassert     largest_neg([-10, -5, -6, -3, -1, 0, 4, 8, 19]) == -1\nassert     largest_neg([-5, -4, -8, -9, 1, 2, 3, 4, 5]) == -5\nassert     largest_neg([-10, -5, -6, -3, -1, 0, 4, 8, 19]) == -1\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 2) == [\n                    (1,2,3),(4,5,6),(7,8,9)], \"fails the test\"\nassert     trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 3) == [\n                    (1,2,3),(4,5,6),(7,8,9)], \"fails the test\"\nassert     trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 0) == [], \"fails the test\"\nassert     trim_tuple([], 2) == [], \"fails the test\"\nassert     trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 1) == [(1,2,3),(4,5,6),(7,8,9)], \"fails the test\"\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         trim_tuple(\n                [(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6)],\n                2\n            ) ==\n            [(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6)]\nassert         trim_tuple(\n                [(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6)],\n                1\n            ) ==\n            [(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6)]\nassert         trim_tuple(\n                [(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6)],\n                3\n            ) ==\n            [(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4), (5, 5, 5), (6, 6, 6)]"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     trim_tuple(tuple_list_2, 3) == [\n                (0, 2, 3),\n                (1, 2, 3),\n                (1, 2, 3),\n                (2, 2, 3),\n                (2, 2, 3),\n                (2, 2, 3),\n                (3, 2, 3),\n                (3, 2, 3),\n                (3, 2, 3)\n            ]\n\nassert trim_tuple(tuple_list_1, 3) == [\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (3, 3, 3),\n                (3, 3, 3),\n                (3, 3, 3),\n                (3, 3, 3)\n            ]\n\nassert trim_tuple(tuple_list_3, 3) == [\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (0, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (1, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (2, 3, 3),\n                (3, 3, 3),\n                (3, 3, 3),\n                (3, 3, 3),\n                (3, 3, 3)\n            ]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     trim_tuple([(1,2),(3,4),(5,6),(7,8)], 1) == [\n            (1,2),(3,4),(5,6),(7,8)]\n\nassert     trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 3) == [(1,2,3),(7,8,9)]\n\nassert     trim_tuple([(1,2,3,4,5),(6,7,8,9,10)], 3) == [(1,2,3,4,5),(7,8,9,10)]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     trim_tuple([(1,2,3,4), (5,6,7,8), (9,10,11,12)], 2) == \\\n        [(1,2,3,4), (5,6,7,8), (9,10,11,12)]\nassert     trim_tuple([(1,2,3,4), (5,6,7,8), (9,10,11,12)], 3) == \\\n        [(1,2,3,4), (5,6,7,8), (9,10,11,12)]\nassert     trim_tuple([(1,2,3,4), (5,6,7,8), (9,10,11,12)], 4) == \\\n        [(1,2,3,4), (5,6,7,8), (9,10,11,12)]\nassert     trim_tuple([(1,2,3,4), (5,6,7,8), (9,10,11,12)], 1) == \\\n        [(1,2,3,4), (5,6,7,8), (9,10,11,12)]\nassert     trim_tuple([(1,2,3,4), (5,6,7,8), (9,10,11,12)], 0) == \\\n        [(1,2,3,4), (5,6,7,8), (9,10,11,12)]\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     trim_tuple([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9)], 1) == [\n                (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8), (7, 8, 9)], 'broken'\n"
    },
    {
        "number": 444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     index_multiplication((1,2,3),(2,2,3))     == [(1,4,9),(2,4,6),(3,6,9)]\nassert     index_multiplication((2,2,3),(1,2,3))     == [(2,4,6),(2,4,6),(2,4,6)]\nassert     index_multiplication((1,1,1,1,1,1,1),(1,1,1,1,1,1,1))     == [(1,7,14,23,30,36,39),(1,7,14,23,30,36,39),(1,7,14,23,30,36,39),(1,7,14,23,30,36,39),(1,7,14,23,30,36,39),(1,7,14,23,30,36,39),(1,7,14,23,30,36,39)]"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert ix_mult(('a', 'b', 'c'), ('a', 'b', 'c')) == True\nassert ix_mult(('a', 'b', 'c'), ('a', 'b', 'd')) == False\nassert ix_mult(('a', 'b', 'c'), ('c', 'b', 'a')) == False\nassert ix_mult(('a', 'a', 'a'), ('a', 'a', 'a')) == True\nassert ix_mult(('a', 'a', 'a'), ('b', 'b', 'b')) == False\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     index_multiplication((1, 2, 3), (2, 3, 4)) == (1, 4, 9)\nassert     index_multiplication((1, 2, 3), (1, 4, 5)) == (2, 8, 15)\nassert     index_multiplication((1, 2, 3), (1, 1, 5)) == (2, 4, 6)\nassert     index_multiplication((1, 2, 3), (1, 1, 5)) == (2, 4, 6)\nassert     index_multiplication((1, 2, 3), (2, 3, 4)) == (1, 4, 9)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     index_multiplication(('a',), ('b',)) == ('a', 'b')\nassert     index_multiplication((1, 2, 3), (2, 3, 4)) == (2, 6, 12)\nassert     index_multiplication((1, 2, 3), (3, 4, 5)) == (6, 8, 15)\nassert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (120, 240, 680, 1920)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     index_multiplication(test_tuple1, test_tuple2) == [1, 2, 3, 4, 8, 6, 4, 2]\nassert     index_multiplication(test_tuple3, test_tuple4) == [1, 2, 3, 4, 8, 9, 6, 3]\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     index_multiplication((1, 2, 3, 4), (1, 2, 3, 4)) == (2, 4, 6, 8)\nassert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 6, 7, 8)\nassert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8, 9, 10)) == (5, 6, 7, 8, 9, 10)\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (index_multiplication(('a', 'b'), (5, 4)) == (10, 16))\nassert     (index_multiplication(('A', 'b'), (5, 4)) == (50, 16))\nassert     (index_multiplication(('a', 'b'), ('a', 'b')) == ('aa', 'bb'))\nassert     (index_multiplication(('a', 'b'), ('c', 'd')) == ('c', 'd'))\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     index_multiplication((1, 2, 3), (2, 3, 4)) == (1, 4, 6)\nassert     index_multiplication((3, 4), (1, 2, 3)) == (3, 8, 9)\nassert     index_multiplication((1, 2, 3), (3, 4, 5)) == (3, 8, 15)\n\nprint \"Index multiplication test - 1s success\"\n"
    },
    {
        "number": 445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (index_multiplication((1,3,5,7,9), (0,2,4,6,8)) == (0,6,30,132,258))\nassert     (index_multiplication((1,2,3,4), (0,1,2,3)) == (0,6,24,120))\n\n\n\ndef index_division(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef get_Prediction_Accuracy(class_list, class_guess):\n    '''\n    Write a python function to calculate the accuracy of the class guess.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Occurrence((1,1,3,4), [1,3,4]) == 3\nassert     count_Occurrence((1,2,3,1,1,2,3,2,3,1,1,2,1,3,4), [1,2,3,1,2,3,4]) == 9\n\n\n\ndef compute_f(p, q):\n    '''\n    Write a python function to compute the total price of the item list.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Occurrence((1,2,3,4,5,6,7,8,9), [4,5,6,7,8]) == Counter([4,5,6,7,8])\nassert     count_Occurrence((1,2,3,4,5,6,7,8,9), [5,6,7,8,9]) == Counter([5,6,7,8,9])\nassert     count_Occurrence((1,2,3,4,5,6,7,8,9), [7,8,9]) == Counter([7,8,9])\nassert     count_Occurrence((1,2,3,4,5,6,7,8,9), [8,9]) == Counter([8,9])\nassert     count_Occurrence((1,2,3,4,5,6,7,8,9), [1,2,3,4,5,6,7,8,9]) == Counter([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Occurrence(('a','b','c','a','b','a'),['a','b','a','b','a']) == Counter({'a': 3, 'b': 2})\nassert     count_Occurrence(('a','b','c'),['a','b','a']) == Counter({'a': 3, 'b': 2})\nassert     count_Occurrence(('a','b','c','a','b','a'),['a','b','a','b','a','b']) == Counter({'a': 3, 'b': 2})\nassert     count_Occurrence(('a','b','c'),['a','b','a','b']) == Counter({'a': 3, 'b': 2})\nassert     count_Occurrence(('a','b','c','a','b','a'),['a','b','a','b','a','b','a','b','a','b','a']) == Counter({'a': 5, 'b': 4})\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (count_Occurrence((1, 2, 3), [1, 1, 1, 2, 3]) == {1: 2, 2: 1, 3: 1}), \"Failed: count_Occurrence\"\nassert     (count_Occurrence((2, 4, 2, 1, 2, 2), [2, 2, 1, 2, 1, 2, 1, 2, 2]) == {2: 6, 1: 4, 2: 3}), \"Failed: count_Occurrence\"\nassert     (count_Occurrence((2, 3, 3, 3, 3, 2), [2, 3, 3, 3, 3, 2]) == {2: 10, 3: 5}), \"Failed: count_Occurrence\"\nassert     (count_Occurrence((4, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1), [2, 3, 3, 3, 3, 2]) == {2: 16, 3: 8}), \"Failed: count_Occurrence\"\nassert     (count_Occurrence((5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 2), [2, 3, 3, 3, 3, 2]) == {2: 19, 3: 9}), \"Failed: count_Occurrence\"\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Occurrence((3, 4, 5, 1, 2, 1, 1), [1, 2, 3, 4]) == Counter({1: 3, 2: 1, 3: 1, 4: 1})\nassert     count_Occurrence((3, 4, 5, 1, 2, 1, 1), [4, 5]) == Counter({1: 1, 2: 1, 3: 1, 4: 2, 5: 1})\n\ndef show_Index(tup, lst): \n    '''\n    Write a python function to find the index of all elements of list in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (count_Occurrence((1, 1, 1, 1, 2, 2, 3), [1, 1, 1, 2, 2, 3]) == [1, 1, 1, 2, 2, 1])\nassert     (count_Occurrence((1, 1, 2, 3, 4, 5, 6, 7), [1, 1, 2, 3, 4, 5, 6, 7]) == [1, 1, 2, 2, 1, 1, 1, 1])\nassert     (count_Occurrence((1, 2, 3), [1, 1, 2, 2, 3, 3]) == [1, 2, 1])\nassert     (count_Occurrence((1, 2), [1, 1, 2, 2]) == [1, 2, 1])\nassert     (count_Occurrence((1, 2, 3), [1, 1, 2]) == [1, 2, 1])\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Occurrence((1,1,1,1,1,2,2,2,2,3), [1,1,1,1,1,2,2,2,2,3]) == 10\nassert     count_Occurrence((1,1,1,1,1,2,2,2,2), [1,1,1,1,1,2,2,2,2]) == 10\nassert     count_Occurrence((1,1,1,1,1,1,2,2,2,2), [1,1,1,1,1,1,2,2,2,2]) == 10\nassert     count_Occurrence((1,1,1,1,1,1,1,2,2,2,2), [1,1,1,1,1,1,1,2,2,2,2]) == 10\nassert     count_Occurrence((1,1,1,1,1,1,1,1,2,2,2,2), [1,1,1,1,1,1,1,1,2,2,2,2]) == 10\n"
    },
    {
        "number": 446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Occurrence((1,2,3), [2,2,2,2,3,3,4]) == [2,3]\nassert     count_Occurrence((2,3,4), [2,2,2,2,3,3,4]) == [2,4]\nassert     count_Occurrence((4,1,2), [2,2,2,2,3,3,4]) == [2,2]\nassert     count_Occurrence((4,2,1), [2,2,2,2,3,3,4]) == [2,2]\nassert     count_Occurrence((4,3,2), [2,2,2,2,3,3,4]) == [2,3]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == list(cube_nums(range(1,10)))"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == cube_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\nassert     [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nassert     [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000] == cube_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cube_nums([1, 2, 3]) == [1, 8, 27], \"Cube numbers do not match\"\nassert     cube_nums([3, 4, 5]) == [9, 16, 25], \"Cube numbers do not match\"\nassert     cube_nums([1, 3, 5]) == [1, 9, 25], \"Cube numbers do not match\"\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cube_nums([1,2,3,4]) == [1,8,27,64]\nassert     cube_nums([-1,1,2,3,5]) == [1,-1,8,27,125]\nassert     cube_nums([-1]) == [-1]"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     cube_nums([1,2,3,4,5,6]) == [1, 8, 27, 64, 125, 216]\nassert     cube_nums([]) == []\nassert     cube_nums([2,-3,4]) == [0, -12, 0]\nassert     cube_nums([5,3,6,-3,8,-6]) == [125, 216, -9, 343, 496, -864]\nassert     cube_nums([-1,-2,-3,4,-5,-6]) == [-1, -12, -27, -64, -125, -216]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [24, 864, 27, 9, 12, 1], cube_nums([12, 24, 864, 27, 9, 1])\nassert     [1, 1, 1, 1, 1, 1], cube_nums([1, 1, 1, 1, 1])\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \ncube_nums([1,2,3,4]) == [1,8,27,64]\nassert \ncube_nums([1,-3,4]) == [1,0,-9,16]\nassert \ncube_nums([0,1,2,3]) == [0,1,8,27]\n\ndef factorial(n):\n    '''\n    Write a function to find factorial of a number.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\nassert     cube_nums([1.1, 2.2, 3.3, 4.4]) == [1.1, 8.2, 27.6, 64.8]\nassert     cube_nums([0, 1, 2, 3]) == [0, 1, 8, 27]\nassert     cube_nums([-1, -2, -3, -4]) == [-1, -8, -27, -64]\nassert     cube_nums([-1.1, -2.2, -3.3, -4.4]) == [-1.1, -8.2, -27.6, -64.8]\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 8, 27, 64, 125, 216] == cube_nums([1,2,3,4,5,6])\nassert     [1, 8, 27, 64, 125, 216] == cube_nums([1,8,27,64,125,216])\nassert     [1, 8, 27, 64, 125, 216] == cube_nums([1,8,27,64,125,216])\nassert     [1, 8, 27, 64, 125, 216] == cube_nums([1,8,27,64,125,216])\nassert     [1, 8, 27, 64, 125, 216] == cube_nums([1,8,27,64,125,216])\n"
    },
    {
        "number": 447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert     cube_nums([3, 4, 5]) == [9, 16, 25]\nassert     cube_nums([0, 1, 2]) == [0, 1, 8]\nassert     cube_nums([0, -1, -2]) == [0, 1, -8]\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cal_sum(10) == 55\nassert     cal_sum(50) == 2620\nassert     cal_sum(100) == 2640\nassert     cal_sum(300) == 14700\nassert     cal_sum(1000) == 72300\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cal_sum(100) == 1255\nassert     cal_sum(1000) == 2207840\nassert     cal_sum(10000) == 188041925\nassert     cal_sum(100000) == 1879153673\nassert     cal_sum(1000000) == 134966593425\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cal_sum(1) == 1\nassert     cal_sum(2) == 3\nassert     cal_sum(3) == 5\nassert     cal_sum(4) == 7\nassert     cal_sum(5) == 11\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (cal_sum(10) == 22)\nassert     (cal_sum(100) == 596)\nassert     (cal_sum(1000) == 28657)\nassert     (cal_sum(10000) == 4486552)\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef cal_prim(n):\n    '''\n    Write a function to calculate all the prime numbers within a given range.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cal_sum(10)     ==     3 + 7 + 4 + 1 + 0\nassert     cal_sum(100)     ==     3 + 7 + 4 + 1 + 0 + 9 + 1 + 8 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\nassert     cal_sum(1000)     ==     3 + 7 + 4 + 1 + 0 + 9 + 1 + 8 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100\nassert     cal_sum(10000)     ==     3 + 7 + 4 + 1 + 0 + 9 + 1 + 8 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 57 + 58 + 59 + 60 + 61 + 62 + 63 + 64 + 65 + 66 + 67 + 68 + 69 + 70 + 71 + 72 + 73 + 74 + 75 + 76 + 77 + 78 + 79 + 80 + 81 + 82 + 83 + 84 + 85 + 86 + 87 + 88 + 89 + 90 + 91 + 92 + 93 + 94 + 95 + 96 + 97 + 98 + 99 + 100 + 101 + 102 + 103 + 104 + 105 + 106 + 107 + 108 + 109 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 120 + 121 + 122 + 123 + 124 + 125 + 126 + 127 + 128 + 129 + 130 + 131 + 132 + 133 + 134 + 135 + 136 + 137 + 138 + 139 + 140 + 141 + 142 + 143 + 144 + 145 + 146 + 147 + 148 + 149 + 150 + 151 + 152 + 153 + 154 + 155 + 156 + 157 + 158 + 159 + 160 + 161 + 162 + 163 + 164 + 165 + 166 + 167 + 168 + 169 + 170 + 171 + 172 + 173 + 174 + 175 + 176 + 177 + 178 + 179 + 180 + 181 + 182 + 183 + 184 + 185 + 186 + 187 + 188 + 189 + 190 + 191 + 192 + 193 + 194 + 195 + 196 + 197 + 198 + 199 + 200 + 201 + 202 + 203 + 204 + 205 + 206 + 207 + 208 + 209 + 210 + 211 + 212 + 213 + 214 + 215 + 216 + 217 + 218 + 219 + 220 + 221 + 222 + 223 + 224 + 225 + 226 + 227 + 228 + 229 + 230 + 231 + 232 + 233 + 234 + 235 + 236 + 237 + 238 + 239 + 240 + 241 + 242 + 243 + 244 + 245 + 246 + 247 + 248 + 249 + 250 + 251 + 252 + 253 + 254 + 255 + 256 + 257 + 258 + 259 + 260 + 261 + 262 + 263 + 264 + 265 + 266 + 267 + 268 + 269 + 270 + 271 + 272 + 273 + 274 + 275 + 276 + 277 + 278 + 279 + 280 + 281 + 282 + 283 + 284 + 285 + 286 + 287 + 288 + 289 + 290 + 291 + 292 + 293 + 294 + 295 + 296 + 297 + 298 + 299 + 300 + 301 + 302 + 303 + 304 + 305 + 306 + 307 + 308 + 309 + 310 + 311 + 312 + 313 + 314 + 315 + 316 + 317 + 318 + 319 + 320 + 321 + 322 + 323 + 324 + 325 + 326 + 327 + 328 + 329 + 330 + 331 + 332 + 333 + 334 + 335 + 336 + 337 + 338 + 339 + 340 + 341 + 342 + 343 + 344 + 345 + 346 + 347 + 348 + 349 + 350 + 351 + 352 + 353 + 354 + 355 + 356 + 357 + 358 + 359 + 360 + 361 + 362 + 363 + 364 + 365 + 366 + 367 + 368 + 369 + 370 + 371 + 372 + 373 + 374 + 375 + 376 + 377 + 378 + 379 + 380 + 381 + 382 + 383 + 384 + 385 + 386 + 387 + 388 + 389 + 390 + 391 + 392 + 393 + 394 + 395 + 396 + 397 + 398 + 399 + 400 + 401 + 402 + 403 + 404 + 405 + 406 + 407 + 408 + 409 + 410 + 411 + 412 + 413 + 414 + 415 + 416 + 417 + 418 + 419 + 420 + 421 + 422 + 423 + 424 + 425 + 426 + 427 + 428 + 429 + 430 + 431 + 432 + 433 + 434 + 435 + 436 + 437 + 438 + 439 + 440 + 441 + 442 + 443 + 444 + 445 + 446 + 447 + 448 + 449 + 450 + 451 + 452 + 453 + 454 + 455 + 456 + 457 + 458 + 459 + 460 + 461 + 462 + 463 + 464 + 465 + 466 + 467 + 468 + 469 + 470 + 471 + 472 + 473 + 474 + 475 + 476 + 477 + 478 + 479 + 480 + 481 + 482 + 483 + 484 + 485 + 486 + 487 + 488 + 489 + 490 + 491 + 492 + 493 + 494 + 495 + 496 + 497 + 498 + 499 + 500 + 501 + 502 + 503 + 504 + 505 + 506 + 507 + 508 + 509 + 510 + 511 + 512 + 513 + 514 + 515 + 516 + 517 + 518 + 519 + 520 + 521 + 522 + 523 + 524 + 525 + 526 + 527 + 528 + 529 + 530 + 531 + 532 + 533 + 534 + 535 + 536 + 537 + 538 + 539 + 540 + 541 + 542 + 543 + 544 + 545 + 546 + 547 + 548 + 549 + 550 + 551 + 552 + 553 + 554 + 555 + 556 + 557 + 558 + 559 + 560 + 561 + 562 + 563 + 564 + 565 + 566 + 567 + 568 + 569 + 570 + 571 + 572 + 573 + 574 + 575 + 576 + 577 + 578 + 579 + 580 + 581 + 582 + 583 + 584 + 585 + 586 + 587 + 588 + 589 + 590 + 591 + 592 + 593 + 594 + 595 + 596 + 597 + 598 + 599 + 600 + 601 + 602 + 603 + 604 + 605 + 606 + 607 + 608 + 609 + 610 + 611 + 612 + 613 + 614 + 615 + 616 + 617 + 618 + 619 + 620 + 621 + 622 + 623 + 624 + 625 + 626 + 627 + 628 + 629 + 630 + 631 + 632 + 633 + 634 + 635 + 636 + 637 + 638 + 639 + 640 + 641 + 642 + 643 + 644 + 645 + 646 + 647 + 648 + 649 + 650 + 651 + 652 + 653 + 654 + 655 + 656 + 657 + 658 + 659 + 660 + 661 + 662 + 663 + 664 + 665 + 666 + 667 + 668 + 669 + 670 + 671 + 672 + 673 + 674 + 675 + 676 + 677 + 678 + 679 + 680 + 681 + 682 + 683 + 684 + 685 + 686 + 687 + 688 + 689 + 690 + 691 + 692 + 693 + 694 + 695 + 696 + 697 + 698 + 699 + 700 + 701 + 702 + 703 + 704 + 705 + 706 + 707 + 708 + 709 + 710 + 711 + 712 + 713 + 714 + 715 + 716 + 717 + 718 + 71"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cal_sum(1) == 1\nassert     cal_sum(2) == 1\nassert     cal_sum(3) == 2\nassert     cal_sum(4) == 3\nassert     cal_sum(5) == 6\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     cal_sum(2) == 0 \nassert     cal_sum(3) == 5\nassert     cal_sum(4) == 11\nassert     cal_sum(5) == 19\nassert     cal_sum(6) == 30\n"
    },
    {
        "number": 448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cal_sum(5) == 16\nassert     cal_sum(10) == 1358\nassert     cal_sum(15) == 1365\nassert     cal_sum(20) == 120138\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_string(['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5]) == ['a', 'b', 'c']\nassert     extract_string(['a', 'b', 'c', 'd', 'e', 'f', 'g'], [1, 2, 3, 4, 5, 6, 7]) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     extract_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], [1, 2, 3, 4, 5, 6, 7, 8]) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_string('abcdef', 1) == 'b'\nassert     extract_string('abcdef', 2) == 'bc'\nassert     extract_string('abcdef', 3) == 'cde'\nassert     extract_string('abcdef', 4) == 'def'\nassert     extract_string('abcdef', 5) == 'ef'\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_string('a', 1) == ['a']\nassert     extract_string('abcd', 3) == ['abcd']\nassert     extract_string('abcd', 1) == ['a']\nassert     extract_string('abcd', 2) == ['ab', 'cd']\nassert     extract_string('abcdefghi', 3) == ['abc', 'def', 'ghi']\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_string('asdf', 1) == 'a', 'extract_string(asdf, 1) should be a'\nassert     extract_string('asdf', 2) == 'as', 'extract_string(asdf, 2) should be as'\nassert     extract_string('asdf', 3) =='s', 'extract_string(asdf, 3) should be s'\nassert     extract_string('asdf', 4) == 'df', 'extract_string(asdf, 4) should be df'\nassert     extract_string('', 1) == '', 'extract_string(\"\", 1) should be \"\"'\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_string([], 1) == []\nassert     extract_string([\"a\"], 1) == [\"a\"]\nassert     extract_string([\"a\",\"b\",\"c\"], 1) == [\"a\"]\nassert     extract_string([\"a\",\"b\",\"c\"], 2) == [\"ab\", \"ac\"]\nassert     extract_string([\"a\",\"b\",\"c\"], 3) == [\"abc\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_string('kfzlfjdsiozrfzdzb', 3) == 'kfzlfjds', 'extract_string() fails'\nassert     extract_string('kfzlfjdsiozrfzdzb', 1) == 'kfzlfjdsiozrfzdzb', 'extract_string() fails'\nassert     extract_string('kfzlfjdsiozrfzdzb', 10) == 'kfzlfjdsiozrfzdzb', 'extract_string() fails'\nassert     extract_string('kfzlfjdsiozrfzdzb', 7) == 'kfzlfjds', 'extract_string() fails'\nassert     extract_string('kfzlfjdsiozrfzdzb', 5) == 'kfzlfj', 'extract_string() fails'\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_string([\"this\", \"is\", \"an\", \"example\", \"of\", \"string\", \"extraction\"], 3)     == \"is an example\"\nassert     extract_string([\"this\", \"is\", \"an\", \"example\", \"of\", \"string\", \"extraction\"], 2)     == \"is an example\"\nassert     extract_string([\"this\", \"is\", \"an\", \"example\", \"of\", \"string\", \"extraction\"], 1)     == \"an example\"\nassert     extract_string([\"this\", \"is\", \"an\", \"example\", \"of\", \"string\", \"extraction\"], 0)     == \"string\"\n\ndef extract_string_with_last_index(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_string([\"a\", \"b\", \"c\", \"d\"], 4) == 'bcd'\nassert     extract_string([\"a\", \"b\", \"c\", \"d\"], 1) == 'a'\nassert     extract_string([\"a\", \"b\", \"c\", \"d\"], 2) == 'bc'\nassert     extract_string([\"a\", \"b\", \"c\", \"d\"], 3) == 'bd'\nassert     extract_string([\"a\", \"b\", \"c\", \"d\"], 4) == 'bcd'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_whitespaces('Coding Dojo') == 'Coding Dojo'\nassert     remove_whitespaces('Coding  Dojo') == 'Coding Dojo'\nassert     remove_whitespaces('Coding   Dojo') == 'Coding Dojo'\nassert     remove_whitespaces('   Coding Dojo   ') == 'Coding Dojo'\n\ndef remove_characters(text, chars):\n    '''\n    Write a function that removes all the characters in chars from text.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\"  hi    \") == \"hi\"\nassert     remove_whitespaces(\"hi\") == \"hi\"\nassert     remove_whitespaces(\"hi \") == \"hi\"\nassert     remove_whitespaces(\"   hi  \") == \"hi\"\nassert     remove_whitespaces(\" hi   \") == \"hi\"\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_whitespaces(\"Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\" \") == \"\"\nassert     remove_whitespaces(\"\\t\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_whitespaces(\"Hi I am your Friend\")    == \"Hi I am your Friend\", \"First case failed\"\nassert     remove_whitespaces(\"Hi I am your Friend  \")    == \"Hi I am your Friend\", \"Second case failed\"\nassert     remove_whitespaces(\"Hi I am your Friend   \")    == \"Hi I am your Friend\", \"Third case failed\"\nassert     remove_whitespaces(\"Hi I am your Friend  \")    == \"Hi I am your Friend\", \"Fourth case failed\"\nassert     remove_whitespaces(\"Hi I am your Friend\")    == \"Hi I am your Friend\", \"Fifth case failed\"\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_whitespaces('a b  c') == 'abc'\nassert     remove_whitespaces('a b  c ') == 'a b c'\nassert     remove_whitespaces('a  b') == 'a b'\nassert     remove_whitespaces('   ') == ''\nassert     remove_whitespaces('ab  cd') == 'abcd'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(\"hello world\") == \"hello world\"\nassert     remove_whitespaces(\"hello   world\") == \"hello world\"\nassert     remove_whitespaces(\"   hello   world   \") == \"hello world\"\nassert     remove_whitespaces(\"   hello   world   \") == \"hello world\"\nassert     remove_whitespaces(\"\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_whitespaces('  abc   def ') == 'abcdef'\nassert     remove_whitespaces('abc \\ndef') == 'abcdef'\nassert     remove_whitespaces(' \\n\\n\\n\\n\\n\\n   \\n  \\n') == '\\n\\n\\n\\n\\n\\n\\n'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_whitespaces('    ')=='','Test 1 failed'\nassert     remove_whitespaces('My Name Is Pratik')=='My Name Is Pratik','Test 2 failed'\nassert     remove_whitespaces('MyNameIsPratik')=='MyNameIsPratik','Test 3 failed'\nassert     remove_whitespaces('My Name is Pratik')=='My Name is Pratik','Test 4 failed'\nassert     remove_whitespaces('My name is Pratik')=='My name is Pratik','Test 5 failed'\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"i am a good boy\") == 'iamagoodboy'\nassert     remove_whitespaces(\"i am a good boy \") == 'iamagoodboy'\nassert     remove_whitespaces(\"I am a good boy\") == 'iamagoodboy'\nassert     remove_whitespaces(\"I am a good boy \") == 'iamagoodboy'\n\ndef is_palindrome(text):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    A palindrome is a word, number, phrase, or other sequence of characters which reads the same backwards as forwards, such as madam or racecar.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"Hello World  \") == \"Hello World\"\nassert     remove_whitespaces(\"Hello World\") == \"Hello World\"\n\ndef remove_letter_occurrence(text1,letter):\n    '''\n    Write a function to remove the occurrence of the given letter from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     loss_amount(3000,2000) == 50\nassert     loss_amount(2000,3000) == 0\nassert     loss_amount(100,200) == -100\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     loss_amount(3.14,6.28) == -0.76\nassert     loss_amount(4.7,3.53) == -1.08\nassert     loss_amount(8.56,6.37) == 0.16\nassert     loss_amount(9.41,6.37) == -1.22\nassert     loss_amount(6.37,6.37) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     loss_amount(100,50) == 50\nassert     loss_amount(100,101) == 100\nassert     loss_amount(0,0) == 0\nassert     loss_amount(100,99) == 0\n\n\ndef loss_percentage(actual_cost,sale_amount):\n    '''\n    Write a function that give the loss percentage on a sale if the given amount has loss else return 0.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     loss_amount(1000,1000) == 0\nassert     loss_amount(500,1000) == 250\nassert     loss_amount(200,1000) == 500\nassert     loss_amount(0,1000) == 1000\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\nactual_cost = 45.0\nsale_amount = 60.0\nactual_cost = float(actual_cost)\nsale_amount = float(sale_amount)\nprint(loss_amount(actual_cost,sale_amount))\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     loss_amount(100,50) == 50\nassert     loss_amount(100,70) == 70\nassert     loss_amount(100,90) == 90\nassert     loss_amount(100,110) == 110\n"
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     loss_amount(10,10) == 0\nassert     loss_amount(10,12) == 2\nassert     loss_amount(12,12) == 0\nassert     loss_amount(12,13) == 3\n\nprint \"All the tests passed."
    },
    {
        "number": 452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     loss_amount(50,50)==0\nassert     loss_amount(20,60)==20\nassert     loss_amount(100,50)==50\nassert     loss_amount(20,70)==50\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sumofFactors(20) == 12\nassert     sumofFactors(15) == 4\nassert     sumofFactors(25) == 8\nassert     sumofFactors(1) == 0\nassert     sumofFactors(5) == 2\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nprint(sumofFactors(6))\nassert \nprint(sumofFactors(25))\nassert \nprint(sumofFactors(30))\nassert \nprint(sumofFactors(70))\nassert \nprint(sumofFactors(100))\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sumofFactors(14) == 14\nassert     sumofFactors(25) == 19\nassert     sumofFactors(28) == 29\nassert     sumofFactors(45) == 20\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sumofFactors(20) == 12\nassert     sumofFactors(21) == 27\nassert     sumofFactors(22) == 28\nassert     sumofFactors(23) == 30\nassert     sumofFactors(24) == 36\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sumofFactors(60) == 108\nassert     sumofFactors(21) == 21\nassert     sumofFactors(25) == 25\nassert     sumofFactors(8) == 8\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sumofFactors(6) == 18)\nassert     (sumofFactors(24) == 60)\nassert     (sumofFactors(30) == 90)\nassert     (sumofFactors(100) == 5050)\nassert     (sumofFactors(200) == 10000)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (sumofFactors(6) == 18)\nassert     (sumofFactors(28) == 84)\nassert     (sumofFactors(30) == 72)\nassert     (sumofFactors(81) == 126)\nassert     (sumofFactors(100) == 168)\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sumofFactors(1) == 0\nassert     sumofFactors(4) == 2\nassert     sumofFactors(36) == 14\nassert     sumofFactors(9) == 2\nassert     sumofFactors(13) == 5\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sumofFactors(15) == sum([1, 3, 5]))\nassert     (sumofFactors(2) == sum([1, 2]))\nassert     (sumofFactors(10) == sum([1, 2, 5]))\nassert     (sumofFactors(12) == sum([1, 2, 3, 4, 6]))\nassert     (sumofFactors(600) == sum([1, 2, 3, 4, 5, 6, 8, 10, 12, 15]))\n"
    },
    {
        "number": 453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sumofFactors(8) == 16)\nassert     (sumofFactors(7) == 14)\nassert     (sumofFactors(6) == 12)\nassert     (sumofFactors(10) == 22)\nassert     (sumofFactors(9) == 21)\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_wordz('This is a string that does not match the regexp') == False\nassert     text_match_wordz('This is a string that has a match') == True\nassert     text_match_wordz('This is a string that does not have a match') == False\nassert     text_match_wordz('123z45') == True\nassert     text_match_wordz('123z456') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_wordz('') == False\nassert     text_match_wordz('zxy') == True\nassert     text_match_wordz('zyx') == True\nassert     text_match_wordz('abc') == False\nassert     text_match_wordz('xyz') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_wordz('') == None\nassert     text_match_wordz(\" \") == None\nassert     text_match_wordz(\"this is a test\") == None\nassert     text_match_wordz(\"this is a test\") == None\nassert     text_match_wordz(\"This is a test\") == None\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_wordz(\"amazing\") == True\nassert     text_match_wordz(\"z amazing\") == True\nassert     text_match_wordz(\"z amazing\") == True\nassert     text_match_wordz(\"amazing z\") == True\nassert     text_match_wordz(\"amazingz\") == True\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_wordz('This text contains z.')\nassert     text_match_wordz('This text contains z, but not the other.')\nassert     not text_match_wordz('This text does not contain z.')\nassert     not text_match_wordz('This text does not contain the other word.')\nprint 'Passed.'\n\ndef text_match_word(word):\n    '''\n    Write a function that matches a word containing a certain letter.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_wordz(\"A word with z\") == False\nassert     text_match_wordz(\"A z word\") == True\nassert     text_match_wordz(\"A word\") == False\nassert     text_match_wordz(\"A z\") == False\nassert     text_match_wordz(\"A\") == False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_match_wordz('z') == True\nassert     text_match_wordz('Z') == True\nassert     text_match_wordz('az') == True\nassert     text_match_wordz('Az') == True\nassert     text_match_wordz('azA') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_wordz(\"Hello\") == False\nassert     text_match_wordz(\"He'll\") == False\nassert     text_match_wordz(\"He zllo\") == True\nassert     text_match_wordz(\"H ell o\") == True\nassert     text_match_wordz(\"H ello\") == False\n"
    },
    {
        "number": 454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_wordz('animals') == True\nassert     text_match_wordz('antibiotics') == True\nassert     text_match_wordz('wool') == False\nassert     text_match_wordz('any animals') == False\nassert     text_match_wordz('spam') == False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(29) == True,    \"29/02 is not a leap year\"\nassert     check_monthnumb_number(29) == False, \"29/02 is not a leap year\"\nassert     check_monthnumb_number(30) == True,    \"30/02 is a leap year\"\nassert     check_monthnumb_number(30) == False, \"30/02 is not a leap year\"\nassert     check_monthnumb_number(31) == True,    \"31/02 is a leap year\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(3) == True\nassert     check_monthnumb_number(4) == True\nassert     check_monthnumb_number(5) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(4) == 31\nassert     check_monthnumb_number(6) == 30\nassert     check_monthnumb_number(9) == 31\nassert     check_monthnumb_number(11) == 30\nassert     check_monthnumb_number(1) == 31\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(3) == False\nassert     check_monthnumb_number(4) == True\nassert     check_monthnumb_number(5) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(1)\nassert     check_monthnumb_number(2)\nassert     check_monthnumb_number(3)\nassert     check_monthnumb_number(4)\nassert     check_monthnumb_number(5)\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(1) is True, \"1\"\nassert     check_monthnumb_number(2) is True, \"2\"\nassert     check_monthnumb_number(3) is True, \"3\"\nassert     check_monthnumb_number(4) is True, \"4\"\nassert     check_monthnumb_number(5) is True, \"5\"\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(0) == False\nassert     check_monthnumb_number(28) == True\nassert     check_monthnumb_number(29) == True\nassert     check_monthnumb_number(30) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(1)    == True\nassert     check_monthnumb_number(2)    == True\nassert     check_monthnumb_number(3)    == True\nassert     check_monthnumb_number(4)    == True\nassert     check_monthnumb_number(5)    == True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(3) == True\nassert check_monthnumb_number(1) == True\nassert check_monthnumb_number(4) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(9) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(29) == True\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(28) == False\nassert     check_monthnumb_number(29) == False\nassert     check_monthnumb_number(30) == False\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_string_list(['string1','string2','string3']) == ['sring3','string2','string1']\nassert     reverse_string_list(['string1','string2','string3','string4']) == ['sring4','string3','string2','string1']\nassert     reverse_string_list(['string1','string2']) == ['string2','string1']\nassert     reverse_string_list(['string1','string2','string3','string4','string5']) == ['string5','string4','string3','string2','string1']\nassert     reverse_string_list(['string1','string2','string3']) == ['string3','string2','string1']\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_string_list(['cat', 'dog','mouse']) == ['mouse', 'dog', 'cat']\nassert     reverse_string_list(['A', 'B', 'C']) == ['C', 'B', 'A']\nassert     reverse_string_list(['', 'B', 'C']) == ['C', 'B', '']\nassert     reverse_string_list([None, 'A', 'B', 'C']) == ['C', 'B', 'A', None]\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_string_list(['a','b']) == ['b','a']\nassert     reverse_string_list(['c','d']) == ['d','c']\nassert     reverse_string_list(['e','f']) == ['f','e']\nassert     reverse_string_list(['g','h']) == ['h','g']\nassert     reverse_string_list(['i','j']) == ['j','i']\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_string_list(['q', 'w', 'e', 'r', 't', 'y']) == ['t', 'y', 'r', 'e', 'w', 'q']\nassert     reverse_string_list(['c', 'a', 't', 'e', 'h', 'i']) == ['i', 'h', 'e', 't', 'a', 'c']\nassert     reverse_string_list(['o', 'p', 'l', 'e','s', 't', 'r']) == ['t', 'r','s', 'e', 'l', 'p', 'o']\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_string_list(['m', 'o', 'n', 'g', 'o','s','m', 'a', 'r', 'g', 'a', 'n', 'g', 'o', 'u', 'n', 'o', 'r', 'i', 'i', 'o','m', 'i', 'u', 'i', 'p', 'o', 'u', 'o', 'n', 'g', 'n', 'g', 'o', 'd', 'o','m', 'i', 'a', 'r', 'a', 'n','m', 'u', 'd', 'i', 'o', 'l', 'i', 'i', 'u', 'g', 'r', 'a', 't','s', 'i', 'o', 'd', 'e', 'i', 'o', 'c', 'i', 'n', 't', 'h', 'r', 'a', 'e', 't', 'i', 'o', 'c', 'a', 'e', 'n', 'd', 'e', 'i', 'l', 'o', 'd', 'i','s', 't', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'r', 'a', 'i', 'o', 'o', 'l', 'a', 't', 'i', 'o', 'c', 'o', 'u', 'o', 'r', 'g', 'e', 'i', 'r', 'o', 'g', 'r', 'o', 'i', 'o', 'e', 'd', 'i', 'r', 'i', 'o','s', 'i', 't', 'o','s', 'i', 'd', 'a', 'r', 'i', 'c', 'i', 'o', 'u','s', 'i', 'o', 'n', 'r', 't', 'o', 'u', 'r', 'g', 'i', 'o', 'c', 'u', 'o', 'r', 'g', 'o', 'r', 'o', 'r', 'o', 'r', 't', 'o', 'u', 'a', 'r', 'i', 't', 'o','s', 'r', 'r', 'i', 'r', 'o', 'r', 'a', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'u', 't', 'o', 'c', 'o', 'u', 'o', 'r', 'g', 'o', 'u', 'r', 'i','s', 'r', 'o', 'r', 'a', 'i','s', 't', 'o', 'r', 'g', 'i', 'r', 'o', 'r', 'a', 'i', 'c', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'i', 'r', 't', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'r', 'o', 'r', 't', 'o','s', 'u', 'e', 'r', 'o', 'n', 'g', 'o', 'r', 't', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'r', 'a', 'i', 'o', 'r', 'i', 'o', 'r', 'o', 'r', 'o', 'r', 'o', 'r', 't', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'i', 'r', 't', 'i', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 't', 'o', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 't', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'i', 'r', 't', 'i', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 't', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'i', 'r', 't', 'i', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 't', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'i', 'r', 't', 'i', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 't', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'i', 'r', 't', 'i', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 'o', 'r', 'g', 'r', 't', 'i', 'i', 'a', 'r', 'a', 'e', 'g', 'r', 'o', 'i', 'r', 't', 'i', 'o','s', 'r', 'i', 'c', 'u', 'o','s', 'r', 'o', 'g', 'r', 'o', '"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_string_list(['h','e','l','l','o']) == ['o','l','l','e','h']\nassert     reverse_string_list(['H','a','n','n','a','h']) == ['h','a','n','n','a','H']\nassert     reverse_string_list(['p','r','o','b','l','e','m','u','n','d']) == ['d','u','n','m','l','e','b','o','r','p']\nassert     reverse_string_list(['q','y','t','w','h','f','o','r','b','e','d','a']) == ['a','d','e','b','o','r','f','h','w','t','y','q']\nassert     reverse_string_list(['M','a','r','a','c','o','m','m','a','n','d']) == ['d','n','a','m','a','c','o','m','m','a','M']\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_string_list(['hello', 'world']) ==     ['doolh', 'loerr']\nassert     reverse_string_list(['the', 'quick', 'brown', 'fox']) == ['sikrow', 'ox', 'nrowf', 'fox']\nassert     reverse_string_list(['clam', 'beans', 'tomato', 'eggplant']) == ['eggplant', 'beans', 'tomato', 'clam']\n\ndef maximum_difference(s1, s2):\n    '''\n    Write a function that takes two strings and returns the maximum difference between the maximum \n    and minimum characters in each string.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_string_list(['cat', 'dog', 'cow', 'bird']) == ['bird', 'cow', 'dog', 'cat']\nassert     reverse_string_list(['hello', 'greetings', 'hey', 'hola']) == ['hola', 'hey', 'greetings', 'hello']\nassert     reverse_string_list(['good', 'goodbye', 'hello', 'hello']) == ['hello', 'hello', 'goodbye', 'good']\nassert     reverse_string_list(['this', 'that', 'those']) == ['those', 'that', 'this']\nassert     reverse_string_list(['aa', 'bb', 'cc']) == ['cc', 'bb', 'aa']\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_string_list(['ab', 'c', 'd']) == ['d', 'c', 'ab']\nassert     reverse_string_list(['a', 'b', 'c']) == ['c', 'b', 'a']\nassert     reverse_string_list(['c', 'b', 'a']) == ['a', 'b', 'c']\nassert     reverse_string_list(['c', 'b', 'a', 'd', 'e']) == ['e', 'd', 'a', 'b', 'c']\nassert     reverse_string_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']\n"
    },
    {
        "number": 456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_string_list(['abc','123','abcde']) == ['cba','321','edcba']\nassert     reverse_string_list(['abcde']) == ['edcba']\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (Find_Min([3,4,1,6,3,2,5]) == [3,3,2,5])\nassert     (Find_Min([1,2,3,4,5,6]) == [1,2,3,4,5])\nassert     (Find_Min([2,2,2,2,2]) == [2,2,2,2])\nassert     (Find_Min([3,4,5,1,6,3,2,5]) == [3,3,2,5])\nassert     (Find_Min([1,2,3,4,5,6]) == [1,2,3,4,5])\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5]]) == [1,2,3,4,5]\nassert     Find_Min([[1,2,3],[1,2,3,4],[1,2,3,4,5]]) == [1,2,3,4,5]\nassert     Find_Min([[1,2,3,4],[1,2,3,4,5]]) == [1,2,3,4,5]\nassert     Find_Min([[1,2,3,4,5]]) == [1,2,3,4,5]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Find_Min([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     Find_Min([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     Find_Min([]) == []\nassert     Find_Min([1]) == [1]\nassert     Find_Min([2, 1]) == [1, 2]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Find_Min([ [1, 2], [2, 1], [2, 4], [1, 2, 3] ]) == [2, [2, 1, 2]]\nassert     Find_Min([ [1, 2], [2, 1], [2, 4], [1, 2, 3], [7, 8, 9, 10, 1, 2, 3, 4, 5] ]) == [7, [7, 8, 9, 10, 1, 2, 3, 4, 5]]\nassert     Find_Min([ [1, 2], [2, 1], [2, 4], [1, 2, 3], [7, 8, 9, 10, 1, 2, 3, 4, 5] ]) == [7, [7, 8, 9, 10, 1, 2, 3, 4, 5]]\nassert     Find_Min([ [1, 2], [2, 1], [2, 4], [1, 2, 3], [7, 8, 9, 10, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 1, 2, 3, 4, 5] ]) == [6, [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]]\nassert     Find_Min([ [1, 2], [2, 1], [2, 4], [1, 2, 3], [7, 8, 9, 10, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 1, 2, 3, 4, 5] ]) == [6, [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         Find_Min([\"aba\", \"abc\", \"aca\", \"abd\", \"bcd\", \"bca\", \"cab\"]) == \"aba\"\nassert         Find_Min([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == \"a\"\nassert         Find_Min([\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\", \"fox\", \"goat\"]) == \"cat\"\nassert         Find_Min([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"]) == \"a\"\nassert         Find_Min([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\"]) == \"a\"\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Find_Min(['list','of','strings']) == 'list'\nassert     Find_Min(['list','of','strings','and','strings']) =='strings'\nassert     Find_Min(['list','of','strings','and','strings','and','strings']) =='strings'\nassert     Find_Min(['list','of','strings','and','strings','and','strings','and','strings']) =='strings'\n\nprint('Test for Find_Min is passed!')\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Find_Min([[1,2,3],[4,5,6,7],[8,9,0],[10,11],[],[12,13]]) == [1,2,3]\nassert Find_Min([[1,2,3],[4,5,6,7],[8,9,0],[10,11],[],[12,13,14]]) == [1,2,3]\nassert Find_Min([[1,2,3],[4,5,6,7],[8,9,0],[10,11],[],[12,13,14,15,16]]) == [1,2,3]\nassert Find_Min([[1,2,3],[4,5,6,7],[8,9,0],[10,11],[],[12,13,14,15,16,17]]) == [1,2,3]\nassert Find_Min([[1,2,3],[4,5,6,7],[8,9,0],[10,11],[],[12,13,14,15,16,17,18]]) == [1,2,3]\n"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [Find_Min(lst) for lst in [\n                [],\n                [1, 2, 3, 4],\n                [1, 1, 1, 1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Find_Min([3,2,1,2,3,4,3]) == [3,2,1]\nassert     Find_Min([3,2,1,2,3,4,5]) == [3,2,1,2,3]\nassert     Find_Min([3]) == [3]\nassert     Find_Min([3,3]) == [3,3]\nassert     Find_Min([2,3,4,5]) == [2,3]\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rectangle_area(2,3) == 6\nassert     rectangle_area(1,2) == 2\nassert     rectangle_area(2,1) == 2\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rectangle_area(5,5) == 25\nassert     rectangle_area(10,10) == 100\nassert     rectangle_area(0,0) == 0\nassert     rectangle_area(10,-10) == 0\nassert     rectangle_area(-10,10) == 0\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rectangle_area(2,2) == 4\nassert     rectangle_area(2,3) == 6\nassert     rectangle_area(3,2) == 6\nassert     rectangle_area(2,2.5) == 3.25\nassert     rectangle_area(3.5,2) == 6.25\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rectangle_area(10,10) == 100\nassert     rectangle_area(3,2) == 6\nassert     rectangle_area(0,-1) == 0\nassert     rectangle_area(2,0) == 0\nassert     rectangle_area(-2,3) == -6\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rectangle_area(3,4) == 12\nassert     rectangle_area(6,8) == 24\nassert     rectangle_area(5,2) == 10\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rectangle_area(2,2) == 4\nassert     rectangle_area(3,2) == 6\nassert     rectangle_area(2,3) == 6\nassert     rectangle_area(3,3) == 9\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rectangle_area(2,3) == 2*3\nassert     rectangle_area(4,6) == 4*6\n\ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rectangle_area(2,3)     == 6\nassert     rectangle_area(1,3)     == 3\nassert     rectangle_area(2,1)     == 2\nassert     rectangle_area(2,3)     == 6\nassert     rectangle_area(2,4)     == 8\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rectangle_area(3,4) == 12\nassert     rectangle_area(5,6) == 30\nassert     rectangle_area(2,7) == 14\nassert     rectangle_area(8,9) == 72\n\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rectangle_area(2,2)     == 4\nassert     rectangle_area(2,3)     == 6\nassert     rectangle_area(3,2)     == 6\nassert     rectangle_area(3,4)     == 12\nassert     rectangle_area(0,0)     == 0\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_uppercase(\"ABCD\") == \"abcd\"\nassert     remove_uppercase(\"ZabazABC\") == \"abaz\"\nassert     remove_uppercase(\"Abcd\") == \"abcd\"\nassert     remove_uppercase(\"ZabazABC\") == \"abaz\"\nassert     remove_uppercase(\"Abcd\") == \"abcd\"\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     re.sub(r'[A-Z]', '', 'AZ') == 'z'\nassert     re.sub(r'[A-Z]', '', 'AZZ') == 'z'\nassert     re.sub(r'[A-Z]', '', 'AZZab') == 'ab'\nassert     re.sub(r'[A-Z]', '', 'AZZab') == 'ab'\nassert     re.sub(r'[A-Z]', '', 'AZZAB') == 'AB'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_uppercase('teststring') == 'teststring'\nassert remove_uppercase('TestString') == 'teststring'\nassert remove_uppercase('testSting') == 'testSting'\nassert remove_uppercase('TESTSTRING') == 'TESTSTRING'\nassert remove_uppercase('testString') == 'testString'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_uppercase(\"GEEKFRIEND\") == 'Geekfriend'\nassert remove_uppercase(\"FRIENDGEek\") == 'FRIENDGeek'\nassert     remove_uppercase(\"FRIENDGeek\") == 'FRIENDGeek'\nassert     remove_uppercase(\"GEEEKFRIEND\") == 'Geekfriend'\nassert remove_uppercase(\"GEEEKFRIEND\") == 'Geekfriend'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_uppercase('this is a string') == 'this is a string'\nassert     remove_uppercase('This is a string') == 'This is a string'\nassert     remove_uppercase('This is a string AND THIS IS THE LAST STRING') == 'This is a string AND this is the last string'\nassert     remove_uppercase('THIS IS A STRING AND THE LAST STRING') == 'this is a string and the last string'\nassert     remove_uppercase('this is a string AND THIS IS THE LAST STRING AND THIS IS THE LAST STRING') == 'this is a string and the last string and this is the last string'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_uppercase('e6bc6b7d9d9d54db3f8c4ffa3c52e28b') == 'abc'\nassert     remove_uppercase('abcdefghi') == 'abcd'\nassert     remove_uppercase('ec4b8a5aa2b2e6ac8c8d8e4a18f3cc8') == 'abc'\nassert     remove_uppercase('c738c0566e3f2b8c97d5d0a5d3b58e') == 'a'\nassert     remove_uppercase('c738c0566e3f2b8c97d5d0a5d3b58e') == 'a'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_uppercase('abAB') == 'ab'\nassert     remove_uppercase('abBA') == 'ab'\nassert     remove_uppercase('abABBA') == 'ab'\nassert     remove_uppercase('abABA') == 'ab'\n\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove all spaces from the input string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_uppercase('howAreYou') == 'hOWareYOU'\nassert     remove_uppercase('abCd') == 'abCd'\nassert     remove_uppercase('abc') == 'abc'\nassert     remove_uppercase('aBc') == 'aBc'\nassert     remove_uppercase('aBc123') == 'aBc123'\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_uppercase('I love UPPERCASE.') == 'I love lowercase.'\nassert     remove_uppercase('UPPERCASE.') == ''\nassert     remove_uppercase('I LOVE UPPERCASE.') == 'I LOVE lowercase.'\n\ndef remove_extra_spaces(str1):\n    '''\n    Write a function to remove all extra spaces from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_uppercase(\"abC\") == \"abc\"\nassert     remove_uppercase(\"ABC\") == \"abc\"\nassert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"A\") == \"a\"\n\ndef remove_chars(str1, sub_strs):\n    '''\n    Given a string and a list of strings, remove all the substrings from the\n    given string.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Extract(['d', 'e', 'c', 'a', 'b', 'a', 'd', 'e', 'f']) == 'a', \"test1 Failed\"\nassert     Extract(['h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']) == 'h', \"test2 Failed\"\nassert     Extract(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']) == 'a', \"test3 Failed\"\nassert     Extract([]) == None, \"test4 Failed\"\nprint \"all tests passed\""
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Extract([1,2,3,[4,5],6]) == 1\nassert     Extract([1,2,3,[4,5],6]) == 1\nassert     Extract([1,[2,3,[4,5],6],7]) == 1\nassert     Extract([1,[2,3,[4,5],6],7]) == 1\nassert     Extract([1,[2,3,[4,5],6],7,[8,9]]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert xtract([1,2,3,4,5]) == 1\nassert xtract([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == 1\n\n\ndef Xappend(lst): \n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Extract(['a', 'b', [], 'c']) == 'a'\nassert     Extract([1, 2, [], 3]) == 1\nassert     Extract([1, 2, 3, 4, [], 5]) == 1\nassert     Extract([1, 2, [], 3]) == None\nassert     Extract([1, 2, [1, 2, 3, 4, 5, 6], 3]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Extract(range(10))        ==     [0]\nassert     Extract(range(10,30))    ==     [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nassert     Extract(range(30,60))    ==     [30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\nassert     Extract(range(60,100))    ==     [60, 61, 62, 63, 64, 65, 66, 67, 68, 69]\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Extract([1, 2, 3, [5, 6], 7]) == 1\nassert     Extract([1, 2, 3, [5, 6], [2, 3, 4], 7]) == 1\nassert     Extract([1, 2, 3, [5, 6], [2, 3, 4], [3, 4, 5], 7]) == 1\nassert     Extract([1, 2, 3, [5, 6], [2, 3, 4], [3, 4, 5], 7, 8, 9]) == 1\nassert     Extract([1, 2, 3, [5, 6], [2, 3, 4], [3, 4, 5], 7, 8, 9, 10]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract(get_list()) == ['a', 'b', 'c']\nassert     extract(get_list2()) == ['A', 'B', 'C']\nassert     extract(get_list3()) == ['1', '2', '3']\nassert     extract(get_list4()) == ['1', '2', '3', '4']\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ( Extract([[1,2],[3,4],[5,6],[7,8]]) == [1, 3, 5] )\nassert     ( Extract([[5,7],[9,10],[13,14],[17,18]]) == [5,9] )\n"
    },
    {
        "number": 460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Extract([1, 2, [3, 4, 5], 6, 7, 8]) == 1\nassert     Extract([[1, 2], 3, 4, [5, 6, 7], 8]) == 1\nassert     Extract([[1, 2], 3, 4, [5, 6, 7], 8]) == 1\nassert     Extract([1, 2, [3, 4, 5], 6, 7, [8, 9]]) == 1\nassert     Extract([1, 2, [3, 4, 5], 6, 7, [8, 9], 10]) == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     upper_ctr('Hi all, my name is Tom!')==4\nassert     upper_ctr('Hello, have a nice day')==0\nassert     upper_ctr('I have a dream')==0\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (upper_ctr('Python') == 2)\nassert     (upper_ctr('Python') == 3)\nassert     (upper_ctr('python') == 1)\nassert     (upper_ctr('Python pYthon') == 1)\nassert     (upper_ctr('Python') == 4)\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     upper_ctr('') == 0, '0 upper case characters'\nassert     upper_ctr('hello') == 0, '0 upper case characters'\nassert     upper_ctr('Hello') == 4, '4 upper case characters'\nassert     upper_ctr('Hello World') == 16, '16 upper case characters'\nassert     upper_ctr('This is a test!') == 10, '10 upper case characters'\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     upper_ctr(\"thi\") == 1\nassert     upper_ctr(\"HALLO\") == 4\nassert     upper_ctr(\"hELLo\") == 4\nassert     upper_ctr(\"\") == 0\nassert     upper_ctr(\"UPPER\") == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     upper_ctr('How many times did the number 3 appear in \"what number is 3 times 3 times 3\"' ) == 3\nassert     upper_ctr('How many times did the number 3 appear in \"what number is 3 times 3\"' ) == 0\nassert     upper_ctr('How many times did the number 3 appear in \"what number is 3 times 3\"' ) == 0\nassert     upper_ctr('How many times did the number 3 appear in \"What number is 3 times 3\"' ) == 3\nassert     upper_ctr('How many times did the number 3 appear in \"What number is 3 times 3\"' ) == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     upper_ctr('The quick Brow Fox') == 3\nassert     upper_ctr('The quick BROWN Fox') == 6\nassert     upper_ctr('The Quick Brown Fox') == 6\nassert     upper_ctr('The Quick Brown Fox'.upper()) == 6\nassert     upper_ctr('The Quick BROWN Fox'.upper()) == 6\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     upper_ctr('Hi my name is John') == 3\nassert     upper_ctr('Hello') == 0\nassert     upper_ctr('c8y') == 1\nassert     upper_ctr('C') == 1\nassert     upper_ctr('C8y') == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     upper_ctr(\"abcAxyz\") == 3\nassert     upper_ctr(\"AaBbCc\") == 0\nassert     upper_ctr(\"\") == 0\nassert     upper_ctr(\"ABC\") == 0\nassert     upper_ctr(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNn\") == 21\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     upper_ctr('c') == 1\nassert     upper_ctr('cDE') == 2\nassert     upper_ctr('a') == 0\nassert     upper_ctr('AbC') == 2\nassert     upper_ctr('1234') == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     upper_ctr('aPPle is a GOOD Day') == 4, \"Failed\"\nassert     upper_ctr('aPPle is a GOOd Day') == 8, \"Failed\"\nassert     upper_ctr('Apper is a good day') == 5, \"Failed\"\nassert     upper_ctr('Apper is a good day APPER') == 11, \"Failed\"\nassert     upper_ctr('Apper is a good day Apper') == 11, \"Failed\"\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [i for i in combinations_list([1,2,3,4])] == [[1,2,3,4],\n                                                    [1,2,4,3],\n                                                    [1,3,2,4],\n                                                    [1,3,4,2],\n                                                    [1,4,2,3],\n                                                    [1,4,3,2],\n                                                    [2,1,3,4],\n                                                    [2,1,4,3],\n                                                    [2,3,1,4],\n                                                    [2,3,4,1],\n                                                    [2,4,1,3],\n                                                    [2,4,3,1],\n                                                    [3,1,2,4],\n                                                    [3,1,4,2],\n                                                    [3,2,1,4],\n                                                    [3,2,4,1],\n                                                    [3,4,1,2],\n                                                    [3,4,2,1],\n                                                    [4,1,2,3],\n                                                    [4,1,3,2],\n                                                    [4,2,1,3],\n                                                    [4,2,3,1],\n                                                    [4,3,1,2],\n                                                    [4,3,2,1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [ [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4] ] == combinations_list([1, 2, 3, 4])\nassert     [ [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4] ] == combinations_list([1, 2, 3, 4])\nassert     [] == combinations_list([])\nassert     [[], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]] == combinations_list([1, 2, 3, 4])\nassert     [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]] == combinations_list([1, 2, 3, 4])\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     combinations_list([1,2,3]) == [\n                [1,2,3],\n                [1,2,3],\n                [1,2,3],\n                [1,2,3],\n                [1,2,3],\n                [1,2,3],\n                [1,2,3],\n                [1,2,3],\n                [1,2,3],\n                [1,2,3]\n            ]\n\ndef combinations_list2(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [combinations_list(['a', 'b', 'c'])\n         == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'c', 'b'], ['a', 'c', 'b'], ['c', 'a', 'b'], ['c', 'a', 'b']]\nassert     [combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n         == [['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']]\nassert     [combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n         == [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     combinations_list(['a','b','c']) == [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\nassert     combinations_list(['a', 'b']) == [['a', 'b']]\n\ndef combinations_list2(list1, r):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if r == 0:\n        return [[]]\n    if r == 1:\n        return list1\n    else:\n        return [x + [y] for x in combinations_list2(list1, r-1) for y in list1 if y not in x]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     combinations_list([1,2,3]) == [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]]\nassert     combinations_list([1,2,3,4,5]) == [[], [1], [2], [3], [4], [5], [1,2], [1,3], [1,4], [1,5], [2,3], [2,4], [2,5], [3,4], [3,5], [4,5], [1,2,3], [1,2,4], [1,2,5], [1,3,4], [1,3,5], [1,4,5], [2,3,4], [2,3,5], [2,4,5], [3,4,5]]\nassert     combinations_list([1,2,3,4,5,6]) == [[], [1], [2], [3], [4], [5], [6], [1,2], [1,3], [1,4], [1,5], [1,6], [2,3], [2,4], [2,5], [2,6], [3,4], [3,5], [3,6], [4,5], [4,6], [5,6], [1,2,3], [1,2,4], [1,2,5], [1,2,6], [1,3,4], [1,3,5], [1,3,6], [1,4,5], [1,4,6], [1,5,6], [2,3,4], [2,3,5], [2,3,6], [2,4,5], [2,4,6], [2,5,6], [3,4,5], [3,4,6], [3,5,6], [4,5,6]]\nassert     combinations_list([1,2,3,4,5,6,7]) == [[], [1], [2], [3], [4], [5], [6], [7], [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [2,3], [2,4], [2,5], [2,6], [2,7], [3,4], [3,5], [3,6], [3,7], [4,5], [4,6], [4,7], [5,6], [5,7], [6,7], [1,2,3], [1,2,4], [1,2,5], [1,2,6], [1,2,7], [1,3,4], [1,3,5], [1,3,6], [1,3,7], [1,4,5], [1,4,6], [1,4,7], [1,5,6], [1,5,7], [1,6,7], [2,3,4], [2,3,5], [2,3,6], [2,3,7], [2,4,5], [2,4,6], [2,4,7], [2,5,6], [2,5,7], [2,6,7], [3,4,5], [3,4,6], [3,4,7], [3,5,6], [3,5,7], [3,6,7], [4,5,6], [4,5,7], [4,6,7], [5,6,7]]\nassert     combinations_list([1,2,3,4,5,6,7,8]) == [[], [1], [2], [3], [4], [5], [6], [7], [8], [1,2], [1,3], [1,4], [1,5], [1,6], [1,7], [1,8], [2,3], [2,4], [2,5], [2,6], [2,7], [2,8], [3,4], [3,5], [3,6], [3,7], [3,8], [4,5], [4,6], [4,7], [4,8], [5,6], [5,7], [5,8], [6,7], [6,8], [7,8], [1,2,3], [1,2,4], [1,2,5], [1,2,6], [1,2,7], [1,2,8], [1,3,4], [1,3,5], [1,3,6], [1,3,7], [1,3,8], [1,4,5], [1,4,6], [1,4,7], [1,4,8], [1,5,6], [1,5,7], [1,5,8], [1,6,7], [1,6,8], [1,7,8], [2,3,4], [2,3,5], [2,3,6], [2,3,7], [2,3,8], [2,4,5], [2,4,6], [2,4,7], [2,4,8], [2,5,6], [2,5,7], [2,5,8], [2,6,7], [2,6,8], [2,7,8], [3,4,5], [3,4,6], [3,4,7], [3,4,8], [3,5,6], [3,5,7], [3,5,8], [3,6,7], [3,6,8], [3,7,8], [4,5,6], [4,5,7], [4,5,8], [4,6,7], [4,6,8], [4,7,8], [5,6,7], [5,6,8], [5,7,8], [6,7,8]]\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef word_abbreviation(a, b):\n    '''\n    Given two words, we need to find the abbreviation of the second word based on the first word.\n    abbreviation of a word is a string formed by shortening the first letter of the word.\n    For example, word abc is abbreviated as abc, where the first letter 'a' is abbreviated as 'a'.\n    Return the shortest possible abbreviations of the two words.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     combinations_list([1,2,3,4,5,6]) == [(1,2,3,4,5,6),(1,2,3,4,6,5),(1,2,4,3,5,6),(1,2,4,5,3,6),(1,3,2,4,5,6),(1,3,4,2,5,6),(1,4,2,3,5,6),(1,4,5,2,3,6)]\nassert     combinations_list([1,2,3,4,5]) == [(),(1,),(2,),(3,),(4,),(5,),(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5),(3,4),(3,5),(4,5)]\nassert     combinations_list([1]) == [(),(1,)]\nassert     combinations_list([]) == []\n\ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3], [1, 2, 5, 4, 3], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4], [1, 3, 4, 2, 5], [1, 3, 4, 5, 2], [1, 3, 5, 2, 4], [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 4, 5, 2, 3], [1, 5, 2, 3, 4], [1, 5, 2, 4, 3], [1, 5, 3, 2, 4], [1, 5, 3, 4, 2], [1, 5, 4, 2, 3], [2, 1, 3, 4, 5], [2, 1, 3, 5, 4], [2, 1, 4, 3, 5], [2, 1, 4, 5, 3], [2, 1, 5, 3, 4], [2, 3, 1, 4, 5], [2, 3, 1, 5, 4], [2, 3, 4, 1, 5], [2, 3, 4, 5, 1], [2, 3, 5, 1, 4], [2, 4, 1, 3, 5], [2, 4, 1, 5, 3], [2, 4, 3, 1, 5], [2, 4, 3, 5, 1], [2, 4, 5, 1, 3], [2, 4, 5, 3, 1], [2, 5, 1, 3, 4], [2, 5, 1, 4, 3], [2, 5, 3, 1, 4], [2, 5, 3, 4, 1], [2, 5, 4, 1, 3], [3, 1, 2, 4, 5], [3, 1, 2, 5, 4], [3, 1, 4, 2, 5], [3, 1, 4, 5, 2], [3, 1, 5, 2, 4], [3, 2, 1, 4, 5], [3, 2, 1, 5, 4], [3, 2, 4, 1, 5], [3, 2, 4, 5, 1], [3, 2, 5, 1, 4], [3, 3, 1, 2, 4], [3, 3, 1, 2, 5], [3, 3, 1, 4, 2], [3, 3, 1, 4, 5], [3, 3, 2, 1, 5], [3, 3, 2, 5, 4], [3, 3, 4, 1, 5], [3, 3, 4, 5, 1], [3, 4, 1, 2, 5], [3, 4, 1, 2, 5], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [3, 4, 5, 1, 2], [3, 4, 5, 2, 1], [3, 5, 1, 2, 4], [3, 5, 1, 4, 2], [3, 5, 2, 1, 4], [3, 5, 2, 4, 1], [3, 5, 4, 1, 2], [4, 1, 2, 3, 5], [4, 1, 2, 5, 3], [4, 1, 3, 2, 5], [4, 1, 3, 5, 2], [4, 1, 5, 2, 3], [4, 2, 1, 3, 5], [4, 2, 1, 5, 3], [4, 2, 3, 1, 5], [4, 2, 3, 5, 1], [4, 2, 5, 1, 3], [4, 2, 5, 3, 1], [4, 3, 1, 2, 5], [4, 3, 1, 5, 2], [4, 3, 2, 1, 5], [4, 3, 2, 5, 1], [4, 3, 5, 1, 2], [4, 3, 5, 2, 1], [4, 4, 1, 2, 5], [4, 4, 1, 5, 2], [4, 4, 2, 1, 5], [4, 4, 2, 5, 1], [4, 4, 5, 1, 2], [4, 4, 5, 2, 1], [4, 5, 1, 2, 3], [4, 5, 1, 3, 2], [4, 5, 2, 1, 3], [4, 5, 2, 3, 1], [4, 5, 3, 1, 2], [4, 5, 3, 2, 1], [5, 1, 2, 3, 4], [5, 1, 2, 4, 3], [5, 1, 3, 2, 4], [5, 1, 3, 4, 2], [5, 1, 4, 2, 3], [5, 2, 1, 3, 4], [5, 2, 1, 4, 3], [5, 2, 3, 1, 4], [5, 2, 3, 4, 1], [5, 2, 4, 1, 3], [5, 2, 4, 3, 1], [5, 3, 1, 2, 4], [5, 3, 1, 4, 2], [5, 3, 2, 1, 4], [5, 3, 2, 4, 1], [5, 3, 4, 1, 2], [5, 3, 4, 2, 1], [5, 4, 1, 2, 3], [5, 4, 1, 3, 2], [5, 4, 2, 1, 3], [5, 4, 2, 3, 1], [5, 4, 3, 1, 2], [5, 4, 3, 2, 1], [5, 5, 1, 2, 3], [5, 5, 1, 3, 2], [5, 5, 2, 1, 3], [5, 5, 2, 3, 1], [5, 5, 3, 1, 2], [5, 5, 3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4, 5, 6]) == [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 6, 5], [1, 2, 3, 5, 4, 6], [1, 2, 3, 5, 6, 4], [1, 2, 4, 3, 5, 6], [1, 2, 4, 3, 6, 5], [1, 2, 4, 5, 3, 6], [1, 2, 4, 5, 6, 3], [1, 2, 4, 6, 3, 5], [1, 3, 2, 4, 5, 6], [1, 3, 2, 4, 6, 5], [1, 3, 2, 5, 4, 6], [1, 3, 2, 5, 6, 4], [1, 3, 4, 2, 5, 6], [1, 3, 4, 2, 6, 5], [1, 3, 4, 5, 2, 6], [1, 3, 4, 5, 6, 2], [1, 3, 4, 6, 2, 5], [1, 3, 5, 2, 4, 6], [1, 3, 5, 2, 6, "
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_subarray_product([-2, -5, -1, 4, 5]) == 80\nassert     max_subarray_product([-3, -6, -9, -10, -8]) == -60\nassert     max_subarray_product([-8, -7, -2, 1, 7, -9]) == 80\nassert     max_subarray_product([-7, -7, -4, -1, -9, -7, -6, -3]) == -6\nassert     max_subarray_product([1, -2, 3, 4, -5, 6]) == 24\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([-2, 0, -1]) == 0\nassert     max_subarray_product([]) == 1\nassert     max_subarray_product([-2]) == -2\nassert     max_subarray_product([-2, -3, -4]) == 24\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_subarray_product([-2,3,-1,-4]) == 6\nassert     max_subarray_product([2,3,-1,-4]) == 6\nassert     max_subarray_product([-2,-3]) == -6\nassert     max_subarray_product([2,3,-1,4]) == 24\nassert     max_subarray_product([-2,3,-1,4]) == 24\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([2, 3, -1, 4]) == 8\nassert     max_subarray_product([-2, -3, -4]) == 24\nassert     max_subarray_product([-2, -3, -4, -1]) == 12\nassert     max_subarray_product([2, 3, -1]) == 6\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([2, 3, -2, 4, -2]) == 24\nassert     max_subarray_product([]) == 1\nassert     max_subarray_product([1]) == 1\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_subarray_product([5,4,3,2,1]) == 60\nassert     max_subarray_product([-5,1,-4,-3,-2]) == 120\nassert     max_subarray_product([-1,-2,-3,-4,-5]) == 120\nassert     max_subarray_product([1,2,3,4]) == 24\nassert     max_subarray_product([2,3,-2,4]) == 24\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 12\nassert     max_subarray_product([-2, -3, -4, -5, -10]) == 120\nassert     max_subarray_product([-4, -3, -2, -1, -5, -8, -7]) == 140\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([-2,0,-1]) == 0\nassert     max_subarray_product([-2,-3,-4,1,3]) == 12\nassert     max_subarray_product([-2,-3,-4,0,1,3]) == 6\nassert     max_subarray_product([-2,-3,-4,-5,0,1,3]) == 6\n"
    },
    {
        "number": 463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_subarray_product([1,2,3,4]) ==  (4, [1, 2, 3, 4])\nassert     max_subarray_product([-2,1,-3,4]) ==  (-3, [-2, 1, -3, 4])\nassert     max_subarray_product([-2,1,1,3,1,-4,-4]) ==  (-4, [-2, 1, 1, 3, 1])\nassert     max_subarray_product([1,-2,3,4]) ==  (-6, [1, -2, 3, 4])\nassert     max_subarray_product([-2,-3,4,-1,-2]) ==  (-4, [-2, -3, 4, -1])\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_value({1:2, 3:4, 5:6}, 6)\nassert     not check_value({1:2, 3:4, 5:6}, 7)\nassert     check_value({1:2, 3:4, 5:6}, 6)\nassert     not check_value({1:2, 3:4, 5:6}, 5)\nassert     not check_value({1:2, 3:4, 5:6}, 4)\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 3}, 'a') == True\nassert check_value({'a': 1, 'b': 2, 'c': 3}, 'd') == False\nassert check_value({'a': 1, 'b': 2}, 'b') == True\nassert check_value({'a': 1, 'b': 2}, 'c') == False\nassert check_value({'a': 1, 'b': 2}, 'a') == True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 1}, 'b')\nassert     check_value({'a': 1, 'b': 2, 'c': 1}, 'a')\nassert     check_value({'a': 1, 'b': 2, 'c': 1}, 'c')\nassert     not check_value({'a': 1, 'b': 2, 'c': 1}, 'd')\nassert     not check_value({'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 2}, 'f')\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, 1)\nassert     not check_value({'a': 1, 'b': 2, 'c': 1}, 1)\nassert     not check_value({'a': 1, 'b': 2, 'c': 2}, 1)\nassert     check_value({'a': 2, 'b': 2, 'c': 2}, 2)\nassert     check_value({'a': 2, 'b': 2, 'c': 2}, 'a')\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_value({'a': 1, 'b': 1}, False) is True\nassert     check_value({'a': 1, 'b': 1}, True) is False\nassert     check_value({'a': 1, 'b': 1}, True) is True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_value({'A':2, 'B':1, 'C':3}, 2) == True\nassert check_value({'A':2, 'B':1, 'C':3}, 5) == False\nassert check_value({}, 1) == True\nassert check_value({'A':2, 'B':1}, 3) == False\nassert check_value({'A':2, 'B':1}, 2) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_value({1:1,2:2,3:3}, 1) == True\nassert     check_value({1:1,2:2,3:3}, 2) == False\nassert     check_value({1:1,2:2,3:3}, 3) == True\nassert     check_value({1:1,2:2,3:3}, 4) == False\nassert     check_value({1:1,2:2,3:3}, 5) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_value({'a': 2, 'b': 3, 'c': 1}, 'a')\nassert     not check_value({'a': 2, 'b': 3, 'c': 1}, 'b')\nassert     not check_value({'a': 2, 'b': 3, 'c': 1}, 'c')\nassert     not check_value({'a': 2, 'b': 3, 'c': 1}, 'd')\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 5) == True\nassert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 3) == False\nassert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 2) == False\nassert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 1) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_value({'a':'a','b':'b','c':'c'}, 'a') == False\nassert     check_value({'a':'a','b':'b','c':'c'}, 'b') == False\nassert     check_value({'a':'a','b':'b','c':'c'}, 'c') == False\nassert     check_value({'a':'a','b':'b','c':'c'}, 'd') == True\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     drop_empty({1: '', 2: ''}) == {1: '', 2: ''}\nassert     drop_empty({}) == {}\nassert     drop_empty({'name': 'ivan', 'age': 25}) == {'name': 'ivan', 'age': 25}"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\nassert     drop_empty({'a': 1, 'b': 2, '': 3}) == {'a': 1, 'b': 2, 'c': 3}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, '': 4}) == {'a': 1, 'b': 2, 'c': 3}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, '': 4}) == {'a': 1, 'b': 2, 'c': 3}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     drop_empty({1:1, 2:2}) == {1:1, 2:2}\nassert drop_empty({1:1, 2:2, 3:3}) == {1:1, 2:2}\nassert drop_empty({1:1, 2:2, 3:3, 4:4}) == {1:1, 2:2, 3:3, 4:4}\n\ndef ask_yes_no(question):\n    '''\n    Ask a yes or no question and return their answer.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     drop_empty({'apple':'red', 'berry': 'black', 'cantaloupe': 'yellow'}) == \\\n        {'apple':'red', 'berry': 'black', 'cantaloupe': 'yellow'}\nassert     drop_empty({}) == {}\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\nassert     drop_empty({\"a\": 1, \"b\": 2}) == {'a': 1, 'b': 2}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3}) == {'a': 1, 'b': 2}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     drop_empty({'name':'tintin', 'age':18, 'gender':'male'}) == {'name':'tintin', 'age':18}\nassert     drop_empty({'name':'tintin', 'age':18, 'gender':'male', 'hobbies':[]}) == {'name':'tintin', 'age':18}\nassert     drop_empty({'name':'tintin', 'age':18, 'gender':'male', 'hobbies':[], 'dob':'19/01/1989'}) == {'name':'tintin', 'age':18, 'gender':'male', 'dob':'19/01/1989'}\nassert     drop_empty({'name':'tintin', 'age':18, 'gender':'male', 'hobbies':[], 'dob':'19/01/1989', 'has_children':False}) == {'name':'tintin', 'age':18, 'gender':'male', 'dob':'19/01/1989', 'has_children':False}\nassert     drop_empty({'name':'tintin', 'age':18, 'gender':'male', 'hobbies':[], 'dob':'19/01/1989', 'has_children':True, 'children':[{'name':'bob', 'age':18, 'gender':'male'}]}) == {'name':'tintin', 'age':18, 'gender':'male', 'dob':'19/01/1989', 'has_children':True, 'children':[{'name':'bob', 'age':18, 'gender':'male'}]}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'a':1}) == {'a':1}\nassert     drop_empty({'a':1,'b':'', 'c':3}) == {'a':1, 'b':'', 'c':3}\nassert     drop_empty({'a':1,'b':'', 'c':3,'d':''}) == {'a':1,'b':'', 'c':3}\nassert     drop_empty({'a':1,'b':'', 'c':3,'d':''}) == {'a':1,'b':'', 'c':3}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     drop_empty({\"x\": 1, \"y\": 2, \"z\": 3}) == {\"x\": 1, \"y\": 2, \"z\": 3}\nassert drop_empty({\"x\": 1, \"y\": \"\", \"z\": 3}) == {\"x\": 1, \"y\": 3}\nassert drop_empty({}) == {}\nassert drop_empty({1: 1, 2: 2, 3: 3}) == {1: 1, 2: 2, 3: 3}\nassert drop_empty({\"1\": 1, \"2\": \"\", \"3\": 3}) == {\"1\": 1, \"3\": 3}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     drop_empty(dict1) == {'a': ['a0', 'a1', 'a2', 'a3', 'a4'], 'b': ['b0', 'b1'], 'c': ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9'], 'd': ['d0', 'd1', 'd2', 'd3']}\nassert drop_empty(dict1) == {'a': ['a0', 'a1', 'a2', 'a3', 'a4'], 'b': ['b0', 'b1'], 'c': ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9'], 'd': ['d0', 'd1', 'd2', 'd3']}"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     drop_empty({'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2}\nassert     drop_empty({'a':1, 'b':2, 'c':'3'}) == {'a':1, 'b':2}\nassert     drop_empty({'a':1, 'b':'2', 'c':'3'}) == {'a':1, 'b':'2'}\nassert     drop_empty({'a':'1', 'b':'2', 'c':'3'}) == {'a':'1', 'b':'2'}\nassert     drop_empty({'a':1, 'b':'', 'c':3}) == {'a':1, 'b':''}\n"
    },
    {
        "number": 465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     drop_empty({'a':1,'b':2,'c':3}) == {'a':1,'b':2}\nassert     drop_empty({'a':1,'b':2,'c':3,'d':4}) == {'a':1,'b':2,'c':3}\nassert     drop_empty({'a':1,'b':2,'c':3,'d':4,'e':5}) == {'a':1,'b':2,'c':3,'d':4}\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_product([2, 3, -2, 4]) == 48\nassert     max_product([-2, 0, -1]) == 0\nassert     max_product([2]) == 2\nassert     max_product([]) == 1\nassert     max_product([-2, -1, 0, 1]) == 1\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_product([2,3,-2,4]) == 6\nassert     max_product([-2,0,-1]) == 0\nassert     max_product([-2,3,4,5,6]) == 720\nassert     max_product([-2,3,4,-5,-6]) == 120\nassert     max_product([0,1,-2,0,3]) == 0\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_product([-2, 3, -4, 5]) == 12\nassert     max_product([-4, 3, -2, 4]) == 24\nassert     max_product([-2, -3, -4, -5]) == 120\nassert     max_product([2, -3, 4, -5]) == 24\nassert     max_product([2, 3, 4, -5]) == 24\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert max_product([1,2,3,4,5]) == 120\nassert max_product([1,2,3,4,5]) == 120\nassert max_product([1,2,3,4,5]) == 120\nassert max_product([1,2,3,4,5]) == 120\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_product([10, 3, 7, 4, 8, 8, 9]) == 96\nassert     max_product([3, 4, 5, 5, 6]) == 120\nassert     max_product([1, 2, 3, 4, 5]) == 30\nassert     max_product([-1, -2, -3, -4, -5]) == 120\nassert     max_product([-1, -2, -3, -4, -5, -10, -11, -12]) == 120\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_product([1, 2, 3, 4, 5]) == 120\nassert     max_product([5, 2, 1, 2, 5, 2, 3, 2, 5]) == 120\nassert     max_product([4, 2, 5, 1, 2, 1, 2, 3, 3, 4]) == 16\nassert     max_product([4, 2, 3, 3, 4, 4, 5, 5, 1]) == 36\nassert     max_product([2, 3, 4, 1, 5]) == 24\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_product([2,3,4,5]) == 60\nassert     max_product([2,3,4,5,6]) == 720\nassert     max_product([1,2,3,4,5,6]) == 720\nassert     max_product([2,3,4,5,6,7]) == 504\nassert     max_product([2,3,4,5,6,7,8]) == 40320\n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_product([2, 3, -2, 4]) == 6\nassert     max_product([-2, 0, -1]) == 0\nassert     max_product([-2, 3, -4, 5, 6, -7, -8, 9]) == 360\nassert     max_product([-2, 3, -4, -5, -6, 7, 8, 9]) == 0\n\n\ndef min_product(arr):\n    '''\n    Write a function to find the minimum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (add_pairwise((1, 1, 1, 1))             == (2, 2, 2, 2))\nassert     (add_pairwise((1, 2, 3, 4, 5, 6))     == (2, 4, 6, 8, 10, 12))\nassert     (add_pairwise((9, 8, 7, 6, 5, 4, 3, 2, 1)) == (9, 9, 8, 7, 6, 5, 4, 3, 2))\nassert     (add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))     == (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26))\n\n\ndef test_add_pairs():\n    "
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_pairwise((1,2,3,4,5,6,7)) == (2,4,6,8,10,12,14)\nassert     add_pairwise((1,2,3,4,5,6)) == (2,4,6,8,10,12)\nassert     add_pairwise((1,2,3,4,5)) == (2,4,6,8,10,12)\nassert     add_pairwise((1,2,3,4)) == (2,4,6,8,10)\nassert     add_pairwise((1,2,3)) == (2,4,6)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_pairwise(('a', 'b', 'c')) == 'a+b+c', add_pairwise(('a', 'b', 'c'))\nassert     add_pairwise(('a', 'b', 'c', 'd')) == 'a+b+c+d', add_pairwise(('a', 'b', 'c', 'd'))\nassert     add_pairwise(('a', 'b', 'c', 'd', 'e')) == 'a+b+c+d+e', add_pairwise(('a', 'b', 'c', 'd', 'e'))\nassert     add_pairwise(('a', 'b', 'c', 'd', 'e', 'f')) == 'a+b+c+d+e+f', add_pairwise(('a', 'b', 'c', 'd', 'e', 'f'))\nassert     add_pairwise(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == 'a+b+c+d+e+f+g', add_pairwise(('a', 'b', 'c', 'd', 'e', 'f', 'g'))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_pairwise((1,2,3,4,5)) == (1+2, 2+3, 3+4, 4+5, 5+6)\nassert     add_pairwise((1,2,3,4,6)) == (1+2, 2+3, 3+4, 4+5, 6+7)\nassert     add_pairwise((1,2,4,5,6)) == (1+2, 2+3, 3+4, 4+5, 5+6)\nassert     add_pairwise((1,3,5,7)) == (1+3, 3+5, 5+7, 7+8)\nassert     add_pairwise((1,3,6,7)) == (1+3, 3+6, 6+7, 7+8)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_pairwise((1,3,5,7,9)) == (2,4,6,8,10), \\\n            '(1,3,5,7,9) => %s' % (add_pairwise((1,3,5,7,9)))\nassert     add_pairwise((-1,-2,3,4,6,7,8)) == (0,-2,-4,6,8,10,12), \\\n            '(-1,-2,3,4,6,7,8) => %s' % (add_pairwise((-1,-2,3,4,6,7,8)))\nassert     add_pairwise((1,2,3,4,5,6,7,8,9,10)) == (2,4,6,8,10,12,14,16,18,20), \\\n            '(1,2,3,4,5,6,7,8,9,10) => %s' % (add_pairwise((1,2,3,4,5,6,7,8,9,10)))"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_pairwise((1, 2, 3, 4, 5, 6)) ==  ((2, 4, 6, 8, 10, 12))\nassert     add_pairwise((-1, -2, -3, -4, -5, -6)) ==  ((-2, -4, -6, -8, -10, -12))\nassert     add_pairwise((-10, -10, -10, -10, -10, -10)) ==  ((-20, -20, -20, -20, -20, -20))\nassert     add_pairwise((-10, -10, -10, -10, -10, -10)) ==  ((-20, -20, -20, -20, -20, -20))\nassert     add_pairwise((-10, -10, -10, -10, -10, -10)) ==  ((-20, -20, -20, -20, -20, -20))\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_pairwise(('a', 'b')) == ('a', 'b')\nassert     add_pairwise((1, 2)) == (2, 4)\nassert     add_pairwise((1, 2, 3)) == (3, 6)\nassert     add_pairwise((1, 2, 3, 4)) == (4, 8)\nassert     add_pairwise((-1, -2)) == (-2, 0)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_pairwise([(1,2), (2,3), (3,4)]) == (0, 4, 7)\nassert     add_pairwise([(1,2), (3,4)]) == (2, 4, 6)\nassert     add_pairwise([(2,4)]) == (0, 4, 2)\nassert     add_pairwise([(1,2), (3,4), (5,6)]) == (0, 7, 12)\nassert     add_pairwise([(1,2), (3,4)]) == (2, 4, 6)\n"
    },
    {
        "number": 470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_pairwise((1,2,3)) == (2,4,6)\nassert     add_pairwise((1,2,3,4)) == (2,4,6,8)\nassert     add_pairwise((1,2,3,4,5)) == (2,4,6,8,10)\nassert     add_pairwise((1,2,3,4,5,6,7)) == (2,4,6,8,10,12,14)\nassert     add_pairwise((1,2,3,4,5,6,7,8,9)) == (2,4,6,8,10,12,14,16,18)\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_remainder([1,2,3,4,5], 5) == 1\nassert     find_remainder([1,2,3,4,5], 1) == 0\nassert     find_remainder([1,2,3,4,5], 3) == 12\nassert     find_remainder([1,2,3,4,5], 2) == 0\nassert     find_remainder([1,2,3,4,5], 4) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_remainder([2,4,6], 10) == 8, 'Error 1'\nassert     find_remainder([3,6,9,12], 10) == 4, 'Error 2'\nassert     find_remainder([3,6,9,12], 15) == 12, 'Error 3'\nassert     find_remainder([3,6,9,12], 30) == 0, 'Error 4'\nassert     find_remainder([3,6,9,12], 40) == 0, 'Error 5'\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_remainder([2,3,4], 8) == 4\nassert     find_remainder([3,4,5], 10) == 1\nassert     find_remainder([10,3,7,4], 4) == 2\n\n\ndef find_sequence(n):\n    '''\n    Write a python function to find the sum of the first n consecutive numbers modulo 10.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_remainder([1,2,3,4], 5) == 1\nassert     find_remainder([2,3,4,5], 6) == 1\nassert     find_remainder([1,2,3,4,5,6], 7) == 1\nassert     find_remainder([1,2,3,4,5,6,7], 8) == 1\nassert     find_remainder([1,2,3,4,5,6,7,8], 9) == 1\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_remainder([2, 4, 8, 5], 25) == 16\nassert     find_remainder([2, 4, 8, 5], 1000) == 240\nassert     find_remainder([1, 2, 3, 4, 5], 100) == 50\nassert     find_remainder([10, 7, 5, 3, 2, 4, 8, 1, 9], 23) == 5"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_remainder([1,2,3,4,5,6,7], 3) == 2\nassert     find_remainder([1,2,3,4,5,6,7], 2) == 2\nassert     find_remainder([1,2,3,4,5,6,7], 7) == 0\nassert     find_remainder([1,2,3,4,5,6,7], 1) == 0\nassert     find_remainder([1,2,3,4,5,6,7], 5) == 2\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_remainder(arr, 2) == 1\nassert     find_remainder(arr, 3) == 0\nassert     find_remainder(arr, 4) == 0\nassert     find_remainder(arr, 5) == 0\nassert     find_remainder(arr, 21) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_remainder([1,2,3,4,5],    5) == 10\nassert     find_remainder([2,3,4,5],    5) == 10\nassert     find_remainder([3,4,5],     5) == 0\nassert     find_remainder([1,2,3,4,5,6],    5) == 0\nassert     find_remainder([2,3,4,5,6],     5) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True\nassert     check_Consecutive([1,2,3,6]) == False\nassert     check_Consecutive([1,2,4,5]) == False\nassert     check_Consecutive([1,2,4,5,6]) == False\nassert     check_Consecutive([1,2,3,4,6]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True\nassert     check_Consecutive([1, 2, 4, 5]) == True\nassert     check_Consecutive([1, 2, 4, 6]) == False\nassert     check_Consecutive([1, 3, 5]) == False\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_Consecutive([\"4\",\"5\",\"6\"]) == False\nassert     check_Consecutive([\"5\",\"7\",\"8\",\"9\",\"10\",\"11\"]) == True\nassert     check_Consecutive([\"4\",\"6\",\"8\",\"10\"]) == False\nassert     check_Consecutive([]) == True\n\ndef find_disappeared_number(l):\n    '''\n    Write a python function to find the disappeared number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6,7,8,9,10]) == True\nassert     check_Consecutive([1,2,3,4,6,7,8,9,10]) == True\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9]) == False\nassert     check_Consecutive([1,2,3,4,5,6,7]) == False\nassert     check_Consecutive([1,2,3,4,5,6,7,8]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_Consecutive(range(10)) == True\nassert     check_Consecutive([1,2,4,5,7,8,9,10]) == True\nassert     check_Consecutive([1,2,3,4,5]) == False\nassert     check_Consecutive([1,3,5,7,9]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6]) is True\nassert     check_Consecutive([1, 2, 3, 4, 7]) is False\nassert     check_Consecutive([1, 3, 5, 6, 7, 8, 9]) is False\nassert     check_Consecutive([1, 2, 3, 4, 8, 8, 8]) is False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == True\nassert     check_Consecutive([1, 3, 4]) == False\nassert     check_Consecutive([1, 2, 4]) == False\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == True\nassert     check_Consecutive([1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5])\nassert     check_Consecutive([1, 2, 4, 5, 6])\nassert     check_Consecutive([1, 2, 4, 6, 7])\nassert     check_Consecutive([1, 2, 3, 5, 6, 7, 8, 9, 10])\nassert     check_Consecutive([]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6,7]) == True\nassert     check_Consecutive([1,2,4,5,6,7]) == False\nassert     check_Consecutive([1,2,4,5,6]) == False\nassert     check_Consecutive([2,4,6]) == False\nassert     check_Consecutive([2,4,6,9]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_Consecutive(l) == True\n\nl = range(0,4)\nassert check_Consecutive(l) == False\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n    \ndef list_comprehension(initial_list):\n    '''\n    Write a function to return a list where each element is the first element of the corresponding tuple in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tuple_intersection(('a', 'b', 'c'), ('b', 'a', 'c')) == ('b', 'a', 'c')\nassert     tuple_intersection((1, 2), (3, 4)) == ()\nassert     tuple_intersection((1, 2, 'a'), (3, 4, 'a')) == ('a',)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tuple_intersection((1,2,3,4,5,6,7),(6,7,3,2,1,4,5)) == (6, 7)\nassert tuple_intersection((6,7,3,2,1,4,5),(1,2,3,4,5,6,7)) == (6, 7)\nassert tuple_intersection((6,7,3,2,1,4,5),(6,7,2,4,1,3,5)) == (6, 7)\nassert tuple_intersection((6,7,3,2,1,4,5),(5,4,3,2,1,6,7)) == (5, 4)\nassert tuple_intersection((6,7,3,2,1,4,5),(5,4,3,2,1,6,7)) == (5, 4)\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tuple_intersection(\n    [\n        (1, 2), (3, 4), (5, 6)\n    ],\n    [\n        (1, 2), (3, 4), (5, 6)\n    ]) == [(1, 2), (5, 6)]\nassert     tuple_intersection(\n    [\n        (1, 2), (3, 4), (5, 6)\n    ],\n    [\n        (1, 3), (5, 6), (7, 8)\n    ]) == [(1, 3), (5, 6)]\nassert     tuple_intersection(\n    [\n        (1, 2), (3, 4), (5, 6), (7, 8)\n    ],\n    [\n        (1, 3), (5, 6), (7, 8), (9, 10)\n    ]) == [(1, 3), (5, 6), (7, 8)]\nassert     tuple_intersection(\n    [\n        (1, 2), (3, 4), (5, 6), (7, 8)\n    ],\n    [\n        (1, 3), (5, 6), (7, 8), (9, 10)\n    ],\n    [\n        (0, 1), (2, 3), (4, 5), (6, 7), (8, 9)\n    ]) == [(1, 3), (5, 6), (7, 8)]\nassert     tuple_intersection(\n    [\n        (1, 2), (3, 4), (5, 6), (7, 8)\n    ],\n    [\n        (1, 3), (5, 6), (7, 8), (9, 10)\n    ],\n    [\n        (0, 1), (2, 3), (4, 5), (6, 7), (8, 9)\n    ],\n    [\n        (0, 2), (2, 4), (4, 6), (6, 8), (8, 10)\n    ]) == [(1, 3), (5, 6), (7, 8)]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tuple_intersection(\n                ([1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]),\n                ([5,6,7,8], [9,10,11,12], [13,14,15,16], [1,2,3,4])) ==\n            ([5,6,7,8], [9,10,11,12], [13,14,15,16])\n\ndef nth_to_last(test_list, n):\n    '''\n    Write a function to return the nth to last element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (1,2,3,4,5) == tuple_intersection([(1,3), (2,4), (3,5)], [(3,4), (5,6), (8,9), (2,4), (2,4), (1,5)])\nassert     (1,2,3,4,5) == tuple_intersection([(1,3), (2,4), (3,5)], [(1,5), (2,4), (3,6), (5,9), (5,9), (1,2), (3,4)])\n\ndef intersection(test_list1, test_list2):\n    '''\n    Write a function to find the intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (1, 2) == tuple_intersection(\n    [(1, 2), (3, 4), (5, 6)], \n    [(2, 3), (4, 5), (7, 8)]\n)\nassert (3, 4) == tuple_intersection([(1, 2), (3, 4), (5, 6)], [(-1, -2), (3, 4), (5, 6)])\nassert [(-1, -2)] == tuple_intersection([(-1, -2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)])\nassert [] == tuple_intersection([(1, 2), (3, 4), (5, 6)], [(2, 3), (4, 5), (7, 8)])\nassert [] == tuple_intersection([(1, 2), (3, 4), (5, 6)], [(2, 3), (4, 5), (7, 8), (9, 10), (11, 12)])\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (('a', 'b'), ('b', 'a')) == tuple_intersection(('a', 'b'), ('b', 'a'))\nassert     (('a', 'b'), ('a', 'b')) == tuple_intersection(('a', 'b'), ('a', 'b'))\nassert     (('a', 'b'), ('a', 'b')) == tuple_intersection(('a', 'b'), ('b', 'a'))\nassert     (('a', 'b'), ('b', 'a')) == tuple_intersection(('b', 'a'), ('a', 'b'))\nassert     (('a', 'b'), ('b', 'a')) == tuple_intersection(('b', 'a'), ('a', 'b'))\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tuple_intersection([(1,2),(3,4)],[(1,2),(3,4)]) == [(1,2),(3,4)]\nassert     tuple_intersection([(1,2),(3,4)],[(3,4),(1,2)]) == [(1,2),(3,4)]\nassert     tuple_intersection([(1,2),(3,4)],[(3,4),(1,2),(3,4),(1,2)]) == [(1,2),(3,4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6),(7,8)],[(1,2),(3,4),(5,6),(7,8)]) == [(1,2),(3,4),(5,6),(7,8)]\nassert     tuple_intersection([(1,2),(3,4),(5,6),(7,8),(1,2)],[(1,2),(3,4),(5,6),(7,8),(1,2)]) == [(1,2),(3,4),(5,6),(7,8)]\n"
    },
    {
        "number": 473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tuple_intersection([(1, 2), (3, 4)], [(2, 3), (1, 3)]) == [(1, 3)]\nassert     tuple_intersection([(1, 2), (2, 3), (3, 4)], [(2, 3), (1, 3), (1, 2)]) == [(1, 2), (1, 3)]\nassert     tuple_intersection([(1, 2), (3, 4)], [(1, 3), (1, 2)]) == [(1, 3)]\nassert     tuple_intersection([(1, 2), (3, 4), (5, 6)], [(1, 3), (1, 2)]) == [(1, 3), (1, 2)]\nassert     tuple_intersection([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], [(1, 3), (1, 2), (5, 6)]) == [(1, 3), (1, 2), (5, 6)]\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_char(\"asd\",\"d\",\"z\") == \"asz\"\nassert     replace_char(\"asd\",\"z\",\"d\") == \"asz\"\nassert     replace_char(\"asd\",\"d\",\"d\") == \"asd\"\nassert     replace_char(\"asd\",\"a\",\"z\") == \"szd\"\nassert     replace_char(\"asd\",\"z\",\"a\") == \"azd\"\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nreplace_char('I like Python', 'i', 'o')\nreplace_char('I like Python', 'l', 'o')\nreplace_char('I like Python', 'o', 'a')\nreplace_char('I like Python', 'a', 'o')\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_char('This is a test String', 'i','I') == 'ThIs is a test StRng'\nassert     replace_char('This is a test String','s','S') == 'This is a test String'\nassert     replace_char('This is a test String', 'e','E') == 'This is a test String'\nassert     replace_char('This is a test String', 'a','A') == 'This is a test StRng'\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_char(\"abcd\",\"a\",\"a\") == \"aabcd\"\nassert     replace_char(\"abcd\",\"b\",\"b\") == \"abcd\"\nassert     replace_char(\"abcd\",\"c\",\"c\") == \"abcd\"\nassert     replace_char(\"abcd\",\"d\",\"d\") == \"abcd\"\nassert     replace_char(\"abcd\",\"e\",\"e\") == \"abcd\"\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_char(\"\",\"_\",' ') == \"\"\nassert     replace_char(\"a\",'_','') == \"\"\nassert     replace_char(\"cde\",\"_\",' ') =='cde'\nassert     replace_char(\"abcdef\",'_','') == 'abcdef'\nassert     replace_char(\"abcdef\",'a','') == 'bcdee'\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_char('ABC','A', 'X') == 'BCX'\nassert     replace_char('ABC','X', 'C') == 'BCC'\nassert     replace_char('ABC','C', 'X') == 'BCC'\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_char('this is a test','s','p') == 'thp is a test', 'Test 01'\nassert     replace_char('this is a test','s','p') == 'thp is a test', 'Test 02'\nassert     replace_char('I like apples','a','w') == 'I like wwps', 'Test 03'\nassert     replace_char('I like apples','b','w') == 'I like wwpI like wwpI like wwpw', 'Test 04'\nassert     replace_char('I like apples','z','w') == 'I like wwpI like wwpI like wwpw', 'Test 05'\nprint('Test passed!')\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_char('cat', 'c', 'x') == 'xat'\nassert     replace_char('cat', 't', 'x') == 'catx'\nassert     replace_char('cat', 'x', 'x') == 'catx'\n\ndef group_words(str1):\n    '''\n    Write a function to check whether a string contains all letters\n    from 'a' to 'z' or not.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_char('babaa', 'a', 'b') == 'bbaab'\nassert     replace_char('babaa', 'a', 'b') == 'bbaab'\nassert     replace_char('abba', 'b', 'c') == 'abccc'\nassert     replace_char('aaaa', 'a', 'b') == 'bbbb'\nassert     replace_char('aaa', 'a', 'b') == 'baa'\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_counter({'a': 10, 'b': 20, 'c': 30, 'd': 40}) == [('a', 10), ('b', 20), ('c', 30), ('d', 40)]\nassert     sort_counter({'d': 10, 'a': 3, 'b': 4, 'c': 2}) == [('a', 3), ('b', 4), ('c', 2), ('d', 10)]\n\ndef find_anagrams(s1, s2):\n    '''\n    Write a function to find the anagrams of a word from a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_counter({\n    'a': 1,\n    'b': 2,\n    'c': 3\n}) == [('b', 2), ('c', 3), ('a', 1)], 'incorrect'\nassert     sort_counter({\n    'a': 1,\n    'c': 3,\n    'b': 2\n}) == [('b', 2), ('c', 3), ('a', 1)], 'incorrect'\nassert     sort_counter({\n    'a': 3,\n    'b': 2,\n    'c': 1\n}) == [('c', 1), ('b', 2), ('a', 3)], 'incorrect'\nassert     sort_counter({\n    'c': 1,\n    'b': 2,\n    'a': 3\n}) == [('c', 1), ('b', 2), ('a', 3)], 'incorrect'\nassert     sort_counter({\n    'a': 1,\n    'b': 2,\n    'c': 3,\n    'd': 4,\n    'e': 5\n}) == [('c', 3), ('b', 2), ('a', 1), ('e', 5), ('d', 4)], 'incorrect'\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_counter({'z': 10, 'a': 8, 'c': 1, 'r': 2, 'b': 3}) == \\\n            [('a', 8), ('b', 3), ('c', 1), ('r', 2), ('z', 10)]\nassert sort_counter({'a': 7, 'c': 3, 'b': 8, 'd': 2, 'e': 1}) == \\\n            [('a', 7), ('b', 8), ('c', 3), ('d', 2), ('e', 1)]\n\ndef sort_counter_2(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x:x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_counter({'a': 5, 'b': 2, 'c': 3}) == [('c', 3), ('a', 5), ('b', 2)]\nassert     sort_counter({'a': 2, 'b': 4, 'c': 9}) == [('c', 9), ('a', 2), ('b', 4)]\nassert     sort_counter({'a': 4, 'b': 2, 'c': 1}) == [('c', 1), ('a', 4), ('b', 2)]\nassert     sort_counter({'a': 3, 'b': 2, 'c': 1}) == [('c', 1), ('a', 3), ('b', 2)]\nassert     sort_counter({'a': 2, 'b': 3, 'c': 1}) == [('c', 1), ('a', 2), ('b', 3)]\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_counter({'a':1, 'b':2, 'c':3}) == [('c', 3), ('b', 2), ('a', 1)]\nassert     sort_counter({'d':2, 'e':3, 'a':1, 'b':3}) == [('b', 3), ('a', 1), ('e', 3), ('d', 2)]\n\ndef merge_dicts(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_counter({1:2, 2:3, 3:4, 4:5, 5:6}) == [1, 2, 3, 4, 5, 6]\nassert     sort_counter({'z':12, 'a':14, 'y':5, 'x':6}) == ['x', 'y', 'z', 'a']\nassert     sort_counter({'m':1, 'n':1, 'z':1, 'a':2, 'x':1}) == ['x', 'a','m', 'n', 'z']\nassert     sort_counter({'x':1, 'z':1, 'a':2,'m':1, 'n':1}) == ['x', 'z', 'a','m', 'n']\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_counter({'m':2, 'a':3, 'n':1}) == [('a', 3), ('m', 2), ('n', 1)]\nassert     sort_counter({'n':1, 'a':3,'m':2}) == [('a', 3), ('m', 2), ('n', 1)]\nassert     sort_counter({'n':1, 'a':2,'m':3}) == [('a', 2), ('m', 3), ('n', 1)]\nassert     sort_counter({'a':3,'m':2, 'n':1}) == [('a', 3), ('m', 2), ('n', 1)]\nassert     sort_counter({'m':2, 'a':3, 'n':1}) == [('a', 3), ('m', 2), ('n', 1)]\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_counter({'a':1, 'b':2, 'c':3}) == [('c', 3), ('a', 1), ('b', 2)]\nassert sort_counter({'a':5, 'b':3, 'c':4}) == [('a', 5), ('b', 3), ('c', 4)]\nassert sort_counter({'a':4, 'b':3, 'c':2}) == [('a', 4), ('b', 3), ('c', 2)]\nassert sort_counter({'a':1, 'b':2, 'c':1}) == [('a', 1), ('c', 1), ('b', 2)]\nassert sort_counter({'a':1, 'b':2, 'c':1}) == [('a', 1), ('b', 2), ('c', 1)]\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_counter({'a': 2, 'c': 1, 'b': 3}) == 'a', 'incorrect'\nassert     sort_counter({'a': 4, 'c': 1, 'b': 3}) == 'b', 'incorrect'\nassert     sort_counter({'a': 5, 'c': 1, 'b': 3}) == 'c', 'incorrect'\nassert     sort_counter({'a': 2, 'c': 1, 'b': 3}) == 'a', 'incorrect'\nassert     sort_counter({'a': 5, 'c': 1, 'b': 4}) == 'a', 'incorrect'\n"
    },
    {
        "number": 475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_counter({1:4, 2:3, 3:2, 4:1}) == {1:1, 2:2, 3:3, 4:4}\nassert     sort_counter({1:2, 2:3, 3:4, 4:1}) == {1:1, 2:2, 3:3, 4:4}\nassert     sort_counter({'a':'b', 'c':'d', 'd':'e', 'e':'f'}) == {'a':'a', 'c':'c', 'd':'d', 'e':'e', 'f':'f'}\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     big_sum([2, 4, 6, 8, 10]) == 26\nassert     big_sum([]) == 0\nassert     big_sum([-1, -2, -3]) == 0\nassert     big_sum([1, 2, 3, 4, 5]) == 15\nassert     big_sum([0]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     big_sum([-1, -3, -5, -8, -13]) == -13, \"Return %s, not -13\" % big_sum([-1, -3, -5, -8, -13])\nassert     big_sum([-1, -3, -5, -8, -13]) == -11, \"Return %s, not -11\" % big_sum([-1, -3, -5, -8, -13])\nassert     big_sum([-1, -3, -5, -8, -13]) == -13, \"Return %s, not -13\" % big_sum([-1, -3, -5, -8, -13])\nassert     big_sum([-1, -3, -5, -8, -13]) == -13, \"Return %s, not -13\" % big_sum([-1, -3, -5, -8, -13])\nassert     big_sum([-1, -3, -5, -8, -13]) == -11, \"Return %s, not -11\" % big_sum([-1, -3, -5, -8, -13])\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     big_sum([1,2,3,4,5]) == 14, 'big_sum: wrong answer'\nassert     big_sum([-1,-2,-3,-4,-5]) == -14, 'big_sum: wrong answer'\nassert     big_sum([0,0,0]) == 0, 'big_sum: wrong answer'\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     big_sum([5, 2, 3, -1, 4]) == 5\nassert     big_sum([1, 2, 3, 4, 5]) == 15\nassert     big_sum([10, 1]) == 11\nassert     big_sum([-1, -2, -3, -4, -5]) == -15\nassert     big_sum([2, 1]) == 3\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n\ndef add_lists(lst1, lst2):\n    '''\n    Write a python function to add two lists.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     big_sum([1,2,3,4,5]) == 10\nassert     big_sum([1,2,3,4,1]) == 12\nassert     big_sum([5,5,5,5,5]) == 100\nassert     big_sum([]) == 0\nassert     big_sum([0]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     big_sum([1,2,3,4,5]) == 10, \"Error!\"\nassert     big_sum([1,2,3,4,-5]) == 5, \"Error!\"\nassert     big_sum([1,2,3,4,-5,10]) == 15, \"Error!\"\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     big_sum([1,2,3,4,5,6]) == 21\nassert     big_sum([-1, -2, -3, -4, -5, -6]) == -21\nassert     big_sum([-1,2,-3,4,-5,6]) == 17\nassert     big_sum([100]) == 100\nassert     big_sum([]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     big_sum([1, 2, 3, 4, 5]) == 15\nassert     big_sum([-1, -2, -3, -4, -5]) == -15\nassert     big_sum([-1.5, -2.5, -3.5, -4.5, -5.5]) == -15.5\nassert     big_sum([0, 0, 0, 0, 0]) == 0\nassert     big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n"
    },
    {
        "number": 476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     big_sum([1,3,5,7,9]) == 10\nassert     big_sum([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     big_sum([1,2,3,4,5,6,7,8,9,10, 11, 12, 13, 14, 15, 16]) == 106\nassert     big_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]) == -166\nassert     big_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -166\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_lower('abc') == True\nassert     is_lower('ABC') == True\nassert     is_lower('Abc') == False\nassert     is_lower('ABCD') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (is_lower('HELLO') == True)\nassert     (is_lower('hello') == True)\nassert     (is_lower('Hell') == False)\nassert     (is_lower('heLlO') == False)\nassert     (is_lower('hElL0') == False)\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         is_lower('A') == True\nassert         is_lower('a') == True\nassert         is_lower('$') == False\nassert         is_lower('$#') == True\nassert         is_lower('$#f') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_lower(\"Hi\") == True\nassert     is_lower(\"hi\") == True\nassert     is_lower(\"hello\") == False\n\nassert     is_lower(\"Hello\") == False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (is_lower('stressed') =='stressed')\nassert     (is_lower('STressed') =='stressed')\nassert     (is_lower('stressed1') =='stressed')\nassert     (is_lower('stressed12') =='stressed')\nassert     (is_lower('stressed1234') =='stressed')\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_lower('this is a test') == True\nassert     is_lower('TEST IS A TEST') == True\nassert     is_lower('this is a test!') == True\nassert     is_lower('This is a Test!') == True\nassert     is_lower('THIS IS A TEST!') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_lower('abcd') == True\nassert     is_lower('Abcd') == True\nassert     is_lower('AbcD') == True\nassert     is_lower('Abc_D') == True\nassert     is_lower('Abc_d') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_lower('heLLo') == True\nassert     is_lower('HeLLo') == True\nassert     is_lower('hello') == True\nassert     is_lower('HELLo') == True\nassert     is_lower('HelLo') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (is_lower(\"Coding For All!\") == True)\nassert     (is_lower(\"Coding For All\") == False)\nassert     (is_lower(\"Coding For All 2\") == False)\nassert     (is_lower(\"Coding For All 3\") == True)\nassert     (is_lower(\"Coding For All 4\") == False)\n"
    },
    {
        "number": 477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_lower('ABc') == False\nassert     is_lower('abc') == True\nassert     is_lower('AbC') == True\nassert     is_lower('ABC') == True\nassert     is_lower('AbC1234') == True\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     'Hello World' == remove_lowercase('Hello World')\nassert     'hello' == remove_lowercase('Hello World')\nassert     'HELLO' == remove_lowercase('Hello World')\nassert     'HELLOWORLD' == remove_lowercase('Hello World')\n\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_lowercase('mAT') == 'AMT'\nassert     remove_lowercase('mATn') == 'AMTN'\nassert     remove_lowercase('MAtt') == 'AMT'\nassert     remove_lowercase('MATn') == 'AMTN'\n\ndef remove_numbers(str1):\n    '''\n    Write a function to remove the characters from a given string that have to be\n    removed because they are numerical values.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_lowercase('WELCOME') == 'W'\nassert     remove_lowercase('Hello') == 'H'\nassert     remove_lowercase('hello') == 'H'\nassert     remove_lowercase('HELLO') == 'H'\nassert     remove_lowercase('Hello There') == 'HTH'\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     re.sub('[a-z]', '', 'aaa') == 'aaa'\nassert     re.sub('[a-z]', '', 'Abc') == ''\nassert     re.sub('[a-z]', '', 'ABC') == 'ABC'\nassert     re.sub('[a-z]', '', 'Abcdef') == 'Abcdef'\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_lowercase('This is a string') == 'This is string'\nassert     remove_lowercase('String with lowercase') == 'String with lowercase'\nassert     remove_lowercase('String with Mixed Case') == 'String with Mixed Case'\nassert     remove_lowercase('String with spacial characters and numbers') == 'String with spacial characters and numbers'\nassert     remove_lowercase('String with no lowercase characters') == 'String with no lowercase characters'\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_lowercase('The quick Brow Fox') == 'The quick Brow Fox'\nassert     remove_lowercase('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.') == 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_lowercase(\"hello\") == \"hll\"\nassert     remove_lowercase(\"Hello\") == \"Hll\"\nassert     remove_lowercase(\"Python\") == \"Phn\"\nassert     remove_lowercase(\"hello world\") == \"hll wrd\"\nassert     remove_lowercase(\"\") == \"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_lowercase('Hello') == 'Hello'\nassert     remove_lowercase('HELLO') == 'HELLO'\nassert     remove_lowercase('hello') == 'hello'\nassert     remove_lowercase('HELLO!') == 'HELLO!'\nassert     remove_lowercase('Hello world!') == 'Hello world!'\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_lowercase('Can we speak the word of Taj Mahal?') == 'CAN WE SPEAK THE WORD OF TAJ MAHAL?'\nassert     remove_lowercase('Hello, how are you?') == 'HELLO, HOW ARE YOU?'\nassert     remove_lowercase('The quick brown fox jumped over the lazy dog.') == 'THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG.'\nassert     remove_lowercase('') == ''\n\ndef insert_lowercase(str1):\n    '''\n    Write a function to insert lowercase substrings into a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_lowercase('the sky is blue') ==' the  sky is blue'\nassert     remove_lowercase('the sky is blue') == 'the sky is blue'\nassert     remove_lowercase('the sky is blue') == 'the sky is blue'\nassert     remove_lowercase('The sky is blue') == 'The sky is blue'\nassert     remove_lowercase('The sky is blue') == 'The sky is blue'\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     first_Digit(4813) == 3\nassert     first_Digit(3) == 3\nassert     first_Digit(1) == 1\nassert     first_Digit(3.14) == 3\nassert     first_Digit(0) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     first_Digit(45453) == 4\nassert     first_Digit(4545) == 4\nassert     first_Digit(55555) == 5\nassert     first_Digit(22) == 2\nassert     first_Digit(3212) == 2\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     first_Digit(12) == 2\nassert     first_Digit(53) == 3\nassert     first_Digit(89) == 0\nassert     first_Digit(0) == 0\nassert     first_Digit(46) == 4\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     first_Digit(4321)    == 2 \nassert     first_Digit(12345)    == 1\nassert     first_Digit(9876)    == 8\nassert     first_Digit(321)    == 2\nassert     first_Digit(0)    == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     first_Digit(12) == 2\nassert     first_Digit(1234) == 1\nassert     first_Digit(123456789) == 0\nassert     first_Digit(9) == 9\nassert     first_Digit(1234) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     first_Digit(54321) == 5\nassert     first_Digit(6) == 6\nassert     first_Digit(0) == 0\nassert     first_Digit(10) == 1\nassert     first_Digit(12345) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     first_Digit(12) == 1\nassert     first_Digit(1234) == 1\nassert     first_Digit(12342634) == 1\nassert     first_Digit(123426342634) == 1\nassert     first_Digit(1234263426342634) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     first_Digit(10) == 1\nassert     first_Digit(0) == 0\nassert     first_Digit(123456789) == 1\nassert     first_Digit(-99999) == 9\n\ndef double_Digit(n) :\n    '''\n    Write a python function to find the double digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     first_Digit(1243) == 1\nassert     first_Digit(3425) == 4\nassert     first_Digit(1233) == 1\nassert     first_Digit(0) == 0\nassert     first_Digit(4.43) == 4\n"
    },
    {
        "number": 479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     first_Digit(1337) == 1\nassert     first_Digit(23456789) == 1\nassert     first_Digit(987654321) == 1\nassert     first_Digit(0) == 0\n\ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8])     == [1, 3, 5, 7]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])     == [1, 3, 5, 7, 9, 11]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])     == [1, 3, 5, 7, 9, 11, 13]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [3,5,7]     == Split([3,5,7,9,10,11,12,13,14,15])\nassert     [3,7,9,11]     == Split([3,5,7,9,10,11,12,13,14,15])\nassert     [3,5,7,9]     == Split([3,5,7,9,10,11,12,13,14,15])\nassert     [3,5,9]     == Split([3,5,7,9,10,11,12,13,14,15])\nassert     [3,7,9,11,13]     == Split([3,5,7,9,10,11,12,13,14,15])\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 5, 3, 7]     == Split([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 3, 5, 7]     == Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     [1]             == Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nassert     []             == Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nassert     [1, 3, 5, 7, 9, 11]     == Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7], \"incorrect\"\nassert     Split([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7], \"incorrect\"\nassert     Split([-1, -2, -3, -4, -5, -6, -7, -8]) == [-1, -3, -5, -7], \"incorrect\"\nassert     Split([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == [-1, 1, 3, 5, 7], \"incorrect\"\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11,13], \"Oops\"\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,3,5,7,9,11,13,15], \"Oops\"\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [1,3,5,7,9,11,13,15,17], \"Oops\"\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,3,5,7,9,11,13,15,17,19], \"Oops\"\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == [1,3,5,7,9,11,13,15,17,19,21], \"Oops\"\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5]\nassert     Split([1,3,5,7,9,11]) == [1,3,5,7,9]\nassert     Split([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == [-1,-3,-5,-7,-9]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6]) == [1,3,5]\nassert     Split([1]) == [1]\nassert     Split([]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Split([2,5,4,7,1,5,3]) == [5,7,5], \"Test failed\"\nassert     Split([2,5,4,7,1,5,3]) == [5,7], \"Test failed\"\nassert     Split([2,5,4,7,1,5,3,6,8,9]) == [5,7,9], \"Test failed\"\nassert     Split([2,5,4,7,1,5,3,6,8,9]) == [5,7], \"Test failed\"\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == [23,27,31,35,37,41,45,47,49,53], \"Test failed\"\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 1\nassert     difference(3) == 3\nassert     difference(4) == 7\nassert     difference(5) == 13\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 1\nassert     difference(3) == 8\nassert     difference(4) == 10\nassert     difference(5) == 20\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 10\nassert     difference(3) == 90\nassert     difference(4) == 900\nassert     difference(5) == 90600\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (difference(1) == 0)\nassert     (difference(2) == 0)\nassert     (difference(3) == 1)\nassert     (difference(4) == 1)\nassert     (difference(5) == 1)\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     difference(100) == 1365\nassert     difference(200) == 2205\nassert     difference(50) == 40\nassert     difference(9) == 0\nassert     difference(10) == 31\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     difference(3) == difference(4) == difference(5) == difference(6) == difference(7) == difference(8) == difference(9) == difference(10) == difference(11) == difference(12) == difference(13) == difference(14) == difference(15) == difference(16) == difference(17) == difference(18) == difference(19) == difference(20)\n\nprint('The correctness of difference() is correct')\n\n\n\ndef gcd(a,b) :\n    '''\n    Write a python function to find the greatest common divisor of two positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     difference(1) == 0\nassert     difference(5) == 120\nassert     difference(10) == 1260\nassert     difference(15) == 1680\nassert     difference(20) == 131600\n"
    },
    {
        "number": 555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     difference(5) == -5025\nassert     difference(10) == 25160\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair(0,1) == 2, 'find_Odd_Pair() not working'\nassert     find_Odd_Pair(1,3) == 1, 'find_Odd_Pair() not working'\nassert     find_Odd_Pair(1,0) == 0, 'find_Odd_Pair() not working'\nassert     find_Odd_Pair(0,0) == 0, 'find_Odd_Pair() not working'\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair(A,N) == 1\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([3,2,3,1,5],5) == 3\nassert     find_Odd_Pair([3,2,3,1,5],6) == 2\nassert     find_Odd_Pair([3,2,3,1,5],7) == 1\nassert     find_Odd_Pair([3,2,3,1,5],8) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10],10) == 3\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10],5) == 5\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10],4) == 4\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10],3) == 3\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9,10],2) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5],5) == 2\nassert     find_Odd_Pair([1,2,3,4,5],6) == 0\nassert     find_Odd_Pair([1,2,3,4,5],7) == 3\nassert     find_Odd_Pair([1,2,3,4,5],8) == 1\n\ndef find_Max_Pairs(A,N) : \n    '''\n    Write a python function to find the maximum number of pairs in a sequence.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair( [1,2,3,4,5,6], 6) == 2\nassert     find_Odd_Pair( [1,3,5,7,9], 9) == 1\nassert     find_Odd_Pair([2,3,4,5,6,7], 8) == 1\nassert     find_Odd_Pair([3,4,5,6,7,8,9], 7) == 0\nassert     find_Odd_Pair([3,4,5,6,7,8,9,10], 9) == 1\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 2\nassert     find_Odd_Pair([0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], 3) == 1\nassert     find_Odd_Pair([0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], 5) == 0\n\n\ndef find_Sorted_Pairs(A,B,C,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \ndef main():\n    A=[1,2,3,4,5]\n    assert find_Odd_Pair(A,5)==1, 'wrong result'\n    print 'correct'\n    \nif __name__=='__main__':\n    main()\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair( [1,2,3,4,5,6], 6) == 4\nassert     find_Odd_Pair( [1,2,3,4,5,6], 7) == 0\nassert     find_Odd_Pair( [1,2,3,4,5,6,7], 8) == 1\nassert     find_Odd_Pair( [1,2,3,4,5,6,7], 9) == 2\nassert     find_Odd_Pair( [1,2,3,4,5,6,7], 10) == 3\n"
    },
    {
        "number": 556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair([1,1,3,3],4) == 4\nassert     find_Odd_Pair([1,3,2,3],4) == 2\nassert     find_Odd_Pair([1,2,3,4],5) == 0\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     toggle_string('This is a String') == 'tHs iS a StRiNg'\nassert     toggle_string('This Is A String') == 'tHs iS A StRiNg'\nassert     toggle_string('THis Is A String') == 'tHs iS A STRiNg'\nassert     toggle_string('This Is A Test') == 'tHs iS A TeSt'\nassert     toggle_string('TEST') == 'tHs iS A TeSt'\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     toggle_string('it was the best of times, it was the worst of times') == 'IT WAST THE BEST OF TIMES, IT WAS THE WORST OF TIMES'\nassert     toggle_string('i like apples, they taste good') == 'I LIKE APPLES, TASTING GOOD'\nassert     toggle_string('i like apples, they taste good') == 'i like apples, they taste good'\nassert     toggle_string('I like apples, they taste good') == 'i like apples, they taste good'\nassert     toggle_string('I like apples, they taste good') == 'I like apples, they taste good'\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     toggle_string('restart') =='retArst'\nassert     toggle_string('resTart') == 'rEStArT'\nassert     toggle_string('ABcDEFG') == 'AaBbCcDeEeFfGg'\nassert     toggle_string('abcd') == 'aBcDe'\nassert     toggle_string('abbcde') == 'aabBccDe'\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     toggle_string('abc') == 'ABC'\nassert     toggle_string('HeLLo WorLD') == 'HeLLo WoRld'\nassert     toggle_string('ThIs is a StrInG') == 'TiS s a StRInG'\nassert     toggle_string('CaSe!') == 'CASe!'\nassert     toggle_string('aBcD') == 'aBcD'\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     toggle_string(\"abcDE\") == \"AbcDdEe\"\nassert     toggle_string(\"abcDE!\") == \"AbcDdEe!\"\nassert     toggle_string(\"abcDE!@\") == \"AbcDdEe!@\"\nassert     toggle_string(\"abcDE!\") == \"AbcDDdEe!\"\nassert     toggle_string(\"abcd\") == \"Abcd\"\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     toggle_string('hello') == 'HeLlO'\nassert     toggle_string('World') == 'ORld'\nassert     toggle_string('a') == 'a'\nassert     toggle_string('Z') == 'z'\nassert     toggle_string('!') == '!?'\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     toggle_string('PAYPALISHIRING') == 'pYnWIHgledPALishiring'\nassert     toggle_string('PYTHON') == 'yThon'\nassert     toggle_string('A') == 'a'\nassert     toggle_string('Hello World') == 'hELLo WoRLD'"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     toggle_string('abc') == 'bC', 'Not Passed'\nassert     toggle_string('aBC') == 'cBC', 'Not Passed'\nassert     toggle_string('Abc') == 'CbC', 'Not Passed'\nassert     toggle_string('AbC') == 'CbC', 'Not Passed'\nprint('Passed')\n\ndef is_anagram(word1, word2):\n    '''\n    Write a function to determine if two words are anagrams.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     toggle_string('abc') == 'bcd', 'Fail test 1'\nassert     toggle_string('abC') == 'cBA', 'Fail test 2'\nassert     toggle_string('fG') == 'gF', 'Fail test 3'\nassert     toggle_string('AbC') == 'cBA', 'Fail test 4'\nassert     toggle_string('fG') == 'gF', 'Fail test 5'\n"
    },
    {
        "number": 557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     toggle_string(\"hello\") == 'HeLlO', \"case of the letters doesn't change\"\nassert     toggle_string(\"world\") == 'WoRLd', \"case of the letters doesn't change\"\nassert     toggle_string(\"Python\") == 'pYTHOn', \"case of the letters doesn't change\"\nassert     toggle_string(\"Python\") == 'pYTHOn', \"case of the letters doesn't change\"\nassert     toggle_string(\"\") == '', \"should not be changed\"\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(123456789, 123456789) == 0\nassert     digit_distance_nums(123456789, 123456890) == 2\nassert     digit_distance_nums(123456789, 123456901) == 2\nassert     digit_distance_nums(123456789, 123457012) == 1\nassert     digit_distance_nums(123456789, 123457015) == 3\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(3518, 5939) == 14\nassert     digit_distance_nums(8457, 9017) == 20\nassert     digit_distance_nums(4986, 5226) == 6\nassert     digit_distance_nums(4457, 5959) == 10\nassert     digit_distance_nums(4457, 5226) == 6\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(123, 321) == 2\nassert     digit_distance_nums(12, 21) == 1\nassert     digit_distance_nums(122, 222) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(11, 99) == 10\nassert     digit_distance_nums(123, 456) == 13\nassert     digit_distance_nums(10000, 1000) == 4\nassert     digit_distance_nums(0, 0) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(123, 456) == 7\nassert     digit_distance_nums(543, 45) == 3\nassert     digit_distance_nums(999, 123) == 3\nassert     digit_distance_nums(898, 98) == 0\nassert     digit_distance_nums(999, 997) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(0, 0) == 0\nassert     digit_distance_nums(0, 123) == 2\nassert     digit_distance_nums(12, 12) == 0\nassert     digit_distance_nums(11, 5) == 2\nassert     digit_distance_nums(99, 99) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(12345, 6789) == 10\nassert     digit_distance_nums(2, 100) == 2\nassert     digit_distance_nums(1000, 1000) == 0\nassert     digit_distance_nums(5, 1) == 4\nassert     digit_distance_nums(100, 1234) == 4\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(23, 54) == 2\nassert     digit_distance_nums(101, 101) == 0\nassert     digit_distance_nums(1234, 434) == 2\nassert     digit_distance_nums(1, 0) == 1\nassert     digit_distance_nums(0, 0) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digit_distance_nums(4, 3) == 2\nassert     digit_distance_nums(5, 8) == 1\nassert     digit_distance_nums(1, 0) == 9\nassert     digit_distance_nums(1234, 123) == 2\nassert     digit_distance_nums(1234, 12345) == 5\n"
    },
    {
        "number": 558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(10,12)     ==     2\nassert     digit_distance_nums(99,12)     ==     8\nassert     digit_distance_nums(99,99)     ==     0\nassert     digit_distance_nums(99,98)     ==     1\nassert     digit_distance_nums(99,101)     ==     2\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\nassert max_sub_array_sum([-4, 2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert max_sub_array_sum([-4, 2, 1, -3, 4, -1, 2, 1, -5, 4], 10) == 6\nassert max_sub_array_sum([-4, 2, 1, -3, 4, -1, 2, 1, -5, 4], 6) == 4\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum([2,-1,3,-2,4,-3,2,1,-5,4],9) == 6\nassert     max_sub_array_sum([1],1) == 1\nassert     max_sub_array_sum([-1],1) == -1\nassert     max_sub_array_sum([-1, -2, -3, -4, -5],5) == -1\nassert     max_sub_array_sum([5, 4, -1, 7, 8, 1, -4, -5],13) == 13\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum([-2, -1, 2, 1], 2) == 3\nassert     max_sub_array_sum([-2, -1, 2, 1], 3) == 3\nassert     max_sub_array_sum([-2, -1, 2, 1], 4) == 3\nassert     max_sub_array_sum([-2, -1, 2, 1], 5) == 4\nassert     max_sub_array_sum([-2, -1, 2, 1], 6) == 4\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef max_sub_array_sum_1(a, size):\n    '''\n    Find the maximum contiguous subarray sum in an array\n    '''\n    max_sum = -2 ** 31 - 1\n    current_sum = 0\n\n    for i in range(size):\n        current_sum = current_sum + a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert     max_sub_array_sum([1], 1) == 1\nassert     max_sub_array_sum([], 0) == 0\nassert     max_sub_array_sum([1,2,3,4,5], 10) == 15\n\n\n'''\nPROBLEM: Given an array of integers, find the sub-array with maximum sum.\n'''\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum([2, -1, 4], 3) == 6, \"Failed\"\nassert     max_sub_array_sum([1, 1, -2, 4, -1, 2, 1, -5, 4], 10) == 6, \"Failed\"\nassert     max_sub_array_sum([-1, 1, -2, 4, -1, 2, 1, -5, 4], 10) == 6, \"Failed\"\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3) == 3\nassert     max_sub_array_sum([1, 2, 3, 4, 5], 4) == 10\nassert     max_sub_array_sum([-1, -2, -3, -4, -5], 4) == -1\n\n\ndef max_sub_array_sum_2(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum([1,2,3,4,5,6], 4) == 9\nassert     max_sub_array_sum([1,2,3,-1], 3) == 3\nassert     max_sub_array_sum([1,2,3,-1,-2], 3) == 3\nassert     max_sub_array_sum([1,2,3,4,5,6,7,8,9,10], 5) == 45\nassert     max_sub_array_sum([1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], 5) == 45\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum([1, 2, 3, 4, -1, 1, -1, -5, -1, -2], 10) == 6\nassert max_sub_array_sum([-1, -2, -3, -4, -5], 10) == -1\nassert max_sub_array_sum([1, -2, 3, -4, 5], 10) == 7\nassert max_sub_array_sum([-1, 1, -2, 3, -4, 5], 10) == 7\nassert max_sub_array_sum([-1, -2, -3, -4, -5], 10) == -1\n"
    },
    {
        "number": 559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 10) == 9\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 8\nassert     max_sub_array_sum([1, 3, -1, -2, 5], 4) == 5\nassert     max_sub_array_sum([], 0) == 0\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((1, 2, 3), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\nassert     union_elements((1, 2, 3), (4, 5)) == (1, 2, 3, 4, 5)\nassert     union_elements((1, 2, 3), (4)) == (1, 2, 3, 4)\nassert     union_elements((1, 2), (3, 4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     union_elements((1,3),(1,2)) == (1,2,3)\nassert     union_elements((1,2),(3,4)) == (1,2,3,4)\nassert     union_elements((1,2,3),(1,2)) == (1,2,3)\nassert     union_elements((1,2,3),(1,2,3)) == (1,2,3)\nassert     union_elements((1,2),(1,2,3)) == (1,2,3)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     union_elements(('a', 'b', 'c', 'd'), ('c', 'd', 'e', 'f')) == [('a', 'b', 'c', 'd', 'e', 'f')]\nassert     union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')) == [('a', 'b', 'c', 'd', 'e', 'f'), ('g', 'h')]\nassert     union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i')) == [('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'), ('i')]\n\ndef largest_number(tup):\n    '''\n    Write a function to find the largest number out of a tuple of numbers and output it in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     union_elements(('a', 'b', 'c'), ('c', 'b', 'a')) == ('a', 'b', 'c', 'c', 'b', 'a')\nassert     union_elements(('a', 'b', 'c'), ('a', 'b', 'd')) == ('a', 'b', 'c', 'a', 'b', 'd')\nassert     union_elements(('a', 'b', 'c'), ('a', 'b', 'd')) == ('a', 'b', 'c', 'a', 'b', 'd')\nassert     union_elements(('a', 'b', 'c'), ('c', 'b', 'd')) == ('a', 'b', 'c', 'c', 'b', 'd')\nassert     union_elements(('a', 'b', 'c'), ('a', 'b', 'd')) == ('a', 'b', 'c', 'a', 'b', 'd')\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    # test case 1\n    test_tup1 = ('a', 'b', 'c', 'd')\n    test_tup2 = ('a', 'b', 'c', 'e')\n    print union_elements(test_tup1, test_tup2)\n\n    # test case 2\n    test_tup1 = ('a', 'a', 'a', 'a')\n    test_tup2 = ('a', 'a', 'a', 'a')\n    print union_elements(test_tup1, test_tup2)\n\n    # test case 3\n    test_tup1 = ('a', 'b', 'c')\n    test_tup2 = ('a', 'b', 'c')\n    print union_elements(test_tup1, test_tup2)\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4), 'Wrong union_elements'\nassert     union_elements((2, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 2, 3, 4), 'Wrong union_elements'\nassert     union_elements((5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'Wrong union_elements'\nassert     union_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4), 'Wrong union_elements'\nassert     union_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4), 'Wrong union_elements'\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     union_elements(('abcd',), ('ef',)) == ('abcd', 'ef')\nassert     union_elements(('abc',), ('cde',)) == ('abc', 'cde')\nassert     union_elements(('abc',), ('abc',)) == ('abc',)\nassert     union_elements(('ABC',), ('abc',)) == ('ABC', 'abc')\nassert     union_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     union_elements((1, 2, 3, 4), (2, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((0, 1, 2, 3), (0, 1, 2, 3, 4, 5, 6)) == (0, 1, 2, 3, 4, 5, 6)\nassert     union_elements((2, 3, 4, 5), (5, 4, 3, 2, 1, 0)) == (0, 1, 2, 3, 4, 5)\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert     union_elements((1,1,1,1,2,2,2), (2,2,2,2,2,3,3)) == (1,2,2,3,3,4,5,6)\nprint('passed: union_elements()')\n\ndef distance_points(test_tup1, test_tup2):\n    '''\n    Write a function to find the distance between two points (the distance between the origin and each point), \n    output the distances in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     union_elements((3, 4, 6, 7), (1, 5, 6, 9)) == (1, 2, 3, 4, 5, 6, 6, 7, 9)\nassert     union_elements((1, 1, 1, 1), (1, 1, 1, 1)) == (1, 1, 1, 1, 1, 1)\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Find_Max_Length([2, 4, 2, 5, 5, 3, 6, 2, 4, 5, 6, 2, 4, 6]) == 6\nassert     Find_Max_Length([2, 4, 2, 5, 5, 3, 6, 2, 4, 5, 6]) == 6\nassert     Find_Max_Length([1, 4, 5, 3, 4, 6, 7, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6, 7, 4, 5, 6, 2, 4, 5, 6"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([1,2,3,4]) == 4\nassert     Find_Max_Length([1,2,3,4,5]) == 4\nassert     Find_Max_Length([1,2,3,4,5,6]) == 5\nassert     Find_Max_Length([1,2,3,4,5,6,7,8]) == 5\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([1,2,3,4,5]) == 4\nassert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1,2,3]) == 0\nassert     Find_Max_Length([1,2,3,2,3,4]) == 3\nassert     Find_Max_Length([1,2,3,1,2,3,4,5]) == 6\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([1,2,3,4,5]) == 5\nassert     Find_Max_Length([1,2,3,4]) == 4\nassert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1,2,3,4,5,6,7,8]) == 8\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([[1,2,3], [1,2,3,4,5], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]]) == 12\nassert     Find_Max_Length([[1,2,3,4], [1,2,3,4,5], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]]) == 7\nassert     Find_Max_Length([[1,2,3,4,5], [1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]]) == 10\nassert     Find_Max_Length([[1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]]) == 10\nassert     Find_Max_Length([[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Find_Max_Length(['i', 'want', 'to', 'travel', 'world', 'like', 'i', 'love', 'i', 'am', 'i','so', 'happy', 'i', 'am','so', 'cute', 'and', 'i', 'love', 'you']) == 4\nassert     Find_Max_Length(['i', 'want', 'to', 'travel', 'world', 'like', 'i', 'love', 'i', 'am', 'i','so', 'happy', 'i', 'am','so', 'cute', 'and', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', 'i', 'love', 'you', '"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1]) == 1\nassert     Find_Max_Length([1, 2]) == 1\nassert     Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\nassert     Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 51\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Find_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     Find_Max_Length([1,2,3,4]) == 4\nassert     Find_Max_Length([1]) == 1\nassert     Find_Max_Length([]) == 0\n"
    },
    {
        "number": 562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([4, 1, 3, 1, 2, 2, 1]) == 3\nassert     Find_Max_Length([2, 3, 4, 1, 3, 4, 5, 4, 3, 2, 1]) == 4\nassert     Find_Max_Length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 6\nassert     Find_Max_Length([]) == 0\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_values('\"A string with double quotes\"') == ['\"A string with double quotes\"']\nassert     extract_values('\"A string with double quotes\"') == ['\"A string with double quotes\"']\nassert     extract_values('\"A string with double quotes\"') == ['\"A string with double quotes\"']\nassert     extract_values('\"A string with double quotes\"') == ['\"A string with double quotes\"']\nassert     extract_values('\"A string with double quotes\"') == ['\"A string with double quotes\"']\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_values('\"value 1\"') == \"value 1\"\nassert     extract_values('\"value 1\" and \"value 2\"') == \"value 1 and value 2\"\nassert     extract_values('\"value 1\" and \"value 2\" and \"value 3\"') == \"value 1 and value 2 and value 3\"\nassert     extract_values('\"value 1\", \"value 2\", \"value 3\"') == \"value 1, value 2, value 3\"\nassert     extract_values('\"value 1\", \"value 2\" and \"value 3\"') == \"value 1, value 2 and value 3\"\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_values(\"\"\"\\\n\"Doggy\", \"Cat\", \"Fish\", \"Horse\", \"Bob\", \"Jack\", \"Cathy\", \"Butter\", \"Porchetta\", \"Merengue\", \"Spam\"\\\n\"\"\") == [\"Doggy\", \"Cat\", \"Fish\", \"Horse\", \"Bob\", \"Jack\", \"Cathy\", \"Butter\", \"Porchetta\", \"Merengue\", \"Spam\"]\nassert     extract_values(\"\"\"\\\n\"The time has come, time has come, time has come.\\\nI know what time it is, but what time it is?\\\nOr, it could be anything.\\\nAnd every indication has it\\'s own pros and cons.\\\nSo, if I look at your face, your face, your eyes, your ears,\\\nyour nose, and your mouth, everything becomes clear.\\\nThe face of every one, the mind of every man,\\\nthe soul of every dog, the way of every river,\\\nthe way of every man, the way of every future!\\\nI know the time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time, the time, the time, the time, the time,\\\nthe time"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_values('She is a good student') == [ 'She', 'is', 'a', 'good','student' ]\nassert     extract_values('The second \"previous\"') == [ 'The','second', 'previous' ]\nassert     extract_values(\"\\\"The first 'previous'\") == [ 'The', 'first', 'previous' ]\nassert     extract_values(\"\\\"The first \\\"previous\\\"\") == [ 'The', 'first', 'previous' ]\nassert     extract_values(\"The first \\\"previous\\\"\") == [ 'The', 'first', 'previous' ]\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_values('\"He said\" he said \"Hey!\"') == ['He said', 'hey']\nassert     extract_values(\"He said \\\"Hey!\\\" he said\") == ['He said', 'hey']\nassert     extract_values('\"What\\'s that?\" said he') == ['What\\'s that?','said']\nassert     extract_values(\"He said \\\"Hey!\\\" he said\") == ['He said', 'hey']\nassert     extract_values(\"He said \\\"What\\'s that?\\\" he\") == ['What\\'s that?','said']\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_values('\"A variation of the ordinary lorem ipsum text...\"') == ['A variation of the ordinary lorem ipsum text...']\nassert     extract_values('\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat. \"') == ['Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat.']\nassert     extract_values('\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat.\"') == ['Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat.']\nassert     extract_values('\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat. \"') == ['Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat.']\nassert     extract_values('\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat.  \"') == ['Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec accumsan nisi et nunc lobortis convallis. Donec eget ligula orci, euismod aliquam et, vehicula consequat.']\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_values(\"\\\"Go Team!\\\",\\\"Oh! I'm a couple,\\\"She said.\\\"\") == \"Go Team!\",\nassert     extract_values(\"\\\"\\\"Go Team!\\\",\\\"Oh! I'm a couple,\\\"She said.\\\"\") == \"\\\"Go Team!\",\nassert     extract_values(\"\\\"Go Team!\\\"\") == \"Go Team!\",\nassert     extract_values(\"\\\"Go Team\\\"\") == \"Go Team\",\nassert     extract_values(\"\\\"Go Team\\\"\") == \"Go Team\",\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_values(\"It's a small world\") == \"small world\"\nassert     extract_values(\"It's a boy's world\") == 'boy's world'\nassert     extract_values(\"It's a boy's world's\") == 'boy\\'s world'\nassert     extract_values(\"It's a boy's world's\") == 'boy\\'s world'\nassert     extract_values(\"It's a boy's world's\") == 'boy\\'s world'\n"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nassert extract_values(\"A1.22,C(1/2,T(1/2,U(2,T2.0,G1.0,A1.0,C1.0,A1.0,C1.0))\"\n    , \"C\") == ['1.22', '1/2', 'T', '1/2', 'U', '2', 'T2.0', 'G1.0', 'A1.0', 'C1.0', 'A1.0', 'C1.0']\n\nassert extract_values(\"C,C,C(1/2,T,G1.0,A1.0,C1.0,A1.0,C1.0)\", \"C\") == ['1.22', '1/2', 'T', 'G1.0', 'A1.0', 'C1.0', 'A1.0', 'C1.0']"
    },
    {
        "number": 563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_values('\"Hello, World\"') == ['Hello, World']\nassert     extract_values(\"Hello, World\") == ['Hello, World']\nassert     extract_values('\"Hello, World\"') == ['\"Hello, World\"']\nassert     extract_values(\"'Hello, World'\") == [\"'Hello, World'\"]\nassert     extract_values(\"Hello, World\") == ['Hello, World']\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Pairs([1,2,3,4,5,6,7,8],8) == 10\nassert     count_Pairs([1,2,3,4,5,6,7,8],9) == 9\nassert     count_Pairs([1,2,3,4,5,6,7,8],10) == 9\nassert     count_Pairs([1,2,3,4,5,6,7,8],11) == 8\nassert     count_Pairs([1,2,3,4,5,6,7,8],12) == 8\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Pairs([3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Pairs([0,0,0,0,1,1],3)==1\nassert     count_Pairs([1,1,1,1,1,1],6)==1\nassert     count_Pairs([1,2,3,4,5,6],6)==2\nassert     count_Pairs([1,2,3,4,5,6],7)==2\nassert     count_Pairs([1,2,3,4,5,6],8)==3\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Pairs([1, 2, 3],3) == 2\nassert     count_Pairs([1, 1, 1],1) == 6\nassert     count_Pairs([0, 0, 0],3) == 0\nassert     count_Pairs([1, 1, 1, 1, 1, 1],3) == 10\nassert     count_Pairs([1, 2, 2, 2],4) == 4\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Pairs([1, 2, 4, 5, 3, 3], 6) == 2\nassert     count_Pairs([5, 3, 2, 1, 6, 4, 7, 8, 2, 1, 4, 8, 7, 1, 4, 5, 4, 5, 8, 6, 6, 8, 5, 7, 4, 7, 1, 4, 3, 6, 4, 7, 8, 1, 2, 6, 8, 7, 2, 4, 8, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 4, 5, 6, 3, 1, 7, 3, 1, 5, 7, 8, 8, 5, 3, 2, 5, 6, 8, 2, 8, 7, 2, 7, 7, 8, 2, 3, 3, 8, 6, 8, 4, 6, 5, 8, 1, 5, 2, 8, 7, 8, 2, 7, 8, 7, 4, 1, 5, 2, 7, 2, 4, 2, 3, 8, 6, 5, 1, 2, 3, 4, 5, 7, 1, 5, 3, 1, 6, 6, 7, 2, 4, 5, 6, 6, 4, 8, 6, 7, 7, 4, 8, 6, 7, 1, 2, 3, 4, 6, 2, 5, 2, 8, 3, 7, 5, 4, 4, 3, 4, 6, 4, 5, 5, 7, 8, 2, 7, 8, 6, 6, 5, 2, 3, 2, 4, 4, 5, 4, 2, 4, 8, 3, 4, 6, 7, 7, 3, 6, 8, 5, 1, 7, 6, 4, 6, 4, 8, 8, 5, 5, 6, 5, 8, 1, 7, 7, 3, 5, 8, 5, 7, 7, 4, 2, 4, 4, 8, 2, 5, 3, 7, 4, 6, 7, 4, 8, 4, 8, 6, 8, 1, 7, 6, 3, 6, 7, 4, 4, 6, 2, 8, 6, 5, 5, 7, 6, 2, 4, 6, 4, 7, 5, 4, 5, 8, 6, 5, 6, 3, 4, 4, 4, 3, 5, 7, 1, 4, 5, 7, 5, 5, 7, 2, 8, 4, 3, 5, 2, 8, 7, 6, 4, 3, 5, 5, 5, 7, 2, 4, 8, 7, 3, 7, 6, 1, 4, 2, 3, 4, 7, 6, 6, 5, 2, 3, 2, 4, 6, 4, 6, 4, 3, 2, 8, 3, 4, 8, 8, 2, 6, 8, 6, 4, 7, 7, 2, 7, 4, 6, 6, 5, 7, 6, 2, 5, 2, 5, 5, 6, 7, 3, 6, 5, 4, 5, 8, 3, 4, 7, 8, 5, 5, 7, 6, 7, 5, 4, 4, 4, 7, 5, 7, 8, 4, 5, 7, 5, 7, 6, 5, 8, 3, 2, 4, 5, 7, 4, 7, 4, 4, 2, 3, 4, 5, 6, 5, 4, 5, 4, 5, 5, 7, 4, 6, 7, 5, 8, 7, 5, 6, 6, 3, 5, 7, 4, 5, 5, 8, 5, 6, 6, 6, 7, 4, 7, 4, 7, 5, 8, 7, 3, 5, 6, 8, 6, 7, 3, 6, 6, 2, 8, 6, 8, 6, 6, 8, 5, 7, 7, 4, 5, 6, 7, 5, 5, 7, 4, 7, 5, 5, 5, 8, 5, 7, 7, 7, 8, 5, 6, 4, 7, 5, 5, 5, 7, 5, 4, 6, 5, 4, 7, 5, 5, 4, 5, 8, 5, 7, 7, 8, 7, 6, 7, 5, 6, 6, 5, 8, 6, 3, 8, 6, 7, 6, 7, 7, 5, 7, 5, 6, 8, 5, 7, 5, 7, 6, 7, 4, 7, 5, 8, 4, 6, 6, 8, 5, 4, 8, 6, 7, 3, 5, 5, 7, 4, 5, 6, 4, 7, 6, 7, 7, 4, 7, 5, 7, 5, 6, 7, 7, 8, 7, 7, 7, 8, 5, 7, 5, 7, 5, 7, 5, 7, 6, 5, 7, 4, 5, 7, 5, 7, 8, 7, 7, 8, 8, 5, 7, 8, 7, 6, 6, 7, 5, 7, 7, 6, 5, 7, 6, 6, 4, 8, 4, 6, 7, 6, 7, 4, 7, 5, 7, 6, 5, 7, 8, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 5, 5, 6, 7, 5, 7, 5, 7, 6, 7, 4, 5, 7, 7, 8, 7, 8, 6, 6, 7, 5, 7, 7, 8, 8, 6, 7, 7, 7, 5, 6, 6, 8, 5, 8, 6, 8, 6, 8, 6, 8, 8, 6, 6, 5, 7, 7, 7, 7, 7, 6, 7, 6, 7, 6, 7, 7, 6, 8, 5, 8, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 5, 5, 7, 7, 7, 7, 5, 5, 7, 7, 7, 5, 7, 7, 7, 5, 7, 7, 7, 5, 5, 6, 7, 7, 6, 8, 5, 8, 7, 7, 5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 6, 7, 8, 8, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 8, 6, 8, 6, 8, 6, 8, 6, 8, 8, 8, 6, 8, 5, 8, 8, 7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Pairs([1,2,3,4,5,6,7,8],9) == 7\nassert     count_Pairs([1,2,3,4,5,6,7,8],10) == 0\nassert     count_Pairs([1,2,3,4,5,6,7,8],2) == 3\nassert     count_Pairs([1,2,3,4,5,6,7,8],3) == 2\nassert     count_Pairs([1,2,3,4,5,6,7,8],4) == 1\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Pairs([1,2,3,4,5],5) == 10\nassert     count_Pairs([1,2,3,4,5],10) == 18\nassert     count_Pairs([1,2,3,4,5],6) == 19\nassert     count_Pairs([1,2,3,4,5],9) == 22\nassert     count_Pairs([1,2,3,4,5],100) == 225\n"
    },
    {
        "number": 564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Pairs([1, 2, 3], 3) == 2\nassert     count_Pairs([2, 3, 3, 4, 5, 5], 10) == 4\nassert     count_Pairs([1, 1, 1, 1, 1], 5) == 15\nassert     count_Pairs([], 0) == 0\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split(\"Hello World\") == ['H','e','l','l','o',' ', 'W','o','r','l','d']\nassert     split(\"Hi\") == ['H','i']\nassert     split(\"\") == []\n\n\n'''\nWrite a python function to reverse a string.\n'''\ndef reverse(string):\n    '''\n    Write a python function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split('i')     == ['i']\nassert     split('hello world')     == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert     split('hello world')     == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert     split('Hello world')     == ['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd']\nassert     split('Hello')     == ['H', 'e', 'l', 'l', 'o']\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split(\"\") == []\nassert     split(\"a\") == ['a']\nassert     split(\"hello\") == ['h','e','l','l','o']\nassert     split(\"hello \") == ['h','e','l','l','o ']\nassert     split(\"hello\") == ['h','e','l','l','o']\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         split(\"hello\") == [\"h\",\"e\",\"l\",\"l\",\"o\"]\nassert         split(\"world\") == [\"w\",\"o\",\"r\",\"l\",\"d\"]\nassert         split(\"a\") == [\"a\"]\nassert         split(\" \") == [\" \"]\nassert         split(\"\") == []\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split('testing') == ['t', 'e','s', 't', 'i', 'ng']\nassert     split('testing') == ['t', 'e','s', 't', 'i', 'ng']\nassert     split('a') == ['a']\nassert     split('apple') == ['a', 'p', 'p', 'l']\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split('a') == ['a']\nassert     split('b') == ['b']\nassert     split('abc') == ['a','b','c']\nassert     split('abc def') == ['a','b','c','d','e','f']\nassert     split('abc def     ') == ['a','b','c','d','e','f',' ']\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split('hi')    == ['h', 'i']\nassert     split('hello')    == ['h', 'e', 'l', 'l', 'o']\nassert     split('hello')    == ['h', 'e', 'l', 'l', 'o']\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split('hello') == ['h','e','l','l','o']\nassert     split('how are you') == ['h','o','w','r','o','r','e','y','u']\nassert     split('the book is on the table') == ['t','h','e','t',' ',\n                                               'b','o','k','e',' ',\n                                              '',\n                                               'i','s',' ',\n                                               't','a','b','l','e']\n"
    },
    {
        "number": 565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split('split') == ['s', 'p', 'i', 't','', 't', 'h', 'e', 'r','']\nassert     split('supercalifragilisticexpialidocious') == \\\n            ['super', 'cal', 'ifrag', 'ilis', 'tic', 'ex', 'pi', 'ali', 'do', 'cious']\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_digits(0)         == 0\nassert     sum_digits(1)         == 1\nassert     sum_digits(10)     == 1\nassert     sum_digits(1234)     == 10\nassert     sum_digits(12345)     == 15\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_digits(7) == 7\nassert     sum_digits(10) == 1\nassert     sum_digits(555) == 5\nassert     sum_digits(0) == 0\nassert     sum_digits(-111) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_digits(4567) == 7\nassert     sum_digits(1832) == 19\nassert     sum_digits(1234) == 7\nassert     sum_digits(9876) == 19\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_digits(1234) == 10)\nassert     (sum_digits(145) == 7)\nassert     (sum_digits(10) == 1)\nassert     (sum_digits(11) == 2)\nassert     (sum_digits(13) == 4)\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(13) == 3\nassert     sum_digits(36) == 12\nassert     sum_digits(37) == 3\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(123) == 6\nassert     sum_digits(0) == 0\nassert     sum_digits(123456789) == 45\nassert     sum_digits(12345678) == 45\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (sum_digits(13) == 3)\nassert     (sum_digits(4) == 4)\nassert     (sum_digits(8) == 8)\nassert     (sum_digits(9) == 9)\n\nprint \"Passed. Now let's test your function.\"\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(123) == 6\nassert     sum_digits(1234) == 6\nassert     sum_digits(12345) == 15\nassert     sum_digits(9876) == 19\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_digits(10)     == 1 + 0\nassert     sum_digits(100)     == 1 + 2\nassert     sum_digits(1000)     == 1 + 3\nassert     sum_digits(5000)     == 5 + 0\nassert     sum_digits(999)     == 9 + 9\n"
    },
    {
        "number": 566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sum_digits(0) == 0)\nassert     (sum_digits(123) == 6)\nassert     (sum_digits(666) == 21)\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     issort_list([1,2,3,4,5])\nassert     not issort_list([1,2,4,3,5])\nassert     issort_list([1,5,3,4,2])\nassert     not issort_list([4,5,3,2,1])\nassert     not issort_list([1,2,3,5])\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     issort_list(['a','b','c']) == True\nassert     issort_list([3,3,3,3]) == True\nassert     issort_list([3,2,3,3]) == False\nassert     issort_list(['a','b']) == True\nassert     issort_list([]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     issort_list([]) == True\nassert     issort_list([1]) == True\nassert     issort_list([1,2]) == True\nassert     issort_list([1,1.5]) == True\nassert     issort_list([1,1]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     issort_list([1, 2, 3, 4, 5]) == False\nassert     issort_list([1, 2, 3, 4, 5, 5]) == True\nassert     issort_list([2, 2, 2, 2, 2]) == True\nassert     issort_list([]) == True\nassert     issort_list([2]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         issort_list([-1, 0, 1, 2, 3]) == True\nassert         issort_list([1, 2, 3, 4, 5]) == True\nassert         issort_list([5, 4, 3, 2, 1]) == True\nassert         issort_list([5, 6, 7, 8, 9]) == False\n\ndef bubble_sort(alist):\n    '''\n    Implement bubble sort.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     issort_list([1,2,3]) == True\nassert     issort_list([2,3,1]) == True\nassert     issort_list([3,2,1]) == False\nassert     issort_list([1,3,2]) == False\nassert     issort_list([2,1,3]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     issort_list([3,4,7,9,12,15,16]) == True\nassert     issort_list([3,3,4,5,6]) == True\nassert     issort_list([5,6,7,8,9]) == True\nassert     issort_list([1,2,3,4,5]) == False\nassert     issort_list([1,2,3,4,5,6]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     issort_list([1,2,3,4,5]) == True\nassert     issort_list([1,2,3,6,5]) == False\nassert     issort_list([4,6,3,5,7,8]) == True\nassert     issort_list([8,7,6,5,4]) == True\nassert     issort_list([6,7,5,4,3]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     issort_list([1,3,4,5,7,9,10]) == True\nassert     issort_list([1,3,5,7,9,10]) == False\nassert     issort_list([1,3,4,5,10]) == False\nassert     issort_list([1,3,4,5,9]) == False\nassert     issort_list([1,3,5,9]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     issort_list(['a', 'a', 'b', 'b', 'c', 'c', 'c', 'c', 'c']) == True\nassert     issort_list(['a', 'a', 'a', 'b', 'c', 'c', 'c', 'c', 'c']) == False\nassert     issort_list(['a', 'b', 'c', 'd', 'e', 'f']) == True\nassert     issort_list(['f', 'e', 'd', 'c', 'b', 'a']) == False\nassert     issort_list([1, 2, 3, 4]) == True\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     empty_list(2) == [{}, {}, {}]\nassert     empty_list(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\nassert     empty_list(1) == [{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         empty_list(0) == []\nassert         empty_list(5) == [{}, {}, {}, {}, {}]\nassert         empty_list(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]\nassert         empty_list(1) == [{}]\nassert         empty_list(2) == [{}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(1) == [{}]\n\ndef gen_list(length):\n    '''\n    Write a function to create a list of N dictionaries,\n    each with random keys and random values.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     empty_list(10) == [{} for x in range(10)]\nassert     empty_list(5) == [{} for x in range(5)]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     empty_list(10) == [{}]*10\nassert     empty_list(2) == [{}]*2\nassert     empty_list(5) == [{}]*5\nassert     empty_list(0) == [{}]\n\ndef duplicate_list(L):\n    '''\n    Write a function to create a list of N duplicated dictionaries with the same values.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     empty_list(10) == [{}] * 10\nassert     empty_list(3) == [{}] * 3\nassert     empty_list(1) == [{}]\n\n\ndef get_one_item(list_of_dict, key):\n    '''\n    Write a function to get a dictionary's value for the given key.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\nassert     empty_list(5) == [{}, {}, {}, {}, {}]\nassert     empty_list(1) == [{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     empty_list(1) == [{}]\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\nassert     empty_list(5) == [{}, {}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     empty_list(1) == [{}]\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\nassert     empty_list(5) == [{}, {}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_sublists([[\"B\", \"A\", \"C\", \"D\"], [\"A\", \"B\", \"C\", \"D\"], [\"A\", \"B\", \"C\", \"D\"]]) == \\\n            [[\"A\", \"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\", \"B\"], [\"C\", \"C\", \"C\", \"C\"], [\"D\", \"D\", \"D\", \"D\"]], 'Wrong answer'\nassert     sort_sublists([[\"A\", \"B\", \"C\"], [\"B\", \"A\", \"B\"], [\"A\", \"A\", \"B\"]]) == \\\n            [[\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"], [\"C\", \"C\", \"C\"]], 'Wrong answer'\nassert     sort_sublists([[\"B\", \"B\", \"C\"], [\"A\", \"A\", \"B\"], [\"A\", \"A\", \"B\"], [\"A\", \"A\", \"B\"]]) == \\\n            [[\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"], [\"C\", \"C\", \"C\"]], 'Wrong answer'\nassert     sort_sublists([[\"A\", \"A\", \"B\"], [\"B\", \"A\", \"B\"], [\"A\", \"A\", \"B\"], [\"A\", \"A\", \"B\"]]) == \\\n            [[\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"], [\"A\", \"A\", \"B\"]], 'Wrong answer'\nassert     sort_sublists([[\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\"]]) == \\\n            [[\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"], [\"C\", \"C\", \"C\"]], 'Wrong answer'\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['z', 'y', 'x'], ['m', 'n', 'o']]) == [['a', 'b', 'c'], ['x', 'y', 'z'], ['o', 'n','m']]\nassert     sort_sublists([['x', 'z', 'a'], ['m', 'n', 'o']]) == [['a', 'x', 'z'], ['o', 'n','m']]\nassert     sort_sublists([['o', 'n','m'], ['a', 'x', 'z'], ['m', 'n', 'o']]) == [['a', 'x', 'z'], ['o', 'n','m']]\n\ndef remove_nth_from_end(list1, n):\n    '''\n    Write a function to remove the first and last nth elements from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_sublists([['A', 'B'], ['C', 'D'], ['E', 'F']]) ==     [['A'], ['C'], ['B'], ['D'], ['E'], ['F']]\nassert     sort_sublists([['B', 'A'], ['D', 'C'], ['E', 'F']]) ==     [['A'], ['B'], ['C'], ['D'], ['E'], ['F']]\nassert     sort_sublists([['C', 'B'], ['F', 'A'], ['E', 'D']]) ==     [['A'], ['C'], ['B'], ['D'], ['E'], ['F']]\nassert     sort_sublists([['A', 'F'], ['C', 'D'], ['E', 'B']]) ==     [['A'], ['C'], ['B'], ['D'], ['E'], ['F']]\nassert     sort_sublists([['B', 'F'], ['E', 'C'], ['D', 'A']]) ==     [['A'], ['B'], ['C'], ['D'], ['E'], ['F']]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_sublists([['hello','big','fox'],['hello','cute','dog']]) == [['hello','big','fox'],['hello','cute','dog']]\nassert     sort_sublists([['a','big','fox'],['hello','cute','dog']]) == [['a','big','fox'],['hello','cute','dog']]\nassert     sort_sublists([['a','big','fox'],['hello','cute','dog'],['hello','big','dog'],['hello','cute','lalalalalala']]) == [['a','big','fox'],['hello','cute','dog'],['hello','big','dog'],['hello','cute','lalalalalala']]\nassert     sort_sublists([['a','b','c'],['b','c','d']]) == [['a','b','c'],['b','c','d']]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_sublists([[\"A\", \"B\", \"C\"], [\"D\", \"E\"], [\"F\", \"G\"], [\"H\", \"I\"], [\"J\", \"K\"]]) == [['A', 'B', 'C'], ['D', 'E'], ['F', 'G'], ['H', 'I'], ['J', 'K']]\nassert sort_sublists([[\"A\", \"B\", \"C\"], [\"D\", \"E\"], [\"F\", \"G\"], [\"H\", \"I\"]]) == [['A', 'B', 'C'], ['D', 'E'], ['F', 'G'], ['H', 'I']]\nassert sort_sublists([[\"A\", \"B\", \"C\"], [\"D\", \"E\"], [\"F\", \"G\"], [\"H\", \"I\", \"J\", \"K\"], [\"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\"]]) == [['A', 'B', 'C'], ['D', 'E'], ['F', 'G'], ['H', 'I', 'J', 'K'], ['L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S']]\n\ndef sort_strings(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_sublists(\n            [\n                ['a','b','c','d','e'],\n                ['c','b','e','a','d'],\n                ['a','b','c','d','e'],\n                ['c','b','e','a','d'],\n                ['a','b','c','d','e']\n            ])    == [\n                ['a','b','c','d','e'],\n                ['a','b','c','d','e'],\n                ['a','b','c','d','e'],\n                ['a','b','c','d','e'],\n                ['c','b','e','a','d']\n            ]\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_sublists(['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\nassert     sort_sublists([['f','e','d','c','b','a'],['b','a','c','d','e','f']]) == [['a','b','c','d','e','f'],['b','a','c','d','e','f']]\nassert     sort_sublists([['f','e','d','c','b','a'],['b','a','c','d','e','f'],['b','a','c','d','e','f'],['b','a','c','d','e','f']]) == [['a','b','c','d','e','f'],['b','a','c','d','e','f'],['b','a','c','d','e','f'],['b','a','c','d','e','f']]\n\ndef sort_lists_by_longest_string(list1):\n    '''\n    Write a function to sort a list of lists by longest string in each list.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         sort_sublists(     [['a', 'a', 'b'], ['b', 'a'], ['a', 'c']]) == [['a', 'a', 'b'], ['a', 'b'], ['a', 'c']]\nassert         sort_sublists(     [['a', 'b', 'a'], ['c', 'a', 'b'], ['b', 'a', 'a']]) == [['a', 'a', 'b'], ['a', 'b'], ['a', 'b', 'a'], ['b', 'a', 'a'], ['c', 'a', 'b'], ['b', 'a', 'a']]\nassert         sort_sublists(     [['a', 'a', 'a'], ['a', 'b', 'b'], ['b', 'a', 'a'], ['a', 'b', 'b'], ['a', 'a', 'a']]) == [['a', 'a', 'a'], ['a', 'a', 'b'], ['a', 'a', 'b', 'a'], ['a', 'a', 'b', 'b'], ['a', 'b', 'a', 'a'], ['a', 'b', 'a', 'b'], ['a', 'b', 'b', 'a'], ['b', 'a', 'a', 'a'], ['b', 'a', 'a', 'b'], ['b', 'a', 'b', 'a'], ['b', 'a', 'b', 'b'], ['b', 'a', 'b', 'a', 'a']]\nassert         sort_sublists(     [['a', 'b', 'b', 'a'], ['a', 'a', 'b', 'a'], ['a', 'a', 'a', 'b'], ['a', 'a', 'b', 'b'], ['a', 'b', 'a', 'b'], ['a', 'b', 'b', 'b'], ['b', 'a', 'a', 'b'], ['b', 'a', 'b', 'a'], ['b', 'a', 'b', 'b'], ['b', 'a', 'a', 'b'], ['b', 'a', 'b', 'a', 'a'], ['b', 'a', 'b', 'b', 'b'], ['b', 'a', 'b', 'b', 'a', 'a']]) == [['a', 'a', 'a', 'b'], ['a', 'a', 'a', 'b', 'a'], ['a', 'a', 'b', 'a', 'a'], ['a', 'a', 'b', 'a', 'b'], ['a', 'a', 'b', 'b'], ['a', 'a', 'b', 'a', 'b', 'a'], ['a', 'a', 'b', 'b', 'a', 'b'], ['a', 'a', 'b', 'b', 'a', 'b', 'a'], ['a', 'b', 'a', 'a', 'b', 'b', 'a'], ['a', 'b', 'a', 'b', 'a', 'b', 'b'], ['a', 'b', 'a', 'b', 'b', 'a', 'b', 'a'], ['b', 'a', 'a', 'a', 'b', 'b', 'a', 'b'], ['b', 'a', 'a', 'b', 'b', 'a', 'b', 'a'], ['b', 'a', 'b', 'a', 'a', 'a', 'b', 'a'], ['b', 'a', 'b', 'a', 'b', 'b', 'a', 'b'], ['b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b'], ['b', 'a', 'b', 'a', 'b', 'b', 'b', 'a', 'b']]\n\ndef is_palindrome(s):\n    '''\n    A string is palindrome if it reads the same forwards as it does backwards.\n    A string is also palindrome if it is empty.\n    For example, the strings \"a\", \"aba\", \"abca\" and \"abc\" are palindromes.\n    The strings \"abc\" and \"xyz\" are not palindromes.\n    Write a function that returns True if a string is a palindrome, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i', 'j']]) == [['a', 'b', 'c'], ['d', 'e'], ['f', 'g', 'h', 'i', 'j']]\nassert     sort_sublists([['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]) == [['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a'], ['a', 'a', 'a', 'a', 'a']]\n\ndef reverse_str(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_sublists([\n    ['zebra', 'apple', 'bunny', 'donkey'],\n    ['dog', 'cat', 'hamster', 'rat', 'fox', 'tiger', 'zebra'],\n    ['red', 'purple', 'yellow', 'white'],\n    ['orange', 'blue', 'green', 'violet'],\n    ['tiger', 'panther', 'leopard', 'bear', 'giraffe', 'wolf', 'zebra'],\n    ['lion', 'tiger', 'zebra', 'elephant'],\n    ['spider', 'rat', 'crocodile', 'cat', 'fly', 'bird', 'crab'],\n    ['spider', 'cat', 'crocodile', 'fly', 'bird', 'rat', 'lizard']]) == \\\n        [['dog', 'cat', 'hamster', 'rat', 'fox', 'tiger', 'zebra'],\n        ['lion', 'tiger', 'zebra', 'elephant'],\n        ['blue', 'green', 'violet', 'orange'],\n        ['cat', 'tiger', 'dog', 'bear', 'giraffe', 'wolf', 'zebra'],\n        ['red', 'purple', 'yellow','spider', 'crab','spider', 'lizard'],\n        ['orange', 'blue', 'green', 'violet', 'white']]\n\ndef frequency_sort(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists,\n    sorted by frequency of the characters. For example, if a list contains \n    ['a', 'a', 'b', 'b', 'c', 'd', 'e', 'e', 'f'], the function should sort \n    them as ['a', 'a', 'a', 'b', 'b', 'c', 'd', 'e', 'e', 'e', 'f'].\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert two_unique_nums([[3,1,2,4,5,5,7,2,3,6,7,8,9],[2,3,4,3,3,4,2,1,2,3,4,4,2],[0,1,2,3,3,4,2,3,3,4,5,6,7,8,9,9]]) == [0,1,2,3,4,5,6,7,8,9]\n\ntwo_unique_nums([[3,1,2,4,5,5,7,2,3,6,7,8,9],[2,3,4,3,3,4,2,1,2,3,4,4,2],[0,1,2,3,3,4,2,3,3,4,5,6,7,8,9,9]])\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     two_unique_nums([1, 1, 2, 2]) == True\nassert     two_unique_nums([1, 1, 2, 2, 3]) == True\nassert     two_unique_nums([1, 2, 2, 2]) == False\nassert     two_unique_nums([1, 1, 2, 2, 3, 3]) == False\nassert     two_unique_nums([1, 2, 1, 2, 3, 3]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     two_unique_nums([1,1,2,2]) == ([1,2])\nassert     two_unique_nums([1,2,2,3,3,4,4]) == ([1,2,3,4])\nassert     two_unique_nums([1,2,3,4,4,5,6,7,8,9]) == ([1,2,3,4,5,6,7,8,9])\nassert     two_unique_nums([1,2,3,4,4,5,6,7,8,9]) == ([1,2,3,4,5,6,7,8,9])\nassert     two_unique_nums([1,2,3,4,4,5,6,7,8,9]) == ([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     two_unique_nums([1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (True, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (True, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (True, [1])\nassert     two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (True, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\nassert     two_unique_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (True, [1])\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]\nassert     two_unique_nums([1,1,1,1,1]) == [1]\nassert     two_unique_nums([1,1,1,2,2,2,3,3,3,3,3]) == [1,2,3]\nassert     two_unique_nums([1,2,2,2,3,3,3,3,3,3,3,3,3,3,3]) == [1,2,3]\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     two_unique_nums([1,1,2,2,3,3]) == [1,2,3]\nassert     two_unique_nums([1,1,1,2,2,3,3]) == [1,2,3]\nassert     two_unique_nums([1,1,1,2,2,3,3,3,3]) == [1,2,3]\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     two_unique_nums(nums1) == [1, 2, 3, 4, 5], \"Failed\"\nassert     two_unique_nums(nums2) == [1, 2, 3, 4, 5], \"Failed\"\nassert     two_unique_nums(nums3) == [1, 2, 3, 4, 5], \"Failed\"\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     two_unique_nums([1,2,2,3,3,3]) == [1,2,3]\nassert     two_unique_nums([1,2,2,2,3,3,3]) == [1,2,3]\nassert     two_unique_nums([1,2,2,2,3,3,3,3,3,3,3]) == [1,2,3,3]\nassert     two_unique_nums([1,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"test1\"\nassert     two_unique_nums([5, 5, 5, 5, 5]) == [5], \"test2\"\nassert     two_unique_nums([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1], \"test3\"\nassert     two_unique_nums([]) == [], \"test4\"\n"
    },
    {
        "number": 572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     two_unique_nums(['a', 'a', 'a', 'b']) == ['a', 'b']\nassert     two_unique_nums([1, 2, 3, 4, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     two_unique_nums(['a', 'b', 'a']) == ['a', 'b']\nassert     two_unique_nums([]) == []\nassert     two_unique_nums([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (unique_product([1, 2, 3, 4]) == 24), \"function unique_product() is not working correctly\"\nassert     (unique_product([5, 6, 5, 5]) == 120), \"function unique_product() is not working correctly\"\nassert     (unique_product([10, 9, 10, 10, 9]) == 720), \"function unique_product() is not working correctly\"\nassert     (unique_product([10, 10, 10, 10, 9]) == 720), \"function unique_product() is not working correctly\""
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef unique_product_list_brute_force(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_product([1, 2, 3]) == 6\nassert     unique_product([1, 1, 1, 1]) == 1\nassert     unique_product([1, 2, 3, 4, 5]) == 120\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n(unique_product([1, 2, 3, 4, 5, 6, 7, 8]) == 336)\n(unique_product([10, 20, 30, 40, 50]) == 1500)\nassert \n(unique_product([10, 20, 30, 40, 50, 60, 70, 80]) == 3120)\nassert \n(unique_product([5, 5, 5, 5, 5]) == 50)\nassert \n(unique_product([1, 1, 1, 1, 1]) == 1)\nassert \n(unique_product([1, 1, 1, 1, 1, 1, 1, 1]) == 1)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_product([2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9, 10]) == 3628800\nassert     unique_product([1, 1, 2, 3, 5, 7, 9]) == 55\nassert     unique_product([1, 2, 3, 4, 4, 4, 5, 5, 6]) == 30\nassert     unique_product([1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 9]) == 1680\nassert     unique_product([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2520\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_product([1,2,3,4,1,2,3]) == [1,4,9,16]\nassert     unique_product([1,2,3,4,5,6]) == [2,12,60]\nassert     unique_product([-1,2,-3]) == [-1,0,6]\nassert     unique_product([]) == []"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_product([1,2,3,4,5,6,7,8,9]) == 899000\nassert     unique_product([1,2,3,3,3,4,5,6,7,8,9]) == 999998\nassert     unique_product([1,1,1,1,1,1,1,1,1,1,1]) == 55555\nassert     unique_product([]) == 1\nassert     unique_product([1,1,2,2,3,3,4,4]) == 24\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n(unique_product([1, 2, 3, 1]) == 6)\nassert \n(unique_product([1, 2, 3, 4]) == 24)\nassert \n(unique_product([1, 2, 3, 4, 5]) == 120)\nassert \n(unique_product([2, 2, 3, 3]) == 6)\nassert \n(unique_product([2, 3, 3, 2, 2]) == 12)\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_product([2, 4, 6, 8]) == 96\nassert     unique_product([-10, -20, -30, -40, -50]) == -200\nassert     unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2160\nassert     unique_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -4200\nprint 'all tests passed'\n"
    },
    {
        "number": 573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_product([1, 2, 3, 4, 4, 4, 4, 4, 4]) == 8\nassert     unique_product([1, 2, 3, 4, 5]) == 15\nassert     unique_product([3, 2, 1, 2, 3, 3]) == 12\n\ndef product(list_data):\n    '''\n    Write a python function to calculate the product of the whole numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(5, 10) == 130.0\nassert     surfacearea_cylinder(2, 15) == 31.4\nassert     surfacearea_cylinder(3, 10) == 62.0\nassert     surfacearea_cylinder(4, 10) == 94.0\nassert     surfacearea_cylinder(10, 2) == 34.8\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert      surfacearea_cylinder(3,4) == 38.4\nassert      surfacearea_cylinder(2.1,4) == 38.4\nassert      surfacearea_cylinder(2.1,4.1) == 41.9\nassert      surfacearea_cylinder(2.1,4.2) == 43.0\nassert      surfacearea_cylinder(2.1,4.3) == 44.2\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(2,2) == 4*math.pi*2\nassert     surfacearea_cylinder(3,2) == 6*math.pi*3\nassert     surfacearea_cylinder(2,3) == 4*math.pi*3 + 4*math.pi*2\nassert     surfacearea_cylinder(3,3) == 8*math.pi*4"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(2,4) == 50\nassert     surfacearea_cylinder(0.5,1) == 6*pi\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     surfacearea_cylinder(3,2) == 12.566370614359172\nassert     surfacearea_cylinder(5,3) == 55.25\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(2,3)     == 20\nassert     surfacearea_cylinder(2,5)     == 8*pi\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(2,3) == 84.68\nassert     surfacearea_cylinder(3,4) == 113.20\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     surfacearea_cylinder(2,3) == 12.566370614359172\nassert     surfacearea_cylinder(1.5,5) == 76.1875\n\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(3,4) == 12.566370614359172\nassert     surfacearea_cylinder(3,3) == 7.566370614359172\nassert     surfacearea_cylinder(3.5,3.5) == 7.566370614359172\nassert     surfacearea_cylinder(3,4) == 12.566370614359172\nassert     surfacearea_cylinder(3.5,4.5) == 14.566370614359172\n"
    },
    {
        "number": 574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     surfacearea_cylinder(2,2) == 12.5625\nassert     surfacearea_cylinder(2.5,2) == 28.12625\nassert     surfacearea_cylinder(2.5,2.5) == 60.7125\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([1,3,5,7,9], [1,3,5,7,9])\nassert     not is_Sub_Array([1,3,5,7,9], [1,3,5,7,10])\nassert     is_Sub_Array([1,3,5,7,9], [1,3,5,7])\nassert     is_Sub_Array([1,3,5,7,9], [1,3,5,9])\nassert     is_Sub_Array([1,3,5,7,9], [1,3,7,9])\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([1,2,3,4,5],[1,2,4,5]) == True\nassert     is_Sub_Array([1,2,3,4,5],[1,2,4,5,6,7]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([1,2,3,4],[1,2,3])\nassert not is_Sub_Array([1,2,3,4],[2,3])\nassert not is_Sub_Array([1,2,3,4],[3,4,5])\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Sub_Array([], []) == True\nassert     is_Sub_Array([1], [1, 2]) == True\nassert     is_Sub_Array([1, 2, 3], [1, 2]) == False\nassert     is_Sub_Array([1, 2], [1, 2, 3, 4, 5]) == True\nassert     is_Sub_Array([1, 2, 3], [1, 2, 4, 5]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3,4,5,6], [1,2,3]) == True\nassert     is_Sub_Array([1,2,3,4,5,6], [5,6]) == True\nassert     is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6]) == True\nassert     is_Sub_Array([1,2,3,4,5,6], [6]) == True\nassert     is_Sub_Array([1,2,3,4,5,6], [1,2,3,4,5,6,7]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Sub_Array([1,2,3,4], [1,2]) == True\nassert     is_Sub_Array([1,2,3,4], [4,3]) == True\nassert     is_Sub_Array([1,2,3,4], [4,5]) == False\nassert     is_Sub_Array([1,2,3], [1,2,3]) == True\nassert     is_Sub_Array([1,2,3,4], [2,3]) == True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Sub_Array([1,2,3,4], [1,2,3]) == True\nassert     is_Sub_Array([1,2,3,4], [1,2]) == False\nassert     is_Sub_Array([1,2,3,4], [1,2,3,4]) == True\nassert     is_Sub_Array([1,2,3,4], [1,2,3,5]) == False\nassert     is_Sub_Array([], [1,2,3,4]) == True\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Sub_Array(list(\"abc\"), list(\"abd\"))== True\nassert     is_Sub_Array(list(\"abc\"), list(\"aec\"))== False\nassert     is_Sub_Array(list(\"abc\"), list(\"acd\"))== False\nassert     is_Sub_Array(list(\"abc\"), list(\"adc\"))== True\nassert     is_Sub_Array(list(\"abc\"), list(\"ad\"))== False\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3,4,5], [1,2,3]) == True\nassert     is_Sub_Array([1,2,3,4,5], [1,2]) == True\nassert     is_Sub_Array([1,2,3,4,5], []) == True\nassert     is_Sub_Array([1,2,3,4,5], [1]) == False\n\ndef is_Sub_Arrays(A,B):\n    '''\n    Write a python function to check whether a list of lists is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Sub_Array([1,2,3,4], [1,2,4]) == True\nassert     is_Sub_Array([1,2,3,4], [1,2,5]) == False\nassert     is_Sub_Array([1,2,3,4], [6,7,8]) == False\nassert     is_Sub_Array([1,2,3,4], [1]) == True\n\ndef is_Sub_List(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(100) == 4\nassert     last_Digit_Factorial(1000) == 5\nassert     last_Digit_Factorial(10000) == 6\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     last_Digit_Factorial(6) == 1\nassert     last_Digit_Factorial(100) == 1\nassert     last_Digit_Factorial(103) == 3\nassert     last_Digit_Factorial(567) == 6\nassert     last_Digit_Factorial(3456) == 6\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     last_Digit_Factorial(5) == 1\nassert     last_Digit_Factorial(2) == 2\nassert     last_Digit_Factorial(4) == 4\nassert     last_Digit_Factorial(10) == 2\nassert     last_Digit_Factorial(12) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(5) == 1\nassert     last_Digit_Factorial(10) == 0\nassert     last_Digit_Factorial(100) == 0\nassert     last_Digit_Factorial(200) == 0\nassert     last_Digit_Factorial(499977) == 7\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(0) == 1\nassert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(2) == 0\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(100) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(5) == 1\nassert     last_Digit_Factorial(50000) == 0\nassert     last_Digit_Factorial(23456789) == 6\nassert     last_Digit_Factorial(999) == 9\nassert     last_Digit_Factorial(9876543210) == 2\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(0) == 1\nassert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(10) == 0\nassert     last_Digit_Factorial(11) == 1\nassert     last_Digit_Factorial(50) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(5) == 0\nassert     last_Digit_Factorial(6) == 4\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(20) == 1\nassert     last_Digit_Factorial(100) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(12) == 2\nassert     last_Digit_Factorial(13) == 3\nassert     last_Digit_Factorial(15) == 5\nassert     last_Digit_Factorial(16) == 6\n"
    },
    {
        "number": 577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(0) == 1\nassert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(15) == 3\nassert     last_Digit_Factorial(60) == 6\nassert     last_Digit_Factorial(70) == 7\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     interleave_lists(['a', 'b', 'c', 'd', 'e'], [1, 2, 3], [4, 5, 6]) == [1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6]\nassert     interleave_lists(['a', 'b', 'c'], ['x', 'y', 'z'], [1, 2, 3, 4, 5]) == [1, 'a', 'x', 2, 'b', 'y', 3, 'c', 4, 'z', 5]\nassert     interleave_lists([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) == [1, 'a', 'x', 2, 'b', 'y', 3, 'c', 'z']\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     interleave_lists([1, 2, 3], ['a', 'b', 'c'], ['A', 'B', 'C']) == [1, 'a', 'A', 2, 'b', 'B', 3, 'c', 'C']\nassert     interleave_lists([1, 2, 3], ['a', 'b', 'c'], [4, 5, 6]) == [1, 'a', 4, 2, 'b', 5, 3, 'c', 6]\nassert     interleave_lists([1, 2, 3], ['a', 'b', 'c'], ['4', '5', '6']) == [1, 'a', '4', 2, 'b', '5', 3, 'c', '6']\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3],[4,5,6],[]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3,4,5],[6,7],[8,9,10]) == [1,6,8,2,7,9,3,10,4,5]\n\ndef pop_middle(list1):\n    '''\n    Given a list with an even number of elements, return the second element from the middle.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3],[],[4,5,6]) == [1,2,3,4,5,6]\nassert     interleave_lists([],[],[]) == []\nassert     interleave_lists([],[],[]) == []"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     interleave_lists([1,2,3,4,5], ['a', 'b', 'c'], [True, False, False]) == [1, 'a', True, 2, 'b', False, 3, 'c', 4, False, 5]\nassert     interleave_lists([1,2,3,4,5], ['a', 'b', 'c'], [6,7,8]) == [1, 'a', 6, 2, 'b', 7, 3, 'c', 8]\nassert     interleave_lists([1,2,3,4,5], ['a', 'b', 'c'], [True, False, False, True, False, True]) == [1, 'a', True, 2, 'b', False, 3, 'c', 4, False, 5, True]\n\ndef remove_dups(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     interleave_lists([1, 2], [3, 4], [5, 6, 7]) == [1, 3, 5, 2, 4, 6, 7]\nassert     interleave_lists([1, 2], [], [3, 4]) == [1, 3, 4, 2]\nassert     interleave_lists([], [1, 2], [3, 4]) == [1, 3, 4, 2]\nassert     interleave_lists([1, 2], [3, 4], []) == [1, 3, 4, 2]\nassert     interleave_lists([], [], [1, 2]) == [1, 2]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3,4], [5,6,7], [8,9]) == [1,5,8,2,6,9,3,7]\nassert     interleave_lists([1,2], [3,4], [5,6,7]) == [1,3,5,2,4,6,7]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert     interleave_lists([1, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11, 12, 13]) == [1, 6, 9, 2, 7, 10, 3, 8, 11, 4, 5, 12, 13]\nassert     interleave_lists([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11]) == [1, 5, 9, 2, 6, 10, 3, 7, 11, 4]\nassert     interleave_lists([1, 2, 3], [4, 5, 6, 7], [8, 9]) == [1, 4, 8, 2, 5, 9, 3, 6, 7]\nassert     interleave_lists([1, 2, 3], [4, 5, 6, 7], []) == [1, 4, 2, 5, 3, 6, 7]\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2],[3,4],[5,6,7]) == [1,3,5,2,4,6,7]\nassert     interleave_lists([1,2],[3,4],[5]) == [1,3,5,2,4]\nassert     interleave_lists([1,2],[3,4],[]) == [1,3,4,2]\nassert     interleave_lists([],[],[1,2,3]) == [1,2,3]\nassert     interleave_lists([],[],[]) == []\n"
    },
    {
        "number": 578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     interleave_lists([1,2,3,4,5],['a','b','c','d','e'],[1,2,3,4,5])    ==    [1,'a',2,'b',3,'c',4,'d',5]\nassert     interleave_lists([1,2,3,4,5],['a','b','c','d','e'],[1,2,3,4,5])    ==    [1,'a',2,'b',3,'c',4,'d',5]\nassert     interleave_lists([1,2,3,4,5],['a','b','c','d','e'],[1,2,3,4,5])    ==    [1,'a',2,'b',3,'c',4,'d',5]\nassert     interleave_lists([1,2,3,4,5],['a','b','c','d','e'],[1,2,3,4,5])    ==    [1,'a',2,'b',3,'c',4,'d',5]\nassert     interleave_lists([1,2,3,4,5],['a','b','c','d','e'],[1,2,3,4,5])    ==    [1,'a',2,'b',3,'c',4,'d',5]\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'e')) == ('c',)\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')) == ()\nassert     find_dissimilar(('a', 'a', 'c'), ('a', 'b', 'c')) == ('a',)\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'a', 'c')) == ('a', 'b')\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_dissimilar(('A', 10), (10, 'A')) == ('A', '10')\nassert     find_dissimilar(('A', 10), ('10', 'A')) == ('10', 'A')\nassert     find_dissimilar(('A', 10), (10, 'A')) == ('A', '10')\nassert     find_dissimilar(('A', 10), ('10', 'A')) == ('A', '10')\nassert     find_dissimilar(('A', 10), ('10', 'A')) == ('A', '10')\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_dissimilar((2,5), (6,6)) == (5,6)\nassert     find_dissimilar((1,3), (2,3)) == (1,2)\nassert     find_dissimilar((1,2), (1,2)) == ()\nassert     find_dissimilar((1,2), (2,3)) == (2,3)\nassert     find_dissimilar((1,2,3), (2,3)) == (1,2,3)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_dissimilar((5, 'true', 'russian'), \n                        (5, 'true', 'english')) == (5, 'true', 'russian')\nassert     find_dissimilar((5, 'false', 'russian'), \n                        (5, 'false', 'english')) == (5, 'false', 'english')\nassert     find_dissimilar((5, 'false', 'russian'), \n                        (5, 'true', 'english')) == (5, 'false', 'russian')\nassert     find_dissimilar((5, 'true', 'russian'), \n                        (5, 'false', 'english')) == (5, 'false', 'russian')\n\nprint 'Passed the test'"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_dissimilar(('tup1', 1, 2, 3), ('tup2', 1, 4, 5)) == \\\n                {'tup1', 'tup2'}\nassert     find_dissimilar(('tup1', 1, 2, 3), ('tup2', 2, 3, 4)) == \\\n                {'tup1', 'tup2'}\nassert     find_dissimilar(('tup1', 1, 2, 3), ('tup2', 1, 2, 4)) == \\\n                {'tup1'}\nassert     find_dissimilar(('tup1', 1, 2, 3), ('tup2', 1, 2, 3)) == set()\nassert     find_dissimilar(('tup1', 1, 2, 3), ('tup2', 1, 2, 3, 4, 5)) == \\\n                set()\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_dissimilar(('Python', 'Ruby'), ('Python', 'Ruby')) == [], 'find_dissimilar((\"Python\", \"Ruby\"), (\"Python\", \"Ruby\"))'\nassert     find_dissimilar(('Python', 'Ruby'), ('Python', 'Ruby', 'Java')) == ['Ruby'], 'find_dissimilar((\"Python\", \"Ruby\", \"Java\"), (\"Python\", \"Ruby\", \"Java\"))'\nassert     find_dissimilar(('Python', 'Ruby', 'Java'), ('Python', 'Ruby')) == ['Java'], 'find_dissimilar((\"Python\", \"Ruby\", \"Java\"), (\"Python\", \"Ruby\"))'\nassert     find_dissimilar(('Python', 'Ruby'), ('Python', 'Ruby', 'Java', 'Perl')) == ['Java', 'Perl'], 'find_dissimilar((\"Python\", \"Ruby\", \"Java\", \"Perl\"), (\"Python\", \"Ruby\"))'\nprint ('passed all tests...')"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_dissimilar((\"a\", \"b\", \"c\", \"d\"),     (\"a\", \"b\", \"d\", \"c\"))    ==     ('d', 'c')\nassert     find_dissimilar((\"a\", \"b\", \"c\", \"d\", \"e\"),     (\"a\", \"b\", \"d\", \"e\", \"f\"))    ==     ('e', 'f')\nassert     find_dissimilar((\"a\", \"b\", \"c\", \"d\", \"e\"),     (\"a\", \"b\", \"d\", \"e\", \"f\", \"g\"))    ==     ('b', 'a')\n\ndef test_find_dissimilar():\n    for i in range(10):\n        test_1 = random_tuple(i)\n        test_2 = random_tuple(i)\n        assert find_dissimilar(test_1, test_2) == find_dissimilar(test_2, test_1)\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')) == ('c', 'd')\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b')) == ('c',)\nassert     find_dissimilar(('a', 'b', 'c'), ('b', 'a')) == ('c',)\nassert     find_dissimilar(('a', 'a', 'c'), ('a', 'b', 'c')) == ('c',)\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')) == ('c', 'd')\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_dissimilar(\n            (1, 2, 3, 4, 5, 6),\n            (2, 3, 4, 6, 5, 1)\n        ) == {1, 5}\nassert     find_dissimilar(\n            (1, 2, 3, 4, 5),\n            (2, 3, 4, 6, 5)\n        ) == {1, 5}\nassert     find_dissimilar(\n            (1, 2, 3, 4, 5, 6),\n            (2, 3, 4, 6, 5, 1)\n        ) == {1, 5}\nassert     find_dissimilar(\n            (1, 2, 3, 4, 5, 6),\n            (2, 3, 4, 6, 5, 1)\n        ) == {1, 5}\nassert     find_dissimilar(\n            (1, 2, 3, 4, 5, 6),\n            (2, 3, 4, 6, 5, 1)\n        ) == {1, 5}\n"
    },
    {
        "number": 579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_dissimilar((\"A\",\"B\",\"C\",\"D\",\"E\"), (\"C\",\"D\",\"F\",\"G\",\"H\")) == \"B, G\"\nassert     find_dissimilar((\"A\",\"B\",\"C\",\"D\",\"E\"), (\"E\",\"F\",\"G\",\"H\",\"I\")) == \"F, H\"\nassert     find_dissimilar((\"A\",\"B\",\"C\",\"D\",\"E\"), (\"E\",\"F\",\"G\",\"H\",\"J\")) == \"A, B\"\nassert     find_dissimilar((\"A\",\"B\",\"C\",\"D\",\"E\"), (\"E\",\"F\",\"G\",\"H\",\"K\")) == \"A, B, D, E\"\nassert     find_dissimilar((\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"), (\"G\",\"H\",\"I\",\"J\",\"K\",\"L\")) == \"C, D, E, F\"\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_ele(('Elvish', 1, 4.0, 2.0), even_ele) == (('Elvish', 1, 4.0), 2.0)\nassert     even_ele(('Elvish', 1, 4.0, 2.0), even_ele) == (('Elvish', 1, 4.0), 4.0)\nassert     even_ele(('Elvish', 1, 4.0, 2.0), even_ele) == (('Elvish', 1, 4.0), 2.0)\nassert     even_ele(('Elvish', 1, 4.0, 2.0), even_ele) == (('Elvish', 1, 4.0), 4.0)\nassert     even_ele(('Elvish', 1, 4.0, 2.0), even_ele) == (('Elvish', 1, 4.0), 2.0)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_ele((3, 1, 8, 1, 6, 4, 8, 6, 4, 5, 7), lambda x: x%2==0) == (3, 8, 8, 6, 4, 5, 7)\nassert     even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9), lambda x: x%2==1) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\nassert     even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9), lambda x: x%2==0) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (even_ele(((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16)), even_ele) == (2,4,6,8,10,12))\nassert     (even_ele(((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16)), even_ele) == (1,3,5,7,9,11,13,15))\nassert     (even_ele(((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16)), even_ele) == (1,3,5,7,9,11,13,15))\nassert     (even_ele(((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16)), even_ele) == (1,3,5,7,9,11,13,15))\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_ele(mixed_tuple, even_ele) == (4, 2, (6, 8, 10, 12, 14, 16), 17)\n\nprint \"Passed unit test: even_ele\"\n\ndef     top_n_ele(test_tuple, n): \n    '''\n    Write a function to return the top n elements in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_ele(('a', 'b', 'c', 'd', 'e'), lambda x: x % 2) == ('a', 'b', 'd')\nassert     even_ele(('c', 'd', 'e'), lambda x: x % 2) == ('d', 'e')\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (2, 3, 4, 5, 6) == even_ele( (1, 2, (3, 4, (5, 6)), 7) )\nassert     (2, 3, 4, 5, 6) == even_ele( (1, 2, (3, 4, (5, 6)), 7, 8) )\nassert     (2, 3, 4, 5) == even_ele( (1, 2, (3, 4, (5, 6)), 7, 8, 9) )\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [even_ele(t, even_fnc) for t in ((1, (2, 3, 'a')), (4, 5), (6, (7, 8, 9, 'b'), 10), (11, 12, (13, 14, 15, 'c')))], \\\n                [(1, (2, 3, 'a')), (4, 5), (6, (7, 8, 9, 'b')), (11, 12, (13, 14, 15, 'c'))]\nassert     [even_ele(t, even_fnc) for t in ((1, (2, 'a')), (4, 5), (6, (7, 8, 'b'), 10), (11, 12, (13, 14, 15, 'c')))], \\\n                [(1, (2, 'a')), (4, 5), (6, (7, 8, 'b')), (11, 12, (13, 14, 15, 'c'))]\nassert     [even_ele(t, even_fnc) for t in ((1, (2, 'a')), (4, 5), (6, (7, 8, 'b'), 10), (11, 12, (13, 14, 15, 'c')))], \\\n                [(1, (2, 'a')), (4, 5), (6, (7, 8, 'b')), (11, 12, (13, 14, 15, 'c'))]\nassert     [even_ele(t, even_fnc) for t in ((1, (2, 'a')), (4, 5), (6, (7, 8, 'b'), 10), (11, 12, (13, 14, 15, 'c')))], \\\n                [(1, (2, 'a')), (4, 5), (6, (7, 8, 'b')), (11, 12, (13, 14, 15, 'c'))]\nassert     [even_ele(t, even_fnc) for t in ((1, (2, 'a')), (4, 5), (6, (7, 8, 'b'), 10), (11, 12, (13, 14, 15, 'c')))], \\\n                [(1, (2, 'a')), (4, 5), (6, (7, 8, 'b')), (11, 12, (13, 14, 15, 'c'))]\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_ele((\"a\", (\"b\", (\"c\", \"d\"), (\"e\", \"f\")),\n                  (\"g\", \"h\")), lambda x: len(x) % 2 == 0) == True\nassert     even_ele((\"a\", (\"b\", (\"c\", \"d\"), (\"e\", \"f\")),\n                  (\"g\", \"h\")), lambda x: len(x) % 2 == 1) == False\nassert     even_ele((\"a\", (\"b\", (\"c\", \"d\"), (\"e\", \"f\")),\n                  (\"g\", \"h\")), lambda x: len(x) % 2 == 0) == False\nassert     even_ele((\"a\", (\"b\", (\"c\", \"d\"), (\"e\", \"f\")),\n                  (\"g\", \"h\")), lambda x: len(x) % 2 == 1) == True\nassert     even_ele((\"a\", (\"b\", (\"c\", \"d\"), (\"e\", \"f\")),\n                  (\"g\", \"h\")), lambda x: len(x) % 2 == 0) == True\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_ele(((1,3,5,7),(2,4,6,8),(10,11,12,13),(14,15,16)), even_ele) == ((1,3,5,7),(2,4,6,8),(10,12,14,16))\nassert     even_ele(((1,3,5,7),(2,4,6,8),(10,11,12,13),(14,15,16)), even_ele) == ((1,3,5,7,10,12,14,16),)\nassert     even_ele(((1,3,5,7),(2,4,6,8),(10,11,12,13),(14,15,16)), even_ele) == ((1,3,5,7,10,12,14,16),)\nassert     even_ele(((1,3,5,7,10,12,14,16),), even_ele) == ((1,3,5,7,10,12,14,16),)\nassert     even_ele(((1,3,5,7,10,12,14,16),), even_ele) == ((1,3,5,7,10,12,14,16),)\n"
    },
    {
        "number": 580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (even_ele(('A', 0, 'C', 'C'), \n                  lambda t: ''.join(filter(None, t))) ==\n              ('A', 0, 'C', 'C'))\n\nassert     (even_ele(('A', 0, 1, 'C', 'D'), \n                  lambda t: ''.join(filter(None, t))) ==\n              ('A', 0, 'C', 'D'))\n\nassert     (even_ele(('A', 0, 1, 'C', 'D'), \n                  lambda t: ''.join(filter(None, t))) ==\n              ('A', 0, 'C', 'D'))\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     surface_Area(2,5) == 20\nassert     surface_Area(5,5) == 50\nassert     surface_Area(1,5) == 5\nassert     surface_Area(1,1) == 1\nassert     surface_Area(1,10) == 30\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     surface_Area(5,5) == 50\nassert     surface_Area(1,1) == 2\nassert     surface_Area(4,1) == 10\nassert     surface_Area(2,2) == 4\nassert     surface_Area(3,1) == 12\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     surface_Area(4,3)     == 48 \nassert     surface_Area(2,2)     == 8\nassert     surface_Area(5,1)     == 25\nassert     surface_Area(3,2)     == 12\nassert     surface_Area(1,4)     == 16\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     surface_Area(4,2) == 20\nassert     surface_Area(3,2) == 12\nassert     surface_Area(2,2) == 0\nassert     surface_Area(10,4) == 76\nassert     surface_Area(2,5) == 25\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     surface_Area(2,3) == 17\nassert     surface_Area(2,5) == 22\nassert     surface_Area(2,9) == 24\nassert     surface_Area(3,2) == 11\nassert     surface_Area(5,2) == 8\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     surface_Area(4,10) == 28, \"Test 1 Failed\"\nassert     surface_Area(2,2) == 4, \"Test 2 Failed\"\nassert     surface_Area(0,0) == 0, \"Test 3 Failed\"\nassert     surface_Area(12,10) == 132, \"Test 4 Failed\""
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     surface_Area(3,2) == 12     \nassert     surface_Area(4,2) == 16\nassert     surface_Area(1,2) == 8\nassert     surface_Area(2,2) == 12"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     surface_Area(6,5) == 61\nassert     surface_Area(7,3) == 106\nassert     surface_Area(8,4) == 208\nassert     surface_Area(9,3) == 282\nassert     surface_Area(10,2) == 350\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     surface_Area(5,5)==95\nassert     surface_Area(5,5)==95\nassert     surface_Area(1,1)==4\nassert     surface_Area(1,1)==4\nassert     surface_Area(1,5)==16\n"
    },
    {
        "number": 581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({\"apple\":\"apple\"}) == True\nassert     my_dict({1:\"apple\"}) == False\nassert     my_dict([]) == False\nassert     my_dict(1) == False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (my_dict(dict1) == False)\nassert     (my_dict({}) == True)\nassert     (my_dict({'a': 1}) == True)\nassert     (my_dict({'a': 1, 'b': 2}) == True)\nassert     (my_dict({'a': 1, 'b': 2, 'c': 3}) == True)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef my_dict2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return bool(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({\"a\":1}) == True\nassert     my_dict({\"a\":1, \"b\":2}) == True\nassert     my_dict({\"a\":1, \"b\":2, \"c\":3}) == True\nassert     my_dict({\"a\":1, \"b\":2, \"c\":3, \"d\":4}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef my_dict2(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({\"a\":\"apple\"}) == False\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     my_dict({}) == True, \"Test case 1 failed\"\nassert     my_dict({1:'a', 2:'b'}) == True, \"Test case 2 failed\"\nassert     my_dict({'a':1, 'b':2}) == True, \"Test case 3 failed\"\nassert     my_dict({'a':1, 'b':2, 'c':3}) == True, \"Test case 4 failed\"\nassert     my_dict({'a':1, 'b':2, 'c':3, 'd':4}) == True, \"Test case 5 failed\"\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({'a':1}) == False\n\ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     True == my_dict({})\nassert     False == my_dict({'one':'two'})\nassert     True == my_dict({'one':'two','three':'four'})\nassert     False == my_dict({'one':'two','one':'two'})\nassert     True == my_dict({'one':'two','one':'two','one':'two'})\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     catalan_number(5) == 10\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 5\nassert     catalan_number(6) == 13\nassert     catalan_number(8) == 41\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     catalan_number(0)         == 1\nassert     catalan_number(1)         == 1\nassert     catalan_number(2)         == 2\nassert     catalan_number(3)         == 5\nassert     catalan_number(4)         == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     catalan_number(3) == 5\nassert     catalan_number(5) == 13\nassert     catalan_number(10) == 4368\n\n\ndef catalan_number2(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 1\nassert     catalan_number(4) == 2\nassert     catalan_number(5) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    print catalan_number(9)\n    print catalan_number(11)\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     catalan_number(3) == 4\nassert     catalan_number(4) == 7\nassert     catalan_number(5) == 12\nassert     catalan_number(6) == 19\nassert     catalan_number(7) == 38\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         catalan_number(0) == 1\nassert         catalan_number(1) == 1\nassert         catalan_number(2) == 2\nassert         catalan_number(3) == 5\nassert         catalan_number(4) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     catalan_number(5) == 28\nassert catalan_number(6) == 370\nassert catalan_number(9) == 4862\nassert catalan_number(10) == 750\nassert catalan_number(11) == 11760\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 1\nassert     catalan_number(4) == 2\nassert     catalan_number(5) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_adverbs(\"Hello World\")     ==     [(\"e\",4)]\nassert     find_adverbs(\"What a beautiful day!\")     ==     [(\"e\",10)]\nassert     find_adverbs(\"I have a red and blue pencil\")     ==     [(\"e\",3),(\"a\",2),(\"n\",7)]\nassert     find_adverbs(\"I have a red and blue pencil\")     ==     [(\"e\",3),(\"a\",2),(\"n\",7)]\nassert     find_adverbs(\"Love is like eating ice cream\")     ==     [(\"e\",10)]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     'ly ly' == find_adverbs('ly ly')\nassert     'ly ly' == find_adverbs('ly ly ly')\nassert     'ly ly ly' == find_adverbs('ly ly ly ly')\nassert     'ly ly ly ly' == find_adverbs('ly ly ly ly ly')\nassert     'ly ly ly ly ly' == find_adverbs('ly ly ly ly ly ly')\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_adverbs('') == []\nassert     find_adverbs('a') == []\nassert     find_adverbs('to') == []\nassert     find_adverbs('have') == []\nassert     find_adverbs('ly') == ['ly', 1]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_adverbs(\"He drinks ly\") == [('ly', 4)]\nassert     find_adverbs(\"He drinks ly at home\") == [('ly', 4)]\nassert     find_adverbs(\"We eat ly\") == [('ly', 0)]\nassert     find_adverbs(\"We eat ly in the home\") == [('ly', 0)]\nassert     find_adverbs(\"We eat ly at home and play\") == [('ly', 0), ('ly', 8)]\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_adverbs('She is a nice girl.') == (('ly', 12),)\nassert     find_adverbs('The town is cloudy.') == (('ly', 13),)\nassert     find_adverbs('This is a huge house.') == (('ly', 11),)\n\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_adverbs('The quick brown fox jumps over the lazy dog.') == 'over', 'Expected \"over\". Got \"{0}\".'.format(find_adverbs('The quick brown fox jumps over the lazy dog.'))\nassert     find_adverbs('I thought I had seen the movie.') == '', 'Expected an empty string. Got \"{0}\".'.format(find_adverbs('I thought I had seen the movie.'))\nassert     find_adverbs('I thought I had seen the movie.') == '', 'Expected an empty string. Got \"{0}\".'.format(find_adverbs('I thought I had seen the movie.'))\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_adverbs('adly') == {'adly': [0,5]}\nassert     find_adverbs('adly') == {'adly': [0,5]}\nassert     find_adverbs('adly') == {'adly': [0,5]}\nassert     find_adverbs('a') == {'a': [0]}\nassert     find_adverbs('a') == {'a': [0]}\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nre.search(\"\\wly$\", \"wly\")\nre.search(\"\\wly$\", \"ply\")\nre.search(\"\\wly$\", \"ly\")\n\ndef count_letters(text):\n    '''\n    Write a function that takes a string and returns a dictionary of (letter, frequency) pairs.\n    '''\n    pass\n\ndef remove_letters(text):\n    '''\n    Write a function to remove all non-alpha characters from a string.\n    '''\n    pass\n\ndef compute_difference(numbers):\n    '''\n    Write a function that computes difference between two numbers. \n    You should not use if-else statement here.\n    '''\n    pass\n\ndef compute_xor(numbers):\n    '''\n    Write a function that computes XOR of two numbers. \n    You should not use if-else statement here.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_adverbs('she is beautiful and she is happy') == ['ly']\nassert     find_adverbs('She is beautiful and she is happy') == ['ly']\nassert     find_adverbs('I love the smell of fresh air') == ['ly']\nassert     find_adverbs('I love the smell of fresh air and the smell of fresh air') == ['ly', 'ly']\nassert     find_adverbs('I love the smell of fresh air and the smell of fresh air and the smell of fresh air and the smell of fresh air') == ['ly', 'ly', 'ly']\n"
    },
    {
        "number": 584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_adverbs('This is a good day to code!') == ['good day']\nassert find_adverbs('I know how to code') == ['know']\nassert find_adverbs('I am very good at coding') == ['very', 'good', 'code']\nassert find_adverbs('I am not so good at coding') == []\nassert find_adverbs('I know how to code but not good at coding') == ['know']\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     expensive_items([(1, 2), (2, 4), (2, 5), (3, 4), (4, 2), (5, 3), (6, 3), (7, 4)], 2) == [(2, 5), (4, 2)]\nassert expensive_items([(1, 2), (2, 4), (2, 5), (3, 4), (4, 2), (5, 3), (6, 3), (7, 4)], 1) == [(2, 4), (2, 5), (3, 4), (4, 2), (5, 3), (6, 3), (7, 4)]\nassert expensive_items([(1, 2), (2, 4), (2, 5), (3, 4), (4, 2), (5, 3), (6, 3), (7, 4)], 0) == [()]\nassert expensive_items([(1, 2), (2, 4), (2, 5), (3, 4), (4, 2), (5, 3), (6, 3), (7, 4)], 10) == [(7, 4)]\nassert expensive_items([], 1) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     expensive_items([1,2,3,4,5,6],1) == [6]\nassert expensive_items([1,2,3,4,5,6],2) == [5,6]\nassert expensive_items([1,2,3,4,5,6],3) == [4,5,6]\nassert expensive_items([1,2,3,4,5,6],4) == [3,4,5,6]\nassert expensive_items([1,2,3,4,5,6],5) == [2,3,4,5,6]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],5)==[6,7,8,9,10]\nassert expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],10)==[6,7,8,9,10,11,12,13,14,15,16]\nassert expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],1)==[1]\nassert expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],0)==[]\n\n'''\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nexpensive_items([2,4,6,7,8,9,10],3) == [6,7,8]\nassert expensive_items([3,4,5,6,7,8,9,10],2) == [6,7]\nassert expensive_items([2,4,6,7,8,9,10],5) == [9,10]\nassert expensive_items([2,4,6,7,8,9,10],0) == []\nassert expensive_items([2,4,6,7,8,9,10],5) == [9,10]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     expensive_items([1,4,3,5,2,7],3) == [7,4,5]\nassert     expensive_items([1,4,3,5,2,7],1) == [7]\nassert     expensive_items([1,4,3,5,2,7],5) == [1,4,3,5,2]\nassert     expensive_items([1,4,3,5,2,7],2) == [1,4,5]\nassert     expensive_items([1,4,3,5,2,7],0) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     expensive_items([(4,6),(2,5),(1,3),(5,9)], 3)    == [4,5,9], \"incorrect result for [4,6,5,9], 3\"\nassert     expensive_items([(0,1),(4,5),(2,3),(5,9)], 3)    == [4,5,9], \"incorrect result for [0,1,2,3], 3\"\nassert     expensive_items([(0,1),(2,3),(4,5),(6,7)], 3)    == [6,7,0], \"incorrect result for [0,1,2,3], 3\"\nassert     expensive_items([(0,1),(3,5),(2,3),(5,9)], 3)    == [3,5,9], \"incorrect result for [0,1,2,3], 3\"\nassert     expensive_items([(1,6),(2,7),(3,8),(4,9)], 3)    == [2,7,9], \"incorrect result for [1,2,3,4], 3\"\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     expensive_items([i for i in range(10)], 3) == [9, 8, 7]\nassert     expensive_items([i for i in range(100)], 10) == [99, 98, 97, 96, 95, 94, 93, 92, 91, 90]\nassert     expensive_items([i for i in range(10)], 0) == []\nassert     expensive_items([], 0) == []\nassert     expensive_items([i for i in range(1, 10)], 1) == [9]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     expensive_items(['A', 'B', 'C', 'D', 'E'], 3) == ['A', 'B', 'D'], \"First\"\nassert     expensive_items(['A', 'B', 'C', 'D', 'E'], 2) == ['A', 'B'], \"Second\"\nassert     expensive_items(['A', 'B', 'C', 'D', 'E'], 1) == ['A'], \"Third\"\nassert     expensive_items(['A', 'B', 'C', 'D', 'E'], 0) == [], \"Fourth\"\nassert     expensive_items([], 0) == [], \"Fifth\"\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     expensive_items([\n        [\"item0\",\"cost1\"],\n        [\"item1\",\"cost2\"],\n        [\"item2\",\"cost3\"],\n        [\"item3\",\"cost4\"],\n        [\"item4\",\"cost5\"],\n        [\"item5\",\"cost6\"]],3) == [[\"item1\",\"cost2\"],[\"item3\",\"cost4\"],[\"item5\",\"cost6\"]]\nassert expensive_items([[1,2],[4,5],[2,8],[8,10],[9,7],[7,5],[5,7],[5,9],[2,6]],3) == [\n        [4,5],[2,8],[8,10]]\nassert expensive_items([[1,2],[4,5],[2,8],[8,10],[9,7],[7,5],[5,7],[5,9],[2,6]],0) == [[], []]\nassert expensive_items([[1,2],[4,5],[2,8],[8,10],[9,7],[7,5],[5,7],[5,9],[2,6]],9) == [[1,2],[4,5],[2,8],[8,10],[9,7],[7,5],[5,7],[5,9]]\n"
    },
    {
        "number": 585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],6) == [16,17,18,19,20,1,2,3,4,5,6,7,8,9,10]\nassert     expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],7) == [16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12]\nassert     expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],4) == [16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13]\nassert     expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],2) == [16,17,18,19,20,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nassert     expensive_items([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],0) == []\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7],3) == [[1, 2, 3], [4, 5, 6], [7]]\nassert     split_Arr([1,2,3,4,5,6],3) == [[1, 2, 3], [4, 5, 6]]\nassert     split_Arr([1,2,3,4],3) == [[1, 2, 3], [4]]\nassert     split_Arr([1,2],3) == [[1, 2]]\nassert     split_Arr([1],3) == [[1]]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_Arr([1,2,3,4,5,6], 2) == [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]]\nassert     split_Arr([1,2,3,4,5], 2) == [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\nassert     split_Arr([1,2,3,4,5], 3) == [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\nassert     split_Arr([1,2,3,4,5], 5) == [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\nassert     split_Arr([1,2,3,4,5], 6) == [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 2) == ['b', 'a', 'd', 'c', 'e', 'f', 'g']\nassert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == ['d', 'b', 'a', 'c', 'e', 'f', 'g']\nassert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 4) == ['e', 'b', 'a', 'c', 'd', 'f', 'g']\nassert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 5) == ['f', 'b', 'a', 'c', 'd', 'e', 'g']\nassert     split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 6) == ['g', 'b', 'a', 'c', 'd', 'e', 'f']\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7,8,9,10], 4) == [1,2,3,4,5,6,7,8,9,10], 'fail to split'\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 3) == [1,2,3,4,5,6,7,8,9,10], 'fail to split'\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 1) == [1,2,3,4,5,6,7,8,9,10], 'fail to split'\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 0) == [], 'fail to split'\nassert     split_Arr([1], 0) == [], 'fail to split'\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7,8],4) == [[1,2,3,4,5],[6,7,8]], \"Error\"\nassert     split_Arr([1,2,3,4,5],2) == [[1,2],[3,4],[5]], \"Error\"\nassert     split_Arr([1,2,3,4],3) == [[1,2,3],[4]], \"Error\"\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert         split_Arr([1, 2, 3, 4, 5, 6], 3) == [1, 2, 3, 4, 5, 6]\nassert         split_Arr(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_Arr(range(9), 4) == [[0, 1, 2, 3], [4, 5, 6, 7], [8]]\nassert     split_Arr(range(1, 10), 5) == [[0, 1, 2, 3, 4], [5], [6, 7, 8, 9]]\nassert     split_Arr(range(10), 2) == [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]]\n"
    },
    {
        "number": 586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7], 2) == [[1,2],[3,4,5],[6,7]]\nassert     split_Arr([1,2,3,4,5,6,7], 3) == [[1,2,3],[4,5,6,7]]\nassert     split_Arr([1,2,3,4,5,6,7], 4) == [[1,2,3,4],[5,6,7]]\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     list_tuple([1,2,3])         == (1,2,3), \"Failed\"\nassert     list_tuple((1,2,3))         == (1,2,3), \"Failed\"\n\ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([1]) == (1, )\nassert     list_tuple([]) == ()\n\ndef tuple_list(tuplex):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (\n    list_tuple(['a', 'b', 'c']) ==\n    ('a', 'b', 'c')\n    )\n\ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     type(list_tuple([1, 2, 3, 4])) == tuple\nassert     list_tuple((1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     list_tuple(list_tuple((1, 2, 3, 4))) == (1, 2, 3, 4)\nassert     list_tuple(list_tuple((1, 2, 3, 4, 5))) == (1, 2, 3, 4, 5)\nassert     list_tuple(list_tuple(list_tuple((1, 2, 3, 4)))) == (1, 2, 3, 4)\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (list_tuple([1, 2, 3]) == (1, 2, 3))\nassert     (list_tuple([1, 2, 3, 4, 5, 6]) == (1, 2, 3, 4, 5, 6))\nassert     (list_tuple([1, 2, 3, 4, 5, 6, 7]) == (1, 2, 3, 4, 5, 6, 7))\n\ndef list_to_list_tuple(listx):\n    '''\n    Write a function to convert a list to a list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     type(list_tuple([1, 2, 3])) == tuple\nassert     type(list_tuple(['a', 'b', 'c'])) == tuple\nassert     type(list_tuple(['a', 'b', 1])) == tuple\nassert     type(list_tuple(['a', 'b', {'a': 1}])) == tuple\nassert     type(list_tuple(['a', 'b', None])) == tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (list_tuple([1,2,3]) == (1,2,3))\nassert     (list_tuple([1,2,3,4]) == (1,2,3,4))\nassert     (list_tuple([1,2,3,4,5,6,7,8]) == (1,2,3,4,5,6,7,8))\nassert     (list_tuple([1,2,3,4,5,6,7,8,9,10]) == (1,2,3,4,5,6,7,8,9,10))\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     type(list_tuple([]))    ==    type(())\nassert     type(list_tuple([1]))    ==    type(())\nassert     type(list_tuple([1, 2]))    ==    type(())\nassert     type(list_tuple([1, 2, 3]))    ==    type(())\nassert     type(list_tuple([1, 2, 3, 4]))    ==    type(())\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     list_tuple([1, 2, 3])     ==    (1, 2, 3)\nassert     list_tuple(['a', 'b', 'c'])     ==    ('a', 'b', 'c')\nassert     list_tuple([1, 2, 'a'])     ==    (1, 2, 'a')\n\ndef list_sort(listx):\n    '''\n    Write a function to sort a list by the length of the element.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple(['a','b','c']) == ('a','b','c')\nassert     list_tuple(['a','b','c',4]) == ('a','b','c',4)\nassert     list_tuple([1,2,3,'a','b','c']) == (1,2,3,'a','b','c')\nassert     list_tuple([]) == ()\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         big_diff([1, 2, 3]) == 2\nassert         big_diff([3, 2, 1]) == 1\nassert         big_diff([9, 8, 7]) == 8\nassert         big_diff([8, 7, 6]) == 1\nassert         big_diff([5, 5]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     big_diff([10, 4, 7, 8, 9, 3]) == 8\nassert     big_diff([3, 5, 1, 6, -1, -10, -7]) == 8\nassert     big_diff([10, 4, -7, 8, 9, 3]) == -12\nassert     big_diff([-3, -5, -1, -6, -7, -8]) == -12\nassert     big_diff([10, -10]) == 10\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     big_diff([1,2,3,4,5]) == 4\nassert     big_diff([100,10,1,2,100]) == 19\nassert     big_diff([100,10,1,2,100,1,2,3]) == 18\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     big_diff([5, 6, 7, 8, 9, 0, 1]) == 8\nassert     big_diff([4, 1, 2, 3]) == 3\nassert     big_diff([2, 1]) == 1\nassert     big_diff([1, 2, 3, 4]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     big_diff([2, 10, 3, 4, 11, 0, 9, 8, 7, 6, 5, 4, 3, 2]) == 11\nassert     big_diff([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 19\nassert     big_diff([0, 10]) == 10\nassert     big_diff([]) == None\n\ndef count_sheeps(sheep):\n    '''\n    Write a python function to count the number of sheeps in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     big_diff([1, 2, 3, 4, 5, 6]) == 5\nassert     big_diff([-1, -2, -3, -4, -5, -6]) == -6\nassert     big_diff([1.5, -2.5, 3.5, 4.5, 5.5, 6.5]) == 1.5\n\n\ndef find_max_product(nums):\n    '''\n    Write a python function to find the maximum product of two integers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     big_diff([1,2,3]) == 2\nassert     big_diff([1,2,3,4,5]) == 4\nassert     big_diff([5,4,3,2,1]) == 4\nassert     big_diff([5,4,3,2]) == 3\nassert     big_diff([5,4,3,2,1,0]) == 1\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     big_diff([1,2,3,4,5,6]) == 5\nassert     big_diff([1,2,3,4,5,6,7]) == 4\nassert     big_diff([1,2,3,4,5,6,7,8]) == 3\nassert     big_diff([1,2,3,4,5,6,7,8,9]) == 1\n"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     big_diff([2, 3, 9, 1]) == 8\nassert     big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 10\nassert     big_diff([5, 4, 3, 2, 1]) == -4"
    },
    {
        "number": 588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     big_diff([5, 4, 3, 2, 1]) == 1\nassert     big_diff([5, -5]) == 10\nassert     big_diff([1, -2, 3, -4, 5]) == -1\nassert     big_diff([10, 1, 9]) == 9\nassert     big_diff([5, 5, 5, 5, 5, 5]) == 0\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     perfect_squares(1, 1000) == [\n                [1,4,9,16,25,36,49,64,81],\n                [4,16,36,64,100,144,169,196,256,324,384,448,512,576],\n                [9,64,100,144,169,196,256,324,384,448,512,576,722,768,825,936],\n                [16,144,169,196,256,324,384,448,512,576,722,768,825,936,1000]\n            ]\nassert     perfect_squares(1, 50) == [\n                [1,4,9,16,25,36,49,64],\n                [4,16,36,64,100,144,169,196],\n                [9,64,100,144,169,196,256,324,384,448,512,576,722,768,825,936],\n                [16,144,169,196,256,324,384,448,512,576,722,768,825,936,1000]\n            ]\nassert     perfect_squares(1, 100) == [\n                [1,4,9,16,25,36,49,64,81,100],\n                [4,16,36,64,100,144,169,196,256,324,384,448,512,576,722,768,825,936,1000],\n                [9,64,100,144,169,196,256,324,384,448,512,576,722,768,825,936,1000],\n                [16,144,169,196,256,324,384,448,512,576,722,768,825,936,1000]\n            ]\nassert     perfect_squares(1, 200) == [\n                [1,4,9,16,25,36,49,64,81,100,121,144,169,196,256,324,384,448,512,576,722,768,825,936,1000],\n                [4,16,36,64,100,144,169,196,256,324,384,448,512,576,722,768,825,936,1000],\n                [9,64,100,144,169,196,256,324,384,448,512,576,722,768,825,936,1000],\n                [16,144,169,196,256,324,384,448,512,576,722,768,825,936,1000],\n                [25,256,324,384,448,512,576,722,768,825,936,1000],\n                [36,384,448,512,576,722,768,825,936,1000],\n                [49,512,576,722,768,825,936,1000],\n                [64,576,722,768,825,936,1000],\n                [81,1000]\n            ]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     perfect_squares(25, 40) == [16, 22, 32, 36]\nassert     perfect_squares(49, 98) == [64, 81, 96, 100, 108, 121, 144, 169]\nassert     perfect_squares(16, 30) == [16, 22, 32]\n\n\ndef list_pair_product(list_):\n    '''\n    Write a function to return the product of the 2 elements of a list if they are a pair,\n    otherwise return -1.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     perfect_squares(25, 50) == [25, 25, 25, 25, 25]\nassert     perfect_squares(15, 50) == [25, 25, 25, 25, 25]\nassert     perfect_squares(30, 40) == [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]\nassert     perfect_squares(40, 50) == [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]\nassert     perfect_squares(10, 50) == [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     perfect_squares(5, 10) == [4, 9]\nassert     perfect_squares(1, 4) == [1]\nassert     perfect_squares(1, 9) == [1, 4, 9]\nassert     perfect_squares(1, 10) == [1, 4, 9]\nassert     perfect_squares(4, 10) == [4, 9]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     perfect_squares(3, 10) == [4, 9]\nassert     perfect_squares(10, 25) == [16, 25]\nassert     perfect_squares(10, 31) == [16, 25]"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     perfect_squares(1,2) == []\nassert     perfect_squares(1,10) == []\nassert     perfect_squares(2,1) == []\nassert     perfect_squares(10,100) == [1,4,9]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     perfect_squares(1, 10) == [1, 4, 9]\nassert     perfect_squares(10, 100) == [16, 25, 36, 49, 64, 81]\nassert     perfect_squares(10, 100) == [16, 25, 36, 49, 64, 81]\nassert     perfect_squares(100, 1000) == [256, 625, 1225, 2500, 4096, 8192, 16384, 32768, 65536, 131072, 2621440, 524288, 1048576, 2097150]"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     perfect_squares(1,2) == [1]\nassert     perfect_squares(3,4) == [4]\nassert     perfect_squares(3,5) == [4,9]\nassert     perfect_squares(10,11) == [4,9,16]\nassert     perfect_squares(13,14) == [4,9,16,25]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nperfect_squares(1, 1) == []\nassert \nperfect_squares(4, 8) == [16, 25]\nassert \nperfect_squares(1, 8) == [4, 9]\nassert \nperfect_squares(0, 9) == [1, 4, 9]\nassert \nperfect_squares(1, 9) == [4, 9]\n"
    },
    {
        "number": 589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     perfect_squares(2, 100) == [4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert     perfect_squares(3, 100) == [4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert     perfect_squares(2, 1000) == [4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1841, 1924, 2001, 2096, 2189, 2244, 2309, 2384, 2467, 2542, 2619, 2716, 2815, 2914, 3003, 3192, 3281, 3374, 3449, 3626, 3725, 3824, 3923, 4002, 4081, 4160, 4225, 4304, 4399, 4568, 4647, 4836, 4925, 5024, 5121, 5200, 5399, 5479, 5658, 5747, 5836, 5925, 6000, 6201, 6304, 6409, 6488, 6567, 6650, 6741, 6840, 6939, 7008, 7197, 7296, 7395, 7494, 7593, 7692, 7781, 7870, 7969, 8000, 8189, 8288, 8377, 8476, 8555, 8645, 8644, 8743, 8752, 8861, 8950, 9009, 9198, 9297, 9396, 9495, 9594, 9693, 9792, 9881, 9980, 10000]\nassert     perfect_squares(3, 1000) == [4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1841, 1924, 2001, 2096, 2189, 2244, 2309, 2384, 2467, 2542, 2619, 2716, 2815, 2914, 3003, 3192, 3281, 3374, 3449, 3626, 3725, 3824, 3923, 4002, 4081, 4160, 4225, 4304, 4399, 4568, 4647, 4836, 4925, 5024, 5121, 5200, 5399, 5479, 5658, 5747, 5836, 5925, 6000, 6201, 6304, 6409, 6488, 6567, 6650, 6741, 6840, 6939, 7008, 7197, 7296, 7395, 7494, 7593, 7692, 7781, 7870, 7969, 8000, 8189, 8288, 8377, 8476, 8555, 8645, 8644, 8743, 8752, 8861, 8950, 9009, 9198, 9297, 9396, 9495, 9594, 9693, 9792, 9881, 9980, 10000]\n\ndef rational_to_contfrac(x, y):\n    '''\n    Convert a rational x/y fraction into\n    a list of partial quotients [a0,..., an]\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n(1,2) == polar_rect(cmath.rect(2,1))\nassert \n(1,2) == polar_rect(cmath.rect(1,2))\nassert \n(0,1) == polar_rect(cmath.rect(1,1))\nassert \n(0,1) == polar_rect(cmath.rect(1,0))\nassert \n(0,0) == polar_rect(cmath.rect(1,0))\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to compute the distance between two points.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     polar_rect(2, 2) == (2, 2)\nassert     polar_rect(2, 2 * cmath.sqrt(3)) == (2, 2)\nassert     polar_rect(cmath.sqrt(2), cmath.sqrt(2)) == (1, 0)\nassert     polar_rect(cmath.sqrt(2), -cmath.sqrt(2)) == (-1, 0)\nassert     polar_rect(cmath.sqrt(2), -cmath.sqrt(2)) == (1, 0)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     polar_rect(0,0) == (-1,1)\nassert     polar_rect(1,0) == (0,1)\nassert     polar_rect(1,1) == (1,0)\nassert     polar_rect(1,-1) == (0,-1)\nassert     polar_rect(0.5,0) == (-1,1/2)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     polar_rect(1,cmath.sqrt(2))==complex(1,-1)\nassert     polar_rect(1,0)==complex(0,1)\nassert     polar_rect(1,-cmath.sqrt(2))==complex(1,1)\nassert     polar_rect(1,-cmath.sqrt(3))==complex(1,-1)\nassert     polar_rect(1,-cmath.sqrt(4))==complex(-1,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     polar_rect(1, 2)    ==    (1, -2)\nassert     polar_rect(1, -2) ==    (-1, 2)\nassert     polar_rect(-1, 2) ==    (-1, -2)\nassert     polar_rect(1, -2) ==    (1, -2)\nassert     polar_rect(0, -1) ==    (0, 1)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     polar_rect(1,1) == (1.0,1.0)\nassert     polar_rect(1,1.5) == (0.8,0.8)\nassert     polar_rect(1,2) == (0.8,1.0)\nassert     polar_rect(1,2.5) == (0.8,0.8)\nassert     polar_rect(1,3) == (0.8,1.0)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     polar_rect(1,1) == (1,1)\nassert     polar_rect(1,2) == (1,2)\nassert     polar_rect(-1,-1) == (-1,-1)\nassert     polar_rect(-1,1) == (-1,1)\nassert     polar_rect(-1,-2) == (-1,-2)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     polar_rect(1,cmath.pi/2) == (0,0)\nassert     polar_rect(1,cmath.pi/4) == (1,0)\nassert     polar_rect(2,cmath.pi/2) == (1,1)\nassert     polar_rect(2,cmath.pi/4) == (1.5,0.5)\nassert     polar_rect(2,cmath.pi/4+cmath.pi/2) == (1.5,0.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(1,0) == (1,0)\nassert     polar_rect(1,2) == (1,2)\nassert     polar_rect(1,1) == (-0.7071067811865475,1)\nassert     polar_rect(1,-1) == (-0.7071067811865475,-1)\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1], \"Check the swap_List\"\n\n\ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     swap_List([4, 1, 2, 3, 5]) == [5, 1, 2, 3, 4], \"Failed Test #1\"\nassert     swap_List([]) == [], \"Failed Test #2\"\n\ndef count_pairs(list1, list2):\n    '''\n    Write a python function to count the number of elements in list1 that are in list2.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [7, 6, 5, 4, 3, 2, 1] == swap_List([1, 2, 3, 4, 5, 6, 7])\nassert     [1, 2, 3, 4, 5, 6, 7] == swap_List([7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6] == swap_List([7, 6, 5, 4, 3, 2])\nassert     [1, 2, 3, 4, 5] == swap_List([7, 6, 5, 4, 3])\nassert     [1, 2, 3, 4] == swap_List([7, 6, 5, 4, 3, 2])\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3]) == [2,3,1], \"Failed Test Case 1\"\nassert     swap_List([4,5,6]) == [5,6,4], \"Failed Test Case 2\"\nassert     swap_List([7,8,9]) == [8,9,7], \"Failed Test Case 3\"\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], 'Failed to swap the first and last elements'\nassert     swap_List([1,2,3,4]) == [4,1,2,3], 'Failed to swap the first and last elements'\nassert     swap_List([1,2,3,4,5,6]) == [6,5,4,3,2,1], 'Failed to swap the first and last elements'\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1], \"Failed test case 1\"\nassert     swap_List([1,2,3]) == [3,1,2], \"Failed test case 2\"\nassert     swap_List([1]) == [1], \"Failed test case 3\"\nassert     swap_List([]) == [], \"Failed test case 4\"\nassert     swap_List([\"H\",1,2]) == [2,1, \"H\"], \"Failed test case 5\"\nprint \"All tests passed\"\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     swap_List([1, 2, 3]) == [2, 1, 3], \"Failed Test: swap_List([1, 2, 3])\"\nassert     swap_List([1, 2, 3, 4]) == [2, 1, 4, 3], \"Failed Test: swap_List([1, 2, 3, 4])\"\nassert     swap_List([]) == [], \"Failed Test: swap_List([])\"\nassert     swap_List([1, 2, 3, 4, 5]) == [2, 1, 4, 3, 5], \"Failed Test: swap_List([1, 2, 3, 4, 5])\"\n\n\ndef remove_items(newList, val):\n    '''\n    Write a python function to remove all the occurrence of the given number from a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     swap_List(list1) == list2\nassert     swap_List(list1) == list3"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (swap_List([1,2,3,4,5]) == [5,2,1,4,3]),'Error in swap_List'\nassert     (swap_List(['c','c','a','b']) == ['b','a','c','c']),'Error in swap_List'\nassert     (swap_List([]) == []),'Error in swap_List'\nassert     (swap_List([1]) == [1]),'Error in swap_List'\nassert     (swap_List([1,2]) == [2,1]),'Error in swap_List'\n"
    },
    {
        "number": 591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef shuffle_List(newList):\n    '''\n    Write a python function to shuffle elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(5, 3) == 10\nassert     binomial_Coeff(10, 5) == 252\nassert     binomial_Coeff(15, 7) == 11075\nassert     binomial_Coeff(17, 5) == 121080\nassert     binomial_Coeff(17, 10) == 615750\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     binomial_Coeff(5,3)==10\nassert     binomial_Coeff(5,2)==10\nassert     binomial_Coeff(5,1)==5\nassert     binomial_Coeff(5,0)==1\nassert     binomial_Coeff(4,2)==6\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     binomial_Coeff(5,3) == 10\nassert     binomial_Coeff(10,8) == 50\nassert     binomial_Coeff(20,10) == 8128\nassert     binomial_Coeff(3,5) == 5\nassert     binomial_Coeff(5,0) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(5,3) == 10\nassert     binomial_Coeff(4,2) == 6\nassert     binomial_Coeff(7,4) == 105\nassert     binomial_Coeff(10,5) == 252\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(5,3)==10\nassert     binomial_Coeff(6,4)==80\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a python function to find the sum of the proper divisors of a number\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     binomial_Coeff(5,3)     == 10\nassert     binomial_Coeff(10,7)     == 252\nassert     binomial_Coeff(10,8)     == 1056\n\ndef permutation_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the permutation co-efficients.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     binomial_Coeff(2,1) == 1\nassert     binomial_Coeff(2,2) == 2\nassert     binomial_Coeff(2,3) == 2\nassert     binomial_Coeff(2,4) == 6\nassert     binomial_Coeff(2,5) == 6\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(10,5) == 10 * 9 / 2\nassert     binomial_Coeff(20,10) == 20 * 19 / 2\nassert     binomial_Coeff(15,0) == 1\n\ndef computeFactorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(4,3) == 0.0625\nassert     binomial_Coeff(4,2) == 0.125\nassert     binomial_Coeff(4,1) == 0.25\nassert     binomial_Coeff(4,0) == 0\nassert     binomial_Coeff(5,3) == 0.015625\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     removezero_ip(\"192.168.1.1\") == \"192.168.1.1\"\nassert     removezero_ip(\"192.168.1.0\") == \"192.168.1.0\"\nassert     removezero_ip(\"1.1.1.0\") == \"1.1.1.0\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert     removezero_ip(\"0.0.0.1\") == \"0.0.0.1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     removezero_ip('10.10.10.10') == '10.10.10.10'\nassert     removezero_ip('10.10.10.101') == '10.10.10.1'\nassert     removezero_ip('10.10.10.0') == '10.10.10'\nassert     removezero_ip('10.10.10.1.0') == '10.10.10.1'\nassert     removezero_ip('10.10.10.1.1') == '10.10.10.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \ndef removezero_ip(ip):\n    if len(ip) == 0:\n        return None\n    elif len(ip) == 1:\n        return ip\n    else:\n        if ip[0] == '0':\n            return removezero_ip(ip[1:])\n        else:\n            return ip\n\ndef to_int(ip):\n    '''\n    Write a function to turn a string into an integer.\n    '''\n    pass\n\ndef to_int(ip):\n    l = len(ip)\n    if l == 0:\n        return None\n    elif l == 1:\n        return ip\n    else:\n        return to_int(ip[1:])\n\ndef to_int(ip):\n    if len(ip) == 0:\n        return None\n    elif len(ip) == 1:\n        return int(ip)\n    else:\n        return to_int(ip[1:])\n\ndef to_int(ip):\n    if len(ip) == 0:\n        return None\n    elif len(ip) == 1:\n        return int(ip)\n    else:\n        return to_int(ip[1:])\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     removezero_ip('127.0.0.1') == '127.0.0.1'\nassert     removezero_ip('0.0.0.1') == '0.0.0.1'\nassert     removezero_ip('255.0.0.1') == '255.0.0.1'\nassert     removezero_ip('255.0.0.0') == '255.0.0.0'\nassert     removezero_ip('255.0.0.1') == '255.0.0.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     removezero_ip('255.0.0.0') == '255.0.0.0'\nassert     removezero_ip('255.0.0.1') == '255.0.0.1'\nassert     removezero_ip('255.0.0.00') == '255.0.0.0'\nassert     removezero_ip('255.0.0.10') == '255.0.0.10'\nassert     removezero_ip('255.0.0.01') == '255.0.0.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert     removezero_ip(\"0.0.0.1\") == \"0.0.0.1\"\nassert     removezero_ip(\"0.0.0.101\") == \"0.0.0.101\"\n\ndef count_and_say(n):\n    '''\n    A number can be represented as a string of its digits in the following way:\n    num: 5 -> 5\n    5 is read as \"one 2\".\n    The first few numbes are 1, 11, 21,...\n    Note that leading zeroes are not allowed, so \"01\" is not a valid number.\n\n    Your job is to count up the occurrences of each digit in the numbe r and print them out as numbers.\n    '''\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     removezero_ip('10.0.0.1') == '10.0.0.1'\nassert     removezero_ip('192.168.1.100') == '192.168.1.100'\nassert     removezero_ip('1.0.1') == '1.0.1'\nassert     removezero_ip('1.0.1.0') == '1.0.1'\nassert     removezero_ip('1.0.1.0.0') == '1.0.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     '010.256.4.8' == removezero_ip('010.256.4.8')\nassert     '10.256.4.8' == removezero_ip('10.256.4.8')\nassert     '0.256.4.8' == removezero_ip('0.256.4.8')\nassert     '256.4.8' == removezero_ip('256.4.8')\nassert     '256.4.8' == removezero_ip('256.4.8')\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     removezero_ip(\"01.23.32.23\") == \"123.23.32.23\"\nassert     removezero_ip(\"1.0.1.0\") == \"1.0.1.0\"\nassert     removezero_ip(\"1.0.1.01\") == \"1.0.1.1\"\nassert     removezero_ip(\"1234.123.123\") == \"123.123.123\"\nassert     removezero_ip(\"123.123.123\") == \"123.123.123\"\n"
    },
    {
        "number": 593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     removezero_ip('0.0.0.0')    == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0') == '0.0.0.0'\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5]) == 2\nassert     diff_even_odd([2, 4, 6, 8]) == 2\nassert     diff_even_odd([-1, -2, -3, -4, -5]) == -6\nassert     diff_even_odd([0]) == 0\nassert     diff_even_odd([0, 1, 2, 3, 4]) == 0\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6,7,8,9]) == 6 - 4\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 10 - 6\nassert     diff_even_odd([0]) == 0\nassert     diff_even_odd([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == 0\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9]) == 6 - 4\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         1 == diff_even_odd([0, 0, 0, 0, 1])\nassert         0 == diff_even_odd([0, 0, 1, 0, 1])\nassert         2 == diff_even_odd([0, 1, 0, 1, 0])\nassert         1 == diff_even_odd([0, 1, 1, 0, 1])\nassert         3 == diff_even_odd([1, 0, 0, 0, 1])\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     diff_even_odd([1,2,3,4]) == [2, 4]\nassert     diff_even_odd([1,3,5,7,9]) == [6, 8]\nassert     diff_even_odd([1,3,5,7,9,11]) == [10, 12]\nassert     diff_even_odd([1,3,5,7,9,11,13]) == [14, 16]\n\ndef diff_even_odd_v2(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_nums = []\n    for num in list1:\n        if num%2:\n            odd_nums.append(num)\n        else:\n            pass\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     diff_even_odd([1,2,3,4,5]) == 1\nassert     diff_even_odd([2,4,6,8,10]) == 6\nassert     diff_even_odd([1,3,5,7,9]) == 2\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11]) == 1\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == 10\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5, 6]) == 6 - 4\nassert     diff_even_odd([1, 3, 5, 7]) == 7 - 5\nassert     diff_even_odd([1, 3, 5, 7, 9, 11]) == 11 - 9\nassert     diff_even_odd([1, 2, 4, 6]) == 6 - 4\nassert     diff_even_odd([1, 3, 5, 7, 9]) == 9 - 7\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5, 6]) == [2, 4]\nassert     diff_even_odd([0, 1, 2, 3, 4, 5]) == [2, 6]\nassert     diff_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [2, 10]\nassert     diff_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 11]\nassert     diff_even_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 11]\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     diff_even_odd([]) == None\nassert     diff_even_odd([1]) == None\nassert     diff_even_odd([3,1,4,5,6,2]) == 2\nassert     diff_even_odd([3,1,4,5,6,2,2]) == 3\nassert     diff_even_odd([1,2,2,3,3,4,4,5]) == 3\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         diff_even_odd([1,2,3,4,5]) == (0, 2)\nassert         diff_even_odd([5,2,4,1,3]) == (3, 1)\nassert         diff_even_odd([0,-1,2,3,4,5]) == (0, -1)\nassert         diff_even_odd([-5,2,4,1,3]) == (-3, -1)\nassert         diff_even_odd([-5,2,-4,1,-3]) == (3, 1)\n"
    },
    {
        "number": 594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6]) == 5\nassert     diff_even_odd([1,2,3,4,5,6,7]) == 2\nassert     diff_even_odd([1,3,5,7]) == 0\nassert     diff_even_odd([1,2,3,4,6]) == 1\nassert     diff_even_odd([1,2,3,4,5,7]) == 2\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_Swaps(\"10101\",\"01010\") == 1\nassert     min_Swaps(\"01010\",\"10101\") == 2\nassert     min_Swaps(\"10101\",\"10101\") == 0\nassert     min_Swaps(\"10101\",\"101\") == 1\nassert     min_Swaps(\"10101\",\"11101\") == 2\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_Swaps('11', '11') == 0\nassert     min_Swaps('10', '1') == 1\nassert     min_Swaps('01', '10') == 2\nassert     min_Swaps('1110', '1011') == 1\nassert     min_Swaps('00111', '00011') == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     min_Swaps(\"10100\",\"10010\") == 2\nassert     min_Swaps(\"10101\",\"11101\") == 4\nassert     min_Swaps(\"10011\",\"01110\") == 5\nassert     min_Swaps(\"111111\",\"0000111\") == 3\nassert     min_Swaps(\"010110\",\"110110\") == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_Swaps('001001010011010111100011001011010', '1101010110110001001110111111001010011') == 4\nassert     min_Swaps('0110010010100100101001001011001110', '10010110010110011001011011001010011011') == 3\nassert     min_Swaps('11001010010100101110000101001101100', '10010110010100110010110110010110011011') == 1\n\ndef min_Swaps2(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_Swaps(\"100\",\"101\") == 1\nassert     min_Swaps(\"10101\",\"10110\") == 2\nassert     min_Swaps(\"01110\",\"11110\") == 0\nassert     min_Swaps(\"11\",\"00\") == 1\nassert     min_Swaps(\"0011\",\"1100\") == 1\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_Swaps('1010','1011') == 1\nassert     min_Swaps('101101','111101') == 4\nassert     min_Swaps('10101','100010') == 1\nassert     min_Swaps('101010101010','101010101010') == 0\n\ndef min_Swap(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n            str1 = str1[:i] + str1[i] + str1[i+1:]\n            str2 = str2[:i] + str2[i] + str2[i+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_Swaps('100','001') == 2\nassert     min_Swaps('101','011') == 2\nassert     min_Swaps('11','10') == 1\nassert     min_Swaps('0011','0101') == 4\nassert     min_Swaps('00100','01101') == 6\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_Swaps('11100','01110') == 4\nassert     min_Swaps('0100','1110') == 1\nassert     min_Swaps('0101','1101') == 0\nassert     min_Swaps('1001','1010') == 1\nassert     min_Swaps('01111','11111') == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     min_Swaps(\"10001001\",\"01001011\") == 3\nassert     min_Swaps(\"11111111\",\"00000000\") == 2\nassert     min_Swaps(\"11111111\",\"11101111\") == 3\nassert     min_Swaps(\"11111111\",\"11100111\") == 0\nassert     min_Swapsodd)\n"
    },
    {
        "number": 595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tuple_size(()) == 1\nassert     tuple_size((1,)) == 2\nassert     tuple_size((1, 2, 3)) == 6\nassert     tuple_size((1, (2, 3), 4)) == 6\nassert     tuple_size((1, (2, (3, 4)), 5)) == 11\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tuple_size((1,2,3,4,5,6)) == 30\nassert     tuple_size((1,2,3)) == 12\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11)) == 180\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180)) == (360*180)\n\ndef test_tuple_size():\n    "
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tuple_size((0, )) == sys.getsizeof(0)\nassert     tuple_size((1, )) == sys.getsizeof(1)\nassert     tuple_size((1, 2, 3, 4)) == sys.getsizeof(1+2+3+4)\n\ndef find_duplicates(tuple_list):\n    '''\n    Write a function to find the duplicates in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tuple_size((1,2,3,4,5)) == 15\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) == 262144\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) == 56\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,91"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tuple_size((1,)) == sizeof(1)\nassert tuple_size((1,2,3,4)) == sizeof(1) + sizeof(2) + sizeof(3) + sizeof(4)\nassert tuple_size((1,2,3,4,5)) == sizeof(1) + sizeof(2) + sizeof(3) + sizeof(4) + sizeof(5)\nassert tuple_size((1,2,3,4,5,6)) == sizeof(1) + sizeof(2) + sizeof(3) + sizeof(4) + sizeof(5) + sizeof(6)\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tuple_size((1,2,3)) == 3\nassert     tuple_size((1,2,3,4,5,6,7)) == 7\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) == 16\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)) == 17\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)) == 50\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tuple_size((1,2,3,4,5)) == 15\nassert     tuple_size((1,2,3,4)) == 10\nassert     tuple_size((1,)) == 4\nassert     tuple_size((1,2,3,4,5,6,7)) == 44\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == 92\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tuple_size(()) == 0\nassert     tuple_size((1,)) == 1\nassert     tuple_size((1,2,3)) == 12\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10)) == 252\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)) == 1372\n"
    },
    {
        "number": 596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tuple_size((1,2,3)) == 12\nassert     tuple_size((1,2,3,4,5)) == 20\nassert     tuple_size((1,2,3,4,5,6)) == 24\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10)) == 30\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11)) == 34\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_kth([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 2) == 4\nassert     find_kth([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 3) == 5\nassert     find_kth([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 4) == 4\nassert     find_kth([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5) == 5\nassert     find_kth([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 6) == -1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_kth([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], 7) == 7\nassert     find_kth([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], 3) == 4\nassert     find_kth([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], 0) == 1\nassert     find_kth([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], -1) == -1\nassert     find_kth([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], 10) == -1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_kth([0, 1, 2, 3, 4], [5, 6, 7, 8, 9], 3) == 8\nassert     find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3) == 8\nassert     find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4) == 6\nassert     find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5\nassert     find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 9) == 9\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_kth(array1, array2, 6) == 8\nassert     find_kth(array1, array2, 10) == 10\nassert     find_kth(array1, array2, 0) == 0\nassert     find_kth(array1, array2, 3) == 3\nassert     find_kth(array1, array2, 4) == 4\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_kth([1, 2, 3, 4, 5, 6], [4, 6, 7, 8, 9], 4) == 4\nassert     find_kth([1, 2, 3, 4, 5, 6], [4, 6, 7, 8, 9], 5) == 6\nassert     find_kth([], [], 1) == None\nassert     find_kth([1, 3], [2], 1) == 2\nassert     find_kth([1, 3, 5], [2, 4, 6], 3) == 5\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_kth([1, 5, 10, 15, 25, 50, 70], [3, 7, 30, 60, 90], 3) == 70\nassert     find_kth([1, 5, 10, 15, 25, 50, 70], [3, 7, 30, 60, 90], 5) == 50\nassert     find_kth([1, 5, 10, 15, 25, 50, 70], [3, 7, 30, 60, 90], 7) == 70\nassert     find_kth([1, 5, 10, 15, 25, 50, 70], [3, 7, 30, 60, 90], 0) == 1\nassert     find_kth([1, 5, 10, 15, 25, 50, 70], [3, 7, 30, 60, 90], 9) == -1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_kth([1,3,5,7,9], [0,2,4,6,8,10], 3) == 7\nassert     find_kth([1,3,5,7,9], [0,2,4,6,8,10], 5) == 9\nassert     find_kth([1,3,5,7,9], [0,2,4,6,8,10], 8) == 9\nassert     find_kth([1,3,5,7,9], [0,2,4,6,8,10], 0) == 1\nassert     find_kth([1,3,5,7,9], [0,2,4,6,8,10], 11) == -1\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_kth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], \n        [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40], \n        5) == 14\n"
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_kth(nums1, nums2, 3) == 7\nassert     find_kth(nums1, nums2, 5) == 2\nassert     find_kth(nums1, nums2, 10) == -1\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(370) == True\nassert     armstrong_number(371) == False\nassert     armstrong_number(0) == True\nassert     armstrong_number(0) == True\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     armstrong_number(153) == True, 'Failed on 153'\nassert     armstrong_number(370) == False, 'Failed on 370'\nassert     armstrong_number(900) == False, 'Failed on 900'\nassert     armstrong_number(0) == True, 'Failed on 0'\nassert     armstrong_number(371) == False, 'Failed on 371'\nprint 'Passed all the tests'\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     armstrong_number(153)\nassert     not armstrong_number(150)\nassert     not armstrong_number(37)\nassert     armstrong_number(153)\nassert     not armstrong_number(9)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     armstrong_number(3) == True\nassert     armstrong_number(9) == True\nassert     armstrong_number(153) == True\nassert     armstrong_number(69) == False\nassert     armstrong_number(15) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     armstrong_number(153)\nassert     not armstrong_number(370)\nassert     not armstrong_number(371)\nassert     armstrong_number(10)\nassert     not armstrong_number(100)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     armstrong_number(153)\nassert     not armstrong_number(9)\nassert     armstrong_number(10)\nassert     not armstrong_number(11)\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     armstrong_number(153) is True\nassert     armstrong_number(1) is True\nassert     armstrong_number(123789) is True\nassert     armstrong_number(100) is False\nassert     armstrong_number(30) is False\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     armstrong_number(153) == True, 'False'\nassert     armstrong_number(9474) == True, 'False'\nassert     armstrong_number(155) == False, 'False'\nassert     armstrong_number(0) == True, 'False'\n"
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     armstrong_number(153) is True\nassert     armstrong_number(123) is False\nassert     armstrong_number(132) is True\nassert     armstrong_number(9474) is True\nassert     armstrong_number(123456789) is False\nprint \"Passed. All test cases have passed.\""
    },
    {
        "number": 598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     armstrong_number(153)\nassert     armstrong_number(371)\nassert     armstrong_number(371)\nassert     armstrong_number(9474)"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (sum_average(5) == (10, 22.5))\nassert     (sum_average(10) == (55, 55))\nassert     (sum_average(25) == (203, 37))\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (sum_average(5) == (1 + 2 + 3 + 4 + 5, 2 + 4 + 6 + 8 + 10))\nassert     (sum_average(10) == (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10, 22 + 24 + 26 + 28 + 30 + 32 + 34 + 36 + 38 + 40))\nassert     (sum_average(20) == (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20, 50 + 60 + 70 + 80 + 90 + 100 + 110 + 120 + 130 + 140 + 150 + 160 + 170 + 180 + 190 + 200))"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_average(1) == (1,1)\nassert     sum_average(2) == (3,2)\nassert     sum_average(3) == (6,3)\nassert     sum_average(4) == (10,4.5)\nassert     sum_average(5) == (15,8)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_average(1) ==     (1, 1.0))\nassert     (sum_average(3) ==     (6, 2.0))\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_average(1) == (1, 1)\nassert     sum_average(2) == (3, 2)\nassert     sum_average(3) == (6, 3)\nassert     sum_average(4) == (10, 4)\nassert     sum_average(5) == (15, 5)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         sum_average(1)         == (1, 1.0)\nassert         sum_average(2)         == (3, 2.5)\nassert         sum_average(3)         == (6, 3.5)\nassert         sum_average(4)         == (10, 5.5)\nassert         sum_average(5)         == (15, 8.5)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sum_average(0) == (0,0))\nassert     (sum_average(1) == (1,1))\nassert     (sum_average(2) == (3,1.5))\nassert     (sum_average(5) == (10,2.0))\n\ndef sum_average2(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_average(5) == (15, 3.0)\nassert     sum_average(10) == (55, 4.5)\n"
    },
    {
        "number": 599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sum_average(5) == [10, 5])\nassert     (sum_average(10) == [55, 25])\nassert     (sum_average(20) == [110, 50])\nassert     (sum_average(30) == [165, 55])\nassert     (sum_average(40) == [205, 65])\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Even(4) == True\nassert     is_Even(5) == True\nassert     is_Even(6) == False\nassert     is_Even(7) == False\nassert     is_Even(8) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(3) == False\nassert     is_Even(0) == True\nassert     is_Even(-7) == True\nassert     is_Even(-2) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Even(6) == False\nassert     is_Even(4) == True\nassert     is_Even(9) == False\nassert     is_Even(2) == True\nassert     is_Even(16) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (is_Even(6) == True)\nassert     (is_Even(7) == False)\nassert     (is_Even(0) == True)\nassert     (is_Even(21) == False)\nassert     (is_Even(-6) == False)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(4) == False\nassert     is_Even(0) == True\n\ndef largest_factor(n) : \n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (is_Even(2) == True)\nassert     (is_Even(4) == False)\nassert     (is_Even(1) == True)\nassert     (is_Even(0) == True)\nassert     (is_Even(99) == True)\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Even(5) == True\nassert     is_Even(6) == False\nassert     is_Even(0) == True\nassert     is_Even(-1) == False\nassert     is_Even(22) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Even(1) == True\nassert     is_Even(2) == False\nassert     is_Even(3) == True\nassert     is_Even(4) == False\nassert     is_Even(5) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Even(4) == True\nassert     is_Even(3) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Even(5) == True\nassert     is_Even(6) == False\nassert     is_Even(7) == True\nassert     is_Even(10) == False\nassert     is_Even(11) == True\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     first_repeated_char(\"hello\") == 'l'\nassert     first_repeated_char(\"abcdefgh\") == 'a'\nassert     first_repeated_char(\"abcdefghi\") == 'a'\nassert     first_repeated_char(\"abcdefghiabcd\") == 'a'\nassert     first_repeated_char(\"abcdefghiabcdabcd\") == 'b'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     first_repeated_char('zabab') == 'a'\nassert     first_repeated_char('abcdef') == None\nassert     first_repeated_char('abcdefg') == None\nassert     first_repeated_char('abba') == 'a'\nassert     first_repeated_char('aaaa') == None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     first_repeated_char('moon') == 'o', 'Wrong answer'\nassert     first_repeated_char('i love you') == 'i', 'Wrong answer'\nassert     first_repeated_char('ddss') == 'd', 'Wrong answer'\nassert     first_repeated_char('qwerty') == None, 'Wrong answer'\nassert     first_repeated_char('sunshine') == 'u', 'Wrong answer'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     first_repeated_char('aabcdff') == 'b'\nassert     first_repeated_char('aabcdff') == 'a'\nassert     first_repeated_char('aaabcdff') == 'f'\nassert     first_repeated_char('aabcdff') == 'a'\nassert     first_repeated_char('a') == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     first_repeated_char(\"a\") == -1\nassert     first_repeated_char(\"abca\") == 0\nassert     first_repeated_char(\"aba\") == 0\nassert     first_repeated_char(\"ababab\") == 4\nassert     first_repeated_char(\"abaaba\") == 1\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef is_palindrome(str1):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     first_repeated_char('abcaa') == 'a'\nassert     first_repeated_char('abc') == None\nassert     first_repeated_char('abcabca') == 'a'\nassert     first_repeated_char('aabb') == 'b'\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     first_repeated_char(\"misafristd\") == \"s\"\nassert     first_repeated_char(\"evandafirst\") == \"a\"\nassert     first_repeated_char(\"\") == None\nassert     first_repeated_char(\"hjqftuxwvjdsvqfs\") == None\nassert     first_repeated_char(\"\") == None\n"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     first_repeated_char('abcde') == 'c', 'failed on an empty string'\nassert     first_repeated_char('abcdea') == 'c', 'failed on a string with more than one repeated character'\nassert     first_repeated_char('abcdea' + 'b') == 'c', 'failed on a string with more than one repeated character'\nassert     first_repeated_char('abcdea' + 'a') == 'c', 'failed on a string with more than one repeated character'\n\nprint \"Passed"
    },
    {
        "number": 602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     first_repeated_char('abcab') == 'b'\nassert     first_repeated_char('abbcdef') == 'c'\nassert     first_repeated_char('abcde') == None\nassert     first_repeated_char('1234') == None\nassert     first_repeated_char('a') == 'a'\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_ludic(5) == [1, 2, 3, 4, 5]\nassert     get_ludic(8) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     get_ludic(9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_ludic(99) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_ludic(5) == [1,2,3,4,5]\nassert     get_ludic(2) == [1,2]\nassert     get_ludic(8) == [1,2,4,8]\n\ndef get_ludivisor(n):\n    '''\n    Write a function to get the largest prime divisor of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert get_ludic(100) == [1,2,3,4,5,6,7,8,9]\nassert get_ludic(200) == [1,2,3,4,5,6,7,8,9,11,22,33,44,55,66,77,88,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]\nassert get_ludic(1000) == [1,2,3,4,5,6,7,8,9,11,22,33,44,55,66,77,88,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]\nassert get_ludic(10000) == [1,2,3,4,5,6,7,8,9,11,22,33,44,55,66,77,88,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_ludic(9) == [1,2,3,4,5,6,7,8,9]\nassert     get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(11) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     get_ludic(12) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     get_ludic(13) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_ludic(100) == [1,2,3,4,5,6,7,8,9,11,12,15,16,18,20,22,23,24,27,28,29,31,32,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\nassert get_ludic(999) == [1,2,3,4,5,6,7,8,9,11,12,15,16,18,20,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\nassert get_ludic(1000) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\nassert get_ludic(2) == [1,2]\nassert get_ludic(3) == [1,2,3]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_ludic(1) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     get_ludic(2) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_ludic(3) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     get_ludic(4) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     get_ludic(5) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_ludic(5) == [1,2,3,4]\nassert     get_ludic(8) == [1,2,4,7]\nassert     get_ludic(100) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     get_ludic(500) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\ndef get_ludic_recursive(n):\n    # base case\n    if n < 2:\n        return [n]\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_ludic(1) == ['1']\nassert     get_ludic(4) == ['1', '2', '4']\nassert     get_ludic(5) == ['1', '2', '4', '7', '8', '11']\nassert     get_ludic(7) == ['1', '2', '4', '7', '8', '11', '14', '16', '18', '22']\nassert     get_ludic(9) == ['1', '2', '4', '7', '8', '11', '14', '16', '18', '22', '26', '32', '36', '42', '44', '48', '52', '56', '64', '72', '80', '88', '96', '104', '112', '120', '128', '136', '144', '152', '160', '168', '176', '184', '192', '200', '208', '216', '224', '232', '240', '248', '256', '264', '272', '280', '288', '296', '304', '312', '320', '328', '336', '344', '352', '360', '368', '376', '384', '392', '400', '408', '416', '424', '432', '440', '448', '456', '464', '472', '480', '488', '496', '504', '512', '520', '528', '536', '544', '552', '560', '568', '576', '584', '592', '600', '608', '616', '624', '632', '640', '648', '656', '664', '672', '680', '688', '696', '704', '712', '720', '728', '736', '744', '752', '760', '768', '776', '784', '792', '800', '808', '816', '824', '832', '840', '848', '856', '864', '872', '880', '888', '896', '904', '912', '920', '928', '936', '944', '952', '960', '968', '976', '984', '992', '1000']\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_ludic(3) == {1,2,4}\nassert     get_ludic(2) == {1,2}\nassert     get_ludic(1) == {1}\n"
    },
    {
        "number": 603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(2) == [1, 2]\nassert     get_ludic(3) == [1, 2, 3]\nassert     get_ludic(4) == [1, 2, 3, 4]\nassert     get_ludic(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_words('Hi, my name is Tom!') == 'Tom, my name is Hi'\nassert     reverse_words('I am a good boy!') == 'boy, a good I am'\nassert     reverse_words('  Hello John,  how are you  ') == 'you, how are John, Hello'\nassert     reverse_words('a') == 'a'\nassert     reverse_words('') == ''\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_words('The quick brown fox jumps over the lazy dog.') == 'dog. lazy the fox jumps the quick brown.'\nassert     reverse_words('Hello world!') == '!dlrow olleH'\nassert     reverse_words('Python is easy!') == '!elpmaxe yhnisy'\nassert     reverse_words('!') == '!', \"Just a single exclamation mark at the input\"\n\n\ndef reverse_vowels(s):\n    '''\n    Write a function that takes a string and returns the string with all vowels reversed.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_words('   hello world!     ') == 'world! hello'\nassert     reverse_words('you must do better') == 'you do better must'\nassert     reverse_words('can you can') == 'you can can'\nassert     reverse_words('can i') == 'i can'\nassert     reverse_words('  camel!  ') == '! camel'\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_words('i love to code') == 'code love to i'\nassert reverse_words('i am coding') == 'code am i'\nassert reverse_words('i love programming') == 'programming love i'\n\n'''\n5.5 Write a function which will read a text file. And return a list of words in that file.\n'''\n\ndef read_file(file_name):\n    '''\n    Write a function which will read a text file. And return a list of words in that file.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_words('i am sam i am sam') =='sam am am sam am i'\nassert     reverse_words('hello world') == 'world hello'\nassert     reverse_words(' a   b c  ') == 'c b a'\nassert     reverse_words('\\t\\n\\r a\\t\\r\\n b\\t\\r c\\t\\r') == 'c\\t\\r\\n\\t\\r b\\t\\r a'\nassert     reverse_words('How long does a book have to be before it is worth reading? \\n\\t\\n\\rReading The Great Book of \"') == 'book The Great Book of \" Read'\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_words('  the sky is blue   ') == 'blue is sky the','should work for non-space strings'\nassert     reverse_words('the sky is blue') == 'blue is sky the','should work for non-space strings'\nassert     reverse_words('the sky is blue   ') == 'blue is sky the','should work for non-space strings'\nassert     reverse_words('  this is a test   ') == 'test a is this','should work for non-space strings'\nassert     reverse_words('this is a test') == 'test a is this','should work for non-space strings'\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_words(' the greatest of all time') == 'greatest of all time the', \nassert     reverse_words('Python is amazing!') == '!amazing is Python', \nassert     reverse_words('The quick brown fox jumped over the lazy dog') == 'dog over the lazy the quick brown', \nassert     reverse_words(' hello world') == 'world hello', \nassert     reverse_words('') == '', \n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     'world' == reverse_words('world')\nassert     'world' == reverse_words('hello world')\nassert     'world' == reverse_words('hello   world')\nassert     'world' == reverse_words('world   hello')\nassert     'hello' == reverse_words('hello world')\n"
    },
    {
        "number": 604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_words(\"I like playing football\") == \"football like I\"\nassert     reverse_words(\"I am good\") == \"good am I\"\nassert     reverse_words(\"How are you?\") == \"you are how\"\nassert     reverse_words(\"I am happy\") == \"happy am I\"\nassert     reverse_words(\"I like programming\") == \"programming like I\"\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == True\nassert     prime_num(4) == False\nassert     prime_num(5) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == True\nassert     prime_num(4) == False\nassert     prime_num(6) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_num(0) == False\nassert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(4) == False\nassert     prime_num(13) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_num(2) == True\nassert     prime_num(11) == True\nassert     prime_num(13) == True\nassert     prime_num(17) == True\nassert     prime_num(19) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_num(2) == True\nassert     prime_num(23) == True\nassert     prime_num(3) == True\nassert     prime_num(4) == False\nassert     prime_num(5) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prime_num(0) == False\nassert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == True\nassert     prime_num(4) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prime_num(0) == False\nassert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == True\nassert     prime_num(4) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == True\nassert     prime_num(4) == False\nassert     prime_num(5) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_num(3) == True\nassert     prime_num(0) == False\nassert     prime_num(17) == True\nassert     prime_num(16) == False\nassert     prime_num(-3) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_num(7) == True\nassert     prime_num(9) == False\nassert     prime_num(1) == False\nassert     prime_num(100) == True\nassert     prime_num(2) == True\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     radian_degree(30) == 0.523599, \"should be %f\" % 0.523599\nassert     radian_degree(45) == 1.04719755119659, \"should be %f\" % 1.04719755119659\nassert     radian_degree(60) == 1.57079632679489, \"should be %f\" % 1.57079632679489\nassert     radian_degree(90) == 1.57079632679489, \"should be %f\" % 1.57079632679489\nassert     radian_degree(135) == 1.04719755119659, \"should be %f\" % 1.04719755119659\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (radian_degree(90) == math.pi/2)\nassert     (radian_degree(180) == math.pi)\nassert     (radian_degree(270) == 3*math.pi/2)\nassert     (radian_degree(360) == 2*math.pi)\nassert     (radian_degree(0) == 0)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     radian_degree(0) == 0\nassert     radian_degree(90) == 1.5707963267948966\nassert     radian_degree(180) == 3.141592653589793\nassert     radian_degree(270) == 2.356194490192345\nassert     radian_degree(360) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     radian_degree(1) ==     0.017453292519943295\nassert     radian_degree(360) ==     0.0\nassert     radian_degree(361) ==     0.017453292519943295\nassert     radian_degree(362) ==     0.017453292519943295\nassert     radian_degree(363) ==     0.017453292519943295\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     radian_degree(0) == 0\nassert     radian_degree(90) == 1.5707963267948966\nassert     radian_degree(180) == 1.5707963267948966\nassert     radian_degree(270) == 1.5707963267948966\nassert     radian_degree(360) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     math.pi/2-radian_degree(math.pi/2) < 0.000001\nassert     math.pi/2+radian_degree(math.pi/2) > 0.000001\nassert     math.pi/2-radian_degree(3*math.pi/2) < 0.000001\nassert     math.pi/2+radian_degree(3*math.pi/2) > 0.000001\nassert     math.pi/2-radian_degree(math.pi/4) < 0.000001\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     radian_degree(360) == 2 * math.pi\nassert     radian_degree(90) == 1.5707963267948966\nassert     radian_degree(270) == 1.5707963267948966\nassert     radian_degree(180) == 1.5707963267948966\n\ndef find_factors(n):\n    '''\n    Write a function to find the factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     radian_degree(30) == 1.5708\nassert     radian_degree(45) == 2.3588\nassert     radian_degree(60) == 3.0472\nassert     radian_degree(90) == 3.141592653589793\n\n\ndef degree_to_radian(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (math.pi*0.0349), radian_degree(0.0349)\nassert     (math.pi*0.0833), radian_degree(0.0833)\nassert     (math.pi*1.5708), radian_degree(1.5708)\nassert     (math.pi*-2.5708), radian_degree(-2.5708)\nassert     (math.pi*360.0/256.0), radian_degree(360.0/256.0)\n"
    },
    {
        "number": 606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     radian_degree(0) == 0\nassert     radian_degree(90) == math.pi / 2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(270) == 3 * math.pi / 2\nassert     radian_degree(360) == 2 * math.pi\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_literals('/abc/', 'abc') == (0, 3)\nassert     find_literals('/abc/', 'b/c') == (1, 2)\nassert     find_literals('/abc/', '//abc') == (0, 5)\nassert     find_literals('/abc/', '/abc') == (0, 3)\nassert     find_literals('/abc/', 'abc/') == (0, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_literals('abcdef', 'abc') == ('abc', 0, 3)\nassert     find_literals('abcdef', 'def') == ('', 4, 5)\nassert     find_literals('abcdef', 'a') == ('', 0, 1)\nassert     find_literals('abcdef', 'b') == ('', 1, 2)\nassert     find_literals('abcdef', 'c') == ('', 2, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_literals('ABCD', 'A.+D') == ('ABCD', 0, 4)\nassert find_literals('ABCD', 'A.*D') == ('ABCD', 0, 4)\nassert find_literals('ABCD', 'A.*D') == ('ABCD', 0, 4)\nassert find_literals('ABCD', 'A.*D') == ('ABCD', 0, 4)\nassert find_literals('ABCD', 'A.*D') == ('ABCD', 0, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_literals('abcd', '(?P<literal>.{3})') == ('abcd', 0, 3)\nassert     find_literals('abcd', '\\d{3}') == ('abcd', 0, 3)\nassert     find_literals('abcd', '\\d{3}|\\d{4}') == ('abcd', 0, 3)\nassert     find_literals('abcd', '\\d{3}|\\d{4}', '|') == ('abcd', 0, 3)\nassert     find_literals('abcd', 'abcd', '|') == ('abcd', 0, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_literals('abcdef', 'a|b|c') == ('a', 0, 2)\nassert     find_literals('abcdef', 'a|b|c|d|e') == ('abc', 0, 5)\nassert     find_literals('abcdef', 'a|b|c|d|e|f') == ('abc', 0, 5)\nassert     find_literals('abcdef', 'a|b|c|d|e|f|g') == ('abc', 0, 5)\nassert     find_literals('abcdef', 'a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z') == ('abc', 0, 5)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_literals('foo', 'foo') == (0, 4, 5)\nassert     find_literals('foo', 'bar') == (-1, -1, -1)\nassert     find_literals('baz', 'bar') == (-1, -1, -1)\nassert     find_literals('bar', 'bar') == (0, 5, 5)\nassert     find_literals('bar', 'foo') == (0, 0, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_literals('atggatgagtgtgtgacatggatgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtgtg"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_literals('<a href=\"foo\">blah</a>', '<a href=\"([^\"]*)\">') == ('foo', 0, 19)\nassert     find_literals('<a href=\"foo\">blah</a>', '<a href=\"(.*)\">') == ('foo', 0, 19)\nassert     find_literals('<a href=\"foo\">blah</a>', '<a href=\"(.*)\">') == ('foo', 0, 19)\nassert     find_literals('<a href=\"foo\">blah</a>', '<a href=\"(.*)\">') == ('foo', 0, 19)\nassert     find_literals('<a href=\"foo\">blah</a>', '<a href=\"(.*)\">') == ('foo', 0, 19)\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_literals('foo', r'f') == ['f', 0, 1]\nassert     find_literals('foo', r'fo') == ['fo', 0, 2]\nassert     find_literals('foobar', r'fo') == ['fo', 0, 2]\nassert     find_literals('foobar', r'foo') == ['foo', 0, 3]\nassert     find_literals('foobar', r'bar') == ['bar', 4, 7]\n"
    },
    {
        "number": 607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_literals('asdf', '.*') == (['asdf', 5, 6], 0, 4)\nassert     find_literals('asdf', '.*o') == (['asdf', 5, 6], 0, 4)\nassert     find_literals('asdf', '.*o*') == (['asdf', 5, 6], 0, 4)\nassert     find_literals('asdf', '.*fo') == (['asdf', 5, 6], 0, 4)\nassert     find_literals('asdf', '.*fo*') == (['asdf', 5, 6], 0, 4)\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef gen_Fibonacci_series():\n    '''\n    Write a python function to generate Fibonacci series.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bell_Number(4) == 10\nassert     bell_Number(5) == 52\nassert     bell_Number(6) == 105\nassert     bell_Number(7) == 301\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 1\nassert     bell_Number(3) == 1\nassert     bell_Number(4) == 2\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bell_Number(6) == 10\nassert     bell_Number(5) == 15\nassert     bell_Number(4) == 31\nassert     bell_Number(3) == 94\nassert     bell_Number(2) == 149\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     bell_Number(1) == 1\nassert     bell_Number(2) == 1\nassert     bell_Number(3) == 1\nassert     bell_Number(4) == 1\nassert     bell_Number(5) == 1\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bell_Number(1) == 0 \nassert     bell_Number(2) == 1 \nassert     bell_Number(3) == 2 \nassert     bell_Number(4) == 5 \nassert     bell_Number(5) == 14\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 5\nassert     bell_Number(4) == 15\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 5\nassert     bell_Number(3) == 15\nassert     bell_Number(4) == 105\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 5\nassert     bell_Number(4) == 15\n"
    },
    {
        "number": 608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef len_of_longest_substring(s):\n    '''\n    Write a python function to find length of longest substring with the same character\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [1, 2, 3, 5, 6, 7, 8, 9]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         remove_kth_element([1, 2, 3, 4, 5, 6], 0) == [1, 2, 3, 4, 5, 6]\nassert         remove_kth_element([1, 2, 3, 4, 5, 6], 2) == [1, 2, 3, 5, 6]\nassert         remove_kth_element([1, 2, 3, 4, 5, 6], 5) == [1, 2, 3, 4, 6]\nassert         remove_kth_element([1, 2, 3, 4, 5, 6], 8) == [1, 2, 3, 4, 5, 6]\nassert         remove_kth_element([1, 2, 3, 4, 5, 6], 9) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_kth_element([1, 2, 3], 2) == [1, 2]\nassert     remove_kth_element([1, 2, 3, 4], 1) == [2, 3, 4]\nassert     remove_kth_element([1, 2, 3, 4], 3) == [1, 2, 3, 4]\nassert     remove_kth_element([1, 2, 3, 4], 4) == [1, 2, 3, 4]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 2) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 4) == [1,2,3,4,5,6,7,8,9]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 6) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1,2,3], 1) == [2,3]\nassert     remove_kth_element([1,2,3], 0) == [1,2,3]\nassert     remove_kth_element([1,2,3,4,5], 2) == [1,2,3,5]\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 3) == [1,2,3,4,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7], 4) == [1,2,3,6,7]\nassert     remove_kth_element([1,2,3,4,5,6,7], 0) == [1,2,3,4,5,6,7]\nassert     remove_kth_element([1,2,3,4,5,6,7], 5) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6,7], -1) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6,7], 7) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7],2) == [1,2,3,4,5,6,7]\nassert     remove_kth_element([1,2,3,4,5,6,7],3) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6,7],0) == [2,3,4,5,6,7]\nassert     remove_kth_element([1,2,3,4,5,6,7],7) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6,7],8) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 1) == [1,2,3,5]\nassert     remove_kth_element([1,2,3,4,5], 2) == [1,2,4,5]\nassert     remove_kth_element([1,2,3,4,5], 3) == [1,2,3,5]\nassert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 4) == [1, 2, 3, 5, 6, 7, 8]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 9) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 0) == [2, 3, 4, 5, 6, 7, 8]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 1) == [1, 3, 4, 5, 6, 7, 8]\nassert     remove_kth_element([1, 2, 3, 4, 5, 6, 7, 8], 2) == [1, 2, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_of_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 2) == 14\nassert     max_of_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 3) == 15\nassert     max_of_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == 16\nassert     max_of_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 5) == 16\nassert     max_of_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 6) == 16\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         max_of_nth(\n    [[1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15]],\n    1) == 10\nassert         max_of_nth(\n    [[1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15]],\n    2) == 12\nassert         max_of_nth(\n    [[1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15]],\n    3) == 15\nassert         max_of_nth(\n    [[1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15]],\n    4) == 13\nassert         max_of_nth(\n    [[1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15]],\n    5) == 14\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_of_nth([], 1) == None\nassert     max_of_nth([[1, 2, 3], [4, 5, 6]], 1) == 6\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 9\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]], 1) == 15\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]], 1) == 19\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_of_nth([[1, 3, 3, 4], [7, 2, 4, 3], [5, 1, 4, 3]], 2) == 7\nassert     max_of_nth([[1, 3, 3, 4], [7, 2, 4, 3], [5, 1, 4, 3]], 3) == 5\nassert     max_of_nth([[1, 3, 3, 4], [7, 2, 4, 3], [5, 1, 4, 3]], 1) == 3\nassert     max_of_nth([[1, 3, 3, 4], [7, 2, 4, 3], [5, 1, 4, 3]], 4) == 3\nassert     max_of_nth([[1, 3, 3, 4], [7, 2, 4, 3], [5, 1, 4, 3]], 5) == 4\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_of_nth([[1,2,3,4,5,6], [7,8,9,10,11,12], [13,14,15,16,17,18]], 2) == 12\nassert     max_of_nth([[1,2,3,4,5,6], [7,8,9,10,11,12], [13,14,15,16,17,18]], 3) == 18\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_of_nth([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12]\n            ], 0) == 11\nassert     max_of_nth([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12]\n            ], 1) == 12\nassert     max_of_nth([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12]\n            ], 2) == 9\nassert     max_of_nth([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12]\n            ], 3) == 10\nassert     max_of_nth([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12]\n            ], 4) == 1\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_of_nth(test_list, 0)     ==     [-7, -1, -1, -1, 1, 3, 9]\nassert     max_of_nth(test_list, 1)     ==    [-7, -7, -7, -7, -7, -7, -7]\nassert     max_of_nth(test_list, 2)     ==    [-7, -7, -7, -1, -1, -1, -1]\nassert     max_of_nth(test_list, 3)     ==     [-7, -7, -7, -7, -7, -7, -7]\nassert     max_of_nth(test_list, 4)     ==     [-7, -7, -7, -1, -1, -1, -1]\n"
    },
    {
        "number": 611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_of_nth([[10, 20, 30, 40], [20, 40, 40, 30], [30, 40, 20, 10], [40, 20, 10, 30]], 3) == 60\nassert     max_of_nth([[10, 30, 40, 40], [20, 40, 40, 30], [30, 40, 20, 10], [40, 20, 10, 30]], 4) == 60\nassert     max_of_nth([[10, 10, 10, 10], [10, 10, 10, 10], [10, 10, 10, 10], [10, 10, 10, 10]], 4) == 10\nassert     max_of_nth([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]], 1) == 4\nassert     max_of_nth([[10, 10, 10, 10], [10, 10, 10, 10], [10, 10, 10, 10], [10, 10, 10, 10]], 1) == 10\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     merge([ [1,2], [3,4], [5,6], [7,8], [9,10] ] \n            ) == [ [1,3], [2,4], [5,7], [6,8], [9,10] ]\nassert     merge([ [1,2], [3], [4,5,6], [7,8,9], [10] ]\n            ) == [ [1,3,4,5,6,7], [2,8,9,10] ]\nassert     merge([ [1,2], [3,4], [5] ]\n            ) == [ [1,3,5], [2,4] ]\nassert     merge([ [1], [2,3], [4,5,6], [7,8,9] ]\n            ) == [ [1], [2,3,4,5,6,7], [8,9] ]\nassert     merge([ [1,2], [3], [4,5,6], [7,8,9], [10] ]\n            ) == [ [1,3,4,5,6,7,10] ]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     merge([ [1, 2], [3, 4], [5, 6], [7, 8] ]) ==     [ [1, 2], [3, 4], [5, 6], [7, 8] ]\nassert     merge([ [1, 2], [3, 4], [5, 6], [7, 8], [9, 10] ]) ==     [ [1, 2], [3, 4], [5, 6], [7, 8], [9, 10] ]\nassert     merge([ [0, 1, 2], [3, 4, 5], [6, 7, 8, 9] ]) ==     [ [0, 1, 2], [3, 4, 5], [6, 7, 8, 9] ]\nassert     merge([ [0], [1], [2], [3], [4], [5], [6], [7], [8], [9] ]) ==     [ [0], [1], [2], [3], [4], [5], [6], [7], [8], [9] ]\nassert     merge([ [0, 1, 2], [3, 4, 5], [6, 7, 8, 9] ]) ==     [ [0, 1, 2], [3, 4, 5], [6, 7, 8, 9] ]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert     merge([[1, 2, 3, 4], [5, 6, 7, 8]]) == [[1, 5, 2, 6, 3, 7, 4], [8, 4, 7, 6, 3, 5, 2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     merge([[1,2],[2,3]]) == [[1,2],[2,3]]\nassert     merge([[1,2],[2,3],[3,4]]) == [[1,2],[2,3],[3,4]]\nassert     merge([[1,2],[2,3],[3,4],[4,5]]) == [[1,2],[2,3],[3,4],[4,5]]\nassert     merge([[4,3],[2,1],[5,6],[7,8],[9,10]]) == [[4,3],[2,1],[5,6],[7,8],[9,10]]\n\n\ndef intersect(lst1,lst2):  \n    '''\n    Write a python function which takes two lists and returns a new list containing only the items that are common to both.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     merge([[1,2], [3,4], [5,6]]) == [[1,3,5],[2,4,6]]\nassert     merge([[1,2], [3,4], [5,6]]) == [[1,3,5],[2,4,6]]\nassert     merge([[1,2], [3,4], [5,6], [7,8], [9,10]]) == [[1,3,5,7,9],[2,4,6,8,10]]\nassert     merge([[1,2], [3,4], [5,6], [7,8], [9,10]]) == [[1,3,5,7,9],[2,4,6,8,10]]\nassert     merge([[1,2], [3,4], [5,6], [7,8], [9,10]]) == [[1,3,5,7,9],[2,4,6,8,10]]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     merge([['a', 'b'], [1, 2]]) == [['a', 1], ['b', 2]]\nassert     merge([['a', 'b', 'c', 'd'], [1, 2, 3, 4]]) == [['a', 1], ['b', 2], ['c', 3], ['d', 4]]\nassert     merge([['a', 'b', 'c', 'd'], [1, 2, 3, 4], [5, 6, 7, 8]]) == [['a', 1, 5], ['b', 2, 6], ['c', 3, 7], ['d', 4, 8]]\nassert     merge([['a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e']]) == [['a', 'a'], ['b', 'b'], ['c', 'c', 'd', 'e']]\nassert     merge([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f']]) == [['a', 'a', 'a'], ['b', 'b', 'b'], ['c', 'c', 'c', 'd', 'd'], ['e', 'e', 'e', 'f']]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef merge_sort(lst):\n    '''\n    Write a python function which takes a list of numbers, sorts it and returns the sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]\nassert     merge([[1,2,3],[4,5,6]]) == [[1,4],[2,5],[3,6]]\nassert     merge([[1,2],[3,4]]) == [[1,3],[2,4]]\n"
    },
    {
        "number": 612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [['a', 'b'], ['c', 'd'], ['e', 'f']] == merge([[['a', 'b'], ['c', 'd']]])\nassert     [['e', 'f'], ['g', 'h'], ['i', 'j']] == merge([[['e', 'f'], ['g', 'h'], ['i', 'j']]])\n\n\ndef fill_the_blank(phrase):\n    '''\n    Write a python function which takes a string as input and returns the string with all the blank spaces replaced by the next character. \n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cummulative_sum([(1,2,3), (5,6,7), (8,9,10)]) == [(1,3,5), (6,9,15), (10,17,20)]\nassert     cummulative_sum([(-2,-3), (-1,0), (-1,2,3), (0,0), (1,3,4)]) == [(0,0), (-2,0), (-2,0), (0,1), (1,4)]\nassert     cummulative_sum([]) == []\n\ndef binary_search(test_list, test_value):\n    '''\n    Write a function to return the index of the first occurrence of the given value.\n    If the given value is not present, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cummulative_sum([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 6, 10, 15, 21, 28]\nassert     cummulative_sum((-1, -2, -3, -4, -5, -6, -7)) == [ -7, -6, -5, -4, -3, -2, -1]\nassert     cummulative_sum((1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7)) == [ 1.1, 3.3, 6.6, 10.1, 15.3, 21.6, 28.7]\nassert     cummulative_sum((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == [ 1, 3, 6, 10, 15, 21, 28, 36, 45, 54]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cummulative_sum([1,2,3,4,5]) == [1,3,6,10,15]\nassert     cummulative_sum([0]) == [0]\nassert     cummulative_sum([]) == []\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cummulative_sum((1, 2, 3, 4, 5, 6)) == [1, 3, 6, 10, 15, 21]\nassert     cummulative_sum((1, 2, 3, 4, 5)) == [1, 3, 6, 10, 15]\nassert     cummulative_sum((-1, 0, 1, 2, 3, 4, 5, 6)) == [-1, -1, 1, 3, 6, 10, 15, 21]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     cummulative_sum([(1,2,3), (4,5,6), (7,8,9)]) == [1, 3, 6, 10, 15, 21]\nassert     cummulative_sum([(1,2), (4,5)]) == [1, 5, 9]\nassert     cummulative_sum([(1,2,3), (4,5,6), (7,8,9)]) == [1, 3, 6, 10, 15, 21]\nassert     cummulative_sum([(1,2,3), (4,5,6), (7,8,9,10)]) == [1, 3, 6, 10, 15, 21]\nassert     cummulative_sum([]) == []\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     cummulative_sum([1, 2, 3]) == [1, 3, 6]\nassert     cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\nassert     cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\nassert     cummulative_sum([]) == []\nassert     cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 6, 10, 15, 21, 28, 36, 45]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cummulative_sum((2, 4, 6, 7, 8, 10, 12, 13, 14)) ==     (2, 5, 12, 17, 21, 28, 34, 41, 45)\nassert     cummulative_sum((1, 2, 3, 4, 5)) ==     (1, 3, 6, 10, 15)\nassert     cummulative_sum((1, 3, 4, 5, 6)) ==     (1, 4, 6, 11, 16)\nassert     cummulative_sum((1, 2, 3, 4, 5, 6)) ==     (1, 3, 5, 7, 9, 11)\nassert     cummulative_sum((1, 1, 1, 1, 1, 1, 1, 1)) ==     (1, 2, 3, 4, 5, 6, 7, 8)\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cummulative_sum((1, 2, 3, 4)) == (1, 3, 6, 10)\nassert     cummulative_sum((1, 2, 3, 4, 5)) == (1, 3, 6, 10, 15)"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     cummulative_sum([2, 2, 2, 2, 5, 5, 5, 5, 5, 7, 7, 7, 7]) == [2, 4, 6, 10, 15, 19, 22, 26, 30, 34, 38, 42, 46]\nassert     cummulative_sum([1, 2, 3, 4]) == [1, 3, 6, 10]\nassert     cummulative_sum([2, 1, 2, 3]) == [2, 4, 4, 6]\n"
    },
    {
        "number": 614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cummulative_sum([]) == []\nassert     cummulative_sum([1, 2, 3]) == [1, 3, 6]\nassert     cummulative_sum([1, 2, 3, 4, 5, 6]) == [1, 3, 6, 10, 15, 21]\n\ndef classify(test_list):\n    '''\n    Write a function to classify the given list as 1. non-numeric/non-alphanumeric/numeric/alphanumeric.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     average_tuple(((1, 2), (3, 4), (5, 6))) == [2.5, 3.5, 4.5]\nassert     average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.5, 3.5, 4.5]\nassert     average_tuple(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))) == [2.5, 3.5, 4.5, 6.5, 7.5, 8.5, 10.5, 12.5]\nassert     average_tuple(((1, 2), (3, 4), (5, 6), (7, 8))) == [2.5, 3.5, 4.5, 5.5]\nassert     average_tuple(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10))) == [2.5, 3.5, 4.5, 5.5, 7.5]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     average_tuple([(1,2), (3,4)]) == [2.0, 3.0]\nassert     average_tuple([(1,2,3), (4,5,6), (7,8,9)]) == [3.0, 4.5, 6.5]\nassert     average_tuple([(1,2,3,4), (5,6,7,8)]) == [4.0, 5.5, 6.5]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     average_tuple(((1, 2, 3), (4, 5, 6))) == [3.0, 4.5, 5.0]\nassert     average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [3.0, 4.5, 5.0]\nassert     average_tuple(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10))) == [3.0, 4.0, 5.0]\nassert     average_tuple(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26), (27, 28), (29, 30))) == [3.0, 4.0, 5.0]\n\ndef maximum_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the maximum value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     average_tuple(    ((0, 0, 0), (1, 1, 1), (2, 2, 2), (3, 3, 3))) == [0.0, 0.5, 1.0, 1.5]\nassert     average_tuple(    ((-1, -2, -3), (4, 5, 6), (7, 8, 9), (10, 11, 12))) == [-1.0, -2.0, -3.0, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]\nassert     average_tuple(    ((0, 0, 0), (-1, -2, -3), (4, 5, 6), (7, 8, 9), (10, 11, 12))) == [-1.0, -2.0, -3.0, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]\nassert     average_tuple(    ((-1, -2, -3), (4, 5, 6), (7, 8, 9), (10, 11, 12))) == [-1.0, -2.0, -3.0, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]\nassert     average_tuple(    ((-1, -2, -3), (4, 5, 6))) == [-1.0, -2.0, -3.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (average_tuple(((3, 5), (7, 8), (10, 11), (13, 14), (15, 16))) ==\n                        [(3, 7, 10, 13, 15), (5, 8, 11, 14, 16)])\nassert     (average_tuple(((3, 5), (7, 8), (10, 11), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26))) ==\n                        [(3, 7, 10, 13, 15, 17, 19, 21, 23, 25), (5, 8, 11, 14, 16, 18, 20, 22, 24, 26)])\nassert     (average_tuple(((3, 5), (7, 8), (10, 11), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26), (27, 28), (29, 30), (31, 32), (33, 34), (35, 36), (37, 38), (39, 40), (41, 42), (43, 44), (45, 46), (47, 48), (49, 50), (51, 52), (53, 54), (55, 56), (57, 58), (59, 60), (61, 62), (63, 64), (65, 66), (67, 68), (69, 70), (71, 72), (73, 74), (75, 76), (77, 78), (79, 80), (81, 82), (83, 84), (85, 86), (87, 88), (89, 90), (91, 92), (93, 94), (95, 96), (97, 98), (99, 100), (101, 102), (103, 104), (105, 106), (107, 108), (109, 110), (111, 112), (113, 114), (115, 116), (117, 118), (119, 120), (121, 122), (123, 124), (125, 126), (127, 128), (129, 130), (131, 132), (133, 134), (135, 136), (137, 138), (139, 140), (141, 142), (143, 144), (145, 146), (147, 148), (149, 150), (151, 152), (153, 154), (155, 156), (157, 158), (159, 160), (161, 162), (163, 164), (165, 166), (167, 168), (169, 170), (171, 172), (173, 174), (175, 176), (177, 178), (179, 180), (181, 182), (183, 184), (185, 186), (187, 188), (189, 190), (191, 192), (193, 194), (195, 196), (197, 198), (199, 200), (201, 202), (203, 204), (205, 206), (207, 208), (209, 210), (211, 212), (213, 214), (215, 216), (217, 218), (219, 220), (221, 222), (223, 224), (225, 226), (227, 228), (229, 230), (231, 232), (233, 234), (235, 236), (237, 238), (239, 240), (241, 242), (243, 244), (245, 246), (247, 248), (249, 250), (251, 252), (253, 254), (255, 256), (257, 258), (259, 260), (261, 262), (263, 264), (265, 266), (267, 268), (269, 270), (271, 272), (273, 274), (275, 276), (277, 278), (279, 280), (281, 282), (283, 284), (285, 286), (287, 288), (289, 290), (291, 292), (293, 294), (295, 296), (297, 298), (299, 300), (301, 302), (303, 304), (305, 306), (307, 308), (309, 310), (311, 312), (313, 314), (315, 316), (317, 318), (319, 320), (321, 322), (323, 324), (325, 326), (327, 328), (329, 330), (331, 332), (333, 334), (335, 336), (337, 338), (339, 340), (341, 342), (343, 344), (345, 346), (347, 348), (349, 350), (351, 352), (353, 354), (355, 356), (357, 358), (359, 360), (361, 362), (363, 364), (365, 366), (367, 368), (369, 370), (371, 372), (373, 374), (375, 376), (377, 378), (379, 380), (381, 382), (383, 384), (385, 386), (387, 388), (389, 390), (391, 392), (393, 394), (395, 396), (397, 398), (399, 400), (401, 402), (403, 404), (405, 406), (407, 408), (409, 410), (411, 412), (413, 414), (415, 416), (417, 418), (419, 420), (421, 422), (423, 424), (425, 426), (427, 428), (429, 430), (431, 432), (433, 434), (435, 436), (437, 438), (439, 440), (441, 442), (443, 444), (445, 446), (447, 448), (449, 450), (451, 452), (453, 454), (455, 456), (457, 458), (459, 460), (461, 462), (463, 464), (465, 466), (467, 468), (469, 470), (471, 472), (473, 474), (475, 476), (477, 478), (479, 480), (481, 482), (483, 484), (485, 486), (487, 488), (489, 490), (491, 492), (493, 494), (495, 496), (497, 498), (499, 500), (501, 502), (503, 504), (505, 506), (507, 508), (509, 510), (511, 512), (513, 514), (515, 516), (517, 518), (519, 520), (521, 522), (523, 524), (525, 526), (527, 528), (529, 530), (531, 532), (533, 534), (535, 536), (537, 538), (539, 540), (541, 542), (543, 544), (545, 546), (547, 548), (549, 550), (551, 552), (553, 554), (555, 556), (557, 558), (559, 560), (561, 562), (563, 564), (565, 566), (567, 568), (569, 570), (571, 572), (573, 574), (575, 576), (577, 578), (579, 580), (581, 582), (583, 584), (585, 586), (587, 588), (589, 590), (591, 592), (593, 594), (595, 596), (597, 598), (599, 600), (601, 602), (603, 604), (605, 606), (607, 608), (609, 610), (611, 612), (613, 614), (615, 616), (617, 618), (619, 620), (621, 622), (623, 624), (625, 626), (627, 628), (629, 630), (631, 632), (633, 634), (635, 636), (637, 638), (639, 640), (641, 642), (643, 644), (645, 646), (647, 648), (649, 650), (651, 652), (653, 654), (655, 656), (657, 658), (659, 660), (661, 662), (663, 664), (665, 666), (667, 668), (669, 670), (671, 672), (673, 674), (675, 676), (677, 678), (679, 680), (681, 682), (683, 684), (685, 686), "
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     average_tuple(((2, 3), (4, 5), (10, 11))) == [4, 6, 10]\nassert     average_tuple(((2, 3), (4, 5), (10, 11), (5, 6), (7, 8))) == [4, 6, 10, 4, 6]\nassert     average_tuple(((2, 3), (4, 5), (10, 11), (5, 6), (7, 8), (3, 4), (3, 4))) == [4, 6, 10, 4, 6, 7, 3]\nassert     average_tuple(((2, 3), (4, 5), (10, 11), (5, 6), (7, 8), (3, 4), (3, 4), (3, 4), (3, 4))) == [4, 6, 10, 4, 6, 7, 3, 3]\nassert     average_tuple(((2, 3), (4, 5), (10, 11), (5, 6), (7, 8), (3, 4), (3, 4), (3, 4), (3, 4), (3, 4))) == [4, 6, 10, 4, 6, 7, 3, 3, 3, 3]\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     average_tuple(((5, 3), (4, 4), (1, 1))) == [3.0, 4.0, 1.0]\nassert     average_tuple(((1, 4), (3, 4), (2, 1), (5, 9), (4, 6))) == [3.5, 4.5, 3.5, 4.5, 4.5]\n\n\ndef dot_product(vec1, vec2):\n    '''\n    Write a function dot_product which takes two vectors as parameters. The function should return the dot product of the two vectors.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     average_tuple(\n                    ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n                ) ==     [(1 + 4 + 7) / 3, (2 + 5 + 8) / 3, (3 + 6 + 9) / 3]\nassert     average_tuple(\n                    ((1, 2, 3), (4, 5, 6))\n                ) ==     [(1 + 4) / 2, (2 + 5) / 2, (3 + 6) / 2]\nassert     average_tuple(\n                    ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n                ) ==     [(1 + 4 + 7) / 3, (2 + 5 + 8) / 3, (3 + 6 + 9) / 3]\nassert     average_tuple(\n                    ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))\n                ) ==     [(1 + 4 + 7 + 10) / 4, (2 + 5 + 8 + 11) / 4, (3 + 6 + 9 + 12) / 4]\n\ndef average_tuple_dict(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     average_tuple(((1,2,3), (4,5,6))) == [(1.0+4.0)/2.0, (2.0+5.0)/2.0, (3.0+6.0)/2.0]\nassert     average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [(1.0+4.0+7.0)/3.0, (2.0+5.0+8.0)/3.0, (3.0+6.0+9.0)/3.0]\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (3, 4)         == tuple_modulo((3, 4), (3, 4))\nassert     (0, 3)         == tuple_modulo((0, 3), (3, 4))\nassert     (0, 3)         == tuple_modulo((0, 3), (3, 4))\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (1, 2, 3)         == tuple_modulo((1, 2, 3), (1, 2, 3))\nassert     (1, 2, 3)         == tuple_modulo((1, 2, 3), (1, 2, 3, 4))\nassert     (1, 2, 3)         == tuple_modulo((1, 2, 3), (3, 4, 5))\nassert     (1, 2, 3)         == tuple_modulo((3, 4, 5), (1, 2, 3))\n\ndef sort_tuple(test_tup):\n    '''\n    Write a function which takes a tuple and sorts the elements of the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\nassert     tuple_modulo((1, 2, 3, 4), (4, 5, 6)) == (1, 2, 3, 0)\nassert     tuple_modulo((-1, -2, -3), (4, 5, 6)) == (-1, -2, -3)\nassert     tuple_modulo((-1, -2, -3), (-4, -5, -6)) == (-1, -2, -3)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tuple_modulo((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert     tuple_modulo((1, 2, 3), (2, 3, 4)) == (1, 1, 1)\nassert     tuple_modulo((1, 2, 3), (3, 4, 5)) == (2, 2, 2)\nassert     tuple_modulo((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tuple_modulo((2,4,6,8),(3,6,9,12))     ==     (0,0,0,0)\nassert     tuple_modulo((2,4,6,8,10,12),(3,6,9,12))     ==     (0,0,0,0,0,0)\nassert     tuple_modulo((2,4,6,8),(3,6,9,12,15,18))     ==     (0,0,0,0,0,0)\nassert     tuple_modulo((1,2,3,4,5,6,7,8,9,10),(2,3,4,5,6,7,8,9,10,11))     ==     (0,0,0,0,0,0,0,0,0,0)\n\ndef tuple_str(test_tup1):\n    '''\n    Write a function which takes a tuple and returns a string with the numbers in the tuple separated by a comma and a space,\n    for example if the input tuple was (1,2,3,4,5,6,7,8,9,10) the function would return '1,2,3,4,5,6,7,8,9,10'.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (4, 2) % (4, 4) == (0, 0)\nassert     (1, 3) % (1, 4) == (0, 1)\nassert     (3, 4) % (2, 3) == (1, 1)\nassert     (5, 5) % (5, 5) == (0, 0)\nassert     (0, 0) % (5, 5) == (0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tuple_modulo((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))     == 0\nassert     tuple_modulo((1, 2, 3, 4, 5), (2, 3, 4, 5, 6))     == 1\nassert     tuple_modulo((1, 2, 3, 4, 5), (1, 2, 3, 4, 6))     == 2\nassert     tuple_modulo((1, 2, 3, 4, 5), (2, 3, 4, 5, 6))     == 3\nassert     tuple_modulo((1, 2, 3, 4, 5), (3, 4, 5, 6, 7))     == 4\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tuple_modulo((1, 3), (2, 3))     == (1, 1)\nassert     tuple_modulo((1, 2), (2, 4))     == (1, 2)\nassert     tuple_modulo((2, 3), (1, 4))     == (2, 3)\nassert     tuple_modulo((0, 0), (0, 0))     == (0, 0)\nassert     tuple_modulo((1, 2), (1, 1))     == (0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_Jumps(10, [2, 4, 8, 16]) == 2\nassert     min_Jumps(100, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 2\nassert     min_Jumps(100, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 22]) == 3\nassert     min_Jumps(100, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 22, 24]) == 4\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_Jumps(5, (4, 2)) == 1\nassert     min_Jumps(6, (4, 2)) == 2\nassert     min_Jumps(7, (4, 2)) == 4\nassert     min_Jumps(8, (4, 2)) == 4\nassert     min_Jumps(8, (3, 3)) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     min_Jumps(7, 2) == 2, \"7 -> 2, result should be 2\"\nassert     min_Jumps(24, 6) == 4, \"24 -> 6, result should be 4\"\nassert     min_Jumps(35, 7) == 4, \"35 -> 7, result should be 4\"\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_Jumps(10, (3,0)) == 1\nassert     min_Jumps(12, (0,0)) == 2\nassert     min_Jumps(12, (4,4)) == 3\nassert     min_Jumps(18, (4,0)) == 3\nassert     min_Jumps(18, (1,9)) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_Jumps(steps, 0, 0, 0, 0) == 1, 'Test 1'\nassert     min_Jumps(steps, 1, 0, 0, 0) == 1, 'Test 2'\nassert     min_Jumps(steps, 2, 0, 0, 0) == 1, 'Test 3'\nassert     min_Jumps(steps, 3, 0, 0, 0) == 2, 'Test 4'\nassert     min_Jumps(steps, 4, 0, 0, 0) == 2, 'Test 5'\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_Jumps(steps = 4, d = 5)     == 1\nassert     min_Jumps(steps = 5, d = 6)     == 0\nassert     min_Jumps(steps = 10, d = 11)     == 3\nassert     min_Jumps(steps = 13, d = 17)     == 4\nassert     min_Jumps(steps = 15, d = 19)     == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_Jumps(10, [(0,0), (1,2), (2,2), (2,3), (3,1), (3,3), (5,2), (6,2), (7,1), (7,3), (7,4), (7,5), (7,6), (7,7), (8,7), (8,6), (8,5), (8,4), (8,3), (8,2), (8,1), (8,0), (9,0)]) == 6\nassert     min_Jumps(10, [(0,0), (1,2), (2,2), (2,3), (3,1), (3,3), (5,2), (6,2), (7,1), (7,3), (7,4), (7,5), (7,6), (7,7), (8,7), (8,6), (8,5), (8,4), (8,3), (8,2), (8,1), (8,0), (9,0)]) == 4\nassert     min_Jumps(10, [(0,0), (1,1), (2,1), (3,1), (3,2), (3,3), (5,2), (6,2), (7,1), (7,3), (7,4), (7,5), (7,6), (7,7), (8,7), (8,6), (8,5), (8,4), (8,3), (8,2), (8,1), (8,0), (9,0)]) == 4\nassert     min_Jumps(10, [(0,0), (1,2), (2,2), (2,3), (3,1), (3,3), (5,2), (6,2), (7,1), (7,3), (7,4), (7,5), (7,6), (7,7), (8,7), (8,6), (8,5), (8,4), (8,3), (8,2), (8,1), (8,0), (9,0)]) == 3\nassert     min_Jumps(10, [(0,0), (1,2), (2,2), (2,3), (3,1), (3,3), (5,2), (6,2), (7,1), (7,3), (7,4), (7,5), (7,6), (7,7), (8,7), (8,6), (8,5), (8,4), (8,3), (8,2), (8,1), (8,0), (9,0)]) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_Jumps(8, (1, 1)) == 1\nassert     min_Jumps(8, (1, 2)) == 1\nassert     min_Jumps(10, (3, 4)) == 2\nassert     min_Jumps(13, (4, 5)) == 2\nassert     min_Jumps(15, (4, 6)) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     div_list([1,2,3],[4,5,6]) == [[0,0,0],[0,0,0],[0,0,0]]\nassert     div_list([1,2,3],[4,5,6,7]) == [[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef div_list2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     div_list([1,2,3,4,5],[2,4,6,8,10]) == [0.5,1.0,1.5,2.0,2.5]\nassert     div_list([1,2],[2,4,6]) == [0.5,0.3333333333333333,0.6666666666666666]\nassert     div_list([],[2,4,6]) == [0.5,0.3333333333333333,0.6666666666666666]\n\n\n\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     div_list([1,2],[3,4]) == [0.6,0.8]\nassert     div_list([1,1],[1,1]) == [1,1]\nassert     div_list([1,2],[2,2]) == [0.5,1.0]\nassert     div_list([1],[1,2]) == [1]\nassert     div_list([1,2],[]) == [1.0,2.0]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     div_list([1,2,3,4],[1,2,3,4,5])==[2,2,3,4]\nassert     div_list([1,2,3],[1,2,3,4])==[0,0,3,0]\nassert     div_list([1],[2,3,4])==[0,0,0]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     div_list([1,2,3,4], [2,4,6,8]) == [0.5, 1.0, 1.5, 2.0]\nassert     div_list([3,2,1], [1,1,2]) == [1.5, 1.0, 0.5]\nassert     div_list([1,3,5], [2,4,6]) == [0.5, 1.0, 1.5]\nassert     div_list([3,2,1], [2,4,6]) == [0.5, 1.0, 1.5]\nassert     div_list([1,2,3], [4,5,6]) == [0.5, 1.0, 1.5]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     div_list([1,2,3], [1,1,1]) == [1,1,1]\nassert     div_list([1,2,3], [2,1,1]) == [0.5,0.5,1]\nassert     div_list([1,2,3], [1,1,1,2]) == [0.5,0.5,1.0,1.0]\n\n\ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1, n2 = len(nums1), len(nums2)\n    if n1 < n2:\n        nums1, nums2 = nums2, nums1\n    out = [0] * (n1)\n    for i in range(n1):\n        if nums2[i] == 0:\n            out[i] = float('inf')\n        else:\n            out[i] = nums1[i] / nums2[i]\n    return out\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     div_list([1,2,3,4], [2,4,1,2]) == [1,1,3,4]\nassert     div_list([1,2,3,4], [2,4,1,0]) == [1,0,3,0]\nassert     div_list([], [2,4,1,2]) == []\nassert     div_list([1,2,3,4], []) == [1,2,3,4]\n"
    },
    {
        "number": 618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     div_list([1,2,3],[2,4,6]) == [0.5,0.5,0.5]\nassert     div_list([1,2,3],[2,2,2]) == [0,0,0]\nassert     div_list([1,2,3,4],[1,2,3,4]) == [1,1,1,1]\nassert     div_list([1,2,3,4],[2,3,4,5]) == [0.5,0.5,0.5,0.5]\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ('1234567890'\n            ==\n            '901234567890')\nassert     ('abcdefg1234567890'\n            ==\n            'abcdefg91234567890')\nassert     ('abcdefg1234567890z'\n            ==\n            'abcdefg1234567890z')\nassert     ('1234567890abcdefg'\n            ==\n            '1234567890abcdefg')\nassert     ('abcdefg1234567890abc'\n            ==\n            'abcdefg1234567890abc')\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     move_num('abc123xyz') == 'xyz123abc'\nassert     move_num('3123abc456') == 'abc456123'\nassert     move_num('321') == '321'\nassert     move_num('asdf') == 'fdsa'\nassert     move_num('axbycz') == 'abczxy'\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     move_num(\"K1KA5CB7\") == \"CB7K1KA5\"\nassert move_num(\"AJKDLSI412K4JSJ9D\") == \"K4JSJ9DS12AJL\"\nassert move_num(\"XPYOPQR\") == \"QPRXPYO\"\nassert move_num(\"KQA6K35K\") == \"KQA6K35\"\nassert move_num(\"TTKGFOAMBKQK\") == \"AMBKFOGQKTTT\"\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     'CodingDojo' == move_num('Coding Dojo')\nassert     'Coding Dojo' == move_num('Coding dojo')\nassert     'Coding dojo' == move_num('Coding dojCoding dojo')\nassert     'Coding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding dojCoding d"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     move_num('1h2h3h4h5h6h7h8h9h10h11h12h13h14h15h16h17h18h19h20h21h22h23h24h25h26h27h28h29h30h31h32h33h34h35h36h37h38h39h40h41h42h43h44h45h46h47h48h49h50h51h52h53h54h55h56h57h58h59h60h61h62h63h64h65h66h67h68h69h70h71h72h73h74h75h76h77h78h79h80h81h82h83h84h85h86h87h88h89h90h91h92h93h94h95h96h97h98h99h100h101h102h103h104h105h106h107h108h109h110h111h112h113h114h115h116h117h118h119h120h121h122h123h124h125h126h127h128h129h130h131h132h133h134h135h136h137h138h139h140h141h142h143h144h145h146h147h148h149h150h151h152h153h154h155h156h157h158h159h160h161h162h163h164h165h166h167h168h169h170h171h172h173h174h175h176h177h178h179h180h181h182h183h184h185h186h187h188h189h190h191h192h193h194h195h196h197h198h199h200h201h202h203h204h205h206h207h208h209h210h211h212h213h214h215h216h217h218h219h220h221h222h223h224h225h226h227h228h229h230h231h232h233h234h235h236h237h238h239h240h241h242h243h244h245h246h247h248h249h250h251h252h253h254h255h256h257h258h259h260h261h262h263h264h265h266h267h268h269h270h271h272h273h274h275h276h277h278h279h280h281h282h283h284h285h286h287h288h289h290h291h292h293h294h295h296h297h298h299h300h301h302h303h304h305h306h307h308h309h310h311h312h313h314h315h316h317h318h319h320h321h322h323h324h325h326h327h328h329h330h331h332h333h334h335h336h337h338h339h340h341h342h343h344h345h346h347h348h349h350h351h352h353h354h355h356h357h358h359h360h361h362h363h364h365h366h367h368h369h370h371h372h373h374h375h376h377h378h379h380h381h382h383h384h385h386h387h388h389h390h391h392h393h394h395h396h397h398h399h400h401h402h403h404h405h406h407h408h409h410h411h412h413h414h415h416h417h418h419h420h421h422h423h424h425h426h427h428h429h430h431h432h433h434h435h436h437h438h439h440h441h442h443h444h445h446h447h448h449h450h451h452h453h454h455h456h457h458h459h460h461h462h463h464h465h466h467h468h469h470h471h472h473h474h475h476h477h478h479h480h481h482h483h484h485h486h487h488h489h490h491h492h493h494h495h496h497h498h499h500h501h502h503h504h505h506h507h508h509h510h511h512h513h514h515h516h517h518h519h520h521h522h523h524h525h526h527h528h529h530h531h532h533h534h535h536h537h538h539h540h541h542h543h544h545h546h547h548h549h550h551h552h553h554h555h556h557h558h559h560h561h562h563h564h565h566h567h568h569h570h571h572h573h574h575h576h577h578h579h580h581h582h583h584h585h586h587h588h589h590h591h592h593h594h595h596h597h598h599h600h601h602h603h604h605h606h607h608h609h610h611h612h613h614h615h616h617h618h619h620h621h622h623h624h625h626h627h628h629h630h631h632h633h634h635h636h637h638h639h640h641h642h643h644h645h646h647h648h649h650h651h652h653h654h655h656h657h658h659h660h661h662h663h664h665h666h667h668h669h670h671h672h673h674h675h676h677h678h679h680h681h682h683h684h685h686h687h688h689h690h691h692h693h694h695h696h697h698h699h700h701h702h703h704h705h706h707h708h709h710h711h712h713h714h715h716h717h718h719h720h721h722h723h724h725h726h727h728h729h730h731h732h733h734h735h736h737h738h739h740h741h742h743h744h745h746h747h748h749h750h751h752h753h754h755h756h757h758h759h760h761h762h763h764h765h766h767h768h769h770h771h772h773h774h775h776h777h778h779h780h781h782h783h784h785h786h787h788h789h790h791h792h793h794h795h796h797h798h799h800h801h802h803h804h805h806h807h808h809h810h811h812h813h814h815h816h817h818h819h820h821h822h823h824h825h826h827h828h829h830h831h832h833h834h835h836h837h838h839h840h841h842h843h844h845h846h847h848h849h850h851h852h853h854h855h856h857h858h859h860h861h862h863h864h865h866h867h868h869h870h871h872h873h874h875h876h877h878h879h880h881h882h883h884h885h886h887h888h889h890h891h892h893h894h895h896h897h898h899h900h901h902h903h904h905h906h907h908h909h910h911h912h913h914h915h916h917h918h919h920h921h922h923h924h925h926h927"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (move_num('1234567890') == '9876543211234567890')\nassert     (move_num('abc123def') == 'ef123abcd')\nassert     (move_num('abcd123123') == '123abcd123')\nassert     (move_num('abcd123123123') == '123abcd123123')\nassert     (move_num('abcd
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     move_num('hello123') == 'hll123'\nassert     move_num('hello12345') == 'hll12345'\nassert     move_num('12345hello') == '5hello'\nassert     move_num('12345hello123') == '5hello123'\nassert     move_num('12345hello12345') == '5hello12345'\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     move_num('abd123451234512345') == '12345123451234512345', 'Wrong result'\nassert     move_num('123451234512345') == '123451234512345', 'Wrong result'\nassert     move_num('12345123451234567') == '123451234567', 'Wrong result'\nassert     move_num('12345123451234567890') == '123451234567890', 'Wrong result'\nassert     move_num('a123451234512345') == '123451234512345', 'Wrong result'\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     move_num('python1234')     == '13568'\nassert     move_num('try1234python')     == 'eysn32t6'\nassert     move_num('1234567890')     == '987654321'\nassert     move_num('try1234python1234')     == 'eysn32t6'\nassert     move_num('123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890')     == '987654321'\nprint('pass the test')\n"
    },
    {
        "number": 619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_num(\"1a2b3c4d5e\") == \"e1d2c3a4b5\"\nassert     move_num(\"1a2b3c4d5e7g8\") == \"g8e7d2c3a4b5\"\nassert     move_num(\"1a2b3c4d5e7g8i9\") == \"g8i9e7d2c3a4b5\"\nassert     move_num(\"1a2b3c4d5e7g8i9j0\") == \"g8i9j0e7d2c3a4b5\"\nassert     move_num(\"1a2b3c4d5e7g8i9j0k\") == \"g8i9j0ke7d2c3a4b5\"\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [7,7,8,8,9,9,10] == largest_subset([7,7,8,8,9,9,10])\nassert     [7,7,8,8,9,9,10,10] == largest_subset([7,7,8,8,9,9,10,10])\nassert     [7,7,8,8,9,9,10,11] == largest_subset([7,7,8,8,9,9,10,11])\nassert     [7,7,8,8,9,9,10,11,12] == largest_subset([7,7,8,8,9,9,10,11,12])\n\ndef fourSum(nums, target):\n    '''\n    Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? \n    Find all unique quadruplets in the array which gives the sum of target.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1,3,5,6,9] == largest_subset([1,2,3,6,9])\nassert     [1,2,5] == largest_subset([1,2,3,4,5])\nassert     [] == largest_subset([2,4,6,8,10])\nassert     [1,2,3,4,5,6,7,8,9] == largest_subset([1,2,3,4,5,6,7,8,9])\n\n\ndef unique(a):\n    '''\n    Write a function to find the size of the longest substring with no repeating characters.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_subset([0, 1, 2, 3]) == 3\nassert     largest_subset([1, 2, 3, 4, 5]) == 1\nassert     largest_subset([6, 5, 3, 2, 1]) == 3\nassert     largest_subset([4, 1, 2, 4, 3, 3]) == 4\nassert     largest_subset([]) == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_subset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     largest_subset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8\nassert     largest_subset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 9\nassert     largest_subset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 6\nassert     largest_subset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 7\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_subset([1,2,3]) == [1,3], \"1,2,3\"\nassert     largest_subset([1,2,3,4,5]) == [1,2,4], \"1,2,3,4,5\"\nassert     largest_subset([1,2,3,4,5,6,7,8,9]) == [1,2,3,6,9], \"1,2,3,4,5,6,7,8,9\"\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,6,9,10], \"1,2,3,4,5,6,7,8,9,10\"\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1,2,3,4,5] == largest_subset([1,2,3,4,5])\nassert     [1,2,3,4] == largest_subset([1,2,3,4])\nassert     [1,2,3,4,5,6,7] == largest_subset([1,2,3,4,5,6,7])\n\ndef is_acceptable(l):\n    '''\n    Write a function that takes a list of ints and returns a new list with the positive integers only.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_subset([4, 6, 17, 18, 23, 25, 30, 31, 32, 34, 35]) == 4\nassert     largest_subset([1, 2, 4, 8, 16, 32, 64, 128, 256]) == 4\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8]) == 3\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert     largest_subset([2, 2, 2, 2, 2]) == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_subset([5,9,7,6]) == 3\nassert     largest_subset([3,6,9,1]) == 2\nassert     largest_subset([1,2,3,4]) == 1\nassert     largest_subset([3,1,2,4]) == 2\nassert     largest_subset([1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 2\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 2\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 2\nassert     largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_median([], [], 0) == 0\nassert     get_median([1, 2], [], 2) == 1\nassert     get_median([1, 2], [], 3) == 2\nassert     get_median([1, 2], [3], 2) == 1\nassert     get_median([1, 2], [3], 3) == 2\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_median([3,6,9], [1,3,8,12,15], 6) == 9, \"Test 1 failed\"\nassert     get_median([1,3,8,12,15], [3,6,9], 5) == 8, \"Test 2 failed\"\nassert     get_median([1,3,8,12,15], [3,6,9], 0) == None, \"Test 3 failed\"\nassert     get_median([1,3,8,12,15], [3,6,9], 1) == 3, \"Test 4 failed\"\n\nprint \"all tests passed\""
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    arr1 = [1, 2, 3, 4, 5, 6]\n    arr2 = [6, 7, 8, 9, 10, 11]\n    assert get_median(arr1, arr2, 6) == 6.5\n    print \"Passed\"\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_median([1, 3, 4], [2, 6, 9], 3) == 3.5\nassert     get_median([-1, -2, 0, 1, 2], [1, 2, 3, 4], 3) == 2.0\nassert     get_median([1, 4, 5, 6], [2, 3, 7, 8], 4) == 5.5\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_median([1, 2, 3], [2, 3, 4], 3) == 3\nassert     get_median([1, 2], [2, 3, 4], 3) == 2\nassert     get_median([1, 2], [2, 3], 3) == 2\nassert     get_median([1], [2], 1) == 1\nassert     get_median([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], 4) == 5\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_median([1, 2, 3], [2, 3, 4], 3) == 2\nassert     get_median([1, 2, 3], [2, 3, 4], 4) == 3\nassert     get_median([1, 2, 3, 4], [2, 3, 4], 3) == 2.5\nassert     get_median([1, 2, 3, 4], [2, 3, 4], 4) == 3.5\nassert     get_median([1, 2, 3, 4], [2, 3, 4], 5) == 3\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 4) == 5\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 3) == 4\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 2) == 3\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 1) == 4\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 0) == 4\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_median([1,3,5,7], [2,4,6,8], 4) == 5.5\nassert     get_median([1,2], [3,4], 4) == 2.5\nassert     get_median([1,2,3,4,5,6,7], [2,3,4,5,6,7,8,9], 6) == 5.5\nassert     get_median([1,2,3,4,5,6,7,8,9], [2,3,4,5,6,7,8,9,10,11], 6) == 5.5\nassert     get_median([1,2,3,4,5,6,7,8,9,10], [2,3,4,5,6,7,8,9,10,11], 6) == 5.5\n"
    },
    {
        "number": 622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_median([2,4,6,8,10], [2,3,4,5,6,7], 5) == 5\nassert     get_median([3,8,15,18,20], [4,10,12,16,18], 5) == 10\nassert     get_median([3,8,15,18,20], [4,10,12,16,18], 7) == 15\nassert     get_median([3,8,15,18,20], [4,10,12,16,18], 3) == 11\nassert     get_median([3,8,15,18,20], [4,10,12,16,18], 1) == 5\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     nth_nums([4,5,6,7], 2) == [16, 25, 36, 49]\nassert     nth_nums([0,1,2,3], 3) == [8, 27, 64, 81]\nassert     nth_nums([1,2,3], 3) == [3, 9, 27, 81]\nassert     nth_nums([1,2,3,4,5,6], 2) == [7, 14, 21, 28, 35, 48]\nassert     nth_nums([1,2,3], 2) == [2, 4, 6, 8]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     nth_nums([1,2,3,4],2) == [4,9,16,25]\nassert     nth_nums([1,2,3,4,5,6],3) == [27,81,135,246,405,630]\nassert     nth_nums([],0) == []\nassert     nth_nums([1,2],0) == [1,2]\nassert     nth_nums([],-1) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     nth_nums([1,2,3,4],2) == [1,4,9,16]\nassert     nth_nums([1,2,3,4],5) == [1,8,27,64,125]\nassert     nth_nums([1,2,3,4],0) == [1,1,1,1,1]\nassert     nth_nums([1,2,3,4],-1) == [1,2,3,4]\nassert     nth_nums([1,2,3,4],-2) == [1,4,9,16]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     nth_nums([1,2,3],2) == [1,4,9]\nassert     nth_nums([1,2,3],3) == [1,8,27]\nassert     nth_nums([1,2,3],0) == [1]\nassert     nth_nums([1,2,3],1) == [1,2,3]\nassert     nth_nums([1,2,3],10) == [1,8,27]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     nth_nums([1,2,3,4],0) == [1,1,1,1]\nassert     nth_nums([1,2,3,4],1) == [2,4,9,16]\nassert     nth_nums([1,2,3,4],2) == [3,8,27,64]\nassert     nth_nums([1,2,3,4],3) == [4,16,64,256]\nassert     nth_nums([1,2,3,4],4) == [5,40,193,784]\n"
    },
    {
        "number": 623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     nth_nums([3,4,5],2) == [9, 16, 25]\nassert     nth_nums([1,2,3,4,5],3) == [9, 16, 25, 36, 49]\nassert     nth_nums([0,1],10) == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\nassert     nth_nums([-3,0,2,1,4,5],10) == [-1234, 0, 1024, 9, 512, 25, 6, 1, 4, 5]\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_upper('python') == True\nassert is_upper('python') == True\nassert is_upper('Python') == False\nassert is_upper('Python') == False\nassert is_upper('PYTHON') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_upper('casa') == True\nassert     is_upper('Casa') == True\nassert     is_upper('CasA') == True\nassert     is_upper('CAsa') == False\nassert     is_upper('Casa!') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_upper('test') == True\nassert     is_upper('TEST') == True\nassert     is_upper('Test') == True\nassert     is_upper('test1') == False\nassert     is_upper('test1_') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_upper('a') == 'A'\nassert     is_upper('A') == 'A'\nassert     is_upper('AAA') == 'AAA'\nassert     is_upper('aB') == 'AB'\nassert     is_upper('AbC') == 'AbC'\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_upper('hello') == False\nassert     is_upper('HELLO') == True\nassert     is_upper('hello_world') == False\nassert     is_upper('Hello World') == True\nassert     is_upper('HELLO World') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_upper(\"welcome to the jungle\") == \"WELCOME TO THE JUNGLE\"\nassert     is_upper(\"WELCOME TO THE JUNGLE\") == \"WELCOME TO THE JUNGLE\"\nassert     is_upper(\"welcome to the jungle!\") == \"WELCOME TO THE JUNGLE!\"\nassert     is_upper(\"WELCOME TO THE JUNGLE!\") == \"WELCOME TO THE JUNGLE!\"\n\ndef test_is_upper():\n    "
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_upper('myString') == True,    'myString should be uppercase'\nassert     is_upper('MYSTRING') == True,    'MYSTRING should be uppercase'\nassert     is_upper('MyString') == False, 'MyString should be lowercase'\nassert     is_upper('my_string') == False,'my_string should be lowercase'\nassert     is_upper('myString') == False,'myString should be uppercase'\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_upper(\"\") == True\nassert     is_upper(\"a\") == True\nassert     is_upper(\"A\") == True\nassert     is_upper(\"\u00a3\") == True\nassert     is_upper(\"\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\") == True\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     'MATCH' == is_upper('match')\nassert     'I' == is_upper('i')\nassert     'dont match' == is_upper('dont match')\nassert     'I' == is_upper('i')\nassert     'MATCH' == is_upper('MATCH')\n"
    },
    {
        "number": 624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_upper('TEST') == True\nassert     is_upper('test') == False\nassert     is_upper('TEST\\n') == True\nassert     is_upper('Test\\n') == False\nassert     is_upper('Test\\r\\n') == True\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3]) == [2,3,1], 'Error in swap_List'\nassert     swap_List([1,2,3,4,5,6]) == [2,3,4,5,6,1], 'Error in swap_List'\nassert     swap_List([]) == [], 'Error in swap_List'\nassert     swap_List([1,2]) == [2,1], 'Error in swap_List'\nassert     swap_List([1]) == [1], 'Error in swap_List'\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,4,3,2,1], 'Not the correct swap_List'\nassert     swap_List([5,2,4,7,8,7,9]) == [9,7,7,8,4,2,5], 'Not the correct swap_List'\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     swap_List([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\nassert     swap_List([7, 9, 3, 4, 5]) == [9, 3, 4, 5, 7]\nassert     swap_List([]) == []\nassert     swap_List([1, 2]) == [2, 1]\nassert     swap_List([0, 1]) == [1, 0]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     swap_List([2, 3, 4, 5, 1]) == [1, 5, 2, 4, 3], \"Failed to swap the first and last elements in the list\"\nassert     swap_List([2, 3, 4]) == [2, 3, 4], \"Failed to swap the first and last elements in the list\"\nassert     swap_List([2, 3]) == [2, 3], \"Failed to swap the first and last elements in the list\"\nassert     swap_List([]) == [], \"Failed to swap the first and last elements in the list\"\n\ndef get_Middle_element(numList):\n    '''\n    Write a python function to return the middle element of a list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     swap_List([1,2,3,4,5])     == [5,1,2,4,3],     \"Failed. Result is not correct\"\nassert     swap_List([1,2,3,4,5])     == [5,1,2,4,3],     \"Failed. Result is not correct\"\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     ([1, 2, 3] == swap_List([3, 1, 2]))\nassert     ([2, 3, 1] == swap_List([1, 3, 2]))\nassert     ([3, 1, 2] == swap_List([2, 1, 3]))\nassert     ([3, 1, 2] == swap_List([2, 3, 1]))"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     swap_List([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     swap_List([9, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == [8, 9, 0, 1, 2, 3, 4, 5, 6, 7]\nassert     swap_List([9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 9]\nassert     swap_List([9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 9, 0]\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     swap_List([1,2,3,4,5,6,7]) == [7,6,5,4,3,2,1], 'Failed'\nassert     swap_List([1,2,3]) == [3,2,1], 'Failed'\nassert     swap_List([]) == [], 'Failed'\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     swap_List([0,1,2,3,4]) == [1,2,4,0,3], \"Failed\"\nassert     swap_List([\"P\",\"R\",\"A\",\"G\",\"O\",\"S\"]) == [\"S\",\"O\",\"G\",\"P\",\"R\",\"A\"], \"Failed\"\nassert     swap_List([0,1,2,3]) == [3,2,1,0], \"Failed\"\nassert     swap_List([]) == [], \"Failed\"\nassert     swap_List([-5,-4,-3,-2,-1,0]) == [-1,-2,-3,-4,-5,0], \"Failed\"\n"
    },
    {
        "number": 625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [2, 3, 4, 5, 1] == swap_List([1, 2, 3, 4, 5])\nassert     [3, 4, 5, 1, 2] == swap_List([1, 5, 2, 4, 3])\nassert     [1, 2, 3, 4, 5] == swap_List([5, 1, 2, 3, 4])\nassert     [5, 4, 3, 2, 1] == swap_List([5, 1, 4, 3, 2])"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(2.5) == 3.141593 * 1.5\nassert     triangle_area(4) == 3.141593 * 1.5\nassert     triangle_area(6) == 3.141593 * 1.5\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(3)     ==      3.5\nassert     triangle_area(5)     ==      13.5\nassert     triangle_area(7)     ==      47.5\nassert     triangle_area(10)     ==      85\nassert     triangle_area(12)     ==      97.5\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(0.5) == 0.5235987755982988\nassert     triangle_area(1) == 0.25\nassert     triangle_area(2) == 0.0816496580927726\nassert     triangle_area(3) == 0.005493852738667905\n\ndef    weighted_mean(numbers, weights) :  \n    '''\n    Write a python function to compute the weighted mean of numbers. \n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(0) == 0\nassert     triangle_area(1) == 0.5\nassert     triangle_area(2) == 1\nassert     triangle_area(3) == 0.5\nassert     triangle_area(4) == 1\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(2) == 0.7853981633974483\nassert     triangle_area(3) == 1.10714871779409\nassert     triangle_area(4) == 1.4581298083473\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(2) == 1.0\nassert     triangle_area(3) == 0.5\nassert     triangle_area(10) == 1.0\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(2)         == 3.141592\nassert     triangle_area(1)         == 1.0\nassert     triangle_area(0)         == 0\nassert     triangle_area(2.5)     == 0.5235987755982988\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(0) == 0\nassert     triangle_area(0.1) == 0.0722\nassert     triangle_area(1) == 0.57722\nassert     triangle_area(10) == 11.64384\nassert     triangle_area(30) == 35.79796\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triangle_area(1) == 0.5\nassert     triangle_area(2) == 1\nassert     triangle_area(3) == 1.25\nassert     triangle_area(0.5) == 1.25\n\ndef small_angle_triangle(a,b,c) :\n    '''\n    Write a python function to find the angle of the triangle with sides a,b,c that have a small angle.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     ( triangle_area(10) == 78.5 )\nassert     ( triangle_area(5) == 34.5 )\nassert     ( triangle_area(2) == 12.5 )\nassert     ( triangle_area(0) == 0 )"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_First_Missing([1,2,3,5,6,7,9,10]) == 4\nassert     find_First_Missing([1,2,3,5,6,7,9,10,11]) == 8\nassert     find_First_Missing([1,2,3,5,6,7,9,10,11,14]) == 13\nassert     find_First_Missing([1,2,3,5,6,7,9,10,11,14,18]) == 19\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],0,10) == 11\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],1,10) == 0\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,10) == 11\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,10) == 11\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],4,10) == 11\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_First_Missing([1,2,3,5,6,7,8,9]) == 4\nassert     find_First_Missing([1,2,3,5,6,7,8,9,10]) == 4\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10]) == 4\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9]) == 4\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11]) == 4\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_First_Missing([1,2,3,4,6,7,8,9,10]) == 5\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10]) == 5\nassert     find_First_Missing([10,11,12,13,14,15,16,17,18,19,20]) == 5\nassert     find_First_Missing([10,11,12,13,14,15,16,17,18,19,20,21]) == 5\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_First_Missing([1,2,3,5,6,7,8,9,10]) == 4\nassert     find_First_Missing([1,2,3,4,6,7,8,9,10]) == 5\nassert     find_First_Missing([100,110,120]) == 101\nassert     find_First_Missing([100,110,120,150]) == 151\nassert     find_First_Missing([100,110,120,150,500]) == 501\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_First_Missing([0, 1, 3, 50, 100]) == 2\nassert     find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert     find_First_Missing([0, 1]) == 2\nassert     find_First_Missing([1, 1]) == 2\nassert     find_First_Missing([]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_First_Missing([1,2,3,4,5]) == 6\nassert find_First_Missing([1,2,3,6,9,11]) == 4\nassert find_First_Missing([2,4,6,8,10]) == 1\nassert find_First_Missing([1,3,5,7,9,11]) == 10\nassert find_First_Missing([1,2,3,4,6,7,8,9,10,11]) == 5\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_First_Missing([2,3,1,8,2,3,5,1]) == 4\nassert     find_First_Missing([2,3,1,8,2,3,5,10]) == 4\nassert     find_First_Missing([2,3,1,8,2,3,5,10,99]) == 4\nassert     find_First_Missing([2,3,1,8,2,3,5,10,99,100]) == 1\nassert     find_First_Missing([1,2,3]) == 4\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_First_Missing([4,5,7,1,2,3,6]) == 1\nassert     find_First_Missing([1,2,3,4,5,6,7]) == 1\nassert     find_First_Missing([2,3,4,5,6,7,8]) == 1\nassert     find_First_Missing([1,2,3,4,5,6,7,8]) == 1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == 1\nassert     find_First_Missing([2,3,4,5,6,7,8,9]) == 1\nassert     find_First_Missing([0,1,2,3,4,5,6,7,9]) == 8\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9]) == 8\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10]) == 9\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('hello world!    ') == 'hello%20world%21'\nassert     replace_spaces('hello world!    ') == 'hello%20world%21'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_spaces('We are happy!') == 'We%20are%20happy!'\nassert     replace_spaces('We are  happy!') == 'We%20are%20happy!'\nassert     replace_spaces('We are happy!') == 'We%20are%20happy!'\nassert     replace_spaces('We are happy!') == 'We%20are%20happy!'\nassert     replace_spaces('We are happy!') == 'We%20are%20happy!'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef replace_spaces_v2(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello        world') == 'hello%20world'\nassert     replace_spaces('hello   world') == 'hello%20world'\nassert     replace_spaces('hello      world') == 'hello%20world'\nassert     replace_spaces('hello   world ') == 'hello%20world%20'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_spaces('this is a test') == 'this%20is%20a%20test'\nassert     replace_spaces('this is a test') == 'this%20is%20a%20test'\nassert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('') == ''\nassert     replace_spaces('   ') == '%20%20'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'\nassert     replace_spaces('  ') == '%20'\nassert     replace_spaces(' ') == '%20'\nassert     replace_spaces('  Hello World! ') == '%20Hello%20World%20%21'\nassert     replace_spaces('Hello') == 'Hello'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"My name is John\") == \"My%20name%20is%20John\"\nassert     replace_spaces(\"a\") == \"a\"\nassert     replace_spaces(\"\") == \"\"\n\ndef replace_spaces2(string):\n    '''\n    Write a function to replace the spaces in a string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'\nassert     replace_spaces('Hello%20World') == 'Hello%20%20World'\nassert     replace_spaces('%20%20%20%20%20%20%20') == '%20%20%20%20%20%20%20'\nassert     replace_spaces('My') == 'My'"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'\nassert     replace_spaces('  The  cow  is  big   ') == 'The%20cow%20is%20big%20'\nassert     replace_spaces('a b c') == 'a%20b%20c'\nassert     replace_spaces('a') == 'a'\nassert     replace_spaces('123') == '123'\n"
    },
    {
        "number": 628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('                   John Smith') == '%20John%20Smith'\nassert     replace_spaces('               ') == ''"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         Split([1,2,3,4,5,6])     == [2,4,6],     \"The output is not correct.\"\nassert         Split([2,3,1,6,8])     == [2,6],     \"The output is not correct.\"\nassert         Split([2,3,1,6,8,10])     == [],         \"The output is not correct.\"\nassert         Split([2,3,1,6,8,9])     == [2,4,6,8],     \"The output is not correct.\"\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef Square(number):\n    '''\n    Write a python function that takes an integer number and returns its square\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\nassert     Split([1,3,5,7,9]) == [2,4,6,8]\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8]\nassert     Split([1,3,5,7,9,11,13]) == [2,4,6,8]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [2,4,6,8]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4]\nassert     Split([1, 3, 5, 7]) == []\nassert     Split([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert     Split([]) == []\n\ndef Subsets(list):\n    '''\n    Write a python function to find all the subsets of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4])==[2,4]\nassert     Split([1,2,3,4,5])==[2,4,6]\nassert     Split([-5,-10,15,20])==[-10,20]\n\ndef Sum(list):\n    '''\n    Write a python function to find the sum of the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == [2,4,6,8]\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]\nassert     Split([1,2,3,4,5,6,7,8,9,10,12,13]) == [2,4,6,8,10,12,14]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [2,4,6,8,10,12,14]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [2,4,6,8,10,12,14]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\nassert     Split([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ==     [2, 6, 10, 14]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ==     [2, 6, 10, 14]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ==     [2, 6, 10, 14]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Split([3,4,5,6]) == [4, 6]\nassert     Split([1,2,3,4,5,6,7]) == [2, 4, 6]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [2, 4, 6, 8, 10, 12]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [2, 4, 6, 8, 10, 12, 14]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n"
    },
    {
        "number": 629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Split([2,3,4,5,6,7,8]) == [2,4,6,8]\nassert     Split([2,3,4,5,7,8]) == [2,4,6,8]\nassert     Split([2,3,4,5,6]) == [2,4,6]\nassert     Split([2,3,4,5]) == [2,4]\nassert     Split([2,3,4]) == [2,4]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     adjac((1,2,3)) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\nassert     adjac((1,2,3), sub = [(1,2,3)]) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\nassert     adjac((1,2,3), sub = [(1,2,3), (1,2,4)]) == [(1, 2, 3), (1, 2, 4)]\nassert     adjac((1,2,3), sub = [(1,2,3), (1,2,4), (1,3,4)]) == [(1, 2, 3), (1, 2, 4), (1, 3, 4)]\nassert     adjac((1,2,3), sub = [(1,2,3), (1,2,4), (1,3,4), (2,3,4)]) == [(1, 2, 3), (1, 2, 4), (1, 3, 4)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         adjac((1, 1)) == [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert         adjac((2, 2)) == [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 0), (0, 1), (1, -1), (1, 0), (1, 1)]\nassert         adjac((3, 3)) == [(-2, -2), (-2, -1), (-2, 0), (-2, 1), (-2, 2), (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2), (0, -2), (0, -1), (0, 0), (0, 1), (0, 2), (1, -2), (1, -1), (1, 0), (1, 1), (1, 2), (2, -2), (2, -1), (2, 0), (2, 1), (2, 2)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     adjac((0, 0), [(-1, -1), (0, 1), (1, 0), (1, -1)]) == [(1, 1), (0, 0), (0, 1), (1, 0)]\nassert     adjac((0, 0), [(-1, -1), (0, 1), (1, 0), (1, -1)]) == [(1, 1), (0, 0), (0, 1), (1, 0)]\nassert     adjac((0, 0), [(-1, -1), (0, 1), (1, 0), (1, 1)]) == [(1, 1), (0, 0), (0, 1), (1, 0)]\nassert     adjac((0, 0), [(-1, -1), (0, 1), (1, 0), (1, 1)]) == [(1, 1), (0, 0), (0, 1), (1, 0)]"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert adjac(('a', 'b', 'c', 'd', 'e')) == [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'a')]\nassert adjac(('a', 'b', 'c', 'd', 'e')) == [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'a')]\nassert adjac(('a', 'b', 'c', 'd', 'e')) == [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'a')]\nassert adjac(('a', 'b', 'c', 'd', 'e')) == [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'a')]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (adjac((1,2)) == [(1,2),(2,1)]\n       and adjac((1,2), []) == [(1,2), (2,1)]\n       and adjac((1,2), ['a', 'b']) == [(1,2), (2,1)]\n       and adjac((1,2), ['a']) == [(1,2), (2,1)]\n       and adjac((1,2), ['a', 'b', 'c', 'd']) == [(1,2), (2,1)]\n       and adjac((1,2), ['b', 'c', 'd']) == [(1,2), (2,1)]\n       and adjac((1,2), ['b', 'c']) == [(1,2), (2,1)]\n       and adjac((1,2), ['b', 'c', 'd', 'e']) == [(1,2), (2,1)]\n       and adjac((1,2), ['d', 'e']) == [(1,2), (2,1)]\n       and adjac((1,2), ['d']) == [(1,2), (2,1)]\n       and adjac((1,2), ['d', 'e', 'f', 'g', 'h']) == [(1,2), (2,1)]\n       and adjac((1,2), ['e', 'f', 'g', 'h']) == [(1,2), (2,1)]\n       and adjac((1,2), ['e', 'f', 'g']) == [(1,2), (2,1)]\n       and adjac((1,2), ['f', 'g']) == [(1,2), (2,1)]\n       and adjac((1,2), ['f', 'g', 'h']) == [(1,2), (2,1)]\n       and adjac((1,2), ['g', 'h']) == [(1,2), (2,1)]\n       and adjac((1,2), ['g', 'h', 'i', 'j', 'k', 'l']) == [(1,2), (2,1)]\n       and adjac((1,2), ['h', 'i', 'j', 'k', 'l']) == [(1,2), (2,1)]\n       and adjac((1,2), ['h', 'i', 'j', 'k']) == [(1,2), (2,1)]\n       and adjac((1,2), ['h', 'i', 'j']) == [(1,2), (2,1)]\n       and adjac((1,2), ['h', 'i', 'j', 'k', 'l','m']) == [(1,2), (2,1)]\n       and adjac((1,2), ['i', 'j', 'k', 'l','m']) == [(1,2), (2,1)]\n       and adjac((1,2), ['i', 'j', 'k', 'l']) == [(1,2), (2,1)]\n       and adjac((1,2), ['j', 'k', 'l']) == [(1,2), (2,1)]\n       and adjac((1,2), ['j', 'k', 'l','m']) == [(1,2), (2,1)]\n       and adjac((1,2), ['k', 'l','m']) == [(1,2), (2,1)]\n       and adjac((1,2), ['k', 'l']) == [(1,2), (2,1)]\n       and adjac((1,2), ['l']) == [(1,2), (2,1)]\n       and adjac((1,2), ['l','m']) == [(1,2), (2,1)]\n       and adjac((1,2), ['m']) == [(1,2), (2,1)]\n       and adjac((1,2), ['m', 'n']) == [(1,2), (2,1)]\n       and adjac((1,2), ['n']) == [(1,2), (2,1)]\n       and adjac((1,2), ['n', 'o']) == [(1,2), (2,1)]\n       and adjac((1,2), ['o']) == [(1,2), (2,1)]\n       and adjac((1,2), ['o', 'p']) == [(1,2), (2,1)]\n       and adjac((1,2), ['p']) == [(1,2), (2,1)]\n       and adjac((1,2), ['p', 'q']) == [(1,2), (2,1)]\n       and adjac((1,2), ['q']) == [(1,2), (2,1)]\n       and adjac((1,2), ['q', 'r']) == [(1,2), (2,1)]\n       and adjac((1,2), ['r']) == [(1,2), (2,1)]\n       and adjac((1,2), ['r','s']) == [(1,2), (2,1)]\n       and adjac((1,2), ['s']) == [(1,2), (2,1)]\n       and adjac((1,2), ['s', 't']) == [(1,2), (2,1)]\n       and adjac((1,2), ['t']) == [(1,2), (2,1)]\n       and adjac((1,2), ['t', 'u']) == [(1,2), (2,1)]\n       and adjac((1,2), ['u']) == [(1,2), (2,1)]\n       and adjac((1,2), ['u', 'v']) == [(1,2), (2,1)]\n       and adjac((1,2), ['v']) == [(1,2), (2,1)]\n       and adjac((1,2), ['v', 'w']) == [(1,2), (2,1)]\n       and adjac((1,2), ['w']) == [(1,2), (2,1)]\n       and adjac((1,2), ['w', 'x']) == [(1,2), (2,1)]\n       and adjac((1,2), ['x']) == [(1,2), (2,1)]\n       and adjac((1,2), ['x', 'y']) == [(1,2), (2,1)]\n       and adjac((1,2), ['y']) == [(1,2), (2,1)]\n       and adjac((1,2), ['y', 'z']) == [(1,2), (2,1)]\n       and adjac((1,2), ['z']) == [(1,2), (2,1)]\n       and adjac((1,2), ['z', '1']) == [(1,2), (2,1)]\n       and adjac((1,2), ['1']) == [(1,2), (2,1)]\n       and adjac((1,2), ['1', '2']) == [(1,2), (2,1)]\n       and adjac((1,2), ['2']) == [(1,2), (2,1)]\n       and adjac((1,2), ['2', '3']) == [(1,2), (2,1)]\n       and adjac((1,2), ['3']) == [(1,2), (2,1)]\n       and adjac((1,2), ['3', '4']) == [(1,2), (2,1)]\n       and adjac((1,2), ['4']) == [(1,2), (2,1)]\n       and adjac((1,2), ['4', '5']) == [(1,2), (2,1)]\n       and adjac((1,2), ['5']) == [(1,2), (2,1)]\n       and adjac((1,2), ['5', '6']) == [(1,2), (2,1)]\n       and adjac((1,2), ['6']) == [(1,2), (2,1)]\n      "
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     adjac([1, 2, 3]) == [(1, 2), (1, 3), (2, 3)]\nassert     adjac([1, 2, 3], sub = [(0, 1), (0, 2), (1, 2)]) == [(1, 2), (1, 3)]\nassert     adjac([1, 2, 3], sub = [(0, 1), (0, 2), (1, 2), (0, 3)]) == [(1, 2), (1, 3), (2, 3)]\nassert     adjac([1, 2, 3], sub = [(0, 1), (0, 2), (1, 2), (0, 3), (1, 3), (2, 3)]) == [(1, 2), (1, 3), (2, 3)]\nassert     adjac([1, 2, 3], sub = [(0, 1), (0, 2), (1, 2), (0, 3), (1, 3), (2, 3), (0, 4)]) == [(1, 2), (1, 3), (2, 3)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     list(adjac((0, 1))) ==     [(0, 0), (0, 1), (1, 0)]\nassert     list(adjac((0, 0))) ==     [(0, 0)]\nassert     list(adjac((0, 1), [(0, 1)])) ==     [(0, 0), (1, 0)]\nassert     list(adjac((0, 1), [])) ==     [(0, 0), (0, 1), (1, 0)]\nassert     list(adjac((0, 0), [(0, 1)])) ==     [(0, 1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (0,0) == adjac((0,0))\nassert     [(0,1), (1,0)] == adjac((0,0))\nassert     [(0,1), (1,0), (1,1), (0,2)] == adjac((0,0), 'interior')\nassert     [(0,1), (1,0), (1,1), (0,2)] == adjac((0,0), 'corner')\nassert     [(0,1), (1,0), (1,1), (0,2)] == adjac((0,0), 'edge')\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"This is a test\") == \"this_is_a_test\"\nassert     replace_spaces(\"we are not happy\") == \"we_are_not_happy\"\nassert     replace_spaces(\"we are not happy \") == \"we_are_not_happy_\"\n\ndef r_string(text):\n    '''\n    Given a string with any whitespace characters (\u2018\\t\u2019, \u2018\\n\u2019, \u2018\\r\u2019, \u2018\\f\u2019, \u2018 \u2018),\n    write a function to replace the whitespace characters with an underscore and vice versa in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_spaces('this is a test') == 'this_is_a_test'\nassert     replace_spaces('this is a test') == 'this_is_a_test'\nassert     replace_spaces('this is a test') == 'this_is_a_test'\nassert     replace_spaces('   ') == '_'\nassert     replace_spaces('   ') == '_'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_spaces('hello world') == 'hello_world'\nassert     replace_spaces('hello_world') == 'hello_world'\nassert     replace_spaces('hello_world') == 'hello_world'\nassert     replace_spaces('hello world') == 'hello_world'\nassert     replace_spaces('hello world') == 'hello_world'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_spaces(\"This is a test\") == \"This_is_a_test\"\nassert     replace_spaces(\"this is a test\") == \"this_is_a_test\"\nassert     replace_spaces(\"This is a test\") == \"This_is_a_test\"\nassert     replace_spaces(\"this is a test\") == \"this_is_a_test\"\nassert     replace_spaces(\"This is a test \") == \"This_is_a_test\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_spaces(\"We Are The Champions\") == \"we_are_the_champions\"\nassert     replace_spaces(\"We Are The Champions\") == \"we_are_the_champions\"\nassert     replace_spaces(\"we_are_the_champions\") == \"We_Are_The_Champions\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_spaces('hello world') == 'hello_world'\nassert     replace_spaces('Hello World') == 'Hello_World'\nassert     replace_spaces('H e l l o') == 'H_E_L_L_O'\nassert     replace_spaces('h e l l o') == 'h_e_l_l_o'\nassert     replace_spaces('H e l l o ') == 'H_E_L_L_O_'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"I like to code\") == \"i_like_to_code\"\nassert     replace_spaces(\"My name is Jackie\") == \"my_name_is_jackie\"\nassert     replace_spaces(\"Jackie is my name\") == \"jackie_is_my_name\"\nassert     replace_spaces(\"My name is Jackie\") == \"my_name_is_jackie\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"this is a sample string\") == \"this_is_a_sample_string\"\nassert     replace_spaces(\"    this is a sample string\") == \"this_is_a_sample_string\"\nassert     replace_spaces(\"this is a sample string\") == \"this_is_a_sample_string\"\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_spaces('hello world') == 'hello_world'\nassert     replace_spaces('hello') == 'hello'\nassert     replace_spaces('a') == 'a'\nassert     replace_spaces('1') == '1'\nassert     replace_spaces(' ') == '_'\n"
    },
    {
        "number": 631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_spaces('this is a test') == 'this_is_a_test'\nassert     replace_spaces('a_is_a_test') == 'a_is_a_test'\nassert     replace_spaces('This is a test') == 'This_is_a_test'\nassert     replace_spaces('This is a test') == 'This_is_a_test'\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]\nassert     move_zero([0, 0, 1, 2, 0, 3, 0, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]\nassert     move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]\nassert     move_zero([0, 0, 0, 1, 2, 0, 3, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]\nassert     move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     move_zero([1,2,0,0,3,4]) == [1,2,3,4,0,0]\nassert     move_zero([0,1,2,0,3,4]) == [1,2,3,4,0,0]\nassert     move_zero([1,2,0,0,3,4,0]) == [1,2,3,4,0,0,0]\nassert     move_zero([0,0,0,0,3,4,0]) == [3,4,0,0,0,0,0]\nassert     move_zero([0,0,1,2,0,3,4]) == [1,2,3,4,0,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     move_zero([1,2,3,4,0,0,0,5,6,0,0,7,0]) == [1,2,3,4,5,6,7,0,0,0,0,0,0,0,0,0]\nassert     move_zero([0,0,2,1,3,0,0,4,0,5,0,0]) == [2,1,3,4,5,0,0,0,0,0,0,0,0,0,0]\nassert     move_zero([2,2,2,1,2,0,1,2,2,2,1,2,0,1]) == [2,2,2,1,2,2,2,1,2,2,2,2,2,2,1,2,1]\nassert     move_zero([]) == []\nassert     move_zero([0]) == [0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [3,4,5,6,0,1,2,7]    == move_zero([3,4,5,6,7,0,1,2])\nassert     [0,1,2,3,4,5,6,7]    == move_zero([7,0,1,2,3,4,5,6])\nassert     [1,2,3,4,5,6,0,7]    == move_zero([7,0,1,2,3,4,5,6])\nassert     [2,3,4,5,6,7,0,1]    == move_zero([1,2,3,4,5,6,7,0])\nassert     [3,4,5,6,7,0,1,2]    == move_zero([2,3,4,5,6,7,0,1])\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     move_zero([0,1,0,3,12]) == [1,3,12,0,0]\nassert     move_zero([1,3,0,12,0,0]) == [1,3,12,0,0,0]\nassert     move_zero([]) == []\nassert     move_zero([1]) == [1]\nassert     move_zero([1,2,3,4,5,6,0,7,8,9]) == [1,2,3,4,5,6,7,8,9,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     move_zero([1,2,0,3,4,0]) == [1,2,3,4,0,0]\nassert     move_zero([2,0,0,3,4,0]) == [2,3,4,0,0,0]\nassert     move_zero([2,0,0,3,0,0]) == [2,3,0,0,0,0]\nassert     move_zero([2,0,0,3,0]) == [2,3,0,0,0]\nassert     move_zero([2,0,0,3]) == [2,3,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef find_second_maximum_element(num_list):\n    '''\n    Given a sorted list of numbers, write a python function that returns the\n    second largest element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [2, 3, 4, 0, 0, 0, 1, 0] == move_zero([0, 1, 2, 3, 4, 0, 0, 0, 0])\nassert     [2, 3, 4, 1, 0, 0, 0, 0, 0] == move_zero([1, 2, 3, 4, 0, 0, 0, 0, 0])\nassert     [2, 3, 4, 1, 0, 0, 0, 0, 0] == move_zero([1, 2, 3, 4, 0, 0, 0, 0, 0])\nassert     [2, 3, 4, 1, 0, 0, 0, 0, 0] == move_zero([1, 2, 3, 4, 0, 0, 0, 0, 0])\nassert     [2, 3, 4, 1, 0, 0, 0, 0, 0] == move_zero([1, 2, 3, 4, 0, 0, 0, 0, 0])\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [3,1,0,5,6,0,7,8,0,9] == move_zero([3,1,0,5,6,0,7,8,0,9])\nassert     [0,0,0,0,0] == move_zero([0,0,0,0])\nassert     [1,2,3,4,5] == move_zero([1,2,3,4,5])\nassert     [0,0,0,0,0] == move_zero([0,0,0])\nassert     [0,0,0,0,0] == move_zero([0])\n"
    },
    {
        "number": 632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_zero([1, 0, 2, 3, 0, 4, 5, 0]) == [1, 2, 3, 4, 5, 0, 0, 0]\nassert     move_zero([1, 0, 2, 3, 0, 4, 5, 0]) == [1, 2, 3, 4, 5, 0, 0, 0]\nassert     move_zero([0, 1, 2, 3, 4, 0, 5, 0]) == [1, 2, 3, 4, 0, 5, 0, 0]\nassert     move_zero([0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0]\n\ndef rotate_array(num_list, shift_num):\n    '''\n    Write a python function to rotate an array by shift_num.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pair_xor_Sum( [1,2,3], 3) == 6\nassert     pair_xor_Sum( [1,2,3], 5) == 2\nassert     pair_xor_Sum( [1,2,3,4,5], 10) == 9\n\n\ndef pair_xor_Product(arr,n) :\n    '''\n    Write a python function to find the product of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([1,1,2,3,4],5) == 1\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9],10) == 1\nassert     pair_xor_Sum([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],10) == 1\nassert     pair_xor_Sum([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],11) == 2\nassert     pair_xor_Sum([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],12) == 3\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (pair_xor_Sum([1,2,3,4],4) == (2,7)) \nassert     (pair_xor_Sum([1,2,3,4,5],5) == (3,4)) \nassert     (pair_xor_Sum([],0) == (0,0)) \nassert     (pair_xor_Sum([5,6],0) == (0,0)) \nassert     (pair_xor_Sum([1,2,3,4,5,6],6) == (0,0)) \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pair_xor_Sum([1, 2, 3, 4, 5], 5) == 0\nassert     pair_xor_Sum([1, 2, 3, 4, 5], 7) == 7\nassert     pair_xor_Sum([1, 2, 3, 4, 5, 6], 7) == 6\nassert     pair_xor_Sum([1, 2, 3, 4, 5, 6], 10) == 4\nassert     pair_xor_Sum([1, 2, 3, 4, 5, 6, 7, 8], 10) == 4\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (pair_xor_Sum([1,2,3,4,5],5) == 6)\nassert     (pair_xor_Sum([1,2,3,4,5],4) == 6)\nassert     (pair_xor_Sum([1,2,3,4,5],3) == 3)\nassert     (pair_xor_Sum([1,2,3,4,5],2) == 4)\nassert     (pair_xor_Sum([1,2,3,4,5],1) == 5)\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 1\nassert     pair_xor_Sum([1,2,3,4,5],5) == 0\nassert     pair_xor_Sum([1,2,3,4,5,6],6) == 1\nassert     pair_xor_Sum([2,2,2,3,3,4],6) == 4\nassert     pair_xor_Sum([10,11,12,13,14,15],15) == 2\n"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pair_xor_Sum([1,2,3],3) == 5\nassert     pair_xor_Sum([1,2,3,4],4) == 0\nassert     pair_xor_Sum([1,2,3],4) == 4\nassert     pair_xor_Sum([1,2,3,4],5) == 0"
    },
    {
        "number": 633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],100)    == 200\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],11) == 31\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],100)    == 200\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],33)    == 41\nassert     pair_xor_Sum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],100)    == 200\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == heap_sort([9, 7, 4, 3, 2, 1, 8, 6, 5])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == heap_sort([9, 1, 5, 8, 6, 7, 4, 3, 2])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == heap_sort([9, 1, 7, 8, 5, 6, 4, 3, 2])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == heap_sort([9, 1, 3, 8, 5, 6, 7, 4, 2])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == heap_sort([9, 1, 3, 8, 5, 6, 4, 7, 2])\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef heap_sort_1(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [6,5,4,3,2,1] == heap_sort([1,2,3,4,5,6])\nassert     [6,3,5,4,2,1] == heap_sort([1,5,4,3,2,6])\nassert     [6,5,4,2,1,3] == heap_sort([3,1,2,4,6,5])\nassert     [5,4,3,2,6,1] == heap_sort([1,6,2,3,5,4])\n\ndef heapify(unsorted, index, heap_size):\n    '''\n    Write a function to convert a list into a max-heap.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list(reversed(sorted(range(10)))) == list(reversed(heap_sort(range(10))))\nassert     list(reversed(sorted(range(5)))) == list(reversed(heap_sort(range(5))))\nassert     list(reversed(sorted(range(5)))) == list(reversed(heap_sort(range(5))))\nassert     list(reversed(sorted(range(5)))) == list(reversed(heap_sort(range(5))))\nassert     list(reversed(sorted(range(5)))) == list(reversed(heap_sort(range(5))))\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (heap_sort([4,1,3,2,16,9,10,14,8,7])    ==    [1, 2, 3, 4, 8, 7, 9, 10, 14, 16])\nassert     (heap_sort([-1,-2,-3])    ==    [-3,-2,-1])\nassert     (heap_sort([1,3,2,4,5])    ==    [1, 2, 3, 4, 5])\nassert     (heap_sort(['bb', 'aa', 'c', 'd'])    ==    ['aa', 'bb', 'c', 'd'])\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hq.nsmallest(1, [9, 4, 1, 3, 5, 7, 2, 6]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert     hq.nlargest(1, [9, 4, 1, 3, 5, 7, 2, 6]) == [9, 8, 7, 6, 5, 4, 3, 2]\nassert     hq.nlargest(3, [9, 4, 1, 3, 5, 7, 2, 6]) == [9, 8, 7, 6, 5, 4, 3]\nassert     hq.nlargest(2, [9, 4, 1, 3, 5, 7, 2, 6]) == [9, 8]\nassert     hq.nlargest(1, [9, 4, 1, 3, 5, 7, 2, 6]) == [9]\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [x for x in heap_sort([4,1,3,2,16,9,10,14,8,7])]    == [1,2,3,4,7,8,9,10,14,16]\nassert     [x for x in heap_sort([10,9,8,7,6,5,4,3,2,1])]    == [1,2,3,4,5,6,7,8,9,10]\nassert     [x for x in heap_sort([8,7,6,5,4,3,2,1,10,9])]    == [1,2,3,4,5,6,7,8,9,10]\nassert     [x for x in heap_sort([10,9,8,7,6,5,4,3,2,1])]    == [1,2,3,4,5,6,7,8,9,10]\n\ndef heapsort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1,3,5,7,9,2,4,6,8] == heap_sort([9,1,4,6,8,2,7,3,5])\nassert     [5,1,4,6,8,2,7,3,9] == heap_sort([3,2,1,5,9,7,6,8,4])\nassert     [9,8,7,6,5,4,3,2,1] == heap_sort([1,3,2,4,5,7,6,9,8])\nassert     [8,7,6,5,4,3,2,1,9] == heap_sort([1,9,2,3,4,5,6,7,8])\nassert     [6,5,4,3,2,1,9,8,7] == heap_sort([7,1,9,2,8,3,6,4,5])\n"
    },
    {
        "number": 635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hq.nlargest(3, [2, 3, 5, 1, 4]) == [5, 4, 3]\nassert     hq.nsmallest(3, [2, 3, 5, 1, 4]) == [1, 2, 3]\nassert     hq.nlargest(1, [2, 3, 5, 1, 4]) == [5]\nassert     hq.nsmallest(1, [2, 3, 5, 1, 4]) == [1]\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(50,50) == True\nassert     noprofit_noloss(100,100) == True\nassert     noprofit_noloss(60,60) == False\nassert     noprofit_noloss(40,50) == False\nassert     noprofit_noloss(100,100) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     noprofit_noloss(150,150) == True\nassert     noprofit_noloss(150,50) == False\nassert     noprofit_noloss(100,50) == True\nassert     noprofit_noloss(100,100) == True\nassert     noprofit_noloss(100,100) == True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef noprofit_noloss_v2(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<actual_cost:\n        return True\n    return False\n\nassert noprofit_noloss_v2(5,7)==True\nassert noprofit_noloss_v2(5,8)==False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     noprofit_noloss(10,2) == True\nassert     noprofit_noloss(2,10) == True\nassert     noprofit_noloss(10,10) == True\nassert     noprofit_noloss(8,1) == False\nassert     noprofit_noloss(2,2) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(0,0)==True, \"should be True\"\nassert     noprofit_noloss(20,50)==False, \"should be False\"\nassert     noprofit_noloss(50,50)==True, \"should be True\""
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     noprofit_noloss(sale_amount = 10000, actual_cost = 2000) == False\nassert     noprofit_noloss(sale_amount = 10000, actual_cost = 2000) == False\nassert     noprofit_noloss(sale_amount = 1000, actual_cost = 2000) == False\nassert     noprofit_noloss(sale_amount = 1000, actual_cost = 2000) == False\nassert     noprofit_noloss(sale_amount = 1000, actual_cost = 1500) == True\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(2,0) == True\nassert     noprofit_noloss(2,1) == True\nassert     noprofit_noloss(2,2) == True\nassert     noprofit_noloss(2,3) == False\nassert     noprofit_noloss(3,1) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(0,1) == True\nassert     noprofit_noloss(1,2) == True\nassert     noprofit_noloss(2,1) == False\nassert     noprofit_noloss(1,2) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     noprofit_noloss(0,0) == True, \"0 profit is not True\"\nassert     noprofit_noloss(10,0) == False, \"10 profit is not False\"\nassert     noprofit_noloss(-10,0) == False, \"negative profit is not False\"\nassert     noprofit_noloss(5,5) == True, \"0 profit is True\"\nassert     noprofit_noloss(2,7) == False, \"10 profit is False\"\n"
    },
    {
        "number": 637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(1,1) == True\nassert     noprofit_noloss(1,0) == False\nassert     noprofit_noloss(0,1) == False\nassert     noprofit_noloss(-1,1) == False\nassert     noprofit_noloss(-1,0) == False\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     round(wind_chill(60,5.1)) == 32\nassert     round(wind_chill(60,5.8)) == 32\nassert     round(wind_chill(60,10.1)) == 19\nassert     round(wind_chill(60,10.8)) == 19\nassert     round(wind_chill(60,50.1)) == 22\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef test_wind_chill():\n    assert wind_chill(50,15) == 35\n    assert wind_chill(60,15) == 37\n    assert wind_chill(80,15) == 39\n    "
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     wind_chill(40,10) == 70\nassert     wind_chill(40,20) == 70\nassert     wind_chill(40,30) == 60\nassert     wind_chill(40,40) == 60\nassert     wind_chill(40,50) == 55\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     wind_chill(30,45) == -5.0\nassert     wind_chill(5,10) == 5.0\nassert     wind_chill(20,70) == 16.0\nassert     wind_chill(50,60) == 19.0\n\ndef temperature(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     wind_chill(20, 50) == 35.0\nassert     wind_chill(10, 50) == 32.0\nassert     wind_chill(50, 50) == 50.0\nassert     wind_chill(200, 30) == 25.0\nassert     wind_chill(50, 60) == 43.0\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     wind_chill(12, 72) == 32.0\nassert     wind_chill(25, 80) == 72.0\nassert     wind_chill(35, 75) == 78.0\nassert     wind_chill(45, 75) == 75.0\nassert     wind_chill(50, 75) == 75.0\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     wind_chill(10, 0) == 32.0\nassert     wind_chill(40, 0) == 65.0\nassert     wind_chill(15, 0) == 19.0\nassert     wind_chill(45, 0) == 48.0\nassert     wind_chill(50, 0) == 40.0\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef get_type(x):\n    if type(x) is int:\n        return int\n    elif type(x) is float:\n        return float\n    elif type(x) is str:\n        return str\n    elif type(x) is bool:\n        return bool\n    else:\n        return None\n\ndef check_type(x,type):\n    if get_type(x) == type:\n        return True\n    else:\n        return False\n\ndef check_type_and_cast(x,type):\n    if check_type(x,type):\n        return type(x)\n    else:\n        return None\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     wind_chill( v=0, t=25) == 32\nassert     wind_chill( v=45, t=15) == 37\nassert     wind_chill( v=70, t=15) == 41\nassert     wind_chill( v=100, t=15) == 50\nassert     wind_chill( v=150, t=15) == 55\n"
    },
    {
        "number": 638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (math.ceil(wind_chill(44.0,  40.0)) == 42)\nassert     (math.ceil(wind_chill(80.0,  45.0)) == 43)\nassert     (math.ceil(wind_chill(82.0,  46.0)) == 44)\nassert     (math.ceil(wind_chill(85.0,  47.0)) == 45)\nassert     (math.ceil(wind_chill(95.0,  48.0)) == 46)\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sample_nam(['Bart','Mary','Tom', 'a','b','c']) == 17\nassert     sample_nam(['Tom','Mary','a','a','b','a']) == 14\nassert     sample_nam(['A','a']) == 1\nassert     sample_nam([]) == 0\n\ndef longest(a, b):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sample_nam(['Bessie', 'Nani', 'Barbie', 'Bella', 'Lilac']) == 11\nassert     sample_nam(['Estelle', 'Audra', 'Tatyana']) == 7\nassert     sample_nam(['Bessie', 'Nani', 'Barbie', 'Bella', 'Lilac', 'Estelle', 'Audra', 'Tatyana']) == 17\nassert     sample_nam(['Bessie', 'Nani', 'Barbie', 'Bella', 'Lilac', 'Estelle', 'Audra', 'Tatyana', 'Marissa', 'Honey', 'Nicoletta']) == 17"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sample_nam(['Mary', 'Sue', 'Jane', 'Nick', 'Tom']) == 16\nassert     sample_nam(['a', 'a', 'a']) == 0\nassert     sample_nam(['A', 'a', 'B', 'b']) == 8\nassert     sample_nam(['c', 'c', 'c', 'c']) == 0\nassert     sample_nam(['a', 'a', 'b', 'a', 'b', 'a', 'b', 'c']) == 16\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sample_nam(['Sam', 'Hannah', 'Maria', 'Jim', 'Mary', 'Alice', 'Jone', 'Bob', 'Anna', 'Nana', 'Elsa', 'Jack', 'Mary', 'Maria', 'Olivia', 'Loren']) == 19\nassert     sample_nam(['Sam', 'Hannah', 'Maria', 'Jim', 'Mary', 'Alice', 'Jone', 'Bob', 'Anna', 'Nana', 'Elsa', 'Jack', 'Mary', 'Maria', 'Olivia', 'Loren', 'Lavinia']) == 19\nassert     sample_nam(['Sam', 'Hannah', 'Maria', 'Jim', 'Mary', 'Alice', 'Jone', 'Bob', 'Anna', 'Nana', 'Elsa', 'Jack', 'Mary', 'Maria', 'Olivia', 'Loren', 'Lavinia', 'Lavera']) == 19\nassert     sample_nam(['Sam', 'Hannah', 'Maria', 'Jim', 'Mary', 'Alice', 'Jone', 'Bob', 'Anna', 'Nana', 'Elsa', 'Jack', 'Mary', 'Maria', 'Olivia', 'Laven', 'Lavinia', 'Lavera']) == 19\nassert     sample_nam(['Sam', 'Hannah', 'Maria', 'Jim', 'Mary', 'Alice', 'Jone', 'Bob', 'Anna', 'Nana', 'Elsa', 'Jack', 'Mary', 'Maria', 'Olivia', 'Laven', 'Lavinia', 'Lavera', 'Lazarus']) == 19\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sample_nam(['name', 'Named', 'nam', 'name1', 'NAme']) == 6\nassert     sample_nam(['Named', 'Nam', 'naMe', 'naMe1']) == 8\nassert     sample_nam(['nam', 'naMe', 'name', 'name1']) == 10\nassert     sample_nam(['NaMe', 'NaMe1']) == 2\n\ndef palindrome(word):\n    '''\n    Write a function to return the index of a given word from a given list of words which is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sample_nam(['a', 'B', 'aB', 'c', 'cC', 'c', 'd']) == 15\nassert     sample_nam(['a', 'c', 'cB', 'cB', 'aB', 'c']) == 10\nassert     sample_nam(['a', 'b', 'b', 'c', 'c', 'aB', 'b', 'bB']) == 8\nassert     sample_nam(['a', 'B', 'aB', 'c', 'cC', 'c', 'd']) == 15\nassert     sample_nam(['a', 'c', 'c', 'd']) == 0\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sample_nam(['the', 'lazy', 'dog', 'jumped', 'over', 'the', 'lazy', 'cat']) == 7\nassert     sample_nam(['the', 'the', 'the', 'lazy', 'jumped', 'over', 'the', 'lazy', 'cat']) == 10\nassert     sample_nam(['the', 'lazy', 'the', 'lazy', 'jumped', 'over', 'the', 'lazy', 'cat']) == 10\nassert     sample_nam(['the', 'lazy', 'the', 'lazy', 'jumped', 'over', 'the', 'lazy', 'cat']) == 10\nassert     sample_nam(['the', 'lazy', 'jumped', 'over', 'the', 'lazy', 'cat']) == 7\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sample_nam(['Kathryn', 'Orly', 'Andy', 'Bilbo', 'Carol']) == 4\nassert     sample_nam(['Kathryn', 'Bilbo', 'Carol']) == 4\nassert     sample_nam(['Bilbo', 'Carol']) == 4\nassert     sample_nam(['Bilbo', 'Orly', 'Andy', 'Kathryn', 'Sally']) == 7\nassert     sample_nam(['Bilbo', 'Andy', 'Carol', 'Sally']) == 7\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sample_nam([\"jason\", \"davis\", \"jai\", \"jack\", \"janice\", \"travis\"]) == 17\nassert sample_nam([\"will\", \"josh\", \"dave\", \"james\", \"mike\", \"jake\"]) == 19\nassert sample_nam([\"randi\", \"derek\", \"somename\", \"smith\", \"darnell\", \"paul\"]) == 22\nassert sample_nam([\"bob\", \"dylan\", \"travis\", \"jim\", \"tina\", \"randy\"]) == 22\nassert sample_nam([\"loren\", \"jacqueline\", \"alice\", \"will\", \"emily\", \"matt\"]) == 19\n"
    },
    {
        "number": 639,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sample_nam(['abc', 'def', 'def', 'ghi', 'jkl']) == 10\nassert     sample_nam(['Abc', 'def', 'def', 'ghi', 'jkl']) == 10\nassert     sample_nam(['abc', 'b', 'c', 'ABC', 'xyz']) == 10\nassert     sample_nam(['aBC', 'def', 'ghi', 'xyz']) == 10\nassert     sample_nam(['abc', 'abc', 'xyz']) == 6\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_parenthesis(\"()\")     == \"()\"\nassert     remove_parenthesis(\"(*)\")     == \"*\"\nassert     remove_parenthesis(\"(())\")     == \"\"\nassert     remove_parenthesis(\"(*)(*)\")     == \"\"\nassert     remove_parenthesis(\"(*()*)\")     == \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n(remove_parenthesis(\"abc(123)\")) == \"abc123\"\nassert \n(remove_parenthesis(\"abc123(def)\")) == \"abc123def\"\nassert \n(remove_parenthesis(\"abc(123)def\" )) == \"abc123def\"\nassert \n(remove_parenthesis(\"123(abc)\")) == \"123abc\"\nassert \n(remove_parenthesis(\"123(abc)def\")) == \"123abcdef\"\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_parenthesis('(This)(is)(a)(test)')    ==     'This is a test'\nassert     remove_parenthesis('(((((((((((((((((((((((((((((((((((((((((((((((') ==    '()()()'\nassert     remove_parenthesis('(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((') ==     '(()()()'\nassert     remove_parenthesis('))') ==    '()'\nassert     remove_parenthesis('()') ==     '()'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_parenthesis('((a + b))') == '(a + b)'\nassert     remove_parenthesis('((a + b))') == '(a + b)'\nassert     remove_parenthesis('a + b') == 'a + b'\nassert     remove_parenthesis('a + b)') == 'a + b'\nassert     remove_parenthesis('(a + b') == '(a + b)'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_parenthesis('Hi (there)') == 'Hi there'\nassert remove_parenthesis('(one)(two)') == 'one two'\nassert remove_parenthesis('Hello(my)name') == 'Hello name'\nassert remove_parenthesis('(A)(B)C') == 'AB'\nassert remove_parenthesis('a(b)c') == 'abc'\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     'a(bc)' == remove_parenthesis('a(bc)')\nassert     'abc' == remove_parenthesis('abc')\nassert     'ab(c)d' == remove_parenthesis('ab(c)d')\nassert     'abc(d)e' == remove_parenthesis('abc(d)e')\nassert     'abc(d(e))' == remove_parenthesis('abc(d(e))')\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_parenthesis(\"2\") == \"2\"\nassert     remove_parenthesis(\"(2)\") == \"2\"\nassert     remove_parenthesis(\"(2)\") == \"2\"\nassert     remove_parenthesis(\"(2)\") == \"2\"\nassert     remove_parenthesis(\"(2)\") == \"2\"\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(\"The quick (brown) fox\") == \"The quick brown fox\"\nassert remove_parenthesis(\"(The) quick (brown) fox\") == \"The quick brown fox\"\nassert remove_parenthesis(\"(The) (quick) (brown) (fox)\") == \"The quick brown fox\"\nassert remove_parenthesis(\"(The) (quick) (brown) (fox)\") == \"The quick brown fox\"\nassert remove_parenthesis(\"The quick (brown) fox\") == \"The quick brown fox\"\n"
    },
    {
        "number": 640,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_parenthesis('foo(bar(baz(1)))') == 'foo(bar(baz(1)))'\nassert     remove_parenthesis('foo(bar(baz)())') == 'foo(bar(baz))()'\nassert     remove_parenthesis('foo(bar((baz(1)))))') == 'foo(bar(baz(1)))'\nassert     remove_parenthesis('foo(bar(baz((1)))') == 'foo(bar(baz(1)))'\nassert     remove_parenthesis('foo(bar(baz(1))bar(baz(1)))') == 'foo(bar(baz(1))bar(baz(1)))'\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 1\nassert     is_nonagonal(3) == 3\nassert     is_nonagonal(4) == 6\nassert     is_nonagonal(5) == 10\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 6\nassert     is_nonagonal(4) == 10\nassert     is_nonagonal(5) == 15\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(9) == 19\nassert     is_nonagonal(15) == 37\nassert     is_nonagonal(25) == 41\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_nonagonal(4) == 8 \nassert     is_nonagonal(3) == 7 \nassert     is_nonagonal(2) == 5 \nassert     is_nonagonal(1) == 3 \nassert     is_nonagonal(0) == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 9\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 7\nassert     is_nonagonal(3) == 109\nassert     is_nonagonal(4) == 297\nassert     is_nonagonal(5) == 781\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\nassert     is_nonagonal(5) == 9\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_nonagonal(1) == \"1st nonagonal number is 1\"\nassert     is_nonagonal(2) == \"2nd nonagonal number is 1\"\nassert     is_nonagonal(3) == \"3rd nonagonal number is 2\"\nassert     is_nonagonal(4) == \"4th nonagonal number is 2\"\nassert     is_nonagonal(5) == \"5th nonagonal number is 3\"\n"
    },
    {
        "number": 641,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_nonagonal(0) == 1\nassert     is_nonagonal(1) == 2\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 4\nassert     is_nonagonal(4) == 5\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle(\"zzz\") == True\nassert     text_match_wordz_middle(\"bzc\") == False\nassert     text_match_wordz_middle(\"bzc\") == False\nassert     text_match_wordz_middle(\"bzc\") == False\nassert     text_match_wordz_middle(\"bzc\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle('') == False\nassert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('zzzzzz') == False\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz') == False\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('the') == True\nassert     text_match_wordz_middle('the is to') == True\nassert     text_match_wordz_middle('this is a test') == False\nassert     text_match_wordz_middle('z is for sure') == False\nassert     text_match_wordz_middle('I like cheese') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('apple')     == False\nassert     text_match_wordz_middle('eggs')     == True\nassert     text_match_wordz_middle('zebra')     == True\nassert     text_match_wordz_middle('zzyzx')     == True\nassert     text_match_wordz_middle('zzzzx')     == False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle(\"z\") == False\nassert     text_match_wordz_middle(\"bz\") == False\nassert     text_match_wordz_middle(\"zz\") == True\nassert     text_match_wordz_middle(\"zb\") == True\nassert     text_match_wordz_middle(\"zzb\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle('Hello') is False\nassert     text_match_wordz_middle('ZzZ') is False\nassert     text_match_wordz_middle('ZZZZZZZZ') is False\nassert     text_match_wordz_middle('z') is False\nassert     text_match_wordz_middle('zzzzzz') is False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle('zasdfasdf') == True\nassert     text_match_wordz_middle('zasdfasdfsdf') == False\nassert     text_match_wordz_middle('zsdfasdfasdf') == True\nassert     text_match_wordz_middle('zasdfasdfasdf') == True\nassert     text_match_wordz_middle('zsdfasdf') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         text_match_wordz_middle('z') == True\nassert         text_match_wordz_middle('z') == True\nassert         text_match_wordz_middle('z') == True\nassert         text_match_wordz_middle('z') == True\nassert         text_match_wordz_middle('z') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle('zzzzz') == True\nassert     text_match_wordz_middle('zzzzz ') == True\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzz ') == True\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzz') == True\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzz') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle(\"aab\") == False\nassert     text_match_wordz_middle(\"aabx\") == True\nassert     text_match_wordz_middle(\"zab\") == True\nassert     text_match_wordz_middle(\"zaab\") == False\nassert     text_match_wordz_middle(\"zaabx\") == True\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_Array_Upto_K([0,1,2,3,4], 1) == [4,3,2,1,0], 'Error'\nassert     reverse_Array_Upto_K([0,1,2,3,4], 2) == [2,1,0,3,4], 'Error'\nassert     reverse_Array_Upto_K([0,1,2,3,4], 5) == [], 'Error'\nassert     reverse_Array_Upto_K([], 0) == [], 'Error'\nassert     reverse_Array_Upto_K([1,2,3,4], 0) == [1,2,3,4], 'Error'\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 3) == [5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 1) == [1,2,3,4,5]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     reverse_Array_Upto_K([], 5) == []\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [3, 2, 1, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 4) == [4, 3, 2, 1, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) == [6, 5, 4, 3, 2, 1]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 5) == [10,9,8,7,6,5,4,3,2,1], \"Failed to reverse the array\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 11) == [], \"Failed to reverse the array\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 0) == [1,2,3,4,5,6,7,8,9,10], \"Failed to reverse the array\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 1) == [2,1,4,3,6,5,8,7,10,9], \"Failed to reverse the array\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 2) == [3,2,1,4,5,6,7,8,9,10], \"Failed to reverse the array\"\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 4) == [1,2,3,4,5,6,7,8]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 0) == [1,2,3,4,5,6,7,8]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 11) == [8,7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], -2) == [8,7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8], 7) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 10) == [10,9,8,7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([10,9,8,7,6,5,4,3,2,1], 10) == [10,9,8,7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([10,9,8,7,6,5,4,3,2,1], 5) == [5,4,3,2,1]\n\ndef number_of_Inversion(input): \n    '''\n    Write a python function to calculate the number of inversions in an array\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [3, 2, 1, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 2) == [3,2,1,5,4]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 3) == [4,3,2,5,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 4) == [5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 6) == [2,1,3,4,5]\n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 2) == [2,1,4,3,5]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 3) == [3,2,1,4,5]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5], 6) == [6,5,4,3,2]\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple(    (1,2,3), \n                            {'a':1, 'b':2, 'c':3}) == (1,2,3,{'a':1, 'b':2, 'c':3})\nassert     add_dict_to_tuple(    (1,2,3), \n                            {'b':2, 'c':3, 'd':4}) == (1,2,3,{'b':2, 'c':3, 'd':4})\nassert     add_dict_to_tuple(    (1,2,3), \n                            {'a':1, 'b':2}) == (1,2,3,{'a':1, 'b':2})\nassert     add_dict_to_tuple(    (1,2,3), \n                            {'a':1, 'b':2, 'c':3}) == (1,2,3,{'a':1, 'b':2, 'c':3})\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple(('a', 'b'), {'a': 1, 'b': 2}) == ('a', 'b', 1, 2)\nassert     add_dict_to_tuple(('a', 'b', 'c'), {'a': 1, 'b': 2}) == ('a', 'b', 'c', 1, 2)\nassert     add_dict_to_tuple(('a', 'b'), {'a': 1, 'b': 2}) == ('a', 'b', 1, 2)\nassert     add_dict_to_tuple(('a', 'b', 'c'), {'a': 1, 'b': 2}) == ('a', 'b', 'c', 1, 2)\nassert     add_dict_to_tuple(('a', 'b'), {'a': 1}) == ('a', 'b', 1)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple(('a', 'b'), {'a': 1, 'b': 2}) == ('a', 'b', 1, 2)\nassert     add_dict_to_tuple(('a', 'b'), {'b': 2, 'c': 3}) == ('a', 'b', 2, 3)\nassert     add_dict_to_tuple(('a', 'b'), {'a': 1, 'c': 3}) == ('a', 'b', 1, 3)\nassert     add_dict_to_tuple(('a', 'b'), {'a': 1, 'b': 2, 'c': 3}) == ('a', 'b', 1, 2, 3)\nassert     add_dict_to_tuple(('a', 'b'), {'a': 1, 'b': 2}) == ('a', 'b', 1, 2)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_dict_to_tuple(('a', 'b'), {'a': 10})     == ('a', 10, 'b')\nassert     add_dict_to_tuple(('a', 'b'), {'c': 30})     == ('a', 10, 'b', 'c')\nassert     add_dict_to_tuple(('a', 'b', 'c'), {'d': 40})     == ('a', 10, 'b', 'c', 'd')\nassert     add_dict_to_tuple(('a', 'b', 'c'), {'d': 40, 'e': 50})     == ('a', 10, 'b', 'c', 'd', 'e')\nassert     add_dict_to_tuple(('a', 'b', 'c', 'd', 'e'), {})     == ('a', 10, 'b', 'c', 'd', 'e')\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple(('a', 'b', 'c', 'd'), {'a': 1, 'b': 2, 'c': 3, 'd': 4}) == ('a', 'b', 'c', 'd', 1, 2, 3, 4)\nassert     add_dict_to_tuple(('a', 'b', 'c', 'd'), {'a': 1, 'b': 2, 'c': 3}) == ('a', 'b', 'c', 'd', 1, 2, 3)\nassert     add_dict_to_tuple(('a', 'b', 'c', 'd'), {'a': 1}) == ('a', 'b', 'c', 'd', 1)\nassert     add_dict_to_tuple(('a', 'b', 'c', 'd'), {'a': 1, 'b': 2}) == ('a', 'b', 'c', 'd', 1, 2)\nassert     add_dict_to_tuple(('a', 'b', 'c', 'd'), {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == ('a', 'b', 'c', 'd', 1, 2, 3, 4, 5)\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple((1,2,3,4,5), {'a':1, 'b':2, 'c':3}) == (1,2,3,4,5,'a','b','c')\nassert     add_dict_to_tuple((1,2,3,4,5), {'a':1, 'b':2, 'd':4}) == (1,2,3,4,5,'a','b','d')\nassert     add_dict_to_tuple((1,2,3,4,5), {'a':1, 'b':2, 'c':3, 'd':4}) == (1,2,3,4,5,'a','b','c','d')\nassert     add_dict_to_tuple((1,2,3,4,5), {'a':1, 'b':2, 'e':5}) == (1,2,3,4,5,'a','b','e')\nassert     add_dict_to_tuple((1,2,3,4,5), {'a':1, 'b':2, 'c':3}) == (1,2,3,4,5,'a','b','c')\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple( (1,2,3), {1:1, 2:2, 3:3})     == (1,2,3, {1:1, 2:2, 3:3})\nassert     add_dict_to_tuple( ('a','b','c'), {1:1, 2:2, 3:3})     == ('a','b','c', {1:1, 2:2, 3:3})\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (1,2,3,4,5,6) == add_dict_to_tuple((1,2,3,4,5,6), {1:10,2:20,3:30,4:40,5:50,6:60})\nassert     (1,2,3,4,5,6) == add_dict_to_tuple((1,2,3,4,5,6), {1:10,2:20,3:30,4:40,5:50,6:60})\n\ndef add_tuple_to_list(test_list, test_tup):\n    '''\n    Write a function to add a tuple to a list. The output should be a list.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (('elk', 5) == add_dict_to_tuple(('apple', 1), {'fruit': 'banana', 'count': 5}))\nassert     (('elk', 5) == add_dict_to_tuple(('apple', 1), {'fruit': 'banana', 'count': 5}))\nassert     (('mango', 10) == add_dict_to_tuple(('orange', 10), {'fruit':'mango', 'count': 10}))\nassert     (('mango', 10) == add_dict_to_tuple(('orange', 10), {'fruit':'mango', 'count': 10}))\nassert     (('apple', 5) == add_dict_to_tuple(('apple', 5), {'fruit': 'banana', 'count': 5}))\n"
    },
    {
        "number": 720,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple((1,2,3), {'a':1, 'b':2}) == (1,2,3,'a',1,'b',2)\nassert     add_dict_to_tuple((1,2,3), {'a':1, 'b':2, 'c':3}) == (1,2,3,'a',1,'b',2,'c',3)\nassert     add_dict_to_tuple((1,2,3), {'a':1, 'b':2}) == (1,2,3,'a',1,'b',2)\nassert     add_dict_to_tuple((1,2,3,4), {'a':1, 'b':2, 'c':3}) == (1,2,3,4,'a',1,'b',2,'c',3)\nassert     add_dict_to_tuple((1,2,3,4), {'a':1, 'b':2}) == (1,2,3,4,'a',1,'b',2)\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maxAverageOfPath([[1,2,3],\n                          [5,6,5],\n                          [10,11,12]]) == 8.5\nassert     maxAverageOfPath([[1,2,3],\n                          [5,6,5],\n                          [10,11,12],\n                          [10,11,12]]) == 9\nassert     maxAverageOfPath([[1,2,3,4],\n                          [1,2,3,4],\n                          [1,2,3,4]]) == 2.5\nassert     maxAverageOfPath([[1,2,3,4,5,6,7,8],\n                          [1,2,3,4,5,6,7,8],\n                          [1,2,3,4,5,6,7,8],\n                          [1,2,3,4,5,6,7,8],\n                          [1,2,3,4,5,6,7,8],\n                          [1,2,3,4,5,6,7,8],\n                          [1,2,3,4,5,6,7,8],\n                          [1,2,3,4,5,6,7,8]]) == 9\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maxAverageOfPath(cost) == 8\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maxAverageOfPath([[0, 10, 15, 20],\n                           [40, 50, 60, 70],\n                           [80, 90, 100, 110],\n                           [120, 130, 150, 180]]) == 45\nassert maxAverageOfPath([[2, 4, 3],\n                           [3, 1, 4],\n                           [4, 1, 5]]) == 6\nassert maxAverageOfPath([[1, 2],\n                           [1, 2],\n                           [1, 2]]) == 2\nassert maxAverageOfPath([[1, 2, 1],\n                           [1, 2, 1],\n                           [1, 2, 1]]) == 2\nassert maxAverageOfPath([[1, 1, 1, 1],\n                           [1, 1, 1, 1],\n                           [1, 1, 1, 1],\n                           [1, 1, 1, 1]]) == 1\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maxAverageOfPath([[1,2,3],\n                           [2,3,5],\n                           [3,5,2]]) == 3\nassert     maxAverageOfPath([[1,2,3],\n                           [2,3,5],\n                           [1,2,3]]) == 2\nassert     maxAverageOfPath([[1,2,3],\n                           [1,1,3],\n                           [1,2,3]]) == 1.5\nassert     maxAverageOfPath([[1,2,3],\n                           [1,1,3],\n                           [1,1,1]]) == 1\nassert     maxAverageOfPath([[1,2,3],\n                           [1,1,1],\n                           [1,1,1]]) == 1\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maxAverageOfPath([[0,1,1,2],[1,0,1,1],[1,1,0,1],[2,1,1,0]]) == 2.0\nassert     maxAverageOfPath([[2,1,5],[1,4,7],[7,3,9]]) == 5.5\nassert     maxAverageOfPath([[1,4,5],[7,3,9]]) == 5.0\nassert     maxAverageOfPath([[1,6,1,4,3],[8,1,2,6,4],[9,5,3,1,1],[6,6,4,8,1],[3,1,9,3,1]]) == 4.0\n\n'''\nuse DP\ntime: O(mn)\nspace: O(mn)\n'''\ndef maxAverageOfPath2(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_cost = float('-inf')\n    rows, cols = len(cost), len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            max_cost = max(max_cost, cost[i][j])\n            if i == 0:\n                dp[i][j] = cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            elif i == j:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]) + cost[i][j]\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     maxAverageOfPath([[1, 3, 1, 3, 1, 4],\n                                [7, 1, 4, 1, 1, 1],\n                                [2, 1, 1, 3, 1, 5],\n                                [8, 3, 5, 3, 1, 2],\n                                [9, 2, 1, 4, 3, 1]]) == 6\nassert     maxAverageOfPath([[7, 3, 5, 3, 1],\n                                [2, 1, 1, 3, 1],\n                                [8, 3, 5, 3, 1],\n                                [9, 2, 1, 4, 3]]) == 6\nassert     maxAverageOfPath([[7, 3, 5, 3, 1],\n                                [2, 1, 1, 3, 1],\n                                [8, 3, 5, 3, 1],\n                                [9, 2, 1, 4, 3],\n                                [9, 2, 1, 4, 3]]) == 6\nassert     maxAverageOfPath([[1, 3, 1, 3, 1, 4],\n                                [7, 1, 4, 1, 1, 1],\n                                [2, 1, 1, 3, 1, 5],\n                                [8, 3, 5, 3, 1, 2],\n                                [9, 2, 1, 4, 3, 1],\n                                [9, 2, 1, 4, 3, 1]]) == 9\nassert     maxAverageOfPath([[1, 3, 5, 3, 1],\n                                [7, 1, 4, 1, 1],\n                                [2, 1, 1, 3, 1],\n                                [8, 3, 5, 3, 1],\n                                [9, 2, 1, 4, 3],\n                                [9, 2, 1, 4, 3]]) == 9\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef countAndSay(n):\n    '''\n    Given an integer n, return a string that looks like a count-and-say sequence, with each digit repeated n times.\n    Note that the count-and-say sequence must begin with 1 and 1 as a substring.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     maxAverageOfPath([[2,2,3],[2,1,1],[1,2,2]]) == 2\nassert     maxAverageOfPath([[2,2,3],[2,1,2],[1,2,2]]) == 2.5\nassert     maxAverageOfPath([[2,2,3],[2,1,2],[1,2,2]]) == 2.5\nassert     maxAverageOfPath([[2,2,3],[2,1,2],[1,2,2]]) == 2.5\nassert     maxAverageOfPath([[2,2,3],[2,1,2],[1,2,2]]) == 2.5\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[1,2,3], [4,5,6], [7,8,9]]) == 7.0\nassert     maxAverageOfPath([[1,2,3], [4,5,6]]) == 3.5\nassert     maxAverageOfPath([[1], [2], [3], [4], [5], [6], [7], [8], [9]]) == 6.0\n\ndef longestIncreasingPath(matrix):\n    '''\n    Given an integer matrix of size N*N, where each element is either 0 or 1. A path of length k is defined as a sequence of cells that (after initially moving in the direction of increasing value) will eventually visit every cell of the matrix. We will only move from a cell to another cell if the value of the target cell is greater than the value of the source cell. Find the length of the longest increasing path in the matrix.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     maxAverageOfPath([[1,2,3,4], \n                        [3,4,5,6], \n                        [2,3,4,5], \n                        [1,2,3,4]]) == 8\nassert     maxAverageOfPath([[1,2], \n                        [3,4]]) == 4\nassert     maxAverageOfPath([[1]]) == 1\nassert     maxAverageOfPath([[1,2,3,4,5,6], \n                        [10,11,12,13,14,15], \n                        [20,21,22,23,24,25], \n                        [30,31,32,33,34,35], \n                        [40,41,42,43,44,45], \n                        [50,51,52,53,54,55]]) == 45\nassert     maxAverageOfPath([[1,1,1,1,1,1], \n                        [2,2,2,2,2,2], \n                        [3,3,3,3,3,3], \n                        [4,4,4,4,4,4], \n                        [5,5,5,5,5,5], \n                        [6,6,6,6,6,6]]) == 15\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_data({'Harry': (1.8, 70), 'Berry': (1.9, 65), 'Tina': (1.7, 60), 'Akriti': (1.8, 65), 'Harsh': (1.9, 70)},\n                    1.5, 100) == {'Harry': (1.8, 70), 'Berry': (1.9, 65), 'Akriti': (1.8, 65), 'Harsh': (1.9, 70)}\nassert     filter_data({'Harry': (1.8, 70), 'Berry': (1.9, 65), 'Tina': (1.7, 60), 'Akriti': (1.8, 65), 'Harsh': (1.9, 70)},\n                    1, 1) == {}\nassert     filter_data({'Harry': (1.8, 70), 'Berry': (1.9, 65), 'Tina': (1.7, 60), 'Akriti': (1.8, 65), 'Harsh': (1.9, 70)},\n                    1.5, 1) == {'Tina': (1.7, 60), 'Harsh': (1.9, 70)}\nassert     filter_data({'Harry': (1.8, 70), 'Berry': (1.9, 65), 'Tina': (1.7, 60), 'Akriti': (1.8, 65), 'Harsh': (1.9, 70)},\n                    1, 0) == {'Harry': (1.8, 70), 'Berry': (1.9, 65), 'Tina': (1.7, 60), 'Akriti': (1.8, 65), 'Harsh': (1.9, 70)}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_data({'Harry': (1.8, 97), 'Berry': (1.9, 89), 'Tina': (1.8, 79), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}, 1.5, 50) == {'Harry': (1.8, 97), 'Berry': (1.9, 89), 'Akriti': (1.9, 81)}\nassert     filter_data({'Harry': (1.8, 97), 'Berry': (1.9, 89), 'Tina': (1.8, 79), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}, 1.2, 32) == {'Tina': (1.8, 79), 'Berry': (1.9, 89), 'Harry': (1.8, 97), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}\nassert     filter_data({'Harry': (1.8, 97), 'Berry': (1.9, 89), 'Tina': (1.8, 79), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}, 1.5, 70) == {'Tina': (1.8, 79), 'Berry': (1.9, 89), 'Harry': (1.8, 97), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}\nassert     filter_data({'Harry': (1.8, 97), 'Berry': (1.9, 89), 'Tina': (1.8, 79), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}, 1.5, 89) == {'Berry': (1.9, 89), 'Harry': (1.8, 97), 'Tina': (1.8, 79), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}\nassert     filter_data({'Harry': (1.8, 97), 'Berry': (1.9, 89), 'Tina': (1.8, 79), 'Akriti': (1.9, 81), 'Harsh': (1.9, 70)}, 1.5, 97) == {'Harry': (1.8, 97)}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [(name, (height,weight)) for name, (height,weight) in students.items() if height >= h and weight >= w] == filter_data(students,h,w)\n\ndef filter_students_bad(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n\ndef filter_students_bad2(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n\ndef filter_students_bad3(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_data(students,5.0,140.0) == {'Alex': (5.0,140.0), 'Denise': (5.0,140.0), 'Joshua': (5.0,140.0), 'Zoro': (5.0,140.0), 'Austin': (5.0,140.0)}\nassert     filter_data(students,10.0,140.0) == {'Zoro': (5.0,140.0), 'Alex': (5.0,140.0), 'Denise': (5.0,140.0), 'Austin': (5.0,140.0)}\nassert     filter_data(students,3.0,140.0) == {'Denise': (5.0,140.0), 'Zoro': (5.0,140.0), 'Joshua': (5.0,140.0), 'Austin': (5.0,140.0)}\nassert     filter_data(students,10.0,140.0) == {'Denise': (5.0,140.0), 'Zoro': (5.0,140.0), 'Joshua': (5.0,140.0), 'Austin': (5.0,140.0)}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_data(students,1.4,3.5)=={'Arun':(1.4,3.5),'Harsh':(1.4,3.5),'Sam':(1.4,3.5),'Abhijit':(1.4,3.5)}\nassert     filter_data(students,1.3,1.8)=={'Arun':(1.3,1.8),'Harsh':(1.3,1.8),'Abhijit':(1.3,1.8),'Sam':(1.3,1.8),'Hari':(1.3,1.8)}\nassert     filter_data(students,1.3,1.8)=={'Arun':(1.3,1.8),'Harsh':(1.3,1.8),'Abhijit':(1.3,1.8),'Sam':(1.3,1.8),'Hari':(1.3,1.8)}"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (filter_data({\"Student1\": (1.85, 5.1), \"Student2\": (1.9, 6.2), \"Student3\": (1.99, 7.2), \"Student4\": (1.79, 5.3), \"Student5\": (1.79, 5.3)},1.9,6.2) == {'Student2', 'Student3', 'Student4'})\nassert     (filter_data({\"Student1\": (1.85, 5.1), \"Student2\": (1.9, 6.2), \"Student3\": (1.99, 7.2), \"Student4\": (1.79, 5.3), \"Student5\": (1.79, 5.3)},1.9,6.2) == {'Student2', 'Student3', 'Student4'})\nassert     (filter_data({\"Student1\": (1.85, 5.1), \"Student2\": (1.9, 6.2), \"Student3\": (1.99, 7.2), \"Student4\": (1.79, 5.3), \"Student5\": (1.79, 5.3)},1.5,7.2) == {'Student1', 'Student5'})\nassert     (filter_data({\"Student1\": (1.85, 5.1), \"Student2\": (1.9, 6.2), \"Student3\": (1.99, 7.2), \"Student4\": (1.79, 5.3), \"Student5\": (1.79, 5.3)},1.5,7.2) == {'Student1', 'Student5'})\nassert     (filter_data({\"Student1\": (1.85, 5.1), \"Student2\": (1.9, 6.2), \"Student3\": (1.99, 7.2), \"Student4\": (1.79, 5.3), \"Student5\": (1.79, 5.3)},1.5,6.1) == {'Student1', 'Student2', 'Student3', 'Student4'})\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (filter_data({'Andre': (1.8, 67), 'Ellen': (1.9, 68), 'Denise': (1.8, 69), 'Jon': (1.7, 70), 'Lydia': (1.8, 71), 'Nathan': (1.7, 72)}, 1.8, 68) ==\n            {'Andre': (1.8, 67), 'Lydia': (1.8, 71), 'Nathan': (1.7, 72)})\n\nassert     (filter_data({'Fiona': (1.8, 67), 'Denise': (1.8, 68), 'Jon': (1.7, 69), 'Lydia': (1.8, 71), 'Nathan': (1.7, 72)}, 1.8, 68) ==\n            {'Lydia': (1.8, 71), 'Nathan': (1.7, 72)})\n\nassert     (filter_data({'Fiona': (1.8, 67), 'Denise': (1.8, 68), 'Jon': (1.7, 69), 'Lydia': (1.8, 71), 'Nathan': (1.7, 72)}, 1.8, 69) ==\n            {'Fiona': (1.8, 67), 'Jon': (1.7, 69), 'Nathan': (1.7, 72)})\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_data( {'Emily': (1.7, 68.0), 'Mary': (1.7, 68.0), 'Mark': (1.9, 68.0)}, 1.7, 68.0 ) == {'Emily': (1.7, 68.0), 'Mary': (1.7, 68.0)}\nassert     filter_data( {'Emily': (1.7, 68.0), 'Mary': (1.7, 68.0), 'Mark': (1.9, 68.0)}, 1.6, 68.0 ) == {'Mary': (1.7, 68.0)}\nassert     filter_data( {'Emily': (1.7, 68.0), 'Mary': (1.7, 68.0), 'Mark': (1.9, 68.0)}, 1.6, 67.0 ) == {'Mary': (1.7, 68.0)}\n"
    },
    {
        "number": 722,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_data({\"Michele\":[(1.85,89.5),(1.75,79.5),(1.76,79.5),(1.74,79.5)], \"Luca\":[(1.86,81.5),(1.68,79.5),(1.69,79.5),(1.69,79.5)], \"Giuseppe\":[(1.80,81.5),(1.71,79.5),(1.68,79.5),(1.70,79.5)]}, 1.75, 79.5) == {\"Giuseppe\":[(1.69,79.5),(1.70,79.5)], \"Luca\":[(1.74,79.5),(1.69,79.5)], \"Michele\":[(1.69,79.5),(1.68,79.5),(1.70,79.5)]}\nassert     filter_data({\"Michele\":[(1.85,89.5),(1.75,79.5),(1.76,79.5),(1.74,79.5)], \"Luca\":[(1.86,81.5),(1.68,79.5),(1.69,79.5),(1.69,79.5)], \"Giuseppe\":[(1.80,81.5),(1.71,79.5),(1.68,79.5),(1.70,79.5)]}, 1.75, 79.5) == {\"Giuseppe\":[(1.70,79.5),(1.69,79.5)], \"Luca\":[(1.74,79.5),(1.69,79.5)], \"Michele\":[(1.69,79.5),(1.68,79.5),(1.70,79.5)]}\nassert     filter_data({\"Michele\":[(1.85,89.5),(1.75,79.5),(1.76,79.5),(1.74,79.5)], \"Luca\":[(1.86,81.5),(1.68,79.5),(1.69,79.5),(1.69,79.5)], \"Giuseppe\":[(1.80,81.5),(1.71,79.5),(1.68,79.5),(1.70,79.5)]}, 1.80, 81.5) == {\"Giuseppe\":[(1.80,81.5),(1.71,79.5),(1.68,79.5),(1.70,79.5)], \"Luca\":[(1.68,79.5),(1.69,79.5)], \"Michele\":[(1.71,79.5),(1.68,79.5),(1.70,79.5)]}\nassert     filter_data({\"Michele\":[(1.85,89.5),(1.75,79.5),(1.76,79.5),(1.74,79.5)], \"Luca\":[(1.86,81.5),(1.68,79.5),(1.69,79.5),(1.69,79.5)], \"Giuseppe\":[(1.80,81.5),(1.71,79.5),(1.68,79.5),(1.70,79.5)]}, 1.80, 79.5) == {\"Giuseppe\":[(1.68,79.5),(1.69,79.5)], \"Luca\":[(1.69,79.5),(1.68,79.5)], \"Michele\":[(1.71,79.5),(1.68,79.5),(1.70,79.5)]}\n\nprint(\"[Passed!] 1. Filter data.\")\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_same_pair([1,2,3], [1,2,3]) == 0\nassert     count_same_pair([1,2,2,2], [1,2,2,2]) == 1\nassert     count_same_pair([1,2,3], [2,2,2]) == 1\nassert     count_same_pair([1,2,3], [3,3,3]) == 2\nassert     count_same_pair([1,2,3], [3,3,1]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_same_pair([1,2,3], [1,2,3])\nassert     count_same_pair([1,2,3], [1,4,3])\nassert     count_same_pair([1,2,3], [1,2,3])\nassert     count_same_pair([], [])\nassert     count_same_pair([1,2,3], [1,2,3])\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 2\nassert     count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == 2\nassert     count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 5, 6]) == 3\nassert     count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 4\nassert     count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == 4\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_same_pair([0,1,2,3], [1,1,1,1]) == 1\nassert     count_same_pair([0,1,2,3], [1,2,3,1]) == 1\nassert     count_same_pair([0,1,2,3,3], [1,2,3,1,0]) == 2\nassert     count_same_pair([0,1,2,3,4], [1,2,3,1,0]) == 4\nassert     count_same_pair([0,0,0,0], [0,1,2,3]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_same_pair([1,2,3], [1,2,3]) == 1\nassert     count_same_pair([1,2,3], [1,2,4]) == 0\nassert     count_same_pair([1,2,3], [1,2,3]) == 3\nassert     count_same_pair([1,2,3], [1,2,3]) == 3\nassert     count_same_pair([1,2,3], [2,2,3]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_same_pair([1, 1, 1, 2], [1, 1, 1, 1]) == 2\nassert     count_same_pair([1, 1, 1, 2], [1, 1, 1, 2]) == 3\nassert     count_same_pair([1, 1, 1, 2], [1, 2, 3, 4]) == 1\nassert     count_same_pair([1, 1, 1, 2], [2, 1, 1, 2]) == 1\nassert     count_same_pair([1, 1, 1, 2], [1, 1, 3, 4]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_same_pair([0,1,0], [0,0,1]) == 2\nassert     count_same_pair([1,0,0], [1,0,0]) == 1\nassert     count_same_pair([1,1,1], [1,0,0]) == 0\nassert     count_same_pair([1,1,1], [1,0,1]) == 1\nassert     count_same_pair([1,1,1], [1,0,0]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_same_pair([1,2,3], [1,2,3]) == True\nassert     count_same_pair([1,2,3], [2,3,4]) == True\nassert     count_same_pair([1,2,3], [3,4,5]) == False\nassert     count_same_pair([1,1,1,1], [1,1,1,1]) == True\nassert     count_same_pair([1,2,3], [2,3,3]) == False\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 3\nassert     count_same_pair([1, 1, 1, 3, 3], [1, 1, 1, 3, 3]) == 4\nassert     count_same_pair([1, 3, 4, 5], [1, 3, 4, 5]) == 0\nassert     count_same_pair([1, 3, 4], [1, 3, 4, 5]) == 0\nassert     count_same_pair([1, 4, 5], [1, 4, 5, 5]) == 3\n"
    },
    {
        "number": 723,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_same_pair([1,1,1,2,2,3], [1,1,1,2,2,2]) == 0\nassert     count_same_pair([1,2,3,4,5,6], [5,6,1,2,3,4]) == 0\nassert     count_same_pair([1,2,3,4,5,6], [5,6,1,2,3,4]) == 2\nassert     count_same_pair([1,1,1,1,2], [1,1,1,1,2]) == 5\nassert     count_same_pair([1,1,1,1,2], [1,1,1,1,3]) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     power_base_sum(2, 4) == 10\nassert     power_base_sum(3, 4) == 43\nassert     power_base_sum(4, 4) == 1024\nassert     power_base_sum(3, 3) == 27\nassert     power_base_sum(2, 2) == 4\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     power_base_sum(10, 1) == 10\nassert     power_base_sum(10, 2) == 100\nassert     power_base_sum(10, 3) == 1000\nassert     power_base_sum(10, 4) == 10000\nassert     power_base_sum(10, 5) == 100000\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     power_base_sum(base=2, power=1)     == 1,     'failed'\nassert     power_base_sum(base=2, power=2)     == 4,     'failed'\nassert     power_base_sum(base=16, power=1)     == 10,     'failed'\nassert     power_base_sum(base=16, power=2)     == 100,     'failed'\nassert     power_base_sum(base=16, power=3)     == 1000,     'failed'\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     power_base_sum(2,2)    ==    10\nassert     power_base_sum(2,3)    ==    9\nassert     power_base_sum(10,2)    ==    10\nassert     power_base_sum(10,3)    ==    100\nassert     power_base_sum(3,3)    ==    27\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     power_base_sum(2,3) == 9\nassert     power_base_sum(2,5) == 2\nassert     power_base_sum(3,0) == 1\nassert     power_base_sum(10,0) == 1\nassert     power_base_sum(10,1) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     power_base_sum(3,0) == 1\nassert     power_base_sum(2,5) == 2\nassert     power_base_sum(4,3) == 2\nassert     power_base_sum(0,10) == 0\nassert     power_base_sum(4,10) == 4\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     power_base_sum(2, 10) == 4\nassert     power_base_sum(2, 100) == 1024\nassert     power_base_sum(3, 10) == 3\nassert     power_base_sum(3, 100) == 999\nassert     power_base_sum(4, 10) == 4\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     power_base_sum(2, 10) == 1\nassert     power_base_sum(2, 100) == 0\nassert     power_base_sum(2, 1000) == 3\nassert     power_base_sum(2, 10000) == 0\nassert     power_base_sum(2, 1000000) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     power_base_sum(2, 0) == 1\nassert     power_base_sum(2, 1) == 2\nassert     power_base_sum(2, 2) == 4\nassert     power_base_sum(2, 3) == 8\nassert     power_base_sum(2, 4) == 16\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_quotation(\"\"\"My name is \"Ashok\" and I am 23 years old\"\"\") == [(\"Ashok\", \"23\")]\nassert     extract_quotation(\"\"\"1235632\"\"\") == []\nassert     extract_quotation(\"\"\"The value of i is \"5\".\"\"\") == [(\"5\",)]\nassert     extract_quotation(\"\"\"The value of i is \"5\" and that is a number.\"\"\" ) == [(\"5\",)]\nassert     extract_quotation(\"\"\"I am \"12 years\" old\"\"\") == [(\"12 years\",)]\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_quotation('Hi \"There\" how are you') == \"Hi There how are you\"\nassert     extract_quotation('This is a string that needs to be recover') == \"This is a string that needs to be recover\"\nassert     extract_quotation('A \"B C\" is a string') == \"A B C\"\nassert     extract_quotation('A \"B C\" is a string') == \"A B C\"\nassert     extract_quotation('A \"B C\" is a string') == \"A B C\"\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_quotation('Hello, World!') == 'Hello, World!'\nassert     extract_quotation('\"Hello, World!\"') == 'Hello, World!'\nassert     extract_quotation('Hello, World!\\' \"') == 'Hello, World!'\nassert     extract_quotation('\"Hello, World!\\' \"') == 'Hello, World!'\n\ndef find_string(string1, string2):\n    '''\n    Write a function to find the position of the first occurrence of a substring in a given string, \n    if it exists, otherwise return -1.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_quotation('''\n    I'm free \n    ''') == ['I','','m','', 'free']\nassert     extract_quotation('''\n    Don't cheat on me \n    ''') == ['Don','', 't','', 'cheat','', 'on','','me','']\nassert     extract_quotation('''\n    \"Don't cheat on me\" \n    ''') == ['\"', 'Don','', 't','', 'cheat','', 'on','','me', '\"']\n\ndef is_palindrome(string1):\n    '''\n    Given a string, find if it is a palindrome or not.\n    A palindrome is a string that reads the same from its both ends.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_quotation(\"Hello, I am \\\"C. Y. Lin\\\".\") == \"C. Y. Lin\"\nassert     extract_quotation(\"Hello, I am \\\"C.Y. Lin\\\".\") == \"C.Y. Lin\"\nassert     extract_quotation(\"Hello, I am \\\"C.Y. Lin\\\".\") == \"C.Y. Lin\"\nassert     extract_quotation(\"Hello, I am \\\"C.Y. Lin\\\".\") == \"C.Y. Lin\"\nassert     extract_quotation(\"Hello, I am \\\"C.Y. Lin\\\".\") == \"C.Y. Lin\"\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_quotation('\"3\"') == '3'\nassert     extract_quotation('\"3\" \"3\" \"3\"') == '3 3 3'\nassert     extract_quotation('\"3\" 3') == '3'\nassert     extract_quotation('\"3\" 3 \"3\"') == '3 3'\nassert     extract_quotation('\"3\" 3 \"3\"') == '3 3'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_quotation('hello\"world') == 'hello world'\nassert     extract_quotation('This is a test string') == 'This is a test string'\nassert     extract_quotation('\"Hello\"world') == 'Hello'\nassert     extract_quotation('Hello world') == 'Hello world'\nassert     extract_quotation('\"Hello\"') == 'Hello'\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_quotation('The story was told on a scale from 1 to 5, with 1 being the least interesting and 5 being the most interesting.') == [1, 2, 3, 4, 5]\nassert extract_quotation('The story was told on a scale from 1 to 5, with 1 being the least interesting and 5 being the most interesting.') == [1, 2, 3, 4, 5]\nassert extract_quotation('The story was told on a scale from 1 to 5, with 1 being the least interesting and 5 being the most interesting.') == [1, 2, 3, 4, 5]\nassert extract_quotation('The story was told on a scale from 1 to 5, with 1 being the least interesting and 5 being the most interesting.') == [1, 2, 3, 4, 5]\nassert extract_quotation('The story was told on a scale from 1 to 5, with 1 being the least interesting and 5 being the most interesting.') == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     extract_quotation('The first \"Canadian\" president of the United States') ==     [('Canadian', 'Canadian')]\nassert     extract_quotation('The first \"Canadian\" president of the United States') ==     [('Canadian', 'Canadian')]\nassert     extract_quotation('The first \"Canadian\" president of the United States') ==     [('Canadian', 'Canadian')]\nassert     extract_quotation('The first \"Canadian\" president of the United States') ==     [('Canadian', 'Canadian')]\nassert     extract_quotation('The first \"Canadian\" president of the United States') ==     [('Canadian', 'Canadian')]\n"
    },
    {
        "number": 725,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_quotation(\"\\\"H.W.I.C.E.\\\" said \\\"I love studying Python.\\\"\") ==     [\"\\\"H.W.I.C.E.\\\"\", \"\\\"I love studying Python.\\\"\"]\nassert     extract_quotation(\"\\\"H.W.I.C.E.\\\" said \\\"I love studying Python.\\\"\")!=     [\"\\\"H.W.I.C.E.\\\"\", \"\\\"I love studying Python.\\\"\"]\nassert     extract_quotation(\"\\\"H.W.I.C.E.\\\" said \\\"I love studying Python.\\\"\")!=     [\"\\\"H.W.I.C.E.\\\"\", \"\\\"I love studying Python.\\\"\"]\nassert     extract_quotation(\"\\\"H.W.I.C.E.\\\" said \\\"I love studying Python.\\\"\")!=     [\"\\\"H.W.I.C.E.\\\"\", \"\\\"I love studying Python.\\\"\"]\nassert     extract_quotation(\"\\\"H.W.I.C.E.\\\" said \\\"I love studying Python.\\\"\")!=     [\"\\\"H.W.I.C.E.\\\"\", \"\\\"I love studying Python.\\\"\"]\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply_elements((1,3,2)) == (3, 6, 4), \"incorrect\"\nassert     multiply_elements((5,1,4,6)) == (5, 25, 80, 150), \"incorrect\"\nassert     multiply_elements((8,2,3,4)) == (8, 48, 96, 192), \"incorrect\"\nassert     multiply_elements((1,2,3,4,5,6)) == (6, 24, 120, 720, 360, 180), \"incorrect\"\n\ndef last_index(t, s):\n    '''\n    Write a function that takes as input a tuple t and a string s and returns the index of the last element of t (after the first) equal to s.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply_elements(('2','2','3','4')) == ('8','8','24','16')\nassert     multiply_elements(('1','3','2','4')) == ('3','6','6','12')\nassert     multiply_elements(('3','2','3','4')) == ('12','6','6','12')\nassert     multiply_elements(('1','1','1','1')) == ('4','2','2','4')\nassert     multiply_elements(('0','3','5','9')) == ('0','3','5','9')\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply_elements((1,2,3,4,5)) == (120,60,40,30,24)\nassert     multiply_elements((1,2,3,4,5,6)) == (720,300,240,180,120)\nassert     multiply_elements((1,2,3,4,5,6,7,8,9,10)) == (3628800, 25200, 21696, 150880, 70480)\n\n\ndef compare_lists(list1,list2):\n    '''\n    Write a function that takes as input two lists of numbers (list1 and list2), and returns True if list1 is equal to list2 and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply_elements((0,2,4,6,8,10)) == (0, 4, 8, 12, 16, 20)\nassert     multiply_elements((0,4,10,20,50,100)) == (0,4,10,20,50,100)\nassert     multiply_elements((1,3,5,7,9)) == (1, 3, 5, 7, 9)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply_elements( (2,5,6,7,8) ) == (2*5,5*6,6*7,7*8,8*9)\nassert     multiply_elements( (2,4,3,1) ) == (2*4,4*3,3*1,1*2)\nassert     multiply_elements( (3,5,8) ) == (3*5,5*8,8*9)\nassert     multiply_elements( (1,2,3,4,5) ) == (1*2,2*3,3*4,4*5,5*6)\nassert     multiply_elements( (4,5,6,7,8) ) == (4*5,5*6,6*7,7*8,8*9)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef is_pandigital(test_list):\n    '''\n    Write a function that takes as input a list of digits (t_1,...,t_{N+1}) and returns True if it is a pandigital number and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply_elements(('a', 'b', 'c')) == ('ab', 'ba', 'ac')\nassert     multiply_elements(('a', 'b')) == ('aa', 'bb')\nassert     multiply_elements(('a')) == ('aa',)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (multiply_elements( (1,2,3,4) )    ==    (1,2,3,4) )\nassert     (multiply_elements( (2,4,6,8) )    ==    (2,8,12,16) )\nassert     (multiply_elements( (1,3,5,7) )    ==    (1,3,5,7) )\nassert     (multiply_elements( (1,0,1,4) )    ==    (0,0,1,4) )\nassert     (multiply_elements( (3,0,2,0) )    ==    (0,0,6,0) )\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 4, 9, 16, 25)\nassert     multiply_elements((-1, 2, 3, 4, 5)) == (-1, 2, 3, 4, 5)\nassert     multiply_elements((3, 2, -4, -5)) == (-12, 8, -20, -30)\nassert     multiply_elements((3, 2, -4, -5, 0)) == (-12, 8, -20, -30, 0)\nassert     multiply_elements((-3, 2, -4, -5)) == (6, 8, 12, 15)\n"
    },
    {
        "number": 726,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply_elements((10,20,30))     == (10*20*30, )\nassert     multiply_elements((2,2,2,2))     == (2**4, )\nassert     multiply_elements((2,3,4,5))     == (2*3*4*5, )\nassert     multiply_elements((3,))         == (3, )\n\ndef digitize(number, base):\n    '''\n    Write a function that takes as input a nonnegative integer number and an integer base, and returns the representation of this number in the given base.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_list( [1,2,3], [4,5,6] ) == [5,7,9]\nassert     sum_list( [1,2,3], [4,5,6,7] ) == [5,7,9]\nassert     sum_list( [], [4,5,6] ) == [4,5,6]\nassert     sum_list( [1], [4,5,6] ) == [5,7,9]\nassert     sum_list( [1,2,3,4], [5,6] ) == [6,8,10,12]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [1,2,3,4,5,6], \"Error: incorrect result\"\nassert     sum_list([-3,2,-1],[1,0,3]) == [-3,1,4,1,0,3], \"Error: incorrect result\"\nassert     sum_list([0],[0]) == [0], \"Error: incorrect result\"\nassert     sum_list([0],[]) == [], \"Error: incorrect result\"\nassert     sum_list([],[0]) == [], \"Error: incorrect result\"\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_list([1,2,3],[3,4,5]) == [1,2,4,5]\nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\n\ndef count_list(lst):\n    '''\n    Write a function takes as input a list [a_1,...,a_n] and returns a dictionary with two keys:\n    \"occurences\" (integer) and \"total\" (integer) whose values correspond to the number of occurrences\n    and the total number of elements respectively.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3,4],[2,3,4,5])     == [3,6,9,12], 'incorrect'\nassert     sum_list([2,3,4],[1,2,3,4])     == [3,6,9,12], 'incorrect'\nassert     sum_list([1,2,3,4],[3,4,5])     == [4,6,7,8], 'incorrect'\nassert     sum_list([5,5,5,5,5],[3,4,5,5])     == [8,10,15,20], 'incorrect'\nprint('sum_list correctly implemented')\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2],[]) == [1,2]\nassert     sum_list([],[4,5,6]) == [4,5,6]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([4,6,1],[3,5,7]) == [9,11,13]\nassert     sum_list([1,2,3,4,5],[2,4,6,7,8]) == [3,6,11,15,18]\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_list([1,2,3,4],[5,6,7,8])==[6,8,10,12], \"Failed\"\nassert     sum_list([9,8,7],[10,11,12])==[12,13,15], \"Failed\"\nassert     sum_list([1,2,3,4],[])==[1,2,3,4], \"Failed\"\nassert     sum_list([1,2,3,4],[])==[1,2,3,4], \"Failed\"\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [15,25,35,45,55]     == sum_list([2,4,6,8,10],[1,2,3,4,5])\nassert     [-4,-8,-12,-16,-20]    == sum_list([10,20,30,40,50],[5,6,7,8,9])\nassert     [10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48]     == sum_list([2,3,4,5,6,7,8,9],[3,4,5,6,7,8,9,10,11,12,13,14])\nassert     [100,200,300,400,500,600] == sum_list([2,4,6,8,10],[1,2,3,4,5])\nassert     [3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60] == sum_list([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48],[3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60])\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sum_list([1,2,3], [4,5,6]) == [5,7,9])\nassert     (sum_list([1,2,3], [4,5]) == [5,7,9])\nassert     (sum_list([1,2,3], []) == [1,2,3])\nassert     (sum_list([], [1,2,3]) == [1,2,3])\nassert     (sum_list([1,2,3], []) == [1,2,3])\n"
    },
    {
        "number": 728,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [3, 5, 7, 9, 11, 13] == sum_list([1,2,3,4,5],[6,7,8,9,10,11])\nassert     [2, 4, 6, 8, 10, 12] == sum_list([-1,0,1,2,3,4],[-2,-1,0,1,2,3])\nassert     [0, 0, 0, 0, 0, 0] == sum_list([0,0,0,0,0,0],[0,0,0,0,0,0])\nassert     [-5, -6, -7, -8, -9, -10] == sum_list([0,-1,-2,-3,-4,-5],[0,1,2,3,4,5])"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 4, 4, 4]) == [1, 2, 3]\nassert     consecutive_duplicates([1, 1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([1, 2, 2, 3, 4, 3, 2, 2, 1, 3, 2, 1]) == [1, 2, 3, 4]\n\ndef is_permutation(s1, s2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1,1,1,1,2,3,4,5,5,5,5,5,5,5,5,5,5,5]) == [1,2,3,4,5]\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert consecutive_duplicates([1, 1, 1, 1, 1, 2, 2, 2, 2, 3]) == [1, 2, 3]\nassert consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 3, 3]) == [1, 2, 3]\nassert consecutive_duplicates([1, 1, 2, 2, 2, 2, 3, 3]) == [1, 2, 3]\nassert consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 7] == consecutive_duplicates([1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 7])\nassert     [1, 2, 2, 3, 4, 5, 6, 6, 7] == consecutive_duplicates([1, 2, 2, 3, 4, 5, 6, 6, 7])\nassert     [1, 2, 2, 3, 4, 5, 6, 6, 7] == consecutive_duplicates([1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7])\nassert     [1, 2, 2, 3, 4, 5, 6, 6, 7] == consecutive_duplicates([1, 2, 2, 3, 4, 5, 6, 6, 7, 7, 7, 7])\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5,5,5,6,7,8,8,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert consecutive_duplicates([1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,8,9,9,10,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert consecutive_duplicates([1,2,3,4,4,5,5,5,6,6,7,7,8,8,8,9,9,10,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert consecutive_duplicates([1,2,3,4,5,5,5,6,6,7,7,8,8,8,9,9,10,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert consecutive_duplicates([1,2,3,4,5,5,5,6,7,7,8,8,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1,1,1,3,3,4,4,4] == consecutive_duplicates([1,1,1,3,3,4,4,4])\nassert     [1,3,3] == consecutive_duplicates([1,1,1,2,2,3,3,3,3,4,4,4])\nassert     [1,2,3] == consecutive_duplicates([1,1,1,2,2,3,3,3,3,4,4,4])\nassert     [1,2,3,4] == consecutive_duplicates([1,1,1,2,2,3,3,3,3,4,4,4])\nassert     [1,2,3,4] == consecutive_duplicates([1,2,3,4])\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([2, 2, 2, 3, 3, 3]) == [2, 3]\nassert     consecutive_duplicates([2, 2, 2, 3, 3, 3, 3]) == [2, 3]\nassert     consecutive_duplicates([2, 3, 3, 3, 3, 3, 3]) == [3]\nassert     consecutive_duplicates([2, 2, 2, 2, 3]) == [2]\n\ndef search_rotated_sorted_array(arr, ele):\n    '''\n    You are given an array arr which consists of non-negative integers and an \n    integer x. Your task is to find the index of the first occurrence of x in \n    arr if it is present, otherwise, return -1.\n    arr is not necessarily sorted.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates([1, 4, 3, 3, 2]) == [1, 4, 2]\nassert consecutive_duplicates([1, 4, 3, 3, 2, 1, 4, 3, 3, 2]) == [1, 4, 2]\n\ndef sort_the_list(nums):\n    '''\n    Write a function to sort a list of numbers in increasing order.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([1, 4, 5, 5, 5, 6, 6, 6]) == [1, 4, 5, 6]\nassert     consecutive_duplicates([4, 4, 5, 6, 6, 6]) == [4]\nassert     consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     consecutive_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     consecutive_duplicates([]) == []\n"
    },
    {
        "number": 730,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 2, 3, 4, 4, 4]) == [[1], [2], [3], [4], [4]]\nassert     consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5]) == [[1], [2], [3], [4], [4], [5]]\nassert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1]) == [[1]]\nassert     consecutive_duplicates([1, 1]) == [[1], [1]]\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     lateralsurface_cone(1,2) == 3.1415\nassert     lateralsurface_cone(2,3) == 6.283\nassert     lateralsurface_cone(3,4) == 10.097\nassert     lateralsurface_cone(4,5) == 13.566\nassert     lateralsurface_cone(5,6) == 17.797\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (lateralsurface_cone(r=1,h=2)    ==     3.141592654)\nassert     (lateralsurface_cone(r=2,h=2)    ==     7.282152874)\nassert     (lateralsurface_cone(r=1,h=0)    ==     0)\nassert     (lateralsurface_cone(r=0,h=0)    ==     0)\nassert     (lateralsurface_cone(r=-1,h=0)    ==     0)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lateralsurface_cone(2,2)    == 14.2187\nassert     lateralsurface_cone(1.5,1.5)    == 1.82263\nassert     lateralsurface_cone(2,3)    == 3.83437\nassert     lateralsurface_cone(2,4)    == 5.4265\nassert     lateralsurface_cone(2,5)    == 6.8907\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (lateralsurface_cone(2,3)==math.pi*3.0*2**0.5), \"Assertion error: lateralsurface_cone() has been implemented incorrectly!\"\nassert     (lateralsurface_cone(4,3)==math.pi*3.0*4**0.5), \"Assertion error: lateralsurface_cone() has been implemented incorrectly!\"\nassert     (lateralsurface_cone(7,3)==math.pi*3.0*7**0.5), \"Assertion error: lateralsurface_cone() has been implemented incorrectly!\"\nassert     (lateralsurface_cone(10,3)==math.pi*3.0*10**0.5), \"Assertion error: lateralsurface_cone() has been implemented incorrectly!\"\nprint \"Passed! You have implemented lateralsurface_cone() correctly!\"\n\ndef volumetricvolume(r,h):\n    '''\n    Write a function to find the volumetric volume of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     math.pi * (r**2 - r*math.sqrt(h**2 + r**2)) == lateralsurface_cone(r,h)\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lateralsurface_cone(2,10) == math.pi*math.pow(5,2)/4\nassert     lateralsurface_cone(1,10) == math.pi*math.pow(3,2)/4\nassert     lateralsurface_cone(0.5,10) == math.pi*math.pow(1.5,2)/4\nassert     lateralsurface_cone(0.4,10) == math.pi*math.pow(0.8,2)/4\nassert     lateralsurface_cone(0.1,10) == math.pi*math.pow(0.4,2)/4\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lateralsurface_cone(2,3) == 3.14159265358979, lateralsurface_cone(2,3)\nassert     lateralsurface_cone(3,5) == 22.025, lateralsurface_cone(3,5)\nassert     lateralsurface_cone(8,12) == 564.96, lateralsurface_cone(8,12)\n\nassert     lateralsurface_cone(7,7) == 28.62643121337, lateralsurface_cone(7,7)\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lateralsurface_cone(1,2) == 0.7853981633974483\nassert     lateralsurface_cone(2,2) == 1.0\nassert     lateralsurface_cone(3,2) == 1.7380506896972647\nassert     lateralsurface_cone(5,2) == 3.6180339887498949\nassert     lateralsurface_cone(7,2) == 4.9486832980505605\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lateralsurface_cone(2, 3) == 21.510, \"Test 1\"\nassert     lateralsurface_cone(4, 6) == 68.7775, \"Test 2\"\nassert     lateralsurface_cone(2, 6) == 58.8720, \"Test 3\"\nassert     lateralsurface_cone(0, 0) == 0, \"Test 4\"\nassert     lateralsurface_cone(1, 0) == 0, \"Test 5\"\n"
    },
    {
        "number": 731,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lateralsurface_cone(1,2) == math.pi * 1.0**2\nassert     lateralsurface_cone(1,3) == math.pi * 1.0**2\nassert     lateralsurface_cone(1,4) == math.pi * 1.0**2\nassert     lateralsurface_cone(1,5) == math.pi * 2.0**2\nassert     lateralsurface_cone(1,6) == math.pi * 3.0**2\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_specialchar('a1b2c3') == 'a1b2c3', \\\n            'failed to replace_specialchar: a1b2c3'\nassert     replace_specialchar('a1b2c') == 'a1b2c', \\\n            'failed to replace_specialchar: a1b2c'\nassert     replace_specialchar('a1b2') == 'a1b2', \\\n            'failed to replace_specialchar: a1b2'\nassert     replace_specialchar('a1b') == 'a1b', \\\n            'failed to replace_specialchar: a1b'\nassert     replace_specialchar('a') == 'a', \\\n            'failed to replace_specialchar: a'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_specialchar('Hello, world!') == 'Hello:world',     'Hello, world!'\nassert     replace_specialchar('3.14, 15') == '3:14:15',     '3.14, 15'\nassert     replace_specialchar('3.14, 15') == '3:14:15',     '3.14, 15'\nassert     replace_specialchar('12,3,4,5,6') == '12:3:4:5:6',     '12,3,4,5,6'\nassert     replace_specialchar('12,3,4,5,6') == '12:3:4:5:6',     '12,3,4,5,6'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     re.sub('[:;,. ]+', ':', 'This is a test of replacing spaces, commas, and dots. No actual replacing is performed.') == 'This:is:a:test:of:replacing:spaces,commas,and:dots.No:actual:replacing:is:performed.'\nassert     re.sub('[:;,. ]+', ':', 'This is a test of replacing spaces, commas, and dots. No actual replacing is performed.') == 'This:is:a:test:of:replacing:spaces,commas,and:dots.No:actual:replacing:is:performed.'\nassert     re.sub('[:;,. ]+', ':', 'This is a test of replacing spaces, commas, and dots. No actual replacing is performed.') == 'This:is:a:test:of:replacing:spaces,commas,and:dots.No:actual:replacing:is:performed.'\nassert     re.sub('[:;,. ]+', ':', 'This is a test of replacing spaces, commas, and dots. No actual replacing is performed.') == 'This:is:a:test:of:replacing:spaces,commas,and:dots.No:actual:replacing:is:performed.'\nassert     re.sub('[:;,. ]+', ':', 'This is a test of replacing spaces, commas, and dots. No actual replacing is performed.') == 'This:is:a:test:of:replacing:spaces,commas,and:dots.No:actual:replacing:is:performed.'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_specialchar('Hi, how are you?  I\\'m fine.  And you?') == 'Hi: how are you: I\\'m fine.  And you?'\nassert     replace_specialchar('Hi, how are you?  I\\'m fine.  And you?') == 'Hi: how are you? I\\'m fine. And you?'\nassert     replace_specialchar('Hi, how are you?  I\\'m fine.  And you?') == 'Hi: how are you? I\\'m fine. And you?'\nassert     replace_specialchar('Hi, how are you?  I\\'m fine.  And you?') == 'Hi: how are you? I\\'m fine. And you?'\n\ndef remove_punctuation(text):\n    '''\n    Write a function to remove the punctuation in a string, and returns the result.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_specialchar(\"1 2 3 4 5.6 7 8 9\") == \"1:2:3:4:5.6:7:8:9\"\nassert     replace_specialchar(\"1, 2 3 4 5.6 7 8 9\") == \"1:2:3:4:5.6:7:8:9\"\nassert     replace_specialchar(\"1, 2 3 4 5.6 7 8 9.\") == \"1:2:3:4:5.6:7:8:9.\"\nassert     replace_specialchar(\"1,2,3,4,5,6,7,8,9\") == \"1:2:3:4:5:6:7:8:9\"\nassert     replace_specialchar(\"1,2,3,4,5,6,7,8,9,.\") == \"1:2:3:4:5:6:7:8:9:.\"\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_specialchar('a,b,c') == 'a:b:c'\nassert     replace_specialchar('a b c') == 'a:b:c'\nassert     replace_specialchar('a.b.c') == 'a:b:c'\nassert     replace_specialchar('a,b,c,') == 'a:b:c,'\nassert     replace_specialchar('a. b. c') == 'a:b:c'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_specialchar('A series of dots.... is a series of dots.....') == 'A series of colons :.....'\nassert     replace_specialchar('A series of commas,,,,,,,,,,,,,,, is a series of commas............') == 'A series of colons :,,,,,,,,,,,,,,, is a series of colons............'\nassert     replace_specialchar('A series of dots..... is a series of dots......') == 'A series of colons :.....'\nassert     replace_specialchar('A series of commas,,,,,,,,,,,,,,,, is a series of commas............') == 'A series of colons :,,,,,,,,,,,,,,, is a series of colons............'\nassert     replace_specialchar('A series of dots..... is a series of dots......') == 'A series of colons :.....'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef split_string(string):\n    '''\n    Write a function that takes a string as input and returns a list of the words in the string.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_specialchar('Hi, My name is Jason. Hi, my name is Jason. ') == 'Hi: My name is Jason. Hi: my name is Jason.'\nassert     replace_specialchar('Hi, My name is Jason. Hi, my name is Jason. ') == 'Hi: My name is Jason. Hi: my name is Jason.'\nassert     replace_specialchar('Hi, My name is Jason. Hi, my name is Jason. ') == 'Hi: My name is Jason. Hi: my name is Jason.'\nassert     replace_specialchar('Hi, My name is Jason. Hi, my name is Jason. ') == 'Hi: My name is Jason. Hi: my name is Jason.'\nassert     replace_specialchar('Hi, My name is Jason. Hi, my name is Jason. ') == 'Hi: My name is Jason. Hi: my name is Jason.'\n"
    },
    {
        "number": 732,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_specialchar(\"A.B\") == \"A:B\", replace_specialchar(\"A.B\")\nassert     replace_specialchar(\"1,2,3\") == \"1:2:3\", replace_specialchar(\"1,2,3\")\nassert     replace_specialchar(\"1.2.3\") == \"1:2:3\", replace_specialchar(\"1.2.3\")\nassert     replace_specialchar(\"1.2.3.4\") == \"1:2:3:4\", replace_specialchar(\"1.2.3.4\")\nassert     replace_specialchar(\"1.2.3.4.5\") == \"1:2:3:4:5\", replace_specialchar(\"1.2.3.4.5\")\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_first_occurrence([1,2,3,4,5], 5) == 4\nassert     find_first_occurrence([1,2,3,4,5], 1) == 0\nassert     find_first_occurrence([1,2,3,4,5], 6) == -1\nassert     find_first_occurrence([1,2,3,4,5], 3) == 2\nassert     find_first_occurrence([3,4,5,6,7,0,1,2], 3) == 3\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_first_occurrence([1, 2, 2, 2, 2, 2, 3, 4, 5, 5], 2) == 5\nassert     find_first_occurrence([1, 2, 2, 2, 2, 2, 3, 4, 5, 5], 3) == -1\nassert     find_first_occurrence([1, 2, 2, 2, 2, 2, 3, 4, 5, 5], 5) == 11\nassert     find_first_occurrence([1, 2, 2, 2, 2, 2, 3, 4, 5, 5], 6) == -1\nassert     find_first_occurrence([], 3) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_first_occurrence([1,2,3,3,3,4,5], 3) == 2\nassert     find_first_occurrence([1,2,3,3,3,4,5], 6) == -1\n\n\ndef find_first_occurrence_2(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_first_occurrence([1,2,2,2,2,2,3,3,3,3], 2) == 5\nassert     find_first_occurrence([1,2,2,2,2,2,3,3,3,3], 3) == 8\nassert     find_first_occurrence([1,2,2,2,2,2,3,3,3,3], 4) == -1\nassert     find_first_occurrence([1,2,2,2,2,2,3,3,3,3], 2) == 0\nassert     find_first_occurrence([1,2,2,2,2,2,3,3,3,3], 1) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         find_first_occurrence([1,3,5,7,9,11,13,15,17,19], 19) == 5\nassert         find_first_occurrence([1,3,5,7,9,11,13,15,17,19], 5) == 1\nassert         find_first_occurrence([1,3,5,7,9,11,13,15,17,19], 7) == 3\nassert         find_first_occurrence([1,3,5,7,9,11,13,15,17,19], 17) == 8\nassert         find_first_occurrence([1,3,5,7,9,11,13,15,17,19], 18) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_first_occurrence([1,2,3,3,4,5], 2) == 1\nassert     find_first_occurrence([1,2,3,4,4,4,5,5,6,6], 4) == 4\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_first_occurrence([1,2,2,2,2,3], 2) == 3\nassert     find_first_occurrence([1,2,2,2,2,3], 3) == 5\nassert     find_first_occurrence([1,2,2,2,2,3], 4) == None\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6,7,7,8,8,9,9,9], 8) == 8\nassert     find_first_occurrence([1,2,3,4,5,6,7,7,8,8,9,9,9], 9) == 9\nassert     find_first_occurrence([1,2,3,4,5,6,7,7,8,8,9,9,9], 3) == 2\nassert     find_first_occurrence([1,2,3,4,5,6,7,7,8,8,9,9,9], 1) == 0\nassert     find_first_occurrence([1,2,3,4,5,6,7,7,8,8,9,9,9], -1) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_first_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8], 2) == 4\nassert     find_first_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8], 3) == 6\nassert     find_first_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8], 5) == -1\n\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_first_occurrence([1,3,4,5,5,6,7], 5) == 5\nassert     find_first_occurrence([1,3,4,5,5,6,7], 8) == -1\nassert     find_first_occurrence([1,3,4,5,5,6,7], 1) == 0\nassert     find_first_occurrence([1,3,4,5,5,6,7], 2) == 1\nassert     find_first_occurrence([1,3,4,5,5,6,7], 8) == -1\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_Of_Subarray_Prod([10, 3, 5, 6, 2]) == 132\nassert     sum_Of_Subarray_Prod([-1, 2, -3, 4, -5]) == -25\nassert     sum_Of_Subarray_Prod([3, 5, -2, -3, -6]) == 61\nassert     sum_Of_Subarray_Prod([-1, -2, -3, -4, -5]) == -15\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 120\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_Of_Subarray_Prod([3,4,5,6]) == 120\nassert     sum_Of_Subarray_Prod([3,5,6]) == 180\nassert     sum_Of_Subarray_Prod([3,5,6,7,8,9,10]) == 24690\n\ndef Longest_Substring_with_K_Distinct(str, k):\n    '''\n    Write a python function to find the length of the longest substring of a string with at most k distinct characters.\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 64\nassert     sum_Of_Subarray_Prod([1, 1, 1, 1]) == 30\nassert     sum_Of_Subarray_Prod([3, 6, 4, 1]) == 72\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3043729974\n\ndef longest_Common_Prefix(strs):\n    '''\n    Write a python function to find the longest common prefix of multiple strings\n    https://www.geeksforgeeks.org/longest-common-prefix-of-strings-set-2-using-dictionaries/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 24\nassert     sum_Of_Subarray_Prod([-1,-2,1,2,3,-4]) == 32\nassert     sum_Of_Subarray_Prod([1,-2,-3,-4]) == -12\nassert     sum_Of_Subarray_Prod([1,1,1,1,1,1,1,1,1]) == 28\nassert     sum_Of_Subarray_Prod([-1,-1,-1,-1,-1,-1]) == 0\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sum_Of_Subarray_Prod([1,2,3,4]) == 60)\nassert     (sum_Of_Subarray_Prod([1,2,3]) == 0)\nassert     (sum_Of_Subarray_Prod([1,2,3,4,5]) == 240)\nassert     (sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10]) == 1680)\nassert     (sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 124800)\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_Of_Subarray_Prod([4,5,6,7]) == 1177798\nassert     sum_Of_Subarray_Prod([1,2,3]) == 18\nassert     sum_Of_Subarray_Prod([-1,-2,-3]) == -18\nassert     sum_Of_Subarray_Prod([4,5,6,7,8,9]) == 34177779\nassert     sum_Of_Subarray_Prod([]) == 0\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 45\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 360\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 14\n\ndef sum_Of_Subarray_Prod_2(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i,n):\n            total += arr[i]*arr[j]\n\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_Of_Subarray_Prod([2,3,4,6,2,3,4,6]) == 280\nassert     sum_Of_Subarray_Prod([2,3,4]) == 0\nassert     sum_Of_Subarray_Prod([3,2,4,6]) == 24\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 12\nassert     sum_Of_Subarray_Prod([5,5,5,5]) == 50\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_Of_Subarray_Prod([-4,3,5,6,-7,-2,3,2,5,-1,-2,6,-1,-2]) == \\\n        4*(-4)*(3)*(5)*(6)*(7)*(-7)*(-2)*(3)*(-2)*(5)*(2)*(6)*(1)*(-2)\n\ndef find_Diff_in_Sum_Prod(arr):\n    '''\n    Write a python function to find the difference of sum of product of all possible sublists and sum of list elements\n    https://www.geeksforgeeks.org/find-the-difference-of-sum-of-product-of-all-possible-sublists-and-sum-of-list-elements/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([8,2,6,5,7]) == 138\nassert     sum_Of_Subarray_Prod([2,8,6,5,7]) == 37\nassert     sum_Of_Subarray_Prod([5,6,7]) == 0\nassert     sum_Of_Subarray_Prod([]) == 0\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     set_middle_bits(20) == 4\nassert     set_middle_bits(100) == 80\nassert     set_middle_bits(7) == 0\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     set_middle_bits(10) == 14\nassert     set_middle_bits(11) == 13\nassert     set_middle_bits(12) == 12\nassert     set_middle_bits(13) == 11\nassert     set_middle_bits(15) == 13\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     set_middle_bits(4) == 12\nassert     set_middle_bits(8) == 80\nassert     set_middle_bits(5) == 5\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     set_middle_bits(10) == 15\nassert     set_middle_bits(19) == 111\nassert     set_middle_bits(7) == 11\nassert     set_middle_bits(19) == 111\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (set_middle_bits(0) == 0)\nassert     (set_middle_bits(15) == 15)\nassert     (set_middle_bits(128) == 254)\nassert     (set_middle_bits(1) == 3)\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     set_middle_bits(9) == 8\nassert set_middle_bits(3) == 3\nassert set_middle_bits(0) == 1\nassert set_middle_bits(1) == 3\nassert set_middle_bits(2) == 4\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     set_middle_bits(0) == 0\nassert     set_middle_bits(5) == 4\nassert     set_middle_bits(10) == 8\nassert     set_middle_bits(15) == 12\nassert     set_middle_bits(18) == 16\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     set_middle_bits(9) == 6\nassert     set_middle_bits(24) == 8\nassert     set_middle_bits(0) == 0\nassert     set_middle_bits(6) == 10"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     set_middle_bits(2) == 3\nassert     set_middle_bits(3) == 5\nassert     set_middle_bits(0) == 0\nassert     set_middle_bits(4) == 8\n"
    },
    {
        "number": 735,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     set_middle_bits(0b11) == 0b0011\nassert     set_middle_bits(0b101) == 0b10001\nassert     set_middle_bits(0b10101) == 0b1000101\nassert     set_middle_bits(0b10100) == 0b1000101\nassert     set_middle_bits(0b110101) == 0b11010101\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     left_insertion([1,2,3,4,5,6,7,8,9,10], 11) == 6\nassert     left_insertion([1,2,3,4,5,6,7,8,9,10], 11) == 10\nassert     left_insertion([1,2,3,4,5,6,7,8,9,10], 10) == 8\nassert     left_insertion([1,2,3,4,5,6,7,8,9,10], 9) == 7\nassert     left_insertion([1,2,3,4,5,6,7,8,9,10], 8) == 6\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     left_insertion([1,2,3,4,5,6,7,8,9,10,11], 4) == 4\nassert     left_insertion([1,2,3,4,5,6,7,8,9,10,11], 1) == 1\nassert     left_insertion([1,2,3,4,5,6,7,8,9,10,11], 12) == 11\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     left_insertion([1,2,3,4], 4) == 3\nassert     left_insertion([1,2,3,4,5], 4) == 3\nassert     left_insertion([1,2,3,4], 2) == 3\nassert     left_insertion([1,2,3,4,5], 2) == 3\nassert     left_insertion([1,2,3,4,5], 3) == 4\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     left_insertion(range(10), 2) == 1\nassert     left_insertion(range(10), 22) == 9\nassert     left_insertion(range(10), 100) == 0\nassert     left_insertion([1, 2, 3, 4, 5, 6, 7], 2) == 1\nassert     left_insertion([1, 2, 3, 4, 5, 6, 7], 22) == 6\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     left_insertion([1,2,3,4,5,6,7], 5) == 5\nassert left_insertion([1,2,3,4,5,6,7], 10) == 7\nassert     left_insertion([1,2,3,4,5,6,7], 0) == 0\nassert     left_insertion([1,2,3,4,5,6,7], 4) == 4\nassert     left_insertion([1,2,3,4,5,6,7], 6) == 6\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     left_insertion(list(range(10, 0, -1)), 5) == 9\nassert left_insertion(list(range(10, 0, -1)), 0) == 0\nassert left_insertion(list(range(10, 0, -1)), 10) == 0\nassert left_insertion(list(range(10, 0, -1)), 1) == 9\nassert left_insertion(list(range(10, 0, -1)), 10) == 9\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     left_insertion([1, 2, 3, 3, 4], 3) == 2\nassert     left_insertion([1, 2, 3, 4, 5], 3) == 1\nassert     left_insertion([1, 3, 5, 7, 9], 5) == 1\nassert     left_insertion([1, 3, 5, 7, 9], 1) == 0\nassert     left_insertion([1, 3, 5, 7, 9], 0) == 4\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef insert_sort(a):\n    '''\n    Write a function to sort an array in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-25.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     left_insertion([1, 3, 5, 6], 4) == 3\nassert left_insertion([1, 3, 5, 6], 7) == 4\nassert left_insertion([1, 3, 5, 6], 2) == 1\nassert left_insertion([1, 3, 5, 6], 0) == 0\nassert left_insertion([1, 3, 5, 6], -1) == 0\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert re.match(check_str(\"racecar\"), True)\nassert re.match(check_str(\"ear\"), True)\nassert re.match(check_str(\"a_\"), True)\nassert re.match(check_str(\"a\"), False)\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_str('abba') == True\nassert     check_str('Abab') == False\nassert     check_str('Abba') == False\nassert     check_str('ab') == False\nassert     check_str('bab') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_str('baee_') == True\nassert     check_str('baee') == True\nassert     check_str('aaee') == True\nassert     check_str('aaeeaeee') == False\n\ndef check_regex(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_str('a') == True         # assert method checks whether the function returns True or False\nassert     check_str('a0') == False\nassert     check_str('ab') == True         # assert method checks whether the function returns True or False\nassert     check_str('ab0') == False\nassert     check_str('abc') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_str('a') == True, \"check_str('a')\"\nassert     check_str('u') == True, \"check_str('u')\"\nassert     check_str('e') == True, \"check_str('e')\"\nassert     check_str('AI') == True, \"check_str('AI')\"\nassert     check_str('AIU') == False, \"check_str('AIU')\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_str('cat') == True, 'cat should be a starting vowel'\nassert     check_str('dog') == False, 'dog should not be a starting vowel'\nassert     check_str('tiger') == False, 'tiger should not be a starting vowel'\nassert     check_str('tiger') == False, 'tiger should not be a starting vowel'\nassert     check_str('Tiger') == True, 'Tiger should be a starting vowel'\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_str(\"dog\") == True\nassert     check_str(\"cat\") == True\nassert     check_str(\"catdog\") == False\nassert     check_str(\"geeks\") == False\nassert     check_str(\"aeiouAEIOU\") == False\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_str('helloworld') == False, \"hello\"\nassert     check_str('helloworld!') == True, \"hello\"\nassert     check_str('this is a string.') == True, \"hello\"\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_str('k') == True\nassert     check_str('a') == True\nassert     check_str('aeiou') == True\nassert     check_str('AEIOU') == True\nassert     check_str('A') == True\n"
    },
    {
        "number": 737,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_str('yellow') == True\nassert     check_str('vowel') == True\nassert     check_str('word') == False\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     geometric_sum(3) == 2.5\nassert     geometric_sum(2) == 2.0\nassert     geometric_sum(5) == 7.0\nassert     geometric_sum(15) == 16.8\nassert     geometric_sum(100) == 1064.246423\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     geometric_sum(3) == 1 * 2 * 3\nassert     geometric_sum(5) == 1 * 2 * 3 * 4 * 5\nassert     geometric_sum(10) == 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(3) == 3\nassert     geometric_sum(5) == 22\nassert     geometric_sum(12) == 654\n\ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth fibonacci number. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-10.php\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 1.5\nassert     geometric_sum(3) == 2.0\nassert     geometric_sum(4) == 2.625\nassert     geometric_sum(5) == 3.25\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     geometric_sum(7) == 4\nassert     geometric_sum(5) == 3\nassert     geometric_sum(9) == 21\nassert     geometric_sum(15) == 845\nassert     geometric_sum(30) == 972\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     geometric_sum(5) == 2\nassert     geometric_sum(0) == 1\nassert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 3\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     geometric_sum(3) == 2.5\nassert     geometric_sum(5) == 22.5\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     geometric_sum(2) == 1\nassert     geometric_sum(3) == 0.5\nassert     geometric_sum(4) == 0.5\nassert     geometric_sum(5) == 0.166666666666667\nassert     geometric_sum(6) == 0.03125\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 5\nassert     geometric_sum(4) == 22\nassert     geometric_sum(5) == 12\n"
    },
    {
        "number": 738,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Index(8) == 70\nassert     find_Index(8) == 70\nassert     find_Index(7) == 63\nassert     find_Index(7) == 63\nassert     find_Index(6) == 54\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Index(3) == 2\nassert     find_Index(4) == 3\nassert     find_Index(5) == 4\nassert     find_Index(6) == 5\nassert     find_Index(7) == 6\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\n\ndef permutations(iterable, r):\n    '''\n    Write a python function to compute all permutations of a given iterable and return them as a list of tuples.\n    '''\n    if r == 0:\n        return [(tuple(sorted(iterable)))]\n    result = []\n    for i in xrange(len(iterable)):\n        element = iterable[i]\n        rest = iterable[:i] + iterable[i+1:]\n        for p in permutations(rest, r-1):\n            result.append((element,) + p)\n    return result\n\ndef partitions(n):\n    '''\n    Write a python function to compute all partitions of n and return them as a list of tuples. Each element in a tuple is a partition of n. https://www.quora.com/How-do-I-get-partitions-of-an-integer-n-or-how-do-I-find-partitions-of-a-number-n\n    '''\n    return [(n,)] if n else []\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Index(4) == 1\nassert     find_Index(6) == 3\nassert     find_Index(9) == 5\nassert     find_Index(10) == 7\nassert     find_Index(18) == 11\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Index(5) == 2\nassert     find_Index(6) == 3\nassert     find_Index(7) == 4\nassert     find_Index(8) == 5\nassert     find_Index(9) == 6\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Index(4) == 3 \nassert     find_Index(5) == 4 \nassert     find_Index(6) == 5 \nassert     find_Index(7) == 6 \nassert     find_Index(8) == 7 \n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Index(3)==0\nassert     find_Index(4)==0\nassert     find_Index(6)==0\nassert     find_Index(8)==1\nassert     find_Index(10)==2\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Index(0)         == 0\nassert     find_Index(1)         == 0\nassert     find_Index(2)         == 0\nassert     find_Index(3)         == 0\nassert     find_Index(4)         == 1\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Index(3) == 1\nassert     find_Index(5) == 4\nassert     find_Index(7) == 9\nassert     find_Index(10) == 26\nassert     find_Index(13) == 81\n"
    },
    {
        "number": 739,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nfind_Index(1) == 0\nfind_Index(2) == 0\nfind_Index(3) == 1\nfind_Index(4) == 1\nfind_Index(5) == 2\nfind_Index(6) == 2\nfind_Index(7) == 2\nfind_Index(8) == 3\nfind_Index(9) == 3\nfind_Index(10) == 4\nfind_Index(11) == 4\nfind_Index(12) == 5\nfind_Index(13) == 6\nfind_Index(14) == 6\nfind_Index(15) == 7\nfind_Index(16) == 7\nfind_Index(17) == 8\nfind_Index(18) == 9\nfind_Index(19) == 9\nfind_Index(20) == 10\nfind_Index(21) == 10\nfind_Index(22) == 11\nfind_Index(23) == 12\nfind_Index(24) == 12\nfind_Index(25) == 13\nfind_Index(26) == 14\nfind_Index(27) == 15\nfind_Index(28) == 16\nfind_Index(29) == 17\nfind_Index(30) == 18\nfind_Index(31) == 19\nfind_Index(32) == 19\nfind_Index(33) == 20\nfind_Index(34) == 21\nfind_Index(35) == 22\nfind_Index(36) == 22\nfind_Index(37) == 23\nfind_Index(38) == 24\nfind_Index(39) == 25\nfind_Index(40) == 26\nfind_Index(41) == 27\nfind_Index(42) == 28\nfind_Index(43) == 29\nfind_Index(44) == 29\nfind_Index(45) == 30\nfind_Index(46) == 31\nfind_Index(47) == 32\nfind_Index(48) == 32\nfind_Index(49) == 33\nfind_Index(50) == 34\nfind_Index(51) == 35\nfind_Index(52) == 36\nfind_Index(53) == 37\nfind_Index(54) == 38\nfind_Index(55) == 39\nfind_Index(56) == 39\nfind_Index(57) == 40\nfind_Index(58) == 41\nfind_Index(59) == 42\nfind_Index(60) == 43\nfind_Index(61) == 44\nfind_Index(62) == 45\nfind_Index(63) == 46\nfind_Index(64) == 47\nfind_Index(65) == 48\nfind_Index(66) == 49\nfind_Index(67) == 50\nfind_Index(68) == 51\nfind_Index(69) == 52\nfind_Index(70) == 53\nfind_Index(71) == 54\nfind_Index(72) == 55\nfind_Index(73) == 56\nfind_Index(74) == 57\nfind_Index(75) == 58\nfind_Index(76) == 59\nfind_Index(77) == 60\nfind_Index(78) == 61\nfind_Index(79) == 62\nfind_Index(80) == 63\nfind_Index(81) == 64\nfind_Index(82) == 65\nfind_Index(83) == 66\nfind_Index(84) == 67\nfind_Index(85) == 68\nfind_Index(86) == 69\nfind_Index(87) == 70\nfind_Index(88) == 71\nfind_Index(89) == 72\nfind_Index(90) == 73\nfind_Index(91) == 74\nfind_Index(92) == 75\nfind_Index(93) == 76\nfind_Index(94) == 77\nfind_Index(95) == 78\nfind_Index(96) == 79\nfind_Index(97) == 80\nfind_Index(98) == 81\nfind_Index(99) == 82\nfind_Index(100) == 83\nfind_Index(101) == 84\nfind_Index(102) == 85\nfind_Index(103) == 86\nfind_Index(104) == 87\nfind_Index(105) == 88\nfind_Index(106) == 89\nfind_Index(107) == 90\nfind_Index(108) == 91\nfind_Index(109) == 92\nfind_Index(110) == 93\nfind_Index(111) == 94\nfind_Index(112) == 95\nfind_Index(113) == 96\nfind_Index(114) == 97\nfind_Index(115) == 98\nfind_Index(116) == 99\nfind_Index(117) == 100\nfind_Index(118) == 101\nfind_Index(119) == 102\nfind_Index(120) == 103\nfind_Index(121) == 104\nfind_Index(122) == 105\nfind_Index(123) == 106\nfind_Index(124) == 107\nfind_Index(125) == 108\nfind_Index(126) == 109\nfind_Index(127) == 110\nfind_Index(128) == 111\nfind_Index(129) == 112\nfind_Index(130) == 113\nfind_Index(131) == 114\nfind_Index(132) == 115\nfind_Index(133) == 116\nfind_Index(134) == 117\nfind_Index(135) == 118\nfind_Index(136) == 119\nfind_Index(137) == 120\nfind_Index(138) == 121\nfind_Index(139) == 122\nfind_Index(140) == 123\nfind_Index(141) == 124\nfind_Index(142) == 125\nfind_Index(143) == 126\nfind_Index(144) == 127\nfind_Index(145) == 128\nfind_Index(146) == 129\nfind_Index(147) == 130\nfind_Index(148) == 131\nfind_Index(149) == 132\nfind_Index(150) == 133\nfind_Index(151) == 134\nfind_Index(152) == 135\nfind_Index(153) == 136\nfind_Index(154) == 137\nfind_Index(155) == 138\nfind_Index(156) == 139\nfind_Index(157) == 140\nfind_Index(158) == 141\nfind_Index(159) == 142\nfind_Index(160) == 143\nfind_Index(161) == 144\nfind_Index(162) == 145\nfind_Index(163) == 146\nfind_Index(164) == 147\nfind_Index(165) == 148\nfind_Index(166) == 149\nfind_Index(167) == 150\nfind_Index(168) == 151\nfind_Index(169) == 152\nfind_Index(170) == 153\nfind_Index(171) == 154\nfind_Index(172) == 155\nfind_Index(173) == 156\nfind_Index(174) == 157\nfind_Index(175) == 158\nfind_Index(176) == 159\nfind_Index(177) == 160\nfind_Index(178) == 161\nfind_Index(179) == 162\nfind_Index(180) == 163\nfind_Index(181) == 164\nfind_Index(182) == 165\nfind_Index(183) == 166\nfind_Index(184) == 167\nfind_Index(185) == 168\nfind_Index(186) == 169\nfind_Index(187) == 170\nfind_Index(188) == 171\nfind_Index(189) == 172\nfind_Index(190) == 173\nfind_Index(191) == 174\nfind_Index(192) == 175\nfind_Index(193) == 176\nfind_Index(194) == 177\nfind_Index(195) == 178\nfind_Index(196) == 179\nfind_Index(197) == 180\nfind_Index(198) == 181\nfind_Index(199) == 182\nfind_Index(200) == 183\nfind_Index(201) == 184\nfind_Index(202) == 185\nfind_Index(203) == 186\nfind_Index(204) == 187\nfind_Index(205) == 188\nfind_Index(206) == 189\nfind_Index(207) == 190\nfind_Index(208) == 191\nfind_Index(209) == 192\nfind_Index(210) == 193\nfind_Index(211) == 194\nfind_Index(212) == 195\nfind_Index(213) == 196\nfind_Index(214) == 197\nfind_Index(215) == 198\nfind_Index(216) == 199\nfind_Index(217) == 200\nfind_Index(218) == 201\nfin"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tuple_to_dict(((1, 2), (3, 4), (5, 6))) == {1: 2, 3: 4, 5: 6}\nassert     tuple_to_dict(((1, 2), (3, 4), (5, 6), (7, 8))) == {1: 2, 3: 4, 5: 6, 7: 8}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tuple_to_dict(('h','e','l','l','o')) == {'hl':'hello'}\nassert     tuple_to_dict(('h','e','l','l','l','o','w','o','r','l','d')) == {'h':'hello', 'ewor':'word'}\nassert     tuple_to_dict(('h','e','l','l','o','w','o','r','l','d','a','t')) == {'h':'hello', 'e':'word', 'a':'at'}\nassert     tuple_to_dict(('h','e','l','l','o','w','o','r','l','d','a','t','y','u','r')) == {'h':'hello', 'e':'word', 'a':'at', 'yt':'youd', 'r':'are'}\nassert     tuple_to_dict(('h','e','l','l','o','w','o','r','l','d','a','t','y','u','r','p','e','d')) == {'h':'hello', 'e':'word', 'a':'at', 'yt':'youd', 'r':'are', 'pe':'peek', 'd':'dont'}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dict_to_tuple(tuple_to_dict((1,2,3))) == (1,2,3)\nassert     dict_to_tuple(tuple_to_dict((1,2,3,4))) == (1,2,3,4)\nassert     dict_to_tuple(tuple_to_dict((1,2,3,4,5))) == (1,2,3,4,5)\nassert     dict_to_tuple(tuple_to_dict((1,2))) == (1,2)\nassert     dict_to_tuple(tuple_to_dict(())) == ()\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (tuple_to_dict((1,2,3)) == {1:2,2:3})\nassert     (tuple_to_dict((1,2,3,4)) == {1:2,2:3,3:4})\nassert     (tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5})\nassert     (tuple_to_dict((1,2,3,4,5,6)) == {1:2,2:3,3:4,4:5,5:6})\nassert     (tuple_to_dict((1,2,3,4,5,6,7)) == {1:2,2:3,3:4,4:5,5:6,6:7})\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tuple_to_dict(('a', 'b', 'c', 'd')) == {'a':'b', 'b':'c', 'c':'d'}\nassert     tuple_to_dict(('a', 'b', 'c', 'd', 'e')) == {'a':'b', 'b':'c', 'c':'d', 'd':'e'}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tuple_to_dict((1,2,3,4,5,6,7,8,9,10)) == {1: 1, 2: 4, 3: 7, 4: 10, 5: 13, 6: 16, 7: 19, 8: 22, 9: 25, 10: 28}\nassert tuple_to_dict((1,2,3,4,5,6,7,8,9,10,11)) == {1: 1, 2: 4, 3: 7, 4: 10, 5: 13, 6: 16, 7: 19, 8: 22, 9: 25, 10: 28, 11: 31}\nassert tuple_to_dict((1,2,3,4,5,6,7,8,9,10,11,12)) == {1: 1, 2: 4, 3: 7, 4: 10, 5: 13, 6: 16, 7: 19, 8: 22, 9: 25, 10: 28, 11: 31, 12: 34}\nassert tuple_to_dict((1,2,3,4,5,6,7,8,9,10,11,12,13,14)) == {1: 1, 2: 4, 3: 7, 4: 10, 5: 13, 6: 16, 7: 19, 8: 22, 9: 25, 10: 28, 11: 31, 12: 34, 13: 37, 14: 40}\nassert tuple_to_dict((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == {1: 1, 2: 4, 3: 7, 4: 10, 5: 13, 6: 16, 7: 19, 8: 22, 9: 25, 10: 28, 11: 31, 12: 34, 13: 37, 14: 40, 15: 43, 16: 46, 17: 49, 18: 52, 19: 55, 20: 58}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     {1: (1, 2), 2: (3, 4)}     == tuple_to_dict((1, 2, 3, 4))\nassert     {1: (1, 2, 3), 2: (3, 4)}     == tuple_to_dict((1, 2, 3, 4, 5))\nassert     {1: (1, 2, 3, 4, 5), 2: (3, 4)}     == tuple_to_dict((1, 2, 3, 4, 5, 6, 7))\nassert     {1: (1, 2, 3, 4, 5, 6, 7), 2: (3, 4, 5, 6, 7)}     == tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8))\nassert     {1: (1, 2, 3, 4, 5, 6, 7, 8), 2: (3, 4, 5, 6, 7, 8)}     == tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9))\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tuple_to_dict(('1', '2', '3', '4', '5', '6')) == \\\n        {'1': '2', '3': '4', '5': '6'}\nassert tuple_to_dict(('10', '20', '30', '40', '50', '60')) == \\\n        {'10': '20', '20': '30', '30': '40', '40': '50', '50': '60'}\nassert tuple_to_dict(('apple', 'banana', 'carrot', 'duck', 'elephant', 'flamingo')) == \\\n        {'apple': 'banana', 'banana': 'carrot', 'carrot': 'duck', 'duck': 'elephant', 'elephant': 'flamingo'}\n"
    },
    {
        "number": 740,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     dict_to_tuple(tuple_to_dict(test_tup)) == test_tup, 'Incorrect conversion'\n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a key-value tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-key-value-pair-tuples/\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_Characters_Same(\"hi\") == True\nassert     all_Characters_Same(\"helo\") == False\nassert     all_Characters_Same(\"hellow\") == False\nassert     all_Characters_Same(\"\") == True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_Characters_Same('a') == True,        'Function should return True for all_Characters_Same(\"a\")'\nassert     all_Characters_Same('aa') == False,    'Function should return False for all_Characters_Same(\"aa\")'\nassert     all_Characters_Same('abccc') == False,    'Function should return False for all_Characters_Same(\"abccc\")'\nassert     all_Characters_Same('abccccc') == True,    'Function should return True for all_Characters_Same(\"abccccc\")'\n\ndef are_all_elements_same(a) :\n    '''\n    Write a python function to check whether all the elements of a list are same or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_Characters_Same(\"a\") == True\nassert     all_Characters_Same(\"abc\") == True\nassert     all_Characters_Same(\"abcd\") == False\nassert     all_Characters_Same(\"abcdabcd\") == True\nassert     all_Characters_Same(\"abcabc\") == True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('abc') == False\nassert     all_Characters_Same('cab') == True\nassert     all_Characters_Same('abab') == False\nassert     all_Characters_Same('abcd') == False\nassert     all_Characters_Same('abcda') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_Characters_Same(\"abc\")         == False, \"all_Characters_Same('abc') is False\"\nassert     all_Characters_Same(\"ABC\")         == False, \"all_Characters_Same('ABC') is False\"\nassert     all_Characters_Same(\"ABCD\")         == False, \"all_Characters_Same('ABCD') is False\"\nassert     all_Characters_Same(\"ABCDD\")     == True, \"all_Characters_Same('ABCDD') is True\"\nassert     all_Characters_Same(\"ABCDDDD\")     == False, \"all_Characters_Same('ABCDDDD') is False\"\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_Characters_Same('abc') == False\nassert     all_Characters_Same('aaa') == True\nassert     all_Characters_Same('aaaA') == False\nassert     all_Characters_Same('A') == True\nassert     all_Characters_Same('') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_Characters_Same('Dorothy') == False\nassert     all_Characters_Same('Dorothy Doe') == True\nassert     all_Characters_Same('Dorothy') == True\nassert     all_Characters_Same('Dorothy Doe') == True\n\ndef all_Digits(s) :\n    '''\n    Write a python function to check whether all the characters are digits or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_Characters_Same(\"a\") == True\nassert     all_Characters_Same(\"aa\") == False\nassert     all_Characters_Same(\"aaa\") == True\nassert     all_Characters_Same(\"aaaa\") == True\nassert     all_Characters_Same(\"abcd\") == False\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_Characters_Same('aa') == False\nassert     all_Characters_Same('a') == True\nassert     all_Characters_Same('AA') == False\n\ndef non_repeated_strings() :\n    '''\n    Write a python function to check whether the strings are non repeated or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_Characters_Same(\"hello\") == False, \"Hello\"\nassert     all_Characters_Same(\"hello\") == True, \"Hello\"\nassert     all_Characters_Same(\"h1e1l\") == False, \"h1e1l\"\nassert     all_Characters_Same(\"\") == True, \"\"\nassert     all_Characters_Same(\"h1e1l\") == True, \"h1e1l\"\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     area_tetrahedron(5) == 10.0\nassert     area_tetrahedron(5.1) == 10.0\nassert     area_tetrahedron(5.99999999) == 10.0\n\ndef test_area_tetrahedron():\n    assert     area_tetrahedron(5) == 10.0\n    "
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     area_tetrahedron(1.5) == 1.375\nassert area_tetrahedron(2.5) == 1.25\nassert area_tetrahedron(4) == 1\n\ndef factorial(n):\n    '''\n    Write a function to find the factorial of a number.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     area_tetrahedron(4) == 28\nassert area_tetrahedron(10) == 350\nassert area_tetrahedron(1) == 12\nassert area_tetrahedron(0) == 0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     area_tetrahedron(1.0)     ==     1.333333333333333\nassert     area_tetrahedron(0.5)    ==     0.25\nassert     area_tetrahedron(1)    ==     1\nassert     area_tetrahedron(2)    ==     2\nassert     area_tetrahedron(3)    ==     4\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     area_tetrahedron(1) == 1, \"incorrect output\"\nassert     area_tetrahedron(2) == math.sqrt(3), \"incorrect output\"\nassert     area_tetrahedron(3) == math.sqrt(3)/2, \"incorrect output\"\nassert     area_tetrahedron(4) == math.sqrt(3)/2, \"incorrect output\"\nassert     area_tetrahedron(5) == 0, \"incorrect output\"\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     area_tetrahedron(2) == 1.0\nassert     area_tetrahedron(2) == 0.666666\nassert     area_tetrahedron(2) == 0.333333\nassert     area_tetrahedron(2) == 0.11\nassert     area_tetrahedron(4) == 1.0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     area_tetrahedron(3)     ==     6.0\nassert     area_tetrahedron(4)     ==     8.0\nassert     area_tetrahedron(5)     ==     12.0\nassert     area_tetrahedron(6)     ==     20.0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     area_tetrahedron(4.0) == 6.0\nassert     area_tetrahedron(4.0) == 6.0\nassert     area_tetrahedron(5.0) == 10.0\nassert     area_tetrahedron(6.0) == 20.0\nassert     area_tetrahedron(7.0) == 28.0\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     area_tetrahedron(4) == 4\nassert     area_tetrahedron(4) == 16\nassert     area_tetrahedron(6) == 4\nassert     area_tetrahedron(10) == 8\n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     area_tetrahedron(1) == 0.6\nassert     area_tetrahedron(2) == 0.8\nassert     area_tetrahedron(3) == 1.0\nassert     area_tetrahedron(4) == 1.2\nassert     area_tetrahedron(5) == 1.4\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n    \nlist = [0, 1, 2, 3, 4]\nrotate_right(list, 3)\nassert list == [4, 0, 1, 2, 3]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rotate_right([1,2,3,4,5,6], 2) == [4,5,6,1,2,3]\nassert     rotate_right([0,1,2,3,4,5,6,7], 4) == [5,6,7,0,1,2,3,4]\nassert     rotate_right([1,2,3,4,5], 2) == [4,5,1,2,3]\n\ndef rotate_list_to_start(list, start):\n    '''\n    Write a function to rotate a given list to the specified index. https://www.geeksforgeeks.org/python-program-rotate-list-to-start-index/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]\nassert     rotate_right([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\nassert     rotate_right([1, 2, 3, 4, 5], -1) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert     rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef binary_search(list, target):\n    '''\n    Write a function that returns index of target in list if present, else returns -1\n    '''\n    pass\n\n\ndef binary_search_recursive(list, target, start, end):\n    '''\n    Write a function to return index of target in list if present, else returns -1\n    '''\n    pass\n\n\ndef merge(list1, list2):\n    '''\n    Write a function to merge two sorted lists into a new sorted list.\n    '''\n    pass\n\n\ndef two_sum(list, target):\n    '''\n    Write a function to find if there are two numbers in the list that sum to the target.\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rotate_right([1,2,3,4,5,6], 2) == [5,6,1,2,3,4], \"Test 1 failed\"\nassert     rotate_right([1,2,3,4,5,6], 5) == [1,2,3,4,5,6], \"Test 2 failed\"\nassert     rotate_right([1,2,3,4,5,6], 0) == [1,2,3,4,5,6], \"Test 3 failed\"\n\ndef rotate_left(list, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rotate_right([1,2,3,4,5], 3) == [4,5,1,2,3]\nassert     rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     rotate_right([1,2,3,4,5], -1) == [5,1,2,3,4]\nassert     rotate_right([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert     rotate_right([1,2,3,4,5], 6) == [1,2,3,4,5]\n"
    },
    {
        "number": 743,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_none((1,2,3)) == False\nassert     check_none((1,2,None)) == True\nassert     check_none((None,2,3)) == True\nassert     check_none((None,None,3)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_none(()) == True\nassert     check_none((1,)) == False\nassert     check_none((1,2,3,4,5)) == True\nassert     check_none((1,2,3,None)) == False\nassert     check_none((None,2,3)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_none((None, None, None))\nassert     not check_none((1, 2, 3))\nassert     not check_none((None, None, None))\nassert     check_none((1, 2, 3, 4))\nassert     not check_none((1, 2, 3, None))\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_none((None,))\nassert     check_none((None,None))\nassert     check_none((1,2,3))\nassert     check_none((1,2,None))\nassert     check_none((1,2,None,None))\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_none((None, None))\nassert     check_none((1, None))\nassert     check_none((None, 2))\nassert     not check_none((None, None, None))\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_none((1,2,None,4)) == True\nassert     check_none((1,2,3)) == False\nassert     check_none((1,2,3,4)) == False\nassert     check_none((None,4)) == True\nassert     check_none((None,)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_none((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == True\nassert     check_none((None, None, None, None)) == True\nassert     check_none((1, 2, 3, 4, 5, None, 7, 8, 9, 10)) == True\nassert     check_none((1, 2, 3, 4, None, 5, 6, None, None, 7, 8, 9, 10)) == True\nassert     check_none((None, None, None, None, None, None)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    print check_none(())\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_none((3,4,5)) is False\nassert     check_none((3,4,None)) is True\nassert     check_none((None,4,5)) is True\nassert     check_none((3,None,5)) is True\nassert     check_none((3,4,None)) is True\n"
    },
    {
        "number": 744,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_none(('a',1,'b',2,'c',3)) == True\nassert     check_none(('a',1,'b',2)) == False\nassert     check_none(('a',1,'b')) == False\nassert     check_none(('a',1)) == False\n\ndef check_range(test_tup):\n    '''\n    Write a function to check if the given tuple is in the range of (0, 10)\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     divisible_by_digits(2, 12) == True\nassert     divisible_by_digits(0, 12) == True\nassert     divisible_by_digits(2, 12) == True\nassert     divisible_by_digits(23, 12) == False\nassert     divisible_by_digits(10, 101) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     divisible_by_digits(10, 20) == [12, 18, 24, 18, 24, 18, 24, 18, 24, 18]\nassert     divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     divisible_by_digits(1, 2) == [1, 2]\nassert     divisible_by_digits(1, 4) == [1, 2, 3]\nassert     divisible_by_digits(1, 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n    \n    \n\ndef to_number(s):\n    '''\n    Write a function to_number(s) that takes a string and returns a number that its integer representation is equal to the string representation. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-25.php\n    '''\n    pass\n\nassert \n    \n\ndef filter_vowels(s):\n    '''\n    Write a function filter_vowels(s) that takes a string and returns a string that contains only the vowels in it. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-26.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     divisible_by_digits(6,10) == [6,9]\nassert     divisible_by_digits(10,1000) == [11,111,121,131,141,151,161,171,181,191,201,211,221,231,241,251,261,271,281,291,301,311,321,331,341,351,361,371,381,391,401,411,421,431,441,451,461,471,481,491,501]\nassert     divisible_by_digits(101,1000) == [101, 1011, 10111, 101111, 10111, 101111, 1011111, 10111111, 1011111, 10111111, 10111101, 10111101, 101111011, 101111011, 1011110111, 10111101111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 10111101111, 1011110111, 10111101111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111, 1011110111, 10111101111"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(10, 100) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     divisible_by_digits(10, 1000) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     divisible_by_digits(0, 10) == [0,1,2,3,4,5,6,7,8,9]\nassert     divisible_by_digits(0, 100) == [0,10,20,30,40,50,60,70,80,90,100]\nassert     divisible_by_digits(10, 100) == [10,20,30,40,50,60,70,80,90,100]\nassert     divisible_by_digits(0, 1000000) == [0,10000,20000,30000,40000,50000,60000,70000,80000,90000]\nassert     divisible_by_digits(1, 1000000) == [1,20000,30000,40000,50000,60000,70000,80000,90000]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(12, 14) == True\nassert     divisible_by_digits(12, 12) == True\nassert     divisible_by_digits(12, 15) == False\nassert     divisible_by_digits(13, 15) == True\nassert     divisible_by_digits(0, 15) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(0, 10) == True\nassert     divisible_by_digits(10, 20) == True\nassert     divisible_by_digits(8, 10) == False\nassert     divisible_by_digits(10, 10) == True\nassert     divisible_by_digits(10, 100) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     divisible_by_digits(10, 15) == [12, 13, 14]\nassert     divisible_by_digits(10, 14) == [10, 11, 12, 13, 14]\nassert     divisible_by_digits(10, 13) == [10, 11, 12, 13]\nassert     divisible_by_digits(10, 12) == [10, 11]\nassert     divisible_by_digits(10, 11) == [10, 11]\n"
    },
    {
        "number": 745,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     divisible_by_digits(0, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(0, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     divisible_by_digits(1000, 2000) == [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     divisible_by_digits(0, 100, 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(0, 100, 2) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sector_area(1,0) == 1\nassert     sector_area(1,90) == math.pi/2\nassert     sector_area(1,180) == math.pi\nassert     sector_area(1,270) == 3*math.pi/2\nassert     sector_area(1,360) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sector_area(10,0) == None, \"should be None\"\nassert     sector_area(10,90) == None, \"should be None\"\nassert     sector_area(10,360) == None, \"should be None\"\nassert     sector_area(10,360.1) == None, \"should be None\"\nassert     sector_area(10,361) == None, \"should be None\"\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (sector_area(2,0) == None), \"should be None\"\nassert     (sector_area(2,360) == None), \"should be None\"\nassert     (sector_area(2,360.0) == None), \"should be None\"\nassert     (sector_area(2.0,360.0) == None), \"should be None\"\nassert     (sector_area(2.0,360) == None), \"should be None\"\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     None == sector_area(0.2,0)\nassert    1.5708 == sector_area(0.2,360)\nassert     1.5708 == sector_area(0.2,-1)\nassert     0.5 == sector_area(0.5,90)\nassert     1.5708 == sector_area(1,360)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sector_area(2,0)==None)\nassert     (sector_area(2,360)==None)\nassert     (sector_area(0,360)==None)\nassert     (sector_area(2,360.0)==None)\nassert     (sector_area(2.0,360)==None)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sector_area(2, 45) == math.pi * (2 ** 2)\nassert     sector_area(2, 360) == 0\nassert     sector_area(2, 0) == None\nassert     sector_area(2, -90) == None\nassert     sector_area(2, 345) == math.pi * (2 ** 2)\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sector_area(2,45) == 4*math.pi/4\nassert     sector_area(2,90) == 4*math.pi/4\nassert     sector_area(2,135) == 4*math.pi/4\nassert     sector_area(2,360) == 4*math.pi/4\nassert     sector_area(2,360.0) == 4*math.pi/4\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef arc_area(r,a):\n    '''\n    Write a function to find area of a circle arc. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sector_area(1,360) == None\nassert     sector_area(1,0) == None\nassert     sector_area(1,45) == None\nassert     sector_area(1,360) == None\nassert     sector_area(1,180) == math.pi\n"
    },
    {
        "number": 746,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sector_area(2,360) == None\nassert     sector_area(2,0) == None\nassert     sector_area(2,360) == None\nassert     sector_area(2,90) == None\nassert     sector_area(2,180) == None\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lcs_of_three('ABCD', 'BACD', 'CAD') == 'AD'\nassert lcs_of_three('AGGTAB', 'GXTXAYB', 'TGABCT') == 'GTAB'\nassert lcs_of_three('axrctsngd', 'ababhgvrb', 'bbaaadih') == 'abab'\nassert lcs_of_three('arasas', 'arsasas', 'arsasas') == 'ars'\nprint('all tests passed successfully'"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lcs_of_three(X = 'AGGTAB', Y = 'GXTXAYB', Z = 'AGXTXAYB') == 4\nassert     lcs_of_three(X = 'AGGTAB', Y = 'GXTXAYB', Z = 'AGGGTAB') == 1\nassert     lcs_of_three(X = 'AGGTAB', Y = 'GXTXAYB', Z = 'GXTXAYB') == 4"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     lcs_of_three('aab', 'aba', 'abbb') == 'aab'\nassert     lcs_of_three('aab', 'aba', 'ababa') == 'ab'\nassert     lcs_of_three('abc', 'adc', 'abd') == ''\nassert     lcs_of_three('aaaaaa', 'aaaaaa', 'aaaaaa') == 'aaaaaa'\nassert     lcs_of_three('123456789', '123456789', '123456789') == '123456789'\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lcs_of_three(\"ABCD\",\"ASD\",\"AABCD\") == \"ASD\"\nassert     lcs_of_three(\"ABCD\",\"AD\",\"AABCD\") == \"AD\"\nassert     lcs_of_three(\"XYZ\",\"XY\",\"XYZ\") == \"XY\"\nassert     lcs_of_three(\"ABCD\",\"AD\",\"XYZ\") == \"\"\n\ndef lcs_of_two(X, Y):\n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAYB') == 4\nassert     lcs_of_three('AGGTAB', 'GXTXAYB', 'GXTXAY') == 3\nassert     lcs_of_three('AGGTAB', 'GXTXAY', 'GXTXAYB') == 2\nassert     lcs_of_three('AGGTAB', 'GXTX', 'GXTXAYB') == 1\nassert     lcs_of_three('AGGTA', 'GXTXAYB', 'GXTXAYB') == 3\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lcs_of_three(\"aba\", \"bac\", \"cba\") == \"abc\"\nassert     lcs_of_three(\"def\", \"ecf\", \"fde\") == \"fde\"\nassert     lcs_of_three(\"abc\", \"def\", \"abde\") == \"abde\"\nassert     lcs_of_three(\"abc\", \"def\", \"bcef\") == \"bcef\"\nassert     lcs_of_three(\"abc\", \"def\", \"bcdef\") == \"bcdef\"\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGXGTAYB\") == \"GTAB\"\nassert     lcs_of_three(\"AACTCG\", \"ACACAG\", \"ACTCAG\") == \"ACACG\"\nassert     lcs_of_three(\"BANANANAN\", \"BANANANAN\", \"BANANANAN\") == \"BANANANAN\"\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lcs_of_three('ABCD', 'AEDC', 'ABCBDA') == 3\nassert     lcs_of_three('ABCD', 'BCD', 'ABD') == 3\nassert     lcs_of_three('GEEKFORGEEKS', 'GEEKSFORGEEKS', 'GEEKSFORGEEKS') == 4\nassert     lcs_of_three('GEEKFORGEEKS', 'GEEKFORGEEKS', 'GEEKSFORGEEKSFORGEEKS') == 4\n\ndef lcs_of_n(X, Y, Z, n):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lcs_of_three(\"abc\",\"abcy\",\"abc\") == \"abc\"\nassert     lcs_of_three(\"abc\",\"abc\",\"abc\") == \"abc\"\nassert     lcs_of_three(\"\",\"\",\"\") == \"\"\nassert     lcs_of_three(\"abca\",\"abc\",\"abcd\") == \"abc\"\nassert     lcs_of_three(\"\",\"abcd\",\"abc\") == \"abcd\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     capital_words_spaces(\"W3Resource\") == \"W 3RESOURCE\"\nassert     capital_words_spaces(\"we are studying Python now\") == \"We are studying Python now\"\nassert     capital_words_spaces(\"i love coding in python\") == \"I love coding in python\"\nassert     capital_words_spaces(\"i love coding in python. i love studying\") == \"I love coding in python. I love studying\"\nassert     capital_words_spaces(\"i love coding in python. i love studying. i am studing python\") == \"I love coding in python. I love studying. I am studing Python\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     capital_words_spaces('Hi All') == 'Hi    All'\nassert     capital_words_spaces('It    is a lovely day') == 'It    is a lovely day'\nassert     capital_words_spaces('hello world!') == 'Hello world!'\nassert     capital_words_spaces('  Hello   World!') ==' Hello   World!'\nassert     capital_words_spaces('') == ''\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     capital_words_spaces('Put Your Test String Here') == 'Put Your Test String Here'\nassert     capital_words_spaces('Put Your Test String Here And Your Laughter') == 'Put Your Test String Here And Your Laughter'\nassert     capital_words_spaces('Pleae Put Your Test String Here') == 'Pleae Put Your Test String Here'\nassert     capital_words_spaces('Put Your Test String Here And Laughter') == 'Put Your Test String Here And Laughter'\nassert     capital_words_spaces('Put Your Test String Here') == 'Put Your Test String Here'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     capital_words_spaces(\"Python\") == \"Python\"\nassert     capital_words_spaces(\"Python is amazing!\") == \"Python is amazing!\"\nassert     capital_words_spaces(\"\") == \"\"\nassert     capital_words_spaces(\"Hello\") == \"Hello\"\nassert     capital_words_spaces(\"Hello world\") == \"Hello world\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     capital_words_spaces(\"This is a sentence\") == \"This is a sentence\"\nassert     capital_words_spaces(\"This is another sentence\") == \"This is another sentence\"\nassert     capital_words_spaces(\"this is a sentence\") == \"This is a sentence\"\nassert     capital_words_spaces(\"this is another sentence\") == \"This is another sentence\"\nassert     capital_words_spaces(\"This is an another sentence\") == \"This is an another sentence\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     capital_words_spaces('Hello World!') == 'Hello World!', 'Function not working'\nassert     capital_words_spaces('Hi my name is Pedro') == 'Hi my name is Pedro', 'Function not working'\nassert     capital_words_spaces(' Hello World!') == 'Hello World!', 'Function not working'\nassert     capital_words_spaces('Hi my name is Pedro') == 'Hi my name is Pedro', 'Function not working'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     capital_words_spaces('') == ''\nassert     capital_words_spaces(' ') ==''\nassert     capital_words_spaces('Hello World') == 'Hello World'\nassert     capital_words_spaces('Hello World') == 'Hello World'\nassert     capital_words_spaces('Hello World') == 'Hello World'\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     capital_words_spaces(\"This is a python string\") == \"This is a python string\", \"Test 1 FAILED\"\nassert     capital_words_spaces(\"Python is a python snake\") == \"Python is a python snake\", \"Test 2 FAILED\"\nassert     capital_words_spaces(\"Python is a python snake\") == \"Python is a python snake\", \"Test 3 FAILED\"\nassert     capital_words_spaces(\"Hello World\") == \"Hello World\", \"Test 4 FAILED\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     capital_words_spaces(\"A case to be pared down to a point, or not to be pared down\") == \"A case to be pared down to a point, or not to be pared down\"\nassert     capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\nassert     capital_words_spaces(\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\nassert     capital_words_spaces(\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\nassert     capital_words_spaces(\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\n"
    },
    {
        "number": 748,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     capital_words_spaces('The quick Brow Fox') == \"The  quick Brow Fox\"\nassert     capital_words_spaces('The quick Brown Fox') == \"The  quickBrown Fox\"\nassert     capital_words_spaces('The Quick Brow Fox') == \"The  Quick Brow Fox\"\nassert     capital_words_spaces('The Quick Brown Fox') == \"The  Quick Brown Fox\"\nassert     capital_words_spaces('The quick brown fox') == \"The  quick brown fox\"\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numeric_strings(['1', '5', '3', '2', '4', '9']) == ['1', '2', '3', '4', '5', '9']\nassert     sort_numeric_strings(['5', '1', '2', '3', '4', '9']) == ['1', '2', '3', '4', '5', '9']\nassert     sort_numeric_strings(['9', '1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5', '9']\nassert     sort_numeric_strings(['99', '1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5', '99']\nassert     sort_numeric_strings(['99', '1', '2', '3', '4', '999']) == ['1', '2', '3', '4', '999', '99']\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_numeric_strings(['12', '89', '10', '0', '6', '9', '0', '5', '3']) == ['0', '0', '0', '3', '5', '6', '9', '10', '12']\nassert     sort_numeric_strings(['4', '9', '7', '5', '3']) == ['3', '5', '4', '7', '9']\nassert     sort_numeric_strings(['1', '2', '5', '4', '0', '6', '3']) == ['0', '1', '2', '3', '4', '5', '6']\nassert     sort_numeric_strings(['2', '3', '1']) == ['1', '2', '3']\nassert     sort_numeric_strings(['a', 'z', 'a', 'a', 'b']) == ['a', 'a', 'b', 'z']\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_numeric_strings(['1','2','3']) == ['1', '2', '3']\nassert     sort_numeric_strings(['34','2','4']) == ['2', '4', '34']\nassert     sort_numeric_strings(['2','12','15']) == ['2', '12', '15']\nassert     sort_numeric_strings(['2','14','18']) == ['14', '18', '2']\nassert     sort_numeric_strings(['abc','3','4','1','xyz']) == ['1', '3', '4', 'abc', 'xyz']\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings(['13', '12', '3', '1', '11', '10']) == ['1', '10', '11', '12', '3', '13']\nassert sort_numeric_strings(['4', '10', '12', '2']) == ['2', '4', '10', '12']\nassert sort_numeric_strings(['3', '1', '2']) == ['1', '2', '3']\nassert sort_numeric_strings(['4', '3', '2', '1']) == ['1', '2', '3', '4']\nassert sort_numeric_strings(['4', '3', '2', '1', '1']) == ['1', '1', '2', '3', '4']\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_numeric_strings(['a123', 'b1', '3', '2', '1']) == ['1', '2', '3', 'a123', 'b1']\nassert     sort_numeric_strings(['xyz', 'X', 'abcd', '1', '0']) == ['0', 'X', 'abcd', '1', 'xyz']\nassert     sort_numeric_strings(['S', 'H', 'H', 'U', 'P', 'S', 'S', 'P', 'N', 'S', 'O', 'U', 'R', 'I', 'O', 'N', 'P', 'R', 'S', 'O', 'U', 'T', 'T', 'E', 'E', 'N', 'U', 'S', 'S', 'T', 'O', 'N', 'S', 'S', 'O', 'O', 'U', 'T', 'E', 'N', 'S', 'S', 'O', 'S', 'S', 'S', 'E', 'N', 'S', 'O', 'U', 'N', 'S', 'U', 'S', 'O', 'S', 'T', 'S', 'U', 'S', 'P', 'E', 'U', 'S', 'P', 'S', 'U', 'S', 'E', 'N', 'S', 'T', 'S', 'P', 'E', 'U', 'S', 'O', 'U', 'S', 'I', 'N', 'S', 'E', 'S', 'O', 'U', 'N', 'S', 'E', 'S', 'O', 'S', 'E', 'S', 'O', 'U', 'S', 'S', 'E', 'N', 'S', 'S', 'O', 'S', 'S', 'O', 'U', 'S', 'S', 'O', 'S', 'S', 'E', 'N', 'S', 'S', 'O', 'S', 'E', 'S', 'O', 'S', 'S', 'I', 'N', 'S', 'E', 'S', 'I', 'N', 'S', 'E', 'S', 'U', 'S', 'U', 'S', 'U', 'S', 'E', 'N', 'S', 'T', 'S', 'I', 'N', 'S', 'E', 'S', 'E', 'S', 'I', 'N', 'S', 'T', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'E', 'S', 'O', 'U', 'S', 'I', 'N', 'S', 'E', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'E', 'S', 'I', 'N', 'S', 'U', 'S', 'E', 'N', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N', 'S', 'U', 'S', 'I', 'N'"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_numeric_strings([2, 7, 1, 9, 0, 3, 0, 4, 6, 2]) == [0, 0, 1, 2, 2, 3, 4, 6, 7, 9]\nassert     sort_numeric_strings([]) == []\nassert     sort_numeric_strings([2, 9, 4, 1, 3, 0, 7]) == [0, 1, 2, 3, 4, 7, 9]\nassert     sort_numeric_strings([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7]\nassert     sort_numeric_strings(['1', '9', '10', '3']) == [1, 3, 9, 10]\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_numeric_strings(['4', '1', '0', '3', '2']) == ['0', '1', '2', '3', '4']\nassert     sort_numeric_strings(['1', '0', '2', '3', '4']) == ['0', '1', '2', '3', '4']\nassert     sort_numeric_strings(['10', '3', '8', '0', '1', '2', '4', '9']) == ['0', '1', '2', '3', '4', '8', '9', '10']\nassert     sort_numeric_strings(['9', '10', '7', '1', '0', '6', '4', '2', '3']) == ['0', '1', '2', '3', '4', '6', '7', '8', '9']\nassert     sort_numeric_strings(['3', '2', '1', '0', '9', '8', '7', '6', '5', '4', '10']) == ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_numeric_strings(['0011', '011', '0001', '10', '112', '1']) == ['0', '1', '11', '01', '10', '11']\nassert     sort_numeric_strings(['112', '1', '11', '101']) == ['1', '11', '101', '112']\nassert     sort_numeric_strings(['112', '1', '11', '101', '11']) == ['1', '11', '101', '11', '112']\nassert     sort_numeric_strings(['1111', '11', '1']) == ['1', '11', '1111']\n\ndef sort_strings_with_consecutive_characters(strings):\n    '''\n    Write a function to sort a given list of strings of characters. https://www.geeksforgeeks.org/python-sort-strings-with-consecutive-characters/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_numeric_strings([\"0\", \"9\", \"8\", \"3\", \"2\", \"1\", \"5\", \"4\", \"6\", \"7\"]) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\nassert     sort_numeric_strings([\"2\", \"0\", \"1\", \"2\", \"5\", \"4\", \"7\", \"3\", \"8\", \"1\"]) == ['1', '2', '2', '3', '4', '5', '0', '7', '8', '1']\nassert     sort_numeric_strings([\"2\", \"4\", \"0\", \"1\", \"2\", \"5\", \"4\", \"7\", \"3\", \"8\", \"1\"]) == ['0', '1', '2', '2', '3', '4', '4', '5', '1', '7', '8']\nassert     sort_numeric_strings([\"2\", \"4\", \"0\", \"1\", \"2\", \"5\", \"4\", \"7\", \"3\", \"8\", \"1\", \"5\", \"9\"]) == ['0', '1', '2', '2', '3', '4', '4', '5', '1', '7', '8', '5', '9']\nassert     sort_numeric_strings([\"2\", \"4\", \"0\", \"1\", \"2\", \"5\", \"4\", \"7\", \"3\", \"8\", \"1\", \"5\", \"9\", \"0\"]) == ['0', '1', '2', '2', '3', '4', '4', '5', '1', '7', '8', '5', '9', '0']\n"
    },
    {
        "number": 749,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings(['1','2','3','9','5','5']) == ['1','2','3','5','5','9']\nassert     sort_numeric_strings(['1','2','3','9','3','2']) == ['1','2','3','3','2','9']\nassert     sort_numeric_strings(['1','2','3','9','2','2']) == ['1','2','2','2','3','9']\nassert     sort_numeric_strings(['9','2','2','2','3','1']) == ['1','2','2','2','3','9']\nassert     sort_numeric_strings(['1','9','2','2','2','3']) == ['1','2','2','3','3','9']\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_tuple([1,2,3], (4,5)) == [1,2,3,4,5]\nassert     add_tuple([1,2,3], (4,)) == [1,2,3,4]\nassert     add_tuple([1,2,3], (3,4,5)) == [1,2,3,3,4,5]\n\n\ndef add_tuple_recur(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list using recursion.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_tuple([], ())     == (0,0)\nassert     add_tuple([1,2,3], (1,2,3))     == (2,4,6)\nassert     add_tuple([1,2,3], (4,5,6))     == (5,7,9)\nassert     add_tuple([1,2,3], (9,9,9))     == (12,12,12)\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert\nassert\nassert \nassert\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nassert     add_tuple([], (1, 2, 3)) == [1, 2, 3]\nassert     add_tuple([1, 2, 3], ()) == [1, 2, 3]\nassert     add_tuple([1], (2, 3)) == [1, 2, 3]\nassert     add_tuple([1, 2, 3], (2, 3)) == [1, 2, 3, 2, 3]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nassert     add_tuple([4, 5, 6], (1, 2, 3)) == [4, 5, 6, 1, 2, 3]\nassert     add_tuple([4, 5, 6], (1, 2)) == [4, 5, 6, 1, 2]\nassert     add_tuple([4, 5, 6], (1,)) == [4, 5, 6, 1]\nassert     add_tuple([4, 5, 6], ()) == [4, 5, 6]"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_tuple(list_of_num, tup_of_num) == list_of_num + [tup_of_num]\nassert     add_tuple(list_of_num, tuple_of_num) == list_of_num + [tuple_of_num]\nassert     add_tuple(list_of_num, list_of_num) == list_of_num + [list_of_num]\nassert     add_tuple(list_of_num, tuple_of_num_2) == list_of_num + [tuple_of_num_2]\nassert     add_tuple(list_of_num, tuple_of_num_3) == list_of_num + [tuple_of_num_3]\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_tuple([1,2], (3,4)) == [1, 2, 3, 4]\nassert     add_tuple([1,2], [3,4]) == [1, 2, 3, 4]\nassert     add_tuple([1,2,3], (4,5,6)) == [1, 2, 3, 4, 5, 6]"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_tuple(['a','b','c','d'], ('e', 'f', 'g')) == \\\n        ['a','b','c','d','e','f','g']\nassert     add_tuple(['a','b','c','d'], ('d', 'e', 'f')) == \\\n        ['a','b','c','d','d','e','f']\nassert     add_tuple(['a','b','c','d'], ('f', 'g')) == \\\n        ['a','b','c','d','f','g']\nassert     add_tuple(['a','b','c','d'], ('e',)) == \\\n        ['a','b','c','d','e']\nassert     add_tuple(['a','b','c','d'], ('e', 'f')) == \\\n        ['a','b','c','d','e','f']\n"
    },
    {
        "number": 750,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_tuple(['a', 'b'], ('c', 'd')) == ['a', 'b', 'c', 'd']\nassert     add_tuple(['a', 'b'], ('c',)) == ['a', 'b', 'c']\nassert     add_tuple(['a', 'b'], ('',)) == ['a', 'b', '']\n\ndef reverse_iterative(s):\n    '''\n    Write a function to reverse a string iteratively.\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8], 2) == 1\nassert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8], 5) == 1\nassert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8], 8) == 1\nassert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8], 0) == 0\nassert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8], 9) == 0\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_min_heap_helper([5, 3, 7, 2, 8, 1, 6], 0) == True\nassert     check_min_heap_helper([5, 3, 7, 2, 8, 1, 6], 1) == False\nassert     check_min_heap_helper([5, 3, 7, 2, 8, 1, 6], 3) == False\nassert     check_min_heap_helper([5, 3, 7, 2, 8, 1, 6], 4) == True\nassert     check_min_heap_helper([5, 3, 7, 2, 8, 1, 6], 6) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef build_min_heap(arr):\n    '''\n    We use bottom-up approach here, so each time we add an element to the heap, we swap with the parent node. \n    However, the only time we swap is when the parent node has a greater value, \n    so we don't want to do that in the first iteration of the loop, which only happens when the heap is empty.\n    '''\n    # swap with the parent node\n    # in this case, we want to swap with the parent node if the parent node is greater\n    # or if the child node is greater than the parent node\n    pass\n\ndef min_heapify(arr, i):\n    '''\n    This is the recursive version of min-heapify.\n    '''\n    pass\n\ndef heapsort(arr):\n    '''\n    We use the heapsort algorithm to sort the array. In this, we build a min-heap of the array, and after that, we exchange the elements of the heap to the last non-leaf position.\n    '''\n    pass\n\ndef extract_min(arr):\n    '''\n    We extract the minimum value from the heap.\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_min_heap_helper([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 19) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 5) == False\nassert     check_min_heap_helper([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], -2) == False\n\ndef check_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-heap/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_min_heap_helper([1,2,3,4,5,6,7,8,9], 0) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7,8,9], 5) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7,8,9], 11) == False\n\ndef create_min_heap(arr):\n    '''\n    Create a min heap from the given array. The returned array must be a min heap\n    https://www.geeksforgeeks.org/create-min-heap-from-given-array/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_min_heap_helper( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 81"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_min_heap_helper([], 0) is True\nassert     check_min_heap_helper([1], 0) is True\nassert     check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 79"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_min_heap_helper([1,3,5,2,4,6,7,8,9], 0) == True\nassert     check_min_heap_helper([1,3,5,2,4,6,7,8,9], 1) == False\nassert     check_min_heap_helper([1,3,5,2,4,6,7,8,9], 2) == False\nassert     check_min_heap_helper([1,3,5,2,4,6,7,8,9], 3) == True\nassert     check_min_heap_helper([1,3,5,2,4,6,7,8,9], 4) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_min_heap_helper([1,2,3,4,5,6,7], 0) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 1) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 2) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 3) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 4) == True\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 3\nassert     jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     jacobsthal_num(10) == 171\nassert     jacobsthal_num(5) == 1365\nassert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 2\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 3\nassert     jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         jacobsthal_num(0) == 1\nassert         jacobsthal_num(1) == 1\nassert         jacobsthal_num(2) == 1\nassert         jacobsthal_num(3) == 3\nassert         jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 2\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef jacobsthal_lucas(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     jacobsthal_num(10) == 4\nassert     jacobsthal_num(11) == 11\nassert     jacobsthal_num(12) == 12\nassert     jacobsthal_num(13) == 25\nassert     jacobsthal_num(14) == 44\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 3\nassert     jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     jacobsthal_num(3)    == 3\nassert     jacobsthal_num(0)    == 0\nassert     jacobsthal_num(5)    == 5\nassert     jacobsthal_num(10)    == 73\n\ndef jacobsthal_series(n): \n    '''\n    Write a function to find the jacobsthal series: https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_k([(3,2), (1,4), (0,5)], 1) == [0,5]\nassert     min_k([(3,2), (1,4), (0,5)], 2) == [0,1]\nassert     min_k([(3,2), (1,4), (0,5)], 3) == [0,1,2]\nassert     min_k([(3,2), (1,4), (0,5)], 4) == [0,1,2,3]\nassert     min_k([(3,2), (1,4), (0,5)], 5) == [0,1,2,3,4]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_k([('v',1),('p',1),('l',2)], 1) == [('l', 2)]\nassert     min_k([('v',1),('p',1),('l',2),('a',3)], 1) == [('l', 2),('a',3)]\nassert     min_k([('v',1),('p',1),('l',2),('a',3)], 2) == [('v', 1), ('p', 1)]\nassert     min_k([('v',1),('p',1),('l',2),('a',3)], 3) == [('v', 1), ('p', 1), ('l', 2)]\nassert     min_k([('v',1),('p',1),('l',2),('a',3)], 4) == [('v', 1), ('p', 1), ('l', 2), ('a', 3)]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     min_k((('Jan', '3', '34', '5', '34'), ('Feb', '6', '34', '5', '34'), ('Mar', '3', '34', '5', '34'), ('Apr', '6', '34', '5', '34'), ('May', '3', '34', '5', '34')), 1) == ('Feb', '6', '34', '5', '34')\nassert     min_k((('Jan', '3', '34', '5', '34'), ('Feb', '6', '34', '5', '34'), ('Mar', '3', '34', '5', '34'), ('Apr', '6', '34', '5', '34'), ('May', '3', '34', '5', '34')), 2) == ('Mar', '3', '34', '5', '34')\nassert     min_k((('Jan', '3', '34', '5', '34'), ('Feb', '6', '34', '5', '34'), ('Mar', '3', '34', '5', '34'), ('Apr', '6', '34', '5', '34'), ('May', '3', '34', '5', '34')), 3) == ('Apr', '6', '34', '5', '34')\nassert     min_k((('Jan', '3', '34', '5', '34'), ('Feb', '6', '34', '5', '34'), ('Mar', '3', '34', '5', '34'), ('Apr', '6', '34', '5', '34'), ('May', '3', '34', '5', '34')), 4) == ('May', '3', '34', '5', '34')\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_k([], 0) == []\nassert     min_k([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (3, 4)]\nassert     min_k([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (3, 4), (5, 6)]\nassert     min_k([(1, 2), (3, 4), (5, 6)], 4) == [(1, 2), (3, 4), (5, 6)]\nassert     min_k([(1, 2), (3, 4), (5, 6)], 5) == [(1, 2), (3, 4), (5, 6)]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_k(test_list1, 5) ==     [1, 4, 3, 5, 4]\nassert     min_k(test_list2, 5) ==     [2, 3, 4, 2, 1]\nassert     min_k(test_list3, 5) ==     [0, 0, 1, 0, 0]\nassert     min_k(test_list4, 5) ==     [5, 4, 4, 5, 5]\nassert     min_k(test_list5, 5) ==     [3, 2, 1, 3, 4]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_k([(1, 3), (2, 4), (3, 3)], 2) == [(3, 3)]\nassert     min_k([(1, 3), (2, 4), (3, 3)], 1) == [(1, 3), (2, 4), (3, 3)]\nassert     min_k([(1, 3), (2, 4), (3, 3)], 3) == [(1, 3), (2, 4), (3, 3)]\nassert     min_k([(1, 3), (2, 4), (3, 3)], 4) == [(1, 3), (2, 4), (3, 3)]\nassert     min_k([(1, 3), (2, 4), (3, 3)], 5) == [(1, 3), (2, 4), (3, 3)]\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_k(test_list, 1) == ([1, 2, 3], [1, 2, 3, 4, 5])\nassert     min_k(test_list, 2) == ([1, 2, 3], [1, 2, 3, 4, 5])\nassert     min_k(test_list, 3) == ([1, 2, 3], [1, 2, 3, 4, 5])\nassert     min_k(test_list, 4) == ([1, 2, 3, 4], [1, 2, 3, 4, 5])\nassert     min_k(test_list, 5) == ([1, 2, 3, 4, 5], [])\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_k([(1, 4, 5), (2, 3, 4), (1, 4, 6), (1, 3, 5), (1, 2, 4), (1, 4, 5), (1, 2, 4)], 2) == [(1, 4, 5), (1, 2, 4)], \"min_k(test_list, K) is not correct\"\nassert     min_k([(1, 4, 5), (2, 3, 4), (1, 4, 6), (1, 3, 5), (1, 2, 4), (1, 4, 5), (1, 2, 4)], 1) == [], \"min_k(test_list, K) is not correct\"\nassert     min_k([(1, 4, 5), (2, 3, 4), (1, 4, 6), (1, 3, 5), (1, 2, 4), (1, 4, 5), (1, 2, 4)], 3) == [(1, 4, 5), (1, 2, 4), (1, 4, 5)], \"min_k(test_list, K) is not correct\"\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     min_k(test_list, K) == 'Tushar'\nassert     min_k(test_list, 3) == ['Shahrukh', 'Rama', 'Tushar']\nassert     min_k(test_list, 5) == ['Shahrukh', 'Rama', 'Tushar', 'Kiran', 'Rama']\nassert     min_k(test_list, 6) == ['Shahrukh', 'Rama', 'Tushar', 'Kiran', 'Rama', 'Lakshman']\nassert     min_k(test_list, 7) == ['Shahrukh', 'Rama', 'Tushar', 'Kiran', 'Rama', 'Lakshman', 'Sonakshi']\n"
    },
    {
        "number": 753,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     min_k([(4,3), (6,5), (2,4), (3,2), (5,5), (5,5)], 2) == [(3,2), (5,5)]\nassert     min_k([(4,3), (6,5), (2,4), (3,2), (5,5), (5,5)], 3) == [(3,2), (4,3), (5,5)]\nassert     min_k([(4,3), (6,5), (2,4), (3,2), (5,5), (5,5)], 4) == [(2,4), (4,3), (5,5)]\nassert     min_k([(4,3), (6,5), (2,4), (3,2), (5,5), (5,5)], 5) == [(2,4), (4,3), (5,5)]\nassert     min_k([(4,3), (6,5), (2,4), (3,2), (5,5), (5,5)], 6) == [(2,4), (4,3), (5,5)]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_index_list([1,3,5,7,9], [3,6,9,11], [4,8,12,14]) == [3,9]\nassert     extract_index_list([1,3,5,7,9], [3,6,9,11], [4,8,12,14]) == [3,9]\nassert     extract_index_list([1,3,5,7,9], [3,6,9,11], [4,8,12,14]) == [3,9]\nassert     extract_index_list([1,3,5,7,9], [3,6,9,11], [4,8,12,14,16]) == [3,9]\nassert     extract_index_list([1,3,5,7,9], [3,6,9,11], [4,8,12,14,16]) == [3,9]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 4, 5, 6]) == [2, 3, 4]\nassert     extract_index_list([1, 2, 3, 4, 5], [1, 2, 4, 5, 6], [1, 2, 4, 5, 6]) == [1, 2, 4, 5, 6]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_index_list([1,2,3,4,5],[2,4,5,6],[1,2,3,4])    == [2,4]\nassert     extract_index_list([1,2,3,4,5],[2,4,5,6],[6,7,8])     == []\nassert     extract_index_list([1,2,3,4,5],[2,4,5,6],[1,2,3,4,5,6])    == [2,4]\nassert     extract_index_list([1,2,3,4,5],[2,4,5,6],[1,2,3,4,5,6,7])    == [2,4,5]\n\n\ndef transpose(l1, l2):\n    '''\n    Write a function to transpose two list of the same size.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_index_list([1, 1, 2, 3, 4], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     extract_index_list([1, 1, 2, 3, 4], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     extract_index_list([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_index_list([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_index_list([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_index_list([0, 1, 2], [0, 2, 3], [1, 2, 3]) == [1, 2]\nassert     extract_index_list([0, 1, 2], [0, 2, 0], [1, 2, 3]) == [1, 2]\n\ndef extract_index_set(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a set of indices.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_index_list([1, 3, 5, 7], [1, 2, 4], [1, 5, 7, 9]) == [1, 5]\nassert     extract_index_list([1, 3, 5], [1, 2, 4], [1, 5, 7]) == [1, 5]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_index_list([1,2,3,4], [1,2,3,5], [1,2,4,6]) == [1,2,4], '''should be [1,2,4]'''\nassert     extract_index_list([1,2,3,4], [1,2,3,5], [1,2,6]) == [], '''should be []'''\nassert     extract_index_list([1,2,3,4], [1,2,3,5], [1,2,3,6]) == [], '''should be []'''\nassert     extract_index_list([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7], '''should be [1,2,3,4,5,6,7]'''\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_index_list([1,2,3], [1,2,4], [1,2,3]) == [1,2,3]\nassert     extract_index_list([1,2,3], [1,2,4], [1,2,5]) == [1,2,3,4]\nassert     extract_index_list([1,2,3], [1,2,3], [1,2,3]) == [1,2,3]\nassert     extract_index_list([1,2,3], [1,2,3], [1,2,4]) == [1,2,3,4]\nassert     extract_index_list([1,2,3,4], [1,2,3,4], [1,2,3,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\nprint extract_index_list([1,2,3],[4,5,6],[7,8,9]) == [1,4]\nassert extract_index_list([1,2,3],[4,5,6],[7,8,9]) == [1,4]\nprint \"all tests passed\""
    },
    {
        "number": 754,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_index_list(['a', 'a', 'a', 'a', 'b'], ['b', 'b', 'b', 'b', 'c'], ['c', 'c', 'c', 'd']) == ['a', 'b']\nassert     extract_index_list(['a', 'a', 'a', 'a', 'b'], ['b', 'b', 'b', 'b', 'c'], ['c', 'c', 'c', 'd']) == ['a', 'b']\nassert     extract_index_list(['a', 'a', 'a', 'a', 'b'], ['b', 'b', 'b', 'b', 'c'], ['c', 'c', 'c', 'd', 'e']) == []\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     second_smallest([1, 2, 3, 4, 1]) == 1\nassert     second_smallest([3, 3, 4, 1, 2]) == 2\nassert     second_smallest([1, 2, 3, 4, 3]) == 3\nassert     second_smallest([3, 3, 3]) == 3\nassert     second_smallest([4, 3, 3]) == 3\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     second_smallest([1, 2, 3, 4, 5]) == 3\nassert     second_smallest([9, 6, 1, 7, 8, 2, 3]) == 7\nassert     second_smallest([9, 6, 1, 7, 8, 2, 3, 5, 4]) == 7\nassert     second_smallest([9, 6, 1, 7, 8, 2, 3, 5, 4, 10]) == 8\nassert     second_smallest([1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     second_smallest([1, 2, 3, 4, 5]) == 3, '3'\nassert     second_smallest([1, 2, 2, 3, 4]) == 2, '2'\nassert     second_smallest([1, 4, 2, 3, 4, 5]) == 4, '4'\nassert     second_smallest([-4, 1, -2, -1, 0, -1, -1, -1, 0]) == -1, '-1'\nassert     second_smallest([]) == None, 'Empty list'\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     second_smallest([5, 3, 6, 2, 10]) == 7\nassert     second_smallest([9, 2, 1, 5, 0, -3, 0]) == -3\nassert     second_smallest([-1]) == -1\nassert     second_smallest([]) == None\nassert     second_smallest([2, 2, 2]) == None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     second_smallest([10, 50, 5, 25, 40, 70]) == 25, 'Failed 1'\nassert     second_smallest([-5, -10, -25, -40, -70]) == -25, 'Failed 2'\nassert     second_smallest([10, 5, 25, 40, 70]) == -1, 'Failed 3'\nassert     second_smallest([10, 40, 70, -5, -25]) == -1, 'Failed 4'\nassert     second_smallest([5, 12, -5, 25, -10, 40]) == -1, 'Failed 5'\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     second_smallest([2, 4, 7, 9, 10, 6, 3, 4, 1]) == 4\nassert     second_smallest([1, 3, 4, 5, 6, 2]) == 3\nassert     second_smallest([1, 1, 2, 2, 3, 3]) == 2\nassert     second_smallest([-5, -3, -2, -1, 0]) == -1\nassert     second_smallest([5, 3, 4, 2, 1]) == 2\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     second_smallest([1, 2, 3, 4, 5]) == 3\nassert     second_smallest([1, 2, 2, 4, 5]) == 2\nassert     second_smallest([1, 1, 2, 2, 2]) == 2\nassert     second_smallest([]) == None\nassert     second_smallest([1]) == None\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     second_smallest([4, 2, 5, 3, 2]) == 3\nassert     second_smallest([1, 2, 3, 4, 5, 6]) == 2\nassert     second_smallest([1, 2, 3, 4, 5, -1]) == -1\nassert     second_smallest([-1, 2, 3, 4, 5, 6]) == 2\nassert     second_smallest([-1, -2, -3, -4, -5, -6]) == -1\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     second_smallest([1, 5, 4, 2, 3]) == 2\nassert     second_smallest([1, 2, 3, 4, 5]) == 2\nassert     second_smallest([5, 4, 3, 2, 1]) == 2\nassert     second_smallest([10, 2, 3, 4, 1]) == 4\nassert     second_smallest([10, -1, -9, 3, 2, 1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     second_smallest([1, 2, 3, 4, 5]) == 3\nassert     second_smallest([-3, 5, 3, 3, -5]) == -5\nassert     second_smallest([2, 2, 2, 2, 2]) == 2\nassert     second_smallest([0, 0, 0, 0, 0]) == None\nassert     second_smallest([-2, -3, 0]) == -3\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_zero_one(\"ab\") == True, \"Should match\"\nassert     text_match_zero_one(\"abc\") == False, \"Should not match\"\nassert     text_match_zero_one(\"ababab\") == True, \"Should match\"\nassert     text_match_zero_one(\"bbbbbbbba\") == False, \"Should not match\"\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('ab') == True\nassert     text_match_zero_one('b') == True\nassert     text_match_zero_one('bab') == True\nassert     text_match_zero_one('babab') == True\nassert     text_match_zero_one('bababab') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_zero_one('a') == False\nassert     text_match_zero_one('a') == False\nassert     text_match_zero_one('aa') == True\nassert     text_match_zero_one('ba') == True\nassert     text_match_zero_one('ba') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('cba') == True\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('cab') == False\nassert     text_match_zero_one('cc') == True\nassert     text_match_zero_one('cbaabc') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_zero_one(\"\") == False, \"0\"\nassert     text_match_zero_one(\"a\") == False, \"0\"\nassert     text_match_zero_one(\"ab\") == False, \"0\"\nassert     text_match_zero_one(\"aabb\") == True, \"1\"\nassert     text_match_zero_one(\"aabbb\") == True, \"1\"\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_zero_one(\"aba\") == True, \"failed 1\"\nassert     text_match_zero_one(\"abc\") == False, \"failed 1\"\nassert     text_match_zero_one(\"abb\") == False, \"failed 1\"\nassert     text_match_zero_one(\"aab\") == True, \"failed 1\"\nassert     text_match_zero_one(\"aabb\") == True, \"failed 1\"\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_match_zero_one(\"ab\") == True\nassert     text_match_zero_one(\"aab\") == True\nassert     text_match_zero_one(\"bab\") == True\nassert     text_match_zero_one(\"aabbb\") == True\nassert     text_match_zero_one(\"bbb\") == False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_match_zero_one(\"aaab\") == False\nassert     text_match_zero_one(\"abb\") == True\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_zero_one('a') == False\nassert     text_match_zero_one('ab') == True\nassert     text_match_zero_one('b') == False\nassert     text_match_zero_one('abb') == True\nassert     text_match_zero_one('bab') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_zero_one('aab') == True\nassert     text_match_zero_one('abb') == True\nassert     text_match_zero_one('b') == False\nassert     text_match_zero_one('aaab') == True\nassert     text_match_zero_one('aaba') == False\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_reverse_pairs(['apple', 'google', 'amazon', 'apple']) == 3\nassert count_reverse_pairs(['hello', 'world', 'python', 'computer', 'python']) == 2\nassert count_reverse_pairs(['python', 'computer', 'python']) == 1\nassert count_reverse_pairs(['h', 'y', 't', 'o', 'n']) == 0\nassert count_reverse_pairs(['h', 'y', 't', 'o', 'n', 'h', 'y', 't', 'o', 'n']) == 3\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_reverse_pairs(['aaa', 'bbb', 'aaa', 'bbb']) == 3\nassert     count_reverse_pairs(['rxyx', 'xyxr', 'xxy', 'xyxx']) == 2\nassert     count_reverse_pairs(['abc', 'xyz', 'xyz', 'abc']) == 0\nassert     count_reverse_pairs(['aaa', 'bbb', 'ccc']) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_reverse_pairs([\n                'abcd',\n                'abc',\n                'ab',\n                'abc',\n                'bb',\n                'aa',\n                'bb',\n                'ba',\n                'abb',\n                'bb',\n                'ba',\n                'bb',\n                'ba',\n                'bb',\n                'ba',\n                'bb'\n            ]) == 5\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_reverse_pairs(['abb', 'bab', 'bbb']) == 1\nassert     count_reverse_pairs(['abc', 'bca', 'cba', 'bac', 'abc']) == 1\nassert     count_reverse_pairs(['abc', 'bca', 'cba']) == 2\nassert     count_reverse_pairs(['abc', 'bca', 'cba', 'bac', 'abc', 'bbb']) == 1\nassert     count_reverse_pairs(['abc', 'bca', 'cba', 'bac', 'abc', 'bca', 'cba', 'bac', 'abc']) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs(['abcd','dcba','xyzd']) == 1\nassert     count_reverse_pairs(['abcd','dcba','xyzd','abc','xyz','xyd']) == 2\nassert     count_reverse_pairs(['abcd','dcba','xyzd','abc','xyz','xyd','abc','xyd','xyz']) == 4\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_reverse_pairs(['dog', 'god', 'do', 'gof', 'gof', 'dog']) == 4\nassert     count_reverse_pairs(['dog', 'god', 'do', 'gof']) == 0\nassert     count_reverse_pairs(['dog', 'dog', 'dog', 'dog', 'god', 'god']) == 6\nassert     count_reverse_pairs(['abc', 'def', 'abc']) == 1\nassert     count_reverse_pairs(['a', 'a', 'a', 'a']) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_reverse_pairs(['abcd', 'dcba', 'xyza', 'xyzab']) == 2, \"Check 1\"\nassert     count_reverse_pairs(['abc', 'xy', 'xyz', 'xzy']) == 2, \"Check 2\"\nassert     count_reverse_pairs(['xyz', 'xy', 'yz']) == 1, \"Check 3\"\nassert     count_reverse_pairs(['xyz', 'xy', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz']) == 0, \"Check 4\"\nassert     count_reverse_pairs(['xyz', 'xy', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz']) == 12, \"Check 5\"\n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_reverse_pairs(['abc', 'ab', 'abc']) == 2\nassert     count_reverse_pairs(['abc', 'ab', 'abc', 'ab']) == 3\nassert     count_reverse_pairs(['abc', 'ab', 'abc', 'abc', 'ab']) == 4\nassert     count_reverse_pairs(['abc', 'ab', 'abc', 'abc', 'ab', 'abc']) == 6"
    },
    {
        "number": 757,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_sublists([1, 2, 3, 4, 5, 4, 1, 2, 3, 4, 5, 4]) == {(1, 2, 3, 4, 5): 2}\nassert     unique_sublists([1, 2, 2, 1, 2, 3, 3, 4]) == {(1, 2): 3, (2, 3): 2, (3, 4): 1}\nassert     unique_sublists([1, 2, 3, 4, 5, 6]) == {(1, 2, 3, 4, 5, 6): 1}\nassert     unique_sublists([1, 2, 3]) == {(1, 2, 3): 1}\nassert     unique_sublists([1, 2, 3, 1, 2, 3, 1, 2, 3]) == {(1, 2, 3): 3}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_sublists([])    == {}\nassert     unique_sublists([1,1,1,1,1])    == {(1,):4}\nassert     unique_sublists([1,2,3,4,5,6,7])    == {(1,2,3,4,5,6,7):1}\nassert     unique_sublists([1,1,2,2,3,3,4,4,5,5])    == {(1,2,3,4,5):2}\nassert     unique_sublists([1,1,2,2,3,3,4,4,5,5,6,6,7,7])    == {(1,2,3,4,5,6,7):3}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_sublists(['a', 'b', 'c', 'a', 'b', 'c', 'd', 'e', 'f']) == {\n        'a': 3, 'b': 2, 'c': 2, 'd': 1, 'e': 1, 'f': 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"d\", \"e\"])     == {(\"a\", \"b\", \"c\"): 2, (\"d\", \"d\"): 3, (\"e\"): 1}\nassert     unique_sublists([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"])     == {(\"a\", \"a\"): 5}\nassert     unique_sublists([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"a\", \"a\", \"c\", \"d\", \"d\", \"e\", \"e\"])     == {(\"a\", \"b\", \"c\"): 2, (\"d\", \"d\"): 3, (\"e\"): 2}\n\ndef get_same_index_elements(list1, list2):\n    '''\n    Write a function to find elements in two lists with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_sublists([1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5]) == {(1,):1, (2,):1, (3,):2, (4,):3, (5,):1}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1]) == {(1,):1}\nassert     unique_sublists([1, 1, 1, 2]) == {(1,):2}\nassert     unique_sublists([1, 2, 1, 1, 3, 4, 4, 5, 5, 6]) == {(1,):4, (2,):1, (3,):1, (4,):2, (5,):1, (6,):1}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_sublists([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == {(1,): 3, (2,): 3, (3,): 3}\nassert unique_sublists([1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7]) == {(1,): 5, (2,): 5, (3,): 5, (4,): 2, (5,): 2, (6,): 2, (7,): 1}\n\n\ndef find_substring(list1, sub_string):\n    '''\n    Write a function that finds all the positions of a substring in a list\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_sublists([1, 2, 3, 1, 2, 3]) == {\n            1: 2,\n            2: 2,\n            3: 2\n        }, \"First\"\nassert     unique_sublists([1, 2, 3, 4, 5, 6, 7, 8]) == {\n            1: 2,\n            2: 1,\n            3: 1,\n            4: 1,\n            5: 1,\n            6: 1,\n            7: 1,\n            8: 1\n        }, \"Second\"\nassert     unique_sublists([1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) == {\n            1: 2,\n            2: 1,\n            3: 1,\n            4: 1,\n            5: 1,\n            6: 1,\n            7: 1,\n            8: 2,\n            9: 1,\n            10: 1\n        }, \"Third\"\nassert     unique_sublists([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == {\n            1: 2,\n            2: 2,\n            3: 2,\n            4: 1,\n            5: 1,\n            6: 1,\n            7: 1,\n            8: 2,\n            9: 1,\n            10: 2\n        }, \"Fourth\"\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6]]) == {(1, 2, 3): 3, (4, 5, 6): 1}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 4}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2, 3): 5}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1, 2, 3]) == {(1, 2, 3): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_sublists([1,1,1,2,2,2]) == {(1,): 3, (2,): 2}\nassert     unique_sublists([1,2,3,4,5,1]) == {(1,): 3, (2,): 2, (3,): 1, (4,): 1, (5,): 1}\nassert     unique_sublists([1,2,3,4,5,1,2,3,4,5]) == {(1,): 4, (2,): 2, (3,): 2, (4,): 2, (5,): 2}\nassert     unique_sublists([1,1,1,1,1,1,1]) == {(1,): 3}\nassert     unique_sublists([1]) == {(1,): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_sublists([1, 2, 2, 3, 3, 3, 4, 5]) == {\n                1: 1,\n                2: 3,\n                3: 2,\n                4: 1,\n                5: 1\n            }\nassert     unique_sublists([1, 1, 1, 2, 3, 3, 3, 4, 5]) == {\n                1: 2,\n                2: 1,\n                3: 2,\n                4: 1,\n                5: 1\n            }\nassert     unique_sublists([1, 2, 3, 4, 4, 4, 5]) == {\n                1: 1,\n                2: 2,\n                3: 1,\n                4: 2,\n                5: 1\n            }\nassert     unique_sublists([1, 2, 3, 4, 5]) == {\n                1: 1,\n                2: 1,\n                3: 1,\n                4: 1,\n                5: 1\n            }\nassert     unique_sublists([]) == {}\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_decimal(100)\nassert     not is_decimal(101)\nassert     is_decimal('123.45')\nassert     not is_decimal('0x112')\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_decimal('01') == True\nassert     is_decimal('0') == True\nassert     is_decimal('10') == True\nassert     is_decimal('1') == True\nassert     is_decimal('01.10') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_decimal(\"123.0\") is True\nassert is_decimal(\"123.01\") is False\nassert is_decimal(\"00123\") is False\nassert is_decimal(\"123.0e2\") is True\nassert is_decimal(\"0.00e2\") is True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_decimal('-0.1') == True\nassert     is_decimal('0.0') == True\nassert     is_decimal('0') == True\nassert     is_decimal('0.1') == False\nassert     is_decimal('abc') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_decimal('0')\nassert     is_decimal('12.40')\nassert     is_decimal('1.40')\nassert     not is_decimal('1.40.5')\nassert     not is_decimal('12.0')\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_decimal('0.00')\nassert     is_decimal('0.9')\nassert     not is_decimal('9.9')\nassert     not is_decimal('-0.9')\nassert     not is_decimal('-0.0')\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_decimal('0') == True\nassert     is_decimal('0.1') == True\nassert     is_decimal('0.01') == True\nassert     is_decimal('0.001') == True\nassert     is_decimal('0.01') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_decimal('0') == True\nassert     is_decimal('0.1') == True\nassert     is_decimal('0.01') == True\nassert     is_decimal('0.001') == True\nassert     is_decimal('0.0001') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_decimal('12') == True, \"is_decimal('12') is True\"\nassert     is_decimal('0') == True, \"is_decimal('0') is True\"\nassert     is_decimal('-12.34') == True, \"is_decimal('-12.34') is True\"\nassert     is_decimal('-0.34') == True, \"is_decimal('-0.34') is True\"\nassert     is_decimal('12.34') == False, \"is_decimal('12.34') is False\"\n"
    },
    {
        "number": 759,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_decimal('1.00') == True,    'fail'\nassert     is_decimal('1.00') == True,    'fail'\nassert     is_decimal('1.99') == False,    'fail'\nassert     is_decimal('1.7') == False,    'fail'\nassert     is_decimal('1.00') == True,    'fail'\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef count_count(lst):\n    '''\n    Write a python function to count how many times a specific element occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_Element([1,2,3,4,5,5,5,6,7,7]) == True\nassert     unique_Element([1,2,3,4,5]) == False\nassert     unique_Element([1,2,3,4,5,6]) == False\nassert     unique_Element([5,5,5,5,5,5,5,5]) == False\nassert     unique_Element([]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_Element([1, 2, 3, 4, 5, 3, 2]) == True\nassert     unique_Element([1, 2, 3, 4, 5, 2, 1]) == False\nassert     unique_Element([1, 2, 3, 4, 5, 2, 1, 2]) == False\nassert     unique_Element([1, 2, 3, 4, 5, 3, 2, 1]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_Element([1,2,3,3]) == True\nassert     unique_Element([1,2,3,4]) == False\nassert     unique_Element([1,1,1,1]) == True\nassert     unique_Element([1,2,3,2,1]) == False\nassert     unique_Element([2,1,2,1]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_Element([1, 2, 3, 1]) == False\nassert     unique_Element([1, 2, 3, 4]) == True\nassert     unique_Element([1, 2, 3, 1, 3]) == False\nassert     unique_Element([1, 2, 3, 4, 2]) == False\nassert     unique_Element([1, 2, 3, 2]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_Element([1, 2, 3, 3, 4, 5]) == False\nassert     unique_Element([1, 2, 3, 4, 5]) == True\nassert     unique_Element([1, 2, 3, 4]) == True\nassert     unique_Element([1, 2, 3]) == True\nassert     unique_Element([1, 2, 3, 3, 3, 3, 3]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_Element([1,2,3,4,5,6]) == True\nassert     unique_Element([1,1,2,2]) == False\nassert     unique_Element([1,2,3,4,1,2]) == True\nassert     unique_Element([1,2,3,4,5,6,7,8]) == False\nassert     unique_Element([]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique_Element([1,1,1,2,2,2,3,3,3]) == True\nassert     unique_Element([1,1,2,2,3,3,3]) == True\nassert     unique_Element([1,2,2,2,2,3,3,3]) == False\n\ndef almost_sorted(arr):\n    '''\n    Write a python function to check whether the given array is almost sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_Element([1,1,2,2,3])==False\nassert     unique_Element([1,1,2,3])==True\nassert     unique_Element([1,2,3,4])==False\nassert     unique_Element([1,1,1,1,1])==True\nassert     unique_Element([2,2,2,2,2])==True\n"
    },
    {
        "number": 760,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_Element([1, 2, 3, 4, 4, 4, 4, 5]) == True\nassert     unique_Element([1, 2, 3, 4, 4, 4, 5]) == True\nassert     unique_Element([1, 2, 3, 4, 5]) == False\nassert     unique_Element([1, 2, 3, 4, 4, 3, 4, 5]) == False\nassert     unique_Element([1, 2, 3, 4, 4, 3, 4, 5, 5]) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(1) == False, \"1th month should be out of range\"\nassert     check_monthnumber_number(2) == True, \"2th month should be in range\"\nassert     check_monthnumber_number(12) == True, \"12th month should be in range\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(4)    == True\nassert     check_monthnumber_number(1)     == True\nassert     check_monthnumber_number(7)     == False\nassert     check_monthnumber_number(3)     == False\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == True\nassert     check_monthnumber_number(5) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_monthnumber_number(3) == False\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(5) == False\nassert     check_monthnumber_number(6) == False\nassert     check_monthnumber_number(7) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == True\nassert     check_monthnumber_number(5) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(1) == True, \"test1: check_monthnumber_number(1)\"\nassert     check_monthnumber_number(2) == True, \"test2: check_monthnumber_number(2)\"\nassert     check_monthnumber_number(3) == False, \"test3: check_monthnumber_number(3)\"\nassert     check_monthnumber_number(4) == False, \"test4: check_monthnumber_number(4)\"\nassert     check_monthnumber_number(5) == False, \"test5: check_monthnumber_number(5)\"\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == True\nassert     check_monthnumber_number(5) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(13) == False\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_min_diff([1,2,3,4,5,6],7) == 2\nassert     find_min_diff([-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9],50) == 4\nassert     find_min_diff([-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9],-50) == 10\nassert     find_min_diff([-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9],9) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_min_diff([1,2,3,4,5,6,7,8,9],9) == 0\nassert     find_min_diff([1,2,3,4,5,6,7,8,9],10) == 1\nassert     find_min_diff([-1,1,2,-3,4,5,6,7,8,9],9) == -1\nassert     find_min_diff([-1,1,2,-3,4,5,6,7,8,9],10) == 1\nassert     find_min_diff([-1,1,2,-3,4,5,6,7,8,9],1) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_min_diff([1,3,6,10,15],5) == 1\nassert     find_min_diff([1,3,6,10,15],10) == 1\nassert     find_min_diff([1,3,6,10,15],0) == 15\nassert     find_min_diff([1,3,6,10,15],16) == 16\nassert     find_min_diff([1,3,6,10,15],17) == 17\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_min_diff(arr,n) == 1\nassert     find_min_diff([-3,5,10,20,24,27],6) == 2\nassert     find_min_diff([-3,-5,10,-20,24,27],6) == 3\nassert     find_min_diff([-3,-5,-10,-20,-24,-27],6) == 1\nassert     find_min_diff([-3,5,10,20,24,27],-6) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_min_diff([1,2,3,4,5,6,7,8,9],9) == 1\nassert     find_min_diff([1,2,3,4,5,6,7,8,9],3) == 4\nassert     find_min_diff([1,2,3,4,5,6,7,8,9],7) == 5\nassert     find_min_diff([1,2,3,4,5,6,7,8,9],2) == 4\nassert     find_min_diff([1,2,3,4,5,6,7,8,9],0) == 9\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_min_diff([10, 7, 8, 9, 5, 12, 15, 1, 2, 3, 11], 10) == 5\nassert     find_min_diff([10, 7, 8, 9, 5, 12, 15, 1, 2, 3, 11], 1) == 1\nassert     find_min_diff([10, 7, 8, 9, 5, 12, 15, 1, 2, 3, 11], 9) == 8\nassert     find_min_diff([10, 7, 8, 9, 5, 12, 15, 1, 2, 3, 11], 12) == 8\nassert     find_min_diff([10, 7, 8, 9, 5, 12, 15, 1, 2, 3, 11], 5) == 5\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_min_diff([0,0,0,0,0,1,1],6) == 2\nassert     find_min_diff([1,2,3,4],6) == 2\nassert     find_min_diff([1,2,3,4,5],6) == 3\nassert     find_min_diff([-1,0,1,2],3) == 2\nassert     find_min_diff([-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],13) == 2\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_min_diff([-10,10,5,7,2],5)==3\nassert     find_min_diff([-10,10,5,7,2],4)==-3\nassert     find_min_diff([-10,10,5,7,2],10)==-5\nassert     find_min_diff([-10,10,5,7,2],9)==3\nassert     find_min_diff([-10,10,5,7,2],8)==1\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_min_diff([2,4,6,8,10],5) == 2\nassert     find_min_diff([2,4,6,8,10],4) == 4\nassert     find_min_diff([2,4,6,8,10],3) == 6\nassert     find_min_diff([2,4,6,8,10],2) == 4\nassert     find_min_diff([2,4,6,8,10],1) == 10\n"
    },
    {
        "number": 763,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_min_diff([2, 3, 4, 5], 2) == 3\nassert     find_min_diff([1, 2, 3, 4, 5], 1) == 4\nassert     find_min_diff([2, 3, 4, 5], 1) == 4\nassert     find_min_diff([2, 3, 4, 5], 6) == 4\nassert     find_min_diff([2, 3, 4, 5], 2) == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     number_ctr('numbers') == 1\nassert     number_ctr('1234567890') == 10\nassert     number_ctr('10.98') == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     number_ctr(\"my name is mahi\") == 0\nassert     number_ctr(\"my name is mahi\") == 3\nassert     number_ctr(\"my name is mahi\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     number_ctr('') == 0\nassert     number_ctr('a') == 1\nassert     number_ctr('abc') == 3\nassert     number_ctr('abcd') == 4\nassert     number_ctr('a123456789') == 9\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     number_ctr(\"\") == 0\nassert     number_ctr(\"a\") == 1\nassert     number_ctr(\"0\") == 1\nassert     number_ctr(\"0a\") == 2\nassert     number_ctr(\"a0\") == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     number_ctr('some numbers') == 4\nassert     number_ctr('other numbers') == 3\nassert     number_ctr('123') == 1\nassert     number_ctr('1235') == 3\nassert     number_ctr('1234') == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     number_ctr('xxxyyyxxxyyz') == 3\nassert     number_ctr('xxxyyyxxxy') == 4\nassert     number_ctr('xxxyyyxyyxy') == 4\nassert     number_ctr('xxxyyyxxxyyy') == 4\nassert     number_ctr('xxxyyyxxxxy') == 5\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     number_ctr(123) == 3\nassert     number_ctr(1234) == 4\nassert     number_ctr(12345) == 5\nassert     number_ctr('123') == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     number_ctr(\"23456789\") == 3\nassert     number_ctr(\"234567\") == 5\nassert     number_ctr(\"2345\") == 6\nassert     number_ctr(\"12345\") == 5\nassert     number_ctr(\"1234\") == 4\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     number_ctr('some string') == 5\nassert     number_ctr('12345678') == 7\nassert     number_ctr('nonsense') == 0\n\ndef rotate(lst, n):\n    '''\n    Write a python function to rotate a list by n positions.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     number_ctr('12345') == 5\nassert     number_ctr('123') == 2\nassert     number_ctr('0') == 1\nassert     number_ctr('00') == 2\nassert     number_ctr('00123') == 4\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_polite(10) == True\nassert     is_polite(11) == False\nassert     is_polite(12) == True\nassert     is_polite(13) == False\nassert     is_polite(14) == True\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_polite(10) == False\nassert     is_polite(12) == True\nassert     is_polite(15) == False\nassert     is_polite(20) == True\nassert     is_polite(21) == False\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_polite(5) == 5\nassert     is_polite(10) == 10\nassert     is_polite(15) == 15\nassert     is_polite(25) == 25\nassert     is_polite(33) == 33\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_polite(3)== 2\nassert     is_polite(4)== 4\nassert     is_polite(5)== 6\nassert     is_polite(6)== 8\nassert     is_polite(7)== 10\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_polite(0) == 1\nassert     is_polite(1) == 1\nassert     is_polite(2) == 1\nassert     is_polite(3) == 1\nassert     is_polite(4) == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_polite(2) == True, is_polite(2)\nassert     is_polite(3) == True, is_polite(3)\nassert     is_polite(4) == True, is_polite(4)\nassert     is_polite(5) == True, is_polite(5)\nassert     is_polite(6) == True, is_polite(6)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_polite(1)==3 \nassert     is_polite(2)==2 \nassert     is_polite(3)==1 \nassert     is_polite(4)==1\nassert     is_polite(5)==3 \n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (is_polite(1)==1)\nassert     (is_polite(2)==2)\nassert     (is_polite(3)==3)\nassert     (is_polite(4)==6)\nassert     (is_polite(5)==10)\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_polite(2) == 2 \nassert     is_polite(3) == 3 \nassert     is_polite(4) == 5\nassert     is_polite(5) == 7\nassert     is_polite(6) == 11\n"
    },
    {
        "number": 765,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_polite(2) == False\nassert is_polite(5) == False\nassert is_polite(6) == True\nassert is_polite(14) == False\nassert is_polite(15) == False\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pair_wise(['foo', 'bar', 'baz', 'qux', 'foo']) == \\\n    ['foo', 'bar', 'baz', 'qux']\n\nassert pair_wise([]) == []\nassert pair_wise([1]) == []\nassert pair_wise([1, 2, 3]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pair_wise(l1) == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]\nassert     pair_wise(l2) == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\nassert     pair_wise(l3) == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]\nassert     pair_wise(l4) == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\nassert     pair_wise(l5) == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert     pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]\nassert     pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert     pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]    == pair_wise([0, 1, 2, 3, 4, 5])\nassert     [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)] == pair_wise([0, 1, 2, 3, 4, 5, 6])\nassert     [(0, 1), (1, 2), (2, 3)] == pair_wise([0, 1, 2, 3])\nassert     [] == pair_wise([])\nassert     [(0, 1)] == pair_wise([0])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [(1, 2), (2, 3), (3, 4)] == pair_wise([1, 2, 3, 4])\nassert     [(1, 2), (2, 3), (3, 4)] == pair_wise([1, 2, 3, 4, 5, 6, 7])\nassert     [(1, 2), (2, 3), (3, 4)] == pair_wise([1, 2, 3, 4, 5, 6, 7])\nassert     [(1, 2), (2, 3), (3, 4)] == pair_wise([1, 2, 3, 4, 5, 6, 7, 8])\nassert     [(1, 2), (2, 3), (3, 4)] == pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]\nassert     pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]\nassert     pair_wise([]) == []\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [\n    [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'f')],\n    [('b', 'c'), ('c', 'd')],\n    [('d', 'e'), ('e', 'f')],\n    [('e', 'f')]\n]    ==    pair_wise([\n    'a', 'b', 'c', 'd', 'e', 'f',\n    'b', 'c', 'd', 'e', 'f',\n    'c', 'd', 'e', 'f',\n    'd', 'e', 'f',\n    'e', 'f',\n])\nassert     [\n    [('a', 'b'), ('b', 'c'), ('c', 'd')],\n    [('b', 'c'), ('c', 'd')],\n    [('c', 'd')],\n    [('d', 'e'), ('e', 'f'), ('f', 'g'), ('g', 'h'), ('h', 'i'), ('i', 'j'), ('j', 'k')],\n    [('e', 'f'), ('f', 'g'), ('g', 'h')],\n    [('g', 'h'), ('h', 'i'), ('i', 'j'), ('j', 'k'), ('k', 'l'), ('l','m'), ('m', 'n'), ('n', 'o'), ('o', 'p'), ('p', 'q'), ('q', 'r'), ('r','s'), ('s', 't'), ('t', 'u'), ('u', 'v'), ('v', 'w'), ('w', 'x'), ('x', 'y'), ('y', 'z'), ('z', 'a')]\n]    ==    pair_wise([\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    't', 'u', 'v', 'w', 'x', 'y', 'z'\n])\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)]\nassert     pair_wise([1,2,3,4,6]) == [(1,2), (2,3), (3,4), (4,6)]\nassert     pair_wise([1,2,3,4,5,6]) == [(1,2), (2,3), (3,4), (4,5), (5,6)]\nassert     pair_wise([1,2,3,4,5,6,7,8]) == [(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8)]\nassert     pair_wise([1,2,3,4,5,6,7,8,9]) == [(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9)]\n"
    },
    {
        "number": 766,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_pairs_count([1,4,20,3,10,5], 33) == 3, 'incorrect'\nassert     get_pairs_count([1,2,3,4,5], 8) == 1, 'incorrect'\nassert     get_pairs_count([1,4,20,3,10,5], 27) == 1, 'incorrect'\nassert     get_pairs_count([1,4,20,3,10,5], 30) == 0, 'incorrect'\nassert     get_pairs_count([1,4,20,3,10,5], 4) == 0, 'incorrect'\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_pairs_count([1,4,5,6,7,8,9], 7) == 3\nassert     get_pairs_count([1,2,3,4,5,6,7,8], 8) == 4\nassert     get_pairs_count([1,2,3,4,5,6,7,8,9], 9) == 2\nassert     get_pairs_count([1,2,3,4,5,6,7,8,9], 10) == 0\nassert     get_pairs_count([], 10) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_pairs_count([1,2,3,4,5,6,7], 17) == 3\nassert     get_pairs_count([1,2,3,4,5,6,7], 18) == 1\nassert     get_pairs_count([1,2,3,4,5,6,7], 19) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8], 10) == 2\nassert     get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8], 14) == 3\nassert     get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8], 6) == 4\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_pairs_count([1,2,3,4,5,6], 4) == 3\nassert     get_pairs_count([1,2,3,4,5], 4) == 2\nassert     get_pairs_count([-1,-2,2,4,4,5,6,7,8,9,10], 4) == 2\nassert     get_pairs_count([1,2,3,4,5], 7) == 1\nassert     get_pairs_count([-1,-2,2,4,4,5,6,7,8,9,10], 7) == 3\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_pairs_count([1,1,2,2,3,3,4], 4) == 2\nassert     get_pairs_count([1,1,2,2,3,3,4], 3) == 2\nassert     get_pairs_count([1,1,2,2,3,3,4], 5) == 0\nassert     get_pairs_count([1,1,2,2,3,3,4], 2) == 1\nassert     get_pairs_count([1,1,2,2,3,3,4], 0) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_pairs_count([1,2,3,4], 3) == 2\nassert     get_pairs_count([1,2,3,4], 2) == 1\nassert     get_pairs_count([1,2,3,4], 5) == 0\nassert     get_pairs_count([1,2,3,4], 0) == 4\nassert     get_pairs_count([1,2,3,4], 1) == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_pairs_count([1, 1, 2, 2], 4) == 1\nassert     get_pairs_count([1, 1, 2, 2], 3) == 2\nassert     get_pairs_count([1, 1, 2, 2], 4) == 0\nassert     get_pairs_count([1, 1, 2, 2], 2) == 1\nassert     get_pairs_count([1, 1, 2, 2], 5) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_pairs_count([1, 3, 5, 7, 9], 12) == 2\nassert     get_pairs_count([1, 4, 6, 7, 9, 12], 15) == 2\nassert     get_pairs_count([1, 3, 5, 7, 9], 18) == 3\nassert     get_pairs_count([1, 3, 5, 7, 9], 6) == 0\nassert     get_pairs_count([1, 3, 5, 7, 9], 14) == 0\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef SymmetricDiff(li1,li2):\n    '''\n    Write a python function to get the symmetric difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Diff([1,2,3], [1,2,4])    == [3]\nassert     Diff([1,2,3,1], [1,2,4,5])    == [3,4]\nassert     Diff([], [1,2,3])    == [1,2,3]\nassert     Diff([1,2,3], [])    == [1,2,3]\nassert     Diff([], [])    == []\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n(Diff(li,li2)==[1,2,3])\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Diff([1,2,3],\n            [1,2,4]) == [2,3]\nassert     Diff([1,2,3,4],\n            [1,2,3]) == [4]\nassert     Diff([1,2,3,4],\n            [1,2,3,5]) == [4]\nassert     Diff([],\n            [1,2,3]) == [1,2,3]\nassert     Diff([1,2,3],\n            []) == [1,2,3]\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (Diff([1, 2, 3, 4], [4, 3, 2, 1]) == [5])\nassert     (Diff([0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3]) == [4, 5, 6, 7])\nassert     (Diff([1, 2, 3], [4, 5, 6]) == [7])\nassert     (Diff([1, 2, 3, 4, 5], [4, 3, 2, 1, 8]) == [5, 6, 7])\nassert     (Diff([2, 1, 3, 4], [1, 2, 3, 4, 5]) == [5, 6, 7])\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Diff([],[]) == []\nassert     Diff([],[1]) == []\nassert     Diff([1,2],[]) == [1]\nassert     Diff([],[2]) == [2]\nassert     Diff([1,2],[1]) == [2]\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef Subtract(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Diff( [1, 2, 3], [1, 2, 4] ) == [3]\nassert     Diff( [1, 2, 3], [1, 2, 3, 4, 5] ) == [5]\nassert     Diff( [1, 2], [1, 2, 3] ) == [3]\nassert     Diff( [1], [2] ) == [2]\nassert     Diff( [1, 2, 3], [1, 2, 3] ) == [ ]\n"
    },
    {
        "number": 769,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Diff([1,2,3,4,5,6],[1,3,5]) == [2,4,6]\nassert     Diff([1,2,3,4,5,6],[2,4,6]) == [1,3,5]\nassert     Diff([1,2,3,4,5,6],[1,2,3,4,5,6]) == []\nassert     Diff([1,2,3,4,5,6],[1,2,3]) == [4,5,6]"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_num_sum(4)     == 44\nassert     odd_num_sum(7)     == 206\nassert     odd_num_sum(10)     == 225\n\n\n\ndef is_palindrome(s) : \n    '''\n    Write a python function to determine whether a given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     10 == odd_num_sum(10)\nassert     569 == odd_num_sum(569)\nassert     2675290 == odd_num_sum(2675290)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (odd_num_sum(10) == 225)\nassert     (odd_num_sum(15) == 3525)\nassert     (odd_num_sum(20) == 43820)\nassert     (odd_num_sum(25) == 432525)\nassert     (odd_num_sum(30) == 5295025)\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_num_sum(5) == 15625\nassert     odd_num_sum(10) == 95437\nassert     odd_num_sum(20) == 348689\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_num_sum(1) == 0\nassert     odd_num_sum(2) == 36\nassert     odd_num_sum(3) == 633\nassert     odd_num_sum(4) == 46656\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_num_sum(10) == 22\nassert     odd_num_sum(25) == 654\nassert     odd_num_sum(100) == 47820\nassert     odd_num_sum(1000) == 89800\nassert     odd_num_sum(100000) == 898200\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_num_sum(5) == 55\nassert     odd_num_sum(10) == 55\nassert     odd_num_sum(20) == 55\nassert     odd_num_sum(40) == 55\nassert     odd_num_sum(1) == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_num_sum(10) == 153\nassert     odd_num_sum(100) == 377\nassert     odd_num_sum(10000) == 1837360\nassert     odd_num_sum(100000) == 623163960\nassert     odd_num_sum(1000000) == 468606736\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_num_sum(0)     ==     0\nassert     odd_num_sum(3)     ==     33\nassert     odd_num_sum(8)     ==     84\nassert     odd_num_sum(10)     ==     255\nassert     odd_num_sum(11)     ==     660\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_expression(\"[{}]\") == True\nassert     check_expression(\"[{[]]\") == True\nassert     check_expression(\"[{[]]}]\") == True\nassert     check_expression(\"[{{}()]\") == True\nassert     check_expression(\"[{{}{}[()]]\") == True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_expression('(a + b) * (c + d)') == True\nassert     check_expression('a * b + c * d') == True\nassert     check_expression('a + (b * c)') == False\nassert     check_expression('a + b * c * d') == True\nassert     check_expression('a + (b * c) + d') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_expression('(a+b)') == True\nassert     check_expression('()') == True\nassert     check_expression('()()') == True\nassert     check_expression('(a+b)') == True\nassert     check_expression('((a+b))') == True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_expression('(())') == True\nassert     check_expression('()()') == True\nassert     check_expression('())()') == True\nassert     check_expression('()((()))') == True\nassert     check_expression('(()(())') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_expression(\"{()}\") == True\nassert     check_expression(\"{(})}\") == True\nassert     check_expression(\"{(([])]}\") == True\nassert     check_expression(\"{((())}\") == True\nassert     check_expression(\"{{[[(())]]}}\") == True\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_expression(\"(())\") == True\nassert     check_expression(\")()(\") == False\nassert     check_expression(\"(\") == False\nassert     check_expression(\"()))\") == False\nassert     check_expression(\"())\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_expression('(a+b)') == True\nassert     check_expression('(a+(b+c))') == True\nassert     check_expression('(a+(b+c)*d)') == True\nassert     check_expression('(a+(b+(c+d))*e)') == True\nassert     check_expression('(a+(b+c)*d)') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_expression('(())') == True\nassert     check_expression('(()') == False\nassert     check_expression(')') == False\nassert     check_expression('(()))') == False\nassert     check_expression(')') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef check_parenthesis(s):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n\ndef find_path(graph, start, end, path=[]):\n    \"\"\"\n    Find the path from start to end in graph\n    \"\"\"\n    path += [start]\n    if start == end:\n        return path\n    if not graph.has_key(start):\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_path(graph, node, end, path)\n            if newpath:\n                return newpath\n    return None\n\ndef find_path_bfs(graph, start, end, path=[]):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    path = path + [start]\n    if start == end:\n        return path\n    queue = deque()\n    queue += [start]\n    visited = {}\n    visited[start] = True\n    while queue:\n        node = queue.popleft()\n        visited[node] = True\n        for neighbour in graph[node]:\n            if neighbour == end:\n                return path\n            if neighbour not in visited:\n                queue += [neighbour]\n                visited[neighbour] = True\n    return None\n\ndef print_longest_path(graph, start, end):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_expression(\"(({}))\") == True\nassert     check_expression(\"[][]\") == True\nassert     check_expression(\"{{}[]}\") == True\nassert     check_expression(\"[{}]\") == True\nassert     check_expression(\"([{}])\") == True\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_length('This is an example', 4) == 'This is an ex'\nassert     remove_length('This is an example of good', 2) == 'This is an example'\nassert     remove_length('This is an example', 0) == 'This is an example'\nassert     remove_length('This is an example of good', 3) == 'This is an example'\nassert     remove_length('This is an example', 1) == 'This is an example'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_length('thequickbrownfoxjumpsoverthelazydog', 3) == 'qthe quick brown fox jump sover the lazy dog'\nassert     remove_length('thequickbrownfoxjumpsoverthelazydog', 5) == 'quick the brown fox jump over the lazy dog'\nassert     remove_length('thequickbrownfoxjumpsoverthelazydog', 12) == 'quick brown fox jump over the lazy dog'\nassert     remove_length('thequickbrownfoxjumpsoverthelazydog', 17) == 'the quick brown fox jump over the lazy dog'\nassert     remove_length('thequickbrownfoxjumpsoverthelazydog', 18) == 'the quick brown fox jump over the lazy dog'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_length('ABCDEFG', 2) == 'CDEFG'\nassert     remove_length('ABCDEFG', 1) == 'ABCDEFG'\nassert     remove_length('ABCDEFG', 10) == ''\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_length('a kdkd kdkd kdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkdkd"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_length(\"kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kata kat"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_length('the quick brown fox jumps over the lazy dog', 3) == 'qwee'\nassert     remove_length('I like Python', 2) == 'like'\nassert     remove_length('', 2) == ''\nassert     remove_length('I like Python', 3) == 'like'\nassert     remove_length('I like Python', 1) == 'i'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_length('the sky is blue', 2) == 'blue'\nassert     remove_length('the sky is blue', 3) == 'blue'\nassert     remove_length('the sky is blue', 4) == 'blue'\nassert     remove_length('i like cats', 2) == 'cats'\nassert     remove_length('i like cats', 3) == 'like'\n"
    },
    {
        "number": 772,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_length('abcdefgh', 3) == 'defgh'\nassert remove_length('abcdefgh', 5) == ''\nassert remove_length('abcdefgh', 2) == 'bcdefgh'\nassert remove_length('abcdefgh', 1) == 'cdefgh'\nassert remove_length('abcdefgh', 0) == 'defgh'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     occurance_substring(\"this is a test string\",\"is\") == '2'\nassert     occurance_substring(\"this is a test string\",\"a\") == '1'\nassert     occurance_substring(\"this is a test string\",\"string\") == '0'\nassert     occurance_substring(\"this is a test string\",\"tt\") == None\nassert     occurance_substring(\"this is a test string\",\"tes\") == '1'\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     occurance_substring('this is a test','this') == (0,7)\nassert     occurance_substring('this is a test','t') == (7,11)\nassert     occurance_substring('this is a test','is') == (11,18)\nassert     occurance_substring('this is a test','test') == (18,23)\nassert     occurance_substring('this is a test','es') == (0,2)\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     occurance_substring('This is a text','text')==1\nassert     occurance_substring('This is a text','texttext')==None\nassert     occurance_substring('This is a text','text')==1\nassert     occurance_substring('This is a text','textt')==None\nassert     occurance_substring('This is a text','text')==1\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     occurance_substring('sherlock','sherlock') == ('sherlock',0)\nassert     occurance_substring('sherlock','sherlock') == ('sherlock',0)\nassert     occurance_substring('abcd','cd') == None\nassert     occurance_substring('abcd','abcd') == None\nassert     occurance_substring('abcd','cd') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     occurance_substring('souce code','code')\nassert     occurance_substring('source code','code')\nassert     occurance_substring('code','code')\nassert     occurance_substring('code','cod')\nassert     occurance_substring('code','co')\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef word2vec(pattern,str1):\n    '''\n    Given a pattern and a string, check if the pattern is present in the string.\n    Note: the pattern is a word or a sequence of words.\n    '''\n    pass\n\nassert word2vec(\"i am\",\"i am a boy\") == True\nassert word2vec(\"i am\",\"am boy\") == False\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     occurance_substring('ananas','ana') == 2\nassert     occurance_substring('ananas','na') == 1\nassert     occurance_substring('ananas','naa') == None\nassert     occurance_substring('ananas','anas') == None\nassert     occurance_substring('ananas','ana') == 2\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     occurance_substring('aabbcc','ab') == [1,2]\nassert     occurance_substring('aabbcc','aa') == [1]\nassert     occurance_substring('aabbcc','b') == [1]\nassert     occurance_substring('aabbcc','cc') == [2]\nassert     occurance_substring('aabbcc','dd') == [1]\n"
    },
    {
        "number": 773,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     occurance_substring('abcdefg',    'f') == (1,3)\nassert     occurance_substring('abcdefg',    'fd') == (1,5)\nassert     occurance_substring('abcdefg',    'fg') == (1,4)\nassert     occurance_substring('abcdefg',    'g') == (2,3)\nassert     occurance_substring('abcdefg',    'fg') == (2,5)\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9,10]) == True\nassert     odd_position([1,2,3,4,5]) == False\nassert     odd_position([1,2,3,4,5,6,7,8,9,10]) == True\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11]) == False\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12]) == True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_position([1,2,3,4,5,6,7]) == True\nassert     odd_position([1,2,3,4]) == False\nassert     odd_position([1,2,3,4,5,6,7,8]) == True\nassert     odd_position([1,2,3,4,5,6,7,8,9]) == True\nassert     odd_position([1,2,3,4,5,6,7,8,9,10]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_position([1,2,3,4,5]) == True\nassert     odd_position([1,2,3,4,5,6]) == True\nassert     odd_position([1,2,3,4,5,6,7]) == False\nassert     odd_position([1,2,3,4,5,6,7,8]) == False\nassert     odd_position([1,2,3,4,5,6,7,8,9]) == True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8]) == False\nassert     odd_position([1,2,3,4,5,6,7,8,9]) == True\nassert     odd_position([1,2,3,4,5,6,7]) == True\nassert     odd_position([1,2,3,4,5,6]) == True\nassert     odd_position([1,2,3,4,5]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9]) == True\nassert     odd_position([1,2,3,4,5,6,7,8,10]) == False\nassert     odd_position([]) == True\nassert     odd_position([1,3,5,7,9]) == True\nassert     odd_position([1,3,5,7,9,11]) == True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_position([1,2,3,4,5]) == True\nassert odd_position([1,2,3,4,5,6]) == False\nassert odd_position([1,3,5]) == True\nassert odd_position([1,3,5,7]) == True\nassert odd_position([1,3,5,7,9]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [True, False, True, False] == odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert    [True, True, True, True]    == odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert    [True, False, True, False] == odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nassert    [False, False, False, True] == odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nassert    [False, False, False, True] == odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_position([1, 2, 3, 4, 5]) == True\nassert     odd_position([2, 4, 6, 8, 10]) == False\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 775,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_position([1, 3, 4, 5, 9, 2, 7]) == True\nassert     odd_position([1, 2, 3, 4, 5]) == True\nassert     odd_position([1, 3, 3, 5, 3, 2, 3]) == True\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_vowels('at') == 0\nassert     count_vowels('no') == 0\nassert     count_vowels('un') == 1\nassert     count_vowels('unhappi') == 1\nassert     count_vowels('anh') == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_vowels('abcd') == 0\nassert     count_vowels('abcda') == 2\nassert     count_vowels('abcde') == 1\nassert     count_vowels('a') == 1\nassert     count_vowels('aba') == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_vowels('happy') == 0\nassert     count_vowels('flow') == 3\nassert     count_vowels('flowy') == 4\nassert     count_vowels('ab') == 0\nassert     count_vowels('flowyx') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_vowels(\"ababcb\") == 5\nassert     count_vowels(\"wqhqjr\") == 0\nassert     count_vowels(\"uioqwqwqw\") == 0\nassert     count_vowels(\"abcbca\") == 2\nassert     count_vowels(\"wwwwtqhqw\") == 4\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_vowels(\"aabbccddee\") == {'a': 1, 'b': 2, 'e': 1, 'c': 1}\nassert     count_vowels(\"aaabbbccc\") == {'a': 2, 'b': 3, 'c': 2}\nassert     count_vowels(\"aaaaa\") == {'a': 5}\nassert     count_vowels(\"abcdef\") == {'a': 1, 'b': 1, 'c': 1, 'e': 1, 'f': 1}\nassert     count_vowels(\"abcd\") == {'a': 1, 'b': 1, 'c': 1}\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_vowels('hello') == 1\nassert     count_vowels('hello, world!') == 1\nassert     count_vowels('a, b, c') == 0\nassert     count_vowels('We have nothing in common!') == 0\nassert     count_vowels('He, a, and I are having a great party!') == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_vowels('alice') == {'a': 2, 'e': 1, 'i': 1, 'o': 1}\nassert     count_vowels('bob') == {'b': 1, 'o': 1}\nassert     count_vowels('tom') == {'o': 1}\nassert     count_vowels('tommy') == {'o': 2}\nassert     count_vowels('a') == {'a': 1}\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_vowels('hello') == 0\nassert     count_vowels('leetcode') == 2\nassert     count_vowels('rhythm') == 1\nassert     count_vowels('aeeeed') == 2\nassert     count_vowels('sky') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_vowels(\"My name is Saurabh. How are you?\") == 2\nassert     count_vowels(\"\") == 0\nassert     count_vowels(\"My name is Saurabh. How are you?\") == 7\nassert     count_vowels(\"My name is Saurabh. How are you?\") == 6\n"
    },
    {
        "number": 776,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_vowels('ab') == 1\nassert     count_vowels('abc') == 0\nassert     count_vowels('abcd') == 1\nassert     count_vowels('aabcdd') == 2\nassert     count_vowels('aabbccdeeffggghhiiiii') == 5\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_sum([2,3,4,5,6,2,4,3,1,7]) == 19\nassert     find_sum([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == 45\nassert     find_sum([2,3,4,5,6,2,4,3,1,7]) == 19\nassert     find_sum([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == 45\nassert     find_sum([2,3,4,5,6,2,4,3,1,7]) == 19\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_sum([1,2,2,1]) == 3\nassert     find_sum([1,2,3,1,2]) == 6\nassert     find_sum([1,2,3,4,1,2,1]) == 9\nassert     find_sum([1,2,3,4,5]) == 15"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_sum([1,2,3,4,5,1,2,3,4,5]) == 15\nassert     find_sum([1,2,3,4,5]) == 10\nassert     find_sum([1,2,3,4,5,1,2,3,4,5]) == 30\nassert     find_sum([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == 60"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_sum([3,2,2,5,7,5,2]) == 11, \"Wrong result\"\nassert     find_sum([1,4,6,5,5,6,7,7]) == 22, \"Wrong result\"\nassert     find_sum([1,2,3,4]) == 6, \"Wrong result\"\nassert     find_sum([1,2,2,3,3,5]) == 8, \"Wrong result\"\nassert     find_sum([1,3,2,2,3,5]) == 9, \"Wrong result\"\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_sum([1,2,4,3,4,5,5,3,5,6,7,7,3,3,3,2,3,3,7,8,6,4,5,6,7,7,2,7,3,5,4,7,5,3,4,5,6,7,5,5,3,6,5,3,4,7,7,2,3,5,7,5,4,5,6,6,2,6,5,5,6,7,8,4,7,3,4,6,3,4,7,3,2,7,6,7,7,6,3,7,8,5,7,5,4,5,6,4,6,7,4,7,7,3,7,3,4,7,4,6,5,7,5,4,7,5,6,5,6,7,4,5,7,5,4,6,7,4,7,5,7,6,5,3,5,6,7,7,7,6,7,7,5,7,5,6,7,7,7,5,7,7,7,7,7,5,6,4,6,4,7,6,7,5,6,7,7,4,7,7,7,7,6,7,5,7,6,7,7,6,7,7,7,5,7,6,7,7,7,7,7,6,6,7,7,7,7,6,7,5,7,7,6,5,6,7,7,7,7,5,7,7,7,7,7,7,5,7,5,7,7,7,7,5,6,7,7,7,7,5,6,7,7,7,7,7,7,7,5,7,7,6,7,7,7,7,7,7,7,6,7,7,7,7,7,7,5,7,7,7,7,7,7,5,7,7,6,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,5,7,7,6,7,7,7,7,7,6,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,6,7,7,7,7,6,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,6,6,7,7,6,7,7,7,7,5,7,7,7,6,6,7,7,7,7,6,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,6,7,7,7,6,6,7,6,7,6,7,6,7,6,7,6,7,6,6,7,6,7,6,6,7,6,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,6,7,7,6,7,7,6,7,6,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,6,7,7,6,7,6,7,6,7,6,7,7,6,7,7,7,7,6,6,7,7,7,7,7,7,6,6,7,7,7,7,6,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,6,7,6,7,6,7,6,7,7,7,7,7,7,7,7,6,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,6,6,7,6,7,6,7,6,7,7,7,7,7,6,7,7,6,7,6,7,7,7,7,7,7,7,6,6,7,6,7,7,6,7,7,7,7,7,7,7,7,6,6,7,7,7,7,7,7,7,7,7,6,7,7,7,7,6,7,7,7,7,7,6,7,6,7,6,7,7,6,6,6,7,6,6,7,6,7,6,6,7,6,6,6,6,7,6,7,6,6,7,6,7,7,6,6,6,7,6,6,7,6,7,6,6,6,7,7,7,7,6,7,6,7,7,7,7,6,7,6,7,7,7,7,6,7,7,7,7,6,7,7,7,6,7,7,7,7,6,7,7,7,7,6,6,7,6,6,6,7,6,7,6,6,6,6,7,6,6,7,6,7,7,6,7,7,7,6,7,6,7,7,7,7,6,6,7,7,7,6,7,6,6,7,6,6,6,6,7,6,7,6,7,6,7,6,7,6,7,6,6,6,6,7,6,7,6,6,7,6,7,6,6,6,6,7,6,6,7,6,6,7,6,6,6,6,6,7,6,7,6,6,6,6,6,6,6,6,7,6,7,6,6,6,6,6,6,6,6,7,6,6,7,6,6,6,6,7,7,7,6,7,6,6,6,6,6,7,7,6,6,6,6,7,6,6,6,6,6,6,6,7,6,6,6,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_sum([1,2,3,4,5,4,3,2,1]) == 9\nassert     find_sum([1,2,3,4,5,6,7,7,7]) == 7\nassert     find_sum([1,1,2,3,5,5,6,7,7]) == 7\nassert     find_sum([1,2,3,4,5,6,7,8,9]) == 45\nassert     find_sum([1,2,3,4,5,6,7,8,9,10]) == 45\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_sum([10, 4, 2, 4, 1, 4, 1]) == 10, \"Failed\"\nassert     find_sum([10, 4, 2, 4, 1, 4, 1, 4, 1]) == 10, \"Failed\"\nassert     find_sum([10, 4, 2, 4, 1, 4, 1, 4, 1, 4]) == 10, \"Failed\"\n\nprint \"Passed\""
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_sum([1, 2, 3, 2, 4, 6]) == 10\nassert     find_sum([1, 2, 3, 4, 5]) == 15\nassert     find_sum([10, 20, 30, 40, 50]) == 50\nassert     find_sum([-1, 0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_sum([1,2,3,4,5,5]) == 15, 'find_sum'\nassert     find_sum([1,2,3,4,4,5,5]) == 15, 'find_sum'\nassert     find_sum([1,2,3,4,4]) == 14, 'find_sum'\nassert     find_sum([3,3,3,3]) == 9, 'find_sum'\nassert     find_sum([]) == 0, 'find_sum'\n"
    },
    {
        "number": 777,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_sum([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 50\nassert     find_sum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\nassert     find_sum([-5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5]) == -50\nassert     find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 55\n\n\ndef find_min(arr): \n    '''\n    Write a python function to find the minimum value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,1,1,2,3,3,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates(['a', 'a', 'a', 'b', 'c', 'c', 'c']) == [\n                ['a', 'a', 'a'],\n                ['b', 'c'],\n                ['c', 'c', 'c']]\nassert     pack_consecutive_duplicates([1,1,1,2,3,4,5,5,5,5,5,5,5,5,5,5]) == [[1,1,1],[2,3,4,5],[5,5,5,5,5]]\n\ndef every_other_item(list1):\n    '''\n    Write a function to return a new list that contains every other item in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [list(g) for k,g in groupby('aaabbcccdddeee')] \\\n        == [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'], \\\n            ['b', 'b', 'b', 'b', 'b', 'b'], ['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'], \\\n            ['d', 'd', 'd', 'd'], ['e'], ['e', 'e', 'e']]\n\n\ndef check_merge_sort(list1, list2):\n    '''\n    A function that merges two sorted lists into a sorted list.\n    It iterates over the first and second list, and merges the elements if they are consecutive duplicates.\n    Example: list1 = [1,2,3,4,5], list2 = [5,4,3,2,1] --> [1,2,3,4,5,5,4,3,2,1]\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 1, 3, 1, 4, 1, 3]) == [[1, 2], [3, 4], [1, 3]]\nassert     pack_consecutive_duplicates([2, 2, 3, 3, 4, 5, 1, 1, 1, 1, 1]) == [[2, 2], [3, 3], [4, 5], [1, 1], [1, 1]]\nassert     pack_consecutive_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\nassert     pack_consecutive_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [pack_consecutive_duplicates(list(i)) for i in [[1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([4, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8]) == [[4, 4, 4], [5, 5, 5, 6, 6], [7, 7, 7, 8]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 2, 2, 2, 3]) == [[1, 1, 1], [2, 2], [3]]\nassert     pack_consecutive_duplicates([4, 6, 7, 8, 1, 2, 1]) == [[4, 6, 7, 8], [1], [2], [1]]\nassert     pack_consecutive_duplicates([4, 6, 7, 8, 1, 2, 1, 2, 1, 3]) == [[4, 6, 7, 8], [1, 2], [1, 2, 1], [3]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3]) == [[1, 1, 1, 1, 1], [2, 2, 2, 3, 3], [3, 3, 3, 3]]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [ [1, 1, 1, 1], [1, 2], [3, 3] ]    == pack_consecutive_duplicates([1, 1, 1, 1, 1, 2, 3, 3])\nassert
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 3, 4, 1, 2, 3]) == [[1, 2, 3], [1, 2, 3], [4, 1, 2, 3]]\nassert pack_consecutive_duplicates([1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 1, 2, 3]]\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 3, 3, 3, 4, 5]) == [[1, 1], [2, 2], [3, 3], [3, 3], [4, 4], [5]]\nassert     pack_consecutive_duplicates([2, 2, 3, 3, 3, 4, 5]) == [[2, 2], [3, 3], [3, 3], [4, 4], [5]]\nassert     pack_consecutive_duplicates([5, 1, 1, 1, 1, 4, 3, 2, 3, 2]) == [[5, 5], [1, 1], [1, 1], [1, 1], [4, 4], [3, 3], [2, 2], [3, 3], [2, 2]]\n\ndef count_substrings(s):\n    '''\n    Write a function to count the number of substrings of a given string s.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (pack_consecutive_duplicates(['1', '2', '3', '3', '3', '4', '4', '4', '5', '6', '6', '6', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '9', '9', '9', '9', '10', '10', '10', '10', '10', '10', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11', '11'"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_sublists([[1,2,3], [1,2,3], [1,2,3], [1,2,3]])         ==     {1:3, 2:3, 3:3}\nassert     unique_sublists([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]])     ==     {1:6, 2:3, 3:3}\nassert     unique_sublists([])                                         ==     {}\n\n\ndef sum_even_numbers(list1):\n    '''\n    Write a function which takes a list of integers and returns the sum of all even numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[], [], [], []]) == {(): 1}\nassert     unique_sublists([[], [1], [], [], [], [], [], []]) == {(): 1, (1,): 2}\nassert     unique_sublists([[1], [1], [1], [1], [1], [1], [1], [1]]) == {(): 3, (1,): 4}\nassert     unique_sublists([[1,2], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2], [1,2]]) == {(): 8, (1,2): 3, (2,1): 1, (1,2,2): 1, (2,1,1): 1, (1,1,2): 1, (2,1,1,1): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_sublists([[1, 2], [1, 2, 3], [1, 2, 3]]) == {(1, 2): 2, (1, 3): 1}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {(1, 2): 2, (1, 3): 1}\nassert     unique_sublists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == {(1, 2): 2, (1, 3): 1, (1, 4): 1}\nassert     unique_sublists([[1, 2], [2, 3], [1, 2]]) == {(1, 2): 2, (2, 3): 1}\nassert     unique_sublists([[1, 2], [1, 2, 3], [1, 2, 3]]) == {(1, 2): 2, (1, 3): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_sublists([[1, 2], [3, 4], [5, 6, 7, 8], [8, 9], [5]]) == {(1, 2): 1, (3, 4): 1, (5, 6, 7, 8): 1, (8, 9): 1, (5,): 2}\nassert     unique_sublists([[], [1], [2, 3, 4], [5, 6, 7, 8, 9], [8, 9]]) == {(1,): 1, (2, 3, 4): 1, (5, 6, 7, 8, 9): 1, (8, 9): 1}\nassert     unique_sublists([[1, 2], [3], [4, 5], [6, 7, 8], [9], [9, 8], [9, 7], [6, 5, 4], [3, 2, 1], [2]]) == {(1, 2): 3, (3,): 1, (4, 5): 2, (6, 7, 8): 1, (9,): 3, (9, 8): 1, (9, 7): 1, (6, 5, 4): 1, (3, 2, 1): 1}\n\ndef primes_in_range(start, end):\n    '''\n    Write a function that takes two integers, start and end, and returns a list of all the prime numbers between and including them, inclusive.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         unique_sublists([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == {(1,):7, (2,):3, (3,):1}\nassert         unique_sublists([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == {(1,):10, (2,):3, (3,):1}\nassert         unique_sublists([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == {(1,):10, (2,):3, (3,):1}\n\ndef unique_recurring_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_sublists([1, 1, 1, 2, 3, 4]) == { (1,): 4, (2,): 1, (3,): 1, (4,): 1, (1, 1): 1, (2, 1): 1, (3, 1): 1, (4, 1): 1, (1, 2): 1, (2, 2): 1, (3, 2): 1, (4, 2): 1, (1, 3): 1, (2, 3): 1, (3, 3): 1, (4, 3): 1, (1, 4): 1, (2, 4): 1, (3, 4): 1, (4, 4): 1}\nassert     unique_sublists([1, 2, 3, 4]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1}\nassert     unique_sublists([1]) == {(1,): 1}\nassert     unique_sublists([]) == {}\n\ndef cw_edges(graph):\n    '''\n    Write a function that takes a graph as an argument and returns a dictionary of the edges of the graph, as tuples, sorted by the first element in the tuple, for each edge.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1,2], [1,2,3], [1,2,3,4,5]]) == {(1, 2): 1, (1, 3): 1, (1, 4): 1, (1, 5): 1, (2, 3): 1, (2, 4): 1, (2, 5): 1, (3, 4): 1, (3, 5): 1, (4, 5): 1}\nassert     unique_sublists([[1,2], [1,3,4], [1,2,3,4,5,6,7]]) == {(1, 2): 1, (1, 3): 1, (1, 4): 1, (1, 5): 1, (1, 6): 1, (1, 7): 1, (2, 3): 1, (2, 4): 1, (2, 5): 1, (2, 6): 1, (2, 7): 1, (3, 4): 1, (3, 5): 1, (3, 6): 1, (3, 7): 1, (4, 5): 1, (4, 6): 1, (4, 7): 1, (5, 6): 1, (5, 7): 1, (6, 7): 1}\nassert     unique_sublists([[1,2,3], [1,2,3], [1,2,3]]) == {(1, 2, 3): 1}\nassert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == \\\n        {(1, 2, 3): 2, (1, 2): 1, (1,): 1, (2,): 1, (3,): 1, (1, 2, 3): 1}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4]]) == \\\n        {(1, 2, 3): 2, (1, 2): 1, (1,): 1, (2,): 1, (3,): 1, (1, 2, 3): 1, (1, 2, 4): 1}\nassert     unique_sublists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == \\\n        {(1, 2, 3, 4): 2, (1, 2, 3, 4): 1, (1, 2, 3, 5): 1, (1, 2, 4): 1, (1, 2, 4, 5): 1, (1, 2, 3, 4, 5): 1}\nassert     unique_sublists([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == \\\n        {(1, 2, 3, 4): 2, (1, 2, 3, 4): 1, (1, 2, 3, 5): 1, (1, 2, 4): 1, (1, 2, 4, 5): 1, (1, 2, 3, 4, 5): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_sublists(['a', 'b', 'b', 'c', 'd', 'e', 'e', 'a']) == {('a',):2, ('b',):3, ('c',):1, ('d',):1, ('e',):2}, \"The result is not correct.\"\nassert     unique_sublists([1, 2, 3, 1, 2, 3]) == {(1,):2, (2,):3, (3,):2}, \"The result is not correct.\"\nassert     unique_sublists([0, 0, 0, 0, 0, 0, 0, 0]) == {(0,):8}, \"The result is not correct.\"\nassert     unique_sublists(['a', 'b', 'c', 'd', 'e', 'a']) == {('a',):2, ('b',):3, ('c',):1, ('d',):1, ('e',):2}, \"The result is not correct.\"\n\ndef group_by(list1, func):\n    '''\n    Write a function to group the list by the result of a function.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (find_combinations([(10,20), (1,10), (3,30), (5,50)]) == \n                [(10, 50), (10, 30), (1, 10), (3, 30), (5, 50)])\nassert     (find_combinations([(10,20), (1,10), (3,30), (5,50), (60, 100)]) ==\n                [(10, 100), (10, 60), (60, 100), (1, 10), (60, 100)])\nassert     (find_combinations([(10,20), (1,10), (3,30), (5,50), (60, 100), (70, 150)]) ==\n                [(10, 150), (10, 70), (70, 150), (1, 10), (70, 150)])\n\ndef find_combinations2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \ndef check_find_combinations(test_list):\n    for num in range(0, len(test_list)):\n        for i in range(1, len(test_list[num])):\n            # sort\n            sorted_tuple = sorted(test_list[num][i])\n            for j in range(0, len(test_list[num])):\n                if j!= i:\n                    assert sorted_tuple!= sorted(test_list[num][j])\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_combinations(tuple_list)     ==     [[(2, 4), (3, 2), (4, 1), (5, 0)], [(3, 4), (4, 5)], [(4, 5)]]\nassert     find_combinations(tuple_list2)     ==     [[(2, 4), (3, 2), (4, 1), (5, 0)], [(3, 4), (4, 5), (5, 2)], [(4, 5), (5, 3)]]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_combinations([(1,), (2,), (3,), (4,)]) == [(1, 1), (1, 2), (1, 3), (1, 4), (2, 1), (2, 2), (2, 3), (2, 4), (3, 1), (3, 2), (3, 3), (3, 4), (4, 1), (4, 2), (4, 3), (4, 4)]\nassert     find_combinations([(1,), (2,), (3,), (4,), (5,)]) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]\nassert     find_combinations([(1,), (2,), (3,), (4,), (5,), (6,)]) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)]\nassert     find_combinations([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,)]) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)]\nassert     find_combinations([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)]) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 10), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 10)]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_combinations([[(2, 3), (5, 1), (3, 7)], [(3, 3), (1, 1), (1, 9)], [(1, 2), (2, 2), (4, 4)], [(5, 4), (1, 1), (1, 4), (1, 5)]]) == [[(2, 3), (3, 7), (1, 1)], [(5, 4), (1, 1), (1, 4), (1, 5)], [(1, 2), (2, 2), (4, 4)], [(1, 1), (1, 9), (1, 5)]]\nassert find_combinations([[(2, 3), (5, 1), (3, 7)], [(3, 3), (1, 1), (1, 9)], [(1, 2), (2, 2), (4, 4)], [(5, 4), (1, 1), (1, 4), (1, 5)], [(2, 4), (1, 1), (2, 1), (1, 1)]]) == [[(2, 3), (3, 7), (1, 1)], [(2, 4), (1, 1), (2, 1), (1, 1)]]\nassert find_combinations([[(2, 3), (5, 1), (3, 7)], [(3, 3), (1, 1), (1, 9)], [(1, 2), (2, 2), (4, 4)], [(5, 4), (1, 1), (1, 4), (1, 5)], [(2, 4), (1, 1), (2, 1), (1, 1)]]) == [[(2, 3), (3, 7), (1, 1)], [(2, 4), (1, 1), (2, 1), (1, 1)]]\nassert find_combinations([[(2, 3), (5, 1), (3, 7)], [(3, 3), (1, 1), (1, 9)], [(1, 2), (2, 2), (4, 4)], [(5, 4), (1, 1), (1, 4), (1, 5)], [(2, 4), (1, 1), (2, 1), (1, 1)], [(2, 4), (1, 1), (2, 1), (1, 1)]]) == [[(2, 3), (3, 7), (1, 1)], [(2, 4), (1, 1), (2, 1), (1, 1)]]\nassert find_combinations([[(2, 3), (5, 1), (3, 7)], [(3, 3), (1, 1), (1, 9)], [(1, 2), (2, 2), (4, 4)], [(5, 4), (1, 1), (1, 4), (1, 5)], [(2, 4), (1, 1), (2, 1), (1, 1)], [(2, 4), (1, 1), (2, 1), (1, 1)], [(2, 4), (1, 1), (2, 1), (1, 1)]]) == [[(2, 3), (3, 7), (1, 1)], [(2, 4), (1, 1), (2, 1), (1, 1)]]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_combinations([(1,2,3,4),(2,3,4,5)]) == [(3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8)]\nassert     find_combinations([(0,1,2,3),(1,2,3,4)]) == [(0, 1, 2, 3), (0, 1, 3, 4), (0, 2, 3, 4), (1, 2, 3, 4)]\nassert     find_combinations([(0,1,2,3),(1,2,3,4),(3,4,5,6)]) == [(0, 1, 2, 3), (0, 1, 3, 4), (0, 2, 3, 4), (0, 3, 4, 5), (0, 4, 5, 6), (1, 2, 3, 4), (1, 2, 4, 5), (1, 3, 4, 5), (1, 4, 5, 6), (2, 3, 4, 5), (2, 3, 5, 6), (2, 4, 5, 6), (3, 4, 5, 6)]\nassert     find_combinations([(0,1,2,3),(1,2,3,4),(3,4,5,6),(5,6,7,8)]) == [(0, 1, 2, 3), (0, 1, 3, 4), (0, 2, 3, 4), (0, 3, 4, 5), (0, 4, 5, 6), (0, 5, 6, 7), (1, 2, 3, 4), (1, 2, 4, 5), (1, 3, 4, 5), (1, 4, 5, 6), (1, 5, 6, 7), (2, 3, 4, 5), (2, 3, 5, 6), (2, 4, 5, 6), (3, 4, 5, 6)]\n\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # http://stackoverflow.com/questions/14117434/combinations-in-python-for-tuples-with-multiple-sums\n    # find the sum of each subset\n    # convert the subsets to tuples\n    # use combinations\n    # return the combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_combinations([(1,3,5,7),(2,4,5,6),(4,5,7,10)]) == [(1, 3, 4, 5, 7, 10), (2, 4, 5, 7, 10)]\nassert     find_combinations([(1,3,5,7),(2,4,5,6),(4,5,7,9)]) == [(1, 3, 4, 5, 7, 9), (2, 4, 5, 7, 9)]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_combinations(test_list)         == [('a', 'b', 'c'), ('a', 'b'), ('a', 'c')]\nassert     find_combinations(test_list[0])     == [('a', 'b', 'c'), ('a', 'b'), ('a', 'c')]\nassert     find_combinations(test_list[1])     == [('a', 'b'), ('a', 'c'), ('b', 'c')]\nassert     find_combinations(test_list[2])     == [('a', 'b'), ('a', 'c')]\nassert     find_combinations(test_list[3])     == [('a', 'b')]\n"
    },
    {
        "number": 780,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_combinations(test_list_for_find_combinations)     == [(2, 1, 1), (1, 1, 3)]\nassert     find_combinations(test_list_for_find_combinations2)     == [(1, 2, 3), (2, 1, 3)]\nassert     find_combinations(test_list_for_find_combinations3)     == [(1, 2, 3), (2, 3, 1)]\nassert     find_combinations(test_list_for_find_combinations4)     == [(2, 3, 1), (1, 1, 3)]\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_divisors(1) == 2\nassert     count_divisors(2) == 3\nassert     count_divisors(3) == 4\nassert     count_divisors(4) == 4\nassert     count_divisors(5) == 5\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_divisors(5) == 2\nassert     count_divisors(3) == 2\nassert     count_divisors(1) == 1\nassert     count_divisors(13) == 2\nassert     count_divisors(6) == 3\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_divisors(1) ==     0\nassert     count_divisors(2) ==     1\nassert     count_divisors(3) ==     2\nassert     count_divisors(4) ==     2\nassert     count_divisors(5) ==     2\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_divisors(28) == True\nassert     count_divisors(33) == False\n\ndef count_prime_factors(n) : \n    '''\n    Write a python function to find prime factors of the number n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_divisors(11) == 3 \nassert     count_divisors(13) == 3 \nassert     count_divisors(21) == 4\nassert     count_divisors(29) == 4\nassert     count_divisors(41) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_divisors(2) == 1\nassert     count_divisors(8) == 2\nassert     count_divisors(23) == 4\nassert     count_divisors(32) == 2\nassert     count_divisors(37) == 3\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_divisors(1) == 0\nassert     count_divisors(2) == 1\nassert     count_divisors(5) == 0\nassert     count_divisors(10) == 2\n\ndef count_even_divisors(n) :\n    '''\n    Write a python function to check whether the count of even divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_divisors(10) == 5\nassert     count_divisors(0) == 1\nassert     count_divisors(1) == 1\nassert     count_divisors(22) == 10\nassert     count_divisors(70) == 13\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_divisors(4)     == 2\nassert     count_divisors(5)     == 2\nassert     count_divisors(10)     == 4\nassert     count_divisors(14)     == 4\nassert     count_divisors(2)     == 1\n"
    },
    {
        "number": 781,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_divisors(0) == True\nassert     count_divisors(1) == True\nassert     count_divisors(2) == False\nassert     count_divisors(3) == True\nassert     count_divisors(4) == True\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_length_sum([1, 2, 3]) == 9\nassert     odd_length_sum([1, 2, 3, 4]) == 17\nassert     odd_length_sum([]) == 0\nassert     odd_length_sum([1]) == 1\nassert     odd_length_sum([1, 2, 3, 4, 5]) == 19\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_length_sum([1,2,3]) == 9\nassert     odd_length_sum([4,2,5,7,8]) == 33\nassert     odd_length_sum([1,3,5,7,9]) == 19\nassert     odd_length_sum([2,2,2]) == 6\nassert     odd_length_sum([1,2,3,4]) == 25\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_length_sum([1,4,2,10,2,3,1,0,20,5,6,7,8,9,5,10]) == 975\nassert     odd_length_sum([1,2]) == 3\nassert     odd_length_sum([1,2,3,4,5,6]) == 18\nassert     odd_length_sum([2,3,4,5,6]) == 22\nassert     odd_length_sum([]) == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef knapsack(arr,n,k):\n    '''\n    Given a knapsack with a capacity of k, we have an array of integers, arr, and an integer n.\n    We want to put in the knapsack the values of arr with indices from 0 to n - 1, such that the sum of the values is the maximum possible and we cannot exceed the knapsack's capacity.\n    Write a function that returns the maximum value of the sum of values of the knapsack.\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_length_sum([1,4,2,10,2,3,1,4,6,4,1]) == 29\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9]) == 55\nassert     odd_length_sum([]) == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nassert     odd_length_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 100\nassert     odd_length_sum([-2, -4, -6, -8, -10]) == -6\nassert     odd_length_sum([-3, -1, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     odd_length_sum([]) == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_length_sum([3, 2, 1, 2, 1, 1, 3, 2, 1, 2, 1, 2]) == 4\nassert     odd_length_sum([1, 1, 2, 1, 1, 3, 2, 1, 2, 1, 1]) == 10\nassert     odd_length_sum([1, 2, 1, 2, 3, 4, 5, 2, 1]) == 19\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 34\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_length_sum([1,2,3,4,5,6,7,8,9]) == 45\nassert     odd_length_sum([1,2,3,4,5,6,7]) == 45\nassert     odd_length_sum([1,2,3,4,5,6,7,8]) == 45\nassert     odd_length_sum([1,2,3,4,5,6]) == 45\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9]) == 45\n"
    },
    {
        "number": 782,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (r, g, b) == hsv_to_rgb(hsv_to_rgb(r, g, b))\n\ndef color_distance(rgb1, rgb2):\n    '''\n    Write a function that takes as input two RGB tuples and returns a tuple whose first element is the \n    distance between the two colors and whose second element is a boolean value indicating whether the colors are \n    the same.\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n\n\n\n\ndef test_rgb_to_hsv():\n    '''\n    Tests the rgb_to_hsv function with simple values\n    '''\n    # define the rgb values\n    r = 0\n    g = 0\n    b = 0\n    \n    # call the function\n    hsv = rgb_to_hsv(r, g, b)\n    \n    # check the output\n    print(hsv)\n    assert hsv == (0, 0, 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rgb_to_hsv(255, 255, 255) == (0, 0, 0)\nassert     rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert     rgb_to_hsv(0, 255, 255) == (0, 0, 0)\nassert     rgb_to_hsv(0, 0, 255) == (0, 0, 255)\nassert     rgb_to_hsv(255, 255, 255) == (0, 0, 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rgb_to_hsv(0,0,0) == (0,0,0)\nassert     rgb_to_hsv(1,1,1) == (60,1,1)\nassert     rgb_to_hsv(2,2,2) == (120,1,1)\nassert     rgb_to_hsv(3,3,3) == (180,1,1)\nassert     rgb_to_hsv(4,4,4) == (240,1,1)\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n\ndef rgb_to_hsv_1(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # max and min colors\n    r_max = 255\n    g_max = 255\n    b_max = 255\n    r_min = 0\n    g_min = 0\n    b_min = 0\n\n    # max_index and min_index for the largest and smallest value respectively\n    r_max_index = 0\n    g_max_index = 0\n    b_max_index = 0\n    r_min_index = 0\n    g_min_index = 0\n    b_min_index = 0\n\n    # calculate r, g, b values\n    if r > g and r > b:\n        r_max_index = r\n        r_max = r\n        g_max = g\n        b_max = b\n    elif g > r and g > b:\n        g_max_index = g\n        g_max = g\n        r_max = r\n        b_max = b\n    else:\n        b_max_index = b\n        b_max = b\n        r_max = r\n        g_max = g\n\n    if r < g and r < b:\n        r_min_index = r\n        r_min = r\n        g_min = g\n        b_min = b\n    elif g < r and g < b:\n        g_min_index = g\n        g_min = g\n        r_min = r\n        b_min = b\n    else:\n        b_min_index = b\n        b_min = b\n        r_min = r\n        g_min = g\n"
    },
    {
        "number": 783,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     mul_even_odd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [6, 12]\nassert     mul_even_odd([13, 19, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]) == [68, 280]\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [12, 12]\nassert     mul_even_odd([13, 19, 22, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]) == [68, 280]\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [12, 12]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     mul_even_odd([2, 3, 4, 5, 6, 7, 8]) == [2, 12]\nassert     mul_even_odd([-1, 0, 1, 2, 3]) == [0, 6]\nassert     mul_even_odd([1, 2, 3, 4]) == [0, 0]\nassert     mul_even_odd([1, -2, 3, -4]) == [0, 12]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     mul_even_odd([1,2,3,4,5,6,7,8,9]) == [12,24]\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10]) == [240,480]\nassert     mul_even_odd([1,2,3,4,5,6,7,8,9,10,11]) == [720,360]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     mul_even_odd([10, 15, 2, 3, 7, 5]) == 70\nassert     mul_even_odd([10, 15, 2, 3, -7, 5]) == -150\nassert     mul_even_odd([10, 15, 2, 3, -7, 5, 4]) == -100\nassert     mul_even_odd([10, 15, 2, 3, -7, 5, 4, 1]) == -80\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     mul_even_odd([2, 3, 4, 5, 6, 7]) == 1\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7]) == 1\nassert     mul_even_odd([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     mul_even_odd([3, 5, 4, 7]) == 10\nassert     mul_even_odd([0, 0, 1, 2]) == 0\nassert     mul_even_odd([1, 3, 4, 5, 6, 7, 8, 9]) == -5\nassert     mul_even_odd([5, 3, 4, 7, 7, 8, 9, 1, 2]) == -10\nassert     mul_even_odd([1, 1, 1, 1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == [12,8]\nassert     mul_even_odd([1,3,5]) == [6,15]\nassert     mul_even_odd([2,4,6]) == [8,12]\nassert     mul_even_odd([8,10]) == [16,10]\nassert     mul_even_odd([1]) == [1]\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     mul_even_odd([2, 3, 4, 5, 6]) == 60\nassert     mul_even_odd([2, 3, 4, 5, 7]) == 40\nassert     mul_even_odd([2, 3, 4, 5, 8]) == 320\nassert     mul_even_odd([2, 3, 4, 5, 9]) == 720"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     mul_even_odd([10, 21, 12, 9, 8]) ==  820\nassert     mul_even_odd([1, 2, 3, 4]) ==  24\nassert     mul_even_odd([10, 22, 5, 3, 2, 3, 1, 10]) ==  55\nassert     mul_even_odd([1, 2, 3, 4, 5, 6]) ==  720\nassert     mul_even_odd([0]) ==  0\n"
    },
    {
        "number": 784,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5]) == 40\nassert     mul_even_odd([2, 3, 4, 5]) == 0\nassert     mul_even_odd([-2, -3, -4, -5]) == -40\nassert     mul_even_odd([]) == 0\nassert     mul_even_odd([-1]) == -1\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(1,2)') == (1, 2)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (1, 2, 3)    == tuple_str_int('(1, 2, 3)')\nassert     (1, 2, 3)    == tuple_str_int('(1, 2, 3)')\nassert     (1, 2, 3)    == tuple_str_int('(1, 2, 3)')\nassert     (1, 2, 3)    == tuple_str_int('(1, 2, 3)')\nassert     (1, 2, 3)    == tuple_str_int('(1, 2, 3)')\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tuple_str_int(('(1,2,3)',)) == (1,2,3)\nassert     tuple_str_int(('(1,2,3)',)) == (1,2,3)\nassert     tuple_str_int(('(1,2)',)) == (1,2)\nassert     tuple_str_int(('(1,2,3,4)',)) == (1,2,3,4)\nassert     tuple_str_int(('(1,2,3,4)',)) == (1,2,3,4)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tuple_str_int(\"(123, 1.5, 3, 4)\") == (123, 1.5, 3, 4)\nassert     tuple_str_int(\"(123, 1.5)\") == (123, 1.5)\nassert     tuple_str_int(\"(123, 1.5, 3, 4, 5)\") == (123, 1.5, 3, 4, 5)\nassert     tuple_str_int(\"(123, )\") == (123, )\nassert     tuple_str_int(\"\") == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\nassert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\nassert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\nassert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\nassert     tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ntest_str_int = tuple_str_int('(1,2,3)')\nassert test_str_int == (1,2,3)"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(4, 5, 6)') == (4, 5, 6)\nassert     tuple_str_int('(7, 8, 9)') == (7, 8, 9)\n\ndef tuple_str_str(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tuple_str_int(())     == ()\nassert     tuple_str_int('()')     == ()\nassert     tuple_str_int('()()')     == (0,0)\nassert     tuple_str_int('(123)')     == (123,123)\nassert     tuple_str_int('(123,123)')     == (123,123)\n"
    },
    {
        "number": 785,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (tuple_str_int('(0, 1, 2)') == (0, 1, 2))\nassert     (tuple_str_int('(2)') == (2,))\nassert     (tuple_str_int('(2, )') == (2,))\nassert     (tuple_str_int('(1, 2, )') == (1, 2))\nassert     (tuple_str_int('(1, 2, )') == (1, 2))\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert right_insertion(range(1,10), 4) == 3\nassert right_insertion(range(1,10), 10) == 9\nassert right_insertion([0], 1) == 0\nassert right_insertion([1,2,4,8,16], 4) == 3\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert right_insertion(range(5), 1) == 1\nassert right_insertion(range(5), 2) == 2\nassert right_insertion(range(5), 4) == 4\nassert right_insertion(range(5), 5) == 5\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef find_perfect_square(a):\n    '''\n    Find the largest integer for which a perfect square is a perfect square.\n    '''\n    pass\n\n\ndef find_k_largest(arr, k):\n    '''\n    Find the k largest elements of an array.\n    '''\n    pass\n\n\ndef sort_first_k_keys(arr, k):\n    '''\n    Given an array arr, sort the array using the first k elements of arr.\n    '''\n    pass\n\n\ndef sort_largest_k_keys(arr, k):\n    '''\n    Given an array arr, sort the array using the last k elements of arr.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     right_insertion([1,3,4,5,6,7,8,9], 2) == 2\nassert     right_insertion([1,3,4,5,6,7,8,9], 3) == 4\nassert     right_insertion([1,3,4,5,6,7,8,9], 10) == 9\nassert     right_insertion([1,3,4,5,6,7,8,9], 5) == 5\nassert     right_insertion([1,3,4,5,6,7,8,9], 9) == 9\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef top_k_strings(a, k):\n    '''\n    Given a sorted array of strings, return the top k strings in lexicographical order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 11)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 2)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 5)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 13)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 10)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 0)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 4)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 7)\n    print insert_point\n    \n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    insert_point = right_insertion(a, 9)\n    print insert_point\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \na = [1, 2, 3, 4, 5, 6]\nprint(right_insertion(a, 4))\nassert 2 == right_insertion(a, 4)\nassert 2 == right_insertion(a, 4.2)\nassert 3 == right_insertion(a, 3)\nassert 4 == right_insertion(a, 8)\n"
    },
    {
        "number": 786,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     right_insertion([1,2,3,4,5,6,7], 6) == 6\nassert     right_insertion([1,2,3,4,5,6,7], 8) == 7\nassert     right_insertion([1,2,3,4,5,6,7], 0) == 0\nassert     right_insertion([1,2,3,4,5,6,7], -1) == 0\nassert     right_insertion([1,2,3,4,5,6,7], 7) == 7\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_three('a') == False\nassert     text_match_three('ab') == True\nassert     text_match_three('abc') == False\nassert     text_match_three('abb') == True\nassert     text_match_three('abbc') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_three(\"ababbb\") == \"bab\"\nassert     text_match_three(\"ababbbab\") == \"abababab\"\nassert     text_match_three(\"aba\") == \"aba\"\nassert     text_match_three(\"ab\") == \"ab\"\nassert     text_match_three(\"bbbbb\") == \"bbbbb\"\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_three('aabb') == True\nassert     text_match_three('aabc') == False\nassert     text_match_three('abb') == False\nassert     text_match_three('a') == False\nassert     text_match_three('b') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_three(\"aabbb\") == False\nassert     text_match_three(\"ababbb\") == True\nassert     text_match_three(\"abcabccb\") == False\nassert     text_match_three(\"abccb\") == True\nassert     text_match_three(\"abbbb\") == True\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_three('abab') == True\nassert     text_match_three('aba') == True\nassert     text_match_three('bbb') == True\nassert     text_match_three('bab') == True\nassert     text_match_three('abb') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_three('aaabbbb') == True\nassert     text_match_three('aabbbbb') == False\nassert     text_match_three('aabbbba') == False\nassert     text_match_three('aabbaa') == False\nassert     text_match_three('aabbbbb') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_match_three('aabb') == True\nassert     text_match_three('aabbb') == False\nassert     text_match_three('bbaaa') == False\nassert     text_match_three('aaabbb') == True\nassert     text_match_three('aaabb') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_match_three('ababab') == 'aababb', text_match_three('ababab')\nassert     text_match_three('abbbb') == 'ababbb', text_match_three('abbbb')\nassert     text_match_three('bbb') == 'bbbbb', text_match_three('bbb')\nassert     text_match_three('babaaabbb') == 'bababa', text_match_three('babaaabbb')\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_three(\"aabbb\") == \"aabbb\"\nassert     text_match_three(\"ababababab\") == \"ababababab\"\nassert     text_match_three(\"aabbbab\")!= \"abababab\"\nassert     text_match_three(\"ababababab\")!= \"abababab\"\nassert     text_match_three(\"ababab\")!= \"ababababab\"\n"
    },
    {
        "number": 787,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_three(\"abbabbbbbbbaaaab\") == [0, 17]\nassert     text_match_three(\"aababbbbbabaaab\") == [0, 8]\nassert     text_match_three(\"aaabbbbbbababab\") == [8, 17]\nassert     text_match_three(\"aababbbbbbbababbba\") == [8, 17]\nassert     text_match_three(\"aabbbababababbbaa\") == [8, 17]\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         new_tuple([1,2,3], \"abcd\") == (1,2,3,'a','b','c','d')\nassert         new_tuple(['a','b','c'], '0123') == ('a', 'b', 'c', '0', '1', '2', '3')\nassert         new_tuple(['a','b','c'], '') == ('a', 'b', 'c')\nassert         new_tuple([1,2,3], '') == (1,2,3)\n\ndef my_len(test_list):\n    '''\n    Write a function to return the length of the given list\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     new_tuple(['A', 'B', 'C'], 'ABC') == ('A', 'B', 'C')\nassert     new_tuple(['A', 'B', 'C'], 'AB') == ('A', 'B', 'C')\nassert     new_tuple(['A', 'B', 'C'], 'BA') == ('B', 'A', 'C')\nassert     new_tuple(['A', 'B', 'C'], 'BC') == ('B', 'C', 'A')\nassert     new_tuple(['A', 'B', 'C'], 'AC') == ('C', 'A', 'B')\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     new_tuple(['a', 'b', 'c', 'd'], 'abcd') ==     ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abcd') ==     ('a', 'b', 'c', 'd')\nassert     new_tuple([1, 2, 3, 4], '12345') ==     (1, 2, 3, 4)\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abc') ==     ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abcd') ==     ('a', 'b', 'c', 'd')\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     new_tuple([1, 2, 3], 'xyz') == (1, 2, 3), \"new tuple should be (1, 2, 3)\"\nassert     new_tuple(['x', 'y', 'z'], 'abc') == ('a', 'b', 'c'), \"new tuple should be ('a', 'b', 'c')\"\nassert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c'), \"new tuple should be ('a', 'b', 'c')\"\nassert     new_tuple(['a', 'b', 'c'], 'abcd') == ('a', 'b', 'cd'), \"new tuple should be ('a', 'b', 'cd')\"\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     new_tuple(['4', '5', '6'], '(2, 3, 4)') == (2, 3, 4)\nassert     new_tuple(['9', '8', '7'], '(3, 4, 5)') == (3, 4, 5)\nassert     new_tuple(['1', '2', '3'], '(3, 4, 5)') == (3, 4, 5)\nassert     new_tuple(['1', '2', '3'], '(4, 5)') == (4, 5)\nassert     new_tuple(['1', '2', '3'], '(4, 5, 6)') == (4, 5, 6)\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     new_tuple([1, 2, 3], \"A, B, C\") == ('A', 'B', 'C')\nassert     new_tuple([1, 2, 3], \"A, B, C, D\") == ('A', 'B', 'C', 'D')\nassert     new_tuple([1, 2, 3], \"A, B, C, D, E\") == ('A', 'B', 'C', 'D', 'E')\nassert     new_tuple([1, 2, 3], \"A, B, C, D, E, F\") == ('A', 'B', 'C', 'D', 'E', 'F')\nassert     new_tuple([1, 2, 3], \"A, B, C, D, E, F, G\") == ('A', 'B', 'C', 'D', 'E', 'F', 'G')\n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'abcd') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['c', 'b', 'a'], 'cbab') == ('a', 'b', 'c', 'b', 'a')\nassert     new_tuple(['a', 'b', 'c', 'd', 'e'], 'abcde') == ('a', 'b', 'c', 'd', 'e')"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 788,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_position([0,1,2,3,4,5,6,7,8])\nassert     even_position([1,2,3,4,5,6,7,8])\nassert     even_position([2,4,6,8])\nassert     even_position([2,4,6,8,0])\nassert     even_position([2,4,6,8,0,0])\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (even_position([1,2,3,4,5,6,7,8,9]) == True)\nassert     (even_position([1,2,3,4,5,6,7,8,9]) == False)\nassert     (even_position([1,2,3,4,5,6,7]) == False)\nassert     (even_position([1,2,3,4,5,6]) == False)\nassert     (even_position([1,2,3,4,5]) == True)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_position([1, 2, 3, 4]) == False\nassert     even_position([1, 2, 3, 4, 5]) == True\nassert     even_position([2, 4, 6, 8, 10]) == False\nassert     even_position([2, 4, 6, 8, 10, 12]) == True\nassert     even_position([2, 4, 6, 8]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_position([1,2,3,4]) == True\nassert     even_position([1,3,4,2]) == True\nassert     even_position([1,3,2,4]) == False\nassert     even_position([1,3,2,4,4]) == False\nassert     even_position([1,2,3,4,4]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_position([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6]) == True\nassert     even_position([2, 4, 6, 8, 10]) == True\nassert     even_position([1, 3, 5, 7, 9]) == False\n\n\ndef even_num_per_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (even_position([4,2,6,8,5,3,2,4,1,5]) == True)\nassert     (even_position([4,2,6,8,5,3,2,4,1,5]) == True)\nassert     (even_position([4,2,6,8,5,3,2,4,1,5]) == True)\nassert     (even_position([4,2,6,8,5,3,2,4,1,5]) == False)\nassert     (even_position([4,2,6,8,5,3,2,4,1,5]) == False)\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_position([0, 1, 2, 3, 4, 5]) == True\nassert     even_position([0, 1, 2, 3, 4, 6]) == False\nassert     even_position([0, 1, 2, 3, 4, 5, 6, 7]) == True\nassert     even_position([0, 1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     even_position([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_position([1,2,3,4,5,6,7,8,9]) == True\nassert     even_position([1,3,5,7,9]) == True\nassert     even_position([1,3,5,7,9,11]) == False\nassert     even_position([1,3,5,7]) == False\n\n\ndef remove_duplicates(nums):\n    '''\n    Write a python function to remove duplicates from a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_position([1,2,3,4,5]) == True\nassert     even_position([3,4,5,6,7]) == True\nassert     even_position([0,1,2,3,4]) == True\nassert     even_position([0,1,3]) == False\nassert     even_position([]) == True\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (remove_nested((1, 2, 3, 4, 5, 6, 7, 8, 9, (10, 11, 12), 13, 14))\n        == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\nassert     (remove_nested((1, 2, 3, (4, 5, 6), 7, 8, 9, (10, 11, 12), 13, 14))\n        == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\nassert     (remove_nested((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, (15, 16, 17)))\n        == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, (15, 16, 17)))\nassert     (remove_nested((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, (15, 16, 17, (18, 19, 20)))))\n        == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, (15, 16, 17, 18, 19, 20))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_nested(    ('a', 'b', ('c', 'd', 'e', 'f')) ) == \\\n            ('a', 'b', 'c', 'd', 'e', 'f')\nassert     remove_nested(    ('a', 'b', ('c', 'd', 'e'))) == \\\n            ('a', 'b', 'c', 'd', 'e')\nassert     remove_nested(    ('a', 'b', ('c', 'd', 'e', 'f', 'g'))) == \\\n            ('a', 'b', 'c', 'd', 'e', 'f', 'g')\nassert     remove_nested(    (('a', 'b'), ('c', 'd'), 'e', 'f')) == \\\n            (('a', 'b'), 'c', 'd', 'e', 'f')\nassert     remove_nested(    ('a', ('b', 'c', 'd'), 'e', 'f')) == \\\n            ('a', 'b', 'c', 'd', 'e', 'f')\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_nested(\n                    (\n                        (1,2,3),\n                        (5,6),\n                        (7,8,9)\n                    )\n                ) == (\n                    (1,2,3),\n                    (7,8,9)\n                )\nassert     remove_nested(\n                    (\n                        (1,2,3),\n                        (4,5,6,7),\n                        (8,9)\n                    )\n                ) == (\n                    (1,2,3),\n                    (8,9)\n                )\nassert     remove_nested(\n                    (\n                        (1,2,3),\n                        (4,5,6,7),\n                        (8,9,10)\n                    )\n                ) == (\n                    (1,2,3),\n                    (8,9,10)\n                )\nassert     remove_nested(\n                    (\n                        (1,2,3),\n                        (4,5,6,7),\n                        (8,9,10,11,12)\n                    )\n                ) == (\n                    (1,2,3),\n                    (8,9,10,11,12)\n                )\nassert     remove_nested(\n                    (\n                        (1,2,3,4,5),\n                        (6,7),\n                        (8,9,10)\n                    )\n                ) == (\n                    (1,2,3,4,5),\n                    (8,9,10)\n                )\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_nested((1, 2, (3, 4))) == (1, 2, (3, 4))\nassert     remove_nested((1, 2, 3)) == (1, 2, 3)\nassert     remove_nested((1, 2, (3, (4, 5)))) == (1, 2, (3, (4, 5)))\nassert     remove_nested((1, (2, 3), 4)) == (1, (2, 3), 4)\nassert     remove_nested((1, (2, 3), (4, 5))) == (1, (2, 3), (4, 5))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_nested(('a', 'b', ('c', 'd', 'e', 'f'))) == \\\n            ('a', 'b', 'c', 'd', 'e', 'f')\nassert     remove_nested(('a', 'b', ('c', 'd'))) == \\\n            ('a', 'b', 'c', 'd')\nassert     remove_nested(('a', 'b', 'c', 'd', 'e', 'f')) == \\\n            ('a', 'b', 'c', 'd', 'e', 'f')\nassert     remove_nested(('a', 'b', ('c', 'd', 'e', 'f'))) == \\\n            ('a', 'b', 'c', 'd', 'e', 'f')\nassert     remove_nested(('a', 'b', 'c', 'd', 'e', 'f')) == \\\n            ('a', 'b', 'c', 'd', 'e', 'f')\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_nested((2, 3, 4, 5, (6, 7, 8, 9, 10))) == ((2, 3, 4, 5, (6, 7, 8, 9)),)\nassert     remove_nested((2, 3, 4, 5, (6, 7, 8, 9, 10))) == ((2, 3, 4, 5, (6, 7, 8, 9)),)\nassert     remove_nested((2, 3, 4, 5, (6, 7, 8, 9, 10))) == ((2, 3, 4, 5, (6, 7, 8, 9)),)\nassert     remove_nested((2, 3, 4, 5, (6, 7, 8, 9, 10))) == ((2, 3, 4, 5, (6, 7, 8, 9)),)\nassert     remove_nested((2, 3, 4, 5, (6, 7, 8, 9, 10))) == ((2, 3, 4, 5, (6, 7, 8, 9)),)\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_nested((1, 2, (3, 4, 5))) == (1, 2, (3, 4, 5))\nassert     remove_nested((1, 2, 3)) == (1, 2, 3)\nassert     remove_nested(((1, 2, 3), (1, 2, 3), (1, 2, 3))) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\nassert     remove_nested((1, 2, (3, 4, (5, 6, (7, 8, 9))))\nassert     remove_nested((1, 2, (3, (4, (5, (6, (7, 8))))))) == (1, 2, (3, (4, (6,))))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         (remove_nested((1,(1,(1,1)),2,(2,(2,2),3))),\n            (1,(1,(1,1)),2,(2,(2,2),3))) == (1,(1,(1,1)),2,(2,(2,2),3))\nassert         (remove_nested((1,(1,(1,(1,1))),2,(2,(2,(2,2),3))))\n            ,(1,(1,(1,(1,1))),2,(2,(2,(2,2),3)))) == (1,(1,(1,(1,1))),2,(2,(2,(2,2),3)))\nassert         (remove_nested((1,(1,(1,(1,1))),2,(2,(2,(2,(2,2),3))))),\n            (1,(1,(1,(1,1))),2,(2,(2,(2,(2,2),3))))\n            ) == (1,(1,(1,(1,1))),2,(2,(2,(2,(2,2),3))))\n"
    },
    {
        "number": 791,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_nested(('a', ('b', 'c'), 4, 5)) == ('a', 4, 5)\nassert     remove_nested(('a', ('b', 'c'), 4)) == ('a', 4)\nassert     remove_nested(('a', ('b', 'c'), 5)) == ('a', 5)\nassert     remove_nested(('a', ('b', 'c'), 'a')) == ('b', 'c')\nassert     remove_nested(('a', ('b', 'c', ('d', 'e', 'f'), 'g'))) == ('a', ('b', 'c', ('d', 'e', 'f')), 'g')\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (count_list([1, 2, [3, 4, 5], 6]) == 2)\nassert     (count_list([1, [2, 3], 4]) == 2)\nassert     (count_list([[[[[[[[[[[[[[[[1]]]]]]]]]]]]]]]]]]])) == 1\nassert     (count_list([1, 2, [3, [4, 5], 6]]) == 3)\nassert     (count_list([1, [2, [3, [4, [5, 6]]]], 7]) == 3)\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (count_list([]) == 0),     '0'\nassert     (count_list([[]]) == 1),     '1'\nassert     (count_list([[1]]) == 1),     '2'\nassert     (count_list([[1],[2]]) == 2),     '3'\nassert     (count_list([[1,2],[2,3],[4,5],[5,6]]) == 4),     '4'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_list([[], [1, 2], [3, 4, 5], []]) == 2\nassert     count_list([[1, 2], [3, 4, 5], [], [6, 7, 8, 9]]) == 3\nassert     count_list([[[[1]]], [[1, 2], [3, 4, 5]], [], [[6, 7, 8, 9]]]) == 4\nassert     count_list([[], [1, 2], [3, 4, 5], [], [[6, 7, 8, 9]]]) == 5\nassert     count_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_list([[],[],[]]) == 3\nassert     count_list([[[],[],[]],[[],[],[]]]) == 6\nassert     count_list([[1,2],['a','b'],['c','d']]) == 4\nassert     count_list([[1,2],['a','b'],['c','d'],['e','f']]) == 6\nassert     count_list([[1,2],['a','b'],['c','d'],[],['e','f']]) == 7\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_list([[1, 2, 3], [4, 5], [6, 7, 8]]) == 3, 'Function \"count_list\" is not correct!'\nassert     count_list([[1, 2, 3], [4, 5, 6, 7, 8], [10, 11], [12, 13, 14, 15]]) == 4, 'Function \"count_list\" is not correct!'\nassert     count_list([[1, 2, 3], [4, 5, 6, 7, 8], [10, 11, 12, 13, 14, 15], [16, 17]]) == 5, 'Function \"count_list\" is not correct!'\nassert     count_list([]) == 0, 'Function \"count_list\" is not correct!'\nassert     count_list([[1, 2, 3], [4, 5, 6, 7, 8], [10, 11, 12, 13, 14, 15], [16, 17], [1, 2, 3]]) == 4, 'Function \"count_list\" is not correct!'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_list([]) == 0, \"Expected result: 0\"\nassert     count_list([[], [], []]) == 1, \"Expected result: 1\"\nassert     count_list([[], [[], [[]]], []]) == 3, \"Expected result: 3\"\nassert     count_list([[], [[], [[[]]]]]) == 2, \"Expected result: 2\"\nassert     count_list([[[], [[[]]]]]) == 1, \"Expected result: 1\"\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_list([]) == 0, 'Error: Not implemented'\nassert     count_list([[]]) == 1, 'Error: Not implemented'\nassert     count_list([[1], [2], [3]]) == 3, 'Error: Not implemented'\nassert     count_list([[1, 2], [3, 4], [5, 6]]) == 3, 'Error: Not implemented'\nassert     count_list([[1, 2], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4]]) == 6, 'Error: Not implemented'\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_list([1, 2, 3, 4, 5]) == 1\nassert     count_list([1, 2, [3, 4, 5], 6]) == 2\nassert     count_list([1, 2, 3, [4, [5, 6], 7], 8]) == 3\n"
    },
    {
        "number": 792,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_list([]) == 0\nassert     count_list([[]]) == 0\nassert     count_list([[],[]]) == 1\nassert     count_list([[],[1,2]]) == 2\nassert     count_list([[1],[2,3]]) == 2\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     last([1,2,3,4,5],1) == 1\nassert     last([1,2,3,4,5],3) == 4\nassert     last([1,2,3,4,5],0) == 0\nassert     last([1,2,3,4,5],5) == 5\nassert     last([1,2,3,4,5],6) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9,10],5) == 4\nassert     last([1,2,3,4,5,6,7,8,9,10],0) == -1\nassert     last([1,2,3,4,5,6,7,8,9,10],11) == -1\nassert     last([1,2,3,4,5,6,7,8,9,10],9) == 8\nassert     last([1,2,3,4,5,6,7,8,9,10],10) == 9\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     last([],5)==-1\nassert     last([0],5)==0\nassert     last([3,8,9],5)==0\nassert     last([3,8,9],4)==-1\nassert     last([3,8,9],3)==2\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     last([1,3,3,3,4,4,5,6,7],3) == 6\nassert     last([1,3,3,3,4,4,5,6,7],4) == 7\nassert     last([1,3,3,3,4,4,5,6,7],5) == -1\n\n\ndef count_set_bits(n):\n    '''\n    Write a python function to count the number of bits set to 1 in an integer.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     last([1,2,3,4,5,5,5,7,8,9,9,9],9) == 6\nassert     last([1,2,3,4,5,5,5,7,8,9,9,9],1) == 0\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     last([1,2,3,3,3,3,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     last([0,1,2,3,4],3) == 4\nassert     last([0,1,2,3,4],4) == 4\nassert     last([0,1,2,3,4],2) == 2\nassert     last([0,1,2,3,4],5) == -1\nassert     last([1,2,3,4],1) == 0\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     last([1, 2, 4, 7, 10, 11, 19, 22, 25], 10) == 5\nassert     last([1, 2, 4, 7, 10, 11, 19, 22, 25], 8) == -1\nassert     last([-2, 1, 3, 6, 9], 1) == 2\nassert     last([-2, 1, 3, 6, 9], 2) == 3\nassert     last([-2, 1, 3, 6, 9], 4) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     last([], 3) == -1\nassert     last([1,2,3,4,5,6,7], 3) == 6\nassert     last([1,2,3,4,5,6,7], 1) == 0\nassert     last([1,2,3,4,5,6,7], 5) == 7\nassert     last([1,2,3,4,5,6,7], 2) == 3\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     'a' == text_starta_endb('a')\nassert     False == text_starta_endb('aab')\nassert     'aab' == text_starta_endb('ab')\nassert     'ab' == text_starta_endb('aba')\nassert     False == text_starta_endb('b')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     'ab' == text_starta_endb('ab')\nassert     'a' == text_starta_endb('a')\nassert     'b' == text_starta_endb('b')\nassert     'ab' == text_starta_endb('a1b')\nassert     'a' == text_starta_endb('a1b1')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_starta_endb('a')\nassert     text_starta_endb('ab')\nassert     text_starta_endb('abb')\nassert     not text_starta_endb('aab')\nassert     not text_starta_endb('ab')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_starta_endb(\"agf\") == True\nassert     text_starta_endb(\"a\") == True\nassert     text_starta_endb(\"a\") == False\nassert     text_starta_endb(\"a\") == False\nassert     text_starta_endb(\"a\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_starta_endb('a') == True\nassert     text_starta_endb('abbb') == False\nassert     text_starta_endb('abbbb') == False\nassert     text_starta_endb('abbbbb') == True\nassert     text_starta_endb('abbbba') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_starta_endb(\"that's\") == False\nassert     text_starta_endb(\"pizza that's\") == True\nassert     text_starta_endb(\"pizza a that's\") == True\nassert     text_starta_endb(\"pizza a that'ss\") == False\nassert     text_starta_endb(\"pizza a that'ss a\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_starta_endb('aaabbb')\nassert     not text_starta_endb('aab')\nassert     not text_starta_endb('abbbb')\nassert     not text_starta_endb('abbb')\nassert     text_starta_endb('aabbb')\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_starta_endb('a') == False\nassert     text_starta_endb('aabb') == True\nassert     text_starta_endb('abb') == True\nassert     text_starta_endb('abbb') == False\nassert     text_starta_endb('b') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_starta_endb(\"a\") == True\nassert     text_starta_endb(\"ab\") == True\nassert     text_starta_endb(\"abz\") == True\nassert     text_starta_endb(\"zab\") == True\nassert     text_starta_endb(\"abba\") == True\n"
    },
    {
        "number": 794,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_starta_endb('abc') == False\nassert     text_starta_endb('a') == True\nassert     text_starta_endb('aabb') == True\nassert     text_starta_endb('ab') == False\n\ndef text_start_end(text):\n    '''\n    Write a function that matches a string that has an 'a' at the start, 'b' at the end, and 'c' in the middle.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     return_sum({1:2, 3:4}) == 12\nassert     return_sum({'a':3, 'b':5}) == 5\nassert     return_sum({'a':1, 'b':2, 'c':3}) == 6\nassert     return_sum({'a':1, 'b':2, 'c':3, 'd':4}) == 10\nassert     return_sum({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}) == 15\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6\nassert     return_sum({\"a\": 1, \"b\": \"2\", \"c\": \"3\"}) == 6\nassert     return_sum({\"a\": \"1\", \"b\": 2, \"c\": \"3\"}) == 6\nassert     return_sum({\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}) == 6\nassert     return_sum({\"a\": 1, \"b\": \"2\", \"c\": \"3\", \"d\": \"4\"}) == 10\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     return_sum({'a':4, 'b':6, 'c':7}) == 28\nassert     return_sum({'a':2, 'b':7, 'c':3}) == 17\n\ndef return_average(dict):\n    '''\n    Write function to find the average of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     return_sum({}) == 0\nassert     return_sum({'a': 1, 'b': 2}) == 3\nassert     return_sum({'a': 1, 'b': -2}) == 1\nassert     return_sum({'a': 1, 'b': -1}) == 0\nassert     return_sum({'a': 1, 'b': 1, 'c': 3}) == 6\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (return_sum({})) == 0\nassert     (return_sum({1: 1, 2: 2, 3: 3})) == 6\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     return_sum({\"item1\":1,\"item2\":2,\"item3\":3}) == 6\nassert     return_sum({\"item1\":1,\"item2\":2,\"item3\":3,\"item4\":4}) == 10\nassert     return_sum({\"item1\":1,\"item2\":2,\"item3\":3,\"item4\":4,\"item5\":5}) == 15\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n        == 15)\nassert     (return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n        == 10)\nassert     (return_sum({'a': 1})\n        == 1)\nassert     (return_sum({})\n        == 0)\n\n\ndef return_product(dict):\n    '''\n    Write function to find the product of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     return_sum({1:1,2:2}) == 3, \"incorrect\"\nassert     return_sum({'a':'A','b':'B'}) == 'AB', \"incorrect\"\nassert     return_sum({'a':[1,2,3],'b':[10,20,30]}) == [1,2,3,10,20,30], \"incorrect\"\n\nprint \"return_sum Test: Successful\"\n\ndef last_element(d):\n    '''\n    Write function to return the last element of the dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     return_sum({'a':10, 'b':50, 'c':3}) == 60\nassert     return_sum({'a':1, 'b':2, 'c':3}) == 6\nassert     return_sum({'a':1, 'b':1, 'c':1}) == 3\nassert     return_sum({'a':0, 'b':1, 'c':0}) == 1\nassert     return_sum({}) == 0\n"
    },
    {
        "number": 796,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (return_sum({\"a\": 10, \"b\": 2, \"c\": 7, \"d\": 3, \"e\": 1}) == 17)\nassert     (return_sum({\"a\": 3, \"b\": 2, \"c\": 7, \"d\": 3, \"e\": 1}) == 12)\nassert     (return_sum({\"a\": 5, \"b\": 2, \"c\": 7, \"d\": 3, \"e\": 1}) == 12)\nassert     (return_sum({\"a\": 1, \"b\": 2, \"c\": 7, \"d\": 3, \"e\": 1}) == 12)\nassert     (return_sum({\"a\": 1, \"b\": 2, \"c\": 7, \"d\": 3, \"e\": 1, \"f\": 4}) == 19)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (sum_odd(0)==0)\nassert     (sum_odd(1)==1)\nassert     (sum_odd(2)==3)\nassert     (sum_odd(3)==6)\nassert     (sum_odd(4)==10)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_odd(5) == 9\nassert     sum_odd(10) == 25\nassert     sum_odd(12) == 45\n\ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_odd(1) == 1\nassert     sum_odd(2) == 3\nassert     sum_odd(3) == 5\nassert     sum_odd(4) == 7\nassert     sum_odd(5) == 9\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_odd(1) == 0), \"sum_odd(1) should be 0\"\nassert     (sum_odd(2) == 1), \"sum_odd(2) should be 1\"\nassert     (sum_odd(3) == 3), \"sum_odd(3) should be 3\"\nassert     (sum_odd(10) == 252), \"sum_odd(10) should be 252\"\nassert     (sum_odd(20) == 13082), \"sum_odd(20) should be 13082\"\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sum_odd(2) == 2)\nassert     (sum_odd(3) == 5)\nassert     (sum_odd(4) == 7)\nassert     (sum_odd(5) == 9)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_odd(1) == 1\nassert     sum_odd(2) == 3\nassert     sum_odd(3) == 5\nassert     sum_odd(4) == 7\nassert     sum_odd(5) == 9\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (sum_odd(10) == 36)\nassert     (sum_odd(5) == 10)\nassert     (sum_odd(11) == 37)\nassert     (sum_odd(0) == 0)\nassert     (sum_odd(-10) == 0)\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_odd(0)     == 0\nassert     sum_odd(1)     == 1\nassert     sum_odd(2)     == 3\nassert     sum_odd(100)     == 5050\n\nprint(\"The sum of all odd numbers within the range l and r is: \", sum_odd(100))\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ( sum_odd(10) == 47 )\nassert     ( sum_odd(5) == 21 )\nassert     ( sum_odd(15) == 138 )\nassert     ( sum_odd(20) == 605 )\n\nprint'sum_odd passed!'\n"
    },
    {
        "number": 797,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_odd(10) == 12\nassert     sum_odd(20) == 45\nassert     sum_odd(1) == 2\nassert     sum_odd(10) == 12\nassert     sum_odd(100) == 13364\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ________ == _sum([1,2,3])\nassert ________ == _sum([-1,1,-2,2,-3])\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     _sum( [-2,-1,0,1,2]) == 1\nassert     _sum([-3,-2,-1,0,1,2,3]) == -3\nassert     _sum([-5,-4,-3,-2,-1,0,1,2,3,4,5]) == -2\nassert     _sum([]) == 0\nassert     _sum([3]) == 3\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     _sum([1,2,3]) == 6, \"Test1 failed\"\nassert     _sum([1,2,3,4]) == 10, \"Test2 failed\"\nassert     _sum([1,2,3,4,5,6,7]) == 21, \"Test3 failed\"\nassert     _sum([1,2,3,4,5,6,7,8]) == 30, \"Test4 failed\"\nassert     _sum([1,2,3,4,5,6,7,8,9]) == 45, \"Test5 failed\"\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     _sum([1, 2, 3]) == 6\nassert     _sum([1, 3, 5]) == 8\nassert     _sum([1, 5, 6]) == 15\nassert     _sum([-1, -2, -3]) == -6\nassert     _sum([-1, -3, -5]) == -8\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     _sum([1,2,3,4]) == 10\nassert     _sum([-1,-2,-3,-4]) == -10\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     _sum([1,2,3]) == 6,    'incorrect'\nassert     _sum([-1,2,3]) == 2,    'incorrect'\nassert     _sum([-3,-2, -1]) == -6,    'incorrect'\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     _sum([1,2,3]) == 6\nassert     _sum([1,2,3,4]) == 10\n"
    },
    {
        "number": 798,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     _sum([1, 2, 3])     == 6\nassert     _sum([1.1, 2.2, 3.3])     == 6.6\nassert     _sum([])     == 0\nassert     _sum(['a', 'b', 'c'])     == 'abc'\n\nprint \"Passed! <3\""
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     left_rotate(10,2) == 4\nassert     left_rotate(10,3) == 8\nassert     left_rotate(0x100,5) == 4\nassert     left_rotate(0x100,1) == 0\nassert     left_rotate(0x100,32) == 1\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef get_the_number(num,bit):\n    '''\n    Given a num, which can be a 32 bit number, and a bit which is an integer, return a new number which is the result of bit rotation.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\n\n\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     left_rotate(12,2)    == 28\nassert     left_rotate(14,3)    == 7\nassert     left_rotate(0,4)    == 0\nassert     left_rotate(8,5)    == 2\nassert     left_rotate(8,1)    == 8\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     left_rotate(1,1) == 1\nassert     left_rotate(1,2) == 2\nassert     left_rotate(2,1) == 2\nassert     left_rotate(2,2) == 4\nassert     left_rotate(3,1) == 3\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     left_rotate(13,2) == 31\nassert     left_rotate(13,8) == 15\nassert     left_rotate(13,9) == 14\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\nassert left_rotate(0b100,4) == 0b100\nassert left_rotate(0b101,4) == 0b100\nassert left_rotate(0b10000101,4) == 0b10000001\n"
    },
    {
        "number": 799,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\nn = 0b101100110101100110101001010111011110111011100010101100011101\nd = 1\nassert left_rotate(n,d) == 0b101100110101100110101001010111011110111011100010101100011101\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_all_spaces(\"    abc   \") == \"abc\"\nassert     remove_all_spaces(\" abc \") == \"abc\"\nassert     remove_all_spaces(\"   ab c   \") == \"abc\"\nassert     remove_all_spaces(\" abc \") == \"abc\"\nassert     remove_all_spaces(\"abc\") == \"abc\"\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_all_spaces('spam') =='spam'\nassert     remove_all_spaces('spamspam') =='spam'\nassert     remove_all_spaces('spam spam spam') =='spam'\nassert     remove_all_spaces('spam    ') =='spam'\nassert     remove_all_spaces('spam     ') =='spam'\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_all_spaces('hello') == 'hello'\nassert     remove_all_spaces('hello\\tworld') == 'helloworld'\nassert     remove_all_spaces('hello\\nworld') == 'hello\\nworld'\nassert     remove_all_spaces('hello\\n\\nworld') == 'hello\\n\\nworld'\nassert     remove_all_spaces('hello\\t\\nworld') == 'hello\\t\\nworld'\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_all_spaces('  ') == '','should remove all whitespaces'\nassert     remove_all_spaces('  a ') == 'a','should remove all whitespaces'\nassert     remove_all_spaces(' a  ') == 'a','should remove all whitespaces'\nassert     remove_all_spaces(' a') == 'a','should remove all whitespaces'\nassert     remove_all_spaces('abc') == 'abc','should remove all whitespaces'\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_all_spaces('') == ''\nassert     remove_all_spaces('  ') == ''\nassert     remove_all_spaces('  what   up   \\n ') == 'what up'\nassert     remove_all_spaces(' what   up   ') == 'what up'\nassert     remove_all_spaces(' what   up   what   up') == 'what up'\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_all_spaces(\"hello\") == \"hello\"\nassert     remove_all_spaces(\"hello world\") == \"hello world\"\nassert     remove_all_spaces(\"     hello world\") == \"hello world\"\nassert     remove_all_spaces(\"hello    world\") == \"hello world\"\nassert     remove_all_spaces(\"        \") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     '    Hello World   '== remove_all_spaces('    Hello World    ')\nassert     'Hello World' == remove_all_spaces('Hello World')\nassert     'Hello World' == remove_all_spaces('    Hello World    ')\nassert     '' == remove_all_spaces('')\nassert     '' == remove_all_spaces(' ')\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_all_spaces('Hello world') == 'Hello world', 'Remove all spaces test failed'\nassert     remove_all_spaces('Hello  world') == 'Hello world', 'Remove all spaces test failed'\nassert     remove_all_spaces('Hello   world') == 'Hello world', 'Remove all spaces test failed'\nassert     remove_all_spaces('    Hello world  ') == 'Hello world', 'Remove all spaces test failed'\nassert     remove_all_spaces('Hello world') == 'Hello world', 'Remove all spaces test failed'\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     '   hello   '.strip() == 'hello'\nassert     'hello   '.lstrip() == 'hello   '\nassert     'hello   '.rstrip() =='  hello'\nassert     'hello   world'.strip() == 'hello   world'\nassert     'hello   world'.lstrip() == 'hello   world   '\n"
    },
    {
        "number": 800,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_all_spaces('   This is a string   ') == 'This is a string'\nassert     remove_all_spaces(' This is a string   ') == 'This is a string'\nassert     remove_all_spaces('   This is a string   ') == 'This is a string'\nassert     remove_all_spaces('This is a string') == 'This is a string'\nassert     remove_all_spaces('This is a string   ') == 'This is a string'\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     three_equal(1,1,1) == 1\nassert     three_equal(1,2,3) == 0\nassert     three_equal(1,2,2) == 1\nassert     three_equal(2,2,2) == 1\nassert     three_equal(2,2,3) == 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     test_three_equal(1, 2, 3) == 1\nassert     test_three_equal(2, 2, 2) == 2\nassert     test_three_equal(3, 1, 3) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     test_three_equal(1,1,1) == 3\nassert     test_three_equal(1,1,2) == 0\nassert     test_three_equal(1,2,2) == 1\nassert     test_three_equal(1,1,3) == 0\nassert     test_three_equal(1,2,3) == 0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     test_three_equal(1,2,3)     ==    3\nassert     test_three_equal(1,1,1)     ==    3\nassert     test_three_equal(5,5,5)     ==    3\nassert     test_three_equal(5,5,0)     ==    0\nassert     test_three_equal(0,5,0)     ==    0\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     test_three_equal(1,1,1) == 3\nassert     test_three_equal(1,2,3) == 0\nassert     test_three_equal(2,2,2) == 3\nassert     test_three_equal(3,3,3) == 3\nassert     test_three_equal(3,2,3) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     three_equal(1, 1, 1) == 3\nassert     three_equal(1, 1, 2) == 2\nassert     three_equal(1, 2, 1) == 2\nassert     three_equal(1, 2, 2) == 1\nassert     three_equal(2, 1, 1) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     test_three_equal(0,0,0) == 3\nassert     test_three_equal(-1,1,0) == 2\nassert     test_three_equal(1,-1,0) == 2\nassert     test_three_equal(1,0,0) == 2\nassert     test_three_equal(0,0,0) == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     test_three_equal(1,1,1) == 3\nassert     test_three_equal(1,2,3) == 2\nassert     test_three_equal(1,2,3) == 3\nassert     test_three_equal(1,3,2) == 2\nassert     test_three_equal(2,2,1) == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     test_three_equal(3,2,3)==1\nassert     test_three_equal(3,3,3)==3\nassert     test_three_equal(3,2,2)==0\nassert     test_three_equal(3,4,2)==0\nassert     test_three_equal(0,0,0)==3\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert     count_rotation([4, 5, 6, 7, 8, 9, 1, 2, 3]) == 3\nassert     count_rotation([4, 5, 6, 7, 8, 9, 3, 1, 2]) == 4\nassert     count_rotation([4, 5, 6, 7, 8, 9, 1, 2, 3, 1, 1, 1, 1, 1]) == 2\nassert     count_rotation([3, 1, 1, 1, 1, 2, 2, 2, 3, 3]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8]) == 3\nassert     count_rotation([6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 3\nassert     count_rotation([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 0\nassert     count_rotation([4, 5, 6, 7, 8, 1, 2, 3, 0, 9]) == 7\nassert     count_rotation([4, 5, 6, 7, 8, 1, 2, 3, 0, 9]) == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_rotation([4, 5, 6, 7, 0, 1, 2]) == 0\nassert     count_rotation([4, 5, 6, 7, 0, 1, 2, 3]) == 1\nassert     count_rotation([3, 4, 5, 6, 7, 0, 1, 2]) == 2\nassert     count_rotation([3, 4, 5, 6, 7, 0, 1, 2, 2]) == 0\nassert     count_rotation([3, 4, 5, 6, 7, 0, 1, 2, 3]) == 2\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nassert     count_rotation([3, 4, 5, 6, 7, 8, 9, 1, 2]) == 1\nassert     count_rotation([1, 2, 3, 4, 5]) == 0\nassert     count_rotation([2, 3, 4, 5, 6, 7, 8, 9, 1]) == -1\nassert     count_rotation([4, 5, 6, 7, 8, 9, 1, 2, 3]) == -1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_rotation([1,2,3,4,5,6,7,8]) == 0\nassert     count_rotation([4,5,6,7,0,1,2,3]) == 4\nassert     count_rotation([1,3,5,7,9,11,13,15]) == 3\nassert     count_rotation([1,3,5,7,9,11,13,15]) == 3\nassert     count_rotation([2,4,6,7,8,10,11,12]) == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_rotation([4, 5, 6, 7, 8, 1, 2, 3]) == 2\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     count_rotation([8, 7, 6, 5, 4, 3, 2, 1]) == 0\n\n\ndef rearrange(arr):\n    '''\n    Write a python function to rearrange an array such that all the elements are first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_rotation([1,2,3,4,5,6,7,8,9]) == 0\nassert     count_rotation([9,7,5,6,4,3,2,1,0]) == 3\nassert     count_rotation([5,6,7,8,0,1,2,3,4]) == 4\nassert     count_rotation([5,6,7,8,0,1,2,3,4]) == 4\nassert     count_rotation([4,3,2,1,0]) == 0\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_rotation([4,5,6,7,8,0,1,2,3]) == 4\nassert count_rotation([1,2,3,4]) == 0\nassert count_rotation([1,2,3,4,5]) == 1\nassert count_rotation([1,2,3,4,5,6]) == 1\nassert count_rotation([1,2,3,4,5,6,7,8,9,0]) == 1\n"
    },
    {
        "number": 802,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_rotation([1,2,3,4,5,6,7,8,9]) == 1\nassert     count_rotation([8,1,2,3,4,5,6,7,9]) == 3\nassert     count_rotation([9,8,7,6,5,4,3,2,1]) == 0\nassert     count_rotation([3,2,1]) == 0\nassert     count_rotation([2,1]) == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_perfect_square(12) == True\nassert     is_perfect_square(5) == True\nassert     is_perfect_square(13) == False\nassert     is_perfect_square(5) == True\nassert     is_perfect_square(5) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (is_perfect_square(1) == True)\nassert     (is_perfect_square(4) == False)\nassert     (is_perfect_square(9) == True)\nassert     (is_perfect_square(16) == True)\nassert     (is_perfect_square(100) == False)\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_perfect_square(n) is False\nassert     is_perfect_square(1) is True\nassert     is_perfect_square(5) is False\nassert     is_perfect_square(11) is True\nassert     is_perfect_square(144) is True\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_perfect_square(4) == True\nassert     is_perfect_square(9) == False\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(100) == False\nassert     is_perfect_square(100.1) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_perfect_square(1) == False\nassert     is_perfect_square(2) == True\nassert     is_perfect_square(3) == False\nassert     is_perfect_square(4) == True\nassert     is_perfect_square(16) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_perfect_square(0) == True\nassert     is_perfect_square(1) == True\nassert     is_perfect_square(2) == True\nassert     is_perfect_square(3) == True\nassert     is_perfect_square(4) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_perfect_square(4) == False\nassert     is_perfect_square(1) == True\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(12) == False\nassert     is_perfect_square(625) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_perfect_square(4) == True\nassert     is_perfect_square(9) == False\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(100) == False\nassert     is_perfect_square(50) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_perfect_square(25) == True\nassert     is_perfect_square(18) == False\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(15) == True\nassert     is_perfect_square(14) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_perfect_square(4) == True\nassert     is_perfect_square(9) == True\nassert     is_perfect_square(25) == False\nassert     is_perfect_square(26) == False\nassert     is_perfect_square(-1) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_product_even([2,3,4,5]) == True\nassert     is_product_even([2,3,5,7]) == False\nassert     is_product_even([4,5,6,7,8,9,10]) == False\nassert     is_product_even([2,3,4,5,6,7,8,9,10]) == True\n\ndef sum_of_prod_by_2(arr):\n    '''\n    Write a function to compute the sum of product of two integer number.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_product_even([]) == True\nassert     is_product_even([1,2,3]) == False\nassert     is_product_even([2,3,4,5]) == True\nassert     is_product_even([1,2,3,4]) == False\nassert     is_product_even([1,2,3,4,5,6]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_product_even([2,4,5]) == False\nassert     is_product_even([4,5,6]) == True\nassert     is_product_even([5,5,5]) == False\nassert     is_product_even([3,2,6]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_product_even([2,5,6,8,4,2,8]) == True\nassert     is_product_even([2,5,6,8,4,2,7]) == False\nassert     is_product_even([2,5,6,8,4,2,8]) == True\nassert     is_product_even([3,6,7,2,8,5,8]) == True\nassert     is_product_even([3,6,7,2,8,5,8]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_product_even([2, 3, 4, 5]) == True\nassert     is_product_even([2, 3, 4]) == False\nassert     is_product_even([2, 3]) == False\nassert     is_product_even([2]) == False\nassert     is_product_even([2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_product_even([]) == True\nassert     is_product_even([1]) == True\nassert     is_product_even([1, 1]) == True\nassert     is_product_even([1, 2]) == False\nassert     is_product_even([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_product_even([1,2,3]) == True\nassert     is_product_even([1,3,5]) == True\nassert     is_product_even([1,3,5,2]) == False\n\ndef is_palindrome(str):\n    '''\n    Write a function to check whether the string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_product_even([2, 6, 10, 3]) == True\nassert     is_product_even([2, 8, 10, 4]) == False\nassert     is_product_even([-3, 4, 1, -1]) == False\nassert     is_product_even([-3, -4, -1, -1]) == True\nassert     is_product_even([-3, -4, -1, 1]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_product_even([2,2,2,2]) is False\nassert     is_product_even([1,2,3,4,5]) is True\nassert     is_product_even([1,0,1,0,1]) is True"
    },
    {
        "number": 804,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_product_even([1, 2, 3, 4, 5, 6]) == False, \"Example\"\nassert     is_product_even([2, 4, 6, 8, 10, 12, 14]) == True, \"Example\"\nassert     is_product_even([]) == False, \"Empty list\"\nassert     is_product_even([1]) == True, \"Single number\"\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True, \"Multiple numbers\"\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_sum_list([[1, 2, 3], [6, 5, 4], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\nassert     max_sum_list([[1], [6, 5], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\nassert     max_sum_list([[1, 2], [6, 5], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\nassert     max_sum_list([[-1, 2], [6, 5], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\nassert     max_sum_list([[1, -2], [6, 5], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sum_list([\n    [1, 2, 3],\n    [2, 1, 3],\n    [2, 2, 2],\n    [1, 2, 2],\n    [2, 1, 2]\n    ]) == [\n    [2, 2, 3],\n    [2, 1, 3],\n    [2, 2, 2]\n    ], \"Check\"\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_sum_list([[1,2],[3,4],[5,6],[7,8]])     ==     [[5,6],[7,8]]\nassert     max_sum_list([[1,2],[2,3],[3,4],[4,5]])     ==     [[3,4],[4,5]]\nassert     max_sum_list([[-1,2],[-3,-4],[-5,-6],[-7,-8]])    ==     [[-7,-8]]\nassert     max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) ==     [[7,8,9]]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_sum_list([[-10,2,3],[3,4,5]]) == [[3,4,5],[-10,2,3]]\nassert     max_sum_list([[-3,4,5],[3,2,1]]) == [[3,2,1],[-3,4,5]]\nassert     max_sum_list([[-10,2,3],[3,4,5],[-5,-6,7],[1,2,3],[4,5,6]]) == [[3,4,5],[-5,-6,7],[1,2,3],[4,5,6]]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_sum_list([[1, 3, 3], [9, 8, 2], [4, 8, 3], [7, 6, 5]]) == [[9, 8, 2], [7, 6, 5]]\nassert     max_sum_list([[1, 2, -5], [1, 2, -3], [1, 2, 3]]) == [[-5, -3, 3]]\nassert     max_sum_list([[1, 2, -5], [-1, -2, -3], [1, 2, 3]]) == [[-5, -3, 3]]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sum_list([[2,3],[5,8],[1,9]]) == [5,8,9]\nassert     max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12,13,14,15]]) == [10,11,12,13,14,15]\n\ndef max_sum_list_v2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_sum_list([[1,2,3],[-1,-2,-3],[1,1,1],[2,-3,-4],[3,3,3],[4,4,4]]) == [[-1,-2,-3],[3,3,3],[4,4,4]]\nassert     max_sum_list([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]) == [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\nassert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]) == [[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]\nassert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35]]) == [[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35]]\nassert     max_sum_list([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40]]) == [[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40]]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_sum_list([[1,3], [4,5], [8,6]]) == [[1,3], [8,6]]\nassert     max_sum_list([[1,3], [2,2], [4,5], [8,6]]) == [[1,3], [4,5], [8,6]]\nassert     max_sum_list([[0,2], [1,3], [2,4], [3,5], [4,6]]) == [[1,3], [2,4], [3,5], [4,6]]\nassert     max_sum_list([[-4,-1,0], [-3,2,-3], [4,5,6], [0,9,1]]) == [[-3,2,-3], [4,5,6], [0,9,1]]\nassert     max_sum_list([[-3,-1,0], [-4,2,-3], [4,5,6], [0,9,1]]) == [[-3,-1,0], [4,5,6], [0,9,1]]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_sum_list([[1,2,3],[-2,3,4],[3,2,6],[-4,5,1]]) == [[-2,3,4],[3,2,6],[-4,5,1]]\nassert     max_sum_list([[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3]]) == [[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3]]\nassert     max_sum_list([[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3],[2,-3,-2]]) == [[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3],[2,-3,-2]]\nassert     max_sum_list([[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3],[2,-3,-2],[1,-2,0]]) == [[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3],[2,-3,-2],[1,-2,0]]\nassert     max_sum_list([[1,2,3],[-2,3,4],[3,2,6],[-4,5,1],[3,2,6],[-4,5,1],[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3],[2,-3,-2],[1,-2,0],[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3],[2,-3,-2],[1,-2,0]]) == [[-2,3,4],[3,2,6],[-3,-2,1],[1,4,3],[-2,-3,-4],[4,0,3],[2,-3,-2],[1,-2,0]]\n"
    },
    {
        "number": 805,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_sum_list([[2,5,1,7], [8,9,2,3], [7,1,3,1]]) == [[7,1,3,1], [2,5,1,7], [8,9,2,3]]\nassert     max_sum_list([[2,5,1,7], [8,9,2,3], [9,1,3,1]]) == [[9,1,3,1], [2,5,1,7], [8,9,2,3]]\nassert     max_sum_list([[2,5,1,7], [8,9,2,3], [7,1,3,1], [9,1,3,1]]) == [[9,1,3,1], [2,5,1,7], [8,9,2,3]]\nassert     max_sum_list([[1,2,3,4], [2,3,4,5], [3,4,5,6]]) == [[3,4,5,6], [1,2,3,4], [2,3,4,5]]\nassert     max_sum_list([[1,2,3,4], [2,3,4,5], [3,4,5,6], [4,5,6,7]]) == [[4,5,6,7], [1,2,3,4], [2,3,4,5]]\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_run_uppercase('aA12a34bcA') == 3\nassert     max_run_uppercase('abBA') == 1\nassert     max_run_uppercase('aAa123A') == 3\nassert     max_run_uppercase('a') == 1\nassert     max_run_uppercase('B') == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_run_uppercase(\"AaAAa\") == 2\nassert     max_run_uppercase(\"AAbbbbBccc\") == 1\nassert     max_run_uppercase(\"\") == 0\nassert     max_run_uppercase(\"AAbbBB\") == 2\nassert     max_run_uppercase(\"AaAa\") == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         max_run_uppercase('c#d!abC') == 2\nassert         max_run_uppercase('c@d!ABc') == 3\nassert         max_run_uppercase('c@d!ABc#') == 3\nassert         max_run_uppercase('c@d!ABc#d') == 4\nassert         max_run_uppercase('c@d!ABc#d#') == 4\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_run_uppercase(\"The quick Brow Fox\") == 3\nassert     max_run_uppercase(\"The quick Brow Fox\") == 3\nassert     max_run_uppercase(\"The Quick Brow Fox\") == 3\nassert     max_run_uppercase(\"The Quick Brow Fox\") == 3\nassert     max_run_uppercase(\"The Quick BUr Fox\") == 3\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_run_uppercase(\"aabbccdeeffgghhiiii\") == 7\nassert     max_run_uppercase(\"aabbccdeeff\") == 4\nassert     max_run_uppercase(\"aabbccdeeffg\") == 4\nassert     max_run_uppercase(\"aabbccdeeffgg\") == 3\nassert     max_run_uppercase(\"aabbccdeeffggghhiiii\") == 7\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_run_uppercase('arunacare') == 3\nassert     max_run_uppercase('abccabcc') == 3\nassert     max_run_uppercase('arunacareacare') == 5\nassert     max_run_uppercase('abccabccabcc') == 5\nassert     max_run_uppercase('abccabccabccabcc') == 5\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_run_uppercase('AaBBbb') == 3\nassert     max_run_uppercase('aAbbb') == 3\nassert     max_run_uppercase('aAbbb') == 2\nassert     max_run_uppercase('AaBb') == 2\nassert     max_run_uppercase('BbB') == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_run_uppercase('b)n9Qf9(2b)t)4i)w)5L)J5e(f)7(5z)d)q)l)4k)t)k)y)m)7(3y)4') ==    5\nassert     max_run_uppercase('8)3y)m(3z)1)8)l)q)t)z)w)9(1)L)5z)g)h)1(8)j)d)m(1)o)q)1(s)g)e)1(s)s)1(y)p)j)1(p)p)z)3(2)e)t)u)r)1(b)2)n)9(z)m(2)e)h)1(l)l)4(y)4)g)z)t)5)h)7)1(t)z)t)6)5)1(b)1)p)r)1(a)1)m)g)t)7)3)m(9)n)6)l)m(4)h)t)s)1)p)2)m)3)4)z)3)p)5)1)8)3)9)6)8)2)z)z)5)1)8)3)6)1)r)8)4)r)5)8)7)1)j)7)8)g)1)2)l)5)1)9)1)p)h)5)l)h)3)y)1)8)7)2)e)1)l)3)1)1)t)4)5)1)6)7)5)4)t)2)9)7)1)4)3)2)5)1)t)4)5)1)6)7)3)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1)4)3)2)5)1)t)2)9)5)1)8)3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)6)1.4.3)2)5)1.t)2)9)5)1.8.3)"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_run_uppercase('The quick Brow Fox') == 3\nassert     max_run_uppercase('aa') == 0\nassert     max_run_uppercase('bbbbccccdddddeeeeeeeffffgg') == 9\nassert     max_run_uppercase('AAAAAAAAAAAAAAAAAAAAAAAAAAAA') == 0\nassert     max_run_uppercase('aaAa') == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_run_uppercase('aabcde') == 3\nassert     max_run_uppercase('abcde') == 1\nassert     max_run_uppercase('abcd') == 2\nassert     max_run_uppercase('abc') == 1\nassert     max_run_uppercase('abcd') == 2\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 13\nassert     first_odd([]) == None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) == 22\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 22\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]) == 42"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert     first_odd([1, 3, 5, 7, 9]) == 3\nassert     first_odd([]) == None\nassert     first_odd([1, 3, 5, 7, 9, 10, 11, 12, 13]) == 9\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 11\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     first_odd([1,2,3,4,5,6,7,8,9,10]) == 1\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 19\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 21\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]) == 57\nassert     first_odd([-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]) == 59\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     first_odd([1,2,3,4,5]) == 3\nassert     first_odd([2,3,4,5]) == None\nassert     first_odd([]) == None\nassert     first_odd([1,3,5]) == 1\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     first_odd([3, 3, 4, 4]) == 4\nassert     first_odd([3, 3, 4, 2]) == 2\nassert     first_odd([1, 3, 5, 7]) == 1\nassert     first_odd([3, 3, 4, 2, 1]) == 1\nassert     first_odd([3, 3, 4, 1, 2]) == 3\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     first_odd([1,2,3,4,5]) == 3\nassert     first_odd([2,2,3,4,5]) == 3\nassert     first_odd([1,3,5,7,9,10]) == 3\nassert     first_odd([-1,1,2,3,4,5]) == 3\nassert     first_odd([2,3,5,7,8,9]) == 3\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef multiply(a, b):\n    '''\n    Write a python function to multiply two numbers and return the result\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     first_odd([2,3,1,5,7,9,6,4]) == 5\nassert     first_odd([1,2,3]) == None\nassert     first_odd([]) == None\n"
    },
    {
        "number": 807,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     first_odd([1, 2, 3, 4, 5]) == 5\nassert     first_odd([1, 3, 5]) == 3\nassert     first_odd([0, 1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_K(('london', 'paris', 'london'), 3) is True\nassert     check_K(('london', 'paris', 'london'), 2) is True\nassert     check_K(('london', 'paris', 'london'), 1) is True\nassert     check_K(('london', 'paris', 'london'), 0) is False\nassert     check_K(('london', 'paris', 'london'), -1) is False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_K(tuple_check, K) == True\nassert     check_K(tuple_check, 1) == False\nassert     check_K(tuple_check, 2) == False\nassert     check_K(tuple_check, -1) == False\nassert     check_K(tuple_check, 0) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_K(tup = (1,2,3), K = 3) == True\nassert     check_K(tup = (1,2,3), K = 2) == True\nassert     check_K(tup = (1,2,3), K = 1) == True\nassert     check_K(tup = (1,2,3), K = 0) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_K(test_tup, k) == True\nassert     check_K(test_tup2, k) == True\nassert     check_K(test_tup3, k) == False\nassert     check_K(test_tup4, k) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_K(('James', 'Peter', 'Mary'), 1) == True\nassert     check_K(('Michael', 'John', 'Mark', 'Sarah'), 2) == True\nassert     check_K(('Hannah', 'Sarah', 'Brian', 'Hannah'), 2) == True\nassert     check_K(('Hannah', 'Hannah', 'Mark', 'Sarah', 'Hannah', 'Hannah'), 2) == False\nassert     check_K(('Hannah', 'Hannah', 'Hannah', 'Hannah'), 2) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_K((0,0,1),0)\nassert     check_K((0,0,1),1)\nassert     check_K((0,0,1),2)\nassert     check_K((0,0,1),3)\nassert     check_K((0,0,1),4)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_K((1, 2, 3, 4, 5, 6), 5)\nassert     check_K((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), 22)\nassert     check_K((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), 21)\nassert     check_K((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), 22)\nassert     check_K((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), 25)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_K((\"Gaurav\",\"Tushar\"), 2) == False\nassert     check_K((\"Gaurav\",\"Tushar\", \"Gaurav\"), 2) == True\nassert     check_K((\"Gaurav\",\"Tushar\", \"Gaurav\"), 1) == False\nassert     check_K((\"Gaurav\",\"Tushar\", \"Gaurav\", \"Tushar\"), 2) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_K(('a', 'b', 'c'), 3)\nassert     check_K(('a', 'b', 'c'), 4)\nassert     check_K(('a', 'b', 'c'), 1)\nassert     check_K(('a', 'b', 'c'), 2)\nassert     check_K(('a', 'b', 'c'), 0)\n"
    },
    {
        "number": 808,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_K(\n            (1, 2, 3),\n            0)\nassert     check_K(\n            (1, 2, 3),\n            1)\nassert     check_K(\n            (1, 2, 3),\n            3)\nassert     check_K(\n            (1, 2, 3),\n            4)\nassert     check_K(\n            (1, 2, 3, 4, 5, 6, 7),\n            0)\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_smaller(('Python',), ('Python', 'Python', 'Python')) == True\nassert     check_smaller(('Python', 'Python', 'Python'), ('Python',)) == False\nassert     check_smaller(('Python',), ('Python', 'Java', 'Python')) == False\nassert     check_smaller(('Python',), ('Java', 'Python', 'Python')) == False\n\n\n'''\nSmallest and largest\nWrite a function to find the smallest and largest integer from a list of integers.\n'''\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_smaller((1,2,3,4),(5,6,7,8)) == True\nassert     check_smaller((1,2,3,4),(1,2,3,4)) == False\nassert     check_smaller((1,2,3,4),(1,2,3,5)) == False\nassert     check_smaller((1,2,3,4),(1,2,3,6)) == True\nassert     check_smaller((1,2,3,4),(1,2,3,7)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_smaller((1, 2, 3), (2, 3, 4)) == True, 'a'\nassert     check_smaller((1, 2, 3), (1, 2, 3)) == False, 'b'\nassert     check_smaller((1, 2, 3), (3, 2, 1)) == True, 'c'\nassert     check_smaller((1, 2, 3), (4, 3, 1)) == False, 'd'\nassert     check_smaller((1, 2, 3), (3, 2, 1)) == False, 'e'\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         check_smaller((1, 2, 3, 4, 5, 6), (2, 4, 7, 8, 9, 1))\nassert         check_smaller((1, 2, 3, 4, 5, 6), (2, 4, 1, 3, 6, 7))\nassert         check_smaller((1, 2, 3, 4, 5, 6), (4, 5, 1, 3, 6, 7))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_smaller(('a', 'b', 'c', 'd'), ('b', 'a', 'd', 'c'))\nassert not check_smaller(('a', 'b', 'c', 'd'), ('a', 'a', 'd', 'c'))\nassert not check_smaller(('a', 'b', 'c', 'd'), ('a', 'b', 'a', 'c'))\nassert not check_smaller(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'a'))\nassert not check_smaller(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_smaller((1, 2, 3), (1, 2, 4))\nassert     check_smaller((1, 2, 3), (1, 3, 2))\nassert     check_smaller((1, 2, 3), (2, 3, 4))\nassert     check_smaller((1, 2, 3), (2, 4, 3))\nassert     check_smaller((1, 2, 3), (2, 3, 3))\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_smaller((2, 1, 5), (1, 2, 3)) == True\nassert     check_smaller((2, 1, 5), (2, 2, 3)) == True\nassert     check_smaller((2, 1, 5), (1, 1, 3)) == True\nassert     check_smaller((2, 1, 5), (1, 1, 5)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (check_smaller(('x', 'y', 'z'), ('a', 'b', 'c')) == True)\nassert     (check_smaller(('x', 'y', 'z'), ('x', 'a', 'c')) == False)\nassert     (check_smaller(('x', 'y', 'z'), ('a', 'x', 'c')) == True)\nassert     (check_smaller(('x', 'y', 'z'), ('a', 'x', 'z')) == False)\nassert     (check_smaller(('x', 'y', 'z'), ('x', 'x', 'z')) == False)\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_smaller((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == False\nassert     check_smaller((1, 2, 3, 4, 5), (2, 2, 3, 4, 5)) == True\nassert     check_smaller((1, 2, 3, 4, 5), (3, 2, 3, 4, 5)) == False\nassert     check_smaller((1, 2, 3, 4, 5), (4, 2, 3, 4, 5)) == False\nassert     check_smaller((1, 2, 3, 4, 5), (5, 2, 3, 4, 5)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_smaller(('a', 'b', 'c'), ('a', 'b', 'd')) is True\nassert     check_smaller(('a', 'b', 'c'), ('a', 'b', 'd', 'e')) is True\nassert     check_smaller(('a', 'b', 'c'), ('a', 'b', 'd', 'c', 'e')) is True\nassert     check_smaller(('a', 'b', 'c'), ('a', 'b', 'c', 'd', 'e')) is False\nassert     check_smaller(('a', 'b', 'c'), ('a', 'b', 'd', 'c', 'e')) is False\n"
    }
]