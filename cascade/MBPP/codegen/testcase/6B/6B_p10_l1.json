[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (\n                [1, 2, 3, 4, 5, 6]\n            ,\n                [1, 2, 3, 5, 6, 4]\n            ) == similar_elements(\n                [1, 2, 3, 4, 5, 6]\n            ,\n                [1, 2, 3, 5, 6, 4]\n            )\n\nassert     (\n                [1, 2, 3, 4, 5, 6]\n            ,\n                [1, 2, 3, 5, 6, 4]\n            ) == similar_elements(\n                [1, 2, 3, 4, 5, 6]\n            ,\n                [1, 2, 3, 5, 6, 4]\n            )\n\nassert     (\n                [1, 2, 3, 4, 5, 6]\n            ,\n                [1, 2, 3, 5, 6, 4]\n            ) == similar_elements(\n                [1, 2, 3, 4, 5, 6]\n            ,\n                [1, 2, 3, 5, 6, 4]\n            )\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     similar_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == True,'should be True'\nassert     similar_elements(('a', 'b', 'c'), ('b', 'a', 'c')) == False,'should be False'\nassert     similar_elements(('a', 'b', 'c'), ('b', 'c', 'a')) == False,'should be False'\nassert     similar_elements(('a', 'b', 'c'), ('c', 'b', 'a')) == False,'should be False'\nassert     similar_elements(('a', 'a', 'a', 'a'), ('a', 'a', 'a', 'a')) == True,'should be True'\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (similar_elements(('a', 'b', 'c', 'd'), ('a', 'b', 'e', 'd')) == 'a,b')\nassert     (similar_elements(('a', 'b', 'c'), ('a', 'b', 'e', 'd')) == 'a,b')\nassert     (similar_elements((1, 2), (2, 3)) == '')\nassert     (similar_elements(('a', 'b', 'c', 'd'), ('a', 'b', 'e', 'd', 'e')) == 'a,b,d')\nassert     (similar_elements(('a', 'b', 'c'), ('a', 'b', 'e', 'd', 'e')) == 'a,b,e')\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         (similar_elements(([1, 2, 3], [4, 5, 6]), ([1, 2, 3], [1, 2, 3])) ==     [1, 2, 3])\nassert         (similar_elements(([1, 2, 3], [6, 7, 8]), ([1, 2, 4], [6, 7, 8])) ==     [1, 2])\nassert         (similar_elements(([1, 2, 3, 4], [6, 7, 8, 9]), ([1, 2, 4, 5], [6, 7, 8, 9])) ==     [1, 2, 4, 5])\nassert         (similar_elements(([2, 3, 4], [2, 3, 5, 6]), ([2, 3, 4], [2, 3, 5, 6])) ==     [2, 3, 4])\nassert         (similar_elements(([1, 2, 3], [1, 2, 3], [1, 2, 3]), ([1, 2, 3], [1, 2, 3], [1, 2, 3])) ==     [1, 2, 3])\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     similar_elements(\n                    [1, 3, 5, 7, 9],\n                    [2, 4, 6, 8, 10],\n                ) == [1, 3, 5], \"test 1 failed\"\nassert     similar_elements(\n                    [1, 3, 5, 7, 9],\n                    [2, 4, 6, 8, 10, 15],\n                ) == [1, 3, 5, 7], \"test 2 failed\"\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (similar_elements((1,2,3), (1,2,3)) == (1,2,3))\nassert     (similar_elements((1,2,3), (1,2,4)) == (1,2))\nassert     (similar_elements((1,2,3), (1,5,7)) == ())\nassert     (similar_elements((1,2,3), (2,3,4)) == (1,2,3))\nassert     (similar_elements((1,2,3,4), (1,2,3,4)) == (1,2,3,4))\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     similar_elements((1,2,3), (2,3,1)) == [1,2]\nassert     similar_elements((1,2,3,4,5), (1,3,4,6,7)) == [1,3,4,5]\nassert     similar_elements((1,2,3,4,5,6,7,8), (1,2,3,4,6,7,8)) == [1,2,3,4,5,6,7,8]\nassert     similar_elements((1,2,3,4,5), (2,3,1)) == []\nassert     similar_elements((1,2,3,4,5,6,7,8), (2,3,1)) == [1,2,3]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     similar_elements(((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 7)), ((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 7))) == 3\nassert     similar_elements(((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 7)), ((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 5, 6, 7))) == 2\nassert     similar_elements(((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 7)), ((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 8))) == 1\nassert     similar_elements(((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 7)), ((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 5, 6, 7))) == 0\nassert     similar_elements(((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 7)), ((1, 2, 3, 4, 5, 6, 7), (2, 1, 4, 7, 6, 5, 3), (3, 2, 1, 4, 5, 6, 8))) == -1\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     similar_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == True\nassert     similar_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 6)) == False\nassert     similar_elements((1, 2, 3, 4), (1, 2, 3, 4)) == True\nassert     similar_elements((1, 2, 3, 4), (1, 2, 3, 5)) == False\nassert     similar_elements((1, 2, 3, 4), (2, 3, 4)) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     similar_elements([], [1, 2, 3]) == []\nassert     similar_elements([1, 2, 3], []) == []\nassert     similar_elements([1, 2, 3], [4, 5, 6]) == []\nassert     similar_elements([1, 2, 3, 4, 5], [6, 7, 8, 9]) == [4, 5]\nassert     similar_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(8) == False\nassert     is_not_prime(11) == True\nassert     is_not_prime(0) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_not_prime(1)==False\nassert     is_not_prime(2)==True\nassert     is_not_prime(3)==False\nassert     is_not_prime(4)==True\nassert     is_not_prime(5)==False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_not_prime(5)\nassert     is_not_prime(9)\nassert     is_not_prime(11)\nassert     is_not_prime(13)\nassert     is_not_prime(17)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_not_prime(3) == False\nassert     is_not_prime(2) == False\nassert     is_not_prime(0) == True\nassert     is_not_prime(1) == True\n\ndef is_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_not_prime(2)\nassert     is_not_prime(3)\nassert     is_not_prime(5)\nassert     is_not_prime(7)\nassert     is_not_prime(11)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_not_prime(15) == True\nassert     is_not_prime(42) == False\nassert     is_not_prime(28) == True\nassert     is_not_prime(1234) == False\n\ndef sieve(n):\n    '''\n    Write a python function to implement the sieve of Eratosthenes.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == True\nassert     is_not_prime(6) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_not_prime(5) == False\nassert is_not_prime(1) == True\nassert is_not_prime(13) == False\nassert is_not_prime(15) == True\nassert is_not_prime(19) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_not_prime(13) == True\nassert     is_not_prime(15) == False\nassert     is_not_prime(17) == False\nassert     is_not_prime(19) == True\nassert     is_not_prime(21) == False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [8,7,4,3,1] == heap_queue_largest([8,7,4,3,1],5)\nassert     [5,4,3,2,1] == heap_queue_largest([5,4,3,2,1],5)\nassert     [2,1,3,4,5] == heap_queue_largest([2,1,3,4,5],5)\nassert     [2,1,3,4,5] == heap_queue_largest([2,1,3,4,5],4)\nassert     [1,2,3,4,5] == heap_queue_largest([1,2,3,4,5],4)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([1,3,2,4,5],3)==[3,3,2]\nassert     heap_queue_largest([1,3,2,4,5],1)==[1]\nassert     heap_queue_largest([1,3,2,4,5],0)==[]\nassert     heap_queue_largest([1,3,2,4,5],5)==[5,4,3,2,1]\nassert     heap_queue_largest([1,3,2,4,5],7)==[5,4,3,2]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nnums=[8,4,6,2,10]\nn=3\nassert heap_queue_largest(nums,n)==[10,9,8]\n\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([3,2,1,4,5,6,7,8],4) == [8,7,6,5]\nassert     heap_queue_largest([3,2,3,4,5,6,7,8],4) == [8,7,6,5]\nassert     heap_queue_largest([],4) == [0,0,0,0]\nassert     heap_queue_largest([],0) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef heap_queue_largest_test():\n    nums = [3,2,1,5,6,4]\n    n = 2\n    # assert heap_queue_largest(nums,n) == [5,6]\n    assert heap_queue_largest(nums,n) == [6,5]\n    print 'all tests passed'\n\ndef get_least_n_max_heap(nums,n):\n    '''\n    Given a list of integers, returns the n greatest integers in the list, in descending order.\n    '''\n    heap = nums[:n]\n    hq.heapify(heap)\n    for num in nums[n:]:\n        hq.heappushpop(heap,num)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([],0)==[]\nassert     heap_queue_largest([-4,-2,0,2,4],2)==[4,2]\nassert     heap_queue_largest([4,3,1,2,5,7,8,6],2)==[8,7]\nassert     heap_queue_largest([4,3,1,2,5,7,8,6],3)==[8,7,6]\nassert     heap_queue_largest([4,3,1,2,5,7,8,6],10)==[8,7,6,5,4,3,2]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert hq.nlargest(3, [1,2,3,4,5,6,7,8,9,10], key=lambda x: x % 2) == [10, 8, 6]\nassert hq.nlargest(2, [1,2,3,4,5,6,7,8,9,10], key=lambda x: x % 2) == [10, 8]\nassert hq.nlargest(0, [1,2,3,4,5,6,7,8,9,10], key=lambda x: x % 2) == []\nassert hq.nlargest(4, [1,2,3,4,5,6,7,8,9,10], key=lambda x: x % 2) == [7, 5, 3, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(0) == True, 'True'\nassert     is_Power_Of_Two(1) == False, 'False'\nassert     is_Power_Of_Two(2) == True, 'True'\nassert     is_Power_Of_Two(3) == True, 'True'\nassert     is_Power_Of_Two(16) == True, 'True'\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(4)         == True\nassert     is_Power_Of_Two(5)         == False\nassert     is_Power_Of_Two(0)         == True\nassert     is_Power_Of_Two(-4)     == False\nassert     is_Power_Of_Two(24)     == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two ( 0 ) == True\nassert     is_Power_Of_Two ( 1 ) == True\nassert     is_Power_Of_Two ( 2 ) == True\nassert     is_Power_Of_Two ( 4 ) == True\nassert     is_Power_Of_Two ( 8 ) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(13)==True\nassert     is_Power_Of_Two(14)==False\nassert     is_Power_Of_Two(15)==True\nassert     is_Power_Of_Two(16)==False\nassert     is_Power_Of_Two(0)==True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two(1) == True\nassert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(0) == False\nassert     is_Power_Of_Two(-2) == False\nassert     is_Power_Of_Two(2**4-2) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(10) == False\nassert     is_Power_Of_Two(8) == True\nassert     is_Power_Of_Two(25) == False\nassert     is_Power_Of_Two(0) == True\nassert     is_Power_Of_Two(-8) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(0) == True\nassert     is_Power_Of_Two(1) == False\nassert     is_Power_Of_Two(2) == False\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(4) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(3) == True\nassert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(10) == False\nassert     is_Power_Of_Two(8) == True\nassert     is_Power_Of_Two(9) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(5) == True \nassert     is_Power_Of_Two(5) == True \nassert     is_Power_Of_Two(0) == True \nassert     is_Power_Of_Two(1) == True \nassert     is_Power_Of_Two(2) == False \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two (0) == True, 'Not valid with 0'\nassert     is_Power_Of_Two (1) == True, 'Not valid with 1'\nassert     is_Power_Of_Two (2) == False, 'Not valid with 2'\nassert     is_Power_Of_Two (3) == True, 'Not valid with 3'\nassert     is_Power_Of_Two (4) == False, 'Not valid with 4'\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_char_long('Hi, my name is Alex') == ['Hi','my', 'name', 'is', 'Alex']\nassert     find_char_long('Hi, my name is Alex') == ['Hi','my', 'name', 'is', 'Alex']\nassert     find_char_long('Hi, my name is Alex!') == ['Hi','my', 'name', 'is', 'Alex']\nassert     find_char_long('Hi, my name is Alex! I am awesome!') == ['Hi','my', 'name', 'is', 'Alex']\nassert     find_char_long('Hi, my name is Alex! I am awesome!') == ['Hi','my', 'name', 'is', 'Alex']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_char_long(\"this is a long sentence\") == ['long']\nassert     find_char_long(\"this is a short sentence\") == ['short']\nassert     find_char_long(\"this is a very short sentence\") == ['very short']\nassert     find_char_long(\"this is a very, very long sentence\") == ['very', 'long']\nassert     find_char_long(\"this is a very, very, very long sentence\") == ['very', 'long']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_char_long('a') == []\nassert     find_char_long('bbb') == []\nassert     find_char_long('A B C D') == ['A', 'B', 'C', 'D']\nassert     find_char_long('a bb c') == ['a', 'bb', 'c']\nassert     find_char_long('A B C D') == ['A', 'B', 'C', 'D']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_char_long(\"this is a test\") == ['is', 'test']\nassert     find_char_long(\"this is a sentence\") == ['is', 'a','sentence']\nassert     find_char_long(\"this is a test\") == ['is', 'test']\nassert     find_char_long(\"\") == []\n\ndef add_punctuation(text):\n    '''\n    Add punctuation to the end of each line in the string text. \n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_char_long(\"This is a test\") == ['this', 'is', 'a', 'test']\nassert     find_char_long(\"This is a test. This is another test\") == ['this', 'is', 'a', 'test', 'this', 'is', 'another', 'test']\nassert     find_char_long(\"This is a test. This is another test. This is a third test\") == ['this', 'is', 'a', 'test', 'this', 'is', 'another', 'test', 'this', 'is', 'a', 'third', 'test']\nassert     find_char_long(\"This is a test. This is another test. This is a third test. This is a fourth test\") == ['this', 'is', 'a', 'test', 'this', 'is', 'another', 'test', 'this', 'is', 'a', 'third', 'test', 'this', 'is', 'a', 'fourth', 'test']\nassert     find_char_long(\"This is a test. This is another test. This is a third test. This is a fourth test. This is a fifth test\") == ['this', 'is', 'a', 'test', 'this', 'is', 'another', 'test', 'this', 'is', 'a', 'third', 'test', 'this', 'is', 'a', 'fourth', 'test', 'this', 'is', 'a', 'fifth', 'test']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_char_long('Hello World') == ['Hello', 'World']\nassert     find_char_long('Hello') == ['Hello']\nassert     find_char_long('I like') == ['I', 'like']\nassert     find_char_long('') == []\nassert     find_char_long('123456789') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_char_long('I want to learn Java') == ['I', 'want', 'to', 'learn', 'Java']\nassert     find_char_long('i want to learn java') == ['i', 'want', 'to', 'learn', 'java']\nassert     find_char_long('I want to learn Java   ') == ['I', 'want', 'to', 'learn', 'Java']\nassert     find_char_long('i want to learn java') == ['i', 'want', 'to', 'learn', 'java']\nassert     find_char_long('I  want to learn Java   ') == ['I', 'want', 'to', 'learn', 'Java']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_char_long('x') == ['x']\nassert     find_char_long('a') == ['a']\nassert     find_char_long('a b') == ['a', 'b']\nassert     find_char_long('a b c') == ['a', 'b']\nassert     find_char_long('a b c d') == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_char_long('Welcome to Python') == [ 'Welcome', 'to', 'Python' ]\nassert     find_char_long('Welcome to Python, welcome to Python') == [ 'Welcome', 'Python' ]\nassert     find_char_long('Welcome to Python, welcome to Python') == [ 'Welcome', 'Python' ]\nassert     find_char_long('Welcome to Python, welcome to Python, welcome to Python') == [ 'Welcome', 'Python' ]\nassert     find_char_long('Welcome to Python, welcome to Python, welcome to Python, welcome to Python, welcome to Python') == [ 'Welcome', 'Python', 'welcome' ]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_char_long('Hi,my name is abhishek, I am a CS student') == ['Hi,my', 'name', 'I', 'am', 'a', 'CS','student', 'abhishek']\nassert     find_char_long('Hi,my name is abhishek, I am a CS student') == ['Hi,my', 'name', 'I', 'am', 'a', 'CS','student', 'abhishek']\nassert     find_char_long('Hi,my name is abhishek, I am a CS student') == ['Hi,my', 'name', 'I', 'am', 'a', 'CS','student', 'abhishek']\nassert     find_char_long('Hi,my name is abhishek, I am a CS student') == ['Hi,my', 'name', 'I', 'am', 'a', 'CS','student', 'abhishek']\nassert     find_char_long('Hi,my name is abhishek, I am a CS student') == ['Hi,my', 'name', 'I', 'am', 'a', 'CS','student', 'abhishek']\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef print_powers(n):\n    '''\n    Write a function that prints out all numbers between 1 and n inclusive that are perfect squares.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_nums([1,2,3,4,5,6,7,8,9,10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert     square_nums([-1,0,1,2,3,4,5,6,7,8,9]) == [-1, 1, 4, 9, 16, 25, 36, 49, 64, 81]\nassert     square_nums([0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\nassert     square_nums([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81]\nassert     square_nums([1,2,3,4,5,6,7,8,9,10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [square_nums([0,1,2])        == [0,1,4], \n            square_nums([])        == [],\n            square_nums([0,1,2,3,4,5]) == [0,1,4,9,16,25]]\n\ndef is_in_range(nums, min, max):\n    '''\n    Write a function to determine if a number is in a given range.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [x**2 for x in [1,2,3,4]] == [1,4,9,16]\nassert     [x**2 for x in [2,3,4,5,6]] == [4,9,16,25,36]\nassert     [x**2 for x in [0,1,2,3,4,5,6,7,8,9,10]] == [0,1,4,9,16,25,36,49,64,81,100]\nassert     [x**2 for x in [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]] == [1,4,9,16,25,36,49,64,81,100]\n\ndef make_squares(arr):\n    '''\n    Write a function to replace all the negative values in a list with their square.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [0] == square_nums( [0] )\nassert     [1] == square_nums( [1] )\nassert     [4, 9, 16] == square_nums( [4, 9, 16] )\nassert     [0, 1] == square_nums( [0, 1] )\nassert     [1, 0, 1] == square_nums( [1, 0, 1] )\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_nums([1,2,3,4]) == [1, 4, 9, 16]\nassert     square_nums([1,2,3,4,5]) == [1, 4, 9, 16, 25]\nassert     square_nums([1,2,3,4,5,6]) == [1, 4, 9, 16, 25, 36]\nassert     square_nums([1,2,3,4,5,6,7]) == [1, 4, 9, 16, 25, 36, 49]\nassert     square_nums([1,2,3,4,5,6,7,8]) == [1, 4, 9, 16, 25, 36, 49, 64]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1, 4, 9, 16, 25], \"Test 1 failed\"\nassert     square_nums([0,1,2,3,4,5]) == [0, 1, 4, 9, 16, 25], \"Test 2 failed\"\nassert     square_nums([-1,-2,-3,-4,-5]) == [-1, 1, 4, 9, 16, 25], \"Test 3 failed\"\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1,2,3,4,5] == square_nums([1,2,3,4,5])\nassert     [1,4,9,16] == square_nums([1,2,3,4,5,6,7])\nassert     [1,4,9,16,25,36,49,64] == square_nums([1,2,3,4,5,6,7,8,9,10])\nassert     [1,4,9,16,25,36,49,64,81,100] == square_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\nassert     [1,4,9,16,25,36,49,64,81,100] == square_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [4, 16, 36, 64] == square_nums([1, 2, 3, 4])\nassert     [1, 4, 9, 16] == square_nums([-1, 0, 1, 2])\nassert     [0, 4, 16, 36] == square_nums([-3, -4, -1, 0, 1, 2, 3])\nassert     [1, 4, 9, 16] == square_nums([-3, -2, -1, 0, 1, 2, 3])\n\n\ndef is_even(n):\n    '''\n    Write a function to determine if a given integer is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n        , square_nums([0, 1, 2, 3, 4]) == [0, 1, 4, 9, 16]\n        , square_nums([-1, 0, 1, 2, 3]) == [1, 0, 1, 4, 9]]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Rotations(\"abcd\") == 1\nassert     find_Rotations(\"abcda\") == 2\nassert     find_Rotations(\"abcde\") == 2\nassert     find_Rotations(\"abc\") == 0\nassert     find_Rotations(\"ab\") == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Rotations(string) == expected_result\nprint 'Passed'\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Rotations('a') == 0\nassert     find_Rotations('aa') == 0\nassert     find_Rotations('aab') == 0\nassert     find_Rotations('aaab') == 1\nassert     find_Rotations('ab') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Rotations('a') == 0\nassert     find_Rotations('b') == 1\nassert     find_Rotations('ab') == 0\nassert     find_Rotations('abc') == 1\nassert     find_Rotations('abcd') == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"giraffe\") == 1\nassert     find_Rotations(\"a\") == 0\nassert     find_Rotations(\"abcdefgh\") == 0\nassert     find_Rotations(\"abcdefghi\") == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Rotations('AB') == 1\nassert     find_Rotations('ABA') == 2\nassert     find_Rotations('ABAB') == 2\nassert     find_Rotations('ABABAB') == 1\nassert     find_Rotations('ABABABAB') == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Rotations('abc') == 0\nassert     find_Rotations('babc') == 1\nassert     find_Rotations('bacb') == 2\nassert     find_Rotations('bacbb') == 2\nassert     find_Rotations('bacbba') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Rotations('test') == 4\nassert     find_Rotations('tet') == 1\nassert     find_Rotations('leet') == 2\nassert     find_Rotations('cat') == 0\nassert     find_Rotations('grap') == 2\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_Occ('r','r') == 'rn'\nassert     remove_Occ('r','') == 'r'\nassert     remove_Occ('','') == ''\nassert     remove_Occ('aab','a') == 'bab'\nassert     remove_Occ('a','') == 'a'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_Occ('daffy', 'd') == 'ffy'\nassert     remove_Occ('daffy', 'a') == 'ffy'\nassert     remove_Occ('daffy', 'y') == 'ffy'\nassert     remove_Occ('daffy', 'x') == 'ffy'\nassert     remove_Occ('daffy', 'dff') == 'yaffy'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_Occ('abcba', 'b') == 'abca'\nassert     remove_Occ('abcba', 'c') == 'abc'\nassert     remove_Occ('abca', 'c') == 'ab'\nassert     remove_Occ('abc', 'd') == 'abc'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_Occ(\"hello\",'l') == 'heo' \nassert     remove_Occ(\"hello\",'e') == 'hlo' \nassert     remove_Occ(\"hello\",'k') == 'hel' \nassert     remove_Occ(\"hello\",'h') == 'e' \nassert     remove_Occ(\"hello\",'o') == 'ell'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_Occ(\"Rithm\", \"t\") == \"Rmth\"\nassert     remove_Occ(\"Rithm\", \"r\") == \"ithm\"\nassert     remove_Occ(\"Rithm\", \"R\") == \"ithm\"\nassert     remove_Occ(\"Rithm\", \"m\") == \"ith\"\nassert     remove_Occ(\"Rithm\", \"i\") == \"ith\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_Occ('ABABACABA', 'A') == 'BBBACABBA'\nassert     remove_Occ('ABABACABA', 'B') == 'AABAACABA'\n\ndef is_Palindrome(s):\n    '''\n    Write a python function to check whether the string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_Occ('hello', 'l') == 'heell'\nassert     remove_Occ('hello', 'll') == 'heee'\nassert     remove_Occ('hell', 'll') == 'hell'\nassert     remove_Occ('hello', 'o') == 'helh'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_Occ('abcd','d') == 'ab'\nassert     remove_Occ('xyz','z') == 'xy'\nassert     remove_Occ('pqrst','t') == 'pqr'\nassert     remove_Occ('abcxyz','z') == 'abc'\n\ndef replace_Occ(s,ch,replacement):\n    '''\n    Write a python function to replace the first and last occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_Occ('Python','m') == 'ythn'\nassert     remove_Occ('Python', 'P') == 'ythn'\nassert     remove_Occ('Python', 'n') == 'yth'\nassert     remove_Occ('Python', 't') == 'ytho'\nassert     remove_Occ('Python','m') == 'yth'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_Occ('lkjsafh','s') == 'kjh'\nassert     remove_Occ('lkjsafh', 'd') == 'kjsa'\nassert     remove_Occ('lkjsafh', 'j') == 'kjsa'\nassert     remove_Occ('lkjsafh','') == 'kjsa'\nassert     remove_Occ('lkjsafh', 'l') == 'kjsafh'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         sort_matrix(M) == sorted(M, key=sum)\nassert         sort_matrix(M2) == sorted(M2, key=sum)\nassert         sort_matrix(M3) == sorted(M3, key=sum)\nassert         sort_matrix(M4) == sorted(M4, key=sum)\nassert         sort_matrix(M5) == sorted(M5, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[7,2,1],[4,5,6],[3,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[5,3,1],[2,4,6],[9,8,7]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[9,8,7],[6,5,4],[3,2,1]]) == [[1,2,3],[4,5,6],[7,8,9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_matrix([[3, 6, 1, 2],\n                    [4, 5, 7, 3],\n                    [6, 7, 3, 8],\n                    [5, 3, 7, 9]]) == [[1, 2, 3, 3],\n                                        [7, 5, 6, 7],\n                                        [5, 4, 7, 8],\n                                        [4, 3, 6, 9]]\nassert     sort_matrix([[1, 2, 3],\n                    [4, 5, 6],\n                    [7, 8, 9]]) == [[1, 2, 3],\n                                        [4, 5, 6],\n                                        [7, 8, 9]]\nassert     sort_matrix([[3, 6, 1, 2],\n                    [4, 5, 7, 3],\n                    [6, 7, 3, 8],\n                    [5, 3, 7, 9]]) == [[1, 2, 3, 3],\n                                        [7, 5, 6, 7],\n                                        [5, 4, 7, 8],\n                                        [4, 3, 6, 9]]\nassert     sort_matrix([[3, 6, 1, 2],\n                    [4, 5, 7, 3],\n                    [6, 7, 3, 8],\n                    [5, 3, 7, 9]]) == [[1, 2, 3, 3],\n                                        [7, 5, 6, 7],\n                                        [5, 4, 7, 8],\n                                        [4, 3, 6, 9]]\nassert     sort_matrix([[1, 2, 3],\n                    [4, 5, 6],\n                    [7, 8, 9]]) == [[1, 2, 3],\n                                        [4, 5, 6],\n                                        [7, 8, 9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_matrix([[2,2],[1,2]]) == [[1,2],[2,2]]\nassert     sort_matrix([[2,2],[3,2]]) == [[2,2],[2,2]]\nassert     sort_matrix([[3,2],[2,2],[1,2]]) == [[1,2],[2,2],[3,2]]\nassert     sort_matrix([[1,2],[2,3],[3,4],[4,5]]) == [[1,2],[2,3],[3,4],[4,5]]\n\ndef sort_matrix_2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_matrix([[1, 2, 3], [3, 2, 1], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [3, 2, 1], [4, 5, 6], [7, 8, 9]]\nassert     sort_matrix([[1, 2, 3], [3, 2, 1], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [3, 2, 1], [4, 5, 6], [7, 8, 9]]\nassert     sort_matrix([[3, 4, 1], [5, 7, 6], [8, 9, 2], [1, 2, 3]]) == [[1, 2, 3], [3, 4, 1], [5, 7, 6], [8, 9, 2]]\nassert     sort_matrix([[3, 4, 1], [5, 7, 6], [8, 9, 2], [1, 2, 3]]) == [[1, 2, 3], [3, 4, 1], [5, 7, 6], [8, 9, 2]]\n\ndef zero_matrix(M):\n    '''\n    Write a function that returns a new matrix which is the zero matrix.\n    The zero matrix is a square matrix with zeros everywhere except the main diagonal.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_matrix([[3, 2, 1], [2, 2, 2], [1, 1, 3]]) == [1, 1, 2, 2, 3]\nassert     sort_matrix([[3, 2, 1, 4], [2, 2, 2, 5], [1, 1, 3, 6]]) == [1, 1, 2, 2, 3, 4, 5, 6]\nassert     sort_matrix([[3, 2, 1, 4], [2, 2, 2, 5], [1, 1, 3, 6]]) == [1, 1, 2, 2, 3, 4, 5, 6]\nassert     sort_matrix([[3, 2, 1, 4], [2, 2, 2, 5], [1, 1, 3, 6], [0, 0, 0, 0]]) == [0, 0, 0, 0, 3, 4, 5, 6]\nassert     sort_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         sort_matrix([[3, 1, 4, 2], [1, 5, 1, 3], [1, 7, 1, 1], [1, 3, 3, 4]]) == [\n                [1, 1, 1, 1], [1, 3, 4, 4], [1, 1, 1, 1], [1, 1, 3, 3]]\nassert         sort_matrix([[3, 3, 2], [2, 2, 1], [1, 1, 1]]) == [\n                [1, 1, 1], [1, 1, 1], [2, 2, 1]]\nassert         sort_matrix([[3, 3, 1], [2, 2, 1], [1, 1, 1]]) == [\n                [1, 1, 1], [1, 1, 1], [2, 2, 1]]\nassert         sort_matrix([[1, 1, 1], [2, 2, 1], [3, 3, 1]]) == [\n                [1, 1, 1], [1, 1, 1], [2, 2, 1]]\n\ndef find_duplicate_numbers(nums):\n    '''\n    Write a function to find all the duplicate numbers in an array.\n    For example,\n    If input array is [2, 3, 5, 4, 3, 2, 6, 7], the function should return [2, 3, 4].\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_matrix([[1,3,4,10], [2,7,8,9], [5,11,12,13]]) == [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\nassert     sort_matrix([[-1,-2], [-3,-4], [-5,-6]]) == [[-6,-5], [-4,-3], [-2,-1]]\nassert     sort_matrix([[-5], [-4], [-3], [-2], [-1]]) == [[-1], [-2], [-3], [-4], [-5]]\nassert     sort_matrix([[-5], [-4], [-3], [-2], [-1], [0]]) == [[-5], [-4], [-3], [-2], [-1], [0]]\nassert     sort_matrix([[0, 2, 3, 4, 5, 6], [1, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17]]) == [[0,1,2,3,4,5], [6,7,8,9,10,11], [12,13,14,15,16,17]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n\ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n\ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n\ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Volume(1,1,1) == 1\nassert     find_Volume(2,1,1) == 2\nassert     find_Volume(2,1.5,1) == 1.5\nassert     find_Volume(0,1,1) == 0\nassert     find_Volume(0,1,2) == 0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (find_Volume(2,2,2) == 8)\nassert     (find_Volume(1,2,2) == 2)\nassert     (find_Volume(3,2,2) == 2)\nassert     (find_Volume(1,1,1) == 1)\nassert     (find_Volume(0,1,1) == 0)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Volume(3,2,3) == 6\nassert     find_Volume(3,3,5) == 12\nassert     find_Volume(2,4,7) == 21\nassert     find_Volume(5,4,10) == 80\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ( find_Volume(3,4,5) == 6 )\nassert     ( find_Volume(4,3,5) == 6 )\nassert     ( find_Volume(4,5,3) == 6 )\nassert     ( find_Volume(5,3,4) == 6 )\nassert     ( find_Volume(5,4,3) == 6 )\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Volume(3,4,5) == 6\nassert     find_Volume(5,8,9) == 15\nassert     find_Volume(3,2,5) == 6\nassert     find_Volume(4,3,5) == 7.5\nassert     find_Volume(2,2,4) == 2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Volume(1,2,3) == 1.0\nassert     find_Volume(2,3,4) == 1.0\nassert     find_Volume(3,4,5) == 1.0\nassert     find_Volume(4,5,6) == 1.0\nassert     find_Volume(5,6,7) == 1.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Volume(3,5,7) == 35.0\nassert     find_Volume(3,3,7) == 9.0\nassert     find_Volume(4,5,7) == 28.0\nassert     find_Volume(1,1,7) == 2.0\nassert     find_Volume(1,2,7) == 6.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Volume(10,10,10) == 100\nassert     find_Volume(10,20,30) == 120\nassert     find_Volume(20,10,30) == 120\nassert     find_Volume(30,10,20) == 120\nassert     find_Volume(40,40,40) == 400\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Volume(1.0, 1.0, 1.0) == 1.0\nassert     find_Volume(2.0, 1.0, 1.0) == 1.0\nassert     find_Volume(2.0, 1.0, 2.0) == 1.0\nassert     find_Volume(2.0, 2.0, 1.0) == 1.0\nassert     find_Volume(2.0, 2.0, 2.0) == 2.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Volume(1,1,1) == 1\nassert     find_Volume(1,1,2) == 1.5\nassert     find_Volume(1,2,1) == 1.5\nassert     find_Volume(1,2,2) == 1\nassert     find_Volume(2,1,1) == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore('Is this_a_test?') == True\nassert     text_lowercase_underscore('is this_a_test?') == True\nassert     text_lowercase_underscore('This is a test') == False\nassert     text_lowercase_underscore('this is a test') == False\nassert     text_lowercase_underscore('This is test') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore(\"Hello_World\") == True\nassert     text_lowercase_underscore(\"My_Name_Is_John\") == True\nassert     text_lowercase_underscore(\"My_Name_Is_A_B_C\") == False\nassert     text_lowercase_underscore(\"My_Name_Is_a_b_c\") == False\nassert     text_lowercase_underscore(\"\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('word') == False\nassert     text_lowercase_underscore('Word') == True\nassert     text_lowercase_underscore('word_Word') == True\nassert     text_lowercase_underscore('word_wORd') == True\nassert     text_lowercase_underscore('wORd') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore(\"this is a test\") == True\nassert     text_lowercase_underscore(\"I am the king\") == False\nassert     text_lowercase_underscore(\"This is not a test\") == False\nassert     text_lowercase_underscore(\"this is not a test\") == False\nassert     text_lowercase_underscore(\"this is not a test\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('foo') == True, \"Failed case 1\"\nassert     text_lowercase_underscore('FOO') == False, \"Failed case 2\"\nassert     text_lowercase_underscore('bar_baz') == True, \"Failed case 3\"\nassert     text_lowercase_underscore('bar_bar') == True, \"Failed case 4\"\nassert     text_lowercase_underscore('a_b_c') == False, \"Failed case 5\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore(\"ABC\") == True\nassert     text_lowercase_underscore(\"aBC\") == True\nassert     text_lowercase_underscore(\"1BC\") == True\nassert     text_lowercase_underscore(\"ABC1\") == False\nassert     text_lowercase_underscore(\"ABC_1\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('abc') == True\nassert     text_lowercase_underscore('abc_def') == False\nassert     text_lowercase_underscore('abc_def_ghi') == True\nassert     text_lowercase_underscore('abc_123') == False\nassert     text_lowercase_underscore('_') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore(\"this is a good example\") == False\nassert     text_lowercase_underscore(\"abc_def_ghi\") == True\nassert     text_lowercase_underscore(\"Abc_def_ghi\") == False\nassert     text_lowercase_underscore(\"abc_def_ghi_\") == True\nassert     text_lowercase_underscore(\"_abc_def_ghi\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore(\"This is a string\") is True\nassert     text_lowercase_underscore(\"this is a string\") is True\nassert     text_lowercase_underscore(\"this is_a string\") is False\nassert     text_lowercase_underscore(\"this_is_a_string\") is False\nassert     text_lowercase_underscore(\"this is_a_string\") is False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore(\"Apple\") == True\nassert     text_lowercase_underscore(\"Panda\") == False\nassert     text_lowercase_underscore(\"grapes\") == False\nassert     text_lowercase_underscore(\"Panda_grapes\") == True\nassert     text_lowercase_underscore(\"\") == True\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_perimeter(2)    == 16\nassert     square_perimeter(3)    == 36\nassert     square_perimeter(4)    == 32\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(10) == 40\n\ndef color_conversion(col):\n    '''\n    Write a function that converts a color name to hexadecimal\n    (rgb2hex) or returns False if the input is not a valid color name.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_perimeter(3) == 26\nassert     square_perimeter(4) == 32\nassert     square_perimeter(5) == 36\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (square_perimeter(1) == 4)\nassert     (square_perimeter(2) == 8)\nassert     (square_perimeter(3) == 12)\nassert     (square_perimeter(4) == 16)\nassert     (square_perimeter(5) == 20)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_perimeter(3) == 9\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 25\nassert     square_perimeter(6) == 36\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\nassert     square_perimeter(6) == 24\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (square_perimeter(1) == 4)\nassert     (square_perimeter(2) == 8)\nassert     (square_perimeter(3) == 12)\nassert     (square_perimeter(4) == 16)\nassert     (square_perimeter(5) == 20)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_perimeter(2)     == 4\nassert     square_perimeter(1)     == 4\nassert     square_perimeter(0)     == 0\nassert     square_perimeter(42)     == 16\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef list_to_str(l):\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     str_to_list(\"aretheyhere\", \"yestheyarehere\") == \"aehr\"\nassert     str_to_list(\"ddddddd\", \"dddddddd\") == \"\"\nassert     str_to_list(\"peter\", \"ett\") == \"ert\"\nassert     str_to_list(\"whatsup\", \"wats\") == \"up\"\n\n\ndef check_string(string, char_list):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\n\ndef list_to_str(l):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     str_to_list(\"String\", \"String\") == [], \"Error1\"\nassert     str_to_list(\"str\", \"String\") == [], \"Error2\"\nassert     str_to_list(\"st\", \"String\") == [], \"Error3\"\nassert     str_to_list(\"String\", \"str\") == [], \"Error4\"\nassert     str_to_list(\"String\", \"st\") == [], \"Error5\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef change_str(str):\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     str_to_list(\"abcd\", \"ab\") == \"ad\"\nassert     str_to_list(\"abcd\", \"abc\") == \"\"\nassert     str_to_list(\"abcd\", \"abcd\") == \"abcd\"\nassert     str_to_list(\"abcd\", \"cd\") == \"bcd\"\n\ndef str_to_list(string, remove_string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     str_to_list(\"abcd\")    == ['a', 'b', 'c', 'd']\nassert     str_to_list(\"abcd\")    == ['a', 'b', 'c', 'd']\nassert     str_to_list(\"abcde\")    == ['a', 'b', 'c', 'e']\nassert     str_to_list(\"abcde\")    == ['a', 'b', 'c', 'e']\nassert     str_to_list(\"abcde\")    == ['a', 'b', 'c', 'e']\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nassert\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n\ndef list_to_str(string): \n    '''\n    Write a function to concatenate the string into the list.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     str_to_list('aabbcc') == 'abbcc'\nassert     str_to_list('abcddeefghi') == 'abcdefghi'\nassert     str_to_list('abcdefghi') == 'abcdefghi'\nassert     str_to_list('a') == 'a'\nassert     str_to_list('ab') == 'ab'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     test_duplicate([1,2,3,4,5,6]) == False\nassert     test_duplicate([1,2,3,4,5,5]) == True\nassert     test_duplicate([1,2,3,4,5]) == True\nassert     test_duplicate([1,2,3,4,5,6,6]) == True\n\n\ndef test_find_duplicate(arraynums):\n    '''\n    Write a function to find any duplicate number in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     test_duplicate([1,2,3,4,5]) == True\nassert     test_duplicate([1,1,1,3,3,4,3,2,4,2]) == True\nassert     test_duplicate([1,2,3,4,5]) == False\nassert     test_duplicate([]) == False\nassert     test_duplicate([1]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     test_duplicate([]) == False\nassert     test_duplicate([1, 2, 3]) == False\nassert     test_duplicate([1, 2, 3, 1]) == True\nassert     test_duplicate([1, 2, 3, 4]) == False\nassert     test_duplicate([1, 2, 4, 3, 2]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == False\nassert     test_duplicate([1, 2, 3, 4, 5]) == False\nassert     test_duplicate([1, 1, 1]) == True\nassert     test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == False"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     test_duplicate([]) == False\nassert     test_duplicate([1]) == False\nassert     test_duplicate([1, 2]) == False\nassert     test_duplicate([1, 2, 3]) == False\nassert     test_duplicate([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     test_duplicate([]) == False\nassert     test_duplicate([1, 2, 3]) == False\nassert     test_duplicate([1, 2, 3, 1]) == True\nassert     test_duplicate([1, 1, 2, 3, 4]) == True\nassert     test_duplicate([1, 2, 3, 4, 1]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     test_duplicate([1,2,3,4,5,5,6,7,8,9]) == True\nassert     test_duplicate([1,2,3,4,5,6,7,8,9]) == False\nassert     test_duplicate([1,1,1,2,3,4,5]) == True\nassert     test_duplicate([1,2,3,4,5]) == False\nassert     test_duplicate([1,2,3,4]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 1]) == True\nassert     test_duplicate([1, 2, 3, 4, 5]) == False\nassert     test_duplicate([]) == True\nassert     test_duplicate([1, 1, 1, 1]) == True\nassert     test_duplicate([1, 2, 3, 4, 5, 6]) == False"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_duplicate([1, 2, 3, 1]) == True\nassert     is_duplicate([1, 2, 3, 4]) == False\nassert     is_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]) == True\nassert     is_duplicate([]) == False\nassert     is_duplicate([1]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     test_duplicate([1,2,3,4,5,6,7,8,9]) == False\nassert     test_duplicate([1,1,2,3,4,5,6,7,8,9]) == True\nassert     test_duplicate([1,1,2,3,4,5,6,7,8,9,9]) == True"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_woodall(23) == False, \"is_woodall(23) == False\"\nassert     is_woodall(0) == True, \"is_woodall(0) == True\"\nassert     is_woodall(1) == False, \"is_woodall(1) == False\"\nassert     is_woodall(5) == False, \"is_woodall(5) == False\"\nassert     is_woodall(15) == True, \"is_woodall(15) == True\"\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_woodall(232)     == False\nassert     is_woodall(232323)    == False\nassert     is_woodall(23223232)    == True\nassert     is_woodall(232323232)    == False\nassert     is_woodall(23323232)    == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_woodall(1234) == True\nassert     is_woodall(1312) == False\nassert     is_woodall(999) == False\nassert     is_woodall(1234) == True\n\n\ndef get_user_input():\n    '''\n    Read a number from the user and check if it's a valid number or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_woodall(1122) is True\nassert     is_woodall(1122345) is False\nassert     is_woodall(112234567) is True\nassert     is_woodall(11223456789) is False\nassert     is_woodall(112234567899) is True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_woodall(26) == True, \"Test 1 failed\"\nassert     is_woodall(32) == False, \"Test 2 failed\"\nassert     is_woodall(28) == True, \"Test 3 failed\"\nassert     is_woodall(53) == False, \"Test 4 failed\"\nassert     is_woodall(53.1) == True, \"Test 5 failed\"\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_woodall(123321) == True\nassert     is_woodall(123123) == False\nassert     is_woodall(123125) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_woodall(46)\nassert     not is_woodall(46)\nassert     is_woodall(47)\nassert     not is_woodall(47)\nassert     is_woodall(45)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(2) == False\nassert     is_woodall(10) == False\nassert     is_woodall(11) == True\nassert     is_woodall(22) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_woodall(123456) == False, 'Wrong'\nassert     is_woodall(693061) == True, 'Wrong'\nassert     is_woodall(69) == False, 'Wrong'"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(2) == False\nassert     is_woodall(3) == True\nassert     is_woodall(4) == True\nassert     is_woodall(5) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rev(123) == True\nassert     rev(321) == False\n\ndef is_pal(n):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rev(10) == True\nassert     rev(12) == True\nassert     rev(14) == False\nassert     rev(15) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rev(123) == False\nassert     rev(11) == True\nassert     rev(12) == True\nassert     rev(34) == False\nassert     rev(8) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rev(123) == True\nassert     rev(321) == True\nassert     rev(12345) == False\nassert     rev(4321) == True\nassert     rev(1234567) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rev(5) == False\nassert     rev(4) == True\nassert     rev(534) == False\nassert     rev(639) == True\nassert     rev(7) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rev(5)         == False\nassert     rev(101)     == False\nassert     rev(1010)     == True\nassert     rev(10)         == False\nassert     rev(1)         == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rev(1234)\nassert     not rev(4567)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rev(54321) == False\nassert     rev(12345) == True\nassert     rev(71582) == True\nassert     rev(123456789) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rev(123) == False\nassert     rev(133) == True\nassert     rev(12345) == False\nassert     rev(1111) == True\nassert     rev(123456789) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rev(1) == False, 'incorrect:rev(1)'\nassert     rev(5) == True, 'incorrect:rev(5)'\nassert     rev(12) == False, 'incorrect:rev(12)'\nassert     rev(123) == True, 'incorrect:rev(123)'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Max_Num([0,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([0,2,3,4,5,6,7,8]) == 7\nassert     find_Max_Num([0,1,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([0,1,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Max_Num([\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"9\"\nassert     find_Max_Num([\"3\",\"6\",\"7\",\"8\",\"9\"]) == \"9\"\nassert     find_Max_Num([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"9\"\nassert     find_Max_Num([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"9\"\n\ndef sort_List(arr) :\n    '''\n    Write a python function to sort a list of numbers in ascending order using a helper function.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Max_Num(['2', '1', '3', '4', '5', '6']) == '6'\nassert     find_Max_Num(['1', '1', '1', '1', '1', '1']) == '1'\nassert     find_Max_Num(['1', '2', '1', '2', '1', '1', '1']) == '1'\nassert     find_Max_Num(['2', '1', '2', '1', '1', '2', '2']) == '2'\nassert     find_Max_Num(['2', '1', '2', '2', '1', '1', '2']) == '2'\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([5,4,3,2,1]) == 9\nassert     find_Max_Num([0]) == 0\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Max_Num([9,2,3,4,5,6]) == 9\nassert     find_Max_Num([1,2,3,4,5,6]) == 6\nassert     find_Max_Num([2,9,3,4,5,6]) == 9\nassert     find_Max_Num([3,9,5,4,2,6]) == 9\nassert     find_Max_Num([3,9,5,4,2,6,7]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Max_Num([1,2,3]) == 3\nassert     find_Max_Num([2,3,1]) == 3\nassert     find_Max_Num([1,9,3]) == 9\nassert     find_Max_Num([5,7,8]) == 8\nassert     find_Max_Num([9,8,7]) == 8\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Max_Num(['8', '9', '3', '4', '6', '2', '1', '5', '7']) == '934', \"incorrect\"\nassert     find_Max_Num(['8', '9', '8', '4', '6', '2', '1', '5', '7']) == '98', \"incorrect\"\nassert     find_Max_Num(['8', '9', '8', '4', '6', '2', '1', '5', '8', '7']) == '9876', \"incorrect\"\nassert     find_Max_Num(['8', '9', '8', '4', '6', '2', '1', '5', '7', '4', '7']) == '978', \"incorrect\"\nassert     find_Max_Num(['8', '9', '8', '4', '6', '2', '1', '5', '7', '4', '8', '7']) == '9876', \"incorrect\"\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Max_Num([5, 9, 1, 4, 3]) == 9\nassert     find_Max_Num([4, 6, 1, 2, 3]) == 6\nassert     find_Max_Num([4, 5, 6, 4]) == 6\nassert     find_Max_Num([4, 4, 5, 1, 6, 2, 3, 9, 4, 1, 4]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Max_Num([1,2,3,4,5,6]) == 6\nassert     find_Max_Num([1,2,3,4,5,6,7]) == 7\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) == 8\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,0]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Max_Num([1,2,3,4,5]) == 5\nassert     find_Max_Num([5,4,3,2,1]) == 5\nassert     find_Max_Num([4,3,2,1,5]) == 5\nassert     find_Max_Num([4,5,3,2,1]) == 5\nassert     find_Max_Num([4,5,3,6,1]) == 6\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     opposite_Signs(2,-2)     == True\nassert     opposite_Signs(2,2)     == False\nassert     opposite_Signs(0,0)     == True\nassert     opposite_Signs(-5,5)     == False\nassert     opposite_Signs(-5,-5)     == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     opposite_Signs(3,7) == True\nassert     opposite_Signs(-3,7) == True\nassert     opposite_Signs(3,-7) == False\nassert     opposite_Signs(-3,-7) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     opposite_Signs(11,22) == True\nassert     opposite_Signs(11,23) == False\nassert     opposite_Signs(11,99) == True\nassert     opposite_Signs(11,-22) == False\nassert     opposite_Signs(11,-23) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     opposite_Signs(5,-6) == True\nassert     opposite_Signs(-5,-6) == True\nassert     opposite_Signs(5,-6) == False\nassert     opposite_Signs(-5,-6) == False\nassert     opposite_Signs(-4,5) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     opposite_Signs(11,-1) == True\nassert     opposite_Signs(11,1) == False\nassert     opposite_Signs(-11,-1) == False\nassert     opposite_Signs(-11,1) == True\nassert     opposite_Signs(0,0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     opposite_Signs(12,8) == True\nassert     opposite_Signs(12,7) == False\nassert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(-1,-1) == False\n\ndef increment_string(x):\n    '''\n    Write a python function to check whether a string is a valid identifier or not.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     opposite_Signs(6,-6)     == True\nassert     opposite_Signs(6,6)     == False\nassert     opposite_Signs(0,-2)     == True\nassert     opposite_Signs(-1,1)     == True\nassert     opposite_Signs(0,-3)     == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(0,-1) == False\nassert     opposite_Signs(0,1) == True\nassert     opposite_Signs(-1,0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     opposite_Signs(1,2) == True\nassert     opposite_Signs(2,-2) == True\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(-1,1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     opposite_Signs(-10,-10) == True\nassert     opposite_Signs(-10,10) == False\nassert     opposite_Signs(10,-10) == False\nassert     opposite_Signs(10,10) == True\nassert     opposite_Signs(0,0) == True\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_octagonal(1)     == \"1st Octagonal Number\"\nassert     is_octagonal(2)     == \"2nd Octagonal Number\"\nassert     is_octagonal(3)     == \"3rd Octagonal Number\"\nassert     is_octagonal(4)     == \"4th Octagonal Number\"\nassert     is_octagonal(5)     == \"5th Octagonal Number\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_octagonal(1)     == 1\nassert     is_octagonal(2)     == 22\nassert     is_octagonal(3)     == 44\nassert     is_octagonal(4)     == 81\nassert     is_octagonal(5)     == 152\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 2\nassert     is_octagonal(3) == 5\nassert     is_octagonal(4) == 12\nassert     is_octagonal(5) == 22\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_octagonal(1) == '1', 'error'\nassert     is_octagonal(2) == '6', 'error'\nassert     is_octagonal(3) == '10', 'error'\nassert     is_octagonal(4) == '15', 'error'\nassert     is_octagonal(5) == '22', 'error'\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 1\nassert     is_octagonal(3) == 1\nassert     is_octagonal(4) == 2\nassert     is_octagonal(5) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_octagonal(3) == 3\nassert     is_octagonal(1) == 1\nassert     is_octagonal(9) == 25\nassert     is_octagonal(6) == 5\nassert     is_octagonal(10) == 55\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_octagonal(7) == 28\nassert is_octagonal(8) == 36\nassert is_octagonal(9) == 45\nassert is_octagonal(10) == 55\nassert is_octagonal(11) == 66\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_octagonal(0) == 0\nassert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 1\nassert     is_octagonal(3) == 3\nassert     is_octagonal(4) == 4\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 2\nassert     is_octagonal(3) == 3\nassert     is_octagonal(4) == 4\nassert     is_octagonal(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_octagonal(1) == 1, \"1st octagonal number should be 1\"\nassert     is_octagonal(2) == 4, \"2nd octagonal number should be 4\"\nassert     is_octagonal(3) == 7, \"3rd octagonal number should be 7\"\nassert     is_octagonal(4) == 10, \"4th octagonal number should be 10\"\nassert     is_octagonal(5) == 13, \"5th octagonal number should be 13\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (count_Substrings('abc') == 2)\nassert     (count_Substrings('aaa') == 6)\nassert     (count_Substrings('a') == 1)\n\ndef find_minimum_number(nums):\n    '''\n    Write a python function to find the minimum number from a given list of non negative integers.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"abcde\") == 4\nassert     count_Substrings(\"aaaaa\") == 0\nassert     count_Substrings(\"123456789\") == 1\nassert     count_Substrings(\"abcdefghijklmnopqrstuvwxyz\") == 35\nassert     count_Substrings(\"AbCbcd\") == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Substrings(\"caba\") == 3\nassert     count_Substrings(\"abcd\") == 0\nassert     count_Substrings(\"abc\") == 3\nassert     count_Substrings(\"aabb\") == 5\nassert     count_Substrings(\"abcdd\") == 5\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Substrings('a123') == 4\nassert     count_Substrings('abc') == 0\nassert     count_Substrings('a1234') == 4\nassert     count_Substrings('1234') == 4\nassert     count_Substrings('1234a') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Substrings(\"1234\") == 3\nassert     count_Substrings(\"12\") == 2\nassert     count_Substrings(\"a2b4c2\") == 2\nassert     count_Substrings(\"1\") == 1\n\ndef count_Permutation(s):\n    '''\n    Write a python function to count the number of permutation of a string.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Substrings('Aabcde') == 17\nassert     count_Substrings('AAABCDD') == 6\nassert     count_Substrings('A') == 1\nassert     count_Substrings('aaaaa') == 10\nassert     count_Substrings('ABCDCDDD') == 9\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"zaba\") == 3\nassert     count_Substrings(\"abcba\") == 5\nassert     count_Substrings(\"abcdefghhgf\") == 0\nassert     count_Substrings(\"abcdefghhgff\") == 10\nassert     count_Substrings(\"abcdefghhgfff\") == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Substrings('ABCD') == 5\nassert     count_Substrings('AC') == 2\nassert     count_Substrings('CABC') == 4\nassert     count_Substrings('AAA') == 3\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Substrings('abcd') == 0\nassert     count_Substrings('bcdf') == 1\nassert     count_Substrings('abcdf') == 3\nassert     count_Substrings('abcdfg') == 4\nassert     count_Substrings('abcdfgih') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Substrings(\"abcde\") == 2\nassert     count_Substrings(\"aaa\") == 6\nassert     count_Substrings(\"a\") == 1\nassert     count_Substrings(\"aab\") == 3\nassert     count_Substrings(\"aabb\") == 4\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_num([1, 3, 2, 6, 8, 4, 7]) == 1\nassert     smallest_num([1, 2, 3]) == 1\nassert     smallest_num([9, 1, 2, 3]) == 1\nassert     smallest_num([9, 1, 2, 3, 8]) == 1\nassert     smallest_num([9, 1, 2, 3, 8, 10]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([12,14,56,6]) == 6\nassert     smallest_num([1,3,5,7]) == 1\nassert     smallest_num([99,1,2,3]) == 1\nassert     smallest_num([99,1,2,3]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_num([3,4,5,1,2]) == 1\nassert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9,10]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9,10,11]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([3,2,1,4,5]) == 1\nassert     smallest_num([3,3,2,2,3,2,3,4]) == 2\nassert     smallest_num([1,1,1,1,1,1,1]) == 1\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_num([8, 15, 2, 7]) == 2\nassert     smallest_num([1, 2, 3, 4, 5]) == 1\nassert     smallest_num([1, 2, 3, 4, 5, 0]) == 0\nassert     smallest_num([1, 2, 3, 4, 5, 2]) == 2\nassert     smallest_num([-1, -2, -3, -4, -5]) == -5\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_num([1,3,2,4]) == 1\nassert     smallest_num([5,7,4,6]) == 4\nassert     smallest_num([5,4,3]) == 4\nassert     smallest_num([]) == None\nassert     smallest_num([1,4]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_num([5, 3, 2, 1]) == 1\nassert     smallest_num([5, 0, 2, 1]) == 0\nassert     smallest_num([-5, -3, -2, -1]) == -1\nassert     smallest_num([0]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_num([1,2,3,4]) == 1, 'test 1 failed'\nassert     smallest_num([1]) == 1, 'test 2 failed'\nassert     smallest_num([-1,-2,-3,-4]) == -4, 'test 3 failed'\nassert     smallest_num([]) == None, 'test 4 failed'\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_num([1,2,3,4,5])==1\nassert     smallest_num([100,101,1])==1\nassert     smallest_num([2,1,3,4,5])==1\nassert     smallest_num([-1,-2,-3,-4,-5])==-1\n\ndef lcm(xs):\n    '''\n    Write a python function to find LCM of two integers.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_num([10, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1\nassert     smallest_num([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10\nassert     smallest_num([1, 2, 3]) == 1\nassert     smallest_num([]) == None\n\n\ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_difference([(1, 2), (2, 3), (0, -1)]) == 2\nassert     max_difference([(-1, -2), (1, 2)]) == -1\nassert     max_difference([(1, -2), (2, 3), (0, -1)]) == -1\nassert     max_difference([(1, 2), (1, 2), (1, 3)]) == 1\nassert     max_difference([(1, 2), (1, 2), (1, 2), (1, 3)]) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_difference(tuple_list) ==     28\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8)]) == 2\nassert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14)]) == 6\nassert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)]) == 4\nassert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_difference([(1, 2), (3, 5), (5, 9)]) == 2\nassert     max_difference([(2, 10), (4, 2), (6, 7)]) == 1\nassert     max_difference([(0, 3), (5, 6), (7, 2)]) == 7\nassert     max_difference([(1, 1)]) == 0\nassert     max_difference([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_difference(  ([1, 2, 3, 4, 5],  [1, 4, 5, 2, 3],  [2, 3, 4, 5, 1],  [3, 4, 5, 1, 2],  [4, 5, 1, 2, 3],  [5, 1, 2, 3, 4] )    ) == 2\nassert     max_difference(  ([1, 2, 3],  [1, 4, 5],  [2, 3, 4],  [3, 4, 5]    )    ) == 3\nassert     max_difference(  ([1, 2, 3],  [1, 4, 5],  [2, 3, 4],  [4, 5, 6]    )    ) == 2\n\nprint('all tests passed')"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_difference([(1,2), (2,5), (3,4), (3,4)]) == (2, 3)\nassert     max_difference([(1,2), (2,5), (3,4), (2,5)]) == (2, 2)\nassert     max_difference([(1,2), (2,5), (3,4), (1,4)]) == (1, 1)\nassert     max_difference([(1,2), (2,5), (3,4), (2,4), (1,3), (2,3), (1,4)]) == (1, 1)\nassert     max_difference([(1,2), (2,5), (3,4), (2,5), (1,5), (2,4), (1,4)]) == (1, 1)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_difference((('a', 'b'), ('c', 'd'))) == 0\nassert     max_difference((('a', 'b'), ('c', 'd'), ('f', 'g'), ('h', 'i'))) == 0\nassert     max_difference((('a', 'b'), ('c', 'd'), ('f', 'g'), ('h', 'i'), ('j', 'k'), ('l','m'))) == 2\nassert     max_difference((('a', 'b'), ('c', 'd'), ('f', 'g'), ('h', 'i'), ('j', 'k'), ('l','m'), ('n', 'o'))) == 1\nassert     max_difference((('a', 'b'), ('c', 'd'), ('f', 'g'), ('h', 'i'), ('j', 'k'), ('l','m'), ('n', 'o'), ('p', 'q'), ('r','s'), ('t', 'u'), ('v', 'w'), ('x', 'y'), ('z', '0'))) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_difference([(1, 5), (3, 8), (8, 10), (1, 3)]) == 1\nassert     max_difference([(1, 5), (3, 8), (8, 10), (1, 3), (4, 4)]) == 1\nassert     max_difference([(1, 5), (3, 8), (8, 10), (1, 3), (4, 3)]) == 2\nassert     max_difference([(1, 5), (3, 8), (8, 10), (1, 3), (4, 5)]) == 2\nassert     max_difference([(1, 5), (3, 8), (8, 10), (1, 3), (4, 1)]) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_difference([\n                        (1, 3, -1),\n                        (0, 4, 2),\n                        (-1, 2, 4)\n                    ]) == 4\n\nassert     max_difference([\n                        (1, 2),\n                        (2, 4),\n                        (0, 6)\n                    ]) == 2\n\nassert     max_difference([\n                        (1, 2, 3),\n                        (0, 2, 4)\n                    ]) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_difference(['a', 'b', 'c', 'd', 'e', 'f']) == 3\nassert     max_difference(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 3\nassert     max_difference(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == 3\nassert     max_difference([]) == 0\nassert     max_difference(['a', 'b', 'c', 'd', 'e']) == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     subject_marks([(\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L4\", 92), (\"L5\", 93)]) == [(\"L4\", 92), (\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L5\", 93)]\nassert     subject_marks([(\"L5\", 93), (\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L4\", 92)]) == [(\"L4\", 92), (\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L5\", 93)]\nassert     subject_marks([(\"L5\", 93), (\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L4\", 92)]) == [(\"L4\", 92), (\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L5\", 93)]\nassert     subject_marks([(\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L4\", 92), (\"L5\", 93)]) == [(\"L4\", 92), (\"L1\", 89), (\"L2\", 90), (\"L3\", 91), (\"L5\", 93)]\nassert     subject_marks([(\"L1\", 90), (\"L2\", 91), (\"L3\", 92), (\"L4\", 93), (\"L5\", 94)]) == [(\"L4\", 93), (\"L1\", 90), (\"L2\", 91), (\"L3\", 92), (\"L5\", 94)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     subject_marks([('English', 'A'), ('Science', 'B'), ('Maths', 'C'), ('Social sciences', 'A'), ('Economics', 'C')]) == [('Maths', 'C'), ('Economics', 'C'), ('Social sciences', 'A'), ('English', 'A'), ('Science', 'B')]\nassert     subject_marks([('English', 'A'), ('Science', 'B'), ('Social sciences', 'B'), ('Maths', 'A'), ('Economics', 'C')]) == [('Economics', 'C'), ('Social sciences', 'B'), ('English', 'A'), ('Maths', 'A'), ('Science', 'B')]\nassert     subject_marks([('Social sciences', 'B'), ('English', 'A'), ('Science', 'C'), ('Maths', 'A'), ('Economics', 'C')]) == [('Economics', 'C'), ('Social sciences', 'B'), ('English', 'A'), ('Science', 'C'), ('Maths', 'A')]\nassert     subject_marks([('Social sciences', 'A'), ('English', 'A'), ('Science', 'C'), ('Maths', 'B'), ('Economics', 'C')]) == [('Economics', 'C'), ('English', 'A'), ('Social sciences', 'A'), ('Science', 'C'), ('Maths', 'B')]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     subject_marks([(1, 5), (3, 1), (4, 2), (5, 1)]) == [(1, 1), (3, 1), (5, 1), (4, 2)]\nassert     subject_marks([(1, 5), (1, 1), (3, 1), (4, 2), (5, 1)]) == [(1, 1), (1, 5), (3, 1), (5, 1), (4, 2)]\nassert     subject_marks([(1, 5), (3, 1), (4, 2), (5, 1)]) == [(1, 5), (3, 1), (4, 2), (5, 1)]\nassert     subject_marks([(1, 5), (1, 1), (1, 2), (5, 1)]) == [(1, 1), (1, 2), (5, 1), (1, 5)]\nassert     subject_marks([(1, 5), (3, 1), (4, 2), (5, 1)]) == [(1, 5), (3, 1), (4, 2), (5, 1)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     subject_marks([('sub1',50),('sub2',20),('sub3',30)]) == [('sub1',50),('sub2',20),('sub3',30)]\nassert     subject_marks([('sub1',90),('sub2',70),('sub3',10)]) == [('sub1',90),('sub3',10),('sub2',70)]\nassert     subject_marks([('sub1',50),('sub2',60),('sub3',30)]) == [('sub1',50),('sub2',60),('sub3',30)]\nassert     subject_marks([('sub1',20),('sub2',10),('sub3',90)]) == [('sub1',20),('sub2',10),('sub3',90)]"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    print \"Unsort list of tuples: \", sorted(unsort_list_of_tuples)\n    print \"Sort list of tuples: \", sorted(sort_list_of_tuples)\n    print \"Sort list of tuples by second element: \", sorted(sort_list_of_tuples, key=lambda x: x[1])\n    print \"Sort list of tuples by second element in reverse: \", sorted(sort_list_of_tuples, key=lambda x: x[1], reverse=True)\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     subject_marks([('CS101',90), ('CS102',92), ('CS103',91), ('CS104',93), ('CS105',97)]) == [('CS101',90), ('CS102',92), ('CS103',91), ('CS104',93), ('CS105',97)]\nassert     subject_marks([('CS101',90), ('CS102',92), ('CS103',91), ('CS104',93)]) == [('CS101',90), ('CS102',92), ('CS103',91), ('CS104',93)]\nassert     subject_marks([('CS101',90), ('CS102',92), ('CS103',91), ('CS104',94)]) == [('CS101',90), ('CS102',92), ('CS103',91), ('CS104',94)]\nassert     subject_marks([('CS101',90), ('CS102',92), ('CS103',91), ('CS104',95)]) == [('CS101',90), ('CS102',92), ('CS103',91), ('CS104',95)]\n\ndef class_average(grades):\n    '''\n    Write a function that takes a list of tuples as input and returns the average of each grade.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     subject_marks([('PY', 50), ('SQL', 40), ('PY', 30), ('HTML', 70)])     == [('PY', 30), ('SQL', 40), ('HTML', 70), ('PY', 50)], \"incorrect\"\nassert     subject_marks([('BENG', 80), ('SCIE', 50), ('MATH', 30), ('ENG', 90), ('MATH', 40)])     == [('ENG', 90), ('ENG', 40), ('BENG', 80), ('MATH', 40), ('SCIE', 50)], \"incorrect\"\nassert     subject_marks([('PY', 50), ('BENG', 80), ('SQL', 40), ('PY', 30), ('HTML', 70)])     == [('BENG', 80), ('PY', 30), ('SQL', 40), ('HTML', 70), ('PY', 50)], \"incorrect\"\nassert     subject_marks([('PY', 50), ('BENG', 80), ('SQL', 40), ('PY', 30), ('HTML', 70)])     == [('SQL', 40), ('PY', 30), ('HTML', 70), ('PY', 50), ('BENG', 80)], \"incorrect\"\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     subject_marks([('E',1),('E',2),('E',3),('E',4),('D',1),('D',2),('D',3),('D',4),('C',1),('C',2),('C',3),('C',4)]) == [('C',1),('C',2),('C',3),('C',4),('E',1),('E',2),('E',3),('E',4),('D',1),('D',2),('D',3),('D',4)], \"test 1 fails\"\nassert     subject_marks([('A',1),('B',2),('C',3),('C',4),('C',1),('C',2),('D',3),('D',4),('A',1),('A',2),('B',3),('C',4)]) == [('A',1),('A',2),('B',3),('C',1),('C',2),('C',3),('C',4),('D',1),('D',2),('D',3),('D',4)], \"test 2 fails\"\nassert     subject_marks([('A',1),('B',2),('C',3),('C',4),('C',1),('C',2),('D',3),('D',4),('A',1),('A',2),('B',3),('C',4)]) == [('A',1),('A',2),('B',3),('C',1),('C',2),('C',3),('C',4),('D',1),('D',2),('D',3),('D',4)], \"test 3 fails\"\nassert     subject_marks([('A',1),('B',2),('C',3),('C',4),('C',1),('C',2),('D',3),('D',4),('A',1),('A',2),('B',3),('C',4)]) == [('A',1),('A',2),('B',3),('C',1),('C',2),('C',3),('C',4),('D',1),('D',2),('D',3),('D',4)], \"test 4 fails\"\nassert     subject_marks([('A',1),('B',2),('C',3),('C',4),('C',1),('C',2),('D',3),('D',4),('A',1),('A',2),('B',3),('C',4)]) == [('A',1),('A',2),('B',3),('C',1),('C',2),('C',3),('C',4),('D',1),('D',2),('D',3),('D',4)], \"test 5 fails\"\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     subject_marks([(1,5),(2,4),(3,3),(4,2)]) == [(2,4),(4,2),(1,5),(3,3)], 'Failed'\nassert     subject_marks([(1,4),(1,2),(3,5),(4,3)]) == [(1,2),(1,4),(3,5),(4,3)], 'Failed'\nassert     subject_marks([(1,2),(4,3)]) == [(4,3),(1,2)], 'Failed'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [(6,4), (5,3), (7,2), (9,1), (8,0)] == subject_marks([(6,4), (5,3), (7,2), (9,1), (8,0)])\nassert     [(6,4), (7,2), (9,1), (8,0), (5,3)] == subject_marks([(6,4), (9,1), (8,0), (5,3), (7,2)])\nassert     [(6,4), (7,2), (9,1), (8,0), (5,3), (1,0)] == subject_marks([(6,4), (9,1), (8,0), (5,3), (1,0), (7,2)])\nassert     [(6,4), (7,2), (9,1), (8,0), (5,3), (1,0), (2,3)] == subject_marks([(6,4), (9,1), (8,0), (5,3), (1,0), (2,3), (7,2)])\nassert     [(6,4), (7,2), (9,1), (8,0), (5,3), (1,0), (2,3), (3,6)] == subject_marks([(6,4), (9,1), (8,0), (5,3), (1,0), (2,3), (3,6), (7,2)])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     recursive_list_sum([1, [2, [3, 4, [5, 6]]]]) == 21\nassert     recursive_list_sum([1, [2, [3, 4, [5, 6, 7]]]]) == 28\nassert     recursive_list_sum([1, [2, [3, [4, [5, [6, [7, 8]]]]]]]) == 30\nassert     recursive_list_sum([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == 32\n\ndef flatten_and_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1, [2, [3], 4], 5]) == 15\nassert recursive_list_sum([]) == 0\nassert recursive_list_sum([1, [2, [3], 4], [5, [6, [7]]], 8]) == 30\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([1, [2, [3, [4, [5, 6]]]]]) == 21\nassert     recursive_list_sum([1, [2, 3], 4, 5, 6]) == 21\nassert     recursive_list_sum([1, [2, 3], 4, 5, 6, [7, 8, 9]]) == 21\nassert     recursive_list_sum([1, [2, [3, [4, [5, 6, [7, 8, 9]]]]]]) == 21\n\nrecursive_list_sum = lambda l: sum(l) if type(l) is list else l\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([[1, 2], [3, 4], [5]]) == 15\nassert recursive_list_sum([]) == 0\nassert recursive_list_sum([[1, [2, 3]], 4, [5, [6, 7]]]) == 21\nassert recursive_list_sum([[1, 2], [3, 4], [5, 6]]) == 19\nassert recursive_list_sum([[1, [2, 3]], 4, [5, [6, 7], 8], [9, 10]]) == 19\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([1, [2, 3]]) == 5, 'failed'\nassert     recursive_list_sum([[1, [2, 3]], 4]) == 10, 'failed'\nassert     recursive_list_sum([[[1], 2], 3]) == 7, 'failed'\nassert     recursive_list_sum([[1, [2, [3, 4]]], 5]) == 15, 'failed'\nassert     recursive_list_sum([1, [4, [5, [6, 7]]], 8]) == 26, 'failed'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([1, [2, 3]]) == 6\nassert     recursive_list_sum([1, [2, [3, 4]]]) == 10\nassert     recursive_list_sum([1, [2, [3, 4]], 5, [6, [7, 8]]]) == 22\nassert     recursive_list_sum([]) == 0\n\nprint'recursive_list_sum'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef recursive_list_sum_fast(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1, [2, [3], 4], 5]) == 15\nassert     recursive_list_sum([[1, [1, 1]], 2, 3, 4, 5]) == 15\nassert     recursive_list_sum([[[2], 2], 2, 3, 4, 5]) == 15\nassert     recursive_list_sum([2, [2], 2, 3, 4, 5]) == 15\nassert     recursive_list_sum([[2], 2, [[2], 2], 2, 3, 4, 5]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([1, 2, [3, 4, [5, 6], 7], 8]) == 21\nassert     recursive_list_sum([[1, 2, [3, 4, [5, 6], 7], 8], [9, 10]]) == 26\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1, [2, [3, 4, [5, 6], 7], 8], 9, [10]]) == 21\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1, [1, 2, [1, 2, 3]]]) == 4, \"Failed 1\"\nassert     recursive_list_sum([1, [2, [[3, 4], [5, 6]]]]) == 21, \"Failed 2\"\nassert     recursive_list_sum([[[1, 2], 3], 4]) == 10, \"Failed 3\"\nassert     recursive_list_sum([[1], 2, [3]]) == 6, \"Failed 4\"\nassert     recursive_list_sum([1, 2, [3], [4, [5, 6]], 7]) == 22, \"Failed 5\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pos_count([]) == 0\nassert     pos_count([0, 1, -1, 0]) == 1\nassert     pos_count([0, 1, -1, 0, 1]) == 2\nassert     pos_count([0, 1, -1, 0, 1, 0]) == 2\nassert     pos_count([0, 1, -1, 0, 1, 0, 1]) == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pos_count([]) == 0\nassert     pos_count([-1,2,-3,4,5]) == 5\nassert     pos_count([-1,-2,-3,-4,-5]) == 0\nassert     pos_count([-1,-2,-3,4,5]) == 5\nassert     pos_count([0,-1,-2,-3,-4,-5]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pos_count([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     pos_count([1, -2, 3, 4, -5, 6, 7, 8, 9, 10]) == 9\nassert     pos_count([1, -2, 3, -4, 5, -6, 7, 8, 9, 10]) == 8\nassert     pos_count([]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == 5\nassert pos_count([1, 2, 3, 4, 5, 6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == 5\nassert pos_count([1, 2, 3, 4, 5, 6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, 0]) == 5\nassert pos_count([1, 2, 3, 4, 5, 6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, 0, -20]) == 5\nassert pos_count([1, 2, 3, 4, 5, 6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, 0, -20, -21]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pos_count([1,2,3,4,5]) == 5\nassert     pos_count([1,2,3,-4,5]) == 5\nassert     pos_count([]) == 0\nassert     pos_count([1,-2,3,-4,5]) == 0\nassert     pos_count([1,-2,3,-4,5,6]) == 6\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pos_count([1,3,-5,-2]) == 1\nassert     pos_count([3,4,-1,2]) == 2\nassert     pos_count([3,4,-1,2,-3]) == 2\nassert     pos_count([-3,-4,-1,2,-3]) == 2\nassert     pos_count([1,4,-3,-2]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pos_count([-1,2,3,4,5,6,7]) == 7\nassert     pos_count([1,2,3,4,5,6,7]) == 7\nassert     pos_count([-1,-2,3,4,5,6,7]) == 7\nassert     pos_count([-1,2,-3,4,-5,6,-7]) == 7\nassert     pos_count([1,2,-3,4,-5,6,-7]) == 7\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pos_count([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     pos_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 10\nassert     pos_count([1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 9\nassert     pos_count([]) == 0\nassert     pos_count([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pos_count([1,2,-3,4,5,6,7,-8,9]) == 7\nassert     pos_count([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == 9\nassert     pos_count([0,0,0,0,0,0]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         pos_count([1,2,3,4,5,6,7,8,9,-10,-9,3,2,1]) == 5\nassert         pos_count([1,2,3,4,5,-5,-7,-8,-9]) == 5\nassert         pos_count([]) == 0\nassert         pos_count([5,5,5,5,5]) == 5\nassert         pos_count([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bell_number(10) == 1\nassert bell_number(10) == 1\nassert bell_number(5) == 2\nassert bell_number(15) == 3\nassert bell_number(20) == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 2\nassert     bell_number(4) == 3\nassert     bell_number(5) == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bell_number(3) == 1\nassert     bell_number(4) == 2\nassert     bell_number(5) == 5\nassert     bell_number(6) == 13\nassert     bell_number(7) == 42\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bell_number(3) == 1\nassert     bell_number(5) == 3\nassert     bell_number(10) == 5\nassert     bell_number(25) == 12\n\n\n'''\n5.2.6 Given a string, find the longest palindromic substring.\n'''\ndef longest_palindromic_substring(s):\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\nassert     bell_number(5) == 52\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(5) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Monotonic([3,3,2,1,3,3]) == True\nassert     is_Monotonic([3,2,1]) == True\nassert     is_Monotonic([3,2,4]) == False\nassert     is_Monotonic([1,2,3]) == True\nassert     is_Monotonic([1,2,1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Monotonic([-1,-2,-3,-4,-5,-6,-7]) == True\nassert     is_Monotonic([-3,-3,-3,-3]) == False\nassert     is_Monotonic([1,2,3,3,2,1]) == True\nassert     is_Monotonic([5,6,7,8,9]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1,2,2,3])\nassert     is_Monotonic([6,5,4,4])\nassert     is_Monotonic([1,1,1,3,3,4,4,8,8])\nassert     is_Monotonic([1,1,1,1])\nassert     is_Monotonic([1,1,1,1,2])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Monotonic([-1, 2, 3, 4, 5, 10])\nassert     is_Monotonic([1, 2, 2, 2])\nassert     not is_Monotonic([1, 2, 3])\nassert     not is_Monotonic([1, 2, 2, 2, 2, 2, 1])\nassert     is_Monotonic([1, 2, 2, 3])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Monotonic([-1, -5, -10, -1100, -1100, -1110])\nassert     is_Monotonic([5, 10, 15, 30, 40, 50])\nassert     is_Monotonic([1, 1, 1, 1, 1])\nassert     is_Monotonic([-1, -1, -1, -1, -1])\nassert     is_Monotonic([1, 1, 1, 1, 1, 1, 1])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Monotonic([-5,-4,-3,-2,-1,0,1,2,3,4,5]) == True\nassert     is_Monotonic([0,1,2,3,4,5,6,7,8,9,10]) == True\nassert     is_Monotonic([-1,-2,-3,-4,-5]) == True\nassert     is_Monotonic([5,4,3,2,1,0]) == True\nassert     is_Monotonic([]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Monotonic([0]) == True\nassert     is_Monotonic([0,1]) == True\nassert     is_Monotonic([0,1,2]) == True\nassert     is_Monotonic([1,2,3]) == False\nassert     is_Monotonic([1,2,3,2,3]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 0]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Monotonic(A) == True\nassert     is_Monotonic([3,3,3,2,1]) == True\nassert     is_Monotonic([3,2,1]) == False\nassert     is_Monotonic([1,1,1,1]) == False\n\ndef largest_diff(A): \n    '''\n    Write a python function to find the largest difference between two numbers in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Monotonic([1,2,2,3,3,3,3,4,4,5]) == True\nassert is_Monotonic([1,2,2,3,3,3,3,4,4,5]) == False\nassert is_Monotonic([1,1,1,1,1]) == True\nassert is_Monotonic([1,3,2]) == True\nassert is_Monotonic([1,2,4,5]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sublist(['e', 'i','m', 'e', 'k','s', 'i'], 'k') == True\nassert     is_sublist(['e', 'i','m', 'e', 'k','s', 'i'], 'j') == False\nassert     is_sublist(['e', 'i','m', 'e', 'k','s', 'i'], 'k') == True\nassert     is_sublist(['e', 'i','m', 'e', 'k','s', 'i'], 'a') == False\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 'd') == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 4]) == True\nassert     is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 5]) == True\nassert     is_sublist([1, 2, 3, 4, 5, 6], [2, 3]) == False\nassert     is_sublist([1, 2, 3, 4, 5, 6], []) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sublist(['a','b','c'], ['a','b'])\nassert     is_sublist(['a','b','c'], ['a'])\nassert     is_sublist(['a','b','c'], ['c'])\nassert     not is_sublist(['a','b','c'], ['d'])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_sublist([1,2,3,4], [2,3,4]) == True\nassert     is_sublist([1,2,3,4], [2,3]) == False\nassert     is_sublist([1,2,3,4], [3,4]) == True\nassert     is_sublist([1,2,3,4], [1,2,3,4]) == True\nassert     is_sublist([1,2,3,4], [2,3,4]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2, 3])\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3])\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4])\nassert     not is_sublist([1, 2, 3], [1, 2])\nassert     not is_sublist([1, 2, 3], [])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sublist([1,2,3,4,5], [1,2]) == True\nassert     is_sublist([1,2,3,4,5], [6,7]) == False\nassert     is_sublist([1,2,3,4,5], [1,2,3]) == True\nassert     is_sublist([1,2,3,4,5], [1]) == True\nassert     is_sublist([1,2,3,4,5], []) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_sublist([1,2,3,4,5], [2,3]) == True\nassert is_sublist([1,2,3,4,5], [4,5]) == True\nassert is_sublist([1,2,3,4,5], [6]) == False\nassert is_sublist([1,2,3,4,5], []) == True\nassert is_sublist([], []) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3])\nassert     is_sublist([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])\nassert     is_sublist([1, 2, 3, 4, 5], [2, 3, 4])\nassert     is_sublist([1, 2, 3, 4, 5], [2, 3, 1, 4])\nassert     is_sublist([1, 2, 3, 4, 5], [2, 3, 1, 4, 5])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2])\nassert     is_sublist([1, 2], [1, 2, 3])\nassert     is_sublist([1, 2, 3], [1, 2])\nassert     not is_sublist([1, 2], [1, 2, 3])\nassert     not is_sublist([1, 2, 3], [1, 2])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sublist([1, 2, 3, 4], [1, 2, 3])\nassert     not is_sublist([1, 2, 3, 4], [1, 2])\nassert     not is_sublist([1, 2, 3, 4], [3, 4])\nassert     not is_sublist([1, 2, 3, 4], [1, 4])\nassert     not is_sublist([1, 2, 3, 4], [2, 4])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_equal_tuple((\"s\", \"s\", \"s\", \"s\", \"s\")) == False\nassert     find_equal_tuple((\"s\", \"s\", \"s\", \"s\", \"s\", \"s\")) == True\nassert     find_equal_tuple((\"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\")) == True\nassert     find_equal_tuple((\"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\")) == True\nassert     find_equal_tuple((\"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\")) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_equal_tuple(()) == True\nassert     find_equal_tuple((1,)) == True\nassert     find_equal_tuple((1,2)) == False\nassert     find_equal_tuple((1,2,3)) == False\nassert     find_equal_tuple((1,2,3,4)) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_equal_tuple((1, 2, 3, 4, 5, 6)) == True\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7)) == False\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7, 8)) == True\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == False\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_equal_tuple((1,2,3,4,5,6)) == True\nassert     find_equal_tuple((1,2,3,4)) == False\nassert     find_equal_tuple((1,2,3)) == False\nassert     find_equal_tuple((1,2,3,4,5,6,7)) == False\nassert     find_equal_tuple((1,2,3,4,5,6,7,8,9,10,11,12)) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(1,2),(2,3)]) == True\nassert     find_equal_tuple([(1,2,3),(2,3,4)]) == False\nassert     find_equal_tuple([(1,2),(2,3,4,5)]) == False\nassert     find_equal_tuple([(1,2,3),(2,3,4,5,6)]) == True\nassert     find_equal_tuple([(1,2,3,4,5,6),(2,3,4,5,6,7)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1,2,3),(3,4,5),(5,6)]) == True\nassert     find_equal_tuple([(1,2),(3,4,5),(5,6)]) == False\nassert     find_equal_tuple([(1,2,3),(1,2,5),(1,6)]) == True\nassert     find_equal_tuple([(1,2,3,4),(1,2,5,6),(1,6)]) == True\n\ndef find_equal_tuple_2(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(item) for item in Input])) <= 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_equal_tuple(((1,2,3), (4,5), (7,8,9), (5,6,7))) is True\nassert     find_equal_tuple(((1,2), (3,4), (5,6), (7,8,9))) is False\nassert     find_equal_tuple(((1,2,3), (4,5,6))) is False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_equal_tuple(    (1, 2, 3)    )     == True\nassert     find_equal_tuple(    (1, 2, 3, 4)    )     == False\nassert     find_equal_tuple(    (1, 2, 3, 4, 5)    )     == False\nassert     find_equal_tuple(    (1, 2, 3, 4, 5, 6)    )     == False\nassert     find_equal_tuple(    (1, 2, 3, 4, 5, 6, 7)    )     == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_equal_tuple(((1,2,3),(4,5,6),(7,8,9))) == True\nassert     find_equal_tuple(((1,2,3),(4,5,6),(7,8,9),(10,11,12))) == False\nassert     find_equal_tuple(((1,2,3,4),(5,6,7,8,9,10),(11,12,13,14,15,16))) == False\nassert     find_equal_tuple(((1,2,3,4,5),(6,7,8,9,10,11),(12,13,14,15,16,17))) == True\nassert     find_equal_tuple(((1,2,3,4,5),(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21),(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25),(6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,82"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_equal_tuple(         (1, 2, 3),         (1, 2),         (1, 2, 3, 4, 5), ) == True\nassert     find_equal_tuple(         (1, 2),         (1, 2, 3, 4, 5), ) == False\nassert     find_equal_tuple(         (1, 2, 3),         (1, 2, 3, 4, 5), ) == False\nassert     find_equal_tuple(         (1, 2, 3, 4, 5),     (1, 2, 3, 4, 5), ) == True\nassert     find_equal_tuple(         (),         (),         (), ) == True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     comb_sort([0,2,3,8,1,4,2,6,7,3,5,8]) == [0,1,2,3,4,5,6,7,8,8,3,2]\nassert     comb_sort([0,2,3,8,1,4,2,6,7,3,5,8]) == [0,1,2,3,4,5,6,7,8,8,3,2]\nassert     comb_sort([0,2,3,8,1,4,2,6,7,3,5,8]) == [0,1,2,3,4,5,6,7,8,8,3,2]\nassert     comb_sort([]) == []\nassert     comb_sort([2]) == [2]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     comb_sort([1, 4, 2, 3, 5]) == [1, 2, 3, 4, 5]\nassert     comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     comb_sort([5, 1, 4, 3, 2]) == [1, 2, 3, 4, 5]\nassert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         [2, 5, 4, 1, 7, 3] == comb_sort([2, 5, 4, 1, 7, 3])\nassert         [1, 2, 3, 4, 5, 7] == comb_sort([1, 2, 3, 4, 5, 7])\nassert         [9, 8, 7, 6, 5, 4, 3, 2, 1] == comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert         [5, 4, 3, 2, 1] == comb_sort([5, 4, 3, 2, 1])\nassert         [3, 1, 2, 4, 5] == comb_sort([3, 1, 2, 4, 5])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     comb_sort([5, 2, 4, 6, 1, 3])    == [1, 2, 3, 4, 5, 6]\nassert     comb_sort([5, 2, 4, 6, 1, 3, 8])    == [1, 2, 3, 4, 5, 6, 8]\nassert     comb_sort([5, 2, 4, 6, 1, 3, 8, 9])    == [1, 2, 3, 4, 5, 6, 8, 9]\nassert     comb_sort([5, 2, 4, 6, 1, 3, 8, 9, 10])    == [1, 2, 3, 4, 5, 6, 8, 9, 10]\nassert     comb_sort([1, 2, 3, 4, 5, 6, 7])    == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     comb_sort([1,5,3,2,4]) == [1,2,3,4,5]\nassert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([1,1,1]) == [1,1,1]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     comb_sort(    [17, 4, 22, 32, 11, 26, 13, 0, 12, 11, 10, 7, 6, 13, 3, 21, 14, 5, 1, 3, 19, 26, 2, 1, 1, 7, 1, 17, 8, 22, 22, 19, 20, 0, 19, 2, 3, 5, 16, 4, 4, 16, 3, 21, 10, 25, 22, 3, 14, 18, 7, 9, 12, 15, 2, 22, 11, 7, 6, 19, 1, 3, 21, 10, 15, 19, 1, 8, 21, 13, 1, 2, 19, 22, 17, 19, 1, 22, 10, 21, 1, 22, 16, 22, 21, 22, 22, 19, 22, 11, 19, 14, 21, 21, 1, 19, 14, 1, 22, 22, 19, 15, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 2"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [5, 4, 3, 2, 1] == comb_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == comb_sort([1, 2, 3, 4, 5])\nassert     [3, 4, 1, 2] == comb_sort([3, 4, 1, 2])\nassert     [1, 1, 1, 1] == comb_sort([1, 1, 1, 1])\n\ndef quicksort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     comb_sort([4,3,2,1]) == [1,2,3,4]\nassert     comb_sort([4,3,2,1,2]) == [1,2,2,3,4]\nassert     comb_sort([1,2,3,4]) == [1,2,3,4]\nassert     comb_sort([4,3,2,1]) == [1,2,3,4]\nassert     comb_sort([3,4,2,1]) == [1,2,3,4]\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_dif_Square():\n    assert dif_Square(14) == True\n    assert dif_Square(15) == True\n    assert dif_Square(16) == True\n    "
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dif_Square(18)     == True\nassert     dif_Square(12)     == True\nassert     dif_Square(13)     == True\nassert     dif_Square(17)     == True\nassert     dif_Square(21)     == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dif_Square(2)    ==    False\nassert     dif_Square(3)    ==    True\nassert     dif_Square(5)    ==    False\nassert     dif_Square(16)    ==    True\nassert     dif_Square(17)    ==    True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     dif_Square(12) == True\nassert     dif_Square(13) == False\nassert     dif_Square(24) == True\nassert     dif_Square(25) == False\nassert     dif_Square(1) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dif_Square(9) == True     \nassert     dif_Square(91) == True     \nassert     dif_Square(54) == False     \nassert     dif_Square(15) == False     \nassert     dif_Square(20) == True     \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dif_Square(0)    ==    True\nassert     dif_Square(1)    ==    True\nassert     dif_Square(2)    ==    True\nassert     dif_Square(3)    ==    True\nassert     dif_Square(4)    ==    True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (dif_Square(4) == True)\nassert     (dif_Square(100) == True)\nassert     (dif_Square(16) == True)\nassert     (dif_Square(9) == False)\nassert     (dif_Square(0) == False)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dif_Square(20) == True\nassert     dif_Square(17) == False\nassert     dif_Square(15) == True\nassert     dif_Square(12) == False\n\ndef dif_Squares(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # n = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n    # i = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n    i = 1\n    while i <= n :\n        if i**2 - i <= n < i**2 :\n            return True\n        i += 1\n    return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dif_Square(5) == False\nassert     dif_Square(18) == False\nassert     dif_Square(10) == True\nassert     dif_Square(25) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"], [\"b\", \"a\", \"b\", \"b\", \"a\"]) == True\nassert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"], [\"a\", \"b\", \"a\", \"a\", \"b\"]) == False\nassert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"], [\"b\", \"b\", \"b\", \"a\", \"b\"]) == True\nassert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"], [\"b\", \"b\", \"b\", \"b\", \"a\"]) == False\nassert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"], [\"b\", \"a\", \"b\", \"b\", \"a\"]) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_samepatterns(['red', 'yellow', 'blue','red', 'green', 'blue'], ['*', '*', '*', '*', '*', '*']) == True, 'Failed test 1'\nassert     is_samepatterns(['red', 'yellow', 'blue','red', 'green', 'blue','red'], ['*', '*', '*', '*', '*', '*', '*']) == False, 'Failed test 2'\nassert     is_samepatterns(['blue','red', 'yellow', 'blue','red'], ['*', '*', '*', '*', '*']) == False, 'Failed test 3'\nassert     is_samepatterns(['yellow', 'blue'], ['*', '*']) == False, 'Failed test 4'"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_samepatterns(\n                        [\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,0,1,1,0,1,0],\n                            [0,0,0,0,1,1,1,0],\n                        ],\n                        [\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,0,1,1,0,1,0],\n                            [0,0,0,0,1,1,1,0],\n                        ]) == True, \"Failed Test 1\"\nassert     is_samepatterns(\n                        [\n                            [1,0,1,0,1,0,1,0],\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,1,0,1,0,1,0],\n                        ],\n                        [\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,1,0,1,0,1,0],\n                            [0,0,0,1,0,1,0,1],\n                        ]) == False, \"Failed Test 2\"\nassert     is_samepatterns(\n                        [\n                            [1,1,0,0,1,1,1,0],\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,1,0,1,0,1,0],\n                        ],\n                        [\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,1,0,1,0,1,0],\n                            [0,0,0,1,0,1,0,1],\n                        ]) == False, \"Failed Test 3\"\nassert     is_samepatterns(\n                        [\n                            [1,0,0,1,0,1,0,1],\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,1,0,1,0,1,0],\n                        ],\n                        [\n                            [0,1,0,1,0,1,0,1],\n                            [0,0,1,0,1,0,1,0],\n                            [0,0,0,1,0,1,0,1],\n                        ]) == True, \"Failed Test 4\"\nassert     is_samepatterns(\n                        [\n                            [0,1,1,0,1,0,1,0],\n                            [1,0,0,1,0,1,0,1],\n                            [0,1,0,0,1,0,1,0],\n                        ],\n                        [\n                            [0,1,1,0,1,0,1,0],\n                            [1,0,0,1,0,1,0,1],\n                            [0,1,0,0,1,0,1,0],\n                        ]) == False, \"Failed Test 5\"\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_samepatterns([\"red\", \"blue\", \"green\"], \n                [[\"red\", \"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"green\", \"blue\"]])\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], \n                [[\"red\", \"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"red\", \"green\"], [\"green\", \"blue\"]])\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], \n                [[\"red\", \"blue\"], [\"blue\", \"red\"], [\"red\", \"green\"], [\"blue\", \"green\"], [\"green\", \"red\"]])\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], \n                [[\"red\", \"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"green\", \"blue\"]])\nassert     is_samepatterns([\"red\", \"blue\", \"green\"], \n                [[\"red\", \"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"]])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['r', 'b', 'b', 'g', 'r', 'b', 'g'], \n                         ['r', 'r', 'b', 'g']) == True,'same patterns'\nassert     is_samepatterns(['r', 'b', 'b', 'g', 'r', 'b', 'g'], \n                         ['r', 'r', 'r', 'r']) == False, 'all same'\nassert     is_samepatterns(['r', 'b', 'b', 'g', 'r', 'b', 'g'], \n                         ['b', 'b', 'b', 'b']) == True,'some same'\nassert     is_samepatterns(['r', 'b', 'b', 'g', 'r', 'b', 'g'], \n                         ['r', 'r', 'b', 'b']) == True, 'patterns'\nassert     is_samepatterns(['r', 'b', 'b', 'g', 'r', 'b', 'g'], \n                         ['r', 'r', 'r', 'r']) == True, 'patterns'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_samepatterns(['1', '2', '3', '4', '5'], ['12345', '1234', '1324', '12', '1'])\nassert     not is_samepatterns(['1', '2', '3', '4', '5'], ['12345', '1234', '1324', '123', '1'])\nassert     is_samepatterns(['1', '2', '3', '4', '5'], ['123', '1234', '1324', '123', '1'])\nassert     not is_samepatterns(['1', '2', '3', '4', '5'], ['123', '1234', '1324', '123', '12345'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_samepatterns(['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']) == True\nassert     is_samepatterns(['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']) == False\nassert     is_samepatterns(['*', '*', '*', '*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*']) == True\nassert     is_samepatterns(['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']) == True\nassert     is_samepatterns(['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_samepatterns([\"blue\", \"red\", \"red\", \"blue\"],\n                        [\"red\", \"red\", \"blue\"]) == True\nassert     is_samepatterns([\"red\", \"red\", \"blue\"],\n                        [\"red\", \"red\", \"blue\"]) == True\nassert     is_samepatterns([\"red\", \"red\", \"blue\"],\n                        [\"red\", \"blue\"]) == False\nassert     is_samepatterns([\"red\", \"red\", \"blue\"],\n                        [\"blue\"]) == False\nassert     is_samepatterns([\"red\", \"red\", \"blue\"],\n                        [\"red\", \"red\", \"blue\"]) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_samepatterns([1,2,3],    [2,1,3]) == False\nassert     is_samepatterns([1,2,3],    [3,1,2]) == True\nassert     is_samepatterns([1,2,3,4,5],    [2,1,3,5,4]) == True\nassert     is_samepatterns([1,2,3,4,5],    [3,1,2,4,5]) == False\n\n\ndef is_samepatterns_2(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_idx = 0\n    pattern_idx = 0\n    # go through the pattern array\n    while color_idx < len(colors):\n        # when we reach a pattern\n        if pattern_idx >= len(patterns):\n            return False\n        # when we have a match\n        if patterns[pattern_idx] == colors[color_idx]:\n            color_idx += 1\n            pattern_idx += 1\n        # if not a match\n        else:\n            if color_idx == 0:\n                return False\n            else:\n                color_idx -= 1\n                # go back to the beginning of the pattern\n                while pattern_idx < len(patterns) - 1 and patterns[pattern_idx]!= patterns[pattern_idx + 1]:\n                    color_idx = 0\n                    pattern_idx += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_samepatterns(['blue','red', 'green', 'blue'], \n    ['blue','red', 'green', 'blue']) == True\nassert     is_samepatterns(['blue','red', 'green', 'blue', 'blue'], \n    ['blue','red', 'green', 'blue']) == False\nassert     is_samepatterns(['blue','red', 'green', 'blue', 'blue', 'blue'], \n    ['blue','red', 'green', 'blue']) == True\nassert     is_samepatterns(['blue', 'blue'], ['blue', 'blue']) == True\nassert     is_samepatterns(['blue', 'blue', 'blue'], ['blue', 'blue', 'blue']) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)], 5) == [(3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)], 7) == [(1, 2), (3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)], 4) == [(2, 3), (4, 5), (6, 7)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)], 3) == [(1, 2), (3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)], 2) == [(2, 3), (4, 5), (6, 7)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_tuples([(1,2,3), (7,8,9), (10, 11, 12)], 3) == [(7, 8, 9)]\nassert     find_tuples([(1,2,3), (7,8,9), (10, 11, 12)], 1) == [(1, 2, 3), (10, 11, 12)]\nassert     find_tuples([(1,2,3), (7,8,9), (10, 11, 12)], 6) == [(1, 2, 3), (7, 8, 9), (10, 11, 12)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_tuples([(2, 4), (1, 3)], 2) == [(1, 3), (2, 4)]\nassert     find_tuples([(2, 4), (1, 3)], 3) == [(2, 4), (3, 3)]\nassert     find_tuples([(2, 4), (1, 3), (1, 4)], 3) == [(2, 4), (1, 4)]\nassert     find_tuples([(2, 4), (1, 3), (1, 4)], 4) == [(2, 4)]\nassert     find_tuples([(2, 4), (1, 3), (1, 4)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_tuples([(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5)], 2) == [((1, 3), (1, 3))]\nassert     find_tuples([(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5)], 3) == [(1, 2), (1, 3)]\nassert     find_tuples([(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5)], 4) == [(1, 2), (1, 3)]\nassert     find_tuples([(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5)], 5) == [(1, 2), (1, 3)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_tuples([(1, 2, 3), (4, 5, 6)], 3) == [(3, 6, 9)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6)], 7) == [(7, 14, 21)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6)], 0) == [(1, 2, 3), (4, 5, 6)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2, 3), (4, 5, 6)]\nassert     find_tuples([(1, 2, 3), (4, 5, 6)], 2) == [(1, 4, 5), (2, 4, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_tuples([(1,2,3),(4,5,6)], 1) == [(1,2,3)]\nassert     find_tuples([(1,2,3),(4,5,6)], 2) == [(4,5,6)]\nassert     find_tuples([(1,2,3),(4,5,6)], 3) == [(1,2,3), (4,5,6)]\nassert     find_tuples([(1,2,3),(4,5,6)], 4) == [(1,2,3), (4,5,6)]\nassert     find_tuples([(1,2,3),(4,5,6)], 5) == [(1,2,3), (4,5,6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_tuples([(1, 2, 3), (5, 6, 7), (8, 9, 10)], 3) == [(1, 2, 3)]\nassert     find_tuples([(1, 2, 3), (5, 6, 7), (8, 9, 10)], 4) == [(5, 6, 7), (8, 9, 10)]\nassert     find_tuples([(1, 2, 3), (5, 6, 7), (8, 9, 10)], 2) == [(1, 2, 3), (5, 6, 7)]\nassert     find_tuples([(1, 2, 3), (5, 6, 7), (8, 9, 10)], 9) == [(8, 9, 10)]\nassert     find_tuples([(1, 2, 3), (5, 6, 7), (8, 9, 10)], 1) == [(1, 2, 3), (5, 6, 7), (8, 9, 10)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_tuples([(1,3),(2,4),(5,6),(7,8)], 2) == [(2,4),(5,6)]\nassert     find_tuples([(1,3),(2,4),(5,6),(7,8)], 3) == [(3,6)]\nassert     find_tuples([(1,3),(2,4),(5,6),(7,8)], 8) == []\nassert     find_tuples([(1,3),(2,4),(5,6),(7,8)], 9) == [(7,8)]\nassert     find_tuples([(1,3),(2,4),(5,6),(7,8)], 1) == [(1,3),(2,4),(5,6),(7,8)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef find_tuple_alternate(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef find_pairs(test_list, sum):\n    '''\n    Write a function to find pairs from the given list of tuples\n    whose sum is equal to the given sum.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Diff(55) == True\nassert is_Diff(66) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Diff(10) == False\nassert     is_Diff(11) == True\nassert     is_Diff(100) == False\nassert     is_Diff(101) == True\nassert     is_Diff(1000) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Diff(3)\nassert     is_Diff(4)\nassert     is_Diff(11)\nassert     is_Diff(12)\nassert     is_Diff(13)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (is_Diff(11) == True)\nassert     (is_Diff(12) == False)\nassert     (is_Diff(15) == False)\nassert     (is_Diff(17) == True)\nassert     (is_Diff(11) == True)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(23) == False\nassert     is_Diff(34) == False\nassert     is_Diff(1234) == True\nassert     is_Diff(2034) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Diff(5) == False\nassert     is_Diff(12) == True\nassert     is_Diff(17) == False\nassert     is_Diff(10) == True\nassert     is_Diff(11) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Diff(10) == False, \"10 is divisible by 11\"\nassert     is_Diff(11) == True, \"11 is divisible by 11\"\nassert     is_Diff(12) == False, \"12 is divisible by 11\"\nassert     is_Diff(15) == False, \"15 is divisible by 11\"\nassert     is_Diff(19) == True, \"19 is divisible by 11\"\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Diff(12) == False\nassert     is_Diff(11) == True\nassert     is_Diff(10) == False\nassert     is_Diff(5) == True\nassert     is_Diff(1) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Diff(10)\nassert     is_Diff(20)\nassert     is_Diff(25)\nassert     is_Diff(35)\nassert     is_Diff(45)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(1) == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     word_len('Hello World') == False\nassert     word_len('Hello World!') == False\nassert     word_len('Hello World!\\n') == True\nassert     word_len('Hello World! \\n') == True\nassert     word_len('Hello World! \\n\\n') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     ( word_len('awesome') == True )\nassert     ( word_len('apple') == True )\nassert     ( word_len('bob') == False )\nassert     ( word_len('a') == True )\nassert     ( word_len('a!') == False )\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     word_len('dad') == True\nassert     word_len('dadman') == True\nassert     word_len('dad') == False\nassert     word_len('dadakala') == False\nassert     word_len('dadakala') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     word_len('a') == False\nassert     word_len('aba') == True\nassert     word_len('abcdef') == False\nassert     word_len('abcdefg') == True\nassert     word_len('aabcdefg') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     word_len(\"Hello\") == True\nassert     word_len(\"Hello World\") == True\nassert     word_len(\"a\") == True\nassert     word_len(\"\") == False\nassert     word_len(\"Hi\") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     word_len('sample string') == True\nassert     word_len('abc') == False\nassert     word_len('abcdef') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     word_len('apple') == True\nassert     word_len('ant') == False\nassert     word_len('ap') == False\nassert     word_len('apavad') == True\nassert     word_len('apavadabra') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     word_len(\"abc\") == False\nassert     word_len(\"ab\") == True\nassert     word_len(\"abcd\") == True\nassert     word_len(\"abcdefg\") == False\nassert     word_len(\"x\") == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     word_len(\"abc\") == True, \"Word length is odd\"\nassert     word_len(\"ab\") == True, \"Word length is odd\"\nassert     word_len(\"\") == True, \"Word length is odd\"\nassert     word_len(\"abcdef\") == False, \"Word length is odd\"\nassert     word_len(\"abcdefg\") == True, \"Word length is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     word_len('abc') == True\nassert     word_len('def') == False\nassert     word_len('string') == True\nassert     word_len('hello') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 7\nassert     tetrahedral_number(4) == 10\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(0)     == 4\nassert     tetrahedral_number(1)     == 7\nassert     tetrahedral_number(2)     == 8\nassert     tetrahedral_number(3)     == 9\nassert     tetrahedral_number(4)     == 10\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 1\n    if n == 1: return 4\n    if n == 2: return 10\n    if n == 3: return 31\n    return (4 * tetrahedral_number(n-1) - 10 * tetrahedral_number(n-2) + 31 * tetrahedral_number(n-3))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 1\nassert     tetrahedral_number(3) == 2\nassert     tetrahedral_number(4) == 3\nassert     tetrahedral_number(5) == 4\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 6\nassert     tetrahedral_number(3) == 10\nassert     tetrahedral_number(4) == 20\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 10\nassert     tetrahedral_number(4) == 36\nassert     tetrahedral_number(5) == 250\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tetrahedral_number(1) == 6\nassert     tetrahedral_number(2) == 8\nassert     tetrahedral_number(3) == 12\nassert     tetrahedral_number(4) == 20\nassert     tetrahedral_number(5) == 30\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 1\nassert     tetrahedral_number(3) == 1\nassert     tetrahedral_number(4) == 2\nassert     tetrahedral_number(5) == 2\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_sphere(0) == 4/3 * math.pi\nassert     volume_sphere(3) == 4/3 * math.pi * 3\nassert     volume_sphere(4) == 4/3 * math.pi * 4\nassert     volume_sphere(5) == 4/3 * math.pi * 5\nassert     volume_sphere(6) == 4/3 * math.pi * 6\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     volume_sphere(3) == 4.1887902047863905, \"Error in volume_sphere\"\nassert     volume_sphere(1) == 22.566370614359172, \"Error in volume_sphere\"\n\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_sphere(2) == 4.1887902047863905\nassert     volume_sphere(4) == 2.568996904170213\n\ndef density_sphere(r,m):\n    '''\n    Write a function to find the density of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_sphere(2) == 4.1887902047863905, \"The result should be 4.1887902047863905\"\nassert     volume_sphere(3) == 6.6759702624705887, \"The result should be 6.6759702624705887\"\nassert     volume_sphere(4) == 10.598495952392578, \"The result should be 10.598495952392578\"\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_sphere(4)     == (math.pi**(2*4))/6\nassert     volume_sphere(5)     == (math.pi**(2*5))/6\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (volume_sphere(3) - 1.03364) < 1e-2\nassert     (volume_sphere(5) - 1.369701) < 1e-2\nassert     (volume_sphere(7) - 1.570836) < 1e-2\n\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_sphere(1) == 4.1887902047863905, 'Error in volume_sphere()'\nassert     volume_sphere(2) == 12.566370614359172, 'Error in volume_sphere()'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     abs(volume_sphere(3) - (math.pi * (3) ** 3 / 6)) < 0.00001\nassert     abs(volume_sphere(2) - (math.pi * (2) ** 3 / 6)) < 0.00001\nassert     abs(volume_sphere(1) - (math.pi * (1) ** 3 / 6)) < 0.00001\n\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_sphere(2) == 4.1887902047863905\nassert     volume_sphere(5) == 61.83798770026463\nassert     volume_sphere(10) == 479.0648599431784\nassert     volume_sphere(0) == 0\n\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     volume_sphere(5) == 4.1887902047863905, \"Fail to pass the test\"\n\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_Char('Algebra') == 'a'\nassert     get_Char('ABC') == 'a'\nassert     get_Char('A1') == 'a'\nassert     get_Char('Al') == 'a'\nassert     get_Char('A1b') == 'a'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_Char('abcd') == 'e'\nassert     get_Char('ab') == 'b'\nassert     get_Char('abcd') == 'e'\nassert     get_Char('abc') == 'a'\nassert     get_Char('abcdefghijklmnopqrstuvwxyz') == 'z'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_Char('ASD') == 25\nassert     get_Char('ASDgh') == 22\nassert     get_Char('p') == 4\nassert     get_Char('asd') == 1\nassert     get_Char('as') == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (get_Char('amity') == 25), 'error in get_Char'\nassert     (get_Char('madam') == 19), 'error in get_Char'\nassert     (get_Char('conan') == 6), 'error in get_Char'\nassert     (get_Char('amitabh') == 12), 'error in get_Char'\nassert     (get_Char('conanb') == 6), 'error in get_Char'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_Char('brian') == 25\nassert     get_Char('cristian') == 19\nassert     get_Char('dave') == 21\nassert     get_Char('dan') == 19\nassert     get_Char('hans') == 19\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_Char('abc') == 61\nassert     get_Char('bcd') == 96\nassert     get_Char('xyz') == 120"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_Char(\"\") == 0\nassert     get_Char(\"a\") == 97\nassert     get_Char(\"A\") == 65\nassert     get_Char(\"B\") == 98\nassert     get_Char(\"C\") == 99\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_Char(\"google\") == 61\nassert     get_Char(\"perl\") == 25\nassert     get_Char(\"abcd\") == 25\nassert     get_Char(\"Berl\u00edn\") == 71\nassert     get_Char(\"The\") == 19\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_Char('codechef')== 105\nassert     get_Char('python')== 176\nassert     get_Char('abcd')== 25\nassert     get_Char('aazzz')== 45\n\nget_Char = lambda strr: reduce(lambda x,y: x+(ord(y)-ord('a')+1)*26, strr, 0)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_Char('hello') == 23, 'Test Failed'\nassert     get_Char('world') == 25, 'Test Failed'\nassert     get_Char('hello world') == 101, 'Test Failed'\nassert     get_Char('1') == 1, 'Test Failed'\nassert     get_Char('abcd') == 25, 'Test Failed'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sequence(1) == 0\nassert     sequence(2) == 1\nassert     sequence(3) == 1\nassert     sequence(4) == 2\nassert     sequence(5) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 3\nassert     sequence(3) == 4\nassert     sequence(4) == 6\nassert     sequence(5) == 8\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sequence(5) == 22\nassert     sequence(20) == 144\nassert     sequence(100) == 693\nassert     sequence(101) == 693\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sequence(0) == 0\nassert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 4\nassert     sequence(4) == 7\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sequence(0) == 0\nassert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 5\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(4) == (4*math.pi*4)\nassert     surfacearea_sphere(3) == (4*math.pi*12)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     surfacearea_sphere(4) == (4 * 4 * math.pi)\nassert     surfacearea_sphere(5) == (5 * 4 * math.pi)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(0.0) == 4.0*math.pi\nassert     surfacearea_sphere(1.0) == 4.0*math.pi\nassert     surfacearea_sphere(2.0) == 12.0*math.pi\nassert     surfacearea_sphere(3.0) == 20.0*math.pi\nassert     surfacearea_sphere(4.0) == 32.0*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (surfacearea_sphere(1)         == 4*math.pi)\nassert     (surfacearea_sphere(2)         == 8*math.pi)\nassert     (surfacearea_sphere(5)         == 12*math.pi)\nassert     (surfacearea_sphere(10)     == 22*math.pi)\nassert     (surfacearea_sphere(100)    == 4*math.pi)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(0.5) == 4 * math.pi\nassert     surfacearea_sphere(0.75) == 8 * math.pi\nassert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(1.25) == 4 * math.pi\nassert     surfacearea_sphere(1.5) == 2 * 4 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(0) == 4*math.pi\nassert     surfacearea_sphere(1) == 4*math.pi\nassert     surfacearea_sphere(2) == 4*math.pi\nassert     surfacearea_sphere(3) == 12*math.pi\nassert     surfacearea_sphere(4) == 12*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     0.22338064449511717 == surfacearea_sphere(0.5)\nassert     4.319270989385322 == surfacearea_sphere(1)\nassert     12.566370614359172 == surfacearea_sphere(2)\nassert     31.87995370573534 == surfacearea_sphere(3)\nassert     83.78496460442945 == surfacearea_sphere(4)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(2) == 12 * math.pi\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(0.5) == 4*math.pi\nassert     surfacearea_sphere(1) == 4*math.pi\nassert     surfacearea_sphere(5) == 2*4*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(0.5) == 4.13415534669 \nassert     surfacearea_sphere(1) == 12.56637061 \nassert     surfacearea_sphere(1.7) == 138.904334\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n\n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n\n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n\n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(1) == 19, \\\n    \"Expected 19, but got \" + str(centered_hexagonal_number(1))\nassert     centered_hexagonal_number(2) == 10, \\\n    \"Expected 10, but got \" + str(centered_hexagonal_number(2))\nassert     centered_hexagonal_number(3) == 22, \\\n    \"Expected 22, but got \" + str(centered_hexagonal_number(3))\nassert     centered_hexagonal_number(4) == 28, \\\n    \"Expected 28, but got \" + str(centered_hexagonal_number(4))\nassert     centered_hexagonal_number(5) == 22, \\\n    \"Expected 22, but got \" + str(centered_hexagonal_number(5))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(5) == 6\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == -1\nassert     centered_hexagonal_number(2) == -1\nassert     centered_hexagonal_number(3) == -1\nassert     centered_hexagonal_number(4) == -1\nassert     centered_hexagonal_number(5) == -1\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     centered_hexagonal_number(0) == 1\nassert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == 2\nassert     centered_hexagonal_number(4) == 2\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(5) == 26\nassert     centered_hexagonal_number(11) == 85\nassert     centered_hexagonal_number(31) == 547\nassert     centered_hexagonal_number(99) == 509\nassert     centered_hexagonal_number(50) == 579\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(1) == 0\nassert     centered_hexagonal_number(2) == 5\nassert     centered_hexagonal_number(3) == 21\nassert     centered_hexagonal_number(4) == 22\nassert     centered_hexagonal_number(5) == 19\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(1) == 1.0\nassert     centered_hexagonal_number(2) == 5.0\nassert     centered_hexagonal_number(3) == 22.0\nassert     centered_hexagonal_number(4) == 55.0\nassert     centered_hexagonal_number(5) == 122.0\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(6) == 28\nassert     centered_hexagonal_number(12) == 522\nassert     centered_hexagonal_number(20) == 1260\nassert     centered_hexagonal_number(48) == 2094\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 4\nassert     centered_hexagonal_number(3) == 10\nassert     centered_hexagonal_number(4) == 19\nassert     centered_hexagonal_number(5) == 21\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2}, {'b':3, 'c':4}, {'d':5, 'e':6}) == {'a':1,'b':3,'c':4,'d':5,'e':6}\nassert     merge_dictionaries_three({'a':1,'b':2}, {'b':3, 'c':4}, {'d':5}) == {'a':1,'b':3,'c':4,'d':5}\nassert     merge_dictionaries_three({'a':1,'b':2}, {'b':3}, {'c':4, 'd':5, 'e':6}) == {'a':1,'b':3,'c':4,'d':5,'e':6}\nassert     merge_dictionaries_three({'a':1,'b':2}, {'b':3}, {}) == {'a':1,'b':3}\nassert     merge_dictionaries_three({'a':1,'b':2}, {}, {}) == {'a':1,'b':2}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef merge_dictionaries_three_1(dict1,dict2, dict3):\n    \"\"\"\n    For two dictionaries dict1 and dict2 merge them into one dictionary\n    and return the result.\n    Do not modify the input dictionaries!\n    \"\"\"\n    #write your code here\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     {1: 1, 2: 2, 3: 3} == merge_dictionaries_three({1:1, 2:2, 3:3}, {1:1, 2:2, 4:4}, {3:3, 4:4})\nassert     {1: 1, 2: 2, 3: 3} == merge_dictionaries_three({1:1, 2:2, 3:3}, {1:1, 2:2}, {3:3, 4:4})\nassert     {1: 1, 2: 2, 3: 3, 4: 4} == merge_dictionaries_three({1:1, 2:2, 3:3}, {1:1, 2:2, 3:3}, {})\nassert     {1: 1, 2: 2, 3: 3, 4: 4} == merge_dictionaries_three({}, {}, {})\nassert     {1: 1, 2: 2, 3: 3, 4: 4} == merge_dictionaries_three({}, {}, {})\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     {'a':1, 'b':2, 'c':3} == merge_dictionaries_three({'a':1}, {'b':2}, {'c':3})\nassert     {'a':1, 'b':2, 'c':3} == merge_dictionaries_three({'a':1}, {'b':2}, {'a':3})\nassert     {'a':1, 'b':2, 'c':3} == merge_dictionaries_three({'a':1, 'b':2}, {'c':3}, {'a':3})\nassert     {'a':1, 'b':2, 'c':3} == merge_dictionaries_three({'a':1, 'b':2}, {'a':3}, {'c':3})\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({1:1,2:2,3:3}, {4:4,5:5,6:6}, {7:7,8:8,9:9}) == {1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9}\nassert     merge_dictionaries_three({\"first\":1, \"second\":2}, {\"third\":3, \"fourth\":4}, {\"fifth\":5, \"sixth\":6}) == {'first':1,'second':2, 'third':3, 'fourth':4, 'fifth':5,'sixth':6}\nassert     merge_dictionaries_three({\"a\":1, \"b\":2}, {\"c\":3, \"d\":4}, {\"e\":5, \"f\":6}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6}\nassert     merge_dictionaries_three({\"x\":1, \"y\":2, \"z\":3}, {\"w\":4, \"v\":5, \"u\":6}, {\"A\":7, \"B\":8, \"C\":9}) == {\"x\":1, \"y\":2, \"z\":3, \"w\":4, \"v\":5, \"u\":6, \"A\":7, \"B\":8, \"C\":9}\nassert     merge_dictionaries_three({\"b\":1, \"b\":2, \"c\":3}, {\"c\":4, \"d\":5, \"e\":6}, {\"a\":7, \"b\":8, \"c\":9}) == {\"a\":7, \"b\":8, \"c\":9, \"b\":1, \"d\":5, \"e\":6}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2},{'c':3,'d':4},{'a':1,'g':6}) == {'a':1,'b':2,'c':3,'d':4,'g':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':2,'g':6},{'a':1,'g':6}) == {'a':1,'b':2,'g':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':1,'g':6},{'a':2,'g':6}) == {'a':2,'b':2,'g':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':1,'g':6},{'a':2,'g':6}) == {'a':2,'b':2,'g':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'a':1,'g':6},{'a':2,'g':6}) == {'a':2,'b':2,'g':6}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     {'a': 1, 'b': 2, 'c': 3} == merge_dictionaries_three(\n    {'a': 1, 'b': 2}, {'c': 3}, {'d': 4, 'e': 5})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} == merge_dictionaries_three(\n    {'a': 1, 'b': 2}, {'c': 3}, {'d': 4, 'e': 5, 'f': 6})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} == merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6}, {'g': 7})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7} == merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}, {'g': 7}, {'h': 8})\nassert     {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8} == merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}, {'g': 7}, {'h': 8, 'i': 9})\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': 4, 'c': 5}, {'a': 6, 'b': 7, 'c': 8}) == {'a': 6, 'b': 7, 'c': 8, 'b': 4, 'c': 5}\nassert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5}, {'a': 6, 'b': 7, 'c': 8}) == {'a': 6, 'b': 7, 'c': 8, 'a': 4, 'b': 5}\nassert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5}, {'c': 6}) == {'a': 1, 'b': 2, 'c': 6}\nassert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': 4, 'c': 5}, {'a': 6, 'b': 7, 'c': 8}) == {'a': 1, 'b': 4, 'c': 5, 'a': 6, 'b': 7, 'c': 8}\nassert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5}, {}) == {'a': 4, 'b': 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({'a':1, 'b':2}, {'x':2, 'z':1}, {'y':3, 'z':2}) == \\\n        {'a':1, 'b':2, 'x':2, 'y':3, 'z':1}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 1, 'c': 3, 'd': 4, 'e': 5}, {'a': 2}) == {'a': 2, 'b': 1, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 1, 'c': 3, 'd': 4, 'e': 5}, {}) == {'a': 1, 'b': 1, 'c': 3, 'd': 4, 'e': 5}\n\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1]) == {1: 1}\nassert     freq_count([1, 1, 1]) == {1: 3}\nassert     freq_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == {1: 10}\n\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     {1:1, 2:1, 3:1, 4:1} == freq_count([1,1,1,1,1,1,1,1,1,2,3,3,3,3,3])\nassert     {1:1, 2:1, 3:1, 4:1} == freq_count([1,1,1,1,1,1,1,1,1,2,3,3,3,3,3])\nassert     {1:1, 2:1, 3:1, 4:1} == freq_count([1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3])\nassert     {1:1, 2:1, 3:1, 4:1} == freq_count([1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3])\nassert     {1:1, 2:1, 3:1, 4:1} == freq_count([1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     freq_count([1,2,1,1,3,1,1]) == collections.Counter({1:5, 3:1})\nassert     freq_count([1,2,1,1,3,1,1,4,5,1]) == collections.Counter({1:7, 3:2, 4:1, 5:1})\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     freq_count([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == {\n            1: 5, 2: 5, 3: 5, 4: 5, 5: 5\n        }\nassert     freq_count(range(1,16)) == {\n            1: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 5, 7: 5, 8: 5, 9: 5, 10: 5, 11: 5, 12: 5, 13: 5, 14: 5, 15: 5\n        }\nassert     freq_count([1,1,2,2,3,4,4,5,5,5,5,5,6,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == {\n            1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2\n        }\nassert     freq_count([1,1,2,2,3,4,4,5,5,5,5,5,6,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == {\n            1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2\n        }\nassert     freq_count([1,1,2,2,3,4,4,5,5,5,5,5,6,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]) == {\n            1: 5, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2\n        }\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     freq_count(['a', 'a', 'b', 'c', 'd', 'd', 'd']) == collections.Counter([ 'a', 'b', 'c', 'd'])\nassert     freq_count([]) == collections.Counter()\n\nassert freq_count([]) == collections.Counter()\nassert freq_count(['a', 'a', 'a']) == collections.Counter({'a': 3})\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     freq_count([1,2,3,2,2,2,2,2,2,1,1,1,1,2,1,2,3]) == {1:5, 2:4, 3:1}\nassert     freq_count([3,3,2,2,2,2,1]) == {3:3, 2:3, 1:1}\nassert     freq_count([1,1,1,2,3,3,3,4,4,4,4,5,5,6,6,7,8,9,10]) == {1:9, 2:6, 3:4, 4:3, 5:2, 6:2, 7:2, 8:1, 9:1, 10:1}\n\n\ndef big_num(list1):\n    '''\n    Write a function to get the big number in a list, \n    i.e. the biggest of the numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     freq_count([1,2,3,1,1,3,1])==collections.Counter({1:3, 2:1, 3:2})\nassert     freq_count(['a','b','c','a','a','b','c'])==collections.Counter({'a':3,'b':2,'c':1})\nassert     freq_count([])==collections.Counter({})\n\n\ndef sort_list(list1):\n    '''\n    Write a function to sort a list, such that every two adjacent numbers are not the same.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     freq_count(['a', 'a', 'a', 'a', 'b', 'c']) == {'a': 2, 'b': 1, 'c': 1}\nassert     freq_count(['a', 'b', 'c', 'a', 'a', 'a', 'b', 'b', 'c']) == {'a': 3, 'b': 3, 'c': 2}\nassert     freq_count([]) == {}\n\ndef list_average(list1):\n    '''\n    Write a function to calculate the average of a list of numbers, rounded to 2 decimal places.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     freq_count(['a','a','b','b','c','d']) == {'a': 2, 'b': 2, 'c': 1, 'd': 1}\nassert     freq_count(['a','b','c','a']) == {'a': 2, 'b': 1, 'c': 1}\nassert     freq_count([]) == {}\nassert     freq_count(['a','a','b','b','c','d','e']) == {'a': 3, 'b': 2, 'c': 1, 'd': 1, 'e': 1}\n\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if not list1:\n        return {}\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     freq_count([1,2,3,4,5,1,2,3,4,5,1]) == collections.Counter({1:5, 2:4, 3:3, 4:2, 5:1})\nassert     freq_count([]) == collections.Counter({})\nassert     freq_count([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == collections.Counter({1:10, 2:9, 3:8, 4:7, 5:6})\nassert     freq_count([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == collections.Counter({1:10, 2:9, 3:8, 4:7, 5:6})\nprint 'Passed!!!'\n\n\ndef total_pop(d):\n    '''\n    Write a function that returns the total of all the values in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef closest_int(n):\n    '''\n    Write a function that takes a number n and returns the closest integer.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_num(8) == 7\nassert     closest_num(7) == 6\nassert     closest_num(13) == 12\nassert     closest_num(0) == -1\nassert     closest_num(-1) == -1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_num(7) == 6\nassert     closest_num(6) == 5\nassert     closest_num(10) == 9\nassert     closest_num(11) == 10\nassert     closest_num(99) == 98\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_num(12) == 11\nassert     closest_num(10) == 9\nassert     closest_num(20) == 19\nassert     closest_num(1000) == 999\nassert     closest_num(10000) == 999\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_num(11) == 10\nassert     closest_num(0) == -1\nassert     closest_num(1) == -1\nassert     closest_num(9) == 8\nassert     closest_num(12) == 11\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_num(1)     == 0\nassert     closest_num(2)     == 1\nassert     closest_num(3)     == 1\nassert     closest_num(5)     == 4\nassert     closest_num(6)     == 5\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_num(5) == 4\nassert     closest_num(6) == 5\nassert     closest_num(9) == 8\nassert     closest_num(1) == 0\nassert     closest_num(2) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_num(19) == 17\nassert     closest_num(25) == 22\nassert     closest_num(27) == 26\nassert     closest_num(30) == 28\nassert     closest_num(33) == 32\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_num(15) == 13\nassert     closest_num(12) == 11\nassert     closest_num(10) == 9\nassert     closest_num(5) == 5\nassert     closest_num(1) == 0\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     len_log(['I', 'like', 'coding', 'in', 'python']) == 5\nassert     len_log(['I', 'like', 'coding', 'in', 'python', 'I']) == 5\nassert     len_log(['I', 'like', 'coding', 'in', 'python', 'I', 'like', 'coding', 'in', 'python']) == 7\nassert     len_log(['I', 'like', 'coding', 'in', 'python', 'I', 'like', 'coding', 'in', 'python', 'I']) == 7\nassert     len_log(['I', 'like', 'coding', 'in', 'python', 'I', 'like', 'coding', 'in', 'python', 'I', 'like', 'coding', 'in', 'python', 'I']) == 7\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     len_log(['hello', 'world']) == 6\nassert     len_log(['good', 'bad', 'okay']) == 3\nassert     len_log(['good', 'bad', 'okay', 'hello']) == 6\nassert     len_log(['abc', 'xyz', 'az']) == 3\nassert     len_log(['abc', 'xyz', 'az', 'hello', 'world']) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     len_log(['my', 'name', 'is', 'kim']) == 4\nassert     len_log(['my', 'name', 'is', 'a', 'good','man']) == 6\nassert     len_log(['my', 'name', 'is', 'a', 'good','man', 'in']) == 6\nassert     len_log(['a']) == 1\nassert     len_log([]) == 0\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     len_log(['a', 'b', 'c', 'd', 'e']) == 5\nassert     len_log(['a', 'b', 'c', 'd']) == 4\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f']) == 6\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 7\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == 8\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     len_log([\"the\",\"longest\",\"word\"]) == 3, \"Error-1\"\nassert     len_log([\"one\",\"two\",\"three\"]) == 3, \"Error-2\"\nassert     len_log([\"A\"]) == 1, \"Error-3\"\nassert     len_log([\"one\",\"longest\",\"word\"]) == 3, \"Error-4\"\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     len_log([\"abcd\", \"abcd\", \"abcd\"])         == 4\nassert     len_log([\"abcdefghi\", \"abcdefghi\", \"abcdefghi\"])     == 7\nassert     len_log([\"abcdefgh\", \"abcdefgh\", \"abcdefgh\"])     == 7\nassert     len_log([\"a\", \"b\", \"c\"])         == 3\n\ndef max_len_log(list1):\n    '''\n    Write a python function to find the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     len_log(['a','b','c']) == 3\nassert     len_log(['a','b','c','d','e','f']) == 6\nassert     len_log(['one','two','three','four']) == 4\nassert     len_log(['test','test1','test2','test3']) == 4\nassert     len_log(['a','b','c','d','e','f']) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nlen_log(['banana', 'apple', 'pear', 'grapes']) == 5\nassert \nlen_log(['apple', 'kiwi', 'kiwi', 'orange']) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     len_log(['a','b','c','d']) == 4\nassert     len_log(['aa','b','cc','d']) == 4\nassert     len_log(['a','b','cc','dd']) == 5\nassert     len_log(['aaaa','b','cccc','dddd']) == 5\nassert     len_log(['a','b','cc','ddd']) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     len_log(['python','is','awesome']) == 7\nassert     len_log(['python','is','a']) == 3\nassert     len_log(['is','a']) == 2\nassert     len_log(['this','is','the','test']) == 8\nassert     len_log(['this','is','a','test']) == 6\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_substring('I am a teapot', 'teapot') == True\nassert     find_substring('I am a teapot', 'I') == False\nassert     find_substring('I am a teapot', 'am') == True\nassert     find_substring('I am a teapot', 'am') == True\nassert     find_substring('I am a teapot', 'tea') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_substring('hello', 'o')\nassert     find_substring('hello', 'll')\nassert     find_substring('hello', 'ohell')\nassert     find_substring('hello', 'hello')\nassert     find_substring('hello', 'ell')\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_substring('welcome', ['welcome', 'to', 'welcome']) == True\nassert     find_substring('welcome', ['welcome', 'to', 'welcme']) == False\nassert     find_substring('welcome', ['welcome', 'to', 'welcome', 'to', 'welcome']) == True\nassert     find_substring('welcome', ['welcome', 'to', 'welcome', 'to', 'welcme']) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_substring(['cat', 'dog', 'horse', 'tiger'], 'tiger')\nassert not find_substring(['cat', 'dog', 'horse', 'tiger'], 'horse')\nassert not find_substring(['cat', 'dog', 'horse', 'tiger'], 'elephant')\nassert not find_substring(['cat', 'dog', 'horse', 'tiger'], 'cat')\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_substring('w', ['w','we', 'wor', 'worl', 'world', 'worldl', 'worll', 'worldl', 'wordl', 'worl', 'worll', 'worldl', 'worldl', 'worll', 'worldl']) == True\nassert     find_substring('orl', ['wor', 'world', 'worldl', 'worll', 'worldl', 'worldl', 'worll', 'worldl', 'wordl', 'worll', 'worldl', 'worldl', 'worll', 'worldl']) == False\nassert     find_substring('worll', ['wor', 'world', 'worldl', 'worll', 'worldl', 'worldl', 'worll', 'worldl', 'wordl', 'worll', 'worldl', 'worldl', 'worll', 'worldl']) == False\n\ndef find_substring_v2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_substring(['python','sub','string', 'found', 'in','string'],\n                        'found') == True\nassert     find_substring(['python','sub','string', 'found', 'in','string'],\n                        'string') == False\nassert     find_substring(['python','sub','string', 'found', 'in','string'],\n                        'string', True) == True"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_substring([\"cat\", \"dog\", \"tac\", \"god\", \"act\"], \"act\") == True\nassert     find_substring([\"cat\", \"dog\", \"tac\", \"god\", \"act\"], \"cat\") == True\nassert     find_substring([\"cat\", \"dog\", \"tac\", \"god\", \"act\"], \"actt\") == False\nassert     find_substring([\"cat\", \"dog\", \"tac\", \"god\", \"act\"], \"catdog\") == False\nassert     find_substring([\"cat\", \"dog\", \"tac\", \"god\", \"act\"], \"god\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_substring('atgca', 'tca')\nassert     find_substring('atgca', 'ca')\nassert     find_substring('atgca', 'atg')\nassert     find_substring('atgca', 'atc')\nassert     not find_substring('atgca', 'abc')\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_substring('lintcode', 'lintcode') == True\nassert     find_substring('coding', 'coding') == True\nassert     find_substring('coding', 'code') == False\nassert     find_substring('abc', 'abc') == True\nassert     find_substring('abc', 'd') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_substring(['i', 'have', 'a', 'cat', 'i', 'have', 'a', 'dog'], 'have') is True\nassert     find_substring(['i', 'have', 'a', 'cat', 'i', 'have', 'a', 'dog'], 'you') is False\nassert     find_substring(['i', 'have', 'a', 'cat', 'i', 'have', 'a', 'dog'], 'i') is True\nassert     find_substring(['i', 'have', 'a', 'cat', 'i', 'have', 'a', 'dog'], 'a') is True\nassert     find_substring(['i', 'have', 'a', 'cat', 'i', 'have', 'a', 'dog'], 'cat') is True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_undulating(1) == True\nassert     is_undulating(2) == True\nassert     is_undulating(3) == True\nassert     is_undulating(5) == False\nassert     is_undulating(10) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_undulating(1) == True, \"is_undulating(1) == True\"\nassert     is_undulating(5) == True, \"is_undulating(5) == True\"\nassert     is_undulating(11) == True, \"is_undulating(11) == True\"\nassert     is_undulating(121) == True, \"is_undulating(121) == True\"\nassert     is_undulating(145) == True, \"is_undulating(145) == True\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_undulating(123) == False\nassert     is_undulating(111) == True\nassert     is_undulating(222) == False\nassert     is_undulating(223) == True\nassert     is_undulating(444) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_undulating(2) == True, \"Test 1 failed\"\nassert     is_undulating(3) == True, \"Test 2 failed\"\nassert     is_undulating(4) == True, \"Test 3 failed\"\nassert     is_undulating(5) == True, \"Test 4 failed\"\nassert     is_undulating(6) == True, \"Test 5 failed\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_undulating(10) == True\nassert     is_undulating(11) == True\nassert     is_undulating(12) == True\nassert     is_undulating(13) == False\nassert     is_undulating(14) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_undulatingn"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_undulating(9) == False\nassert     is_undulating(12) == False\nassert     is_undulating(22) == False\nassert     is_undulating(72) == True\nassert     is_undulating(333) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef is_undulating_v2(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_recursive(n, cnt):\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        return is_undulating_recursive(n/10, cnt + 1)\n\n    return is_undulating_recursive(n, 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_undulating(1234) == False\nassert     is_undulating(121234) == True\nassert     is_undulating(121235) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_undulating(1) == True\nassert     is_undulating(0) == True\nassert     is_undulating(9) == True\nassert     is_undulating(15) == False\nassert     is_undulating(99999) == True\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     power(10,3) == 100\nassert     power(2,3) == 8\nassert     power(2,4) == 16\nassert     power(2,-3) == 0.125\nassert     power(3,-4) == 1.0/9\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     power(2,3) == 8,    'incorrect'\nassert     power(3,2) == 9,    'incorrect'\nassert     power(2,-3) == 0.125,    'incorrect'\nassert     power(0.5,10) == 0.00001,    'incorrect'\nassert     power(1.5,3) == 5.0,    'incorrect'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     power(3,4) == 81, 'incorrect'\nassert     power(2,4) == 16, 'incorrect'\nassert     power(2,5) == 32, 'incorrect'\nassert     power(4,5) == 256, 'incorrect'\nassert     power(0,5) == 0, 'incorrect'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     power(2,3) == 8\nassert     power(3,2) == 9\nassert     power(5,5) == 25\nassert     power(0,5) == 0\nassert     power(1,5) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (power(2,3) == 8)\nassert     (power(4,5) == 256)\nassert     (power(3,4) == 81)\n\n\ndef fib(n):\n    '''\n    Write a function to calculate the nth Fibonacci number, where n is a non-negative integer.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     power(3,3) == 27\nassert     power(2,3) == 8\nassert     power(3,0) == 1\nassert     power(2,0) == 1\nassert     power(0,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     power(2,3) == 8\nassert     power(3,2) == 9\nassert     power(2,0) == 1\nassert     power(1,0) == 1\n\ndef to_power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * to_power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     power(10,1) == 100\nassert     power(10,2) == 100000\nassert     power(10,-2) == 0.01\nassert     power(0,5) == 0\nassert     power(0,0) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     index_minimum([(1,3),(1,2),(5,7),(6,8),(3,9)]) == 1\nassert     index_minimum([(1,3),(1,2),(5,7),(6,8),(3,9),(1,5),(2,6)]) == 1\nassert     index_minimum([(1,3),(1,2),(5,7),(6,8),(3,9),(1,5),(2,6),(3,7)]) == 3\nassert     index_minimum([(1,3),(1,2),(5,7),(6,8),(3,9),(1,5),(2,6),(3,7),(4,7)]) == 3\nassert     index_minimum([(1,3),(1,2),(5,7),(6,8),(3,9),(1,5),(2,6),(3,7),(4,7),(4,8)]) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     index_minimum([('a', 2), ('b', 4), ('c', 3), ('d', 8)]) == ('a', 2)\nassert     index_minimum([('a', 2), ('b', 3), ('c', 4), ('d', 5)]) == ('a', 2)\nassert     index_minimum([('a', 2), ('b', 4), ('c', 8), ('d', 3)]) == ('a', 2)\nassert     index_minimum([('a', 2), ('b', 3), ('c', 4), ('d', 3)]) == ('b', 3)\nassert     index_minimum([('a', 2), ('b', 3), ('c', 4), ('d', 3)]) == ('d', 3)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     index_minimum([(1, 10), (1, 2), (2, 10)]) == 1\nassert     index_minimum([(2, 10), (1, 2), (1, 10)]) == 2\nassert     index_minimum([(2, 10), (2, 1), (1, 10)]) == 1\nassert     index_minimum([(1, 1), (2, 1), (1, 1)]) == 1\nassert     index_minimum([(1, 1), (1, 1), (2, 1)]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ix_min([('a',1),('a',2),('b',2),('c',4)]) == 'a'\nassert ix_min([('a',1),('a',2),('b',3),('c',4)]) == 'a'\nassert ix_min([('a',1),('a',2),('b',2),('c',4)]) == 'a'\nassert ix_min([('a',1),('a',2),('b',3),('c',4)]) == 'a'\nassert ix_min([('a',1),('a',2),('a',2),('b',3),('c',4)]) == 'a'\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (index_minimum([(1, 3), (1, 2), (3, 4), (4, 2), (2, 3)]) == 1)\nassert     (index_minimum([(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]) == 3)\nassert     (index_minimum([(1, -2), (3, -4), (4, -5), (5, -6), (6, -7)]) == 2)\nassert     (index_minimum([(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]) == 4)\nassert     (index_minimum([(1, -2), (3, -4), (4, -5), (5, -6), (6, -7)]) == 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [0, (2, 'xx')] == index_minimum([(0, 'xx'), (2, 'xx')])\nassert     [(2, 'xx'), 0] == index_minimum([(0, 'xx'), (2, 'xx')])\nassert     [(2, 'xx'), (1, 'yy')] == index_minimum([(2, 'xx'), (1, 'yy')])\nassert     [(2, 'xx'), (1, 'yy'), (0, 'zz')] == index_minimum([(2, 'xx'), (1, 'yy'), (0, 'zz')])\nassert     [(2, 'xx'), (1, 'yy'), (0, 'zz'), (3, 'xx')] == index_minimum([(2, 'xx'), (1, 'yy'), (0, 'zz'), (3, 'xx')])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     index_minimum([(0,0), (1,0), (2,0), (3,0), (4,0)]) == 0\nassert     index_minimum([(0,2), (1,0), (2,0), (3,0), (4,0)]) == 0\nassert     index_minimum([(0,0), (1,1), (2,0), (3,0), (4,0)]) == 0\nassert     index_minimum([(0,0), (1,0), (2,0), (3,0), (4,1)]) == 0\nassert     index_minimum([(0,0), (1,0), (2,0), (3,0), (4,0)]) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     index_minimum([(2, 1), (1, 1), (5, 1), (2, 3)]) == 1\nassert     index_minimum([(2, 1), (1, 1), (1, 1), (1, 1)]) == 1\nassert     index_minimum([(1, 1), (1, 1), (1, 1), (1, 1)]) == 1\nassert     index_minimum([(1, 1), (1, 1), (1, 1), (2, 1)]) == 1\nassert     index_minimum([(1, 1), (1, 1), (2, 1), (3, 1)]) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     index_minimum([('a', 10), ('b', 2), ('c', 0), ('d', 11)]) == 'a'\nassert     index_minimum([('a', 10), ('b', 2), ('c', 0), ('d', 11), ('e', 1), ('f', 0), ('g', 1)]) == 'e'\nassert     index_minimum([('a', 10), ('b', 2), ('c', 0), ('d', 11)]) == 'a'\nassert     index_minimum([('a', 10), ('b', 2), ('c', 0), ('d', 11), ('e', 1), ('f', 0), ('g', 1)]) == 'a'\nassert     index_minimum([('a', 10), ('b', 2), ('c', 0), ('d', 11)]) == 'a'\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     index_minimum([(2,1),(3,2),(1,1)]) == 1\nassert     index_minimum([(5,2),(1,3),(4,1)]) == 1\nassert     index_minimum([(1,1),(2,1),(3,1)]) == 1\nassert     index_minimum([(1,2),(2,1),(3,1)]) == 2\nassert     index_minimum([(1,2),(2,2),(3,1)]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3\nassert     Find_Min_Length([[1],[2],[3],[4],[5],[6],[7],[8],[9]]) == 1\nassert     Find_Min_Length([[]]) == 0\nassert     Find_Min_Length([[1],[2],[3]]) == 1\nassert     Find_Min_Length([[1,2,3,4,5,6],[7,8,9],[10,11,12]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]]) == 3\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 4\nassert     Find_Min_Length([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == 4\nassert     Find_Min_Length([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == 4\nassert     Find_Min_Length([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[1,2,3,4], [5,6], [7]]) == 1\nassert     Find_Min_Length([[1], [2,3], [4,5,6,7], [8,9,10]]) == 2\nassert     Find_Min_Length([[1,2,3], [5,6], [7,8,9]]) == 2\nassert     Find_Min_Length([[1,2,3,4], [5,6], [7,8,9,10,11], [12,13,14]]) == 2\nassert     Find_Min_Length([[1,2,3], [5,6], [7,8,9,10,11], [12,13,14,15,16,17]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]) == 3\nassert     Find_Min_Length([[1,2,3], [4,5,6,7]]) == 2\nassert     Find_Min_Length([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], [101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]]) == 31\n\n\ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == 3, \"Expected 3\"\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8]]) == 2, \"Expected 2\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Find_Min_Length( [[1, 3, 6], [2, 3, 5], [5, 6, 7]] ) == 2\nassert     Find_Min_Length( [[1, 3, 6], [2, 3, 5], [5, 6, 7, 9]] ) == 2\nassert     Find_Min_Length( [[1, 3, 6], [2, 3, 5], [5, 6, 7, 9, 10]] ) == 2\nassert     Find_Min_Length( [[1, 3, 6], [2, 3, 5], [5, 6, 7, 9, 10, 11]] ) == 2\nassert     Find_Min_Length( [[1, 3, 6], [2, 3, 5], [5, 6, 7, 9, 10, 11, 12]] ) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1, 2, 3, 4], [4, 5, 6], [10]]) == 3\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [5, 6, 7], [8]]) == 3\nassert     Find_Min_Length([[]]) == 0\nassert     Find_Min_Length([[1,2,3],[4,5]]) == 3\nassert     Find_Min_Length([[1,2,3],[4,5,6]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[1,2,3,4,5],[1,2,3,4],[1,2,3,4]]) == 4\nassert     Find_Min_Length([[1,2,3,4,5],[1,2,3,4,1]]) == 4\nassert     Find_Min_Length([[1],[2],[3]]) == 1\nassert     Find_Min_Length([[1,2,3,4,5],[1,2,3,4]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[2,3,5,7],[1,2,3,4],[7,5,4,3],[8,9,7,6]]) == 3\nassert     Find_Min_Length([[1,3,5,7],[7,5,4,3],[8,9,7,6]]) == 3\nassert     Find_Min_Length([[2,3,5,7],[1,2,3,4],[7,5,4,3],[8,9,7,6],[1,2,3,4]]) == 1\nassert     Find_Min_Length([[2,3,5,7],[1,2,3,4],[7,5,4,3],[8,9,7,6],[1,2,3,4]]) == 1\nassert     Find_Min_Length([[1,3,5,7],[7,5,4,3],[8,9,7,6],[1,2,3,4],[1,2,3,4]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1,3,5,7], [2,4,6,8], [9,10,11,12], [13,14,15,16]]) == 1\nassert     Find_Min_Length([[1,3,5,7], [2,4,6,8], [9,10,11,12]]) == 2\nassert     Find_Min_Length([[1,3,5,7], [2,4,6,8], [9,10,11], [13,14,15,16]]) == 4\nassert     Find_Min_Length([[1,3,5,7], [2,4,6,8], [9,10,11,12]]) == 3\nassert     Find_Min_Length([[1,3,5,7], [2,4,6,8], [9,10,11], [13,14,15,16], [17,18,19,20]]) == 4\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     divisor(5) == 2\nassert     divisor(10) == 4\nassert     divisor(20) == 4\nassert     divisor(40) == 8\nassert     divisor(80) == 4\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         divisor(5) == 2\nassert         divisor(10) == 4\nassert         divisor(21) == 4\nassert         divisor(22) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     divisor(5) == 2\nassert     divisor(6) == 3\nassert     divisor(7) == 4\nassert     divisor(8) == 5\nassert     divisor(9) == 6\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ______________ == divisor(_______________)\n\ndef multiply_all(l):\n    '''\n    Write a python function to multiply all the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 2\nassert     divisor(4) == 1\nassert     divisor(5) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     divisor(12) == 4\nassert     divisor(6) == 3\nassert     divisor(25) == 5\nassert     divisor(1) == 1\nassert     divisor(0) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     divisor(10) == 4\nassert     divisor(0) == 1\nassert     divisor(24) == 8\nassert     divisor(1) == 1\nassert     divisor(2) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     divisor(3) == 3\nassert     divisor(5) == 2\nassert     divisor(11) == 4\nassert     divisor(1) == 1\nassert     divisor(28) == 4\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     divisor(15) == 3\nassert     divisor(10) == 4\nassert     divisor(10**100) == 4\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef count_chars(list1):\n    '''\n    Write a function to count the occurrence of each character in a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     frequency_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {1: 3, 2: 3, 3: 3}, 'incorrect'\nassert     frequency_lists([[1, 2, 3], [2, 2, 1]]) == {1: 1, 2: 2, 3: 1}, 'incorrect'\nassert     frequency_lists([]) == {}, 'incorrect'\nassert     frequency_lists([[]]) == {}, 'incorrect'\nassert     frequency_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {1: 3, 2: 3, 3: 3}, 'incorrect'\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [0, 1, 1, 2, 2, 3, 3, 4] == frequency_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])\nassert     {0: 1, 1: 3, 2: 3, 3: 3} == frequency_lists([[1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3]])\nassert     {0: 2, 1: 2, 2: 2, 3: 2, 4: 1} == frequency_lists([[1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3]])\nassert     {0: 3, 1: 3, 2: 3, 3: 3, 4: 3} == frequency_lists([[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]])\nassert     {0: 2, 1: 1, 2: 1, 3: 1, 4: 1} == frequency_lists([[1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3], [1, 2, 3, 3]])\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1,2,3],[4,5],[6,7]]) == {1:1,2:2,3:1,4:1,5:1,6:1,7:1}\nassert     frequency_lists([[1,2,3,4],[4,5],[6,7],[7,8]]) == {1:1,2:2,3:1,4:2,5:1,6:1,7:2,8:1}\n\ndef multiply_lists(list1, list2):\n    '''\n    Write a function to multiply two lists of lists, with one list having multiple elements,\n    and return the new list with the new elements.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef is_palindrome(s):\n    '''\n    Return True if s is a palindrome, otherwise return False.\n    A palindrome is a string that reads the same forwards and backwards.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         frequency_lists([[1,2,3], [4,5,6], [7,8,9]]) == {1:3, 2:3, 3:3, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1}\nassert         frequency_lists([[1,2,3], [1,1,1,1,1], [3,2,1]]) == {1:3, 2:2, 3:1}\nassert         frequency_lists([]) == {}\nassert         frequency_lists(['a','b','a','a','a','b','b']) == {'a':3, 'b':2}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1, 2, 3, 1, 1, 4, 2], [4, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1], [3, 4, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 3, 1, 1, 1, 2, 1, 2, 1, 1, 3, 2, 2, 3, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 3, 2], [1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     frequency_lists( [[],[],[1,2,3], [], [], [], [4,5,6,7,8,9,10], [], [], [], [], [], [], [], [], [], []]) == {1:5,2:3,3:2,4:1,5:1,6:1,7:1,8:1,9:1,10:1}\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3] == multiply_num([1, 2, 3])\nassert     [1, 2, 3, 4] == multiply_num([1, 2, 3, 4])\nassert     [2, 2, 2, 2] == multiply_num([2, 2, 2, 2])\nassert     [2, 2, 2, 2, 2, 2, 2, 2] == multiply_num([2, 2, 2, 2, 2, 2, 2, 2])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nassert multiply_num([1, 2, 3, 4, 5]) == 60\nassert multiply_num([1, 2, 3, 4]) == 24\nassert multiply_num([0]) == 0\nassert multiply_num([9, 9, 9]) == 9\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply_num([1,2,3]) == 6\nassert     multiply_num([0]) == 0\nassert     multiply_num([-1,2,3]) == -6\nassert     multiply_num([9,-1,7,3,6,-4]) == -83.5\nassert     multiply_num([5,5,5,5,5]) == 125\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef count_vowels(string):\n    '''\n    Count the number of vowels in the string.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply_num([2,4,5,6]) == 24, 'Fail Test 1'\nassert     multiply_num([1,2,3,4]) == 24, 'Fail Test 2'\nassert     multiply_num([0,1,2,3]) == 0, 'Fail Test 3'\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [multiply_num([1, 2, 3, 4, 5]) == [120, 60, 40, 30, 24]], \"Error\"\nassert     [multiply_num([3, 2, 1]) == [6, 3, 2]], \"Error\"\nassert     [multiply_num([1, 2, 3, 4, 5, 6]) == [720, 360, 240, 180, 120]], \"Error\"\nprint \"Passed. (Add More Tests to check)\"\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply_num([1,2,3,4,5]) == [120, 60, 40, 30, 24]\nassert     multiply_num([1,2,3,4,5,6,7,8,9,10]) == [4560, 4500, 4440, 4430, 4420, 4410, 4390, 4360, 4350, 4340]\nassert     multiply_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == [840, 1260, 1720, 2640, 3240, 3960, 4500, 5400, 6000, 6300, 6600, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700]\nassert     multiply_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]) == [840, 1260, 1720, 2640, 3240, 3960, 4500, 5400, 6000, 6300, 6600, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700, 6700]\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply_num([4,3,2,1]) == 4*3*2*1\nassert     multiply_num([2,3,4]) == 2*3*4\nassert     multiply_num([3,6,9]) == 3*6*9\nassert     multiply_num([1,2,3,4,5,6,7,8,9,10]) == 1*2*3*4*5*6*7*8*9*10\nassert     multiply_num([11,12,13,14,15,16,17,18,19,20]) == 11*12*13*14*15*16*17*18*19*20\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([1, 2, 3, 4, 5]) == 120\nassert     multiply_num([-1, -2, -3, -4]) == -24\nassert     multiply_num([1, -2, 3, -4]) == -12\nassert     multiply_num([1, 2, 3, 4, -5]) == -120\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(100) == '10000'\nassert     decimal_to_binary(999) == '11111'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(5) == \"101\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\nassert decimal_to_binary(0) == '0'\nassert decimal_to_binary(1) == '1'\nassert decimal_to_binary(2) == '10'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(100) == '1100100', \\\n        'Wrong answer for decimal_to_binary(100)'\nassert     decimal_to_binary(77) == '1011101', \\\n        'Wrong answer for decimal_to_binary(77)'\nassert     decimal_to_binary(0) == '0', \\\n        'Wrong answer for decimal_to_binary(0)'\n\ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(8) == '1000',         \"Decimal to binary conversion failed\"\nassert     decimal_to_binary(13) == '1101',         \"Decimal to binary conversion failed\"\nassert     decimal_to_binary(18) == '1110',         \"Decimal to binary conversion failed\"\nassert     decimal_to_binary(23) == '1111',         \"Decimal to binary conversion failed\"\nassert     decimal_to_binary(31) == '11111',         \"Decimal to binary conversion failed\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(27) == '11001'\nassert     decimal_to_binary(65) == '10101'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(1) == '1', 'not correct'\nassert     decimal_to_binary(0) == '0', 'not correct'\nassert     decimal_to_binary(2) == '10', 'not correct'\nassert     decimal_to_binary(3) == '11', 'not correct'\nassert     decimal_to_binary(4) == '100', 'not correct'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(10) ==     '1010'\nassert     decimal_to_binary(6) ==     '110'\nassert     decimal_to_binary(0) ==     '0'\nassert     decimal_to_binary(1) ==     '1'\nassert     decimal_to_binary(18) ==     '101001010010'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(0) == 1\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(11) == 12\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(23) == 24\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(121) == 122\nassert     next_smallest_palindrome(19) == 19\nassert     next_smallest_palindrome(101) == 102\nassert     next_smallest_palindrome(222) == 223\nassert     next_smallest_palindrome(123456789) == 123456788\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(12) == 11\nassert     next_smallest_palindrome(10) == 9\nassert     next_smallest_palindrome(11) == 101\nassert     next_smallest_palindrome(0) == 0\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(12) == 121\nassert     next_smallest_palindrome(9) == 9\nassert     next_smallest_palindrome(10) == 11\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(123) == 121\nassert     next_smallest_palindrome(456) == 458\nassert     next_smallest_palindrome(1234567890) == 1234567881\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(55) == 56\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(12) == 11\nassert     next_smallest_palindrome(23) == 22\nassert     next_smallest_palindrome(7) == 9\nassert     next_smallest_palindrome(23) == 22\nassert     next_smallest_palindrome(77) == 99\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(1) == 9\nassert     next_smallest_palindrome(13) == 121\nassert     next_smallest_palindrome(21) == 921\nassert     next_smallest_palindrome(9999) == 100001\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(123) == 321\nassert     next_smallest_palindrome(1234) == 4321\nassert     next_smallest_palindrome(12345) == 123451\nassert     next_smallest_palindrome(123456) == 134565\nassert     next_smallest_palindrome(1234567) == 1235678\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(1234) == 4321\nassert     next_smallest_palindrome(12345) == 2134\nassert     next_smallest_palindrome(121333) == 123031\nassert     next_smallest_palindrome(123456789) == 1234566789\nassert     next_smallest_palindrome(12345678910) == 1234567890\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(1) == 9009\nassert     next_smallest_palindrome(8) == 8909\nassert     next_smallest_palindrome(9) == 9001\nassert     next_smallest_palindrome(99) == 9901\nassert     next_smallest_palindrome(101) == 10101\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     kth_element([], 3) == None, 'output is None'\nassert     kth_element([3, 4, 5, 7], 1) == 4, 'output is not 4'\nassert     kth_element([3, 4, 5, 7], 2) == 5, 'output is not 5'\nassert     kth_element([3, 4, 5, 7], 3) == 7, 'output is not 7'\nassert     kth_element([3, 4, 5, 7], 4) == 7, 'output is not 7'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     kth_element([1,2,3,4,5,6,7], 1) == 1\nassert     kth_element([1,2,3,4,5,6,7], 3) == 4\nassert     kth_element([1,2,3,4,5,6,7], 7) == 7\nassert     kth_element([1,2,3,4,5,6,7], 4) == 5\nassert     kth_element([1,2,3,4,5,6,7], 0) == 1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef kth_element_recur(arr, k):\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     kth_element([1, 2, 3, 4, 5], 2) == 4, \"the result is not correct\"\nassert     kth_element([1, 2, 3, 4, 5], 0) == 1, \"the result is not correct\"\nassert     kth_element([1, 2, 3, 4, 5], 5) == 5, \"the result is not correct\"\nassert     kth_element([1, 2, 3, 4, 5], 6) == -1, \"the result is not correct\"\nassert     kth_element([1, 2, 3, 4, 5], -1) == -1, \"the result is not correct\"\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     kth_element([], 1) == None\nassert     kth_element([1, 2, 3], 1) == 1\nassert     kth_element([1, 2, 3, 4], 1) == 1\nassert     kth_element([1, 2, 3, 4, 5], 1) == 1\nassert     kth_element([1, 2, 3, 4, 5], 3) == 3\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     kth_element([1, 2, 3, 4, 5], 3) == 3\nassert kth_element([2, 1, 3, 4, 5], 3) == 4\nassert kth_element([2, 1, 3, 4, 5], 4) == 5\nassert kth_element([2, 1, 3, 4, 5], -1) == 2\nassert kth_element([], 0) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     kth_element([1, 2, 3, 4, 5], 3) == 5\nassert     kth_element([1, 2, 3, 4, 5], 0) == 1\nassert     kth_element([1, 2, 3, 4, 5], 5) == 5\nassert     kth_element([1, 2, 3, 4, 5], 10) == None\nassert     kth_element([1, 2, 3, 4, 5], -1) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         kth_element([1, 3, 4, 5, 6, 7], 3) == 4\nassert         kth_element([1, 3, 4, 5, 6, 7], -1) == 1\nassert         kth_element([1, 3, 4, 5, 6, 7], -10) == -1\nassert         kth_element([1, 3, 4, 5, 6, 7], 7) == 7\nassert         kth_element([1, 3, 4, 5, 6, 7], 8) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel', 'Expected \"snakeToCamel\", but got %s' % (snake_to_camel('snake_to_camel'))\nassert     snake_to_camel('to_camel') == 'toCamel', 'Expected \"toCamel\", but got %s' % (snake_to_camel('to_camel'))\nassert     snake_to_camel('__init__') == 'init', 'Expected \"init\", but got %s' % (snake_to_camel('__init__'))\nassert     snake_to_camel('__init__snake_to_camel') == 'initSnakeToCamel', 'Expected \"initSnakeToCamel\", but got %s' % (snake_to_camel('__init__snake_to_camel'))\nassert     snake_to_camel('snake_to_camel__') =='snakeToCamel', 'Expected \"snakeToCamel\", but got %s' % (snake_to_camel('snake_to_camel__'))\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case_2\") == \"snakeCase2\"\nassert     snake_to_camel(\"snake_case_3\") == \"snakeCase3\"\nassert     snake_to_camel(\"snake_case_4\") == \"snakeCase4\"\nassert     snake_to_camel(\"snake_case_5\") == \"snakeCase5\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case_string')         == 'SnakeCaseString'\nassert     snake_to_camel('snake_2_case_string')     == 'Snake2CaseString'\nassert     snake_to_camel('snake_2_case_string_2')     == 'Snake2CaseString2'\nassert     snake_to_camel('snake_to_camel_case_string')     == 'SnakeToCamelCaseString'\nassert     snake_to_camel('snake_2_case_to_camel_case_string')     == 'Snake2CaseToCamelCaseString'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"camelCase\") == \"camelCase\"\nassert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"____snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"camel_case\") == \"camelCase\"\nassert     snake_to_camel(\"snake_\") == \"snake\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") == \"SnakeToCamel\"\nassert     snake_to_camel(\"4Fg_H_\") == \"4FgH\"\nassert     snake_to_camel(\"this_is_a_sample_test\") == \"ThisIsASampleTest\"\nassert     snake_to_camel(\"snake2camel\") == \"Snake2Camel\"\nassert     snake_to_camel(\"Camel2Snake\") == \"Camel2Snake\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert     snake_to_camel(\"unDERstand_the_rules\") == \"UNDERstandTheRules\"\nassert     snake_to_camel(\"_leading_underscore\") == \"_leadingUnderscore\"\nassert     snake_to_camel(\"__leading_and_trailing_underscore\") == \"leadingAndTrailingUnderscore\"\nassert     snake_to_camel(\"__leading_and_trailing_underscore__\") == \"leadingAndTrailingUnderscore\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('camelCase') == 'CamelCase'\nassert     snake_to_camel('is_camelCase') == 'IsCamelCase'\nassert     snake_to_camel('is_snake_case') == 'IsSnakeCase'\nassert     snake_to_camel('this_is_camelCase') == 'ThisIsCamelCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     snake_to_camel('to_camel')    == 'toCamel', 'incorrect'\nassert     snake_to_camel('codecamel')    == 'CodeCamel', 'incorrect'\nassert     snake_to_camel('you_camel')    == 'YouCamel', 'incorrect'\nassert     snake_to_camel('YouCamel')    == 'YouCamel', 'incorrect'\nassert     snake_to_camel('')    == '', 'incorrect'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel'\nassert     snake_to_camel('to_camel') == 'ToCamel'\nassert     snake_to_camel('snake_to_camel_2') == 'SnakeToCamel2'\nassert     snake_to_camel('snake_to_camel_3') == 'SnakeToCamel3'\nassert     snake_to_camel('to_camel_2') == 'ToCamel2'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     snake_to_camel('python_is_fun')     == 'PythonIsFun', 'Fail to convert'\nassert     snake_to_camel('snake_case')     == 'SnakeCase', 'Fail to convert'\nassert     snake_to_camel('shor_case')     == 'ShortCase', 'Fail to convert'\nassert     snake_to_camel('capital_is_good')     == 'CapitalIsGood', 'Fail to convert'\nassert     snake_to_camel('_is_best')     == '_IsBest', 'Fail to convert'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eulerian_num(0, 0) == 0\nassert     eulerian_num(1, 0) == 0\nassert     eulerian_num(0, 1) == 0\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef eulerian_cycle(n, m, edges):\n    '''\n    Write a function to find an Eulerian cycle in an undirected graph.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     eulerian_num(1,1) == 1\nassert     eulerian_num(2,2) == 2\nassert     eulerian_num(1,2) == 1\nassert     eulerian_num(2,1) == 2\nassert     eulerian_num(4,6) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eulerian_num(10, 10) == 106, 'Wrong eulerian_num(10, 10)'\nassert     eulerian_num(5, 5) == 25, 'Wrong eulerian_num(5, 5)'\nassert     eulerian_num(10, 0) == 1, 'Wrong eulerian_num(10, 0)'\nassert     eulerian_num(3, 0) == 0, 'Wrong eulerian_num(3, 0)'\nassert     eulerian_num(1, 1) == 1, 'Wrong eulerian_num(1, 1)'\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eulerian_num(2, 1) == 3\nassert     eulerian_num(5, 4) == 25\nassert     eulerian_num(5, 6) == 43\nassert     eulerian_num(5, 7) == 83\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eulerian_num(10, 5) == 7\nassert eulerian_num(10, 10) == 14\nassert eulerian_num(10, 11) == 12\nassert eulerian_num(10, 12) == 0\nassert eulerian_num(10, 13) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eulerian_num(3, 4) == 7\nassert     eulerian_num(2, 3) == 4\nassert     eulerian_num(5, 5) == 8\nassert     eulerian_num(7, 7) == 16\nassert     eulerian_num(11, 11) == 25\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eulerian_num(4, 4) == 6\nassert     eulerian_num(4, 5) == 4\nassert     eulerian_num(3, 4) == 3\nassert     eulerian_num(8, 8) == 4\nassert     eulerian_num(8, 9) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     eulerian_num(10, 10) == 26\nassert     eulerian_num(3, 3) == 12\nassert     eulerian_num(0, 2) == 0\nassert     eulerian_num(1, 2) == 1\nassert     eulerian_num(1, 3) == 4\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_sublists([\n                    [1, 3, 2, 7, 5, 4, 6], \n                    [5, 1, 6, 2, 4, 3, 7], \n                    [9, 6, 7, 3, 4, 1, 5, 2, 8], \n                    [3, 7, 1, 2, 4, 8, 5, 9, 6, 0, 4], \n                    [5, 6, 9, 0, 1, 8, 3, 4, 2, 7, 7, 7], \n                    [8, 7, 4, 3, 0, 6, 1, 2, 5, 9, 5, 6], \n                    [6, 9, 3, 2, 1, 4, 7, 5, 8, 0, 7, 8], \n                    [5, 2, 8, 7, 6, 3, 4, 1, 0, 9, 1, 2], \n                    [1, 4, 0, 5, 2, 7, 9, 6, 8, 3, 2, 1], \n                    [2, 5, 3, 8, 4, 1, 7, 6, 9, 0, 1, 4], \n                    [7, 3, 4, 9, 6, 2, 5, 1, 8, 0, 3, 4], \n                    [6, 7, 0, 9, 5, 8, 1, 4, 2, 3, 4, 0], \n                    [5, 6, 8, 1, 4, 2, 7, 3, 9, 0, 5, 3], \n                    [4, 1, 7, 2, 8, 3, 6, 5, 9, 0, 6, 4], \n                    [8, 4, 3, 7, 9, 0, 5, 2, 6, 1, 6, 7], \n                    [6, 2, 1, 7, 5, 3, 4, 8, 9, 6, 7, 8], \n                    [2, 3, 5, 6, 7, 8, 4, 9, 1, 0, 9, 5], \n                    [9, 7, 8, 6, 5, 4, 3, 2, 1, 0, 6, 7], \n                    [9, 5, 6, 7, 2, 1, 4, 0, 3, 8, 3, 4], \n                    [5, 4, 3, 2, 8, 9, 1, 7, 6, 6, 7, 3], \n                    [7, 0, 4, 5, 3, 2, 8, 1, 6, 9, 6, 1], \n                    [4, 6, 1, 9, 7, 3, 5, 2, 8, 0, 2, 7], \n                    [1, 2, 8, 7, 0, 6, 5, 3, 4, 9, 4, 5], \n                    [7, 5, 3, 4, 1, 6, 8, 2, 9, 0, 2, 8], \n                    [3, 4, 9, 1, 2, 7, 8, 6, 5, 2, 4, 1], \n                    [8, 2, 6, 7, 5, 1, 4, 9, 3, 0, 9, 4], \n                    [5, 9, 4, 8, 3, 6, 1, 7, 2, 4, 7, 3], \n                    [9, 1, 7, 6, 2, 8, 3, 4, 0, 5, 4, 3], \n                    [4, 3, 8, 9, 7, 5, 2, 1, 6, 6, 1, 7], \n                    [9, 6, 7, 3, 4, 1, 8, 5, 2, 0, 5, 6], \n                    [4, 5, 2, 7, 8, 9, 6, 1, 3, 3, 1, 2], \n                    [2, 1, 8, 9, 5, 3, 7, 4, 6, 6, 4, 5], \n                    [1, 3, 4, 8, 2, 5, 9, 6, 7, 7, 6, 3], \n                    [3, 4, 5, 9, 6, 2, 8, 1, 7, 7, 1, 9], \n                    [5, 8, 6, 7, 1, 9, 4, 2, 3, 3, 2, 8], \n                    [3, 2, 1, 9, 4, 5, 6, 7, 8, 8, 7, 9], \n                    [7, 6, 9, 4, 1, 8, 3, 5, 2, 2, 5, 6], \n                    [8, 1, 4, 5, 3, 2, 7, 6, 9, 9, 6, 4], \n                    [6, 7, 2, 3, 8, 4, 5, 9, 1, 1, 9, 5], \n                    [1, 9, 5, 6, 4, 7, 3, 8, 2, 2, 8, 5], \n                    [6, 5, 4, 1, 9, 7, 8, 2, 3, 3, 2, 9], \n                    [4, 5, 3, 2, 8, 1, 6, 7, 9, 9, 7, 6], \n                    [2, 8, 9, 7, 6, 3, 1, 4, 5, 5, 4, 1], \n                    [9, 7, 6, 4, 5, 2, 3, 8, 1, 1, 8, 4], \n                    [8, 1, 7, 9, 3, 4, 5, 2, 6, 6, 2, 5], \n                    [5, 6, 1, 2, 4, 7, 8, 3, 9, 9, 3, 8], \n                    [7, 9, 5, 6, 3, 8, 1, 4, 2, 2, 4, 3], \n                    [8, 2, 4, 5, 6, 9, 7, 3, 1, 1, 3, 6], \n                    [9, 6, 7, 8, 1, 2, 3, 4, 5, 5, 4, 2], \n                    [1, 5, 4, 8, 3, 6, 7, 9, 2, 2, 9, 5], \n                    [8, 3, 6, 2, 9, 1, 4, 5, 7, 7, 5, 4], \n                    [4, 2, 9, 5, 6, 7, 8, 1, 3, 3, 1, 9], \n                    [2, 7, 6, 3, 8, 4, 9, 1, 5, 5, 1, 7], \n                    [7, 1, 3, 5, 4, 9, 8, 6, 2, 2, 6, 5], \n                    [9, 4, 5, 8, 2, 6, 7, 1, 3, 3, 1, 4], \n                    [5, 6, 1, 4, 2, 7, 8, 3, 9, 9, 3, 8], \n                    [3, 4, 2, 9, 8, 7, 5, 1, 6, 6, 1, 5], \n                    [8, 9, 7, 6, 1, 4, 3, 2, 5, 5, 2, 4], \n                    [6, 5, 4, 7, 3, 1, 8, 2, 9, 9, 2, 3], \n                    [1, 5, 4, 8, 3, 6, 7, 9, 2, 2, 9, 5], \n                    [5, 6, 1, 4, 2, 7, 8, 3, 9, 9, 3, 8], \n                    [3, 4, 2, 9, 8, 7, 5, 1, 6, 6, 1, 5], \n                    [8, 9, 7, 6, 1, 4, 3, 2, 5, 5, 2, 4], \n                    [5, 6, 1, 4, 2, 7, 8, 3, 9, 9, 3, 8], \n                    [7, 9, 5, 6, 3, 8, 1, 4, 2, 2, 4, 3], \n                    [8, 2, 4, 5, 6, 9, 7, 3, 1, 1, 3, 6], \n                    [9, 6, 7, 8, 1, 2, 3, 4, 5, 5, 4, 1], \n                    [4, 2, 9, 5, 6, 7, 8, 1, 3, 3, 1, 9], \n                    [2, 7, 6, 3, 8, 4, 9, 1, 5, 5, 1, 7], \n                    [7, 1, 3, 5, 4, 9, 8, 6, 2, 2, 6, 5], \n                    [9, 4, 5, 8, 2, 6, 7, 1, 3, 3, 1, 4], \n                    [5, 6, 1, 4, 2, 7, 8, 3, 9, 9, 3, 8],"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_sublists([['def', 'abc'], ['abc', 'xyz'], ['abc', 'xyz']]) == [['def', 'abc'], ['abc', 'xyz'], ['abc', 'xyz']]\nassert     sort_sublists([['abc', 'xyz'], ['abc'], ['abc', 'xyz']]) == [['abc', 'xyz'], ['abc'], ['abc', 'xyz']]\nassert     sort_sublists([['abc', 'xyz'], ['abc'], ['abc', 'xyz'], ['abc']]) == [['abc', 'xyz'], ['abc'], ['abc', 'xyz'], ['abc']]\n\ndef reverse_and_merge(input_list):\n    '''\n    Write a function to merge two list by reversing each sublist, then sorting the resultant sublist.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_sublists([['dog','cat','mouse'],\n                        ['mouse','dog','cat'],\n                        ['cat','mouse','dog']]) == \\\n            [['cat','mouse','dog'],\n                ['dog','cat','mouse'],\n                ['mouse','dog','cat']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_sublists([['h', 'e', 'l', 'l', 'o'], ['h', 'c', 'e', 'l', 'l'], ['o', 'h', 'h', 'e', 'l'], ['l', 'l', 'l', 'h', 'e'], ['e', 'e', 'l', 'l', 'o']]) == [['h', 'c', 'l', 'l', 'e'], ['h', 'e', 'h', 'l', 'l'], ['o', 'l', 'l', 'e', 'e'], ['l', 'l', 'l', 'h', 'e'], ['e', 'e', 'l', 'l', 'o']]\nassert     sort_sublists([['e', 'e', 'h'], ['l', 'o', 'l'], ['o', 'h', 'h'], ['h', 'l', 'l'], ['e', 'l', 'o']]) == [['e', 'h', 'l'], ['e', 'l', 'o'], ['h', 'l', 'o'], ['l', 'o', 'h'], ['o', 'h', 'l']]\nassert     sort_sublists([['o', 'e'], ['l', 'o'], ['o', 'h'], ['h', 'l'], ['e', 'l']]) == [['o', 'h', 'l'], ['o', 'l', 'h'], ['e', 'l', 'o'], ['h', 'l', 'o'], ['l', 'o', 'e']]\nassert     sort_sublists([['e', 'e', 'h'], ['h', 'l', 'l'], ['l', 'o', 'o'], ['o', 'h', 'h'], ['h', 'l', 'l']]) == [['e', 'h', 'l'], ['e', 'l', 'o'], ['h', 'l', 'o'], ['l', 'o', 'h'], ['o', 'h', 'l']]\nassert     sort_sublists([['e', 'e', 'h'], ['h', 'l', 'l'], ['l', 'o', 'o'], ['o', 'h', 'h'], ['h', 'l', 'l'], ['l', 'o', 'o']]) == [['e', 'h', 'l'], ['e', 'l', 'o'], ['h', 'l', 'o'], ['l', 'o', 'h'], ['o', 'h', 'l'], ['l', 'o', 'o']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_sublists([[\"z\", \"a\", \"a\"], [\"a\", \"a\", \"x\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"a\", \"x\", \"x\"]])    == [[\"a\", \"a\", \"x\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"x\", \"x\", \"x\"]]\nassert sort_sublists([[\"z\", \"a\", \"a\"], [\"a\", \"x\", \"z\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"a\", \"x\", \"x\"]])    == [[\"a\", \"a\", \"x\"], [\"a\", \"x\", \"x\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"x\", \"x\", \"x\"]]\nassert sort_sublists([[\"z\", \"a\"], [\"a\", \"z\"], [\"a\", \"z\"], [\"x\", \"z\"], [\"x\", \"a\"], [\"x\", \"x\"]])    == [[\"a\", \"a\"], [\"a\", \"z\"], [\"a\", \"z\"], [\"x\", \"a\"], [\"x\", \"x\"], [\"x\", \"z\"]]\nassert sort_sublists([[\"z\", \"a\", \"a\"], [\"a\", \"x\", \"z\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"a\", \"x\", \"x\"]])    == [[\"a\", \"a\", \"x\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"x\", \"x\", \"x\"]]\nassert sort_sublists([[\"z\", \"a\", \"a\"], [\"a\", \"x\", \"z\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"a\", \"x\", \"x\"]])    == [[\"a\", \"a\", \"x\"], [\"a\", \"z\", \"a\", \"z\"], [\"x\", \"z\", \"x\", \"a\"], [\"x\", \"x\", \"x\", \"x\"]]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_sublists(['abc', 'ab', 'bcd', 'bca', 'cbc', 'abc'])     ==     ['abc', 'abc', 'ab', 'bca', 'bcd', 'cbc']\nassert     sort_sublists(['abc', 'ac', 'abc', 'ac', 'cbc', 'abc'])     ==     ['abc', 'abc', 'ac', 'ac', 'cbc', 'abc']\nassert     sort_sublists(['abc', 'bcd', 'bca', 'cbc', 'abc'])     ==     ['abc', 'abc', 'abc', 'abc', 'bca', 'bcd']\nassert     sort_sublists(['abc', 'ab', 'bcd', 'bca', 'cbc', 'abc'])     ==     ['abc', 'abc', 'abc', 'abc', 'bca', 'bcd']\nassert     sort_sublists(['abc', 'bc', 'ab', 'bcd', 'bca', 'cbc', 'abc'])     ==     ['abc', 'abc', 'abc', 'abc', 'bc', 'bca', 'bcd']\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_sublists([[1,2,3], ['a', 'c', 'b'], ['2', '3', 'a']]) == \\\n        [['2', '3', 'a'], ['a', 'b', 'c'], [1, 2, 3]]\nassert     sort_sublists([[1,2,3,4], ['a', 'c', 'b', 'd']]) == \\\n        [['a', 'b', 'c', 'd'], [1, 2, 3, 4]]\nassert     sort_sublists([['2', '3', 'a'], ['a', 'b', 'c'], [1, 2, 3]]) == \\\n        [['1', '2', '3'], ['a', 'b', 'c'], ['a', 'b', 'c']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_sublists([[], [], []]) == []\nassert     sort_sublists([[1], [2], [], [], [], []]) == [1, 2]\nassert     sort_sublists([[], [1], [2], [], [], []]) == [1, 2]\nassert     sort_sublists([[], [1], [2], [3], [], []]) == [1, 2, 3]\nassert     sort_sublists([[], [1], [2], [], [3], []]) == [1, 2, 3]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_sublists([['hello', 'there', 'you'], ['you', 'are', 'we'], ['we', 'are', 'the', 'bee']]) == [['hello', 'there', 'you'], ['you', 'are', 'we'], ['we', 'are', 'the', 'bee']]\nassert sort_sublists([['hello', 'there', 'you'], ['you', 'are', 'there'], ['there', 'are', 'you', 'we'], ['we', 'are', 'there'], ['there', 'are', 'you']]) == [['hello', 'there', 'you'], ['there', 'are', 'you', 'we'], ['you', 'are', 'there'], ['we', 'are', 'there'], ['there', 'are', 'you']]\nassert sort_sublists([[]]) == [[]]\nassert sort_sublists([['a'], ['b'], ['c']]) == [['a'], ['b'], ['c']]\nassert sort_sublists([['a', 'b'], ['b', 'a'], ['a', 'b']]) == [['a', 'b'], ['b', 'a'], ['a', 'b']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_sublists([['cat', 'Zophie'], ['dog', 'bark'], ['bear', 'hoot']]) == [['Zophie', 'cat'], ['bear', 'dog'], ['hoot', 'bark']]\nassert     sort_sublists([['dog', 'bark'], ['bar'], ['cat']]) == [['bar'], ['cat'], ['dog']]\nassert     sort_sublists([['b', 'a', 'z'], ['a', 'c', 'd'], ['w', 'f','s']]) == [['a', 'b', 'c'], ['d', 'f', 'w'], ['s', 'z', 'w']]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count([True, True, False, True, True]) == 3\nassert     count([True, False, False, False, False]) == 0\nassert     count([False, False, False, False, False]) == 0\nassert     count([True, True, True, True, True, True]) == 6\nassert     count([False, False, False, False, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count([True, True, False, True, False]) == 3\nassert     count([False, False, True, True, False]) == 3\nassert     count([False, False, False, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count([True, False, True, True, False, True, False, True, True, True]) == 3\nassert     count([True, False, True, False, False, True, False, True, False, True]) == 2\nassert     count([False, False, False, False, False]) == 0\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count(True) == 1\nassert     count(False) == 0\nassert     count([True, True, False]) == 2\nassert     count([True, False, True, True, False]) == 3\nassert     count([True, False, True, False, True]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count([True, False, True, True, False, False]) == 3\nassert     count([True, True, False]) == 2\nassert     count([True, False, False]) == 1\nassert     count([True, False, True, True, False, False, False]) == 4\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (count([\"true\", \"true\", \"true\", \"false\", \"true\"]) == 2), \"wrong answer\"\nassert     (count([\"true\", \"true\", \"false\", \"false\", \"true\"]) == 1), \"wrong answer\"\nassert     (count([\"true\", \"false\", \"false\", \"false\", \"true\"]) == 0), \"wrong answer\"\nassert     (count([\"false\", \"false\", \"false\", \"false\", \"false\"]) == 0), \"wrong answer\"\nassert     (count([\"false\", \"true\", \"true\", \"false\", \"false\"]) == 0), \"wrong answer\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count(True) == 1\nassert     count(False) == 0\nassert     count(3) == 0\nassert     count(None) == 0\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count([True, True, False, False, True, True]) == 2\nassert     count([True, False, True, False, False, True]) == 3\nassert     count([True, True, True, True, True, True, True, True, True, True, True, True]) == 10\nassert     count([False, False, False, False, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert __________ == count([True, False, True, True, False, True, False, True, True])\nassert __________ == count([True, False, False, False, False, True, True, True])\nassert __________ == count([True, False, False, False, False, False])\n\n\ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check if the two given strings are anagrams.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count([True, False, False]) == 1\nassert     count([True, True, True]) == 3\nassert     count([False, True, True]) == 2\nassert     count([False, False, True]) == 1\nassert     count([True, False, False, True, True, False]) == 3\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_lists([1,2,3], [4,5,6]) == [1,2,3,4,5,6]\nassert     add_lists(['a', 'b', 'c'], [4,5,6]) == [4,5,6,'a','b','c']\nassert     add_lists([4,5,6], ['a', 'b', 'c']) == [4,5,6,'a','b','c']\nassert     add_lists([4,5,6], []) == [4,5,6]\nassert     add_lists([4,5,6], [1,2,3]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_lists([], (1, 2, 3)) == [(1, 2, 3)]\nassert add_lists([(1, 2, 3)], (4, 5, 6)) == [(1, 2, 3), (4, 5, 6)]\nassert add_lists([(1, 2, 3)], (1, 2, 3, 4, 5)) == [(1, 2, 3), (1, 2, 3, 4, 5)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_lists(['a','b','c'], ('x', 'y', 'z')) == ['a', 'b', 'c', 'x', 'y', 'z']\nassert     add_lists([1, 2], (3, 4)) == [1, 2, 3, 4]\nassert     add_lists(['a'], ('b',)) == ['a', 'b']\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_lists([1, 2, 3], (5, 6, 7)) == [(1, 5), (2, 6), (3, 7)]\nassert     add_lists([3, 4, 5], (6, 7, 8, 9)) == [(3, 6), (4, 7), (5, 8), (6, 9)]\nassert     add_lists([], (1, 2, 3)) == [(1, 2, 3)]\nassert     add_lists([1, 2, 3], []) == [(1, 2, 3)]\n\n\ndef add_lists_2(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    for i in range(0, len(test_list)):\n        result.append((test_list[i], test_tup[i]))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_lists([1, 2, 3], \n                    (4, 5, 6)) == [1, 2, 3, 4, 5, 6], \"Failed. Output %s\" % add_lists([1, 2, 3], \n                                                                                      (4, 5, 6))\nassert     add_lists([11, 22, 33],\n                    (44, 55, 66)) == [11, 22, 33, 44, 55, 66], \"Failed. Output %s\" % add_lists([11, 22, 33], \n                                                                                      (44, 55, 66))\nassert     add_lists([111, 222, 333],\n                    (444, 555, 666)) == [111, 222, 333, 444, 555, 666], \"Failed. Output %s\" % add_lists([111, 222, 333], \n                                                                                                   (444, 555, 666))\nassert     add_lists([1111, 2222, 3333],\n                    (4444, 5555, 6666)) == [1111, 2222, 3333, 4444, 5555, 6666], \"Failed. Output %s\" % add_lists([1111, 2222, 3333], \n                                                                                                            (4444, 5555, 6666))\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_lists([], (2,)) == (2,)\nassert     add_lists(['a', 'b'], (2,)) == ('a', 'b', 2)\nassert     add_lists(['a', 'b', 'c'], (2,)) == ('a', 'b', 'c', 2)\nassert     add_lists(['a', 'b', 'c'], (2, 'd')) == ('a', 'b', 'c', 'd', 2)\nassert     add_lists(['a', 'b', 'c'], (2, 'd', 'e')) == ('a', 'b', 'c', 'd', 'e', 2)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_lists([], ()) ==     ([], ())\nassert     add_lists([1], (2,)) ==     ([1], (2,))\nassert     add_lists([1], (2,3)) ==     ([1, 2], (3,))\nassert     add_lists([1,2], (2,3)) ==     ([1, 2, 2], (3,))\nassert     add_lists([1,2,3], (2,3)) ==     ([1, 2, 3, 2], (3,))\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_lists([1, 2, 3], \n                (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\nassert     add_lists([1, 2, 3], \n                [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     add_lists(['a', 'b', 'c'], \n                ('d', 'e', 'f')) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     add_lists(['a', 'b', 'c'], \n                ('d', 'e', 'f')) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     add_lists(['a', 'b', 'c'], \n                ('d', 'e', 'f')) == ['a', 'b', 'c', 'd', 'e', 'f']\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_lists([1,2,3], [4,5,6])     ==    [1,2,3,4,5,6]\nassert     add_lists(['a','b','c'], ['d','e','f'])     ==    ['a','b','c','d','e','f']\nassert     add_lists([1,2,3], ['a','b','c'])     ==    [1,2,3,'a','b','c']\nassert     add_lists(['a','b','c'], [1,2,3])     ==    ['a',1,2,3,'b','c']\nassert     add_lists([1,2,3], ['a','b','c',4,5,6])     ==    [1,2,3,4,5,6]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_lists([1, 2, 3], [(4, 5), (6, 7)]) ==     [(4, 5), (6, 7), (1, 2, 3)]\nassert     add_lists([0, 1, 2, 3, 4], [(1, 2, 3), (4, 5, 6)]) ==     [(1, 2, 3), (4, 5, 6), (0, 1, 2, 3, 4)]\nassert     add_lists([0, 1, 2, 3, 4], [(1, 2, 3), (4, 5, 6, 7)]) ==     [(1, 2, 3), (4, 5, 6, 7), (0, 1, 2, 3, 4)]\nassert     add_lists([0, 1, 2, 3, 4], [(1, 2, 3), (4, 5)]) ==     [(1, 2, 3), (4, 5), (0, 1, 2, 3, 4)]\nassert     add_lists([0, 1, 2, 3, 4], [(1, 2, 3), (4, 5), (6, 7)]) ==     [(1, 2, 3), (4, 5), (6, 7), (0, 1, 2, 3, 4)]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13,15])==[1,2,3,4,5,6,7,8,9,10,11,13,15]\nassert     merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13,15])==[1,2,3,4,5,6,7,8,9,10,11,13,15]\nassert     merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13,15])==[1,2,3,4,5,6,7,8,9,10,11,13,15]\nassert     merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13,15,16,17,18])==[1,2,3,4,5,6,7,8,9,10,11,13,15,16,17,18]\nassert     merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13,15,16,17,18])==[1,2,3,4,5,6,7,8,9,10,11,13,15,16,17,18]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13]) == [1,2,3,4,5,6,7,8,9,10,11,13]\nassert merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13]) == [1,2,3,4,5,6,7,8,9,10,11,13]\nassert merge_sorted_list([],[],[]) == []\nassert merge_sorted_list([1,3,5,7,9],[],[]) == [1,3,5,7,9]\nassert merge_sorted_list([1,3,5,7,9],[2,4,6,8],[10,11,13]) == [1,2,3,4,5,6,7,8,9,10,11,13]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,2,3],[2,3,4],[6,5,7,9])    == [1,2,2,3,3,4,5,6,6,7,7,9]\nassert     merge_sorted_list([1,2,3],[2,3,4],[])    == [1,2,2,3,3,4]\nassert     merge_sorted_list([],[])    == []\nassert     merge_sorted_list([],[],[])    == []\nassert     merge_sorted_list([],[],[])    == []\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     merge_sorted_list([1,3,5,7],[2,4,6,8],[9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\nassert     merge_sorted_list([], [1,3,5,7],[2,4,6,8]) == [1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([1,3,5,7],[], [2,4,6,8]) == [1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([1,3,5,7],[2,4,6,8],[]) == [1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([1,3,5,7],[2,4,6,8],[9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     merge_sorted_list([1,2,3,4], [5,6,7,8], [9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     merge_sorted_list([0,5,10,15,20], [-2,3,6,7,8,9], [4,9,11,12,13]) == [-2,0,4,5,6,7,8,9,10,11,12,13,15,20]\nassert     merge_sorted_list([0,5,10,15,20], [4,9,11,12,13], [1,2,3,8,14]) == [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20]\nassert     merge_sorted_list([], [], []) == []\nassert     merge_sorted_list([1,2,3,4], [5,6,7,8], [9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     merge_sorted_list([1,3,5],[2,4,6],[3,4,5,6]) == [1,2,3,3,4,4,5,5,6,6]\nassert     merge_sorted_list([1,3,5],[2,4,6],[1,2,3,4,5,6]) == [1,1,2,2,3,3,4,4,5,5,6,6]\nassert     merge_sorted_list([1,3,5],[2,4,6],[1,2,3,4,5,6,7,8]) == [1,1,2,2,3,3,4,4,5,5,6,6,7,8]\nassert     merge_sorted_list([1,3,5],[2,4,6],[1,2,3,4,5,6,7,8,9]) == [1,1,2,2,3,3,4,4,5,5,6,6,7,8,9]\nassert     merge_sorted_list([1,3,5],[2,4,6],[1,2,3,4,5,6,7,8,9,10]) == [1,1,2,2,3,3,4,4,5,5,6,6,7,8,9,10]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,3,5],[2,4,6],[7,9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert     merge_sorted_list([1,3,5],[2,4,6],[7,9,0]) == [0, 1, 2, 3, 4, 5, 6, 7, 9]\nassert     merge_sorted_list([1,3,5],[2,4,6],[7,9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert     merge_sorted_list([1,3,5],[]) == [1, 3, 5]\nassert     merge_sorted_list([1,3,5], []) == [1, 3, 5]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1,3,5,7], [2,4,6,8], [0,9,10,11,12,13]) == [0,1,2,3,4,5,6,7,8,9,10,11,12,13]\nassert merge_sorted_list([1,3,5,7], [2,4,6,8], []) == [1,2,3,4,5,6,7,8]\nassert merge_sorted_list([1,3,5,7], [2,4,6,8], [5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert merge_sorted_list([1,3,5,7], [2,4,6,8], [2,3,5,6,7,8,9]) == [1,2,2,3,4,5,5,6,6,7,7,8,8,9]\n\ndef merge_sort_list(num):\n    '''\n    Write a function to sort a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef merge_sorted_list_1(num1, num2, num3):\n    '''\n    Merge three sorted linked lists into one sorted linked list.\n    '''\n    merged_list = None\n    #write your code here\n    pass\n\ndef merge_sorted_list_2(num1, num2, num3):\n    '''\n    Merge three sorted linked lists into one sorted linked list.\n    '''\n    merged_list = None\n    #write your code here\n    pass\n\ndef merge_sorted_list_3(num1, num2, num3):\n    '''\n    Merge three sorted linked lists into one sorted linked list.\n    '''\n    merged_list = None\n    #write your code here\n    pass\n\ndef merge_sorted_list_4(num1, num2, num3):\n    '''\n    Merge three sorted linked lists into one sorted linked list.\n    '''\n    merged_list = None\n    #write your code here\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     merge_sorted_list([1,3,5,7],[2,4,6,8],[3,4,6,8]) == [1,2,3,3,4,4,5,6,6,7,7,8,8]\nassert     merge_sorted_list([],[],[]) == []\nassert     merge_sorted_list([1,2,3],[],[]) == [1,2,3]\nassert     merge_sorted_list([],[],[1,2,3]) == [1,2,3]\nassert     merge_sorted_list([],[],[1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ns=\"010001100\"\nn=5\n\nprint(odd_Equivalent(s,n))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_Equivalent(s, 1) == 1, 'incorrect function'\nassert     odd_Equivalent(s, 2) == 5, 'incorrect function'\nassert     odd_Equivalent(s, 3) == 10, 'incorrect function'\nassert     odd_Equivalent(s, 4) == 19, 'incorrect function'\nassert     odd_Equivalent(s, 5) == 37, 'incorrect function'\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_Equivalent('1001',2) == 1\nassert     odd_Equivalent('1001',5) == 1\nassert     odd_Equivalent('1001',10) == 2\nassert     odd_Equivalent('1001',50) == 5\n\ndef get_digit(n, d): \n    '''\n    Write a python function to return the d-th digit of n, when n is a non-negative integer.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_Equivalent(\"0011\",\"1\") == 1\nassert     odd_Equivalent(\"0011\",\"2\") == 2\nassert     odd_Equivalent(\"0011\",\"3\") == 1\nassert     odd_Equivalent(\"0011\",\"4\") == 1\nassert     odd_Equivalent(\"0011\",\"5\") == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_Equivalent(\"0\",1) == 1\nassert     odd_Equivalent(\"0\",2) == 1\nassert     odd_Equivalent(\"0\",3) == 1\nassert     odd_Equivalent(\"1\",1) == 1\nassert     odd_Equivalent(\"1\",2) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_Equivalent('00',1) == 2\nassert     odd_Equivalent('00',2) == 5\nassert     odd_Equivalent('00',3) == 10\nassert     odd_Equivalent('00',4) == 19\nassert     odd_Equivalent('00',5) == 40\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef is_interesting(s):\n    '''\n    Given a string, check if it is interesting or not.\n    A string is interesting if it contains all the letters from the string \"abc\", a count of all the characters other than the letters \"abc\" is odd, and both the count of all the characters in the string and the count of all the characters other than the letters \"abc\" are odd.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_Equivalent('1001', 1) == 4\nassert     odd_Equivalent('1001', 2) == 2\nassert     odd_Equivalent('1001', 3) == 2\nassert     odd_Equivalent('1001', 4) == 2\nassert     odd_Equivalent('1001', 5) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_Equivalent('0101',0)==2\nassert     odd_Equivalent('0101',1)==1\nassert     odd_Equivalent('0101',2)==1\nassert     odd_Equivalent('0101',3)==0\nassert     odd_Equivalent('0101',4)==0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_Equivalent( '01101000101', 1)         == 5\nassert     odd_Equivalent( '01101000101', 2)         == 3\nassert     odd_Equivalent( '01101000101', 3)         == 1\nassert     odd_Equivalent( '01101000101', 4)         == 0\nassert     odd_Equivalent( '01101000101', 5)         == 0\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1,2,3], [4,5,6,7], [1,2,3,4,5,6]]) == [1,2,3,4,5,6]\nassert     common_in_nested_lists([[1,2,3], [4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8]]) == [1,2,3,4,5,6,7,8]\nassert     common_in_nested_lists([[1,2,3], [4,5,6,7,8], [1,2,3]]) == []\nassert     common_in_nested_lists([[1,2,3,4], [2,3,4,5,6], [1,2,3,4,5,6]]) == [1,2,3,4,5,6]\nassert     common_in_nested_lists([]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1,2,3,4] == common_in_nested_lists([[1,2,3,4],[1,2,4,5]])\nassert     [1,2,3] == common_in_nested_lists([[1,2],[1,2,3]])\nassert     [2,4] == common_in_nested_lists([[2,4],[2,4,6,7]])\nassert     [] == common_in_nested_lists([[],[2,4]])\nassert     [7] == common_in_nested_lists([[[3,2,4,1],[7,5,6,7]]])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([['a', 'b', 'c'], ['x', 'y'], ['z']]) == ['a', 'x', 'z'], 'First'\nassert     common_in_nested_lists([[['a', 'b'], ['c', 'd']], [], [['x', 'y'], ['z'], ['w', 'z']]]) == ['a', 'c', 'x', 'w'], 'Second'\nassert     common_in_nested_lists([[['a', 'b'], ['c', 'd']], [['x', 'y'], ['z'], ['w', 'z']]]) == ['a', 'c', 'x', 'w'], 'Third'\nassert     common_in_nested_lists([[], [], [['x', 'y'], ['z'], ['w', 'z']]]) == ['x', 'y', 'z', 'w'], 'Fourth'\nassert     common_in_nested_lists([['x', 'y'], ['z'], [['w', 'z']]]) == ['x', 'y', 'z', 'w'], 'Fifth'\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [2, 3, 4], [4, 5, 6]]) == [2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [3, 4, 5]]) == [3]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]]) == [3, 4, 5]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists(nested_lists_1) == [3, 4, 5, 6, 7, 8]\nassert     common_in_nested_lists(nested_lists_2) == [1, 2]\nassert     common_in_nested_lists(nested_lists_3) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     common_in_nested_lists(nested_lists_4) == [1, 2, 3]\nassert     common_in_nested_lists(nested_lists_5) == [1, 2]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1]\nassert     common_in_nested_lists([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1]\nassert     common_in_nested_lists([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert     common_in_nested_lists([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     common_in_nested_lists([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4]]) == [1, 2, 3]\n\n'''\nGiven two strings s and t, determine if they are isomorphic.\nTwo strings are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters. \nNo two characters may map to the same character but a character may map to itself.\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists(\n                    [1,2,3,4,5],\n                    [1,2,3,4,5],\n                    [1,2,3,4,5]\n                    ) == [1,2,3,4,5], \"Failed to find the common elements between the given nested lists.\"\nassert     common_in_nested_lists(\n                    [1,2,3,4],\n                    [1,2,3,4],\n                    [1,2,3]\n                    ) == [1,2,3], \"Failed to find the common elements between the given nested lists.\"\nassert     common_in_nested_lists(\n                    [1,2,3,4,5],\n                    [1,2,3,4,5],\n                    [1,2,3]\n                    ) == [1,2,3], \"Failed to find the common elements between the given nested lists.\"\nassert     common_in_nested_lists(\n                    [1,2,3,4,5,6,7],\n                    [1,2,3,4,5,6,7],\n                    [1,2,3]\n                    ) == [1,2,3], \"Failed to find the common elements between the given nested lists.\"\nassert     common_in_nested_lists(\n                    [1,2,3,4,5],\n                    [1,2,3,4,5,6,7],\n                    [1,2,3]\n                    ) == [1,2,3], \"Failed to find the common elements between the given nested lists.\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]) == [4, 7, 12]\nassert     common_in_nested_lists([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]) == [4, 7, 12]\nassert     common_in_nested_lists([[1, 2], [3, 4], [5, 6], [7, 8]]) == [4]\nassert     common_in_nested_lists([[1, 2], [3, 4], [5, 6], [7, 8]]) == [4]\nassert     common_in_nested_lists([[1, 2], [3, 4], [5, 6], [7, 8]]) == [4]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n'''\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_integer('-128')\nassert     check_integer('-50')\nassert     check_integer('-10')\nassert     check_integer('-16')\nassert     check_integer('-1')\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_integer('123') == True, \"123 is an integer\"\nassert     check_integer('123a') == False, \"123a is not an integer\"\nassert     check_integer('-123') == True, \"-123 is an integer\"\nassert     check_integer('-123a') == False, \"-123a is not an integer\"\nassert     check_integer('1234a') == False, \"1234a is not an integer\"\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_integer(0)\nassert     check_integer('  ') == 0\nassert     check_integer('123') == 123\nassert     check_integer('-') == 0\nassert     check_integer('0x123') == 123\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_integer('-12') == True\nassert     check_integer('-10') == True\nassert     check_integer('0') == True\nassert     check_integer('12') == True\nassert     check_integer('10') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_integer(\"1\") == True\nassert     check_integer(\"3\") == True\nassert     check_integer(\"0\") == True\nassert     check_integer(\"-3\") == True\nassert     check_integer(\"-0\") == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('112') == True\nassert     check_integer('abc') == False\nassert     check_integer('1a2') == False\nassert     check_integer('1.2') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_integer('+912356789') == True\nassert     check_integer('+91235678') == False\nassert     check_integer('+9123567') == False\nassert     check_integer('+912356789123') == False\nassert     check_integer('+91235678912') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_integer('12345') == True, \"test1\"\nassert     check_integer('12a345') == False, \"test2\"\nassert     check_integer('$2') == True, \"test3\"\nassert     check_integer('2e1') == True, \"test4\"\nassert     check_integer('3e-1') == True, \"test5\"\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_integer(\"123\") == True\nassert     check_integer(\"1234\") == False\nassert     check_integer(\"12345\") == False\nassert     check_integer(\"123456\") == True\nassert     check_integer(\"-123\") == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     empty_dit([{}, {}, {}]) == True\nassert     empty_dit([{1: 2, 3: 4, 5: 6}, {}, {}]) == True\nassert     empty_dit([{1: 2, 3: 4}, {}, {}]) == False\nassert     empty_dit([{1: 2, 3: 4}, {1: 2, 3: 4}, {}]) == False\nassert     empty_dit([{}, {1: 2, 3: 4}, {}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     empty_dit([{'a':1,'b':2},{'a':3,'b':4},{'a':5,'b':6}]) == False\nassert     empty_dit([{'a':1,'b':2},{'a':1,'b':2}]) == False\nassert     empty_dit([{},{}]) == True\nassert     empty_dit([{'a':1,'b':2},{'a':1,'b':2,'c':3}]) == False\nassert     empty_dit([]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     empty_dit( [{},{},{}] ) == True\nassert     empty_dit( [{1: 'a'},{},{}] ) == False\nassert     empty_dit( [{},{},{1: 'a'}] ) == False\nassert     empty_dit( [{1: 'a', 2: 'b'},{},{}] ) == False\nassert     empty_dit( [{1: 'a', 2: 'b'},{1: 'c'},{}] ) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     empty_dit([{}, {}, {}]) == True\nassert     empty_dit([{1: 'a', 2: 'b'}, {1: 'a', 2: 'b'}, {1: 'a', 2: 'b'}]) == True\nassert     empty_dit([{1: 'a', 2: 'b'}, {}, {1: 'a', 2: 'b'}]) == False\nassert     empty_dit([{}, {}, {}]) == True\nassert     empty_dit([{}, {}, {1: 'a', 2: 'b'}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{'a':'b','c':'d'},{'e':'f','g':'h'},{'i':'j'}]) == False\n\ndef fun(l,x):\n    for i in l:\n        if not isinstance(i,type(x)):\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     empty_dit([{},{}]) == True,    'Expected: True'\nassert     empty_dit([{1:2,3:4},{5:6,7:8}]) == False, 'Expected: False'\nassert     empty_dit([{'name':'xyz', 'id':'1234'},{'name':'abc', 'id':'5678'}]) == False, 'Expected: False'\nassert     empty_dit([{'name':'xyz', 'id':'1234'},{'name':'xyz', 'id':'1234'}]) == True, 'Expected: True'\nassert     empty_dit([{'name':'xyz', 'id':'1234'},{'name':'xyz', 'id':'5678'}]) == False, 'Expected: False'\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     empty_dit([{}, {'a': 1}, {'b': 2, 'c': 3}]) == True\nassert     empty_dit([{}, {'a': 1}, {'b': 2, 'c': 3, 'd': 5}]) == False\nassert     empty_dit([{'a': 1}, {'b': 2, 'c': 3}, {'d': 5}]) == False\nassert     empty_dit([{'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'d': 5}]) == False\n\n\ndef get_diff_dict(dict1, dict2):\n    '''\n    Write a function to get a dictionary that contains the keys that appear in either of the dictionaries, but not in both.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:2, 3:4}, {}, {}]) == True\nassert     empty_dit([{}, {1:2, 3:4}, {}]) == False\nassert     empty_dit([{1:2}, {1:2, 3:4}, {}]) == False\nassert     empty_dit([{}, {}, {}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1:2},{},{}]) == True\nassert     empty_dit([{},{},{1:2}]) == False\nassert     empty_dit([{1:2},{1:2},{1:2}]) == True\nassert     empty_dit([{},{},{}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     empty_dit([{}, {}])\nassert     empty_dit([{1: 1}, {1: 1}])\nassert     not empty_dit([{1: 1}, {1: 2}])\nassert     not empty_dit([{}, {2: 2}])\nassert     empty_dit([{}, {}])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((5,2,3,2,1)) == 60\nassert     tuple_to_int((3,2,1,2,3,4,5)) == 6\nassert     tuple_to_int((8,2,4,3,8,9,9)) == 45\n\n\ndef merge_sort(nums):\n    '''\n    Write a function that takes in a list of integers and returns a list of the same length where each\n    element is the product of all the elements in the input list except the element at that index.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1,2,3)) == 12\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1,2,3,4)) == 123\nassert     tuple_to_int((-1,2,3)) == -123\nassert     tuple_to_int((0,)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 123\nassert     tuple_to_int((7, 2, 3)) == 732\nassert     tuple_to_int((7, 2, 4, 3)) == 724\nassert     tuple_to_int((7, 2, 4, 5)) == 7245\nassert     tuple_to_int((7, 2, 4, 5, 6)) == 7246\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,2,3,4)) == 15\nassert     tuple_to_int((1,3,3,4)) == 12\nassert     tuple_to_int((1,3,4)) == 12\nassert     tuple_to_int((1,4)) == 12\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         (tuple_to_int((1, 2, 3)) == 123)\nassert         (tuple_to_int((5, 2, 8)) == 618)\nassert         (tuple_to_int((1, 2, 3, 4, 5, 6, 7)) == 1234567)\nassert         (tuple_to_int((1, 2, 3, 1, 2, 3)) == 123)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,1,1)) == 8\nassert     tuple_to_int((4,4,4,4,4,4)) == 80\n\n'''\nGiven a sorted array of integers, find the starting and ending position of a given target value.\nYour algorithm's runtime complexity must be in the order of O(log n).\nIf the target is not found in the array, return [-1, -1].\n'''\ndef find_target(nums, target):\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((1, 2, 3, 1)) == 6\nassert     tuple_to_int((0, 0, 0, 0)) == 0\nassert     tuple_to_int((3, 3, 3, 3)) == 9\nassert     tuple_to_int((1, 1, 1, 1, 1)) == 1\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 1234\nassert     tuple_to_int((0,0,0,0)) == 0\nassert     tuple_to_int((0,2,0,0)) == 0\nassert     tuple_to_int((2,0,0,0)) == 0\nassert     tuple_to_int((0,0,1,2)) == 12\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tuple_to_int((1,2,3)) == 123\nassert     tuple_to_int((1,2,3,4)) == 1234\nassert     tuple_to_int((0,0,0,0)) == 0\nassert     tuple_to_int((1,0,2,3,4)) == 12345\nassert     tuple_to_int((0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 1536\nassert     tuple_to_int((1, 2, 3, 4, 6)) == 1008\nassert     tuple_to_int((1, 2, 3, 4, 8)) == 1440\nassert     tuple_to_int((1, 2, 3, 4, 10)) == 1600\nassert     tuple_to_int((1, 2, 3, 4, 16)) == 1728\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     list_to_float([1,2,'a'])    == [1,2,1.0]\nassert     list_to_float([1,2.0,'a'])    == [1,2.0,1.0]\nassert     list_to_float([1,2.0,'a',[1,2,'a']])    == [1,2.0,1.0,1.0,2.0,1.0,1.0]\nassert     list_to_float([1,2.0,'a',[1,2,'a']])    == [1,2.0,1.0,1.0,2.0,1.0,1.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     list_to_float(['a', 'b', 'c', 'd', 'e']) == [float(i) for i in ['a', 'b', 'c', 'd', 'e']]\nassert     list_to_float(['abc', 'd']) == [float(i) for i in ['abc', 'd']]\nassert     list_to_float([]) == []\nassert     list_to_float([[1, 2], [3, 4], [5, 6]]) == [float(i) for i in [[1, 2], [3, 4], [5, 6]]]\n\ndef list_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to ints.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     list_to_float([['3', '4'], 3, [3, 4]]) == [3, 4, 3, 4]\nassert     list_to_float([[3, 4], ['3', '4'], 3]) == [3, 4, 3, 4]\nassert     list_to_float([[3, 4], 3, ['3', '4']]) == [3, 4, 3, 4]\nassert     list_to_float([['3', '4'], [3, 4], [3, 4]]) == [3, 4, 3, 4]\nassert     list_to_float([[3, 4], ['3', '4'], [3, 4], [3, 4]]) == [3, 4, 3, 4]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list_to_float([[1,'a'],2,3]) == [1.0, 'a', 2.0, 3.0]\nassert     list_to_float([[1, 2, 3], '4']) == [1, 2, 3, 4.0]\nassert     list_to_float([[1, 2, 3], [3.3, '4', 5]]) == [1, 2, 3, 3.3, '4', 5.0]\nassert     list_to_float([[1, 2], [3, 4], [5, 6], [7, 8], [9, 'a']]) == [1, 2, 3, 4, 5, 6, 7, 8, 9.0, 'a']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1, 2.0, '3', 4.0]     == list_to_float([[1, 2], [3, 4]])\nassert     [1, 2.0, '3']         == list_to_float([[1, '2'], [3, 4]])\nassert     [1, 2.0, '3', 4]    == list_to_float([[1, '2', 3], [4, 5]])\nassert     [1, 2, 3, 4]         == list_to_float([[1, 2, 3], [4, 5]])\nassert     [1, 2, 3, 4]         == list_to_float([[1, 2, 3], [4, 5, 6]])\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [0, 1.1, 1.2, 'a', 'b', None, 'c'] == list_to_float([\n        [0, 1.1, 1.2, 'a', 'b', None, 'c'],\n        [0, 1.1, 1.2, 'a', 'b', None, 'c'],\n        [0, 1.1, 1.2, 'a', 'b', None, 'c'],\n        [0, 1.1, 1.2, 'a', 'b', None, 'c'],\n        [0, 1.1, 1.2, 'a', 'b', None, 'c'],\n        [0, 1.1, 1.2, 'a', 'b', None, 'c'],\n        [0, 1.1, 1.2, 'a', 'b', None, 'c']\n    ])\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     list_to_float([['one'], ['two', 'three'], ['four', 'five']]) == [1.0, 2.0, 4.0, 5.0]\nassert     list_to_float([['one'], ['two', 'three'], ['four']]) == [1.0, 2.0, 4.0]\nassert     list_to_float([['one'], ['two', 'three'], [4]]) == [1.0, 2.0, 4.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     list_to_float([[\"20.0\"],[1,2,3]]) == [20.0,1.0,2.0,3.0]\nassert     list_to_float([[\"20.0\"],[1,2,3]])!= [20.0,1.0,2.0,3.0]\nassert     list_to_float([[\"20.0\", \"23.0\"],[1,2,3]]) == [20.0,23.0,1.0,2.0,3.0]\nassert     list_to_float([[\"20.0\", \"23.0\"],[1,2,3]])!= [20.0,23.0,1.0,2.0,3.0]\n\n\ndef list_to_str(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to strings.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     list_to_float( [[], [], [], []] )     == [], \"Not passed the test.\"\nassert     list_to_float( [[1], [2], [], []] )     == [1.0, 2.0], \"Not passed the test.\"\nassert     list_to_float( [[1.0, 1.0], [2.0, 2.0], [], []] )     == [1.0, 2.0], \"Not passed the test.\"\nassert     list_to_float( [[-1, -1], [2, 2], [], [-1, -1]] )     == [float('-inf'), 2.0], \"Not passed the test.\"\nassert     list_to_float( [[-1, -1], [2, 2], [], [-1, -1]] )     == [float('-inf'), 2.0], \"Not passed the test.\"\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     list_to_float([1, 2, 3]) == [1.0, 2.0, 3.0]\nassert     list_to_float([['a', 'b'], [1, 2, 3]]) == [['a', 'b'], [1.0, 2.0, 3.0]]\nassert     list_to_float([['a', 1], [1, 2, 3]]) == [['a', 1.0], [1.0, 2.0, 3.0]]\nassert     list_to_float([[1, 'a'], [1, 2, 3]]) == [[1.0, 'a'], [1.0, 2.0, 3.0]]\n\ndef rand_list_to_float(test_list, num_elements):\n    '''\n    Write a function to convert a list of lists of length num_elements to a list of floats.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef list_to_string(string_list): \n    '''\n    Write a function to convert a list of strings back to a single string.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_list(\"\")    == [\"\"]\nassert     string_to_list(\"1\")    == [\"1\"]\nassert     string_to_list(\"1 2\")    == [\"1\", \"2\"]\nassert     string_to_list(\"1 2 3\")    == [\"1\", \"2\", \"3\"]\nassert     string_to_list(\"1 2 3 4\")    == [\"1\", \"2\", \"3\", \"4\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello world') == ['hello', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     'a b c' == string_to_list('a b c')\nassert     ['a','b','c'] == string_to_list('a b c')\nassert     ['a','', 'b','', 'c'] == string_to_list('a b c')\n\ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a single string.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_list('hello') == ['hello']\nassert string_to_list('hello world') == ['hello', 'world']\nassert string_to_list('hello world world') == ['hello', 'world', 'world']\nassert string_to_list('hello, world') == ['hello', 'world']\nassert string_to_list('hello, world world') == ['hello', 'world', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     ['hello', 'world'] == string_to_list('hello world')\nassert     ['hello', 'world', 'hello', 'world', 'hello', 'world'] == string_to_list('hello world hello world hello world hello world')\nassert     ['hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world'] == string_to_list('hello world hello world hello world hello world')\nassert     ['hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world'] == string_to_list('hello world hello world hello world hello world hello world')\nassert     ['hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world'] == string_to_list('hello world hello world hello world hello world hello world hello world')\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello') == ['hello']\nassert     string_to_list('hello world the end') == ['hello', 'world', 'the', 'end']\nassert     string_to_list('hello') == ['hello']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([1,2,3,4,5,5]) == 5\nassert     search([1,2,3,4,5,6]) == -1\nassert     search([1,2,3,4,5,6,7]) == -1\nassert     search([]) == -1\nassert     search([2]) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([2,3,3,3,6,6,7,8,9,9]) == 6\nassert     search([2,3,3,3,6,6,7,8,9,9]) == 9\n\n\n\n'''\nThe function below checks if two numbers are similar.\n\nTwo numbers are similar if they differ in only one bit.\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([1,1,2,3,3,4,4,5,5,5,6,7,7,7,7,7,7,7]) == 5\nassert     search([1,1,2,3,3,4,4,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\narr = [1, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6]\n\nprint search(arr)"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     search([0,0,0,1,1,2,3,3,4,4,5,5]) == 4\nassert     search([0,0,0,0,1,1,2,2,3,3,4,5]) == 3\nassert     search([0,0,0,0,1,1,2,2,3,3,4,5,6,6,7,7]) == 3\nassert     search([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == 0\nassert     search([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     search([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 2\nassert     search([]) == -1\nassert     search([1, 1, 2, 2, 3, 3, 4]) == -1\nassert     search([3, 3, 3, 3, 3]) == 3\nassert     search([1, 1, 2, 2, 2, 2, 2]) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     search([1,1,1,2,3,3]) == 2\nassert     search([1,1,2,2,3,3]) == 3\nassert     search([1,1,2,2,3,3]) == 3\nassert     search([1,1,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     search([1,1,1,1,1,2,2,2,2,2,2]) == 2\nassert     search([1,2,3,3,3,4,4,4,4,4,5,5]) == 4\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     search([1,2,3,1,3,5,2]) == 3\nassert search([1,2,2,3,3,3,3,4,4]) == 3\nassert search([1,1,2,2,2,3,3]) == 2\nassert search([1,1,2,2,2,3,3]) == 2\nassert search([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     search([0,1,2,3,4,4,5,5,6,6,7,7,8,8]) == 4\nassert     search([1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,6,6,6,7,7,7,8,8]) == 5\nassert     search
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(1,2), (2,3), (3,4), (4,5)]) == (2, 3, 4, 5)\nassert     max_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) == (18, 10, 8, 10)\nassert     max_product_tuple([(1,2), (2,3), (3,4), (4,5)]) == (4, 5)\nassert     max_product_tuple([(0,0), (0,0)]) == (0, 0)\nassert     max_product_tuple([(1,2), (2,3), (3,4), (4,5)]) == (8, 10)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(3,4),(1,2),(5,6),(7,8)]) == 58\nassert     max_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == 36\nassert     max_product_tuple([(2,-3),(3,4),(5,-6),(7,-8)]) == 13\nassert     max_product_tuple([(1,-2),(3,4),(5,-6),(7,-8)]) == -9\nassert     max_product_tuple([(1,2),(3,4),(5,6),(7,8),(9,-10)]) == -10\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(1, 1), (0, -1), (-1, 0), (2, 2), (3, 3), (5, 5), (2, -1)]) == 30\nassert     max_product_tuple([(0, 2), (2, 2)]) == 4\nassert     max_product_tuple([(0, 3), (3, 3)]) == 9\nassert     max_product_tuple([(1, -1), (-1, -1)]) == -1\nassert     max_product_tuple([(0, -2), (-2, 0), (3, -3), (5, -5), (2, -1)]) == 15\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(1,2), (3,4), (3,9), (5,4), (7,5)]) == (15, 25)\nassert     max_product_tuple([(9,9)]) == (81, 81)\nassert     max_product_tuple([(5,6), (9,10), (9,9), (4,1), (8,3), (6,6)]) == (72, 180)\n\ndef max_product(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(1, 4), (6, 1), (2, 3), (3, -1), (-1, -2), (-2, -3)]) == 3, 'fails for [(-1, -2), (-2, -3), (1, 4), (6, 1), (2, 3), (3, -1)]'\nassert     max_product_tuple([(1, -2), (0, -3), (2, 3), (0, -1), (-3, -1), (-1, -2)]) == 3, 'fails for [(-3, -1), (-1, -2), (0, -3), (2, 3), (0, 1), (1, 2)]'\nassert     max_product_tuple([(0, 1), (1, 2), (1, 1)]) == 2, 'fails for [(0, 1), (1, 2), (1, 1)]'\nassert     max_product_tuple([(0, -1), (1, -2), (1, -1)]) == -1, 'fails for [(-1, -1), (0, -2), (1, -1)]'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(1, 5), (6, 7), (2, 4), (7, 8), (3, 3)]) == (18, 6)\nassert     max_product_tuple([(1, 5), (6, 7), (2, 4), (7, 8), (3, -3)]) == (18, -6)\nassert     max_product_tuple([(1, -5), (6, 7), (2, 4), (7, 8), (3, 3)]) == (18, 6)\nassert     max_product_tuple([(1, -5), (6, 7), (2, 4), (7, 8), (3, -3)]) == (18, -6)\nassert     max_product_tuple([(-1, -5), (6, 7), (2, 4), (7, 8), (3, 3)]) == (18, 6)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (max_product_tuple([(1, 2), (3, 4), (10, 2)]) == 16)\nassert     (max_product_tuple([(1, 3), (4, 5), (10, 2)]) == 80)\nassert     (max_product_tuple([(1, 3), (4, 5), (10, -2)]) == 30)\nassert     (max_product_tuple([(1, -3), (4, 5), (10, -2)]) == 60)\nassert     (max_product_tuple([(1, -3), (4, 5), (10, -2), (1, -3)]) == 40)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(3, 4), (1, 2), (5, 6), (2, 1)]) == 60,'should be 60'\nassert     max_product_tuple([(3, 4), (1, 2), (5, 6), (2, 1), (-2, -2)]) == 36,'should be 36'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_product_tuple(    ((3, 4), (-3, 1), (3, -2), (-3, -1), (-1, 2), (1, -2), (-1, -2), (-2, 3), (2, -3), (2, 3), (-2, -3))) ==    7\nassert     max_product_tuple(    ((1, -2), (1, 2), (2, 3), (3, 4), (-1, -1))) ==    2\nassert     max_product_tuple(    ((1, -1), (1, 1), (1, -1), (-1, -1), (-1, 1), (-1, 1), (-1, -1), (1, -1), (1, 1), (1, 1), (1, -1), (1, -1), (1, -1), (1, -1))) ==    1\nassert     max_product_tuple(    ((1, 1), (1, -1), (1, 1), (-1, 1), (-1, -1), (-1, 1), (-1, -1), (-1, -1), (-1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1), (1, -1)"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1, 10), (2, 3), (4, 8), (5, 12)]) == 60\nassert     max_product_tuple([(10, 10), (2, 3), (4, 8), (5, 12)]) == 120\nassert     max_product_tuple([(1, 10), (2, -3), (4, 8), (5, -12)]) == -60\nassert     max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 0\nassert     max_product_tuple([]) == None\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (amicable_numbers_sum(1) == 0)\nassert     (amicable_numbers_sum(10) == 9)\nassert     (amicable_numbers_sum(100) == 99)\nassert     (amicable_numbers_sum(1000) == 998)\nassert     (amicable_numbers_sum(10000) == 9999)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(10000) == 17\nassert     amicable_numbers_sum(10000) == 1204\nassert     amicable_numbers_sum(10000) == 516\nassert     amicable_numbers_sum(10000) == 2055\nassert     amicable_numbers_sum(10000) == 3764\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef compute_fibonacci_range_for(n):\n    '''\n    Write a function to compute the Fibonacci sequence from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(5) == 30\nassert     amicable_numbers_sum(10) == 220\nassert     amicable_numbers_sum(1000) == 765"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(10000) == 220\nassert     amicable_numbers_sum(10000) == 284\n\ndef amicable_numbers_product(limit):\n    '''\n    Write a function to compute the product of all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(10000) == 220\n\n\ndef amicable_numbers_product(limit):\n    '''\n    Write a function to product all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(100) == 495\nassert     amicable_numbers_sum(200) == 1210\nassert     amicable_numbers_sum(1000) == 409\nassert     amicable_numbers_sum(10000) == 2203\nassert     amicable_numbers_sum(50000) == 8497\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(10000) == 47900\nassert     amicable_numbers_sum(10000) == 47900\nassert     amicable_numbers_sum(10000) == 47900\nassert     amicable_numbers_sum(10000) == 47900\nassert     amicable_numbers_sum(10000) == 47900\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     amicable_numbers_sum(10000) == 1229\nassert     amicable_numbers_sum(5000) == 14129\nassert     amicable_numbers_sum(100) == 1234\nassert     amicable_numbers_sum(200) == 1441\nassert     amicable_numbers_sum(1000) == 7687\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     angle_complex(complex(1,2),complex(1,2)) == 0\nassert     angle_complex(complex(1,1),complex(1,1)) == 0\nassert     angle_complex(complex(1,1),complex(-1,1)) == cmath.pi\nassert     angle_complex(complex(1,1),complex(-1,2)) == cmath.pi/2\nassert     angle_complex(complex(-1,2),complex(1,2)) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     angle_complex(complex(2,1),complex(0,1)) == complex(1.5707963267948966, 0.0)\nassert     angle_complex(complex(0,1),complex(2,1)) == complex(1.5707963267948966, 0.0)\nassert     angle_complex(complex(0,-1),complex(2,1)) == complex(-1.5707963267948966, 0.0)\nassert     angle_complex(complex(0,1),complex(-2,1)) == complex(3.141592653589793, 0.0)\nassert     angle_complex(complex(0,1),complex(0,1)) == complex(0.0, 0.0)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     angle_complex(1j,-1j) == 0\nassert     angle_complex(1j,0) == cmath.pi/2\nassert     angle_complex(1j,1j) == cmath.pi\nassert     angle_complex(0,1) == cmath.pi/4\nassert     angle_complex(-1,1) == cmath.pi/4\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef sqrt_complex(a,b):\n    '''\n    Write a function to get the square root of a complex number.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     angle_complex(complex(1,0),complex(1,0)) == 0\nassert     angle_complex(complex(1,0),complex(1,1)) == cmath.pi/2\nassert     angle_complex(complex(1,-1),complex(1,1)) == cmath.pi\nassert     angle_complex(complex(1,1),complex(1,-1)) == cmath.pi\nassert     angle_complex(complex(1,1),complex(-1,-1)) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     angle_complex(complex(1,1),complex(1,1))==90\nassert     angle_complex(complex(-1,1),complex(1,1))==135\nassert     angle_complex(complex(1,1),complex(-1,1))==45\nassert     angle_complex(complex(1,1),complex(-1,-1))==0\nassert     angle_complex(complex(1,-1),complex(1,1))==180\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     angle_complex(complex(1,0),complex(0,1)) == cmath.pi/2\nassert     angle_complex(complex(0,1),complex(-1,0)) == cmath.pi\nassert     angle_complex(complex(-1,0),complex(0,-1)) == cmath.pi\nassert     angle_complex(complex(1,0),complex(0,1)) == cmath.pi/2\nassert     angle_complex(complex(0,1),complex(0,-1)) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     abs(angle_complex(complex(1,0),complex(1,0)) - (cmath.pi/2)) < 0.0001\nassert     abs(angle_complex(complex(1,0),complex(0,1)) - (cmath.pi)) < 0.0001\nassert     abs(angle_complex(complex(1,0),complex(0,-1)) - (3*cmath.pi/2)) < 0.0001\nassert     abs(angle_complex(complex(-1,0),complex(1,0)) - (cmath.pi)) < 0.0001\nassert     abs(angle_complex(complex(-1,0),complex(0,1)) - (cmath.pi/2)) < 0.0001\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     angle_complex(cmath.rect(1, 0), cmath.rect(1, 0)) == 0\nassert     angle_complex(cmath.rect(1, 1), cmath.rect(1, 1)) == cmath.pi / 4\nassert     angle_complex(cmath.rect(1, -1), cmath.rect(1, -1)) == 3 * cmath.pi / 4\nassert     angle_complex(cmath.rect(1, -1), cmath.rect(1, 1)) == cmath.pi / 2\nassert     angle_complex(cmath.rect(1, 1), cmath.rect(-1, 1)) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     angle_complex(1+2j,1+3j) == cmath.pi/4.0\nassert     angle_complex(1+2j,1-2j) == -cmath.pi/4.0\nassert     angle_complex(1-2j,1+3j) == -cmath.pi/4.0\nassert     angle_complex(1-2j,1-2j) == cmath.pi/4.0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_length
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_length(\"01101001\") == 2, \"Wrong answer\"\nassert     find_length(\"0010011\") == 3, \"Wrong answer\"\nassert     find_length(\"10011001\") == 1, \"Wrong answer\"\nassert     find_length(\"11111\") == 0, \"Wrong answer\"\nassert     find_length(\"0010001\") == 4, \"Wrong answer\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_length('010110111') == 4, \"Wrong answer for find_length('010110111')\"\nassert     find_length('0101110101011101001110001100100') == 3, \"Wrong answer for find_length('0101110101011101001110001100100')\"\nassert     find_length('01011101010111010011100011001001010') == 5, \"Wrong answer for find_length('01011101010111010011100011001001010')\"\nassert     find_length('010111010101110100111000110010010100') == 4, \"Wrong answer for find_length('010111010101110100111000110010010100')\"\nprint \"Passed\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_length(\"10111111\") == 2\nassert     find_length(\"00101000\") == 6\nassert     find_length(\"000001101101\") == 4\nassert     find_length(\"1111011000100000101001000011010101010101010101010111111\") == 33\n\ndef find_max_bitwise(num):\n    '''\n    Write a function to find the maximum bitwise AND from the numbers in the array.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_length(\"010000010100000100000100000100000100000100010011101111011110111111011101111111010111101\") == 13\nassert     find_length(\"0111010101101110100011010110101100011101010101010010001101110100110110101011100100111011101011011\") == 21\nassert     find_length(\"110100101010001110110111011111101011101010101101110101110111101011111010010101110000011011\") == 17\nassert     find_length(\"01101101\") == 4\nassert     find_length(\"11011001011\") == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_length('000110111') == 2, 'incorrect'\nassert     find_length('01100110') == 4, 'incorrect'\nassert     find_length('000000101') == 0, 'incorrect'\nassert     find_length('01010000') == 2, 'incorrect'\nassert     find_length('00110101010000') == 4, 'incorrect'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\n\n\ndef find_missing_substring(str1, str2):\n    '''\n    Given two strings, find the length of the smallest substring that contains each string without any overlapping.\n    For example, the smallest substring in \"barfoothefoobarman\" is \"baz\".\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_length('110110010010110') == 4\nassert     find_length('11000110111100') == 4\nassert     find_length('101010101101010101000101010101110111010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101    \n    assert find_length
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_length(\"0111010010111010010111010001101\") == 6\nassert     find_length(\"01101010101110010111001011001011010111111000111100010010111011000110011101001111111010110001100101101011110100110101010110111101100111010011111011001011011101100011011100010101\") == 1\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (sum(16,10) == 14)\nassert     (sum(14,10) == 14)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum(10,15) == 15\nassert     sum(2,3) == 5\nassert     sum(9,11) == 4\nassert     sum(2,2) == 2\nassert     sum(5,2) == 3\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum(10,20)    ==    60\nassert     sum(10,50)    ==    90\nassert     sum(15,30)    ==    60\nassert     sum(20,60)    ==    30\nassert     sum(60,60)    ==    60\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum(14, 28) == 16)\nassert     (sum(22, 36) == 26)\nassert     (sum(33, 26) == 19)\n\ndef isPerfect(n): \n    '''\n    Write a python function to check if a given number is a perfect number.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sum(2,4) == 4)\nassert     (sum(7,4) == 1)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum(1,2) == 2\nassert     sum(3,4) == 1\nassert     sum(5,6) == 3\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum(19,13) == 5\nassert     sum(63,28) == 7\nassert     sum(3,4) == 1\nassert     sum(12,20) == 4\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum(20,30) == 10\nassert     sum(10,50) == 10\nassert     sum(10,40) == 10\nassert     sum(10,30) == 10\nassert     sum(10,10) == 10\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum(10,20)    ==    15\nassert     sum(100,20)    ==    15\nassert     sum(50,20)    ==    15\nassert     sum(500,20)    ==    15\nassert     sum(25,25)    ==    25\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum(3,5) == 4\nassert     sum(2,5) == 3\nassert     sum(8,6) == 5\nassert     sum(3,10) == 3\nassert     sum(6,8) == 6\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(2, 1) == 2\nassert     multiply_int(1, 0) == 0\nassert     multiply_int(0, 1) == 0\nassert     multiply_int(0, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply_int(2, 3) == 6, \"2*3!= 6\"\nassert     multiply_int(2, -3) == -6, \"2*-3!= -6\"\nassert     multiply_int(-2, 3) == -6, \"Minus 2*3!= -6\"\nassert     multiply_int(-2, -3) == 6, \"Minus 2*-3!= 6\"\n\nprint \"Passed all tests...\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply_int(4, 5) == 20\nassert     multiply_int(-4, 5) == -20\nassert     multiply_int(-4, -5) == 20\nassert     multiply_int(0, 5) == 0\nassert     multiply_int(5, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         multiply_int(1, 2) == 2\nassert         multiply_int(2, 3) == 6\nassert         multiply_int(-1, -1) == 1\nassert         multiply_int(-2, 3) == -6\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply_int(5, 2) == 10\nassert     multiply_int(0, 3) == 0\nassert     multiply_int(1, 0) == 0\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(-1, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply_int(5,2) == 10\nassert     multiply_int(0,5) == 0\nassert     multiply_int(0,0) == 0\nassert     multiply_int(123,456) == 123456\nassert     multiply_int(123,0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply_int(3, 5) == 15\nassert     multiply_int(2, 3) == 6\nassert     multiply_int(5, 0) == 0\nassert     multiply_int(0, 5) == 0\nassert     multiply_int(0, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(2, 2) == 4\nassert     multiply_int(2, 1) == 2\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(2, -2) == -4\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply_int(0, 0) == 0\nassert     multiply_int(0, 1) == 0\nassert     multiply_int(1, 1) == 1\nassert     multiply_int(1, -1) == -1\nassert     multiply_int(-1, -1) == 1\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     long_words(3, ['this', 'that', 'and', 'the']) == ['and', 'the']\nassert     long_words(4, ['this', 'that', 'and', 'the']) == ['and', 'the']\nassert     long_words(0, ['this', 'that', 'and', 'the']) == ['and', 'the']\nassert     long_words(1, ['this', 'that', 'and', 'the']) == ['and', 'the']\nassert     long_words(2, ['this', 'that', 'and', 'the']) == ['that', 'and']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     long_words(3, ['this', 'there', 'there', 'is', 'this', 'that', 'and', 'this', 'that', 'this', 'this']) == ['this', 'this', 'this', 'this']\nassert     long_words(6, ['this', 'there', 'there', 'is', 'this', 'that', 'and', 'this', 'that', 'this', 'this']) == ['this', 'this', 'this', 'this', 'this', 'this']\nassert     long_words(9, ['this', 'there', 'there', 'is', 'this', 'that', 'and', 'this', 'that', 'this', 'this']) == ['this', 'this', 'this', 'this', 'this']\nassert     long_words(6, ['this', 'there', 'there', 'is', 'this', 'that', 'and', 'this', 'that', 'this', 'this']) == ['this', 'this', 'this', 'this', 'this']"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     long_words(3, ['this', 'is', 'an', 'example', 'of', 'long', 'words']) == ['example', 'long', 'words']\nassert     long_words(6, ['this', 'is', 'an', 'example', 'of', 'long', 'words']) == []\nassert     long_words(9, ['this', 'is', 'an', 'example', 'of', 'long', 'words']) == []\nassert     long_words(12, ['this', 'is', 'an', 'example', 'of', 'long', 'words']) == ['an', 'example', 'of', 'long', 'words']\nassert     long_words(15, ['this', 'is', 'an', 'example', 'of', 'long', 'words']) == ['example', 'of', 'long', 'words']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef factorial(n):\n    '''\n    Compute the factorial of a number n.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     long_words(2, ['I', 'II', 'III', 'IV']) == ['IV']\nassert     long_words(2, ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']) == ['IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']\nassert     long_words(5, ['I', 'II', 'III', 'IV']) == ['IV']\nassert     long_words(4, ['I', 'II', 'IV', 'IV', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']) == ['IV', 'IV', 'IV', 'IV', 'V', 'VI', 'VII', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     long_words(4, ['all', 'are', 'you', 'wa', 'the', 'I','said']) == ['I','said']\nassert     long_words(5, ['all', 'are', 'you', 'wa', 'the', 'I','said']) == ['all', 'are', 'you','said']\nassert     long_words(0, ['all', 'are', 'you', 'wa', 'the', 'I','said']) == []\nassert     long_words(-1, ['all', 'are', 'you', 'wa', 'the', 'I','said']) == []\n\ndef n_gram(n, str):\n    '''\n    Write a function to generate n-grams of words from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     long_words(7, ['this', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']) == ['fox', 'jumps', 'quick', 'over', 'lazy', 'the', 'fox']\nassert     long_words(2, ['this', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']) == ['fox', 'jumps', 'quick', 'over', 'lazy', 'dog']\nassert     long_words(11, ['this', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']) == []\nassert     long_words(0, ['this', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']) == ['fox', 'jumps', 'quick', 'over', 'lazy', 'dog']\n\n\ndef anagram(word1, word2):\n    '''\n    Write a function to check if two words are anagrams of each other\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     long_words(1, ['go', 'gi', 'good', 'goood']) == ['go', 'gi']\nassert     long_words(2, ['go', 'gi', 'good', 'goood']) == ['good']\nassert     long_words(3, ['go', 'gi', 'good', 'goood']) == ['go', 'gi', 'good']\nassert     long_words(5, ['go', 'gi', 'good', 'goood']) == ['go', 'gi', 'good', 'goood']"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     long_words(3, ['hi', 'hello', 'hey','man']) == ['hi', 'hello', 'hey','man']\nassert     long_words(5, ['hi', 'hello', 'hey','man']) == []\nassert     long_words(3, ['this', 'is', 'a', 'good', 'example']) == ['is', 'a', 'good', 'example']\nassert     long_words(7, ['this', 'is', 'a', 'good', 'example']) == ['this', 'is', 'a', 'good', 'example']"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     long_words(2, ['hello', 'world', 'python', 'ruby']) == ['hello', 'world']\nassert     long_words(3, ['hello', 'world', 'python', 'ruby']) == ['world', 'python']\nassert     long_words(4, ['hello', 'world', 'python', 'ruby']) == ['world', 'hello', 'python', 'ruby']\nassert     long_words(2, ['hello', 'world', 'python', 'ruby', 'php']) == ['world', 'php']\nassert     long_words(3, ['hello', 'world', 'python', 'ruby', 'php']) == ['world', 'hello', 'php']\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     magic_square_test([[2,7,6], [9,5,1], [4,3,8]]) == False\nassert     magic_square_test([[4,9,2], [3,5,7], [8,1,6]]) == True\nassert     magic_square_test([[4,9,2], [3,5,7], [8,1,6], [2,7,6]]) == True\nassert     magic_square_test([[4,9,2], [3,5,7], [8,1,6], [2,7,6], [9,5,1]]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     magic_square_test([[4,9,2], [3,5,7], [8,1,6]]) == True\nassert     magic_square_test([[4,9,2], [3,5,7], [8,1,6]]) == True\nassert     magic_square_test([[1,2,3], [4,5,6], [7,8,9]]) == True\nassert     magic_square_test([[1,2,3], [4,5,6], [7,8,9]]) == True\nassert     magic_square_test([[2,7,6], [9,5,1], [4,3,8]]) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]])\nassert     magic_square_test([[1,2],[2,1]])\nassert     not magic_square_test([[4,9,2],[3,5,7],[8,1,6]])\nassert     not magic_square_test([[1,2,3],[2,3,4],[3,4,5]])\nassert     not magic_square_test([[1,2,3],[3,4,5],[4,5,6]])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) is True\nassert     magic_square_test([[1, 2, 3, 4], [8, 9, 10, 11], [15, 16, 17, 18], [22, 23, 24, 25]]) is False\nassert     magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) is True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     magic_square_test( [[5, 2, 3], [2, 1, 4], [7, 6, 5]] ) == True\nassert     magic_square_test( [[2, 1, 4], [5, 6, 3], [7, 8, 9]] ) == True\nassert     magic_square_test( [[3, 5, 9], [2, 4, 8], [7, 1, 6]] ) == True\nassert     magic_square_test( [[9, 6, 7], [5, 8, 2], [1, 4, 3]] ) == True\nassert     magic_square_test( [[3, 6, 9], [7, 2, 5], [1, 8, 4]] ) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\n\ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    from functools import reduce\n    # the sum of each row, column and diagonal should be the same\n    # if not, return False\n\n    magic_square = True\n    dim = len(my_matrix)\n    # diagonal\n    diagonal_1 = 0\n    diagonal_2 = 0\n\n    for row in my_matrix:\n        if sum(row)!= diagonal_1:\n            magic_square = False\n            break\n\n    for i in range(dim):\n        diagonal_1 += my_matrix[i][i]\n        diagonal_2 += my_matrix[i][dim-1-i]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     magic_square_test([[2,7,6],\n                           [9,5,1],\n                           [4,3,8]]) == True\nassert     magic_square_test([[1,2,3],\n                           [4,5,6],\n                           [7,8,9]]) == False\nassert     magic_square_test([[2,7,6],\n                           [1,5,3],\n                           [4,9,8]]) == False\nassert     magic_square_test([[1,2,3],\n                           [4,5,6],\n                           [7,8,9]]) == False\nassert     magic_square_test([[1,2,3,4,5],\n                           [6,7,8,9,10],\n                           [11,12,13,14,15],\n                           [16,17,18,19,20],\n                           [21,22,23,24,25]]) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     magic_square_test([[2, 7, 6], \n                        [9, 5, 1], \n                        [4, 3, 8]]) == True\nassert     magic_square_test([[4, 9, 2], \n                        [3, 5, 7], \n                        [8, 1, 6]]) == False\nassert     magic_square_test([[6, 1, 8], \n                        [7, 5, 3], \n                        [2, 9, 4]]) == True\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_occurrences([1, 2, 3, 1, 1, 3, 1]) == 3\nassert     max_occurrences([1, 2, 3, 4, 5]) == 1\nassert     max_occurrences([1, 1, 1, 1, 1, 1, 1]) == 1\nassert     max_occurrences([]) == None\nassert     max_occurrences([1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_occurrences([1,2,2,3,3,3,3,3,4,4,4,4,5]) == 5\nassert     max_occurrences([1,2,2,3,3,3,3,3,4,4,4,4,5,6,6,6,6,6,6,7,7,8,8,8]) == 6\nassert     max_occurrences([1,2,2,3,3,3,3,3,4,4,4,4,5,6,6,6,6,6,7,7,8,8,8,8,9]) == 8\nassert     max_occurrences([1,2,2,3,3,3,3,3,4,4,4,4,5,6,6,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9]) == 9\nassert     max_occurrences([1,2,2,3,3,3,3,3,4,4,4,4,5,6,6,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9]) == 9\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_occurrences([1, 1, 1, 2, 2, 3]) == 2\nassert     max_occurrences([1, 1, 1, 2, 2, 3, 3]) == 3\nassert     max_occurrences([1, 1, 1, 2, 2, 3, 4]) == 2\nassert     max_occurrences([1, 2, 3, 4, 5]) == 1\nassert     max_occurrences([1, 1, 1, 1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef check_anagram(string1, string2):\n    '''\n    Given two strings, return true if they are anagrams.\n    '''\n    pass\n\ndef find_anagrams(s, t):\n    '''\n    Given two strings, return a list of all the start positions in s where\n    substring t appears. \n    '''\n    pass\n\ndef reverse_vowels(s):\n    '''\n    Given a string, return a new string where vowels are replaced by '*'\n    '''\n    pass\n\ndef contains_duplicate(nums):\n    '''\n    Given an array of integers, return true if any value appears at least twice in the array, \n    and return false if every element is distinct.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef find_kth_largest(nums, k):\n    '''\n    Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n    '''\n    pass\n\ndef permute(nums):\n    '''\n    Given an array of distinct integers, return all the possible permutations.\n    '''\n    pass\n\ndef partition(nums, start, end):\n    '''\n    Given an array of integers, partition it into two subsets such that the difference between the sum of the two subsets is as small as possible.\n    '''\n    pass\n\ndef top_k_frequent(nums, k):\n    '''\n    Find the top k frequent elements in an unsorted array.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_occurrences([1, 2, 2, 3]) == 2\nassert     max_occurrences([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4]) == 4\nassert     max_occurrences([]) == -1\nassert     max_occurrences([0]) == 0\nassert     max_occurrences([-1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_occurrences([1,1,2,2,3]) == 1\nassert     max_occurrences([1,2,2,3,3,3,3]) == 3\nassert     max_occurrences([2,2,2,3,3,3]) == 2\nassert     max_occurrences([1,2,3,4,4,5]) == 1\nassert     max_occurrences([3,3,3,3,3,3]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_occurrences([1,2,2,3,4,1,5,6,7,8,5,3,2,2,1,6,7,7]) == 2\nassert     max_occurrences([5,2,3,1,4,2,3,4,2,1,2,2,2]) == 2\nassert     max_occurrences([1,2,1,2,3,4,5,6,7,8,8]) == 1\nassert     max_occurrences([1,2,2,3,3,3,3,4,4]) == 3\nassert     max_occurrences([1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_occurrences([1,2,3,3,4,4,5,6,6,7,7,8,8,9,9,10]) == [7]\nassert     max_occurrences([1,2,3,3,4,4,5,6,7,7,8,8,9,9,10,10]) == [10]\nassert     max_occurrences([1,2,3,3,4,4,5,6,7,8,9,9,10]) == [9]\nassert     max_occurrences([1,2,3,4,4,4,5,6,7,8,9,9,10]) == [9]\nassert     max_occurrences([1,2,3,3,3,4,4,5,6,6,7,7,8,9,10]) == [7]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_vowels('hello world') == 'hollworle'\nassert     reverse_vowels('the quick brown fox jumped over the lazy dog') == 'hilqacrowebu wotisn xof hloh'\nassert     reverse_vowels('a') == 'a'\nassert     reverse_vowels('x') == 'x'\nassert     reverse_vowels('abcdefghijklmnopqrstuvwxyz') == 'zyxwvutsrqponmlkjihgfedcba'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_vowels('hello') == 'holle', 'hello'\nassert     reverse_vowels('java') == 'avjja', 'java'\nassert     reverse_vowels('program') == 'grrrmep', 'program'\nassert     reverse_vowels('a') == 'a', 'a'\nassert     reverse_vowels('ammaa') == 'aaaa', 'ammaa'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_vowels('helloworld') == 'holleworl'\nassert     reverse_vowels('This is a test') == 'tetsni is a ehT'\nassert     reverse_vowels('Cupboard') == 'buprof'\nassert     reverse_vowels('This is a test.') == 'test.sihT'\nassert     reverse_vowels('12345') == '12345'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_vowels('restful') == 'flusty'\nassert     reverse_vowels('restless') == 'erscult'\nassert     reverse_vowels('restfulx') == 'flustyx'\nassert     reverse_vowels('restfuly') == 'flusty'\nassert     reverse_vowels('restfulz') == 'flustyz'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_vowels('airtovac') == 'atvacari',    'Error in reverse_vowels'\nassert     reverse_vowels('Python') == 'htnop',    'Error in reverse_vowels'\nassert     reverse_vowels('aeiou') == 'uoiea',    'Error in reverse_vowels'\nassert     reverse_vowels('rgndrhtjwolqxqb') == 'xhcwnrrlqxjogb', 'Error in reverse_vowels'\nassert     reverse_vowels('ytfuibslxqxl') == 'lxwxqytfuibs', 'Error in reverse_vowels'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_vowels(\"Hello world\") == \"Holle wdrow\"\nassert     reverse_vowels(\"hello\") == \"holle\"\nassert     reverse_vowels(\"Why do you like python?\") == \"Why ot a leh yth?\"\nassert     reverse_vowels(\"Tommy\") == \"Tommy\"\nassert     reverse_vowels(\"A\") == \"A\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hello') == 'holle','should be holle'\nassert     reverse_vowels('leetcode') == 'leotcede','should be leotcede'\nassert     reverse_vowels('rhythm') == 'artyrhythm','should be artyrhythm'\nassert     reverse_vowels('aaiougrt') == 'rtggaaiou','should be rtggaaiou'\nassert     reverse_vowels('aaioueiaaouea') == 'eaoueaaiuae','should be eaoueaaiuae'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"regular test\"\nassert     reverse_vowels(\"leetcode\") == \"leotcede\", \"edge case test\"\nassert     reverse_vowels(\"rhythm myths\") == \"ymdrhotnsm\", \"edge case test\"\nassert     reverse_vowels(\"programming languages\") == \"gnringagmm prograamlng \", \"edge case test\"\nassert     reverse_vowels(\"reversing vowels in a string\") == \"svnglverewvtb\", \"edge case test\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_vowels(\"hello world\") == \"dlrow olleh\", \"reverse_vowels('hello world') is not correct\"\nassert     reverse_vowels(\"hello yall\") == \"hlelo yaoll\", \"reverse_vowels('hello yall') is not correct\"\nassert     reverse_vowels(\"harshad\") == \"harsha d\", \"reverse_vowels('harshad') is not correct\"\nassert     reverse_vowels(\"a\") == \"a\", \"reverse_vowels('a') is not correct\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_vowels('hello') == 'holle', reverse_vowels('hello')\nassert     reverse_vowels('a world') == 'drow a wor', reverse_vowels('a world')\nassert     reverse_vowels('an') == 'n', reverse_vowels('an')\nassert     reverse_vowels('') == '', reverse_vowels('')\n\ndef reverse_string(str1):\n    '''\n    Write a python function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tup_string((1, 2, 3, 4)) == '1, 2, 3, 4', 'tup_string'\nassert     tup_string((1,)) == '1', 'tup_string'\nassert     tup_string(()) == '', 'tup_string'\n\ndef div_mod(a, b):\n    '''\n    Write a function to compute divmod(a, b).\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tup_string((1,2,3)) == '(1, 2, 3)'\nassert     tup_string((1,2,3)) == '(1, 2, 3)'\nassert     tup_string((1,)) == '(1,)'\nassert     tup_string((1,2,3,4)) == '(1, 2, 3, 4)'\nassert     tup_string((1,2,3,4)) == '(1, 2, 3, 4)'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tup_string((1, 2, 3))     == '(1, 2, 3)'\nassert     tup_string((1, 2, 3, 4))     == '(1, 2, 3, 4)'\nassert     tup_string(('a', 'b', 'c'))     == '(' + \"'a', 'b', 'c')\"\nassert     tup_string(('a', 'b', 'c', 'd'))     == '(' + \"'a', 'b', 'c', 'd')\"\nassert     tup_string(('b', 'c', 'd'))     == '(' + \"'b', 'c', 'd')\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tup_string((1,2,3)) == '123'\nassert     tup_string((1,2,'xyz')) == '123xyz'\nassert     tup_string((1,2,'xyz',5)) == '123xyz5'\nassert     tup_string((1,2,'xyz',5,8)) == '123xyz58'\n\ndef ctof(c):\n    '''\n    Write a function to convert a tuple to a float.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tup_string((1, 2, 3, 4, 5)) == '12345'\nassert     tup_string((1, 'abc', 3, 'xyz', 4, 'cde')) == '123abc456xyzcde'\nassert     tup_string(('abc', 'xyz', 'cde')) == 'abc123xyzcde'\nassert     tup_string((1, 2, 3, 4, 5, 6)) == '123456'\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9)) == '123456789'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tup_string((1,2,3)) == '123'\nassert     tup_string((8,9,0)) == '089'\nassert     tup_string((0,1,2)) == '012'\n\n\ndef tup_digit_count(tup1):\n    '''\n    Write a function to count the number of digits in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tup_string(('Mary', 'had', 'a', 'little', 'lamb')) == 'Mary had a little lamb'\nassert     tup_string((1,2,3,4)) == '1, 2, 3 and 4'\nassert     tup_string(('I', 'have', 'a', 'little', 'lamb')) == 'I have a little lamb'\nassert     tup_string((1,2,3,4,5,6,7,8,9,10)) == '1, 2, 3, 4, 5, 6, 7, 8, 9 and 10'\nassert     tup_string(('a', 'b', 'c', 'd')) == 'a, b, c and d'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tup_string((1, 2, 3, 4, 5)) == '(1, 2, 3, 4, 5)'\nassert     tup_string((1, 2, 3)) == '(1, 2, 3)'\nassert     tup_string((1,)) == '(1,)'\nassert     tup_string((]) == '()'\nassert     tup_string((1, 2, 3, 4, 5, 6)) == '(1, 2, 3, 4, 5, 6)'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tup_string((1, 2, 3, 4, 5)) == '(1, 2, 3, 4, 5)'\nassert     tup_string((1, 'c', 3, 4, 'd')) == '(1, \\'c\\', 3, 4, \\'d\\')'\n\ndef word_longer(word1, word2):\n    '''\n    Write a function that returns True if word1 is longer than word2.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tup_string(('',)), 'error #1'\nassert     tup_string(('a', 'b', 'c')), 'error #2'\nassert     tup_string(('a', 'b', 'c', 'd', 'e', 'f')), 'error #3'\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_negativenum([-1, 2, 3, 4, -5]) == -9\nassert     sum_negativenum([-1, 2, 3]) == -6\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([4, 2, 3, -1, -2]) == -8\nassert     sum_negativenum([1, 2, 3, -4, -5, -7, 8, 9]) == -8\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_negativenum([-1, 3, 4, -5, -9]) == -10\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([5, 4, 3, -2, -5, 7, 8, 9, 10]) == -18\n\ndef max_negativenum(nums):\n    '''\n    Write a function to find the maximum positive number in a list of non-negative numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_negativenum([-1, 2, 3, -4, 5]) == -1 + 2 + 3 - 4 + 5\nassert     sum_negativenum([1, 2, 3, 4, 5]) == -6\nassert     sum_negativenum([-1, -2, 3, 4, -5]) == -6\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_negativenum([1, 2, 3, 4, -5]) == -9\nassert     sum_negativenum([-1, 2, 3, 4, -5]) == -9\nassert     sum_negativenum([-1, 2, -3, 4, -5]) == -9\nassert     sum_negativenum([-1, -2, -3, 4, -5]) == -9\nassert     sum_negativenum([1, 2, -3, 4, 5]) == -9\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_negativenum([1,2,3,4,5]) == -15\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1,-2]) == -3\nassert     sum_negativenum([-1,2]) == 1\n\ndef average(nums):\n    '''\n    Write a function to calculate the average of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_negativenum([1, 2, -3, 4, -5]) == -9\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -15\nassert     sum_negativenum([1, 2, 3, 4, 5]) == -15\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -15\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -45\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_negativenum([1,2,3,-4,-5]) == -9\nassert     sum_negativenum([1,2,3,4,5]) == -6\nassert     sum_negativenum([-1,-2,3,4,5]) == -9\nassert     sum_negativenum([-1,-2,-3,4,-5]) == -6\n\n\ndef majority_element(nums):\n    '''\n    Write a function to find the majority element in a given list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_negativenum([1,-2,3,4,5]) == -9\nassert     sum_negativenum([-1,-2,3,4,-5]) == -9\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1,-2]) == -3\nassert     sum_negativenum([5,4,-2,3,7,-8,9,-4,-5,1,0]) == -5\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_negativenum([1,-2,3,4,-5,6]) == -13\nassert     sum_negativenum([1,-2,3,4,5,6,-7]) == -23\nassert     sum_negativenum([-1,-2,3,4,-5,6]) == -9\nassert     sum_negativenum([-1,-2,3,-4,-5,6]) == -9\nassert     sum_negativenum([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_negativenum([-1, 2, 3, 4, -5, -6, -7]) == -26\nassert     sum_negativenum([1, 2, 3, 4, -5, -6, -7]) == -26\nassert     sum_negativenum([-1, -2, 3, 4, -5, -6, -7]) == -26\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7]) == -26\nassert     sum_negativenum([1, 2, 3, 4, 5, 6, 7]) == -26\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hexagonal_num(0) == 0\nassert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 1\nassert     hexagonal_num(3) == 3\nassert     hexagonal_num(4) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 6\nassert     hexagonal_num(4) == 10\nassert     hexagonal_num(5) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hexagonal_num(7) == 28\nassert     hexagonal_num(8) == 33\nassert     hexagonal_num(9) == 41\nassert     hexagonal_num(10) == 48\nassert     hexagonal_num(11) == 51\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hexagonal_num(0) == 1\nassert     hexagonal_num(1) == 1\nassert     hexagonal_num(6) == 8\nassert     hexagonal_num(10) == 12\nassert     hexagonal_num(13) == 22\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 6\nassert     hexagonal_num(4) == 10\nassert     hexagonal_num(5) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hexagonal_num(1) == 0\nassert     hexagonal_num(2) == 1\nassert     hexagonal_num(3) == 1\nassert     hexagonal_num(4) == 2\nassert     hexagonal_num(5) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hexagonal_num(1) == 1,'should be 1'\nassert     hexagonal_num(2) == 2,'should be 2'\nassert     hexagonal_num(3) == 4,'should be 4'\nassert     hexagonal_num(4) == 8,'should be 8'\nassert     hexagonal_num(5) == 10,'should be 10'\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef hexagonal_number(n):\n    return n * (2 * n - 1)\n\nassert hexagonal_number(1) == 1\nassert hexagonal_number(2) == 3\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef is_isogram(string):\n    '''\n    Write a function that takes a string of lowercase letters and returns true if it is an isogram.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     zero_count([0,1,0,1,2,0,0,0,3,0,0,4]) == 3\nassert     zero_count([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1\nassert     zero_count([0,0,1,2,3,4,0,0,0,5,6,7,8,0,0,9,10,0]) == 5\nassert     zero_count([1,2,3,0,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0]) == 10\nassert     zero_count([1,2,3,0,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     zero_count([1,1,1,1,0,0,0]) == 1\nassert     zero_count([1,1,1,1,0,0,1]) == 2\nassert     zero_count([1,1,1,0,0,0,1]) == 1\nassert     zero_count([1,1,1,0,1,1,1]) == 0\nassert     zero_count([1,1,1,1,1,1,1]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     zero_count([1,2,0,0]) == 0.5\nassert     zero_count([1,2,3]) == 1.0\nassert     zero_count([]) == 0.0\nassert     zero_count([1,0,2,3,0,4]) == 0.5\nassert     zero_count([1,2,3,4,5,6,7,0,0,0,0,0,0,0,0]) == 0.0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     zero_count([0, 1, 0, 2, 0, 3]) == 0.5,    'Failed'\nassert     zero_count([0, 1, 0, 0]) == 0,         'Failed'\nassert     zero_count([0, 0]) == 0,                 'Failed'\nassert     zero_count([0]) == 0,                         'Failed'\nassert     zero_count([]) == 0,                         'Failed'\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     zero_count([]) == 0\nassert     zero_count([1]) == 0\nassert     zero_count([0]) == 1\nassert     zero_count([1, 2, 3, 4]) == 0\nassert     zero_count([0, 1, 2, 3, 4]) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     zero_count([0,1,1,1,0,1,1,0,0,1]) == 5\nassert     zero_count([1,1,0,1,1,1,0,0,1]) == 3\nassert     zero_count([0,1,0,1,0,1,0,1,0,1]) == 2\nassert     zero_count([1,0,1,0,1]) == 2\nassert     zero_count([0,0,0]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (zero_count([1, 0, 2]) == 1)\nassert     (zero_count([1, 1, 1]) == 0)\nassert     (zero_count([1, 0, 1, 1]) == 1)\nassert     (zero_count([1, 0, 0]) == 1)\nassert     (zero_count([1, 1, 1, 1, 1, 1, 0]) == 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef merge_sort(nums):\n    '''\n    Merge sort in Python.\n    '''\n    pass\n\ndef merge(nums, low, mid, high):\n    '''\n    Merge the two sorted arrays.\n    '''\n    pass\n\ndef merge_sort2(nums):\n    '''\n    Merge sort in Python.\n    '''\n    pass\n\ndef lis(nums):\n    '''\n    Longest increasing sequence.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     zero_count([1,2,0,3,0,4,5,0,6,7,0]) == 0.25\nassert zero_count([1,0,2,3,0,4,5,0,6,7,0]) == 0.25\nassert zero_count([0,0,0,0]) == 0\nassert zero_count([0,0,1]) == 0\nassert zero_count([0,1]) == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(     0b11010000) == False\nassert     is_Sum_Of_Powers_Of_Two(     0b11101101) == False\nassert     is_Sum_Of_Powers_Of_Two(     0b111001100) == True\nassert     is_Sum_Of_Powers_Of_Two(     0b10000101) == True\nassert     is_Sum_Of_Powers_Of_Two(     0b11111111) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(3) == False\nassert     is_Sum_Of_Powers_Of_Two(7) == False\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == True\nassert     is_Sum_Of_Powers_Of_Two(16) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == False\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(65536)\nassert     is_Sum_Of_Powers_Of_Two(4294967296)\nassert     is_Sum_Of_Powers_Of_Two(4294967297) == False\nassert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(65537) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4) == True\nassert     is_Sum_Of_Powers_Of_Two(5) == False\nassert     is_Sum_Of_Powers_Of_Two(10) == True\nassert     is_Sum_Of_Powers_Of_Two(12) == False\nassert     is_Sum_Of_Powers_Of_Two(15) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == False\nassert     is_Sum_Of_Powers_Of_Two(8) == False\nassert     is_Sum_Of_Powers_Of_Two(16) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(15) == True\nassert     is_Sum_Of_Powers_Of_Two(18) == False\nassert     is_Sum_Of_Powers_Of_Two(24) == True\nassert     is_Sum_Of_Powers_Of_Two(27) == False\nassert     is_Sum_Of_Powers_Of_Two(32) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == True\nassert     is_Sum_Of_Powers_Of_Two(5) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(256)\nassert     is_Sum_Of_Powers_Of_Two(1024)\nassert     is_Sum_Of_Powers_Of_Two(0)\nassert     is_Sum_Of_Powers_Of_Two(1)\nassert     is_Sum_Of_Powers_Of_Two(2)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     round(circle_circumference(1), 5) == 3.1415926\nassert     round(circle_circumference(2), 5) == 6.28318\nassert     round(circle_circumference(3), 5) == 10.39823\nassert     round(circle_circumference(100), 5) == 314.15926\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circle_circumference(10) == 314.15926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\nassert     circle_circumference(0) == 0\nassert     circle_circumference(1) == 12.5663706143591729738193359\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n\ndef test_circle_circumference():\n    assert circle_circumference(2) == 12.56\n    assert circle_circumference(1) == 3.14\n    "
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     circle_circumference(1) == math.pi\nassert     circle_circumference(2) == 2 * math.pi\nassert     circle_circumference(3) == 2 * math.pi + math.pi\nassert     circle_circumference(4) == 2 * math.pi + math.pi + 2 * math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circle_circumference(3)     == math.pi * 3**2\nassert     circle_circumference(2.5)     == math.pi * 2.5**2\nassert     circle_circumference(0)     == 0\nassert     circle_circumference(10)     == math.pi * 10**2\nassert     circle_circumference(0.1)     == math.pi * 0.1**2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     circle_circumference(2)    == 12.5663706144\nassert     circle_circumference(3)    == 19.8495559215\nassert     circle_circumference(4)    == 25.5397954368\nassert     circle_circumference(5)    == 31.3989523011\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     0.25 * math.pi == circle_circumference(1), 'expected %s, got %s' % (0.25 * math.pi, circle_circumference(1))\nassert     2.99 * math.pi == circle_circumference(3), 'expected %s, got %s' % (2.99 * math.pi, circle_circumference(3))\nassert     3.15 * math.pi == circle_circumference(5), 'expected %s, got %s' % (3.15 * math.pi, circle_circumference(5))\nassert     12.56 * math.pi == circle_circumference(7), 'expected %s, got %s' % (12.56 * math.pi, circle_circumference(7))\nassert     25.68 * math.pi == circle_circumference(9), 'expected %s, got %s' % (25.68 * math.pi, circle_circumference(9))\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circle_circumference(4) == 78.54\nassert     circle_circumference(5) == 114.23\nassert     circle_circumference(10) == 236.16\nassert     circle_circumference(12) == 312.56\nassert     circle_circumference(15) == 466.52\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     circle_circumference(2)    == 12.566370614359172\nassert     circle_circumference(3)    == 19.84955592153876\nassert     circle_circumference(5)    == 31.241379310344827\nassert     circle_circumference(7)    == 43.54101132299805\n\nprint('all tests passed')\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circle_circumference(0) == 0\nassert     circle_circumference(1) == 6.28318530718\nassert     circle_circumference(0.5) == 1.3185370369\nassert     circle_circumference(1.5) == 3.4812889323\nassert     circle_circumference(2.5) == 3.9215559429\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_singly(test_list)     == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_singly(test_list) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_singly([[1, [2, 3], [4, 5, 6], [7, 8, 9]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_singly([1, [2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_singly([1, [2, 3, 4], [5, 6, 7], [8, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     extract_singly([1, [2, [3, 4], [5, 6, 7], [8, 9, 10]], [11, 12, 13]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_singly([1, 2, 3, 4]) == set([1, 2, 3, 4])\nassert     extract_singly([[1, 2], [3, 4]]) == set([1, 2, 3, 4])\nassert     extract_singly([[1, 2, 3], [4, 5]]) == set([1, 2, 3, 4, 5])\nassert     extract_singly([[[1], 2], [[3, 4], 5]]) == set([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_singly([[1, 2], [3], [4, 5, 6]]) ==     [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[1, 2], [3], [4, 5, 6, 7]]) ==     [1, 2, 3, 4, 5, 6, 7]\nassert     extract_singly([[1, 2], [3], [4, 5, 6]]) ==     [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[1, 2], [3], [4, 5, 6, 7], [8, 9], [10]]) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     extract_singly([[1, 2], [3], [4, 5, 6], [7, 8], [9, 10], [11, 12]]) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_singly([[1,2],[3],[4,5,6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2],[3],[4,5,6,7,8,9]]) == [1,2,3,4,5,6,7,8,9]\nassert     extract_singly([[1,2,3],[4],[5,6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2,3,4,5],[6,7]]) == [1,2,3,4,5,6,7]\nassert     extract_singly([[1,2],[3,4,5,6]]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_singly([1, 2, [3, 4, [5, 6, [7, 8, 9]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     extract_singly([1, 2, [3, 4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]\nassert     extract_singly([1, [2, 3], 4]) == [1, 2, 3, 4]\nassert     extract_singly([1, [2, 3], [4, 5]]) == [1, 2, 3, 4, 5]\nassert     extract_singly([[1], [2], [3, 4, 5]]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[1, 2], [3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     extract_singly([[1], [2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     extract_singly([[], [], []]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     extract_singly([1,2,3])    == set([1,2,3]),    'incorrect'\nassert     extract_singly([[1,2],[3],[4,5]]) == set([1,2,3,4,5]), 'incorrect'\nassert     extract_singly([]) == set(), 'incorrect'\nassert     extract_singly([[],[],[]]) == set(), 'incorrect'\n\ndef extract_doubly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pancake_sort([1, 3, 2, 5, 4, 6])     ==     [1, 3, 2, 5, 4, 6]\nassert     pancake_sort([1, 1, 1, 1])     ==     [1, 1, 1, 1]\nassert     pancake_sort([9, 7, 6, 5, 4, 2, 1])     ==     [1, 2, 3, 4, 5, 6, 7, 9]\nassert     pancake_sort([8, 1, 2, 3, 6, 5, 4, 7])     ==     [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pancake_sort([1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     pancake_sort([1,4,3,2]) == [2,1,3,4]\nassert     pancake_sort([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     pancake_sort([]) == []\nassert     pancake_sort([1,1,1]) == [1,1,1]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef largest_rectangle_in_histogram(histogram):\n    '''\n    Given a list of positive integers representing the histogram's bar height, \n    return the area of the largest rectangle in the histogram.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [3,5,2,4,6,1] == pancake_sort([6,1,4,5,3,2])\nassert     [2,3,4,5,6,1] == pancake_sort([1,6,5,4,3,2])\nassert     [3,2,1] == pancake_sort([1,2,3])\nassert     [] == pancake_sort([])\nassert     [1] == pancake_sort([1])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pancake_sort([3, 2, 1]) == [1, 2, 3]\nassert     pancake_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     pancake_sort([-1, 2, 3, 4, 5, 6]) == [-1, 2, 3, 4, 5, 6]\nassert     pancake_sort([0, 3, 2, 1]) == [0, 1, 2, 3]\nassert     pancake_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [4, 5, 6, 2, 1, 3] == pancake_sort([6, 5, 4, 2, 1, 3])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 5, 4, 2, 1, 3])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 5, 4, 2, 1, 3])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 5, 4, 2, 1, 3])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1,2,3,4,5]     == pancake_sort([5,4,3,2,1])\nassert     [1,2,3,4,5]     == pancake_sort([5,4,3,2,1])\nassert     [1,2,3,4,5]     == pancake_sort([5,4,3,2,1])\nassert     [1,2,3,4,5]     == pancake_sort([5,4,3,2,1])\nassert     [1,2,3,4,5]     == pancake_sort([5,4,3,2,1])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [0, 1, 2, 3, 4, 5, 6, 7] == pancake_sort([7, 6, 5, 4, 3, 2, 1, 0])\nassert     [3, 2, 1] == pancake_sort([3, 1, 2])\nassert     [3, 2, 1] == pancake_sort([2, 1, 3])\nassert     [3, 2, 1] == pancake_sort([1, 2, 3])\nassert     [0, 1] == pancake_sort([0, 1])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pancake_sort([8,5,2,6,3,1]) == [1,2,3,5,6,8]\nassert     pancake_sort([]) == []\nassert     pancake_sort([1]) == [1]\nassert     pancake_sort([1,2,3,4,5]) == [1,2,3,4,5]\nassert     pancake_sort([3,2,1]) == [1,2,3]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_samepair(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], [1, 2, 3, 4]) == 1\nassert count_samepair(['a', 'b', 'c'], ['a', 'b', 'c', 'd'], [1, 2, 3, 4]) == 2\nassert count_samepair(['a', 'a', 'b'], ['a', 'a', 'b'], [1, 2, 3]) == 2\nassert count_samepair(['a', 'a'], ['a', 'a'], [1, 2]) == 1\nassert count_samepair([1], [2], [3]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_samepair([1,1,1,2,2,2,3,4,4,4], [2,2,2,3,3,3,4,4,4,5], [1,1,1,2,2,2,3,4,5,5]) == 4\nassert     count_samepair([1,1,1,2,2,2,3,4,5,6], [2,2,2,3,3,3,4,4,6,7], [1,1,1,2,2,2,3,4,5,6]) == 2\nassert     count_samepair([1,1,1,2,2,2,3,4,5,6], [2,2,2,3,3,3,4,4,6,7], [1,1,1,2,2,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_samepair([1,2,3,4],[2,4,6,8],[3,6,9,12]) == 3\nassert     count_samepair([1,2,3,4],[2,4,6,8],[3,5,9,10]) == 0\nassert     count_samepair([1,2,3,4,5,6],[2,4,6,8,10,12],[3,6,9,12,15,18]) == 3\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_samepair(['a','b','c'],['a','b','c'],['a','b','c']) == 3\nassert     count_samepair(['a','b','c'],['a','b','c'],['a','b','c','d']) == 0\nassert     count_samepair(['a','b','c'],['a','b','c'],['a','b','c','d','e']) == 2\nassert     count_samepair(['a','b','c','d'],['a','b','c','d'],['a','b','c','d']) == 4\nassert     count_samepair([],['a','b','c','d'],['a','b','c','d']) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    '''\n    Read three lists of integers, each of them contains three elements, and print the count of identical items in each position.\n    '''\n    list1 = [1,3,2,4,5,7,6,8]\n    list2 = [1,3,3,4,5,7,6,8]\n    list3 = [1,3,2,4,5,7,6,8]\n    count_samepair(list1,list2,list3)\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_samepair([1,1,1], [1,1,1], [1,1,1]) == 3\nassert     count_samepair([1,2,3], [2,1,3], [2,3,1]) == 2\nassert     count_samepair([1,2,3,4], [2,1,4,3], [2,3,1,4]) == 1\n\n\ndef count_same_and_diffpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists,\n    and number of items that are different in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [2, 1, 4, 3]\n    list3 = [3, 4, 1, 2]\n    assert count_samepair(list1,list2,list3) == 4"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3,4,5,6,7],[3,2,1,2,3,4,5],[4,3,2,1,1,2,3]) == 5\nassert     count_samepair([1,2,3,4,5,6,7],[3,2,1,2,3,4,5],[4,3,2,1,1,2,3]) == 4\nassert     count_samepair([1,2,3,4,5,6,7],[3,2,1,2,3,4,5],[5,3,2,1,1,2,3]) == 3\nassert     count_samepair([1,2,3,4,5,6,7],[3,2,1,2,3,4,5],[3,3,2,1,1,2,3]) == 1\nassert     count_samepair([1,2,3,4,5,6,7],[3,2,1,2,3,4,5],[3,3,2,1,1,2,3]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_samepair([1,2,3,4,5], [5,4,3,2,1], [3,2,1,1,3]) == 4\nassert     count_samepair([1,2,3,4,5], [1,2,3,4,5], [5,4,3,2,1]) == 5\nassert     count_samepair([1,2,3,4,5], [1,2,3,4,5], [5,4,3,2,1,2]) == 1\nassert     count_samepair([1,2,3,4,5], [1,2,3,4,5], [5,4,3,2,1,3,2]) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')) == 1, 'incorrect'\nassert     find_lists(('x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')) == 1, 'incorrect'\nassert     find_lists(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P')) == 1, 'incorrect'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_lists(((1,2),(3,4),(5,6,7),(8,9))) == 1\nassert     find_lists(((1,2,3),(4,5),(6))) == 2\nassert     find_lists(((1,2,3),(4,5,6,7,8,9))) == 1\nassert     find_lists(((1,2,3),(4,5,6,7,8,9),(10,11,12,13,14,15),(16,17,18,19,20,21,22,23,24,25,26))) == 3\n\nprint 'testcase 2 Passed'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_lists(('1', '2', '3', '4', '5', '6', '7')) == 2\nassert     find_lists(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')) == 2\nassert     find_lists(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12')) == 3\nassert     find_lists(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13')) == 3\nassert     find_lists(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14')) == 4\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 0\nassert     find_lists((1,(2,))) == 1\nassert     find_lists((1,(2,(3,)))) == 2\nassert     find_lists((1,(2,(3,(4,5))))) == 3\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1, 2, 3, 4, 5, 6)) == 1\nassert     find_lists((1, 2, 3, 4, (5, 6, 7, 8, 9, 10))) == 2\nassert     find_lists((1, 2, 3, (4, (5, 6, 7, 8, 9, 10)), 11)) == 3\nassert     find_lists((1, 2, 3, 4, 5, (6, 7, 8, 9, 10, 11))) == 3\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_lists((1,2,3,4,5,(2,3,4,5,6,7,8,9,10))) == 1\nassert     find_lists((1,2,3,4,5,(2,3,4,5,6,7,8,9,10))) == 2\nassert     find_lists((1,2,3,4,5,(2,3,4,5,6,7,8,9,10))) == 2\nassert     find_lists((1,2,3,4,5,(2,3,4,5,6,7,8,9,10),10)) == 3\nassert     find_lists((1,2,3,4,5,6,(2,3,4,5,6,7,8,9,10),10)) == 3\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_lists((1,2,3,4))==1\nassert     find_lists((1,2,3,(4,(5,6))))==2\nassert     find_lists(((1,2),3,(4,(5,6))))==2\nassert     find_lists((1,2,3,4,(5,6)))==3\nassert     find_lists((1,2,3,(4,(5,6)),(7,8)))==4\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         find_lists(tuple()) == 0\nassert         find_lists(('a',)) == 0\nassert         find_lists(('a', (1,2,3))) == 1\nassert         find_lists(('a', (1,2,3,(1,2,3)))) == 2\nassert         find_lists(('a',(1,2,3,(1,2,3),4))) == 3\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_lists((1, 2, 3, 4, 5, 6, 7, 8)) == 2\nassert     find_lists((1, 2, 3, (4, 5, 6, 7, 8))) == 2\nassert     find_lists((1, 2, 3, (4, (5, 6, 7, 8)))) == 1\nassert     find_lists((1, 2, 3, 4, (5, 6, 7, 8))) == 1\nassert     find_lists((1, 2, 3, (4, (5, 6, 7, 8))))) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_lists([]) == 0, \"invalid input\"\nassert     find_lists((1,2,3,4)) == 0, \"invalid input\"\nassert     find_lists((1,[],[3,4]), (4,5,[])) == 1, \"invalid input\"\nassert     find_lists((1,[2,3],4), (5,6,[7,8,9])) == 2, \"invalid input\"\nassert     find_lists((1,[2,3],4), (5,6,[7,8,9]), (7,[],[],[10,11,12,13]), (8,[],[],[14,15,16,17]), (9,[],[],[18,19,20,21,22,23,24,25])) == 3, \"invalid input\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_Abs_Diff([1, 4, 6, 8, 10, 3, 7, 9]) == 4\nassert     max_Abs_Diff([1, 4, -6, 8, 10, 3, 7, 9]) == 6\nassert     max_Abs_Diff([1, 4, -6, 8, 10, 3, 7, 9, -1]) == 9\nassert     max_Abs_Diff([1, 4, -6, 8, 10, 3, 7, 9, -1, 10, 15, -4]) == 10"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([1,2,3]) == 1\nassert     max_Abs_Diff([1,2,4]) == 3\nassert     max_Abs_Diff([1,2,5]) == 4\nassert     max_Abs_Diff([1,2,3,4]) == 0\nassert     max_Abs_Diff([1,2,5,10]) == 4\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert     max_Abs_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 9\nassert     max_Abs_Diff([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     max_Abs_Diff([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     max_Abs_Diff([9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == 9\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_Abs_Diff([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     max_Abs_Diff([1,2,3,4,5]) == 3\nassert     max_Abs_Diff([1,2,3,4,5,6,7,8]) == 4\nassert     max_Abs_Diff([1,2,3,4,5,6,7,8,9,10]) == 4\nassert     max_Abs_Diff([1,2,3,4,5,6,7,8,9,10,11,12]) == 9\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([-11,-5,3,4,5,7,-8,-10,-20,-10,-7,-5,-3,0,-1,6,12,13,14,15,17,19,21,23,29,-2,-5]) == 11\nassert     max_Abs_Diff([-11,-5,3,4,5,7,-8,-10,-20,-10,-7,-5,-3,-1,-1,-1,-1,-1,-1,-1]) == 2\nassert     max_Abs_Diff([1,2,3,4,5,6,7,8,9]) == 1\nassert     max_Abs_Diff([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 0\nassert     max_Abs_Diff([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]) == -1\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([-1,-2,-3,-4,-5]) == -1\nassert     max_Abs_Diff([1,2,3,4,5]) == 3\nassert     max_Abs_Diff([1,3,5,7,9]) == 5\nassert     max_Abs_Diff([1,2,4,5,6]) == 1\nassert     max_Abs_Diff([1,2,3,4,5,6,7,8,9]) == 1\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_Abs_Diff([4,2,1,3])==1\nassert     max_Abs_Diff([3,2,1,4])==1\nassert     max_Abs_Diff([1,3,5,7,10])==2\nassert     max_Abs_Diff([2,1,0,5,9])==3\nassert     max_Abs_Diff([0,1,2,3])==2\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff(arr) == 3, \"Wrong Output\"\n\ndef is_a_Subsequence(arr,arr2):\n    '''\n    Write a python function to check if a given array is a subsequence of another array\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([1,3,5,7]) == 1\nassert     max_Abs_Diff([10,3,2,7]) == 2\nassert     max_Abs_Diff([10,3,2,7,1]) == 1\nassert     max_Abs_Diff([10,3,2,7,1,5]) == 3\nassert     max_Abs_Diff([10,3,2,7,1,5,9]) == 4\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_solution(3, 4, 7) == (-1, -1)\nassert     find_solution(5, 4, 10) == (4, -1)\nassert     find_solution(7, 3, 19) == (5, 3)\nassert     find_solution(7, 5, 9) == (4, 1)\nassert     find_solution(7, 6, 23) == (6, -5)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_solution(10, 6, 25) == (-1, 1)\nassert     find_solution(4, 8, 25) == (1, -2)\nassert     find_solution(1, 1, 2) == (0, 1)\nassert     find_solution(10, 6, 14) == (1, -2)\nassert     find_solution(10, 6, 12) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         find_solution(1, 1, 2) == (1, -1)\nassert         find_solution(2, 3, 6) == (3, -2)\nassert         find_solution(5, 12, 25) == (5, -2)\nassert         find_solution(1, 1, 100) == None\nassert         find_solution(1, 1, -100) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_solution(2, 1, 3) == (1, 2)\nassert     find_solution(2, 1, 5) == None\nassert     find_solution(1, -2, 4) == (0, 2)\nassert     find_solution(2, 3, 2) == (1, -1)\nassert     find_solution(0, 1, 0) == (0, 0)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_solution(10, 10, 25) == (5, 2), \"wrong result\"\nassert     find_solution(2, 3, 4) == None, \"wrong result\"\nassert     find_solution(-3, 1, -10) == (2, -3), \"wrong result\"\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_solution(3, 2, 7) == (0, 1)\nassert     find_solution(2, 7, 12) == (2, 1)\nassert     find_solution(10, 5, 22) == (2, 3)\nassert     find_solution(1, 3, -20) == None\nassert     find_solution(1, 2, -20) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_solution(3, 5, 15) == (None, None)\nassert     find_solution(3, 5, 10) == (3, -2)\nassert     find_solution(3, 5, 9) == (3, -1)\nassert     find_solution(3, 5, 17) == (3, 5)\nassert     find_solution(3, 5, 18) == (3, 6)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_solution(3, 5, 25) == (15, 20), \"3, 5, 25: correct result\"\nassert     find_solution(3, 5, 26) == None, \"3, 5, 26: None result\"\nassert     find_solution(3, 5, -27) == None, \"3, 5, -27: None result\"\nassert     find_solution(3, 5, 0) == None, \"3, 5, 0: None result\"\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_solution(2, 7, 14) == (3, 2)\nassert     find_solution(3, 12, 24) == (4, 3)\nassert     find_solution(3, 8, 11) == None\nassert     find_solution(1, 2, 4) == None\nassert     find_solution(1, 3, 5) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_solution(3, 5, 12) == (1, -3)\nassert     find_solution(3, 5, 17) == (4, -1)\nassert     find_solution(3, 5, 9) == None\nassert     find_solution(3, 5, 13) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_elements(['c', 'a', 't', 't', 'r', 'a', 'r', 'c'], \n                        ['t', 'r', 'a', 'c', 'a', 't'])     ==     ['c', 't', 'r', 'c']\nassert     remove_elements(['c', 'a', 't', 't', 'r', 'a', 'r', 'c'], \n                        ['a', 'r', 'c', 'a', 't'])     ==     ['c', 't', 'r', 'c']\nassert     remove_elements(['c', 'a', 't', 't', 'r', 'a', 'r', 'c'], \n                        ['a', 'r', 'c', 'a', 't', 't'])     ==     ['c', 't', 'r', 'c']\nassert     remove_elements(['c', 'a', 't', 't', 'r', 'a', 'r', 'c'], \n                        ['a', 'r', 'c', 'a', 't', 'c', 'a'])     ==     ['c', 't', 'r', 'c']\nassert     remove_elements(['c', 'a', 't', 't', 'r', 'a', 'r', 'c'], \n                        ['a', 'r', 'c', 'a', 't', 'c', 'a', 't', 'r'])     ==     ['c', 't', 'r', 'c']\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1, 3, 5, 7, 9] == remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 3, 5, 7, 9] == remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 5, 6, 7])\nassert     [1, 3, 5, 7, 9] == remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 6, 7])\nassert     [1, 3, 5, 7, 9] == remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9])\nassert     [1, 3, 5, 7, 9] == remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [7, 8, 9])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_elements([1, 2, 3, 4, 5], [2, 4, 6, 8])         == [1, 3, 5]\nassert     remove_elements([9, 8, 7, 6], [8, 9, 10])         == [9, 7, 6]\nassert     remove_elements([10, 9, 8, 7], [6, 5, 4, 3, 2, 1]) == [10, 9, 8]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_elements(['A', 'B', 'C', 'A', 'A', 'C'], ['A', 'C']) == ['B']\nassert     remove_elements(['A', 'A', 'A'], ['A', 'A']) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         remove_elements([1, 2, 3], [1, 2, 3]) == [], 'Failed Test 1'\nassert         remove_elements([1, 2, 3], [2, 3]) == [], 'Failed Test 2'\nassert         remove_elements([1, 2, 3], [1, 2]) == [], 'Failed Test 3'\nassert         remove_elements([1, 2, 3], []) == [], 'Failed Test 4'\nassert         remove_elements([1, 2, 3], [3, 4, 5]) == [1, 2], 'Failed Test 5'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_elements([1, 2, 3, 4, 5, 6], [3, 5]) == [1, 2, 4, 6]\nassert     remove_elements([1, 2, 3, 4, 5, 6], [3, 7]) == [1, 2, 4, 6]\nassert     remove_elements([1, 2, 3, 4, 5, 6], [5, 6]) == [1, 2, 4, 6]\nassert     remove_elements([1, 2, 3, 4, 5, 6], [2, 4]) == [1, 3, 5, 6]\nassert     remove_elements([1, 2, 3, 4, 5, 6], [3, 5, 6]) == [1, 2]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_elements([\"a\",\"b\",\"c\"], [\"c\"]) == [\"a\", \"b\"]\nassert     remove_elements([\"a\",\"b\",\"c\"], [\"a\",\"c\"]) == [\"b\"]\nassert     remove_elements([\"a\",\"b\",\"c\"], [\"a\", \"c\", \"c\"]) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_elements([1, 3, 4], [1, 2, 3]) == [3, 4]\nassert     remove_elements([1, 2, 3], [1, 2, 3]) == [2, 3]\nassert     remove_elements([1, 2, 3, 4], [1, 2, 3, 4]) == []\nassert     remove_elements([1, 2, 3], [1, 2, 3]) == [2, 3]\nassert     remove_elements([1], [1]) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_elements([1,2,3], [2,3]) == [1]\nassert     remove_elements([1,2,3,4], [2,3]) == [1,4]\nassert     remove_elements([2,3,4], [1,2,3]) == [4]\nassert     remove_elements([2,3,4], [1,2,3,4]) == [2]\nassert     remove_elements([2,3,4], [1,3,4]) == [2]\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_series(5) == 12\nassert     sum_series(10) == 30\nassert     sum_series(0) == 0\nassert     sum_series(9) == 45\nassert     sum_series(11) == 55\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 3\nassert     sum_series(3) == 4\nassert     sum_series(4) == 5\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(3) == 3\nassert     sum_series(4) == 10\nassert     sum_series(5) == 19\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_series(0) == 0)\nassert     (sum_series(1) == 1)\nassert     (sum_series(2) == 3)\nassert     (sum_series(3) == 6)\nassert     (sum_series(4) == 10)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_series(1) == 1\nassert     sum_series(2) == 1\nassert     sum_series(3) == 3\nassert     sum_series(4) == 5\nassert     sum_series(5) == 8\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_series(n = 0) == 0\nassert     sum_series(n = 1) == 1\nassert     sum_series(n = 2) == 3\nassert     sum_series(n = 3) == 5\nassert     sum_series(n = 4) == 7\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sum_series(10) == 55)\nassert     (sum_series(100) == 2550226)\nassert     (sum_series(1000) == 190569292)\nassert     (sum_series(10000) == 798368218)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_series(2) == 3\nassert     sum_series(3) == 3\nassert     sum_series(4) == 4\nassert     sum_series(5) == 5\nassert     sum_series(6) == 7\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     area_polygon(6, 6) == 216\nassert     area_polygon(10, 2) == 50\nassert     area_polygon(4, 7) == 24\nassert     area_polygon(3, 10) == 30\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     area_polygon(5, 2) == 10.0, '5 sides, 2 sides'\nassert     area_polygon(7, 2) == 22.0, '7 sides, 2 sides'\nassert     area_polygon(5, 3) == 30.0, '5 sides, 3 sides'\nassert     area_polygon(7, 3) == 42.0, '7 sides, 3 sides'\nassert     area_polygon(10, 3) == 78.0, '10 sides, 3 sides'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     area_polygon(4, 4) == 16.0\nassert     area_polygon(5, 5) == 50.0\nassert     area_polygon(3, 7) == 22.5\nassert     area_polygon(9, 3) == 54.0\n\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     area_polygon(4, 5) == float('2.00')\nassert     area_polygon(2, 5) == float('2.00')\nassert     area_polygon(3, 5) == float('4.00')\nassert     area_polygon(6, 5) == float('8.00')\nassert     area_polygon(9, 5) == float('12.00')\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     area_polygon(10, 3) == 50.24\nassert     area_polygon(5, 4) == 30.40\nassert     area_polygon(7, 4) == 100.44\nassert     area_polygon(3, 6) == 22.46\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     area_polygon(5, 7) == 70.2\nassert     area_polygon(3, 6) == 12\n\ndef area_triangle(s1, s2):\n    '''\n    Write a function to calculate the area of a right-angled triangle given the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     area_polygon(3,3) == 6\nassert     area_polygon(5,3) == 15\nassert     area_polygon(8,3) == 56\nassert     area_polygon(15,3) == 153\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     area_polygon(3, 3) == 1.0825\nassert     area_polygon(7, 2) == 26.8625\nassert     area_polygon(2, 4) == 2.5\nassert     area_polygon(5, 4) == 10.25\nassert     area_polygon(6, 4) == 22.5\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     area_polygon(1, 2) == 0.5\nassert     area_polygon(3, 2) == 0.5\nassert     area_polygon(4, 2) == 0.25\nassert     area_polygon(5, 2) == 0.25\nassert     area_polygon(6, 2) == 0.1386\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     area_polygon(4, 3) == 4 * 3 / 2, \"Expected: 4 * 3 / 2 = 4.0\"\nassert     area_polygon(4, 4) == 4 * 4 / 2, \"Expected: 4 * 4 / 2 = 8.0\"\nassert     area_polygon(4, 5) == 4 * 5 / 2, \"Expected: 4 * 5 / 2 = 12.0\"\nassert     area_polygon(5, 3) == 5 * 3 / 2, \"Expected: 5 * 3 / 2 = 15.0\"\nassert     area_polygon(5, 4) == 5 * 4 / 2, \"Expected: 5 * 4 / 2 = 20.0\"\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     div_sum(1)     == False\nassert     div_sum(5)     == True\nassert     div_sum(6)     == False\nassert     div_sum(7)     == True\nassert     div_sum(28)     == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     div_sum(6) == 1\nassert     div_sum(12) == 2\nassert     div_sum(28) == 2\nassert     div_sum(210) == 1\nassert     div_sum(600) == 1\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     div_sum(1) == False\nassert     div_sum(2) == False\nassert     div_sum(3) == True\nassert     div_sum(4) == True\nassert     div_sum(5) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     div_sum(10) == True\nassert     div_sum(12) == True\nassert     div_sum(6) == False\nassert     div_sum(20) == True\nassert     div_sum(15) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     div_sum(5)    ==    True\nassert     div_sum(10)    ==    True\nassert     div_sum(25)    ==    True\nassert     div_sum(28)    ==    False\nassert     div_sum(29)    ==    True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     div_sum(28) == True\nassert     div_sum(28) == True\nassert     div_sum(28) == False\nassert     div_sum(28) == False\n\ndef is_prime(n):\n    '''\n    Write a function that takes a positive integer and returns whether it is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     div_sum(5) == True\nassert     div_sum(100) == True\nassert     div_sum(49) == True\nassert     div_sum(144) == True\nassert     div_sum(97) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     div_sum(1) == False, '1 does not have a divisor sum'\nassert     div_sum(2) == True, '2 has a divisor sum of 1'\nassert     div_sum(3) == True, '3 has a divisor sum of 3'\nassert     div_sum(4) == False, '4 does not have a divisor sum'\nassert     div_sum(5) == True, '5 has a divisor sum of 5'\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     div_sum(2)\nassert     not div_sum(3)\nassert     div_sum(12)\nassert     not div_sum(15)\nassert     div_sum(21)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     div_sum(6) == False\nassert     div_sum(28) == True\nassert     div_sum(45) == False\nassert     div_sum(100) == True\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_char_position('a') == 1, 'count_char_position(a)'\nassert     count_char_position('ab') == 1, 'count_char_position(ab)'\nassert     count_char_position('z') == 1, 'count_char_position(z)'\nassert     count_char_position('aab') == 2, 'count_char_position(aab)'\nassert     count_char_position('abz') == 1, 'count_char_position(abz)'\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_char_position('letter') == 26\nassert     count_char_position('letters') == 52\nassert     count_char_position('bead') == 13\nassert     count_char_position('eabd') == 0\nassert     count_char_position('ab') == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_char_position('Hello') == {'o': 2, 'e': 1, 'l': 1, 'H': 1, 'a': 1}\nassert     count_char_position('abcccd') == {'a': 2, 'c': 4, 'b': 2, 'd': 1, 'e': 1}\nassert     count_char_position('abc') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nassert     count_char_position('abcdefghi') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}\nassert     count_char_position('abcd') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_char_position(str1) == 4,     'error in count_char_position'\nassert     count_char_position(str2) == 9,     'error in count_char_position'\nassert     count_char_position(str3) == 8,     'error in count_char_position'\nassert     count_char_position(str4) == 6,     'error in count_char_position'\nassert     count_char_position(str5) == 4,     'error in count_char_position'\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_char_position(\"abc\") == {'a': 1, 'b': 1, 'c': 1}\nassert     count_char_position(\"bcc\") == {'b': 1, 'c': 1}\nassert     count_char_position(\"abb\") == {'a': 2, 'b': 1}\nassert     count_char_position(\"abcc\") == {'a': 3, 'b': 2, 'c': 1}\nassert     count_char_position(\"\") == {}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (count_char_position('yabd') == {'d': 2})\nassert     (count_char_position('yabd') == {'d': 1})\nassert     (count_char_position('yabd') == {'d': 1})\nassert     (count_char_position('d') == {'d': 1})\nassert     (count_char_position('d') == {'d': 1})\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_char_position('abcd') == {'a':1, 'b':1, 'c':1, 'd':1}\nassert     count_char_position('Diamon is good') == {'a':2, 'b':1, 'c':1, 'd':2, 'e':1, 'f':1, 'g':1, 'h':1, 'i':1, 'j':1, 'k':1, 'l':1,'m':1, 'n':1, 'o':1, 'p':1, 'q':1, 'r':1,'s':1, 't':1, 'u':1, 'v':1, 'w':1, 'x':1, 'y':1, 'z':1}\nassert     count_char_position('a' * 100000) == {'a':100000}\nassert     count_char_position('ab' * 100000) == {'a':200000, 'b':200000}\nassert     count_char_position('abcd' * 100000) == {'a':200000, 'b':200000, 'c':200000, 'd':200000}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_char_position(\"aaabbc\") == (3,2,1,0)\nassert     count_char_position(\"skew\") == (0,0,0,0)\nassert     count_char_position(\"eel\") == (3,2,1,0)\nassert     count_char_position(\"row\") == (2,1,0,0)\nassert     count_char_position(\"jrow\") == (1,2,0,0)\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_char_position('a1b2c3d4e') == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 0}\nassert     count_char_position('zzzabc') == {'z': 0, 'a': 1, 'b': 2, 'c': 3, 'z': 0}\nassert     count_char_position('abc123') == {'a': 1, 'b': 2, 'c': 3, '1': 0, '2': 1, '3': 2}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_char_position(\"abcd\") == {\n                    'a': 1,\n                    'b': 1,\n                    'c': 1,\n                    'd': 1\n                }\nassert     count_char_position(\"a\") == {\n                    'a': 1\n                }\nassert     count_char_position(\"aa\") == {\n                    'a': 2\n                }\nassert     count_char_position(\"aaa\") == {\n                    'a': 3\n                }\nassert     count_char_position(\"aaa111\") == {\n                    'a': 3,\n                    '1': 1,\n                    'i': 1\n                }\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_even_pair([1, 3, 2, 5, 4, 8, 10, 6]) == 3\nassert     find_even_pair([1, 1, 2, 3, 4, 8, 10, 6]) == 1\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_even_pair([10,9,4,8,2,1]) == 1\nassert     find_even_pair([10,9,4,8,2,1,6,5]) == 3\nassert     find_even_pair([1,1,2,2,3,4,5,5,5]) == 3\n\n\n\ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_even_pair([2,4,6,8,10,3,7,5,1]) == 5\nassert     find_even_pair([2,4,6,8,10,3,7,5]) == 4\nassert     find_even_pair([1,2,3,4,5,6]) == 0\nassert     find_even_pair([7,8,9,1,2,3,4,5,6]) == 1\nassert     find_even_pair([6,5,4,3,2,1]) == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_even_pair([0,1,2,4,5,6,7,8,9,10]) == 3\nassert     find_even_pair([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     find_even_pair([2,3,4,5,6,7,8,9,10]) == 1\nassert     find_even_pair([4,5,6,7,8,9,10]) == 0\nassert     find_even_pair([0,1,2,3,4,5,6,7,8,9,10]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_even_pair([1,2,3,4,5]) == 1\nassert     find_even_pair([2,4,6,8,10]) == 2\nassert     find_even_pair([13,9,10,15,20]) == 1\nassert     find_even_pair([13,9,10,15,20,22]) == 3\n\ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_even_pair([ 1, 2, 4, 5, 7, 9 ]) == 2\nassert     find_even_pair([ 5, 7, 9, 11, 13, 15 ]) == 0\nassert     find_even_pair([1,2,3,4,5,6,7,8,9]) == 3\nassert     find_even_pair([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 1\nassert     find_even_pair([1,1,1,1,1,1,1,1,1,1,1,1,1]) == 4\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_even_pair([]) == 0\nassert     find_even_pair([1]) == 0\nassert     find_even_pair([0]) == 0\nassert     find_even_pair([0,0]) == 0\nassert     find_even_pair([1,2]) == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_even_pair([1, 1, 3, 4, 3]) == 3\nassert     find_even_pair([3, 5, 4, 4]) == 3\nassert     find_even_pair([1, 2, 3, 4, 4]) == 3\nassert     find_even_pair([1, 1, 2, 3]) == 3\nassert     find_even_pair([1, 1, 1, 3]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_even_pair([]) == 0\nassert     find_even_pair([1]) == 0\nassert     find_even_pair([1,2,3]) == 0\nassert     find_even_pair([1,1,2,2]) == 1\nassert     find_even_pair([1,1,2,3]) == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_even_pair([2,3,5,6,7,8]) == 2\nassert     find_even_pair([1,2,3,4,5,6]) == 2\nassert     find_even_pair([0,1,2,3,4,5]) == 3\nassert     find_even_pair([0,1,2,3,4,5,6,7,8]) == 3\nassert     find_even_pair([]) == 0\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 2\nassert     next_power_of_2(2) == 4\nassert     next_power_of_2(3) == 8\nassert     next_power_of_2(4) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(7) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_power_of_2(4) == 8\nassert     next_power_of_2(8) == 16\nassert     next_power_of_2(9) == 16\nassert     next_power_of_2(16) == 32\nassert     next_power_of_2(17) == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(5) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_power_of_2(0)             == 1\nassert     next_power_of_2(1)             == 2\nassert     next_power_of_2(2)             == 4\nassert     next_power_of_2(3)             == 8\nassert     next_power_of_2(7)             == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_power_of_2(1024) == 1024\nassert     next_power_of_2(1024) == 2048\nassert     next_power_of_2(1024) == 2048\nassert     next_power_of_2(1024) == 4096\nassert     next_power_of_2(1024) == 4096\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(5) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_power_of_2(1) == 2\nassert     next_power_of_2(2) == 4\nassert     next_power_of_2(3) == 8\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(8) == 8\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     frequency([1,2,3,4,5],1) == 1\nassert     frequency([1,2,3,4,5],2) == 1\nassert     frequency([1,2,3,4,5],3) == 1\nassert     frequency([1,2,3,4,5],4) == 1\nassert     frequency([1,2,3,4,5],5) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     frequency(a=[1,2,3,1,2,3,1,2,3], x=1) == 4\nassert     frequency(a=[1,2,3,1,2,3,1,2,3], x=2) == 1\nassert     frequency(a=[1,2,3,1,2,3,1,2,3], x=3) == 3\nassert     frequency(a=[1,2,3,1,2,3,1,2,3], x=4) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     frequency([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59], 5) == 1, 'frequency'\nassert     frequency([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59], 15) == 1, 'frequency'\nassert     frequency([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59], 0) == 0, 'frequency'\nassert     frequency([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59], 42) == 1, 'frequency'\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     frequency([1,2,3,1],1)==1\nassert     frequency([1,2,3,1],2)==1\nassert     frequency([1,2,3,1],3)==2\nassert     frequency([1,2,3,1],5)==0\nassert     frequency([1,2,3,1],1)==3\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert frequency(['a','a','a','a','a','b'], 'a') == 3\nassert frequency([1,1,1,1,2,3,4,4], 1) == 3\nassert frequency([1,1,1,1,2,3,4,4], 2) == 1\nassert frequency([1,1,1,1,2,3,4,4], 4) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     frequency([1,1,2,2,3,3,4,4,5,5,5,5,6],5) == 4\nassert     frequency([1,1,2,2,3,3,4,4,5,5,5,5,6],6) == 1\nassert     frequency([1,1,2,2,3,3,4,4,5,5,5,5,6],9) == 0\nassert     frequency([1,1,2,2,3,3,4,4,5,5,5,5,6],1) == 5\nassert     frequency([1,1,2,2,3,3,4,4,5,5,5,5,6],2) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     frequency([1,2,3,1],1) == 1\nassert     frequency([1,2,3,1],2) == 1\nassert     frequency([1,2,3,1],3) == 0\nassert     frequency([1,2,3,1],4) == 0\nassert     frequency([1,2,3,1],1) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     frequency(a,x) == 2\nassert     frequency(a2,x) == 2\nassert     frequency(a3,x) == 0\nassert     frequency(a4,x) == 1\nassert     frequency(a5,x) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     frequency([1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5], 3) == 2, \"3 appeared twice\"\nassert     frequency([1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5], 4) == 1, \"4 appeared once\"\nassert     frequency([1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5], 9) == 0, \"9 appeared in the list\"\nassert     frequency([1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5], 0) == 0, \"0 appeared in the list\"\nassert     frequency([1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5], 1) == 5, \"1 appeared five times\"\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_range_list([1,2,3,4], 0, 2) == 6, \"Check if your function works for a range of index\"\nassert     sum_range_list([1,2,3,4], 1, 3) == 6, \"Check if your function works for a range of index\"\nassert     sum_range_list([1,2,3,4], 2, 3) == 6, \"Check if your function works for a range of index\"\nassert     sum_range_list([1,2,3,4], 3, 3) == 6, \"Check if your function works for a range of index\"\nassert     sum_range_list([1,2,3,4], 4, 3) == 6, \"Check if your function works for a range of index\"\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 2, 5) == 8\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 1, 8) == 17\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 2, 8) == 17\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 1, 7) == 19\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 2, 7) == 19\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_range_list([1, 2, 3], 0, 2) == 2\nassert     sum_range_list([1, 2, 3], 0, 1) == 1\nassert     sum_range_list([1, 2, 3], 0, 3) == 6\nassert     sum_range_list([1, 2, 3], -1, 3) == 5\nassert     sum_range_list([1, 2, 3], -3, -1) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_range_list([1,2,3,4,5,6,7,8,9], 1, 5) == 45)\nassert     (sum_range_list([10,20,30,40,50], 2, 6) == 100)\nassert     (sum_range_list([1,2,3,4,5], 0, 0) == 0)\nassert     (sum_range_list([1,2,3,4,5], 1, 5) == 15)\nassert     (sum_range_list([1,2,3,4,5], 0, 5) == 15)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 2) == 10, \"TODO\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 3) == 15, \"TODO\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 4) == 7, \"TODO\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 5) == 12, \"TODO\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 6) == 12, \"TODO\"\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_range_list([1,2,3,4,5,6], 1, 5) == 15\nassert     sum_range_list([1,2,3,4,5,6], 1, 6) == 21\nassert     sum_range_list([1,2,3,4,5,6], 1, 2) == 5\nassert     sum_range_list([1,2,3,4,5,6], -2, -1) == -1\nassert     sum_range_list([1,2,3,4,5,6], -2, -2) == -5\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_range_list(range(5), 0, 5) == 10\nassert     sum_range_list([1, 2, 3], 0, 2) == 6\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 10) == 45\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 10) == 45\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == 45\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sum_range_list([1, 2, 3], 0, 2) == 3)\nassert     (sum_range_list([1, 2, 3], 0, 1) == 2)\nassert     (sum_range_list([1, 2, 3], 0, 3) == 6)\nassert     (sum_range_list([10, 20, 30], 2, 2) == 20)\nassert     (sum_range_list([10, 20, 30], 3, 3) == 30)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_range_list([1,2,3,4,5,6], 1, 5) == 15\nassert     sum_range_list([1,2,3,4,5,6], 1, 6) == 26\nassert     sum_range_list([1,2,3,4,5,6], 0, 5) == 21\nassert     sum_range_list([1,2,3,4,5,6], 1, 0) == 0\nassert     sum_range_list([1,2,3,4,5,6], 0, 0) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_range_list(range(1, 100), 2, 50) == 50\nassert     sum_range_list([2, 4, 5, 7], 0, 2) == 6\nassert     sum_range_list([1, 3, 5], 0, 2) == 6\nassert     sum_range_list([1, 3, 5, 7], 0, 3) == 9\nassert     sum_range_list(range(1, 100), 30, 40) == 50\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(5) == 28\nassert     perimeter_pentagon(3) == 21\nassert     perimeter_pentagon(5.1) == 22.5\nassert     perimeter_pentagon(7) == 35\nassert     perimeter_pentagon(20) == 66\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(2) == 12\nassert     perimeter_pentagon(3) == 24\nassert     perimeter_pentagon(4) == 24\nassert     perimeter_pentagon(5) == 30\nassert     perimeter_pentagon(6) == 30\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(3) == 60\nassert     perimeter_pentagon(4) == 72\nassert     perimeter_pentagon(5) == 108\nassert     perimeter_pentagon(6) == 120\n\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(3) == 22\nassert     perimeter_pentagon(6) == 42\nassert     perimeter_pentagon(10) == 52\nassert     perimeter_pentagon(15) == 70\nassert     perimeter_pentagon(20) == 82\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     perimeter_pentagon(1) ==     6\nassert     perimeter_pentagon(2) ==     15\nassert     perimeter_pentagon(3) ==     25\nassert     perimeter_pentagon(4) ==     35\nassert     perimeter_pentagon(5) ==     45\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(2) == 12\nassert     perimeter_pentagon(5) == 30\nassert     perimeter_pentagon(7) == 42\n\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     perimeter_pentagon(5) == 30\nassert     perimeter_pentagon(6) == 42\nassert     perimeter_pentagon(7) == 48\nassert     perimeter_pentagon(8) == 60\nassert     perimeter_pentagon(9) == 72\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(5) == 30, 'Wrong answer:5'\nassert     perimeter_pentagon(1) == 12, 'Wrong answer:1'\nassert     perimeter_pentagon(2) == 40, 'Wrong answer:2'\nassert     perimeter_pentagon(3) == 60, 'Wrong answer:3'\nassert     perimeter_pentagon(4) == 80, 'Wrong answer:4'\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     perimeter_pentagon(5)     == 30.0\nassert     perimeter_pentagon(10)     == 60.0\nassert     perimeter_pentagon(12)     == 72.0\nassert     perimeter_pentagon(15)     == 75.0\nassert     perimeter_pentagon(18)     == 108.0\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(10) == 50\nassert     perimeter_pentagon(20) == 100\nassert     perimeter_pentagon(30) == 150\nassert     perimeter_pentagon(40) == 200\n\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_occurance('Hello my name is std') == 4\nassert     count_occurance('There is no name called std') == 0\nassert     count_occurance('Hello my name is std and there is no name called std') == 0\nassert     count_occurance('Hello std there is no name called std') == 0\nassert     count_occurance('Hello std there is no name called std and std is a surname') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_occurance('standard standard') == 1\nassert     count_occurance('standard standard is here') == 2\nassert     count_occurance('standard standard here') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_occurance('abcd') == 0\nassert     count_occurance('abcstd') == 1\nassert     count_occurance('abcabcab') == 2\nassert     count_occurance('abcabcabcabc') == 3\nassert     count_occurance('abcabcabcabcab') == 4\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_occurance('the std is there') == 2\nassert     count_occurance('the std is there') == 0\nassert     count_occurance('the std is there') == 0\nassert     count_occurance('the std is there') == 0"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_occurance('hello') == 1\nassert     count_occurance('hello, world!') == 1\nassert     count_occurance('hello, world!hello') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_occurance('welcome to std') == 2, \"wrong\"\nassert     count_occurance('abracadabra') == 2, \"wrong\"\nassert     count_occurance('std') == 1, \"wrong\"\nassert     count_occurance('o hai') == 0, \"wrong\"\nassert     count_occurance('st') == 1, \"wrong\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_occurance(\"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_occurance('std') == 1\nassert     count_occurance('hello std') == 2\nassert     count_occurance('hello std std') == 2\nassert     count_occurance('hello std std std') == 2\nassert     count_occurance('hello std std std std') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_occurance('code') == 1\nassert     count_occurance('coding') == 2\nassert     count_occurance('codingforall') == 4\nassert     count_occurance('std for std') == 1\nassert     count_occurance('coding coding') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_occurance('Hello my name is std') == 2\nassert     count_occurance('Hello my name is std d') == 1\nassert     count_occurance('Hello my name is std') == 3\nassert     count_occurance('Hello my name is std 3 times') == 1\nassert     count_occurance('Hello my name is std in the world') == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_type((3,3.0,1+1j)) == True, 'wrong'\nassert     check_type((3,3.0,'a')) == False, 'wrong'\nassert     check_type((3,3.0,'a',(1,2,3))) == False, 'wrong'\nassert     check_type((3,3.0,1,2,3)) == True, 'wrong'\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_type(('a', 'b', 1, 2, 3.0)) is True\nassert     check_type(('a', 'a', 1, 2, 3.0)) is False\nassert     check_type(('a', 'b', 1, 2, 3.0)) is False\nassert     check_type(('a', 'b', 1, 2, '3.0')) is False\nassert     check_type(('a', 'a', 1, 2, '3.0')) is True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_type((3.1415, 3.1415, 3.1415)) == True, \"Should be True\"\nassert     check_type((3, 3, 3)) == True, \"Should be True\"\nassert     check_type((3, '3', 3)) == False, \"Should be False\"\nassert     check_type((3, 3, '3')) == False, \"Should be False\"\nassert     check_type((3, 3.0, 3)) == False, \"Should be False\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_type(('apple', 'banana', 'grape')) == True\nassert     check_type(('apple', 'apple', 'grape')) == True\nassert     check_type(('apple', 'banana', 'grape', 'watermelon')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_type(('a','b','c')) is True\nassert     check_type(('a','b','c','d')) is False\nassert     check_type(('a','a','a')) is True\nassert     check_type(('1','a','1')) is False\nassert     check_type(('a','a','a','a')) is True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_type((1, 'a')) == False, \"Fail Test 1\"\nassert     check_type((1, 1)) == True, \"Fail Test 2\"\nassert     check_type((1, 1.0)) == True, \"Fail Test 3\"\nassert     check_type((1, 1, 1.0, 1)) == False, \"Fail Test 4\"\nassert     check_type((1, 'a', 1)) == False, \"Fail Test 5\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_type((1, 2, 3, 4)) == True\nassert     check_type((1.0, 2.0, 3.0, 4.0)) == True\nassert     check_type((1, 2.0, 3, 4)) == False\nassert     check_type((1, 2, '3', 4)) == False\nassert     check_type((1, 2, 3, '4')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_type((1, 2, 3)) == True, \"Failed\"\nassert check_type((1, \"Hello\", 3)) == False, \"Failed\"\nassert check_type((1, 2, 3.0)) == False, \"Failed\"\nassert check_type((1, 2, 3.0, 4, 5, 6, 7)) == True, \"Failed\"\nassert check_type((1, 2, 3, 4.0, 5, 6, 7)) == False, \"Failed\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_type(('a', 'b', 'c')) == True\nassert     check_type(('a', 'b', 2)) == False\nassert     check_type(('a', 'b')) == False\nassert     check_type(()) == True\nassert     check_type((2,)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_type([1,2,3]) == False, 'incorrect'\nassert     check_type([1,2,'a']) == True, 'incorrect'\nassert     check_type([1,'a',2]) == True, 'incorrect'\nassert     check_type([1,'a','a']) == False, 'incorrect'\nassert     check_type([1,'a','a','a']) == True, 'incorrect'\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_majority([1, 2, 2, 3, 1, 2, 1, 2, 3], 5, 1) == True\nassert     is_majority([1, 2, 2, 3, 1, 2, 1, 2, 3], 5, 2) == True\nassert     is_majority([1, 2, 2, 3, 1, 2, 1, 2, 3], 5, 3) == False\n\ndef find_middle(arr, start, end):\n    '''\n    Write a function that takes in a sorted array, its length (n), and two indices (start and end) and returns the median of the given sorted array[start:end].\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_majority([1, 2, 3, 4, 4, 4, 4, 4], 8, 4) == True\nassert is_majority([1, 2, 3, 4, 4, 4, 4, 4], 8, 5) == False\nassert is_majority([1, 2, 3, 4, 4, 4, 4, 5], 8, 4) == True\nassert is_majority([1, 2, 3, 4, 4, 4, 4, 5], 8, 3) == False\nassert is_majority([1, 2, 3, 4, 4, 4, 4, 5], 8, 2) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5, 5)\nassert     not is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5, 6)\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5, 1)\nassert     not is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5, 4)\nassert     not is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5, 7)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_majority([0, 0, 0, 0, 1, 1, 1], 7, 1) == True\nassert     is_majority([0, 0, 0, 0, 1, 1, 1], 7, 2) == False\nassert     is_majority([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 10, 10) == True\nassert     is_majority([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 10, 11) == True\nassert     is_majority([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 10, 0) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_majority([1,2,3,3,3,3,3,4], 3, 3) == True\nassert     is_majority([1,2,3,3,3,3,3,4], 3, 4) == False\nassert     is_majority([1,2,3,3,3,3,3,4], 3, 2) == False\nassert     is_majority([], 3, 1) == False\nassert     is_majority([1,2,3,3,3,3,3,4,5,6,7], 3, 5) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (is_majority([1, 2, 2, 2, 3, 4, 4, 4, 4], 8, 4) == False)\nassert     (is_majority([1, 2, 2, 2, 3, 4, 4, 4, 4], 8, 3) == True)\nassert     (is_majority([1, 2, 2, 2, 3, 4, 4, 4, 4], 8, 1) == True)\n\ndef find_majority(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_majority([1, 2, 3, 4, 4, 4], 6, 4) == True\nassert     is_majority([1, 2, 3, 4, 4, 4], 6, 3) == False\nassert     is_majority([1, 2, 3, 4, 4, 4], 6, 2) == True\nassert     is_majority([1, 2, 3, 4, 4, 4], 6, 1) == False\nassert     is_majority([1, 1, 1, 1, 1, 1], 6, 1) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5], 5, 5) == True\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5], 5, 6) == False\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5], 5, 5) == True\nassert     is_majority([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5], 5, 6) == False\nassert     is_majority([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1, 1) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_majority([1,1,2,1,1,2], 6, 1)\nassert     not is_majority([1,1,2,1,1,2], 6, 2)\nassert     not is_majority([1,1,2,1,1,2], 6, 0)\nassert     is_majority([1,1,2,1,1,2], 6, 3)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(4) == 1\nassert     count_Set_Bits(5) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(2) == 0\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(5) == 1\nassert     count_Set_Bits(7) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(0b0000) == 0\nassert     count_Set_Bits(0b0001) == 1\nassert     count_Set_Bits(0b10) == 1\nassert     count_Set_Bits(0b101) == 2\nassert     count_Set_Bits(0b10001) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(8) == 1\nassert     count_Set_Bits(16) == 1\nassert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(31) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(7) == 1\nassert     count_Set_Bits(9) == 2\nassert     count_Set_Bits(10) == 2\nassert     count_Set_Bits(11) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(0b00000001) == 1\nassert     count_Set_Bits(0b11111111) == 32\nassert     count_Set_Bits(0b0) == 0\nassert     count_Set_Bits(0b111111111) == 31\nassert     count_Set_Bits(0b1111111111111111111111111111111111111111111111111111111111111111111111111111) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(7) == 3\nassert     count_Set_Bits(15) == 4\nassert     count_Set_Bits(23) == 4\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_values_string('abcdef') == 'ace'\nassert     odd_values_string('pqrstuv') == 'pqr'\nassert     odd_values_string('xyz') == 'xy'\nassert     odd_values_string('a') == 'a'\nassert     odd_values_string('ab') == 'ab'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_values_string('abcd') == 'abcd', 'String with even values'\nassert     odd_values_string('a bcdfg') == 'a bcdfg', 'String with odd values'\nassert     odd_values_string('a b c') == 'a b c', 'String with odd values'\nassert     odd_values_string('1 2 3 4 5') == '1 2 3 4', 'String with odd values'\nprint 'Passed'\n\ndef odd_values_string_2(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # only when length of the string is odd, iterate through the string\n    if len(str) % 2 == 1:\n        return ''.join([str[i] for i in range(0, len(str), 2)])\n    # when length of string is even, iterate through the string without removing the last character\n    else:\n        return ''.join([str[i] for i in range(0, len(str) - 1, 2)])\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_values_string('abcd') == 'bcd'\nassert     odd_values_string('abcd') == 'cdef'\nassert     odd_values_string('abcd') == 'fgh'\nassert     odd_values_string('abcde') == 'bcd'\nassert     odd_values_string('abcdef') == 'cdef'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_values_string('abcdefghi') == 'abdefghi'\nassert     odd_values_string('1234567890') == '23456789'\nassert     odd_values_string('123') == '23'\nassert     odd_values_string('') == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_values_string('test') == 'etst'\nassert     odd_values_string('python') == 'ythn'\nassert     odd_values_string('hello') == 'el'\nassert     odd_values_string('12') == ''\nassert     odd_values_string('123') == '1'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     'abcd' == odd_values_string('abcd')\nassert     'cd' == odd_values_string('cd')\nassert     'cd' == odd_values_string('abc')\nassert     '' == odd_values_string('')\nassert     '' == odd_values_string(' ')\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_values_string('python')     == 'thonpy'\nassert     odd_values_string('hello')     == 'helo'\nassert     odd_values_string('123456789')     == '54321'\nassert     odd_values_string('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890')     == '12345678901234567890'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_values_string('abc') == 'bcd'\nassert     odd_values_string('ab') == 'b'\nassert     odd_values_string('q') == 'q'\n\n\n'''\n3. Find the longest word in the string. (Write your own function and do not use inbuilt python function)\n'''\ndef longest_word(str):\n    '''\n    Write a python function to find the longest word in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_values_string('HelloWorld') == 'hlld', 'incorrect'\nassert     odd_values_string('f') == '', 'incorrect'\nassert     odd_values_string('Hello') == 'ello', 'incorrect'\nassert     odd_values_string('abcdef') == 'abc', 'incorrect'\nassert     odd_values_string('HelloWorld') == 'hlld', 'incorrect'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_values_string('hello') == 'hlo', 'test 1'\nassert     odd_values_string('c') == '', 'test 2'\nassert     odd_values_string('code') == 'odde', 'test 3'\nassert     odd_values_string('python') == 'ytho', 'test 4'\nassert     odd_values_string('123456789') == '12345678', 'test 5'\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_of_three(1, 2, 3) == 1\nassert     min_of_three(3, 1, 2) == 1\nassert     min_of_three(3, 2, 1) == 1\nassert     min_of_three(2, 3, 1) == 1\nassert     min_of_three(1, 1, 1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(2,3,1) == 1\nassert     min_of_three(3,2,1) == 1\nassert     min_of_three(3,1,2) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     min_of_three(1,5,2) == 1\nassert     min_of_three(-3,4,6) == -3\nassert     min_of_three(0,0,0) == 0\nassert     min_of_three(3,3,3) == 3\nprint \"min_of_three:    The function seems to work correctly!\"\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_of_three(1,1,1) == 1\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,1,2) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(2,2,2) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1, 'incorrect'\nassert     min_of_three(1,1,2) == 1, 'incorrect'\nassert     min_of_three(1,1,1) == 1, 'incorrect'"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,3,2) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(2,3,1) == 1\nassert     min_of_three(3,1,2) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,2,1) == 1\nassert     min_of_three(5,3,2) == 2\nassert     min_of_three(5,5,2) == 2\nassert     min_of_three(5,5,5) == 5\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,2,1) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(1,3,2) == 1\nassert     min_of_three(3,1,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     min_of_three(-10,10,0) == -10\nassert     min_of_three(-10,-10,10) == -10\nassert     min_of_three(0,0,10) == 0\nassert     min_of_three(10,10,10) == 10\nassert     min_of_three(0,0,0) == 0\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     min_of_three(5,7,9) == 7\nassert     min_of_three(1,5,2) == 1\nassert     min_of_three(9,8,7) == 7\nassert     min_of_three(3,3,4) == 3\nassert     min_of_three(9,5,10) == 5\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,0,5) == False\nassert all_Bits_Set_In_The_Given_Range(1,1,5) == True\nassert all_Bits_Set_In_The_Given_Range(0,0,5) == True\nassert all_Bits_Set_In_The_Given_Range(0,1,5) == False\nassert all_Bits_Set_In_The_Given_Range(1,2,5) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,1)==False\nassert     all_Bits_Set_In_The_Given_Range(0,0,0)==True\nassert     all_Bits_Set_In_The_Given_Range(1,0,1)==True\nassert     all_Bits_Set_In_The_Given_Range(1,0,0)==False\nassert     all_Bits_Set_In_The_Given_Range(1,1,1)==True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(13,2,3) == True\nassert     all_Bits_Set_In_The_Given_Range(10,2,3) == False\nassert     all_Bits_Set_In_The_Given_Range(10,2,4) == False\nassert     all_Bits_Set_In_The_Given_Range(10,2,1) == True\nassert     all_Bits_Set_In_The_Given_Range(10,2,0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,0)==True\nassert     all_Bits_Set_In_The_Given_Range(0,1,0)==False\nassert     all_Bits_Set_In_The_Given_Range(0,2,0)==False\nassert     all_Bits_Set_In_The_Given_Range(0,3,0)==False\nassert     all_Bits_Set_In_The_Given_Range(0,0,3)==True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,4,7) == False\nassert     all_Bits_Set_In_The_Given_Range(3,7,9) == False\nassert     all_Bits_Set_In_The_Given_Range(4,7,9) == True\nassert     all_Bits_Set_In_The_Given_Range(5,7,9) == True\n\ndef all_Bits_Set_In_The_Given_Range_2(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all( [n & (1<<i) for i in range(l,r+1)] )\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,1) == False\nassert     all_Bits_Set_In_The_Given_Range(1,0,1) == False\nassert     all_Bits_Set_In_The_Given_Range(0,1,1) == True\nassert     all_Bits_Set_In_The_Given_Range(1,1,1) == True\nassert     all_Bits_Set_In_The_Given_Range(1,0,0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(3,3,5) == False\nassert     all_Bits_Set_In_The_Given_Range(3,7,5) == True\nassert     all_Bits_Set_In_The_Given_Range(3,7,8) == False\nassert     all_Bits_Set_In_The_Given_Range(2,2,2) == False\nassert     all_Bits_Set_In_The_Given_Range(2,0,0) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,0) == False\nassert     all_Bits_Set_In_The_Given_Range(0,1,0) == False\nassert     all_Bits_Set_In_The_Given_Range(0,0,1) == True\nassert     all_Bits_Set_In_The_Given_Range(0,1,1) == True\nassert     all_Bits_Set_In_The_Given_Range(0,100,0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,1,2) == True\nassert     all_Bits_Set_In_The_Given_Range(0,4,10) == False\nassert     all_Bits_Set_In_The_Given_Range(1,0,0) == False\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == True\nassert     all_Bits_Set_In_The_Given_Range(0,1,2) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(7, 0, 7) == True\nassert     all_Bits_Set_In_The_Given_Range(5, 0, 7) == True\nassert     all_Bits_Set_In_The_Given_Range(5, 0, 0) == False\nassert     all_Bits_Set_In_The_Given_Range(5, 5, 7) == True\nassert     all_Bits_Set_In_The_Given_Range(5, 1, 5) == False\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     re_arrange_array([-1, 2, 3, 4, 5, -6, 7, 8, 9], 3) == [-1, -6, -1, 2, 3, 4, 5, -1, 7, 8, 9]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 6, 7, 8, -9], 3) == [-1, -2, 3, 4, -5, -1, -6, -7, -8, -9]\nassert     re_arrange_array([], 3) == []\nassert     re_arrange_array([-1, -2, 3, 4, -5, 6, 7, 8, -9], -3) == [-1, -2, 3, 4, -5, -1, -6, -7, -8, -9]\nassert     re_arrange_array([-1, -2, 3, 4, -5, 6, 7, 8, -9], 2) == [-1, -2, 3, 4, -5, -1, -6, -7, -8, -9]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     re_arrange_array([-1, -2, -3, 4, 5, 6, 7, 8, 9, 10], 3) == [4, 5, 6, -1, -2, -3, 7, 8, 9, 10]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6, 7, 8, 9, 10], 0) == [-1, -2, -3, 4, 5, 6, 7, 8, 9, 10]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3, -4, -5, -6, 7, 8, 9, 10]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6, 7, 8, 9, 10], 10) == [-1, -2, -3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     re_arrange_array([5, 4, 3, 2, -1, 0], 3)     == [-1, 0, 5, 4, 3, 2]\nassert     re_arrange_array([-3, -4, -1, 0, 1, 2, 3, 4], 2)     == [-3, -4, 1, 0, 2, 3, 4]\nassert     re_arrange_array([-1, 0, 1], 3)                 == [-1, 0, 1]\nassert     re_arrange_array([-2, -1, -3, -4], 4)         == [-2, -1, -3, -4]\nassert     re_arrange_array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, "
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     re_arrange_array([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14], 5) == [2, -3, -11, -14, -1, 4, 5, 6, 7, 8, 9]\nassert     re_arrange_array([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15], 7) == [2, -3, -11, -14, -15, -1, 4, 5, 6, 7, 8, 9]\nassert     re_arrange_array([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, 16], 10) == [2, -3, -11, -14, -15, 16, -1, 4, 5, 6, 7, 8, 9]\nassert     re_arrange_array([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, 16, 17], 10) == [2, -3, -11, -14, -15, 16, 17, -1, 4, 5, 6, 7, 8, 9]\nassert     re_arrange_array([-1, 2, -3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, 16, 17, 18, 19], 10) == [2, -3, -11, -14, -15, 16, 17, 18, 19, -1, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [-2, 1, 3, 4, -6, 5, -7, -8] == re_arrange_array([-2, 1, 3, 4, -6, 5, -7, -8], 4)\nassert     [-2, 1, -3, -4, 6, -5, -7, -8] == re_arrange_array([-2, 1, 3, 4, -6, 5, -7, -8], 8)\nassert     [-2, -1, 3, 4, -6, 5, -7, -8] == re_arrange_array([-2, -1, 3, 4, -6, 5, -7, -8], 8)\nassert     [-2, -1, -3, -4, 6, -5, -7, -8] == re_arrange_array([-2, -1, 3, 4, -6, 5, -7, -8], 8)\nassert     [-2, -1, -3, -4, -6, 5, -7, -8] == re_arrange_array([-2, -1, 3, 4, -6, 5, -7, -8], 8)\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 3) == [-7, -3, -1, 2, 4, 6, 8, 9]\nassert     re_arrange_array([1, 2, -3, 4, 5, 6, -7, 8, 9], 3) == [-7, -3, 1, 2, 4, 6, 8, 9]\nassert     re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 8) == [-7, -3, -1, 2, 4, 6, 8, 9]\nassert     re_arrange_array([-1, -2, -3, -4, -5, -6, -7, -8, -9], 3) == [-7, -3, -1, -2, -4, -6, -8, -9]\nassert     re_arrange_array([-1, -2, -3, -4, -5, -6, -7, -8, -9], 8) == [-7, -3, -1, -2, -4, -6, -8, -9]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     re_arrange_array([-1,1,-1,-2,-2,2,3,3], 3) == [-2,-1,1,2,2,-2,-3,-3]\nassert     re_arrange_array([-1,1,1,2,2,3], 3) == [-1,-1,1,2,2,3]\nassert     re_arrange_array([-1,1,-2], 1) == [-1]\nassert     re_arrange_array([], 0) == []\nassert     re_arrange_array([1, 2, 3, 4, -5, 6, -7], 3) == [-5, -4, -3, -2, 1, 2, 3]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     re_arrange_array([3, -1, 4, -5, 6, 3], 3) == [-1, -5, 6, 3, 3, 4]\nassert     re_arrange_array([5, 8, 3, -4, 2, 9, -3, 7], 8) == [-4, 2, 3, 5, 8, 9, 7, 3]\nassert     re_arrange_array([0, 1, 2, 3], 3) == [3, 0, 1, 2]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, -1, -2, -3, -4, -5], 3) == [-1, 1, 2, -3, -4, 3, 4, 5, -2, -3, -4]\nassert     re_arrange_array([-2, -1, 1, 2, 3, 4, 5], 3) == [-2, -1, 1, 2, 3, 4, 5]\nassert     re_arrange_array([-1, 1, 2, -3, 4, -5], 3) == [-1, 1, 2, -3, -4, -5]"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [-1, -2, -3, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     re_arrange_array([1, -2, 3, -4, 5, 6, -7, 8, 9], 4) == [-1, -2, 3, 4, -5, -6, -7, 8, 9, 1]\nassert     re_arrange_array([1, 2, 3, -4, -5, -6, -7, -8, -9], 4) == [-1, -2, 3, 4, -5, -6, -7, -8, -9, 1]\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_blank(\"blah  blah \", 'a') == \"blah  blah a\"\nassert     replace_blank(\"blah blah\", 'a') == \"blah a b\"\nassert     replace_blank(\"blah blah\", '') == \"blah blah\"\nassert     replace_blank(\"blah blah blah\", 'a') == \"blah b l\"\nassert     replace_blank(\"blah blah blah\", 'b') == \"blah ah l\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_blank('a b c d', '*') == 'a b * c d'\nassert     replace_blank('Hi', '*') == 'Hi'\nassert     replace_blank('A B C', '*') == 'A B * C'\n\n\ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_blank(\"Flowers are red\", \"r\") == \"Flowers are red\"\nassert     replace_blank(\"Flowers are red\", \"s\") == \"Fslrs are red\"\nassert     replace_blank(\"Flowers are red\", \"s\") == \"Flrs are red\"\nassert     replace_blank(\"Flowers are red\", \"\") == \"Flowers are red\"\nassert     replace_blank(\"Flowers are red\", \" \") == \"Flowers are red\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_blank('hi','?') == 'hi?'\nassert     replace_blank('','') == ''\nassert     replace_blank('my name is John',',') =='my name is John'\nassert     replace_blank('','') == ''\nassert     replace_blank('','') == ''\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_blank('b     ', '.')     == 'b.b','replace_blank(\u2018b     \u2019, \u2018.\u2019) should be \u2018b.b\u2019'\nassert     replace_blank('a b   ', '*')    == 'a*b*','replace_blank(\u2018a b   \u2019, \u2018*\u2019) should be \u2018a*b*\u2019'\nassert     replace_blank('  b   ', '#')    == '#b#','replace_blank(\u2018  b   \u2019, \u2018#\u2019) should be \u2018#b#\u2019'\nassert     replace_blank('ab c  ', '*')    == 'ab*c*','replace_blank(\u2018ab c  \u2019, \u2018*\u2019) should be \u2018ab*c*\u2019'\nassert     replace_blank('ab c d  ', '*')    == 'ab*c*d*','replace_blank(\u2018ab c d  \u2019, \u2018*\u2019) should be \u2018ab*c*d*\u2019'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_blank(\"hello\",'a') == 'hello'\nassert     replace_blank(\"hello\",'b') == 'hello'\nassert     replace_blank(\"hello\",'h') == 'he'\nassert     replace_blank(\"hello\",'l') == 'he'\nassert     replace_blank(\"hello\",'e') == 'hel'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_blank('cat','.') == 'cat','should be cat'\nassert     replace_blank('','') == '','should be blank'\nassert     replace_blank('', 'a') == '','should be blank'\nassert     replace_blank('', '.') == '.','should be blank'\nassert     replace_blank('', 'A') == '','should be blank'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         replace_blank('', '') == ''\nassert         replace_blank('', 'a') == ''\nassert         replace_blank('', 'A') == ''\nassert         replace_blank('', 'A', 'a') == 'a'\nassert         replace_blank('hello', 'a') == 'hello'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_blank(\" \", \"A\") == \"A A\", \"Test 1 failed\"\nassert     replace_blank(\"1 2 3\", \"A\") == \"1 2 3\", \"Test 2 failed\"\nassert     replace_blank(\"1   2   3   4   5   6   7\", \"A\") == \"1   2   3   4   5   6   7\", \"Test 3 failed\"\nassert     replace_blank(\"\", \"A\") == \"\", \"Test 4 failed\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_blank('mai kita', 'a') =='maia kita'\nassert     replace_blank('maia kita', 'a') =='maia kita'\nassert     replace_blank('mai kita','') =='maia kita'\nassert     replace_blank('mai kita', '') =='mai kita'\nassert     replace_blank('', 'a') == ''\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     larg_nnum([10, 1, 12, 9, 2, 13, 8, 7], 3) == [12, 13, 10]\nassert     larg_nnum([1, 12, 9, 2, 13, 8, 7], 3) == [12, 13, 10]\nassert     larg_nnum([0, 1, 12, 9, 2, 13, 8, 7], 3) == [12, 13, 10]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     larg_nnum([1, 3, 2, 4, 5, 1, 6], 2) == [6, 5, 1]\nassert     larg_nnum([1, 3, 2, 4, 5, 1, 6], 4) == [6, 5, 1, 4]\nassert     larg_nnum([1, 3, 2, 4, 5, 1, 6], 7) == [6, 5, 1, 4, 3]\nassert     larg_nnum([1, 3, 2, 4, 5, 1, 6], 0) == []\nassert     larg_nnum([-1, 3, 2, 4, 5, 1, 6], 2) == [1, 6]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     larg_nnum([3,2,1,5,4],1) == [5]\nassert     larg_nnum([1,3,2,4,5],2) == [5,4]\nassert     larg_nnum([3,2,1,5,4],3) == [5,4,3]\nassert     larg_nnum([3,2,1,5,4],4) == [5,4,3,2]\nassert     larg_nnum([3,2,1,5,4],5) == [5,4,3,2,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     larg_nnum([5,1,3,2,6],3) == [6,5,3]\nassert     larg_nnum([5,1,3,2,6],1) == [5]\nassert     larg_nnum([5,1,3,2,6],5) == [5,1,3,2,6]\nassert     larg_nnum([],10) == []\nassert     larg_nnum([1,2,3,4,5],5) == [5,4,3,2,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     larg_nnum([1, 3, -1, 0, 5, -2, -9], 3) == [5, -2, -9]\nassert     larg_nnum([1, 3, -1, 0, 5, -2, -9], 2) == [5, -2]\nassert     larg_nnum([1, 3, -1, 0, 5, -2, -9], 1) == [5]\nassert     larg_nnum([1, 3, -1, 0, 5, -2, -9], 0) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [1,2,3,4,5,6,7,8,9,10] == larg_nnum([1,2,3,4,5,6,7,8,9,10],10)\nassert     [5,6,7,8,9,10] == larg_nnum([1,2,3,4,5,6,7,8,9,10],5)\nassert     [4,5,6,7,8] == larg_nnum([1,2,3,4,5,6,7,8,9,10],7)\nassert     [10,9,8,7,6] == larg_nnum([1,2,3,4,5,6,7,8,9,10],4)\nassert     [10,9] == larg_nnum([1,2,3,4,5,6,7,8,9,10],3)\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     larg_nnum([4,5,6,3,1,8,1,5,3,6,4,9],1) == [9]\nassert     larg_nnum([4,5,6,3,1,8,1,5,3,6,4,9],2) == [9,6]\nassert     larg_nnum([4,5,6,3,1,8,1,5,3,6,4,9],3) == [9,6,4]\nassert     larg_nnum([4,5,6,3,1,8,1,5,3,6,4,9],4) == [9,6,4,3]\nassert     larg_nnum([4,5,6,3,1,8,1,5,3,6,4,9],5) == [9,6,4,3,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     larg_nnum([1,9,8,7,6,5,4,3,2,10],3) == [9,8,7]\nassert     larg_nnum([1,9,8,7,6,5,4,3,2,10],2) == [9,8]\nassert     larg_nnum([1,9,8,7,6,5,4,3,2,10],7) == [9,8,7]\nassert     larg_nnum([1,9,8,7,6,5,4,3,2,10],10) == [9,8,7,6,5,4,3,2,1]\nassert     larg_nnum([1,9,8,7,6,5,4,3,2,10],0) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     larg_nnum([4,5,1,3,6,8], 3) == [5,6,8]\nassert     larg_nnum([3,5,1,3,6,8], 3) == [5,6,8]\nassert     larg_nnum([3,5,1,3,6,8], 3) == [5,6,8]\nassert     larg_nnum([2,1,3,4,5,6], 3) == [5,6,6]\nassert     larg_nnum([2,1,3,4,5,6], 3) == [5,6,6]\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert lateralsuface_cylinder(3,2) == 12.56637\nassert lateralsuface_cylinder(3,3) == 15.0\nassert lateralsuface_cylinder(3,4) == 18.75\nassert lateralsuface_cylinder(3,5) == 21.56637\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(0,2) == 0\nassert     lateralsuface_cylinder(2,2) == 2*pi*r\nassert     lateralsuface_cylinder(5,0) == 0\nassert     lateralsuface_cylinder(2,3) == 2*pi*r + (3/2)*pi*r*r\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lateralsuface_cylinder(2,4) ==  104\nassert     lateralsuface_cylinder(2.5,5) ==  120\nassert     lateralsuface_cylinder(3,5) ==  175\nassert     lateralsuface_cylinder(4,5) ==  236\nassert     lateralsuface_cylinder(5,5) ==  400"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lateralsuface_cylinder(0.5,2) == 0.25, \"Wrong lateralsuface_cylinder(0.5,2)\"\nassert     lateralsuface_cylinder(0.5,0.5) == 0.5, \"Wrong lateralsuface_cylinder(0.5,0.5)\"\nassert     lateralsuface_cylinder(0.5,1) == 0.5, \"Wrong lateralsuface_cylinder(0.5,1)\"\nassert     lateralsuface_cylinder(0.5,2.5) == 0.5, \"Wrong lateralsuface_cylinder(0.5,2.5)\"\nassert     lateralsuface_cylinder(0.5,3) == 0.5, \"Wrong lateralsuface_cylinder(0.5,3)\"\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lateralsuface_cylinder(4,2) == 58.0\nassert     lateralsuface_cylinder(5,2) == 104.0\nassert     lateralsuface_cylinder(7,2) == 348.0\nassert     lateralsuface_cylinder(8,2) == 664.0\nassert     lateralsuface_cylinder(9,2) == 972.0\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(1,0)    == 4*math.pi\nassert     lateralsuface_cylinder(2,0)    == 12*math.pi\nassert     lateralsuface_cylinder(0,1)    == 12*math.pi\nassert     lateralsuface_cylinder(0,2)    == 4*math.pi\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(5) == 125\nassert     volume_cube(2) == 8\nassert     volume_cube(6) == 216\nassert     volume_cube(2.3) == 9.5\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_cube(2) == 8, \"volume_cube(2)!= 8\"\nassert     volume_cube(3) == 27, \"volume_cube(3)!= 27\"\nassert     volume_cube(5) == 125, \"volume_cube(5)!= 125\"\nassert     volume_cube(7) == 343, \"volume_cube(7)!= 343\"\nassert     volume_cube(9) == 729, \"volume_cube(9)!= 729\"\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_cube(2) == 8, 'Test1 for volume_cube'\nassert     volume_cube(5) == 125, 'Test2 for volume_cube'\nprint('passed: volume_cube')\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_cube(2) == 8, \"The result of volume_cube(2) is %s instead of 8\" % volume_cube(2)\nassert     volume_cube(3) == 27, \"The result of volume_cube(3) is %s instead of 27\" % volume_cube(3)\nassert     volume_cube(4) == 64, \"The result of volume_cube(4) is %s instead of 64\" % volume_cube(4)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(8) == 64\nassert     volume_cube(9) == 81\nassert     volume_cube(12) == 144\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_cube(4) == 64\nassert     volume_cube(3) == 27\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(5) == 125\nassert     volume_cube(0) == 0\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 0\nassert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(5) == 1\nassert     even_bit_set_number(6) == 2\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (even_bit_set_number(0) == 0)\nassert     (even_bit_set_number(1) == 1)\nassert     (even_bit_set_number(2) == 2)\nassert     (even_bit_set_number(3) == 3)\nassert     (even_bit_set_number(4) == 4)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 1\nassert     even_bit_set_number(2) == 3\nassert     even_bit_set_number(3) == 5\nassert     even_bit_set_number(4) == 7\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(1) == 0\nassert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(3) == 1\nassert     even_bit_set_number(4) == 0\nassert     even_bit_set_number(5) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(4) == 0b0000\nassert     even_bit_set_number(5) == 0b00001\nassert     even_bit_set_number(6) == 0b00010\nassert     even_bit_set_number(7) == 0b00011\nassert     even_bit_set_number(8) == 0b00100\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 1\nassert     even_bit_set_number(2) == 2\nassert     even_bit_set_number(7) == 15\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 2\nassert     even_bit_set_number(2) == 4\nassert     even_bit_set_number(3) == 6\nassert     even_bit_set_number(4) == 8\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef even_bit_set_string(s): \n    '''\n    Write a python function to set all even bits of each character of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_bit_set_number(0) == 0 \nassert     even_bit_set_number(1) == 2\nassert     even_bit_set_number(2) == 4\nassert     even_bit_set_number(3) == 6\nassert     even_bit_set_number(4) == 8\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_occurences([(1,2),(1,3),(2,3),(2,4),(3,4),(3,5)]) == {(1,2):1,(1,3):2,(2,3):2,(2,4):1,(3,4):1,(3,5):1}\nassert     check_occurences([(1,2),(1,3),(2,4),(3,4),(3,5)]) == {(1,2):1,(1,3):2,(2,4):1,(3,4):1,(3,5):1}\nassert     check_occurences([(1,2),(1,3),(2,4),(1,5),(3,4),(2,3)]) == {(1,2):2,(1,3):2,(2,4):1,(1,5):1,(3,4):1,(2,3):1}\nassert     check_occurences([(1,2),(1,3),(2,4),(1,5),(3,4),(2,3)]) == {(1,2):2,(1,3):2,(2,4):1,(1,5):1,(3,4):1,(2,3):1}\nassert     check_occurences([(1,2),(1,3),(2,4),(1,5),(3,4),(2,3)]) == {(1,2):2,(1,3):2,(2,4):1,(1,5):1,(3,4):1,(2,3):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([(1,2),(3,4)]) == {(1,2):1,(3,4):1}\nassert     check_occurences([(1,2),(3,4),(1,2)]) == {(1,2):2,(3,4):1}\n\ndef is_anagram(a,b):\n    '''\n    Write a function that takes in two strings and returns a boolean indicating whether the two strings are anagrams of each other.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef find_max_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns the tuple with the highest number of occurrences in the list. \n    '''\n    pass"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_occurences([(3,4), (1,2), (3,4), (1,2), (2,3), (4,3)]) == {(3,4): 1, (1,2): 2, (2,3): 1, (4,3): 1}\nassert     check_occurences([(3,4), (1,2), (1,3), (2,3), (4,3)]) == {(3,4): 1, (1,2): 1, (1,3): 1, (2,3): 1, (4,3): 1}\nassert     check_occurences([(3,4), (1,2), (1,2), (2,3), (4,3)]) == {(3,4): 1, (1,2): 2, (2,3): 1, (4,3): 1}\nassert     check_occurences([(3,4), (3,4), (1,2), (2,3), (4,3)]) == {(3,4): 2, (1,2): 1, (2,3): 1, (4,3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_occurences([(1, 2), (2, 1), (2, 3), (4, 1), (4, 1)]) == {(1, 2): 2, (2, 3): 1, (4, 1): 3}\nassert     check_occurences([(1, 1), (2, 3), (3, 1), (3, 1), (3, 1), (4, 1)]) == {(1, 1): 2, (2, 3): 2, (3, 1): 2, (4, 1): 1}\n\ndef duplicate_encounters(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_occurences([(1,3),(2,3),(3,4)]) == {(1,3):1, (2,3):1, (3,4):1}\nassert     check_occurences([(1,2),(2,4),(3,2),(4,5)]) == {(1,2):2, (2,4):1, (3,2):1, (4,5):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_occurences([(1, 2), (1, 2), (1, 2), (2, 3), (1, 2)]) == {(1, 2): 2, (2, 3): 1, (1, 2): 2}\nassert     check_occurences([(1, 2), (1, 2), (1, 3), (2, 3), (1, 2)]) == {(1, 2): 2, (1, 3): 1, (2, 3): 2}\nassert     check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3), (1, 2)]) == {(1, 2): 3, (1, 3): 2, (2, 3): 1}\nassert     check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3), (1, 2)]) == {(1, 2): 5, (1, 3): 2, (2, 3): 1}\nassert     check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3), (1, 2)]) == {(1, 2): 8, (1, 3): 2, (2, 3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_occurences([(1, 2), (3, 1), (4, 1), (2, 1)]) == {(1, 2): 1, (2, 1): 4, (3, 1): 1, (4, 1): 1}\nassert     check_occurences([(1, 2), (2, 1), (1, 2), (2, 1), (1, 2)]) == {(1, 2): 2, (2, 1): 3}\n\ndef check_quadratic_sums(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns a dictionary mapping each unique number to the sum of its quadratic neighbours.\n    For example, given [1, 2, 3, 4, 5, 6, 7, 8], the function should return the following:\n    {1: 1, 2: 3, 3: 10, 4: 6, 5: 25, 6: 36, 7: 49, 8: 64}\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_occurences([\n                ('1', 1),\n                ('2', 1),\n                ('2', 1),\n                ('3', 1),\n                ('4', 1),\n                ('4', 1),\n                ('5', 1)\n            ]) == {\n                ('1', 1): 2,\n                ('2', 1): 2,\n                ('3', 1): 1,\n                ('4', 1): 2,\n                ('5', 1): 1\n            }\n\ndef merge_and_sort(input_list):\n    '''\n    Given a list of tuples, merge and sort the tuples by the second element in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_occurences([(1,2), (3,4), (1,2), (2,3), (1,2), (3,4), (1,2), (2,3)]) == {(1,2):3, (3,4):2}\nassert     check_occurences([(1,2), (3,4), (1,2), (2,3), (1,2), (3,4)]) == {(1,2):2, (3,4):2}\nassert     check_occurences([(1,2), (3,4), (1,2), (2,3), (1,2), (3,4), (1,2), (2,3), (1,2), (3,4), (1,2)]) == {(1,2):3, (3,4):2}\nassert     check_occurences([]) == {}\nassert     check_occurences([(1,2), (3,4), (1,2), (2,3), (1,2), (3,4), (1,2), (2,3)]) == {(1,2):3, (3,4):2}\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     number_of_substrings('a') == 1\nassert     number_of_substrings('abc') == 3\nassert     number_of_substrings('aa') == 2\nassert     number_of_substrings('abcc') == 4\n\ndef sum_of_digits(str):\n    '''\n    Write a python function to find the sum of all the digits in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     number_of_substrings('abcabcdef') == 3, \"Not correct\"\nassert     number_of_substrings('a') == 1, \"Not correct\"\nassert     number_of_substrings('ab') == 2, \"Not correct\"\nassert     number_of_substrings('abc') == 3, \"Not correct\"\nassert     number_of_substrings('abcabc') == 3, \"Not correct\"\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     number_of_substrings('Hello, World!') == 5\nassert     number_of_substrings('This is a test') == 9\nassert     number_of_substrings('Python') == 1\nassert     number_of_substrings('') == 0\nassert     number_of_substrings(' a ') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     number_of_substrings(\"abc\") == 3\nassert     number_of_substrings(\"aaaaa\") == 0\nassert     number_of_substrings(\"abcabc\") == 3\nassert     number_of_substrings(\"abcabcbb\") == 3\nassert     number_of_substrings(\"abcabcbb\") == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     number_of_substrings(\"123\") == 3, \"1st example\"\nassert     number_of_substrings(\"12345\") == 5, \"2nd example\"\nassert     number_of_substrings(\"hello\") == 1, \"3rd example\"\nassert     number_of_substrings(\"\") == 0, \"4th example\"\n\n\ndef find_max_substring(str):\n    '''\n    Write a python function to return the maximum possible sub-string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     number_of_substrings('GEEKSFORGEEKS') == 6\nassert     number_of_substrings('GEEKSFORGEEKSforGEEKS') == 12\nassert     number_of_substrings('HelloWorld!') == 0\nassert     number_of_substrings('H') == 1\nassert     number_of_substrings(' ') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     number_of_substrings('peterpan') == 2\nassert     number_of_substrings('pa$$t') == 3\nassert     number_of_substrings('w') == 1\nassert     number_of_substrings('aab') == 3\nassert     number_of_substrings('a') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     number_of_substrings('')    ==     0\nassert     number_of_substrings('a')    ==    1\nassert     number_of_substrings('abc')    ==     3\nassert     number_of_substrings('abcabc')    ==    6\nassert     number_of_substrings('abcabcabc')    ==    9\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     number_of_substrings('PYTHON') == 3\nassert     number_of_substrings('ABCD') == 2\nassert     number_of_substrings('HERE') == 4\nassert     number_of_substrings('SPAM') == 3\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     number_of_substrings('ababababab') == 3\nassert     number_of_substrings('abcabababab') == 3\nassert     number_of_substrings('abc') == 3\n\ndef longest_substring(str):\n    '''\n    Write a python function to find the length of the longest substring of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(6,1) == 1\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(2,1) == 1\nassert     get_total_number_of_sequences(3,1) == 2\nassert     get_total_number_of_sequences(4,1) == 3\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(2,1) == 1\nassert get_total_number_of_sequences(5,2) == 2\nassert get_total_number_of_sequences(10,3) == 4\nassert get_total_number_of_sequences(10,4) == 8\nassert get_total_number_of_sequences(100,5) == 16\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(3,3) == 1\nassert     get_total_number_of_sequences(3,2) == 0\nassert     get_total_number_of_sequences(3,1) == 0\nassert     get_total_number_of_sequences(3,0) == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(10,3) == 7\nassert     get_total_number_of_sequences(5,2) == 3\nassert     get_total_number_of_sequences(5,1) == 1\nassert     get_total_number_of_sequences(15,3) == 5\nassert     get_total_number_of_sequences(15,5) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(3,1) == 1\nassert     get_total_number_of_sequences(3,2) == 2\nassert     get_total_number_of_sequences(3,3) == 2\nassert     get_total_number_of_sequences(3,4) == 3\nassert     get_total_number_of_sequences(3,5) == 3\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(1,1)     == 1\nassert     get_total_number_of_sequences(1,2)     == 1\nassert     get_total_number_of_sequences(2,1)     == 1\nassert     get_total_number_of_sequences(2,2)     == 2\nassert     get_total_number_of_sequences(3,1)     == 1\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(10,3) == 7\nassert     get_total_number_of_sequences(100,4) == 100\nassert     get_total_number_of_sequences(1000,5) == 1\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(10,1) == 0\nassert     get_total_number_of_sequences(10,2) == 0\nassert     get_total_number_of_sequences(10,3) == 0\nassert     get_total_number_of_sequences(10,4) == 0\nassert     get_total_number_of_sequences(10,5) == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(20,2) == 10\nassert     get_total_number_of_sequences(2,2) == 1\nassert     get_total_number_of_sequences(10,2) == 6\nassert     get_total_number_of_sequences(10,3) == 4\nassert     get_total_number_of_sequences(10,4) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(4,2) == 13\nassert get_total_number_of_sequences(5,3) == 23\nassert get_total_number_of_sequences(5,5) == 28\nassert get_total_number_of_sequences(15,7) == 73\nassert get_total_number_of_sequences(25,8) == 145\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     replace_list([1, 2, 3], [7, 8, 9]) == [1, 2, 3, 7, 8, 9]\nassert     replace_list([1, 2, 3, 4], [5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     replace_list([1, 2, 3, 4], []) == [1, 2, 3, 4]\nassert     replace_list([], [5, 6]) == [5, 6]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_list([1,2,3,4,5,6,7],[2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     replace_list([1,2,3,4,5,6,7],[]) == [1,2,3,4,5,6,7]\nassert     replace_list([1,2,3,4,5,6],[7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     replace_list([], [7,8,9,10]) == [7,8,9,10]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]\nassert     replace_list([1, 2, 3, 4], [4, 5, 6]) == [1, 2, 4, 5, 6]\nassert     replace_list([1, 2, 3], [1, 2, 3]) == [1, 2, 1, 2, 3]\nassert     replace_list([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 1, 2, 3]\nassert     replace_list([1], [1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_list([0,1,2], [3,4,5]) == [0,1,2,3,4,5]\nassert     replace_list([-1,-2,3], [-3,-4,5]) == [-1,-2,3,-3,-4,5]\nassert     replace_list([-1,-2,3], [-3,-4,5,6]) == [-1,-2,3,-3,-4,5]\nassert     replace_list([0,1,2], [3,4,5,6]) == [0,1,2,3,4,5]\nassert     replace_list([3,4,5], [3,4,5]) == [3,4,5,3,4,5]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_list([1,2,3,4], [4,5,6,7]) == [1,2,3,5,6,7]\nassert     replace_list([1,2,3,4,5], [4,5,6,7]) == [1,2,3,5,6,7]\nassert     replace_list([1,2,3,4,5,6], [4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     replace_list([1,2,3,4], [4,5,6]) == [1,2,3,5,6]\nassert     replace_list([1,2,3,4], []) == [1,2,3,4]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3,4],[1,2,3,4]) == [1,2,3,4]\nassert     replace_list([1,2,3,4],[2,3,4,5]) == [1,2,3,4]\nassert     replace_list([1,2,3,4],[2,3,4]) == [1,2,3,4]\nassert     replace_list([1,2,3,4],[]) == [1,2,3,4]\nassert     replace_list([1,2,3,4],[1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_list([1,2,3,4,5],['a','b','c']) == ['1','2','3','a','b','c']\nassert     replace_list([1,2,3,4,5],['a','b','c','d','e']) == ['1','2','3','a','b','c','d','e']\nassert     replace_list([],['a','b','c','d','e']) == ['a','b','c','d','e']\nassert     replace_list([],['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3,4], [3,4,5])         == [1,2,3,5]\nassert     replace_list([1,2,3,4], [])                 == [1,2,3,4]\nassert     replace_list([], [3,4,5])                 == [3,4,5]\nassert     replace_list([1,2,3,4], [3,4,5,6,7])     == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_list([1,2,3,4,5],[1,2,3]) == [1,2,3,4,1]\nassert     replace_list([1,2,3,4,5],[1,2,3,4,5,6,7,8,9]) == [1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3,4],[5,6,7]) == [1,2,3,5,6,7]\nassert     replace_list([1,2,3,4,5],[6,7]) == [1,2,3,6,7]\nassert     replace_list([1,2,3,4],[6,7,8]) == [1,2,3,6,7]\nassert     replace_list([1,2,3,4],[]) == [1,2,3,4]\n\ndef is_sorted(list1):\n    '''\n    Write a function that takes in a list and returns True if the list is sorted and False if not.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_charac('hello') == 5\nassert     count_charac('Welcome to IntelliJ') == 24\nassert     count_charac('this is the python') == 27\nassert     count_charac('this is the python') == 27\nassert     count_charac('this is the python') == 27\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_charac('a') == 1\nassert     count_charac('abc') == 3\nassert     count_charac('abcde') == 5\nassert     count_charac('abcde a') == 6\nassert     count_charac('abcde a b') == 7\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_charac('abcd') == 4\nassert     count_charac('aabcd') == 5\nassert     count_charac('aaaaabcd') == 6\nassert     count_charac('aaaaaabbcd') == 7\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_charac('this') == 4\nassert     count_charac('that') == 3\nassert     count_charac('this is a test') == 12\nassert     count_charac('this is a test of the function') == 17\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef count_char(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_charac(\"\") == 0\nassert     count_charac(\"a\") == 1\nassert     count_charac(\"abc\") == 3\nassert     count_charac(\"a\" * 100) == 100\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_charac('Hello World!') == 21\nassert     count_charac('Python Rocks!') == 36\nassert     count_charac('I love Python!') == 19\nassert     count_charac('It is good!') == 12\n\ndef count_lower(str1):\n    '''\n    Write a function to count the total number of lowercase letters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_charac(\"abc\") == 3\nassert     count_charac(\"abcdefg\") == 7\nassert     count_charac(\"\") == 0\nassert     count_charac(\"a\") == 1\nassert     count_charac(\"abc\") == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_charac('I am a student') == 11\nassert count_charac('Hello World') == 15\nassert count_charac('Python is awesome') == 19\nassert count_charac(' ') == 1\nassert count_charac('') == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_charac('aaaaa') == 10\nassert     count_charac('aaaaa') == 10\nassert     count_charac('aaaaaa') == 20\nassert     count_charac('aaaaaaaaaa') == 60\nassert     count_charac('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == 360\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_Perfect_Square(8) == 16\nassert     next_Perfect_Square(9) == 25\nassert     next_Perfect_Square(10) == 4\nassert     next_Perfect_Square(11) == 25\nassert     next_Perfect_Square(12) == 16\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_Perfect_Square(25) == 34\nassert     next_Perfect_Square(1000) == 1001\nassert     next_Perfect_Square(0) == 1\nassert     next_Perfect_Square(99) == 100\nassert     next_Perfect_Square(134) == 139\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 4\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 4\nassert     next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(7) == 17\nassert     next_Perfect_Square(15) == 25\nassert     next_Perfect_Square(13) == 19\nassert     next_Perfect_Square(12) == 16\nassert     next_Perfect_Square(8) == 10\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(100) == 144\nassert     next_Perfect_Square(1000) == 1002\nassert     next_Perfect_Square(9999) == 10000\nassert     next_Perfect_Square(10000) == 10001\n\ndef isPerfectSquare(N):\n    '''\n    Write a python function to check if a number is perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(2) == 4\nassert     next_Perfect_Square(5) == 7\nassert     next_Perfect_Square(10) == 13\nassert     next_Perfect_Square(14) == 16\nassert     next_Perfect_Square(37) == 59\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_Perfect_Square(N = 100) == 144\nassert     next_Perfect_Square(N = 120) == 144\nassert     next_Perfect_Square(N = 140) == 148\nassert     next_Perfect_Square(N = 148) == 154\nassert     next_Perfect_Square(N = 154) == 160\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(5) == 6\nassert     next_Perfect_Square(6) == 7\nassert     next_Perfect_Square(7) == 8\nassert     next_Perfect_Square(8) == 9\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(5) == 6\nassert     next_Perfect_Square(6) == 7\nassert     next_Perfect_Square(7) == 8\nassert     next_Perfect_Square(8) == 9\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_sum([1, 3, 8, 12, 4, 10, 22, 2, 1, 4, 6, 9, 2, 19, 4, 10, 22, 2, 1, 4, 6, 9, 19, 22]) == 16, max_sum([1, 3, 8, 12, 4, 10, 22, 2, 1, 4, 6, 9, 19, 22])\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 10, 9, 12, 11, 22, 1, 2, 3, 4, 5, 22, 21]) == 19, max_sum([1, 2, 3, 4, 5, 22, 21])\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 10, 9, 12, 11, 22, 1, 2, 3, 4, 5, 22, 21]) == 19, max_sum([1, 2, 3, 4, 5, 22, 21])\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 10, 9, 12, 11, 22, 1, 2, 3, 4, 5, 22, 21]) == 19, max_sum([1, 2, 3, 4, 5, 22, 21])\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 10, 9, 12, 11, 22, 1, 2, 3, 4, 5, 22, 21]) == 19, max_sum([1, 2, 3, 4, 5, 22, 21])\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sum([1, 2, -8, 3, 4, 5, -4, 3]) == 9\nassert max_sum([1, 2, -8, 3, 4, 5, -4, 3]) == 9\nassert max_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == -11\nassert max_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == -11\nassert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 22\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_sum([1, 3, 8, 12, 4, 10, 2]) == 12\nassert     max_sum([2, 4, 8, 12, 4, 10, 2]) == 12\nassert     max_sum([3, 8, 12, 4, 10, 2]) == 12\nassert     max_sum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 20\nassert     max_sum([1, 3, 8, 12, 4, 10, 2, 2, 2, 2]) == 14\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sum([4, 4, 4, 2, 1, 3, 4, 5, 5, -3, -5, -3, 2, 1, 4, 3, 2, 4, 1, 3, 4, 5, 5, 2, 4, 4, 4, 4, 4, 4, 2, 4, 3, 2, 1, 4, 4, 4, 4, 2, 4, 3, 2, 1, 4, 4, 4, 4, 2, 4, 3, 2, 1, 4, 4, 4, 4, 2, 4, 3, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef find_the_k_most_frequent_numbers(arr, k): \n    '''\n    Write a function that takes an array and a number k and returns the k most frequent numbers in the array.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_sum([-1, 2, -8, -9, 1, 3, 3, 2, 4, 2, 3, 1, 2, 3, 4, 5, 10, 12, 8, 11, 3, 4, 2, 1, 2, 3, 4, 5, -100, 10, -99, 1, 11, -100, -100, 2, -100, -1, -100, -100, -3, -100, -100, -100, -100]) == 15\nassert     max_sum([3, 2, 6, -1, -3, -8, 10, -5, -9, 14, -3, 2, 4, 9, -8, -3, -2, -1, -6, -2, 2, -10, -2, 4, -14, -5, -2, -8, -15, -4, 7, -13, -1, -15, -13, 1, -5, -10, -16, -8, -13, -4, -15, -16, 3, -6, -13, -3, -4, -11, -14, -5, 10, -4, -2, -3, -10, -8, -7, -14, -3, -9, -10, -5, -6, -8, -2, -4, -5, -11, -13, -7, -9, -10, -4, -12, -2, -8, -4, -6, -8, -15, -16, -9, -8, -6, -10, -5, -14, -4, -17, -2, -10, -3, -8, -7, -16, -11, -2, -13, -10, -4, -15, -9, -6, -4, -11, -2, -3, -3, -1, -2, -10, -11, -3, -14, -12, -8, -7, -13, -11, -1, -5, -2, -2, -12, -10, -11, -1, -14, -5, -6, -8, -8, -8, -5, -10, -10, -11, -8, -9, -7, -4, -10, -12, -9, -6, -8, -14, -9, -14, -10, -9, -6, -11, -2, -9, -7, -12, -3, -14, -7, -1, -13, -12, -10, -13, -3, -7, -9, -8, -4, -11, -12, -11, -9, -5, -10, -2, -6, -6, -8, -7, -9, -2, -1, -5, -8, -6, -4, -3, -10, -3, -14, -4, -8, -9, -4, -2, -9, -9, -13, -11, -2, -7, -4, -3, -3, -10, -2, -14, -8, -7, -6, -5, -3, -2, -1, -10, -6, -9, -5, -2, -15, -2, -5, -8, -10, -6, -7, -8, -2, -9, -5, -10, -3, -11, -5, -1, -9, -5, -7, -12, -7, -10, -10, -8, -9, -10, -6, -5, -8, -11, -7, -6, -2, -11, -5, -13, -10, -7, -4, -12, -8, -5, -6, -12, -7, -10, -10, -4, -14, -8, -10, -14, -8, -6, -13, -10, -4, -10, -9, -10, -6, -8, -13, -10, -10, -12, -9, -13, -3, -13, -13, -10, -10, -10, -12, -11, -10, -10, -7, -15, -16, -13, -7, -5, -13, -13, -10, -6, -7, -11, -3, -11, -8, -8, -3, -13, -9, -12, -11, -16, -11, -11, -9, -11, -7, -12, -5, -14, -16, -12, -9, -10, -7, -9, -7, -8, -10, -4, -15, -10, -10, -5, -10, -10, -12, -10, -8, -10, -10, -11, -5, -9, -10, -10, -10, -14, -12, -12, -12, -11, -12, -10, -10, -8, -15, -10, -9, -12, -11, -12, -12, -12, -11, -10, -10, -10, -12, -12, -11, -14, -12, -12, -8, -11, -10, -10, -10, -11, -12, -12, -16, -15, -10, -10, -10, -11, -15, -15, -11, -15, -14, -10, -10, -10, -10, -14, -10, -9, -11, -12, -14, -12, -16, -12, -12, -10, -10, -11, -11, -10, -12, -10, -10, -16, -15, -13, -11, -13, -16, -14, -12, -12, -15, -13, -10, -11, -10, -12, -14, -12, -10, -13, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(2.0) == 1.41421356237\nassert     babylonian_squareroot(4.0) == 2.0\nassert     babylonian_squareroot(8.0) == 2.8284271247\nassert     babylonian_squareroot(16.0) == 3.1622776601683795\nassert     babylonian_squareroot(100.0) == 10.0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert babylonian_squareroot(18) == 3\nassert babylonian_squareroot(21) == 3\nassert babylonian_squareroot(24) == 3\n\ndef root_check(n):\n    '''\n    You are given a number n and have to find the root of n. There are several\n    ways to do so, but in this case you have to find the root using the babylonian\n    method. If the root is not real, return 0.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     babylonian_squareroot(16) == 4.0\nassert     babylonian_squareroot(256) == 8.0\nassert     babylonian_squareroot(1024) == 16.0\nassert     babylonian_squareroot(2048) == 32.0\nassert     babylonian_squareroot(4096) == 64.0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     babylonian_squareroot(0.0) == 0.0\nassert     babylonian_squareroot(1.0) == 1.0\nassert     babylonian_squareroot(2.0) == 1.41421356237309504880168872421\nassert     babylonian_squareroot(3.0) == 1.7320508075688772935274463490455\nassert     babylonian_squareroot(4.0) == 2.0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(2) == 1.4142135623730951\nassert babylonian_squareroot(3) == 1.7320508075688772\nassert babylonian_squareroot(4) == 2.0\nassert babylonian_squareroot(8) == 2.8284271247461903\nassert babylonian_squareroot(27) == 3.1622776601683795\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(2.0) == 1.4142135623730951\nassert     babylonian_squareroot(2.0) == 1.4142135623730951\nassert     babylonian_squareroot(2.0) == 1.4142135623730951\nassert     babylonian_squareroot(2.0) == 1.4142135623730951\nassert     babylonian_squareroot(2.0) == 1.4142135623730951\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(16) == 4\nassert babylonian_squareroot(81) == 3\nassert babylonian_squareroot(0) == 0\nassert babylonian_squareroot(-9) == 3\nassert babylonian_squareroot(9) == 3\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     babylonian_squareroot(10.0) == 3.1622776601683795\nassert     babylonian_squareroot(100.0) == 10.0\nassert     babylonian_squareroot(1000.0) == 100.0\nassert     babylonian_squareroot(10000.0) == 1000.0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     lps(\"a\" * 100) == 0\nassert     lps(\"bb\" * 100) == 1\nassert     lps(\"abcdabcd\" * 100) == 2\nassert     lps(\"abcdabcdabcd\" * 100) == 3\nassert     lps(\"abcdabcdabcdabcd\" * 100) == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lps('bbbab') == 4\nassert     lps('abcdabcdabcdabcdabcdabcdabcdabcd') == 17\nassert     lps('a') == 1\nassert     lps('ab') == 2\nassert     lps('aab') == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lps('bbb') == 1\nassert     lps('a') == 1\nassert     lps('bb') == 2\nassert     lps('abcd') == 2\nassert     lps('abcdabcd') == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     lps('abdbca') == 3\nassert     lps('bb') == 1\nassert     lps('cddpd') == 3\nassert     lps('cddpd') == 3\nassert     lps('bdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd d)\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lps(\"babad\") == 'bab'\nassert     lps(\"cbbd\") == 'bb'\nassert     lps(\"a\") == 'a'\nassert     lps(\"ac\") == 'a'\nassert     lps(\"bb\") == 'bb'\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lps('babad') == 4\nassert     lps('cbbd') == 2\nassert     lps('a') == 1\nassert     lps('ac') == 2\nassert     lps('abca') == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lps(\"bb\") == 1\nassert     lps(\"abccba\") == 3\nassert     lps(\"abba\") == 2\nassert     lps(\"\") == 0\nassert     lps(\"aaaa\") == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lps('bbbab') == 4\nassert     lps('cbbd') == 2\nassert     lps('aaaaa') == 1\nassert     lps('aaaaaabaa') == 3\nassert     lps('aaaaaabab') == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lps(\"abdbca\") == 3\nassert lps(\"cddpd\") == 3\nassert lps(\"peter\") == 1\nassert lps(\"\") == 0\nassert lps(\"\") == 0\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 2.25\nassert     harmonic_sum(5) == 2.6\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 1.3333333333333333333333\nassert     harmonic_sum(4) == 1.75\nassert     harmonic_sum(5) == 1.888888888888888888888889\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.5\nassert     harmonic_sum(4) == 3.5\nassert     harmonic_sum(5) == 4.5\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     harmonic_sum(0) == 0\nassert     harmonic_sum(1) == 0\nassert     harmonic_sum(2) == 1\nassert     harmonic_sum(3) == 1.5\nassert     harmonic_sum(4) == 2.666666\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     harmonic_sum(0) == 1.0\nassert     harmonic_sum(1) == 1.0\nassert     harmonic_sum(2) == 2.0\nassert     harmonic_sum(3) == 2.5\nassert     harmonic_sum(4) == 3.0\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     harmonic_sum(1) == 1/1\nassert     harmonic_sum(2) == 1/1 + 1/2\nassert     harmonic_sum(3) == 1/1 + 1/2 + 1/3\nassert     harmonic_sum(4) == 1/1 + 1/2 + 1/3 + 1/4\nassert     harmonic_sum(5) == 1/1 + 1/2 + 1/3 + 1/4 + 1/5\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 3.5\nassert     harmonic_sum(5) == 4.8\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     harmonic_sum(1) == 1.0\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 1.0 + 1.0/2 + 1.0/3 + 1.0/4\nassert     harmonic_sum(5) == 1.0 + 1.0/2 + 1.0/3 + 1.0/4 + 1.0/5\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(4) == 3.5\nassert     harmonic_sum(5) == 4\nassert     harmonic_sum(6) == 5\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (intersection_array(\n                [1,2,2,1],\n                [2,2]\n            )\n        == [2,2])\nassert     (intersection_array(\n                [4,9,5],\n                [9,4,9,8,4]\n            )\n        == [4,9])\nassert     (intersection_array(\n                [1],\n                []\n            )\n        == [])\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef intersection_list(arr1,arr2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\narray_nums1 = [1,2,2,1]\narray_nums2 = [2,2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersection_array([1,2,3,4,5],[2,3,4,5,6]) == [2,3,4,5]\nassert     intersection_array([1,2,3],[1,2,3]) == [1,2,3]\nassert     intersection_array([1,2,3],[1,2,3]) == [1,2,3]\nassert     intersection_array([1,2,3,4,5],[1,2,3,4,5]) == [1,2,3,4,5]\nassert     intersection_array([1,2,3],[1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [3,6,7,8] == intersection_array([1,2,2,1],[2,1])\nassert     [2] == intersection_array([1,1,1,2,3],[2,3])\nassert     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] == intersection_array([1,1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,3,4,5],[4,5,2,1]) == [4,5]\nassert     intersection_array([1,2,2,1],[2,2]) == [2]\nassert     intersection_array([2,2],[1,2,2,2]) == []\nassert     intersection_array([1,2,3,4,5],[1,2,2,2]) == [2,2]\nassert     intersection_array([2,2],[1,2,2,2]) == [2]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,2,1],[2,2]) == [2,2]\nassert intersection_array([1,2],[2,2]) == [2]\nassert intersection_array([1,3,4],[1,2,3,4]) == [1,2,3,4]\nassert intersection_array([1,2,3],[1,2,3,4]) == [1,2,3,4]\nassert intersection_array([1,2,3],[2,3,4]) == [2,3]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \ndef intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \ncount_X((1,2,2,3,1,1,2,4,5), 1) == 3\nassert \ncount_X((1,2,2,3,1,1,2,4,5), 2) == 2\nassert \ncount_X((1,2,2,3,1,1,2,4,5), 3) == 1\nassert \ncount_X((1,2,2,3,1,1,2,4,5), 4) == 1\nassert \ncount_X((1,2,2,3,1,1,2,4,5), 5) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_X((1, 2, 3, 1, 3, 4, 5, 5, 2), 1) == 3\nassert     count_X((1, 2, 3, 1, 3, 4, 5, 5, 2), 2) == 2\nassert     count_X((1, 2, 3, 1, 3, 4, 5, 5, 2), 3) == 1\nassert     count_X((1, 2, 3, 1, 3, 4, 5, 5, 2), 4) == 0\nassert     count_X((1, 2, 3, 1, 3, 4, 5, 5, 2), 5) == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_X((1,2,3,4,5,6,1), 1) == 2\nassert     count_X((1,2,3,4,5,6,1), 2) == 1\nassert     count_X((1,2,3,4,5,6,1), 3) == 1\nassert     count_X((1,2,3,4,5,6,1), 4) == 1\nassert     count_X((1,2,3,4,5,6,1), 5) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_X((1, 3, 5, 1, 3), 1) == 2\nassert     count_X((1, 3, 5, 1, 3), 3) == 1\nassert     count_X((1, 3, 5, 1, 3), 5) == 0\n\n\ndef pair_sum(tup, sum):\n    '''\n    Write a python function that takes in a tuple and a target sum and returns a list containing the indices of all pairs of elements in the tuple that sum up to the target sum.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nt1 = tuple([1, 2, 3, 1, 2, 3, 3, 2])\n\nprint(count_X(t1, 3)) # returns 4\nprint(count_X(t1, 2)) # returns 2\nprint(count_X(t1, 1)) # returns 3\nprint(count_X(t1, 5)) # returns 0\nprint(count_X(t1, 4)) # returns 0\n\ndef count_X_dict(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (count_X((2, 3, 5, 5, 1, 4, 4), 5) == 3)\nassert     (count_X((2, 3, 5, 5, 1, 4, 4), 4) == 2)\nassert     (count_X((2, 3, 5, 5, 1, 4, 4), 2) == 0)\nassert     (count_X((2, 3, 5, 5, 1, 4, 4), 1) == 1)\nassert     (count_X((2, 3, 5, 5, 1, 4, 4), 3) == 0)\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         count_X((1,2,3,2,2,2,2,2), 2) == 5\nassert         count_X(('a', 'a', 'a', 'a', 'a'), 'a') == 5\nassert         count_X((1,2,3,2,2,2,2,2), 4) == 0\nassert         count_X((1,2,3,2,2,2,2,2), 1) == 3\nassert         count_X((), 1) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_X((1,2,3,3,3,3,3,3,3),3) == 4\nassert     count_X((1,2,3,3,3,3,3,3,3),4) == 0\nassert     count_X((1,2,3,3,3,3,3,3,3),5) == 0\nassert     count_X((1,2,3,3,3,3,3,3,3),1) == 3"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_X(('e', 'a', 'r', 'e', 'a', 'a', 'r', 'e', 'a', 'r', 'e'), 'a') == 2\nassert     count_X(('a', 'a', 'a', 'b', 'b', 'a', 'a', 'a', 'a', 'a'), 'a') == 3\n\ndef count_X_dict(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_X((1,2,3,4), 3) == 1\nassert     count_X((1,2,3,4,5,6,7), 3) == 1\nassert     count_X((1,2,3,4,5,6,7,3), 3) == 2\nassert     count_X((1,2,3,4,5,6,7,3), -1) == 0\n\ndef count_X_dict(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     insert_element([1,2,3,4,5],5) == [5,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],6) == [6,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],-1) == [-1,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],-5) == [-5,1,2,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         insert_element([1,2,3],2) == [1,2,2,3]\nassert         insert_element([2,3,4,5],2) == [2,3,2,4,5]\nassert         insert_element([2,3,4,5],0) == [0,2,3,4,5]\nassert         insert_element([1,2,3],0) == [0,1,2,3]\nassert         insert_element([1,2,3],-1) == [-1,0,1,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     insert_element([],5) == [5]\nassert     insert_element(['a','b','c'],5) == ['a',5,'b',5,'c']\nassert     insert_element([1,2,3,4,5],6) == [1,6,2,6,3,6,4,6,5]\nassert     insert_element([1,2,3,4,5,6,7],8) == [1,8,2,8,3,8,4,8,5,8,6,8,7]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     insert_element([1,2,3],5) == [5,1,2,3]\nassert     insert_element([5,2,3],1) == [1,5,2,3]\nassert     insert_element([5,2,3],2) == [2,5,2,3]\nassert     insert_element([5,2,3],3) == [3,5,2,3]\nassert     insert_element([5,2,3],4) == [4,5,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     insert_element([1,2,3,4],0) == [0,1,2,3,4]\nassert     insert_element([1,2,3,4],-1) == [-1,0,1,2,3,4]\nassert     insert_element([0,1,2,3,4],5) == [5,0,1,2,3,5,4]\nassert     insert_element([0,1,2,3,4],0) == [0,0,1,2,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3]\nassert     insert_element([4,5,6],7) == [4,7,5,6]\nassert     insert_element([7,8],9) == [7,9,8]\nassert     insert_element([9,10,11,12],13) == [9,13,10,11,12]\n\ndef replace_element(list,old_element,new_element):\n    '''\n    Write a function that takes in a list and replaces all instances of one element with another element in the list. The function should return the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     insert_element([1,2,3,4,5,6], 'a') == [1, 'a', 2, 'a', 3, 'a', 4, 'a', 5, 'a', 6]\nassert     insert_element([1,2,3,4,5,6], 'b') == [1, 'b', 2, 'b', 3, 'b', 4, 'b', 5, 'b', 6]\nassert     insert_element([1,2,3,4,5,6], 'c') == [1, 'c', 2, 'c', 3, 'c', 4, 'c', 5, 'c', 6]\nassert     insert_element([1,2,3,4,5,6], 'd') == [1, 'd', 2, 'd', 3, 'd', 4, 'd', 5, 'd', 6]\nassert     insert_element([1,2,3,4,5,6], 'e') == [1, 'e', 2, 'e', 3, 'e', 4, 'e', 5, 'e', 6]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     insert_element([1, 2, 3], 5) == [1, 2, 5, 3]\nassert     insert_element(['a', 'b', 'c'], 'd') == ['a', 'b', 'd', 'c']\nassert     insert_element([1, 2, 3], 1) == [1, 1, 2, 3]\nassert     insert_element([1, 2, 3], 3) == [1, 3, 2, 3]\nassert     insert_element(['a', 'b', 'c'], 'd') == ['a', 'b', 'd', 'c']\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3]\nassert     insert_element([1,2,3],2) == [1,2,2,3]\nassert     insert_element([1,2,3],1) == [1,1,2,3]\nassert     insert_element([],4) == [4]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (convert([0+1j])    ==    (0, cmath.pi/2)), \"convert(0+1j) == (0, cmath.pi/2) == incorrect\"\nassert     (convert(0+1j)    ==    (0, cmath.pi/2)), \"convert(0+1j) == (0, cmath.pi/2) == incorrect\"\nassert     (convert(1+2j)    ==    (1, cmath.pi/4)), \"convert(1+2j) == (1, cmath.pi/4) == incorrect\"\nassert     (convert(-1+2j)    ==    (-1, cmath.pi/4)), \"convert(-1+2j) == (-1, cmath.pi/4) == incorrect\"\nassert     (convert(1+2j)    ==    (1, cmath.pi/4)), \"convert(1+2j) == (1, cmath.pi/4) == incorrect\"\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     convert(complex(1,1)) == [1, cmath.pi/2]\nassert     convert(complex(2,1)) == [2, cmath.pi/4]\nassert     convert(complex(2,2)) == [4, cmath.pi/8]\nassert     convert(complex(0,1)) == [0, cmath.pi/2]\nassert     convert(complex(0,2)) == [0, cmath.pi/4]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     convert([1, 2j]) == [(1, 2.8284271247461903), (-1, 1.4142135623730951)]\nassert     convert([-1j, -2]) == [(1.570796339972537, 1.0), (3.1415926535897932, -2.0)]\nassert     convert([1j, -2j]) == [(1.570796339972537, -1.0), (3.1415926535897932, 2.0)]\nassert     convert([1+2j, -2+3j]) == [(1.4142135623730951, 2.8284271247461903), (3.1415926535897932, 5.0)]\nassert     convert([1-2j, -2-3j]) == [(1.4142135623730951, -1.0), (3.1415926535897932, -3.0)]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     convert(1+2j) == (1.4142135623730951+1.5707963267948966j)\nassert     convert(-1-2j) == (1.4142135623730951-1.5707963267948966j)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     convert( [ 1+2j, 3+4j, 2-1j ] ) == [ (1.0, 1.0), (3.0, 5.0), (1.0, -1.0) ]\nassert     convert( [ 0+0j, 0+0j, -1+1j ] ) == [ (1.0, 0.0), (0.0, 0.0), (1.0, 1.0) ]\nassert     convert( [ 1+1j, 3+3j, 2-1j ] ) == [ (1.0, 1.0), (3.0, 5.0), (1.0, -1.0) ]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     convert(complex(2,3))    ==    ((2.0, 3.0), 0.0),     '2 + 3i'\nassert     convert(complex(5,-4))    ==    ((5.0, -4.0), cmath.pi),     '-4 + 5i'\nassert     convert(complex(1,2))    ==    ((1.0, 2.0), 0.0),     '1 + 2i'\nassert     convert(complex(1,2))    ==    ((1.0, 2.0), 0.0),     '1 + 2i'\nassert     convert(complex(-2,3))    ==    ((-2.0, 3.0), cmath.pi),     '2 + -3i'\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     convert((1, 2.0)) == (1, 2.0)\nassert     convert((1, 2.0)) == (1.0, 2.0)\nassert     convert((1, 2)) == (1.0, 2.0)\nassert     convert((1, 2)) == (1.0, 2.0)\nassert     convert((1, 2)) == (1.0, 2.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     convert((1+2j)) == (1, 2)\nassert     convert((0+1j)) == (0, 1)\nassert     convert((-1+2j)) == (-1, 2)\nassert     convert((-1-2j)) == (-1, -2)\n\nprint \"convert OK\"\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (convert(1+2j) == (1.4142135623730951+1.0j)), \"Error: test 1 fails\"\nassert     (convert(0) == (0.0+0.0j)), \"Error: test 2 fails\"\nassert     (convert(0+0j) == (0.0+0.0j)), \"Error: test 3 fails\"\nassert     (convert(-3+4j) == (5.0-2.0j)), \"Error: test 4 fails\"\nassert     (convert(-3+4j) == (5.0-2.0j)), \"Error: test 4 fails\"\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_integer([1,2,'a','b','c']) == 4\nassert     count_integer([1,2,1.0,'a','b','c']) == 5\nassert     count_integer([]) == 0\nassert     count_integer(['a',1,'b','c']) == 4\nassert     count_integer([1,'a',3,'b',4,'c']) == 6\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_integer([1,2,3,'abc',123]) == 2\nassert     count_integer([1,'abc',123]) == 2\nassert     count_integer(['abc',123]) == 1\nassert     count_integer([]) == 0\nassert     count_integer(['a','abc','abc']) == 3\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_integer([]) == 0, \"Error: list should be empty\"\nassert     count_integer([1,2,3]) == 3, \"Error: only integer elements\"\nassert     count_integer([1,\"2\",3]) == 2, \"Error: integer and string elements\"\nassert     count_integer([\"a\",1,\"c\",\"d\",3]) == 3, \"Error: mixed type elements\"\n\ndef find_integer(list1, int1):\n    '''\n    Write a python function that returns the index of the first occurrence of a given integer in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_integer([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     count_integer([0, 'a', 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     count_integer([0, 2, 'a', 4, 'b', 6, 7, 8, 9, 10]) == 5\nassert     count_integer([0, 2.0, 'a', 4, 'b', 6, 7, 8, 9, 10]) == 5\nassert     count_integer([0, 2.1, 'a', 4, 'b', 6, 7, 8, 9, 10]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,0]) == 9\nassert     count_integer([]) == 0\nassert     count_integer([1,2,3,4,5,6,7,8,9,0.5]) == 9\nassert     count_integer([1,2,3,'a',5,6,7,8,9,0.5]) == 9\nassert     count_integer(['a','b','c','d']) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 10\nassert     count_integer([1, 2, 'a', 4, 5, 'b', 7, 8, 9, 10, 11]) == 10\nassert     count_integer([1, 2, 'a', 4, 5, 'b', '7', 8, 9, 10, 11]) == 10\nassert     count_integer([1, 2, 'a', 4, 5, 'b', 7, 8, 9, 10, '11']) == 10\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     count_integer([1,2,3,'4','5',6,7,8,9,10]) == 10\nassert     count_integer([1,2,3,'a','b',6,7,8,9,10]) == 9\nassert     count_integer([1,2,3,4,5,6,7,8,9,10,0]) == 10\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19\nassert     count_integer([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == 19\nassert     count_integer([1, 2, 'h', 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19\nassert     count_integer(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen', 'nineteen']) == 19\nassert     count_integer(['twenty', 'thirty', 'forty', 'fifty','sixty','seventy', 'eighty', 'ninety', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen', 'nineteen']) == 19\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9]) == 9\nassert     count_integer([1,3,4,5,6,7,8,9]) == 8\nassert     count_integer([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_integer([5, 4, 3, 2, 1]) == 1, \"Wrong!\"\nassert     count_integer([]) == 0, \"Wrong!\"\nassert     count_integer([5, 'h', 3.0, 2]) == 2, \"Wrong!\"\nassert     count_integer([5, 4, 3, 2, 1.0]) == 1, \"Wrong!\"\nassert     count_integer([5, 4, 3, 2, 1, 'h', 3.0, 2]) == 3, \"Wrong!\"\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] == combinations_colors([1, 2, 3, 4], 2)\nassert     [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)] == combinations_colors([1, 2, 3, 4], 3)\nassert     [(1, 2, 3, 4)] == combinations_colors([1, 2, 3, 4], 4)\nassert     [] == combinations_colors([1, 2, 3, 4], 5)\n\ndef reverse_complement(s):\n    '''\n    Given: A DNA string s\n    Return: The reverse complement of s\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     combinations_colors(['r', 'g', 'b'], 1)    ==     [('r',), ('g',), ('b',)]\nassert     combinations_colors(['r', 'g', 'b'], 2)    ==     [('r', 'g'), ('r', 'b'), ('g', 'b')]\nassert     combinations_colors(['r', 'g', 'b'], 3)    ==     [('r', 'g', 'b')]\nassert     combinations_colors(['r', 'g', 'b'], 4)    ==     [('r', 'g', 'b', 'r'), ('r', 'g', 'b', 'g'), ('r', 'g', 'b', 'b'), ('r', 'g', 'b', 'r', 'g'), ('r', 'g', 'b', 'r', 'b'), ('r', 'g', 'b', 'r', 'g', 'b'), ('r', 'g', 'b', 'r', 'g', 'b', 'r'), ('r', 'g', 'b', 'r', 'g', 'b', 'g'), ('r', 'g', 'b', 'r', 'g', 'b', 'b'), ('r', 'g', 'b', 'r', 'g', 'b', 'r', 'g'), ('r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b'), ('r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r'), ('r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g'), ('r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b')]\nassert     combinations_colors(['r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b', 'r', 'g', 'b'], 1) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef permutations_with_replacement(l):\n    '''\n    Write a function that takes in a list, and returns a list with all permutations of the elements in the list, with repetition.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list(combinations_colors(['red', 'green', 'blue'], 2)) ==     [('red', 'green'), ('red', 'blue'), ('green', 'blue')]\nassert     list(combinations_colors(['red', 'green', 'blue'], 1)) ==     [('red',), ('green',), ('blue',)]\nassert     list(combinations_colors(['red', 'green', 'blue'], 0)) ==     [()]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     combinations_colors([],1)==[()]\nassert     combinations_colors([1,2],2)==[(1,2), (2,1)]\nassert     combinations_colors([1,2,3],3)==[(1,2,3),(1,3,2),(2,1,3),(2,3,1),(3,1,2),(3,2,1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 3, 1), (1, 3, 2), (1, 3, 3), (1, 3, 4), (1, 4, 1), (1, 4, 2), (1, 4, 3), (1, 4, 4), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 1, 4), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 3, 1), (2, 3, 2), (2, 3, 3), (2, 3, 4), (2, 4, 1), (2, 4, 2), (2, 4, 3), (2, 4, 4), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 1, 4), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 2, 4), (3, 3, 1), (3, 3, 2), (3, 3, 3), (3, 3, 4), (3, 4, 1), (3, 4, 2), (3, 4, 3), (3, 4, 4), (4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 2, 1), (4, 2, 2), (4, 2, 3), (4, 2, 4), (4, 3, 1), (4, 3, 2), (4, 3, 3), (4, 3, 4), (4, 4, 1), (4, 4, 2), (4, 4, 3), (4, 4, 4)] == combinations_colors([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)] == combinations_colors(range(1, 5), 3)\nassert     [(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 4, 5), (1, 3, 4, 5), (2, 3, 4, 5)] == combinations_colors(range(1, 6), 4)\n\ndef all_colors(dice):\n    '''\n    Write a function that takes in a list of integers and returns a list of colors that can be used to score the dice.\n    Each integer is used to make a die with the given number of sides. Each color is used at least once, and each color is used at most once.\n    If the number of sides is <= 1, then there are no colors to use.\n    For example, the list [3, 1, 2] should return the list ['red', 'blue', 'green', 'black', 'white'].\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     combinations_colors([1,2,3,4], 3) == [\n        (1,2,3),\n        (1,2,4),\n        (1,3,4),\n        (2,3,4)\n        ]\nassert     combinations_colors([1,2,3,4], 2) == [\n        (1,2),\n        (1,3),\n        (1,4),\n        (2,3),\n        (2,4),\n        (3,4)\n        ]\nassert     combinations_colors([1,2,3,4], 1) == [\n        (1,),\n        (2,),\n        (3,),\n        (4,)\n        ]\nassert     combinations_colors([1,2,3,4], 0) == []\n\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(0)         == 0\nassert     count_Primes_nums(1)         == 0\nassert     count_Primes_nums(2)         == 1\nassert     count_Primes_nums(10)         == 4\nassert     count_Primes_nums(50)         == 29\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(0) == 0, count_Primes_nums(0)\nassert     count_Primes_nums(1) == 0, count_Primes_nums(1)\nassert     count_Primes_nums(2) == 1, count_Primes_nums(2)\nassert     count_Primes_nums(3) == 2, count_Primes_nums(3)\nassert     count_Primes_nums(4) == 2, count_Primes_nums(4)\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(0)    ==    0\nassert     count_Primes_nums(1)    ==    0\nassert     count_Primes_nums(2)    ==    1\nassert     count_Primes_nums(10)    ==    4\nassert     count_Primes_nums(100)    ==    25\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(11) == 4\nassert     count_Primes_nums(12) == 6\nassert     count_Primes_nums(13) == 6\nassert     count_Primes_nums(100) == 25\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Primes_nums(100) == 4\nassert     count_Primes_nums(101) == 4\nassert     count_Primes_nums(102) == 4\nassert     count_Primes_nums(103) == 4\nassert     count_Primes_nums(104) == 3\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 0\nassert     count_Primes_nums(3) == 0\nassert     count_Primes_nums(4) == 0\nassert     count_Primes_nums(5) == 1\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(100) == 25\nassert     count_Primes_nums(101) == 25\nassert     count_Primes_nums(1000) == 168\nassert     count_Primes_nums(1001) == 168\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(5) == 3\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(2) == 0\nassert     count_Primes_nums(3) == 1\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(5) == 3\nassert     count_Primes_nums(6) == 4\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(100) == 25\nassert     count_Primes_nums(1000) == 168\nassert     count_Primes_nums(10000) == 88573\n\ndef is_anagram_1(s1, s2):\n    '''\n    Write a python function that takes in two strings and returns True if the strings are anagrams and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     swap_numbers(5,9) == (9, 5), \"Failed\"\nassert     swap_numbers(5,5) == (5,5), \"Failed\"\nassert     swap_numbers(1,3) == (3,1), \"Failed\"\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(4,7) == (7,4)\nassert     swap_numbers(2,4) == (4,2)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     swap_numbers(3,6) == (6,3)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(5,5) == (5,5)\nassert     swap_numbers(5,6) == (6,5)\nassert     swap_numbers(7,7) == (7,7)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (swap_numbers(1,2) == (2,1))\nassert     (swap_numbers(3,4) == (4,3))\nassert     (swap_numbers(5,6) == (6,5))\nassert     (swap_numbers(7,8) == (8,7))\nassert     (swap_numbers(9,10) == (10,9))\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(3,2) == (2,3)\nassert     swap_numbers(4,5) == (5,4)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     swap_numbers(3, 4) == (4, 3)\nassert     swap_numbers(5, 4) == (4, 5)\nassert     swap_numbers(3, 5) == (5, 3)\nassert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(5, 1) == (1, 5)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         (swap_numbers(5,1))    == (1,5), 'incorrect'\nassert         (swap_numbers(7,6))    == (6,7), 'incorrect'\nassert         (swap_numbers(1,1))    == (1,1), 'incorrect'\nassert         (swap_numbers(2,3))    == (3,2), 'incorrect'\nassert         (swap_numbers(3,2))    == (2,3), 'incorrect'\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(3,4) == (4, 3)\nassert     swap_numbers(5,5) == (5, 5)\nassert     swap_numbers(4,4) == (4, 4)\nassert     swap_numbers(-5,5) == (5, -5)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (7, 3) == swap_numbers(3, 7)\nassert     (1, 2) == swap_numbers(2, 1)\nassert     (3, 3) == swap_numbers(3, 3)\nassert     (1, 1) == swap_numbers(1, 1)\nassert     (1, 7) == swap_numbers(7, 1)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximize_elements(('l','m'), ('b', 'c')) == ('m', 'b')\nassert     maximize_elements(('m', 'l'), ('b', 'c')) == ('l','m')\nassert     maximize_elements(('c','m'), ('b', 'l')) == ('m', 'b')\nassert     maximize_elements(('c','m'), ('b', 'c')) == ('m', 'b')\nassert     maximize_elements(('c','m'), ('b','m')) == ('m', 'b')\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximize_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')) == ('e', 'f', 'g', 'h')\nassert     maximize_elements(('x', 'y', 'z'), ('X', 'Y', 'Z')) == ('X', 'Y', 'Z')\nassert     maximize_elements(('e', 'e', 'e'), ('f', 'f', 'f')) == ('e', 'f')\nassert     maximize_elements(('w', 'w', 'w'), ('W', 'W', 'W')) == ('w', 'W')\nassert     maximize_elements(('x', 'y', 'z'), ('a', 'b', 'c')) == ('a', 'b', 'c')\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximize_elements( (3,1,2), (4,1,2))     ==     [1,4]\nassert     maximize_elements( (5,1), (5,1))         ==     [1]\nassert     maximize_elements( (5,1), (3,1,2))     ==     [5]\nassert     maximize_elements( (1,1,2), (3,1,2))     ==     [1,3]\nassert     maximize_elements( (1,2), (1,2))         ==     [1]\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert     maximize_elements((1, 3, 2), (2, 4, 5)) == (2, 4, 5)\nassert     maximize_elements((1, 2, 4, 3), (2, 3, 5, 7)) == (2, 3, 5, 7)\nassert     maximize_elements((1, 2, 3), (2, 3, 4)) == (2, 3, 4)\nassert     maximize_elements((5, 1, 2, 3), (4, 2, 6, 8)) == (4, 2, 6, 8)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maximize_elements(('A', 'B', 'C'), ('D', 'E', 'F')) == ('A', 'B')\nassert     maximize_elements(('A', 'B', 'C'), ('D', 'E', 'F', 'G')) == ('C', 'D')\nassert     maximize_elements(('A', 'B', 'C', 'D'), ('E', 'F', 'G', 'H')) == ('B', 'C')"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     maximize_elements((1,2,3,4), (2,3,4,5)) == (2,3,4,5)\nassert     maximize_elements((1,2,3,4), (2,3,4,5,6)) == (2,3,4,5)\nassert     maximize_elements((1,2,3,4,5), (2,3,4,5,6,7)) == (2,3,4,5)\nassert     maximize_elements((1,2,3,4,5,6), (2,3,4,5,6,7,8)) == (2,3,4,5,6)\nassert     maximize_elements((1,2,3,4,5,6,7), (2,3,4,5,6,7,8)) == (2,3,4,5,6)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     maximize_elements(('m', 'a', 'r'), ('b', 'a', 'n')) == ('r', 'a', 'n')\nassert     maximize_elements(('m', 'a', 'r'), ('b', 'a', 'n')) == ('r', 'a', 'n')\nassert     maximize_elements(('m', 'a', 'r'), ('b', 'a', 'n')) == ('r', 'a', 'n')\nassert     maximize_elements(('m', 'a', 'r'), ('b', 'a', 'n')) == ('r', 'a', 'n')\nassert     maximize_elements(('m', 'a', 'r'), ('b', 'a', 'n')) == ('r', 'a', 'n')\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximize_elements(('a', 'b', 'c'), ('b', 'c', 'a')) == ('b', 'c', 'a')\nassert     maximize_elements(('a', 'c', 'b'), ('b', 'c', 'a')) == ('b', 'c', 'a')\nassert     maximize_elements(('a', 'b', 'c'), ('a', 'a', 'a')) == ('a', 'a', 'a')\nassert     maximize_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == ('a', 'b', 'c')\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     maximize_elements(\n                        (0,1,2),\n                        (2,3,4)) ==     (0,2,4)\nassert     maximize_elements(\n                        (0,2,4),\n                        (1,3,4)) ==     (0,3,4)\nassert     maximize_elements(\n                        (0,4,7),\n                        (1,2,3)) ==     (1,2,3)\nassert     maximize_elements(\n                        (5,0,7),\n                        (6,2,3)) ==     (5,6,3)\nassert     maximize_elements(\n                        (9,10,0,2,3),\n                        (2,3,5,0,1)) ==     (9,5,0,2,3)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     newman_prime(11) == 29\nassert     newman_prime(5) == 31\nassert     newman_prime(21) == 39\nassert     newman_prime(7) == 31\nassert     newman_prime(3) == 3\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     newman_prime(3) == 13\nassert     newman_prime(5) == 29\nassert     newman_prime(7) == 37\nassert     newman_prime(11) == 59\nassert     newman_prime(17) == 83\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef quadratic_non_residue(a,b,c):\n    '''\n    Determine if there exist any non-residue mod x^2 = 1 (mod n)\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     newman_prime(10)    == 29\nassert     newman_prime(11)    == 31\nassert     newman_prime(12)    == 37\nassert     newman_prime(13)    == 41\nassert     newman_prime(14)    == 47\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     newman_prime(1) == 1\nassert     newman_prime(2) == 2\nassert     newman_prime(3) == 3\nassert     newman_prime(4) == 5\nassert     newman_prime(5) == 7\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     newman_prime(11) == 29\nassert     newman_prime(12) == 61\nassert     newman_prime(13) == 25\nassert     newman_prime(14) == 89\nassert     newman_prime(15) == 29\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 11\nassert     newman_prime(5) == 17\nassert     newman_prime(6) == 19\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (5, 9) == division_elements((1,5,9,3), (1,7,5,2))\nassert     (0, 9) == division_elements((-1,7,3,4), (1,5,7,2))\nassert     (8, 4) == division_elements((1,2,3,4,5), (1,2,3,4,5))"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     division_elements(\n    (1,2,3,4,5), \n    (3,4,5,6,7)\n    ) == ((1,1,1,1,1),(3,4,5,3,7))\n\nassert     division_elements(\n    (1,2,3), \n    (3,4,5)\n    ) == ((1/3,2/3,3/3),(3/3,4/3,5/3))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [division_elements(tuple(sorted(set(range(0, 10)))), tuple(sorted(set(range(0, 10)))), tuple(sorted(set(range(1, 10))))), \n            [5, 2, 1, 1, 1, 1, 1, 1, 1, 1], \n            [5, 2, 1, 1, 1, 1, 1, 1, 1, 1], \n            [5, 2, 1, 1, 1, 1, 1, 1, 1, 1], \n            [5, 2, 1, 1, 1, 1, 1, 1, 1, 1], \n            [5, 2, 1, 1, 1, 1, 1, 1, 1, 1], \n            [5, 2, 1, 1, 1, 1, 1, 1, 1, 1]]\n\n\ndef multiplication_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     division_elements(('a', 'b', 'c', 'd'), ('1', '2', '3', '4')) == ('0.5', '0.25', '0.125', '0.0625')\nassert     division_elements(('1', '2', '3', '4'), ('a', 'b', 'c', 'd')) == ('0.125', '0.0625', '0.25', '0.5')\nassert     division_elements(('0.5', '0.25', '0.125', '0.0625'), ('1', '2', '3', '4')) == ('0.125', '0.125', '0.125', '0.125')\nassert     division_elements(('0.125', '0.125', '0.125', '0.125'), ('0.5', '0.25', '0.125', '0.0625')) == ('0.0625', '0.125', '0.125', '0.125')\n\ndef get_every_other_char(test_str):\n    '''\n    Write a function that returns a string that contains every other character of the given string. \n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    #print_test_div_elements( (5,4,2,3), (5,4,2,3) )\n    #print_test_div_elements( (2,2,2,2), (2,1,2,2) )\n    #print_test_div_elements( (2,2,2,2), (2,1,2,2) )\n    #print_test_div_elements( (5,4,2,3), (5,4,2,3) )\n    #print_test_div_elements( (5,4,2,3), (5,4,2,3) )\n    #print_test_div_elements( (2,2,2,2), (2,1,2,2) )\n    #print_test_div_elements( (2,2,2,2), (2,1,2,2) )\n    pass\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [division_elements(test_tup1, test_tup2) == [5, 0] for test_tup1 in list_of_tuples1 \n        for test_tup2 in list_of_tuples2]\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (division_elements((1, 3, 5), (2, 4, 6)) == \n            (0.5, 1.5, 2.5))\nassert     (division_elements((1, 2, 3), (4, 5, 6)) == \n            (0.25, 0.5, 1.0))\nassert     (division_elements((1, 3, 5), (2, 4, 6)) == \n            (0.5, 1.5, 2.5))\n\n\ndef division_elements_loop(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     division_elements(\n                ((1, 2), (3, 4), (5, 6), (7, 8)),\n                ((4, 8), (2, 4), (10, 6), (12, 3))) ==     ((2, 1), (4, 2), (2, 1), (2, 1))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     division_elements((1,2),(2,3)) == (0.5, 0)\nassert     division_elements((2,3),(2,2)) == (1, 1)\nassert     division_elements((2,3),(4,5)) == (0.6, 0)\nassert     division_elements((2,5),(4,2)) == (0.8, 0)\nassert     division_elements((2,5),(1,2)) == (2, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (8,6) == division_elements((1,5), (3,2))\nassert     (5,7) == division_elements((2,4), (3,3))\nassert     (3,1) == division_elements((3,2), (3,3))\nassert     (2,0) == division_elements((4,0), (2,2))\nassert     (0,0) == division_elements((0,0), (1,2))\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 3) == ([1, 2, 3], [4, 5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == ([1, 2, 3], [4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef split_two_parts_1(list1, L):\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 5) == ([1,2,3,4,5], [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 8) == ([1,2,3,4,5,6,7], [8,9,10,11,12,13,14,15,16,17,18,19,20])\n\ndef split_to_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 1) == ([1], [2, 3, 4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 4) == ([1, 2, 3], [4, 5, 6])\n\ndef left_join_dicts(list1, list2):\n    '''\n    Write a function that takes in two lists, list1 and list2, and returns the result of left joining list1 and list2 on the first element, which is a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_two_parts(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3) == [\n                ['a', 'b', 'c'], \n                ['d', 'e', 'f'], \n                ['g']\n            ]\nassert     split_two_parts(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 4) == [\n                ['a', 'b', 'c', 'd'], \n                ['e', 'f', 'g']\n            ]\nassert     split_two_parts(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 1) == [\n                ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n            ]\nassert     split_two_parts([], 2) == [\n                []\n            ]\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (a1, a2) == split_two_parts(list1, 2)\nassert     (a3, a4) == split_two_parts(list2, 4)\nassert     (a5, a6) == split_two_parts(list3, 6)\nassert     (a7, a8) == split_two_parts(list4, 6)\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 3) == ([1, 2, 3], [4, 5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 4) == ([1, 2, 3, 4], [5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 5) == ([1, 2, 3, 4, 5], [6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 6) == ([1, 2, 3, 4, 5, 6], [7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 7) == ([1, 2, 3, 4, 5, 6, 7], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 10) == ([1, 2, 3, 4, 5], [])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 3) == ([1, 2, 3], [4, 5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 4) == ([1, 2, 3, 4], [5, 6, 7])\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     dog_age(3) == 10\nassert     dog_age(0) == 1\nassert     dog_age(5) == 13\nassert     dog_age(9) == 17\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (dog_age(6) == 8), \"Wrong answer\"\nassert     (dog_age(7) == 10), \"Wrong answer\"\nassert     (dog_age(12) == 25), \"Wrong answer\"\nassert     (dog_age(15) == 38), \"Wrong answer\"\nassert     (dog_age(18) == 51), \"Wrong answer\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     isinstance(dog_age(0), int)     # check the type of return value\nassert     dog_age(1) == 9\nassert     dog_age(10) == 57\nassert     dog_age(20) == 105\nassert     dog_age(30) == 153\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     dog_age(2) == 4.5, \"incorrect\"\nassert     dog_age(8) == 42.5, \"incorrect\"\nassert     dog_age(11) == 59.5, \"incorrect\"\n\nprint \"Congratulations! All tests passed!\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dog_age(9) == 13\nassert     dog_age(4) == 7\nassert     dog_age(0) == 0\nassert     dog_age(14) == 54\nassert     dog_age(17) == 67\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dog_age(7) == 7*7*7\nassert     dog_age(7) == 7*7*7\nassert     dog_age(7) == 7*7*7\nassert     dog_age(7) == 7*7*7\nassert     dog_age(7) == 7*7*7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dog_age(0) == 0\nassert     dog_age(1) == 13\nassert     dog_age(2) == 26\nassert     dog_age(3) == 39\nassert     dog_age(4) == 52\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (dog_age(0) ==  0)\nassert     (dog_age(3) ==  13)\nassert     (dog_age(1) ==  14)\nassert     (dog_age(9) == 112)\nassert     (dog_age(10) == 113)\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dog_age(5) == 15\nassert     dog_age(10) == 25\nassert     dog_age(12) == 38\nassert     dog_age(2) == 7\nassert     dog_age(1) == 0\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     0 == dog_age(0)\nassert     1 == dog_age(1)\nassert     2 == dog_age(2)\nassert     4 == dog_age(4)\nassert     5 == dog_age(5)\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 2) == [[1, 2], [3, 4], [5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 4) == [[1, 2, 3, 4], [5, 6, 7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8],2) == [[1,2],[3,4],[5,6],[7,8]]\nassert     list_split([1,2,3,4,5,6,7,8],3) == [[1,2,3],[4,5,6],[7,8]]\nassert     list_split([1,2,3,4,5,6,7,8],4) == [[1,2,3,4],[5,6,7,8]]\nassert     list_split([1,2,3,4,5,6,7,8,9],3) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10],5) == [[1,2,3,4,5],[6,7,8,9,10]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 0) == [[], [], [], [], []]\nassert     list_split([1, 2, 3, 4, 5], -1) == [[], [], [], [], []]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef merge(A, B):\n    '''\n    Write a function that merges two sorted lists in ascending order. Each list contains elements of different types, and you need to merge them into a single sorted list.\n    '''\n    pass\n\n\ndef merge_sort(A):\n    '''\n    Write a function that takes in a list and returns a new sorted list.\n    '''\n    pass\n\n\ndef bubblesort(A):\n    '''\n    Write a function that takes in a list and returns a new sorted list.\n    '''\n    pass\n\n\ndef mergesort(A):\n    '''\n    Write a function that takes in a list and returns a new sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 3) == [[1, 2, 3], [4]]\nassert     list_split([1, 2, 3, 4], 1) == [[1], [2], [3], [4]]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7], 2) == [[1, 2], [3, 4], [5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 2) == [[1, 2], [3, 4], [5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 4) == [[1, 2, 3, 4], [5, 6, 7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     list_split([1,2,3,4,5,6], 2) == [[1,2,3], [4,5,6]]\nassert     list_split([1,2,3,4,5,6], 3) == [[1,2,3], [4,5,6]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 2) == [[1,2,3], [4,5,6], [7,8,9]]\nassert     list_split([1,2,3,4,5,6], 0) == [[1,2,3,4,5,6]]\nassert     list_split([1,2,3,4,5,6], -1) == [[1,2,3,4,5,6]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 2)\n        == [[1, 2], [3, 4], [5]]\n\nassert     list_split([1, 2, 3, 4, 5], 3)\n        == [[1, 2, 3], [4, 5]]\n\nassert     list_split([1, 2, 3, 4, 5], 4)\n        == [[1, 2, 3, 4], [5]]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     lateralsurface_cube(2)    ==     6\nassert     lateralsurface_cube(3)    ==     12\nassert     lateralsurface_cube(4)    ==     20\nassert     lateralsurface_cube(5)    ==     30\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(2) == 24\nassert     lateralsurface_cube(3) == 54\nassert     lateralsurface_cube(4) == 216\nassert     lateralsurface_cube(5) == 720\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(2) == 12\nassert     lateralsurface_cube(3) == 24\nassert     lateralsurface_cube(4) == 48\nassert     lateralsurface_cube(5) == 120\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     lateralsurface_cube(5) == 60\nassert     lateralsurface_cube(8) == 216\nassert     lateralsurface_cube(6) == 12\nassert     lateralsurface_cube(7) == 28\n\nprint('passed')\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(1) == 6, \"Incorrect output for side length 1\"\nassert     lateralsurface_cube(2) == 12, \"Incorrect output for side length 2\"\nassert     lateralsurface_cube(3) == 24, \"Incorrect output for side length 3\"\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(4) == 24\nassert     lateralsurface_cube(5) == 30\nassert     lateralsurface_cube(6) == 36\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(2) == 12\nassert     lateralsurface_cube(3) == 54\nassert     lateralsurface_cube(4) == 216\nassert     lateralsurface_cube(5) == 752\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lateralsurface_cube(2) == 8\nassert     lateralsurface_cube(3) == 36\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ______________ == lateralsurface_cube(3)\n\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(5) == 150\nassert     lateralsurface_cube(8) == 216"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_Sum(5) == 1**2 + 2**2 + 3**2 + 4**2 + 5**2\nassert     square_Sum(10) == 1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2 + 7**2 + 8**2 + 9**2\nassert     square_Sum(15) == 1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2 + 7**2 + 8**2 + 9**2 + 10**2 + 11**2 + 12**2 + 13**2 + 14**2\n\ndef is_anagram(s1, s2):\n    '''\n    Write a python function that takes in two strings s1 and s2 and returns True if s2 is an anagram of s1. Assume that the string s1 and s2 are the same length and the string s1 and s2 contain only lowercase letters.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert ______________ == square_Sum(3)\nassert ______________ == square_Sum(4)\nassert ______________ == square_Sum(5)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert _______________ == square_Sum(0)\nassert _______________ == square_Sum(1)\nassert _______________ == square_Sum(2)\nassert _______________ == square_Sum(3)\nassert _______________ == square_Sum(10)\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_Sum(3)     == 10\nassert     square_Sum(5)     == 30\nassert     square_Sum(7)     == 70\nassert     square_Sum(15)    == 630\nassert     square_Sum(100) == 10000\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_Sum(2) == 5\nassert     square_Sum(3) == 22\nassert     square_Sum(4) == 34\nassert     square_Sum(5) == 55\nassert     square_Sum(6) == 66\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_Sum(1)     ==     1\nassert     square_Sum(2)     ==     1 + 1**2\nassert     square_Sum(3)     ==     1 + 1**2 + 2**2\nassert     square_Sum(4)     ==     1 + 1**2 + 2**2 + 3**2\nassert     square_Sum(5)     ==     1 + 1**2 + 2**2 + 3**2 + 4**2\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 4\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 16\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     square_Sum(2) == 16 \nassert     square_Sum(4) == 104\nassert     square_Sum(10) == 1350\nassert     square_Sum(0) == 0\nassert     square_Sum(3) == 49\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ___________ == square_Sum(5)\nassert ___________ == square_Sum(10)\nassert ___________ == square_Sum(15)\nassert ___________ == square_Sum(20)\n\n\ndef choose(n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the number of ways in which n can be \n    divided into k positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         square_Sum(2) == 1+1**2\nassert         square_Sum(3) == 1+2**2 + 3**2\nassert         square_Sum(4) == 1+2**2 + 3**2 + 4**2\nassert         square_Sum(10) == 1+2**2 + 3**2 + 4**2 + 5**2 + 6**2 + 7**2 + 8**2 + 9**2\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 12\nassert     find_star_num(3) == 123\nassert     find_star_num(4) == 1234\nassert     find_star_num(5) == 12345\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_star_num(1) == 19\nassert     find_star_num(2) == 61\nassert     find_star_num(3) == 125\nassert     find_star_num(4) == 196\nassert     find_star_num(5) == 286\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_star_num(5) == 23\nassert     find_star_num(10) == 204\nassert     find_star_num(15) == 1332\nassert     find_star_num(19) == 1684\nassert     find_star_num(23) == 2586\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 2\nassert     find_star_num(3) == 3\nassert     find_star_num(4) == 4\nassert     find_star_num(5) == 5\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_star_num(5) == 5\nassert     find_star_num(9) == 25\nassert     find_star_num(12) == 52\nassert     find_star_num(19) == 121\nassert     find_star_num(0) == 1\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 5\nassert     find_star_num(2) == 25\nassert     find_star_num(3) == 125\nassert     find_star_num(4) == 625\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(5) == 24\nassert     find_star_num(9) == 207\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_star_num(4) == 13\nassert     find_star_num(5) == 41\nassert     find_star_num(6) == 85\nassert     find_star_num(7) == 169\nassert     find_star_num(8) == 479\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_star_num(1) == '1'\nassert     find_star_num(2) == '3'\nassert     find_star_num(3) == '9'\nassert     find_star_num(4) == '17'\nassert     find_star_num(5) == '31'\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('z') == 122\nassert     ascii_value('$') == 36\nassert     ascii_value('?') == 63\nassert     ascii_value('.') == 46\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('B') == 66\nassert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('9') == 57\nassert     ascii_value('!') == 33\nassert     ascii_value('\\x00') == 0\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('z') == 122\nassert     ascii_value('A') == 65\nassert     ascii_value('a') == 97\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('z') == 122\nassert     ascii_value('Z') == 90\nassert     ascii_value(' ') == 32\nassert     ascii_value('A') == 65\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('b') == 98\nassert     ascii_value('B') == 66\nassert     ascii_value('c') == 99\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('a') == 97\nassert     ascii_value('9') == 57\nassert     ascii_value('0') == 48\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef binary_value(k):\n    '''\n    Write a function to convert integer to binary string.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('a') == 97\nassert     ascii_value('Z') == 90\nassert     ascii_value('z') == 122\nassert     ascii_value('1') == 49\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         ascii_value('a') == 97\nassert         ascii_value('A') == 65\nassert         ascii_value('0') == 48\nassert         ascii_value('#') == 35\nassert         ascii_value('-') == 45\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8])== 10\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10])== 30\nassert     sum_even_and_even_index([0,1,2,3,4,5,6,7,8])== 10\nassert     sum_even_and_even_index([2,3,4,5,6,7,8,9,10])== 30\nassert     sum_even_and_even_index([2,3,4,5,6,7,8,9,10,11])== 40\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7])== sum([1,3,5,7])\nassert     sum_even_and_even_index([1,2,3,4,5])== sum([1,3,5])\nassert     sum_even_and_even_index([])== 0\nassert     sum_even_and_even_index([1])== 1\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 22\nassert     sum_even_and_even_index([2, 4, 6, 8, 10]) == 22\nassert     sum_even_and_even_index([2, 4, 6, 8, 10, 22, 12, 14]) == 22\nassert     sum_even_and_even_index([2, 4, 6, 8, 10, 22, 12, 14, 22]) == 22\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef string_permutation(str1, str2):\n    '''\n    Write a python function to check if two strings are permutation of each other.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 14\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 26\nassert     sum_even_and_even_index([-1,-2,-3,-4,-5,-6,-7,-8]) == -1\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 26\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 25)\nassert     (sum_even_and_even_index([3, 4, 5, 6, 7, 8]) == 0)\nassert     (sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8]) == 26)\nassert     (sum_even_and_even_index([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 45)\nassert     (sum_even_and_even_index([8, 7, 6, 5, 4, 3, 2, 1]) == 0)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == sum([2,8,12])\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == sum([2,6,10])\nassert     sum_even_and_even_index([1,2,3,4,5,6,7]) == sum([4,8,12])\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == sum([2,8,12,14])\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == sum([2,8,10,12])\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_even_and_even_index([2, 3, 4, 7, 5, 9, 8]) == 22\nassert     sum_even_and_even_index([1, 3, 5]) == 6\nassert     sum_even_and_even_index([]) == 0\nassert     sum_even_and_even_index([1, 3, 5, 7]) == 16\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([2,5,7,4,8,10]) == 24\nassert     sum_even_and_even_index([2,5,4,8,10]) == 16\nassert     sum_even_and_even_index([1,2,3,4,5]) == 30\nassert     sum_even_and_even_index([1,3,5]) == 8\n\nprint('all tests passed')\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 22\nassert     sum_even_and_even_index([1,3,5,7,9,11,13,15,17,19]) == 31\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 30"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(0)     == 0\nassert     even_Power_Sum(1)     == 0\nassert     even_Power_Sum(2)     == 0\nassert     even_Power_Sum(3)     == 0\nassert     even_Power_Sum(4)     == 0\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \ndef test_even_Power_Sum():\n    assert even_Power_Sum(0) == 1\n    assert even_Power_Sum(1) == 0\n    assert even_Power_Sum(5) == 5\n    assert even_Power_Sum(10) == 672\n    "
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (even_Power_Sum(3) == 13)\nassert     (even_Power_Sum(1) == 1)\nassert     (even_Power_Sum(2) == 9)\n\ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(5) == 625\nassert     even_Power_Sum(6) == 1340\nassert     even_Power_Sum(20) == 64350\nassert     even_Power_Sum(50) == 6729025\n\ndef transform_2D_List_to_1D_List(twoDList):\n    '''\n    Write a python function that takes in a two-dimensional list and returns a 1-dimensional list with the same elements as the original list.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 2\nassert     even_Power_Sum(3) == 0\nassert     even_Power_Sum(4) == 0\nassert     even_Power_Sum(5) == 1\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_Power_Sum(1) == 1\nassert     even_Power_Sum(2) == 2\nassert     even_Power_Sum(3) == 4\nassert     even_Power_Sum(4) == 8\nassert     even_Power_Sum(5) == 10\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_Power_Sum(0)     == 0\nassert     even_Power_Sum(1)    == 0\nassert     even_Power_Sum(2)     == 0\nassert     even_Power_Sum(3)     == 0\nassert     even_Power_Sum(4)     == 1\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_Power_Sum(1) == 1\nassert     even_Power_Sum(2) == 8\nassert     even_Power_Sum(3) == 8\nassert     even_Power_Sum(4) == 16\nassert     even_Power_Sum(5) == 32\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(1)    ==    1\nassert     even_Power_Sum(2)    ==    1\nassert     even_Power_Sum(3)    ==    2\nassert     even_Power_Sum(4)    ==    1\nassert     even_Power_Sum(5)    ==    2\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rear_extract([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == [3, 4, 5]\nassert     rear_extract([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == [1, 2, 3]\nassert     rear_extract([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == [2, 3, 4]\nassert     rear_extract([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == [3, 4, 5]\nassert     rear_extract([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == [1, 2, 3]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rear_extract([(1,2),(3,4)]) == [4,4]\nassert     rear_extract([(1,2,3,4)]) == [3,4]\nassert     rear_extract([(1,2),(3)]) == [3,None]\nassert     rear_extract([]) == []\nassert     rear_extract(None) == None\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [5, 'dog', 'cat', 'cat', 'rat', 'bat', 'rat', 'rat'] == rear_extract(\n    [('dog', 5), ('cat', 3), ('cat', 2), ('rat', 2), ('bat', 1), ('rat', 1), ('rat', 1)])\nassert     [5, 'cat', 'cat', 'bat', 'rat', 'bat', 'rat', 'rat'] == rear_extract(\n    [('cat', 3), ('bat', 1), ('rat', 2), ('bat', 1), ('rat', 1), ('rat', 1), ('rat', 1)])\nassert     [5, 'bat', 'rat', 'bat', 'rat', 'bat', 'rat', 'rat'] == rear_extract(\n    [('bat', 1), ('rat', 2), ('bat', 1), ('rat', 1), ('rat', 1), ('rat', 1), ('rat', 1)])\nassert     [5, 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat'] == rear_extract(\n    [('rat', 2), ('rat', 2), ('rat', 2), ('rat', 2), ('rat', 2), ('rat', 2), ('rat', 2), ('rat', 2)])\nassert     [5, 'rat', 'rat', 'rat', 'rat', 'rat', 'rat', 'rat'] == rear_extract(\n    [('rat', 1), ('rat', 1), ('rat', 1), ('rat', 1), ('rat', 1), ('rat', 1), ('rat', 1), ('rat', 1)])\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]\nassert     rear_extract([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)]) == [1,1,3,4,5,5]\nassert     rear_extract([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7)]) == [1,1,3,4,5,5,7]\nassert     rear_extract([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8)]) == [1,1,3,4,5,5,7,8]\nassert     rear_extract([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(10,10),(11,11),(12,12)]) == [1,1,3,4,5,5,7,8,8,9,10,10,11,12]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rear_extract([(1, 2), (3, 4)]) == [2, 4]\nassert     rear_extract([(1, 1, 1), (1, 2, 3)]) == [1, 3]\nassert     rear_extract([(1, 1, 1), (1, 2, 3), (1, 4, 5)]) == [1, 3, 5]\nassert     rear_extract([(1, 1, 1, 1), (1, 2, 3, 4), (1, 4, 5, 6), (1, 7, 8, 9)]) == [1, 3, 5, 7]\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rear_extract([(1, 2, 3), (4, 5, 6)])     == [2, 6]\nassert     rear_extract([(7, 8, 9)])                 == [8]\nassert     rear_extract([(10, 11, 12)])             == [12]\nassert     rear_extract([(13, 14, 15), (16, 17, 18)])     == [18, 17]\nassert     rear_extract([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)])     == [10]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rear_extract([(1, 2, 3), (4, 5), (6, 7, 8, 9)]) == [(6, 7, 8, 9)]\nassert     rear_extract([(1, 2, 3), (4, 5), (6, 7, 8)]) == [(6, 7, 8)]\nassert     rear_extract([(1, 2, 3), (4, 5), (6, 7)]) == [(6, 7)]\nassert     rear_extract([(1, 2, 3, 4)]) == [(4,)]\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rear_extract([(1,2),(3,4)])    == [2,4]\nassert     rear_extract([(1,2),(3,4,5)])    == [4,5]\nassert     rear_extract([(1,2,3)])    == [2,3]\nassert     rear_extract([(1,2,3,4)])    == [4]\nassert     rear_extract([(1,2,3,4,5)]) == [5]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 3, 2, 4, 5, 6]     == rear_extract([(1, 2), (3, 4), (5, 6)])\nassert     [2, 4, 6]     == rear_extract([(1, 2), (3, 4), (5, 6), (7, 8)])\nassert     [9]     == rear_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\nassert     []     == rear_extract([])\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [e for e in rear_extract([(1, 2, 3), ('a', 'b', 'c'), ('x', 'y', 'z')])\n            == ['c', 'b', 'a']]\nassert     [e for e in rear_extract([('x', 'y', 'z'), (1, 2, 3), ('a', 'b', 'c')])\n            == [3, 2, 1]]\nassert     [e for e in rear_extract([('x', 'y', 'z'), (1, 2, 3)])\n            == [3, 2, 1]]\nassert     [e for e in rear_extract([('x', 'y', 'z'), [1, 2, 3]])\n            == ['z', 'y', 'x']]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     substract_elements(('a', 'b', 'c'), ('b', 'c', 'd')) == ('a', 'b', 'd')\nassert     substract_elements(('c', 'b', 'a'), ('b', 'c', 'd')) == ('a', 'b', 'd')\nassert     substract_elements(('z', 'b', 'a'), ('b', 'c', 'd')) == ('a', 'b', 'd')\nassert     substract_elements(('d', 'b', 'a'), ('b', 'c', 'd')) == ('a', 'b', 'd')\nassert     substract_elements(('b', 'a', 'c'), ('b', 'a', 'c')) == ('a', 'b', 'c')\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef diff_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the elements that are in the first tuple and not in the second tuple.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef multiply_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiplies the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     substract_elements([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(-2, -2), (-4, -4), (-6, -6)]\nassert     substract_elements([(1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)], [(1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)]) == [(-2, -2, -2, -2, -2, -2), (-2, -2, -2, -2, -2, -2)]\nassert     substract_elements([(1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(-2, -2, -2, -2, -2, -2), (-2, -2, -2, -2, -2, -2)]\nassert     substract_elements([(1, 2), (3, 4)], [(1, 2), (3, 4)]) == [(-2, -2), (-4, -4)]\nassert     substract_elements([(1, 2), (3, 4)], [(1, 2), (3, 4)]) == [(-2, -2), (-4, -4)]\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         substract_elements(('a', 'b', 'c', 'd'), ('b', 'c', 'd', 'e')) == (('a', 'a', 'c', 'd'), ('a', 'b', 'c', 'e'))\nassert         substract_elements(('a', 'b', 'c'), ('a', 'b', 'd', 'e')) == (('a', 'a', 'b'), ('b', 'c', 'd'))\nassert         substract_elements((1, 2), (2, 3)) == ((1, 1), (3, 2))\nassert         substract_elements((1, 2, 3), (1, 2)) == ((2, 3), (3, 2))\nassert         substract_elements((1, 2), (1, 2)) == ((), ())\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     substract_elements(('hello', 'hello', 'hello', 'hello', 'hello', 'hello'), ('hello', 'hello', 'hello', 'hello', 'hello', 'hello')) == ('hello', 'hello', 'hello', 'hello', 'hello', 'hello')\nassert     substract_elements(('hello', 'hello', 'hello', 'hello', 'hello', 'hello'), ('hello', 'hello', 'hello', 'hello', 'hello', 'hello')) == ('', '', '', '', '', '')\nassert     substract_elements(('hello', 'hello', 'hello', 'hello', 'hello', 'hello'), ('hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello')) == ('', '', '', '', '', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello')\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     substract_elements((1, 2, 3), (4, 5, 6)) == (1-4, 2-5, 3-6)\nassert     substract_elements((1, 1, 2, 1, 1), (1, 2, 2, 2, 2)) == (0, 0, 0, 0, 0)\nassert     substract_elements((1, -1, 1), (1, -1, 1)) == (0, 0, 0)\nassert     substract_elements((1, 1, 1), (1, 1, 1)) == (0, 0, 0)\nassert     substract_elements((1, 2, 3), (4, 5, 6)) == (1-4, 2-5, 3-6)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     substract_elements((1, 1), (1, 1)) == (0, 0)\nassert     substract_elements((1, 1), (1, 2)) == (-1, -2)\nassert     substract_elements((2, 1), (1, 1)) == (1, 0)\nassert     substract_elements((2, 1), (1, 2)) == (-1, 0)\nassert     substract_elements((1, 3), (1, 1)) == (0, 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum( 0) == 1\nassert     even_binomial_Coeff_Sum( 1) == 1\nassert     even_binomial_Coeff_Sum( 2) == 2\nassert     even_binomial_Coeff_Sum( 3) == 5\nassert     even_binomial_Coeff_Sum( 4) == 14\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 1\nassert     even_binomial_Coeff_Sum(3) == 2\nassert     even_binomial_Coeff_Sum(4) == 3\nassert     even_binomial_Coeff_Sum(5) == 5\nassert     even_binomial_Coeff_Sum(6) == 8\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_binomial_Coeff_Sum( 6) == 30\nassert     even_binomial_Coeff_Sum( 10) == 486\nassert     even_binomial_Coeff_Sum( 14) == 1158\nassert     even_binomial_Coeff_Sum( 18) == 7764\nassert     even_binomial_Coeff_Sum( 22) == 6010\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 1\nassert     even_binomial_Coeff_Sum(3) == 3\nassert     even_binomial_Coeff_Sum(4) == 5\nassert     even_binomial_Coeff_Sum(5) == 15\nassert     even_binomial_Coeff_Sum(10) == 50\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum( 10) == 41\nassert     even_binomial_Coeff_Sum( 100) == 210\nassert     even_binomial_Coeff_Sum( 200) == 840\nassert     even_binomial_Coeff_Sum( 300) == 4720\nassert     even_binomial_Coeff_Sum( 400) == 4864\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum( n=10) == 52\nassert     even_binomial_Coeff_Sum( n=14) == 257\nassert     even_binomial_Coeff_Sum( n=0) == 0\nassert     even_binomial_Coeff_Sum( n=1) == 1\nassert     even_binomial_Coeff_Sum( n=2) == 2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum( n=10) == 35\nassert     even_binomial_Coeff_Sum( n=15) == 45\nassert     even_binomial_Coeff_Sum( n=20) == 55\nassert     even_binomial_Coeff_Sum( n=25) == 65\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (even_binomial_Coeff_Sum(4) == 70)\nassert     (even_binomial_Coeff_Sum(5) == 350)\nassert     (even_binomial_Coeff_Sum(6) == 1630)\nassert     (even_binomial_Coeff_Sum(7) == 15290)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(6)    ==    2 + 2 + 2\nassert     even_binomial_Coeff_Sum(5)    ==    2 + 2 + 1\nassert     even_binomial_Coeff_Sum(4)    ==    2 + 2\nassert     even_binomial_Coeff_Sum(3)    ==    2\nassert     even_binomial_Coeff_Sum(2)    ==    2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum(2)     ==     1\nassert     even_binomial_Coeff_Sum(3)     ==     2\nassert     even_binomial_Coeff_Sum(4)     ==     3\nassert     even_binomial_Coeff_Sum(5)     ==     4\nassert     even_binomial_Coeff_Sum(6)     ==     5\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (volume_cylinder(2,3) == 26.52)\nassert     (volume_cylinder(2,4) == 78.16)\nassert     (volume_cylinder(2,5) == 158.76)\nassert     (volume_cylinder(2,6) == 326.04)\nassert     (volume_cylinder(2,7) == 483.36)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         volume_cylinder(2.5,5.0) == 19.94\nassert         volume_cylinder(0.0,2.5) == 0\nassert         volume_cylinder(0.0,0) == 0\nassert         volume_cylinder(0.0,-2) == 0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_cylinder(3,4) == 12.566370614359172\nassert     volume_cylinder(2,10) == 250\nassert     volume_cylinder(2,8) == 200\nassert     volume_cylinder(5,5) == 50\nassert     volume_cylinder(6,5) == 0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_cylinder(4,8) == 128.00000\nassert     volume_cylinder(3,5) == 45.00000\nassert     volume_cylinder(4,10) == 304.00000\nassert     volume_cylinder(4,15) == 1728.00000\nassert     volume_cylinder(8,8) == 256.00000\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_cylinder(10,10) ==     1.633168\nassert     volume_cylinder(15,10) ==     1.314968\nassert     volume_cylinder(15,15) ==     1.752568\nassert     volume_cylinder(10,20) ==     0.633168\nassert     volume_cylinder(15,20) ==     0.314968\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_cylinder(1,1) == math.pi/3\nassert     volume_cylinder(2,2) == math.pi/2\nassert     volume_cylinder(1.7,2.8) == pytest.approx(0.435699)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_cylinder(3,2) == 12.566370614359172\nassert     volume_cylinder(5,5) == 125\nassert     volume_cylinder(9,8) == 8720\nassert     volume_cylinder(1,2) == 3.14\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_cylinder(1.0, 1.0) == pi*1.0**2\nassert     volume_cylinder(1.0, 0.5) == pi*0.5**2\nassert     volume_cylinder(0.5, 0.5) == pi*0.25**2\nassert     volume_cylinder(1.0, 2.0) == pi*2.0**2\nassert     volume_cylinder(2.0, 2.0) == pi*4.0**2\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_cylinder(2,4) == 8.0\nassert     volume_cylinder(3,2) == 12.0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     volume_cylinder(1,2) == 2*math.pi*math.pow(1,2)\nassert     volume_cylinder(2,3) == math.pi*math.pow(2,3)\nassert     volume_cylinder(3,4) == math.pi*math.pow(3,4)\nassert     volume_cylinder(4,5) == math.pi*math.pow(4,5)\nassert     volume_cylinder(5,6) == math.pi*math.pow(5,6)\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == {\"a\": 1, \"b\": 2})\nassert     (dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 3) == {\"c\": 3})\nassert     (dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 4) == {})\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6},3)== {'a':1,'b':2,'c':3,'d':4,'e':5}\nassert     dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6},5)== {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\nassert     dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6},10)== {}\nassert     dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6},-1)== {}\nassert     dict_filter({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6},0)== {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef comp_power(x, n):\n    '''\n    Write a function that computes the power of x to the nth power.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 4) == {1: 2, 3: 4, 7: 8, 9: 10}\nassert     dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 6) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}\nassert     dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 1) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}\nassert     dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 2) == {1: 2, 3: 4, 5: 6, 9: 10}\nassert     dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 5) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dict_filter({1: 5, 2: 1, 3: 4, 4: 5, 5: 1}, 3) == {1: 1, 2: 1, 3: 4, 4: 5, 5: 1}\nassert     dict_filter({1: 5, 2: 1, 3: 4, 4: 5, 5: 1}, 5) == {1: 1, 2: 1, 3: 4, 4: 5, 5: 1}\nassert     dict_filter({1: 5, 2: 1, 3: 4, 4: 5, 5: 1}, 2) == {1: 1, 2: 1, 3: 4, 4: 5, 5: 1}\nassert     dict_filter({1: 5, 2: 1, 3: 4, 4: 5, 5: 1}, 1) == {1: 1, 2: 1, 3: 4, 4: 5, 5: 1}\nassert     dict_filter({1: 5, 2: 1, 3: 4, 4: 5, 5: 1}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dict_filter({1:5, 2:3, 3:4, 4:9, 5:2},3) == {3:4, 4:9, 5:2}\nassert     dict_filter({1:5, 2:3, 3:4, 4:9, 5:2},2) == {2:3, 4:9, 5:2}\nassert     dict_filter({1:5, 2:3, 3:4, 4:9, 5:2},5) == {5:2}\nassert     dict_filter({1:5, 2:3, 3:4, 4:9, 5:2},1) == {1:5, 2:3, 3:4, 4:9, 5:2}\nassert     dict_filter({1:5, 2:3, 3:4, 4:9, 5:2},4) == {4:9, 5:2}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dict_filter({\"a\":1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}, 3)         == {\"d\": 4, \"e\": 5, \"f\": 6}\nassert     dict_filter({\"a\":1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}, 5)     == {\"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nassert     dict_filter({\"a\":1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}, 10)     == {}\nassert     dict_filter({\"a\":1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}, -1)     == {\"a\":1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\nassert     dict_filter({\"a\":1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}, 10)     == {\"a\":1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef dict_sort(dict):\n    '''\n    Write a function that takes in a dictionary and returns a sorted version of the dictionary. Use the built-in Python sort method, not sorted().\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_first_elements((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")) == 6\nassert     count_first_elements((\"a\", \"a\", \"a\")) == 3\nassert     count_first_elements((\"a\", \"b\", \"a\")) == 2\nassert     count_first_elements((\"a\", \"b\", \"b\", \"b\", \"c\", \"a\")) == 5\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_first_elements((1, 3, 3, 3, 2, 2, 1, 4, 4, 3, 2, 2, 1)) == 8\nassert     count_first_elements((5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == 0\nassert     count_first_elements((1, 2, 3, 4, 5, 6)) == 0\nassert     count_first_elements(()) == 0\n\ndef reverse(test_tup):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_first_elements(((2, 3), ('a', 'b', 'c'), 1, 2)) == 3\nassert     count_first_elements(((1, 2), (3, 4, 5), 6, 7)) == 3\nassert     count_first_elements(((1, 2), (3, 4, 5), 6, '6')) == 3\nassert     count_first_elements(((1, 2), ('3', 4, 5), 6, '6')) == 1\nassert     count_first_elements(((1, 2), ('3', 4, 5), 6, (6, 7))) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5, 6, 7)) == 3\nassert     count_first_elements((1, 2, 3, 4, 5)) == 2\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 5\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 6\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_first_elements((1, 2, 3)) == 3\nassert     count_first_elements((1, 1, 3)) == 2\nassert     count_first_elements((2, 3, 1)) == 1\nassert     count_first_elements((1, 2, 3, 4, 5)) == 0\nassert     count_first_elements((1, 1, 2)) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_first_elements(('banana', 'banana', 'banana', 'dog', 'dog')) == 3\nassert     count_first_elements(('apple', 'apple', 'apple', 'cat', 'cat')) == 0\nassert     count_first_elements(('dog', 'dog', 'dog', 'cat', 'cat')) == 1\nassert     count_first_elements(('dog', 'dog', 'dog', 'dog', 'dog')) == 1\nassert     count_first_elements(('dog', 'dog', 'dog', 'dog', 'dog', 'dog', 'dog')) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_first_elements((1,2,3,4,5,6)) == 6\nassert     count_first_elements((6,2,5,1,4,3)) == 2\nassert     count_first_elements((3,2,1)) == 0\nassert     count_first_elements((1,2,3,4,5,6,2,3,1,2,5,6,2,4,5,6)) == 7\nassert     count_first_elements((1,2,3,4,5,6,7,8)) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'd')) == 1\nassert     count_first_elements(('a', 'a', 'a', 'a')) == 3\nassert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'f')) == 6\nassert     count_first_elements(('a', 'b', 'c', 'd', 'e')) == 5\n\ndef counter(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_first_elements((0,0,2,1,2,2,3)) == 3\nassert     count_first_elements((1,2,2,1,2,2)) == 3\nassert     count_first_elements((0,2,1,2,1,2)) == 3\nassert     count_first_elements((0,2,2,1,2,1,2,1,1)) == 5\nassert     count_first_elements((1,2,2,1,2,2,1,1,1,1,1)) == 5\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_first_elements((3, 5, 1, 2, 1, 4, 7, 4)) == 3\nassert     count_first_elements((1, 2, 1, 2, 1, 2, 1, 2)) == 2\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 9\nassert     count_first_elements((1, 1, 1, 1, 1)) == 1\nassert     count_first_elements((1, 1, 1, 1, 1, 1)) == 1\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 3\nassert     is_num_decagonal(2) == 7\nassert     is_num_decagonal(3) == 11\nassert     is_num_decagonal(4) == 19\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 4\nassert     is_num_decagonal(5) == 15\nassert     is_num_decagonal(10) == 45\nassert     is_num_decagonal(20) == 12345\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_num_decagonal(0) ==  0\nassert     is_num_decagonal(1) ==  10\nassert     is_num_decagonal(2) ==  22\nassert     is_num_decagonal(3) ==  22\nassert     is_num_decagonal(4) ==  56\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_num_decagonal(1) == 10\nassert     is_num_decagonal(2) == 22\nassert     is_num_decagonal(3) == 44\nassert     is_num_decagonal(4) == 70\nassert     is_num_decagonal(5) == 108\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_num_decagonal(0) == 0\nassert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 5\nassert     is_num_decagonal(4) == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_num_decagonal(10) == 91\nassert     is_num_decagonal(100) == 943\nassert     is_num_decagonal(1000) == 1091\nassert     is_num_decagonal(10000) == 1129\nassert     is_num_decagonal(100000) == 129901\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_num_decagonal(1) == 0\nassert     is_num_decagonal(2) == 10\nassert     is_num_decagonal(3) == 45\nassert     is_num_decagonal(4) == 85\nassert     is_num_decagonal(5) == 125\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 22\nassert     is_num_decagonal(3) == 333\nassert     is_num_decagonal(5) == 6666\nassert     is_num_decagonal(9) == 7711\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 2\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 4\nassert     is_num_decagonal(4) == 5\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_num_decagonal(0) == True\nassert     is_num_decagonal(1) == True\nassert     is_num_decagonal(2) == True\nassert     is_num_decagonal(3) == True\nassert     is_num_decagonal(4) == False\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (sequential_search([], 1) == (False, -1))\nassert     (sequential_search([1], 1) == (True, 0))\nassert     (sequential_search([1, 2], 1) == (True, 0))\nassert     (sequential_search([1, 2, 3, 4], 1) == (True, 0))\nassert     (sequential_search([1, 2, 3, 4], 5) == (False, -1))\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sequential_search([1, 2, 3, 4, 5], 1) == (True, 0)\nassert     sequential_search([1, 2, 3, 4, 5], 2) == (True, 1)\nassert     sequential_search([1, 2, 3, 4, 5], 5) == (True, 4)\nassert     sequential_search([1, 2, 3, 4, 5], 0) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5], 'a') == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (True, 2) == sequential_search([1,2,3,4,5], 1)\nassert     (False, -1) == sequential_search([1,2,3,4,5], 6)\nassert     (False, -1) == sequential_search([1,2,3,4,5], 3)\nassert     (True, 0) == sequential_search([1,2,3,4,5], 2)\nassert     (True, 2) == sequential_search([1,2,3,4,5,6], 1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (0, sequential_search(\n                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 5)) == (True, 0)\nassert     (0, sequential_search(\n                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 16)) == (False, -1)\nassert     (0, sequential_search(\n                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 1)) == (True, 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [True, 1] == sequential_search(['a', 'b', 'c', 'd', 'e'], 'a')\nassert     [True, 2] == sequential_search(['a', 'b', 'c', 'd', 'e'], 'b')\nassert     [True, 3] == sequential_search(['a', 'b', 'c', 'd', 'e'], 'c')\nassert     [True, 4] == sequential_search(['a', 'b', 'c', 'd', 'e'], 'd')\nassert     [True, 5] == sequential_search(['a', 'b', 'c', 'd', 'e'], 'e')\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sequential_search([1,2,3,4,5], 1) == (True, 0)), \"Test 1 failed\"\nassert     (sequential_search([1,2,3,4,5], 2) == (True, 1)), \"Test 2 failed\"\nassert     (sequential_search([1,2,3,4,5], 3) == (True, 2)), \"Test 3 failed\"\nassert     (sequential_search([1,2,3,4,5], 5) == (True, 4)), \"Test 4 failed\"\nassert     (sequential_search([1,2,3,4,5], 6) == (False, -1)), \"Test 5 failed\"\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sequential_search([1, 2, 3, 4, 5, 6], 1) == (True, 0))\nassert     (sequential_search([1, 2, 3, 4, 5, 6], 6) == (True, 5))\nassert     (sequential_search([1, 2, 3, 4, 5, 6], 7) == (False, -1))\nassert     (sequential_search([1, 2, 3, 4, 5, 6], 8) == (False, -1))\nassert     (sequential_search([1, 2, 3, 4, 5, 6], 2) == (True, 1))\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_unique([1,2,3,4,5]) == True, \"Failed\"\nassert     all_unique([1,2,2,3,3,4]) == False, \"Failed\"\nassert     all_unique([1,2,3,4,5,6,6]) == True, \"Failed\"\nassert     all_unique(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == True, \"Failed\"\nassert     all_unique(['a', 'b', 'a']) == False, \"Failed\"\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_unique([1,2,3,4,5,6,7,8,9,10]) == True\nassert     all_unique([1,2,3,4,5,6,7,8]) == False\nassert     all_unique([1,2,3,4]) == True\nassert     all_unique([1,2,3]) == True\nassert     all_unique([1,2,3,1]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_unique([1,2,3,4,5,6,7,8,9]) == True\nassert     all_unique([1,2,3,4,5]) == True\nassert     all_unique([1,2,3,4,1,2,3]) == False\n\ndef only_vowels(test_str):\n    '''\n    Write a python function to check if the characters of a given string are vowels or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_unique(['aa', 'bb', 'cc', 'dd']) == False\nassert     all_unique([1, 2, 3, 4]) == True\nassert     all_unique([1, 1, 1, 1]) == False\nassert     all_unique([1, 2, 2, 3]) == False\nassert     all_unique(['aa', 'bb', 'cc', 'dd', 'ee']) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_unique([1,2,3,4,5,6]) == True\nassert     all_unique([1,2,3,4,1]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         all_unique([1, 2, 3, 4, 5]) == True\nassert         all_unique(['a', 'b', 'c']) == False\nassert         all_unique(['a', 'b', 'c', 'a']) == False\nassert         all_unique([1, 1, 2, 2, 3, 3, 4]) == False\nassert         all_unique([1, 2, 3, 4]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_unique(['a', 'b', 'c', 'd']) == True\nassert     all_unique(['a', 'b', 'b']) == False\nassert     all_unique([]) == True\nassert     all_unique([1, 2, 3, 4, 5]) == False\nassert     all_unique([1, 2, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_unique([1,2,3,4,5])\nassert     all_unique([3,4,1,2])\nassert     all_unique([1,1,1,1])\nassert     all_unique([1,2,3,4,5,6])\nassert     all_unique([1,2,3,4,1,2,3])\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_unique([1, 2, 3, 4, 5]) == True, \"Failed\"\nassert     all_unique([1, 2, 2, 4, 5]) == False, \"Failed\"\nassert     all_unique([1, 2, 3, 1]) == True, \"Failed\"\nassert     all_unique([1, 2, 3, 4, 5, 6]) == False, \"Failed\"\nassert     all_unique([1]) == True, \"Failed\"\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sub_list([1,2,3,4],[1,2,3,4]) == [0,0,0,0]\nassert     sub_list([1,2,3],[1,2,3]) == [0,0,0]\nassert     sub_list([1,2,3],[1,2,3,4]) == [-1,-1,-1]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [2,1] == sub_list([1,2], [1,2])\nassert     [-1,2,3] == sub_list([-1,2,3], [-1,2,3])\nassert     [3,2,1] == sub_list([3,2,1], [-1,2,3])\nassert     [0,0,0] == sub_list([0,0,0], [1,2,3])\nassert     [1,2] == sub_list([1,2], [])\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sub_list([1,2,3],[1,2,3]) == []\nassert     sub_list([0,0,0,0],[0,0,0,0]) == [0,0,0,0]\nassert     sub_list([1,2,3,4],[5,6,7,8]) == [4,4,4,4]\nassert     sub_list([1,2],[3,4]) == [2,2]\nassert     sub_list([1],[2,3]) == [1,1]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sub_list([1, 2, 3], [1, 2, 3]) == []\nassert     sub_list([1, 2, 3], [4, 5, 6]) == [-3, -2, -1]\nassert     sub_list([1, 2, 3], [1, 2]) == [0, 0, 0]\nassert     sub_list([1, 2, 3], [1]) == [0, 0, -1]\nassert     sub_list([1, 2, 3], []) == [1, 2, 3]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sub_list([1, 2, 3, 4], [2, 3, 4]) == [1, 1, 1, -1]\nassert     sub_list([5, 7, 7, 8, 8], [4, 5, 6, 7, 8]) == [1, -2, -1, 0, 0]\n\ndef find_ind(nums,target):\n    '''\n    Write a function to find the index of an item in a list (implement an O(logn) algorithm)\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sub_list([1,2,3], [4,5,6]) == [3,4,5]\nassert     sub_list([1,2,3,4], [2,3,4,5]) == [1,0,1,0]\nassert     sub_list([1,2,3,4,5], [2,3,4,5,6]) == [1,0,1,0,1]\nassert     sub_list([], [1,2,3]) == [0,0,0]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sub_list([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     sub_list([1,2,3,4,5],[1,2,3,4,5,6]) == [-1,-1,-1,-1,-1]\nassert     sub_list([1,2,3,4,5],[1,2,3,4,5,6,7]) == [-1,-1,-1,-1,-1,-1,-1]\nassert     sub_list([1,2,3,4,5,6],[1,2,3,4,5]) == [1,1,1,1,1]\nassert     sub_list([1,2,3,4,5],[1,2,3,4,5,6,7]) == [1,1,1,1,1,-1,-1]\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     validate(3453) == True\nassert     validate(1234) == True\nassert     validate(12) == True\nassert     validate(7) == False\nassert     validate(4) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     validate(45) == True\nassert     validate(292999) == True\nassert     validate(20) == True\nassert     validate(19) == False\nassert     validate(89) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     validate(0) == True\nassert     validate(123) == False\nassert     validate(1234) == True\nassert     validate(12345) == True\nassert     validate(1235) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef count_digits(n): \n    '''\n    Write a python function that counts the number of digits in a positive integer.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     validate(123)\nassert     validate(456)\nassert     validate(12)\nassert     validate(0)\nassert     validate(0)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     validate(1231231234) == True\nassert     validate(1232143) == True\nassert     validate(122323) == False\nassert     validate(0) == True\nassert     validate(1) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     validate(5673) == True\nassert     validate(123) == True\nassert     validate(1234) == False\nassert     validate(124) == True\nassert     validate(1234) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     validate(4321) == True\nassert     validate(123) == False\nassert     validate(12) == True\nassert     validate(432) == True\nassert     validate(13) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     validate(12345) == True\nassert     validate(123) == False\nassert     validate(2468) == True\nassert     validate(1236) == True\nassert     validate(1234) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     validate(12345) == True\nassert     validate(12356) == False\nassert     validate(123) == True\nassert     validate(99) == False\nassert     validate(5) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_element([1,1,1],1)\nassert     check_element([1,2,3],1)\nassert     check_element([1,2,3],3)\nassert     check_element([1,2,3],1) == True\nassert     check_element([1,2,3],2) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_element([\"A\",\"B\",\"C\",\"A\",\"B\",\"C\"], \"A\") == True\nassert     check_element([\"A\",\"B\",\"C\",\"A\",\"B\",\"C\"], \"B\") == True\nassert     check_element([\"A\",\"B\",\"C\",\"A\",\"B\",\"C\"], \"C\") == True\nassert     check_element([\"A\",\"B\",\"C\",\"A\",\"B\",\"C\"], \"D\") == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_element([1,1,1],1)\nassert     check_element([1,1,1],2)\nassert     check_element([1,2,3,4,5],3)\nassert     check_element([1,2,3,4,5],4)\nassert     check_element([1,2,3,4,5],1)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_element([1,1,1,1,1],1) == True, \"test 1\"\nassert     check_element([1,1,1,2],1) == False, \"test 2\"\nassert     check_element([1,2,2,3,4],2) == True, \"test 3\"\nassert     check_element([1,2,3,4,5,6,7],7) == True, \"test 4\"\nassert     check_element([1,2,3,4,5,6,7],4) == False, \"test 5\"\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_element([],None) == True, \"Expected True\"\nassert     check_element([1],1) == True, \"Expected True\"\nassert     check_element([1,1,2],1) == False, \"Expected False\"\nassert     check_element([1,2,2],1) == True, \"Expected True\"\nassert     check_element([1,2,2,3,3],1) == True, \"Expected True\"\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_element([1,1,1,1],1)     == True\nassert     check_element([1,1,1,1],0)     == False\nassert     check_element([1,2,3,4],1)     == False\nassert     check_element([1,2,3,4],2)     == False\nassert     check_element([1,2,3,4],3)     == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_element([1,1,1,1,1],1) == True\nassert     check_element([1,1,1,1,2],1) == False\nassert     check_element([1,1,1,1,2],2) == False\nassert     check_element([1,1,1,1,2],3) == False\n\ndef binary_search(list,element):\n    '''\n    Write a function that takes in a list and element and returns the index of the element in the list if it is present.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_element([1, 2, 3, 4], 4) == True\nassert     check_element([1, 2, 3, 4], 1) == False\nassert     check_element([1, 2, 3, 4], 3) == False\nassert     check_element([1, 2, 3, 4], 5) == False\nassert     check_element([1, 2, 3, 4], None) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_element([1,1,1,1,1,1,1],1) == True\nassert     check_element([1,2,3,4,5,6,7],7) == True\nassert     check_element([1,2,3,4,5,6,7],8) == False\n\ndef check_equal(list1,list2):\n    '''\n    Write a function that takes in two lists and returns True if the two lists are equal, and False if they are not equal.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_element(['a','a','a'], 'a')\nassert     check_element([1,1,1], 1)\nassert     check_element(['a', 'b', 'c'], 'a')\n\ndef count_items(list,element):\n    '''\n    Write a function that takes in a list and element and counts the number of times the given element occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_two_three('aaab') == True\nassert     text_match_two_three('abc') == False\nassert     text_match_two_three('aabb') == True\nassert     text_match_two_three('bbbb') == True\nassert     text_match_two_three('abb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_two_three('aab') == True\nassert     text_match_two_three('aabb') == True\nassert     text_match_two_three('aabbb') == True\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('abb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_two_three('ab')\nassert     text_match_two_three('ba')\nassert     text_match_two_three('abcba')\nassert     text_match_two_three('abcab')\nassert     not text_match_two_three('abc')\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_two_three(\"abb\") == True, 'incorrect'\nassert     text_match_two_three(\"abbb\") == False, 'incorrect'\nassert     text_match_two_three(\"abbbbbbbbbbbbbbbbbbb\") == False, 'incorrect'\nassert     text_match_two_three(\"abbbbbbbbbbbbbbbbbaa\") == False, 'incorrect'\nassert     text_match_two_three(\"\") == False, 'incorrect'\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_two_three('') == False\nassert     text_match_two_three('a') == False\nassert     text_match_two_three('a') == False\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('aab') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_two_three('ab')\nassert     text_match_two_three('abab')\nassert     text_match_two_three('abbb')\nassert     text_match_two_three('bbbb')\nassert     text_match_two_three('baa')\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_match_two_three(r\"aabbb\") == True\nassert     text_match_two_three(r\"aab\") == True\nassert     text_match_two_three(r\"aabbbcc\") == True\nassert     text_match_two_three(r\"abccba\") == False\nassert     text_match_two_three(r\"abaab\") == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_match_two_three('aab') == True\nassert     text_match_two_three('aabd') == False\nassert     text_match_two_three('aabb') == True\nassert     text_match_two_three('abcb') == False\nassert     text_match_two_three('abcb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_two_three(\"\") == False\nassert     text_match_two_three(\"ab\") == False\nassert     text_match_two_three(\"aa\") == False\nassert     text_match_two_three(\"ba\") == False\nassert     text_match_two_three(\"abb\") == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_two_three(\"abc\") == False\nassert     text_match_two_three(\"abb\") == True\nassert     text_match_two_three(\"abbbb\") == False\nassert     text_match_two_three(\"ababbb\") == True\nassert     text_match_two_three(\"abbbbbbbbb\") == False\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef max_sub_array_sum_k(a, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([1, -1, 5, -2, 3], 5, 3) == 5\nassert     max_sub_array_sum_repeated([1, 2, -3, -5], 3, 2) == 0\nassert     max_sub_array_sum_repeated([1, 2, -3, -5], 3, 1) == -1\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([1, -1, 5, -2, 3], 5, 3) == 7\nassert     max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 4, 2) == 7\nassert     max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 7, 2) == 7\n\ndef max_sub_array_sum_repeated_improved(a, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\n'''\n\nGiven an array of numbers and a number K, find the maximum sum of a subarray with length K.\n\nSubarray means a contiguous sequence of numbers in an array.\n\nExample 1:\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 4, 3) == 10\nassert     max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 4, 3) == -1\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 4) == 30\nassert     max_sub_array_sum_repeated([-1, -2, -3, -4, -5, -6, -7, -8, -9], 5, 4) == -1\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 2) == 21\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([1, -2, -3, 2, 3, 1], 5, 3) == 6\nassert     max_sub_array_sum_repeated([1, -2, -3, 2, 3, 1], 5, 2) == 6\nassert     max_sub_array_sum_repeated([-1, -2, -3, 2, 3, 1], 5, 2) == 6\nassert     max_sub_array_sum_repeated([-1, -2, -3, 2, 3, 1], 5, 3) == 6\nassert     max_sub_array_sum_repeated([1, -2, -3, 2, 3, 1], 5, 4) == 0\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated([1, 4, 2, 10, 7, 10, 8], 7, 3) == 34\nassert     max_sub_array_sum_repeated([1, 4, 2, 10, 7, 10, 8], 7, 2) == 29\nassert     max_sub_array_sum_repeated([1, 4, 2, 10, 7, 10, 8], 7, 1) == 34\nassert     max_sub_array_sum_repeated([1, 4, 2, 10, 7, 10, 8], 7, 0) == 10\nassert     max_sub_array_sum_repeated([1, 4, 2, 10, 7, 10, 8], 8, 3) == 35\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3, 1, 4, 5, 2, 3, 6], 10, 3) == 13\nassert max_sub_array_sum_repeated([1, 2, 3, 1, 4, 5, 2, 3, 6], 10, 2) == 9\nassert max_sub_array_sum_repeated([1, 2, 3, 1, 4, 5, 2, 3, 6], 10, 1) == 6\nassert max_sub_array_sum_repeated([1, 2, 3, 1, 4, 5, 2, 3, 6], 10, 4) == 22\nassert max_sub_array_sum_repeated([1, 2, 3, 1, 4, 5, 2, 3, 6], 10, 6) == 32\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([1, 4, 3, 1, 0, 2], 5, 3) == 7\nassert     max_sub_array_sum_repeated([5, 4, -1, 7, 8], 5, 3) == 23\nassert     max_sub_array_sum_repeated([-5, -1, -7, -8], 5, 3) == -3\nassert     max_sub_array_sum_repeated([], 3, 3) == 0\nassert     max_sub_array_sum_repeated([-10, -5, -1, -8, -3, -2, -7, -3, -2, -3], 10, 2) == -6\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (square_Sum(2) == 5),     \"Error in square_Sum\"\nassert     (square_Sum(3) == 14),     \"Error in square_Sum\"\nassert     (square_Sum(4) == 30),     \"Error in square_Sum\"\nassert     (square_Sum(10) == 385),     \"Error in square_Sum\"\nassert     (square_Sum(15) == 1025),     \"Error in square_Sum\"\nprint \"Pass: square_Sum\"\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(2) == 4\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 16\nassert     square_Sum(5) == 25\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 25\nassert     square_Sum(3) == 225\nassert     square_Sum(4) == 2500\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 3\nassert     square_Sum(3) == 7\nassert     square_Sum(4) == 10\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         square_Sum(0)     == 0\nassert         square_Sum(1)     == 1\nassert         square_Sum(2)     == 1+4\nassert         square_Sum(3)     == 1+4+9\nassert         square_Sum(4)     == 1+4+9+16\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 5\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 25\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     square_Sum(5) == 385\nassert     square_Sum(10) == 385 + 495 + 925 + 995 + 625 + 625 + 625 + 625\nassert     square_Sum(15) == 385 + 495 + 925 + 995 + 625 + 625 + 625 + 625 + 625 + 625 + 625 + 625 + 625 + 625\n\n\ndef sum_of_numbers(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (square_Sum(1) == 1)\nassert     (square_Sum(2) == 4)\nassert     (square_Sum(3) == 9)\nassert     (square_Sum(4) == 16)\nassert     (square_Sum(5) == 25)\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_Sum(5) == 25\nassert     square_Sum(100) == 955100\nassert     square_Sum(0) == 0\nassert     square_Sum(100) == 955100\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_length( [[1, 2, 3], [1, 2], [1, 2, 3, 4]] ) == [1, 2, 3, 4]\nassert     max_length( [[1, 2, 3], [1, 2, 4, 5], [1, 2, 3]] ) == [1, 2, 3]\nassert     max_length( [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4, 5]] ) == [1, 2, 3, 4, 5]\nassert     max_length( [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5]] ) == [1, 2, 3, 4, 5]\nassert     max_length( [[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]] ) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_length([\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n    [10,11,12,13],\n    [14,15,16]\n]) == [10,11,12,13,14,15,16]\nassert     max_length([\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16]\n]) == [13,14,15,16]\n\ndef unique_check(list1):\n    '''\n    Write a function to check whether a list contains all unique elements\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [4, 1, 2, 6, 3, 2, 1] == max_length([[4, 1, 2, 6, 3, 2, 1], [1, 2, 3, 4, 5], [2, 4, 1, 8, 6, 4, 1, 2, 3, 4]])\nassert     [4, 1, 2, 6, 3, 2, 1] == max_length([[4, 1, 2, 6, 3, 2, 1], [1, 2, 3, 4, 5]])\nassert     [1, 2, 3, 4, 5] == max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\nassert     [6, 4, 5, 1, 2, 3, 4, 5] == max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\n\ndef max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_length([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15]])         == 3\nassert     max_length([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10, 11, 12], [13, 14, 15]])         == 4\nassert     max_length([[1, 2], [3, 4], [5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])     == 4\nassert     max_length([[1, 2, 3, 4], [5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])         == 4\nassert     max_length([[1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11, 12], [13, 14, 15]])         == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_length([[1,2,3], [4,5,6], [7,8,9,10]]) == [10]\nassert     max_length([[1,2,3,4], [5,6,7,8,9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25]]) == [25]\nassert     max_length([[1,2,3,4,5], [6,7,8,9,10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]) == [25]\nassert     max_length([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14,15], [16,17,18,19,20,21,22,23], [24,25,26,27,28,29,30,31], [32,33,34,35,36,37,38,39], [40,41,42,43,44,45,46,47], [48,49,50,51,52,53,54,55], [56,57,58,59,60,61,62,63], [64,65,66,67,68,69,70,71], [72,73,74,75,76,77,78,79], [80,81,82,83,84,85,86,87], [88,89,90,91,92,93,94,95], [96,97,98,99,100,101,102,103], [104,105,106,107,108,109,110,111], [112,113,114,115,116,117,118,119], [120,121,122,123,124,125,126,127], [128,129,130,131,132,133,134,135], [136,137,138,139,140,141,142,143], [144,145,146,147,148,149,150,151], [152,153,154,155,156,157,158,159], [160,161,162,163,164,165,166,167], [168,169,170,171,172,173,174,175], [176,177,178,179,180,181,182,183], [184,185,186,187,188,189,190,191], [192,193,194,195,196,197,198,199]]) == [56, 51, 53, 55, 54, 54, 54, 56]\nassert     max_length([[1,2,3,4,5], [6,7,8,9,10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30]]) == [26, 30]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_length([[1, 2], [3, 4, 5]]) == [1, 3]\nassert     max_length([[1, 2], [3, 4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\ndef merge(list1, list2):\n    '''\n    Write a function to merge two lists in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_length([['a', 'b', 'c'], ['d'], ['e', 'f'], ['g']]) == 3\nassert     max_length([['a', 'b', 'c'], ['d', 'e', 'f'], ['g']]) == 2\nassert     max_length([['a', 'b', 'c'], ['d', 'e'], ['g']]) == 3\nassert     max_length([['a', 'b', 'c', 'd'], ['e', 'f'], ['g']]) == 3\nassert     max_length([['a', 'b', 'c'], ['d', 'e'], ['g'], ['h', 'i', 'j']]) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_length([[1, 2], [3, 4, 5], [9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [9, 8, 7]\nassert     max_length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert     max_length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     max_length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_length([[1,2,3],[2,2,3],[1,2,3]]) == 3\nassert     max_length([[1,2,3],[2,2],[1,2,3]]) == 2\nassert     max_length([[1,2,3],[2,2]]) == 2\nassert     max_length([[1],[2],[3]]) == 1\nassert     max_length([[1,2,3],[2,2,3]]) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [['a', 'b', 'c'], ['d'], ['e', 'f', 'g']]     == max_length([['a', 'b', 'c'], ['d'], ['e', 'f', 'g']])\nassert     [['a', 'b', 'c', 'd'], ['e'], ['f', 'g']]     == max_length([['a', 'b', 'c', 'd'], ['e'], ['f', 'g']])\nassert     [['a', 'b'], ['c', 'd'], ['e', 'f'], ['g']]     == max_length([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g']])\nassert     [['a'], ['b', 'c'], ['d', 'e'], ['f', 'g'], ['h']]     == max_length([['a'], ['b', 'c'], ['d', 'e'], ['f', 'g'], ['h']])\nassert     [['a', 'b', 'c', 'd'], ['e'], ['f', 'g']]     == max_length([['a', 'b', 'c', 'd'], ['e'], ['f', 'g']])\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(3,3) == 4\nassert     count_no_of_ways(5,5) == 24\nassert     count_no_of_ways(6,4) == 44\nassert     count_no_of_ways(7,5) == 76\nassert     count_no_of_ways(7,6) == 96\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(4, 3) == 5\nassert     count_no_of_ways(5, 2) == 11\nassert     count_no_of_ways(6, 2) == 33\nassert     count_no_of_ways(7, 2) == 55\nassert     count_no_of_ways(8, 2) == 91\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_no_of_ways(2, 1) == 3\nassert     count_no_of_ways(2, 2) == 5\nassert     count_no_of_ways(5, 3) == 25\nassert     count_no_of_ways(4, 4) == 54\nassert     count_no_of_ways(4, 5) == 254\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_no_of_ways(4, 3) == 2\nassert     count_no_of_ways(6, 2) == 6\nassert     count_no_of_ways(3, 2) == 0\nassert     count_no_of_ways(6, 3) == 9\nassert     count_no_of_ways(8, 5) == 245\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_no_of_ways(5, 3) == 1\nassert     count_no_of_ways(3, 2) == 0\nassert     count_no_of_ways(2, 2) == 1\nassert     count_no_of_ways(2, 3) == 0\nassert     count_no_of_ways(5, 3) == 2\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_no_of_ways(2, 2) == 2\nassert     count_no_of_ways(2, 3) == 3\nassert     count_no_of_ways(4, 3) == 7\nassert     count_no_of_ways(5, 3) == 13\nassert     count_no_of_ways(10, 5) == 830\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_no_of_ways(5, 2)     ==  12\nassert     count_no_of_ways(2, 1)     ==  2\nassert     count_no_of_ways(3, 1)     ==  6\nassert     count_no_of_ways(10, 3)     ==  467360\nassert     count_no_of_ways(10, 4)     ==  0\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(2, 2) == 2\nassert     count_no_of_ways(3, 2) == 3\nassert     count_no_of_ways(3, 3) == 6\nassert     count_no_of_ways(6, 2) == 10\nassert     count_no_of_ways(7, 3) == 22\n"
    },
    {
        "number": 291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(4,3) == 4\nassert     count_no_of_ways(5,3) == 10\nassert     count_no_of_ways(5,4) == 6\nassert     count_no_of_ways(2,2) == 0\nassert     count_no_of_ways(2,3) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find(9,4) == 0\nassert     find(9,6) == 0\nassert     find(9,3) == 1\nassert     find(9,2) == 1\nassert     find(9,1) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find(20,7) == 2\nassert     find(15,5) == 3\nassert     find(4,4) == 1\nassert     find(13,2) == 7\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find(3,4) == 1\nassert     find(9,4) == 3\nassert     find(7,4) == 2\nassert     find(12,3) == 4\nassert     find(3,5) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find(11,10) == 1\nassert     find(11,11) == 1\nassert     find(10,11) == 0\nassert     find(11,10.5) == 1\nassert     find(11.5,10) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find(2,7) == 2\nassert     find(3,6) == 0\nassert     find(2,3) == 0\nassert     find(4,3) == 1\nassert     find(0,3) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find(10,8) == 2\nassert     find(10,9) == 3\nassert     find(10,10) == 1\nassert     find(15,8) == 2\nassert     find(15,9) == 3\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find(5,3) == 1\nassert     find(5,6) == 1\nassert     find(5,5) == 0\nassert     find(6,5) == 1\nassert     find(10,5) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (find(3,5) == 1)\nassert     (find(3,3) == 0)\nassert     (find(5,3) == 2)\nassert     (find(10,3) == 3)\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find(12,4) == 2\nassert     find(1,4) == 0\nassert     find(25,5) == 5\nassert     find(12,4) == 2\nassert     find(28,3) == 4\n"
    },
    {
        "number": 292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find(50,50)==1\nassert     find(0,50)==0\nassert     find(50,50)==1\nassert     find(50,51)==0\nassert     find(50,52)==0\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (math.sqrt(3) / 2)**2 == 1.0\nassert     (math.sqrt(2) / 2)**2 == 0.5\nassert     math.sqrt(1)**2 == 0.0\nassert     math.sqrt(0)**2 == 0.0\nassert     (math.sqrt(3) / 2)**2 == 1.0\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(3,5) == 0\nassert     otherside_rightangle(5,4) == 0\nassert     otherside_rightangle(5,5) == 3\nassert     otherside_rightangle(9,6) == 12\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert      otherside_rightangle(3,4) == 5\nassert      otherside_rightangle(6,8) == 10\nassert      otherside_rightangle(5,10) == 15\nassert      otherside_rightangle(8,5) == 12\nassert      otherside_rightangle(10,7) == 14\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(10,10) == 25\nassert     otherside_rightangle(10,15) == 25\nassert     otherside_rightangle(9,8) == 12\nassert     otherside_rightangle(10,15) == 25\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(5,12) == 13\nassert     otherside_rightangle(8,12) == 24\n\ndef otherside_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(3,4) == 6\nassert     otherside_rightangle(7,9) == 37\nassert     otherside_rightangle(10,11) == 22\nassert     otherside_rightangle(8,9) == 14\nassert     otherside_rightangle(10,2) == 20\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(4,6) == 6\nassert     otherside_rightangle(4,5) == 5\nassert     otherside_rightangle(5,4) == 4\nassert     otherside_rightangle(5,3) == 3\nassert     otherside_rightangle(1,1) == 1\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(10,20) == 80\nassert     otherside_rightangle(0,10) == 10\nassert     otherside_rightangle(100,0) == 100\nassert     otherside_rightangle(1,1) == 1\nassert     otherside_rightangle(1,2) == 2\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     otherside_rightangle(4,8) == 24, \"4,8 should return 24\"\nassert     otherside_rightangle(6,12) == 36, \"6,12 should return 36\"\nassert     otherside_rightangle(9,12) == 45, \"9,12 should return 45\"\nassert     otherside_rightangle(6,6) == 36, \"6,6 should return 36\"\nassert     otherside_rightangle(6,6) == 36, \"6,6 should return 36\"\n"
    },
    {
        "number": 293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (otherside_rightangle(2,1) == \"3.0\")\nassert     (otherside_rightangle(3,4) == \"5.0\")\nassert     (otherside_rightangle(5,12) == \"13.0\")\nassert     (otherside_rightangle(10,5) == \"15.0\")\nassert     (otherside_rightangle(15,5) == \"17.0\")\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         max_val([4, 1,'string', [6,7], 4.5]) == 4\nassert         max_val([['a', 'b', ['c', 'd', 'e'], 8],'string', 3]) == 8\nassert         max_val([[1,2,3],1,4]) == 4\nassert         max_val([1,2,[3,4],5]) == 5\nassert         max_val([1,[2,3],4]) == 4\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_val([1,2,3,4,5]) == 5\nassert     max_val([1,2,3,4,'a']) == 'a'\nassert     max_val([[1,2,3], [4,5,6,7,8,9]]) == 9\nassert     max_val([['a','b'], ['c','d'], ['e','f']]) == 'f'\nassert     max_val([[1,2,3], [4,5,'a',7,8,9], [6,7,8,9,10,11,12]]) == 11\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_val([3,5,8,9,3,5,8,9,3,5,8,9]) == 9\nassert     max_val([3,5,8,9,3,5,8,9,3,5,8,9,1]) == 9\nassert     max_val([3,5,8,9,3,5,8,9,3,5,8,9,0]) == 9\nassert     max_val([3,5,8,9,3,5,8,9,3,5,8,9,0,9]) == 9\nassert     max_val([3,5,8,9,3,5,8,9,3,5,8,9,0,9,9]) == 9\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_val([2, 'a', 4, 'c']) == 4\nassert     max_val([3, 'b', 4, 'd']) == 'b'\nassert     max_val([3, 4, 5, 6, 7, 8, 9, 'a']) == 9\nassert     max_val(['a', 2, 3, 4, 5, 6, 7, 8, 'a']) == 'a'\nassert     max_val(['a', 2, 'b', 4, 'c', 6, 'd', 'a', 8, 'a']) == 8\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_val([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_val([1,2,3,4]) == 4\nassert     max_val([5,6,7,8]) == 8\nassert     max_val([9,8,7,6,5,4,3,2,1]) == 9\nassert     max_val([0,1,2,3]) == 3\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_val( [1,2,3,4,5] ) == 5\nassert     max_val( [{'a':1,'b':2},{'b':3,'a':5}] ) == {'a':5,'b':3}\nassert     max_val( [{'a':1,'b':2},{'b':3,'a':5}] ) == {'a':5,'b':3}\nassert     max_val( [{'a':1,'b':2},{'a':3,'b':5}] ) == {'a':3,'b':5}\nassert     max_val( [{'a':1,'b':2},{'b':3,'a':5}] ) == {'a':5,'b':3}\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_val([3,4,'abc',[2,3],{'a':1}])==4\nassert max_val([-1,-2,-3,{'a':1}])=={'a':1}\nassert max_val([])==None\nassert max_val([[]])==[]\nassert max_val([[[]]])==[]\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_val([1,2,3,'a',4,5,'c']) == 'a'\nassert     max_val([1,2,3,'a',4,5,'c', 'b']) == 'c'\nassert     max_val([1,2,'a','b','c']) == 'c'\nassert     max_val([1,2,'a','b','c',0]) == 0\nassert     max_val([1,2,3,'a',4,5,'c', 'b',9,8,7,6,5,4,3,2,1]) == 9\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_val([5, 3, 1, 6, 4]) == 6\nassert     max_val([9, 3, 1, 6, 4]) == 9\nassert     max_val([4, 5, -2, 7, 3]) == 7\nassert     max_val([]) == None\nassert     max_val([7, 'Hello', 2.5, 9, 'yes']) == 9\n"
    },
    {
        "number": 294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_val([1,2,3,4,5,6,7,8,9]) == 8\nassert     max_val([1,2,3,4,5,'a',7,8,9]) == 9\nassert     max_val([1,2,3,4,5,6,7,8,'a']) == 8\nassert     max_val([1,2,3,4,5,6,7,8,9, 'a']) == 'a'\nassert     max_val([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(1) == 1\nassert     sum_div(2) == 1\nassert     sum_div(3) == 2\nassert     sum_div(4) == 3\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_div(10) ==    1+2+5\nassert     sum_div(11) ==     1+11\nassert     sum_div(12) ==     1+2+3+4+6+12\nassert     sum_div(100) ==     1+2+4+5+10+20+25+50+100\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_div(1) == 0\nassert     sum_div(2) == 1\nassert     sum_div(5) == 0\nassert     sum_div(12) == 2\nassert     sum_div(36) == 4\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(4) ==     6\nassert     sum_div(6) == 12\nassert     sum_div(27) == 108\nassert     sum_div(36) == 144\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_div(12) == 25, \"sum_div(12) is not 25\"\nassert     sum_div(27) == 78, \"sum_div(27) is not 78\"\nassert     sum_div(13) == 29, \"sum_div(13) is not 29\"\nassert     sum_div(11) == 19, \"sum_div(11) is not 19\"\nassert     sum_div(21) == 35, \"sum_div(21) is not 35\"\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(1) == 0\nassert     sum_div(2) == 1\nassert     sum_div(6) == 6\nassert     sum_div(36) == 36\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_div(3) ==     6\nassert     sum_div(5) ==     10\nassert     sum_div(10) ==     25\nassert     sum_div(15) ==     35\nassert     sum_div(20) ==     70\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_div(10) == 18\nassert     sum_div(12) == 22\nassert     sum_div(100) == 168\n\ndef find_prime(number):\n    '''\n    Write a function to return the first n prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_div(6) == 28\nassert     sum_div(10) == 22\nassert     sum_div(100) == 546\nassert     sum_div(1000) == 2520\nassert     sum_div(1) == 0\n"
    },
    {
        "number": 295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([1, 2, 3, 4, 5])     == 0\nassert     get_Inv_Count([5, 4, 3, 2, 1])     == 4\nassert     get_Inv_Count([5, 4, 3, 2, 1, 0])     == 5\nassert     get_Inv_Count([0, 1, 2, 3, 4, 5])     == 0\nassert     get_Inv_Count([5, 4, 3, 2, 1, 0])     == 5\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([1, 3, 5, 2, 4, 6]) == 5\nassert     get_Inv_Count([1, 1, 1, 1, 1]) == 0\nassert     get_Inv_Count([1, 2, 3, 4, 5]) == 0\n\n\n\ndef get_Inv_Count_W(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([1,2,3]) == 0\nassert     get_Inv_Count([3,2,1]) == 2\nassert     get_Inv_Count([1,1,1]) == 0\nassert     get_Inv_Count([4,1,2,3,5,6,7]) == 3\nassert     get_Inv_Count([1,2,3,4,5,6,7]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([1,2,3,4,5]) == 0\nassert     get_Inv_Count([2,1,3,5,4]) == 3\nassert     get_Inv_Count([3,5,4,1,2]) == 1\nassert     get_Inv_Count([2,4,5,1,3]) == 2\nassert     get_Inv_Count([1,5,3,4,2]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_Inv_Count( [1, 2, 3] ) == 0\nassert     get_Inv_Count( [2, 1, 3] ) == 1\nassert     get_Inv_Count( [1, 2, 3, 4] ) == 0\nassert     get_Inv_Count( [2, 1, 3, 4] ) == 1\nassert     get_Inv_Count( [1, 2, 3, 4, 5] ) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_Inv_Count([1,2,3,4]) == 0\nassert     get_Inv_Count([1,3,2,4]) == 1\nassert     get_Inv_Count([1,3,4,2]) == 2\nassert     get_Inv_Count([1,2,4,3]) == 2\nassert     get_Inv_Count([3,1,2,4]) == 2\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_Inv_Count([3,2,1,5,4,6,0]) == 3\nassert     get_Inv_Count([6,5,4,3,2,1,0]) == 3\nassert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([1]) == 0\nassert     get_Inv_Count([1,1]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([2, 3, 4, 5, 6]) == 0\nassert     get_Inv_Count([2, 3, 3, 5, 6]) == 2\nassert     get_Inv_Count([2, 3, 5, 5, 6]) == 3\nassert     get_Inv_Count([5, 5, 5, 5, 5]) == 0\nassert     get_Inv_Count([]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4, [5, 6], 7] == flatten_list([1, [2, 3, [4, [5, 6], 7]]])\nassert     [1] == flatten_list([1])\nassert     [1] == flatten_list([1, []])\n\ndef flatten_dict(d, result=None, parents=[], key_so_far='', separator=':'):\n    '''\n    Write a function to flatten a given nested dictionary structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     flatten_list([1,[2,3],4]) == [1,2,3,4]\nassert     flatten_list([[1,2],[3,4]]) == [1,2,3,4]\nassert     flatten_list([[[1],[2]],3]) == [1,2,3]\nassert     flatten_list([]) == []\n\ndef flatten_list2(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flatten_list([]) == []\nassert     flatten_list([1, 2, 3, [4, 5]]) == [1, 2, 3, 4, 5]\nassert     flatten_list([1, 2, [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     flatten_list([1, 2, 3, [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]\nassert     flatten_list([1, [2, 3, [4, 5, [6, [7, 8]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4], \"Error\"\nassert     flatten_list([]) == [], \"Error\"\nassert     flatten_list([[1, [2, 3], 4], [5, 6]]) == [1, 2, 3, 4, 5, 6], \"Error\"\nassert     flatten_list([[[2]], [4, [5, [6, 7]]], 8]) == [2, 4, 5, 6, 7, 8], \"Error\"\n\ndef merge_two_dicts(dict1, dict2):\n    '''\n    Given two dicts, merge them into a new dict as a shallow copy.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flatten_list([[1,'a',['cat'],2],[[[3]],'dog'],4,5])\n        == [1, 'a', 'cat', 2, 'dog', 4, 5]\nassert     flatten_list([[1,2],[[3]],4,5])\n        == [1, 2, 3, 4, 5]\nassert     flatten_list([[]]) == []\nassert     flatten_list([[],[[]]]) == []\nassert     flatten_list([[],[[],[[]]]]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flatten_list([]) == []\nassert     flatten_list([1,2,3]) == [1,2,3]\nassert     flatten_list([1,[2,3]]) == [1,2,3]\nassert     flatten_list([1,[2,3],4]) == [1,2,3,4]\nassert     flatten_list([1,[2,3],4,[5,6]]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flatten_list([[1,'a',['cat'],2],[[[3]],'dog'],4,5]) == [1,'a',['cat'],2,3,'dog',4,5]\nassert flatten_list([[1,2],3,[4,[5,6,7],8,[9,10]]]) == [1,2,3,4,5,6,7,8,9,10]\nassert flatten_list([1,2,3]) == [1,2,3]\nassert flatten_list([]) == []\nassert flatten_list([[[]]]) == [0]\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1,2,3] == flatten_list([1,[2,3],[4]])\nassert     [1] == flatten_list([1])\nassert     [1,2,3,4,5] == flatten_list([[1,2,3],4,5])\n"
    },
    {
        "number": 297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1, 2, 3] == flatten_list([[1, 2, 3], [4, 5]])\nassert     [1, 2, 3, 4, 5] == flatten_list([[1, [2, 3], 4, 5]])\nassert     [[1, [2, 3], 4, 5], 6] == flatten_list([[1, [2, 3], 4, 5], 6])\nassert     [] == flatten_list([])\n\n\ndef flatten_list_2(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return reduce(lambda x,y:x+y, list1, [])\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_aggregate([(1,2), (4,5), (6,7), (8,9)]) == 13\nassert     max_aggregate([(3,4), (5,6), (7,8), (9,10)]) == 19\nassert     max_aggregate([(2,3), (4,5), (6,7), (8,9)]) == 15\nassert     max_aggregate([(1,2), (4,5), (6,7), (8,9), (5,6)]) == 19\nassert     max_aggregate([(1,2), (4,5), (6,7), (8,9), (7,8)]) == 19\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_aggregate([(1,2), (2,1), (3,2), (4,3), (5,5)]) == [1,2,3,5]\nassert max_aggregate([(1,2), (2,1), (3,2), (4,3)]) == [1,2,3]\nassert max_aggregate([(1,2), (2,1), (3,3), (4,3)]) == [1,3,3]\nassert max_aggregate([(1,2), (2,1), (3,3), (4,3), (5,4)]) == [1,3,4]\nassert max_aggregate([(1,2), (2,1), (3,3), (4,3), (5,4), (6,5)]) == [1,3,4,5]\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_aggregate([(1,2,3,4,5,6,7,8,9)]) == 15\nassert     max_aggregate([(1,2,3,4,5,6,7,8,9),(10,11,12,13,14,15,16,17,18)]) == 21\nassert     max_aggregate([(1,2,3,4,5,6,7,8,9),(10,11,12,13,14,15,16,17,18),(19,20,21,22,23,24,25,26,27)]) == 26\nassert     max_aggregate([(1,2,3,4,5,6,7,8,9),(10,11,12,13,14,15,16,17,18),(19,20,21,22,23,24,25,26,27),(28,29,30,31,32,33,34,35,36)]) == 36\nassert     max_aggregate([(1,2,3,4,5,6,7,8,9),(10,11,12,13,14,15,16,17,18),(19,20,21,22,23,24,25,26,27),(28,29,30,31,32,33,34,35,36),(37,38,39,40,41,42,43,44,45)]) == 45\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_aggregate([(1, 2), (3, 4), (5, 6)]) == 5\nassert     max_aggregate([(1, 2), (3, 4), (5, 7), (8, 9)]) == 8\nassert     max_aggregate([(1, 1), (2, 1), (3, 1)]) == 3\nassert     max_aggregate([(1, 2), (3, 4)]) == 3\nassert     max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]) == 8\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef test_max_aggregate():\n    test_data = [\n        (((1,1),(2,1),(2,2),(3,3),(4,2),(5,3)),(5,3)),\n        (((1,1),(2,1),(2,2),(3,3),(4,2),(5,3)),(4,2)),\n        (((1,1),(2,1),(2,2),(3,3),(4,2),(5,3)),(2,1)),\n        (((1,1),(2,1),(2,2),(3,3),(4,2),(5,3)),(3,3)),\n        (((1,1),(2,1),(2,2),(3,3),(4,2),(5,3)),(5,3)),\n    ]\n    for a,b in test_data:\n        assert max_aggregate(a) == b\n\ndef is_anagram(s1,s2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_aggregate([(1,3), (2,5), (0,2)]) == 5\nassert     max_aggregate([(0,2), (1,4), (2,7)]) == 7\nassert     max_aggregate([(1,2), (2,3), (3,4)]) == 4\nassert     max_aggregate([(0,3), (1,2), (2,4), (3,5)]) == 5\nassert     max_aggregate([(1,4), (2,5), (0,1), (3,6)]) == 6\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_aggregate([(5, 9, 3), (8, 9, 5), (5, 9, 9), (8, 9, 4), (4, 9, 9)]) == (5,9,9)\nassert     max_aggregate([(5, 9, 4), (8, 9, 5), (5, 9, 9), (8, 9, 4), (4, 9, 9)]) == (8, 9, 9)\nassert     max_aggregate([(5, 9, 4), (8, 9, 5), (5, 9, 9), (8, 9, 4), (4, 9, 9)]) == (5,9,9)\nassert     max_aggregate([(5, 9, 4), (8, 9, 5), (5, 9, 9), (8, 9, 4), (4, 9, 9)]) == (5,9,9)\nassert     max_aggregate([(5, 9, 4), (8, 9, 5), (5, 9, 9), (8, 9, 4), (4, 9, 9)]) == (5,9,9)\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_aggregate([(2,5,1),(1,5,0),(1,2,0),(1,1,0)]) == 8\nassert     max_aggregate([(2,5,1),(1,5,0),(1,1,0),(1,0,0)]) == 6\n\ndef is_end(stdata):\n    '''\n    Write a function to check whether a state is end state.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n    def max_aggregate(stdata):\n    def aggregate(stdata):\n    def get_max_aggregate(stdata):\n    # Your code here\n    # You should return a tuple of the max aggregate and the max tuple\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_aggregate([(1,2),(3,4)]) == 4\nassert     max_aggregate([(2,2),(1,1)]) == 2\nassert     max_aggregate([(3,3),(2,2)]) == 3\nassert     max_aggregate([(1,2),(2,2)]) == 2\nassert     max_aggregate([(1,2),(2,2),(1,3)]) == 2\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 4\nassert     count_binary_seq(3) == 8\nassert     count_binary_seq(4) == 16\nassert     count_binary_seq(5) == 32\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_binary_seq(2) == 3\nassert     count_binary_seq(5) == 10\nassert     count_binary_seq(3) == 3\nassert     count_binary_seq(0) == 1\nassert     count_binary_seq(1) == 2\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 6\nassert     count_binary_seq(4) == 10\nassert     count_binary_seq(5) == 15\nassert     count_binary_seq(6) == 24\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_binary_seq(2) == 10\nassert     count_binary_seq(3) == 37\nassert     count_binary_seq(4) == 80\nassert     count_binary_seq(5) == 125\nassert     count_binary_seq(6) == 174\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef count_binary_strings(n): \n    '''\n    Write a function to find the count of all binary strings of length 2n such that each string contains the same number of 1s and 0s.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_binary_seq(0) == 1\nassert     count_binary_seq(1) == 2\nassert     count_binary_seq(2) == 5\nassert     count_binary_seq(3) == 11\nassert     count_binary_seq(4) == 48\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 4\nassert     count_binary_seq(4) == 16\nassert     count_binary_seq(5) == 256\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_binary_seq(4)     == 1\nassert     count_binary_seq(8)     == 1\nassert     count_binary_seq(5)    == 2\nassert     count_binary_seq(5)    == 2\nassert     count_binary_seq(7)     == 1\n"
    },
    {
        "number": 300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({\"key\":\"value\"}) == 1\nassert     dict_depth({\"key\": {\"key2\": \"value\"}}) == 2\nassert     dict_depth({\"key\": {\"key2\": {\"key3\": \"value\"}}}) == 3\nassert     dict_depth({\"key\": {\"key2\": {\"key3\": {\"key4\": \"value\"}}}}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a': 1}) == 1\nassert     dict_depth({'a': {'b': {'c': {'d': 1}}}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 'j'}}}}}}, 'z': 'k'}}) == 3\nassert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 'j'}}}}}}, 'z': 'k'}}) == 3\nassert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 'j'}}}, 'z': 'k'}}}}) == 3\nassert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 'j', 'z': 'k'}}}}, 'z': 'k'}}}}) == 3\nassert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 'j', 'z': 'k'}}}}, 'z': 'k'}}}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         dict_depth({'key1': 1, 'key2': {'key3': 1, 'key4': {'key5': 4, 'key6': {'key7': 8, 'key8': {'key9': {'key10': 12}}}}}}) == 4\nassert         dict_depth({'key1': 1, 'key2': {'key3': 1, 'key4': {'key5': 4, 'key6': {'key7': 8, 'key8': [{'key9': [{'key10': 12}]}]}]}}}) == 3\nassert         dict_depth({'key1': 1, 'key2': [{'key3': 1, 'key4': [{'key5': 4, 'key6': [{'key7': 8, 'key8': [{'key9': [{'key10': 12}]}]}]}]}]}) == 2\nassert         dict_depth({'key1': 1, 'key2': [{'key3': 1, 'key4': {'key5': 4, 'key6': {'key7': 8, 'key8': [{'key9': [{'key10': 12}]}]}]}}]}) == 1\nassert         dict_depth({'key1': 1, 'key2': {'key3': 1, 'key4': {'key5': 4, 'key6': {'key7': 8, 'key8': [{'key9': [{'key10': 12}]}]}]}}}) == 1\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': 1}}}}}}}}, 'a': 2}}) == 3\nassert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': 1}}}}, 'a': 2}}}}, 'a': 2}}) == 3\nassert     dict_depth({'a':1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': 1}}}}, 'a': 2}}}, 'a': 2}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': {'e': 4, 'f': 5, 'g': {'h': {'i': 6}}}}}    == 3\nassert     dict_depth({\"a\": 1, \"b\": {\"c\": {\"d\": {\"e\": {\"f\": {\"g\": {\"h\": {\"i\": \"j\"}}}}}}, \"r\": {}, \"s\": {}}, \"u\": {}, \"v\": {}}) == 5\nassert     dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 'j'}}}}}}}, 'r': {},'s': {}}) == 5\nassert     dict_depth({'a': 1, 'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': 'j'}}}}}}}, 'r': {},'s': {'t': {}}}) == 5\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({\"a\": {}}) == 1\nassert     dict_depth({\"a\": {'b': {}}}) == 2\nassert     dict_depth({\"a\": {'b': {'c': {}}}}) == 3\nassert     dict_depth({\"a\": {'b': {'c': {'d': {}}}}}) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef dict_keys(d):\n    '''\n    Write a function to find all the keys in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 4\nassert     dict_depth({'key1': {'key2': {'key3': {'key4': {'key5': {'key6': {}}}}}}}) == 6\nassert     dict_depth(dict(key1=dict(key2=dict(key3=dict(key4=dict(key5=dict(key6=dict())))))), 4) == 5\nassert     dict_depth(dict(key1=dict(key2=dict(key3=dict(key4=dict(key5=dict(key6=dict())))))), 4) == 5\n"
    },
    {
        "number": 301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a':1,'b':2,'c':3}) == 2\nassert     dict_depth({'a':1,'b':2,'c':3,'d':{'e':'f'}}) == 4\nassert     dict_depth({'a':1,'b':2,'c':3,'d':{'e':['f', 'g']}}) == 4\n\ndef dict_depth_2(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    return 1 + max(dict_depth_2(v) for v in d.values())\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Element([5,6,7,8,9],4,0,0) == 9\nassert     find_Element([5,6,7,8,9],4,1,0) == 7\nassert     find_Element([5,6,7,8,9],4,2,0) == 6\nassert     find_Element([5,6,7,8,9],4,3,0) == 8\nassert     find_Element([5,6,7,8,9],4,4,0) == 5\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Element([1,3,4,5,6,7,8], [(2,4),(5,7)], [2,4,5,7,6,8], 0) == 3\nassert     find_Element([1,3,4,5,6,7,8], [(2,4),(5,7)], [2,4,5,7,6,8], 4) == 5\nassert     find_Element([1,3,4,5,6,7,8], [(2,4),(5,7)], [2,4,5,7,6,8], 5) == 6\nassert     find_Element([1,3,4,5,6,7,8], [(2,4),(5,7)], [2,4,5,7,6,8], 6) == 7\nassert     find_Element([1,3,4,5,6,7,8], [(2,4),(5,7)], [2,4,5,7,6,8], 7) == 8\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Element([1,2,3,4,5],[2,3,4,5,6,7,8,9,10],[2,2,3,4,5,6,7,8,9,10],10) == 10\nassert     find_Element([1,2,3,4,5],[2,3,4,5,6,7,8,9,10],[2,2,3,4,5,6,7,8,9,10],3) == 3\nassert     find_Element([1,2,3,4,5],[2,3,4,5,6,7,8,9,10],[2,2,3,4,5,6,7,8,9,10],2) == 2\nassert     find_Element([1,2,3,4,5],[2,3,4,5,6,7,8,9,10],[2,2,3,4,5,6,7,8,9,10],1) == 1\nassert     find_Element([1,2,3,4,5],[2,3,4,5,6,7,8,9,10],[2,2,3,4,5,6,7,8,9,10],0) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Element([2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4], [1, 1, 2, 2, 1, 1, 2, 2, 1], 1) == 8\nassert     find_Element([2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4], [1, 1, 2, 2, 1, 1, 2, 2, 1], 2) == 5\nassert     find_Element([2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4], [1, 1, 2, 2, 1, 1, 2, 2, 1], 3) == 2\nassert     find_Element([2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4], [1, 1, 2, 2, 1, 1, 2, 2, 1], 4) == 1\nassert     find_Element([2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4], [1, 1, 2, 2, 1, 1, 2, 2, 1], 5) == 10\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Element([0,1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8,9],0) == 4\nassert     find_Element([0,1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8,9],10) == -1\nassert     find_Element([0,1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8,9],11) == -1\nassert     find_Element([0,1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8,9],12) == 8\nassert     find_Element([0,1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8,9],13) == 9\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Element([1, 2, 3, 4, 5, 6, 7, 8, 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], 3, 2) == [2, 3, 5, 7, 8, 9, 1, 2, 3, 4]\nassert     find_Element([1, 2, 3, 4, 5, 6, 7, 8, 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], 2, 2) == [2, 3, 4, 5, 6, 7, 8, 9, 1, 2]\nassert     find_Element([1, 2, 3, 4, 5, 6, 7, 8, 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], 4, 2) == [2, 3, 4, 5, 6, 7, 8, 9, 1, 2]\nassert     find_Element([1, 2, 3, 4, 5, 6, 7, 8, 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], 1, 2) == [2, 3, 4, 5, 6, 7, 8, 9, 1, 2]\nassert     find_Element([1, 2, 3, 4, 5, 6, 7, 8, 9], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], 0, 2) == [2, 3, 4, 5, 6, 7, 8, 9, 1, 2]\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Element(['A','B','C','D'],[(1,4),(1,3),(1,2),(2,1)],[0,1,2,3],0) == 'A'\nassert     find_Element(['A','B','C','D'],[(1,4),(1,3),(1,2),(2,1)],[0,1,2,3],1) == 'B'\nassert     find_Element(['A','B','C','D'],[(1,4),(1,3),(1,2),(2,1)],[0,1,2,3],2) == 'C'\nassert     find_Element(['A','B','C','D'],[(1,4),(1,3),(1,2),(2,1)],[0,1,2,3],3) == 'D'"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8,9,10],    [3,5,1,7,10,9,8,6,4,2],    [0,2,1,0,1,0,0,0,1,0], 2) == 9\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],    [3,5,1,7,10,9,8,6,4,2],    [0,2,1,0,1,0,0,0,1,0], 1) == 7\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],    [3,5,1,7,10,9,8,6,4,2],    [0,2,1,0,1,0,0,0,1,0], 10) == 1\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],    [3,5,1,7,10,9,8,6,4,2],    [0,2,1,0,1,0,0,0,1,0], 50) == 0\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8,9], 2, 4, 4) == 5\nassert     find_Element([1,2,3,4,5,6,7,8,9], 2, 4, 6) == 7\nassert     find_Element([1,2,3,4,5,6,7,8,9], 2, 4, 1) == 1\nassert     find_Element([1,2,3,4,5,6,7,8,9], 2, 4, 10) == -1\nassert     find_Element([1,2,3,4,5,6,7,8,9], 2, 4, 9) == -1\n"
    },
    {
        "number": 304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8,9,10],[[1,2,3],[3,5,7],[6,10]],[1,2,1,2,1,2,1,2,1,2],[3]) == 2\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[[1,2,3],[3,5,7],[6,10]],[1,2,1,2,1,2,1,2,1,2],[2]) == 4\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[[1,2,3],[3,5,7],[6,10]],[1,2,1,2,1,2,1,2,1,2],[2,2]) == 1\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[[1,2,3],[3,5,7],[6,10]],[1,2,1,2,1,2,1,2,1,2],[2,3]) == 8\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[[1,2,3],[3,5,7],[6,10]],[1,2,1,2,1,2,1,2,1,2],[2,4]) == 6\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     start_withp(['apple', 'pear', 'peach', 'papaya', 'grapefruit', 'raspberry', 'beetroot', 'fig', 'kiwi']) == ['pear', 'fig']\nassert     start_withp(['appl', 'apple', 'pear', 'peach', 'papaya', 'grapefruit', 'raspberry', 'beetroot', 'fig', 'kiwi']) == ['apple', 'fig']\nassert     start_withp(['1', 'pap', 'pear', 'peach', 'papaya', 'grapefruit', 'raspberry', 'beetroot', 'fig', 'kiwi']) == ['papaya', 'grapefruit']\nassert     start_withp(['1', 'appl', 'apple', 'pear', 'peach', 'papaya', 'grapefruit', 'raspberry', 'beetroot', 'fig', 'kiwi']) == ['apple', 'fig']\nassert     start_withp(['1', 'appl', 'apple', 'pear', 'peach', 'papaya', 'grapefruit', 'raspberry', 'beetroot', 'fig', 'kiwi']) == ['appl', 'fig']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     start_withp(['hello','goodbye','yes','Python']) == ['hello','goodbye']\nassert     start_withp(['hi','hello','python']) == ['hi','hello']\nassert     start_withp(['hello','python','bye']) == ['hello','bye']\nassert     start_withp(['hi','hello','python','p','hello']) == ['hello','p','hello']\nassert     start_withp(['hello','python']) == ['hello']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     start_withp(['wow','pizza']) == ['pizza']\nassert     start_withp(['pizza','xenia']) == ['pizza']\nassert     start_withp(['xenia','wow']) == ['xenia']\nassert     start_withp(['wow','wow']) == ['wow']\nassert     start_withp(['xenia','wow','wow']) == ['xenia','wow']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     start_withp(['reject', 'offer','request', 'purchase', 'app', 'email','store','security', 'access', 'camera','receive', 'text','mail', 'applicant', 'phone', 'help', 'feedback', 'tickets','setting', 'email', 'account', 'index', 'order','store', 'applicant', 'com','software','system', 'access', 'policy', 'personal', 'information', 'help','report', 'client', 'policy', 'work','system', 'update','store','service','secure', 'access', 'portal', 'office', 'view', 'applicant', 'access','solution','store', 'access','system','rest','site', 'access', 'applicant', 'information','service', 'client', 'access', 'application', 'access','system', 'work','system', 'access', 'access', 'user', 'portal','support','message', 'access','system','system', 'access', 'access', 'access','message','secure','system', 'access', 'data', 'user', 'client', 'applicant', 'information','message','send', 'access','system', 'access', 'portal', 'portal', 'access', 'application', 'data', 'access', 'data','system', 'access', 'client','system', 'access','system','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', 'access','system', "
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     start_withp(['step','pivot','pine','piped','piper','pineapple','pip','pine','ppin']) == ['pivot','pine']\nassert     start_withp(['deltas','del','delet','deleta','dela','delc','delca']) == ['deltas','del']\nassert     start_withp(['step','stem','stomp','stomped','stomper','stomping','stomp','stemmed','stemming','stem','stemp']) == ['stem','stemmed']\nassert     start_withp(['carp','car','ca','caerph','carped','carping','carps']) == ['carp','carped']\n\ndef count_occurences(text,character):\n    '''\n    Write a function to count the number of times a character occurs in a string.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     start_withp(['apple','peach','pera','papaya','peachs']) ==     ('apple','peach')\nassert     start_withp(['p','pq','pqp','pp']) ==     ('pq','pp')\nassert     start_withp(['pq','pp']) ==     None\nassert     start_withp(['p','pq']) ==     ('pq','p')\nassert     start_withp(['pp']) ==     ('pp','p')\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     start_withp(['apple','pear','grapes','banana','orange','cherry','peach'])==['pear','grapes']\nassert     start_withp(['apple','pear','grapes','banana','orange','cherry','peach','banana'])==['pear','grapes']\nassert     start_withp(['apple','pear','grapes','banana','orange','cherry','peach','banana','pear'])==['pear','grapes']\nassert     start_withp(['apple','pear','grapes','banana','orange','cherry','peach','peach'])==['pear','grapes']\nassert     start_withp(['apple','pear','grapes','banana','orange','cherry','peach','peach','pear'])==['pear','grapes']\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     start_withp(['hello', 'world','minimal']) == ['hello', 'world']\nassert start_withp(['hello', 'world', 'love']) == []\n\ndef sum_of_numbers(numbers):\n    '''\n    Write a function to return the sum of numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     start_withp(['apple', 'pear', 'cat', 'dog', 'banana', 'fish', 'orange']) == ('pear', 'banana')\nassert     start_withp(['tacos', 'chicken', 'cakes', 'vide','movie', 'lunch', 'dinner', 'breakfast','vegetable','meat', 'dairy', 'eggs']) == ('chicken', 'dairy')\nassert     start_withp(['basket', 'apple', 'pencil', 'cookie', 'pizza', 'cake', 'candy', 'candy', 'cheese']) == ('cookie', 'candy')\n\ndef count_occurence(s, sub):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     start_withp(['apple', 'peach', 'papaya', 'watermelon', 'banana', 'orange', 'grape']) == ['peach', 'banana']\nassert     start_withp(['my', 'name', 'is', 'jack','mcdonalds']) == ['my', 'name']\nassert     start_withp(['S1', 'S2', 'S3', 'S4']) == ['S1', 'S4']\nassert     start_withp(['S5', 'S6', 'S7', 'S8']) == ['S5', 'S8']\n\ndef remove_last_char(string):\n    '''\n    Write a function to remove the last character from a given string.\n    '''\n    pass\n"
    }
]