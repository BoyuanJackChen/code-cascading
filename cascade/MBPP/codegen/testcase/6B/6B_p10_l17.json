[
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     similar_elements(('a', 'b', 'c', 'd'),\n                          ('a', 'b', 'x', 'y')) == ('a', 'b')\nassert     similar_elements(('a', 'b'),\n                          ('b', 'c', 'd', 'e')) == ('b', 'd')\nassert     similar_elements(('a'),\n                          ('a')) == ('a', )\nassert     similar_elements(('b', 'c'),\n                          ('a')) == ()\nassert     similar_elements(('a', 'a'),\n                          ('a', 'a')) == ('a', )\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (similar_elements((\"Loretta\", \"Hudson\", \"Loretta\", \"Dee\", \"Loretta\", \"Aitken\", \"Loretta\", \"Aitken\", \"Loretta\", \"Hudson\", \"Dee\", \"Loretta\"), \n        (\"Loretta\", \"Hudson\", \"Loretta\", \"Dee\", \"Loretta\", \"Aitken\", \"Loretta\", \"Aitken\", \"Loretta\", \"Hudson\", \"Dee\", \"Loretta\")) == ['Loretta', 'Aitken', 'Hudson'])\nassert     (similar_elements((\"Jamaica\", \"Loretta\", \"Hudson\", \"Loretta\", \"Dee\", \"Loretta\", \"Aitken\", \"Loretta\", \"Aitken\", \"Loretta\", \"Hudson\", \"Dee\", \"Loretta\"), \n        (\"Jamaica\", \"Loretta\", \"Hudson\", \"Loretta\", \"Dee\", \"Loretta\", \"Aitken\", \"Loretta\", \"Aitken\", \"Loretta\", \"Hudson\", \"Dee\", \"Loretta\")) == ['Loretta', 'Hudson', 'Dee'])\nassert     (similar_elements((\"U.S.\", \"Aitken\", \"Loretta\", \"Hudson\", \"Loretta\", \"Dee\", \"Loretta\", \"Aitken\", \"Loretta\", \"Aitken\", \"Loretta\", \"Hudson\", \"Dee\", \"Loretta\"), \n        (\"U.S.\", \"Aitken\", \"Loretta\", \"Hudson\", \"Loretta\", \"Dee\", \"Loretta\", \"Aitken\", \"Loretta\", \"Aitken\", \"Loretta\", \"Hudson\", \"Dee\", \"Loretta\")) == ['Loretta', 'Aitken', 'Hudson'])\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     similar_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]\nassert     similar_elements([1, 2, 3, 4, 5], [1, 4, 7, 8, 9]) == [1, 4, 7]\nassert     similar_elements([1, 2, 3, 4, 5], [3, 4, 5, 7, 8]) == []\nassert     similar_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert     similar_elements([], []) == []\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     set(similar_elements(tup1, tup2)) == set(['a', 'b', 'c', 'd', 'e', 'f'])\nassert     set(similar_elements(tup1, tup2)) == set(['a', 'b', 'c', 'd', 'e', 'f'])\nassert     similar_elements(tup1, tup1) == set(['a', 'b', 'c', 'd', 'e', 'f'])\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == [2, 3, 4])\nassert     (similar_elements((2, 2, 3), (2, 3, 4)) == [2])\nassert     (similar_elements((2, 2, 3), (2, 2, 3)) == [2, 2])\nassert     (similar_elements((1, 2, 3), (1, 2, 3)) == [1, 2, 3])\nassert     (similar_elements((2, 1, 3), (1, 2, 3)) == [1, 2])\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     similar_elements((1,2,3),(1,2,3)) == True\nassert     similar_elements((1,2,3),(1,2,4)) == False\nassert     similar_elements((1,2,3),(1,5,6)) == False\n\n\n'''\n3.2.4.    Convert Minutes to Seconds\n    Write a function to convert minutes to seconds. You can assume that the input is a nonnegative integer.\n'''\ndef minutes_to_seconds(minutes):\n    '''\n    Write a function to convert minutes to seconds. You can assume that the input is a nonnegative integer.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     equal(similar_elements(('a', 'b', 'c'), ('a', 'b', 'c')), \n            'Both tuples have the same elements')\nassert     equal(similar_elements(('a', 'b', 'c'), ('b', 'a', 'c')),\n            'Both tuples have the same elements in different order')\nassert     equal(similar_elements(('a', 'b', 'c'), ('c', 'b', 'a')),\n            'Both tuples have the same elements but in different order')\nassert     equal(similar_elements(('a', 'b', 'c'), ('b', 'a', 'c', 'b')),\n            'Both tuples have the same elements but in different order')\nassert     equal(similar_elements(('a', 'a', 'a'), ('b', 'b', 'b')),\n            'Both tuples have the same elements but in different order')\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     similar_elements(([1,2,3,4], [1,3,5,7], [1,2,3,5,7], [1,2,3,4,5], [1,2,3,4,5,6]), ([1,2,3,4], [1,3,5,7], [1,2,4,5,6,7], [1,2,3,4,5,6,7])) == [1,3,4]\nassert     similar_elements(([1,2,3,4], [1,3,5,7], [1,2,3,5,7], [1,2,3,4,5], [1,2,3,4,5,6]), ([1,2,3,4], [1,3,5,7], [1,2,3,5,7], [1,2,3,4,5,6,7])) == [1,2,3,4,5]\nassert     similar_elements(([1,2,3,4], [1,3,5,7], [1,2,3,5,7], [1,2,3,4,5], [1,2,3,4,5,6]), ([1,2,3,4], [1,3,5,7], [1,2,3,5,7], [1,2,3,4,5,6,7])) == [1,2,3,4,5]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     similar_elements([1,2,3,4,5], [5,4,3,2,1]) == [5,4,3]\nassert     similar_elements([1,2,3,4,5], [5,4,2,1,3]) == [5,4]\nassert     similar_elements([1,2,3,4,5,6], [6,5,4,3,2,1]) == [6,5,4,3]\nassert     similar_elements([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_not_prime(2)\nassert     is_not_prime(3)\nassert     is_not_prime(5)\nassert     is_not_prime(7)\nassert     is_not_prime(11)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_not_prime(6) == False\nassert     is_not_prime(24) == False\nassert     is_not_prime(100) == True\nassert     is_not_prime(0) == True\nassert     is_not_prime(1) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_not_prime(29) is True\nassert     is_not_prime(31) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_not_prime(99) == False\nassert     is_not_prime(101) == False\nassert     is_not_prime(105) == False\nassert     is_not_prime(11) == False\nassert     is_not_prime(999) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_not_prime(13) == False\nassert     is_not_prime(23) == False\nassert     is_not_prime(17) == True\nassert     is_not_prime(31) == False\nassert     is_not_prime(79) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_not_prime(1) == False\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_not_prime(1) == True\nassert     is_not_prime(2) == True\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(5) == False\nassert     is_not_prime(7) == False\nassert     is_not_prime(11) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_not_prime(0)\nassert     is_not_prime(1)\nassert     is_not_prime(2)\nassert     is_not_prime(3)\nassert     is_not_prime(4)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_not_prime(11) == False\nassert     is_not_prime(41) == False\nassert     is_not_prime(93) == True\nassert     is_not_prime(97) == True\nassert     is_not_prime(99) == True\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hq.heapify([]).__len__() == 0\nassert     hq.heappush(hq.heapify([]),10).__len__() == 1\nassert     hq.heappush(hq.heapify([1]),9).__len__() == 2\nassert     hq.heappush(hq.heapify([1,2,3]),4).__len__() == 3\nassert     hq.heappush(hq.heapify([1,2,3,4]),5).__len__() == 4\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([5,2,3,2,1], 3)==[5,3,2]\nassert     heap_queue_largest([5,2,3,2,1], 2)==[5,2]\nassert     heap_queue_largest([],3)==[]\nassert     heap_queue_largest([],0)==[]\nassert     heap_queue_largest([1,2,3],1)==[1]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     heap_queue_largest([3,2,1,5,6,4],3)==[5,6,4]\nassert     heap_queue_largest([3,2,1,5,6,4],5)==[5,6,4,3,2]\nassert     heap_queue_largest([3,2,1,5,6,4],7)==[5,6,4,3,2,1]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],3)==[9,8,7]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],5)==[9,8,7,6,5]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hq.nlargest(3,[3,5,2,9,8,4,7,1]) == [9,8,7]\nassert     hq.nlargest(2,[3,5,2,9,8,4,7,1]) == [9,8]\nassert     hq.nlargest(1,[3,5,2,9,8,4,7,1]) == [9]\nassert     hq.nlargest(5,[3,5,2,9,8,4,7,1]) == [9,8,7,5,4]\nassert     hq.nlargest(10,[3,5,2,9,8,4,7,1]) == [9,8,7,5,4,3]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([3,2,1,5,4], 3) == [5,4,3]\nassert     heap_queue_largest([3,2,1,5,4], 2) == [5,4]\nassert     heap_queue_largest([3,2,1,5,4], 1) == [5]\nassert     heap_queue_largest([3,2,1,5,4], 0) == []\n\ndef heap_queue_largest_without_heapq(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hq.nlargest(2,[3,2,1]) == [3,2]\nassert     hq.nlargest(1,[3,2,1]) == [3]\nassert     hq.nlargest(0,[3,2,1]) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hq.nlargest([1, 2, 3, 4, 5], 2) == [5, 4]\nassert     hq.nlargest([1, 2, 3, 4, 5], 3) == [5, 4, 3]\nassert     hq.nlargest([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2]\nassert     hq.nlargest([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     hq.nlargest([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hq.heap_queue_largest([3,2,1,5,6,4], 2) == [6,5]\nassert     hq.heap_queue_largest([3,2,1,5,6,4], 5) == [6,5,4,3,2]\nassert     hq.heap_queue_largest([3,2,1,5,6,4], 0) == []\nassert     hq.heap_queue_largest([3,2,1,5,6,4], 10) == [6,5,4,3,2]\nassert     hq.heap_queue_largest([3,2,1,5,6,4], 6) == [6,5,4,3,2]\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [5,4,3,2,1] == heap_queue_largest([1,3,5,7,9,2,4,6,8,0],4)\nassert     [9,7,5,4,3,2,1,0] == heap_queue_largest([1,3,5,7,9,2,4,6,8,0],9)\nassert     [8,6,4,3,2,1,0] == heap_queue_largest([1,3,5,7,9,2,4,6,8,0],8)\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     heap_queue_largest([],5) == []\nassert     heap_queue_largest([1,2,3,4],5) == [4,3,2,1]\nassert     heap_queue_largest([1,2,3,4,5,6],5) == [6,5,4,3,2]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two (0) == False\nassert     is_Power_Of_Two (1) == True\nassert     is_Power_Of_Two (2) == False\nassert     is_Power_Of_Two (3) == True\nassert     is_Power_Of_Two (4) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(0) == False\nassert     is_Power_Of_Two(1) == False\nassert     is_Power_Of_Two(2) == False\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(4) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two(    2**1) == True,    \"Test case 1 failed\"\nassert     is_Power_Of_Two(    2**2) == False, \"Test case 2 failed\"\nassert     is_Power_Of_Two(    2**3) == False, \"Test case 3 failed\"\nassert     is_Power_Of_Two(    2**4) == True,    \"Test case 4 failed\"\nassert     is_Power_Of_Two(    2**5) == False, \"Test case 5 failed\"\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (is_Power_Of_Two(4, 8) == True)         , \"Test Case Failed\"     \nassert     (is_Power_Of_Two(4, 9) == False)     , \"Test Case Failed\"     \nassert     (is_Power_Of_Two(5, 5) == True)         , \"Test Case Failed\"     \nassert     (is_Power_Of_Two(10, 2) == True)         , \"Test Case Failed\"     \nassert     (is_Power_Of_Two(11, 2) == False)     , \"Test Case Failed\"     \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(8) == True\nassert     is_Power_Of_Two(9) == False\nassert     is_Power_Of_Two(128) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(64) == False\nassert     is_Power_Of_Two(65) == True\nassert     is_Power_Of_Two(14) == False\nassert     is_Power_Of_Two(1452) == True\nassert     is_Power_Of_Two(145215) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two (0) == True\nassert     is_Power_Of_Two (1) == False\nassert     is_Power_Of_Two (2) == True\nassert     is_Power_Of_Two (4) == False\nassert     is_Power_Of_Two (8) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(20,40) == True \nassert is_Power_Of_Two(0,0) == True \nassert is_Power_Of_Two(3,4) == False\nassert is_Power_Of_Two(5,20) == True\nassert is_Power_Of_Two(10,100) == True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(1) == True\nassert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(5) == True\nassert     is_Power_Of_Two(1024) == False\nassert     is_Power_Of_Two(32768) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two(4) == True\nassert     is_Power_Of_Two(16) == True\nassert     is_Power_Of_Two(2) == False\nassert     is_Power_Of_Two(2**4) == True\nassert     is_Power_Of_Two(2**15) == True\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef count_vowels(word):\n    '''\n    Write a function to count how many vowels a word has.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_char_long('Hi, I am a very long sentence') == ['Hi,', 'I', 'am', 'a','very', 'long','sentence']\nassert     find_char_long('Hi, I am a very long sentence') == ['Hi,', 'I', 'am', 'a','very', 'long','sentence']\nassert     find_char_long('Hi, I am a very long sentence') == ['Hi,', 'I', 'am', 'a','very', 'long','sentence']\nassert     find_char_long('Hi, I am a very long sentence') == ['Hi,', 'I', 'am', 'a','very', 'long','sentence']\nassert     find_char_long('Hi, I am a very long sentence') == ['Hi,', 'I', 'am', 'a','very', 'long','sentence']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_char_long('This is an apple') == []\nassert    find_char_long('This is an apple apple') == ['apple']\nassert     find_char_long('This is an a') == []\nassert     find_char_long('This is a t') == []\nassert     find_char_long('This is an aa aa aa') == ['aa']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_char_long('HellO, this is a long sentence') == ['long']\nassert     find_char_long('Hello, this is a long sentence') == ['long']\nassert     find_char_long('Hello, this is a long sentence and this is another') == ['long']\nassert     find_char_long('Hiiii') == []\nassert     find_char_long('Hiiii, this is a long sentence and this is another') == ['long']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_char_long('this is a test')    == ['is', 'test']\nassert     find_char_long('this is a')     == ['is', 'a']\nassert     find_char_long('a is a test')    == ['is', 'a', 'a', 'test']\nassert     find_char_long('this is')     == ['is', 'this']\nassert     find_char_long('a is')         == ['is', 'a']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_char_long('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ') == ['enim', 'est', 'in','sint', 'ut', 'illum', 'tempor', 'incididunt', 'ut', 'labore', 'et', 'dolore','mollit', 'anim', 'id', 'est', 'laboris', 'nisi', 'ullamco', 'laborum', 'occaecat', 'non', 'proident', 'commodo']\n\ndef find_char_space(text):\n    '''\n    Write a function to find all words which have only spaces between them.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_char_long('The quick brown fox jumps over the lazy dog.') == ['fox', 'dog', 'over', 'lazy']\nassert     find_char_long('I like cats, dogs and pigs.') == ['cats', 'pigs', 'dogs', 'I']\nassert     find_char_long('Cats and dogs are both cats.') == ['cats', 'cats', 'dogs']\nassert     find_char_long('Cats and dogs and pigs are all cats') == ['cats', 'cats', 'pigs']\nassert     find_char_long('It is the most beautiful day in the world') == ['beautiful','most', 'world']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_char_long('a' * 4) == ['a' * 4]\nassert     find_char_long('long word') == ['long']\nassert     find_char_long('LONG WORD') == ['LONG']\nassert     find_char_long('a' * 3 + 'b' * 2 + 'c' * 4) == ['a' * 3, 'b' * 2, 'c' * 4]\nassert     find_char_long('a' * 3 + 'b' * 3 + 'c' * 2) == ['a' * 3, 'b' * 3, 'c' * 2]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_char_long('Hello world, I am Python. I love Python!') == ['hell', 'world', 'python', 'love', 'python', 'lo']\nassert     find_char_long('Hello, world!') == ['hello', 'world']\nassert     find_char_long('Helloworld!') == ['hell', 'world']\nassert     find_char_long('!') == ['!']\nassert     find_char_long('Python is very easy!') == ['Python', 'is','very', 'easy']\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef gen_squares(nums):\n    '''\n    Write a function to yield the squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]\nassert     square_nums([0,1,2,3,4,5]) == [0,1,4,9,16,25]\nassert     square_nums([-1,-2,-3,-4,-5]) == [-1,-4,-9,-16,-25]\nassert     square_nums([-1,0,1,2,3,4,5]) == [-1,0,1,4,9,16,25]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [4, 9, 16, 25] == square_nums([1, 2, 3, 4])\nassert     [9, 16, 25, 36] == square_nums([-5, -4, -3, -2, -1])\nassert     [16, 25, 36] == square_nums([1.5, 2.5, 3.5])\nassert     [4.0, 9.0, 16.0, 25.0] == square_nums([-1.0, -2.0, -3.0, -4.0])\nassert     [36.0, 25.0, 16.0, 9.0] == square_nums([4, 3, 2, 1])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [4, 9] == square_nums([1, 2, 3])\nassert     [16] == square_nums([16])\nassert     [256, 512] == square_nums([256, 512])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_nums([1,2,3,4,5,6]) == [1,4,9,16,25,36]\nassert     square_nums([1,2,3]) == [1,4,9]\nassert     square_nums([]) == []\n\ndef square_nums2(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [0, 1, 4, 9] == square_nums([0, 1, 2, 3])\nassert     [0, 1, 4, 9] == square_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] == square_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81])\nassert     [] == square_nums([])\nassert     [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] == square_nums([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_nums([1,2,3,4])    == [1,4,9,16], \"The result is not correct\"\nassert     square_nums([0,1,2,3,4,5])    == [0,1,4,9,16,25], \"The result is not correct\"\nassert     square_nums([0])    == [0], \"The result is not correct\""
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [4, 9, 16, 25] == square_nums([1, 2, 3, 4, 5, 6, 7])\nassert     [4, 9, 16, 25] == square_nums([1, 2, 3, 4, 5, 6, 7, 8])\n\ndef xor_nums(nums):\n    '''\n    Write a function that takes in two lists of numbers, and returns a list \n    of all the elements that are in either of the first two lists, but not both.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1, 4, 9, 16, 25]\nassert     square_nums([0,1,2,3,4]) == [0, 1, 4, 9, 16]\nassert     square_nums([-1,-2,-3,-4]) == [-1, 1, 4, 9, 16]\nassert     square_nums([]) == []\n\ndef is_in_list(element, lst):\n    '''\n    Write a function to check if an element is in a list\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [4, 9, 16, 25] == square_nums([2, 3, 4, 5, 6, 7])\nassert     [1, 4, 9, 16, 25, 36] == square_nums([1, 2, 3, 4, 5, 6])\nassert     [0, 1, 4, 9, 16, 25, 36, 49] == square_nums([0, 1, 2, 3, 4, 5, 6, 7])\nassert     [0, 1, 4, 9, 16, 25, 36, 49] == square_nums([0, 1, 2, 3, 4, 5, 6])\nassert     [0, 1, 4, 9, 16, 25, 36, 49] == square_nums([0, 1, 2, 3, 4, 5, 6, 7])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 0\n    else:\n        for i in range(len(str)):\n            temp = str[i:] + str[:i]\n            if temp == str:\n                return 0\n            else:\n                return 1 + find_Rotations(temp)\n\nassert find_Rotations('abcd') == 0\nassert find_Rotations('abcdef') == 0\nassert find_Rotations('bcd') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Rotations('abc') == 1\nassert     find_Rotations('abcde') == 2\nassert     find_Rotations('abcdef') == 0\nassert     find_Rotations('aaaa') == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Rotations(\"abcd\") == 0\nassert     find_Rotations(\"abcdabcd\") == 0\nassert     find_Rotations(\"abcdabce\") == 2\nassert     find_Rotations(\"abccefgh\") == 4\nassert     find_Rotations(\"a\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Rotations('abc') == 0\nassert     find_Rotations('abcda') == 1\nassert     find_Rotations('abca') == 2\nassert     find_Rotations('aba') == 0\nassert     find_Rotations('abcdaabca') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Rotations('abcd') == 2\nassert     find_Rotations('abcda') == 2\nassert     find_Rotations('aba') == 0\nassert     find_Rotations('ab') == 1\nassert     find_Rotations('abc') == 3\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"abcde\") == 2\nassert     find_Rotations(\"aaaa\") == 0\nassert     find_Rotations(\"abcdef\") == 3"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Rotations(\"abcde\") == [0]\nassert     find_Rotations(\"abc\") == [1]\nassert     find_Rotations(\"abc\") == [0, 1]\nassert     find_Rotations(\"abc\") == [0, 1]\nassert     find_Rotations(\"abc\") == [0, 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"abcd\") == 4\nassert     find_Rotations(\"abcde\") == 2\nassert     find_Rotations(\"\") == 0\nassert     find_Rotations(\"abcdabcdabcdabcdabcdabcd\") == 0\nassert     find_Rotations(\"abcdabcdabcdabcdabcdabcdabcdabcd\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Rotations('abcde') == 4\nassert     find_Rotations('abcda') == 1\nassert     find_Rotations('dabcde') == 4\nassert     find_Rotations('dabcdea') == 2\nassert     find_Rotations('abcdcba') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Rotations(\"abc\") == 1\nassert     find_Rotations(\"abcd\") == 1\nassert     find_Rotations(\"abce\") == 2\nassert     find_Rotations(\"abf\") == 1\nassert     find_Rotations(\"babcd\") == 2\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_remove_Occ():\n    assert remove_Occ('sdfghjk','h') =='sdfghjk'\n    assert remove_Occ('Hello world','l') == 'Helo wrd'\n    assert remove_Occ('sdfghjk','s') == 'dfghjk'\n    "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_Occ('this is a test string', 't') == 'hs is a test strin'\nassert     remove_Occ('this is a test string','s') == 'h is a test strin'\nassert     remove_Occ('this is a test string', 'x') == 'h is a test strin'\nassert     remove_Occ('this is a test string', 'is') == 'h test strin'\nassert     remove_Occ('this is a test string','s') == 'this is a test string'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_Occ('abcdabd','a') == 'bcd'\nassert     remove_Occ('abcdabd','d') == 'abcd'\nassert     remove_Occ('abcdabd','b') == 'cd'\nassert     remove_Occ('abcdabd','c') == 'abd'\nassert     remove_Occ('abcdabd','a') == 'bcd'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_Occ('There is a cat there', 'e') == 'Thi s is a ca th'\nassert     remove_Occ('There is a cat there', 'a') == 'Thi is a c th'\nassert     remove_Occ('cat there is a cat', 'a') == 'cat there is a ca'\nassert     remove_Occ('cat there is a cat', 'c') == 'cat there is a cat'\nassert     remove_Occ('cat there is a cat', 't') == 'cat there is a cat'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_Occ('abbc','b')    == 'aac',    \"remove_Occ('abbc','b')     == 'aac' failed\"\nassert     remove_Occ('abbc','c')    == 'ab',    \"remove_Occ('abbc','c')     == 'ab' failed\"\nassert     remove_Occ('abbc','a')    == 'abb',    \"remove_Occ('abbc','a')     == 'abb' failed\"\nassert     remove_Occ('abcc','a')    == 'abc',    \"remove_Occ('abcc','a')     == 'abc' failed\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     'wmon' == remove_Occ('wmon', 'o')\nassert     'wmon' == remove_Occ('wmon', 'a')\nassert     'wnm' == remove_Occ('wnm', 'o')\nassert     'wnm' == remove_Occ('wnm', 'n')"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_Occ('Hello World','l')=='HeW  WoRrD'\nassert     remove_Occ('Hello World','w')=='HeHe  WoOr'\nassert     remove_Occ('Hello World','e')=='HelH  WorO'\nassert     remove_Occ('Hello World','E')=='HelH  WoOr'\nassert     remove_Occ('Hello World','H')=='llo Wor'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_Occ('u','p') == 'up'\nassert     remove_Occ('pppppppp','p') == 'pppppppp'\nassert     remove_Occ('anachronistic','r') == 'anachronistic'\nassert     remove_Occ('sensu','s') == 'ns'\nassert     remove_Occ('inconnu','i') == 'inconnu'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_Occ('fghghfghfgh','h') == 'fghfghfgh'\nassert     remove_Occ('ghghghgh','h') == 'ghghghgh'\nassert     remove_Occ('ghghghgh','g') == 'ghghghgh'\nassert     remove_Occ('ghghghgh','h') == 'ghghghgh'\nassert     remove_Occ('ghghghgh','h') == 'ghghghgh'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_Occ(\"hello\",\"o\") == \"hel\"\nassert     remove_Occ(\"hello\",\"l\") == \"lo\"\nassert     remove_Occ(\"hello\",\" \") == \"he\"\nassert     remove_Occ(\"hello\",\"h\") == \"\"\nassert     remove_Occ(\"\",\"\") == \"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_matrix([[2,1],[1,3],[3,1]]) == [[1,1],[1,2],[2,3]]\nassert sort_matrix([[1,3],[2,2],[1,1]]) == [[1,1],[1,2],[2,2]]\nassert sort_matrix([[1,3],[1,2],[2,1],[2,3],[1,1]]) == [[1,1],[1,1],[1,2],[2,1],[2,3],[2,2]]\nassert sort_matrix([[1,3],[1,2],[1,1],[1,3],[1,1],[1,1]]) == [[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,3]]\nassert sort_matrix([[1,3],[1,2],[1,1],[1,3],[1,1],[1,1],[1,1]]) == [[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,2],[1,3]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_matrix([\n                    [1, 1, 0],\n                    [1, 0, 1],\n                    [1, 1, 1],\n                ]) == [[1, 0, 1], [1, 1, 1], [1, 1, 0]], \"First matrix sorted incorrectly\"\nassert     sort_matrix([\n                    [1, 1, 1, 1],\n                    [1, 1, 1, 0],\n                    [1, 1, 0, 1],\n                    [1, 0, 1, 1],\n                    [1, 1, 1, 1]\n                ]) == [[1, 1, 1, 1], [1, 1, 1, 0], [1, 1, 0, 1], [1, 0, 1, 1], [1, 1, 1, 1]], \"Second matrix sorted incorrectly\"\nassert     sort_matrix([\n                    [1, 1, 1],\n                    [1, 1, 0],\n                    [1, 0, 1],\n                    [1, 1, 1],\n                ]) == [[1, 1, 1], [1, 1, 0], [1, 0, 1], [1, 1, 1], [1, 1, 0]], \"Third matrix sorted incorrectly\"\nassert     sort_matrix([\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                ]) == [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]], \"Fourth matrix sorted incorrectly\"\nassert     sort_matrix([\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    [1, 1, 1, 1, 1, 1, 1, 1],\n                    "
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_matrix([[-10,9,2,10],[0,8,1,8],[3,7,5,3],[-6,4,0,3]]) == [[-6,4,0,3],[-10,9,2,10],[0,8,1,8],[3,7,5,3]]\nassert     sort_matrix([[0,2,2,3],[3,3,3,3]]) == [[0,2,2,3],[3,3,3,3]]\nassert     sort_matrix([[-10,9,2,10],[3,7,5,3],[-6,4,0,3],[-8,3,7,8]]) == [[-8,3,7,8],[-10,9,2,10],[-6,4,0,3],[-3,7,5,3]]\nassert     sort_matrix([[1,2],[0,4]]) == [[0,4],[1,2]]\nassert     sort_matrix([[0,2,3],[1,0,1]]) == [[0,2,3],[1,0,1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_matrix([[1,5,9],[2,3,4],[7,8,9],[1,8,9]]) == [[1,8,9],[1,5,9],[2,3,4],[7,8,9]]\nassert     sort_matrix([[1,5,9],[1,8,9],[1,8,9],[1,8,9]]) == [[1,8,9],[1,5,9],[1,8,9],[1,8,9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [\n                [1, 2, 3, 4, 5],\n                [2, 3, 4, 5, 6],\n                [3, 4, 5, 6, 7],\n                [4, 5, 6, 7, 8]\n            ] == sort_matrix([\n                [5, 4, 3, 2, 1],\n                [4, 3, 2, 1, 5],\n                [3, 2, 1, 5, 4],\n                [2, 1, 5, 4, 3]\n            ])\nassert     [\n                [1, 2, 3, 4, 5],\n                [2, 3, 4, 5, 6],\n                [3, 4, 5, 6, 7],\n                [4, 5, 6, 7, 8]\n            ] == sort_matrix([\n                [2, 3, 4, 5, 1],\n                [3, 2, 1, 5, 4],\n                [4, 5, 6, 7, 8],\n                [1, 5, 4, 3, 2]\n            ])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_matrix([[2,3,1],[3,1,4],[3,1,1]]) == [[3,3,1],[3,1,4],[2,1,1]]\nassert     sort_matrix([[2,3],[3,1]]) == [[3,3],[2,1]]\nassert     sort_matrix([[2,3],[3,1]]) == [[2,3],[3,1]]\nassert     sort_matrix([[3,2],[3,1]]) == [[3,3],[2,1]]\nassert     sort_matrix([[3,3],[2,1]]) == [[3,3],[2,1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef find_the_duplicate(nums):\n    '''\n    Given an unsorted array of numbers, find the number that occurs more than once.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_matrix([[5, 6], [2, 8], [1, 7]]) == [[1, 7], [2, 8], [5, 6]], 'incorrect'\nassert     sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]], 'incorrect'\nassert     sort_matrix([[1, 2, 3], [3, 4, 5], [5, 6, 7]]) == [[1, 2, 3], [3, 4, 5], [5, 6, 7]], 'incorrect'\nassert     sort_matrix([[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]]) == [[1, 2, 3, 4], [3, 4, 5, 6], [5, 6, 7, 8]], 'incorrect'\n\n\ndef sort_matrix_simple(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # check the size of the matrix\n    if len(M) == 0:\n        return M\n    \n    # check the size of the matrix\n    n, m = len(M), len(M[0])\n    if n == 0:\n        return M\n    if m == 0:\n        return M\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [3,4,1,2]    == sort_matrix([[2,4,1],[3,1,2],[4,2,3]])\nassert     [1,2,4,3]    == sort_matrix([[3,1,2],[4,2,3],[2,4,1],[1,3,4]])\nassert     [2,4,1,3]    == sort_matrix([[4,2,3],[2,4,1],[1,3,4],[3,1,2]])\nassert     [1,4,2,3]    == sort_matrix([[4,2,3],[1,3,4],[2,4,1],[3,1,2]])\nassert     [2,1,4,3]    == sort_matrix([[3,1,2],[4,2,3],[2,4,1],[1,3,4]])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_matrix(\n                [[5,2,8],\n                [1,8,9],\n                [8,6,5]]) ==     [[1,8,8],\n                                [8,6,5],\n                                [5,2,8]]\nassert     sort_matrix(\n                [[3,5,7,8],\n                [1,8,9,0],\n                [7,6,5,9],\n                [4,3,2,1]]) ==     [[1,8,9,0],\n                                [7,6,5,9],\n                                [3,5,7,8],\n                                [4,3,2,1]]\n\n\ndef sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (find_Volume(10,2,3) == 60.0)\nassert     (find_Volume(7,5,3) == 21.0)\nassert     (find_Volume(5,3,2) == 10.0)\nprint \"Exercise 3: Problem 3.1 is correct.\"\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Volume(3,4,5) == 6, \"3,4,5\"\nassert     find_Volume(3,4,0) == 3, \"3,4,0\"\nassert     find_Volume(3,-4,5) == -3, \"3,-4,5\"\nassert     find_Volume(3,-4,-5) == -6, \"3,-4,-5\"\nprint \"passed\"\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Volume(1.0,1.0,1.0)         ==    1.0\nassert     find_Volume(1.0,1.0,2.0)         ==    2.0\nassert     find_Volume(1.0,2.0,1.0)         ==    2.0\nassert     find_Volume(1.0,2.0,2.0)         ==    4.0\nassert     find_Volume(2.0,1.0,1.0)         ==    2.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Volume(1,1,1) == 1\nassert     find_Volume(2,1,1) == 0.5\nassert     find_Volume(1,2,1) == 0.25\nassert     find_Volume(1,1,2) == 0.125\nassert     find_Volume(1,1,1) == 1\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Volume(3,4,5) == 15\nassert     find_Volume(3,6,5) == 17.5\nassert     find_Volume(3,3,5) == 6\nassert     find_Volume(3,3,2) == 2.5\nassert     find_Volume(3,4,2) == 7.5\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Volume(2,3,4) == 2, \"incorrect result\"\nassert     find_Volume(10,20,30) == 60, \"incorrect result\"\nassert     find_Volume(2,3,4) == 2, \"incorrect result\"\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (find_Volume(0.1, 0.1, 0.1) == 0.33), \"Wrong result\"\nassert     (find_Volume(0.1, 0.2, 0.1) == 0.13), \"Wrong result\"\nassert     (find_Volume(0.1, 0.1, 0.2) == 0.15), \"Wrong result\"\nassert     (find_Volume(0.1, 0.2, 0.2) == 0.04), \"Wrong result\"\nassert     (find_Volume(0.1, 0.1, 0.3) == 0.04), \"Wrong result\"\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Volume(2,5,5) == 50\nassert     find_Volume(1,5,5) == 25\nassert     find_Volume(3,5,5) == 150\nassert     find_Volume(2,2,4) == 8\nassert     find_Volume(2,3,4) == 7\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Volume(2,3,4) == 22.0\nassert     find_Volume(2,2,2) == 12.0\nassert     find_Volume(4,5,6) == 52.0\nassert     find_Volume(9,8,7) == 197.0\nassert     find_Volume(9,9,7) == 258.0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Volume(1,1,1) == 1,    'Error: find_Volume(1,1,1)'\nassert     find_Volume(2,2,2) == 8,    'Error: find_Volume(2,2,2)'\nassert     find_Volume(3,3,3) == 27,    'Error: find_Volume(3,3,3)'\nassert     find_Volume(4,4,4) == 64,    'Error: find_Volume(4,4,4)'\nassert     find_Volume(5,5,5) == 125,    'Error: find_Volume(5,5,5)'\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"abc\") == True\nassert     text_lowercase_underscore(\"abc_123\") == True\nassert     text_lowercase_underscore(\"abc_123_def\") == False\nassert     text_lowercase_underscore(\"Abc_123_def\") == False\nassert     text_lowercase_underscore(\"\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('') == True\nassert     text_lowercase_underscore('HiThere') == False\nassert     text_lowercase_underscore('123') == False\nassert     text_lowercase_underscore('123_') == True\nassert     text_lowercase_underscore('12345') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore(\"example\") == True\nassert     text_lowercase_underscore(\"ex_ample\") == False\nassert     text_lowercase_underscore(\"exa_mple\") == True\nassert     text_lowercase_underscore(\"EXaMple\") == False\nassert     text_lowercase_underscore(\"EXamPLE\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore(\"The_Stealth_Warrior\") == False\nassert     text_lowercase_underscore(\"The_Stealth_Warrior_\") == True\nassert     text_lowercase_underscore(\"_The_Stealth_Warrior\") == True\nassert     text_lowercase_underscore(\"TheStealthWarrior\") == False\nassert     text_lowercase_underscore(\"TheStealthWarrior_\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('abcd') == True\nassert     text_lowercase_underscore('Abcd') == True\nassert     text_lowercase_underscore('abc_de') == True\nassert     text_lowercase_underscore('abc_De') == True\nassert     text_lowercase_underscore('abc_dE') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('alpha_bravo') == True\nassert     text_lowercase_underscore('alph_bravo') == False\nassert     text_lowercase_underscore('abc_123') == False\nassert     text_lowercase_underscore('a_b_c') == True\nassert     text_lowercase_underscore('alpha') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"is_this_a_test\") == True\nassert     text_lowercase_underscore(\"this_is_a_test\") == False\nassert     text_lowercase_underscore(\"is_a_test\") == True\nassert     text_lowercase_underscore(\"is_This_a_test\") == False\nassert     text_lowercase_underscore(\"thisIs_a_test\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore('hello') == True\nassert     text_lowercase_underscore('Hello') == False\nassert     text_lowercase_underscore('hELLo') == False\nassert     text_lowercase_underscore('HeLlO') == True\nassert     text_lowercase_underscore('h_e_l_l_o') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('red_fox') == True\nassert     text_lowercase_underscore('yellow_golf') == False\nassert     text_lowercase_underscore('corgi_dog') == False\nassert     text_lowercase_underscore('yellow_fox') == False\nassert     text_lowercase_underscore('red_panda') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('abC')\nassert     text_lowercase_underscore('aBC')\nassert     text_lowercase_underscore('ab_c')\nassert     text_lowercase_underscore('a_b_c')\nassert     text_lowercase_underscore('a_b_c_')\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_perimeter(5)     == 20\nassert     square_perimeter(7)     == 28\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\nassert     square_perimeter(6) == 24\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\nassert     square_perimeter(6) == 24\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_perimeter(3) == 9, \"the perimeter of a square with side length 3 should be 9\"\nassert     square_perimeter(5) == 25, \"the perimeter of a square with side length 5 should be 25\"\nassert     square_perimeter(8) == 64, \"the perimeter of a square with side length 8 should be 64\"\nprint(\"pass the test\")\n\ndef get_largest_prime_factor(n):\n    '''\n    Write a function that returns the largest prime factor of a given number as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_perimeter(4) == 16\nassert     square_perimeter(9) == 36\nassert     square_perimeter(0) == 0\n\n\ndef side_length_to_perimeter(side_length):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (square_perimeter(3) == 9)\nassert     (square_perimeter(5) == 25)\nassert     (square_perimeter(2) == 8)\nassert     (square_perimeter(1) == 4)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\nassert     square_perimeter(6) == 24\nassert     square_perimeter(7) == 28\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\nassert     square_perimeter(6) == 24\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 25\nassert     square_perimeter(6) == 36\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 20\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     str_to_list('Hello'    ,'Hello') == ['e', 'H', 'll']\nassert     str_to_list('Hello','') == ['H', 'e', 'l', 'l', 'o']\nassert     str_to_list('Hello','o') == ['H', 'e', 'l']\nassert     str_to_list('','') == []\nassert     str_to_list('Hello','ll') == ['o']\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     str_to_list('a','b') == [], \\\n        'The string does not contain any characters from the second string'\nassert     str_to_list('','') == [], \\\n        'The second string is empty'\nassert     str_to_list('','') == [], \\\n        'The first string is empty'\n\ndef str_to_list_1(string,string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [i for i in string if i in string2]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     str_to_list('this is the string','s') == ['th', 'is', 'i', 'is', 'the', 'is','str']\nassert     str_to_list('this is the string','sgh') == ['th', 'is', 'i', 'is', 'the', 'is','str']\nassert     str_to_list('this is the string', 'h') == ['th', 'is', 'i', 'is', 'the', 'is','str']\nassert     str_to_list('this is the string', 'gh') == ['th', 'is', 'i', 'is', 'the', 'is','str']\nassert     str_to_list('this is the string', 'y') == ['th', 'is', 'i', 'is', 'the', 'is','str']\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef test_str_to_list():\n    assert str_to_list('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'XYZ') == 'ABCDEFG'\n    assert str_to_list('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'XYZZ') == 'ABCDEFG'\n    assert str_to_list('XYZ', 'XYZ') == ''\n    "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     str_to_list(\"pAvle\", \"lAvle\") == [\"v\", \"l\", \"e\"]\nassert     str_to_list(\"preserve\", \"npreserve\") == [\"r\", \"p\", \"e\", \"s\", \"r\", \"e\"]\nassert     str_to_list(\"carriage\", \"r\") == [\"c\", \"r\"]\nassert     str_to_list(\"preserve\", \"preserve\") == []\n\ndef filter(list1, list2):\n    '''\n    Write a function to return all the common characters between the two given list.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     str_to_list(\"aabcd\") == ['cd']\nassert     str_to_list(\"aabcd\") == ['abcd']\nassert     str_to_list(\"abcdef\") == ['def']\nassert     str_to_list(\"abcdefg\") == ['defg']\nassert     str_to_list(\"abcdefg\") == ['defg']\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     str_to_list(\"ksoh\", \"soh\") == \"ksoh\"\nassert     str_to_list(\"kssoh\", \"soh\") == \"ksoh\"\nassert     str_to_list(\"kssoh\", \"ksoh\") == \"\"\nassert     str_to_list(\"kssoh\", \"soh\") == \"kssoh\"\nassert     str_to_list(\"kssoh\", \"ksoh\") == \"\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     'yatas' == str_to_list('yatas')\nassert     'yatas' == str_to_list('tas')\nassert     'yatas' == str_to_list('yatas')\nassert     'yatas' == str_to_list('yatas')\n\ndef str_to_int(string):\n    '''\n    Write a function to return a base-n number from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     str_to_list(\"Strings are awesome!\") == ['r', 'e','', 'a', 'o', 'w','s','', 'i', 'n', 'g','', 'w', 'o', 'r','s', '!', '!']\nassert     str_to_list(\"\") == []\nassert     str_to_list(\"    \") == [' ','','','']\nassert     str_to_list(\"Stri\") == ['t', 'i','s']\nassert     str_to_list(\"Str\") == ['r', 'n','', 't', 'r', 'i', 'n', 'g']\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     test_duplicate([2,1,5,2,3,3,4,3]) == True\nassert     test_duplicate([2,1,5,2,3,4,3]) == False\nassert     test_duplicate([2,1,5,2,3,4]) == False\nassert     test_duplicate([]) == False\nassert     test_duplicate([1]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 4, 5, 6, 6]) is True\nassert     test_duplicate([1, 2, 3, 4, 5, 6]) is False\nassert     test_duplicate([1, 1, 2, 3]) is False\nassert     test_duplicate([1, 2, 3, 4, 5]) is False\nassert     test_duplicate([1, 2, 3, 4, 5, 5]) is True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     test_duplicate([]) == False\nassert     test_duplicate([1,2,3,4]) == False\nassert     test_duplicate([1,2,3,4,5,6]) == True\nassert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([1,2,3,3,5,6]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,3,4,4])\nassert     test_duplicate([1,2,3,1])\nassert     test_duplicate([1,2,3,4,5])\nassert     test_duplicate([1,2,3,4])\nassert     test_duplicate([1,1,1,3,4])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     test_duplicate([1,2,3,4,5]) == False\nassert     test_duplicate([1,2,3,4,1]) == True\nassert     test_duplicate([1,1,1,3,3,4,3,2,4,2]) == False"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     test_duplicate([0,1,2,3,3,2,4,3,4,5,6]) == True\nassert     test_duplicate([0,1,2,3,4]) == False\nassert     test_duplicate([1,2,3,4,5,6]) == False"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     test_duplicate([1, 2, 3, 4, 1, 2, 3]) == True\nassert     test_duplicate([1, 2, 3, 4, 5]) == False\nassert     test_duplicate([1, 2, 3, 4, 1]) == True\nassert     test_duplicate([]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_duplicate([1,2,3,4,5]) == False\nassert     is_duplicate([1,2,3,4,1]) == True\nassert     is_duplicate([1,1,1,3,3,4,3,2,4,2]) == True\nassert     is_duplicate([1]) == False\nassert     is_duplicate([]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \ndef test_containDuplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     test_duplicate(arraynums_1) == True\nassert test_duplicate(arraynums_2) == True\nassert test_duplicate(arraynums_3) == False"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_woodall(1)     == False\nassert     is_woodall(1234)     == False\nassert     is_woodall(5436)     == False\nassert     is_woodall(9876)     == True\nassert     is_woodall(98876)     == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_woodall(1234) == True, 'is_woodall(1234)'\nassert     is_woodall(1237) == False, 'is_woodall(1237)'\nassert     is_woodall(1234) == True, 'is_woodall(1234)'\nassert     is_woodall(12345) == False, 'is_woodall(12345)'\nassert     is_woodall(1236) == False, 'is_woodall(1236)'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (is_woodall(5) == True)\nassert     (is_woodall(45) == False)\nassert     (is_woodall(53) == True)\nassert     (is_woodall(100) == True)\nassert     (is_woodall(21) == False)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(2) == True\nassert     is_woodall(3) == False\nassert     is_woodall(4) == False\nassert     is_woodall(5) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_woodall(6) == True\nassert     is_woodall(8) == False\nassert     is_woodall(66) == False\nassert     is_woodall(77) == False\nassert     is_woodall(18) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(10) == False\nassert     is_woodall(3) == True\nassert     is_woodall(10) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_woodall(2) == True\nassert     is_woodall(8) == False\nassert     is_woodall(874) == True\nassert     is_woodall(9874) == False\nassert     is_woodall(9874) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_woodall(8), '8 is a woodball'\nassert     not is_woodall(8), '8 is not a woodball'\nassert     is_woodall(9), '9 is a woodball'\nassert     not is_woodall(9), '9 is not a woodball'\nassert     is_woodall(10), '10 is a woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_woodall(121) == False, 'incorrect'\nassert     is_woodall(1110) == True, 'incorrect'\nassert     is_woodall(11) == False, 'incorrect'\nassert     is_woodall(111011110) == True, 'incorrect'\nassert     is_woodall(32) == False, 'incorrect'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_woodall(101) == False\nassert     is_woodall(103) == False\nassert     is_woodall(10103) == True\nassert     is_woodall(1010302) == True\nassert     is_woodall(1010303) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rev(101) == True\nassert     rev(1010) == False\nassert     rev(2341) == False\nassert     rev(23) == True\nassert     rev(1024) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rev(121) == True\nassert     rev(122) == False\nassert     rev(100) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rev(123) == False\nassert     rev(232) == False\nassert     rev(321) == True\nassert     rev(312) == True\nassert     rev(13) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rev(12) == True \nassert     rev(21) == True \nassert     rev(99) == True \nassert     rev(999) == True\nassert     rev(1) == False \n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rev(123)==False\nassert     rev(12321)==True\nassert     rev(1234)==False\nassert     rev(12345)==False\n\n\ndef f(n):\n    '''\n    Write a python function to check if a given number is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (rev(14) is False)\nassert     (rev(11) is False)\nassert     (rev(15) is True)\nassert     (rev(123) is True)\nassert     (rev(1234) is True)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rev(123) == True\nassert    rev(321) == True\nassert     rev(1000) == True\nassert     rev(0) == True\nassert     rev(-123) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rev(1) == False\nassert     rev(2) == True\nassert     rev(4) == False\nassert     rev(5) == True\nassert     rev(6) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (rev(123) == False)\nassert (rev(234) == False)\nassert (rev(34) == True)\nassert (rev(234) == True)\nassert (rev(321) == False)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rev(123) == True \nassert     rev(456) == True \nassert     rev(1) == True \nassert     rev(999) == True\nassert     rev(0) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_Max_Num([2, 1, 6, 9, 8, 4, 5]) == 9, \"Answer is wrong\"\nassert     find_Max_Num([2, 5, 6, 7, 9, 8, 4]) == 9, \"Answer is wrong\"\nassert     find_Max_Num([2, 5, 6, 7, 9, 8]) == 9, \"Answer is wrong\"\nassert     find_Max_Num([2, 5, 6, 7, 9]) == 9, \"Answer is wrong\"\nassert     find_Max_Num([2, 5, 6, 9, 8]) == 9, \"Answer is wrong\"\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 11\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12\nassert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 12\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_Max_Num( [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] ) == 0\nassert     find_Max_Num( [1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 9\nassert     find_Max_Num( [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] ) == 0\nassert     find_Max_Num( [8, 7, 6, 5, 4, 3, 2, 1, 0] ) == 8\nassert     find_Max_Num( [7, 6, 5, 4, 3, 2, 1, 0] ) == 7\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_Max_Num(['1', '5', '2', '7', '3', '8', '9']) == '9'\nassert     find_Max_Num(['1', '5', '2', '7', '3', '8', '5']) == '8'\nassert     find_Max_Num(['1', '5', '2', '7', '3', '8', '3']) == '3'\nassert     find_Max_Num(['1', '5', '2', '7', '3', '8', '9']) == '9'\n\ndef find_Max_Num_Recursive(arr, start, end, ans) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if start == end : \n        return arr[start]\n    mid = (start + end) / 2\n    if arr[mid] > arr[start] : \n        if arr[mid] > arr[end] : \n            return arr[mid]\n        else : \n            return find_Max_Num_Recursive(arr, mid+1, end, ans)\n    else : \n        if arr[mid] > arr[end] : \n            return arr[mid]\n        else : \n            return find_Max_Num_Recursive(arr, start, mid-1, ans)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([5, 4, 3, 2, 1]) == 9\nassert     find_Max_Num([8, 9, 6, 2, 1]) == 9\nassert     find_Max_Num([8, 5, 9, 2, 1]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_Max_Num([8,5,6,7]) == 8\nassert     find_Max_Num([9,5,6,7]) == 9\nassert     find_Max_Num([1,2,3,4]) == 4\nassert     find_Max_Num([4,3,2,1]) == 4\nassert     find_Max_Num([1,9,7,6,4]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_Max_Num( [2,4,7,8,3]) == 8\nassert     find_Max_Num( [4,8,7,1,9]) == 8\nassert     find_Max_Num( [4,7,1,9]) == 7\nassert     find_Max_Num( [4,7,6,1,9]) == 8\nassert     find_Max_Num( [5,8,6,1,9]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([2, 1, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([2, 3, 1, 4, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([2, 3, 4, 1, 5, 6, 7, 8, 9]) == 9\nassert     find_Max_Num([2, 3, 4, 5, 1, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_Max_Num( [0,1,2,3,4,5,6,7,8,9,0]) == 9\nassert     find_Max_Num([3,0,7,2,0,5]) == 7\nassert     find_Max_Num([7,2,0,5,0,9]) == 9\nassert     find_Max_Num([7,2,0,5,0]) == 7\nassert     find_Max_Num([7,2,0,5,9]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_Max_Num([6, 7, 8, 9]) == 9\nassert     find_Max_Num([9, 7, 8, 6]) == 9\nassert     find_Max_Num([4, 7, 7, 4]) == 4\nassert     find_Max_Num([3, 9, 7, 8]) == 9\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     opposite_Signs(10,-30) == True \nassert     opposite_Signs(10,30) == False\nassert     opposite_Signs(10,20) == False\nassert     opposite_Signs(10,10) == False\nassert     opposite_Signs(10,0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     opposite_Signs(-123,43) == True\nassert opposite_Signs(-43,123) == True\nassert opposite_Signs(-123,123) == False\nassert opposite_Signs(43,123) == False\nassert opposite_Signs(43,-123) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     opposite_Signs(-10,4) == True     \nassert     opposite_Signs(-10,-4) == False \nassert     opposite_Signs(10,4) == False     \nassert     opposite_Signs(10,-4) == True     \nassert     opposite_Signs(-10,0) == True     \n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(-1,0) == False\nassert     opposite_Signs(-1,-2) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     opposite_Signs(2,4) == True\nassert     opposite_Signs(-2,-4) == True\nassert     opposite_Signs(-2,4) == False\nassert     opposite_Signs(2,-4) == False\nassert     opposite_Signs(0,4) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     opposite_Signs(1,2) == False\nassert     opposite_Signs(-1,-2) == True\nassert     opposite_Signs(3,-2) == False\nassert     opposite_Signs(-3,2) == True\nassert     opposite_Signs(3,2) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     opposite_Signs(0,0)\nassert     opposite_Signs(1,1)\nassert     opposite_Signs(-1,-1)\nassert     opposite_Signs(1,-1)\nassert     opposite_Signs(-1,1)\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     opposite_Signs(7,2)         ==    True, \"7,2 = True\"\nassert     opposite_Signs(7,0)         ==    False, \"7,0 = False\"\nassert     opposite_Signs(0,7)         ==    False, \"0,7 = False\"\nassert     opposite_Signs(0,0)         ==    True, \"0,0 = True\"\nassert     opposite_Signs(9,5)         ==    True, \"9,5 = True\"\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     opposite_Signs(10, -10) == True\nassert opposite_Signs(10, 0) == False\nassert     opposite_Signs(-10, -10) == True\nassert     opposite_Signs(0, -10) == True\nassert     opposite_Signs(10, 0) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     opposite_Signs(3,5) == False\nassert     opposite_Signs(0,5) == True\nassert     opposite_Signs(0,-5) == True\nassert     opposite_Signs(0,-0) == True\nassert     opposite_Signs(-0,-5) == True\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_octagonal(8) == False, \"should be False\"\nassert     is_octagonal(11) == True, \"should be True\"\nassert     is_octagonal(12) == False, \"should be False\"\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_octagonal(0)\nassert     is_octagonal(1)\nassert     is_octagonal(2)\nassert     is_octagonal(3)\nassert     is_octagonal(4)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == '1'\nassert     is_octagonal(2) == '8'\nassert     is_octagonal(3) == '36'\nassert     is_octagonal(4) == '125'\nassert     is_octagonal(5) == '216'\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 4\nassert     is_octagonal(3) == 8\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 10\nassert     is_octagonal(3) == 1\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 0\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_octagonal(1) == '1'\nassert     is_octagonal(2) == '8'\nassert     is_octagonal(3) == '36'\nassert     is_octagonal(4) == '125'\nassert     is_octagonal(5) == '216'\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_octagonal(1)    ==    1\nassert     is_octagonal(2)    ==    8\nassert     is_octagonal(3)    ==    27\nassert     is_octagonal(4)    ==    81\nassert     is_octagonal(5)    ==    125\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_octagonal(1) == 0\nassert     is_octagonal(3) == 4\nassert     is_octagonal(6) == 10\nassert     is_octagonal(9) == 22\nassert     is_octagonal(18) == 48\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 8\nassert     is_octagonal(3) == 27\nassert     is_octagonal(4) == 64\nassert     is_octagonal(5) == 125\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_octagonal(10) == 36\nassert     is_octagonal(20) == 216\nassert     is_octagonal(1) == 1\nassert     is_octagonal(30) == 4862\nassert     is_octagonal(5) == 1025\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Substrings('abc') == 1\nassert count_Substrings('aaa') == 1\nassert count_Substrings('aa') == 0\nassert count_Substrings('ab') == 1\nassert count_Substrings('a') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Substrings('abcde') == 3\nassert     count_Substrings('abc') == 3\nassert     count_Substrings('abc') == 3\nassert     count_Substrings('abc') == 3\nassert     count_Substrings('bbbb') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Substrings(\"a12\") == 2\nassert count_Substrings(\"abcd\") == 1\nassert count_Substrings(\"abcde\") == 0\nassert count_Substrings(\"abc\") == 3\nassert count_Substrings(\"aaaa\") == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Substrings('abcdefghijklmnopqrstuvwxyz') == 26\nassert     count_Substrings('abcdefghijklmnopqrstuvwxyzxx') == 26\nassert     count_Substrings('abcdefghijklmnopqrstuvwxyzxyz') == 27\nassert     count_Substrings('abcdefghijklmnopqrstuvwxyzxyzx') == 27\nassert     count_Substrings('abcdefghijklmnopqrstuvwxyzxyzxyz') == 27\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Substrings('a12') == 2\nassert     count_Substrings('abc') == 0\nassert     count_Substrings('a1') == 1\nassert     count_Substrings('1111111') == 0\nassert     count_Substrings('11111111111') == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Substrings('1')         == 1\nassert     count_Substrings('11')     == 1\nassert     count_Substrings('1221')     == 1\nassert     count_Substrings('121213')     == 3\nassert     count_Substrings('1212')     == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     ( count_Substrings('aaaaa') == 10 \n            and count_Substrings('aaa') == 6 \n            and count_Substrings('aa') == 3\n            and count_Substrings('ab') == 3\n            and count_Substrings('a') == 1\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('ab') == 3\n            and count_Substrings('aa') == 2\n            and count_Substrings('a') == 1\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 10\n            and count_Substrings('aaaaa') == 10\n            and count_Substrings('aaaa') == 1"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Substrings('a1b5c2') == 2\nassert     count_Substrings('abccca') == 7\nassert     count_Substrings('abccc') == 7\nassert     count_Substrings('12345') == 0\nassert     count_Substrings('abc1') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Substrings('1234567890') == 4\nassert     count_Substrings('124567890') == 4\nassert     count_Substrings('1234567891') == 4\nassert     count_Substrings('12345678911') == 2\nassert     count_Substrings('132435617473') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Substrings('w3resource') == 3\nassert     count_Substrings('w3resource') == 2\nassert     count_Substrings('w3resource') == 1\nassert     count_Substrings('w3resource') == 0\nassert     count_Substrings('w3resource') == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert     smallest_num([1, 2, 3, 4, 5, 6, 7, 7, 8, 9]) == 1\nassert     smallest_num([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]) == 1\nassert     smallest_num([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11]) == 1\nassert     smallest_num([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_num([1, 3, 10, 5]) == 5\nassert     smallest_num([-4, 3, -2, 2, 1]) == -4\nassert     smallest_num([1, -3, 10, 5]) == -3\nassert     smallest_num([1, -3, 10, 5, -1, 2]) == -1\nassert     smallest_num([1, -3, 10, 5, -1, 2, -3, 0]) == -3\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_num([1,5,2,4,3]) == 1\nassert     smallest_num([1,5,2,4]) == 1\nassert     smallest_num([1]) == 1\nassert     smallest_num([1,5]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_num([34, 56, 67, 88, 22]) == 22\nassert     smallest_num([2,3,7,1,5,4,5,8,7,12]) == 1\n\ndef smallest_num2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([2,3,4,5,1]) == 1\nassert     smallest_num([3,4,5,1,2]) == 1\nassert     smallest_num([3,3,3,3,3]) == 3\nassert     smallest_num([-1,2,3,4,5]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_num([1, 2, 3, 4]) == 1\nassert     smallest_num([4, 1, 2, 3]) == 1\nassert     smallest_num([4, 3, 2, 1]) == 1\n\ndef smallest_num_2(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_num([1, 2, 3, 4, 5]) == 1\nassert     smallest_num([1.1, 2.1, 3.1, 4.1, 5.1]) == 1.1\nassert     smallest_num([1, -3, -2, -4, -5]) == -5\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_num([-1,5,0,3,4,1]) == -1\nassert     smallest_num([0,3,5,1,4]) == 0\nassert     smallest_num([2,0,1,3,4,5,6]) == 0\nassert     smallest_num([4,1,3,2,5,0]) == 0\nassert     smallest_num([2,5,3,0,4]) == 2\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nsmallest_num([]) == None\nsmallest_num([1, 2, 3]) == 1\nsmallest_num([2, 2, 2]) == 2\nsmallest_num([1, 2, 3, 4]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_num([7, 0, 8, 3, 4, 10, 2, 9]) == 2\nassert     smallest_num([7, -8, 0, 8, 3, 4, 10, 2, 9]) == -8\nassert     smallest_num([7, -8, 0, 8, 3, 4, -10, 2, 9]) == -10\nassert     smallest_num([8, 0, 8, 3, 4, 10, 2, 9]) == -8\nassert     smallest_num([8, 0, 8, 3, 4, 10, 2, -9]) == -9\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_difference(list(range(5))) == 1\nassert     max_difference(list(range(10))) == 3\nassert     max_difference(list(range(50))) == 5\nassert     max_difference(list(range(100))) == 19\nassert     max_difference(list(range(101))) == 19\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_difference([(1, 2), (0, 0), (3, 4), (1, 3)]) == 4\nassert     max_difference([(1, 2), (0, 0), (3, 4)]) == 4\nassert     max_difference([(1, 2), (1, 2), (1, 2)]) == 2\nassert     max_difference([(1, 2), (1, 2), (1, 3), (1, 4), (1, 5)]) == 2\nassert     max_difference([(1, 2), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6)]) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_difference([('a', 'b'), ('c', 'd'), ('e', 'f')]) == 'c', \"Test 1\"\nassert     max_difference([('a', 'a'), ('b', 'b')]) == 'b', \"Test 2\"\nassert     max_difference([('a', 'b'), ('b', 'a'), ('a', 'b'), ('b', 'a'), ('a', 'a')]) == 'a', \"Test 3\"\nassert     max_difference([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h'), ('i', 'j'), ('k', 'l'), ('m', 'n'), ('o', 'p'), ('q', 'r'), ('s', 't'), ('u', 'v'), ('w', 'x'), ('y', 'z')]) == 'b', \"Test 4\"\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_difference([(1,2), (1,3), (2,3)]) == 1\nassert     max_difference([(1,2), (1,3), (2,3), (1,2), (1,3)]) == 2\nassert     max_difference([(1,2), (1,3), (2,3), (2,4), (2,5)]) == 2\nassert     max_difference([(1,2), (1,3), (2,3), (2,4), (2,5), (4,5)]) == 3\nassert     max_difference([(1,2), (1,3), (2,3), (2,4), (2,5), (1,3)]) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_difference(['1', '2', '3', '4']) == 1\nassert     max_difference(['1', '2', '4', '3', '5']) == 3\nassert     max_difference(['0', '1', '2', '3', '4', '5', '6']) == 4\nassert     max_difference(['1', '2', '3', '4', '5', '6', '7']) == 4\nassert     max_difference(['1', '2', '3', '4', '5', '6', '7', '8']) == 4\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_difference( [ [1,2], [3,4], [5,6], [7,8] ] ) == 2\nassert     max_difference( [ [1,2,3], [4,5,6], [7,8,9] ] ) == 2\nassert     max_difference( [ [1,2,3,4], [5,6,7,8], [9,10,11,12] ] ) == 2\n\ndef max_length_string(test_list):\n    '''\n    Write a function to find the maximum length string in a list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_difference([(1,2), (4,5), (3,4), (8,1), (2,3), (5,6), (8,3), (6,7), (4,9)]) == 8\nassert     max_difference([(1,2), (4,5), (3,4), (8,1), (2,3), (5,6), (8,3), (6,7), (4,9), (9,10), (7,8), (10,11), (12,11), (13,11)]) == 11\nassert     max_difference([(1,2), (4,5), (3,4), (8,1), (2,3), (5,6), (8,3), (6,7), (4,9), (9,10), (7,8), (10,11), (12,11), (13,11), (1,10), (2,9), (3,8), (4,7)]) == 10\nassert     max_difference([(1,2), (4,5), (3,4), (8,1), (2,3), (5,6), (8,3), (6,7), (4,9), (9,10), (7,8), (10,11), (12,11), (13,11), (1,10), (2,9), (3,8), (4,7), (14,15), (16,17), (18,19)]) == 17\nassert     max_difference([(1,2), (4,5), (3,4), (8,1), (2,3), (5,6), (8,3), (6,7), (4,9), (9,10), (7,8), (10,11), (12,11), (13,11), (1,10), (2,9), (3,8), (4,7), (14,15), (16,17), (18,19), (1,20), (2,19), (3,18), (4,17), (5,16), (6,15), (7,14), (8,13), (9,12), (10,11), (11,10), (12,9), (13,8), (14,7), (15,6), (16,5), (17,4), (18,3), (19,2), (20,1)]) == 19\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_difference([(1,2),(3,4),(5,6),(7,8)]) == 3\nassert     max_difference([(1,2),(3,4),(6,7),(8,9)]) == 2\nassert     max_difference([(0,1),(2,3),(4,5),(6,7)]) == 1\nassert     max_difference([(2,3),(1,4),(5,6),(8,9)]) == 4\nassert     max_difference([(2,3),(3,4),(5,6),(8,9),(10,11)]) == 4\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     subject_marks([(1,3),(2,4),(0,5)]) == [(1,3),(2,4),(0,5)]\nassert     subject_marks([(1,4),(2,3),(0,5)]) == [(0,5),(1,4),(2,3)]\nassert     subject_marks([(1,4),(2,4),(0,5)]) == [(0,5),(1,4),(2,4)]\nassert     subject_marks([(1,5),(2,4),(0,5)]) == [(0,5),(1,5),(2,4)]\nassert     subject_marks([(1,5),(2,5),(0,5)]) == [(0,5),(1,5),(2,5)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     subject_marks([('P001', 80), ('P002', 90), ('P003', 85), ('P004', 92)]) == \\\n        [('P003', 85), ('P004', 92), ('P001', 80), ('P002', 90)]\nassert     subject_marks([('P004', 90), ('P001', 80), ('P003', 85), ('P002', 92)]) == \\\n        [('P001', 80), ('P002', 92), ('P003', 85), ('P004', 90)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    marks = [\n        ('English', 80),\n        ('Mathematics', 90),\n        ('Physics', 70),\n        ('Chemistry', 45),\n        ('Islam', 100)\n    ]\n\n    subject_marks(marks)"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     subject_marks([(3, 88), (2, 23), (1, 45), (4, 65), (5, 85), (3, 92), (8, 67), (9, 88), (10, 77), (11, 68), (14, 89)])         == [(1, 45), (2, 23), (3, 88), (3, 92), (4, 65), (5, 85), (8, 67), (9, 88), (10, 77), (11, 68), (14, 89)]\nassert     subject_marks([(1, 22), (2, 5), (3, 1), (4, 5), (5, 3), (6, 5), (7, 3), (8, 7), (9, 4), (10, 4), (11, 7), (12, 4), (13, 5), (14, 4), (15, 3), (16, 3), (17, 7)])         == [(1, 22), (2, 5), (3, 1), (4, 5), (5, 3), (6, 5), (7, 3), (8, 7), (9, 4), (10, 4), (11, 7), (12, 4), (13, 5), (14, 4), (15, 3), (16, 3), (17, 7)]\nassert     subject_marks([(10, 1), (11, 3), (12, 5), (13, 8), (14, 7), (15, 4), (16, 9), (17, 2), (18, 6), (19, 3), (20, 4), (21, 7), (22, 8), (23, 9), (24, 5), (25, 6), (26, 7)])         == [(10, 1), (11, 3), (12, 5), (13, 8), (14, 7), (15, 4), (16, 9), (17, 2), (18, 6), (19, 3), (20, 4), (21, 7), (22, 8), (23, 9), (24, 5), (25, 6), (26, 7)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     subject_marks([('b', 12), ('a', 5), ('c', 2), ('d', 8)]) == [('a', 5), ('b', 12), ('c', 2), ('d', 8)]\nassert     subject_marks([('a', 5), ('c', 2), ('b', 12), ('d', 8)]) == [('a', 5), ('b', 12), ('c', 2), ('d', 8)]\nassert     subject_marks([('a', 5), ('d', 8), ('c', 2), ('b', 12)]) == [('a', 5), ('b', 12), ('c', 2), ('d', 8)]\nassert     subject_marks([('a', 5), ('b', 8), ('c', 2), ('d', 12)]) == [('a', 5), ('b', 8), ('c', 2), ('d', 12)]\n\ndef date_function(date):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     subject_marks([(30,10), (50,30), (70,50)]) == [50, 30, 70, 10, 30]\nassert     subject_marks([(40,10), (20,20), (60,40)]) == [20, 40, 60, 10, 20]\nassert     subject_marks([(40,30), (60,70), (50,40)]) == [70, 60, 40, 50, 30]\nassert     subject_marks([(50,70), (40,30), (60,50)]) == [70, 50, 60, 30, 40]\nassert     subject_marks([(50,40), (60,70), (40,30)]) == [70, 60, 40, 50, 30]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     subject_marks([('Math', 90), ('Physics', 92), ('Chemistry', 90), ('Algebra', 87), ('Biology', 85)]) == \\\n                [('Chemistry', 90), ('Physics', 92), ('Biology', 85), ('Algebra', 87), ('Math', 90)]\nassert     subject_marks([('Physics', 92), ('Chemistry', 90), ('Algebra', 87), ('Biology', 85), ('Math', 90)]) == \\\n                [('Algebra', 87), ('Chemistry', 90), ('Biology', 85), ('Math', 90), ('Physics', 92)]\nassert     subject_marks([('Algebra', 87), ('Chemistry', 90), ('Biology', 85), ('Math', 90), ('Physics', 92)]) == \\\n                [('Algebra', 87), ('Chemistry', 90), ('Biology', 85), ('Math', 90), ('Physics', 92)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     subject_marks([(1, 3), (2, 3), (3, 2)]) == [(3, 2), (1, 3), (2, 3)]\nassert     subject_marks([(2, 3), (1, 3), (3, 2)]) == [(3, 2), (2, 3), (1, 3)]\nassert     subject_marks([(3, 2), (2, 3), (1, 3)]) == [(3, 2), (1, 3), (2, 3)]\nassert     subject_marks([(3, 2), (2, 3), (1, 3)]) == [(3, 2), (1, 3), (2, 3)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     subject_marks([('Rohit', 85), ('Aman', 95), ('Manoj', 75)]) == [('Aman', 95), ('Rohit', 85), ('Manoj', 75)]\nassert     subject_marks([('Manoj', 85), ('Rohit', 95), ('Aman', 75)]) == [('Aman', 75), ('Manoj', 85), ('Rohit', 95)]\nassert     subject_marks([('Manoj', 95), ('Rohit', 85), ('Aman', 75)]) == [('Aman', 75), ('Manoj', 95), ('Rohit', 85)]\nassert     subject_marks([('Manoj', 75), ('Rohit', 85), ('Aman', 95)]) == [('Aman', 95), ('Manoj', 75), ('Rohit', 85)]\nassert     subject_marks([('Rohit', 95), ('Aman', 85), ('Manoj', 75)]) == [('Aman', 85), ('Manoj', 75), ('Rohit', 95)]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     subject_marks( [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]) == \\\n    [('c', 4), ('b', 2), ('a', 5), ('e', 1), ('d', 3)]\nassert     subject_marks( [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]) == \\\n    [('b', 2), ('a', 5), ('c', 4), ('e', 1), ('d', 3)]\nassert     subject_marks( [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]) == \\\n    [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]\nassert     subject_marks( [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]) == \\\n    [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]\nassert     subject_marks( [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]) == \\\n    [('a', 5), ('b', 2), ('c', 4), ('d', 3), ('e', 1)]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1, 2, 3]) == 6, 'incorrect'\nassert     recursive_list_sum([]) == 0, 'incorrect'\nassert     recursive_list_sum([[1, 2, 3]]) == 6, 'incorrect'\n\n\ndef flatten_and_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([[1, 2], [3], [4, 5, 6]]) == 21\nassert     recursive_list_sum([[1, [2, 3]], 4]) == 10\nassert     recursive_list_sum([[1, [2, [3, 4]]], 4]) == 10\nassert     recursive_list_sum([[1, [2, [3, [4, [5, 6]]]]], 4]) == 10\nassert     recursive_list_sum([[1, [2, [3, [4, [5, 6]]]]], 4]) == 10\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([1, [2, 3], [4, [5, 6]]]) == 21\nassert     recursive_list_sum([1, [2, [3, 4], [5, [6]]]]) == 21\nassert     recursive_list_sum([]) == 0\n\n\n\n'''\n    Write a function to flatten a nested list and sum all of its elements.\n    >>> flatten([1, [2, 3], [4, [5, 6]]])\n    21\n    >>> flatten([1, [2, [3, 4], [5, [6]]]])\n    21\n    >>> flatten([])\n    0\n'''\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([1, [2, [3, 4], 5], 6]) == 21\nassert     recursive_list_sum([1, [2, [3, 4], [5, 6]], 7]) == 26\nassert     recursive_list_sum([1, [2, 3], [4, [5, 6]]]) == 25\nassert     recursive_list_sum([1, [2, [3, 4], [5, 6]]]) == 25\nassert     recursive_list_sum([]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([1, [2, 3], 4, 5]) == 15\nassert recursive_list_sum([1, [1, 1], [1, 1, 1], [1, 1, 1, 1]]) == 21\nassert recursive_list_sum([1, [2, [3, 4], [5, 6]], 7]) == 34\nassert recursive_list_sum([]) == 0\n\ndef recursive_list_max(data_list):\n    '''\n    Write a function to find the maximum element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef recursive_tree_height(root):\n    '''\n    Write a function to return the height of a binary tree.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([1, [2, [3, 4], 5], 6]) == 21\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([1, [2, [3, [4, [5]]]]]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1, [2, 3], [4, [5, 6, 7]]]) == 21\nassert     recursive_list_sum([1, [2, [3, 4], [5, 6]], 7]) == 21\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[], [], []]) == 0\nassert     recursive_list_sum([[3], [1, 2], [3, 4, [5, 6, 7]]]) == 21"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pos_count([1,-2,3,4,5,-6]) == 2\nassert     pos_count([1,-2,3,4,5,0,-6]) == 3\nassert     pos_count([1,2,3,-4,5,0,-6]) == 2\nassert     pos_count([]) == 0\nassert     pos_count([1,2,3,-4,-5,0,-6]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pos_count([3,4,-1,8]) == 1\nassert     pos_count([3,4,-1,-8]) == 0\nassert     pos_count([-3,-4,-1,-8]) == 3\nassert     pos_count([]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pos_count([1, 2, 3, -1, -5]) == 4, pos_count([1, 2, 3, -1, -5])\nassert     pos_count([1, -2, 3, -1, -5]) == 3, pos_count([1, -2, 3, -1, -5])\nassert     pos_count([-1, -2, -3, -1, -5]) == 0, pos_count([-1, -2, -3, -1, -5])\nassert     pos_count([]) == 0, pos_count([])\nassert     pos_count([1, 2, 3, -1, -5, 0, -3, -2, -1]) == 6, pos_count([1, 2, 3, -1, -5, 0, -3, -2, -1])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pos_count([1,2,3,4,5,-5,-4,-3,-2,-1]) == 3, \"incorrect pos_count\"\nassert     pos_count([]) == 0, \"incorrect pos_count\"\nassert     pos_count([1,2,3,4,5,5,4,3,2,1]) == 9, \"incorrect pos_count\"\nassert     pos_count([-1,-2,-3,-4,-5,-5,-4,-3,-2,-1]) == 9, \"incorrect pos_count\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pos_count([3, 1, -4, -5, -2, 2, 0, 4, -1, -2, -3]) == 5\nassert     pos_count([]) == 0\nassert     pos_count([-3, -2, -1, 0, 1, 2, 3]) == 6\nassert     pos_count([1, -1, 1, 1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pos_count([3,4,-1,1,-3,-2]) == 2\nassert     pos_count([1,2,3]) == 3\nassert     pos_count([-3,-2,-1,0,1,2,3]) == 5\nassert     pos_count([-3,0,0,0]) == 4\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pos_count([1,-2,3,4,5,-6]) == 4, 'incorrect'\nassert     pos_count([]) == 0, 'incorrect'\nassert     pos_count([1,-2,-3,4,5,-6]) == 6, 'incorrect'\nassert     pos_count([-1,-2,-3]) == 0, 'incorrect'\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pos_count([1,-2,3,-4]) == 2, pos_count([1,-2,3,-4])\nassert     pos_count([-1,2,3,4]) == 4, pos_count([-1,2,3,4])\nassert     pos_count([0,0,0,0,0]) == 0, pos_count([0,0,0,0,0])\nassert     pos_count([]) == 0, pos_count([])\nassert     pos_count([1,2,3,4,5,6,7,8,9]) == 9, pos_count([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pos_count([1,2,3,4,5,-1]) == 5\nassert     pos_count([1,2,3,4,5,0]) == 5\nassert     pos_count([1,2,3,4,5,-1,-2,-3]) == 5\nassert     pos_count([]) == 0\nassert     pos_count([1]) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         bell_number(10) == 175, \"fail\"\nassert     bell_number(20) == 3290, \"fail\"\nassert     bell_number(25) == 72661, \"fail\"\nassert     bell_number(50) == 29508572, \"fail\"\nassert     bell_number(100) == 88235700, \"fail\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bell_number(0)     == 1\nassert     bell_number(1)     == 1\nassert     bell_number(2)     == 2\nassert     bell_number(3)     == 5\nassert     bell_number(4)     == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef partition_1(n, m):\n    '''\n    Write a function to find the number of ways to partition a set of partitions.\n    The partitions are represented as a 2-D array where each row represents a partition and each column represents a number.\n    You are also given the number of partitions m.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 1\nassert     bell_number(3) == 2\nassert     bell_number(4) == 5\nassert     bell_number(5) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 15\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == True, 'Error-1'\nassert     is_Monotonic([-1, -1, -1, -1, -1, -1, -1]) == True, 'Error-2'\nassert     is_Monotonic([-1, -1, -1, -1, -1, -1]) == True, 'Error-3'\nassert     is_Monotonic([-1, -1, -1, -1, -1, -1, -1]) == True, 'Error-4'\nassert     is_Monotonic([-1, -1, -1, -1, -1, -1, -1, -1]) == True, 'Error-5'\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_Monotonic
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 8, 9])\nassert     not is_Monotonic([1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 9])\nassert     not is_Monotonic([2, 3, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9])\nassert     not is_Monotonic([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6])\nassert     is_Monotonic([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Monotonic([-1, -5, -10, -1100, -1100, -10, -5, -1])     == True\nassert     is_Monotonic([1, 3, 2, 4, 10, 12, 11, 21, 35, 45, 66, 44])     == True\nassert     is_Monotonic([-11, -21, -35, -45, -66])                                 == False\nassert     is_Monotonic([11, -21, -35, -45, -66])                                 == False\nassert     is_Monotonic([-1, -5, -10, -1100, -1100, -10, -5, -1, -10, -1100, -1100, -10, -5, -1])     == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Monotonic([1,1,2,3,4,5,5,5,5]) == True, \"True\"\nassert     is_Monotonic([1,2,3,4,5]) == False, \"False\"\nassert     is_Monotonic([1,1,1,1]) == True, \"True\"\nassert     is_Monotonic([1,2,3,4,5,6,7]) == True, \"True\"\nassert     is_Monotonic([1,2,3,4,5,6,7,8,9,10]) == False, \"False\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Monotonic([-2, -5, -6, -7, -7, -1]) == True\nassert     is_Monotonic([-2, -5, -6, -7, -7, 0]) == True\nassert     is_Monotonic([-2, -5, -6, -7, -7, 1]) == False\nassert     is_Monotonic([-2, -5, -6, -7, -7, 9]) == False\nassert     is_Monotonic([-2, -5, -6, -7, -7, 9]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1,2,3,4,5,6]) == True\nassert     is_Monotonic([1,1,2,3,4,5,6,7,8,9]) == True\nassert     is_Monotonic([1,1,2,3,4,5,6,7,8]) == False\nassert     is_Monotonic([1,2,3,4,5,6,7,8]) == False\nassert     is_Monotonic([1,2,3,4,5,6,7,8,8]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Monotonic([1, 1, 2, 3, 4, 4, 5, 4, 4])\nassert     not is_Monotonic([1, 2, 3, 4, 4, 5, 4, 4])\nassert     is_Monotonic([1, 2, 3, 4, 4, 5, 4, 4, 4, 4])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Monotonic( [1,2,3,4,5]) == True\nassert     is_Monotonic( [2,3,4,5]) == True\nassert     is_Monotonic( [1,2,3,4,5,6]) == False\nassert     is_Monotonic([-1,0,1,2,3]) == False\nassert     is_Monotonic([1,1,1,1,1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Monotonic([1,2,3]) == True\nassert     is_Monotonic([1,3,2]) == False\nassert     is_Monotonic([1,1,1,2]) == True\nassert     is_Monotonic([1,2,3,4,5]) == False\nassert     is_Monotonic([1,1,1,2,3]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sublist([1,2,3,4,5], [1,2,3]) == True\nassert     is_sublist([1,2,3,4,5], [1,2,3,4]) == False\nassert     is_sublist([1,2,3,4,5], [1,2,3]) == True\nassert     is_sublist([1,2,3,4,5], []) == False\nassert     is_sublist([], [1,2,3]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4, 5, 6], [4, 5, 6]) == True\nassert     is_sublist([1, 2, 3, 4, 5, 6], [4, 5]) == True\nassert     is_sublist([1, 2, 3, 4, 5, 6], [7, 8, 9]) == False\nassert     is_sublist([], [7, 8, 9]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3, 4]) == False\nassert     is_sublist([1, 2, 3, 4, 5], [1, 3, 4]) == False\nassert     is_sublist([1, 2, 3, 4, 5], []) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_sublist([1, 2, 3, 4], [2, 3]) == True\nassert     is_sublist([1, 2, 3, 4], [4, 3]) == True\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4], [1, 2, 4]) == False\nassert     is_sublist([1, 2, 3, 4], [2, 4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sublist([1,2,3,4], [1,2]) == True\nassert     is_sublist([1,2,3,4], [1,3]) == True\nassert     is_sublist([1,2,3,4], [1,2,3]) == True\nassert     is_sublist([1,2,3,4], [1,2,3,4]) == True\nassert     is_sublist([1,2,3,4], [1,2,4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [1,2,4]) == False\nassert     is_sublist([1,2,3,4,5], [4,5]) == True\nassert     is_sublist([1,2,3,4,5], [6,7]) == False\nassert     is_sublist([1,2,3], [2,3,4]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_sublist([1, 2, 3], [2, 3]) == True\nassert     is_sublist([1, 2, 3], [1, 2]) == False\nassert     is_sublist([1, 2, 3], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3, 4]) == False\nassert     is_sublist([1, 2, 3], [2, 3, 4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e']) == True\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == False\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == False\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f']) == True\nassert     is_sublist(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e']) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3])\nassert     is_sublist([1, 2, 3, 4, 5, 6], [1, 2])\nassert     not is_sublist([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\nassert     not is_sublist([1, 2, 3, 4, 5, 6], [])\nassert     is_sublist([], [])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3])\nassert not is_sublist([1, 2, 3, 4, 5], [6, 7, 8])\nassert not is_sublist([1, 2, 3, 4, 5], [])\nassert is_sublist([], [])\nassert is_sublist([1], [1])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_equal_tuple(()) == 1\nassert     find_equal_tuple(((1,2,3),(1,2))) == 0\nassert     find_equal_tuple(((1,2,3),(1,2,3))) == 1\nassert     find_equal_tuple(((1,2,3,4,5),(1,2,3))) == 1\nassert     find_equal_tuple(((1,2,3),(1,2),(3,4,5))) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,3)]) == True\nassert     find_equal_tuple([(1,2,3),(4,5,6),(7,8,9)]) == False\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,3)]) == True\nassert     find_equal_tuple([(1,2),(2,3),(4,5),(7,8)]) == False\nassert     find_equal_tuple([(1,2,3,4,5),(1,2,3),(1,2,3)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_equal_tuple( (1, 2, 3, 4, 5) )\nassert     find_equal_tuple( (1, 2, 3) )\nassert     find_equal_tuple( (1, 2) )\nassert     find_equal_tuple( (1) )\nassert     find_equal_tuple( (1, 1) )\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_equal_tuple( ((1,2,3),(1,2,4),(1,2,3))) == True\nassert     find_equal_tuple( ((1,2),(1,2),(1,2))) == False\nassert     find_equal_tuple( ((1,2,3),(1,2,3))) == False\nassert     find_equal_tuple( ((1,2,3),(1,2,3),(1,2,3))) == False\nassert     find_equal_tuple( ((1,2,3,4),(1,2,3),(1,2,3))) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_equal_tuple((1, 2, 3, 4, 5)) == True\nassert     find_equal_tuple((1, 2, 3)) == False\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6)) == False\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7)) == True\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7, 8)) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(0, 1, 2), (3, 4, 5), (6, 7, 8)]) == True\nassert     find_equal_tuple([(0, 1, 2, 3), (4, 5), (6, 7, 8)]) == False\nassert     find_equal_tuple([(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11)]) == True\nassert     find_equal_tuple([(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13)]) == False\nassert     find_equal_tuple([(0, 1, 2, 3), (4, 5, 6), (7, 8, 9)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_equal_tuple( ((\"k\", 1), (\"l\", 1), (\"m\", 1)) )     == True\nassert     find_equal_tuple( ((\"k\", 1), (\"l\", 1), (\"m\", 1), (\"n\", 1)) )     == False\nassert     find_equal_tuple( ((\"k\", 1), (\"l\", 1), (\"n\", 1), (\"o\", 1)) )     == False\nassert     find_equal_tuple( ((\"k\", 1), (\"l\", 1), (\"m\", 1), (\"n\", 1), (\"o\", 1), (\"p\", 1)) )     == True\nassert     find_equal_tuple( ((\"k\", 1), (\"l\", 1), (\"n\", 1), (\"o\", 1), (\"p\", 1), (\"q\", 1), (\"r\", 1)) )     == False\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([(1,2), (2,3), (3,4)]) == True, \"true\"\nassert     find_equal_tuple([(1,2), (2,3), (3,4,5)]) == False, \"false\"\nassert     find_equal_tuple([(1,2,3), (2,3,4)]) == True, \"true\"\nassert     find_equal_tuple([(1,2,3), (2,3)]) == False, \"false\"\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_equal_tuple((0,0,0)) == True\nassert     find_equal_tuple((0,1,2)) == False\nassert     find_equal_tuple((1,2,3)) == False\nassert     find_equal_tuple((0,1,2,3)) == False\nassert     find_equal_tuple((0,1,2,3,4)) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1, 2), (3, 4)]) == True\nassert     find_equal_tuple([(1, 2, 3), (4, 5)]) == False\nassert     find_equal_tuple([(1, 2), (3, 4, 5)]) == False\nassert     find_equal_tuple([(1, 2), (3, 4), (5, 6, 7)]) == False\nassert     find_equal_tuple([(1, 2), (3, 4, 5, 6)]) == True\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([5,4,2,3]) == [2,3,4,5]\nassert     comb_sort([3,4,2,5,1]) == [1,2,3,4,5]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([1, 2]) == [1, 2]\nassert     comb_sort([1, 2, 3]) == [1, 2, 3]\nassert     comb_sort([1, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3, 4, 5] == comb_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == comb_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == comb_sort([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5] == comb_sort([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == comb_sort([5, 4, 3, 2, 1])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     comb_sort([4, 6, 3, 5, 2]) == [2, 3, 4, 5, 6]\nassert     comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     comb_sort([-3, 10, -4, 8, 3]) == [-3, 3, -4, 8, 10]\nassert     comb_sort([3, 8, 1, 4, -2]) == [-2, 1, 3, 4, 8]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     comb_sort( [1,2,3,4,5,6,7,8,9,10] ) == [1,2,3,4,5,6,7,8,9,10]\nassert     comb_sort( [3,1,5,2,4] ) == [1,2,3,4,5]\nassert     comb_sort( [8,3,1,5,2,4] ) == [1,2,3,4,5,8]\nassert     comb_sort( [1,3,5,2,4] ) == [1,2,3,4,5]\nassert     comb_sort( [5,2,1,3,4] ) == [1,2,3,4,5]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef f1(nums):\n    '''\n    Find the minimum and maximum in the list.\n    \n    Return the minimum and maximum in the list.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [comb_sort([5, 2, 3, 1, 4])] == [1, 2, 3, 4, 5]\nassert     [comb_sort([-3, -2, -1, 0, 1, 2, 3])] == [-3, -2, -1, 0, 1, 2, 3]\nassert     [comb_sort([-3, -2, -1, 0, 1, 2, 3, 4, 5])] == [-3, -2, -1, 0, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [2,5,3,1,8,9,7] == comb_sort([2,5,3,1,8,9,7])\nassert     [1,5,2,3,8,9,7] == comb_sort([1,5,2,3,8,9,7])\nassert     [8,1,5,2,3,9,7] == comb_sort([8,1,5,2,3,9,7])\nassert     [9,7,8,1,5,2,3] == comb_sort([9,7,8,1,5,2,3])\nassert     [7,8,9,1,5,2,3] == comb_sort([7,8,9,1,5,2,3])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    nums = [1, 3, 5, 2, 4, 6, 7, 8, 9, 0]\n    comb_sort(nums)\n    assert nums == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     comb_sort([8, 5, 2, 9, 5, 6, 3])     == [2, 3, 5, 5, 6, 8, 9]\nassert     comb_sort([1, 2, 3])             == [1, 2, 3]\nassert     comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1])     == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     comb_sort([])                     == []\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     dif_Square(9) == True\nassert     dif_Square(12) == True\nassert     dif_Square(13) == False\nassert     dif_Square(1) == True\nassert     dif_Square(10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dif_Square(12) == True \nassert     dif_Square(23) == True\nassert     dif_Square(25) == True\nassert     dif_Square(41) == False\nassert     dif_Square(31) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dif_Square(1000) == 1\nassert     dif_Square(12) == 1\nassert     dif_Square(100) == 0\nassert     dif_Square(1234) == 1\nassert     dif_Square(10) == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     dif_Square(15)    == True\nassert     dif_Square(29)    == True\nassert     dif_Square(37)    == True\nassert     dif_Square(41)    == False\nassert     dif_Square(29)    == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dif_Square(0)     ==     True\nassert     dif_Square(1)    ==     False\nassert     dif_Square(2)    ==    True\nassert     dif_Square(3)    ==    False\nassert     dif_Square(4)    ==    True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dif_Square(12) == True\nassert     dif_Square(13) == True\nassert     dif_Square(9) == False\nassert     dif_Square(34) == True\nassert     dif_Square(15) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dif_Square(1)     == True\nassert     dif_Square(2)     == True\nassert     dif_Square(3)     == False\nassert     dif_Square(4)     == True\nassert     dif_Square(9)     == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dif_Square(25) == True\nassert     dif_Square(8) == True\nassert     dif_Square(9) == False\nassert     dif_Square(27) == True\nassert     dif_Square(28) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dif_Square(7) == True\nassert     dif_Square(10) == True\nassert     dif_Square(14) == False\nassert     dif_Square(13) == True\nassert     dif_Square(32) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     dif_Square(4) == True\nassert     dif_Square(11) == True\nassert     dif_Square(40) == True\nassert     dif_Square(60) == False\nassert     dif_Square(101) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_samepatterns(['C','C','C','C','C'],['CC','C','C','C','C'])\nassert     is_samepatterns(['C','C','C','C','C'],['CC','C','C','C','C'])\nassert     not is_samepatterns(['C','C','C','C','C'],['CC','C','C','C','C'])\nassert     is_samepatterns(['C','C','C','C','C'],['CC','C','C','C','C','C'])\nassert     not is_samepatterns(['C','C','C','C','C'],['CC','C','C','C','C','C','C'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_samepatterns([1,1,1,2,2,2,3,3,3], [1,2,3]) == True\nassert     is_samepatterns([1,1,1,2,2,2,3,3,3], [1,1,1,2,2,3]) == True\nassert     is_samepatterns([1,1,1,2,2,2,3,3,3], [1,1,1,2,2,2,2,3,3,3]) == True\nassert     is_samepatterns([1,1,1,2,2,2,3,3,3], [1,2,3]) == False\nassert     is_samepatterns([1,1,1,2,2,2,3,3,3], [1,1,1,1,2,2,3,3,3]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_samepatterns(['r','g','b','r','b','r','b'], [1,3,2,1,1,1,3]) == False\nassert     is_samepatterns(['r','g','b','r','b','r','b'], [1,1,1,3,2,2,3]) == False\nassert     is_samepatterns(['r','g','b','r','b','r','b'], [1,1,1,3,2,1,3]) == True"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         is_samepatterns([], []) == True\nassert         is_samepatterns([], [0]) == False\nassert         is_samepatterns([1, 2, 3], [0, 1, 2]) == True\nassert         is_samepatterns([1, 2, 3], [0, 1, 2, 3]) == True\nassert         is_samepatterns([1, 2, 3], [0, 1, 2, 3, 1, 2]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'],['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'])\nassert     is_samepatterns(['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'],['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'])\nassert     is_samepatterns(['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'],['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'])\nassert     is_samepatterns(['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'],['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'])\nassert     is_samepatterns(['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'],['rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)','rgb(0,0,0)'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_samepatterns([0,0,0,0,0,0,0,0,0,0], \n            [0,0,0,0,0,0,0,0,0,0]) == True\nassert     is_samepatterns([0,0,0,0,0,0,0,0,0,0], \n            [1,2,3,4,5,6,7,8,9,10]) == False\nassert     is_samepatterns([0,0,0,0,0,0,0,0,0,0], \n            [0,0,0,0,0,0,0,0,0,0]) == True\nassert     is_samepatterns([0,0,0,0,0,0,0,0,0,0], \n            [0,0,0,0,0,0,0,0,0,0]) == True\nassert     is_samepatterns([0,0,0,0,0,0,0,0,0,0], \n            [0,0,0,0,0,0,0,0,0,0]) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_samepatterns(colors, patterns) == True, 'Error: Invalid answer'\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_samepatterns([\"green\", \"red\", \"blue\"], [\"rr\", \"rrd\", \"rrb\"]) == True\nassert     is_samepatterns([\"green\", \"red\", \"blue\"], [\"rrd\", \"rrb\", \"rbb\"]) == False\nassert     is_samepatterns([\"yellow\", \"red\", \"blue\"], [\"yyr\", \"yrr\", \"yyrb\"]) == True\nassert     is_samepatterns([\"yellow\", \"red\", \"blue\"], [\"yyr\", \"yrr\", \"yrb\"]) == False\n\ndef is_samecolors(colors, colors2):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_samepatterns(['R','G','B'],    ['G','B','R']) == True\nassert     is_samepatterns(['R','G','B'],    ['G','R','B']) == False\nassert     is_samepatterns(['R','G','B'],    ['G','B','R','G']) == True\nassert     is_samepatterns(['R','G','B'],    ['G','B','R','B']) == False\nassert     is_samepatterns(['R','G','B'],    ['G','B','R','G','B']) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"],\n                        [\"red\", \"green\", \"red\", \"blue\"]) == True\nassert     is_samepatterns([\"red\", \"blue\", \"red\", \"green\", \"blue\"],\n                        [\"red\", \"blue\", \"red\", \"blue\", \"green\"]) == False\n\ndef count_is_samepatterns(colors, patterns):\n    '''\n    Write a function to count how many times the pattern is followed\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_tuples([(3, 4, 5, 6, 7), (2, 3, 4, 6, 7), (1, 2, 4, 7, 8), (1, 3, 6, 7, 9)], 3) == [(3, 3, 6), (3, 6, 6)]\nassert     find_tuples([(3, 4, 5, 6, 7), (2, 3, 4, 6, 7), (1, 2, 4, 7, 8), (1, 3, 6, 7, 9)], 2) == [(2, 3, 4), (2, 6, 7)]\n\ndef almost_equal(a, b):\n    return abs(a - b) <= 10**(-6)\n\ndef almost_equal_list(l1, l2):\n    for i in xrange(len(l1)):\n        if not almost_equal(l1[i], l2[i]):\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_tuples([(1,2,3),(2,4,5),(4,8,9)], 2) == [(2, 4, 5)]\nassert     find_tuples([(1,2,3),(2,4,5),(4,8,9)], 3) == [(4, 8, 9)]\nassert     find_tuples([(1,2,3),(2,4,5),(4,8,9)], 4) == [(4, 8, 9)]\nassert     find_tuples([(1,2,3),(2,4,5),(4,8,9)], 5) == []\nassert     find_tuples([(1,2,3),(2,4,5),(4,8,9)], 6) == [(4, 8, 9)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_tuples([(1,2,3), (2,4,6), (5,7,10)], 3) == [(1,2,3), (2,4,6)]\nassert     find_tuples([(1,2,3), (2,4,6), (5,7,10)], 6) == [(5,7,10)]\nassert     find_tuples([(1,2,3), (2,4,6), (5,7,10)], 7) == [(5,7,10)]\nassert     find_tuples([(1,2,3), (2,4,6), (5,7,10)], 11) == []\nassert     find_tuples([(1,2,3), (2,4,6), (5,7,10)], 0) == [(1,2,3), (2,4,6), (5,7,10)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_tuples([(1, 4), (1, 7), (1, 3), (2, 6)], 2) == \\\n            [(1, 4), (1, 7), (2, 6)]\nassert     find_tuples([(1, 4), (1, 7), (1, 3), (2, 6)], 3) == \\\n            [(1, 3), (1, 7), (2, 6)]\nassert     find_tuples([(1, 4), (1, 7), (1, 3), (2, 6)], 4) == \\\n            [(1, 1), (1, 7), (2, 6)]\nassert     find_tuples([(1, 4), (1, 7), (1, 3), (2, 6)], 5) == \\\n            [(1, 1), (1, 7), (2, 6)]\nassert     find_tuples([(1, 4), (1, 7), (1, 3), (2, 6)], 6) == \\\n            [(1, 1), (1, 7), (2, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_tuples([(1, 2), (1, 4), (1, 8)], 2) == [(1, 2), (1, 4), (1, 8)]\nassert     find_tuples([(1, 2), (1, 4), (1, 8)], 1) == [(1, 1)]\nassert     find_tuples([(1, 2), (1, 4), (1, 8)], 3) == [(1, 1), (1, 1), (1, 1)]\nassert     find_tuples([(1, 2), (1, 4), (1, 8)], 8) == [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n\ndef k_permutations(test_list, K):\n    '''\n    Write a function to find all the permutations of a list with k elements.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_tuples([(1, 3), (4, 5), (1, 2)], 3) == [(1, 3), (4, 5), (1, 2)]\nassert     find_tuples([(1, 3), (4, 5), (1, 2)], 4) == [(1, 3), (4, 5), (1, 2)]\nassert     find_tuples([(1, 3), (4, 5), (1, 2)], 2) == [(1, 3), (1, 2)]\nassert     find_tuples([(1, 3), (4, 5), (1, 2)], 5) == []\nassert     find_tuples([(1, 3), (4, 5), (1, 2)], 1) == [(1, 3), (1, 2)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_tuples(test_list,2) == [(1,2),(2,4)]\nassert     find_tuples(test_list,3) == [(1,3),(1,4),(1,5),(1,6)]\nassert     find_tuples(test_list,4) == [(1,4),(1,5),(1,6),(1,7),(1,8),(1,9)]\nassert     find_tuples(test_list,5) == [(1,5),(1,6),(1,7),(1,8),(1,9),(1,10),(1,11)]\nassert     find_tuples(test_list,6) == [(1,6),(1,7),(1,8),(1,9),(1,10),(1,11),(1,12),(1,13)]\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_tuples([(1,2,3,4),(2,3,4,5),(4,5,6,7)], 3) == [\n        (2, 3, 4, 5),\n        (4, 5, 6, 7),\n        ]\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(4,5,6,7)], 1) == []\nassert     find_tuples([(1,2,3,4),(2,3,4,5),(4,5,6,7)], 4) == [\n        (4, 5, 6, 7),\n        ]"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_tuples(test_list, 2) == [(1,3), (2,4), (4, 8)]\nassert     find_tuples(test_list, 3) == [(1,2,3), (3,6,9), (4,8,12)]\nassert     find_tuples(test_list, 5) == [(1,2,3,4,5)]\nassert     find_tuples(test_list, 7) == [(7,14,21)]"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (is_Diff(27) == False)\nassert     (is_Diff(11) == True)\nassert     (is_Diff(12) == False)\nassert     (is_Diff(13) == False)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef f(n): \n    '''\n    Write a python function to find the sum of numbers, between 1 and n,\n    which are divisible by 5.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Diff(6) == False\nassert     is_Diff(25) == False\nassert     is_Diff(26) == True\nassert     is_Diff(27) == True\nassert     is_Diff(28) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_Diff(29) == True\nassert     is_Diff(27) == False\nassert     is_Diff(26) == True\nassert     is_Diff(25) == False\nassert     is_Diff(25) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(21) == True\nassert     is_Diff(22) == False\nassert     is_Diff(91) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(100) == False\nassert     is_Diff(101) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Diff(7) == True\nassert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(5) == False\nassert     is_Diff(20) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_Diff(16) == False\nassert     is_Diff(10) == True\nassert     is_Diff(0) == True\nassert     is_Diff(21) == False\nassert     is_Diff(27) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Diff(23) == False\nassert     is_Diff(22) == True\nassert     is_Diff(35) == False\nassert     is_Diff(2234) == False\nassert     is_Diff(666) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Diff(10) == False\nassert     is_Diff(5) == True\nassert     is_Diff(40) == True\n\ndef is_Palindrome(n): \n    '''\n    Write a python function to check whether a string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     word_len(\"dad\") == True\nassert word_len(\"sad\") == True\nassert word_len(\"how\") == True\nassert word_len(\"s\") == False\nassert word_len(\"\") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     word_len('apple')==True, \"word_len('apple') is True\"\nassert     word_len('carrot')==False, \"word_len('carrot') is False\"\nassert     word_len('pass')==False, \"word_len('pass') is False\"\nassert     word_len('smiley')==True, \"word_len('smiley') is True\"\n\ndef word_len2(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     word_len('ab') == False, \"Test 1 failed\"\nassert     word_len('cd') == False, \"Test 2 failed\"\nassert     word_len('ef') == False, \"Test 3 failed\"\nassert     word_len('abc') == True, \"Test 4 failed\"\nassert     word_len('efg') == True, \"Test 5 failed\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     word_len('hello') == True\nassert     word_len('world') == True\nassert     word_len('python') == True\nassert     word_len('hi') == False\nassert     word_len('python') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     word_len('abc') == True, \"WRONG\"\nassert     word_len('aaa') == False, \"WRONG\"\nassert     word_len('abc123') == True, \"WRONG\"\n\n\ndef num_vowels(s): \n    '''\n    Write a python function to check whether the number of vowels are odd or even.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     word_len('Hello World') == False\nassert     word_len('Hello World!') == True\nassert     word_len('!') == True\nassert     word_len('!0') == True\nassert     word_len('!0!') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     word_len('python') == True\nassert     word_len('hello') == True\nassert     word_len('loveli') == False\nassert     word_len('lokesh') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     word_len('red') == True\nassert     word_len('apple') == False\nassert     word_len('hundred') == True\nassert     word_len('zebra') == False\nassert     word_len('ten') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     word_len('hello') == True\nassert     word_len('world') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(100) == 1\nassert     tetrahedral_number(200) == 1\nassert     tetrahedral_number(300) == 1\nassert     tetrahedral_number(400) == 1\nassert     tetrahedral_number(500) == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(100) == 362880\nassert     tetrahedral_number(200) == 39916800\nassert     tetrahedral_number(300) == 479001600\nassert     tetrahedral_number(400) == 6227020800\nassert     tetrahedral_number(500) == 72352052080\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 8\nassert     tetrahedral_number(3) == 16\nassert     tetrahedral_number(4) == 32\nassert     tetrahedral_number(5) == 64\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 0\nassert     tetrahedral_number(3) == 0\nassert     tetrahedral_number(4) == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         tetrahedral_number(1) == 4\nassert         tetrahedral_number(2) == 6\nassert         tetrahedral_number(3) == 10\nassert         tetrahedral_number(4) == 15\nassert         tetrahedral_number(5) == 22\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(0) == 0\nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(5) == 120\nassert     tetrahedral_number(12) == 1260\nassert     tetrahedral_number(100) == 1260331733233488448654299363040014569934262955911940405633070824"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 1\nassert     tetrahedral_number(3) == 4\nassert     tetrahedral_number(4) == 8\nassert     tetrahedral_number(5) == 16\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tetrahedral_number(0) == 0 \nassert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 6\nassert     tetrahedral_number(3) == 10\nassert     tetrahedral_number(4) == 20\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(3) == 12\nassert     tetrahedral_number(4) == 28\nassert     tetrahedral_number(5) == 140\nassert     tetrahedral_number(6) == 760\nassert     tetrahedral_number(7) == 1720\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_sphere(4) == 4.1887902047863905\nassert     volume_sphere(3) == 28.274333882308138\nassert     volume_sphere(2) == (4.1887902047863905*3.1415926535897932)\n\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     volume_sphere(1) == 4/3\nassert     volume_sphere(2) == 19/3\nassert     volume_sphere(3) == 124/3\nassert     volume_sphere(4) == 253/3\nassert     volume_sphere(5) == 754/3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_sphere(1.0) == 4.0/3.0\nassert     volume_sphere(2.0) == 4.0/3.0\nassert     volume_sphere(3.0) == 4.0/3.0\nassert     volume_sphere(4.0) == 4.0/3.0\nassert     volume_sphere(5.0) == 4.0/3.0\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_sphere(2) == 4/3\nassert     volume_sphere(1) == 4/3\nassert     volume_sphere(0) == 4/3\n\ndef density(v,r):\n    '''\n    Write a function to compute the density of a sphere given its volume and radius.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_sphere(3) == 4/3.0 * math.pi * 3**2\nassert     volume_sphere(4) == 4/3.0 * math.pi * 4**2\nassert     volume_sphere(5) == 4/3.0 * math.pi * 5**2\nassert     volume_sphere(6) == 4/3.0 * math.pi * 6**2\nassert     volume_sphere(7) == 4/3.0 * math.pi * 7**2\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_sphere(4) == 438.6535947712305, \"test 1\"\nassert     volume_sphere(3) == 55.06147211102379, \"test 2\"\nassert     volume_sphere(7) == 1150.898565480005, \"test 3\"\n\n\ndef slop(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the slop between two points.\n    '''\n    return (y2-y1)/(x2-x1)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_sphere(2)    == 4/3 * math.pi\nassert     volume_sphere(3)    == 4/3 * math.pi\nassert     volume_sphere(5)    == 4/3 * math.pi\nassert     volume_sphere(6)    == 4/3 * math.pi\nassert     volume_sphere(7)    == 4/3 * math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (volume_sphere(1) == 4/3), 'incorrect value for radius of sphere'\nassert     (volume_sphere(2) == math.pi**3/6), 'incorrect value for radius of sphere'\nassert     (volume_sphere(5) == 1/3 * math.pi**3), 'incorrect value for radius of sphere'\nassert     (volume_sphere(10) == 4/3 * math.pi**3), 'incorrect value for radius of sphere'"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_sphere(0) == 4/3\nassert     volume_sphere(1) == 4/3\nassert     volume_sphere(2) == 8/3\nassert     volume_sphere(3) == 16/3\nassert     volume_sphere(4) == 32/3\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (volume_sphere(3) - (3**3/32.0)) < 1e-10\nassert     (volume_sphere(4) - (4**3/32.0)) < 1e-10\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_Char('d')    == 65\nassert     get_Char('ab')    == 25\nassert     get_Char('cd')    == 38\nassert     get_Char('xyz')    == 10"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_Char(\"a\") == 65\nassert     get_Char(\"ab\") == 198\nassert     get_Char(\"abc\") == 672\nassert     get_Char(\"abcdef\") == 673\nassert     get_Char(\"abcdefgh\") == 2358\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_Char('hello') == 'H'\nassert get_Char('2') == '2'\nassert get_Char('2e') == '2'\nassert get_Char('2a') == '2'\nassert get_Char('2s') == '2'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_Char('this is a test') == 'w'\nassert     get_Char('this is a test') == 'w'\nassert     get_Char('this is a test') == 'w'\nassert     get_Char('this is a test') == 'w'\nassert     get_Char('this is a test') == 'w'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_Char('a')    ==    97\nassert     get_Char('b')    ==    98\nassert     get_Char('abc') ==    101\nassert     get_Char('xyz') ==    106\n\ndef get_Char2(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_Char(\"abcd\") == 8\nassert     get_Char(\"aBcd\") == 16\nassert     get_Char(\"ABcd\") == 22\nassert     get_Char(\"a1bc\") == 13\nassert     get_Char(\"a\") == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_Char('Z') ==  'Z'\nassert     get_Char('a') ==  'a'\nassert     get_Char('abc') ==  'abc'\nassert     get_Char('abcdef') ==  'abcdef'\nassert     get_Char('abcdefgh') ==  'abcdefgh'\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_Char(\"a\") == 97, \"get_Char('a') should return 97\"\nassert     get_Char(\"abc\") == 98, \"get_Char('abc') should return 98\"\nassert     get_Char(\"abcd\") == 99, \"get_Char('abcd') should return 99\"\nassert     get_Char(\"abcd\") == 99, \"get_Char('abcd') should return 99\"\nassert     get_Char(\"abcd\") == 99, \"get_Char('abcd') should return 99\"\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_Char(\"AB\") == 2\nassert     get_Char(\"Z\") == 26\nassert     get_Char(\"H\") == 48\nassert     get_Char(\"N\") == 78\nassert     get_Char(\"Y\") == 88\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_Char('AB') == '110'\nassert     get_Char('abc') == '106'\nassert     get_Char('ABC') == '110'\nassert     get_Char('aBc') == '110'\nassert     get_Char('aBC') == '110'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 1\nassert     sequence(4) == 1\nassert     sequence(5) == 1\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sequence(0) == 0\nassert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 2\nassert     sequence(4) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nsequence(8) == 44\nassert \nsequence(50) == 8442"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sequence(0) == 0\nassert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 2\nassert     sequence(4) == 2\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print sequence(10)\n    print sequence(20)\n    print sequence(30)\n    print sequence(40)\n    print sequence(50)\n    print sequence(60)\n    print sequence(70)\n    print sequence(80)\n    print sequence(90)\n    print sequence(100)"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sequence(1) == 1, 'incorrect value'\nassert     sequence(2) == 3, 'incorrect value'\nassert     sequence(3) == 5, 'incorrect value'\nassert     sequence(4) == 8, 'incorrect value'\nassert     sequence(5) == 13, 'incorrect value'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 5\nassert     sequence(5) == 8\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef test_sequence():\n    assert sequence(3) == 3\n    assert sequence(10) == 22\n    assert sequence(50) == 479\n    "
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(1)     == 4.50659312\nassert     surfacearea_sphere(2)     == 12.56637061\nassert     surfacearea_sphere(3)     == 28.27433987\nassert     surfacearea_sphere(4)     == 56.58615138\nassert     surfacearea_sphere(5)     == 106.96296296\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     5.12 < surfacearea_sphere(5) < 5.13, 'Wrong answer'\nassert     12.58 < surfacearea_sphere(10) < 12.59, 'Wrong answer'\nassert     243.63 < surfacearea_sphere(30) < 243.64, 'Wrong answer'\nassert     632.55 < surfacearea_sphere(40) < 632.56, 'Wrong answer'\nassert     923.18 < surfacearea_sphere(50) < 923.19, 'Wrong answer'\nprint('Passed: %s' % __file__)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(5) == 50 * 4 * math.pi, \"incorrect\"\nassert     surfacearea_sphere(8) == 50 * 4 * math.pi, \"incorrect\"\nassert     surfacearea_sphere(10) == 50 * 4 * math.pi, \"incorrect\"\nassert     surfacearea_sphere(12) == 50 * 4 * math.pi, \"incorrect\"\nassert     surfacearea_sphere(14) == 50 * 4 * math.pi, \"incorrect\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     surfacearea_sphere(1) == 4*math.pi\nassert     surfacearea_sphere(2) == 8*math.pi\nassert     surfacearea_sphere(3) == 12*math.pi\nassert     surfacearea_sphere(4) == 16*math.pi\nassert     surfacearea_sphere(5) == 22*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(2) == 4 * math.pi\nassert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(0) == 0\n\ndef surfacearea_sphere_v2(r):\n    '''\n    Using a recursive function to calculate the surface area of a sphere.\n    '''\n    if r == 0:\n        return 0\n    else:\n        return 4 * math.pi * r * r\n\ndef surfacearea_sphere_v3(r):\n    '''\n    Using a recursive function to calculate the surface area of a sphere.\n    '''\n    def surfacearea(r, z):\n        if r == 0:\n            return 4 * math.pi * z * z\n        else:\n            return 4 * math.pi * r * r + surfacearea(r - z, z)\n    return surfacearea(r, 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (surfacearea_sphere(1) == 4 * math.pi)\nassert     (surfacearea_sphere(2) == 12 * math.pi)\n\ndef intersection_point(p1, p2, r1, r2):\n    '''\n    Write a function to find the point of intersection of two circles,\n    if they do not intersect, return None.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(5) == 4*math.pi*5**2\nassert     surfacearea_sphere(10) == 4*math.pi*10**2\nassert     surfacearea_sphere(0) == 0\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(2) == 4 * math.pi\nassert     surfacearea_sphere(3) == 4 * math.pi\n\ndef surfacearea_sphere_vec(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(2.0) == 4 * math.pi * 8.0\nassert     surfacearea_sphere(3.0) == 4 * math.pi * 16.0\nassert     surfacearea_sphere(4.0) == 4 * math.pi * 32.0\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(0.0) == 4 * math.pi * (4/3)\nassert     surfacearea_sphere(1.0) == 4 * math.pi * (8/3)\nassert     surfacearea_sphere(2.0) == 4 * math.pi * (16/3)\nassert     surfacearea_sphere(3.0) == 4 * math.pi * (32/3)\nassert     surfacearea_sphere(4.0) == 4 * math.pi * (64/3)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 19\nassert     centered_hexagonal_number(3) == 38\nassert     centered_hexagonal_number(4) == 59\nassert     centered_hexagonal_number(5) == 80\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 4\nassert     centered_hexagonal_number(3) == 7\nassert     centered_hexagonal_number(4) == 10\nassert     centered_hexagonal_number(5) == 13\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(5) == 26\nassert     centered_hexagonal_number(10) == 82\nassert     centered_hexagonal_number(15) == 171\nassert     centered_hexagonal_number(20) == 256\nassert     centered_hexagonal_number(30) == 523\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(0) == 0\nassert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 9\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 6\nassert     centered_hexagonal_number(5) == 8\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(5) == 5 + 10\nassert     centered_hexagonal_number(4) == 5 + 5 + 6\nassert     centered_hexagonal_number(3) == 5 + 5 + 6 + 10\nassert     centered_hexagonal_number(2) == 5 + 5 + 6 + 10 + 15\nassert     centered_hexagonal_number(1) == 5 + 5 + 6 + 10 + 15 + 22\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(12) == 60\nassert     centered_hexagonal_number(13) == 72\nassert     centered_hexagonal_number(14) == 84\nassert     centered_hexagonal_number(15) == 96\nassert     centered_hexagonal_number(16) == 120\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef circular_number(n):\n    '''\n    Write a function to find nth circular number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'d':5,'e':6}) == {'a':1,'b':3,'c':4,'d':5,'e':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'a':5}) == {'a':5,'b':3,'c':4}\nassert     merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'a':5,'b':6}) == {'a':1,'b':6,'c':4}\nassert     merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'a':5,'b':6,'c':7}) == {'a':1,'b':6,'c':7}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dict1 == {1: 'a', 2: 'b'}\nassert     dict2 == {3: 'c', 4: 'd'}\nassert     dict3 == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three(\n    {'a':1, 'b':2},\n    {'c':3, 'd':4},\n    {'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}\n\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'c':5,'d':6})     == \\\n                {'a':1,'b':3,'c':5,'d':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'d':6})     == \\\n                {'a':1,'b':3,'c':4,'d':6}\nassert     merge_dictionaries_three({'a':1,'b':2},{'b':3,'c':4},{'d':6,'e':7})     == \\\n                {'a':1,'b':3,'c':4,'d':6,'e':7}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({'a':1, 'b':2},\n                                   {'b':2, 'c':3},\n                                   {'c':3, 'd':4}) == {'a':1, 'b':2, 'c':3, 'd':4}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'d': 5, 'e': 6}) == {'a': 1, 'b': 3, 'c': 4, 'd': 5, 'e': 6}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'a': 5, 'e': 6}) == {'a': 5, 'b': 3, 'c': 4, 'e': 6}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'a': 5, 'e': 6, 'd': 7}) == {'a': 5, 'b': 3, 'c': 4, 'e': 6, 'd': 7}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({'a': 'A', 'c': 'C'},\n                    {'b': 'B', 'c': 'D'},\n                    {'c': 'E', 'a': 'X'}) == {'a': 'X', 'b': 'B', 'c': 'E', 'c': 'D'}, 'Fail'\nassert     merge_dictionaries_three({'x': 'X', 'c': 'C'},\n                    {'a': 'A', 'c': 'D'},\n                    {'c': 'E', 'a': 'X'}) == {'a': 'X', 'x': 'X', 'c': 'E', 'c': 'D'}, 'Fail'\nassert     merge_dictionaries_three({'x': 'X', 'c': 'C', 'a': 'A'},\n                    {'a': 'A', 'c': 'D'},\n                    {'c': 'E', 'a': 'X'}) == {'a': 'A', 'x': 'X', 'c': 'E', 'c': 'D'}, 'Fail'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three(ct.defaultdict(int),ct.defaultdict(int),ct.defaultdict(int)) == ct.defaultdict(int)\nassert     merge_dictionaries_three(ct.defaultdict(int),ct.defaultdict(int),ct.defaultdict(int)) == ct.defaultdict(int)\nassert     merge_dictionaries_three(ct.defaultdict(int),ct.defaultdict(int),ct.defaultdict(int)) == ct.defaultdict(int)\nassert     merge_dictionaries_three(ct.defaultdict(int),ct.defaultdict(int),ct.defaultdict(int)) == ct.defaultdict(int)\nassert     merge_dictionaries_three(ct.defaultdict(int),ct.defaultdict(int),ct.defaultdict(int)) == ct.defaultdict(int)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three(\n    {'a': 1, 'b': 2},\n    {'b': 3, 'c': 4},\n    {'d': 5, 'e': 6}\n    ) == {'a': 1, 'b': 3, 'c': 4, 'd': 5, 'e': 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({\"x\": 1, \"y\": 2, \"z\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}, {\"d\": 1, \"e\": 2, \"f\": 3}) == {'x': 1, 'y': 2, 'z': 3, 'a': 1, 'b': 2, 'c': 3, 'd': 1, 'e': 2, 'f': 3}\nassert merge_dictionaries_three({\"x\": 1, \"y\": 2, \"z\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}, {\"d\": 1, \"e\": 2}) == {'x': 1, 'y': 2, 'z': 3, 'a': 1, 'b': 2, 'c': 3, 'd': 1, 'e': 2}\nassert merge_dictionaries_three({\"x\": 1, \"y\": 2, \"z\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}, {\"d\": 1, \"e\": 2, \"f\": 3}) == {'x': 1, 'y': 2, 'z': 3, 'a': 1, 'b': 2, 'c': 3, 'd': 1, 'e': 2, 'f': 3}\nassert merge_dictionaries_three({\"x\": 1, \"y\": 2, \"z\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}, {\"d\": 1}) == {'x': 1, 'y': 2, 'z': 3, 'a': 1, 'b': 2, 'c': 3, 'd': 1}\nassert merge_dictionaries_three({\"x\": 1, \"y\": 2, \"z\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}, {\"d\": 1}) == {'x': 1, 'y': 2, 'z': 3, 'a': 1, 'b': 2, 'c': 3, 'd': 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (freq_count(['a', 'b', 'a', 'a', 'b', 'b', 'a', 'c', 'b', 'a']) == {'a':3, 'b':3, 'c':1})\nassert     (freq_count(['a', 'b', 'a', 'a', 'b', 'b', 'a', 'b', 'b', 'a']) == {'a':2, 'b':4})\nassert     (freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == {1:2, 2:2, 3:2, 4:2, 5:1, 6:1, 7:1, 8:1, 9:1})\nassert     (freq_count(['a', 'b', 'a', 'a', 'b', 'b', 'a', 'b', 'b', 'a']) == {'a':2, 'b':3})\n\ndef freq_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     freq_count([1,2,3,4,5,5,5,5,5,5,5,5,5,5]) == {1:5, 2:5, 3:5, 4:5, 5:10}\nassert     freq_count([]) == {}\n\ndef is_sorted(list1):\n    '''\n    Write a function that takes a list as an argument and returns True if the list is sorted, and False if it is not sorted.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     freq_count([1,2,3,4,5,6,7,8,9,10,11]) == collections.Counter({1: 3, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1})\nassert     freq_count([1,2,3,4,5,6,7,8,9,10]) == collections.Counter({1: 3, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1})\nassert     freq_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == collections.Counter({1: 4, 2: 2, 3: 3, 4: 3, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1})\nassert     freq_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == collections.Counter({1: 3, 2: 2, 3: 3, 4: 3, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 50: 1})\nassert     freq_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == collections.Counter({1: 3, 2: 2, 3: 3, 4: 3, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 1, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 29: 1, 30: 1, 31: 1, 32: 1, 33: 1, 34: 1, 35: 1, 36: 1, 37: 1, 38: 1, 39: 1, 40: 1, 41: 1, 42: 1, 43: 1, 44: 1, 45: 1, 46: 1, 47: 1, 48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1, 55: 1, 56: 1, 57: 1, 58: 1, 59: 1, 60: 1, 61: 1, 62: 1, 63: 1, 64: 1, 65: 1, 66: 1, 67: 1, 68: 1, 69: 1, 70: 1, 71: 1, 72: 1, 73: 1, 74: 1, 75: 1, 76: 1, 77: 1, 78: 1, 79: 1, 80: 1, 81: 1, 82: 1, 83: 1, 84: 1, 85: 1, 86: 1, 87: 1, 88: 1, 89: 1, 90: 1, 91: 1, 92: 1, 93: 1, 94: 1, 95: 1, 96: 1, 97: 1, 98: 1, 99: 1, 100: 1})\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     {'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 2, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1, 'A': 1, 'B': 2, 'C': 1, 'D': 1, 'E': 2, 'F': 1, 'G': 1, 'H': 1, 'I': 1, 'J': 1, 'K': 1, 'L': 1, 'M': 1, 'N': 1, 'O': 1, 'P': 1, 'Q': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 1, 'W': 1, 'X': 1, 'Y': 1, 'Z': 1, '0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1} == freq_count([1, 2, 3, 4, 1, 4, 1, 2, 4, 2, 5, 3, 4, 6, 4, 1, 4, 1, 3, 2, 5, 1, 3, 4, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 4, 1, 1, 1, 1, 2, 2, 4, 5, 3, 4, 4, 5, 3, 5, 4, 4, 3, 4, 6, 4, 2, 3, 4, 4, 1, 4, 1, 4, 2, 1, 2, 4, 4, 4, 4, 1, 3, 1, 1, 2, 4, 4, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 3, 2, 2, 3, 1, 3, 2, 1, 3, 1, 1, 4, 2, 3, 3, 1, 4, 4, 1, 1, 4, 2, 2, 2, 4, 4, 2, 4, 1, 2, 2, 3, 4, 4, 2, 2, 4, 1, 2, 4, 1, 1, 4, 3, 4, 5, 1, 4, 4, 3, 2, 4, 4, 3, 4, 4, 4, 1, 3, 4, 3, 1, 1, 1, 1, 4, 3, 1, 2, 4, 1, 3, 3, 3, 4, 2, 3, 2, 1, 1, 1, 4, 2, 1, 2, 3, 1, 3, 2, 3, 3, 1, 1, 2, 1, 4, 2, 1, 3, 1, 1, 1, 1, 1, 2, 3, 3, 1, 1, 1, 1, 3, 2, 1, 3, 4, 5, 3, 1, 1, 4, 1, 2, 1, 4, 5, 4, 4, 1, 5, 1, 3, 4, 1, 3, 3, 1, 3, 4, 1, 3, 2, 2, 1, 4, 3, 4, 2, 1, 3, 1, 3, 1, 1, 2, 1, 2, 3, 3, 2, 1, 2, 2, 2, 1, 2, 1, 2, 4, 2, 2, 1, 4, 4, 3, 1, 2, 1, 3, 3, 1, 3, 1, 3, 1, 2, 1, 1, 3, 1, 1, 3, 3, 3, 2, 4, 1, 4, 1, 2, 1, 1, 3, 1, 1, 1, 3, 4, 5, 1, 4, 1, 4, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 4, 1, 1, 1, 4, 2, 1, 1, 4, 2, 1, 3, 1, 4, 2, 1, 4, 2, 4, 4, 4, 3, 5, 4, 4, 1, 1, 1, 5, 1, 2, 5, 3, 1, 5, 1, 1, 3, 3, 1, 1, 5, 1, 5, 1, 1, 3, 1, 3, 3, 1, 3, 4, 1, 3, 3, 1, 5, 5, 1, 1, 1, 1, 1, 2, 1, 2, 1, 4, 5, 3, 4, 5, 5, 1, 3, 2, 1, 1, 1, 1, 3, 1, 1, 2, 3, 1, 1, 5, 1, 5, 5, 3, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 3, 3, 1, 2, 3, 1, 4, 3, 5, 3, 1, 5, 1, 4, 3, 1, 1, 5, 2, 3, 5, 4, 1, 2, 3, 3, 1, 1, 1, 1, 4, 2, 1, 2, 2, 1, 2, 2, 4, 2, 2, 5, 1, 1, 1, 5, 5, 1, 1, 5, 1, 5, 1, 1, 5, 1, 1, 5, 1, 3, 5, 1, 3, 4, 5, 1, 4, 1, 1, 5, 4, 1, 1, 1, 3, 2, 1, 3, 1, 5, 3, 4, 1, 5, 1, 3, 4, 2, 4, 1, 3, 4, 3, 1, 2, 1, 5, 1, 1, 4, 5, 1, 5, 1, 4, 5, 1, 5, 2, 5, 1, 5, 1, 1, 4, 1, 3, 1, 2, 4, 2, 1, 1, 2, 2, 1, 5, 1, 3, 1, 2, 5, 1, 3, 5, 5, 1, 5, 1, 1, 1, 2, 1, 4, 5, 5, 1, 5, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     freq_count([1,2,3,1,2,3,4,2,5,4,5,4,5,4,5,3]) == {\n                1:4,\n                2:5,\n                3:3,\n                4:2,\n                5:4\n            }\n\ndef sort_by_frequency(list2):\n    '''\n    Write a function that takes a list and returns a list sorted by frequency, \n    with the most frequent first. The frequencies of the elements in the \n    list should be calculated with the help of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,1,1,1]) == {1:4}\nassert     freq_count([1,1,1,2,2,3,3,3,4]) == {1:2,2:3,3:4}\nassert     freq_count([1,1,1,2,2,3,3,3,4]) == {1:2,2:3,3:4}\nassert     freq_count([1,1,2,2,3,3,4]) == {1:2,2:2,3:2,4:1}\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     {1: 1, 2: 1, 3: 2, 4: 1, 5: 2, 6: 1, 7: 1} == freq_count([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7])\n\ndef freq_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     freq_count([1,1,1,2,2,2,3,3,3]) == {1:3, 2:3, 3:3}\nassert     freq_count([1,1,1,2,2,2,3]) == {1:2, 2:3, 3:1}\nassert     freq_count([1,2,3,4,5,6,7,8,9]) == {1:1, 2:2, 3:3, 4:2, 5:1, 6:1, 7:1, 8:1, 9:1}\nassert     freq_count([1,2,3,4,5,6,7,8,9,10]) == {1:1, 2:2, 3:3, 4:2, 5:1, 6:1, 7:1, 8:1, 9:1, 10:1}\nassert     freq_count([]), {}\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (freq_count([1, 2, 1, 3, 3, 1]) == {1: 3, 2: 1, 3: 2})\nassert     (freq_count([1, 3, 2, 1, 3, 2, 1]) == {1: 3, 2: 2, 3: 2})\nassert     (freq_count([1, 3, 2, 1, 3, 2, 1, 1]) == {1: 4})\nassert     (freq_count([]) == {})\n\ndef longest_common_substring(s1, s2):\n    '''\n    Write a function to find the longest common substring between two strings.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     closest_num(1) == 0\nassert     closest_num(2) == 0\nassert     closest_num(3) == 0\nassert     closest_num(4) == 0\nassert     closest_num(5) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_num(5) == 4\nassert     closest_num(100) == 99\nassert     closest_num(100) == 99\nassert     closest_num(42) == 41\nassert     closest_num(40) == 39\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_num(3) == 2\nassert     closest_num(2) == 1\nassert     closest_num(9) == 8\nassert     closest_num(9.9) == 8.0\nassert     closest_num(1) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_num(23) == 22\nassert     closest_num(5) == 4\nassert     closest_num(10) == 9\nassert     closest_num(22) == 21\nassert     closest_num(23) == 22\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_num(8) == 7\nassert     closest_num(7) == 6\nassert     closest_num(6) == 5\nassert     closest_num(5) == 4\nassert     closest_num(4) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_num(3) == 2\nassert     closest_num(13) == 12\nassert     closest_num(12) == 11\nassert     closest_num(5) == 4\nassert     closest_num(19) == 18\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [closest_num(n) for n in [0,1,3,5,6,8,9]] == [0,1,3,4,5,6,7]\nassert     [closest_num(n) for n in [5,6,7,9,10,11,12,13]] == [5,5,5,5,6,6,6,7]\nassert     [closest_num(n) for n in [11,12,13,15,16,17,18,19]] == [11,10,9,8,7,6,5,4]\nassert     [closest_num(n) for n in [1,2,3,5,7,8,9,10]] == [1,1,1,1,2,2,2,3]\nassert     [closest_num(n) for n in [11,12,13,15,16,17,18,19]] == [11,10,9,8,7,6,5,4]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_num(13) == 12\nassert     closest_num(1234) == 1233\nassert     closest_num(1234) == 1235\nassert     closest_num(1234) == 1234\nassert     closest_num(17) == 16\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_num(10) == 9\nassert     closest_num(9) == 8\nassert     closest_num(11) == 10\nassert     closest_num(5) == 4\nassert     closest_num(11) == 10\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_num(8) == 7\nassert     closest_num(12) == 11\nassert     closest_num(14) == 13\n\ndef closest_num2(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return min(n, closest_num2(n-1))\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     len_log('something')    ==    0\nassert     len_log('something')    ==    3\nassert     len_log('something')    ==    6\nassert     len_log('something')    ==    3\n\ndef first_elem(list1):\n    '''\n    Write a python function to return the first element of the list.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     len_log(['Python', 'C', 'Java', 'C++', 'GO']) == 5, 'incorrect'\nassert     len_log(['Go', 'Java', 'Python', 'Java', 'Python']) == 3, 'incorrect'\nassert     len_log(['a', 'ab', 'abc']) == 3, 'incorrect'\nassert     len_log(['a', 'abc', 'abc']) == 3, 'incorrect'\nassert     len_log(['a', 'b', 'a', 'b', 'c']) == 3, 'incorrect'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     len_log(['hello', 'world', 'hello']) == 3\nassert     len_log(['hello', 'world', 'how', 'are', 'you']) == 4\nassert     len_log([]) == 0\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) == 5\nassert     len_log(['h', 'e', 'l', 'l', 'o']) == 4\nassert     len_log(['z', 'x', 'c', 'v', 'b', 'n','m']) == 5\nassert     len_log(['x', 'c', 'a', 'l', 'h','m', 'a', 'b', 'c','m']) == 6\nassert     len_log(['e', 'f', 'g', 'h', 'i', 'j', 'k']) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     len_log(['this', 'is', 'a', 'test']) == 4\nassert     len_log(['a']) == 1\nassert     len_log(['a', 'a', 'b', 'c']) == 3"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     len_log(['spam', 'eggs','sausage','spam', 'tomatoes','spam']) == 5\nassert     len_log(['','spam', 'eggs','sausage','spam', 'tomatoes','spam']) == 8\nassert     len_log(['hello', '', 'world']) == 3\nassert     len_log(['hello', 'python', 'world']) == 6\nassert     len_log([]) == 0\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     len_log(['hello', 'world', 'greetings', 'from']) == 5\nassert     len_log(['one', 'two', 'three']) == 3\nassert     len_log(['one', 'two', 'three', 'four']) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         len_log(['hello','moe', 'hello', 'is', 'great']) == 6\nassert         len_log(['v', 'i', 'i', 'i', 'i', 'i', 'i', 'i']) == 8\nassert         len_log(['the', 'list', 'is','very', 'long']) == 5\nassert         len_log(['the', 'list', 'is','very', 'long', 'and', 'a','very', 'long', 'word']) == 10\nassert         len_log(['the', 'list', 'is','very', 'long', 'and', 'a','very', 'long', 'word', 'is', 'also', 'a','very', 'long', 'word']) == 10\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef is_vowel(letter):\n    '''\n    Write a python function to determine if a letter is a vowel or not.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         len_log(['hello', 'world'])         ==    5\nassert         len_log(['how', 'are', 'you'])     ==    5\nassert         len_log(['this', 'is', 'a', 'test'])     ==    6\nassert         len_log([])                                     ==    0\n\ndef is_perm(list1, list2):\n    '''\n    Write a python function to check if two lists are permutations of each other.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_substring('aaa', 'a') == True\nassert     find_substring('aaa', 'aa') == True\nassert     find_substring('aaa', 'aaa') == True\nassert     find_substring('aaa', 'zzz') == False\nassert     find_substring('aaa', 'bbb') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef find_substring_v2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str_list = list(str1)\n    for idx, char in enumerate(sub_str):\n        if char not in str_list:\n            return False\n\n        str_list.remove(char)\n\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_substring(['this', 'that', 'is', 'an', 'example'], 'an') == 2\nassert     find_substring(['this', 'that', 'is', 'an', 'example'], 'is') == 1\nassert     find_substring(['this', 'that', 'is', 'an', 'example'], 'not') == -1\nassert     find_substring(['this', 'that', 'is', 'an', 'example'], 'x') == -1\nassert     find_substring(['this', 'that', 'is', 'an', 'example'], 'y') == -1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_substring([\"abcd\", \"abce\", \"abcf\", \"abcdef\"], \"abcd\") == True\nassert     find_substring([\"abcd\", \"abce\", \"abcf\", \"abcdef\"], \"abcdg\") == False\nassert     find_substring([\"abcd\", \"abce\", \"abcf\", \"abcdef\"], \"abcdz\") == False\nassert     find_substring([\"abcd\", \"abce\", \"abcf\", \"abcdef\"], \"abc\") == True\nassert     find_substring([\"abcd\", \"abce\", \"abcf\", \"abcdef\"], \"abcabcd\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_substring('aaa', 'a') == True\nassert     find_substring('aaa', 'aa') == True\nassert     find_substring('aaa', 'aaa') == True\nassert     find_substring('aaa', 'b') == False\nassert     find_substring('', '') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_substring(['abcd','xyz','abab','abbb'], 'abab') == 1, \"Find substring 'abab' in ['abcd','xyz','abab','abbb']\"\nassert     find_substring(['abcd','xyz','abab','abbb'], 'xyz') == 2, \"Find substring 'xyz' in ['abcd','xyz','abab','abbb']\"\nassert     find_substring(['abcd','xyz','abab','abbb'], 'abab') == 4, \"Find substring 'abab' in ['abcd','xyz','abab','abbb']\"\nassert     find_substring(['abcd','xyz','abab','abbb'], 'bbb') == -1, \"Find substring 'bbb' in ['abcd','xyz','abab','abbb']\"\nassert     find_substring(['abcd','xyz','abab','abbb'], '') == -1, \"Find substring 'bbb' in ['abcd','xyz','abab','abbb']\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_substring('program', ['program', 'programs']) == 'program'\nassert     find_substring('program', ['program', 'programs', 'prog']) == 'program'\nassert     find_substring('program', ['program', 'prog', 'programs']) == None\nassert     find_substring('program', ['programs']) == None\nassert     find_substring('program', ['program', 'programs']) == None\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_substring('abcd', 'abcd') == True\nassert     find_substring('abcd', 'abcd') == True\nassert     find_substring('abcd', 'abcd') == True\nassert     find_substring('abcd', 'abc') == False\nassert     find_substring('abcd', 'a') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_substring(['abc', 'abcd', 'abdc', 'abcde', 'abcdfg'], 'abcd') == True\nassert     find_substring(['abc', 'abcd', 'abdc', 'abcde', 'abcdfg'], 'bcd') == True\nassert     find_substring(['abc', 'abcd', 'abdc', 'abcde', 'abcdfg'], 'abcde') == True\nassert     find_substring(['abc', 'abcd', 'abdc', 'abcde', 'abcdfg'], 'abcdfg') == True\nassert     find_substring(['abc', 'abcd', 'abdc', 'abcde', 'abcdfg'], 'abc') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_substring(\n            \"the quick brown fox jumps over the lazy dog\",\n            \"fox\"\n        )\nassert     not find_substring(\n            \"the quick brown fox jumps over the lazy dog\",\n            \"dog\"\n        )\nassert     not find_substring(\n            \"the quick brown fox jumps over the lazy dog\",\n            \"dog\"\n        )\nassert     not find_substring(\n            \"the quick brown fox jumps over the lazy dog\",\n            \"dog\"\n        )\nassert     not find_substring(\n            \"the quick brown fox jumps over the lazy dog\",\n            \"dog\"\n        )\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_undulating(1234) == True\nassert     is_undulating(3213) == True\nassert     is_undulating(1134) == True\nassert     is_undulating(123) == True\nassert     is_undulating(12) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_undulating(5) == False\nassert     is_undulating(7) == True\nassert     is_undulating(14) == True\nassert     is_undulating(15) == False\nassert     is_undulating(12) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef is_perfect(n):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    pass"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_undulating(33) == True\nassert     is_undulating(12) == False\nassert     is_undulating(23) == True\nassert     is_undulating(3) == False\nassert     is_undulating(21) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_undulating(9) == True     # 9 = 5 + 5 + 5\nassert     is_undulating(10) == True     # 10 = 5 + 5 + 5 + 5\nassert     is_undulating(11) == False     # 11 = 5 + 5 + 5 + 5 + 5\nassert     is_undulating(12) == False     # 12 = 5 + 5 + 5 + 5 + 5 + 5\nassert     is_undulating(13) == False     # 13 = 5 + 5 + 5 + 5 + 5 + 5 + 5\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_undulating(12345) == True     , \"is_undulating(12345) == True\"\nassert     is_undulating(1234) == False, \"is_undulating(1234) == False\"\nassert     is_undulating(112) == False, \"is_undulating(112) == False\"\nassert     is_undulating(112233) == True     , \"is_undulating(112233) == True\"\nassert     is_undulating(11223344) == False, \"is_undulating(11223344) == False\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_undulating(529)\nassert     not is_undulating(520)\nassert     is_undulating(15)\nassert     not is_undulating(16)\nassert     not is_undulating(17)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_undulating(100) == True\nassert     is_undulating(101) == True\nassert     is_undulating(10001) == True\nassert     is_undulating(10000) == False\nassert     is_undulating(21) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_undulating(1)\nassert     is_undulating(2)\nassert     is_undulating(3)\nassert     is_undulating(4)\nassert     is_undulating(5)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_undulating(1)     == True\nassert     is_undulating(2)     == False\nassert     is_undulating(3)     == False\nassert     is_undulating(4)     == True\nassert     is_undulating(5)     == False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     power(2,3) == 8\nassert     power(5,2) == 25\nassert     power(3,9) == 27\nassert     power(6,6) == 36\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     power(2,0) == 1\nassert     power(2,1) == 2\nassert     power(2,2) == 4\nassert     power(2,3) == 8\nassert     power(2,4) == 16\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     power(2,0)==1\nassert     power(2,1)==2\nassert     power(2,2)==4\nassert     power(2,3)==8\nassert     power(2,-2)==0.25\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     2 ** 3 == 8, \"the result is not correct\"\nassert     2 ** 4 == 16, \"the result is not correct\"\nassert     3 ** 0 == 1, \"the result is not correct\"\nassert     3 ** 1 == 3, \"the result is not correct\"\nassert     3 ** 2 == 9, \"the result is not correct\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     power(2,3) == 8\nassert     power(2,-3) == 0.125\nassert     power(-1,2) == -1\nassert     power(-1,-2) == 1\nassert     power(1,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nassert power(2,2) == 4\nassert power(3,3) == 27\nassert power(3,0) == 1\nassert power(0,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     power(2,5) == 32, '2^5 is 32'\nassert     power(3,2) == 9, '3^2 is 9'\nassert     power(4,2) == 16, '4^2 is 16'\nassert     power(3,3) == 27, '3^3 is 27'\nassert     power(5,0) == 1, '5^0 is 1'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     power(2,2)==4\nassert     power(2,3)==8\nassert     power(3,2)==9\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     power(1,0) == 1\nassert     power(1,1) == 1\nassert     power(1,2) == 1\nassert     power(2,0) == 1\nassert     power(2,1) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ix_min([(0,3), (2,1), (4,5), (1,2), (0,8)]) == (0,3)\nassert ix_min([(0,3), (2,1), (4,5), (1,2), (0,8), (7,3), (1,2), (0,8)]) == (0,3)\nassert ix_min([(0,3), (2,1), (4,5), (1,2), (0,8), (0,3), (1,2), (0,8)]) == (0,3)\n\ndef find_index_smallest(mylist, goal):\n    '''\n    Given a list of tuples, return the index of the tuple with the smallest value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     index_minimum( [(3,6), (2,5), (1,4)] ) == 1\nassert     index_minimum( [(1,7), (2,5), (3,4)] ) == 2\nassert     index_minimum( [(0,8), (1,4), (2,3)] ) == 0\nassert     index_minimum( [(0,8), (0,2), (0,9)] ) == 0\nassert     index_minimum( [(0,8), (1,2), (2,0)] ) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     index_minimum( [(3,3), (1,4), (2,3), (4,5)] ) == 1\nassert     index_minimum( [(1,3), (2,4), (3,5), (4,5)] ) == 1\nassert     index_minimum( [(1,3), (1,4), (2,3), (4,5)] ) == 1\nassert     index_minimum( [(1,3), (2,4), (3,5), (4,5)] ) == 3\nassert     index_minimum( [(1,3), (1,4), (2,3), (4,5)] ) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     index_minimum([(2, 4), (1, 3), (5, 9), (5, 8), (6, 7)]) == (2, 4)\nassert index_minimum([(4, 4), (1, 1), (6, 7), (2, 8)]) == (4, 4)\nassert index_minimum([(4, 4), (1, 1), (6, 7), (2, 8), (4, 4)]) == (2, 8)\nassert index_minimum([(4, 4), (1, 1), (6, 7), (2, 8), (4, 4), (1, 1)]) == (1, 1)\n\ndef sum_of_two(numbers, target):\n    '''\n    Given a list of numbers and a target number, write a function that returns a list of two numbers whose sum is the target.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ix_min([(0, 10), (5, 4), (2, 5)]) == 2\nassert ix_min([(-1, -10), (0, 0), (5, 4), (2, 5)]) == -1\nassert ix_min([(0, 10), (5, 4), (2, 5)]) == 0\nassert ix_min([(-1, -10), (0, 0), (5, 4), (2, 5)]) == -1\nassert ix_min([(0, 10), (5, 4), (2, 5)]) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     index_minimum( [ (1, 3), (2,5), (2,4), (4,5) ]) == 2\nassert     index_minimum([(1,3), (2,5), (2,4), (4,5)]) == 2\nassert     index_minimum([ (1,3), (2,5), (2,4), (4,5) ]) == 2\nassert     index_minimum([(1,3), (2,5), (2,4), (4,5)]) == 2\nassert     index_minimum([(1,3), (2,5), (2,4), (4,5) ]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     index_minimum([('Bananas', 2), ('Apples', 4), ('Pears', 1)]) == 'Apples'\nassert     index_minimum([('Bananas', 2), ('Apples', 4), ('Oranges', 2)]) == 'Bananas'\nassert     index_minimum([('Bananas', 2), ('Apples', 4), ('Oranges', 1)]) == 'Oranges'\nassert     index_minimum([('Bananas', 1), ('Apples', 3), ('Oranges', 2)]) == 'Bananas'\nassert     index_minimum([('Bananas', 1), ('Apples', 3), ('Oranges', 2), ('Grapes', 1)]) == 'Bananas'\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     index_minimum([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 1\nassert index_minimum([(1,2), (3,2), (5,5), (7,8), (9,10)]) == 3\nassert index_minimum([(1,2), (3,3), (5,5), (7,8), (9,10)]) == 5\nassert index_minimum([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 1\nassert index_minimum([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     index_minimum([(0,5),(1,4),(2,3),(3,2),(4,1)]) == 0\nassert     index_minimum([(0,5),(1,1),(2,3),(3,2),(4,1)]) == 1\nassert     index_minimum([(0,1),(1,3),(2,3),(3,2),(4,1)]) == 1\nassert     index_minimum([(0,1),(1,3),(2,5),(3,2),(4,1)]) == 2\nassert     index_minimum([(0,1),(1,3),(2,5),(3,2),(4,5)]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     index_minimum([(1, 3), (2, 4), (5, 7), (5, 1), (0, 1)]) == 0\nassert     index_minimum([(1, 3), (2, 4), (5, 7), (5, 1), (0, 0)]) == 0\nassert     index_minimum([(1, 3), (2, 3), (5, 7), (5, 1), (0, 0)]) == 1\nassert     index_minimum([(1, 3), (2, 4), (5, 7), (5, 1), (0, 0), (0, 1)]) == 1\nassert     index_minimum([(1, 3), (2, 4), (5, 7), (5, 1), (0, 0), (0, 0)]) == 0\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([[]]) == 0\nassert     Find_Min_Length([[], []]) == 0\nassert     Find_Min_Length([[], [1, 2, 3, 4], [5, 6, 7, 8]]) == 3\nassert     Find_Min_Length([[], [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Find_Min_Length( [[1, 2, 3], [2, 3, 4], [3, 4, 5]] ) == 2, \"Failed\"\nassert     Find_Min_Length( [[1, 2, 3], [1, 2, 3], [1, 2, 3]] ) == 1, \"Failed\"\nassert     Find_Min_Length([ [], [2, 3, 4], [5, 6, 7]] ) == 2, \"Failed\"\nassert     Find_Min_Length([ [1, 2, 3], [2, 3, 4, 5, 6, 7, 8], [1, 2, 3]] ) == 1, \"Failed\"\nprint \"Passed. (Add more tests to be more sure!)\"\n\ndef Matrix_Multiplication(list_a, list_b):\n    '''\n    Write a python function to multiply two matrices.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[1,2,3], [5,5,6], [7,8,9]]) == 2\nassert     Find_Min_Length([[3,5,8], [1,9,0], [4,5,6]]) == 3\nassert     Find_Min_Length([[1,2,3,4], [2,3,4,5], [1,2,3,4], [2,3,4,5], [1,2,3,4]]) == 1\nassert     Find_Min_Length([[0,2,3,4], [1,9,2,3], [4,5,6,7], [8,9,0,1], [3,5,6,7]]) == 1\nassert     Find_Min_Length([[3,5,6], [1,9,0], [4,5,6]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Find_Min_Length( [[1, 2, 3], [5, 6, 7], [11, 12, 13, 14, 15, 16]] ) == 3\nassert     Find_Min_Length( [[1], [2], [3], [4]] ) == 1\nassert     Find_Min_Length( [[3, 7], [5, 8, 10], [6, 9, 11], [4, 12, 13, 14, 15, 16, 17], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]] ) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[5, 8, 1, 1, 9], [4, 3, 6, 9, 3], [2, 4, 5, 2, 1], [1, 3, 7, 8, 5], [2, 2, 2, 2, 2]]) == 2\nassert     Find_Min_Length([[4, 3, 6, 9, 3], [2, 4, 5, 2, 1], [1, 3, 7, 8, 5], [2, 2, 2, 2, 2]]) == 1\nassert     Find_Min_Length([[5, 8, 1, 1, 9], [4, 3, 6, 9, 3], [2, 4, 5, 2, 1], [1, 3, 7, 8, 5], [2, 2, 2, 2, 2]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 1\nassert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 1\nassert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13, 14]]) == 1\nassert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16]]) == 1\nassert     Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24, 25]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == 5\nassert     Find_Min_Length([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == 5\nassert     Find_Min_Length([[1,2,3,4,5]]) == 5\nassert     Find_Min_Length([[1,2,3,4,5,6]]) == 5\nassert     Find_Min_Length([[1,2,3,4,5,6,7]]) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[1,2,3],[1,2,3,4],[1,2,3,4,5]]) == 1\nassert     Find_Min_Length([[1,2,3],[1,2,3,4],[1,2,3,4,5,6,7]]) == 1\nassert     Find_Min_Length([[1,2,3,4],[1,2,3,4,5,6,7,8]]) == 1\nassert     Find_Min_Length([[1,2,3,4,5],[1,2,3,4,5,6,7,8,9]]) == 1\nassert     Find_Min_Length([[1,2,3,4,5,6],[1,2,3,4,5,6,7,8,9,10]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8]]) == 3\nassert Find_Min_Length([[1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8]]) == 3\nassert Find_Min_Length([[1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8]]) == 3\nassert Find_Min_Length([[1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8]]) == 3\nassert Find_Min_Length([[1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8], [1,2,3], [2,4,6], [7,8,9], [4,5,6], [5,7,8]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (Find_Min_Length([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]) == 4)\nassert     (Find_Min_Length([[1,2,3], [4,5,6,7]]) == 2)\nassert     (Find_Min_Length([[1,2,3], [1,2,3], [4,5,6,7]]) == 2)\nassert     (Find_Min_Length([[1,2,3,4], [1,2,3,4], [1,2,3,4]]) == 1)\nassert     (Find_Min_Length([[1,2,3], [1,2,3]]) == 2)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_divisor():\n    assert divisor(2) == 1\n    assert divisor(3) == 2\n    assert divisor(6) == 2\n    "
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\nimport random\nfrom hypothesis import given, example\nimport hypothesis.strategies as st\nimport numpy as np\n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\n\n\nassert \n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     divisor(1) == 2\nassert     divisor(2) == 2\nassert     divisor(3) == 3\nassert     divisor(4) == 4\nassert     divisor(5) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     divisor(1)    == 1,     '1'\nassert     divisor(2)    == 1,     '2'\nassert     divisor(3)    == 2,     '3'\nassert     divisor(4)    == 2,     '4'\nassert     divisor(5)    == 1,     '5'\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ___________ == divisor(12345)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 2\nassert     divisor(4) == 2\nassert     divisor(5) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     divisor(1) == 1\nassert     divisor(2) == 1\nassert     divisor(3) == 1\nassert     divisor(4) == 2\nassert     divisor(5) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     divisor(4) == 3\nassert     divisor(6) == 4\nassert     divisor(8) == 6\nassert     divisor(9) == 3\nassert     divisor(10) == 4\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     divisor(5) == 2\nassert     divisor(10) == 4\nassert     divisor(11) == 4\nassert     divisor(20) == 6\n\ndef numFactors(n):\n    '''\n    Write a python function to count the number of factors of an integer.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     frequency_lists([1, 2, 3]) == {1: 1, 2: 1, 3: 1}\nassert     frequency_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1: 3, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists(['a', 'b', 'c']) == {'a': 1, 'b': 1, 'c': 1}\nassert     frequency_lists([['a', 'b'], ['c', 'd']]) == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert     frequency_lists([[], [], []]) == {0: 3}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     {1:3,2:1,3:3,4:2,5:1} == frequency_lists([[1,1,1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5,5]])\nassert     {1:1,2:1,3:1,4:1,5:1} == frequency_lists([[1,1,1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5,5],[1,1,1]])\nassert     {1:1,2:1,3:1,4:1,5:1} == frequency_lists([[1,1,1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5,5],[1,1,1],[1,1,1],[1,1,1]])\nassert     {1:1,2:1,3:1,4:1,5:1} == frequency_lists([[1,1,1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5,5],[1,1,1],[1,1,1],[1,1,1],[1,1,1]])\nassert     {1:1,2:1,3:1,4:1,5:1} == frequency_lists([[1,1,1],[2,2],[3,3,3],[4,4,4,4],[5,5,5,5,5],[1,1,1],[1,1,1],[1,1,1],[1,1,1]])\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef start_here(a):\n    '''\n    Write a function to return the index of first occurrence of a in a list. If there is no such value, return -1.\n    '''\n    pass"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1,2],[3,4],[5,6],[7,8]]) == {\n            1:1,\n            2:2,\n            3:1,\n            4:1,\n            5:1,\n            6:1,\n            7:1,\n            8:1\n}\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     frequency_lists([1,2,3,4,5,6,7]) == {1:1, 2:1, 3:2, 4:2, 5:2, 6:1, 7:1}, 'Failed frequency_lists'\nassert     frequency_lists([[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]]) == {1:3, 2:3, 3:3, 4:3, 5:3, 6:3, 7:3}, 'Failed frequency_lists'\nassert     frequency_lists([['a','b','c'],['a','b','c']]) == {'a':2, 'b':2, 'c':2}, 'Failed frequency_lists'\nassert     frequency_lists(['a','b','c']) == {'a':1, 'b':1, 'c':1}, 'Failed frequency_lists'\nassert     frequency_lists(['a','b']) == {'a':1, 'b':1}, 'Failed frequency_lists'\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1,2,3,4,5,6,7,8,9],['a','b','c','d','e','f','g','h']]) == {1:3,2:3,3:2,4:1,5:1,6:1,7:1,8:1,9:1}\nassert     frequency_lists([[1,2,3,4,5,6,7,8,9],[1,1,1,1,1,1,1,1,1]]) == {1:3,2:3,3:2,4:1,5:1,6:1,7:1,8:1,9:1}\nassert     frequency_lists([[1,2,3,4,5,6,7,8,9],[1,1,1,1,1,1,1,1,1]]) == {1:3,2:3,3:2,4:1,5:1,6:1,7:1,8:1,9:1}\n\ndef string_compression(string):\n    '''\n    Write a function to encode a string into a list of integer codes \n    where each code represents a character in the string. \n    The codes should be in the same order as the original characters. \n    The function should ignore character that is not in the string. \n    \n    Example:\n    >>> string_compression('aa')\n    [0, 1]\n    >>> string_compression('aab')\n    [0, 1, 2]\n    >>> string_compression('a')\n    [0]\n    >>> string_compression('x')\n    []\n    >>> string_compression('a'*50)\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1} == frequency_lists(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n\ndef histogram(s):\n    '''\n    Write a function that takes a string and returns a dictionary with each unique character as the key and the number of times it appears in the string as the value.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1, 2, 3], [3, 4, 1, 1], [5, 5, 5, 5, 5]]) == {1: 3, 2: 1, 3: 2, 4: 1, 5: 5}\nassert     frequency_lists([['a', 'a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c']]) == {'a': 3, 'b': 2, 'c': 3}\nassert     frequency_lists([]) == {}\nassert     frequency_lists([[], [], [], [], []]) == {}\n\ndef count_substring(string, sub_string):\n    '''\n    Write a function to find the count of number of times a substring appears in a string, and return the count in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1, 2, 3], [2, 4, 5], [3, 4, 6]]) == { 1: 3, 2: 3, 3: 3, 4: 3, 5: 1, 6: 1 }\nassert     frequency_lists([[1, 2, 3], [4, 5, 6]]) == { 1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1 }\nassert     frequency_lists([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == { 1: 5 }\nassert     frequency_lists([]) == {}\n\ndef flatten(list1):\n    '''\n    Write a function to flatten a list of lists to a single list, in recursion.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     frequency_lists([]) == {}\nassert     frequency_lists([[1,2],[3,4]]) == {1:2, 2:1, 3:1, 4:1}\nassert     frequency_lists([[1,2,3,4],[5,6,7,8]]) == {1:2, 2:1, 3:1, 4:2, 5:1, 6:1, 7:1, 8:1}\nassert     frequency_lists([[1,2,3],[2,3,4],[3,4,5],[4,5,6]]) == {1:2, 2:3, 3:4, 4:2, 5:2, 6:1}\nassert     frequency_lists([[1,2,3,4],[2,3,4,5,6,7,8],[3,4,5,6,7,8,9],[4,5,6,7,8,9,10]]) == {1:2, 2:3, 3:4, 4:3, 5:2, 6:2, 7:2, 8:1, 9:1}\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5]) == 120\nassert     multiply_num([0, 2, 3, 4]) == 0\nassert     multiply_num([2, 3, 4]) == 24"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply_num([2,3,4]) == 24\nassert     multiply_num([1,2,3]) == 6\n\ndef compute_intersection(list1, list2):\n    '''\n    Given two lists of integers, compute their intersection.\n    Return the intersection in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply_num([2, 2, 2, 2, 2]) == [8, 16, 32, 64, 128]\nassert     multiply_num([2, 2, 2, 2]) == [8, 16, 32, 64]\nassert     multiply_num([3, 3, 3, 3, 3]) == [9, 9, 9, 9, 9]\nassert     multiply_num([1, 2, 3, 4, 5]) == [5, 10, 15, 20, 25]\nassert     multiply_num([5, 10, 15, 20, 25]) == [5, 10, 15, 20, 25]\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5]) == 120, \"Test 1 failed\"\nassert     multiply_num([4, 5]) == 20, \"Test 2 failed\"\nassert     multiply_num([]) == 1, \"Test 3 failed\"\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\n\ndef display_board(board):\n    '''\n    prints the board\n    '''\n    print('Welcome to Tic-Tac-Toe!')\n    print('   '+ board[7] + '|' + board[8] + '|' + board[9])\n    print('   '+ board[4] + '|' + board[5] + '|' + board[6])\n    print('   '+ board[1] + '|' + board[2] + '|' + board[3])\n\n\ndef check_input(board, user):\n    '''\n    Takes user input and checks if it is already occupied.\n    '''\n    return board[user] == 'X' or board[user] == 'O'\n\n\ndef check_winner(board, letter):\n    '''\n    Returns True if there are three instances of letter in a row and False if not.\n    '''\n    return (board[1] == board[2] == board[3] == letter or \n            board[4] == board[5] == board[6] == letter or \n            board[7] == board[8] == board[9] == letter or \n            board[1] == board[4] == board[7] == letter or \n            board[2] == board[5] == board[8] == letter or \n            board[3] == board[6] == board[9] == letter or \n            board[1] == board[5] == board[9] == letter or \n            board[3] == board[5] == board[7] == letter)\n\n\ndef player_input():\n    '''\n    Takes user input and assigns a marker to the player.\n    '''\n    marker = ''\n    while marker!= 'X' and marker!= 'O':\n        marker = input('Player 1: Do you want to be X or O?').upper()\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([1, 2, 3]) == 6\nassert     multiply_num([1, 2, 3, 4, 5]) == 120\nassert     multiply_num([0, 2, 3, 4]) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply_num([1,2,3,4,5]) == [120,60,40,30,24]\nassert     multiply_num([5,3,3,3]) == [300,300,300,300]\nassert     multiply_num([1,1,1]) == [3,3,3]\n\ndef multiply_num_bad(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [float(num) * len(numbers) for num in numbers]\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5]) == [5, 10, 15, 20, 25]\nassert     multiply_num([1, 2, 3, 4]) == [24, 12, 8, 6, 2]\nassert     multiply_num([1, 2, 3]) == [6, 3, 2]\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(1) == \"1\", \"1\"\nassert     decimal_to_binary(2) == \"10\", \"2\"\nassert     decimal_to_binary(3) == \"11\", \"3\"\nassert     decimal_to_binary(4) == \"100\", \"4\"\nassert     decimal_to_binary(5) == \"101\", \"5\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) ==     '0'\nassert     decimal_to_binary(1) ==     '1'\nassert     decimal_to_binary(2) ==     '10'\nassert     decimal_to_binary(3) ==     '11'\nassert     decimal_to_binary(4) ==     '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(13) == \"1101\"\nassert     decimal_to_binary(123456789) == \"11101101110001010100101101100111001111101110011000011011110110111100101\"\nassert     decimal_to_binary(123456789) == \"11101101110001010100101101100111001111101110011000011011110110111100101\"\nassert     decimal_to_binary
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(5) == \"101\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(8) == '1000'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(8) == '1000'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\nassert decimal_to_binary(0) == '0'\nassert decimal_to_binary(1) == '1'\nassert decimal_to_binary(2) == '10'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(100) == '1100'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(5) == '101'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0)     == '0'\nassert     decimal_to_binary(1)     == '1'\nassert     decimal_to_binary(2)     == '10'\nassert     decimal_to_binary(3)     == '11'\nassert     decimal_to_binary(4)     == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0)    == '0'\nassert     decimal_to_binary(1)    == '1'\nassert     decimal_to_binary(2)    == '10'\nassert     decimal_to_binary(3)    == '11'\nassert     decimal_to_binary(4)    == '100'\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(123) == 321\nassert     next_smallest_palindrome(12345) == 12345\nassert     next_smallest_palindrome(10000) == 11000\nassert     next_smallest_palindrome(123456789) == 123456789\nassert     next_smallest_palindrome(1234567890123) == 1234567890123\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(1234)    == 1235\nassert     next_smallest_palindrome(12343)    == 12344\nassert     next_smallest_palindrome(123432)    == 123433\nassert     next_smallest_palindrome(12343213)    == 1234321234\nassert     next_smallest_palindrome(12343213213)    == 123432132131\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(1234) == 1235\nassert     next_smallest_palindrome(9876) == 9885\nassert     next_smallest_palindrome(10011) == 10100\n\ndef make_perfect(num):\n    '''\n    A perfect number is a number which is equal to the sum of all its positive divisors excluding the number itself.\n    Write a function to check if a number is a perfect number or not.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(121) == 123\nassert     next_smallest_palindrome(1233) == 1234\nassert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(1331) == 1332\nassert     next_smallest_palindrome(123456789) == 123456789\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(12345) == 12351\nassert     next_smallest_palindrome(1234) == 123\nassert     next_smallest_palindrome(123) == 12\nassert     next_smallest_palindrome(12) == 121\nassert     next_smallest_palindrome(1) == 11\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(101) == 101\nassert     next_smallest_palindrome(112) == 111\nassert     next_smallest_palindrome(1000) == 101\nassert     next_smallest_palindrome(25) == 21\nassert     next_smallest_palindrome(0) == 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(11) == 21\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(13) == 31\nassert     next_smallest_palindrome(999) == 1001\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(1) == 9\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(100) == 101\nassert     next_smallest_palindrome(1000) == 1001\nassert     next_smallest_palindrome(10000) == 10001\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(123456789) == 12345679\nassert     next_smallest_palindrome(1234567890123) == 123456789012\nassert     next_smallest_palindrome(0) == 1\nassert     next_smallest_palindrome(1) == 1\nassert     next_smallest_palindrome(123456789) == 12345678\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(1234) == 4321\nassert     next_smallest_palindrome(12345) == 12345\nassert     next_smallest_palindrome(11) == 121\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(9) == 101\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     kth_element([1,2,3,4,5,6,7,8,9,10], 3) == 5\nassert kth_element([1,2,3,4,5,6,7,8,9,10], 4) == 6\nassert kth_element([1,2,3,4,5,6,7,8,9,10], 7) == 9\nassert kth_element([1,2,3,4,5,6,7,8,9,10], 8) == 10\nassert kth_element([1,2,3,4,5,6,7,8,9,10], 9) == 7\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     kth_element([], 1) == None\nassert     kth_element([], 2) == None\nassert     kth_element([1,2,3,4], 1) == 1\nassert     kth_element([1,2,3,4,5], 1) == 1\nassert     kth_element([1,2,3,4,5], 3) == 3\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     kth_element(arr, 0) == 7\nassert     kth_element(arr, 1) == 3\nassert     kth_element(arr, 2) == 8\nassert     kth_element(arr, 3) == 1\nassert     kth_element(arr, 4) == 6\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     kth_element([], 5) == None\nassert     kth_element([1, 2, 3, 4, 5], 0) == 1\nassert     kth_element([1, 2, 3, 4, 5], 1) == 2\nassert     kth_element([1, 2, 3, 4, 5], 5) == 5\nassert     kth_element([1, 2, 3, 4, 5], 6) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     kth_element([1,2,3,4], 1) == 4\nassert     kth_element([1,2,3,4], 2) == 2\nassert     kth_element([1,2,3,4], 3) == 3\nassert     kth_element([1,2,3,4], 4) == 1\nassert     kth_element([1,2,3,4], 5) == -1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         kth_element([], 1) == None\nassert         kth_element([1], 1) == 1\nassert         kth_element([1,2], 1) == 1\nassert         kth_element([1,2,3], 1) == 1\nassert         kth_element([1,2,3], 2) == 2\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     kth_element([], 1) is None\nassert     kth_element([1], 1) == 1\nassert     kth_element([1,2], 1) == 1\nassert     kth_element([1,2,3], 1) == 1\nassert     kth_element([1,2,3,4,5], 3) == 3\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     kth_element([1,2,3,4,5,6,7,8], 3) == 4\nassert     kth_element([1,2,3,4,5,6,7,8], 0) == 1\nassert     kth_element([1,2,3,4,5,6,7,8], 6) == 8\nassert     kth_element([1,2,3,4,5,6,7,8], 7) == 8\nassert     kth_element([1,2,3,4,5,6,7,8], 9) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     kth_element(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'], 25) == 'k'\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 3) == 3\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 0) == 1\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 19) == 10\nassert     kth_element([1,2,3,4,5,6,7,8,9,10], 22) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     snake_to_camel(\"snake_case\")     == \"SnakeCase\"\nassert     snake_to_camel(\"to_camel_case\")     == \"ToCamelCase\"\nassert     snake_to_camel(\"__EXAMPLE__\")     == \"example\"\nassert     snake_to_camel(\"snake_to_camel\")     == \"SnakeToCamel\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     snake_to_camel(\"snake_case\")    == \"SnakeCase\", \"Wrong output\"\nassert     snake_to_camel(\"i_love_python\") == \"ILovePython\", \"Wrong output\"\nassert     snake_to_camel(\"i_am_a_snake\") == \"IamASnake\", \"Wrong output\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_to_camel')     == 'SnakeToCamel', \"1st testcase\"\nassert     snake_to_camel('snake_to_camel_') == 'SnakeToCamel', \"2nd testcase\"\nassert     snake_to_camel('to_camel')     == 'ToCamel', \"3rd testcase\"\nassert     snake_to_camel('to_camel_') == 'ToCamel', \"4th testcase\"\nassert     snake_to_camel('_snake_') == 'Snake', \"5th testcase\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_to_camel')     ==     'SnakeToCamel'\nassert     snake_to_camel('snake_to_camel_2')     ==     'SnakeToCamel2'\nassert     snake_to_camel('snake_to_camel_3')     ==     'SnakeToCamel3'\nassert     snake_to_camel('snake_to_camel_4')     ==     'SnakeToCamel4'\nassert     snake_to_camel('snake_to_camel_5')     ==     'SnakeToCamel5'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('snakeCase') == 'SnakeCase'\nassert     snake_to_camel('snake_Case') == 'SnakeCase'\nassert     snake_to_camel('snake_Camel') == 'SnakeCamel'\nassert     snake_to_camel('snakeCamel') == 'SnakeCamel'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel', \"The function should work on the string \\'snake_to_camel\\'\"\nassert     snake_to_camel('snake_to_camel_2') =='snakeToCamel2', \"The function should work on the string \\'snake_to_camel_2\\'\"\nassert     snake_to_camel('snake_to_camel_3') =='snakeToCamel3', \"The function should work on the string \\'snake_to_camel_3\\'\"\nassert     snake_to_camel('snake_to_camel_4') =='snakeToCamel4', \"The function should work on the string \\'snake_to_camel_4\\'\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") == 'SnakeToCamel'\nassert     snake_to_camel(\"snake_to_camel\") == 'SnakeToCamel'\nassert     snake_to_camel(\"snake_to_camel_\") == 'SnakeToCamel'\nassert     snake_to_camel(\"snake_to_camel__\") == 'SnakeToCamel'\nassert     snake_to_camel(\"snake_to_camel__123\") == 'SnakeToCamel123'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     snake_to_camel(\"hello_world\") == \"HelloWorld\"\nassert     snake_to_camel(\"snake_to_camel\") == \"SnakeToCamel\"\nassert     snake_to_camel(\"test_snake_to_camel\") == \"TestSnakeToCamel\"\nassert     snake_to_camel(\"test_camel_to_snake\") == \"TestCamelToSnake\"\nassert     snake_to_camel(\"__hello_world__\") == \"HelloWorld\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     snake_to_camel('hello_world') == 'HelloWorld'\nassert     snake_to_camel('hello_world_') == 'HelloWorld'\nassert     snake_to_camel('hello_world_1') == 'HelloWorld1'\nassert     snake_to_camel('hello_world_1_2') == 'HelloWorld12'\nassert     snake_to_camel('hello_world_1_2_3') == 'HelloWorld123'\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") == \"snakeToCamel\", \"FAILED: snake_to_camel\"\nassert     snake_to_camel(\"to_camel_case\") == \"toCamelCase\", \"FAILED: snake_to_camel\"\nassert     snake_to_camel(\"\") == \"\", \"FAILED: snake_to_camel\"\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef eulerian_graph(n, m):\n    '''\n    Given a graph with n vertices and m edges, \n    compute the eulerian circuit of the graph.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     eulerian_num(0, 0) == 0\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(0, 1) == 0\nassert     eulerian_num(3, 2) == 1\nassert     eulerian_num(5, 3) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     eulerian_num(3, 3) == 6\nassert     eulerian_num(5, 3) == 15\nassert     eulerian_num(5, 5) == 25\nassert     eulerian_num(7, 3) == 42\nassert     eulerian_num(10, 10) == 184\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eulerian_num(3, 3) == 3\nassert     eulerian_num(4, 4) == -1\nassert     eulerian_num(4, 5) == 0\nassert     eulerian_num(4, 4) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eulerian_num(0, 0)     == 0\nassert     eulerian_num(1, 1)     == 1\nassert     eulerian_num(2, 2)     == 2\nassert     eulerian_num(2, 3)     == 1\nassert     eulerian_num(1, 2)     == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eulerian_num(1, 1) == 4\nassert     eulerian_num(2, 2) == 10\nassert     eulerian_num(3, 3) == 15\nassert     eulerian_num(4, 4) == 30\nassert     eulerian_num(5, 5) == 50\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     eulerian_num(7, 8) == -1, \"incorrect result for eulerian_num(7, 8) == -1\"\nassert     eulerian_num(8, 7) == -1, \"incorrect result for eulerian_num(8, 7) == -1\"\nassert     eulerian_num(5, 7) == 3, \"incorrect result for eulerian_num(5, 7) == 3\"\nassert     eulerian_num(3, 3) == 0, \"incorrect result for eulerian_num(3, 3) == 0\"\nassert     eulerian_num(5, 7) == 3, \"incorrect result for eulerian_num(5, 7) == 3\"\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eulerian_num(3, 1) == 3\nassert     eulerian_num(4, 1) == 4\nassert     eulerian_num(5, 1) == 5\nassert     eulerian_num(3, 2) == 5\nassert     eulerian_num(3, 3) == 6\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_sublists([\n    ['E', 'A', 'C'],\n    ['S', 'B', 'D'],\n    ['E', 'F', 'G'],\n    ['A', 'B', 'C']]) == [\n    ['A', 'A', 'A'],\n    ['B', 'B', 'B'],\n    ['C', 'C', 'C'],\n    ['D', 'D', 'D'],\n    ['E', 'E', 'E'],\n    ['F', 'F', 'F'],\n    ['G', 'G', 'G']]\n\nassert     sort_sublists([\n    ['E', 'A', 'C'],\n    ['S', 'B', 'D']]) == [\n    ['A', 'A', 'A'],\n    ['B', 'B', 'B'],\n    ['C', 'C', 'C'],\n    ['D', 'D', 'D']]\n\nassert     sort_sublists([\n    ['E', 'A', 'C'],\n    ['S', 'B', 'D']]) == [\n    ['A', 'A', 'A'],\n    ['B', 'B', 'B'],\n    ['C', 'C', 'C'],\n    ['D', 'D', 'D']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_sublists(['', []])     ==    []\nassert     sort_sublists(['', '', '', '']) ==     ['']\nassert     sort_sublists(['', '', '', '', '', '', '', '', '', '', '', '']) ==     ['', '', '', '', '', '', '', '', '', '', '', '']\nassert     sort_sublists(['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']) ==     ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']\nassert     sort_sublists(['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']) ==     ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_sublists([[1, 5, 6, 2, 3, 8], ['J', 'F', 'B', 'A', 'L', 'K'], ['g', 'e', 'i', 'r','s', 't']]) == [['A', 'B', 'F', 'L', 'K', 'J'], ['g', 'e', 'i', 'r','s', 't'], ['g', 'e', 'i', 'r','s', 't']]\nassert sort_sublists([[1, 5, 6, 2, 3, 8], ['J', 'F', 'B', 'A', 'L', 'K']]) == [['A', 'B', 'F', 'L', 'K', 'J'], ['g', 'e', 'i', 'r','s', 't']]\n\ndef sort_nested_lists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_sublists([[1, 4, 6, 7], [2, 5, 7, 8], [3, 6, 9, 10]]) == [[1, 4, 6, 7], [2, 5, 7, 8], [3, 6, 9, 10]]\nassert     sort_sublists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nassert     sort_sublists([[2, 4, 6, 8], [3, 5, 7, 9], [1, 6, 10, 11], [8, 12, 14, 16]]) == [[2, 4, 6, 8], [3, 5, 7, 9], [1, 6, 10, 11], [8, 12, 14, 16]]\n\ndef radix_sort(input_list):\n    '''\n    Write a function to sort a given list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_sublists([\n                ['-1', '1', '0', '12', '-99'],\n                ['0', '-1', '99'],\n                ['1', '2', '-2', '-99', '-999'],\n                ['1', '1', '1', '1', '1', '1', '1'],\n                ['-1', '-2', '-99', '-999', '-9999', '99', '99999']]) == [\n                ['-1', '-1', '-1', '-1', '-1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],\n                ['1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2'],\n                ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],\n                ['12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12', '12'],\n                ['-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99', '-99']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_sublists([[]])    ==     [[]], 'empty list'\nassert     sort_sublists([[1]])    ==     [[1]], 'one-element list'\nassert     sort_sublists([[2, 3], [1, 2], [3, 1]])    ==     [[1, 2], [2, 3], [3, 1]], 'two-element list'\nassert     sort_sublists([[2, 3], [1, 2], [3, 1], [4, 5], [1]])    ==     [[1, 2], [1, 2], [1, 2], [4, 5], [3, 1]],'more than two-element list'\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [sort_sublists([['a'], ['b', 'c'], ['d', 'e', 'f']]) == [['a'], ['b', 'c'], ['d', 'e', 'f']]]\nassert     [sort_sublists([[], ['a', 'b', 'c'], ['d', 'e', 'f'], ['g']]) == [['g'], ['a', 'b', 'c'], ['d', 'e', 'f']]]\nassert     [sort_sublists([[], ['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']]) == [['g', 'h', 'i'], ['j', 'k', 'l'], ['a', 'b', 'c'], ['d', 'e', 'f']]]\nassert     [sort_sublists([['a'], ['b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o', 'p']]) == [['a'], ['b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o', 'p']]]\nassert     [sort_sublists([[], [], [], [], [], [], [], [], [], []]) == [[], [], [], [], [], [], [], [], []]]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_sublists([[1,5,3,4],[2,5,1,4],[2,3,1,3],[1,4,4,4]]) == [[1, 1, 1, 1], [2, 2, 3, 4], [1, 4, 4, 4], [2, 3, 1, 3]]\nassert     sort_sublists([['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]) == [['a', 'a', 'a'], ['b', 'b', 'b'], ['c', 'c', 'c']]\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]) == [['a', 'a', 'a', 'a'], ['b', 'b', 'b', 'b'], ['c', 'c', 'c', 'c'], ['d', 'd', 'd', 'd']]\nassert     sort_sublists([['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']]) == [['a', 'a', 'a', 'a'], ['b', 'b', 'b', 'b'], ['c', 'c', 'c', 'c'], ['d', 'd', 'd', 'd'], ['a', 'a', 'a', 'a'], ['b', 'b', 'b', 'b'], ['c', 'c', 'c', 'c'], ['d', 'd', 'd', 'd']]\n\nsort_sublists([[1,3,5,7,9],[2,4,6,8,10],[1,4,6,8,10],[2,4,6,8,10],[1,4,6,8,10]])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_sublists([['sdf', 'h', 'jh', 'b', 'c', 'd'], \n                        ['bf', 'h', 'jh', 'c', 'd', 'b'],\n                        ['fg', 'h', 'jh', 'c', 'd', 'b'], \n                        ['a', 'h', 'jh', 'c', 'd', 'b'], \n                        ['b', 'h', 'jh', 'c', 'd', 'b'],\n                        ['a', 'h', 'jh', 'c', 'd', 'b'],\n                        ['e', 'h', 'jh', 'c', 'd', 'b']]) ==     [['a', 'a', 'a', 'a', 'a', 'a'],\n                                        ['b', 'b', 'b', 'b', 'b', 'b'], \n                                        ['c', 'c', 'c', 'c', 'c', 'c'],\n                                        ['d', 'd', 'd', 'd', 'd', 'd'],\n                                        ['e', 'e', 'e', 'e', 'e', 'e'],\n                                        ['bf', 'bf', 'bf', 'bf', 'bf', 'bf'], \n                                        ['fg', 'fg', 'fg', 'fg', 'fg', 'fg']]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_sublists([['A'],['B','C'],['D','E'],['F']]) == [['A'],['B','C'],['D','E'],['F']]\nassert     sort_sublists([['A'],['A','B','C'],['D','E'],['F']]) == [['A'],['A','B','C'],['D','E'],['F']]\nassert     sort_sublists([['A'],['A','B'],['C','D','E'],['F']]) == [['A'],['A','B'],['C','D','E'],['F']]\nassert     sort_sublists([['A'],['A','B','C'],['D','E'],['F','G','H'],['I']]) == [['A'],['A','B','C'],['D','E'],['F','G','H'],['I']]\n\ndef compare(x,y):\n    '''\n    Compare two strings and return the smaller string\n    '''\n    if x<y:\n        return x\n    elif x>y:\n        return y\n    else:\n        return 'x and y are equal'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count([False, True, True, True]) == 2\nassert     count([False, False, False, True]) == 3\nassert     count([True, False, True, False]) == 2\nassert     count([False, False, False, False]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (count([True, False, True, True]) == 3), \"function is broken\"\nassert     (count([False, True, False, True]) == 2), \"function is broken\"\nassert     (count([False, False, False, False]) == 0), \"function is broken\"\nassert     (count([True, True, False, False, True]) == 1), \"function is broken\"\nassert     (count([]) == 0), \"function is broken\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count([True, True, False]) == 1\nassert     count([False, True, False]) == 1\nassert     count([True, True, True]) == 2\nassert     count([False, False, True]) == 0\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count([True, False, False, True]) == 2\nassert     count([False, True, False, True]) == 2\nassert     count([False, False, False, False]) == 0\nassert     count([]) == 0\nassert     count([True]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count([True, True, False, False]) == 2\nassert     count([False, False, True, False]) == 1\nassert     count([True, False, False, False]) == 0\nassert     count([False, False, False, True]) == 0\nassert     count([True, False, False, True]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (count([True, True, False]) == 1)\nassert     (count([True, True, True]) == 2)\nassert     (count([False, True, False]) == 1)\nassert     (count([False, False, False]) == 0)\nassert     (count([True, True, False, False, True, True, False, True, True, True]) == 3)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (count([True, True, False]) == 2)\nassert     (count([False, False, False]) == 0)\nassert     (count([True, True, False, True, False, True]) == 3)\nassert     (count([False, False, False, False]) == 0)\nassert     (count([False, False, False, False, False, False, False]) == 0)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count([True, False, True, True]) == 2\nassert     count([False, False, False]) == 0\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count([True, True, True, False, False, True, True, True]) == 3, \"WRONG answer\"\nassert     count([False, True, False, False, False, True, True, True]) == 1, \"WRONG answer\"\nassert     count([False, False, False, False, False, False, True, True]) == 0, \"WRONG answer\"\n\n\n\ndef all(lst):  \n    '''\n    Write a python function to check if all elements of the list are true.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_lists(test_list, test_tup) == test_tup\nassert     add_lists(test_list, test_tup) == test_tup\n\ntest_list = ['test', 'list']\ntest_tup = ('test', 'tuple')\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_lists([1, 2], [3, 4]) == [1, 2, 3, 4]\nassert     add_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     add_lists([1, 2, 3], [4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     add_lists([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     add_lists([1, 2, 3, 4, 5], [6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_lists([1, 3, 5], (2, 4, 6)) == [1, 3, 5, 2, 4, 6]\nassert     add_lists([2, 4, 6], (1, 3, 5)) == [1, 3, 5, 2, 4, 6]\nassert     add_lists([2], (1, 3, 5)) == [1, 3, 5, 2]\nassert     add_lists([2, 4, 6], []) == [2, 4, 6]\nassert     add_lists([2, 4, 6], [2, 4, 6]) == [2, 4, 6, 2, 4, 6]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_lists([1,2,3],(4,5,6)) == [(1,2,3,4,5,6)]\nassert add_lists([1,2],(3,4,5)) == [(1,2,3,4,5)]\nassert add_lists([4,5,6],(1,2,3)) == [(4,5,6,1,2,3)]\nassert add_lists([],()) == [(0,0,0)]\nassert add_lists([],(1,2,3)) == [(1,2,3)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_lists([1,2,3], (4,5,6)) == [(1,2,3,4,5,6)]\nassert     add_lists([1,2,3,4], (5,6,7)) == [(1,2,3,4,5,6,7)]\nassert     add_lists([1,2,3], (4,5)) == [(1,2,3,4,5)]\nassert     add_lists([1,2,3,4], (5,6)) == [(1,2,3,4,5,6)]\nassert     add_lists([1,2,3], [4,5,6]) == [(1,2,3,4,5,6)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_lists(test_list, test_tup) == (test_list, test_tup)\nassert     add_lists([1, 2, 3], [4, 5, 6]) == ([1, 2, 3], [4, 5, 6])\nassert     add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3], (4, 5, 6))\nassert     add_lists(test_list, test_tup) == ([1, 2, 3], (4, 5, 6))\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_lists([], ()) == []\nassert     add_lists([1], ()) == [1]\nassert     add_lists(['a', 'b', 'c'], ()) == ['a', 'b', 'c']\nassert     add_lists([1, 2, 3], (4,)) == [1, 2, 3, 4]\nassert     add_lists([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (add_lists(test_list, test_tup) == test_list + [test_tup])\n\ndef substract_lists(test_list, test_tup):\n    '''\n    Write a function to substract the given list from the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_lists(['a', 'b', 'c'], []) == ['a', 'b', 'c']\nassert     add_lists(['a'], [('a', 'b')]) == [('a', 'b')]\nassert     add_lists(['a', 'b', 'c'], [('a', 'b'), ('a', 'c')]) == [('a', 'b'), ('a', 'c')]\nassert     add_lists(['a', 'b', 'c'], [('a', 'b'), ('a', 'c')]) == [('a', 'b'), ('a', 'c')]\nassert     add_lists([], [('a', 'b')]) == [('a', 'b')]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_lists(test_list, test_tup) == add_lists(test_list, test_tup)\nassert     add_lists(test_list, test_tup) == add_lists(test_list, test_tup)\nassert     add_lists(test_list, test_tup) == add_lists(test_list, test_tup)\nassert     add_lists(test_list, test_tup) == add_lists(test_list, test_tup)\nassert     add_lists(test_list, test_tup) == add_lists(test_list, test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,3,5,7,9],[2,4,6,8,10],[2,6,8,10]) == [1,2,2,3,4,5,6,7,8,9,10,10]\nassert     merge_sorted_list([2,5,7,9],[1,3,4,6,8],[10,11,12,13,14,15]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,10]\n\ndef find_min_in_sorted_list(num1,num2,num3):\n    '''\n    Find the minimum number in a sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     merge_sorted_list([1,3,5,7], [0,2,4,6], [9,10,11,13]) == [0,1,2,3,4,5,6,7,9,10,11,13]\nassert     merge_sorted_list([1,3,5,7], [0,2,4,6], [9,10]) == [0,1,2,3,4,5,6,7,9,10]\nassert     merge_sorted_list([1,3,5,7], [0,2,4,6], [9]) == [0,1,2,3,4,5,6,7,9]\nassert     merge_sorted_list([1,3,5,7], [0,2,4,6], []) == [0,1,2,3,4,5,6,7]\n\ndef max_sum_subarray(arr):\n    '''\n    Given an array of integers, find the subarray with the largest sum and return the sum.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [-2, -1, 0, 1, 2, 3, 4] == merge_sorted_list([1, 3, 5], [2, 4, 6], [0, 0, 9])\nassert     [-2, -1, 0, 1, 2, 3, 4] == merge_sorted_list([1, 3], [2, 4, 6], [0, 0, 9])\nassert     [-2, -1, 0, 1, 2, 3, 4] == merge_sorted_list([1, 3], [2, 4], [0, 0, 9])\nassert     [-2, -1, 0, 1, 2, 3, 4] == merge_sorted_list([1, 3], [2, 4], [0, 0])\nassert     [-2, -1, 0, 1, 2, 3, 4] == merge_sorted_list([1, 3], [2, 4], [])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     merge_sorted_list( [1,3,5,7], [0,2,6,8,9,10,11], [2,4,6,8]) == [0,1,2,2,3,4,5,6,6,7,8,8,9,10,11]\nassert     merge_sorted_list( [], [], []) == []\nassert     merge_sorted_list( [1,3,5], [2,4,6], []) == [1,2,3,4,5,6]\nassert     merge_sorted_list( [1,3,5,7], [2,4,6,8,9], [2,4,6,8]) == [0,1,1,2,2,2,3,4,4,5,6,6,7,8,8,9]\nassert     merge_sorted_list( [1,3,5,7], [2,4,6,8,9], [2,4,6,8,9]) == [0,1,1,2,2,2,3,4,4,5,6,6,7,8,8,9]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nmerge_sorted_list([1,3,5,7], [2,4,6], [5,7,9,10]) == [1,2,3,4,5,6,7,7,9,10]\nassert \nmerge_sorted_list([1,3,5,7], [2,4,6], [5,7,9,10]) == [1,2,3,4,5,5,6,7,7,9,10]\nassert \nmerge_sorted_list([1,3,5,7], [2,4,6], [5,7,9,10]) == [1,2,3,4,5,5,6,7,7,9,10]\n\ndef find_max_subset_sum(arr):\n    '''\n    A non-empty zero-indexed array A consisting of N integers is given.\n    A pair of integers (P, Q) is called good if\n        0 <= P < Q < N and\n        A[P] + A[P+1] +... + A[Q-1] < A[Q]\n    For example, consider array A such that:\n\n      A[0] = 3\n      A[1] = 4\n      A[2] = 2\n      A[3] = 4\n      A[4] = 4\n      A[5] = 2\n      A[6] = 3\n      A[7] = 4\n      A[8] = 3\n      A[9] = 4\n      A[10] = 3\n      A[11] = 4\n      A[12] = 4\n      A[13] = 4\n      A[14] = 3\n      A[15] = 4\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     merge_sorted_list([1, 3, 5], [2, 4, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     merge_sorted_list([1, 3, 5], [2, 4, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     merge_sorted_list([1, 3, 5, 10], [2, 4, 6, 11, 12], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\ndef partition(num_list, pivot_index):\n    '''\n    Write a function to partition a list so that the values to the left of the pivot are less than the pivot,\n    and the values to the right of the pivot are greater than the pivot.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1, 3, 5, 7, 9], [2, 4, 6, 8], [4, 6, 8, 10]) == [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10]\nassert     merge_sorted_list([], [], [1, 3, 5, 7, 9], [2, 4, 6, 8], [4, 6, 8, 10]) == [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10]\nassert     merge_sorted_list([1, 3, 5, 7, 9], [2, 4, 6, 8], [4, 6, 8, 10]) == [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10]\nassert     merge_sorted_list([], [], [], [], [1, 3, 5, 7, 9], [2, 4, 6, 8], [4, 6, 8, 10]) == [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10]\nassert     merge_sorted_list([1, 3, 5, 7, 9], [2, 4, 6, 8], [4, 6, 8, 10]) == [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,3,5,7,9,11], [2,4,6,8,10], [13,15,17,19]) == [1,2,3,4,5,6,7,8,9,10,13,15,17,19]\nassert     merge_sorted_list([0,2,4,6,8,10], [0,1,3,5,7,9], [1,3,5,7,9]) == [0,0,1,1,2,3,4,5,6,7,8,9,10]\nassert     merge_sorted_list([-1,0,1,2,3], [-2,-3,-4,-5,-6], [-6,0,1,2,3]) == [-6,-5,-4,-3,-2,-1,0,1,2,3]\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2],[3,4],[5,6,7]) == [1,2,3,4,5,6,7]\nassert     merge_sorted_list([1],[2],[3]) == [1,2,3]\nassert     merge_sorted_list([],[],[1]) == [1]\nassert     merge_sorted_list([1],[],[]) == [1]\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_Equivalent('101', 2) == '0'\nassert     odd_Equivalent('0001111', 2) == '0'\nassert     odd_Equivalent('111100', 2) == '0'\nassert     odd_Equivalent('111101', 2) == '1'\nassert     odd_Equivalent('101', 3) == '11'\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_Equivalent('101010101011101', 3) == 3\nassert     odd_Equivalent('101010101011101', 5) == 3\nassert     odd_Equivalent('101010101011101', 7) == 3\nassert     odd_Equivalent('101010101011101', 9) == 3\nassert     odd_Equivalent('101010101011101', 11) == 3\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_Equivalent(\"00\",0) == \"00\", \"Expected: 00\"\nassert     odd_Equivalent(\"0\",0) == \"0\", \"Expected: 0\"\nassert     odd_Equivalent(\"101\",1) == \"101\", \"Expected: 101\"\nassert     odd_Equivalent(\"10101\",2) == \"110101\", \"Expected: 110101\"\nassert     odd_Equivalent(\"11001\",2) == \"10101\", \"Expected: 10101\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_Equivalent('01010101',2) == 2\nassert     odd_Equivalent('101010',2) == 1\nassert     odd_Equivalent('1010',2) == 0\nassert     odd_Equivalent('0000',2) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_Equivalent(\u201c0101010\u201d, 2) == 6\nassert     odd_Equivalent(\u201c011010\u201d, 2) == 2\nassert     odd_Equivalent(\u201c1010101\u201d, 2) == 8\nassert     odd_Equivalent(\u201c100100100100100\u201d, 10) == 18\nassert     odd_Equivalent(\u201c100100100100100\u201d, 12) == 20\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef all_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with all values being the same in a binary string the given number of times.\n    '''\n    pass\n\n\n\ndef all_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with all values being the same in a binary string the given number of times.\n    '''\n    pass"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_Equivalent('010111011010',1) == 5\nassert     odd_Equivalent('010010010010',1) == 5\nassert     odd_Equivalent('010111011010',2) == 4\nassert     odd_Equivalent('010010010010',2) == 4\nassert     odd_Equivalent('010111011010',3) == 3\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_Equivalent('001', 1) == 1\nassert     odd_Equivalent('001', 2) == 0\nassert     odd_Equivalent('001', 3) == 1\nassert     odd_Equivalent('001', 4) == 0\nassert     odd_Equivalent('001', 5) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_Equivalent('1110001',1) == 4\nassert     odd_Equivalent('1110001',2) == 5\nassert     odd_Equivalent('1110001',3) == 5\nassert     odd_Equivalent('1110001',4) == 5\nassert     odd_Equivalent('1110001',5) == 5\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_Equivalent(  \"10001\", 1) ==  \"10011\"\nassert     odd_Equivalent(  \"10001\", 2) ==  \"10101\"\nassert     odd_Equivalent(  \"10001\", 3) ==  \"10101\"\nassert     odd_Equivalent(  \"10001\", 4) ==  \"10101\"\nassert     odd_Equivalent(  \"10001\", 5) ==  \"10101\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [5, 7, 9]    == common_in_nested_lists([[1, 2, 3], [2, 1], [3, 2, 1], [4, 5, 6]])\nassert     [1, 2, 3, 4, 5, 6] == common_in_nested_lists([[1, 2, 3, 4, 5], [2, 1, 4, 5], [3, 2, 1, 5], [4, 5, 6]])\nassert     [5, 7, 9] == common_in_nested_lists([[1, 2, 3], [1, 2], [3, 2, 1], [4, 5, 6]])\nassert     [1, 2, 3, 4, 5, 6] == common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 4, 5], [3, 2, 1, 5], [4, 5, 6]])\nassert     [5, 7, 9] == common_in_nested_lists([[1, 2, 3], [1, 2], [3, 2, 1], [4, 5, 6], [4, 5, 6]])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1, 2, 3] == common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nassert     [7] == common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nassert     [7, 8, 9] == common_in_nested_lists([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9]])\nassert     [1, 2] == common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nassert     [1, 2, 3, 4, 5, 6] == common_in_nested_lists([[1, 2, 3, 4, 5, 6], [7, 8, 9]])\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([1,2,[3,4,[5,6],7],8]) == [1,2,5,6]\nassert     common_in_nested_lists([1,[2,3,[4,[5,6,7],8],9]], [1,[2,3,4,[5,6,7],9],10]) == [1,2,5,6,7]\nassert     common_in_nested_lists([1,2,[3,4,[5,6],7],8], [1,[2,3,4,[5,6],7],8]) == [1,2,5,6]\nassert     common_in_nested_lists([1,[2,3,[4,[5,6,7],8],9],10], [1,[2,3,4,[5,6,7],9],10]) == [1,2,5,6,7]\nassert     common_in_nested_lists([1,2,3,[4,5,6,7],8], [1,[2,3,4,[5,6,7],9],10]) == [1,2,5,6,7]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [4, 5, 6, 7, 8, 9]]) == [4, 5]\nassert     common_in_nested_lists([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [3, 4, 5]\nassert     common_in_nested_lists([[1, 2, 3], [2, 3, 4, 5], [3, 4, 5, 6]]) == [3, 4, 5]\nassert     common_in_nested_lists([]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [1, 2, 5], [1, 3, 4], [1, 4, 4]])     == [1, 1, 1, 1, 4]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 5], [1, 3, 4], [1, 4, 4], [1, 4, 5]])     == [1, 1, 1, 1, 4, 5]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 5], [1, 2, 4], [1, 2, 4]])     == [1, 1, 2, 2, 4]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 5], [1, 2, 4], [1, 2, 4], [1, 2, 5]])     == [1, 1, 2, 2, 4, 5]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 5], [1, 2, 4], [1, 2, 4], [1, 3, 4], [1, 3, 4]])     == [1, 1, 2, 2, 4, 4]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1, 1], [2, 3], [3, 4]]) == [1, 3, 4]\nassert     common_in_nested_lists([[1, 2], [1, 3], [2, 3], [1, 3], [2, 3]]) == [1, 3, 2]\nassert     common_in_nested_lists([[1, 2], [1, 3], [2, 3], [1, 3], [2, 3], [1, 3], [2, 3]]) == [1, 3, 2]\nassert     common_in_nested_lists([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     common_in_nested_lists([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef nested_list_greater_than_n(nestedlist, n):\n    '''\n    Write a function to find the elements in the nested lists greater than n.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         common_in_nested_lists([[1, 3, 4], [2, 3, 5], [2, 4, 6, 7, 8]]) == [2, 3]\nassert         common_in_nested_lists([[1, 3, 4], [2, 3, 5, 7, 8], [2, 4, 6, 8], [1, 8, 9]]) == [2, 8]\nassert         common_in_nested_lists([[1, 3, 4], [1, 3, 5, 7, 8], [2, 4, 6, 8], [1, 8, 9]]) == [1, 8]\nassert         common_in_nested_lists([[1, 3, 4], [1, 3, 5, 7, 8], [2, 4, 6, 8], [1, 8, 9]]) == [1, 8]\nassert         common_in_nested_lists([[1, 3, 4], [1, 3, 5, 7, 8], [2, 4, 6, 8], [1, 8, 9]]) == [1, 8]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\nassert     common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [1, 4, 7], [4, 5, 9], [8, 8, 9]]) == [1, 4, 7]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [2, 2, 3, 4, 5], [4, 4, 5, 6, 7], [5, 6, 7]]) == [2, 4, 5]\nassert     common_in_nested_lists([['a', 'a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['b', 'c', 'd', 'e', 'f'], ['c', 'd', 'e', 'f', 'g']]) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n\n\ndef find_longest_word_in_sentence(sentence):\n    '''\n    Write a function to find the longest word in a sentence.\n    '''\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_integer('2') == True\nassert     check_integer('00') == True\nassert     check_integer('12a') == False\nassert     check_integer('1.23') == False\nassert     check_integer('-2') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_integer(\"12345\") == True\nassert     check_integer(\"-12345\") == True\nassert     check_integer(\"6a5\") == False\nassert     check_integer(\"0xaf\") == True\nassert     check_integer(\"6a\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_integer('0')\nassert     check_integer('12345')\nassert     check_integer('123456789')\nassert     check_integer('12')\nassert     check_integer('1234')\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_integer(\"123\") == True\nassert     check_integer(\"0\") == True\nassert     check_integer(\"1\") == True\nassert     check_integer(\"-1\") == True\nassert     check_integer(\"0.5\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('12') == True\nassert     check_integer('10.2') == False\nassert     check_integer('4.2') == False\nassert     check_integer('3a') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_integer('5')\nassert not     check_integer('a')\nassert not     check_integer('10.3')\nassert not     check_integer('a10')\nassert not     check_integer('0')\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_integer(\"100\") == True\nassert     check_integer(\"1.2\") == False\nassert     check_integer(\"1a2\") == False\nassert     check_integer(\"1-2\") == False\nassert     check_integer(\"12.3\") == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_integer('') == False\nassert     check_integer('a') == False\nassert     check_integer('100') == True\nassert     check_integer('100a') == False\nassert     check_integer('-100') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_integer('0') == True\nassert     check_integer('100') == True\nassert     check_integer('-100') == True\nassert     check_integer('-300') == True\nassert     check_integer('300') == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{1},{},{}]) == False\nassert     empty_dit([{1,2},{},{}]) == False\nassert     empty_dit([{},{1},{}]) == False\nassert     empty_dit([{},{},{1}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     empty_dit([{}, {'a': 1}, {'a': 1, 'b': 1, 'c': 1}]) == True\nassert     empty_dit([{'a': 1}, {'b': 1, 'c': 1}, {}]) == True\nassert     empty_dit([{'a': 1}, {'a': 1, 'b': 1}, {'a': 1, 'b': 1, 'c': 1}]) == False\n\n\ndef unique_anagrams(words):\n    '''\n    Write a function to find the number of unique anagrams of a string.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     empty_dit([{}, {}, {}, {}])\nassert     not empty_dit([{1: 1}, {}, {}, {1: 1}])\nassert     empty_dit([{}, {}, {}])\nassert     not empty_dit([{1: 1, 2: 2}, {1: 3, 4: 4}])\nassert     empty_dit([{1: 1, 2: 2}, {}, {}])\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     empty_dit([{},{}]) == True\nassert     empty_dit([{1,2},{}]) == False\nassert     empty_dit([{},{1}]) == False\nassert     empty_dit([{1},{2}]) == False\nassert     empty_dit([{},{}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     empty_dit([{'a': 1}, {'b': 2}, {'c': 3}])\nassert not empty_dit([{'a': 1}, {'b': 2}, {'c': 3, 'd': 4}])\n\ndef max_value(list1):\n    '''\n    Write a function to find the maximum value in a list\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     empty_dit([{}]) == True\nassert     empty_dit([{1:2},{}]) == True\nassert     empty_dit([{1:2},{1:2}]) == False\nassert     empty_dit([{1:2},{1:3}]) == False\nassert     empty_dit([{},{1:2}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     empty_dit([{}, {}, {}]) == True, 'Failed Test 1'\nassert     empty_dit([{1, 2}, {}, {3: 4}]) == False, 'Failed Test 2'\nassert     empty_dit([]) == True, 'Failed Test 3'\nassert     empty_dit([{1, 2}, {1: 2, 3: 4}]) == False, 'Failed Test 4'\nprint('Passed all tests... ')\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     empty_dit([{},{}]) == True\nassert     empty_dit([{1:'a',2:'b'},{1:'a',2:'b'}]) == False\nassert     empty_dit([{1:'a',2:'b'},{},{}]) == False\nassert     empty_dit([{},{},{}]) == True\n\ndef search_key(dict1, value):\n    '''\n    Write a function to search a key in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     empty_dit([{}, {}]) == True\nassert     empty_dit([{'a': 1}, {'b': 2}]) == False\nassert     empty_dit([{'a': 1, 'b': 2}, {'b': 2}]) == True\nassert     empty_dit([{'a': 1, 'b': 2}, {'b': 2, 'c': 3}]) == False\nassert     empty_dit([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{'a': 1}, {'b': 2}, {'c': 3}]) == False\nassert     empty_dit([{'a': 1}, {'b': 2}, {'c': 3}, {'a': 4, 'b': 5}]) == True\n\n\ndef check_increasing(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are\n    increasing or not (the values of the dictionaries are always increasing).\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3)) == 123\nassert     tuple_to_int((4,5,6)) == 4536\nassert     tuple_to_int((7,8,9,10)) == 76590\n\n\ndef zigzag(nums):\n    '''\n    Write a function to do Zig-Zag conversion of a given array.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 1234\nassert     tuple_to_int((5, 0)) == 50\nassert     tuple_to_int((0, 0, 0, 0)) == 0\n\ndef add_tuples(t1, t2):\n    '''\n    Write a function to add two tuples together. \n    The tuples can have different lengths, and the result is also a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tuple_to_int(()) == 0\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1, 2)) == 12\nassert     tuple_to_int((1, 2, 3)) == 123\nassert     tuple_to_int((1, 3, 5)) == 125\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((8, 4, 5)) == 60\nassert     tuple_to_int((5, 3, 7, 5, 4, 3, 3, 4, 5, 5, 4, 4, 5)) == 11331310\nassert     tuple_to_int((2, 2, 1)) == 6\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((1, 3)) == 5\nassert     tuple_to_int((1, 2, 5)) == 12\nassert     tuple_to_int((3, 1, 5)) == 15\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 45\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1,2,3)) == 123\nassert     tuple_to_int((8,7,6)) == 837\nassert     tuple_to_int((5,7,8,9)) == 955\nassert     tuple_to_int((3,4,5,6)) == 36\nassert     tuple_to_int((7,8,9)) == 879\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         (tuple_to_int( (1, 2, 3) )                 == 6)\nassert         (tuple_to_int( (1, 2, 3, 4) )             == 24)\nassert         (tuple_to_int( (1, 2, 3, 4, 5) )         == 120)\nassert         (tuple_to_int( (1, 2, 3, 4, 5, 6) )     == 720)\nassert         (tuple_to_int( (1, 2, 3, 4, 5, 6, 7) )     == 5040)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5, 6)) == 123456\nassert tuple_to_int((1, 2, 3)) == 123\nassert tuple_to_int((5, 4)) == 45\nassert tuple_to_int((9, 4, 1, 3, 2)) == 94532\nassert tuple_to_int((5, 4, 3, 2, 1)) == 54321\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     list_to_float([[1,2],[3,4],[5,6]])    ==    [1.0,2.0,3.0,4.0,5.0,6.0]\nassert     list_to_float([[1,2.0],[3,4.0],[5,6.0]])    ==    [1.0,2.0,3.0,4.0,5.0,6.0]\nassert     list_to_float([[1,2],[3],[5,6]])    ==    [1.0,2.0,3.0,5.0,6.0]\nassert     list_to_float([[1,2.0],[3],[5,6.0]])    ==    [1.0,2.0,3.0,5.0,6.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef n_gram(test_list, n):\n    '''\n    Write a function to compute a n-gram from a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     list_to_float([[1, 2.0], [3, 4]]) == [1.0, 2.0, 3.0, 4.0]\nassert     list_to_float([[1.0, 2.0], [3.0, 4]]) == [1.0, 2.0, 3.0, 4.0]\nassert     list_to_float([[1.0, '2.0'], [3.0, 4.0]]) == [1.0, 2.0, 3.0, 4.0]\n\ndef transpose(lst):\n    '''\n    Write a function to transpose a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list_to_float([['1', '1.0'], ['1.1', '2.2'], ['3.3', '4.4']]) == [[1, 1.0], [1.1, 2.2], [3.3, 4.4]]\nassert     list_to_float([['1', '1.0'], ['1.1', '2.2'], ['3.3', '-4.4']]) == [[1, 1.0], [1.1, -2.2], [3.3, -4.4]]\nassert     list_to_float([['1.1', '1.0'], ['1', '2.2']]) == [[1.1, 1.0], [1.0, 2.2]]\nassert     list_to_float([['1.1', '1.0'], ['1', '2.2']]) == [[1.1, 1.0], [1.0, 2.2]]\nassert     list_to_float([['1.1', '1.0'], ['1', '2.2']]) == [[1.1, 1.0], [1.0, 2.2]]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     list_to_float([[1, 2], [3.5], [3], [4]]) == [1.0, 3.5, 3.0, 4.0]\nassert     list_to_float([[1, 2], [3, 4], [5.5]]) == [1.0, 3.0, 5.5]\nassert     list_to_float([[], [], [], []]) == []\nassert     list_to_float([[1, 2], [3.5], [3, 4], [5.5]]) == [1.0, 3.5, 3.0, 4.0]\nassert     list_to_float([[1, 2], [3.5], [3], [4], [5.5]]) == [1.0, 3.5, 3.0, 4.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     list_to_float([1, 2, 3, 4]) == [1.0, 2.0, 3.0, 4.0]\nassert     list_to_float([1, 2, 'c', 4]) == [1.0, 2.0, 'c', 4.0]\nassert     list_to_float([1, 2, 'c', 4.4]) == [1.0, 2.0, 'c', 4.4]\nassert     list_to_float([1, 2, 'c', 4.4, 'a', 'b']) == [1.0, 2.0, 'c', 4.4, 'a', 'b']\nassert     list_to_float([1.1, 2.2, 3.3, 4.4]) == [1.1, 2.2, 3.3, 4.4]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     list_to_float(['1.0', '2.0', '3.0', '4.0', '5.0']) == [1.0, 2.0, 3.0, 4.0, 5.0]\nassert     list_to_float(['1', '2', '3', '4', '5']) == [1.0, 2.0, 3.0, 4.0, 5.0]\nassert     list_to_float(['1.0', '2.0', '3.0', '4', '5']) == [1.0, 2.0, 3.0, 4.0, 5.0]\nassert     list_to_float(['1', '2', '3', '4', '5']) == [1.0, 2.0, 3.0, 4.0, 5.0]\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given integer is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     list_to_float(['one', 'two', 'three']) == [1., 2., 3.]\nassert     list_to_float(['1', '2', '3']) == [1., 2., 3.]\nassert     list_to_float(['1', '2', '3.0']) == [1., 2., 3.]\nassert     list_to_float(['1', '2', 'three']) == [1., 2., 3.]\nassert     list_to_float(['1.0', '2', '3']) == [1., 2., 3.]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     list_to_float([[\"7\", \"3.1\", \"5\", \"1.7\", \"2.8\"], [\"7\"], [\"5\"], [\"1.7\"], [\"2.8\"], []]) == [7.0, 3.1, 5.0, 1.7, 2.8], \"check correct output\"\nassert list_to_float([[], [], [], [], []]) == [], \"check output when input is empty list\"\nprint(\"All tests passed!\")"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_list('i am a student') == ['i', 'am', 'a','student']\nassert     string_to_list('I am a student') == ['I', 'am', 'a','student']\nassert     string_to_list('I am a student') == ['I', 'am', 'a','student']\nassert     string_to_list('i am a student') == ['i', 'am', 'a','student']\nassert     string_to_list('I am a student') == ['I', 'am', 'a','student']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello') == ['hello']\nassert     string_to_list('hello, world, my name is Michael') == ['hello', 'world','my name is Michael']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_list('hello') == ['hello']\nassert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('hello\\nworld') == ['hello', 'world']\nassert     string_to_list('hello\\n\\n\\nworld') == ['hello', '', '', 'world']\nassert     string_to_list('hello\\n\\n\\nworld\\n\\n\\n\\n') == ['hello', '', '', 'world', '', '', '']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_list('a b') == ['a', 'b']\nassert     string_to_list('a') == ['a']\nassert     string_to_list('a b') == ['a', 'b']\nassert     string_to_list(' a ') == ['a']\nassert     string_to_list('a b  c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_list('hello') == ['hello']\nassert     string_to_list('hello boy') == ['hello', 'boy']\nassert     string_to_list('hello boy there') == ['hello', 'boy', 'there']\nassert     string_to_list('hello boy there boy') == ['hello', 'boy', 'there', 'boy']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef string_to_list_as_dictionary(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character. \n    You should split on the space characters and then return the list of words as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     'hello world' == 'hello world'\nassert     'hello world' == string_to_list('hello world')\nassert     ['hello', 'world'] == string_to_list('hello world')\n\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         string_to_list(\"input: hello world\") == [\"input\", \"hello\", \"world\"]\nassert         string_to_list(\"input: hi\") == [\"input\", \"hi\"]\nassert         string_to_list(\"input: \") == [\"input\"]\nassert         string_to_list(\"input\") == [\"input\"]\nassert         string_to_list(\"\") == []\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_list('1 2 3 4') == ['1', '2', '3', '4']\nassert     string_to_list('1\\t2\\t3\\t4') == ['1', '2', '3', '4']\nassert     string_to_list('1\\t2\\t3\\t4\\n') == ['1', '2', '3', '4']\nassert     string_to_list('1\\t2\\t3\\t4\\r\\n') == ['1', '2', '3', '4']\nassert     string_to_list('1\\t2\\t3\\t4\\r') == ['1', '2', '3', '4']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         ['H', 'e', 'l', 'l', 'o'] == string_to_list('Hello')\nassert         ['h', 'e', 'l', 'l', 'o'] == string_to_list('Hello World')\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 4\nassert     search([1, 1, 2, 3, 4]) == 3\nassert     search([1]) == 1\nassert     search([]) == -1"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([1,1,2,2,3,3,4]) == 4\nassert     search([1,1,2,2,3,3]) == 3\nassert     search([1,1,2,2,3,3,4,4]) == 2\nassert     search([]) == None\nassert     search([1]) == 1\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     search([1,1,2,2,3,4,4,5,5,5,5,5,5,5,6,6,6,7,8]) == 5\nassert     search([]) == None\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     search([1, 2, 2, 4, 5]) == 2\nassert     search([1, 3, 3, 4, 5]) == 3\nassert     search([1, 3, 2, 3, 5]) == 3\nassert     search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     search([2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == 4\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (search([2,4,6,6,8]) == 4)\nassert     (search([1,1,2,2,3]) == 2)\nassert     (search([2,2,3,4,4]) == None)\nassert     (search([1,2,2,3]) == 1)\nassert     (search([1,2,3]) == 2)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     search([1,1,2,3,3,4,5,5]) == 3, \"Not working\"\nassert     search([1,2,3,4,5,5]) == -1, \"Not working\"\nassert     search([1,2,3,3,4,5,5]) == -1, \"Not working\"\nassert     search([1,1,2,2,3,3,4,4]) == -1, \"Not working\"\nassert     search([1,2,3,4,5,6]) == -1, \"Not working\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     search([1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 6, 6]) == 6\nassert     search([1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 6]) == None\nassert     search([1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6]) == None\nassert     search([1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 6]) == 1"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     search([1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5]) == 4\nassert     search([1, 2, 3, 4, 5, 6]) == None"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(3,4), (2, 5), (5, 4), (4, 5), (6, 7), (8, 4)]) == (24, 4)\nassert     max_product_tuple([(1, 3), (2, -2)]) == (6, -2)\nassert     max_product_tuple([(3, 3), (2, -2), (4, -4)]) == (12, -4)\nassert     max_product_tuple([(-3, -4), (2, -2), (4, 4), (-5, -3), (1, 3)]) == (9, 3)\nassert     max_product_tuple([(1, 1), (1, -1), (1, 3), (1, 4), (1, -3), (1, 2), (1, -2)]) == (2, -1)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(2, 3), (-2, 2), (0, -2), (0, 2)])     ==     6\nassert     max_product_tuple([(2, 3), (-2, 2), (0, -1), (0, 1)])     ==     0\nassert     max_product_tuple([(-2, -3), (0, -2), (0, 2), (1, -2)])     ==     2\nassert     max_product_tuple([(-2, -3), (0, -2), (0, 2), (1, -2), (-5, -3)])     ==     2\nassert     max_product_tuple([(-2, -3), (0, -2), (0, 2), (1, -2), (-5, -3), (-4, -3)])     ==     -2\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(1, 3, 5, -7), (6, 4, -2, 6), (3, 4, -6, -3)]) == (3, 12, 30)\nassert     max_product_tuple([(0, 2, 3, -4), (-1, 0, -2, 3), (3, -4, 0, 0)]) == (-8, 0, 0)\nassert     max_product_tuple([(1, 2), (3, 4), (5, -6)]) == (6, 12, 30)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(1,4), (2,0), (3,6)]) == 36\nassert     max_product_tuple([(1,-4), (2,0), (3,-6)]) == 12\nassert     max_product_tuple([(1,4), (2,2), (3,-4)]) == 12\nassert     max_product_tuple([(1,4), (2,-2), (3,-4)]) == 24\nassert     max_product_tuple([(1,-4), (2,2), (3,-2)]) == 4\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(1, -5), (-4, -2), (0, -5), (1, -2), (1, -1)]) == (-5, -2, -1, -1, -1)\nassert     max_product_tuple([(1, 5), (1, -5), (0, 2), (2, -1), (0, 1)]) == (5, -5, 2, 1, 1)\nassert     max_product_tuple([(1, 5), (0, 2), (2, -1), (0, 1), (1, -5)]) == (5, 2, 1, -5, -5)\nassert     max_product_tuple([(-1, -5), (-2, -2), (-4, -2), (-5, -1), (-5, -5)]) == (-5, -2, -1, -1, -5)\nassert     max_product_tuple([(-1, 5), (-2, -5), (-4, -2), (-5, 1), (-5, 5)]) == (5, -5, -2, 1, 5)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_product_tuple([(1, 2), (0, -1), (-1, -2)]) == (1, -2)\nassert     max_product_tuple([(0, -1), (1, 2), (-2, 1)]) == (1, 2)\nassert     max_product_tuple([(0, -1), (1, -2), (-2, 1)]) == (1, -2)\nassert     max_product_tuple([(0, 1), (1, -2), (-2, 1)]) == (1, -2)\n\ndef max_product_tuple_max_product(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \n    Input: a list of tuples.\n    Output: a tuple of maximum absolute products.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(1,2), (2,3), (3,4), (5,6)]) == 6\nassert     max_product_tuple([(1,2), (2,-1), (3,3)]) == 9\nassert     max_product_tuple([(1,1), (2,2), (3,3)]) == 2\nassert     max_product_tuple([(1,2), (-2,3), (3,4), (5,-6)]) == 60\nassert     max_product_tuple([(-1,2), (2,-3), (3,4), (5,-6)]) == 60\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_product_tuple([(1, 7), (2, 4), (3, 3)]) == 22\nassert     max_product_tuple([(3, 7), (2, 4), (1, 3)]) == 84\nassert     max_product_tuple([(3, 7), (3, 3), (2, 4)]) == 84\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1,2,3,4),(5,6,-1,7),(8,9,10,-12)]) == (60, 54)\nassert     max_product_tuple([(1,2,3,4),(5,6,-1,-7),(8,9,10,-12)]) == (60, 54)\nassert     max_product_tuple([(1,2,3,-4),(5,6,-1,7),(8,9,10,-12)]) == (60, 54)\nassert     max_product_tuple([(1,2,3,-4),(5,6,-1,-7),(8,9,10,-12)]) == (60, 54)\n\ndef max_product_in_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\nprint\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(20) == 488"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(10000) == 46932\n\ndef amicable_numbers_sum_fast(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = {i:0 for i in range(1, limit+1)}\n    for i in range(1, limit):\n        if i not in amicable_numbers:\n            continue\n        for j in range(1, limit):\n            if j not in amicable_numbers:\n                continue\n            if i*j == amicable_numbers[i] + amicable_numbers[j] and i!= j:\n                amicable_numbers[amicable_numbers[i]] += 1\n                amicable_numbers[amicable_numbers[j]] += 1\n    return sum(i for i in amicable_numbers.values() if i > 1)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == 23\nassert     amicable_numbers_sum(20) == 79\nassert     amicable_numbers_sum(100) == 464\nassert     amicable_numbers_sum(1000) == 3241\nassert     amicable_numbers_sum(10000) == 4736\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(100) == sum(range(1,101))\nassert     amicable_numbers_sum(1000) == sum(range(1,1001))\nassert     amicable_numbers_sum(10000) == sum(range(1,10001))\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(20) == 4418\nassert     amicable_numbers_sum(100) == 220\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(10000) == 66917\nassert     amicable_numbers_sum(100) == 25\nassert     amicable_numbers_sum(5) == 3\nassert     amicable_numbers_sum(5) == 2"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(10) == 40\nassert     amicable_numbers_sum(100) == 220\n\ndef amicable_numbers_prod(limit):\n    '''\n    Write a function to multiply all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n\ndef is_amicable_pair(a, b):\n    '''\n    Write a function to check if two integers are amicable numbers.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     amicable_numbers_sum(10000) == 5761\nassert     amicable_numbers_sum(100000) == 153432\nassert     amicable_numbers_sum(1000000) == 31626\nassert     amicable_numbers_sum(1000001) == 498500\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     angle_complex(1, 0) == cmath.phase(complex(1,0))\nassert     angle_complex(-1, 0) == -cmath.phase(complex(-1,0))\nassert     angle_complex(1, -1) == -cmath.phase(complex(1,-1))\nassert     angle_complex(-1, -1) == cmath.phase(complex(-1,-1))\nassert     angle_complex(-1, 1) == cmath.phase(complex(-1,1))\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     angle_complex(complex(1,0), complex(0,1)) == cmath.pi/2\nassert     angle_complex(complex(1,0), complex(1,0)) == 0\nassert     angle_complex(complex(-1,0), complex(0,-1)) == cmath.pi\nassert     angle_complex(complex(1,1), complex(1,1)) == cmath.pi/4\nassert     angle_complex(complex(0,1), complex(-1,0)) == cmath.pi/2\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     angle_complex(complex(-1, -1), complex(0, -1)) == 0\nassert     angle_complex(complex(-1, 0), complex(0, 0)) == 90\nassert     angle_complex(complex(-1, 1), complex(0, 1)) == 180\nassert     angle_complex(complex(0, -1), complex(0, 0)) == -90\nassert     angle_complex(complex(0, 0), complex(0, 0)) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     angle_complex(complex(1, 1), complex(1, 0)) == cmath.pi/4\nassert     angle_complex(complex(0, 1), complex(0, 1)) == cmath.pi/2\nassert     angle_complex(complex(1, 1), complex(-1, 1)) == cmath.pi/4\nassert     angle_complex(complex(-1, 1), complex(-1, 1)) == cmath.pi/2\nassert     angle_complex(complex(-1, 1), complex(1, 1)) == cmath.pi/4\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     angle_complex(complex(0,1),complex(1,1)) == cmath.pi/4\nassert     angle_complex(complex(0,1),complex(1,0)) == cmath.pi/2\nassert     angle_complex(complex(0,1),complex(0,1)) == 0\nassert     angle_complex(complex(-1,1),complex(1,0)) == cmath.pi\nassert     angle_complex(complex(-1,1),complex(0,1)) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     angle_complex(complex(1,0),complex(0,1))     ==     90.0\nassert     angle_complex(complex(0,1),complex(1,0))     ==     0.0\nassert     angle_complex(complex(0,1),complex(1,1))     ==     45.0\nassert     angle_complex(complex(1,0),complex(0,1))     ==     135.0\nassert     angle_complex(complex(1,1),complex(0,1))     ==     90.0\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     angle_complex(0,0) == 0\nassert     angle_complex(0,complex(0,1)) == cmath.pi/2\nassert     angle_complex(complex(1,1),complex(1,1)) == cmath.pi/4\nassert     angle_complex(complex(1,1),complex(0,1)) == cmath.pi/2\nassert     angle_complex(complex(0,1),complex(1,1)) == -cmath.pi/4\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     angle_complex(cmath.rect(1,2),cmath.rect(1,2)) == 0\nassert     angle_complex(cmath.rect(1,2),cmath.rect(1,-2)) == -cmath.pi/2\nassert     angle_complex(cmath.rect(1,2),cmath.rect(1,2)) == 0\nassert     angle_complex(cmath.rect(1,-1),cmath.rect(1,-1)) == 0\nassert     angle_complex(cmath.rect(1,-1),cmath.rect(1,1)) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     angle_complex(complex(1, 1), complex(1, 1)) == cmath.pi / 2\nassert     angle_complex(complex(1, 0), complex(1, 1)) == cmath.pi / 4\nassert     angle_complex(complex(0, 0), complex(0, 0)) == 0\nassert     angle_complex(complex(1, 1), complex(-1, 1)) == cmath.pi / 4\nassert     angle_complex(complex(1, -1), complex(1, 1)) == cmath.pi / 2\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     angle_complex(complex(1,0), complex(0,1)) == cmath.pi/2.0\nassert     angle_complex(complex(1,0), complex(0,-1)) == 3*cmath.pi/2.0\nassert     angle_complex(complex(-1,0), complex(0,1)) == cmath.pi\nassert     angle_complex(complex(-1,0), complex(0,-1)) == cmath.pi\nassert     angle_complex(complex(1,0), complex(0,-1)) == cmath.pi\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (find_length('00111100') == 4)\nassert     (find_length('10101') == 4)\nassert     (find_length('1010101') == 1)\nassert     (find_length('01101010100110') == 10)\nassert     (find_length('00010101') == 5)\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_length('10101111') == 2\nassert     find_length('10001110') == 1\nassert     find_length('0100110') == 1\nassert     find_length('11111111') == 0\nassert     find_length('101') == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef is_anagram(str1, str2):\n    '''\n    Given two strings, write a function that checks if the two strings are anagrams of each other.\n    '''\n    pass\n\nassert is_anagram(\"aa\", \"aa\") == True\nassert is_anagram(\"aa\", \"ab\") == False\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_length('0010111') == 0\nassert     find_length('100101') == 1\nassert     find_length('010110') == 1\nassert     find_length('010100') == 0\nassert     find_length('1000000') == 1\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_length('0010010') == 4\nassert     find_length('10101') == 3\nassert     find_length('1010') == 4\nassert     find_length('10110') == 3\nassert     find_length('10110001111010') == 6\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef solve(string):\n    '''\n    Given a binary string, return the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_length('110000011001101111000100100') == 2\nassert     find_length('0000000010000000101110100010') == 5\nassert     find_length('0000000000001000100010001') == 5\nassert     find_length('0000000000000000') == 0\nassert     find_length('011111111111111101') == 10\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \ndef test_find_length():\n    assert find_length(\"1110010\") == 1\n    assert find_length(\"0100010\") == 0\n    assert find_length(\"01111111111111101\") == 3\n    assert find_length(\"100010011\") == 1\n    "
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_length(\"00011000\") == 3\nassert     find_length(\"01010101\") == 2\nassert     find_length(\"1\") == 0\nassert     find_length(\"\") == 0\nassert     find_length(\"1101101\") == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_length('0101101') == 3, 'find_length(\"0101101\") should be 3'\nassert     find_length('0101010') == 5, 'find_length(\"0101010\") should be 5'\nassert     find_length('1010101') == 1, 'find_length(\"1010101\") should be 1'\nassert     find_length('0100101011010') == 3, 'find_length(\"0100101011010\") should be 3'\nassert     find_length('010010101101') == 4, 'find_length(\"010010101101\") should be 4'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum(36,48)    ==  24\nassert     sum(60,24)    ==  60\nassert     sum(60,48)    ==  12\nassert     sum(11,11)    ==  11\nassert     sum(12,11)    ==  12\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum(16,10) == 1\nassert     sum(256,128) == 4\nassert     sum(13,19) == 1\nassert     sum(26,23) == 1\nassert     sum(16,18) == 1\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum(1,2) == 2\nassert     sum(2,4) == 6\nassert     sum(10,20) == 10\nassert     sum(10,12) == 12\nassert     sum(4,5) == 1\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum(12,18) == 6\nassert     sum(0,18) == 18\nassert     sum(12,0) == 12\nassert     sum(6,18) == 6\nassert     sum(12,12) == 12\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sum(54,24) == 18)\nassert     (sum(36,24) == 6)\nassert     (sum(49,24) == 14)\nassert     (sum(98,24) == 22)\nassert     (sum(30,20) == 10)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sum(12,18) == 6)\nassert     (sum(15,20) == 6)\nassert     (sum(3,5) == 1)\nassert     (sum(24,18) == 6)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum(120, 140) == 240\nassert     sum(12, 28) == 120\nassert     sum(60, 40) == 120\nassert     sum(15, 30) == 15\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum(4,8)    ==    2\nassert     sum(10,12)    ==    6\nassert     sum(100,200)    ==    4\nassert     sum(3,8)    ==    1\nassert     sum(12,8)    ==    2\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum(5,8) == 6\nassert     sum(10,8) == 10\nassert     sum(3,9) == 3\nassert     sum(17,18) == 5\nprint 'all tests passed'"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef subtract_int(x, y):\n    '''\n    Write a function to subtract two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply_int(5, 5) == 25\nassert     multiply_int(5, -5) == -25\nassert     multiply_int(5, 0) == 0\nassert     multiply_int(5, -0) == 0\nassert     multiply_int(-5, 5) == -25\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply_int(5, 6) == 30\nassert     multiply_int(-2, 2) == -4\nassert     multiply_int(-2, -2) == 4\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(-1, -1) == 1\nassert     multiply_int(-1, 1) == -1\nassert     multiply_int(0, 5) == 0\nassert     multiply_int(3, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply_int(3, 5) == 15\nassert     multiply_int(3, -5) == -15\nassert     multiply_int(-3, -5) == 15\nassert     multiply_int(-3, 5) == -15\nassert     multiply_int(-3, -5) == 15\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply_int(2, 1) == 2\nassert     multiply_int(3, 1) == 3\nassert     multiply_int(4, 1) == 4\nassert     multiply_int(1, 2) == 2\nassert     multiply_int(1, 3) == 3\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply_int(5, 3) == 15\nassert     multiply_int(-5, -3) == 15\nassert     multiply_int(0, -3) == 0\nassert     multiply_int(3, 0) == 0\nassert     multiply_int(1, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply_int(2, 3)    == 6\nassert     multiply_int(5, 6)    == 30\nassert     multiply_int(5, -2)    == -10\nassert     multiply_int(0, 10)    == 0\nassert     multiply_int(10, 0)    == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply_int(5, 1) == 5\nassert     multiply_int(10, 5) == 50\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     long_words(1, ['a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) == ['a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\nassert     long_words(1, ['a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ['a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     long_words(1, ['a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'zzzzz']) == ['a', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'zzzzz']\nassert     long_words(1, ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'zzzzz', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     long_words(8, ['hello', 'goodbye', 'clown', 'deck', 'fool']) == ['goodbye', 'fool']\nassert     long_words(11, ['hello', 'goodbye', 'clown', 'deck', 'fool']) == ['deck', 'fool']\nassert     long_words(15, ['hello', 'goodbye', 'clown', 'deck', 'fool']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     long_words(8, ['this', 'is', 'great', 'but','so', 'long', 'it', 'is','so', 'wow']) == ['this', 'is', 'great', 'but','so', 'wow']\nassert     long_words(5, ['this', 'is', 'great', 'but','so', 'wow']) == ['this', 'is', 'great']\nassert     long_words(8, ['this', 'is', 'great', 'but','so', 'long', 'it', 'is','so', 'wow']) == ['so', 'wow', 'long', 'is']\nassert     long_words(0, ['this', 'is', 'great', 'but','so', 'wow']) == []\n\ndef longest_word(n, str):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     long_words(5, ['elbowed','succulent', 'prettiest', 'flowering', 'tremendous','magic', 'transparent', 'enchanting', 'frozen', 'unbounded']) == ['unbounded','magic', 'transparent']\nassert     long_words(2, ['banana', 'apple', 'orange', 'kiwi', 'lemon','mango', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon', 'lime', 'limoncello', 'coconut', 'lemon', 'lime', 'lemon'"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     long_words(3, ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c']\nassert     long_words(5, ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     long_words(9, ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     long_words(3, ['i', 'was', 'a', 'boy', 'and', 'a', 'girl', 'not', 'a', 'bob']) == ['boy', 'girl']\nassert     long_words(4, ['my', 'name', 'is', 'Peter', 'I', 'am', 'Peter']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     long_words(2, [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\", \"\", \"\", \"\"]) == [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\"]\nassert     long_words(2, [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\", \"\", \"\", \"asdf\", \"asdf\", \"\"]) == [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\"]\nassert     long_words(2, [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\", \"\", \"\", \"asdf\", \"\", \"asdf\"]) == [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\"]\nassert     long_words(3, [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\", \"\", \"\", \"asdf\", \"\", \"asdf\"]) == [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\"]\nassert     long_words(3, [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\", \"\", \"\", \"asdf\", \"asdf\", \"asdf\"]) == [\"this\", \"is\", \"a\", \"test\", \"with\", \"arguments\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     long_words(3, [\"this\", \"that\", \"that\", \"the\", \"as\", \"out\", \"in\", \"the\", \"of\"]) ==     ['out', 'that', 'as']\nassert     long_words(7, [\"this\", \"that\", \"that\", \"the\", \"as\", \"out\", \"in\", \"the\", \"of\"]) ==     ['out', 'that', 'the']\nassert     long_words(3, [\"this\", \"that\", \"that\", \"the\", \"as\", \"out\", \"in\", \"the\", \"of\"]) ==     ['the', 'as', 'out']\nassert     long_words(0, [\"this\", \"that\", \"that\", \"the\", \"as\", \"out\", \"in\", \"the\", \"of\"]) ==     []\nassert     long_words(7, [\"this\", \"that\", \"that\", \"the\", \"as\", \"out\", \"in\", \"the\", \"of\"]) ==     ['the', 'as', 'out']\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     long_words(3, ['bar', 'foo', 'baz','spam', 'eggs']) == ['bar', 'baz']\nassert     long_words(2, ['bar', 'foo', 'baz','spam', 'eggs']) == ['foo', 'baz']\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     magic_square_test([[2, 7, 6],\n                            [9, 5, 1],\n                            [4, 3, 8]]) is True\nassert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) is False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     magic_square_test([\n                [1,6,8,9,5,7,4,3,2],\n                [2,7,3,4,8,9,5,6,1],\n                [4,9,8,7,6,5,2,3,1],\n                [7,5,6,8,3,4,1,2,9],\n                [9,3,4,1,2,7,5,6,8],\n                [5,8,2,9,6,1,7,3,4],\n                [3,1,6,5,7,8,9,4,2],\n                [8,4,7,2,3,9,6,1,5],\n                [6,9,1,4,5,2,8,7,3]]) == True\nassert     magic_square_test([\n                [1,2,3,4,5,6,7,8,9],\n                [2,3,4,5,6,7,8,9,1],\n                [4,5,6,7,8,9,1,2,3],\n                [8,9,1,2,3,4,5,6,7],\n                [6,7,8,9,1,2,3,4,5],\n                [2,3,4,5,6,7,8,9,1],\n                [9,1,2,3,4,5,6,7,8],\n                [7,8,9,1,2,3,4,5,6],\n                [5,6,7,8,9,1,2,3,4]]) == True\nassert     magic_square_test([\n                [1,2,3,4,5,6,7,8,9],\n                [2,3,4,5,6,7,8,9,1],\n                [4,5,6,7,8,9,1,2,3],\n                [8,9,1,2,3,4,5,6,7],\n                [6,7,8,9,1,2,3,4,5],\n                [2,3,4,5,6,7,8,9,1],\n                [9,1,2,3,4,5,6,7,8],\n                [7,8,9,1,2,3,4,5,6],\n                [5,6,7,8,9,1,2,3,4]]) == True\nassert     magic_square_test([\n                [1,2,3,4,5,6,7,8,9],\n                [2,3,4,5,6,7,8,9,1],\n                [4,5,6,7,8,9,1,2,3],\n                [8,9,1,2,3,4,5,6,7],\n                [6,7,8,9,1,2,3,4,5],\n                [2,3,4,5,6,7,8,9,1],\n                [9,1,2,3,4,5,6,7,8],\n                [7,8,9,1,2,3,4,5,6],\n                [5,6,7,8,9,1,2,3,4]]) == False\nassert     magic_square_test([\n                [1,2,3,4,5,6,7,8,9],\n                [2,3,4,5,6,7,8,9,1],\n                [4,5,6,7,8,9,1,2,3],\n                [8,9,1,2,3,4,5,6,7],\n                [6,7,8,9,1,2,3,4,5],\n                [2,3,4,5,6,7,8,9,1],\n                [9,1,2,3,4,5,6,7,8],\n                [7,8,9,1,2,3,4,5,6],\n                [5,6,7,8,9,1,2,3,4]]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]\n                   ]) == True\nassert     magic_square_test([[7,12,5],[1,9,6],[15,7,14]\n                   ]) == False\nassert     magic_square_test([[3,4,5],[1,2,6],[7,8,9]\n                   ]) == True\nassert     magic_square_test([[1,2,3],[8,9,4],[7,6,5]\n                   ]) == True\nassert     magic_square_test([[6,1,8],[7,5,3],[2,9,4]\n                   ]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == True\nassert     magic_square_test([[4,9,2,5],[3,5,7,8],[8,1,6,3],[7,2,3,1]]) == True\nassert     magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False\nassert     magic_square_test([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == True\nassert     magic_square_test([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]]) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     magic_square_test([[2, 7, 6],\n                            [9, 5, 1],\n                            [4, 3, 8]]) is True\n\nassert     magic_square_test([[7, 12, 1, 14],\n                            [2, 13, 8, 11],\n                            [16, 3, 10, 5],\n                            [9, 6, 15, 4]]) is False\n\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) is True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     magic_square_test([\n                    [5, 3, 4, 6, 7, 8],\n                    [6, 1, 2, 9, 5, 0],\n                    [7, 8, 9, 2, 3, 4],\n                    [4, 9, 2, 7, 6, 3],\n                    [8, 5, 9, 3, 4, 7],\n                    [0, 0, 0, 0, 0, 0]]) == True\n\nassert     magic_square_test([\n                    [1, 2, 3, 4, 5, 6],\n                    [7, 8, 9, 10, 11, 12],\n                    [13, 14, 15, 16, 17, 18],\n                    [19, 20, 21, 22, 23, 24],\n                    [25, 26, 27, 28, 29, 30],\n                    [31, 32, 33, 34, 35, 36]]) == False\n\nassert     magic_square_test([\n                    [1, 2, 3, 4, 5, 6],\n                    [7, 8, 9, 10, 11, 12],\n                    [13, 14, 15, 16, 17, 18],\n                    [19, 20, 21, 22, 23, 24],\n                    [25, 26, 27, 28, 29, 30],\n                    [31, 32, 33, 34, 35, 36]]) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) is True\nassert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) is True\nassert     magic_square_test([[4,3,8],[9,5,1],[2,7,6]]) is False\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef generate_magic_square(n):\n    '''\n    Write a function that generates a magic square of size nxn\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_occurrences([1, 2, 3, 2]) == 2\nassert     max_occurrences([1, 1, 1, 2, 3, 3]) == 3\nassert     max_occurrences([]) == None\nassert     max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n\n\ndef sort_by_frequency(nums):\n    '''\n    Write a function to sort a list of numbers by frequency of occurrenece.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_occurrences([1, 2, 3]) == 3\nassert     max_occurrences([1, 2, 2, 3]) == 2\nassert     max_occurrences([1, 1, 2, 3]) == 2\nassert     max_occurrences([1, 1, 1, 2, 3]) == 1\nassert     max_occurrences([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_occurrences([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]) == 3\nassert     max_occurrences([1,2,3,1,2,1]) == 2\nassert     max_occurrences([]) == 0\nassert     max_occurrences([1,2,3,4,5,6,7,8,9]) == 0\nassert     max_occurrences([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,0,0]) == 9\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_occurrences([4, 1, 4, 1, 4, 1]) == 1\nassert     max_occurrences([1, 2, 3, 4, 4, 4, 4, 4, 4]) == 4\nassert     max_occurrences([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert max_occurrences([1,2,3,4,1,2,3,4,2,3,3,4,3,4,2,2]) == [3, 4, 2]\nassert max_occurrences([1,2,2,3,3,4,4,5,5,6]) == [5, 6]\nassert max_occurrences([1,1,1,1,1,1]) == [1]\nassert max_occurrences([]) == []\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_occurrences([1, 2, 3, 4, 5, 5]) == 5\nassert     max_occurrences([1, 2, 3, 4, 5, 1]) == 5\nassert     max_occurrences([1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 5]) == 1\nassert     max_occurrences([1, 1, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5\nassert     max_occurrences([1, 1, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_occurrences([4, 4, 4, 4, 2, 3, 4]) == 4\nassert     max_occurrences([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert     max_occurrences([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert     max_occurrences([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\nassert     max_occurrences([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_occurrences([4, 1, 2, 2, 1, 1, 3]) == 1\nassert     max_occurrences([1, 2, 3, 1, 1, 3]) == 1\nassert     max_occurrences([1, 2, 3, 1, 1]) == 1\nassert     max_occurrences([1, 2, 3, 1, 1, 3, 1, 1]) == 1\nassert     max_occurrences([1, 1, 2, 2, 2, 3, 3, 1]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef max_occurrences_naive(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freqs = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        freqs[item] += 1\n        if freqs[item] > max_freq:\n            max_freq = freqs[item]\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_occurrences([1, 1, 2, 2, 3, 3, 4]) == 3\nassert     max_occurrences([1, 2, 3, 4, 5, 1, 1]) == 1\nassert     max_occurrences([1, 2, 3, 4, 5, 1, 1, 1]) == 1\nassert     max_occurrences([1, 1, 2, 2, 3, 3, 4]) == 3\nassert     max_occurrences([1, 2, 3, 4, 5, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_vowels('hello') == 'holle', reverse_vowels('hello')\nassert     reverse_vowels('world') == 'dlrow', reverse_vowels('world')\nassert     reverse_vowels('aeiou') == 'uoiea', reverse_vowels('aeiou')\nassert     reverse_vowels('most likely not the answer') == 'leot ma oue sn eht ot yml aot nht ', reverse_vowels('most likely not the answer')\nassert     reverse_vowels('peter') == 'tethp', reverse_vowels('peter')\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_vowels('hello')    == 'holle', reverse_vowels('hello')\nassert     reverse_vowels('leetcode')    == 'leotcede', reverse_vowels('leetcode')\nassert     reverse_vowels('aaiougrt')    == 'rtggaraa', reverse_vowels('aaiougrt')\nassert     reverse_vowels('AEIOU')    == 'UYEA', reverse_vowels('AEIOU')\nassert     reverse_vowels('aeiou')    == 'uoiea', reverse_vowels('aeiou')\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('leetcode') == 'leotcede'\nassert     reverse_vowels('rhythm') == 'thora'\nassert     reverse_vowels('a') == 'a'\nassert     reverse_vowels('a b c') == 'c b a'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_vowels('hello') == 'holle','reversing vowels in string does not work'\nassert     reverse_vowels('greetings') == 'kgrtsegir','reversing vowels in string does not work'\nassert     reverse_vowels('civic') == 'ivick','reversing vowels in string does not work'\nassert     reverse_vowels('programming') == 'rngeoprgm','reversing vowels in string does not work'\nassert     reverse_vowels('grape') == 'grep','reversing vowels in string does not work'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_vowels(\"helloworld\") == \"dlrow olleh\", reverse_vowels(\"helloworld\")\nassert     reverse_vowels(\"hello\") == \"olleh\", reverse_vowels(\"hello\")\nassert     reverse_vowels(\"a\") == \"a\", reverse_vowels(\"a\")\nassert     reverse_vowels(\"ab\") == \"ba\", reverse_vowels(\"ab\")\nassert     reverse_vowels(\"o\") == \"o\", reverse_vowels(\"o\")\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_vowels('hello world') == 'dlrow olleh', '''reverse_vowels('hello world')'''\nassert     reverse_vowels('hello') == 'olleh', '''reverse_vowels('hello')'''\nassert     reverse_vowels('a') == 'a', '''reverse_vowels('a')'''\nassert     reverse_vowels('b') == 'b', '''reverse_vowels('b')'''\nassert     reverse_vowels('c') == 'c', '''reverse_vowels('c')'''\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_vowels(\"Hello World\") == \"Holle Wdru\"\nassert     reverse_vowels(\"Zodiac\") == \"Zodcia\"\nassert     reverse_vowels(\"Mr. Owl ate my metal worm\") == \"Mr. Owl ate my metal worm\"\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_vowels('hello') == 'holle', 'failed'\nassert     reverse_vowels('hello world') == 'hllo worl', 'failed'\nassert     reverse_vowels('hi') == 'i', 'failed'\nassert     reverse_vowels('a') == 'a', 'failed'\nassert     reverse_vowels('!@#$%^&*()_+') == '!@#$%^&*()_+', 'failed'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_vowels('hello') == 'holle','should be holle'\nassert     reverse_vowels('leetcode') == 'leotcede','should be leotcede'\nassert     reverse_vowels('aA') == 'aA','should be aA'\nassert     reverse_vowels('!') == '!','should be!'\nassert     reverse_vowels('revoMe') =='revoMe','should be revoMe'\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\"\nassert     reverse_vowels(\"world\") == \"world\"\nassert     reverse_vowels(\"abcd\") == \"dcba\"\nassert     reverse_vowels(\"ca\") == \"a\"\nassert     reverse_vowels(\"a\") == \"a\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tup_string(())     == '()',        'Fail: Empty tuple'\nassert     tup_string((1,))     == '(1)',        'Fail: 1 tuple'\nassert     tup_string((1,2,3))     == '(1, 2, 3)',     'Fail: 3 tuple'\nassert     tup_string((1,2,3,4,5))     == '(1, 2, 3, 4, 5)',    'Fail: 5 tuple'\nassert     tup_string((1,2,3,4,5,6))     == '(1, 2, 3, 4, 5, 6)',    'Fail: 6 tuple'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tup_string((1,2,3,4,5,6))     == \"(1, 2, 3, 4, 5, 6)\"\nassert     tup_string((1,3,5,7))         == \"(1, 3, 5, 7)\"\nassert     tup_string((2,4,6,8))         == \"(2, 4, 6, 8)\"\nassert     tup_string((3,6,9,12,15))    == \"(3, 6, 9, 12, 15)\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tup_string((0,1,2,3,4,5,6,7,8,9)) == '(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)'\nassert     tup_string((0,1,2,3,4,5)) == '(0, 1, 2, 3, 4, 5)'\nassert     tup_string((1,2,3,4,5,6,7)) == '(1, 2, 3, 4, 5, 6, 7)'\nassert     tup_string((1,2,3,4,5,6)) == '(1, 2, 3, 4, 5, 6)'\nassert     tup_string((1,2,3,4)) == '(1, 2, 3, 4)'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)'\nassert     tup_string((1, 2, 3, 4)) == '(1, 2, 3, 4)'\nassert     tup_string((1, 2, 3, 4, 5)) == '(1, 2, 3, 4, 5)'\nassert     tup_string((1, 2, 3, 4, 5, 6)) == '(1, 2, 3, 4, 5, 6)'\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == '(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tup_string(('a', 'b')) == 'a,b'\nassert     tup_string(('a', 'b', 'c')) == 'a,b,c'\nassert     tup_string(('a', 'b', 'c', 'd')) == 'a,b,c,d'\nassert     tup_string(('a', 'b', 'c', 'd', 'e')) == 'a,b,c,d,e'\nassert     tup_string(('a', 'b', 'c', 'd', 'e', 'f')) == 'a,b,c,d,e,f'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tup_string((1, 2, 3, 4, 5, 6))     ==     \"(1, 2, 3, 4, 5, 6)\"\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9))     ==     \"(1, 2, 3, 4, 5, 6, 7, 8, 9)\"\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))     ==     \"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\"\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))     ==     \"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\"\nassert     tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))     ==     \"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tup_string(('hello', 'world', 'Good', 'bye'))     ==     'hello world Good bye'\nassert     tup_string(('one', 'two', 'three', 'four'))     ==     'one two three four'\nassert     tup_string(('hello', 'world', 'Good', 'bye', 'gbye'))     ==     'hello world Good bye bye'\nassert     tup_string(('hello', 'world', 'Good', 'bye', 'gbye', 'hello'))     ==     'hello world Good bye bye hello'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tup_string(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 'a-b-c-d-e-f-g-h-i', 'incorrect'\nassert     tup_string((2, 3, 4, 5, 6, 7)) == '2-3-4-5-6-7', 'incorrect'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tup_string((1, 2, 3)) == '(1, 2, 3)'\nassert     tup_string((1, 2, 3, 4)) == '(1, 2, 3, 4)'\nassert     tup_string((1, 2, (3, 4))) == '(1, 2, (3, 4))'\nassert     tup_string((1, 2, (3, (4, 5)))) == '(1, 2, (3, (4, 5)))'\nassert     tup_string((1, 2, (3, (4, 5), 6))) == '(1, 2, (3, (4, 5), 6))'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tup_string((1,2,3,4)) == '(1, 2, 3, 4)'\nassert     tup_string(('1','2','3','4')) == '(' + '1', '2', '3', '4' + ')'\nassert     tup_string((1,2)) == '(1, 2)'\nassert     tup_string((1,)) == '(1)'\nassert     tup_string('') == ''\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_negativenum([-1, 2, 3, 4, 5]) == -1 + 2 + 3 + 4 + 5\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -15\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([1, 2, 3, 4, 5]) == 0"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_negativenum([1,2,3,4,-5,6]) == -1\nassert     sum_negativenum([1,-2,3,4,-5,6]) == -13\nassert     sum_negativenum([1,2,3,4,-5,6,-6,-7]) == -14\n\ndef sum_negativenum_1(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_negativenum([1,2,3]) == -1\nassert     sum_negativenum([1,-2,3]) == -5\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1,-2,3]) == -6\nassert     sum_negativenum([-1,-2,3,-4,-5]) == -9\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_negativenum([5, -1, -8, -9]) == -9\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([1]) == 0\nassert     sum_negativenum([1, 2, 3, 4, 5]) == -15\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -15\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_negativenum([1, 2, 3, 4, 5]) == -15\nassert     sum_negativenum([-1, -2, 3, 4, -5]) == -15\nassert     sum_negativenum([-1, 2, 3, 4, -5]) == -15\nassert     sum_negativenum([0, 2, 3, 4, -5]) == -15\nassert     sum_negativenum([-3, -5, -7, -4, -2]) == -22\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_negativenum([1, 2, 3, 4, 5, -6, -7, -8, -9, -10]) == -55\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -15\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([1,2,3,4,5,6,7,8,9,10]) == 55\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sum_negativenum([-1,-2,-3,-4]) == -9)\nassert     (sum_negativenum([-1,2,3,4]) == -1)\nassert     (sum_negativenum([0,1,2,3,4,5]) == -15)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hexagonal_num(10)    == 23, hexagonal_num(10)\nassert     hexagonal_num(20)    == 57, hexagonal_num(20)\nassert     hexagonal_num(30)    == 102, hexagonal_num(30)\nassert     hexagonal_num(40)    == 190, hexagonal_num(40)\nassert     hexagonal_num(50)    == 360, hexagonal_num(50)\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 5\nassert     hexagonal_num(4) == 7\nassert     hexagonal_num(5) == 9\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 8\nassert     hexagonal_num(3) == 13\nassert     hexagonal_num(4) == 22\nassert     hexagonal_num(5) == 37\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hexagonal_num(0) == 0\nassert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 6\nassert     hexagonal_num(4) == 10\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hexagonal_num(8) == 348\nassert     hexagonal_num(9) == 442\nassert     hexagonal_num(10) == 912\nassert     hexagonal_num(11) == 1652\nassert     hexagonal_num(12) == 2674\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 1\nassert     hexagonal_num(3) == 2\nassert     hexagonal_num(4) == 4\nassert     hexagonal_num(5) == 7\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hexagonal_num(10)    == 26, \"the 10th hexagonal number is 26\"\nassert     hexagonal_num(0)    == 0, \"the 0th hexagonal number is 0\"\nassert     hexagonal_num(11)    == 45, \"the 11th hexagonal number is 45\"\nassert     hexagonal_num(16)    == 64, \"the 16th hexagonal number is 64\"\nassert     hexagonal_num(19)    == 97, \"the 19th hexagonal number is 97\"\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hexagonal_num(1) == 0\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 6\nassert     hexagonal_num(4) == 10\nassert     hexagonal_num(5) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hexagonal_num(2) == 7\nassert     hexagonal_num(3) == 8\nassert     hexagonal_num(4) == 19\nassert     hexagonal_num(5) == 22\nassert     hexagonal_num(6) == 35\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     zero_count([0,1,0,0,1,0,0]) == 0.6\nassert     zero_count([0,1,0,1,0,0,0,1,0,0,0,0]) == 0.4\nassert     zero_count([0,0,0,0,0,0,0,0,0,0]) == 1\nassert     zero_count([1,2,0,0,1,0,0,2,0,0,0,0]) == 0.6\nassert     zero_count([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     zero_count([1, 1, 1]) == 3\nassert     zero_count([0, 0, 1, 1, 0, 1, 1]) == 5\nassert     zero_count([0, 0, 1, 1, 1, 1]) == 0\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     zero_count([1,0,1,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     zero_count([0,1,2,3,0,4,0]) == 1\nassert     zero_count([0,0,0,0,0,0,0,0,0]) == 0\nassert     zero_count([1,2,3,4,0,5,6,7,0,8,9,0,0]) == 2\nassert     zero_count([0,0,1,2,3,4,5,6,7,8,9,0,0]) == 6\nassert     zero_count([1,2,3,4,5,0,6,7,0,8,9,0,0]) == 7\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     zero_count([1, 1, 0, 1, 1]) == 0.25\nassert     zero_count([0, 0, 1, 1, 0]) == 0.5\nassert     zero_count([0, 0, 0, 1, 0]) == 0\nassert     zero_count([1, 0, 1, 0, 1]) == 0.75\nassert     zero_count([1, 0, 0, 0, 0]) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     zero_count([1, 0, 1, 1, 0, 1, 1, 1]) == 3, \"test case 1\"\nassert     zero_count([1, 1, 1, 0, 1, 1, 1]) == 3, \"test case 2\"\nassert     zero_count([0, 1, 1, 0, 1, 1, 1]) == 3, \"test case 3\"\nassert     zero_count([1, 0, 1, 1, 0, 1, 1, 1]) == 3, \"test case 4\"\nassert     zero_count([1, 1, 1, 1, 1, 1, 1]) == 6, \"test case 5\"\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     zero_count([0,1,0,1,0]) == 0.6\nassert     zero_count([0,1,1,1]) == 0.8\nassert     zero_count([0,0,0,0,0,0,0]) == 1\nassert     zero_count([0,0,1,0]) == 0.5\nassert     zero_count([0,1,0,1,0]) == 0.6\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     zero_count([1, 1, 1, 0, 0]) == 4\nassert     zero_count([0, 1, 1, 0, 0]) == 3\nassert     zero_count([1, 0, 1, 0, 1]) == 0\nassert     zero_count([1, 0, 0, 0]) == 1\nassert     zero_count([1, 2, 3, 0, 0]) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef find_min_and_max(nums):\n    '''\n    Write a function that returns a tuple (min, max) where min and max are the\n    numbers in the array that sum to 0. For example,\n    >>> find_min_and_max([0, -1, -2, 4, 5])\n    (-2, -1)\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (is_Sum_Of_Powers_Of_Two(8) == True)\nassert     (is_Sum_Of_Powers_Of_Two(1) == True)\nassert     (is_Sum_Of_Powers_Of_Two(9) == False)\nassert     (is_Sum_Of_Powers_Of_Two(12) == True)\nassert     (is_Sum_Of_Powers_Of_Two(11) == False)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(3) == False\nassert     is_Sum_Of_Powers_Of_Two(7) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (is_Sum_Of_Powers_Of_Two(3) == True)\nassert     (is_Sum_Of_Powers_Of_Two(8) == False)\nassert     (is_Sum_Of_Powers_Of_Two(2) == True)\nassert     (is_Sum_Of_Powers_Of_Two(4) == True)\nassert     (is_Sum_Of_Powers_Of_Two(5) == False)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4)    == True\nassert     is_Sum_Of_Powers_Of_Two(3)    == True\nassert     is_Sum_Of_Powers_Of_Two(6)    == True\nassert     is_Sum_Of_Powers_Of_Two(12)    == True\nassert     is_Sum_Of_Powers_Of_Two(15)    == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1024)     == True\nassert     is_Sum_Of_Powers_Of_Two(2684)     == False\nassert     is_Sum_Of_Powers_Of_Two(1)         == True\nassert     is_Sum_Of_Powers_Of_Two(2)         == True\nassert     is_Sum_Of_Powers_Of_Two(2147483647)     == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False, \"Case 1: 0 => False\"\nassert     is_Sum_Of_Powers_Of_Two(1) == True, \"Case 2: 1 => True\"\nassert     is_Sum_Of_Powers_Of_Two(2) == True, \"Case 3: 2 => True\"\nassert     is_Sum_Of_Powers_Of_Two(3) == False, \"Case 4: 3 => False\"\nassert     is_Sum_Of_Powers_Of_Two(4) == True, \"Case 5: 4 => True\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (is_Sum_Of_Powers_Of_Two(n=11) == True)\nassert     (is_Sum_Of_Powers_Of_Two(n=25) == True)\nassert     (is_Sum_Of_Powers_Of_Two(n=1) == False)\nassert     (is_Sum_Of_Powers_Of_Two(n=64) == True)\nassert     (is_Sum_Of_Powers_Of_Two(n=256) == True)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(7) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == False\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(2**2) == False\nassert     is_Sum_Of_Powers_Of_Two(2**3) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == False\nassert     is_Sum_Of_Powers_Of_Two(4) == True\nassert     is_Sum_Of_Powers_Of_Two(16) == True\nassert     is_Sum_Of_Powers_Of_Two(25) == False\nassert     is_Sum_Of_Powers_Of_Two(36) == False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     circle_circumference(2) == 12.566370614359172\nassert     circle_circumference(5) == 78.53981633974483\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circle_circumference(2) == 12.566370614359172\nassert     circle_circumference(3) == 19.2\nassert     circle_circumference(4) == 25.6\nassert     circle_circumference(5) == 31.6\nassert     circle_circumference(6) == 36.8\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     round(circle_circumference(1), 3) == 3.1593\nassert     round(circle_circumference(0.5), 3) == 1.047\nassert     round(circle_circumference(2), 3) == 12.566\n\nprint('all tests passed'"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     circle_circumference(0) == None\nassert     circle_circumference(1) == 2.66\nassert     circle_circumference(2) == 6.28\nassert     circle_circumference(3) == 10.66\nassert     circle_circumference(4) == 19.37\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circle_circumference(1) == 3.141592653589793\nassert     circle_circumference(2) == 12.566370614359172\nassert     circle_circumference(3) == 19.2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     circle_circumference(10) == 314.159\n\ndef dot_product(v, u):\n    '''\n    Write a function to find the dot product of two vectors.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circle_circumference(10) == 62.83185307179586\nassert     circle_circumference(2) == 12.566370614359172\nassert     circle_circumference(3) == 19.2\nassert     circle_circumference(4) == 22.2\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     circle_circumference(2) == 12.566370614359172, 'Wrong output'\nassert     circle_circumference(3) == 19.21497216796875, 'Wrong output'\nassert     circle_circumference(0) == 2.7321478090170361, 'Wrong output'\nassert     circle_circumference(1) == 6.28318530717958, 'Wrong output'\nassert     circle_circumference(2.99) == 15.849346313299534, 'Wrong output'"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circle_circumference(5) == 78.54\nassert     circle_circumference(10) == 314.4\nassert     circle_circumference(23.5) == 578.87\nassert     circle_circumference(5) == 78.54\nassert     circle_circumference(10) == 314.4\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     extract_singly([ [1, 2, 3], [4, 5, 6] ]) == [1, 2, 3, 4, 5, 6]\nassert     extract_singly([ [3, 1], [1, 2], [5, 6], [6, 6, 6] ]) == [3, 1, 1, 2, 5, 6, 6, 6]\n\ndef extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # the code here is a bit messy, but it works\n    # how do we test this?\n    # ok, so the strategy is:\n    # 1. we take the first element of the list, and pass it on to the next one.\n    # 2. so, keep doing this until we reach the end of the list.\n    # 3. then, the last element is the result.\n    # 4. we can test this by seeing if the last element is a list.\n    # 4.1 if it is, we just iterate over the rest of the list and flatten them,\n    # 4.2 if it isn't, we just return the element\n    # 4.3 we can use isinstance here to test if the last element is a list.\n    # 5. we can use a for loop to flatten the list of lists.\n    # 6. we return the result as a list.\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     extract_singly([[1,2], [3,4,5], [6,7]]) == set([1,2,3,4,5,6,7])\nassert     extract_singly([]) == set([])\nassert     extract_singly([[]]) == set([])\nassert     extract_singly([[],[]]) == set([])\nassert     extract_singly([[[]]]) == set([])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     extract_singly([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     extract_singly([[1], [2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert     extract_singly([[]]) == []\nassert     extract_singly([[1], [], [2], [3, 4], [], [5], [6, 7], [], [8], [9, 10], [], [11], [], [12], [], []]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     extract_singly([1, 2, 3])    ==     [1, 2, 3]\nassert     extract_singly([1, [2, [3, 4, 5]]])     ==     [1, 2, 3, 4, 5]\nassert     extract_singly([[1, [2, [3, [4, [5]]]]]])     ==     [1, 2, 3, 4, 5]\nassert     extract_singly
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     extract_singly([]) == [], \"Test 1\"\nassert     extract_singly([[1, 2, 3]]) == [1, 2, 3], \"Test 2\"\nassert     extract_singly([[1, [2, 3], 4], [5, 6], 7]) == [1, 2, 3, 4, 5, 6, 7], \"Test 3\"\nassert     extract_singly([[1, [2, 3], 4], [5, [6, 7]], 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Test 4\"\nassert     extract_singly([[1, [2, [3, 4, [5, [6]]]], 7], 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Test 5\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     extract_singly(['1', '2', ['3', '4']]) == [1, 2, 3, 4]\nassert     extract_singly(['a', 'b', ['c', 'd'], ['e', ['f', 'g']]]) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert     extract_singly(['a', 'b', ['c', 'd'], ['e', ['f', 'g']]]) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert     extract_singly([[1, 2], [3, 4]]) == [1, 2, 3, 4]\nassert     extract_singly(['a', 'b', ['c', 'd'], ['e', ['f', 'g']]]) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     extract_singly([[2, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11, 12]]) == [2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     extract_singly([[2, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11]]) == [2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     extract_singly([[1], [3, 4, 5]]) == [1, 3, 4, 5]\nassert     extract_singly([[1, 2], [3, 4, 5]]) == [1, 2, 3, 4, 5]\n\ndef extract_doubly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     extract_singly([[1], [2], [3]]) == [1, 2, 3]\nassert     extract_singly([[1, 2], [3], [4]]) == [1, 2, 3, 4]\nassert     extract_singly([[1, 2, 3], [4, 5], [6, 7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     extract_singly([[], [], [], []]) == []\nassert     extract_singly([]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef extract_doubly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4, 5, 6] == pancake_sort([1, 2, 3, 4, 5, 6])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6] == pancake_sort([6, 1, 2, 3, 4, 5])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, "
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pancake_sort([4, 3, 2, 1]) == [1, 2, 3, 4], 'Failed at 1'\nassert     pancake_sort([1, 2, 3, 4]) == [1, 2, 3, 4], 'Failed at 2'\nassert     pancake_sort([4, 3, 2, 1]) == [1, 2, 3, 4], 'Failed at 3'\nassert     pancake_sort([1, 3, 2, 4]) == [1, 2, 3, 4], 'Failed at 4'\nassert     pancake_sort([3, 1, 2, 4]) == [1, 2, 3, 4], 'Failed at 5'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef test_pancake_sort():\n    l1 = [2, 1, 0, 1, 2, 3]\n    l2 = [0, 1, 2, 3, 4, 5]\n    l3 = [1, 5, 6, 4, 2, 3]\n    l4 = [3, 2, 1, 0]\n    l5 = [0, 1]\n    assert pancake_sort(l1) == [0, 1, 2, 1, 3, 5]\n    assert pancake_sort(l2) == [0, 1, 2, 3, 4, 5]\n    assert pancake_sort(l3) == [1, 5, 6, 4, 2, 3]\n    "
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pancake_sort([1, 5, 3, 2, 4])    ==     [1, 2, 3, 4, 5]\nassert     pancake_sort([1, 3, 5, 2, 4])    ==     [1, 2, 3, 4, 5]\nassert     pancake_sort([1, 2, 3, 4, 5])    ==     [1, 2, 3, 4, 5]\nassert     pancake_sort([2, 3, 4, 5, 1])    ==     [1, 2, 3, 4, 5]\nassert     pancake_sort([5, 4, 3, 2, 1])    ==     [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pancake_sort([5, 3, 4, 2, 1]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([5, 1, 4, 3, 2]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([3, 1, 2, 4, 5]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([2, 3, 1, 4, 5]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([]) == []"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pancake_sort([3, 1, 2, 4, 6, 7, 5, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     pancake_sort([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     pancake_sort([8, 5, 1, 6, 2, 3, 4, 7, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     pancake_sort([9, 1, 2, 4, 6, 7, 5, 8, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     pancake_sort([3, 1, 2, 4, 6, 7, 5, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7] == pancake_sort([7, 6, 5, 4, 3, 2, 1])\nassert     [7, 6, 5, 4, 3, 2, 1] == pancake_sort([1, 2, 3, 4, 5, 6, 7])\nassert     [5, 4, 3, 2, 1] == pancake_sort([1, 2, 3, 4, 5])\nassert     [5, 4, 3, 2, 1] == pancake_sort([1, 2, 3, 4])\nassert     [1, 2, 3, 4] == pancake_sort([4, 3, 2, 1])\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pancake_sort([1,2,3,4,5,6])    == [1,2,3,4,5,6]\nassert     pancake_sort([2,1,3,4,5,6])    == [1,2,3,4,5,6]\nassert     pancake_sort([3,2,1,4,5,6])    == [1,2,3,4,5,6]\nassert     pancake_sort([4,3,2,1,5,6])    == [1,2,3,4,5,6]\nassert     pancake_sort([5,4,3,2,1,6])    == [1,2,3,4,5,6]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_samepair([1,2,3],[3,2,1],[1,3,2]) == 3, \"Failed test 1\"\nassert     count_samepair([1,2,3],[3,2,1],[2,1,3]) == 1, \"Failed test 2\"\nassert     count_samepair([1,2,3],[3,2,1],[1,3,2]) == 2, \"Failed test 3\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_samepair(\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1]) == 3, 'incorrect'\nassert     count_samepair(\n    [1, 2, 3],\n    [1, 2, 3],\n    [3, 2, 1]) == 3, 'incorrect'\nassert     count_samepair(\n    [1, 2, 3],\n    [3, 2, 1],\n    [3, 2, 1]) == 3, 'incorrect'\nassert     count_samepair(\n    [1, 2, 3],\n    [3, 2, 1],\n    [1, 2, 3]) == 0, 'incorrect'\nassert     count_samepair(\n    [1, 2, 3],\n    [1, 3, 2],\n    [3, 2, 1]) == 2, 'incorrect'"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3,4],[2,2,5],[3,4,5]) == 1\nassert     count_samepair([1,2,3,4],[2,2,5],[1,2,3,4]) == 2\nassert     count_samepair([1,2,3,4],[2,2,5],[5,2,3,4]) == 0\nassert     count_samepair([1,2,3,4],[2,2,5],[1,2,4]) == 0\nassert     count_samepair([1,2,3,4],[2,2,5],[2,2,5]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_samepair(['a', 'b', 'c', 'a'],['b', 'a', 'b', 'a'],['b', 'a', 'b', 'a']) == 2\nassert     count_samepair(['a', 'a', 'b', 'a'],['a', 'b', 'a', 'a'],['a', 'a', 'b', 'a']) == 3\nassert     count_samepair(['a', 'a', 'a', 'b'],['a', 'a', 'b', 'b'],['a', 'a', 'a', 'a']) == 1\nassert     count_samepair(['a', 'a', 'a', 'a'],['a', 'a', 'a', 'a'],['a', 'a', 'a', 'a']) == 4\nassert     count_samepair(['a', 'a', 'a', 'a', 'a', 'a', 'a'],['a', 'a', 'a', 'a', 'a', 'a', 'a'],['a', 'a', 'a', 'a', 'a', 'a', 'a']) == 7\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if i == j:\n                if list1[i] == list2[j] and list1[i] == list3[j]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3\nassert     count_samepair([1,2,3,4],[1,2,3,4],[1,2,3,4]) == 4\nassert     count_samepair([1,2,3,4],[1,2,3,5],[1,2,3,4]) == 1\nassert     count_samepair([1,2,3,4],[1,2,3,4],[1,2,3,4,5]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_samepair([1,2,3,2,2,3,3],[3,2,3,2,2,3,3],[2,2,2,3,3,3,3]) == 4\nassert     count_samepair([1,2,3,2,2,3,3],[3,2,3,2,2,3,3],[3,3,3,2,2,3,3]) == 6\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3,3,4],[2,1,1,3,4],[1,1,3,3,3]) == 2\nassert     count_samepair([1,2,3,4],[2,1,1,3],[1,1,3,3,3]) == 2\nassert     count_samepair([1,2,3,4],[1,2,3,3,4],[1,1,3,3,4]) == 2\nassert     count_samepair([1,2,3,4,5],[2,1,1,3,4],[1,1,3,3,3,4]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_samepair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == 2\nassert     count_samepair([1, 2, 3, 4], [1, 2, 3, 4], [5, 6, 7, 8]) == 0\nassert     count_samepair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5\nassert     count_samepair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == 0\nassert     count_samepair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_lists(('abc', ['bcd', 'dcf'], 'efg'))     == 2\nassert     find_lists(('abc', ['bcd', 'dcf', 'efg'], 'xyz'))     == 1\nassert     find_lists((1, 2, 3)) == 0\nassert     find_lists(()) == 0\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 0\nassert     find_lists((1,2,3)) == 1\nassert     find_lists(((1,2),(3,4))) == 2\nassert     find_lists((((1,2),(3,4)),((5,6),(7,8)))) == 3\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_lists((1,2,3)) == 0\nassert     find_lists((1,2,[3,4,5]))) == 1\nassert     find_lists(([1,2],3,4,5)) == 3\n\ndef is_palindrome(Input): \n    '''\n    Write a function to check whether given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_lists(()) == 0, \"Failed\"\nassert     find_lists((1,)) == 1, \"Failed\"\nassert     find_lists((1,2,3,4)) == 1, \"Failed\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 1, \"Failed\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99)) == 2, \"Failed\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_lists((1,2,3,4,5)) == 0\nassert     find_lists((1,2,3,[4,5])) == 1\nassert     find_lists((1,2,[3,4],[5,6,[7,8]])) == 2\nassert     find_lists((1,2,[3,4],[5,6,[7,8]]),1) == 1\nassert     find_lists((1,2,[3,4],[5,6,[7,8]]),2) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)) == 3\nassert     find_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)) == 4\nassert     find_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)) == 1\nassert     find_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)) == 2\nassert     find_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_lists(()) == 0\nassert     find_lists((1,)) == 0\nassert     find_lists((1,2,3,4)) == 1\nassert     find_lists((1,(2,3,4,5),6,(7,8,9))) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")) == 26\nassert     find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")) == 52\nassert     find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")) == 52\nassert     find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")) == 52\nassert     find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \""
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd', 'e')) == 1\nassert     find_lists(('a', ('b', 'c', 'd'), 'e')) == 2\nassert     find_lists(('a', ('b', 'c', 'd'), 'e', 'f')) == 3\nassert     find_lists(('a', ('b', 'c', 'd', 'e', 'f'))) == 4\nassert     find_lists(('a', ('b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'))) == 9"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_lists((1,2,[3,4])) == 1\nassert     find_lists((1,2,[3,4],[5,6])) == 2\nassert     find_lists((1,2,[3,4],[5,6],[7,8])) == 3\nassert     find_lists((1,2,[3,4],[5,6],[7,8],[9,10])) == 4\nassert     find_lists((1,2,[3,4],[5,6],[7,8],[9,10],[11,12])) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_Abs_Diff([3, 4, 1, -4, -2, 5, -3, -6, -4, -2, 1, 4, 3]) == 2,'max_Abs_Diff([3, 4, 1, -4, -2, 5, -3, -6, -4, -2, 1, 4, 3]) == 2'\nassert     max_Abs_Diff([3, 4, 1, -4, -2, 5, -3, -6, -4, -2, 1, 4, 3, -2, -4]) == 3,'max_Abs_Diff([3, 4, 1, -4, -2, 5, -3, -6, -4, -2, 1, 4, 3, -2, -4]) == 3'\nassert     max_Abs_Diff([1, 2, -2, 5, -3, 8, 3, -5, 1]) == 5,'max_Abs_Diff([1, 2, -2, 5, -3, 8, 3, -5, 1]) == 5'\nassert     max_Abs_Diff([-1, -2, -5, -8, -9]) == -1,'max_Abs_Diff([-1, -2, -5, -8, -9]) == -1'\nassert     max_Abs_Diff([-1, 0, 1, 2, 3]) == 3,'max_Abs_Diff([-1, 0, 1, 2, 3]) == 3'\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_Abs_Diff([-9, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nassert max_Abs_Diff([-9, -7, -2, -6, -5, -1, 0, 2, 4]) == 5\nassert max_Abs_Diff([-9, -7, -2, -6, -5, -1, 0, 2, 4]) == 5\nassert max_Abs_Diff([1, 0, -1, 0, -2, 0]) == 3\nassert max_Abs_Diff([0, -1, -2, -3, -4, -5]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([1,2,3,4,5]) == 4\nassert     max_Abs_Diff([-1,2,3,4,5]) == 4\nassert     max_Abs_Diff([0,1,2,3,4,5]) == 5\nassert     max_Abs_Diff([-2,-3,-4,-5]) == -3\nassert     max_Abs_Diff([-1,-2,-3,-4,-5]) == -3\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_Abs_Diff([4,2,1,3]) == 3\nassert     max_Abs_Diff([1,5,8,3]) == 4\nassert     max_Abs_Diff([1,2,3,4]) == 0\nassert     max_Abs_Diff([4,3,2,1]) == 3\nassert     max_Abs_Diff([1,2,3,4,5]) == 4\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([-5, 4, 10, 3, 5, 8]) == 8\nassert     max_Abs_Diff([-5, -4, -10, 3, 5, 8]) == 10\nassert     max_Abs_Diff([-5, -4, -10, 3, 5, 8, 8]) == 8\nassert     max_Abs_Diff([]) == -1\nassert     max_Abs_Diff([1, 2]) == -1\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([1, 2, -3, 4, 100]) == 4\nassert     max_Abs_Diff([1, -2, -3, 4, 100]) == 4\nassert     max_Abs_Diff([1, 2, 3, 4, 100]) == 0\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (max_Abs_Diff([1,2,3,4]) == 3)\nassert     (max_Abs_Diff([-5,8,10]) == 8)\nassert     (max_Abs_Diff([1,1,1]) == 0)\nassert     (max_Abs_Diff([0,0,0]) == 0)\nassert     (max_Abs_Diff([-5,-5,1,1,1,1,1,1,-5,-5]) == 1)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([1, 3, 8, 10, 15]) == 5\nassert     max_Abs_Diff([5, 4, 7, 8, 9]) == 2\nassert     max_Abs_Diff([10, 5, 2, 7, 4]) == 4\nassert     max_Abs_Diff([]) == None"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         find_solution(10, 10,  42) == (3, 2)\nassert         find_solution(13, 13, 130) == None\nassert         find_solution(10, 10,  36) == None\nassert         find_solution(0, 0, 0) == (0, 0)\nassert         find_solution(1, 1,  1) == (1, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_solution(3, 4, 5) == (1, 2)\nassert     find_solution(7, 11, 19) == (5, 6)\nassert     find_solution(5, 8, 13) == (3, 4)\nassert     find_solution(5, 10, 22) == (3, 3)\nassert     find_solution(1, 2, 3) is None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_solution(3, 4, 9) == (3, 4)\nassert     find_solution(2, 4, 8) == (2, 4)\nassert     find_solution(4, 3, 12) == (4, 3)\nassert     find_solution(1, 3, 8) == None\nassert     find_solution(4, 3, 7) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_solution(1, 2, 3) == (1, 3)\nassert     find_solution(1, 2, 4) == None\nassert     find_solution(2, 7, 12) == (3, 8)\nassert     find_solution(2, 7, 13) == None\nassert     find_solution(2, 7, 16) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_solution(2, 1, 2) == (1, 2)\nassert     find_solution(2, 3, 5) == None\nassert     find_solution(1, 1, 1) == (1, 1)\nassert     find_solution(1, 2, 3) == (1, 2)\nassert     find_solution(1, 3, 6) == (2, 3)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_solution(2, 1, 2) == (1, 1)\nassert     find_solution(1, 2, 4) == (2, 2)\nassert     find_solution(3, 5, 12) == (6, 9)\nassert     find_solution(1, 5, 22) == (None, None)\nassert     find_solution(1, 5, 10) == (None, None)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_solution(3, 4, 7) == (2, 1)\nassert     find_solution(1, 6, 10) == (0, 5)\nassert     find_solution(3, 4, 11) == None\nassert     find_solution(2, 2, 5) == (2, 0)\nassert     find_solution(2, 7, 13) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_solution(2, 5, 12) == (1, 4)\nassert     find_solution(1, 2, 5) == (0, 1)\nassert     find_solution(5, 8, 13) == (1, 3)\nassert     find_solution(1, 3, 10) == (0, 2)\nassert     find_solution(5, 9, 12) == (1, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_solution(1, 5, 8) == (1, 5)\nassert     find_solution(1, 3, 5) == (3, 5)\nassert     find_solution(2, 7, 13) == (2, 11)\nassert     find_solution(3, 2, 25) == (3, 5)\nassert     find_solution(1, 2, 21) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_solution(1, 1, 1) == (1, 1)\nassert     find_solution(3, 2, 4) == (2, 2)\nassert     find_solution(0, -1, -3) == (0, -1)\nassert     find_solution(0, 1, 1) == None\nassert     find_solution(3, -2, -4) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_elements( [1, 2, 3, 4, 5], [1, 2, 4, 5, 6, 7, 8] ) == [3, 5]\nassert     remove_elements( [1, 2, 3, 4, 5], [1, 2, 4, 5, 6, 7, 8] ) == [3, 5, 6, 7, 8]\nassert     remove_elements( [1, 2, 3, 4, 5], [6, 7, 8, 9, 10] ) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], [ 'a', 'b', 'c', 'd', 'e', 'f' ]) == [ 'd', 'e', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], [ 'b', 'c', 'd', 'e', 'f', 'a' ]) == [ 'd', 'e', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]) == [ 'd', 'e', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' ]) == [ 'd', 'e', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i' ]) == [ 'd', 'e', 'f']\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4],[1,2,3]) == [4]\nassert     remove_elements([1,2,3,4],[1,2,3,4,5]) == [5]\nassert     remove_elements([1,2,3,4],[1,2,3]) == [4,5]\nassert     remove_elements([1,2,3,4,5,6],[1,2,3,4,5]) == [6]\nassert     remove_elements([1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [11,12,13,14,15,16,17,18,19,20]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_elements([1,2,3], [2,3,4])     == [1,4]\nassert     remove_elements([1,2,3], [1,2,3])     == []\nassert     remove_elements([1,2,3], [])         == [1,2,3]\nassert     remove_elements([1,2,3], [1,2,3,4,5])     == [1,4]\nassert     remove_elements([1,2,3,4,5], [1,2,3])     == [4,5]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_elements([1, 2, 3], [2, 3]) == [1]\nassert     remove_elements([1, 2, 3], [1, 3]) == [2]\nassert     remove_elements([1, 2, 3], [2, 1]) == [3]\nassert     remove_elements([1, 2, 3], [3, 4]) == [1, 2]\nassert     remove_elements([1, 2, 3], []) == [1, 2, 3]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_elements([1, 2, 3, 4, 5], [1, 2]) == [3, 4, 5]\nassert     remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert     remove_elements([1, 2, 3, 4, 5], [3, 5]) == [1, 2, 4]\nassert     remove_elements([1, 2, 3, 4, 5], [4, 5]) == [1, 2, 3]\nassert     remove_elements([1, 2, 3, 4, 5], [3, 4, 5]) == [1]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [1, 2, 4, 5, 6] == remove_elements([1, 2, 3, 4, 5], [4, 5])\nassert     [1, 2, 3, 4, 5] == remove_elements([1, 2, 3, 4, 5], [3, 4, 5])\nassert     [1, 2, 3, 4, 5] == remove_elements([1, 2, 3, 4, 5], [5])\nassert     [1, 2, 3, 4, 5] == remove_elements([1, 2, 3, 4, 5], [])\nassert     [1, 2, 3, 4, 5] == remove_elements([1, 2, 3, 4, 5], [5, 3, 5, 6])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_elements([3,5,7,9,11], [3,5,7,9,11]) == [], \"remove_elements\"\nassert     remove_elements([1,2,3,4,5,6,7,8], [3,6,8]) == [1,2,4,5,7,8], \"remove_elements\"\nassert     remove_elements([1,2,3,4,5,6,7,8], [6,7,8]) == [1,2,3,4,5], \"remove_elements\"\nassert     remove_elements([1,2,3,4,5,6,7,8], [6,7,8,9]) == [1,2,3,4,5], \"remove_elements\"\nassert     remove_elements([1,2,3,4,5,6,7,8], [8]) == [1,2,3,4,5,6,7], \"remove_elements\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_elements([1, 3, 5, 3, 6, 3], [3, 6]) == [1, 5]\nassert remove_elements([1, 3, 5, 3, 6, 3], [5, 6]) == [1, 3]\nassert remove_elements([1, 3, 5, 3, 6, 3], [5, 3]) == [1, 6, 3]\nassert remove_elements([1, 3, 5, 3, 6, 3], [6, 3]) == [1, 3]\nassert remove_elements([1, 3, 5, 3, 6, 3], [3, 3]) == [1]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_elements([1,2,3,4], [2,4]) == [1,3]\nassert     remove_elements([1,2,3,4], [2,4,5]) == [1,3]\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_series(1) == 1\nassert     sum_series(2) == 1\nassert     sum_series(3) == 1\nassert     sum_series(4) == 2\nassert     sum_series(5) == 3\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_series(0) == 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 3\nassert     sum_series(3) == 6\nassert     sum_series(4) == 10\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_series(8) ==     2 + 3 + 5 + 7 + 9 + 11 + 13 + 15\nassert     sum_series(0) ==     0\nassert     sum_series(1) ==     1\nassert     sum_series(2) ==     1\nassert     sum_series(3) ==     2\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_series(5) == 1\nassert     sum_series(8) == 3\nassert     sum_series(9) == 4\nassert     sum_series(11) == 6\nassert     sum_series(12) == 10\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nprint sum_series(5)\nprint sum_series(10)\nprint sum_series(0)\nprint sum_series(1)\nprint sum_series(2)\nprint sum_series(3)\nprint sum_series(4)\nprint sum_series(5)\nprint sum_series(6)\nprint sum_series(7)\nprint sum_series(8)\nprint sum_series(9)\nprint sum_series(10)\nprint sum_series(11)\nprint sum_series(12)\nprint sum_series(13)\nprint sum_series(14)\nprint sum_series(15)\nprint sum_series(16)\nprint sum_series(17)\nprint sum_series(18)\nprint sum_series(19)\nprint sum_series(20)\nprint sum_series(21)\nprint sum_series(22)\nprint sum_series(23)\nprint sum_series(24)\nprint sum_series(25)\nprint sum_series(26)\nprint sum_series(27)\nprint sum_series(28)\nprint sum_series(29)\nprint sum_series(30)\nprint sum_series(31)\nprint sum_series(32)\nprint sum_series(33)\nprint sum_series(34)\nprint sum_series(35)\nprint sum_series(36)\nprint sum_series(37)\nprint sum_series(38)\nprint sum_series(39)\nprint sum_series(40)\nprint sum_series(41)\nprint sum_series(42)\nprint sum_series(43)\nprint sum_series(44)\nprint sum_series(45)\nprint sum_series(46)\nprint sum_series(47)\nprint sum_series(48)\nprint sum_series(49)\nprint sum_series(50)\nprint sum_series(51)\nprint sum_series(52)\nprint sum_series(53)\nprint sum_series(54)\nprint sum_series(55)\nprint sum_series(56)\nprint sum_series(57)\nprint sum_series(58)\nprint sum_series(59)\nprint sum_series(60)\nprint sum_series(61)\nprint sum_series(62)\nprint sum_series(63)\nprint sum_series(64)\nprint sum_series(65)\nprint sum_series(66)\nprint sum_series(67)\nprint sum_series(68)\nprint sum_series(69)\nprint sum_series(70)\nprint sum_series(71)\nprint sum_series(72)\nprint sum_series(73)\nprint sum_series(74)\nprint sum_series(75)\nprint sum_series(76)\nprint sum_series(77)\nprint sum_series(78)\nprint sum_series(79)\nprint sum_series(80)\nprint sum_series(81)\nprint sum_series(82)\nprint sum_series(83)\nprint sum_series(84)\nprint sum_series(85)\nprint sum_series(86)\nprint sum_series(87)\nprint sum_series(88)\nprint sum_series(89)\nprint sum_series(90)\nprint sum_series(91)\nprint sum_series(92)\nprint sum_series(93)\nprint sum_series(94)\nprint sum_series(95)\nprint sum_series(96)\nprint sum_series(97)\nprint sum_series(98)\nprint sum_series(99)\nprint sum_series(100)\nprint sum_series(101)\nprint sum_series(102)\nprint sum_series(103)\nprint sum_series(104)\nprint sum_series(105)\nprint sum_series(106)\nprint sum_series(107)\nprint sum_series(108)\nprint sum_series(109)\nprint sum_series(110)\nprint sum_series(111)\nprint sum_series(112)\nprint sum_series(113)\nprint sum_series(114)\nprint sum_series(115)\nprint sum_series(116)\nprint sum_series(117)\nprint sum_series(118)\nprint sum_series(119)\nprint sum_series(120)\nprint sum_series(121)\nprint sum_series(122)\nprint sum_series(123)\nprint sum_series(124)\nprint sum_series(125)\nprint sum_series(126)\nprint sum_series(127)\nprint sum_series(128)\nprint sum_series(129)\nprint sum_series(130)\nprint sum_series(131)\nprint sum_series(132)\nprint sum_series(133)\nprint sum_series(134)\nprint sum_series(135)\nprint sum_series(136)\nprint sum_series(137)\nprint sum_series(138)\nprint sum_series(139)\nprint sum_series(140)\nprint sum_series(141)\nprint sum_series(142)\nprint sum_series(143)\nprint sum_series(144)\nprint sum_series(145)\nprint sum_series(146)\nprint sum_series(147)\nprint sum_series(148)\nprint sum_series(149)\nprint sum_series(150)\nprint sum_series(151)\nprint sum_series(152)\nprint sum_series(153)\nprint sum_series(154)\nprint sum_series(155)\nprint sum_series(156)\nprint sum_series(157)\nprint sum_series(158)\nprint sum_series(159)\nprint sum_series(160)\nprint sum_series(161)\nprint sum_series(162)\nprint sum_series(163)\nprint sum_series(164)\nprint sum_series(165)\nprint sum_series(166)\nprint sum_series(167)\nprint sum_series(168)\nprint sum_series(169)\nprint sum_series(170)\nprint sum_series(171)\nprint sum_series(172)\nprint sum_series(173)\nprint sum_series(174)\nprint sum_series(175)\nprint sum_series(176)\nprint sum_series(177)\nprint sum_series(178)\nprint sum_series(179)\nprint sum_series(180)\nprint sum_series(181)\nprint sum_series(182)\nprint sum_series(183)\nprint sum_series(184)\nprint sum_series(185)\nprint sum_series(186)\nprint sum_series(187)\nprint sum_series(188)\nprint sum_series(189)\nprint sum_series(190)\nprint sum_series(191)\nprint sum_series(192)\nprint sum_series(193)\nprint sum_series(194)\nprint sum_series(195)\nprint sum_series(196)\nprint sum_series(197)\nprint sum_series(198)\nprint sum_series(199)\nprint sum_series(200)\nprint sum_series(201)\nprint sum_series(202)\nprint sum_series(203)\nprint sum_series(204)\nprint sum_series(205)\nprint sum_series(206)\nprint sum_series(207)\nprint sum_series(208)\nprint sum_series(209)\nprint sum_series(210)\nprint sum_series(211)\nprint sum_series(212)\nprint sum_series(213)\nprint sum_series(214)\nprint sum_series(215)\nprint sum_series(216)\nprint sum_series(217)\nprint sum_series(218)\nprint sum_series(219)\nprint sum_series(220)\nprint sum_series(221)\nprint sum_series(222)\nprint sum_series(223)\nprint sum_series(224)\nprint sum_series(225)\nprint sum_series(226)\nprint sum_series(227)\nprint sum_series(228)\nprint sum_series(229)\nprint sum_series(230)\nprint sum_series(231)\nprint sum_series(232)\nprint sum_series(233)\nprint sum_series(234)\nprint sum_series(235)\nprint sum_series(236)\nprint sum_series(237)\nprint sum_series(238)\nprint sum_series(239)\nprint sum_series(240)\nprint sum_series(241)\nprint sum_series(242)\nprint sum_series(24"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_series(10) == 24\nassert     sum_series(0) == 0\nassert     sum_series(3) == 3\nassert     sum_series(4) == 7\nassert     sum_series(5) == 12\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_series(3) == 3\nassert     sum_series(4) == 7\nassert     sum_series(5) == 9\nassert     sum_series(6) == 12\nassert     sum_series(7) == 15\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef test_sum_series():\n    for n in range(1,6):\n        for i in range(n//2):\n            assert sum_series(n) == sum_series(n-2*i)\n\ndef test_sum_series_n_is_even():\n    assert sum_series(10) == sum_series(10-2*0) == sum_series(10-2*1) == sum_series(10-2*2)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sum_series(1) == 1)\nassert     (sum_series(3) == 3)\nassert     (sum_series(4) == 7)\nassert     (sum_series(5) == 10)\nassert     (sum_series(7) == 18)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_series(5)     ==    3\nassert     sum_series(6)     ==    8\nassert     sum_series(8)     ==    11\nassert     sum_series(9)     ==    12\nassert     sum_series(10)     ==    15\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     area_polygon(4, 2) == 12\nassert     area_polygon(3, 4) == 12\nassert     area_polygon(3, 3) == 3\nassert     area_polygon(6, 5) == 50\nassert     area_polygon(6, 6) == 36\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     area_polygon(1, 4) == 0.5\nassert     area_polygon(2, 4) == 1.8\nassert     area_polygon(3, 4) == 1.5\nassert     area_polygon(4, 4) == 1\nassert     area_polygon(5, 4) == 1.25\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     area_polygon(5, 3) == 6\nassert     area_polygon(7, 5) == 56\nassert     area_polygon(8, 4) == 80\nassert     area_polygon(6, 7) == 42\nassert     area_polygon(8, 8) == 256\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     area_polygon(5, 8) == 10\nassert     area_polygon(3, 7) == 12\nassert     area_polygon(6, 10) == 26\nassert     area_polygon(2, 3) == 2\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     area_polygon(3, 2)    ==    2.8\nassert     area_polygon(4, 3)    ==    6.0\nassert     area_polygon(7, 4)    ==    52.0\nassert     area_polygon(10, 5)    ==    450.0\n\ndef area_polygon_2(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * l * s * s * tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     area_polygon(2, 3) == 7.5\nassert     area_polygon(3, 4) == 25.0\nassert     area_polygon(4, 5) == 78.5\nassert     area_polygon(3, 6) == 153.0\nassert     area_polygon(4, 7) == 244.5\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     area_polygon(3, 4) == 4 * tan(pi / 4)\nassert     area_polygon(6, 10) == (10 * tan(pi / 6)) ** 2\nassert     area_polygon(3, 8) == (8 * tan(pi / 3)) ** 2\n\nprint(area_polygon(3, 4))\nprint(area_polygon(6, 10))\nprint(area_polygon(3, 8))\n\ndef distance(x1, y1, x2, y2):\n    '''\n    Write a function that returns the Euclidean distance between two points x1, y1 and x2, y2.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     area_polygon(4,5) == 12.5\nassert     area_polygon(7,2) == 28.5\nassert     area_polygon(7,3) == 22.5\nassert     area_polygon(7,4) == 15\nassert     area_polygon(7,5) == 19.5\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     area_polygon(1, 3) == '1'\nassert     area_polygon(5, 6) == '100'\nassert     area_polygon(1, 4) == '0.25'\nassert     area_polygon(3, 4) == '0.75'\nassert     area_polygon(3, 2) == '3/4'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     area_polygon(7, 3) == 4\nassert     area_polygon(4, 4) == 0\nassert     area_polygon(7, 7) == 49\nassert     area_polygon(8, 7) == 74\nassert     area_polygon(10, 8) == 576\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef largest_factor(n): \n    '''\n    Write a function that returns the largest factor of a positive integer.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     div_sum(8) == True     \nassert     div_sum(16) == True     \nassert     div_sum(17) == True     \nassert     div_sum(20) == True     \nassert     div_sum(21) == False     \n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     div_sum(8)         == True\nassert     div_sum(10)         == False\nassert     div_sum(7)         == False\nassert     div_sum(11)         == True\nassert     div_sum(33)         == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     div_sum(12) == False\nassert     div_sum(15) == True\nassert     div_sum(18) == True\nassert     div_sum(19) == False\nassert     div_sum(21) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     div_sum(1) == True\nassert     div_sum(2) == False\nassert     div_sum(3) == True\nassert     div_sum(4) == False\nassert     div_sum(5) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     div_sum(1)\nassert     div_sum(2)\nassert     div_sum(4)\nassert     div_sum(6)\nassert     not div_sum(9)\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef check_score(n):\n    '''\n    write a function to check if a number is an Armstrong number.\n    The sum of the cubes of its digits is equal to the number itself.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     div_sum(6) == True\nassert     div_sum(12) == True\nassert     div_sum(24) == False\n\ndef is_prime(n):\n    '''\n    Write a function to check if an integer is prime.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     div_sum(10)     == False\nassert     div_sum(30)     == True\nassert     div_sum(49)     == True\nassert     div_sum(180)     == True\nassert     div_sum(362)     == True\n"
    },
    {
        "number": 164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     div_sum(0) == True\nassert     div_sum(1) == True\nassert     div_sum(5) == True\nassert     div_sum(9) == True\nassert     div_sum(8) == True\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_char_position('a') == 1\nassert     count_char_position('b') == 2\nassert     count_char_position('c') == 3\nassert     count_char_position('d') == 4\nassert     count_char_position('e') == 5\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_char_position(\"hello\") == {'a':1, 'e':2, 'h':1, 'l':2, 'o':2}\nassert     count_char_position(\"The quick brown fox\") == {'a':4, 'c':2, 'e':1, 'h':1, 'k':1, 'o':1, 'n':1, 'r':1, 't':1, 'x':1, 'w':1}\nassert     count_char_position(\"The quick brown fox\") == {'a':4, 'c':2, 'e':1, 'h':1, 'k':1, 'o':1, 'n':1, 'r':1, 't':1, 'x':1, 'w':1}\nassert     count_char_position(\"This is a test\") == {'a':2, 'c':1, 'e':2, 'h':1, 'i':1, 'l':1, 'o':2,'s':1, 't':1, 'w':1}\nassert     count_char_position(\"a\") == {'a':1}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_char_position('hello') == {'l':1, 'h':1, 'e':1, 'o':2}\nassert     count_char_position('hello world') == {'l':2, 'h':1, 'e':2, 'o':2,'':1}\nassert     count_char_position('hi') == {'h':1, 'i':1}\nassert     count_char_position('Hi') == {'h':1, 'i':1}\nassert     count_char_position('hH') == {'h':1, 'i':1}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_char_position('a') == 1\nassert     count_char_position('aa') == 2\nassert     count_char_position('aba') == 2\nassert     count_char_position('abca') == 2\nassert     count_char_position('abcdaa') == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_char_position(\"abcde\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nassert     count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\nassert     count_char_position(\"abcde123456789\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1}\nassert     count_char_position(\"Hello\") == {'H': 1, 'e': 1, 'l': 1, 'o': 1}\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_char_position('a') == 1\nassert     count_char_position('A') == 1\nassert     count_char_position('Aa') == 1\nassert     count_char_position('AaA') == 2\nassert     count_char_position('AaAa') == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_char_position('cat') == 2\nassert     count_char_position('dog') == 2\nassert     count_char_position('doggie') == 3\nassert     count_char_position('a') == 1\nassert     count_char_position('Hello') == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_char_position('a') == 1\nassert     count_char_position('abc') == 3\nassert     count_char_position('abcc') == 3\nassert     count_char_position('abcde') == 1\nassert     count_char_position('abcdef') == 6\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_char_position(\"a\") == 1\nassert     count_char_position(\"z\") == 26\nassert     count_char_position(\"b\") == 2\nassert     count_char_position(\"x\") == 52\nassert     count_char_position(\"x\") == 52\n"
    },
    {
        "number": 165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_char_position('abc') == {'a': 1, 'b': 1, 'c': 1}\nassert     count_char_position('hello') == {'h': 1, 'e': 2, 'l': 1, 'o': 2}\nassert     count_char_position('Github') == {'G': 1, 'o': 1, 'h': 1, 'u': 1, 'e': 1, 'r': 1}\nassert     count_char_position('hello my name is sparta') == {'h': 1, 'e': 2, 'l': 1, 'o': 2, 'n': 1, 'a': 2,'m': 1,'': 2, 'y': 1,'s': 1, 'r': 1}\nassert     count_char_position('a') == {'a': 1}\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_even_pair([1,2,3,4,5,6,7]) == 2\nassert     find_even_pair([1,2,3,4,5,6]) == 0\nassert     find_even_pair([1,1,1,1,1,1]) == 6\nassert     find_even_pair([1,3,5,7,9]) == 4\nassert     find_even_pair([1,3,5,7,9,11,13]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_even_pair([1, 3, 2, 4]) == 1\nassert     find_even_pair([1, 3, 2, 4, 4]) == 2\nassert     find_even_pair([1, 3, 2, 4, 4, 3]) == 1\nassert     find_even_pair([1, 3, 2, 4, 4, 3, 2]) == 1\nassert     find_even_pair([1, 2, 3, 4]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_even_pair([]) == 0\nassert     find_even_pair([1]) == 0\nassert     find_even_pair([1,2,3,4]) == 0\nassert     find_even_pair([1,2,3,4,5]) == 1\nassert     find_even_pair([1,2,3,4,5,6,7]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef find_triplets(A):\n    '''\n    Write a function that finds all triples (a, b, c) in A where a + b + c = 0.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_even_pair([1, 2, 3, 4, 5]) == 1\nassert     find_even_pair([1, 2, 3, 4, 6]) == 2\nassert     find_even_pair([1, 1, 1, 1, 1]) == 5\nassert     find_even_pair([]) == 0\nassert     find_even_pair([1, 2, 3]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_even_pair([1, 2, 3, 4, 5]) == 2\nassert     find_even_pair([4, 6, 8, 2, 2]) == 2\nassert     find_even_pair([0, 1, 2, 3, 4, 5]) == 0\nassert     find_even_pair([1, 2, 3, 4, 5, 6]) == 0\nassert     find_even_pair([4, 5, 6, 7, 8, 9]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_even_pair([1,2,3,4,5,6]) == 1\nassert     find_even_pair([2,4,6,8,10]) == 2\nassert     find_even_pair([1,3,5,7,9,11]) == 2\nassert     find_even_pair([]) == 0\nassert     find_even_pair([2]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_even_pair([1, 2, 3, 4, 5, 6]) == 2\nassert     find_even_pair([1, 1, 3, 3, 5, 5]) == 2\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 1\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_a_string(A):\n    '''\n    Write a function to reverse a string\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_even_pair([3, 1, 4, 2, 6, 7, 5, 4]) == 1\nassert     find_even_pair([3, 1, 4, 2, 6, 7, 5, 8]) == 2\nassert     find_even_pair([3, 1, 4, 2, 6, 7, 5]) == 0\nassert     find_even_pair([4, 3, 5, 6, 2, 7, 8, 1]) == 1\nassert     find_even_pair([4, 3, 5, 6, 2, 7, 8]) == 0\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_power_of_2(1024) == 2048\nassert     next_power_of_2(512) == 1024\nassert     next_power_of_2(512) == 1024\nassert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_power_of_2(3) == 4\nassert     next_power_of_2(5) == 8\nassert     next_power_of_2(7) == 16\nassert     next_power_of_2(16) == 32\nassert     next_power_of_2(63) == 64\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_power_of_2(1024) == 4096\nassert     next_power_of_2(256) == 1024\nassert     next_power_of_2(512) == 2048\nassert     next_power_of_2(2048) == 4096\nassert     next_power_of_2(4096) == 4096\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(4) == 2\nassert     next_power_of_2(5) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_power_of_2(4) == 8\nassert     next_power_of_2(5) == 16\nassert     next_power_of_2(6) == 16\nassert     next_power_of_2(7) == 32\nassert     next_power_of_2(8) == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 2\nassert     next_power_of_2(2) == 4\nassert     next_power_of_2(3) == 8\nassert     next_power_of_2(4) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_power_of_2(10) == 8\nassert     next_power_of_2(18) == 16\nassert     next_power_of_2(33) == 64\nassert     next_power_of_2(999) == 1024"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     frequency(4, [4,4,4,4,4,4,4,4,4,4]) == 8\nassert     frequency(3, [3,3,3,3,3,3,3,3,3,3]) == 6\nassert     frequency(0, [1,1,1,1,1,1,1,1,1,1]) == 0\nassert     frequency(1, [1,1,1,1,1,1,1,1,1,1]) == 10\nassert     frequency(2, [1,1,1,1,1,1,1,1,1,1]) == 4\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     frequency(0,0) == 0, \"Wrong answer\"\nassert     frequency(0,1) == 0, \"Wrong answer\"\nassert     frequency(1,1) == 1, \"Wrong answer\"\nassert     frequency(1,2) == 0, \"Wrong answer\"\nassert     frequency(2,1) == 1, \"Wrong answer\"\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     frequency(1, [1, 2, 3, 1, 1, 1, 1]) == 3\nassert     frequency(3, [1, 2, 3, 1, 1, 1, 1]) == 1\nassert     frequency(3, [1, 2, 3, 1, 1, 3, 1]) == 2\nassert     frequency(0, []) == 0\nassert     frequency(5, [3, 1, 3, 3, 3, 4, 3, 5, 3, 3]) == 4\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     frequency(10, [10,10,10,10,10,10,10,10,10,10,10]) == 5\nassert     frequency(5, [1,5,2,5,2,5,1,5,2,5,1,5,2]) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     frequency([1,2,3,4,1,1,1,1,1,1,2],1) == 3\nassert     frequency([1,2,3,4,1,1,1,1,1,1,2],2) == 2\nassert     frequency([1,2,3,4,1,1,1,1,1,1,2],4) == 0\nassert     frequency([1,2,3,4,1,1,1,1,1,1,2],5) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     frequency([1,2,3,4,5],3) == 2\nassert     frequency([1,2,3,4,5],6) == 0\nassert     frequency([1,2,3,4,5],1) == 5\nassert     frequency([1,2,3,4,5],2) == 3\nassert     frequency([1,2,3,4,5],5) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     frequency([1,2,3,1,4,5], 1) == 3\nassert     frequency([1,2,3,1,4,5], 4) == 1\nassert     frequency([1,2,3,1,4,5], 5) == 0\nassert     frequency([1,2,3,1,4,5], 2) == 2\nassert     frequency([1,2,3,1,4,5], 6) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     frequency([],5) == 0, \"Failed 1\"\nassert     frequency([1,1,1],1) == 3, \"Failed 2\"\nassert     frequency([1,1,3],1) == 1, \"Failed 3\"\nassert     frequency([1,3,5,1,5],1) == 2, \"Failed 4\"\nassert     frequency([1,2,3,4],1) == 1, \"Failed 5\"\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     frequency(a, x) == 3\nassert     frequency(a, 15) == 0\n\ndef flat(a): \n    '''\n    Write a function to flatten a list of lists, return a list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (frequency([1, 2, 3, 1, 2, 3, 1, 2, 3], 1) == 2)\nassert     (frequency([1, 2, 3, 1, 2, 3, 1, 2, 3], 2) == 1)\nassert     (frequency([1, 2, 3, 1, 2, 3, 1, 2, 3], 3) == 3)\nassert     (frequency([1, 2, 3, 1, 2, 3, 1, 2, 3], 4) == 0)\nassert     (frequency([1, 2, 3, 1, 2, 3, 1, 2, 3], 2) == 2)\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_range_list([1,2,3,4],1,3) == 10\nassert     sum_range_list([1,2,3,4,5],2,4) == 12\nassert     sum_range_list([1,2,3,4,5],0,0) == 0\nassert     sum_range_list([1,2,3,4,5],1,5) == 15\nassert     sum_range_list([-1,-2,-3,-4,-5],-5,-1) == -15\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 5) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 4) == 10\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 4) == 6\nassert     sum_range_list([1, 2, 3, 4, 5], -1, 4) == 11\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_range_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 8) == 22\nassert     sum_range_list([1, 3, 5, 7, 9], 1, 3) == 9\nassert     sum_range_list([2, 4, 6, 8, 10], 1, 4) == 21\nassert     sum_range_list([10, 20, 30, 40, 50], 1, 3) == 51\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_range_list(range(5),1,4) == 9\nassert     sum_range_list(range(5),0,4) == 9\nassert     sum_range_list(range(5),0,4) == 9\nassert     sum_range_list(range(5),1,4) == 9\nassert     sum_range_list(range(5),2,4) == 9\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 3) == 9\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 3) == 6\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], 1, -2) == 5\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_range_list([1,2,3,4], 2, 3) == 6\nassert     sum_range_list([1,2,3,4], 1, 3) == 6\nassert     sum_range_list([1,2,3,4], 1, 4) == 10\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 1, 1) == 0\nassert     sum_range_list([1, 2, 3, 4], 1, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], 3, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], 3, 4) == 7\nassert     sum_range_list([1, 2, 3, 4], 4, 4) == 8\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 4) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 2) == 5\nassert     sum_range_list([1, 2, 3, 4, 5], 5, 5) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_range_list([5, 3, 7, 8, 4, 2, 9, 1, 6, 10], 0, 8) == 40\nassert     sum_range_list([1, 3, 5, 7, 9], 0, 3) == 25\nassert     sum_range_list([1, 3, 5, 7, 9], 2, 2) == 7\nassert     sum_range_list([1, 3, 5, 7, 9], 4, 4) == 9\nassert     sum_range_list([1, 3, 5, 7, 9], 3, 5) == 26\n"
    },
    {
        "number": 170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 5) == 45\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 7) == 50\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 0) == 0\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 10) == 45\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -10, -1) == 0\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(3) == 20.87083333333334\nassert     perimeter_pentagon(4) == 30.27777777777778\nassert     perimeter_pentagon(5) == 35.52777777777778\nassert     perimeter_pentagon(6) == 40.16666666666665\nassert     perimeter_pentagon(7) == 44.88277777777778\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(10) == 50\nassert     perimeter_pentagon(7) == 28\nassert     perimeter_pentagon(5) == 22\nassert     perimeter_pentagon(4) == 18\nassert     perimeter_pentagon(3) == 14\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(8) == 28\nassert     perimeter_pentagon(7) == 22\nassert     perimeter_pentagon(6) == 16\nassert     perimeter_pentagon(5) == 12\nassert     perimeter_pentagon(4) == 8\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(3)    ==     21.0\nassert     perimeter_pentagon(5)    ==     36.0\nassert     perimeter_pentagon(6)    ==     42.0\nassert     perimeter_pentagon(10)    ==     66.0\nassert     perimeter_pentagon(20)    ==     140.0\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     perimeter_pentagon(1) == 5\nassert     perimeter_pentagon(2) == 12\nassert     perimeter_pentagon(3) == 22\nassert     perimeter_pentagon(4) == 30\nassert     perimeter_pentagon(5) == 42\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(3) == 28\nassert     perimeter_pentagon(7) == 60\nassert     perimeter_pentagon(9) == 72\nassert     perimeter_pentagon(11) == 124\nassert     perimeter_pentagon(13) == 152\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     perimeter_pentagon(4) == 25.0\nassert     perimeter_pentagon(5) == 30.0\nassert     perimeter_pentagon(6) == 36.0\nassert     perimeter_pentagon(7) == 42.0\nassert     perimeter_pentagon(8) == 48.0\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(3) == 19.615\nassert     perimeter_pentagon(4) == 28.830\nassert     perimeter_pentagon(5) == 40.370\nassert     perimeter_pentagon(6) == 42.760\nassert     perimeter_pentagon(7) == 48.690\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     perimeter_pentagon(3) == 10\nassert     perimeter_pentagon(5) == 14\nassert     perimeter_pentagon(7) == 19\nassert     perimeter_pentagon(9) == 26\nassert     perimeter_pentagon(11) == 32\n"
    },
    {
        "number": 171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(5) == 30.8768, \"Wrong answer\"\nassert     perimeter_pentagon(10) == 48.6333, \"Wrong answer\"\nassert     perimeter_pentagon(15) == 65.9182, \"Wrong answer\"\nassert     perimeter_pentagon(20) == 85.1822, \"Wrong answer\"\nassert     perimeter_pentagon(25) == 100.5841, \"Wrong answer\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_occurance('hello my name is std') == 2\nassert     count_occurance('hello') == 1\nassert     count_occurance('std') == 1\n\ndef count_occurance_2(s):\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_occurance('abcdef') == 2\nassert     count_occurance('aabccdd') == 2\nassert     count_occurance('abcdefxyz') == 0\nassert     count_occurance('aabccddeeee') == 4\n\n\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_occurance('std') == 1\nassert     count_occurance('stdstd') == 1\nassert     count_occurance('stdst') == 1\nassert     count_occurance('stdststd') == 1\nassert     count_occurance('stdstdstd') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_occurance(\"std\") == 1, \"do not modify std\"\nassert     count_occurance(\"hello\") == 0, \"do not modify hello\"\nassert     count_occurance(\"have a nice day\") == 2, \"do not modify have a nice day\"\nassert     count_occurance(\"your name is : std\") == 1, \"do not modify your name is : std\"\nassert     count_occurance(\"mammals are animals\") == 4, \"do not modify mammals are animals\"\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_occurance('the day is a good day') == 1, count_occurance('the day is a good day')\nassert     count_occurance('the day is a good day is a good day') == 2, count_occurance('the day is a good day is a good day')\nassert     count_occurance('the day is a good day is a good day is a good day') == 3, count_occurance('the day is a good day is a good day is a good day is a good day')\nassert     count_occurance('the day is a good day is a good day is a good day is a good day') == 4, count_occurance('the day is a good day is a good day is a good day is a good day is a good day')\nassert     count_occurance('the day is a good day is a good day is a good day is a good day is a good day') == 5, count_occurance('the day is a good day is a good day is a good day is a good day is a good day is a good day')\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_occurance('I like to like std') == 2\nassert     count_occurance('I like to like std. std is very like') == 2\nassert     count_occurance('std is not std. std is very like') == 2\nassert     count_occurance('std. std is not like') == 1\nassert     count_occurance('std is std. std is not std. std is not std. std is not std. std is not like') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_occurance('This is a test to see if the count_occurance function is working fine or not') == 4\nassert     count_occurance('This is an example of the std occurence') == 0\nassert     count_occurance('This is an example of the std occurence'*2) == 10\n\n\n\ndef print_letter_count(s):\n    '''\n    Write a function to print the letter count of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_occurance('accxacc') == 2\nassert     count_occurance('accxaccxacc') == 3\nassert     count_occurance('abcd') == 0\nassert     count_occurance('abcdabcd') == 1\nassert     count_occurance('abcdd') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_occurance('std') == 2\nassert     count_occurance('stdst') == 2\nassert     count_occurance('srty') == 0\nassert     count_occurance('srtystd') == 2\nassert     count_occurance('srttystdst') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_occurance('std') == 2\nassert     count_occurance('a std called') == 1\nassert     count_occurance('std std std') == 2\nassert     count_occurance('a std called std') == 1\nassert     count_occurance('a std called std std') == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_type((12, 13, 14, 14.5)) == True\nassert     check_type((12, 13.0, 14.5)) == False\nassert     check_type((12, '13', 14.5)) == False\nassert     check_type((12, 13, '14.5')) == False\nassert     check_type((12, 13, 14.5, 14.5)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_type((1,2,3,4,5)) == False\nassert     check_type((1,2,3,4,'5')) == True\nassert     check_type((1,2,3,4,5.5)) == True\nassert     check_type((1,2,3,4,5.5,5)) == False\nassert     check_type((1,2,'3',4,5.5,5)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_type((1, 2, 3, 4, 5, 5)) == True\nassert check_type((1, 2, 'a', 4, 5, 5)) == False\nassert check_type((1, 2, 3, 'a', 5, 5)) == False\nassert check_type((1, 2, 3, 4, 5)) == False\nassert check_type((1, 2, 3, 'a', 5)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_type((1,1.0, 'a')) == True\nassert     check_type((1,2,'a',1)) == False\nassert     check_type((1,2,'a',1.0)) == False\nassert     check_type((1,2.0,1,1.0)) == False\nassert     check_type((1,2.0,1,1)) == True\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_type(()) == False, \"Empty tuple\"\nassert     check_type([]) == True, \"List\"\nassert     check_type((1,2,3,4)) == False, \"Tuple with numbers\"\nassert     check_type(('a','b','c')) == False, \"String\"\nassert     check_type((1,2,'a',3)) == True, \"Tuple with mixed datatypes\"\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_type((1,2,3,3,4)) == True\nassert     check_type((1.2,2.2,3.3,3.3,4.4)) == True\nassert     check_type((1,2,3,3,4.5)) == False\nassert     check_type((1,2,3.5,3.5,4.6)) == False\nassert     check_type((1.1,2.2,3.3,3.3,4.4)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_type(('abc', 123, 'xyz')) == True, 'incorrect'\nassert     check_type(('abc', '123', 'xyz')) == False, 'incorrect'\nassert     check_type(('abc', 123, 123.5)) == True, 'incorrect'\nassert     check_type(('abc', 123.5, 'xyz')) == False, 'incorrect'\nassert     check_type(('abc', 123, 'xyz','mno')) == True, 'incorrect'\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_type(('y',3,'o',2.1,'o')) == True\nassert     check_type(('y',3,'o',2.1,'x')) == False\nassert     check_type(('y',3,'o',2.1,'o','o','o')) == True\nassert     check_type(('y',3,'o',2.1,'o','o','a')) == False\nassert     check_type(('y',3,'o',2.1,'o','o','1')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_type(('a', 'b', 1, 2, 3)) is True\nassert     check_type(('a', 'b', 1, 2.5)) is True\nassert     check_type(('a', 'b', 1, 2.5, 'c')) is True\nassert     check_type(('a', 'b', 1, 2.5, 'c', 1, 2)) is True\nassert     check_type(('a', 'b', 1, 2.5, 'c', 1, 2.5)) is False\n"
    },
    {
        "number": 222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_type((True, True, 1, 1.0, 'hello')) == True\nassert     check_type((True, False, 1, 1.0, 'hello')) == False\nassert     check_type((True, True, 1, 1.0, 'hello')) == True\nassert     check_type((True, True, 1, 1.0, 'hello', 1.0, 1, 1.0)) == True\nassert     check_type((True, True, 1, 1.0, 'hello', 'hello', 1.0, 1, 1.0)) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_majority([1,1,1,1,1,1,1,1,1,1,1,1], 1, 1) == True\nassert     is_majority([1,1,1,1,1,1,1,1,1,1,1,1], 1, 2) == False\nassert     is_majority([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 10, 1) == True\nassert     is_majority([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50], 10, 2) == False\nassert     is_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_majority([1,2,3,4,5], 5, 3) == True\nassert     is_majority([1,2,3,4,5], 5, 1) == True\nassert     is_majority([1,2,3,4,5], 5, 7) == False\nassert     is_majority([1,2,3,4,5], 5, 4) == True\nassert     is_majority([1,2,3,4,5], 5, 0) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_majority([1, 2, 3, 4, 5], 5, 2) == True\nassert     is_majority([1, 2, 3, 4, 5], 5, 1) == True\nassert     is_majority([1, 2, 3, 4, 5], 5, 3) == True\nassert     is_majority([1, 2, 3, 4, 5], 5, 4) == True\nassert     is_majority([1, 2, 3, 4, 5], 5, 5) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_majority([2,2,2,2,5,5,5,5], 3, 5)\nassert     not is_majority([2,2,2,2,5,5,5,5], 3, 2)\nassert     is_majority([2,2,2,2,5,5,5,5], 3, 3)\nassert     not is_majority([2,2,2,2,5,5,5,5], 3, 1)\nassert     is_majority([2,2,2,2,5,5,5,5], 3, 4)\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_majority([1,2,1,1,1,2,2], 6, 1) == True\nassert     is_majority([1,2,3,4,5,6,7,8], 8, 4) == True\nassert     is_majority([1,2,3,4,5,6,7,8], 8, 3) == False\nassert     is_majority([1,2,3,4,5,6,7,8], 8, 9) == False\nassert     is_majority([1,2,3,4,5,6,7,8], 8, 0) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_majority([3,2,3], 3, 3) == True\nassert     is_majority([3,2,3], 3, 2) == False\nassert     is_majority([3,2,3], 3, 1) == True\nassert     is_majority([3,2,3,4,2], 4, 2) == False\nassert     is_majority([3,2,3,4,2], 4, 3) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_majority([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, "
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_majority([1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_majority([0,0,0,0,0], 5, 0) == True\nassert     is_majority([0,0,0,0,0], 5, 1) == False\nassert     is_majority([0,1,2,3,4], 5, 4) == True\nassert     is_majority([0,1,2,3,4], 5, 2) == False\nassert     is_majority([1,1,2,2,2,3,3,3], 7, 3) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_majority([1, 2, 3, 4, 5, 5], 5, 5) == True\nassert     is_majority([1, 2, 3, 4, 5, 5], 5, 4) == False\nassert     is_majority([1, 1, 2, 2, 3, 4, 5, 5, 5], 5, 2) == True\nassert     is_majority([1, 1, 2, 2, 3, 4, 5, 5, 5], 5, 1) == False\nassert     is_majority([1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 7], 5, 7) == True\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(7) == 2\nassert     count_Set_Bits(8) == 1\nassert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(32) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(5) == 1\nassert     count_Set_Bits(6) == 2\nassert     count_Set_Bits(7) == 1\nassert     count_Set_Bits(8) == 2\nassert     count_Set_Bits(9) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(10) == 2\nassert     count_Set_Bits(2**32-1) == 32\nassert     count_Set_Bits(2**32) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(5) == 2\nassert     count_Set_Bits(10) == 3\nassert     count_Set_Bits(11) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(11) == 3\nassert     count_Set_Bits(4) == 0\nassert     count_Set_Bits(7) == 1\nassert     count_Set_Bits(9) == 2\nassert     count_Set_Bits(10) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(5) == 2\nassert     count_Set_Bits(13) == 3\nassert     count_Set_Bits(21) == 4\nassert     count_Set_Bits(1011) == 6\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (count_Set_Bits(0b0) == 0)\nassert     (count_Set_Bits(0b1) == 1)\nassert     (count_Set_Bits(0b10) == 1)\nassert     (count_Set_Bits(0b11) == 2)\nassert     (count_Set_Bits(0b111111111) == 31)\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(0b0000) == 0\nassert     count_Set_Bits(0b0001) == 1\nassert     count_Set_Bits(0b1010) == 1\nassert     count_Set_Bits(0b1011) == 2\nassert     count_Set_Bits(0b1111) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Set_Bits(15) == 2, '15 is 0b1101'\nassert     count_Set_Bits(42) == 4, '42 is 0b10010'\nassert     count_Set_Bits(9) == 1, '9 is 0b1001'\nassert     count_Set_Bits(300) == 12, '300 is 0b11111'\nassert     count_Set_Bits(0) == 0, '0 is 0b0'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_values_string('string') == 'ing'\nassert     odd_values_string('cool') == 'oo'\nassert     odd_values_string('programming') == 'oo'\nassert     odd_values_string('india') == 'do'\n\n\ndef is_palindrome(str):\n    '''\n    Write a python function to determine if a string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     'this is a string' == odd_values_string('this is a string')\nassert     'hi' == odd_values_string('hi')\nassert     'yello' == odd_values_string('yello')\nassert     '12345' == odd_values_string('12345')\nassert     '12345' == odd_values_string('12345')\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_values_string('Python') == 'ytho'\nassert     odd_values_string('Java') == 'av'\nassert     odd_values_string('Python') == 'ytho'\nassert     odd_values_string('C++') == 'c'\nassert     odd_values_string('Python') == 'ytho'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_values_string('Hello') == 'Hlo'\nassert     odd_values_string('HackerRank') == 'Hce akr'\nassert     odd_values_string('!evit') =='veit'\nassert     odd_values_string('L') == 'L'\nassert     odd_values_string('HackerRank') == 'Hce akr'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_values_string('abcd') == 'bcd'\nassert     odd_values_string('abcdefg') == 'efg'\nassert     odd_values_string('13') == ''\nassert     odd_values_string('xyz') == 'z'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_values_string('pratap') == 'ap'\nassert     odd_values_string('pratap12345') == '12345'\nassert     odd_values_string('pratap123456789') == '123456789'\nassert     odd_values_string('pratap123456789abcdef') == '123456789abcdef'\n\ndef check_for_pattern(string, pattern):\n    '''\n    Write a python function to check whether the given string contains the given pattern or not.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_values_string(\"Python\") == \"ytho\"\nassert     odd_values_string(\"Hello\") == \"ell\"\nassert     odd_values_string(\"!@%#\") == \"!@\"\nassert     odd_values_string(\"\") == \"\"\nassert     odd_values_string(\"Algorithms\") == \"ls\"\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_values_string(\"Learning Python\") == \"LgPn \"\nassert     odd_values_string(\"21\") == \"2 \"\nassert     odd_values_string(\"Python\") == \"Ptn \"\nassert     odd_values_string(\"!@#$%^&*()\") == \" !\"\nassert     odd_values_string(\"\") == \"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_values_string('Hey') == 'e'\nassert     odd_values_string('This is my world') == 'h'\nassert     odd_values_string('This is my world') == ''\nassert     odd_values_string('This is my world') == 'Th'\n"
    },
    {
        "number": 226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_values_string('abcdef') == 'bcd'\nassert     odd_values_string('abcd') == ''\nassert     odd_values_string('1234567') == '2345'\nassert     odd_values_string('123456') == ''\nassert     odd_values_string('12345') == ''\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,3,1) == 2\nassert     min_of_three(3,1,2) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,3,4) == 2\nassert     min_of_three(3,4,5) == 3\n\n\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     min_of_three(1, 2, 3) == 1\nassert     min_of_three(1, 2, 2) == 1\nassert     min_of_three(1, 2, 2.5) == 1.5\nassert     min_of_three(1, 2.5, 3) == 2.5\nassert     min_of_three(-1, -2, -3) == -3\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,2,4) == 1\nassert     min_of_three(1,3,4) == 1\nassert     min_of_three(1,2,4) == 1\nassert     min_of_three(1,1,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     min_of_three(1,2,3) == 1, \\\n        'Expected 1'\nassert     min_of_three(2,3,1) == 1, \\\n        'Expected 1'\nassert     min_of_three(1,3,2) == 1, \\\n        'Expected 1'\nassert     min_of_three(2,3,3) == 2, \\\n        'Expected 2'\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     min_of_three(1,5,7) == 1\nassert     min_of_three(8,2,3) == 2\nassert     min_of_three(1,3,5) == 1\nassert     min_of_three(8,3,5) == 3\nassert     min_of_three(8,3,5) == 3\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     min_of_three(5,3,1) == 1\nassert     min_of_three(2,3,5) == 2\nassert     min_of_three(3,5,1) == 2\nassert     min_of_three(5,5,5) == 5\nassert     min_of_three(5,1,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     min_of_three(1,2,3)    == 1, \"min_of_three(1,2,3) == 1\"\nassert     min_of_three(1,3,2)    == 1, \"min_of_three(1,3,2) == 1\"\nassert     min_of_three(2,1,3)    == 1, \"min_of_three(2,1,3) == 1\"\nassert     min_of_three(2,3,1)    == 1, \"min_of_three(2,3,1) == 1\"\nassert     min_of_three(3,1,2)    == 1, \"min_of_three(3,1,2) == 1\"\n"
    },
    {
        "number": 227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     min_of_three(1, 2, 3) == 1, \"error\"\nassert     min_of_three(5, 3, 1) == 1, \"error\"\nassert     min_of_three(10, 20, 50) == 10, \"error\"\nassert     min_of_three(5, 7, 2) == 2, \"error\"\nassert     min_of_three(5, 5, 5) == 5, \"error\"\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0, 0, 0) == True\nassert     all_Bits_Set_In_The_Given_Range(0, 0, 1) == False\nassert     all_Bits_Set_In_The_Given_Range(0, 0, 8) == False\nassert     all_Bits_Set_In_The_Given_Range(0, 0, 10) == False\nassert     all_Bits_Set_In_The_Given_Range(0, 1, 0) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,5) == True\nassert     all_Bits_Set_In_The_Given_Range(1,1,5) == True\nassert     all_Bits_Set_In_The_Given_Range(2,2,5) == False\nassert     all_Bits_Set_In_The_Given_Range(3,3,5) == False\nassert     all_Bits_Set_In_The_Given_Range(4,4,5) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(8,0,1) == False \nassert     all_Bits_Set_In_The_Given_Range(8,1,2) == False \nassert     all_Bits_Set_In_The_Given_Range(8,2,3) == True \nassert     all_Bits_Set_In_The_Given_Range(8,3,4) == True \nassert     all_Bits_Set_In_The_Given_Range(8,4,5) == False \n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(7,4,5) == False\nassert     all_Bits_Set_In_The_Given_Range(7,6,6) == True\nassert     all_Bits_Set_In_The_Given_Range(7,6,5) == False\n\ndef str_int_Validation(s):  \n    '''\n    Write a python function to check whether the string s is either an integer or a string. \n    If the string s is an integer, it should return True, if not, it should return False.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,4)==False\nassert     all_Bits_Set_In_The_Given_Range(1,1,4)==False\nassert     all_Bits_Set_In_The_Given_Range(0,0,3)==True\nassert     all_Bits_Set_In_The_Given_Range(1,1,3)==True\n\ndef all_Bits_Set_In_The_Given_Range2(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,32) == True, 'Failed'\nassert     all_Bits_Set_In_The_Given_Range(0,0,5) == True, 'Failed'\nassert     all_Bits_Set_In_The_Given_Range(0,1,32) == False, 'Failed'\nassert     all_Bits_Set_In_The_Given_Range(5,1,32) == False, 'Failed'\nassert     all_Bits_Set_In_The_Given_Range(1,1,32) == True, 'Failed'\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,2,2) == True\nassert     all_Bits_Set_In_The_Given_Range(2,3,2) == True\nassert     all_Bits_Set_In_The_Given_Range(2,3,3) == True\nassert     all_Bits_Set_In_The_Given_Range(2,4,3) == False\nassert     all_Bits_Set_In_The_Given_Range(2,4,2) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0b01010101,0,63) == False\nassert all_Bits_Set_In_The_Given_Range(0b00110011,0,63) == True\nassert all_Bits_Set_In_The_Given_Range(0b11111111,0,63) == False\nassert all_Bits_Set_In_The_Given_Range(0b11111111,0,64) == True\nassert all_Bits_Set_In_The_Given_Range(0b11111111,0,0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,2)==False\nassert     all_Bits_Set_In_The_Given_Range(0,1,2)==False\nassert     all_Bits_Set_In_The_Given_Range(1,0,2)==True\nassert     all_Bits_Set_In_The_Given_Range(1,1,2)==True\nassert     all_Bits_Set_In_The_Given_Range(2,0,2)==True\n"
    },
    {
        "number": 228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10,0,2) == False\nassert     all_Bits_Set_In_The_Given_Range(10,2,3) == True\nassert     all_Bits_Set_In_The_Given_Range(10,1,3) == False\nassert     all_Bits_Set_In_The_Given_Range(10,2,5) == False\nassert     all_Bits_Set_In_The_Given_Range(10,2,10) == True\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     re_arrange_array([1,2,3,4,-1,-2,5,-3,6], 3) == [3,2,1,4,-2,-3,5,6,-1]\nassert     re_arrange_array([-1,0,2,3,4,5,6,7,8], 3) == [-1,2,-3,0,4,5,6,7,8]\nassert     re_arrange_array([-1,-2,3,4,5,6], 3) == [-2,3,-1,4,5,6]\nassert     re_arrange_array([1,2,3,4,5,6], 3) == [1,2,3,4,5,6]\nassert     re_arrange_array([-1,0,2,3,4,5,6], 7) == [-1,0,2,3,4,5,6]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     re_arrange_array([2, -4, 3, -6, 4, -7, -1, -2, 3, 2, 1, -3, -2, 2, -1, 1, 5], 3) == [-4, 3, 3, -7, -2, 1, 2, 2, 4, 1, 3, -2, -2, 1, -3, -1, 5]\nassert     re_arrange_array([1, -2, 3, 4, -7, 5, -8, -9], 3) == [-2, 1, 4, 3, -8, -7, -9]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, -7, 8, 9, 10], 3) == [-7, -8, 1, 2, 3, 4, 5, 6, 8, 9, 10]\nassert     re_arrange_array([-1, 1, 3, 2, 5, -9, -8, -6, 4, -7, 3, 8, -5, 1, 9, 2, -4, 3, 5], 4) == [-9, -8, -7, -5, 1, 1, 2, 3, 4, 3, 5, 5, 4, -6, -6, 8, 9, 2, 4, 1, 3, 3, 2]\nassert     re_arrange_array([-2, -8, -4, -3, -6, -4, -1, -8, -9], 4) == [-2, -1, -1, -3, -2, -4, -4, -4, -6, -8]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     re_arrange_array([-1, -2, -3, 4, 5, 6], 2) == [4, -1, -2, -3, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6], 5) == [4, -1, -2, -3, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6], 7) == [4, -1, -2, -3, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6], 0) == [4, -1, -2, -3, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 4, 5, 6], 1) == [4, -1, -2, -3, 5, 6]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nassert re_arrange_array([-1, -3, -4, 0, -2, -5, 2, 4, 0, 3, 1, 5], 2) == [-1, -3, -4, -2, -5, 2, 4, 3, 1, 5, 0]\nassert re_arrange_array([-1, -3, -4, 0, -2, -5, 2, 4, 0, 3, 1, 5], 5) == [-1, -3, -4, -2, -5, 2, 4, 3, 1, 5, 0]\nassert re_arrange_array([-1, -3, -4, 0, -2, -5, 2, 4, 0, 3, 1, 5], 6) == [-1, -3, -4, -2, -5, 2, 4, 3, 1, 5, 0]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     re_arrange_array([4, -1, 2, -3, 3, 5], 3) == [-1, -3, 2, 4, 3, 5]\nassert     re_arrange_array([4, -1, 2, -3, 3, 5], 1) == [-1, 2, 3, 4, 5]\nassert     re_arrange_array([4, -1, 2, -3, 3, 5], -1) == [-1, -3, -2, 4, 3, 5]\nassert     re_arrange_array([4, -1, 2, -3, 3, 5], 6) == [-1, -3, -2, 4, 3, 5]\nassert     re_arrange_array([4, -1, 2, -3, 3, 5], -100) == [-100, -3, -2, 4, 3, 5]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     re_arrange_array([6, -3, -2, -1, 4, 5, 2, 1, 8, 7], 3)     == [-3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     re_arrange_array([-6, -3, -2, -1, 4, 5, 2, 1, 8, 7], 3)     == [-3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     re_arrange_array([-6, -3, -2, -1, 4, 5, 2, 1, 8, 7], 4)     == [-3, -2, -1, 1, 4, 2, 5, 6, 7, 8, -6]\nassert     re_arrange_array([-6, -3, -2, -1, 4, 5, 2, 1, 8, 7], 5)     == [-3, -2, -1, 1, 4, 2, 5, 6, 7, 8, -6]\nassert     re_arrange_array([-6, -3, -2, -1, 4, 5, 2, 1, 8, 7], 8)     == [-6, -3, -2, -1, 4, 5, 2, 1, 8, 7]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     re_arrange_array([-1,2,-3,-4,-5], 1) == [-3,-4,-1,-2,-5]\nassert     re_arrange_array([5,4,3,2,1,0,-1,-2,-3,-4,-5], 5) == [-5,0,1,2,3,4,-2,-4,-3,-1,-5]\nassert     re_arrange_array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [re_arrange_array([-1, 2, -3, 4, 5], 3)\n            , [1, 2, -3, -4, 5]]\n            \nassert     [re_arrange_array([-1, 2, -3, 4, 5], 2)\n            , [-1, 2, -3, 4, 5]]\n            \nassert     [re_arrange_array([-1, 2, -3, 4, 5], 1)\n            , [-1, 2, -3, 4, 5]]\n            \nassert     [re_arrange_array([-1, 2, -3, 4, 5], 5)\n            , [-1, 2, -3, 4, 5]]\n            \nassert     [re_arrange_array([-1, 2, -3, 4, 5], 0)\n            , [-1, 2, -3, 4, 5]]\n"
    },
    {
        "number": 229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, -1, -2, -3], 2) == [1, 2, -3, -2, -1]\nassert     re_arrange_array([-1, -2, -3, -4, 5, 6, 7, 8], 4) == [-1, -2, -3, -4, 5, 6, 7, 8]\nassert     re_arrange_array([-1, -2, -3, -4, 5, 6, 7, 8], 2) == [-1, -2, -3, -4, 5, 6, 7, 8]\nassert     re_arrange_array([-1, 2, 3, 4, 5, 6, 7, 8], 4) == [-1, 2, 3, 4, 5, 6, 7, 8]\nassert     re_arrange_array([-1, -2, -3, -4, 5, 6, 7, 8], 1) == [-1, -2, -3, -4, 5, 6, 7, 8]\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_blank('helloworld','s') == 'hellosdsd', 'wrong'\nassert     replace_blank('helloworld','') == 'helloworld', 'wrong'\nassert     replace_blank('hello world','') == 'hello world', 'wrong'\nassert     replace_blank('','s') == '', 'wrong'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_blank(\"This is a test\", \"a\") == \"This is a test\", \"Test 1\"\nassert     replace_blank(\"This is a test\", \"x\") == \"This is a test\", \"Test 2\"\nassert     replace_blank(\"This is a test\", \"a\") == \"This is a test\", \"Test 3\"\nassert     replace_blank(\"This is a test\", \"a\", \"b\") == \"This is a test\", \"Test 4\"\nassert     replace_blank(\"\", \"a\", \"b\") == \"\", \"Test 5\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_blank('1234','#') == '1234', \"should be 1234\"\nassert     replace_blank('string', '$') =='string', \"should be string\"\nassert     replace_blank('', '#') == '', \"should be blank\"\nassert     replace_blank('', '') == '', \"should be blank\"\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_blank('this is a test', '*') == 'this* is* a* test', \"check the output\"\nassert     replace_blank('we have nothing to do','') == 'we* have*nothing* to* do', \"check the output\"\nassert     replace_blank('We have nothing to do','') == 'We* have*nothing* to* do', \"check the output\"\nassert     replace_blank('We have nothing to do', '') == 'We* have*nothing* to* do', \"check the output\"\n\ndef pig_latin(str1):\n    '''\n    Write a function that takes in a string, converts the string to pig latin, and returns the string.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_blank('', 'a') == 'a'\nassert     replace_blank(' hello ', 'a') == 'hello a'\nassert     replace_blank('    ', 'a') == 'a'\nassert     replace_blank('   ', 'a') =='  a'\nassert     replace_blank('hello world', 'a') == 'hello world'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     replace_blank('HackerRank', 'a') == 'Haaaaaack'\nassert     replace_blank('HackerRank', 'e') == 'Hceaaaak'\nassert     replace_blank('HackerRank', 'i') == 'Heeeack'\nassert     replace_blank('HackerRank', 'o') == 'Hceeeeack'\nassert     replace_blank('HackerRank', 'e') == 'Hceaaacke'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_blank('a b c','') == 'a b c', 'error in replace_blank'\nassert     replace_blank('a b c d','') == 'a b c d', 'error in replace_blank'\nassert     replace_blank('a b c d', 'a') == 'b c d', 'error in replace_blank'\nassert     replace_blank('a b c d', 'b') == 'a c d', 'error in replace_blank'\nassert     replace_blank('a b c d', 'c') == 'a b d', 'error in replace_blank'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_blank('cat', '?') == 'c?a'\nassert     replace_blank('cat', 'a') == 'cca'\nassert     replace_blank(' ', 'a') == 'a a'\nassert     replace_blank('  ', '?') == 'a?a'\nassert     replace_blank('cat','') == 'ca?t'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_blank('coffee','a') == 'coffe'\nassert     replace_blank('man!','a') =='man!'\nassert     replace_blank('coffee','!') == 'coffee'\nassert     replace_blank('coffee','p') == 'coffe'\nassert     replace_blank('coffee','e') == 'coffe'\n"
    },
    {
        "number": 230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_blank(\"Hello World\", \"x\") == \"Hello World\", \"Hello World\"\nassert     replace_blank(\"Hello World\", \"a\") == \"Helo Worl\", \"Helo Worl\"\nassert     replace_blank(\"Hello World\", \"r\") == \"Hello World\", \"Hello World\"\nassert     replace_blank(\"Hello World\", \"e\") == \"Hello Worl\", \"Hello Worl\"\nassert     replace_blank(\"Hello World\", \"l\") == \"Hello Worl\", \"Hello Worl\"\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef larg_nnum1(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     larg_nnum([1,2,3,4,5,6],3) == [6,5,4]\nassert     larg_nnum([-1,2,3,4,5,6],3) == [6,5,4]\nassert     larg_nnum([-1,-2,-3,-4,-5,-6],3) == [-6,-5,-4]\nassert     larg_nnum([-1,-2,-3,-4,-5,-6],4) == [-6,-5,-4,-3]\nassert     larg_nnum([-1,-2,-3,-4,-5,-6],2) == [-6,-5]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     larg_nnum([5, 8, 4, 2, 3, 9, 7], 2) == [9, 7]\nassert     larg_nnum([5, 8, 4, 2, 3, 9, 7], 3) == [9, 7, 5]\nassert     larg_nnum([5, 8, 4, 2, 3, 9, 7], 4) == [9, 7, 5, 2]\nassert     larg_nnum([5, 8, 4, 2, 3, 9, 7], 5) == [9, 7, 5, 2, 3]\nassert     larg_nnum([5, 8, 4, 2, 3, 9, 7], 6) == [9, 7, 5, 2, 3, 4]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     larg_nnum([2,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],7) == [17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47]\nassert     larg_nnum([2,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],1) == [17]\nassert     larg_nnum([2,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],20) == [17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]\nassert     larg_nnum([2,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],0) == []\n\ndef larg_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     larg_nnum([0,-1,-5,-5],3) == [-5,-5,-5]\nassert     larg_nnum([-5,2,-5,2,0,-1,-5,-5],4) == [-5,-5,2,-5]\n\ndef larg_n_element(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     larg_nnum([1,2,3,4,5,6],3) == [6,5,4]\nassert     larg_nnum([1,2,3,4,5,6],0) == []\nassert     larg_nnum([1,2,3,4,5,6],5) == [6,5,4,3,2]\nassert     larg_nnum([1,2,3,4,5,6],5) == [6,5,4,3,2]\nassert     larg_nnum([1,2,3,4,5,6],2) == [6,5]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     larg_nnum([1,2,3,4,5], 3) == [5,4,3]\nassert     larg_nnum([1,2,3,4,5], 5) == [5,4,3,2,1]\nassert     larg_nnum([1,2,3,4,5], 1) == [1]\nassert     larg_nnum([1,2,3,4,5], 0) == []\n\ndef is_sorted(list1):\n    '''\n    Write a function that takes in a list of numbers and returns a Boolean indicating whether the list is sorted.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     larg_nnum([1,3,5,7,9],3) == [7,9,5]\nassert     larg_nnum([5,1,3,7,9],3) == [9,7,5]\nassert     larg_nnum([5,1,3,7,9],2) == [9,7]\nassert     larg_nnum([5,1,3,7,9],10) == [9,7,5,3,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     larg_nnum([-4,3,2,1], 3) == [3,2,1]\nassert     larg_nnum([-4,3,2,1], 4) == [3,2,1,4]\nassert     larg_nnum([-4,3,2,1], 5) == [3,2,1,4]\nassert     larg_nnum([-4,3,2,1], 1) == [-4]\nassert     larg_nnum([-4,3,2,1], -1) == [3,2,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [x for x in range(11)] == larg_nnum([x for x in range(11)],1)\nassert     [x for x in range(11)] == larg_nnum([x for x in range(11)],2)\nassert     [x for x in range(11)] == larg_nnum([x for x in range(11)],3)\nassert     [x for x in range(11)] == larg_nnum([x for x in range(11)],4)\nassert     [x for x in range(11)] == larg_nnum([x for x in range(11)],5)\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert lateralsuface_cylinder(2,4) == 28\nassert lateralsuface_cylinder(3,8) == 52\nassert lateralsuface_cylinder(2,3) == 12\nassert lateralsuface_cylinder(4,5) == 80\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lateralsuface_cylinder(0.2, 1) == 0.64\nassert     lateralsuface_cylinder(0.2, 2) == 0.64\nassert     lateralsuface_cylinder(0.2, 3) == 0.64\nassert     lateralsuface_cylinder(0.2, 4) == 0.64\nassert     lateralsuface_cylinder(0.2, 5) == 0.64\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lateralsuface_cylinder(2,2) == 2*2*pi,    'Fail to pass the test'\nassert     lateralsuface_cylinder(3,2) == 2*(3**2)*pi,    'Fail to pass the test'\nassert     lateralsuface_cylinder(4,2) == 2*(4**2)*pi,    'Fail to pass the test'\nprint ('Passed the test')\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(2,3)     ==    6.0\nassert     lateralsuface_cylinder(3,2)     ==    12.0\nassert     lateralsuface_cylinder(5,1)     ==    30.0\nassert     lateralsuface_cylinder(7,1)     ==    56.0\nassert     lateralsuface_cylinder(2,3)     ==    6.0\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef lateral_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lateralsuface_cylinder(0.1,0.5) == pi*r*r*0.5\nassert     lateralsuface_cylinder(1,0.5) == pi*r*r\nassert     lateralsuface_cylinder(1,2) == 2*pi*r*r\n\ndef lateralsurface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lateralsuface_cylinder(2,3) == 24\nassert     lateralsuface_cylinder(5,6) == 30\nassert     lateralsuface_cylinder(7,8) == 42\nassert     lateralsuface_cylinder(10,11) == 52\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lateralsuface_cylinder(1,1)    ==    3.14 * 1 * 1\nassert     lateralsuface_cylinder(2,1)    ==    3.14 * 1 * 2\nassert     lateralsuface_cylinder(3,1)    ==    3.14 * 1 * 3\nassert     lateralsuface_cylinder(4,1)    ==    3.14 * 1 * 4\nassert     lateralsuface_cylinder(5,1)    ==    3.14 * 1 * 5\n"
    },
    {
        "number": 233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert lateralsuface_cylinder(r=8,h=10) == 45*8*h\nassert lateralsuface_cylinder(r=3,h=10) == r*h*(3**2 + 2*9)\nassert lateralsuface_cylinder(r=4,h=5) == r*h*(3**2 + 2*17)\nassert lateralsuface_cylinder(r=3,h=6) == r*h*(9**2 + 2*27)\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_cube(1)         ==     1\nassert     volume_cube(2)         ==     8\nassert     volume_cube(3)         ==     27\nassert     volume_cube(4)         ==     64\nassert     volume_cube(5)         ==     125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_cube(5) == 125\nassert     volume_cube(3) == 27\nassert     volume_cube(9) == 729\nassert     volume_cube(0) == 0\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n\n\ndef is_isosceles_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the triangle is an isosceles triangle, and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(0) == 0\n"
    },
    {
        "number": 234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_bit_set_number(0) == 1\nassert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(3) == 1\nassert     even_bit_set_number(4) == 1\nassert     even_bit_set_number(5) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_bit_set_number(0b00000110) == 0b10000010\nassert     even_bit_set_number(0b00001001) == 0b10000100\nassert     even_bit_set_number(0b00001101) == 0b10000110\nassert     even_bit_set_number(0b00000111) == 0b10000011\nassert     even_bit_set_number(0b00000000) == 0b00000000\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(4) == 4\nassert     even_bit_set_number(5) == 16\nassert     even_bit_set_number(6) == 32\nassert     even_bit_set_number(7) == 64\nassert     even_bit_set_number(8) == 128\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (even_bit_set_number(10) == 2)\nassert     (even_bit_set_number(10) == 4)\nassert     (even_bit_set_number(0) == 0)\nassert     (even_bit_set_number(0) == 0)\nassert     (even_bit_set_number(1) == 0)\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(2) == True\nassert     even_bit_set_number(3) == False\nassert     even_bit_set_number(4) == False\nassert     even_bit_set_number(5) == True\nassert     even_bit_set_number(6) == False\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 0\nassert     even_bit_set_number(4) == 1\nassert     even_bit_set_number(5) == 0\nassert     even_bit_set_number(6) == 0\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(3) == 1\nassert     even_bit_set_number(4) == 1\nassert     even_bit_set_number(7) == 1\nassert     even_bit_set_number(8) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 1\nassert     even_bit_set_number(2) == 2\nassert     even_bit_set_number(3) == 3\nassert     even_bit_set_number(4) == 8\n"
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(0b11111111111111111111111111111111111111111111111111111111111111111111111111111) == 0b11111111111111111111111111111111111111111111111111111111111111111111111111111\nassert     even_bit_set_number(0b
    },
    {
        "number": 235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_bit_set_number(13) == 1\nassert     even_bit_set_number(15) == 1\nassert     even_bit_set_number(21) == 0\nassert     even_bit_set_number(27) == 0\nassert     even_bit_set_number(30) == 1\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_occurences([('a', 1), ('a', 3), ('b', 2), ('c', 4)]) == {('a', 1): 1, ('a', 3): 1, ('b', 2): 1, ('c', 4): 1}\nassert     check_occurences([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4)]) == {('a', 1): 3, ('a', 3): 1, ('b', 2): 2, ('c', 4): 2}\nassert     check_occurences([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4)]) == {('a', 1): 4, ('a', 3): 1, ('b', 2): 2, ('c', 4): 2}\nassert     check_occurences([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4)]) == {('a', 1): 5, ('a', 3): 1, ('b', 2): 2, ('c', 4): 2}\nassert     check_occurences([('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 1), ('b', 2), ('a', 3), ('c', 4)]) == {('a', 1): 6, ('a', 3): 1, ('b', 2): 2, ('c', 4): 2}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_occurences([(1,2), (3,4), (1,3), (4,5), (1,2)]) == {(1,2) : 2, (3,4) : 1, (4,5) : 1}\nassert check_occurences([]) == {}\n\ndef find_duplicates(list_of_tuples):\n    '''\n    Write a function that takes in a list of tuples and returns a set of tuples representing all the duplicate tuples in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_occurences([('A', 2), ('B', 2), ('C', 1), ('A', 1), ('A', 2)]) == {('A', 2): 2, ('B', 2): 2, ('C', 1): 1}\nassert     check_occurences([('A', 1), ('B', 1), ('C', 1), ('A', 2), ('A', 2), ('A', 1), ('A', 1)]) == {('A', 2): 2, ('A', 1): 3}\nassert     check_occurences([]) == {}\nassert     check_occurences([('A', 1), ('B', 1), ('C', 1)]) == {('A', 1): 1, ('B', 1): 1, ('C', 1): 1}\n\n\ndef top_n_words(list_of_words, n):\n    '''\n    Write a function that takes in a list of words and an integer n, and returns the top n most frequently occurring words in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_occurences([(1, 2), (1, 3), (1, 1), (1, 4), (2, 3), (3, 3), (3, 4), (4, 5), (4, 4), (5, 6)]) == {(1, 1): 1, (1, 2): 1, (1, 3): 2, (1, 4): 2, (2, 3): 1, (3, 3): 3, (3, 4): 3, (4, 5): 1, (4, 4): 2, (5, 6): 1}\nassert check_occurences([]) == {}\nassert check_occurences([(1, 2), (1, 3), (1, 1), (1, 4), (2, 3), (3, 3), (3, 4), (4, 5), (4, 4), (5, 6)]) == {(1, 1): 1, (1, 2): 1, (1, 3): 2, (1, 4): 2, (2, 3): 1, (3, 3): 3, (3, 4): 3, (4, 5): 1, (4, 4): 2, (5, 6): 1}\nassert check_occurences([(1, 2), (1, 3), (1, 1), (1, 4), (2, 3), (3, 3), (3, 4), (4, 5), (4, 4), (5, 6), (1, 2)]) == {(1, 1): 1, (1, 2): 2, (1, 3): 2, (1, 4): 2, (2, 3): 1, (3, 3): 3, (3, 4): 3, (4, 5): 1, (4, 4): 2, (5, 6): 1}\nassert check_occurences([(1, 2), (1, 3), (1, 1), (1, 4), (2, 3), (3, 3), (3, 4), (4, 5), (4, 4), (5, 6), (1, 2), (1, 2)]) == {(1, 1): 1, (1, 2): 2, (1, 3): 2, (1, 4): 2, (2, 3): 1, (3, 3): 3, (3, 4): 3, (4, 5): 1, (4, 4): 2, (5, 6): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_occurences([(1, 2), (3, 4), (1, 2), (4, 5), (1, 2), (3, 4), (1, 2)]) == {(1, 2) : 4, (3, 4) : 2}\nassert check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (3, 4), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2) : 10, (3, 4) : 2}\nassert check_occurences([(1, 2), (1, 2), (1, 2), (1, 2), (3, 4), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == {(1, 2) : 12, (3, 4) : 2}\n\ndef get_counts_from_file(filename):\n    '''\n    Write a function that takes in a file name and returns a dictionary mapping each unique tuple to the number of times it occurs in the file.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_occurences([(1, 2), (3, 4), (3, 4), (5, 6), (3, 4)]) == Counter({(3, 4): 2, (5, 6): 1})\nassert     check_occurences([(1, 2), (3, 4), (3, 4)]) == Counter({(3, 4): 2})\nassert     check_occurences([(1, 2), (1, 2)]) == Counter({(1, 2): 1})\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_occurences([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1), ('blue', 1)]) == {('blue', 4): 1, ('red', 1): 1, ('blue', 1): 3}\nassert     check_occurences([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1), ('blue', 1)]) == {('yellow', 1): 1, ('blue', 2): 1, ('yellow', 3): 1, ('red', 1): 1, ('blue', 1): 3}\nassert     check_occurences([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1), ('blue', 1)]) == {('blue', 4): 1, ('red', 1): 1, ('blue', 1): 3}\nassert     check_occurences([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1), ('blue', 1)]) == {('blue', 4): 1, ('red', 1): 1, ('blue', 1): 3}\nassert     check_occurences([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1), ('blue', 1)]) == {('blue', 4): 1, ('red', 1): 1, ('blue', 1): 3}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_occurences([('red', 2), ('blue', 1), ('red', 3), ('blue', 2), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1)]) == {('red', 2): 4, ('blue', 1): 6}\nassert     check_occurences([('red', 2), ('blue', 1), ('red', 3), ('blue', 2), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1)]) == {('red', 2): 4, ('blue', 1): 6}\nassert     check_occurences([('red', 2), ('blue', 1), ('red', 3), ('blue', 2), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1)]) == {('red', 2): 4, ('blue', 1): 6}\nassert     check_occurences([('red', 2), ('blue', 1), ('red', 3), ('blue', 2), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1)]) == {('red', 2): 4, ('blue', 1): 6}\nassert     check_occurences([('red', 2), ('blue', 1), ('red', 3), ('blue', 2), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1), ('red', 2), ('blue', 1)]) == {('red', 2): 4, ('blue', 1): 6}\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef map_to_dict(mapped_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_occurences([(1,2),(2,3),(3,1)]) == {(1,2):1, (2,3):1, (3,1):1}\nassert     check_occurences([(1,2),(2,1),(3,1),(1,2),(1,3),(1,1)]) == {(1,2):2, (1,3):1, (1,1):2}\nassert     check_occurences([]) == {}\n\ndef check_mean(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the average of those numbers.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     number_of_substrings('abc') == 0,'should be 0'\nassert     number_of_substrings('abcba') == 1,'should be 1'\nassert     number_of_substrings('abcab') == 2,'should be 2'\nassert     number_of_substrings('a') == 1,'should be 1'\nassert     number_of_substrings('aab') == 2,'should be 2'\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     number_of_substrings(\"a\") == 0\nassert     number_of_substrings(\"ab\") == 1\nassert     number_of_substrings(\"abcd\") == 3\nassert     number_of_substrings(\"abb\") == 2\nassert     number_of_substrings(\"abcabcd\") == 4\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     number_of_substrings('thisisastring') == 5\nassert     number_of_substrings('twotwothreefourfivesixseveneightnineten') == 17\nassert     number_of_substrings('a') == 1\nassert     number_of_substrings('this is a string') == 5\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     number_of_substrings(\"abracadabra\") == 5\nassert     number_of_substrings(\"\") == 0\nassert     number_of_substrings(\"abc\") == 3\nassert     number_of_substrings(\"aaa\") == 6"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     number_of_substrings('abcd') == 4\nassert     number_of_substrings('abcabcde') == 5\nassert     number_of_substrings('abcdeb') == 5\nassert     number_of_substrings('abcdde') == 5\nassert     number_of_substrings('abcdef') == 5\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     number_of_substrings('abcd') == 0\nassert     number_of_substrings('a') == 1\nassert     number_of_substrings('hello') == 1\nassert     number_of_substrings('abcd') == 1\nassert     number_of_substrings('abcdefghijklmnopqrstuvwxyz') == 19\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     number_of_substrings(\"aab\") == 3, \"Test 1\"\nassert     number_of_substrings(\"abcabc\") == 0, \"Test 2\"\nassert     number_of_substrings(\"abcabcdefg\") == 4, \"Test 3\"\nassert     number_of_substrings(\"abcdefg\") == 1, \"Test 4\"\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     number_of_substrings('') == 0\nassert     number_of_substrings('a') == 1\nassert     number_of_substrings('aa') == 2\nassert     number_of_substrings('abc') == 3\nassert     number_of_substrings('aba') == 2\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     number_of_substrings('1234') == 2\nassert     number_of_substrings('1233345') == 3\nassert     number_of_substrings('abd') == 0\nassert     number_of_substrings('12345') == 1\nassert     number_of_substrings('hello') == 5\n"
    },
    {
        "number": 238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     number_of_substrings(\"abc\") == 3\nassert     number_of_substrings(\"abcd\") == 4\nassert     number_of_substrings(\"aaa\") == 3\nassert     number_of_substrings(\"bbbbbbbbb\") == 1\nassert     number_of_substrings(\"\") == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(5,3) == 8\nassert     get_total_number_of_sequences(10,3) == 16\nassert     get_total_number_of_sequences(11,3) == 28\nassert     get_total_number_of_sequences(10,2) == 7\nassert     get_total_number_of_sequences(5,2) == 3\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(100, 1) == 0\nassert get_total_number_of_sequences(100, 2) == 25\nassert get_total_number_of_sequences(100, 3) == 25\nassert get_total_number_of_sequences(100, 4) == 50\nassert get_total_number_of_sequences(100, 5) == 25\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(10,10) == 252632\nassert     get_total_number_of_sequences(100,2) == 97250\nassert     get_total_number_of_sequences(50,1) == 30\nassert     get_total_number_of_sequences(5,1) == 5\nassert     get_total_number_of_sequences(5,0) == 5\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(10,2) == 7\nassert     get_total_number_of_sequences(100,1) == 1\nassert     get_total_number_of_sequences(10,3) == 7\nassert     get_total_number_of_sequences(10,4) == 7\nassert     get_total_number_of_sequences(10,5) == 7\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(10,3) == 7\nassert     get_total_number_of_sequences(200,5) == 745\nassert     get_total_number_of_sequences(200,4) == 28\nassert     get_total_number_of_sequences(5,5) == 1\nassert     get_total_number_of_sequences(5,4) == 3\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(10,2) == 4\nassert     get_total_number_of_sequences(10,3) == 3\nassert     get_total_number_of_sequences(10,4) == 2\nassert     get_total_number_of_sequences(10,5) == 1\nassert     get_total_number_of_sequences(10,6) == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(10,3) == 37\nassert     get_total_number_of_sequences(15,2) == 254\nassert     get_total_number_of_sequences(100,5) == 113057\n\n\ndef get_total_number_of_partitions(n,p): \n    '''\n    Write a function that takes in positive integers n and p and returns the number of partitions of n into p non-empty sets.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(10,4) == 5\nassert     get_total_number_of_sequences(10,3) == 7\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(2,1) == 1\nassert     get_total_number_of_sequences(3,1) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(4,3) == 9\nassert     get_total_number_of_sequences(5,2) == 3\nassert     get_total_number_of_sequences(8,1) == 3\nassert     get_total_number_of_sequences(8,2) == 8\nassert     get_total_number_of_sequences(10,4) == 20\n"
    },
    {
        "number": 239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(50, 3) == 720\nassert     get_total_number_of_sequences(30, 3) == 60\nassert     get_total_number_of_sequences(30, 4) == 840\nassert     get_total_number_of_sequences(50, 1) == 50\nassert     get_total_number_of_sequences(50, 2) == 210\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     replace_list([1,2,3,4,5], [10,20,30,40,50]) == [1,2,3,4,50]\nassert     replace_list([1,2,3], [10,20,30]) == [1,2,30]\nassert     replace_list([1,2,3], []) == [1,2,3]\nassert     replace_list([1,2,3], [4,5,6,7]) == [1,2,3,4,5,6,7]\n\ndef delete_last_element(list1):\n    '''\n    Write a function that takes in a list and deletes the last element of the list.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     replace_list(['apple','orange','pear','banana','grape','lemon','lime'],\n        ['pineapple','peach','guava','cantaloup','grapefruit']) == ['apple','orange','pear','banana','grape','lemon','pineapple'], \"Test 1 failed\"\nassert     replace_list(['apple','orange','pear','banana','grape','lemon','lime'],\n        ['grape','peach','guava','cantaloup','grapefruit']) == ['apple','orange','pear','banana','grape','lemon','grape'], \"Test 2 failed\"\nassert     replace_list(['apple','orange','pear','banana','grape','lemon','lime'],\n        ['grape','peach','guava','cantaloup','grapefruit']) == ['apple','orange','pear','banana','grape','lemon','grape'], \"Test 3 failed\"\nassert     replace_list(['apple','orange','pear','banana','grape','lemon','lime'],\n        ['grape','peach','guava','cantaloup','grapefruit']) == ['apple','orange','pear','banana','grape','lemon','grape'], \"Test 4 failed\"\nassert     replace_list(['apple','orange','pear','banana','grape','lemon','lime'],\n        ['grape','peach','guava','cantaloup','grapefruit']) == ['apple','orange','pear','banana','grape','lemon','grape'], \"Test 5 failed\"\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3,4], [4,3,2,1]) == [1, 2, 3, 4]\nassert     replace_list([1,2,3,4], []) == [1,2,3,4]\nassert     replace_list([1,2,3], [4,3,2,1]) == [1, 2, 3, 4]\nassert     replace_list([1,2,3,4], []) == [1,2,3,4]\nassert     replace_list([], [4,3,2,1]) == [4,3,2,1]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     replace_list([1,2,3,4,5,6],[2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     replace_list([1,2,3,4,5,6,7],[2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     replace_list([1,2,3,4],[2,3,4]) == [1,2,3,4]\nassert     replace_list([1,2,3,4,5,6],[]) == [1,2,3,4,5,6]\nassert     replace_list([1,2,3,4],[]) == [1,2,3,4]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     replace_list([1,2,3,4,5,6],[7,8,9]) == [1,2,3,7,8,9]\nassert     replace_list([1,2,3,4,5,6],[]) == [1,2,3,4,5,6]\nassert     replace_list([7,8,9],[7,8,9]) == [7,8,9,7,8,9]\nassert     replace_list([],[7,8,9]) == [7,8,9]\nassert     replace_list([7,8,9],[]) == [7,8,9]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     replace_list([1, 2, 3, 4, 5], [6, 7, 8])     == [1, 2, 3, 6, 7, 8], 'incorrect'\nassert     replace_list([1, 2, 3, 4, 5, 6], [7, 8])     == [1, 2, 3, 4, 5, 7, 8], 'incorrect'\nassert     replace_list([1, 2, 3], [4, 5, 6])     == [1, 2, 3, 4, 5, 6], 'incorrect'\nassert     replace_list([], [7, 8])     == [7, 8], 'incorrect'\nprint('all correct')\n\ndef make_list(size):\n    '''\n    Write a function that takes in a size (an integer) and returns a list of size elements, each of which is a random float between -1 and 1.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3],['a','b','c']) == [1,'a',2,'b',3,'c']\nassert     replace_list([1,2,3,4],['a','b','c']) == [1,'a',2,'b',3,'c',4]\nassert     replace_list([1,2,3,4,5],['a','b','c','d','e']) == [1,'a',2,'b',3,'c',4,'d',5,'e']\nassert     replace_list([1,2,3,4,5,6,7,8,9,10],['a','b','c','d','e','f']) == [1,'a',2,'b',3,'c',4,'d',5,'e',6,'f',7,8,9,10]\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     replace_list([1,3,5,7], [2,4,6,8]) == [1,2,3,4,5,6,8], \"wrong answer\"\nassert     replace_list([1,2,3,4,5], [6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10], \"wrong answer\"\nassert     replace_list([1], [2,3]) == [1,2,3], \"wrong answer\"\nassert     replace_list([1,2,3,4], [5,6,7,8]) == [1,2,3,4,5,6,7,8], \"wrong answer\"\nassert     replace_list([1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], \"wrong answer\"\n"
    },
    {
        "number": 240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3],[4,5]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4],[5,6]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4],[]) == [1,2,3,4]\nassert     replace_list([],[5,6]) == [5,6]\nassert     replace_list([1,2,3],[]) == [1,2,3]\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_charac(\"\") == 0, \"should be 0\"\nassert     count_charac(\"a\") == 1, \"should be 1\"\nassert     count_charac(\"ab\") == 2, \"should be 2\"\nassert     count_charac(\"aabb\") == 3, \"should be 3\"\nassert     count_charac(\"aaab\") == 2, \"should be 2\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_charac(\"The quick brown fox jumps over the lazy dog\") == 33, \"FAILED: count_charac\"\nassert     count_charac(\"AAbb\") == 3, \"FAILED: count_charac\"\nassert     count_charac(\"\") == 0, \"FAILED: count_charac\"\nassert     count_charac(\"The quick brown fox jumps over the lazy dog\") == 33, \"FAILED: count_charac\"\nassert     count_charac(\"AAbb\") == 3, \"FAILED: count_charac\"\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_charac('abc') == 3\nassert     count_charac('a') == 1\nassert     count_charac('xyz') == 3\nassert     count_charac('') == 0\nassert     count_charac('a' * 100) == 100\nprint('passed')\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_charac('I am a boy!') == 21\nassert     count_charac('how are you!') == 21\nassert     count_charac('the quick brown fox jumps over the lazy dog') == 95\nassert     count_charac('....') == 0\nassert     count_charac('How are you') == 22\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_charac('abcdef') == 6\nassert     count_charac('test') == 6\nassert     count_charac('hello') == 6\nassert     count_charac('a') == 1\nassert     count_charac('qqq') == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_charac(\"this is a test\") == 26\nassert     count_charac(\"hello\") == 8\nassert     count_charac(\"a good\") == 3\nassert     count_charac(\"a\") == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_charac('Hadoop') == 5\nassert     count_charac('Hi!') == 5\nassert     count_charac('Hi') == 1\nassert     count_charac('Hello') == 7\nassert     count_charac('Hello!') == 7\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_charac('a') == 1, 'count_charac'\nassert     count_charac('aa') == 2, 'count_charac'\nassert     count_charac('aaa') == 3, 'count_charac'\nassert     count_charac('aaaaa') == 5, 'count_charac'\nassert     count_charac('aaaaaa') == 10, 'count_charac'\n"
    },
    {
        "number": 242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_charac('abcde') == 5\nassert     count_charac('ab') == 2\nassert     count_charac('a') == 1\n\nprint('Passed')\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \ndef next_Perfect_Square(N): \n    \"\"\"\n    This is an implementation of a Binary Search algorithm to find the smallest\n    perfect square greater than a given number. The function returns the \n    number of steps taken by the algorithm.\n    \"\"\"\n    # Your code goes here\n    if N == 1:\n        return 1\n\n    # x is the perfect square\n    x = int(N ** 0.5)\n    if (x ** 2) == N:\n        return 1\n\n    # if x is not the perfect square, the next perfect square is found by\n    # using binary search\n    else:\n        # decrement x until the condition is satisfied\n        while x!= int(N ** 0.5):\n            x -= 1\n\n        # since x is not the perfect square, check if x is the smallest integer\n        # greater than the square root of N\n        if (x + 1)**2 == N:\n            return 2\n\n        # since x is the smallest integer greater than the square root, then \n        # we check if x**2 is the next perfect square\n        if (x + 1)**2 > N:\n            return int((x + 1)**2) - N\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_Perfect_Square(16) == 32\nassert     next_Perfect_Square(25) == 64\nassert     next_Perfect_Square(27) == 64\nassert     next_Perfect_Square(28) == 64\nassert     next_Perfect_Square(29) == 64\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(100) == 144\nassert     next_Perfect_Square(24) == 49\nassert     next_Perfect_Square(48) == 96\nassert     next_Perfect_Square(99) == 10000\nassert     next_Perfect_Square(12) == 2500\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(6) == 12\nassert     next_Perfect_Square(7) == 14\nassert     next_Perfect_Square(10) == 22\nassert     next_Perfect_Square(20) == 24\nassert     next_Perfect_Square(22) == 26\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(10) == 16\nassert     next_Perfect_Square(24) == 32\nassert     next_Perfect_Square(13) == 26\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(9) == 25\nassert     next_Perfect_Square(10) == 32\nassert     next_Perfect_Square(99) == 121\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_Perfect_Square(7) == 16\nassert     next_Perfect_Square(13) == 25\nassert     next_Perfect_Square(17) == 25\nassert     next_Perfect_Square(19) == 27\nassert     next_Perfect_Square(21) == 25\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(100) == (141),'Error in next_Perfect_Square(100)'\nassert     next_Perfect_Square(1000) == (1021),'Error in next_Perfect_Square(1000)'\nassert     next_Perfect_Square(15) == (16),'Error in next_Perfect_Square(15)'\nassert     next_Perfect_Square(3) == (4),'Error in next_Perfect_Square(3)'\nassert     next_Perfect_Square(4) == (9),'Error in next_Perfect_Square(4)'\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(12) == 16\nassert     next_Perfect_Square(20) == 24\nassert     next_Perfect_Square(21) == 25\nassert     next_Perfect_Square(22) == 25\nassert     next_Perfect_Square(23) == 26\n"
    },
    {
        "number": 244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(9) == 10\nassert     next_Perfect_Square(16) == 17\nassert     next_Perfect_Square(49) == 64\nassert     next_Perfect_Square(64) == 65\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_sum([0,1,2,3,4,5,6,7,8,9]) == 10\nassert     max_sum([5,6,7,8,9,10,1,2,3]) == 15\nassert     max_sum([9,8,7,6,5,4,3,2,1,0]) == 15\nassert     max_sum([0,0,0]) == 0\nassert     max_sum([0,0,1]) == 1\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 19\nassert     max_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1\nassert     max_sum([-1, 2, -3, 5, -6, 2, -3]) == -1\nassert     max_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1\nassert     max_sum([5, -1, 2, 3, 4, 7, 6, 8, 9]) == 19\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_sum([1,3,8,6,10,12,1,0]) == 10\nassert     max_sum([-1,2,5,9,11]) == 11\nassert     max_sum([-1,2,3,4]) == 4\nassert     max_sum([-1,2,3,4,5]) == 10\nassert     max_sum([1,2,3,4,5,0]) == 10\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_sum([1,3,6,7,9,4,10,5,6,7,8,9]) == 17\nassert     max_sum([5,4,3,2,1]) == 16\nassert     max_sum([2,1,4,7,3,5,6,7,8,9]) == 25\nassert     max_sum([-1,-2]) == -1\nassert     max_sum([-5,-4,-3,-2,-1]) == 0\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_sum([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     max_sum([-1,-2,-3,-4,0]) == [-1,-2,-3,-4,0]\nassert     max_sum([]) == []\nassert     max_sum([1]) == [1]\nassert     max_sum([1,2]) == [1,2]\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_sum([1, 3, 2, 8, 6, 4, 5]) == 15, \"Wrong answer\"\nassert     max_sum([5, 4, 2, 10, 3, 7, 1, 9]) == 15, \"Wrong answer\"\nassert     max_sum([10, 3, 2, 9, 6, 4, 5, 7, 8]) == 22, \"Wrong answer\"\nassert     max_sum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 22, \"Wrong answer\"\n"
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(27) == 5\nassert     babylonian_squareroot(64) == 8\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef babylonian_squareroot_iteration(number):\n    '''\n    Write a function for computing square roots using the babylonian method, with an iteration.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (babylonian_squareroot(1) == 1), \"basic\"\nassert     (babylonian_squareroot(4) == 2), \"basic\"\nassert     (babylonian_squareroot(9) == 3), \"basic\"\nassert     (babylonian_squareroot(16) == 4), \"basic\"\nassert     (babylonian_squareroot(81) == 5), \"basic\"\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(49) == 7\nassert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(49) == 7\nassert     babylonian_squareroot(81) == 9\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ________ == babylonian_squareroot(number)"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(64) == 4.0\nassert babylonian_squareroot(100) == 10.0\nassert babylonian_squareroot(1000) == 10.0\nassert babylonian_squareroot(10000) == 10.0\nassert babylonian_squareroot(1000000) == 10.0\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(25) == 5\nassert babylonian_squareroot(9) == 3\nassert babylonian_squareroot(1) == 0.0\nassert babylonian_squareroot(16) == 4\nassert babylonian_squareroot(19) == 4.99999\n"
    },
    {
        "number": 246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         babylonian_squareroot(8) == 2.0\nassert         babylonian_squareroot(27) == 3.0\nassert         babylonian_squareroot(10) == 2.0\nassert         babylonian_squareroot(13) == 2.0\nassert         babylonian_squareroot(24) == 3.0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     lps('eccbbbbbbbb') == 3\nassert     lps('abdbca') == 3\nassert     lps('abccb') == 2\nassert     lps('babad') == 4\nassert     lps('cbbd') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lps('babad') == 4\nassert     lps('cbbd') == 2\nassert     lps('a') == 1\nassert     lps('ac') == 2\nassert     lps('aa') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lps(\"bbbab\") == 4\nassert     lps(\"cbbd\") == 2\nassert     lps(\"bb\") == 1\nassert     lps(\"a\") == 1\nassert     lps(\"\") == 0\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     lps('bb') == 1\nassert     lps('cbbd') == 2\nassert     lps('bbd') == 2\nassert     lps('cbbdb') == 3\nassert     lps('bbbd') == 2\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lps('bbbab') == 4\nassert     lps('abdbca') == 3\nassert     lps('cddpd') == 3\nassert     lps('abb') == 2\nassert     lps('bb') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lps(\"bbbab\") == 3\nassert     lps(\"cbbd\") == 1\nassert     lps(\"\") == 0\nassert     lps(\"abcdcb\") == 3\nassert     lps(\"bb\") == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lps('aa') == 1\nassert     lps('bbb') == 3\nassert     lps('abcdabcdabcd') == 5\nassert     lps('abcddcba') == 5\nassert     lps('abc') == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lps('bb') == 1\nassert     lps('cbbd') == 2\nassert     lps('a') == 1\nassert     lps('ab') == 2\nassert     lps('abcbdbdb') == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lps('abbabbb') == 2\nassert     lps('aaaaa') == 6\nassert     lps('aa') == 2\nassert     lps('a') == 1\nassert     lps('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lps('bbbab') == 4\nassert     lps('bbbbb') == 1\nassert     lps('abcbbbb') == 3\nassert     lps('bbbbbbbbbba') == 5\nassert     lps('bbbbbbbbbbaabbbbbbbba') == 11\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     harmonic_sum(5) == 1 + 1/2 + 1/3 + 1/4 + 1/5\nassert     harmonic_sum(3) == 1/2 + 1/3\nassert     harmonic_sum(2) == 1/2\nassert     harmonic_sum(1) == 1\nassert     harmonic_sum(0) == 0\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef remove_adjacent(l):\n    '''\n    Write a function that takes in a list of integers and returns a new list of integers without adjacent\n    elements that are the same.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 2.25\nassert     harmonic_sum(5) == 2.75\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 3.5\nassert     harmonic_sum(5) == 4.5\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(10) == 12.5\nassert     harmonic_sum(100) == 5050\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     harmonic_sum(1) == 1.0\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 2.25\nassert     harmonic_sum(5) == 2.83333333333333335\n"
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.25\nassert     harmonic_sum(4) == 3.16\nassert     harmonic_sum(5) == 3.68\nassert     harmonic_sum(6) == 4.16\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersection_array(list(range(1,5)),list(range(2,6))) == [2,3,4]\nassert     intersection_array(list(range(1,5)),list(range(2,6))) == [2,3,4]\nassert     intersection_array(list(range(1,10)),list(range(2,6))) == [2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersection_array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == [2, 3, 4, 5]\nassert     intersection_array([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert     intersection_array([], [1, 2, 3, 4, 5]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersection_array([1,2,3,4,5],[-2,-1,1,2,3,4,5])==[-2,-1,1,2,3,4,5]\nassert     intersection_array([1,2,3,4,5],[-2,-1,1,2,3,4])==[-2,-1,1,2,3,4]\nassert     intersection_array([1,2,3,4,5],[])==[1,2,3,4,5]\nassert     intersection_array([1,2,3,4,5],[-2,-1,1,2,3,4])==[1,2,3,4,5]\nassert     intersection_array([1,2,3,4,5],[1,2,3,4,5])==[1,2,3,4,5]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef get_median(A, k):\n    '''\n    The median of an array is the value that is in the middle of the array.\n    Given an array of n values, what is the median?\n    '''\n    if k == 1:\n        return A[0]\n    n = len(A)\n    return get_median(A[0:int(k/2)], int(k/2)) if n % 2 == 1 else get_median(A[int(k/2)-1:int(k/2)+1], int(k/2))\n\ndef random_element_array(A, p):\n    '''\n    Randomly remove elements from the array A so that the probability of each\n    element in the array being removed is p.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,2,1],[2,2]) == [2,2]\nassert     intersection_array([1,2,3],[]) == []\nassert     intersection_array([1,2,3],[]) == []\nassert     intersection_array([1,2],[]) == []\nassert     intersection_array([1,2,3,4],[]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection_array(array_nums1,array_nums2) == [1,2,3,4,5,6,7,8,9]\nassert     intersection_array(array_nums2,array_nums1) == [1,2,3,4,5,6,7,8,9]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersection_array([1,2,2,1],[2,2]) == [2]\nassert     intersection_array([4,9,5],[9,4,9,8,4]) == [9,4]\nassert     intersection_array([1,2,3,4,5,6],[7,8,9,4,5,6]) == []\nassert     intersection_array([1,2,3,4],[-1,0]) == [1,2,3,4]\nassert     intersection_array([],[1,2,3,4]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection_array([1,2,3,4,5],[1,2,5,7,9]) == [1,2,5]\nassert     intersection_array([1,2,3,4,5,6],[1,2,5,7,9,10]) == [1,2,5]\nassert     intersection_array([1,2,3,4,5,6,7],[1,2,5,7,9,10]) == [1,2,5]\nassert     intersection_array([1,2,3,4,5,6],[]) == []\nassert     intersection_array([], [1,2,3,4,5,6]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersection_array(['a','b'],['a','b']) == ['a']\nassert     intersection_array([1,2,2,3], [2,3,3,4]) == [2,3]\nassert     intersection_array([1,2,3,4], [2,3,3,4]) == [2,3]\nassert     intersection_array(['a','a','b'],['a','a','a']) == ['a','a']\nassert     intersection_array(['a','a','a'],['a','a','b']) == ['a']\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_X((1, 2, 3, 1, 3), 1) == 2\nassert     count_X((1, 2, 3, 1, 3), 2) == 1\nassert     count_X((1, 2, 3, 1, 3), 3) == 2\nassert     count_X((1, 2, 3, 1, 3), 4) == 0\nassert     count_X((1, 2, 3, 1, 3), 1) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n(count_X((1, 1, 2, 2, 3, 4, 4, 4), 4) == 2)\n(count_X((1, 1, 2, 2, 3, 4, 4, 4), 1) == 4)\nassert\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_X((1,2,3,1,2,3), 1) == 2\nassert     count_X((1,2,3,1,2,3), 2) == 2\nassert     count_X((1,2,3,1,2,3), 3) == 2\nassert     count_X((1,2,3,1,2,3), 4) == 0\nassert     count_X((1,2,3,1,2,3), 5) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_X(('a', 'a', 'b', 'a', 'b'), 'a') == 3\nassert     count_X(('a', 'a', 'b', 'a', 'b'), 'b') == 2\nassert     count_X(('a', 'a', 'b', 'a', 'b'), 'c') == 0\nassert     count_X((), 'a') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_X((1,2,3,2,1,1,1), 2) == 3\nassert     count_X((1,2,3,2,1,1,1), 1) == 6\nassert     count_X((2,2,2,2,2,2,2,2,2,2,2,2), 2) == 10\nassert     count_X((1,2,3,2,1,1,1), 1) == 3\nassert     count_X((1,2,3,2,1,1,1), 2) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_X(('a', 'a', 'a', 'b'), 'a') == 3\nassert     count_X(('a', 'a', 'b', 'b'), 'a') == 2\nassert     count_X(('a', 'a', 'b', 'b', 'b'), 'a') == 1\nassert     count_X(('a', 'b', 'b', 'c', 'c'), 'c') == 2"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_X((1,2,2,2,5,5,5,5,5), 5) == 3\nassert     count_X((1,2,2,2,5,5,5,5,5), 1) == 1\nassert     count_X((1,2,2,2,5,5,5,5,5), 2) == 2\nassert     count_X((1,2,2,2,5,5,5,5,5), 6) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_X((1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5), 5) == 10\nassert     count_X((1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5), 6) == 0\nassert     count_X((1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5), 5) == 10\nassert     count_X((1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5), 1) == 5\nassert     count_X((1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5), 2) == 5\n"
    },
    {
        "number": 250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_X((1,2,3,1,1,1,1,1), 1) == 3\nassert     count_X((1,2,3,1,1,1,1,1), 2) == 2\nassert     count_X((1,2,3,1,1,1,1,1), 3) == 1\nassert     count_X((1,2,3,1,1,1,1,1), 4) == 0\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     insert_element([1,2,3],0) == [0,1,2,3]\nassert     insert_element([1,2,3],1) == [1,0,2,3]\nassert     insert_element([1,2,3],2) == [1,2,0,3]\nassert     insert_element([1,2,3],3) == [1,2,3,0]\nassert     insert_element([1,2,3],4) == [1,2,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         insert_element([2, 1, 3, 4], 2) == [2, 1, 2, 3, 4], 'error'\nassert         insert_element([2, 1, 3, 4], 5) == [2, 1, 5, 3, 4], 'error'\nassert         insert_element([2, 1, 3, 4], 3) == [2, 1, 3, 3, 4], 'error'\nassert         insert_element([2, 1, 3, 4], 0) == [0, 1, 2, 3, 4], 'error'\nassert         insert_element([2, 1, 3, 4], 6) == [2, 1, 6, 3, 4], 'error'\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3], 4) == [1,4,2,3], \"insert 4 before each element\"\nassert     insert_element([\"cat\",\"dog\"], \"mouse\") == [\"cat\",\"mouse\",\"dog\"], \"insert mouse after cat and dog\"\nassert     insert_element([], \"dog\") == [\"dog\"], \"insert a dog at the end of an empty list\"\nassert     insert_element([1,2,3,4,5,6,7], 0) == [0,1,2,3,4,5,6,7], \"insert a zero at the beginning of the list\"\n\ndef insert_element_i(list,i,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     insert_element(['a','b','c'], 'd') == ['a','d','b','d','c']\nassert     insert_element(['a','b','c'], 'a') == ['a','a','b','b','c']\nassert     insert_element(['a','b','c'], '') == ['','','','a','b','c']\nassert     insert_element([], 'a') == ['a']\nassert     insert_element([], '') == ['']\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     insert_element([1,2,3,4],5)    == [1,5,2,3,4]\nassert     insert_element([1,2,3,4],0)    == [0,1,2,3,4]\nassert     insert_element([1,2,3,4],5)    == [1,5,2,3,4]\nassert     insert_element([1,2,3,4],-1)    == [1,-1,2,3,4]\nassert     insert_element([1,2,3,4],-10)    == [1,-10,2,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     insert_element([1,2,3,4,5],9) == [9,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],6) == [6,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],1) == [1,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],5) == [5,1,2,3,4,5]\n\ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes the first occurrence of the element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     insert_element([1,2,3,4],5) == [1,5,2,5,3,5,4], \"list is modified\"\nassert     insert_element([1,2,3],4) == [1,4,2,4,3], \"list is modified\"\nassert     insert_element([1],2) == [1,2], \"list is modified\"\nassert     insert_element([],5) == [5], \"list is modified\"\nassert     insert_element([2,1,3,4],4) == [2,4,1,4,2,4,3], \"list is modified\"\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef insert_value(list,value):\n    '''\n    Write a function that takes in a list and a value and inserts the value before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     insert_element([1,2,3,4], 5) == [5,1,2,3,4]\nassert     insert_element([5,1,2,3,4], 5) == [5,1,2,3,4]\nassert     insert_element([], 5) == [5]\nassert     insert_element([1,2,3], 4) == [4,1,2,3]\nassert     insert_element([1,2,3], 1) == [1,2,3,1]\n"
    },
    {
        "number": 251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1, '1', 2] == insert_element([1, 2], '1')\nassert     ['I', 'am', 'a','string'] == insert_element(['I', 'am', 'a','string'],'string')\nassert     ['I', 'am', 'a','string','string'] == insert_element(['I', 'am', 'a','string'],'string')\nassert     [1, 'a', 'b', 'c', '1', 'b', 'c'] == insert_element([1, 'a', 'b', 'c'], '1')\nassert     ['a', 'b', 'c', 'd', 'e', 'f'] == insert_element(['a', 'b', 'c', 'd', 'e', 'f'], 'e')\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     convert(1.5 + 1.5j) == (1.5, cmath.pi/2)\nassert     convert(1.5 - 1.5j) == (1.5, -cmath.pi/2)\nassert     convert(-1.5 + 1.5j) == (1.5, -cmath.pi/2)\nassert     convert(-1.5 - 1.5j) == (1.5, cmath.pi/2)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     convert(complex(1, 2)) == (1.4142135623730951, 2.8284271247461903)\nassert     convert(complex(-1, -2)) == (1.4142135623730951, 3.141592653589793)\nassert     convert(complex(0, 2)) == (0.0, 2.8284271247461903)\nassert     convert(complex(-1, 0)) == (1.4142135623730951, 0.0)\nassert     convert(complex(1, 0)) == (1.4142135623730951, 0.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (convert((1,2,3,4)) == ((1+2j), (1-2j), (3-4j), (3+4j)))\nassert     (convert((2,-3,4,1)) == ((1+2j), (-3-4j), (4-1j), (4+1j)))\nassert     (convert((4,2,3,-1)) == ((1+4j), (2+3j), (4-1j), (4-1j)))\nassert     (convert((1,1,1,1)) == ((1+1j), (1+1j), (1+1j), (1+1j)))\n\ndef gen_is_magic(n):\n    '''\n    Write a python function to generate a list of n random integers in the range [-100, 100].\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     convert([3 + 4j, 5 - 6j, -7, 8, -9]) ==     [(3.0, 4.0), (5.0, -6.0), (-7.0, 8.0), (-9.0, 0.0)]\nassert convert([1 + 2j, 3 - 4j, 5 + 6j, 7 - 8j, 9 + 10j]) ==     [(1.0, 2.0), (3.0, -4.0), (5.0, 6.0), (7.0, -8.0), (9.0, 10.0)]\nassert convert([complex(1,2), complex(-3,4), complex(-5,-6), complex(-7,-8), complex(-9,-10)]) ==     [(1.0, 2.0), (3.0, -4.0), (-5.0, 6.0), (-7.0, -8.0), (-9.0, -10.0)]\nassert convert([complex(1,-2), complex(-3,4), complex(-5,-6), complex(-7,8), complex(-9,10)]) ==     [(-1.0, 2.0), (3.0, -4.0), (-5.0, 6.0), (7.0, 8.0), (-9.0, 10.0)]\nassert convert([complex(1,2), complex(-3,4), complex(-5,6), complex(-7,8), complex(-9,10)]) ==     [(1.0, 2.0), (-3.0, 4.0), (-5.0, 6.0), (-7.0, 8.0), (-9.0, 10.0)]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     convert(0j) == (0.0, 0.0)\nassert     convert(1j) == (1.0, 1.0)\nassert     convert(1+1j) == (1.0, 1.0)\nassert     convert(1+0j) == (1.0, 0.0)\nassert     convert(-1+0j) == (1.0, 0.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     convert(1) == [1, 0]\nassert     convert(2) == [2, 0]\nassert     convert(3) == [3, 0]\nassert     convert(5) == [5, 0]\nassert     convert(1.5) == [1.5, 0]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     convert(4+5j) == cmath.polar(4+5j)\nassert     convert(0+3j) == cmath.polar(0+3j)\nassert     convert(2+1j) == cmath.polar(2+1j)\nassert     convert(3+2j) == cmath.polar(3+2j)\nassert     convert(3+4j) == cmath.polar(3+4j)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     convert(complex(2,3)) == (3.605551275463989, 0.9553299333106982)\nassert     convert(complex(2,4)) == (5.0, 0.9553299333106982)\nassert     convert(complex(2,-1)) == (1.0, 3.141592653589793)\nassert     convert(complex(2,0)) == (2.0, 0.0)\nassert     convert(complex(1,2)) == (4.0, 1.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     convert([-1, 3]) == [(\"(1+3i)\", 1), (\"(-1+3i)\", 1)]\nassert     convert([3+4j, 5+6j]) == [(\"(3+4i)\", 1), (\"(5+6i)\", 1)]\nassert     convert([0+4j, 1+2j]) == [(\"(1+2i)\", 1), (\"(0+4i)\", 1)]\nassert     convert([0+4j, -1+2j]) == [(\"(1-2i)\", 1), (\"(0-4i)\", 1)]\n"
    },
    {
        "number": 252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     convert(complex(0, 2)) == (2, 0)\nassert     convert(complex(1, 2)) == (1, 1.5707963267948966)\nassert     convert(complex(2, 3)) == (2.6112781745609985, 3.141592653589793)\nassert     convert(complex(1, -1)) == (1.5707963267948966, 3.141592653589793)\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_integer([1, 2, 3, 4, 5]) == 5\nassert     count_integer([1, 1, 2, 2, 3, 3]) == 6\nassert     count_integer([1, 2, 3]) == 3\nassert     count_integer([1, 2, 3, 4, 5, 6]) == 6\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_integer([1,2,3]) == 3\nassert     count_integer([1,\"2\",3]) == 3\nassert     count_integer([\"1\",\"2\",\"3\"]) == 3\nassert     count_integer([1,\"2\",3,\"4\"]) == 4\nassert     count_integer([1,2,\"3\",4]) == 4\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_integer([1, 2, 3, 4, 5]) == 5\nassert     count_integer([]) == 0\nassert     count_integer(['1', '2', '3', '4', '5']) == 5\nassert     count_integer([1, 2, 3, '4', '5']) == 5\nassert     count_integer([1, 2, 3, 4, 5]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_integer([1,2,3,4,5,6])    ==    6\nassert     count_integer([1,'a',3,'b',5,'b',7])    ==    6\nassert     count_integer([1,2,'a',3,'b',5,'b',7]) ==    7\nassert     count_integer(['a','b','c']) ==    0\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_integer([1,2,3,4,5,6])    == 6\nassert     count_integer([1,2,3,4,5,6.5])    == 6\nassert     count_integer([2,3,'1',4,5,6])    == 4\nassert     count_integer([])    == 0\nassert     count_integer([1,2,'abc',5.5])    == 1\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_integer([1,2,3]) == 3\nassert     count_integer([1,2,3,4]) == 4\nassert     count_integer([1,2,'3']) == 1\nassert     count_integer([1,2,'3',4]) == 4\nassert     count_integer([1,2,3,'4']) == 1\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_integer(['a', 1, 2, 3, 4, 5, 5, 'a', 'b']) == 2\nassert     count_integer([1, 2, 3, 'a', 'b', 2.1]) == 2\nassert     count_integer([]) == 0\nassert     count_integer(['a', 'b']) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \"a\", \"b\", \"c\"]) == 10\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \"a\", \"b\", \"c\", True, False, None, \"d\", \"e\", \"f\", \"g\"]) == 13\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_integer([]) == 0, 'fails'\nassert     count_integer([2,3,4,5]) == 1, 'fails'\nassert     count_integer([2,3,4,'5']) == 1, 'fails'\nassert     count_integer([2,3,4,'5',True]) == 2, 'fails'\nassert     count_integer([2,3,4,'5',True,None]) == 3, 'fails'\n"
    },
    {
        "number": 253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         count_integer([1, 2, 3, 4, 5, 6, 7, 8]) == 6\nassert         count_integer([1, 2, 'a', 4, 5, 6, 7, 8]) == 8\nassert         count_integer([1, 2, 'a', 4, 5, 6, 'b', 8]) == 9\nassert         count_integer(['1', '2', 'a', 4, 5, 6, 7, 8]) == 8\nassert         count_integer(['1', '2', 'a', 4, 5, 6, 'b', 8]) == 9\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [(1, 1, 1), (1, 2, 1), (1, 3, 1), (2, 1, 1), (2, 2, 1), (2, 3, 1), (3, 1, 1), (3, 2, 1), (3, 3, 1)] == list(combinations_with_replacement([1, 2, 3], 3))\nassert     [(1, 1, 2), (1, 1, 3), (1, 2, 2), (1, 2, 3), (1, 3, 2), (1, 3, 3), (2, 1, 2), (2, 1, 3), (2, 2, 2), (2, 2, 3), (2, 3, 2), (2, 3, 3), (3, 1, 2), (3, 1, 3), (3, 2, 2), (3, 2, 3), (3, 3, 2), (3, 3, 3)] == list(combinations_with_replacement([1, 2, 3], 4))\nassert     [(1, 1, 2, 1), (1, 1, 2, 2), (1, 1, 2, 3), (1, 1, 3, 2), (1, 1, 3, 3), (1, 2, 2, 1), (1, 2, 2, 2), (1, 2, 2, 3), (1, 2, 3, 2), (1, 2, 3, 3), (1, 3, 2, 1), (1, 3, 2, 2), (1, 3, 2, 3), (1, 3, 3, 2), (1, 3, 3, 3), (2, 1, 2, 1), (2, 1, 2, 2), (2, 1, 2, 3), (2, 1, 3, 2), (2, 1, 3, 3), (2, 2, 2, 1), (2, 2, 2, 2), (2, 2, 2, 3), (2, 2, 3, 2), (2, 2, 3, 3), (2, 3, 2, 1), (2, 3, 2, 2), (2, 3, 2, 3), (2, 3, 3, 2), (2, 3, 3, 3), (3, 1, 2, 1), (3, 1, 2, 2), (3, 1, 2, 3), (3, 1, 3, 2), (3, 1, 3, 3), (3, 2, 2, 1), (3, 2, 2, 2), (3, 2, 2, 3), (3, 2, 3, 2), (3, 2, 3, 3), (3, 3, 2, 1), (3, 3, 2, 2), (3, 3, 2, 3), (3, 3, 3, 2), (3, 3, 3, 3)] == list(combinations_with_replacement([1, 2, 3], 4))\n\ndef combinations_colors2(l, n):\n    '''\n    Check the correctness of combinations_colors2\n    '''\n    for c in combinations_with_replacement(l, n):\n        for x in combinations_with_replacement(c, n-1):\n            if len(set(x)) == n-1 and len(set(c)) == n-1:\n                return True\n    return False\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [('red','red'), ('red', 'blue'), ('blue','red'), ('blue', 'blue')] == \\\n            combinations_colors(['red', 'blue'], 2)\nassert     [('red','red'), ('red', 'blue'), ('blue','red'), ('blue', 'blue')] == \\\n            combinations_colors(['red', 'blue','red'], 2)\nassert     [('red','red'), ('red', 'blue'), ('blue','red'), ('blue', 'blue')] == \\\n            combinations_colors(['red', 'blue','red', 'blue'], 2)\nassert     [('red','red'), ('red', 'blue'), ('blue','red'), ('blue', 'blue')] == \\\n            combinations_colors(['red', 'blue','red', 'blue','red', 'blue'], 2)\nassert     [('red','red'), ('red', 'blue'), ('blue','red'), ('blue', 'blue')] == \\\n            combinations_colors(['red', 'blue','red', 'blue'], 2)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list(combinations_with_replacement('ABC', 2))\n                == [['A', 'A'], ['A', 'B'], ['A', 'C'], ['B', 'B'], ['B', 'C'], ['C', 'C']]\nassert     list(combinations_with_replacement('ABC', 3))\n                == [['A', 'A', 'A'], ['A', 'B', 'B'], ['A', 'B', 'C'], ['A', 'C', 'C'], ['B', 'B', 'B'], ['B', 'B', 'C'], ['B', 'C', 'C'], ['C', 'C', 'C']]\nassert     list(combinations_with_replacement('ABC', 4))\n                == [['A', 'A', 'A', 'A'], ['A', 'A', 'B', 'B'], ['A', 'A', 'B', 'C'], ['A', 'A', 'C', 'C'], ['A', 'B', 'B', 'B'], ['A', 'B', 'B', 'C'], ['A', 'B', 'C', 'C'], ['A', 'C', 'C', 'C'], ['B', 'B', 'B', 'B'], ['B', 'B', 'B', 'C'], ['B', 'B', 'C', 'C'], ['B', 'C', 'C', 'C'], ['C', 'C', 'C', 'C']]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sorted(combinations_colors([1, 2, 3], 1))     ==     [(1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)])\nassert     (sorted(combinations_colors([1, 2, 3], 2))     ==     [(1, 2), (1, 3), (2, 3), (1, 2, 3)])\nassert     (sorted(combinations_colors([1, 2, 3], 3))     ==     [(1, 2, 3)])\nassert     (sorted(combinations_colors([1, 2, 3], 4))     ==     [])\nassert     (sorted(combinations_colors([1, 2, 3, 4, 5], 1))     ==     [(1,), (2,), (3,), (4,), (5,), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)])\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     list(combinations_colors([1, 2, 3], 1)) == [(1,), (2,), (3,), (1,2), (1,3), (2,3), (1,2,3)]\nassert     list(combinations_colors([1, 2, 3], 2)) == [(1,2), (1,3), (2,3)]\nassert     list(combinations_colors([1, 2, 3], 3)) == [(1,2,3)]\nassert     list(combinations_colors([1, 2, 3], 4)) == []\nassert     list(combinations_colors([], 3)) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     combinations_colors([1, 2, 3], 1) == [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\nassert     combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3), (1, 2, 3)]\nassert     combinations_colors([1, 2, 3], 3) == [(1, 2, 3)]\nassert     combinations_colors([1, 2, 3, 4], 1) == [(), (1,), (2,), (3,), (4,), (1, 4), (1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4), (1, 2, 3, 4)]\nassert     combinations_colors([1, 2, 3, 4], 2) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 2, 4), (1, 3, 4), (2, 3, 4), (1, 2, 3, 4)]\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)] == combinations_colors([1, 2, 3], 2)\nassert     [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)] == combinations_colors([1, 2, 3], 3)\nassert     [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)] == combinations_colors([1, 2, 3], 4)\nassert     [(1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3), (1, 1, 2, 1), (1, 1, 2, 2), (1, 1, 2, 3), (1, 1, 3, 1), (1, 1, 3, 2), (1, 1, 3, 3), (1, 2, 1, 1), (1, 2, 1, 2), (1, 2, 1, 3), (1, 2, 2, 1), (1, 2, 2, 2), (1, 2, 2, 3), (1, 2, 3, 1), (1, 2, 3, 2), (1, 2, 3, 3), (1, 3, 1, 1), (1, 3, 1, 2), (1, 3, 1, 3), (1, 3, 2, 1), (1, 3, 2, 2), (1, 3, 2, 3), (1, 3, 3, 1), (1, 3, 3, 2), (1, 3, 3, 3), (2, 1, 1, 1), (2, 1, 1, 2), (2, 1, 1, 3), (2, 1, 2, 1), (2, 1, 2, 2), (2, 1, 2, 3), (2, 1, 3, 1), (2, 1, 3, 2), (2, 1, 3, 3), (2, 2, 1, 1), (2, 2, 1, 2), (2, 2, 1, 3), (2, 2, 2, 1), (2, 2, 2, 2), (2, 2, 2, 3), (2, 2, 3, 1), (2, 2, 3, 2), (2, 2, 3, 3), (2, 3, 1, 1), (2, 3, 1, 2), (2, 3, 1, 3), (2, 3, 2, 1), (2, 3, 2, 2), (2, 3, 2, 3), (2, 3, 3, 1), (2, 3, 3, 2), (2, 3, 3, 3), (3, 1, 1, 1), (3, 1, 1, 2), (3, 1, 1, 3), (3, 1, 2, 1), (3, 1, 2, 2), (3, 1, 2, 3), (3, 1, 3, 1), (3, 1, 3, 2), (3, 1, 3, 3), (3, 2, 1, 1), (3, 2, 1, 2), (3, 2, 1, 3), (3, 2, 2, 1), (3, 2, 2, 2), (3, 2, 2, 3), (3, 2, 3, 1), (3, 2, 3, 2), (3, 2, 3, 3), (3, 3, 1, 1), (3, 3, 1, 2), (3, 3, 1, 3), (3, 3, 2, 1), (3, 3, 2, 2), (3, 3, 2, 3), (3, 3, 3, 1), (3, 3, 3, 2), (3, 3, 3, 3)] == combinations_colors([1, 2, 3], 4)\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [(1,2,3), (1,2,4), (1,3,4), (2,3,4)] == combinations_colors([1,2,3,4], 4)\nassert     [(1,2,3), (1,2,4), (1,3,4), (2,3,4)] == combinations_colors([1,2,3,4], 3)\nassert     [(1,2,3), (2,3,4), (1,3,4)] == combinations_colors([1,2,3,4], 2)\n\ndef all_colors(l):\n    '''\n    Write a function that takes in a list and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [x for x in combinations_colors(['R', 'B', 'G', 'Y', 'W'], 2)] == [('R', 'B'), ('R', 'G'), ('R', 'Y'), ('R', 'W'), ('B', 'G'), ('B', 'Y'), ('B', 'W'), ('G', 'Y'), ('G', 'W'), ('Y', 'W')]\nassert     [x for x in combinations_colors(['G', 'B', 'Y', 'R', 'W', 'M'], 2)] == [('G', 'B'), ('G', 'Y'), ('G', 'W'), ('G', 'M'), ('B', 'Y'), ('B', 'W'), ('B', 'M'), ('Y', 'W'), ('Y', 'M'), ('R', 'W'), ('R', 'M'), ('W', 'M')]\nassert     [x for x in combinations_colors(['B', 'R', 'Y', 'G', 'W', 'M'], 3)] == [('B', 'R', 'Y'), ('B', 'R', 'G'), ('B', 'R', 'W'), ('B', 'R', 'M'), ('B', 'Y', 'G'), ('B', 'Y', 'W'), ('B', 'Y', 'M'), ('B', 'G', 'W'), ('B', 'G', 'M'), ('B', 'W', 'M'), ('Y', 'G', 'W'), ('Y', 'G', 'M'), ('Y', 'W', 'M'), ('Y', 'W', 'M'), ('G', 'W', 'M'), ('G', 'W', 'M'), ('G', 'M', 'W'), ('G', 'M', 'M')]\n\ndef permutations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all permutations (with repetition) of the elements of the list and returns a list with a tuple for each permutation.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(15) == 7\nassert     count_Primes_nums(21) == 7\nassert     count_Primes_nums(25) == 8\nassert     count_Primes_nums(100) == 14\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(5) == 3\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(5) == 2\nassert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(100) == 25\nassert     count_Primes_nums(1000000) == 648\nassert     count_Primes_nums(100001) == 1025\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(2)     == 0, \"Fail: count_Primes_nums(2)\"\nassert     count_Primes_nums(3)     == 1, \"Fail: count_Primes_nums(3)\"\nassert     count_Primes_nums(7)     == 2, \"Fail: count_Primes_nums(7)\"\nassert     count_Primes_nums(4)     == 0, \"Fail: count_Primes_nums(4)\"\nassert     count_Primes_nums(5)     == 1, \"Fail: count_Primes_nums(5)\"\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(5) == 3\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(4) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \ndef test_count_Primes_nums():\n    assert count_Primes_nums(100) == 13\n    assert count_Primes_nums(0) == 0\n    assert count_Primes_nums(1) == 0\n    assert count_Primes_nums(2) == 1\n    "
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(10) == 4\nassert count_Primes_nums(11) == 5\nassert count_Primes_nums(19) == 9\nassert count_Primes_nums(20) == 13\nassert count_Primes_nums(23) == 15\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 0\nassert     count_Primes_nums(3) == 0\nassert     count_Primes_nums(4) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(n=8) == 3\nassert     count_Primes_nums(n=0) == 0\nassert     count_Primes_nums(n=1) == 0\nassert     count_Primes_nums(n=2) == 1\nassert     count_Primes_nums(n=3) == 2\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     swap_numbers(10,20) == (20, 10)\nassert     swap_numbers(2,4) == (4, 2)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     swap_numbers(4,5)     == (5,4),    'incorrect result'\nassert     swap_numbers(10,5)     == (5,10),    'incorrect result'\nassert     swap_numbers(4,5)     == (5,4),    'incorrect result'\nassert     swap_numbers(10,5)     == (5,10),    'incorrect result'\nassert     swap_numbers(4,5)     == (5,4),    'incorrect result'\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (swap_numbers(1, 2) == (2, 1))\nassert     (swap_numbers(100, 200) == (200, 100))\nassert     (swap_numbers(1000, 2000) == (2000, 1000))\nassert     (swap_numbers(1000, 2000) == (2000, 1000))\nassert     (swap_numbers(1, 2) == (2, 1))\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     swap_numbers(7,5) == (5,7)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(3,4) == (4,3)\nassert     swap_numbers(7,5) == (5,7)\nassert     swap_numbers(7,5) == (5,7)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     swap_numbers(2, 1) == (1, 2)\nassert     swap_numbers(5, 5) == (5, 5)\nassert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(5, 1) == (1, 5)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         (swap_numbers(1,2)     ==     (2,1))\nassert         (swap_numbers(2,3)     ==     (3,2))\nassert         (swap_numbers(4,3)     ==     (3,4))\nassert         (swap_numbers(5,1)     ==     (1,5))\nassert         (swap_numbers(1,1)     ==     (1,1))\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (4,8) == swap_numbers(8,4)\nassert     (12,6) == swap_numbers(6,12)\nassert     (9,6) == swap_numbers(6,9)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(3,4) == (4,3)\nassert     swap_numbers(7,7) == (7,7)\nassert     swap_numbers(8,8) == (8,8)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     swap_numbers(10,20) == (20,10)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(0,10) == (10,0)\nassert     swap_numbers(0,0) == (0,0)\nassert     swap_numbers(0,1) == (1,0)\n"
    },
    {
        "number": 257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     swap_numbers(0,1) == (1,0)\nassert     swap_numbers(1,0) == (0,1)\nassert     swap_numbers(-1,-2) == (2,-1)\nassert     swap_numbers(0,0) == (0,0)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximize_elements(('a', 'b'), ('a', 'b')) == ('a', 'b')\nassert     maximize_elements(('a', 'a'), ('a', 'a')) == ('a', 'a')\nassert     maximize_elements(('a', 'b'), ('a', 'a')) == ('a', 'a')\nassert     maximize_elements(('a', 'b'), ('a', 'b')) == ('a', 'b')\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximize_elements(test_tup1, test_tup2) == (9, 0, 1, 8, 5, 3)\nassert     maximize_elements((0, 1), (9, 2, 3, 4, 5, 6)) == (9, 2, 3, 4, 5, 6)"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         maximize_elements((1,2,3,4,5,6,7,8), (5,6,7,8,9,10,11,12)) == (5, 6, 7, 8, 9, 10, 11, 12)\nassert         maximize_elements((1,2,3,4,5), (6,7,8,9,10)) == (6, 7, 8, 9, 10)\nassert         maximize_elements((1,2,3,4,5,6,7,8), (5,6,7,8,9,10)) == (5, 6, 7, 8, 9, 10)\nassert         maximize_elements((1,2,3,4,5,6,7,8), (5,6,7,8,9,10)) == (5, 6, 7, 8, 9, 10)\nassert         maximize_elements((1,2,3,4,5,6,7,8), (5,6,7,8,9,10)) == (5, 6, 7, 8, 9, 10)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximize_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('b', 'c', 'd')\nassert     maximize_elements(('a', 'b'), ('d', 'e', 'f')) == ('b', 'd', 'e')\nassert     maximize_elements(('a', 'b', 'c'), ('d', 'e')) == ('b', 'c', 'd')\nassert     maximize_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('b', 'c', 'd')\nassert     maximize_elements(('a', 'b'), ('a', 'b')) == ('b', 'a')\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         maximize_elements(('A',10),('B',5)) == ('B',5)\nassert         maximize_elements(('A',5),('A',10)) == ('A',10)\nassert         maximize_elements(('A',5),('A',5)) == ('A',10)\nassert         maximize_elements(('A',10),('A',5)) == ('A',10)\nassert         maximize_elements(('A',5),('A',10)) == ('A',10)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     maximize_elements(('a', 'b'), ('c', 'd')) ==         'b'\nassert     maximize_elements(('x', 'y'), ('z', 'a')) ==         'z'\nassert     maximize_elements(('a', 'c'), ('b', 'd')) ==         'c'\nassert     maximize_elements(('x', 'y'), ('x', 'y')) ==         'x'\nassert     maximize_elements(('x', 'x'), ('y', 'y')) ==         'x'\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     maximize_elements(\n                    (0, 2, 4, 6, 8, 10, 12, 14, 16, 18),\n                    (7, 1, 9, 3, 11, 5, 2, 14, 4, 16)\n                    ) == (7, 9, 11, 14, 16, 18)\nassert     maximize_elements(\n                    (1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21),\n                    (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24)\n                    ) == (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24)\nassert     maximize_elements(\n                    (8, 4, 6, 2, 10, 12, 7, 1, 9, 5, 11, 3),\n                    (9, 5, 7, 3, 11, 1, 2, 4, 6, 12, 10, 8)\n                    ) == (9, 5, 7, 3, 11, 1, 2, 4, 6, 12, 10, 8)\nassert     maximize_elements(\n                    (4, 6, 2, 10, 12, 7, 1, 9, 5, 11, 3),\n                    (9, 5, 7, 3, 11, 1, 2, 4, 6, 12, 10, 8)\n                    ) == (9, 5, 7, 3, 11, 1, 2, 4, 6, 12, 10, 8)\nassert     maximize_elements(\n                    (1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21),\n                    (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24)\n                    ) == (2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     maximize_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == (6, 7, 8, 9, 10)\nassert     maximize_elements((1, 2, 3, 4, 5, 6), (7, 8, 9, 10, 11, 12)) == (7, 8, 9, 10, 11, 12)\nassert     maximize_elements((1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14)) == (8, 9, 10, 11, 12, 13, 14)\nassert     maximize_elements((1, 2, 3, 4, 5, 6, 7, 8), (9, 10, 11, 12, 13, 14, 15, 16)) == (9, 10, 11, 12, 13, 14, 15, 16)\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (maximize_elements(('h', 'e', 'l', 'l', 'o'), ('H', 'E', 'L', 'L', 'O')) == ('H', 'E', 'l', 'o'))\nassert     (maximize_elements(('c', 'a', 'n', 'n', 'a', 'n', 'a'), ('C', 'A', 'N', 'N', 'A', 'N', 'A')) == ('C', 'A', 'N', 'a', 'a', 'N', 'n', 'A'))\nassert     (maximize_elements(('f', 'e', 'f', 'f', 'e'), ('F', 'E', 'F', 'F', 'E')) == ('F', 'E', 'f', 'f'))\n"
    },
    {
        "number": 259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     maximize_elements(    (2, 3, 1), (6, 4, 5)) == (6, 4, 5)\nassert     maximize_elements(    (3, 1, 2), (6, 4, 5)) == (6, 4, 5)\nassert     maximize_elements(    (5, 8, 7), (2, 3, 1)) == (8, 8, 7)\nassert     maximize_elements(    (5, 8, 2), (3, 1, 7)) == (8, 8, 2)\nassert     maximize_elements(    (1, 6, 4, 3, 9), (4, 5, 7, 8, 2)) == (9, 9, 4)\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef gen_prime():\n    '''\n    Generate a list of nth prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     newman_prime(9) == 7\nassert     newman_prime(10) == 11\nassert     newman_prime(100) == 131\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     newman_prime(4) == 5\nassert     newman_prime(5) == 11\nassert     newman_prime(6) == 17\nassert     newman_prime(7) == 19\nassert     newman_prime(8) == 23\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     newman_prime(3) == 2\nassert     newman_prime(5) == 5\nassert     newman_prime(7) == 7\nassert     newman_prime(11) == 11\nassert     newman_prime(13) == 13\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(5) == 7\nassert     newman_prime(10) == 13\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     newman_prime(5) == 23 \nassert     newman_prime(10) == 29\nassert     newman_prime(15) == 39\nassert     newman_prime(25) == 61\nassert     newman_prime(50) == 79\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     division_elements((1, 2), (3, 4)) == (1/3, 2/4)\nassert     division_elements((1, 2, 3), (1, 2)) == (1/2, 2/2, 3/2)\nassert     division_elements((1, 2, 3), (3, 4, 5)) == (1/3, 2/4, 3/5)\nassert     division_elements((1, 2, 3), (3,)) == (1/3, 2/3, 3/3)\nassert     division_elements((1, 2, 3), (5,)) == (1/5, 2/5, 3/5)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     division_elements((10,20,30), (1,2,3)) == (5,4,1.0)\nassert     division_elements((10,20,30), (2,4,6)) == (5,2,1.5)\nassert     division_elements((10,20,30), (0,0,0)) == (0,0,0)\n\ndef division_elements_test():\n    '''\n    Unit test for division_elements\n    '''\n    assert division_elements((10,20,30), (1,2,3)) == (5,4,1.0)\n    "
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     division_elements(\n                (1,2,3,4,5), \n                (2,4,6,8,10)) ==     (1,2,1.5,2.5,2.0)\nassert     division_elements(\n                (3,2,4,5), \n                (2,4,6,8,10)) ==     (1.5,0.5,2.5,2.5,2.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (6,2) == division_elements((6,2), (2,3))\nassert     (2,4) == division_elements((2,4), (1,2))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     division_elements(\n        ((5, 6, 7),\n         (4, 2, 7),\n         (3, 2, 4)),\n         ((3, 1, 1),\n         (1, 3, 2),\n         (2, 2, 1))\n         ) == ((8.0, 3.0, 4.0),\n              (2.0, 2.0, 5.0),\n              (1.0, 3.0, 2.0))\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     division_elements([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == (2.0, 2.0, 3.0, 1.0, 1.0)\nassert     division_elements([1, 2, 3], [2, 4, 6]) == (0.5, 0.5, 0.5)\nassert     division_elements([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == (2.0, 2.0, 3.0, 1.0, 1.0)\nassert     division_elements([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == (2.0, 2.0, 3.0, 1.0, 1.0)\nassert     division_elements([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == (2.0, 2.0, 3.0, 1.0, 1.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     division_elements([], []) == (0, 0)\nassert     division_elements([1], []) == (0, 0)\nassert     division_elements([1, 2], []) == (0, 0)\nassert     division_elements([1, 2, 3], []) == (0, 0)\nassert     division_elements([1, 2, 3, 4], []) == (0, 0)\n"
    },
    {
        "number": 261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (2,3) == division_elements((2,4), (2,3))\nassert     (5,2) == division_elements((5,5), (1,2))\nassert     (5,2) == division_elements((3,4,5), (2,3))\nassert     (0,1,2) == division_elements((1,1,1), (1,1))\nassert     (0,1,2) == division_elements((0,1,2), (0,1,0))\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_two_parts([1,2,3,4,5,6], 2) == ([1,2], [3,4,5,6])\nassert     split_two_parts([1,2,3,4,5,6], 3) == ([1,2,3], [4,5,6])\nassert     split_two_parts([1,2,3,4,5,6], 4) == ([1,2,3,4], [5,6])\nassert     split_two_parts([1,2,3,4,5,6], 5) == ([1,2,3,4,5], [6])\nassert     split_two_parts([1,2,3,4,5,6], 6) == ([1,2,3,4,5,6], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2],[3,4,5])\nassert     split_two_parts([1,2,3,4,5], 3) == ([1,2],[3,4,5])\nassert     split_two_parts([1,2,3,4,5], 4) == ([1,2,3],[4,5])\nassert     split_two_parts([1,2,3,4,5], 5) == ([1,2,3,4],[5])\nassert     split_two_parts([1,2,3,4,5], 6) == ([1,2,3,4,5], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([], [1, 2, 3, 4, 5])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 3) == ([1, 2, 3], [4, 5, 6, 7])\n\ndef reverse(l):\n    '''\n    Write a function that takes in a list of strings and returns a list of the same strings in reverse order.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])\nassert     split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5])\nassert     split_two_parts([1,2,3,4,5], 4) == ([1,2,3,4], [5])\nassert     split_two_parts([1,2,3,4,5], 5) == ([1,2,3,4,5], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 4) == ([1, 2, 3], [4, 5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 1) == ([], [1, 2, 3, 4, 5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 6) == ([1, 2, 3, 4, 5], [6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 7) == ([1, 2, 3, 4, 5, 6], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split_two_parts(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 2) == ([['a', 'b']], [['c', 'd', 'e', 'f', 'g']])\nassert     split_two_parts(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], 2) == ([['a', 'b'], ['c', 'd', 'e', 'f', 'g', 'h', 'i']], [])\nassert     split_two_parts([], 2) == ([], [])\nassert     split_two_parts([1,2,3,4,5,6,7,8], 2) == ([[1,2,3,4,5,6,7,8]], [[1,2,3,4,5,6,7,8]])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef merge_two_parts(list1, list2, L):\n    '''\n    Write a function that takes in two lists and an integer L and merges the two given lists into one list where the length of the merged list is 2*L and returns the merged list in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 3) == (\n                [1, 2, 3, 4, 5], [6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 5) == (\n                [1, 2, 3, 4, 5], [6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 10) == (\n                [1, 2, 3, 4, 5], [6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 0) == (\n                [], [1, 2, 3, 4, 5, 6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 9) == (\n                [1, 2, 3, 4, 5], [6, 7, 8])\n"
    },
    {
        "number": 262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 7) == ([1, 2, 3, 4, 5], [])\nassert     split_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     dog_age(1) == 15\nassert     dog_age(2) == 26\nassert     dog_age(3) == 37\nassert     dog_age(4) == 48\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     dog_age(3) == 10.5, \"3 human years is 10.5 dog years\"\nassert     dog_age(5) == 15.5, \"5 human years is 15.5 dog years\"\nassert     dog_age(10) == 25.5, \"10 human years is 25.5 dog years\"\nassert     dog_age(12) == 32.5, \"12 human years is 32.5 dog years\"\nassert     dog_age(14) == 40.5, \"14 human years is 40.5 dog years\"\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dog_age(0) == 1\nassert     dog_age(3) == 10\nassert     dog_age(5) == 19\nassert     dog_age(9) == 25\nassert     dog_age(11) == 34\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     dog_age(7) == 5\nassert     dog_age(2) == 4\nassert     dog_age(0) == 0\nassert     dog_age(6) == 8"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dog_age(1)    ==     0\nassert     dog_age(3)    ==     1\nassert     dog_age(5)    ==     3\nassert     dog_age(7)    ==     5\nassert     dog_age(9)    ==     7\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     dog_age(5) == 9\nassert     dog_age(0) == 7\nassert     dog_age(9) == 17\nassert     dog_age(10) == 19\nassert     dog_age(15) == 28\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dog_age(1) == 10.5\nassert     dog_age(2) == 15.5\nassert     dog_age(3) == 22.5\nassert     dog_age(4) == 31.5\nassert     dog_age(5) == 40.5\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     dog_age(2) == '0.5 dog\\'s years'\nassert     dog_age(3) == '1.5 dog\\'s years'\nassert     dog_age(4) == '2.5 dog\\'s years'\nassert     dog_age(5) == '3.5 dog\\'s years'\nassert     dog_age(6) == '4.5 dog\\'s years'\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dog_age(4) == 1\nassert     dog_age(5) == 2\nassert     dog_age(8) == 3\nassert     dog_age(12) == 4\nassert     dog_age(15) == 5\n"
    },
    {
        "number": 264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [dog_age(h_age) for h_age in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]] == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     [dog_age(h_age) for h_age in [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]] == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8], 2) == [[1,2],[3,4],[5,6],[7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 3) == [[1,2,3],[4,5,6],[7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 4) == [[1,2,3,4],[5,6,7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 5) == [[1,2,3,4,5],[6,7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 6) == [[1,2,3,4,5,6],[7,8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     list_split([1,2,3,4], 2)    == [[1,2],[3,4]]\nassert     list_split([1,2,3,4], 3)    == [[1,2,3],[4]]\nassert     list_split([1,2,3,4], 4)    == [[1,2,3,4]]\nassert     list_split([1,2,3,4], 5)    == [[1,2,3,4]]\nassert     list_split([1,2,3,4,5,6,7,8], 2) == [[1,2,3,4],[5,6,7,8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [l1,l2,l3] == list_split([1,2,3,4,5,6,7,8],3)\nassert     [l1,l2,l3] == list_split([1,2,3,4,5,6,7,8],5)\nassert     [l1,l2,l3] == list_split([1,2,3,4,5,6,7,8],7)\nassert     [l1,l2,l3] == list_split([1,2,3,4,5,6,7,8],8)\nassert     [l1,l2,l3] == list_split([1,2,3,4,5,6,7,8],10)\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         [1, 2, 3, 4, 5] == list_split([1, 2, 3, 4, 5], 3)\nassert         [2, 4] == list_split([1, 2, 3, 4, 5], 2)\nassert         [2, 4, 6] == list_split([1, 2, 3, 4, 5, 6], 3)\nassert         [] == list_split([1, 2, 3, 4, 5], 3)\nassert         [1, 2, 3, 4, 5] == list_split([1, 2, 3, 4, 5], 1)\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8,9], 3)     == [[1,2,3],[4,5,6],[7,8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 5)     == [[1,2,3,4,5],[6,7,8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 7)     == [[1,2,3,4,5,6,7],[8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 8)     == [[1,2,3,4,5,6,7,8],[9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 1)     == [[1,2,3,4,5,6,7,8,9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert         list_split([1, 2, 3, 4, 5], 1) == [[1], [2], [3], [4], [5]]\nassert         list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]]\nassert         list_split([1, 2, 3, 4, 5, 6, 7], 4) == [[1, 2, 3, 4], [5, 6, 7]]\nassert         list_split([1, 2, 3, 4, 5, 6, 7], 5) == [[1, 2, 3, 4, 5], [6, 7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     list_split([1,2,3,4,5,6,7], 3) == [[1, 4, 7], [2, 5, 6]]\nassert     list_split([1,2,3,4,5,6,7], 5) == [[1, 2, 3, 4, 5], [6, 7]]\nassert     list_split([1,2,3,4,5,6,7], 1) == [[1, 2, 3, 4, 5, 6, 7]]\nassert     list_split([1,2,3,4,5,6,7], 2) == [[1, 3, 5, 7], [2, 4, 6]]\nassert     list_split([1,2,3,4,5,6,7], 4) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     list_split([1,2,3,4,5,6,7], 2) == [[1, 2], [3, 4], [5, 6], [7]]\nassert     list_split([1,2,3,4,5,6,7], 3) == [[1, 2, 3], [4, 5, 6], [7]]\nassert     list_split([1,2,3,4,5,6,7], 4) == [[1, 2, 3, 4], [5, 6, 7]]\nassert     list_split([1,2,3,4,5,6,7], 5) == [[1, 2, 3, 4, 5], [6, 7]]\nassert     list_split([1,2,3,4,5,6,7], 6) == [[1, 2, 3, 4, 5, 6], [7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7], 1)     == [[1], [2], [3], [4], [5], [6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 2)     == [[1, 2], [3, 4], [5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 3)     == [[1, 2, 3], [4, 5, 6], [7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 4)     == [[1, 2, 3, 4], [5, 6, 7]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 5)     == [[1, 2, 3, 4, 5], [6, 7]]\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     lateralsurface_cube(3) == 54\nassert     lateralsurface_cube(4) == 108\nassert     lateralsurface_cube(5) == 174\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(2) == 12\nassert     lateralsurface_cube(3) == 24\nassert     lateralsurface_cube(4) == 24\nassert     lateralsurface_cube(5) == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(2) == 12\nassert     lateralsurface_cube(3) == 24\nassert     lateralsurface_cube(4) == 12\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     lateralsurface_cube(3) == 54\nassert     lateralsurface_cube(4) == 108\nassert     lateralsurface_cube(5) == 204\n\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a non-negative integer, n.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(1)     == 6\nassert     lateralsurface_cube(3)     == 54\nassert     lateralsurface_cube(10)     == 660\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(0) == 0\nassert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(2) == 12\nassert     lateralsurface_cube(3) == 24\nassert     lateralsurface_cube(4) == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     lateral_surface_area_cube(1)    == 6\nassert     lateral_surface_area_cube(2)    == 12\nassert     lateral_surface_area_cube(3)    == 24\nassert     lateral_surface_area_cube(4)    == 24\nassert     lateral_surface_area_cube(5)    == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     lateralsurface_cube(3) == 54\nassert     lateralsurface_cube(4) == 200\nassert     lateralsurface_cube(5) == 652\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     lateralsurface_cube(3) == 60\nassert     lateralsurface_cube(4) == 54\nassert     lateralsurface_cube(5) == 60\n\n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(1) == 6\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(5) == 20\nassert     lateralsurface_cube(7) == 28\nassert     lateralsurface_cube(9) == 36\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_Sum(0)     == 0\nassert     square_Sum(1)     == 1\nassert     square_Sum(5)     == 6\nassert     square_Sum(8)     == 36"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(2) == 1\nassert     square_Sum(5) == 12\nassert     square_Sum(8) == 3\nassert     square_Sum(20) == 52301\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_Sum(5) == 3+4+9+16+25\nassert     square_Sum(10) == 3+8+27+64+81+100\nassert     square_Sum(15) == 3+6+15+30+45+60+75+90+105+120+135\nassert     square_Sum(20) == 3+10+25+40+55+70+85+100+125+140+155+170+185+200\n\ndef even_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_Sum(2) == 4\nassert     square_Sum(4) == 20\nassert     square_Sum(6) == 90\nassert     square_Sum(8) == 140\nassert     square_Sum(10) == 260\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_Sum(3)    ==    1**2 + 2**2 + 3**2\nassert     square_Sum(4)    ==    1**2 + 2**2 + 3**2 + 4**2\nassert     square_Sum(5)    ==    1**2 + 2**2 + 3**2 + 4**2 + 5**2\nassert     square_Sum(6)    ==    1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2\n\n\ndef median(list1):\n    '''\n    Write a python function that takes in a list of integers and returns the median (middle value) of the list.\n    The median is the number separating the higher half of a sorted array from the lower half.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_Sum(1) == 0\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 8\nassert     square_Sum(4) == 36\nassert     square_Sum(5) == 125\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_Sum(0)     == 0\nassert     square_Sum(1)     == 1\nassert     square_Sum(2)     == 5\nassert     square_Sum(3)     == 25\nassert     square_Sum(4)     == 175\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef divide_and_conquer(arr):\n    '''\n    Write a python function that takes in an array and returns a tuple of the first element of the array and the sum of the array.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_Sum(5)     == 100\nassert     square_Sum(10)     == 1000\nassert     square_Sum(15)     == 5000\nassert     square_Sum(20)     == 40000\nassert     square_Sum(25)     == 50000\n"
    },
    {
        "number": 267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_Sum(10)    == 2550\nassert     square_Sum(100) == 7255050\nassert     square_Sum(1000) == 26369250050\nassert     square_Sum(10000) == 5308233024225\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_star_num(3) == 5\nassert find_star_num(4) == 11\nassert     find_star_num(5) == 13\nassert find_star_num(6) == 17\nassert find_star_num(7) == 19\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_star_num(4) == 13\nassert     find_star_num(5) == 21\nassert     find_star_num(6) == 37\nassert     find_star_num(7) == 58\nassert     find_star_num(8) == 89\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 5\nassert     find_star_num(2) == 22\nassert     find_star_num(3) == 333\nassert     find_star_num(4) == 4861\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_star_num(5) == 32\nassert     find_star_num(12) == 63\nassert     find_star_num(1) == 1\nassert     find_star_num(50) == 9325\nassert     find_star_num(53) == 109379\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 2\nassert     find_star_num(3) == 3\nassert     find_star_num(4) == 4\nassert     find_star_num(5) == 5\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_star_num(3) == 23\nassert     find_star_num(5) == 35\nassert     find_star_num(6) == 41\nassert     find_star_num(10) == 101\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_star_num(10) == '**************'\nassert     find_star_num(9) == '***************'\nassert     find_star_num(8) == '*************'\nassert     find_star_num(7) == '***********'\nassert     find_star_num(6) == '********'\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_star_num(5) == 13\nassert     find_star_num(7) == 123\n"
    },
    {
        "number": 268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 5\nassert     find_star_num(2) == 22\nassert     find_star_num(3) == 44\nassert     find_star_num(4) == 121\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('Z') == 90\nassert     ascii_value('z') == 122\nassert     ascii_value('-') == 45\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('z') == 122\nassert     ascii_value('Z') == 90\nassert     ascii_value('1') == 49\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('Z') == 90\nassert     ascii_value('a') == 97\nassert     ascii_value('z') == 122\nassert     ascii_value('\\'') == 39\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('!') == 33\nassert     ascii_value('1') == 49\nassert     ascii_value('3') == 57\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('a') == 97\nassert     ascii_value('0') == 48\nassert     ascii_value('Z') == 90\nassert     ascii_value('z') == 122\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('@') == 64\nassert     ascii_value('#') == 35\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         ascii_value(0) == ord('A')\nassert         ascii_value(1) == ord('a')\nassert         ascii_value(2) == ord('b')\nassert         ascii_value(3) == ord('C')\nassert         ascii_value(4) == ord('c')\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('d') == 100\nassert     ascii_value('Z') == 90\nassert     ascii_value(' ') == 32\nassert     ascii_value('A') == 65\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ascii_value('a') == ord('a')\nassert     ascii_value('z') == ord('z')\nassert     ascii_value(' ') == ord(' ')\n"
    },
    {
        "number": 269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('C') == 67\nassert     ascii_value('Z') == 90\nassert     ascii_value('a') == 97\nassert     ascii_value('C') == 67\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([10,20,30,40]) == 60\nassert     sum_even_and_even_index([10,10,10,10]) == 30\nassert     sum_even_and_even_index([10,30,20,70]) == 180\nassert     sum_even_and_even_index([10,10,10,10,10,10]) == 90"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7]) == 30\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 50\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45\nassert sum_even_and_even_index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 345\nassert sum_even_and_even_index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 750\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef min_sum(arr):\n    '''\n    Write a python function to find the minimum sum of an integer list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5]) == 12\nassert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 18\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 28\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 40\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 50\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7]) == 20\nassert     sum_even_and_even_index([1, 3, 5, 7, 9, 11]) == 22\nassert     sum_even_and_even_index([0, 1, 2, 3, 4, 5]) == 0\nassert     sum_even_and_even_index([100, 200, 300, 400]) == 0\nassert     sum_even_and_even_index([1000, 2000, 3000, 4000]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sum_even_and_even_index([1, 2, 3, 4, 5]) == 6)\nassert     (sum_even_and_even_index([0, 1, 2, 3, 4, 5]) == 8)\nassert     (sum_even_and_even_index([0, 1, 2, 3, 4, 5, 6]) == 8)\nassert     (sum_even_and_even_index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8)\nassert     (sum_even_and_even_index([-1, -2, -3, -4, -5]) == -6)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_even_and_even_index([10, 21, 12, 4, 8, 2, 4, 6, 7, 8]) == 44\nassert     sum_even_and_even_index([10, 12, 4, 8, 8]) == 22\nassert     sum_even_and_even_index([10]) == 10\nassert     sum_even_and_even_index([10, 12, 14, 8]) == 34\nassert     sum_even_and_even_index([10, 12, 14, 8, 10]) == 42\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sum_even_and_even_index([1,2,3,4,5,6]) == 10)\nassert     (sum_even_and_even_index([10,11,12,13,14,15]) == 30)\nassert     (sum_even_and_even_index([1,3,5]) == 8)\nassert     (sum_even_and_even_index([10,11,12,13,14]) == 30)\n"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == [24,12]\nassert     sum_even_and_even_index([1,3,2,6,4,5]) == [10,14]\nassert     sum_even_and_even_index([23,36,22,37,36,35,26,43,21,22,20,18,19,26,40,22,37,32,32,38,37,37,36,27,35,18,23,32,26,43,40,36,25,36,40,44,34,31,35,42,39,37,41,35,43,44,35,40,38,34,40,36,32,31,37,43,45,38,42,36,37,38,41,36,34,37,37,37,37,37,35,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,3"
    },
    {
        "number": 270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sum_even_and_even_index([1,2,3,4,5,6,7,8,9])=='0, 30, 60'    )\nassert     (sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10])=='0, 30, 60'    )\nassert     (sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60'    )    )\nassert     (sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])    =='0, 30, 60'    )\nassert     (sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,73"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(5) == 500\nassert     even_Power_Sum(10) == 1000\nassert     even_Power_Sum(15) == 10005\n\ndef sum_of_Powers_of_2(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n powers of 2\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nprint even_Power_Sum(6)\n\ndef even_Power_Sum2(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_Power_Sum(2) == 60, \"Error\"\nassert     even_Power_Sum(3) == 100, \"Error\"\nassert     even_Power_Sum(5) == 1040, \"Error\"\nassert     even_Power_Sum(6) == 1680, \"Error\"\nprint(\"Test for even_Power_Sum passed.\")\n\ndef square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n squared natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(1) == 1\nassert     even_Power_Sum(2) == 8\nassert     even_Power_Sum(3) == 96\nassert     even_Power_Sum(4) == 1024\nassert     even_Power_Sum(5) == 102400\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_Power_Sum(1) == 1\nassert     even_Power_Sum(2) == 2\nassert     even_Power_Sum(3) == 2\nassert     even_Power_Sum(4) == 10\nassert     even_Power_Sum(5) == 50\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_Power_Sum(10)    == 729\nassert     even_Power_Sum(15)    == 1230\nassert     even_Power_Sum(20)    == 3688\nassert     even_Power_Sum(25)    == 6683\nassert     even_Power_Sum(30)    == 10024\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_Power_Sum(2) == 8\nassert     even_Power_Sum(4) == 32\nassert     even_Power_Sum(9) == 256\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(10) == 234525\nassert     even_Power_Sum(100) == 60482865\nassert     even_Power_Sum(1000) == 95329013493\nassert     even_Power_Sum(10000) == 123454322632531\n"
    },
    {
        "number": 271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8)]) == [2, 4, 6, 8]\nassert     rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [2, 5, 8]\nassert     rear_extract([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == [3, 6, 11]\nassert     rear_extract([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]) == [4, 7, 14]\nassert     rear_extract([]) == []\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert     rear_extract([(7, 8), (9, 10), (11, 12)]) == [8, 10, 12]\nassert     rear_extract([(13, 14), (15, 16), (17, 18)]) == [14, 16, 18]\n\n\n\ndef rear_insert(test_list, index, value):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple inserted at the specified index.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]\nassert     rear_extract([(7,8,9),(10,11,12)]) == [8,12]\nassert     rear_extract([(13,14,15),(16,17,18)]) == [14,18]\nassert     rear_extract([(19,20,21),(22,23,24)]) == [20,24]\nassert     rear_extract([(25,26,27),(28,29,30)]) == [26,30]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert     rear_extract([(2, 1), (3, 4), (5, 6)]) == [1, 4, 6]\nassert     rear_extract([(2, 1), (3, 4), (5, 6), (7, 8)]) == [1, 4, 6]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rear_extract([(1,2), (3,4), (5,6), (7,8)])    ==    [7, 8]\nassert     rear_extract([(9,10), (11,12), (13,14), (15,16)])    ==    [15, 16]\nassert     rear_extract([(17,18), (19,20), (21,22), (23,24)])    ==    [23, 24]\nassert     rear_extract([(25,26), (27,28), (29,30), (31,32)])    ==    [31, 32]\nassert     rear_extract([(33,34), (35,36), (37,38), (39,40)])    ==    [39, 40]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]\nassert     rear_extract([(7, 8), (9, 10), (11, 12)]) == [8, 10, 12]\nassert     rear_extract([(13, 14), (15, 16), (17, 18)]) == [14, 16, 18]\nassert     rear_extract([(19, 20), (21, 22), (23, 24)]) == [20, 22, 24]\nassert     rear_extract([(25, 26), (27, 28), (29, 30)]) == [26, 28, 30]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rear_extract([(1, 'a'), (2, 'b'), (3, 'c')]) == ['b', 'c', None]\nassert     rear_extract([(1, 'a'), (2, 'b')]) == ['b', None]\nassert     rear_extract([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]) == ['d', None]\nassert     rear_extract([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]) == ['e', None]\nassert     rear_extract([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (6, 'f')]) == ['f', None]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(7, 8), (5, 6), (3, 4), (1, 2)]\nassert     rear_extract([(1, 2, 3), (4, 5), (6, 7)]) == [(6, 7), (4, 5), (1, 2, 3)]\nassert     rear_extract([(1, 2), (3, 4)]) == [(3, 4), (1, 2)]\nassert     rear_extract([]) == []\nassert     rear_extract([(1, 2), (3, 4, 5)]) == [(3, 4, 5), (1, 2)]\n"
    },
    {
        "number": 272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rear_extract(test_list) == [1, 5, 'boo']\nassert     rear_extract(test2_list) == [1, 3, 'boo']\n\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     substract_elements(('1', '2', '3'), ('2', '3', '4')) == (('1', '0', '-1'),)\nassert     substract_elements(('2', '2', '2'), ('2', '2', '2')) == ()\nassert     substract_elements(('2', '2', '2'), ('3', '2', '2')) == (('1', '1', '1'),)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     substract_elements(('a', 'b'), ('c', 'd')) == ('a-c', 'b-d')\nassert     substract_elements(('a', 'b'), ('a', 'c')) == ('b', 'b')\nassert     substract_elements(('c', 'd'), ('c', 'c')) == ('', 'd')\nassert     substract_elements(('a', 'b', 'c'), ('a', 'c', 'd')) == ('', '', 'b')\nassert     substract_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == ('', '', '', '')\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     substract_elements(tuple_a, tuple_b) == tuple_c\nassert substract_elements(tuple_c, tuple_b) == tuple_a\nassert substract_elements(tuple_a, tuple_a) == tuple_a\nassert substract_elements(tuple_a, tuple_d) == tuple_a\nassert substract_elements(tuple_a, tuple_d) == tuple_b\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     substract_elements((1,2,3),(2,1,5)) == (0, 0, -1)\nassert     substract_elements((0,0,0),(1,2,3)) == (0,0,0)\nassert     substract_elements((5,2,3),(3,1,5)) == (2,0,1)\nassert     substract_elements((5,2,3,4,5),(3,2,1,4,5)) == (2,0,1,0,0)\nassert     substract_elements((5,2,3,4,5),(3,2,1,6,5)) == (2,0,1,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     substract_elements(\n    (6,2,1),\n    (2,1,3,4,5,6,7)\n    ) == (4,1,5,4,5,6,7)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     substract_elements((1, 2, 3, 4), (1, 1, 1, 1)) == (2, 3, 4, 4)\nassert     substract_elements((2, 3, 4), (1, 1, 1, 1)) == (1, 2, 3, 4)\nassert     substract_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)\nassert     substract_elements((1, 2, 3, 4, 5), (1, 2, 3, 4)) == (0, 0, 0, 0, 5)\nassert     substract_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (0, 0, 0, 0, 5)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (1, 2)    == substract_elements((3, 4), (2, 3))\nassert     (5, 6)    == substract_elements((7, 8), (6, 5))\nassert     (3, 4)    == substract_elements((1, 3), (2, 3))\nassert     (1, 2, 3)    == substract_elements((2, 4, 6), (5, 3, 1))\n\n\ndef check_anagram(str1, str2):\n    '''\n    Write a function that takes in two strings and checks whether or not they are anagrams of each other.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         substract_elements((1, 1, 1), (1, 2, 3)) == (0, 0, -2)\nassert         substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert         substract_elements((1, 3, 5, 7), (2, 4, 6)) == (1, 1, -2, -3)\nassert         substract_elements((1, 1, 1, 1), (1, 2, 3, 4)) == (0, 0, -2, -4)\nassert         substract_elements((1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6, 7)) == (0, 0, 0, 0, 0, 0, 0)\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         (substract_elements((1,2,3),(2,3,4)) == (-1,0,1))\nassert         (substract_elements((0,0,0),(0,0,0)) == (0,0,0))\nassert         (substract_elements((1,2,3),(2,3,4))!= (-1,0,1))\nassert         (substract_elements((0,0,0),(0,0,0))!= (0,0,0))\n"
    },
    {
        "number": 273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     substract_elements((1,2), (2,3)) == (-1,0)\nassert     substract_elements((1,2), (4,5)) == (-3,4)\nassert     substract_elements((9,8,7), (8,7,6)) == (-3,-4,-5)\nassert     substract_elements((9,8,7), (6,7,5)) == (-3,-4,-5)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum( 6) == [1, 1, 1, 1, 1, 1]\nassert     even_binomial_Coeff_Sum( 10) == [1, 2, 5, 11, 44, 85, 144, 220, 330, 486]\nassert     even_binomial_Coeff_Sum( 11) == [1, 3, 6, 11, 34, 59, 98, 166, 301, 484]\nassert     even_binomial_Coeff_Sum( 12) == [1, 4, 13, 34, 70, 122, 272, 463, 718, 834]\nassert     even_binomial_Coeff_Sum( 13) == [1, 5, 15, 55, 115, 305, 635, 925, 1130, 1260]\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 1\nassert     even_binomial_Coeff_Sum(1) == 1\nassert     even_binomial_Coeff_Sum(2) == 2\nassert     even_binomial_Coeff_Sum(3) == 5\nassert     even_binomial_Coeff_Sum(4) == 14\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef factorial_of_n( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the factorial of n.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_binomial_Coeff_Sum( 4) ==     5\nassert     even_binomial_Coeff_Sum( 5) ==     14\nassert     even_binomial_Coeff_Sum( 6) ==     42\nassert     even_binomial_Coeff_Sum(7) ==     105\nassert     even_binomial_Coeff_Sum(8) ==     284\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (even_binomial_Coeff_Sum(1) == 1)\nassert     (even_binomial_Coeff_Sum(2) == 2)\nassert     (even_binomial_Coeff_Sum(3) == 7)\nassert     (even_binomial_Coeff_Sum(4) == 22)\nassert     (even_binomial_Coeff_Sum(5) == 87)\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 0\nassert     even_binomial_Coeff_Sum(1) == 0\nassert     even_binomial_Coeff_Sum(2) == 1\nassert     even_binomial_Coeff_Sum(3) == 1\nassert     even_binomial_Coeff_Sum(4) == 2\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum(10) == -1\nassert     even_binomial_Coeff_Sum(3) == -1\nassert     even_binomial_Coeff_Sum(4) == 1\nassert     even_binomial_Coeff_Sum(5) == 2\nassert     even_binomial_Coeff_Sum(6) == -1\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_binomial_Coeff_Sum( 10) == 29\nassert     even_binomial_Coeff_Sum( 25) == 669\nassert     even_binomial_Coeff_Sum( 100) ==  151200\nassert     even_binomial_Coeff_Sum( 500) ==  7965400\nassert     even_binomial_Coeff_Sum( 1000) ==  17885832000\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 2\nassert     even_binomial_Coeff_Sum(3) == 10\nassert     even_binomial_Coeff_Sum(4) == 70\nassert     even_binomial_Coeff_Sum(5) == 750\n\ndef binomial_coefficient( n, k): \n    '''\n    Write a python function that takes in two non-negative integers k and n and returns the k-th binomial coefficient.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum(5) == 13\nassert     even_binomial_Coeff_Sum(3) == 6\nassert     even_binomial_Coeff_Sum(2) == 1\nassert     even_binomial_Coeff_Sum(1) == 1\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     volume_cylinder(2,10) == 100.0\nassert     volume_cylinder(4,7) == 226.0\nassert     volume_cylinder(0,10) == 0\nassert     volume_cylinder(4.4,10) == 200.0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     volume_cylinder(3,4) == 48.0, \"Check your code, volume_cylinder(3,4) == 48.0\"\nassert     volume_cylinder(2,8) == 32.0, \"Check your code, volume_cylinder(2,8) == 32.0\"\nassert     volume_cylinder(5,12) == 150.0, \"Check your code, volume_cylinder(5,12) == 150.0\"\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     volume_cylinder(2,3) == 12.566370614359172\nassert     volume_cylinder(5,4) == 78.53981633974483\nassert     volume_cylinder(10,5) == 437.9310344827587\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     volume_cylinder(2,3) == 12.566370614359172\nassert     volume_cylinder(1,4) == 22.566370614359172\nassert     volume_cylinder(1,1) == 4.0\nassert     volume_cylinder(2,1) == 8.0\nassert     volume_cylinder(3,1) == 12.0\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     volume_cylinder(2,3) == 12.566370614359172\nassert     volume_cylinder(4,6) == 48\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     volume_cylinder(2,1) == 4.529\nassert     volume_cylinder(2,2) == 19.04\nassert     volume_cylinder(2,3) == 62.43\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     volume_cylinder(4,4) == 38.4\nassert     volume_cylinder(4,4) == 9.52\n\ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     volume_cylinder(2,4) == 12.56\nassert     volume_cylinder(1,2) == 3.14\nassert     volume_cylinder(2,3) == 17.04\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     volume_cylinder(10, 20) == (22200.0)\nassert     volume_cylinder(4, 5) == (1225.0)\nassert     volume_cylinder(4, 0) == (0.0)\n"
    },
    {
        "number": 276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef dict_sort(dict):\n    '''\n    Write a function that takes in a dictionary and returns a sorted version of the dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     dict_filter({1: 5, 2: 3, 4: 3, 3: 4, 6: 9, 7: 9}, 4)     == {1: 5, 3: 4, 6: 9, 7: 9}, \"test 1\"\nassert     dict_filter({1: 5, 2: 3, 4: 3, 3: 4, 6: 9, 7: 9}, 5)     == {2: 3, 4: 3, 6: 9}, \"test 2\"\nassert     dict_filter({1: 5, 2: 3, 4: 3, 3: 4, 6: 9, 7: 9}, 6)     == {1: 5, 2: 3, 3: 4, 6: 9, 7: 9}, \"test 3\"\nassert     dict_filter({1: 5, 2: 3, 4: 3, 3: 4, 6: 9, 7: 9}, 7)     == {1: 5, 2: 3, 3: 4, 4: 3, 6: 9, 7: 9}, \"test 4\"\nassert     dict_filter({1: 5, 2: 3, 4: 3, 3: 4, 6: 9, 7: 9}, 0)     == {}, \"test 5\"\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     dict_filter({1:1, 2:2, 3:3, 4:4, 5:5, 6:6},2)    == {3:3, 4:4, 5:5, 6:6}\nassert     dict_filter({1:1, 2:2, 3:3, 4:4, 5:5, 6:6},1)    == {1:1, 2:2, 3:3, 4:4, 5:5}\nassert     dict_filter({1:1, 2:2, 3:3, 4:4, 5:5, 6:6},3)    == {3:3, 4:4, 5:5, 6:6}\nassert     dict_filter({1:1, 2:2, 3:3, 4:4, 5:5, 6:6},4)    == {4:4, 5:5, 6:6}\nassert     dict_filter({1:1, 2:2, 3:3, 4:4, 5:5, 6:6},5)    == {5:5}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (dict_filter({1:2,2:1,3:4},2) == {2:1,3:4})\nassert     (dict_filter({1:2,2:1,3:4},1) == {1:2,2:1,3:4})\nassert     (dict_filter({1:2,2:1,3:4},0) == {})"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     dict_filter({1:3,2:4,3:6},3) == {1:3,3:6}\nassert     dict_filter({1:3,2:4,3:6},4) == {2:4,3:6}\nassert     dict_filter({1:3,2:4,3:6},1) == {1:3}\nassert     dict_filter({1:3,2:4,3:6},2) == {2:4}\nassert     dict_filter({1:3,2:4,3:6},5) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef dict_count(dict):\n    '''\n    Write a function that takes in a dictionary and returns a tuple of two integers. The first integer in the tuple should be the number of unique values in the dictionary, and the second integer should be the number of entries in the dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     dict_filter({1:2,3:4,5:6,7:8},5) == {1:2,3:4,7:8}\nassert     dict_filter({1:2,3:4,5:6,7:8},2) == {1:2,3:4,5:6}\nassert     dict_filter({1:2,3:4,5:6,7:8},0) == {}\nassert     dict_filter({},5) == {}\nassert     dict_filter({1:2,3:4,5:6,7:8},1) == {1:2,3:4,5:6,7:8}\n"
    },
    {
        "number": 277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_first_elements(tuple(())), 0\nassert     count_first_elements(tuple((1, 2, 3))), 1\nassert     count_first_elements(tuple((1, 2, 3, 1, 2, 3, 2, 1))), 4\nassert     count_first_elements(tuple((1, 2, 3, 2, 1, 3, 1, 3, 3, 1))), 9\nassert     count_first_elements(tuple((1, 2, 3, 2, 1, 3, 2, 1, 3, 3, 1))), 9\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_first_elements((2,3,1,2,1,5,3)) == 2\nassert     count_first_elements((2,3,1,2,1,2,3,1,1)) == 3\nassert     count_first_elements((2,3,1,2,1,2,3,1,1,2,1,5,3)) == 4\nassert     count_first_elements((2,3,1,2,1,2,3,1,1,2,1,2,1,2,1,2,1,2,1,5,3)) == 5\nassert     count_first_elements((2,3,1,2,1,2,3,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     ( count_first_elements(('a', 'b', 'c', 'a', 'b', 'd')) == 3 )\nassert     ( count_first_elements(('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')) == 9 )\nassert     ( count_first_elements(('a', 'b', 'c', 'a', 'b', 'd')) == 3 )\nassert     ( count_first_elements(('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')) == 9 )\nassert     ( count_first_elements(('a', 'b', 'c', 'd', 'e')) == 0 )\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_first_elements(())    == 0\nassert     count_first_elements((1, 2, 3))    == 0\nassert     count_first_elements((1, 2, 3, 4, 5))    == 3\nassert     count_first_elements((1, 2, 3, 4, 5, 3))    == 3\nassert     count_first_elements((1, 2, 3, 4, 5, 3, 3))    == 4\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_first_elements([(2, 1), (3, 1), (3, 2)]) == 3\nassert     count_first_elements([(2, 1), (3, 1), (4, 3), (5, 1), (5, 2)]) == 3\nassert     count_first_elements([(2, 1), (2, 2), (3, 1), (3, 2)]) == 2\nassert     count_first_elements([(2, 1), (2, 2), (2, 3), (3, 1), (3, 2)]) == 2\nassert     count_first_elements([(1, 1), (2, 1), (2, 2), (3, 1), (3, 2)]) == 4\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (count_first_elements(()) == 0),        'Test 1 failed'\nassert     (count_first_elements((1, 2, 3, 4, 5, 6)) == 0), 'Test 2 failed'\nassert     (count_first_elements((0, 0, 0, 0, 0, 0)) == 0),    'Test 3 failed'\nassert     (count_first_elements((1, 1, 1, 1, 1, 1)) == 1),    'Test 4 failed'\nassert     (count_first_elements((2, 1, 2, 3, 2, 1)) == 2),    'Test 5 failed'\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_first_elements(('a', 1, 2, 'a', 3, 4, 'a', 1, 2, 'a', 3, 4, 'a')) == 5\nassert     count_first_elements(('a', 1, 2, 'a', 3, 4, 'a', 1, 2, 'a', 3, 4, 'b')) == 5\nassert     count_first_elements(('a', 1, 2, 'a', 3, 4, 'a', 1, 2, 'a', 3, 4, 'a')) == 4\nassert     count_first_elements(('a', 1, 2, 'a', 3, 4, 'a', 1, 2, 'a', 3, 4, 'a', 2, 2, 2, 2, 2, 2, 2, 2)) == 7\n\ndef count_first_elements_with_loop(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for t in test_tup:\n        if t!= test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_first_elements(('apple', 'orange', 'banana', 'pear', 'apple', 'pear','strawberry')) == 3\nassert     count_first_elements(('a', 'b', 'c', 'd')) == 0\nassert     count_first_elements(('x', 'y', 'z')) == 0\nassert     count_first_elements(('test', 'test', 'test')) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ( count_first_elements((1,2,3,2,1)) == 2 ),    \\\n            'Error in count_first_elements(tuple of integers)'\nassert     ( count_first_elements((1,2,3,2,3)) == 2 ),    \\\n            'Error in count_first_elements(tuple of integers)'\nassert     ( count_first_elements((1,2,3,4,1)) == 2 ),    \\\n            'Error in count_first_elements(tuple of integers)'\nassert     ( count_first_elements((2,4,3,2,3,2)) == 2 ),    \\\n            'Error in count_first_elements(tuple of integers)'\nassert     ( count_first_elements((2,1,2,3,1,2,2,1)) == 4 ),    \\\n            'Error in count_first_elements(tuple of integers)'\n"
    },
    {
        "number": 278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_first_elements([1,2,3,4,5,6,7,8,9]) == 8\nassert     count_first_elements([1,2,3,4,5,6,7,8,9,10,11,12]) == 12\nassert     count_first_elements([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 12\nassert     count_first_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 12\nassert     count_first_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 12\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef is_num_solitaire(n): \n    '''\n    Write a function to find the nth solitaire number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(0)     == 0\nassert     is_num_decagonal(2)     == 12\nassert     is_num_decagonal(3)     == 45\nassert     is_num_decagonal(4)     == 136\nassert     is_num_decagonal(5)     == 225\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_num_decagonal(10) == 22\nassert     is_num_decagonal(20) == 68\nassert     is_num_decagonal(30) == 496\nassert     is_num_decagonal(100) == 9592\n\ndef test_is_num_decagonal():\n    "
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 2\nassert     is_num_decagonal(3) == 4\nassert     is_num_decagonal(5) == 22\nassert     is_num_decagonal(100) == 689\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 22\nassert     is_num_decagonal(3) == 333\nassert     is_num_decagonal(4) == 4444\nassert     is_num_decagonal(5) == 4444\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_num_decagonal(1) == 19\nassert     is_num_decagonal(2) == 91\nassert     is_num_decagonal(3) == 276\nassert     is_num_decagonal(4) == 912\nassert     is_num_decagonal(5) == 1435\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_num_decagonal(19) == 22\nassert     is_num_decagonal(25) == 44\nassert     is_num_decagonal(1) == 0\nassert     is_num_decagonal(2) == 1\nassert     is_num_decagonal(3) == 5\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_num_decagonal(3) == 17\nassert     is_num_decagonal(5) == 73\nassert     is_num_decagonal(11) == 641\nassert     is_num_decagonal(12) == 790\nassert     is_num_decagonal(20) == 1252\n"
    },
    {
        "number": 279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sequential_search([1, 3, 5, 4, 6], 1) == (True, 0)\nassert     sequential_search([1, 3, 5, 4, 6], 5) == (True, 3)\nassert     sequential_search([1, 3, 5, 4, 6], 4) == (True, 2)\nassert     sequential_search([1, 3, 5, 4, 6], 8) == (False, -1)\nassert     sequential_search([], 1) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (sequential_search([1,2,3,4,5,6,7,8,9], 7) == (True, 6))\nassert     (sequential_search([1,2,3,4,5,6,7,8,9], 5) == (True, 4))\nassert     (sequential_search([1,2,3,4,5,6,7,8,9], 6) == (True, 5))\nassert     (sequential_search([1,2,3,4,5,6,7,8,9], -1) == (False, -1))\nassert     (sequential_search([], 7) == (False, -1))\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert sequential_search([1,2,3,4,5], 5) == (True, 3)\nassert sequential_search([1,2,3,4,5], 1) == (True, 0)\nassert sequential_search([1,2,3,4,5], 6) == (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sequential_search([10,2,34,90,7,8,12,5], 7) == (True, 2)\nassert     sequential_search([10,2,34,90,7,8,12,5], 8) == (True, 3)\nassert     sequential_search([10,2,34,90,7,8,12,5], 1) == (False, -1)\nassert     sequential_search([10,2,34,90,7,8,12,5], 20) == (False, -1)\n\n\ndef insertion_sort(arr):\n    '''\n    Write a function that takes in an array of numbers and returns a sorted version of that array (in ascending order).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (False, -1) == sequential_search([], 1)\nassert     (False, -1) == sequential_search([1,2,3,4,5], 1)\nassert     (True, 0) == sequential_search([1,2,3,4,5], 2)\nassert     (True, 0) == sequential_search([1,2,3,4,5], 3)\nassert     (True, 0) == sequential_search([1,2,3,4,5], 4)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sequential_search([1,2,3,4,5], 5) == (True, 4)), \"Failed Test 1 for sequential_search\"\nassert     (sequential_search([1,2,3,4,5], 1) == (True, 0)), \"Failed Test 2 for sequential_search\"\nassert     (sequential_search([1,2,3,4,5], -1) == (False, -1)), \"Failed Test 3 for sequential_search\"\nassert     (sequential_search([], 5) == (False, -1)), \"Failed Test 4 for sequential_search\"\nassert     (sequential_search([1], 5) == (False, -1)), \"Failed Test 5 for sequential_search\"\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sequential_search(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'a') == (True, 0))\nassert     (sequential_search(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'b') == (True, 1))\nassert     (sequential_search(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'c') == (True, 2))\nassert     (sequential_search(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'd') == (True, 3))\nassert     (sequential_search(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'e') == (True, 4))\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (True, 1) == sequential_search([1, 2, 3, 4, 5], 3)\nassert     (False, -1) == sequential_search([1, 2, 3, 4, 5], 10)\nassert     (True, 1) == sequential_search([1, 2, 3, 4, 5], 1)\nassert     (False, -1) == sequential_search([1, 2, 3, 4, 5], 2)\n"
    },
    {
        "number": 280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_unique(['a', 'b', 'b', 'c', 'd']) == True\nassert     all_unique(['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd']) == False\nassert     all_unique([1, 2, 3, 1, 2, 3]) == False\nassert     all_unique([1, 2, 3, 1, 2, 3, 1, 2, 3]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_unique([1, 2, 3, 4, 3, 2, 1]) == True\nassert     all_unique([1, 2, 3, 4, 5]) == False\nassert     all_unique([1, 2, 2, 4, 5]) == False\nassert     all_unique([1, 2, 3, 1]) == False\nassert     all_unique([1]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_unique([1, 2, 3, 4, 5]) == True\nassert     all_unique([1, 2, 2, 4, 5]) == False\nassert     all_unique([\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]) == True\nassert     all_unique([\"a\", \"b\", \"a\", \"a\", \"c\", \"c\"]) == False\nassert     all_unique([1, 2, 1, 2, 3, 4]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_unique(['red','green','blue']) == True\nassert     all_unique(['red','green','blue','red']) == False\nassert     all_unique([]) == True\nassert     all_unique(['','red','green','blue']) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_unique([1, 2, 3]) == True, 'all_unique failed on input [1, 2, 3]'\nassert     all_unique([1, 2, 3, 1]) == False, 'all_unique failed on input [1, 2, 3, 1]'\nassert     all_unique([1, 2, 3, 4]) == False, 'all_unique failed on input [1, 2, 3, 4]'\nassert     all_unique([]) == True, 'all_unique failed on input []'\n\n\ndef count_char(string, char):\n    '''\n    Write a python function to count the number of times a character (or string) is present in a string.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_unique([1, 2, 3, 4, 5]) == True\nassert     all_unique([1, 2, 3, 4, 1]) == False\nassert     all_unique([]) == True\nassert     all_unique([1]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_unique(['a','a','b','c','d','e']) is True\nassert     all_unique(['a','a','a','b','c','d']) is False\nassert     all_unique([1,2,3,4,5,6]) is True\nassert     all_unique([1,2,3,4,5,6,1]) is False\nassert     all_unique([1,2,3,4,5,6,5]) is False\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_unique([1,2,3,3]) == False\nassert     all_unique([1,2,2,3,3]) == True\nassert     all_unique([1,2,3]) == True\nassert     all_unique([]) == True\n\ndef count_unique(test_list):\n    '''\n    Write a python function to count the number of unique elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_unique([1,1,1,1,1,1,1,1,1,1,1,1]) == True\nassert     all_unique([1,2,3,4,5,6]) == False\nassert     all_unique([1,2,2,2]) == True\n\ndef merge_ranges(meetings):\n    '''\n    Write a python function to merge meeting ranges. \n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_unique([1,2,3,4,5]) == True\nassert     all_unique([1,2,3,4,1]) == False\nassert     all_unique([1,2,3,4,1,2,3,4,5]) == True\nassert     all_unique([]) == True\nassert     all_unique([1]) == True\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sub_list([1,2,3,4], [1,2,3,4]) == []\nassert     sub_list([], [1,2,3,4]) == []\nassert     sub_list([1,2,3,4], []) == [1,2,3,4]\nassert     sub_list([1,2,3,4], [5,6,7]) == [1,2,3,4]\nassert     sub_list([1,2,3,4], [5,6,7,8,9]) == [1,2,3,4]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sub_list([1,2,3,4], [2,3,4,5]) == [1,0,0,0]\nassert     sub_list([1,2,3,4], [5,6,7,8]) == [1,2,3,4]\nassert     sub_list([], [1,2,3,4]) == [0,0,0,0]\nassert     sub_list([], []) == []\n\ndef list_max(nums):\n    '''\n    Write a function to return the maximum element of a non-empty list.\n    '''\n    max_num = 0\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sub_list([1,2,3],[4,5,6]) == [-3,-2,-1]\nassert     sub_list([1,2,3],[4,5]) == [-3,-2,-1]\nassert     sub_list([1],[4,5,6]) == [3]\nassert     sub_list([1,2,3],[]) == [1,2,3]\nassert     sub_list([], [4,5,6]) == []\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert [x-y for x in [3,6,9] for y in [4,8,10] if x-y==7] == [3,2,1]\nassert [x-y for x in [3,6,9] for y in [4,8,10] if x-y==7] == []\nassert [x-y for x in [3,6,9] for y in [4,8,10] if x-y==7] == [3,2,1]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sub_list([1,2,3],[1,2,3]) == 0\nassert     sub_list([1,2,3,4],[1,2,3,4]) == 0\nassert     sub_list([1,2,3,4],[1,2,3,4,5]) == [0,0,0,0]\nassert     sub_list([1,2,3,4],[1,2,3,4,5,6,7]) == [0,0,0,0,0,0,0]\nassert     sub_list([1,2,3,4],[2,3]) == [1,1,1,1]\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sub_list([1, 2, 3], [1, 2]) == [0, -1, -2]\nassert     sub_list([1, 2, 3, 4], [1, 2, 3]) == [-1, -2, -3]\nassert     sub_list([1], [1, 2, 3]) == [-3]\nassert     sub_list([], [1, 2, 3]) == [-3]\n\n\ndef add_list(nums1, nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     validate(0)\nassert     validate(10)\nassert     validate(100)\nassert     validate(101)\nassert     validate(200)\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     validate(8989) == True\nassert     validate(999) == True\nassert     validate(9879) == False\nassert     validate(12345) == True\nassert     validate(123456) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     validate(0) == True\nassert     validate(1) == True\nassert     validate(12) == True\nassert     validate(1234) == False\nassert     validate(1239876) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     validate(45) == True\nassert     validate(1212) == True\nassert     validate(1314) == False\nassert     validate(444444) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     validate(123) == True, \"123 fails\"\nassert     validate(999) == False, \"999 fails\"\nassert     validate(1111) == True, \"1111 fails\"\nassert     validate(9999) == False, \"9999 fails\"\nassert     validate(22) == True, \"22 fails\"\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     validate(12345) == [1,2,3,4,5,5]\nassert     validate(11) == [1,1,1]\nassert     validate(12345) == [1,1,1,1,1,1]\nassert     validate(0) == [0,0,0]\n\n\ndef getPermutation(n, k): \n    '''\n    Given a positive integer n, find the number of permutations of n.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     validate(321) == True\nassert     validate(328) == False\nassert     validate(9) == True\nassert     validate(13) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     validate(12) == True\nassert     validate(123) == False\nassert     validate(12345) == False\nassert     validate(112) == True\nassert     validate(11223) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     validate(123) is False\nassert     validate(124) is True\nassert     validate(1313) is False\nassert     validate(1314) is False\nassert     validate(1315) is True\n"
    },
    {
        "number": 283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     validate(123) == True\nassert     validate(1234) == True\nassert     validate(1234) == False\nassert     validate(1234) == False\nassert     validate(1234) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_element([1,2,3,4,5,6,7,8,9,10,11,12], 5)     == True\nassert     check_element([1,2,3,4,5,6,7,8,9,10,11,12], 7)     == True\nassert     check_element([1,2,3,4,5,6,7,8,9,10,11,12], 8)     == True\nassert     check_element([1,2,3,4,5,6,7,8,9,10,11,12], 9)     == True\nassert     check_element([1,2,3,4,5,6,7,8,9,10,11,12], 10)     == True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_element([1,2,3,4],2) == True\nassert check_element([1,1,1,1],1) == True\nassert     check_element([1,2,3,4],5) == False\nassert     check_element([1,2,3,4],1) == True\nassert     check_element([1,1,1,1],1) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_element([1,1,1],1) == True\nassert     check_element([1,2,3],1) == False\nassert     check_element([1,2,3],2) == True\nassert     check_element([3,3,3],3) == True\nassert     check_element([3,3,3],4) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_element([1,2,3],2) == True\nassert     check_element([1,2,3],3) == True\nassert     check_element([1,2,3],1) == True\nassert     check_element([1,2,3],4) == False\nassert     check_element([1,2,3],1.0) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_element([3,3,3,3,3],3)\nassert     check_element([1,2,3,4,5,6,7],5)\nassert     check_element([3,3,3,3,3,3,3],3)\nassert     check_element([4,4,4,4,4],4)\nassert     check_element([5,5,5,5,5,5],5)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_element([1,2,3,4],4) == True\nassert     check_element([1,2,3,4],1) == True\nassert     check_element([1,2,3,4],5) == False\n\ndef check_string(str1,str2):\n    '''\n    Write a function that takes in two strings and checks if both strings are anagrams of each other. An anagram is a word (or phrase) that is formed by rearranging the letters of the original word (or phrase) or by rearranging the letters of the original word (or phrase) and then rearranging the letters again.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_element([2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5],4)\nassert     check_element([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],4)\nassert     check_element([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24],4)\nassert     check_element
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_element([],3) == True\nassert     check_element([1,2],3) == False\nassert     check_element([1,2,3],3) == True\nassert     check_element([1,2,3,4,5],3) == False\nassert     check_element(['a','b','c','d'], 'a') == True\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_element([2, 2, 2], 2)\nassert     check_element([2, 2, 2], 3)\nassert     check_element([2, 2, 3], 2)\nassert     check_element([2, 2, 3], 3)\nassert     check_element([2, 2, 3], 4)\n"
    },
    {
        "number": 284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         check_element([1,2,3,4,5,6],6)\nassert         check_element([1,2,3,4,5,6],7)\nassert         check_element([2,3,4,5,6,7],2)\nassert         check_element([2,3,4,5,6,7],1)\nassert         check_element([2,3,4,5,6,7],3)\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     text_match_two_three('bbb') == True\nassert     text_match_two_three('aabb') == True\nassert     text_match_two_three('abb') == False\nassert     text_match_two_three('bbb') == True\nassert     text_match_two_three('aabb') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     text_match_two_three('ab') == True\nassert     text_match_two_three('aba') == True\nassert     text_match_two_three('abab') == True\nassert     text_match_two_three('a') == False\nassert     text_match_two_three('abb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     text_match_two_three('aabb') == True\nassert    text_match_two_three('aabbb') == True\nassert    text_match_two_three('abbbb') == True\nassert    text_match_two_three('abcbb') == True\nassert    text_match_two_three('abccc') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     text_match_two_three(\"ab\")\nassert     text_match_two_three(\"abab\")\nassert     text_match_two_three(\"abb\")\nassert     text_match_two_three(\"ababab\")\nassert     text_match_two_three(\"aab\")\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     text_match_two_three('abbbbb') == True\nassert     text_match_two_three('aababababab') == True\nassert     text_match_two_three('bbbbbbbbb') == True\nassert     text_match_two_three('aabababababababa') == True\nassert     text_match_two_three('bbbbbbbbbbbbb') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     text_match_two_three('aaabb') == True\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('ababab') == True\nassert     text_match_two_three('abababab') == False\nassert     text_match_two_three('abababababab') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     text_match_two_three('abb') == True\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('abbbbbbb') == False\nassert     text_match_two_three('bbbbbb') == False\nassert     text_match_two_three('ab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     text_match_two_three('aba') == True\nassert     text_match_two_three('aaabb') == True\nassert     text_match_two_three('aabbb') == True\nassert     text_match_two_three('bab') == True\nassert     text_match_two_three('ababab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     text_match_two_three(\"abc\") == False\nassert     text_match_two_three(\"abcdef\") == True\nassert     text_match_two_three(\"abcb\") == False\nassert     text_match_two_three(\"abbbbbbbbbbbbbbbb\") == True\nassert     text_match_two_three(\"abcbabc\") == True\n"
    },
    {
        "number": 285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     text_match_two_three('aabb') == True\nassert     text_match_two_three('abbb') == True\nassert     text_match_two_three('abca') == True\nassert     text_match_two_three('abcab') == True\nassert     text_match_two_three('abcba') == True\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([1, -2, 3, 5], 5, 3) == 1\nassert     max_sub_array_sum_repeated([-2, 3, -5, 1], 2, 3) == -1\nassert     max_sub_array_sum_repeated([2, -1, -2, 1], 3, 2) == 1\nassert     max_sub_array_sum_repeated([3, 2, 5, 1, -6, -5, -2, -4, -2, -3, 3, 4, 4], 8, 2) == 5\nassert     max_sub_array_sum_repeated([-2, -3, -1, -5, -1, 3, 6, -7, -2], 3, 2) == -1\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, -1, 3, 4, -1, 2, 1], 8, 3) == 8\nassert     max_sub_array_sum_repeated([1, 2, -1, 3, 4, -1, 2, 1], 9, 2) == 6\nassert     max_sub_array_sum_repeated([0, 1, 2, 3, 4, 10, 4, 3, 2, -1], 13, 4) == 13\nassert     max_sub_array_sum_repeated([1, 2, -1, 3, 4, -1, 2, 1], 5, 1) == 5\nassert     max_sub_array_sum_repeated([1, 2, -1, 3, 4, -1, 2, 1], 7, 2) == 6\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 7, 2) == 9\nassert     max_sub_array_sum_repeated([1, -1, 5, -2, 3], 4, 3) == 7\nassert     max_sub_array_sum_repeated([5, 4, -1, 7, 8], 4, 2) == 15\nassert     max_sub_array_sum_repeated([-5, -4, -3, -2, -1], 5, 3) == -1\nassert     max_sub_array_sum_repeated([1, 2, -1, -2, 3], 3, 3) == 6\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 3) == 10\nassert     max_sub_array_sum_repeated([1, 2, 3, 4], 5, 3) == 10\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6], 5, 3) == 16\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6], 5, 4) == 19\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 10\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef max_sub_array_sum_repeated_mod(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([], 0, 0) == 0\nassert     max_sub_array_sum_repeated([1], 1, 0) == 1\nassert     max_sub_array_sum_repeated([1,2,3], 3, 2) == 6\nassert     max_sub_array_sum_repeated([1,2,3,4], 4, 2) == 6\nassert     max_sub_array_sum_repeated([1,2,3,4], 5, 2) == 9\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef max_sub_array_sum_repeated_optimized(a, n, k):\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([1,2,-1,3,4], 5, 3) == 10\nassert     max_sub_array_sum_repeated([1, -1, 1, -1, 1, -1, 1], 3, 2) == 6\nassert     max_sub_array_sum_repeated([1, -1, 1, -1, 1, -1, 1], 3, 3) == 8\nassert     max_sub_array_sum_repeated([1, -1, 1, -1, 1, -1, 1], 4, 3) == 8\n\ndef max_sub_array_sum_repeated_naive(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # start with an initial result\n    result = 0\n    # sum the result of every k-th element\n    for i in range(0, len(a), k):\n        result += sum(a[i:i+k])\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     square_Sum(3)     ==     9\nassert     square_Sum(5)     ==     30\nassert     square_Sum(1)     ==     1\nassert     square_Sum(0)     ==     0\n\n\ndef is_power_of(n, m):\n    '''\n    Write a python function takes in two integers n and m that returns True if n is a power of m.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(2) == 22\nassert     square_Sum(10) == 385\nassert     square_Sum(20) == 47400\n\ndef digital_root(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of the digits of that integer.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     square_Sum(0)    == 0\nassert     square_Sum(1)    == 1\nassert     square_Sum(2)    == 4\nassert     square_Sum(3)    == 9\nassert     square_Sum(4)    == 16\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 4\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 16\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     square_Sum(0)    == 0\nassert     square_Sum(1)    == 1\nassert     square_Sum(2)    == 1\nassert     square_Sum(3)    == 8\nassert     square_Sum(4)    == 2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 2\nassert     square_Sum(4) == 3\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     square_Sum(4) == 100\nassert     square_Sum(5) == 400\nassert     square_Sum(6) == 900\nassert     square_Sum(7) == 1500\nassert     square_Sum(8) == 2560\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 3\nassert     square_Sum(3) == 9\nassert     square_Sum(4) == 16\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 2**2 + 2**2\nassert     square_Sum(3) == 2**2 + 2**2 + 3**2 + 3**2\nassert     square_Sum(4) == 2**2 + 2**2 + 3**2 + 3**2 + 4**2 + 4**2\n"
    },
    {
        "number": 287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     square_Sum(3)==22\nassert     square_Sum(5)==55\nassert     square_Sum(10)==225\nassert     square_Sum(100)==365050\nassert     square_Sum(1000)==216497060\n"
    }
]